digraph  {
m0_0 [cluster="QuantConnect.Algorithm.CSharp.HourReverseSplitRegressionAlgorithm.Initialize()", file="BacktestingResultHandler.cs", label="Entry QuantConnect.Algorithm.CSharp.HourReverseSplitRegressionAlgorithm.Initialize()", span="23-23"];
m0_1 [cluster="QuantConnect.Algorithm.CSharp.HourReverseSplitRegressionAlgorithm.Initialize()", file="BacktestingResultHandler.cs", label="SetStartDate(2013, 11, 7)", span="25-25"];
m0_2 [cluster="QuantConnect.Algorithm.CSharp.HourReverseSplitRegressionAlgorithm.Initialize()", file="BacktestingResultHandler.cs", label="SetEndDate(2013, 11, 8)", span="26-26"];
m0_3 [cluster="QuantConnect.Algorithm.CSharp.HourReverseSplitRegressionAlgorithm.Initialize()", file="BacktestingResultHandler.cs", label="SetCash(100000)", span="27-27"];
m0_4 [cluster="QuantConnect.Algorithm.CSharp.HourReverseSplitRegressionAlgorithm.Initialize()", file="BacktestingResultHandler.cs", label="SetBenchmark(x => 0)", span="28-28"];
m0_5 [cluster="QuantConnect.Algorithm.CSharp.HourReverseSplitRegressionAlgorithm.Initialize()", file="BacktestingResultHandler.cs", label="_symbol = AddEquity(''VXX'', Resolution.Hour).Symbol", span="30-30"];
m0_6 [cluster="QuantConnect.Algorithm.CSharp.HourReverseSplitRegressionAlgorithm.Initialize()", file="BacktestingResultHandler.cs", label="Exit QuantConnect.Algorithm.CSharp.HourReverseSplitRegressionAlgorithm.Initialize()", span="23-23"];
m0_11 [cluster="QuantConnect.Algorithm.QCAlgorithm.AddEquity(string, QuantConnect.Resolution, string, bool, decimal, bool)", file="BacktestingResultHandler.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.AddEquity(string, QuantConnect.Resolution, string, bool, decimal, bool)", span="1344-1344"];
m0_23 [cluster="QuantConnect.Algorithm.QCAlgorithm.Buy(QuantConnect.Symbol, int)", file="BacktestingResultHandler.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Buy(QuantConnect.Symbol, int)", span="40-40"];
m0_8 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetEndDate(int, int, int)", file="BacktestingResultHandler.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetEndDate(int, int, int)", span="1095-1095"];
m0_22 [cluster="QuantConnect.Data.Market.DataDictionary<T>.TryGetValue(QuantConnect.Symbol, out T)", file="BacktestingResultHandler.cs", label="Entry QuantConnect.Data.Market.DataDictionary<T>.TryGetValue(QuantConnect.Symbol, out T)", span="189-189"];
m0_10 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetBenchmark(System.Func<System.DateTime, decimal>)", file="BacktestingResultHandler.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetBenchmark(System.Func<System.DateTime, decimal>)", span="986-986"];
m0_15 [cluster="QuantConnect.Algorithm.CSharp.HourReverseSplitRegressionAlgorithm.OnData(QuantConnect.Data.Market.TradeBars)", file="BacktestingResultHandler.cs", label="Entry QuantConnect.Algorithm.CSharp.HourReverseSplitRegressionAlgorithm.OnData(QuantConnect.Data.Market.TradeBars)", span="33-33"];
m0_16 [cluster="QuantConnect.Algorithm.CSharp.HourReverseSplitRegressionAlgorithm.OnData(QuantConnect.Data.Market.TradeBars)", file="BacktestingResultHandler.cs", label="TradeBar bar", span="35-35"];
m0_17 [cluster="QuantConnect.Algorithm.CSharp.HourReverseSplitRegressionAlgorithm.OnData(QuantConnect.Data.Market.TradeBars)", file="BacktestingResultHandler.cs", label="!tradeBars.TryGetValue(_symbol, out bar)", span="36-36"];
m0_18 [cluster="QuantConnect.Algorithm.CSharp.HourReverseSplitRegressionAlgorithm.OnData(QuantConnect.Data.Market.TradeBars)", file="BacktestingResultHandler.cs", label="return;", span="36-36"];
m0_19 [cluster="QuantConnect.Algorithm.CSharp.HourReverseSplitRegressionAlgorithm.OnData(QuantConnect.Data.Market.TradeBars)", file="BacktestingResultHandler.cs", label="!Portfolio.Invested && Time.Date == EndDate.Date", span="38-38"];
m0_20 [cluster="QuantConnect.Algorithm.CSharp.HourReverseSplitRegressionAlgorithm.OnData(QuantConnect.Data.Market.TradeBars)", file="BacktestingResultHandler.cs", label="Buy(_symbol, 1)", span="40-40"];
m0_21 [cluster="QuantConnect.Algorithm.CSharp.HourReverseSplitRegressionAlgorithm.OnData(QuantConnect.Data.Market.TradeBars)", file="BacktestingResultHandler.cs", label="Exit QuantConnect.Algorithm.CSharp.HourReverseSplitRegressionAlgorithm.OnData(QuantConnect.Data.Market.TradeBars)", span="33-33"];
m0_7 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetStartDate(int, int, int)", file="BacktestingResultHandler.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetStartDate(int, int, int)", span="1070-1070"];
m0_9 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetCash(int)", file="BacktestingResultHandler.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetCash(int)", span="1019-1019"];
m0_12 [cluster="lambda expression", file="BacktestingResultHandler.cs", label="Entry lambda expression", span="28-28"];
m0_13 [cluster="lambda expression", file="BacktestingResultHandler.cs", label=0, span="28-28"];
m0_14 [cluster="lambda expression", file="BacktestingResultHandler.cs", label="Exit lambda expression", span="28-28"];
m0_24 [file="BacktestingResultHandler.cs", label="QuantConnect.Algorithm.CSharp.HourReverseSplitRegressionAlgorithm", span=""];
m2_153 [cluster="System.Math.Abs(decimal)", file="QCAlgorithm.Trading.cs", label="Entry System.Math.Abs(decimal)", span="0-0"];
m2_119 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, decimal, bool, string)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, decimal, bool, string)", span="437-437"];
m2_137 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, decimal, bool, string)", color=green, community=0, file="QCAlgorithm.Trading.cs", label="var security = Securities[symbol]", prediction=0, span="464-464"];
m2_133 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, decimal, bool, string)", file="QCAlgorithm.Trading.cs", label=liquidateExistingHoldings, span="451-451"];
m2_134 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, decimal, bool, string)", file="QCAlgorithm.Trading.cs", label="Portfolio.Keys", span="453-453"];
m2_138 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, decimal, bool, string)", color=green, community=0, file="QCAlgorithm.Trading.cs", label="var total = Portfolio.TotalHoldingsValue + Portfolio.Cash * security.Leverage", prediction=1, span="465-465"];
m2_144 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, decimal, bool, string)", color=green, community=0, file="QCAlgorithm.Trading.cs", label="var projectedFees = security.Model.GetOrderFee(deltaQuantity, security.Price)", prediction=2, span="482-482"];
m2_139 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, decimal, bool, string)", file="QCAlgorithm.Trading.cs", label="var deltaValue = (total * percentage) - Portfolio[symbol].HoldingsValue", span="468-468"];
m2_148 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, decimal, bool, string)", color=green, community=0, file="QCAlgorithm.Trading.cs", label="Debug(string.Format(''TOTAL {0}, VALUE {1}, QUANTITY {2}'', total, deltaValue, deltaQuantity))", prediction=1, span="495-495"];
m2_142 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, decimal, bool, string)", file="QCAlgorithm.Trading.cs", label="deltaQuantity = Math.Round(deltaValue / Securities[symbol].Price)", span="475-475"];
m2_140 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, decimal, bool, string)", file="QCAlgorithm.Trading.cs", label="var deltaQuantity = 0m", span="469-469"];
m2_143 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, decimal, bool, string)", file="QCAlgorithm.Trading.cs", label="Math.Abs(deltaQuantity) > 0", span="479-479"];
m2_145 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, decimal, bool, string)", color=green, community=0, file="QCAlgorithm.Trading.cs", label="var direction = (deltaQuantity > 0) ? 1 : -1", prediction=4, span="489-489"];
m2_146 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, decimal, bool, string)", color=green, community=0, file="QCAlgorithm.Trading.cs", label="deltaQuantity = Math.Floor(deltaQuantity * ((deltaValue - projectedFees * direction) / deltaValue))", prediction=5, span="490-490"];
m2_147 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, decimal, bool, string)", color=green, community=0, file="QCAlgorithm.Trading.cs", label="deltaQuantity = Math.Floor(deltaQuantity*0.99m)", prediction=6, span="493-493"];
m2_149 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, decimal, bool, string)", file="QCAlgorithm.Trading.cs", label="MarketOrder(symbol, (int)deltaQuantity, false, tag)", span="496-496"];
m2_126 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, decimal, bool, string)", file="QCAlgorithm.Trading.cs", label="!Portfolio.ContainsKey(symbol)", span="440-440"];
m2_127 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, decimal, bool, string)", file="QCAlgorithm.Trading.cs", label="Debug(symbol.ToUpper() + '' not found in portfolio. Request this data when initializing the algorithm.'')", span="442-442"];
m2_135 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, decimal, bool, string)", file="QCAlgorithm.Trading.cs", label="holdingSymbol != symbol && Portfolio[holdingSymbol].AbsoluteQuantity > 0", span="455-455"];
m2_136 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, decimal, bool, string)", file="QCAlgorithm.Trading.cs", label="Order(holdingSymbol, -Portfolio[holdingSymbol].Quantity)", span="458-458"];
m2_141 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, decimal, bool, string)", file="QCAlgorithm.Trading.cs", label="Math.Abs(Securities[symbol].Price) > 0", span="472-472"];
m2_129 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, decimal, bool, string)", file="QCAlgorithm.Trading.cs", label="percentage > 1", span="447-447"];
m2_131 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, decimal, bool, string)", file="QCAlgorithm.Trading.cs", label="percentage < -1", span="448-448"];
m2_132 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, decimal, bool, string)", file="QCAlgorithm.Trading.cs", label="percentage = -1", span="448-448"];
m2_130 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, decimal, bool, string)", file="QCAlgorithm.Trading.cs", label="percentage = 1", span="447-447"];
m2_128 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, decimal, bool, string)", file="QCAlgorithm.Trading.cs", label="return;", span="443-443"];
m2_150 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, decimal, bool, string)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, decimal, bool, string)", span="437-437"];
m2_120 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, float, bool, string)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, float, bool, string)", span="409-409"];
m2_121 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, float, bool, string)", file="QCAlgorithm.Trading.cs", label="SetHoldings(symbol, (decimal)percentage, liquidateExistingHoldings)", span="411-411"];
m2_122 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, float, bool, string)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, float, bool, string)", span="409-409"];
m2_155 [cluster="QuantConnect.Securities.Interfaces.ISecurityTransactionModel.GetOrderFee(decimal, decimal)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Securities.Interfaces.ISecurityTransactionModel.GetOrderFee(decimal, decimal)", span="84-84"];
m2_58 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopMarketOrder(string, int, decimal, string)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.StopMarketOrder(string, int, decimal, string)", span="261-261"];
m2_59 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopMarketOrder(string, int, decimal, string)", file="QCAlgorithm.Trading.cs", label="var error = PreOrderChecks(symbol, quantity, OrderType.StopMarket)", span="263-263"];
m2_62 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopMarketOrder(string, int, decimal, string)", file="QCAlgorithm.Trading.cs", label="var order = new StopMarketOrder(symbol, quantity, stopPrice, Time, tag, Securities[symbol].Type)", span="269-269"];
m2_63 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopMarketOrder(string, int, decimal, string)", file="QCAlgorithm.Trading.cs", label="return Transactions.AddOrder(order);", span="272-272"];
m2_60 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopMarketOrder(string, int, decimal, string)", file="QCAlgorithm.Trading.cs", label="error < 0", span="264-264"];
m2_61 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopMarketOrder(string, int, decimal, string)", file="QCAlgorithm.Trading.cs", label="return error;", span="266-266"];
m2_64 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopMarketOrder(string, int, decimal, string)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.StopMarketOrder(string, int, decimal, string)", span="261-261"];
m2_11 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(string, decimal)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Order(string, decimal)", span="170-170"];
m2_29 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(string, decimal)", file="QCAlgorithm.Trading.cs", label="return Order(symbol, (int) quantity);", span="172-172"];
m2_30 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(string, decimal)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.Order(string, decimal)", span="170-170"];
m2_24 [cluster="QuantConnect.Algorithm.QCAlgorithm.Sell(string, decimal)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Sell(string, decimal)", span="151-151"];
m2_25 [cluster="QuantConnect.Algorithm.QCAlgorithm.Sell(string, decimal)", file="QCAlgorithm.Trading.cs", label="return Order(symbol, quantity);", span="153-153"];
m2_26 [cluster="QuantConnect.Algorithm.QCAlgorithm.Sell(string, decimal)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.Sell(string, decimal)", span="151-151"];
m2_7 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(string, double)", file="QCAlgorithm.Trading.cs", label="QuantConnect.Securities.AccountEvent", span=""];
m2_27 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(string, double)", file="QCAlgorithm.Trading.cs", label="return Order(symbol, (int) quantity);", span="162-162"];
m2_28 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(string, double)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.Order(string, double)", span="160-160"];
m2_113 [cluster="System.Collections.Generic.List<T>.List()", file="QCAlgorithm.Trading.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m2_66 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopLimitOrder(string, int, decimal, decimal, string)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.StopLimitOrder(string, int, decimal, decimal, string)", span="284-284"];
m2_67 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopLimitOrder(string, int, decimal, decimal, string)", file="QCAlgorithm.Trading.cs", label="var error = PreOrderChecks(symbol, quantity, OrderType.StopLimit)", span="286-286"];
m2_70 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopLimitOrder(string, int, decimal, decimal, string)", file="QCAlgorithm.Trading.cs", label="var order = new StopLimitOrder(symbol, quantity, stopPrice, limitPrice, Time, tag, Securities[symbol].Type)", span="292-292"];
m2_71 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopLimitOrder(string, int, decimal, decimal, string)", file="QCAlgorithm.Trading.cs", label="return Transactions.AddOrder(order);", span="295-295"];
m2_68 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopLimitOrder(string, int, decimal, decimal, string)", file="QCAlgorithm.Trading.cs", label="error < 0", span="287-287"];
m2_69 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopLimitOrder(string, int, decimal, decimal, string)", file="QCAlgorithm.Trading.cs", label="return error;", span="289-289"];
m2_72 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopLimitOrder(string, int, decimal, decimal, string)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.StopLimitOrder(string, int, decimal, decimal, string)", span="284-284"];
m2_45 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(string, int, QuantConnect.Orders.OrderType)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(string, int, QuantConnect.Orders.OrderType)", span="303-303"];
m2_77 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(string, int, QuantConnect.Orders.OrderType)", file="QCAlgorithm.Trading.cs", label="!Securities.ContainsKey(symbol) && !_sentNoDataError", span="315-315"];
m2_78 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(string, int, QuantConnect.Orders.OrderType)", file="QCAlgorithm.Trading.cs", label="_sentNoDataError = true", span="317-317"];
m2_79 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(string, int, QuantConnect.Orders.OrderType)", file="QCAlgorithm.Trading.cs", label="Error(''You haven't requested '' + symbol + '' data. Add this with AddSecurity() in the Initialize() Method.'')", span="318-318"];
m2_81 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(string, int, QuantConnect.Orders.OrderType)", file="QCAlgorithm.Trading.cs", label="var security = Securities[symbol]", span="323-323"];
m2_84 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(string, int, QuantConnect.Orders.OrderType)", file="QCAlgorithm.Trading.cs", label="Error(''Asset price is $0. If using custom data make sure you've set the 'Value' property.'')", span="328-328"];
m2_87 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(string, int, QuantConnect.Orders.OrderType)", file="QCAlgorithm.Trading.cs", label="Error(''There is no data for this symbol yet, please check the security.HasData flag to ensure there is at least one data point.'')", span="335-335"];
m2_90 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(string, int, QuantConnect.Orders.OrderType)", file="QCAlgorithm.Trading.cs", label="Error(''Market order and exchange not open'')", span="342-342"];
m2_92 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(string, int, QuantConnect.Orders.OrderType)", file="QCAlgorithm.Trading.cs", label="Orders.Count > (_endDate - _startDate).TotalDays * 100", span="347-347"];
m2_93 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(string, int, QuantConnect.Orders.OrderType)", file="QCAlgorithm.Trading.cs", label="Error(''You have exceeded 100 orders per day'')", span="349-349"];
m2_76 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(string, int, QuantConnect.Orders.OrderType)", file="QCAlgorithm.Trading.cs", label="symbol = symbol.ToUpper()", span="312-312"];
m2_80 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(string, int, QuantConnect.Orders.OrderType)", file="QCAlgorithm.Trading.cs", label="return -1;", span="319-319"];
m2_82 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(string, int, QuantConnect.Orders.OrderType)", file="QCAlgorithm.Trading.cs", label="var price = security.Price", span="324-324"];
m2_86 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(string, int, QuantConnect.Orders.OrderType)", file="QCAlgorithm.Trading.cs", label="!security.HasData", span="333-333"];
m2_89 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(string, int, QuantConnect.Orders.OrderType)", file="QCAlgorithm.Trading.cs", label="type == OrderType.Market && !security.Exchange.ExchangeOpen", span="340-340"];
m2_83 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(string, int, QuantConnect.Orders.OrderType)", file="QCAlgorithm.Trading.cs", label="price == 0", span="326-326"];
m2_85 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(string, int, QuantConnect.Orders.OrderType)", file="QCAlgorithm.Trading.cs", label="return -1;", span="329-329"];
m2_88 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(string, int, QuantConnect.Orders.OrderType)", file="QCAlgorithm.Trading.cs", label="return -1;", span="336-336"];
m2_91 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(string, int, QuantConnect.Orders.OrderType)", file="QCAlgorithm.Trading.cs", label="return -3;", span="343-343"];
m2_95 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(string, int, QuantConnect.Orders.OrderType)", file="QCAlgorithm.Trading.cs", label="return 0;", span="353-353"];
m2_94 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(string, int, QuantConnect.Orders.OrderType)", file="QCAlgorithm.Trading.cs", label="return -5;", span="350-350"];
m2_74 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(string, int, QuantConnect.Orders.OrderType)", file="QCAlgorithm.Trading.cs", label="quantity == 0 || string.IsNullOrEmpty(symbol)", span="306-306"];
m2_75 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(string, int, QuantConnect.Orders.OrderType)", file="QCAlgorithm.Trading.cs", label="return -1;", span="308-308"];
m2_96 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(string, int, QuantConnect.Orders.OrderType)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(string, int, QuantConnect.Orders.OrderType)", span="303-303"];
m2_164 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(string, int, QuantConnect.Orders.OrderType)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Order(string, int, QuantConnect.Orders.OrderType)", span="535-535"];
m2_165 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(string, int, QuantConnect.Orders.OrderType)", file="QCAlgorithm.Trading.cs", label="return Order(symbol, quantity);", span="537-537"];
m2_166 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(string, int, QuantConnect.Orders.OrderType)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.Order(string, int, QuantConnect.Orders.OrderType)", span="535-535"];
m2_50 [cluster="QuantConnect.Algorithm.QCAlgorithm.LimitOrder(string, int, decimal, string)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.LimitOrder(string, int, decimal, string)", span="239-239"];
m2_51 [cluster="QuantConnect.Algorithm.QCAlgorithm.LimitOrder(string, int, decimal, string)", file="QCAlgorithm.Trading.cs", label="var error = PreOrderChecks(symbol, quantity, OrderType.Limit)", span="241-241"];
m2_54 [cluster="QuantConnect.Algorithm.QCAlgorithm.LimitOrder(string, int, decimal, string)", file="QCAlgorithm.Trading.cs", label="var order = new LimitOrder(symbol, quantity, limitPrice, Time, tag, Securities[symbol].Type)", span="247-247"];
m2_55 [cluster="QuantConnect.Algorithm.QCAlgorithm.LimitOrder(string, int, decimal, string)", file="QCAlgorithm.Trading.cs", label="return Transactions.AddOrder(order);", span="250-250"];
m2_52 [cluster="QuantConnect.Algorithm.QCAlgorithm.LimitOrder(string, int, decimal, string)", file="QCAlgorithm.Trading.cs", label="error < 0", span="242-242"];
m2_53 [cluster="QuantConnect.Algorithm.QCAlgorithm.LimitOrder(string, int, decimal, string)", file="QCAlgorithm.Trading.cs", label="return error;", span="244-244"];
m2_56 [cluster="QuantConnect.Algorithm.QCAlgorithm.LimitOrder(string, int, decimal, string)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.LimitOrder(string, int, decimal, string)", span="239-239"];
m2_57 [cluster="QuantConnect.Orders.LimitOrder.LimitOrder(string, int, decimal, System.DateTime, string, QuantConnect.SecurityType)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Orders.LimitOrder.LimitOrder(string, int, decimal, System.DateTime, string, QuantConnect.SecurityType)", span="65-65"];
m2_100 [cluster="QuantConnect.Algorithm.QCAlgorithm.Error(string)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Error(string)", span="735-735"];
m2_21 [cluster="QuantConnect.Algorithm.QCAlgorithm.Sell(string, float)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Sell(string, float)", span="140-140"];
m2_22 [cluster="QuantConnect.Algorithm.QCAlgorithm.Sell(string, float)", file="QCAlgorithm.Trading.cs", label="return Order(symbol, quantity);", span="142-142"];
m2_23 [cluster="QuantConnect.Algorithm.QCAlgorithm.Sell(string, float)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.Sell(string, float)", span="140-140"];
m2_12 [cluster="QuantConnect.Algorithm.QCAlgorithm.Buy(string, float)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Buy(string, float)", span="106-106"];
m2_13 [cluster="QuantConnect.Algorithm.QCAlgorithm.Buy(string, float)", file="QCAlgorithm.Trading.cs", label="return Order(symbol, quantity);", span="108-108"];
m2_14 [cluster="QuantConnect.Algorithm.QCAlgorithm.Buy(string, float)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.Buy(string, float)", span="106-106"];
m2_3 [cluster="QuantConnect.Securities.AccountEvent.ToString()", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Securities.AccountEvent.ToString()", span="43-43"];
m2_31 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(string, int, bool, string)", file="QCAlgorithm.Trading.cs", label="return MarketOrder(symbol, quantity, asynchronous, tag);", span="185-185"];
m2_32 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(string, int, bool, string)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.Order(string, int, bool, string)", span="183-183"];
m2_116 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, double, bool)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, double, bool)", span="396-396"];
m2_117 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, double, bool)", file="QCAlgorithm.Trading.cs", label="SetHoldings(symbol, (decimal)percentage, liquidateExistingHoldings)", span="398-398"];
m2_118 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, double, bool)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, double, bool)", span="396-396"];
m2_4 [cluster="QuantConnect.Algorithm.QCAlgorithm.Buy(string, double)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Buy(string, double)", span="84-84"];
m2_5 [cluster="QuantConnect.Algorithm.QCAlgorithm.Buy(string, double)", file="QCAlgorithm.Trading.cs", label="return Order(symbol, quantity);", span="86-86"];
m2_73 [cluster="QuantConnect.Orders.StopLimitOrder.StopLimitOrder(string, int, decimal, decimal, System.DateTime, string, QuantConnect.SecurityType)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Orders.StopLimitOrder.StopLimitOrder(string, int, decimal, decimal, System.DateTime, string, QuantConnect.SecurityType)", span="74-74"];
m2_46 [cluster="QuantConnect.Orders.MarketOrder.MarketOrder(string, int, System.DateTime, string, QuantConnect.SecurityType)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Orders.MarketOrder.MarketOrder(string, int, System.DateTime, string, QuantConnect.SecurityType)", span="57-57"];
m2_0 [cluster="QuantConnect.Algorithm.QCAlgorithm.Buy(string, int)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Buy(string, int)", span="73-73"];
m2_1 [cluster="QuantConnect.Algorithm.QCAlgorithm.Buy(string, int)", file="QCAlgorithm.Trading.cs", label="return Order(symbol, quantity);", span="75-75"];
m2_2 [cluster="QuantConnect.Algorithm.QCAlgorithm.Buy(string, int)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.Buy(string, int)", span="73-73"];
m2_65 [cluster="QuantConnect.Orders.StopMarketOrder.StopMarketOrder(string, int, decimal, System.DateTime, string, QuantConnect.SecurityType)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Orders.StopMarketOrder.StopMarketOrder(string, int, decimal, System.DateTime, string, QuantConnect.SecurityType)", span="63-63"];
m2_151 [cluster="QuantConnect.Securities.SecurityPortfolioManager.ContainsKey(string)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Securities.SecurityPortfolioManager.ContainsKey(string)", span="110-110"];
m2_152 [cluster="QuantConnect.Algorithm.QCAlgorithm.Debug(string)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Debug(string)", span="710-710"];
m2_98 [cluster="string.ToUpper()", file="QCAlgorithm.Trading.cs", label="Entry string.ToUpper()", span="0-0"];
m2_6 [cluster="decimal.ToString(string)", file="QCAlgorithm.Trading.cs", label="Entry decimal.ToString(string)", span="0-0"];
m2_8 [cluster="QuantConnect.Algorithm.QCAlgorithm.Buy(string, decimal)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Buy(string, decimal)", span="95-95"];
m2_9 [cluster="QuantConnect.Algorithm.QCAlgorithm.Buy(string, decimal)", file="QCAlgorithm.Trading.cs", label="return Order(symbol, quantity);", span="97-97"];
m2_10 [cluster="QuantConnect.Algorithm.QCAlgorithm.Buy(string, decimal)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.Buy(string, decimal)", span="95-95"];
m2_47 [cluster="QuantConnect.Securities.SecurityTransactionManager.AddOrder(QuantConnect.Orders.Order)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Securities.SecurityTransactionManager.AddOrder(QuantConnect.Orders.Order)", span="175-175"];
m2_49 [cluster="System.Threading.Thread.Sleep(int)", file="QCAlgorithm.Trading.cs", label="Entry System.Threading.Thread.Sleep(int)", span="0-0"];
m2_101 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(string)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Liquidate(string)", span="363-363"];
m2_104 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(string)", file="QCAlgorithm.Trading.cs", label="Securities.Keys", span="368-368"];
m2_105 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(string)", file="QCAlgorithm.Trading.cs", label="!Portfolio[symbol].HoldStock || (symbol != symbolToLiquidate && symbolToLiquidate != '''')", span="371-371"];
m2_107 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(string)", file="QCAlgorithm.Trading.cs", label="Portfolio[symbol].IsLong", span="374-374"];
m2_108 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(string)", file="QCAlgorithm.Trading.cs", label="quantity = -Portfolio[symbol].Quantity", span="376-376"];
m2_109 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(string)", file="QCAlgorithm.Trading.cs", label="quantity = Math.Abs(Portfolio[symbol].Quantity)", span="380-380"];
m2_110 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(string)", file="QCAlgorithm.Trading.cs", label="orderIdList.Add(Order(symbol, quantity))", span="383-383"];
m2_106 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(string)", file="QCAlgorithm.Trading.cs", label="var quantity = 0", span="373-373"];
m2_103 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(string)", file="QCAlgorithm.Trading.cs", label="symbolToLiquidate = symbolToLiquidate.ToUpper()", span="366-366"];
m2_111 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(string)", file="QCAlgorithm.Trading.cs", label="return orderIdList;", span="385-385"];
m2_102 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(string)", file="QCAlgorithm.Trading.cs", label="var orderIdList = new List<int>()", span="365-365"];
m2_112 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(string)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.Liquidate(string)", span="363-363"];
m2_158 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(string, int, QuantConnect.Orders.OrderType, bool, string)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Order(string, int, QuantConnect.Orders.OrderType, bool, string)", span="511-511"];
m2_159 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(string, int, QuantConnect.Orders.OrderType, bool, string)", file="QCAlgorithm.Trading.cs", label="return Order(symbol, quantity, asynchronous, tag);", span="513-513"];
m2_160 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(string, int, QuantConnect.Orders.OrderType, bool, string)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.Order(string, int, QuantConnect.Orders.OrderType, bool, string)", span="511-511"];
m2_33 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(string, int, bool, string)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.MarketOrder(string, int, bool, string)", span="196-196"];
m2_34 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(string, int, bool, string)", file="QCAlgorithm.Trading.cs", label="var error = PreOrderChecks(symbol, quantity, OrderType.Market)", span="199-199"];
m2_37 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(string, int, bool, string)", file="QCAlgorithm.Trading.cs", label="var order = new MarketOrder(symbol, quantity, Time, tag, Securities[symbol].Type)", span="205-205"];
m2_38 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(string, int, bool, string)", file="QCAlgorithm.Trading.cs", label="order.Price = Securities[symbol].Price", span="208-208"];
m2_39 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(string, int, bool, string)", file="QCAlgorithm.Trading.cs", label="var orderId = Transactions.AddOrder(order)", span="211-211"];
m2_41 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(string, int, bool, string)", file="QCAlgorithm.Trading.cs", label="!Transactions.Orders.ContainsKey(orderId) ||\r\n                       (Transactions.Orders[orderId].Status != OrderStatus.Filled &&\r\n                        Transactions.Orders[orderId].Status != OrderStatus.Invalid &&\r\n                        Transactions.Orders[orderId].Status != OrderStatus.Canceled) || _processingOrder", span="219-222"];
m2_35 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(string, int, bool, string)", file="QCAlgorithm.Trading.cs", label="error < 0", span="200-200"];
m2_36 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(string, int, bool, string)", file="QCAlgorithm.Trading.cs", label="return error;", span="202-202"];
m2_40 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(string, int, bool, string)", file="QCAlgorithm.Trading.cs", label="!asynchronous", span="215-215"];
m2_43 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(string, int, bool, string)", file="QCAlgorithm.Trading.cs", label="return orderId;", span="228-228"];
m2_42 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(string, int, bool, string)", file="QCAlgorithm.Trading.cs", label="Thread.Sleep(1)", span="224-224"];
m2_44 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(string, int, bool, string)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.MarketOrder(string, int, bool, string)", span="196-196"];
m2_48 [cluster="System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.ContainsKey(TKey)", file="QCAlgorithm.Trading.cs", label="Entry System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0"];
m2_99 [cluster="QuantConnect.Securities.SecurityManager.ContainsKey(string)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Securities.SecurityManager.ContainsKey(string)", span="212-212"];
m2_154 [cluster="System.Math.Round(decimal)", file="QCAlgorithm.Trading.cs", label="Entry System.Math.Round(decimal)", span="0-0"];
m2_157 [cluster="string.Format(string, object, object, object)", file="QCAlgorithm.Trading.cs", label="Entry string.Format(string, object, object, object)", span="0-0"];
m2_115 [cluster="System.Collections.Generic.List<T>.Add(T)", file="QCAlgorithm.Trading.cs", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
m2_18 [cluster="QuantConnect.Algorithm.QCAlgorithm.Sell(string, double)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Sell(string, double)", span="128-128"];
m2_19 [cluster="QuantConnect.Algorithm.QCAlgorithm.Sell(string, double)", file="QCAlgorithm.Trading.cs", label="return Order(symbol, quantity);", span="130-130"];
m2_20 [cluster="QuantConnect.Algorithm.QCAlgorithm.Sell(string, double)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.Sell(string, double)", span="128-128"];
m2_161 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(string, decimal, QuantConnect.Orders.OrderType)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Order(string, decimal, QuantConnect.Orders.OrderType)", span="523-523"];
m2_162 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(string, decimal, QuantConnect.Orders.OrderType)", file="QCAlgorithm.Trading.cs", label="return Order(symbol, (int)quantity);", span="525-525"];
m2_163 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(string, decimal, QuantConnect.Orders.OrderType)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.Order(string, decimal, QuantConnect.Orders.OrderType)", span="523-523"];
m2_156 [cluster="System.Math.Floor(decimal)", file="QCAlgorithm.Trading.cs", label="Entry System.Math.Floor(decimal)", span="0-0"];
m2_97 [cluster="string.IsNullOrEmpty(string)", file="QCAlgorithm.Trading.cs", label="Entry string.IsNullOrEmpty(string)", span="0-0"];
m2_15 [cluster="QuantConnect.Algorithm.QCAlgorithm.Sell(string, int)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Sell(string, int)", span="117-117"];
m2_16 [cluster="QuantConnect.Algorithm.QCAlgorithm.Sell(string, int)", file="QCAlgorithm.Trading.cs", label="return Order(symbol, quantity);", span="119-119"];
m2_17 [cluster="QuantConnect.Algorithm.QCAlgorithm.Sell(string, int)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.Sell(string, int)", span="117-117"];
m2_123 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, int, bool, string)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, int, bool, string)", span="423-423"];
m2_124 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, int, bool, string)", file="QCAlgorithm.Trading.cs", label="SetHoldings(symbol, (decimal)percentage, liquidateExistingHoldings)", span="425-425"];
m2_125 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, int, bool, string)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, int, bool, string)", span="423-423"];
m2_114 [cluster="System.Math.Abs(int)", file="QCAlgorithm.Trading.cs", label="Entry System.Math.Abs(int)", span="0-0"];
m2_167 [file="QCAlgorithm.Trading.cs", label="QuantConnect.Algorithm.QCAlgorithm", span=""];
m3_13 [cluster="System.Math.Abs(decimal)", file="SecurityTransactionManager.cs", label="Entry System.Math.Abs(decimal)", span="0-0"];
m3_8 [cluster="System.Math.Abs(double)", file="SecurityTransactionManager.cs", label="Entry System.Math.Abs(double)", span="0-0"];
m3_152 [cluster="QuantConnect.Orders.OrderResponse.Success(QuantConnect.Orders.OrderRequest)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Orders.OrderResponse.Success(QuantConnect.Orders.OrderRequest)", span="120-120"];
m3_176 [cluster="QuantConnect.Securities.SecurityTransactionManager.GetOpenOrders(QuantConnect.Symbol)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Securities.SecurityTransactionManager.GetOpenOrders(QuantConnect.Symbol)", span="252-252"];
m3_22 [cluster="QuantConnect.Algorithm.QCAlgorithm.Sell(QuantConnect.Symbol, double)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Sell(QuantConnect.Symbol, double)", span="94-94"];
m3_23 [cluster="QuantConnect.Algorithm.QCAlgorithm.Sell(QuantConnect.Symbol, double)", file="SecurityTransactionManager.cs", label="return Order(symbol, Math.Abs(quantity) * -1);", span="96-96"];
m3_24 [cluster="QuantConnect.Algorithm.QCAlgorithm.Sell(QuantConnect.Symbol, double)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.Sell(QuantConnect.Symbol, double)", span="94-94"];
m3_14 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, decimal)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, decimal)", span="136-136"];
m3_33 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, decimal)", file="SecurityTransactionManager.cs", label="return Order(symbol, (int) quantity);", span="138-138"];
m3_34 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, decimal)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, decimal)", span="136-136"];
m3_37 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol, int, bool, string)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol, int, bool, string)", span="162-162"];
m3_38 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol, int, bool, string)", file="SecurityTransactionManager.cs", label="var security = Securities[symbol]", span="164-164"];
m3_40 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol, int, bool, string)", file="SecurityTransactionManager.cs", label="var mooTicket = MarketOnOpenOrder(security.Symbol, quantity, tag)", span="170-170"];
m3_42 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol, int, bool, string)", file="SecurityTransactionManager.cs", label="Debug(''Converted OrderID: '' + mooTicket.OrderId + '' into a MarketOnOpen order.'')", span="173-173"];
m3_44 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol, int, bool, string)", file="SecurityTransactionManager.cs", label="var request = CreateSubmitOrderRequest(OrderType.Market, security, quantity, tag)", span="178-178"];
m3_45 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol, int, bool, string)", file="SecurityTransactionManager.cs", label="var preOrderCheckResponse = PreOrderChecks(request)", span="181-181"];
m3_47 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol, int, bool, string)", file="SecurityTransactionManager.cs", label="return OrderTicket.InvalidSubmitRequest(Transactions, request, preOrderCheckResponse);", span="184-184"];
m3_48 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol, int, bool, string)", file="SecurityTransactionManager.cs", label="var ticket = Transactions.AddOrder(request)", span="188-188"];
m3_50 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol, int, bool, string)", file="SecurityTransactionManager.cs", label="Transactions.WaitForOrder(ticket.OrderId)", span="193-193"];
m3_39 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol, int, bool, string)", file="SecurityTransactionManager.cs", label="!security.Exchange.ExchangeOpen", span="168-168"];
m3_41 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol, int, bool, string)", file="SecurityTransactionManager.cs", label="mooTicket.SubmitRequest.Response.IsSuccess && security.SubscriptionDataConfig.Resolution != Resolution.Daily", span="171-171"];
m3_43 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol, int, bool, string)", file="SecurityTransactionManager.cs", label="return mooTicket;", span="175-175"];
m3_46 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol, int, bool, string)", file="SecurityTransactionManager.cs", label="preOrderCheckResponse.IsError", span="182-182"];
m3_49 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol, int, bool, string)", file="SecurityTransactionManager.cs", label="!asynchronous", span="191-191"];
m3_51 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol, int, bool, string)", file="SecurityTransactionManager.cs", label="return ticket;", span="196-196"];
m3_52 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol, int, bool, string)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol, int, bool, string)", span="162-162"];
m3_59 [cluster="QuantConnect.Securities.SecurityTransactionManager.WaitForOrder(int)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Securities.SecurityTransactionManager.WaitForOrder(int)", span="220-220"];
m3_174 [cluster="System.Collections.Generic.List<T>.List()", file="SecurityTransactionManager.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m3_213 [cluster="QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol, double)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol, double)", span="579-579"];
m3_214 [cluster="QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol, double)", file="SecurityTransactionManager.cs", label="return CalculateOrderQuantity(symbol, (decimal)target);", span="581-581"];
m3_215 [cluster="QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol, double)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol, double)", span="579-579"];
m3_105 [cluster="QuantConnect.Algorithm.QCAlgorithm.Error(string)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Error(string)", span="1454-1454"];
m3_148 [cluster="QuantConnect.Securities.CashBook.TryGetValue(string, out QuantConnect.Securities.Cash)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Securities.CashBook.TryGetValue(string, out QuantConnect.Securities.Cash)", span="223-223"];
m3_83 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopMarketOrder(QuantConnect.Symbol, int, decimal, string)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.StopMarketOrder(QuantConnect.Symbol, int, decimal, string)", span="268-268"];
m3_84 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopMarketOrder(QuantConnect.Symbol, int, decimal, string)", file="SecurityTransactionManager.cs", label="var security = Securities[symbol]", span="270-270"];
m3_85 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopMarketOrder(QuantConnect.Symbol, int, decimal, string)", file="SecurityTransactionManager.cs", label="var request = CreateSubmitOrderRequest(OrderType.StopMarket, security, quantity, tag, stopPrice: stopPrice)", span="271-271"];
m3_86 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopMarketOrder(QuantConnect.Symbol, int, decimal, string)", file="SecurityTransactionManager.cs", label="var response = PreOrderChecks(request)", span="272-272"];
m3_88 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopMarketOrder(QuantConnect.Symbol, int, decimal, string)", file="SecurityTransactionManager.cs", label="return OrderTicket.InvalidSubmitRequest(Transactions, request, response);", span="275-275"];
m3_89 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopMarketOrder(QuantConnect.Symbol, int, decimal, string)", file="SecurityTransactionManager.cs", label="return Transactions.AddOrder(request);", span="278-278"];
m3_87 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopMarketOrder(QuantConnect.Symbol, int, decimal, string)", file="SecurityTransactionManager.cs", label="response.IsError", span="273-273"];
m3_90 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopMarketOrder(QuantConnect.Symbol, int, decimal, string)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.StopMarketOrder(QuantConnect.Symbol, int, decimal, string)", span="268-268"];
m3_146 [cluster="QuantConnect.Symbol.ToString()", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Symbol.ToString()", span="208-208"];
m3_190 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, decimal, bool, string)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, decimal, bool, string)", span="540-540"];
m3_198 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, decimal, bool, string)", file="SecurityTransactionManager.cs", label="!Securities.TryGetValue(symbol, out security)", span="544-544"];
m3_199 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, decimal, bool, string)", file="SecurityTransactionManager.cs", label="Error(symbol.ToString() + '' not found in portfolio. Request this data when initializing the algorithm.'')", span="546-546"];
m3_202 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, decimal, bool, string)", file="SecurityTransactionManager.cs", label=Portfolio, span="553-553"];
m3_206 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, decimal, bool, string)", file="SecurityTransactionManager.cs", label="Order(holdingSymbol, -holdings.Quantity, false, tag)", span="560-560"];
m3_207 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, decimal, bool, string)", file="SecurityTransactionManager.cs", label="var quantity = CalculateOrderQuantity(symbol, percentage)", span="566-566"];
m3_209 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, decimal, bool, string)", file="SecurityTransactionManager.cs", label="MarketOrder(symbol, quantity, false, tag)", span="569-569"];
m3_197 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, decimal, bool, string)", file="SecurityTransactionManager.cs", label="Security security", span="543-543"];
m3_201 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, decimal, bool, string)", file="SecurityTransactionManager.cs", label=liquidateExistingHoldings, span="551-551"];
m3_200 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, decimal, bool, string)", file="SecurityTransactionManager.cs", label="return;", span="547-547"];
m3_205 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, decimal, bool, string)", file="SecurityTransactionManager.cs", label="holdingSymbol != symbol && holdings.AbsoluteQuantity > 0", span="557-557"];
m3_203 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, decimal, bool, string)", file="SecurityTransactionManager.cs", label="var holdingSymbol = kvp.Key", span="555-555"];
m3_204 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, decimal, bool, string)", file="SecurityTransactionManager.cs", label="var holdings = kvp.Value", span="556-556"];
m3_208 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, decimal, bool, string)", file="SecurityTransactionManager.cs", label="Math.Abs(quantity) > 0", span="567-567"];
m3_210 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, decimal, bool, string)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, decimal, bool, string)", span="540-540"];
m3_180 [cluster="lambda expression", file="SecurityTransactionManager.cs", label="Entry lambda expression", span="429-429"];
m3_181 [cluster="lambda expression", file="SecurityTransactionManager.cs", label="x.Value", span="429-429"];
m3_182 [cluster="lambda expression", file="SecurityTransactionManager.cs", label="Exit lambda expression", span="429-429"];
m3_19 [cluster="QuantConnect.Algorithm.QCAlgorithm.Sell(QuantConnect.Symbol, int)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Sell(QuantConnect.Symbol, int)", span="83-83"];
m3_20 [cluster="QuantConnect.Algorithm.QCAlgorithm.Sell(QuantConnect.Symbol, int)", file="SecurityTransactionManager.cs", label="return Order(symbol, Math.Abs(quantity) * -1);", span="85-85"];
m3_21 [cluster="QuantConnect.Algorithm.QCAlgorithm.Sell(QuantConnect.Symbol, int)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.Sell(QuantConnect.Symbol, int)", span="83-83"];
m3_178 [cluster="QuantConnect.Securities.SecurityTransactionManager.CancelOrder(int)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Securities.SecurityTransactionManager.CancelOrder(int)", span="163-163"];
m3_254 [cluster="QuantConnect.Securities.ISecurityMarginModel.GetInitialMarginRequiredForOrder(QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Securities.ISecurityMarginModel.GetInitialMarginRequiredForOrder(QuantConnect.Securities.Security, QuantConnect.Orders.Order)", span="47-47"];
m3_261 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, int, QuantConnect.Orders.OrderType)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, int, QuantConnect.Orders.OrderType)", span="693-693"];
m3_262 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, int, QuantConnect.Orders.OrderType)", file="SecurityTransactionManager.cs", label="return Order(symbol, quantity);", span="695-695"];
m3_263 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, int, QuantConnect.Orders.OrderType)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, int, QuantConnect.Orders.OrderType)", span="693-693"];
m3_191 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, float, bool, string)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, float, bool, string)", span="512-512"];
m3_192 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, float, bool, string)", file="SecurityTransactionManager.cs", label="SetHoldings(symbol, (decimal)percentage, liquidateExistingHoldings, tag)", span="514-514"];
m3_193 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, float, bool, string)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, float, bool, string)", span="512-512"];
m3_91 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopLimitOrder(QuantConnect.Symbol, int, decimal, decimal, string)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.StopLimitOrder(QuantConnect.Symbol, int, decimal, decimal, string)", span="290-290"];
m3_92 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopLimitOrder(QuantConnect.Symbol, int, decimal, decimal, string)", file="SecurityTransactionManager.cs", label="var security = Securities[symbol]", span="292-292"];
m3_93 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopLimitOrder(QuantConnect.Symbol, int, decimal, decimal, string)", file="SecurityTransactionManager.cs", label="var request = CreateSubmitOrderRequest(OrderType.StopLimit, security, quantity, tag, stopPrice: stopPrice, limitPrice: limitPrice)", span="293-293"];
m3_94 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopLimitOrder(QuantConnect.Symbol, int, decimal, decimal, string)", file="SecurityTransactionManager.cs", label="var response = PreOrderChecks(request)", span="294-294"];
m3_96 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopLimitOrder(QuantConnect.Symbol, int, decimal, decimal, string)", file="SecurityTransactionManager.cs", label="return OrderTicket.InvalidSubmitRequest(Transactions, request, response);", span="297-297"];
m3_97 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopLimitOrder(QuantConnect.Symbol, int, decimal, decimal, string)", file="SecurityTransactionManager.cs", label="return Transactions.AddOrder(request);", span="301-301"];
m3_95 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopLimitOrder(QuantConnect.Symbol, int, decimal, decimal, string)", file="SecurityTransactionManager.cs", label="response.IsError", span="295-295"];
m3_98 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopLimitOrder(QuantConnect.Symbol, int, decimal, decimal, string)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.StopLimitOrder(QuantConnect.Symbol, int, decimal, decimal, string)", span="290-290"];
m3_150 [cluster="QuantConnect.Securities.SecurityExchangeHours.GetNextMarketClose(System.DateTime, bool)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Securities.SecurityExchangeHours.GetNextMarketClose(System.DateTime, bool)", span="224-224"];
m3_15 [cluster="QuantConnect.Algorithm.QCAlgorithm.Buy(QuantConnect.Symbol, float)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Buy(QuantConnect.Symbol, float)", span="72-72"];
m3_16 [cluster="QuantConnect.Algorithm.QCAlgorithm.Buy(QuantConnect.Symbol, float)", file="SecurityTransactionManager.cs", label="return Order(symbol, Math.Abs(quantity));", span="74-74"];
m3_17 [cluster="QuantConnect.Algorithm.QCAlgorithm.Buy(QuantConnect.Symbol, float)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.Buy(QuantConnect.Symbol, float)", span="72-72"];
m3_0 [cluster="QuantConnect.Packets.OrderEventPacket.OrderEventPacket()", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Packets.OrderEventPacket.OrderEventPacket()", span="55-55"];
m3_1 [cluster="QuantConnect.Packets.OrderEventPacket.OrderEventPacket()", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Packets.OrderEventPacket.OrderEventPacket()", span="55-55"];
m3_2 [cluster="QuantConnect.Packets.OrderEventPacket.OrderEventPacket(string, QuantConnect.Orders.OrderEvent)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Packets.OrderEventPacket.OrderEventPacket(string, QuantConnect.Orders.OrderEvent)", span="62-62"];
m3_104 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", span="324-324"];
m3_112 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", color=green, community=0, file="SecurityTransactionManager.cs", label="!security.IsTradable", prediction=7, span="342-342"];
m3_111 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="SecurityTransactionManager.cs", label="var security = Securities[request.Symbol]", span="340-340"];
m3_113 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="SecurityTransactionManager.cs", label="return OrderResponse.Error(request, OrderResponseErrorCode.NonTradableSecurity, ''The security with symbol ''' + request.Symbol.ToString() + ''' is marked as non-tradable.'');", span="344-344"];
m3_114 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="SecurityTransactionManager.cs", label="var price = security.Price", span="347-347"];
m3_108 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="SecurityTransactionManager.cs", label="!Securities.ContainsKey(request.Symbol) && !_sentNoDataError", span="333-333"];
m3_115 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="SecurityTransactionManager.cs", label="request.OrderType == OrderType.MarketOnClose && !security.Exchange.ExchangeOpen", span="350-350"];
m3_120 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="SecurityTransactionManager.cs", label="var quoteCurrency = security.QuoteCurrency.Symbol", span="362-362"];
m3_123 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="SecurityTransactionManager.cs", label="security.QuoteCurrency.ConversionRate == 0m", span="367-367"];
m3_125 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="SecurityTransactionManager.cs", label="security.Type == SecurityType.Forex", span="373-373"];
m3_127 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="SecurityTransactionManager.cs", label="var baseCurrency = ((Forex) security).BaseCurrencySymbol", span="376-376"];
m3_132 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="SecurityTransactionManager.cs", label="!security.HasData", span="388-388"];
m3_138 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="SecurityTransactionManager.cs", label="var nextMarketClose = security.Exchange.Hours.GetNextMarketClose(security.LocalTime, false)", span="402-402"];
m3_140 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="SecurityTransactionManager.cs", label="!security.Exchange.ExchangeOpen || Time > latestSubmissionTime", span="405-405"];
m3_117 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="SecurityTransactionManager.cs", label="price == 0", span="355-355"];
m3_109 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="SecurityTransactionManager.cs", label="_sentNoDataError = true", span="335-335"];
m3_121 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="SecurityTransactionManager.cs", label="!Portfolio.CashBook.TryGetValue(quoteCurrency, out quoteCash)", span="363-363"];
m3_128 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="SecurityTransactionManager.cs", label="!Portfolio.CashBook.TryGetValue(baseCurrency, out baseCash)", span="377-377"];
m3_134 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="SecurityTransactionManager.cs", label="Transactions.OrdersCount > _maxOrders", span="394-394"];
m3_135 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="SecurityTransactionManager.cs", label="Status = AlgorithmStatus.Stopped", span="396-396"];
m3_136 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="SecurityTransactionManager.cs", label="return OrderResponse.Error(request, OrderResponseErrorCode.ExceededMaximumOrders, string.Format(''You have exceeded maximum number of orders ({0}), for unlimited orders upgrade your account.'', _maxOrders));", span="397-397"];
m3_106 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="SecurityTransactionManager.cs", label="request.Quantity == 0 || request.Symbol == null || request.Symbol == QuantConnect.Symbol.Empty", span="327-327"];
m3_107 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="SecurityTransactionManager.cs", label="return OrderResponse.ZeroQuantity(request);", span="329-329"];
m3_110 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="SecurityTransactionManager.cs", label="return OrderResponse.Error(request, OrderResponseErrorCode.MissingSecurity, ''You haven't requested '' + request.Symbol.ToString() + '' data. Add this with AddSecurity() in the Initialize() Method.'');", span="336-336"];
m3_116 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="SecurityTransactionManager.cs", label="return OrderResponse.Error(request, OrderResponseErrorCode.ExchangeNotOpen, request.OrderType + '' order and exchange not open.'');", span="352-352"];
m3_118 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="SecurityTransactionManager.cs", label="return OrderResponse.Error(request, OrderResponseErrorCode.SecurityPriceZero, request.Symbol.ToString() + '': asset price is $0. If using custom data make sure you've set the 'Value' property.'');", span="357-357"];
m3_122 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="SecurityTransactionManager.cs", label="return OrderResponse.Error(request, OrderResponseErrorCode.QuoteCurrencyRequired, request.Symbol.Value + '': requires '' + quoteCurrency + '' in the cashbook to trade.'');", span="365-365"];
m3_124 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="SecurityTransactionManager.cs", label="return OrderResponse.Error(request, OrderResponseErrorCode.ConversionRateZero, request.Symbol.Value + '': requires '' + quoteCurrency + '' to have a non-zero conversion rate. This can be caused by lack of data.'');", span="369-369"];
m3_129 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="SecurityTransactionManager.cs", label="return OrderResponse.Error(request, OrderResponseErrorCode.ForexBaseAndQuoteCurrenciesRequired, request.Symbol.Value + '': requires '' + baseCurrency + '' and '' + quoteCurrency + '' in the cashbook to trade.'');", span="379-379"];
m3_131 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="SecurityTransactionManager.cs", label="return OrderResponse.Error(request, OrderResponseErrorCode.ForexConversionRateZero, request.Symbol.Value + '': requires '' + baseCurrency + '' and '' + quoteCurrency + '' to have non-zero conversion rates. This can be caused by lack of data.'');", span="383-383"];
m3_133 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="SecurityTransactionManager.cs", label="return OrderResponse.Error(request, OrderResponseErrorCode.SecurityHasNoData, ''There is no data for this symbol yet, please check the security.HasData flag to ensure there is at least one data point.'');", span="390-390"];
m3_137 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="SecurityTransactionManager.cs", label="request.OrderType == OrderType.MarketOnClose", span="400-400"];
m3_141 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="SecurityTransactionManager.cs", label="return OrderResponse.Error(request, OrderResponseErrorCode.MarketOnCloseOrderTooLate, ''MarketOnClose orders must be placed with at least a 16 minute buffer before market close.'');", span="410-410"];
m3_142 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="SecurityTransactionManager.cs", label="return OrderResponse.Success(request);", span="415-415"];
m3_119 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="SecurityTransactionManager.cs", label="Cash quoteCash", span="361-361"];
m3_126 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="SecurityTransactionManager.cs", label="Cash baseCash", span="375-375"];
m3_130 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="SecurityTransactionManager.cs", label="baseCash.ConversionRate == 0m", span="381-381"];
m3_139 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="SecurityTransactionManager.cs", label="var latestSubmissionTime = nextMarketClose.AddMinutes(-15.50)", span="404-404"];
m3_143 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", span="324-324"];
m3_25 [cluster="QuantConnect.Algorithm.QCAlgorithm.Sell(QuantConnect.Symbol, float)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Sell(QuantConnect.Symbol, float)", span="106-106"];
m3_26 [cluster="QuantConnect.Algorithm.QCAlgorithm.Sell(QuantConnect.Symbol, float)", file="SecurityTransactionManager.cs", label="return Order(symbol, Math.Abs(quantity) * -1);", span="108-108"];
m3_27 [cluster="QuantConnect.Algorithm.QCAlgorithm.Sell(QuantConnect.Symbol, float)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.Sell(QuantConnect.Symbol, float)", span="106-106"];
m3_5 [cluster="QuantConnect.Packets.OrderEventPacket.OrderEventPacket(string, QuantConnect.Orders.OrderEvent)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Packets.OrderEventPacket.OrderEventPacket(string, QuantConnect.Orders.OrderEvent)", span="62-62"];
m3_6 [cluster="QuantConnect.Algorithm.QCAlgorithm.Buy(QuantConnect.Symbol, double)", file="SecurityTransactionManager.cs", label="QuantConnect.Packets.OrderEventPacket", span=""];
m3_7 [cluster="QuantConnect.Algorithm.QCAlgorithm.Buy(QuantConnect.Symbol, double)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.Buy(QuantConnect.Symbol, double)", span="50-50"];
m3_258 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, decimal, QuantConnect.Orders.OrderType)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, decimal, QuantConnect.Orders.OrderType)", span="681-681"];
m3_259 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, decimal, QuantConnect.Orders.OrderType)", file="SecurityTransactionManager.cs", label="return Order(symbol, (int)quantity);", span="683-683"];
m3_260 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, decimal, QuantConnect.Orders.OrderType)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, decimal, QuantConnect.Orders.OrderType)", span="681-681"];
m3_252 [cluster="QuantConnect.Securities.SecurityPortfolioManager.GetMarginRemaining(QuantConnect.Symbol, QuantConnect.Orders.OrderDirection)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Securities.SecurityPortfolioManager.GetMarginRemaining(QuantConnect.Symbol, QuantConnect.Orders.OrderDirection)", span="498-498"];
m3_18 [cluster="System.Math.Abs(float)", file="SecurityTransactionManager.cs", label="Entry System.Math.Abs(float)", span="0-0"];
m3_54 [cluster="QuantConnect.Algorithm.QCAlgorithm.Debug(string)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Debug(string)", span="1429-1429"];
m3_147 [cluster="QuantConnect.Orders.OrderResponse.Error(QuantConnect.Orders.OrderRequest, QuantConnect.Orders.OrderResponseErrorCode, string)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Orders.OrderResponse.Error(QuantConnect.Orders.OrderRequest, QuantConnect.Orders.OrderResponseErrorCode, string)", span="128-128"];
m3_53 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOnOpenOrder(QuantConnect.Symbol, int, string)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.MarketOnOpenOrder(QuantConnect.Symbol, int, string)", span="206-206"];
m3_60 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOnOpenOrder(QuantConnect.Symbol, int, string)", file="SecurityTransactionManager.cs", label="var security = Securities[symbol]", span="208-208"];
m3_61 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOnOpenOrder(QuantConnect.Symbol, int, string)", file="SecurityTransactionManager.cs", label="var request = CreateSubmitOrderRequest(OrderType.MarketOnOpen, security, quantity, tag)", span="209-209"];
m3_62 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOnOpenOrder(QuantConnect.Symbol, int, string)", file="SecurityTransactionManager.cs", label="var response = PreOrderChecks(request)", span="210-210"];
m3_64 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOnOpenOrder(QuantConnect.Symbol, int, string)", file="SecurityTransactionManager.cs", label="return OrderTicket.InvalidSubmitRequest(Transactions, request, response);", span="213-213"];
m3_65 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOnOpenOrder(QuantConnect.Symbol, int, string)", file="SecurityTransactionManager.cs", label="return Transactions.AddOrder(request);", span="216-216"];
m3_63 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOnOpenOrder(QuantConnect.Symbol, int, string)", file="SecurityTransactionManager.cs", label="response.IsError", span="211-211"];
m3_66 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOnOpenOrder(QuantConnect.Symbol, int, string)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.MarketOnOpenOrder(QuantConnect.Symbol, int, string)", span="206-206"];
m3_251 [cluster="QuantConnect.Orders.Order.GetValue(QuantConnect.Securities.Security)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Orders.Order.GetValue(QuantConnect.Securities.Security)", span="174-174"];
m3_9 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, double)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, double)", span="126-126"];
m3_31 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, double)", file="SecurityTransactionManager.cs", label="return Order(symbol, (int) quantity);", span="128-128"];
m3_32 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, double)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, double)", span="126-126"];
m3_266 [cluster="QuantConnect.Orders.SubmitOrderRequest.SubmitOrderRequest(QuantConnect.Orders.OrderType, QuantConnect.SecurityType, QuantConnect.Symbol, int, decimal, decimal, System.DateTime, string)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Orders.SubmitOrderRequest.SubmitOrderRequest(QuantConnect.Orders.OrderType, QuantConnect.SecurityType, QuantConnect.Symbol, int, decimal, decimal, System.DateTime, string)", span="92-92"];
m3_149 [cluster="string.Format(string, object)", file="SecurityTransactionManager.cs", label="Entry string.Format(string, object)", span="0-0"];
m3_75 [cluster="QuantConnect.Algorithm.QCAlgorithm.LimitOrder(QuantConnect.Symbol, int, decimal, string)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.LimitOrder(QuantConnect.Symbol, int, decimal, string)", span="247-247"];
m3_76 [cluster="QuantConnect.Algorithm.QCAlgorithm.LimitOrder(QuantConnect.Symbol, int, decimal, string)", file="SecurityTransactionManager.cs", label="var security = Securities[symbol]", span="249-249"];
m3_77 [cluster="QuantConnect.Algorithm.QCAlgorithm.LimitOrder(QuantConnect.Symbol, int, decimal, string)", file="SecurityTransactionManager.cs", label="var request = CreateSubmitOrderRequest(OrderType.Limit, security, quantity, tag, limitPrice: limitPrice)", span="250-250"];
m3_78 [cluster="QuantConnect.Algorithm.QCAlgorithm.LimitOrder(QuantConnect.Symbol, int, decimal, string)", file="SecurityTransactionManager.cs", label="var response = PreOrderChecks(request)", span="251-251"];
m3_80 [cluster="QuantConnect.Algorithm.QCAlgorithm.LimitOrder(QuantConnect.Symbol, int, decimal, string)", file="SecurityTransactionManager.cs", label="return OrderTicket.InvalidSubmitRequest(Transactions, request, response);", span="254-254"];
m3_81 [cluster="QuantConnect.Algorithm.QCAlgorithm.LimitOrder(QuantConnect.Symbol, int, decimal, string)", file="SecurityTransactionManager.cs", label="return Transactions.AddOrder(request);", span="257-257"];
m3_79 [cluster="QuantConnect.Algorithm.QCAlgorithm.LimitOrder(QuantConnect.Symbol, int, decimal, string)", file="SecurityTransactionManager.cs", label="response.IsError", span="252-252"];
m3_82 [cluster="QuantConnect.Algorithm.QCAlgorithm.LimitOrder(QuantConnect.Symbol, int, decimal, string)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.LimitOrder(QuantConnect.Symbol, int, decimal, string)", span="247-247"];
m3_211 [cluster="QuantConnect.Securities.SecurityManager.TryGetValue(QuantConnect.Symbol, out QuantConnect.Securities.Security)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Securities.SecurityManager.TryGetValue(QuantConnect.Symbol, out QuantConnect.Securities.Security)", span="199-199"];
m3_212 [cluster="QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol, decimal)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol, decimal)", span="592-592"];
m3_216 [cluster="QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol, decimal)", file="SecurityTransactionManager.cs", label="var security = Securities[symbol]", span="594-594"];
m3_222 [cluster="QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol, decimal)", file="SecurityTransactionManager.cs", label="var targetPortfolioValue = target*Portfolio.TotalPortfolioValue", span="604-604"];
m3_227 [cluster="QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol, decimal)", file="SecurityTransactionManager.cs", label="var unitPrice = new MarketOrder(symbol, 1, UtcTime).GetValue(security)", span="613-613"];
m3_228 [cluster="QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol, decimal)", file="SecurityTransactionManager.cs", label="var marginRemaining = Portfolio.GetMarginRemaining(symbol, direction)", span="616-616"];
m3_241 [cluster="QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol, decimal)", file="SecurityTransactionManager.cs", label="var order = new MarketOrder(security.Symbol, orderQuantity, UtcTime)", span="642-642"];
m3_217 [cluster="QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol, decimal)", file="SecurityTransactionManager.cs", label="var price = security.Price", span="595-595"];
m3_221 [cluster="QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol, decimal)", file="SecurityTransactionManager.cs", label="return -security.Holdings.Quantity;", span="601-601"];
m3_223 [cluster="QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol, decimal)", file="SecurityTransactionManager.cs", label="var quantity = security.Holdings.Quantity", span="605-605"];
m3_242 [cluster="QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol, decimal)", file="SecurityTransactionManager.cs", label="orderValue = order.GetValue(security)", span="643-643"];
m3_243 [cluster="QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol, decimal)", file="SecurityTransactionManager.cs", label="orderFees = security.FeeModel.GetOrderFee(security, order)", span="644-644"];
m3_245 [cluster="QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol, decimal)", file="SecurityTransactionManager.cs", label="marginRequired = security.MarginModel.GetInitialMarginRequiredForOrder(security, order)", span="648-648"];
m3_220 [cluster="QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol, decimal)", file="SecurityTransactionManager.cs", label="target == 0", span="601-601"];
m3_225 [cluster="QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol, decimal)", file="SecurityTransactionManager.cs", label="var targetOrderValue = Math.Abs(targetPortfolioValue - currentHoldingsValue)", span="609-609"];
m3_226 [cluster="QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol, decimal)", file="SecurityTransactionManager.cs", label="var direction = targetPortfolioValue > currentHoldingsValue ? OrderDirection.Buy : OrderDirection.Sell", span="610-610"];
m3_235 [cluster="QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol, decimal)", file="SecurityTransactionManager.cs", label="var orderQuantity = (int)(targetOrderValue / unitPrice)", span="626-626"];
m3_244 [cluster="QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol, decimal)", file="SecurityTransactionManager.cs", label="feeToPriceRatio = (int)(orderFees / unitPrice)", span="645-645"];
m3_229 [cluster="QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol, decimal)", file="SecurityTransactionManager.cs", label="marginRemaining <= 0", span="617-617"];
m3_247 [cluster="QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol, decimal)", file="SecurityTransactionManager.cs", label="orderQuantity > 0 && (marginRequired > marginRemaining || orderValue + orderFees > targetOrderValue)", span="652-652"];
m3_239 [cluster="QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol, decimal)", file="SecurityTransactionManager.cs", label="orderQuantity -= feeToPriceRatio", span="636-636"];
m3_240 [cluster="QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol, decimal)", file="SecurityTransactionManager.cs", label="orderQuantity--", span="638-638"];
m3_237 [cluster="QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol, decimal)", file="SecurityTransactionManager.cs", label="iterations > 0", span="632-632"];
m3_218 [cluster="QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol, decimal)", file="SecurityTransactionManager.cs", label="price == 0", span="598-598"];
m3_224 [cluster="QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol, decimal)", file="SecurityTransactionManager.cs", label="var currentHoldingsValue = price*quantity", span="606-606"];
m3_246 [cluster="QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol, decimal)", file="SecurityTransactionManager.cs", label="iterations++", span="650-650"];
m3_248 [cluster="QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol, decimal)", file="SecurityTransactionManager.cs", label="return (direction == OrderDirection.Sell ? -1 : 1) * orderQuantity;", span="655-655"];
m3_234 [cluster="QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol, decimal)", file="SecurityTransactionManager.cs", label="var feeToPriceRatio = 0", span="623-623"];
m3_236 [cluster="QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol, decimal)", file="SecurityTransactionManager.cs", label="var iterations = 0", span="627-627"];
m3_230 [cluster="QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol, decimal)", file="SecurityTransactionManager.cs", label="return 0;", span="617-617"];
m3_231 [cluster="QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol, decimal)", file="SecurityTransactionManager.cs", label="decimal marginRequired", span="620-620"];
m3_238 [cluster="QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol, decimal)", file="SecurityTransactionManager.cs", label="feeToPriceRatio > 0", span="635-635"];
m3_219 [cluster="QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol, decimal)", file="SecurityTransactionManager.cs", label="return 0;", span="598-598"];
m3_233 [cluster="QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol, decimal)", file="SecurityTransactionManager.cs", label="decimal orderFees", span="622-622"];
m3_232 [cluster="QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol, decimal)", file="SecurityTransactionManager.cs", label="decimal orderValue", span="621-621"];
m3_249 [cluster="QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol, decimal)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol, decimal)", span="592-592"];
m3_10 [cluster="QuantConnect.Algorithm.QCAlgorithm.Buy(QuantConnect.Symbol, decimal)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Buy(QuantConnect.Symbol, decimal)", span="61-61"];
m3_11 [cluster="QuantConnect.Algorithm.QCAlgorithm.Buy(QuantConnect.Symbol, decimal)", file="SecurityTransactionManager.cs", label="return Order(symbol, Math.Abs(quantity));", span="63-63"];
m3_12 [cluster="QuantConnect.Algorithm.QCAlgorithm.Buy(QuantConnect.Symbol, decimal)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.Buy(QuantConnect.Symbol, decimal)", span="61-61"];
m3_255 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, int, QuantConnect.Orders.OrderType, bool, string)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, int, QuantConnect.Orders.OrderType, bool, string)", span="669-669"];
m3_256 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, int, QuantConnect.Orders.OrderType, bool, string)", file="SecurityTransactionManager.cs", label="return Order(symbol, quantity, asynchronous, tag);", span="671-671"];
m3_257 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, int, QuantConnect.Orders.OrderType, bool, string)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, int, QuantConnect.Orders.OrderType, bool, string)", span="669-669"];
m3_145 [cluster="QuantConnect.Securities.SecurityManager.ContainsKey(QuantConnect.Symbol)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Securities.SecurityManager.ContainsKey(QuantConnect.Symbol)", span="122-122"];
m3_175 [cluster="System.Collections.Generic.IEnumerable<TSource>.OrderBy<TSource, TKey>(System.Func<TSource, TKey>)", file="SecurityTransactionManager.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.OrderBy<TSource, TKey>(System.Func<TSource, TKey>)", span="0-0"];
m3_3 [cluster="System.Math.Abs(int)", file="SecurityTransactionManager.cs", label="Entry System.Math.Abs(int)", span="0-0"];
m3_4 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, int, bool, string)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, int, bool, string)", span="149-149"];
m3_153 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(QuantConnect.Symbol)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Liquidate(QuantConnect.Symbol)", span="424-424"];
m3_156 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(QuantConnect.Symbol)", file="SecurityTransactionManager.cs", label="Securities.Keys.OrderBy(x => x.Value)", span="429-429"];
m3_158 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(QuantConnect.Symbol)", file="SecurityTransactionManager.cs", label="var orders = Transactions.GetOpenOrders(symbol)", span="436-436"];
m3_159 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(QuantConnect.Symbol)", file="SecurityTransactionManager.cs", label="var quantity = Portfolio[symbol].Quantity", span="439-439"];
m3_164 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(QuantConnect.Symbol)", file="SecurityTransactionManager.cs", label="var ticket = Transactions.GetOrderTicket(order.Id)", span="452-452"];
m3_167 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(QuantConnect.Symbol)", file="SecurityTransactionManager.cs", label="Transactions.CancelOrder(order.Id)", span="461-461"];
m3_169 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(QuantConnect.Symbol)", file="SecurityTransactionManager.cs", label="var ticket = Order(symbol, -quantity - marketOrdersQuantity)", span="469-469"];
m3_155 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(QuantConnect.Symbol)", file="SecurityTransactionManager.cs", label="symbolToLiquidate = symbolToLiquidate ?? QuantConnect.Symbol.Empty", span="427-427"];
m3_171 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(QuantConnect.Symbol)", file="SecurityTransactionManager.cs", label="orderIdList.Add(ticket.OrderId)", span="472-472"];
m3_157 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(QuantConnect.Symbol)", file="SecurityTransactionManager.cs", label="symbol != symbolToLiquidate && symbolToLiquidate != QuantConnect.Symbol.Empty", span="432-432"];
m3_160 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(QuantConnect.Symbol)", file="SecurityTransactionManager.cs", label="orders.Count == 1 && quantity != 0 && orders[0].Quantity == -quantity && orders[0].Type == OrderType.Market", span="442-442"];
m3_168 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(QuantConnect.Symbol)", file="SecurityTransactionManager.cs", label="quantity != 0", span="466-466"];
m3_170 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(QuantConnect.Symbol)", file="SecurityTransactionManager.cs", label="ticket.Status == OrderStatus.Filled", span="470-470"];
m3_172 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(QuantConnect.Symbol)", file="SecurityTransactionManager.cs", label="return orderIdList;", span="477-477"];
m3_162 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(QuantConnect.Symbol)", file="SecurityTransactionManager.cs", label=orders, span="447-447"];
m3_163 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(QuantConnect.Symbol)", file="SecurityTransactionManager.cs", label="order.Type == OrderType.Market", span="449-449"];
m3_165 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(QuantConnect.Symbol)", file="SecurityTransactionManager.cs", label="ticket != null", span="453-453"];
m3_166 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(QuantConnect.Symbol)", file="SecurityTransactionManager.cs", label="marketOrdersQuantity += ticket.Quantity - ticket.QuantityFilled", span="456-456"];
m3_161 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(QuantConnect.Symbol)", file="SecurityTransactionManager.cs", label="var marketOrdersQuantity = 0m", span="446-446"];
m3_154 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(QuantConnect.Symbol)", file="SecurityTransactionManager.cs", label="var orderIdList = new List<int>()", span="426-426"];
m3_173 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(QuantConnect.Symbol)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.Liquidate(QuantConnect.Symbol)", span="424-424"];
m3_58 [cluster="QuantConnect.Securities.SecurityTransactionManager.AddOrder(QuantConnect.Orders.SubmitOrderRequest)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Securities.SecurityTransactionManager.AddOrder(QuantConnect.Orders.SubmitOrderRequest)", span="144-144"];
m3_253 [cluster="QuantConnect.Orders.Fees.IFeeModel.GetOrderFee(QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Orders.Fees.IFeeModel.GetOrderFee(QuantConnect.Securities.Security, QuantConnect.Orders.Order)", span="31-31"];
m3_57 [cluster="QuantConnect.Orders.OrderTicket.InvalidSubmitRequest(QuantConnect.Securities.SecurityTransactionManager, QuantConnect.Orders.SubmitOrderRequest, QuantConnect.Orders.OrderResponse)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Orders.OrderTicket.InvalidSubmitRequest(QuantConnect.Securities.SecurityTransactionManager, QuantConnect.Orders.SubmitOrderRequest, QuantConnect.Orders.OrderResponse)", span="405-405"];
m3_250 [cluster="QuantConnect.Orders.MarketOrder.MarketOrder(QuantConnect.Symbol, int, System.DateTime, string)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Orders.MarketOrder.MarketOrder(QuantConnect.Symbol, int, System.DateTime, string)", span="47-47"];
m3_183 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetMaximumOrders(int)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetMaximumOrders(int)", span="484-484"];
m3_184 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetMaximumOrders(int)", file="SecurityTransactionManager.cs", label="!_locked", span="486-486"];
m3_185 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetMaximumOrders(int)", file="SecurityTransactionManager.cs", label="_maxOrders = max", span="488-488"];
m3_186 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetMaximumOrders(int)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.SetMaximumOrders(int)", span="484-484"];
m3_179 [cluster="System.Collections.Generic.List<T>.Add(T)", file="SecurityTransactionManager.cs", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
m3_187 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, double, bool)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, double, bool)", span="499-499"];
m3_188 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, double, bool)", file="SecurityTransactionManager.cs", label="SetHoldings(symbol, (decimal)percentage, liquidateExistingHoldings)", span="501-501"];
m3_189 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, double, bool)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, double, bool)", span="499-499"];
m3_55 [cluster="QuantConnect.Algorithm.QCAlgorithm.CreateSubmitOrderRequest(QuantConnect.Orders.OrderType, QuantConnect.Securities.Security, int, string, decimal, decimal)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.CreateSubmitOrderRequest(QuantConnect.Orders.OrderType, QuantConnect.Securities.Security, int, string, decimal, decimal)", span="698-698"];
m3_264 [cluster="QuantConnect.Algorithm.QCAlgorithm.CreateSubmitOrderRequest(QuantConnect.Orders.OrderType, QuantConnect.Securities.Security, int, string, decimal, decimal)", file="SecurityTransactionManager.cs", label="return new SubmitOrderRequest(orderType, security.Type, security.Symbol, quantity, stopPrice, limitPrice, UtcTime, tag);", span="700-700"];
m3_265 [cluster="QuantConnect.Algorithm.QCAlgorithm.CreateSubmitOrderRequest(QuantConnect.Orders.OrderType, QuantConnect.Securities.Security, int, string, decimal, decimal)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.CreateSubmitOrderRequest(QuantConnect.Orders.OrderType, QuantConnect.Securities.Security, int, string, decimal, decimal)", span="698-698"];
m3_151 [cluster="System.DateTime.AddMinutes(double)", file="SecurityTransactionManager.cs", label="Entry System.DateTime.AddMinutes(double)", span="0-0"];
m3_28 [cluster="QuantConnect.Algorithm.QCAlgorithm.Sell(QuantConnect.Symbol, decimal)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Sell(QuantConnect.Symbol, decimal)", span="117-117"];
m3_29 [cluster="QuantConnect.Algorithm.QCAlgorithm.Sell(QuantConnect.Symbol, decimal)", file="SecurityTransactionManager.cs", label="return Order(symbol, Math.Abs(quantity) * -1);", span="119-119"];
m3_30 [cluster="QuantConnect.Algorithm.QCAlgorithm.Sell(QuantConnect.Symbol, decimal)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.Sell(QuantConnect.Symbol, decimal)", span="117-117"];
m3_144 [cluster="QuantConnect.Orders.OrderResponse.ZeroQuantity(QuantConnect.Orders.OrderRequest)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Orders.OrderResponse.ZeroQuantity(QuantConnect.Orders.OrderRequest)", span="154-154"];
m3_35 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, int, bool, string)", file="SecurityTransactionManager.cs", label="return MarketOrder(symbol, quantity, asynchronous, tag);", span="151-151"];
m3_36 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, int, bool, string)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, int, bool, string)", span="149-149"];
m3_67 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOnCloseOrder(QuantConnect.Symbol, int, string)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.MarketOnCloseOrder(QuantConnect.Symbol, int, string)", span="226-226"];
m3_68 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOnCloseOrder(QuantConnect.Symbol, int, string)", file="SecurityTransactionManager.cs", label="var security = Securities[symbol]", span="228-228"];
m3_69 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOnCloseOrder(QuantConnect.Symbol, int, string)", file="SecurityTransactionManager.cs", label="var request = CreateSubmitOrderRequest(OrderType.MarketOnClose, security, quantity, tag)", span="229-229"];
m3_70 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOnCloseOrder(QuantConnect.Symbol, int, string)", file="SecurityTransactionManager.cs", label="var response = PreOrderChecks(request)", span="230-230"];
m3_72 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOnCloseOrder(QuantConnect.Symbol, int, string)", file="SecurityTransactionManager.cs", label="return OrderTicket.InvalidSubmitRequest(Transactions, request, response);", span="233-233"];
m3_73 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOnCloseOrder(QuantConnect.Symbol, int, string)", file="SecurityTransactionManager.cs", label="return Transactions.AddOrder(request);", span="236-236"];
m3_71 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOnCloseOrder(QuantConnect.Symbol, int, string)", file="SecurityTransactionManager.cs", label="response.IsError", span="231-231"];
m3_74 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOnCloseOrder(QuantConnect.Symbol, int, string)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.MarketOnCloseOrder(QuantConnect.Symbol, int, string)", span="226-226"];
m3_56 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(QuantConnect.Orders.SubmitOrderRequest)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(QuantConnect.Orders.SubmitOrderRequest)", span="309-309"];
m3_99 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(QuantConnect.Orders.SubmitOrderRequest)", file="SecurityTransactionManager.cs", label="var response = PreOrderChecksImpl(request)", span="311-311"];
m3_101 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(QuantConnect.Orders.SubmitOrderRequest)", file="SecurityTransactionManager.cs", label="Error(response.ErrorMessage)", span="314-314"];
m3_100 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(QuantConnect.Orders.SubmitOrderRequest)", file="SecurityTransactionManager.cs", label="response.IsError", span="312-312"];
m3_102 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(QuantConnect.Orders.SubmitOrderRequest)", file="SecurityTransactionManager.cs", label="return response;", span="316-316"];
m3_103 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(QuantConnect.Orders.SubmitOrderRequest)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(QuantConnect.Orders.SubmitOrderRequest)", span="309-309"];
m3_177 [cluster="QuantConnect.Securities.SecurityTransactionManager.GetOrderTicket(int)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Securities.SecurityTransactionManager.GetOrderTicket(int)", span="208-208"];
m3_194 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, int, bool, string)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, int, bool, string)", span="525-525"];
m3_195 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, int, bool, string)", file="SecurityTransactionManager.cs", label="SetHoldings(symbol, (decimal)percentage, liquidateExistingHoldings, tag)", span="527-527"];
m3_196 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, int, bool, string)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, int, bool, string)", span="525-525"];
m3_267 [file="SecurityTransactionManager.cs", label="QuantConnect.Algorithm.QCAlgorithm", span=""];
m0_4 -> m0_12  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_15 -> m0_17  [color=darkseagreen4, key=1, label="QuantConnect.Data.Market.TradeBars", style=dashed];
m0_24 -> m0_1  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.HourReverseSplitRegressionAlgorithm", style=dashed];
m0_24 -> m0_2  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.HourReverseSplitRegressionAlgorithm", style=dashed];
m0_24 -> m0_3  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.HourReverseSplitRegressionAlgorithm", style=dashed];
m0_24 -> m0_4  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.HourReverseSplitRegressionAlgorithm", style=dashed];
m0_24 -> m0_17  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.HourReverseSplitRegressionAlgorithm", style=dashed];
m0_24 -> m0_19  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.HourReverseSplitRegressionAlgorithm", style=dashed];
m0_24 -> m0_20  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.HourReverseSplitRegressionAlgorithm", style=dashed];
m2_119 -> m2_127  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_119 -> m2_129  [color=darkseagreen4, key=1, label=decimal, style=dashed];
m2_119 -> m2_131  [color=darkseagreen4, key=1, label=decimal, style=dashed];
m2_119 -> m2_133  [color=darkseagreen4, key=1, label=bool, style=dashed];
m2_119 -> m2_135  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_119 -> m2_141  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_119 -> m2_149  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_134 -> m2_136  [color=darkseagreen4, key=1, label=holdingSymbol, style=dashed];
m2_138 -> m2_148  [color=green, key=1, label=total, style=dashed];
m2_139 -> m2_148  [color=green, key=1, label=deltaValue, style=dashed];
m2_140 -> m2_143  [color=darkseagreen4, key=1, label=deltaQuantity, style=dashed];
m2_147 -> m2_149  [color=green, key=1, label=deltaQuantity, style=dashed];
m2_59 -> m2_61  [color=darkseagreen4, key=1, label=error, style=dashed];
m2_7 -> m2_1  [color=darkseagreen4, key=1, label="QuantConnect.Securities.AccountEvent", style=dashed];
m2_67 -> m2_69  [color=darkseagreen4, key=1, label=error, style=dashed];
m2_45 -> m2_89  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderType", style=dashed];
m2_81 -> m2_86  [color=darkseagreen4, key=1, label=security, style=dashed];
m2_81 -> m2_89  [color=darkseagreen4, key=1, label=security, style=dashed];
m2_76 -> m2_79  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_51 -> m2_53  [color=darkseagreen4, key=1, label=error, style=dashed];
m2_104 -> m2_107  [color=darkseagreen4, key=1, label=symbol, style=dashed];
m2_104 -> m2_110  [color=darkseagreen4, key=1, label=symbol, style=dashed];
m2_103 -> m2_105  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_102 -> m2_110  [color=darkseagreen4, key=1, label=orderIdList, style=dashed];
m2_102 -> m2_111  [color=darkseagreen4, key=1, label=orderIdList, style=dashed];
m2_33 -> m2_40  [color=darkseagreen4, key=1, label=bool, style=dashed];
m2_34 -> m2_36  [color=darkseagreen4, key=1, label=error, style=dashed];
m2_39 -> m2_41  [color=darkseagreen4, key=1, label=orderId, style=dashed];
m2_39 -> m2_43  [color=darkseagreen4, key=1, label=orderId, style=dashed];
m2_167 -> m2_148  [color=green, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m2_167 -> m2_1  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m2_167 -> m2_5  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m2_167 -> m2_9  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m2_167 -> m2_13  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m2_167 -> m2_16  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m2_167 -> m2_19  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m2_167 -> m2_22  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m2_167 -> m2_25  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m2_167 -> m2_27  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m2_167 -> m2_29  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m2_167 -> m2_31  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m2_167 -> m2_41  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m2_167 -> m2_55  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m2_167 -> m2_63  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m2_167 -> m2_71  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m2_167 -> m2_77  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m2_167 -> m2_79  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m2_167 -> m2_84  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m2_167 -> m2_87  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m2_167 -> m2_90  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m2_167 -> m2_92  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m2_167 -> m2_93  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m2_167 -> m2_104  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m2_167 -> m2_105  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m2_167 -> m2_107  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m2_167 -> m2_110  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m2_167 -> m2_117  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m2_167 -> m2_121  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m2_167 -> m2_124  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m2_167 -> m2_126  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m2_167 -> m2_127  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m2_167 -> m2_134  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m2_167 -> m2_135  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m2_167 -> m2_136  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m2_167 -> m2_141  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m2_167 -> m2_149  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m2_167 -> m2_159  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m2_167 -> m2_162  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m2_167 -> m2_165  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m3_37 -> m3_49  [color=darkseagreen4, key=1, label=bool, style=dashed];
m3_38 -> m3_41  [color=darkseagreen4, key=1, label=security, style=dashed];
m3_40 -> m3_42  [color=darkseagreen4, key=1, label=mooTicket, style=dashed];
m3_40 -> m3_43  [color=darkseagreen4, key=1, label=mooTicket, style=dashed];
m3_44 -> m3_47  [color=darkseagreen4, key=1, label=request, style=dashed];
m3_45 -> m3_47  [color=darkseagreen4, key=1, label=preOrderCheckResponse, style=dashed];
m3_48 -> m3_50  [color=darkseagreen4, key=1, label=ticket, style=dashed];
m3_48 -> m3_51  [color=darkseagreen4, key=1, label=ticket, style=dashed];
m3_85 -> m3_88  [color=darkseagreen4, key=1, label=request, style=dashed];
m3_85 -> m3_89  [color=darkseagreen4, key=1, label=request, style=dashed];
m3_86 -> m3_88  [color=darkseagreen4, key=1, label=response, style=dashed];
m3_190 -> m3_198  [color=darkseagreen4, key=1, label="QuantConnect.Symbol", style=dashed];
m3_190 -> m3_199  [color=darkseagreen4, key=1, label="QuantConnect.Symbol", style=dashed];
m3_190 -> m3_206  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_190 -> m3_209  [color=darkseagreen4, key=1, label="QuantConnect.Symbol", style=dashed];
m3_190 -> m3_201  [color=darkseagreen4, key=1, label=bool, style=dashed];
m3_190 -> m3_205  [color=darkseagreen4, key=1, label="QuantConnect.Symbol", style=dashed];
m3_207 -> m3_209  [color=darkseagreen4, key=1, label=quantity, style=dashed];
m3_203 -> m3_206  [color=darkseagreen4, key=1, label=holdingSymbol, style=dashed];
m3_203 -> m3_205  [color=darkseagreen4, key=1, label=holdingSymbol, style=dashed];
m3_204 -> m3_206  [color=darkseagreen4, key=1, label=holdings, style=dashed];
m3_93 -> m3_96  [color=darkseagreen4, key=1, label=request, style=dashed];
m3_93 -> m3_97  [color=darkseagreen4, key=1, label=request, style=dashed];
m3_94 -> m3_96  [color=darkseagreen4, key=1, label=response, style=dashed];
m3_2 -> m3_4  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
m3_104 -> m3_113  [color=darkseagreen4, key=1, label="QuantConnect.Orders.SubmitOrderRequest", style=dashed];
m3_104 -> m3_107  [color=darkseagreen4, key=1, label="QuantConnect.Orders.SubmitOrderRequest", style=dashed];
m3_104 -> m3_108  [color=darkseagreen4, key=1, label="QuantConnect.Orders.SubmitOrderRequest", style=dashed];
m3_104 -> m3_110  [color=darkseagreen4, key=1, label="QuantConnect.Orders.SubmitOrderRequest", style=dashed];
m3_104 -> m3_115  [color=darkseagreen4, key=1, label="QuantConnect.Orders.SubmitOrderRequest", style=dashed];
m3_104 -> m3_116  [color=darkseagreen4, key=1, label="QuantConnect.Orders.SubmitOrderRequest", style=dashed];
m3_104 -> m3_118  [color=darkseagreen4, key=1, label="QuantConnect.Orders.SubmitOrderRequest", style=dashed];
m3_104 -> m3_122  [color=darkseagreen4, key=1, label="QuantConnect.Orders.SubmitOrderRequest", style=dashed];
m3_104 -> m3_124  [color=darkseagreen4, key=1, label="QuantConnect.Orders.SubmitOrderRequest", style=dashed];
m3_104 -> m3_129  [color=darkseagreen4, key=1, label="QuantConnect.Orders.SubmitOrderRequest", style=dashed];
m3_104 -> m3_131  [color=darkseagreen4, key=1, label="QuantConnect.Orders.SubmitOrderRequest", style=dashed];
m3_104 -> m3_133  [color=darkseagreen4, key=1, label="QuantConnect.Orders.SubmitOrderRequest", style=dashed];
m3_104 -> m3_136  [color=darkseagreen4, key=1, label="QuantConnect.Orders.SubmitOrderRequest", style=dashed];
m3_104 -> m3_137  [color=darkseagreen4, key=1, label="QuantConnect.Orders.SubmitOrderRequest", style=dashed];
m3_104 -> m3_141  [color=darkseagreen4, key=1, label="QuantConnect.Orders.SubmitOrderRequest", style=dashed];
m3_104 -> m3_142  [color=darkseagreen4, key=1, label="QuantConnect.Orders.SubmitOrderRequest", style=dashed];
m3_111 -> m3_115  [color=darkseagreen4, key=1, label=security, style=dashed];
m3_111 -> m3_123  [color=darkseagreen4, key=1, label=security, style=dashed];
m3_111 -> m3_125  [color=darkseagreen4, key=1, label=security, style=dashed];
m3_111 -> m3_132  [color=darkseagreen4, key=1, label=security, style=dashed];
m3_111 -> m3_140  [color=darkseagreen4, key=1, label=security, style=dashed];
m3_114 -> m3_117  [color=darkseagreen4, key=1, label=price, style=dashed];
m3_120 -> m3_122  [color=darkseagreen4, key=1, label=quoteCurrency, style=dashed];
m3_120 -> m3_124  [color=darkseagreen4, key=1, label=quoteCurrency, style=dashed];
m3_120 -> m3_129  [color=darkseagreen4, key=1, label=quoteCurrency, style=dashed];
m3_120 -> m3_131  [color=darkseagreen4, key=1, label=quoteCurrency, style=dashed];
m3_127 -> m3_129  [color=darkseagreen4, key=1, label=baseCurrency, style=dashed];
m3_127 -> m3_131  [color=darkseagreen4, key=1, label=baseCurrency, style=dashed];
m3_6 -> m3_3  [color=darkseagreen4, key=1, label="QuantConnect.Packets.OrderEventPacket", style=dashed];
m3_6 -> m3_4  [color=darkseagreen4, key=1, label="QuantConnect.Packets.OrderEventPacket", style=dashed];
m3_61 -> m3_64  [color=darkseagreen4, key=1, label=request, style=dashed];
m3_61 -> m3_65  [color=darkseagreen4, key=1, label=request, style=dashed];
m3_62 -> m3_64  [color=darkseagreen4, key=1, label=response, style=dashed];
m3_77 -> m3_80  [color=darkseagreen4, key=1, label=request, style=dashed];
m3_77 -> m3_81  [color=darkseagreen4, key=1, label=request, style=dashed];
m3_78 -> m3_80  [color=darkseagreen4, key=1, label=response, style=dashed];
m3_212 -> m3_220  [color=darkseagreen4, key=1, label=decimal, style=dashed];
m3_216 -> m3_221  [color=darkseagreen4, key=1, label=security, style=dashed];
m3_228 -> m3_247  [color=darkseagreen4, key=1, label=marginRemaining, style=dashed];
m3_242 -> m3_247  [color=darkseagreen4, key=1, label=orderValue, style=dashed];
m3_243 -> m3_247  [color=darkseagreen4, key=1, label=orderFees, style=dashed];
m3_245 -> m3_247  [color=darkseagreen4, key=1, label=marginRequired, style=dashed];
m3_225 -> m3_247  [color=darkseagreen4, key=1, label=targetOrderValue, style=dashed];
m3_226 -> m3_248  [color=darkseagreen4, key=1, label=direction, style=dashed];
m3_235 -> m3_240  [color=darkseagreen4, key=1, label=orderQuantity, style=dashed];
m3_235 -> m3_247  [color=darkseagreen4, key=1, label=orderQuantity, style=dashed];
m3_235 -> m3_248  [color=darkseagreen4, key=1, label=orderQuantity, style=dashed];
m3_239 -> m3_247  [color=darkseagreen4, key=1, label=orderQuantity, style=dashed];
m3_239 -> m3_248  [color=darkseagreen4, key=1, label=orderQuantity, style=dashed];
m3_240 -> m3_247  [color=darkseagreen4, key=1, label=orderQuantity, style=dashed];
m3_240 -> m3_240  [color=darkseagreen4, key=1, label=orderQuantity, style=dashed];
m3_240 -> m3_248  [color=darkseagreen4, key=1, label=orderQuantity, style=dashed];
m3_246 -> m3_246  [color=darkseagreen4, key=1, label=iterations, style=dashed];
m3_234 -> m3_238  [color=darkseagreen4, key=1, label=feeToPriceRatio, style=dashed];
m3_236 -> m3_246  [color=darkseagreen4, key=1, label=iterations, style=dashed];
m3_156 -> m3_180  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_158 -> m3_160  [color=darkseagreen4, key=1, label=orders, style=dashed];
m3_158 -> m3_162  [color=darkseagreen4, key=1, label=orders, style=dashed];
m3_159 -> m3_168  [color=darkseagreen4, key=1, label=quantity, style=dashed];
m3_169 -> m3_171  [color=darkseagreen4, key=1, label=ticket, style=dashed];
m3_155 -> m3_157  [color=darkseagreen4, key=1, label="QuantConnect.Symbol", style=dashed];
m3_162 -> m3_167  [color=darkseagreen4, key=1, label=order, style=dashed];
m3_154 -> m3_171  [color=darkseagreen4, key=1, label=orderIdList, style=dashed];
m3_154 -> m3_172  [color=darkseagreen4, key=1, label=orderIdList, style=dashed];
m3_69 -> m3_72  [color=darkseagreen4, key=1, label=request, style=dashed];
m3_69 -> m3_73  [color=darkseagreen4, key=1, label=request, style=dashed];
m3_70 -> m3_72  [color=darkseagreen4, key=1, label=response, style=dashed];
m3_99 -> m3_101  [color=darkseagreen4, key=1, label=response, style=dashed];
m3_99 -> m3_102  [color=darkseagreen4, key=1, label=response, style=dashed];
m3_267 -> m3_1  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m3_267 -> m3_6  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m3_267 -> m3_11  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m3_267 -> m3_16  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m3_267 -> m3_20  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m3_267 -> m3_23  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m3_267 -> m3_26  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m3_267 -> m3_29  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m3_267 -> m3_31  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m3_267 -> m3_33  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m3_267 -> m3_35  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m3_267 -> m3_42  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m3_267 -> m3_47  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m3_267 -> m3_50  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m3_267 -> m3_64  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m3_267 -> m3_65  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m3_267 -> m3_72  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m3_267 -> m3_73  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m3_267 -> m3_80  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m3_267 -> m3_81  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m3_267 -> m3_88  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m3_267 -> m3_89  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m3_267 -> m3_96  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m3_267 -> m3_97  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m3_267 -> m3_101  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m3_267 -> m3_108  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m3_267 -> m3_121  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m3_267 -> m3_128  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m3_267 -> m3_134  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m3_267 -> m3_136  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m3_267 -> m3_140  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m3_267 -> m3_156  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m3_267 -> m3_167  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m3_267 -> m3_184  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m3_267 -> m3_188  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m3_267 -> m3_192  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m3_267 -> m3_195  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m3_267 -> m3_198  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m3_267 -> m3_199  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m3_267 -> m3_202  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m3_267 -> m3_206  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m3_267 -> m3_209  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m3_267 -> m3_214  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m3_267 -> m3_256  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m3_267 -> m3_259  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m3_267 -> m3_262  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m3_267 -> m3_264  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
}
