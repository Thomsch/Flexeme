digraph  {
n133 [label="QuantConnect.Indicators.IndicatorBase<T>", span=""];
n134 [label=bool, span=""];
n135 [label=TSecond, span=""];
n136 [label=x, span=""];
n137 [label=y, span=""];
n138 [label=numerator, span=""];
n139 [label=denominator, span=""];
n0 [cluster="QuantConnect.Indicators.IndicatorExtensions.Update(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, System.DateTime, decimal)", label="Entry QuantConnect.Indicators.IndicatorExtensions.Update(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, System.DateTime, decimal)", span="36-36"];
n1 [cluster="QuantConnect.Indicators.IndicatorExtensions.Update(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, System.DateTime, decimal)", label="return indicator.Update(new IndicatorDataPoint(time, value));", span="38-38"];
n2 [cluster="QuantConnect.Indicators.IndicatorExtensions.Update(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, System.DateTime, decimal)", label="Exit QuantConnect.Indicators.IndicatorExtensions.Update(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, System.DateTime, decimal)", span="36-36"];
n3 [cluster="QuantConnect.Indicators.IndicatorDataPoint.IndicatorDataPoint(System.DateTime, decimal)", label="Entry QuantConnect.Indicators.IndicatorDataPoint.IndicatorDataPoint(System.DateTime, decimal)", span="40-40"];
n4 [cluster="QuantConnect.Indicators.IndicatorBase<T>.Update(T)", label="Entry QuantConnect.Indicators.IndicatorBase<T>.Update(T)", span="74-74"];
n5 [cluster="QuantConnect.Indicators.IndicatorExtensions.Of<T, TSecond>(TSecond, QuantConnect.Indicators.IndicatorBase<T>, bool)", label="Entry QuantConnect.Indicators.IndicatorExtensions.Of<T, TSecond>(TSecond, QuantConnect.Indicators.IndicatorBase<T>, bool)", span="49-49"];
n6 [cluster="QuantConnect.Indicators.IndicatorExtensions.Of<T, TSecond>(TSecond, QuantConnect.Indicators.IndicatorBase<T>, bool)", label="first.Updated += (sender, consolidated) =>\r\n            {\r\n                // only send the data along if we're ready\r\n                if (!waitForFirstToReady || first.IsReady)\r\n                {\r\n                    second.Update(consolidated);\r\n                }\r\n            }", span="53-60"];
n10 [cluster="lambda expression", label="!waitForFirstToReady || first.IsReady", span="56-56"];
n11 [cluster="lambda expression", label="second.Update(consolidated)", span="58-58"];
n7 [cluster="QuantConnect.Indicators.IndicatorExtensions.Of<T, TSecond>(TSecond, QuantConnect.Indicators.IndicatorBase<T>, bool)", label="return second;", span="62-62"];
n8 [cluster="QuantConnect.Indicators.IndicatorExtensions.Of<T, TSecond>(TSecond, QuantConnect.Indicators.IndicatorBase<T>, bool)", label="Exit QuantConnect.Indicators.IndicatorExtensions.Of<T, TSecond>(TSecond, QuantConnect.Indicators.IndicatorBase<T>, bool)", span="49-49"];
n9 [cluster="lambda expression", label="Entry lambda expression", span="53-60"];
n12 [cluster="lambda expression", label="Exit lambda expression", span="53-60"];
n13 [cluster="QuantConnect.Indicators.IndicatorExtensions.WeightedBy<T, TWeight>(QuantConnect.Indicators.IndicatorBase<T>, TWeight, int)", label="Entry QuantConnect.Indicators.IndicatorExtensions.WeightedBy<T, TWeight>(QuantConnect.Indicators.IndicatorBase<T>, TWeight, int)", span="72-72"];
n14 [cluster="QuantConnect.Indicators.IndicatorExtensions.WeightedBy<T, TWeight>(QuantConnect.Indicators.IndicatorBase<T>, TWeight, int)", label="var x = new WindowIdentity(period)", span="76-76"];
n15 [cluster="QuantConnect.Indicators.IndicatorExtensions.WeightedBy<T, TWeight>(QuantConnect.Indicators.IndicatorBase<T>, TWeight, int)", label="var y = new WindowIdentity(period)", span="77-77"];
n16 [cluster="QuantConnect.Indicators.IndicatorExtensions.WeightedBy<T, TWeight>(QuantConnect.Indicators.IndicatorBase<T>, TWeight, int)", label="var numerator = new Sum(''Sum_xy'', period)", span="78-78"];
n17 [cluster="QuantConnect.Indicators.IndicatorExtensions.WeightedBy<T, TWeight>(QuantConnect.Indicators.IndicatorBase<T>, TWeight, int)", label="var denominator = new Sum(''Sum_y'', period)", span="79-79"];
n18 [cluster="QuantConnect.Indicators.IndicatorExtensions.WeightedBy<T, TWeight>(QuantConnect.Indicators.IndicatorBase<T>, TWeight, int)", label="value.Updated += (sender, consolidated) =>\r\n            {\r\n                x.Update(consolidated);\r\n                if (x.Samples == y.Samples)\r\n                {\r\n                    numerator.Update(consolidated.Time, consolidated.Value * y.Current.Value);\r\n                }  \r\n            }", span="81-88"];
n19 [cluster="QuantConnect.Indicators.IndicatorExtensions.WeightedBy<T, TWeight>(QuantConnect.Indicators.IndicatorBase<T>, TWeight, int)", label="weight.Updated += (sender, consolidated) =>\r\n            {\r\n                y.Update(consolidated);\r\n                if (x.Samples == y.Samples)\r\n                {\r\n                    numerator.Update(consolidated.Time, consolidated.Value * x.Current.Value);\r\n                }\r\n                denominator.Update(consolidated);\r\n            }", span="90-98"];
n22 [cluster="QuantConnect.Indicators.WindowIdentity.WindowIdentity(int)", label="Entry QuantConnect.Indicators.WindowIdentity.WindowIdentity(int)", span="37-37"];
n26 [cluster="lambda expression", label="x.Update(consolidated)", span="83-83"];
n27 [cluster="lambda expression", label="x.Samples == y.Samples", span="84-84"];
n33 [cluster="lambda expression", label="x.Samples == y.Samples", span="93-93"];
n34 [cluster="lambda expression", label="numerator.Update(consolidated.Time, consolidated.Value * x.Current.Value)", span="95-95"];
n28 [cluster="lambda expression", label="numerator.Update(consolidated.Time, consolidated.Value * y.Current.Value)", span="86-86"];
n32 [cluster="lambda expression", label="y.Update(consolidated)", span="92-92"];
n23 [cluster="QuantConnect.Indicators.Sum.Sum(string, int)", label="Entry QuantConnect.Indicators.Sum.Sum(string, int)", span="44-44"];
n20 [cluster="QuantConnect.Indicators.IndicatorExtensions.WeightedBy<T, TWeight>(QuantConnect.Indicators.IndicatorBase<T>, TWeight, int)", label="return numerator.Over(denominator);", span="100-100"];
n35 [cluster="lambda expression", label="denominator.Update(consolidated)", span="97-97"];
n21 [cluster="QuantConnect.Indicators.IndicatorExtensions.WeightedBy<T, TWeight>(QuantConnect.Indicators.IndicatorBase<T>, TWeight, int)", label="Exit QuantConnect.Indicators.IndicatorExtensions.WeightedBy<T, TWeight>(QuantConnect.Indicators.IndicatorBase<T>, TWeight, int)", span="72-72"];
n24 [cluster="QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>.Over(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>)", label="Entry QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>.Over(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>)", span="215-215"];
n25 [cluster="lambda expression", label="Entry lambda expression", span="81-88"];
n29 [cluster="lambda expression", label="Exit lambda expression", span="81-88"];
n30 [cluster="QuantConnect.Indicators.IndicatorBase<T>.Update(System.DateTime, decimal)", label="Entry QuantConnect.Indicators.IndicatorBase<T>.Update(System.DateTime, decimal)", span="106-106"];
n31 [cluster="lambda expression", label="Entry lambda expression", span="90-98"];
n36 [cluster="lambda expression", label="Exit lambda expression", span="90-98"];
n37 [cluster="QuantConnect.Indicators.IndicatorExtensions.Plus(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, decimal)", label="Entry QuantConnect.Indicators.IndicatorExtensions.Plus(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, decimal)", span="112-112"];
n38 [cluster="QuantConnect.Indicators.IndicatorExtensions.Plus(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, decimal)", label="var constantIndicator = new ConstantIndicator<IndicatorDataPoint>(constant.ToString(CultureInfo.InvariantCulture), constant)", span="114-114"];
n39 [cluster="QuantConnect.Indicators.IndicatorExtensions.Plus(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, decimal)", label="return left.Plus(constantIndicator);", span="115-115"];
n41 [cluster="QuantConnect.Indicators.ConstantIndicator<T>.ConstantIndicator(string, decimal)", label="Entry QuantConnect.Indicators.ConstantIndicator<T>.ConstantIndicator(string, decimal)", span="42-42"];
n42 [cluster="decimal.ToString(System.IFormatProvider)", label="Entry decimal.ToString(System.IFormatProvider)", span="0-0"];
n40 [cluster="QuantConnect.Indicators.IndicatorExtensions.Plus(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, decimal)", label="Exit QuantConnect.Indicators.IndicatorExtensions.Plus(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, decimal)", span="112-112"];
n43 [cluster="QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>.Plus(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>)", label="Entry QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>.Plus(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>)", span="127-127"];
n44 [cluster="QuantConnect.Indicators.IndicatorExtensions.Plus(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>)", label="Entry QuantConnect.Indicators.IndicatorExtensions.Plus(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>)", span="127-127"];
n45 [cluster="QuantConnect.Indicators.IndicatorExtensions.Plus(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>)", label="return new CompositeIndicator<IndicatorDataPoint>(left, right, (l, r) => l + r);", span="129-129"];
n46 [cluster="QuantConnect.Indicators.IndicatorExtensions.Plus(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>)", label="Exit QuantConnect.Indicators.IndicatorExtensions.Plus(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>)", span="127-127"];
n47 [cluster="QuantConnect.Indicators.CompositeIndicator<T>.CompositeIndicator(QuantConnect.Indicators.IndicatorBase<T>, QuantConnect.Indicators.IndicatorBase<T>, QuantConnect.Indicators.CompositeIndicator<T>.IndicatorComposer)", label="Entry QuantConnect.Indicators.CompositeIndicator<T>.CompositeIndicator(QuantConnect.Indicators.IndicatorBase<T>, QuantConnect.Indicators.IndicatorBase<T>, QuantConnect.Indicators.CompositeIndicator<T>.IndicatorComposer)", span="99-99"];
n49 [cluster="lambda expression", label="l + r", span="129-129"];
n48 [cluster="lambda expression", label="Entry lambda expression", span="129-129"];
n50 [cluster="lambda expression", label="Exit lambda expression", span="129-129"];
n51 [cluster="QuantConnect.Indicators.IndicatorExtensions.Plus(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, string)", label="Entry QuantConnect.Indicators.IndicatorExtensions.Plus(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, string)", span="142-142"];
n52 [cluster="QuantConnect.Indicators.IndicatorExtensions.Plus(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, string)", label="return new CompositeIndicator<IndicatorDataPoint>(name, left, right, (l, r) => l + r);", span="144-144"];
n53 [cluster="QuantConnect.Indicators.IndicatorExtensions.Plus(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, string)", label="Exit QuantConnect.Indicators.IndicatorExtensions.Plus(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, string)", span="142-142"];
n54 [cluster="QuantConnect.Indicators.CompositeIndicator<T>.CompositeIndicator(string, QuantConnect.Indicators.IndicatorBase<T>, QuantConnect.Indicators.IndicatorBase<T>, QuantConnect.Indicators.CompositeIndicator<T>.IndicatorComposer)", label="Entry QuantConnect.Indicators.CompositeIndicator<T>.CompositeIndicator(string, QuantConnect.Indicators.IndicatorBase<T>, QuantConnect.Indicators.IndicatorBase<T>, QuantConnect.Indicators.CompositeIndicator<T>.IndicatorComposer)", span="83-83"];
n56 [cluster="lambda expression", label="l + r", span="144-144"];
n55 [cluster="lambda expression", label="Entry lambda expression", span="144-144"];
n57 [cluster="lambda expression", label="Exit lambda expression", span="144-144"];
n58 [cluster="QuantConnect.Indicators.IndicatorExtensions.Minus(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, decimal)", label="Entry QuantConnect.Indicators.IndicatorExtensions.Minus(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, decimal)", span="156-156"];
n59 [cluster="QuantConnect.Indicators.IndicatorExtensions.Minus(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, decimal)", label="var constantIndicator = new ConstantIndicator<IndicatorDataPoint>(constant.ToString(CultureInfo.InvariantCulture), constant)", span="158-158"];
n60 [cluster="QuantConnect.Indicators.IndicatorExtensions.Minus(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, decimal)", label="return left.Minus(constantIndicator);", span="159-159"];
n61 [cluster="QuantConnect.Indicators.IndicatorExtensions.Minus(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, decimal)", label="Exit QuantConnect.Indicators.IndicatorExtensions.Minus(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, decimal)", span="156-156"];
n62 [cluster="QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>.Minus(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>)", label="Entry QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>.Minus(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>)", span="171-171"];
n63 [cluster="QuantConnect.Indicators.IndicatorExtensions.Minus(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>)", label="Entry QuantConnect.Indicators.IndicatorExtensions.Minus(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>)", span="171-171"];
n64 [cluster="QuantConnect.Indicators.IndicatorExtensions.Minus(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>)", label="return new CompositeIndicator<IndicatorDataPoint>(left, right, (l, r) => l - r);", span="173-173"];
n65 [cluster="QuantConnect.Indicators.IndicatorExtensions.Minus(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>)", label="Exit QuantConnect.Indicators.IndicatorExtensions.Minus(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>)", span="171-171"];
n67 [cluster="lambda expression", label="l - r", span="173-173"];
n66 [cluster="lambda expression", label="Entry lambda expression", span="173-173"];
n68 [cluster="lambda expression", label="Exit lambda expression", span="173-173"];
n69 [cluster="QuantConnect.Indicators.IndicatorExtensions.Minus(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, string)", label="Entry QuantConnect.Indicators.IndicatorExtensions.Minus(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, string)", span="186-186"];
n70 [cluster="QuantConnect.Indicators.IndicatorExtensions.Minus(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, string)", label="return new CompositeIndicator<IndicatorDataPoint>(name, left, right, (l, r) => l - r);", span="188-188"];
n71 [cluster="QuantConnect.Indicators.IndicatorExtensions.Minus(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, string)", label="Exit QuantConnect.Indicators.IndicatorExtensions.Minus(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, string)", span="186-186"];
n73 [cluster="lambda expression", label="l - r", span="188-188"];
n72 [cluster="lambda expression", label="Entry lambda expression", span="188-188"];
n74 [cluster="lambda expression", label="Exit lambda expression", span="188-188"];
n75 [cluster="QuantConnect.Indicators.IndicatorExtensions.Over(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, decimal)", label="Entry QuantConnect.Indicators.IndicatorExtensions.Over(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, decimal)", span="200-200"];
n76 [cluster="QuantConnect.Indicators.IndicatorExtensions.Over(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, decimal)", label="var constantIndicator = new ConstantIndicator<IndicatorDataPoint>(constant.ToString(CultureInfo.InvariantCulture), constant)", span="202-202"];
n77 [cluster="QuantConnect.Indicators.IndicatorExtensions.Over(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, decimal)", label="return left.Over(constantIndicator);", span="203-203"];
n78 [cluster="QuantConnect.Indicators.IndicatorExtensions.Over(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, decimal)", label="Exit QuantConnect.Indicators.IndicatorExtensions.Over(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, decimal)", span="200-200"];
n79 [cluster="QuantConnect.Indicators.IndicatorExtensions.Over(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>)", label="Entry QuantConnect.Indicators.IndicatorExtensions.Over(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>)", span="215-215"];
n80 [cluster="QuantConnect.Indicators.IndicatorExtensions.Over(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>)", label="return new CompositeIndicator<IndicatorDataPoint>(left, right, (l, r) => r == 0m ? new IndicatorResult(0m, IndicatorStatus.MathError) : new IndicatorResult(l / r));", span="217-217"];
n81 [cluster="QuantConnect.Indicators.IndicatorExtensions.Over(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>)", label="Exit QuantConnect.Indicators.IndicatorExtensions.Over(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>)", span="215-215"];
n83 [cluster="lambda expression", label="r == 0m ? new IndicatorResult(0m, IndicatorStatus.MathError) : new IndicatorResult(l / r)", span="217-217"];
n82 [cluster="lambda expression", label="Entry lambda expression", span="217-217"];
n84 [cluster="lambda expression", label="Exit lambda expression", span="217-217"];
n85 [cluster="QuantConnect.Indicators.IndicatorResult.IndicatorResult(decimal, QuantConnect.Indicators.IndicatorStatus)", label="Entry QuantConnect.Indicators.IndicatorResult.IndicatorResult(decimal, QuantConnect.Indicators.IndicatorStatus)", span="45-45"];
n86 [cluster="QuantConnect.Indicators.IndicatorExtensions.Over(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, string)", label="Entry QuantConnect.Indicators.IndicatorExtensions.Over(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, string)", span="230-230"];
n87 [cluster="QuantConnect.Indicators.IndicatorExtensions.Over(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, string)", label="return new CompositeIndicator<IndicatorDataPoint>(name, left, right, (l, r) => r == 0m ? new IndicatorResult(0m, IndicatorStatus.MathError) : new IndicatorResult(l / r));", span="232-232"];
n88 [cluster="QuantConnect.Indicators.IndicatorExtensions.Over(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, string)", label="Exit QuantConnect.Indicators.IndicatorExtensions.Over(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, string)", span="230-230"];
n90 [cluster="lambda expression", label="r == 0m ? new IndicatorResult(0m, IndicatorStatus.MathError) : new IndicatorResult(l / r)", span="232-232"];
n89 [cluster="lambda expression", label="Entry lambda expression", span="232-232"];
n91 [cluster="lambda expression", label="Exit lambda expression", span="232-232"];
n92 [cluster="QuantConnect.Indicators.IndicatorExtensions.Times(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, decimal)", label="Entry QuantConnect.Indicators.IndicatorExtensions.Times(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, decimal)", span="244-244"];
n93 [cluster="QuantConnect.Indicators.IndicatorExtensions.Times(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, decimal)", label="var constantIndicator = new ConstantIndicator<IndicatorDataPoint>(constant.ToString(CultureInfo.InvariantCulture), constant)", span="246-246"];
n94 [cluster="QuantConnect.Indicators.IndicatorExtensions.Times(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, decimal)", label="return left.Times(constantIndicator);", span="247-247"];
n95 [cluster="QuantConnect.Indicators.IndicatorExtensions.Times(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, decimal)", label="Exit QuantConnect.Indicators.IndicatorExtensions.Times(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, decimal)", span="244-244"];
n96 [cluster="QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>.Times(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>)", label="Entry QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>.Times(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>)", span="259-259"];
n97 [cluster="QuantConnect.Indicators.IndicatorExtensions.Times(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>)", label="Entry QuantConnect.Indicators.IndicatorExtensions.Times(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>)", span="259-259"];
n98 [cluster="QuantConnect.Indicators.IndicatorExtensions.Times(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>)", label="return new CompositeIndicator<IndicatorDataPoint>(left, right, (l, r) => l * r);", span="261-261"];
n99 [cluster="QuantConnect.Indicators.IndicatorExtensions.Times(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>)", label="Exit QuantConnect.Indicators.IndicatorExtensions.Times(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>)", span="259-259"];
n101 [cluster="lambda expression", label="l * r", span="261-261"];
n100 [cluster="lambda expression", label="Entry lambda expression", span="261-261"];
n102 [cluster="lambda expression", label="Exit lambda expression", span="261-261"];
n103 [cluster="QuantConnect.Indicators.IndicatorExtensions.Times(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, string)", label="Entry QuantConnect.Indicators.IndicatorExtensions.Times(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, string)", span="274-274"];
n104 [cluster="QuantConnect.Indicators.IndicatorExtensions.Times(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, string)", label="return new CompositeIndicator<IndicatorDataPoint>(name, left, right, (l, r) => l * r);", span="276-276"];
n105 [cluster="QuantConnect.Indicators.IndicatorExtensions.Times(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, string)", label="Exit QuantConnect.Indicators.IndicatorExtensions.Times(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>, string)", span="274-274"];
n107 [cluster="lambda expression", label="l * r", span="276-276"];
n106 [cluster="lambda expression", label="Entry lambda expression", span="276-276"];
n108 [cluster="lambda expression", label="Exit lambda expression", span="276-276"];
n109 [cluster="QuantConnect.Indicators.IndicatorExtensions.EMA<T>(QuantConnect.Indicators.IndicatorBase<T>, int, decimal?, bool)", label="Entry QuantConnect.Indicators.IndicatorExtensions.EMA<T>(QuantConnect.Indicators.IndicatorBase<T>, int, decimal?, bool)", span="286-286"];
n110 [cluster="QuantConnect.Indicators.IndicatorExtensions.EMA<T>(QuantConnect.Indicators.IndicatorBase<T>, int, decimal?, bool)", label="decimal k = smoothingFactor.HasValue ? k = smoothingFactor.Value : ExponentialMovingAverage.SmoothingFactorDefault(period)", span="289-289"];
n111 [cluster="QuantConnect.Indicators.IndicatorExtensions.EMA<T>(QuantConnect.Indicators.IndicatorBase<T>, int, decimal?, bool)", label="ExponentialMovingAverage emaOfLeft = new ExponentialMovingAverage(string.Format(''EMA{0}_Of_{1}'', period, left.Name), period, k).Of(left, waitForFirstToReady)", span="290-290"];
n114 [cluster="QuantConnect.Indicators.ExponentialMovingAverage.SmoothingFactorDefault(int)", label="Entry QuantConnect.Indicators.ExponentialMovingAverage.SmoothingFactorDefault(int)", span="71-71"];
n112 [cluster="QuantConnect.Indicators.IndicatorExtensions.EMA<T>(QuantConnect.Indicators.IndicatorBase<T>, int, decimal?, bool)", label="return emaOfLeft;", span="291-291"];
n115 [cluster="QuantConnect.Indicators.ExponentialMovingAverage.ExponentialMovingAverage(string, int, decimal)", label="Entry QuantConnect.Indicators.ExponentialMovingAverage.ExponentialMovingAverage(string, int, decimal)", span="42-42"];
n116 [cluster="string.Format(string, object, object)", label="Entry string.Format(string, object, object)", span="0-0"];
n117 [cluster="TSecond.Of<T, TSecond>(QuantConnect.Indicators.IndicatorBase<T>, bool)", label="Entry TSecond.Of<T, TSecond>(QuantConnect.Indicators.IndicatorBase<T>, bool)", span="49-49"];
n113 [cluster="QuantConnect.Indicators.IndicatorExtensions.EMA<T>(QuantConnect.Indicators.IndicatorBase<T>, int, decimal?, bool)", label="Exit QuantConnect.Indicators.IndicatorExtensions.EMA<T>(QuantConnect.Indicators.IndicatorBase<T>, int, decimal?, bool)", span="286-286"];
n118 [cluster="QuantConnect.Indicators.IndicatorExtensions.MAX<T>(QuantConnect.Indicators.IndicatorBase<T>, int, bool)", label="Entry QuantConnect.Indicators.IndicatorExtensions.MAX<T>(QuantConnect.Indicators.IndicatorBase<T>, int, bool)", span="300-300"];
n119 [cluster="QuantConnect.Indicators.IndicatorExtensions.MAX<T>(QuantConnect.Indicators.IndicatorBase<T>, int, bool)", label="Maximum maxOfLeft = new Maximum(string.Format(''MAX{0}_Of_{1}'', period, left.Name), period).Of(left, waitForFirstToReady)", span="303-303"];
n120 [cluster="QuantConnect.Indicators.IndicatorExtensions.MAX<T>(QuantConnect.Indicators.IndicatorBase<T>, int, bool)", label="return maxOfLeft;", span="304-304"];
n122 [cluster="QuantConnect.Indicators.Maximum.Maximum(string, int)", label="Entry QuantConnect.Indicators.Maximum.Maximum(string, int)", span="51-51"];
n121 [cluster="QuantConnect.Indicators.IndicatorExtensions.MAX<T>(QuantConnect.Indicators.IndicatorBase<T>, int, bool)", label="Exit QuantConnect.Indicators.IndicatorExtensions.MAX<T>(QuantConnect.Indicators.IndicatorBase<T>, int, bool)", span="300-300"];
n123 [cluster="QuantConnect.Indicators.IndicatorExtensions.MIN<T>(QuantConnect.Indicators.IndicatorBase<T>, int, bool)", label="Entry QuantConnect.Indicators.IndicatorExtensions.MIN<T>(QuantConnect.Indicators.IndicatorBase<T>, int, bool)", span="313-313"];
n124 [cluster="QuantConnect.Indicators.IndicatorExtensions.MIN<T>(QuantConnect.Indicators.IndicatorBase<T>, int, bool)", label="Minimum minOfLeft = new Minimum(string.Format(''MIN{0}_Of_{1}'', period, left.Name), period).Of(left, waitForFirstToReady)", span="316-316"];
n125 [cluster="QuantConnect.Indicators.IndicatorExtensions.MIN<T>(QuantConnect.Indicators.IndicatorBase<T>, int, bool)", label="return minOfLeft;", span="317-317"];
n127 [cluster="QuantConnect.Indicators.Minimum.Minimum(string, int)", label="Entry QuantConnect.Indicators.Minimum.Minimum(string, int)", span="51-51"];
n126 [cluster="QuantConnect.Indicators.IndicatorExtensions.MIN<T>(QuantConnect.Indicators.IndicatorBase<T>, int, bool)", label="Exit QuantConnect.Indicators.IndicatorExtensions.MIN<T>(QuantConnect.Indicators.IndicatorBase<T>, int, bool)", span="313-313"];
n128 [cluster="QuantConnect.Indicators.IndicatorExtensions.SMA<T>(QuantConnect.Indicators.IndicatorBase<T>, int, bool)", label="Entry QuantConnect.Indicators.IndicatorExtensions.SMA<T>(QuantConnect.Indicators.IndicatorBase<T>, int, bool)", span="326-326"];
n129 [cluster="QuantConnect.Indicators.IndicatorExtensions.SMA<T>(QuantConnect.Indicators.IndicatorBase<T>, int, bool)", label="SimpleMovingAverage smaOfLeft = new SimpleMovingAverage(string.Format(''SMA{0}_Of_{1}'', period, left.Name), period).Of(left, waitForFirstToReady)", span="329-329"];
n130 [cluster="QuantConnect.Indicators.IndicatorExtensions.SMA<T>(QuantConnect.Indicators.IndicatorBase<T>, int, bool)", label="return smaOfLeft;", span="330-330"];
n132 [cluster="QuantConnect.Indicators.SimpleMovingAverage.SimpleMovingAverage(string, int)", label="Entry QuantConnect.Indicators.SimpleMovingAverage.SimpleMovingAverage(string, int)", span="46-46"];
n131 [cluster="QuantConnect.Indicators.IndicatorExtensions.SMA<T>(QuantConnect.Indicators.IndicatorBase<T>, int, bool)", label="Exit QuantConnect.Indicators.IndicatorExtensions.SMA<T>(QuantConnect.Indicators.IndicatorBase<T>, int, bool)", span="326-326"];
m2_19 [cluster="QuantConnect.Interfaces.IApi.GetAlgorithmStatus(string)", file="StateCheck.cs", label="Entry QuantConnect.Interfaces.IApi.GetAlgorithmStatus(string)", span="48-48"];
m2_22 [cluster="QuantConnect.Logging.Log.Error(string, bool)", file="StateCheck.cs", label="Entry QuantConnect.Logging.Log.Error(string, bool)", span="65-65"];
m2_26 [cluster="System.Threading.ManualResetEventSlim.Set()", file="StateCheck.cs", label="Entry System.Threading.ManualResetEventSlim.Set()", span="0-0"];
m2_20 [cluster="QuantConnect.Lean.Engine.AlgorithmManager.SetStatus(QuantConnect.AlgorithmStatus)", file="StateCheck.cs", label="Entry QuantConnect.Lean.Engine.AlgorithmManager.SetStatus(QuantConnect.AlgorithmStatus)", span="555-555"];
m2_18 [cluster="System.Threading.ManualResetEventSlim.Wait(int)", file="StateCheck.cs", label="Entry System.Threading.ManualResetEventSlim.Wait(int)", span="0-0"];
m2_0 [cluster="QuantConnect.Lean.Engine.StateCheck.Ping.Ping(QuantConnect.Lean.Engine.AlgorithmManager, QuantConnect.Interfaces.IApi, QuantConnect.Lean.Engine.Results.IResultHandler)", file="StateCheck.cs", label="Entry QuantConnect.Lean.Engine.StateCheck.Ping.Ping(QuantConnect.Lean.Engine.AlgorithmManager, QuantConnect.Interfaces.IApi, QuantConnect.Lean.Engine.Results.IResultHandler)", span="40-40"];
m2_3 [cluster="QuantConnect.Lean.Engine.StateCheck.Ping.Ping(QuantConnect.Lean.Engine.AlgorithmManager, QuantConnect.Interfaces.IApi, QuantConnect.Lean.Engine.Results.IResultHandler)", color=green, community=0, file="StateCheck.cs", label="_algorithmManager = algorithmManager", prediction=0, span="44-44"];
m2_2 [cluster="QuantConnect.Lean.Engine.StateCheck.Ping.Ping(QuantConnect.Lean.Engine.AlgorithmManager, QuantConnect.Interfaces.IApi, QuantConnect.Lean.Engine.Results.IResultHandler)", file="StateCheck.cs", label="_resultHandler = resultHandler", span="43-43"];
m2_4 [cluster="QuantConnect.Lean.Engine.StateCheck.Ping.Ping(QuantConnect.Lean.Engine.AlgorithmManager, QuantConnect.Interfaces.IApi, QuantConnect.Lean.Engine.Results.IResultHandler)", color=green, community=0, file="StateCheck.cs", label="_exitEvent = new ManualResetEventSlim(false)", prediction=1, span="45-45"];
m2_1 [cluster="QuantConnect.Lean.Engine.StateCheck.Ping.Ping(QuantConnect.Lean.Engine.AlgorithmManager, QuantConnect.Interfaces.IApi, QuantConnect.Lean.Engine.Results.IResultHandler)", file="StateCheck.cs", label="_api = api", span="42-42"];
m2_5 [cluster="QuantConnect.Lean.Engine.StateCheck.Ping.Ping(QuantConnect.Lean.Engine.AlgorithmManager, QuantConnect.Interfaces.IApi, QuantConnect.Lean.Engine.Results.IResultHandler)", file="StateCheck.cs", label="Exit QuantConnect.Lean.Engine.StateCheck.Ping.Ping(QuantConnect.Lean.Engine.AlgorithmManager, QuantConnect.Interfaces.IApi, QuantConnect.Lean.Engine.Results.IResultHandler)", span="40-40"];
m2_6 [cluster="System.Threading.ManualResetEventSlim.ManualResetEventSlim(bool)", file="StateCheck.cs", label="Entry System.Threading.ManualResetEventSlim.ManualResetEventSlim(bool)", span="0-0"];
m2_7 [cluster="QuantConnect.Lean.Engine.StateCheck.Ping.Run()", file="StateCheck.cs", label="Entry QuantConnect.Lean.Engine.StateCheck.Ping.Run()", span="49-49"];
m2_8 [cluster="QuantConnect.Lean.Engine.StateCheck.Ping.Run()", color=green, community=0, file="StateCheck.cs", label="!_exitEvent.Wait(500)", prediction=2, span="51-51"];
m2_9 [cluster="QuantConnect.Lean.Engine.StateCheck.Ping.Run()", file="StateCheck.cs", label="_algorithmManager.AlgorithmId != '''' && _algorithmManager.QuitState == false", span="55-55"];
m2_12 [cluster="QuantConnect.Lean.Engine.StateCheck.Ping.Run()", file="StateCheck.cs", label="_resultHandler.SetChartSubscription(state.ChartSubscription)", span="64-64"];
m2_16 [cluster="QuantConnect.Lean.Engine.StateCheck.Ping.Run()", file="StateCheck.cs", label="Log.Error(''StateCheck.Run(): Error in state check: '' + err.Message)", span="73-73"];
m2_10 [cluster="QuantConnect.Lean.Engine.StateCheck.Ping.Run()", file="StateCheck.cs", label="var state = _api.GetAlgorithmStatus(_algorithmManager.AlgorithmId)", span="58-58"];
m2_11 [cluster="QuantConnect.Lean.Engine.StateCheck.Ping.Run()", file="StateCheck.cs", label="_algorithmManager.SetStatus(state.Status)", span="61-61"];
m2_13 [cluster="QuantConnect.Lean.Engine.StateCheck.Ping.Run()", file="StateCheck.cs", label=ThreadAbortException, span="67-67"];
m2_15 [cluster="QuantConnect.Lean.Engine.StateCheck.Ping.Run()", file="StateCheck.cs", label=Exception, span="71-71"];
m2_14 [cluster="QuantConnect.Lean.Engine.StateCheck.Ping.Run()", file="StateCheck.cs", label="return;", span="69-69"];
m2_17 [cluster="QuantConnect.Lean.Engine.StateCheck.Ping.Run()", file="StateCheck.cs", label="Exit QuantConnect.Lean.Engine.StateCheck.Ping.Run()", span="49-49"];
m2_21 [cluster="QuantConnect.Lean.Engine.Results.IResultHandler.SetChartSubscription(string)", file="StateCheck.cs", label="Entry QuantConnect.Lean.Engine.Results.IResultHandler.SetChartSubscription(string)", span="205-205"];
m2_23 [cluster="QuantConnect.Lean.Engine.StateCheck.Ping.Exit()", file="StateCheck.cs", label="Entry QuantConnect.Lean.Engine.StateCheck.Ping.Exit()", span="81-81"];
m2_24 [cluster="QuantConnect.Lean.Engine.StateCheck.Ping.Exit()", color=green, community=0, file="StateCheck.cs", label="_exitEvent.Set()", prediction=2, span="83-83"];
m2_25 [cluster="QuantConnect.Lean.Engine.StateCheck.Ping.Exit()", file="StateCheck.cs", label="Exit QuantConnect.Lean.Engine.StateCheck.Ping.Exit()", span="81-81"];
m2_27 [file="StateCheck.cs", label="QuantConnect.Lean.Engine.StateCheck.Ping", span=""];
m4_0 [cluster="QuantConnect.Brokerages.InteractiveBrokers.Client.CommissionReportEventArgs.CommissionReportEventArgs(CommissionReport)", file="TradierBrokerage.cs", label="Entry QuantConnect.Brokerages.InteractiveBrokers.Client.CommissionReportEventArgs.CommissionReportEventArgs(CommissionReport)", span="33-33"];
m4_1 [cluster="QuantConnect.Brokerages.InteractiveBrokers.Client.CommissionReportEventArgs.CommissionReportEventArgs(CommissionReport)", file="TradierBrokerage.cs", label="CommissionReport = commissionReport", span="35-35"];
m4_2 [cluster="QuantConnect.Brokerages.InteractiveBrokers.Client.CommissionReportEventArgs.CommissionReportEventArgs(CommissionReport)", file="TradierBrokerage.cs", label="Exit QuantConnect.Brokerages.InteractiveBrokers.Client.CommissionReportEventArgs.CommissionReportEventArgs(CommissionReport)", span="33-33"];
m4_3 [file="TradierBrokerage.cs", label="QuantConnect.Brokerages.InteractiveBrokers.Client.CommissionReportEventArgs", span=""];
n133 -> n10  [color=darkseagreen4, key=1, label="QuantConnect.Indicators.IndicatorBase<T>", style=dashed];
n134 -> n10  [color=darkseagreen4, key=1, label=bool, style=dashed];
n135 -> n11  [color=darkseagreen4, key=1, label=TSecond, style=dashed];
n136 -> n26  [color=darkseagreen4, key=1, label=x, style=dashed];
n136 -> n27  [color=darkseagreen4, key=1, label=x, style=dashed];
n136 -> n33  [color=darkseagreen4, key=1, label=x, style=dashed];
n136 -> n34  [color=darkseagreen4, key=1, label=x, style=dashed];
n137 -> n27  [color=darkseagreen4, key=1, label=y, style=dashed];
n137 -> n28  [color=darkseagreen4, key=1, label=y, style=dashed];
n137 -> n32  [color=darkseagreen4, key=1, label=y, style=dashed];
n137 -> n33  [color=darkseagreen4, key=1, label=y, style=dashed];
n138 -> n28  [color=darkseagreen4, key=1, label=numerator, style=dashed];
n138 -> n34  [color=darkseagreen4, key=1, label=numerator, style=dashed];
n139 -> n35  [color=darkseagreen4, key=1, label=denominator, style=dashed];
n5 -> n10  [color=darkseagreen4, key=1, label="QuantConnect.Indicators.IndicatorBase<T>", style=dashed];
n5 -> n11  [color=darkseagreen4, key=1, label=TSecond, style=dashed];
n5 -> n7  [color=darkseagreen4, key=1, label=TSecond, style=dashed];
n6 -> n11  [color=darkseagreen4, key=1, label="QuantConnect.Indicators.IndicatorDataPoint", style=dashed];
n9 -> n11  [color=darkseagreen4, key=1, label="QuantConnect.Indicators.IndicatorDataPoint", style=dashed];
n14 -> n26  [color=darkseagreen4, key=1, label=x, style=dashed];
n14 -> n27  [color=darkseagreen4, key=1, label=x, style=dashed];
n14 -> n33  [color=darkseagreen4, key=1, label=x, style=dashed];
n14 -> n34  [color=darkseagreen4, key=1, label=x, style=dashed];
n15 -> n27  [color=darkseagreen4, key=1, label=y, style=dashed];
n15 -> n28  [color=darkseagreen4, key=1, label=y, style=dashed];
n15 -> n32  [color=darkseagreen4, key=1, label=y, style=dashed];
n15 -> n33  [color=darkseagreen4, key=1, label=y, style=dashed];
n16 -> n28  [color=darkseagreen4, key=1, label=numerator, style=dashed];
n16 -> n34  [color=darkseagreen4, key=1, label=numerator, style=dashed];
n16 -> n20  [color=darkseagreen4, key=1, label=numerator, style=dashed];
n17 -> n35  [color=darkseagreen4, key=1, label=denominator, style=dashed];
n17 -> n20  [color=darkseagreen4, key=1, label=denominator, style=dashed];
n18 -> n26  [color=darkseagreen4, key=1, label="QuantConnect.Indicators.IndicatorDataPoint", style=dashed];
n18 -> n28  [color=darkseagreen4, key=1, label="QuantConnect.Indicators.IndicatorDataPoint", style=dashed];
n19 -> n32  [color=darkseagreen4, key=1, label="QuantConnect.Indicators.IndicatorDataPoint", style=dashed];
n19 -> n34  [color=darkseagreen4, key=1, label="QuantConnect.Indicators.IndicatorDataPoint", style=dashed];
n19 -> n35  [color=darkseagreen4, key=1, label="QuantConnect.Indicators.IndicatorDataPoint", style=dashed];
n25 -> n28  [color=darkseagreen4, key=1, label="QuantConnect.Indicators.IndicatorDataPoint", style=dashed];
n31 -> n34  [color=darkseagreen4, key=1, label="QuantConnect.Indicators.IndicatorDataPoint", style=dashed];
n31 -> n35  [color=darkseagreen4, key=1, label="QuantConnect.Indicators.IndicatorDataPoint", style=dashed];
n37 -> n39  [color=darkseagreen4, key=1, label="QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>", style=dashed];
n45 -> n49  [color=darkseagreen4, key=1, label="QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>", style=dashed];
n52 -> n56  [color=darkseagreen4, key=1, label="QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>", style=dashed];
n58 -> n60  [color=darkseagreen4, key=1, label="QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>", style=dashed];
n64 -> n67  [color=darkseagreen4, key=1, label="QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>", style=dashed];
n70 -> n73  [color=darkseagreen4, key=1, label="QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>", style=dashed];
n75 -> n77  [color=darkseagreen4, key=1, label="QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>", style=dashed];
n80 -> n83  [color=darkseagreen4, key=1, label="QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>", style=dashed];
n87 -> n90  [color=darkseagreen4, key=1, label="QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>", style=dashed];
n92 -> n94  [color=darkseagreen4, key=1, label="QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>", style=dashed];
n98 -> n101  [color=darkseagreen4, key=1, label="QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>", style=dashed];
n104 -> n107  [color=darkseagreen4, key=1, label="QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>", style=dashed];
m2_10 -> m2_12  [color=darkseagreen4, key=1, label=state, style=dashed];
m2_27 -> m2_8  [color=green, key=1, label="QuantConnect.Lean.Engine.StateCheck.Ping", style=dashed];
m2_27 -> m2_24  [color=green, key=1, label="QuantConnect.Lean.Engine.StateCheck.Ping", style=dashed];
m2_27 -> m2_9  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.StateCheck.Ping", style=dashed];
m2_27 -> m2_11  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.StateCheck.Ping", style=dashed];
m2_27 -> m2_12  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.StateCheck.Ping", style=dashed];
}
