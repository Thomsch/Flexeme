digraph  {
n95 [label=response, span=""];
n96 [label="Nancy.Tests.Unit.ResponseExtensionsFixture", span=""];
n0 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_add_content_disposition_header_for_attachments()", label="Entry Nancy.Tests.Unit.ResponseExtensionsFixture.Should_add_content_disposition_header_for_attachments()", span="13-13"];
n1 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_add_content_disposition_header_for_attachments()", label="var response = new Response()", span="15-15"];
n6 [cluster="Nancy.Response.Response()", label="Entry Nancy.Response.Response()", span="15-15"];
n3 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_add_content_disposition_header_for_attachments()", label="result.Headers.ShouldNotBeNull()", span="19-19"];
n7 [cluster="Nancy.Response.AsAttachment(string, string)", label="Entry Nancy.Response.AsAttachment(string, string)", span="17-17"];
n4 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_add_content_disposition_header_for_attachments()", label="result.Headers.ContainsKey(''Content-Disposition'').ShouldBeTrue()", span="20-20"];
n8 [cluster="object.ShouldNotBeNull()", label="Entry object.ShouldNotBeNull()", span="125-125"];
n5 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_add_content_disposition_header_for_attachments()", label="Exit Nancy.Tests.Unit.ResponseExtensionsFixture.Should_add_content_disposition_header_for_attachments()", span="13-13"];
n9 [cluster="System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0"];
n10 [cluster="bool.ShouldBeTrue()", label="Entry bool.ShouldBeTrue()", span="70-70"];
n11 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_have_filename_in_content_disposition_header()", label="Entry Nancy.Tests.Unit.ResponseExtensionsFixture.Should_have_filename_in_content_disposition_header()", span="24-24"];
n12 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_have_filename_in_content_disposition_header()", label="var response = new Response()", span="26-26"];
n13 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_have_filename_in_content_disposition_header()", label="var result = response.AsAttachment(''testing.html'', ''text/html'')", span="28-28"];
n14 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_have_filename_in_content_disposition_header()", label="result.Headers[''Content-Disposition''].ShouldContain(''testing.html'')", span="30-30"];
n15 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_have_filename_in_content_disposition_header()", label="Exit Nancy.Tests.Unit.ResponseExtensionsFixture.Should_have_filename_in_content_disposition_header()", span="24-24"];
n16 [cluster="string.ShouldContain(string)", label="Entry string.ShouldContain(string)", span="55-55"];
n17 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_not_allow_null_filename_on_generic_responses_as_attachments()", label="Entry Nancy.Tests.Unit.ResponseExtensionsFixture.Should_not_allow_null_filename_on_generic_responses_as_attachments()", span="34-34"];
n18 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_not_allow_null_filename_on_generic_responses_as_attachments()", label="var response = new Response()", span="36-36"];
n19 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_not_allow_null_filename_on_generic_responses_as_attachments()", label="var result = Record.Exception(() => response.AsAttachment(null, ''text/html''))", span="38-38"];
n25 [cluster="lambda expression", label="response.AsAttachment(null, ''text/html'')", span="38-38"];
n20 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_not_allow_null_filename_on_generic_responses_as_attachments()", label="result.ShouldBeOfType(typeof(ArgumentException))", span="40-40"];
n22 [cluster="Unk.Exception", label="Entry Unk.Exception", span=""];
n24 [cluster="lambda expression", label="Entry lambda expression", span="38-38"];
n21 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_not_allow_null_filename_on_generic_responses_as_attachments()", label="Exit Nancy.Tests.Unit.ResponseExtensionsFixture.Should_not_allow_null_filename_on_generic_responses_as_attachments()", span="34-34"];
n23 [cluster="Unk.ShouldBeOfType", label="Entry Unk.ShouldBeOfType", span=""];
n26 [cluster="lambda expression", label="Exit lambda expression", span="38-38"];
n27 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_use_filename_and_content_type_for_attachments_from_file_response_if_not_overridden()", label="Entry Nancy.Tests.Unit.ResponseExtensionsFixture.Should_use_filename_and_content_type_for_attachments_from_file_response_if_not_overridden()", span="44-44"];
n28 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_use_filename_and_content_type_for_attachments_from_file_response_if_not_overridden()", label="var assemblyPath =\r\n                Path.GetDirectoryName(this.GetType().Assembly.Location)", span="47-48"];
n29 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_use_filename_and_content_type_for_attachments_from_file_response_if_not_overridden()", label="GenericFileResponse.RootPath = assemblyPath", span="50-50"];
n36 [cluster="object.GetType()", label="Entry object.GetType()", span="0-0"];
n37 [cluster="System.IO.Path.GetDirectoryName(string)", label="Entry System.IO.Path.GetDirectoryName(string)", span="0-0"];
n30 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_use_filename_and_content_type_for_attachments_from_file_response_if_not_overridden()", label="var filename = Path.GetFileName(this.GetType().Assembly.Location)", span="52-52"];
n31 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_use_filename_and_content_type_for_attachments_from_file_response_if_not_overridden()", label="var response = new GenericFileResponse(filename, ''image/png'')", span="53-53"];
n38 [cluster="System.IO.Path.GetFileName(string)", label="Entry System.IO.Path.GetFileName(string)", span="0-0"];
n33 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_use_filename_and_content_type_for_attachments_from_file_response_if_not_overridden()", label="result.Headers[''Content-Disposition''].ShouldContain(filename)", span="59-59"];
n32 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_use_filename_and_content_type_for_attachments_from_file_response_if_not_overridden()", label="var result = response.AsAttachment()", span="56-56"];
n39 [cluster="Nancy.Responses.GenericFileResponse.GenericFileResponse(string, string)", label="Entry Nancy.Responses.GenericFileResponse.GenericFileResponse(string, string)", span="30-30"];
n34 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_use_filename_and_content_type_for_attachments_from_file_response_if_not_overridden()", label="result.ContentType.ShouldEqual(''image/png'')", span="60-60"];
n35 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_use_filename_and_content_type_for_attachments_from_file_response_if_not_overridden()", label="Exit Nancy.Tests.Unit.ResponseExtensionsFixture.Should_use_filename_and_content_type_for_attachments_from_file_response_if_not_overridden()", span="44-44"];
n40 [cluster="object.ShouldEqual(object)", label="Entry object.ShouldEqual(object)", span="80-80"];
n41 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_allow_overriding_of_content_type_for_attachments()", label="Entry Nancy.Tests.Unit.ResponseExtensionsFixture.Should_allow_overriding_of_content_type_for_attachments()", span="64-64"];
n42 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_allow_overriding_of_content_type_for_attachments()", label="var response = new Response()", span="66-66"];
n43 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_allow_overriding_of_content_type_for_attachments()", label="response.ContentType = ''test/test''", span="67-67"];
n44 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_allow_overriding_of_content_type_for_attachments()", label="var result = response.AsAttachment(''testing.html'', ''text/html'')", span="69-69"];
n45 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_allow_overriding_of_content_type_for_attachments()", label="result.ContentType.ShouldEqual(''text/html'')", span="71-71"];
n46 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_allow_overriding_of_content_type_for_attachments()", label="Exit Nancy.Tests.Unit.ResponseExtensionsFixture.Should_allow_overriding_of_content_type_for_attachments()", span="64-64"];
n47 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_not_set_content_type_for_attachment_if_null()", label="Entry Nancy.Tests.Unit.ResponseExtensionsFixture.Should_not_set_content_type_for_attachment_if_null()", span="75-75"];
n48 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_not_set_content_type_for_attachment_if_null()", label="var response = new Response()", span="77-77"];
n49 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_not_set_content_type_for_attachment_if_null()", label="response.ContentType = ''test/test''", span="78-78"];
n50 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_not_set_content_type_for_attachment_if_null()", label="var result = response.AsAttachment(''testing.html'')", span="80-80"];
n51 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_not_set_content_type_for_attachment_if_null()", label="result.ContentType.ShouldEqual(''test/test'')", span="82-82"];
n52 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_not_set_content_type_for_attachment_if_null()", label="Exit Nancy.Tests.Unit.ResponseExtensionsFixture.Should_not_set_content_type_for_attachment_if_null()", span="75-75"];
n53 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_handle_null_response_headers_using_withheaders()", label="Entry Nancy.Tests.Unit.ResponseExtensionsFixture.Should_handle_null_response_headers_using_withheaders()", span="86-86"];
n54 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_handle_null_response_headers_using_withheaders()", label="var response = new Response()", span="88-88"];
n55 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_handle_null_response_headers_using_withheaders()", label="response.Headers = null", span="89-89"];
n56 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_handle_null_response_headers_using_withheaders()", label="var result = response.WithHeaders(new[] { Tuple.Create(''test'', ''test'') })", span="91-91"];
n57 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_handle_null_response_headers_using_withheaders()", label="result.Headers.ShouldNotBeNull()", span="93-93"];
n60 [cluster="System.Tuple.Create<T1, T2>(T1, T2)", label="Entry System.Tuple.Create<T1, T2>(T1, T2)", span="0-0"];
n61 [cluster="Nancy.Response.WithHeaders(params System.Tuple<string, string>[])", label="Entry Nancy.Response.WithHeaders(params System.Tuple<string, string>[])", span="74-74"];
n58 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_handle_null_response_headers_using_withheaders()", label="result.Headers.Count.ShouldEqual(1)", span="94-94"];
n59 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_handle_null_response_headers_using_withheaders()", label="Exit Nancy.Tests.Unit.ResponseExtensionsFixture.Should_handle_null_response_headers_using_withheaders()", span="86-86"];
n62 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_append_to_existing_headers_if_already_in_response()", label="Entry Nancy.Tests.Unit.ResponseExtensionsFixture.Should_append_to_existing_headers_if_already_in_response()", span="98-98"];
n63 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_append_to_existing_headers_if_already_in_response()", label="var response = new Response()", span="100-100"];
n64 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_append_to_existing_headers_if_already_in_response()", label="response.Headers = new Dictionary<string, string>()", span="101-101"];
n65 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_append_to_existing_headers_if_already_in_response()", label="response.Headers.Add(''Existing'', ''Test'')", span="102-102"];
n66 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_append_to_existing_headers_if_already_in_response()", label="var result = response.WithHeaders(new[] { Tuple.Create(''test'', ''test'') })", span="104-104"];
n70 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
n71 [cluster="System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0"];
n67 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_append_to_existing_headers_if_already_in_response()", label="result.Headers.ShouldNotBeNull()", span="106-106"];
n68 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_append_to_existing_headers_if_already_in_response()", label="result.Headers.Count.ShouldEqual(2)", span="107-107"];
n69 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_append_to_existing_headers_if_already_in_response()", label="Exit Nancy.Tests.Unit.ResponseExtensionsFixture.Should_append_to_existing_headers_if_already_in_response()", span="98-98"];
n72 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_add_all_headers_using_withheaders()", label="Entry Nancy.Tests.Unit.ResponseExtensionsFixture.Should_add_all_headers_using_withheaders()", span="111-111"];
n73 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_add_all_headers_using_withheaders()", label="var response = new Response()", span="113-113"];
n74 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_add_all_headers_using_withheaders()", label="var result = response.WithHeaders(\r\n                            Tuple.Create(''test'', ''testvalue''), \r\n                            Tuple.Create(''test2'', ''test2value''))", span="115-117"];
n75 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_add_all_headers_using_withheaders()", label="result.Headers.ShouldNotBeNull()", span="119-119"];
n76 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_add_all_headers_using_withheaders()", label="result.Headers[''test''].ShouldEqual(''testvalue'')", span="120-120"];
n77 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_add_all_headers_using_withheaders()", label="result.Headers[''test2''].ShouldEqual(''test2value'')", span="121-121"];
n78 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_add_all_headers_using_withheaders()", label="Exit Nancy.Tests.Unit.ResponseExtensionsFixture.Should_add_all_headers_using_withheaders()", span="111-111"];
n79 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_be_able_to_supply_withHeaders_headers_as_anonymous_types()", label="Entry Nancy.Tests.Unit.ResponseExtensionsFixture.Should_be_able_to_supply_withHeaders_headers_as_anonymous_types()", span="125-125"];
n80 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_be_able_to_supply_withHeaders_headers_as_anonymous_types()", label="var response = new Response()", span="127-127"];
n81 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_be_able_to_supply_withHeaders_headers_as_anonymous_types()", label="var result = response.WithHeaders(\r\n                new { Header = ''test'', Value = ''testvalue'' }, \r\n                new { Header = ''test2'', Value = ''test2value'' })", span="129-131"];
n82 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_be_able_to_supply_withHeaders_headers_as_anonymous_types()", label="result.Headers.ShouldNotBeNull()", span="133-133"];
n86 [cluster="Nancy.Response.WithHeaders(params object[])", label="Entry Nancy.Response.WithHeaders(params object[])", span="60-60"];
n83 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_be_able_to_supply_withHeaders_headers_as_anonymous_types()", label="result.Headers[''test''].ShouldEqual(''testvalue'')", span="134-134"];
n84 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_be_able_to_supply_withHeaders_headers_as_anonymous_types()", label="result.Headers[''test2''].ShouldEqual(''test2value'')", span="135-135"];
n85 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_be_able_to_supply_withHeaders_headers_as_anonymous_types()", label="Exit Nancy.Tests.Unit.ResponseExtensionsFixture.Should_be_able_to_supply_withHeaders_headers_as_anonymous_types()", span="125-125"];
n87 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_be_able_to_chain_setting_single_headers()", label="Entry Nancy.Tests.Unit.ResponseExtensionsFixture.Should_be_able_to_chain_setting_single_headers()", span="139-139"];
n88 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_be_able_to_chain_setting_single_headers()", label="var response = new Response()", span="141-141"];
n89 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_be_able_to_chain_setting_single_headers()", label="var result = response.WithHeader(''test'', ''testvalue'').WithHeader(''test2'', ''test2value'')", span="143-143"];
n90 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_be_able_to_chain_setting_single_headers()", label="result.Headers.ShouldNotBeNull()", span="145-145"];
n94 [cluster="Nancy.Response.WithHeader(string, string)", label="Entry Nancy.Response.WithHeader(string, string)", span="46-46"];
n91 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_be_able_to_chain_setting_single_headers()", label="result.Headers[''test''].ShouldEqual(''testvalue'')", span="146-146"];
n92 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_be_able_to_chain_setting_single_headers()", label="result.Headers[''test2''].ShouldEqual(''test2value'')", span="147-147"];
n93 [cluster="Nancy.Tests.Unit.ResponseExtensionsFixture.Should_be_able_to_chain_setting_single_headers()", label="Exit Nancy.Tests.Unit.ResponseExtensionsFixture.Should_be_able_to_chain_setting_single_headers()", span="139-139"];
d1 [cluster="Nancy.Responses.DefaultJsonSerializer.CanSerialize(string)", color=green, community=0, label="return IsJsonType(contentType);", prediction=0, span="18-18"];
d0 [cluster="Nancy.Responses.DefaultJsonSerializer.CanSerialize(string)", label="Entry Nancy.Responses.DefaultJsonSerializer.CanSerialize(string)", span="16-16"];
d2 [cluster="Nancy.Responses.DefaultJsonSerializer.CanSerialize(string)", label="Exit Nancy.Responses.DefaultJsonSerializer.CanSerialize(string)", span="16-16"];
d3 [cluster="Nancy.Responses.DefaultJsonSerializer.IsJsonType(string)", label="Entry Nancy.Responses.DefaultJsonSerializer.IsJsonType(string)", span="59-59"];
d19 [cluster="Nancy.Responses.DefaultJsonSerializer.IsJsonType(string)", label="Exit Nancy.Responses.DefaultJsonSerializer.IsJsonType(string)", span="59-59"];
d15 [cluster="Nancy.Responses.DefaultJsonSerializer.IsJsonType(string)", label="string.IsNullOrEmpty(contentType)", span="61-61"];
d17 [cluster="Nancy.Responses.DefaultJsonSerializer.IsJsonType(string)", label="var contentMimeType = contentType.Split(';')[0]", span="66-66"];
d16 [cluster="Nancy.Responses.DefaultJsonSerializer.IsJsonType(string)", label="return false;", span="63-63"];
d18 [cluster="Nancy.Responses.DefaultJsonSerializer.IsJsonType(string)", label="return contentMimeType.Equals(''application/json'', StringComparison.InvariantCultureIgnoreCase) ||\r\n                   contentMimeType.Equals(''text/json'', StringComparison.InvariantCultureIgnoreCase) ||\r\n                  (contentMimeType.StartsWith(''application/vnd'', StringComparison.InvariantCultureIgnoreCase) &&\r\n                   contentMimeType.EndsWith(''+json'', StringComparison.InvariantCultureIgnoreCase));", span="68-71"];
d20 [cluster="string.IsNullOrEmpty(string)", label="Entry string.IsNullOrEmpty(string)", span="0-0"];
d21 [cluster="string.Split(params char[])", label="Entry string.Split(params char[])", span="0-0"];
d22 [cluster="string.Equals(string, System.StringComparison)", label="Entry string.Equals(string, System.StringComparison)", span="0-0"];
d23 [cluster="string.StartsWith(string, System.StringComparison)", label="Entry string.StartsWith(string, System.StringComparison)", span="0-0"];
d24 [cluster="string.EndsWith(string, System.StringComparison)", label="Entry string.EndsWith(string, System.StringComparison)", span="0-0"];
m0_4 [cluster="Nancy.Routing.Route.Invoke(Nancy.DynamicDictionary)", file="DefaultRouteInvoker.cs", label="Entry Nancy.Routing.Route.Invoke(Nancy.DynamicDictionary)", span="54-54"];
m0_0 [cluster="Nancy.Routing.DefaultRouteInvoker.Invoke(Nancy.Routing.Route, Nancy.DynamicDictionary, Nancy.NancyContext)", file="DefaultRouteInvoker.cs", label="Entry Nancy.Routing.DefaultRouteInvoker.Invoke(Nancy.Routing.Route, Nancy.DynamicDictionary, Nancy.NancyContext)", span="14-14"];
m0_1 [cluster="Nancy.Routing.DefaultRouteInvoker.Invoke(Nancy.Routing.Route, Nancy.DynamicDictionary, Nancy.NancyContext)", file="DefaultRouteInvoker.cs", label="var result =\r\n                route.Invoke(parameters)", span="16-17"];
m0_2 [cluster="Nancy.Routing.DefaultRouteInvoker.Invoke(Nancy.Routing.Route, Nancy.DynamicDictionary, Nancy.NancyContext)", file="DefaultRouteInvoker.cs", label="return result;", span="19-19"];
m0_3 [cluster="Nancy.Routing.DefaultRouteInvoker.Invoke(Nancy.Routing.Route, Nancy.DynamicDictionary, Nancy.NancyContext)", file="DefaultRouteInvoker.cs", label="Exit Nancy.Routing.DefaultRouteInvoker.Invoke(Nancy.Routing.Route, Nancy.DynamicDictionary, Nancy.NancyContext)", span="14-14"];
m2_4 [cluster="Nancy.Responses.DefaultXmlSerializer.Serialize<TModel>(string, TModel, System.IO.Stream)", file="DefaultXmlSerializer.cs", label="Entry Nancy.Responses.DefaultXmlSerializer.Serialize<TModel>(string, TModel, System.IO.Stream)", span="25-25"];
m2_5 [cluster="Nancy.Responses.DefaultXmlSerializer.Serialize<TModel>(string, TModel, System.IO.Stream)", file="DefaultXmlSerializer.cs", label="var serializer = new XmlSerializer(typeof(TModel))", span="27-27"];
m2_6 [cluster="Nancy.Responses.DefaultXmlSerializer.Serialize<TModel>(string, TModel, System.IO.Stream)", file="DefaultXmlSerializer.cs", label="serializer.Serialize(outputStream, model)", span="28-28"];
m2_7 [cluster="Nancy.Responses.DefaultXmlSerializer.Serialize<TModel>(string, TModel, System.IO.Stream)", file="DefaultXmlSerializer.cs", label="Exit Nancy.Responses.DefaultXmlSerializer.Serialize<TModel>(string, TModel, System.IO.Stream)", span="25-25"];
m2_15 [cluster="string.IsNullOrEmpty(string)", file="DefaultXmlSerializer.cs", label="Entry string.IsNullOrEmpty(string)", span="0-0"];
m2_8 [cluster="XmlSerializer.cstr", file="DefaultXmlSerializer.cs", label="Entry XmlSerializer.cstr", span=""];
m2_3 [cluster="Nancy.Responses.DefaultXmlSerializer.IsXmlType(string)", file="DefaultXmlSerializer.cs", label="Entry Nancy.Responses.DefaultXmlSerializer.IsXmlType(string)", span="31-31"];
m2_10 [cluster="Nancy.Responses.DefaultXmlSerializer.IsXmlType(string)", file="DefaultXmlSerializer.cs", label="string.IsNullOrEmpty(contentType)", span="33-33"];
m2_12 [cluster="Nancy.Responses.DefaultXmlSerializer.IsXmlType(string)", file="DefaultXmlSerializer.cs", label="var contentMimeType = contentType.Split(';')[0]", span="38-38"];
m2_11 [cluster="Nancy.Responses.DefaultXmlSerializer.IsXmlType(string)", file="DefaultXmlSerializer.cs", label="return false;", span="35-35"];
m2_13 [cluster="Nancy.Responses.DefaultXmlSerializer.IsXmlType(string)", file="DefaultXmlSerializer.cs", label="return contentMimeType.Equals(''application/xml'', StringComparison.InvariantCultureIgnoreCase) ||\r\n                   contentMimeType.Equals(''text/xml'', StringComparison.InvariantCultureIgnoreCase) ||\r\n                  (contentMimeType.StartsWith(''application/vnd'', StringComparison.InvariantCultureIgnoreCase) &&\r\n                   contentMimeType.EndsWith(''+xml'', StringComparison.InvariantCultureIgnoreCase));", span="40-43"];
m2_14 [cluster="Nancy.Responses.DefaultXmlSerializer.IsXmlType(string)", file="DefaultXmlSerializer.cs", label="Exit Nancy.Responses.DefaultXmlSerializer.IsXmlType(string)", span="31-31"];
m2_19 [cluster="string.EndsWith(string, System.StringComparison)", file="DefaultXmlSerializer.cs", label="Entry string.EndsWith(string, System.StringComparison)", span="0-0"];
m2_17 [cluster="string.Equals(string, System.StringComparison)", file="DefaultXmlSerializer.cs", label="Entry string.Equals(string, System.StringComparison)", span="0-0"];
m2_9 [cluster="Unk.Serialize", file="DefaultXmlSerializer.cs", label="Entry Unk.Serialize", span=""];
m2_0 [cluster="Nancy.Responses.DefaultXmlSerializer.CanSerialize(string)", file="DefaultXmlSerializer.cs", label="Entry Nancy.Responses.DefaultXmlSerializer.CanSerialize(string)", span="13-13"];
m2_1 [cluster="Nancy.Responses.DefaultXmlSerializer.CanSerialize(string)", color=green, community=0, file="DefaultXmlSerializer.cs", label="return IsXmlType(contentType);", prediction=1, span="16-16"];
m2_2 [cluster="Nancy.Responses.DefaultXmlSerializer.CanSerialize(string)", file="DefaultXmlSerializer.cs", label="Exit Nancy.Responses.DefaultXmlSerializer.CanSerialize(string)", span="13-13"];
m2_18 [cluster="string.StartsWith(string, System.StringComparison)", file="DefaultXmlSerializer.cs", label="Entry string.StartsWith(string, System.StringComparison)", span="0-0"];
m2_20 [file="DefaultXmlSerializer.cs", label="Nancy.Responses.DefaultXmlSerializer", span=""];
m3_8 [cluster="lambda expression", file="FakeRoute.cs", label="Entry lambda expression", span="17-20"];
m3_10 [cluster="lambda expression", color=green, community=0, file="FakeRoute.cs", label="return response;", prediction=2, span="19-19"];
m3_5 [cluster="lambda expression", file="FakeRoute.cs", label="Entry lambda expression", span="15-15"];
m3_6 [cluster="lambda expression", file="FakeRoute.cs", label=response, span="15-15"];
m3_7 [cluster="lambda expression", file="FakeRoute.cs", label="Exit lambda expression", span="15-15"];
m3_9 [cluster="lambda expression", file="FakeRoute.cs", label="this.ActionWasInvoked = true", span="18-18"];
m3_11 [cluster="lambda expression", file="FakeRoute.cs", label="Exit lambda expression", span="17-20"];
m3_0 [cluster="Nancy.Tests.Fakes.FakeRoute.FakeRoute()", file="FakeRoute.cs", label="Entry Nancy.Tests.Fakes.FakeRoute.FakeRoute()", span="8-8"];
m3_1 [cluster="Nancy.Tests.Fakes.FakeRoute.FakeRoute()", file="FakeRoute.cs", label="Exit Nancy.Tests.Fakes.FakeRoute.FakeRoute()", span="8-8"];
m3_2 [cluster="Nancy.Tests.Fakes.FakeRoute.FakeRoute(Nancy.Response)", file="FakeRoute.cs", label="Entry Nancy.Tests.Fakes.FakeRoute.FakeRoute(Nancy.Response)", span="14-14"];
m3_3 [cluster="Nancy.Tests.Fakes.FakeRoute.FakeRoute(Nancy.Response)", color=green, community=0, file="FakeRoute.cs", label="this.Action = x => {\r\n                this.ActionWasInvoked = true;\r\n                return response;\r\n            }", prediction=3, span="17-20"];
m3_4 [cluster="Nancy.Tests.Fakes.FakeRoute.FakeRoute(Nancy.Response)", file="FakeRoute.cs", label="Exit Nancy.Tests.Fakes.FakeRoute.FakeRoute(Nancy.Response)", span="14-14"];
m3_12 [file="FakeRoute.cs", label="Nancy.Tests.Fakes.FakeRoute", span=""];
m3_13 [file="FakeRoute.cs", label="Nancy.Response", span=""];
m4_0 [cluster="Nancy.ISerializer.CanSerialize(string)", file="ISerializer.cs", label="Entry Nancy.ISerializer.CanSerialize(string)", span="11-11"];
m4_1 [cluster="Nancy.ISerializer.CanSerialize(string)", file="ISerializer.cs", label="Exit Nancy.ISerializer.CanSerialize(string)", span="11-11"];
m4_2 [cluster="Nancy.ISerializer.Serialize<TModel>(string, TModel, System.IO.Stream)", file="ISerializer.cs", label="Entry Nancy.ISerializer.Serialize<TModel>(string, TModel, System.IO.Stream)", span="20-20"];
m4_3 [cluster="Nancy.ISerializer.Serialize<TModel>(string, TModel, System.IO.Stream)", file="ISerializer.cs", label="Exit Nancy.ISerializer.Serialize<TModel>(string, TModel, System.IO.Stream)", span="20-20"];
m5_9 [cluster="Nancy.Routing.Route.Invoke(Nancy.DynamicDictionary)", file="Route.cs", label="Entry Nancy.Routing.Route.Invoke(Nancy.DynamicDictionary)", span="54-54"];
m5_10 [cluster="Nancy.Routing.Route.Invoke(Nancy.DynamicDictionary)", file="Route.cs", label="return this.Action.Invoke(parameters);", span="56-56"];
m5_11 [cluster="Nancy.Routing.Route.Invoke(Nancy.DynamicDictionary)", file="Route.cs", label="Exit Nancy.Routing.Route.Invoke(Nancy.DynamicDictionary)", span="54-54"];
m5_6 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="Route.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m5_12 [cluster="System.Func<T, TResult>.Invoke(T)", file="Route.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m5_0 [cluster="Nancy.Routing.Route.Route(Nancy.Routing.RouteDescription, System.Func<dynamic, dynamic>)", file="Route.cs", label="Entry Nancy.Routing.Route.Route(Nancy.Routing.RouteDescription, System.Func<dynamic, dynamic>)", span="14-14"];
m5_1 [cluster="Nancy.Routing.Route.Route(Nancy.Routing.RouteDescription, System.Func<dynamic, dynamic>)", file="Route.cs", label="action == null", span="16-16"];
m5_3 [cluster="Nancy.Routing.Route.Route(Nancy.Routing.RouteDescription, System.Func<dynamic, dynamic>)", file="Route.cs", label="this.Description = description", span="21-21"];
m5_4 [cluster="Nancy.Routing.Route.Route(Nancy.Routing.RouteDescription, System.Func<dynamic, dynamic>)", file="Route.cs", label="this.Action = action", span="22-22"];
m5_2 [cluster="Nancy.Routing.Route.Route(Nancy.Routing.RouteDescription, System.Func<dynamic, dynamic>)", file="Route.cs", label="throw new ArgumentNullException(''action'');", span="18-18"];
m5_5 [cluster="Nancy.Routing.Route.Route(Nancy.Routing.RouteDescription, System.Func<dynamic, dynamic>)", file="Route.cs", label="Exit Nancy.Routing.Route.Route(Nancy.Routing.RouteDescription, System.Func<dynamic, dynamic>)", span="14-14"];
m5_7 [cluster="Nancy.Routing.Route.Route(string, string, System.Func<Nancy.NancyContext, bool>, System.Func<dynamic, dynamic>)", file="Route.cs", label="Entry Nancy.Routing.Route.Route(string, string, System.Func<Nancy.NancyContext, bool>, System.Func<dynamic, dynamic>)", span="32-32"];
m5_8 [cluster="Nancy.Routing.Route.Route(string, string, System.Func<Nancy.NancyContext, bool>, System.Func<dynamic, dynamic>)", file="Route.cs", label="Exit Nancy.Routing.Route.Route(string, string, System.Func<Nancy.NancyContext, bool>, System.Func<dynamic, dynamic>)", span="32-32"];
m5_13 [file="Route.cs", label="Nancy.Routing.Route", span=""];
n95 -> n25  [color=darkseagreen4, key=1, label=response, style=dashed];
n96 -> n28  [color=darkseagreen4, key=1, label="Nancy.Tests.Unit.ResponseExtensionsFixture", style=dashed];
n18 -> n25  [color=darkseagreen4, key=1, label=response, style=dashed];
n19 -> n24  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n30 -> n33  [color=darkseagreen4, key=1, label=filename, style=dashed];
n32 -> n34  [color=darkseagreen4, key=1, label=result, style=dashed];
n56 -> n58  [color=darkseagreen4, key=1, label=result, style=dashed];
n63 -> n65  [color=darkseagreen4, key=1, label=response, style=dashed];
n66 -> n68  [color=darkseagreen4, key=1, label=result, style=dashed];
n74 -> n76  [color=darkseagreen4, key=1, label=result, style=dashed];
n74 -> n77  [color=darkseagreen4, key=1, label=result, style=dashed];
n81 -> n83  [color=darkseagreen4, key=1, label=result, style=dashed];
n81 -> n84  [color=darkseagreen4, key=1, label=result, style=dashed];
n89 -> n91  [color=darkseagreen4, key=1, label=result, style=dashed];
n89 -> n92  [color=darkseagreen4, key=1, label=result, style=dashed];
m2_4 -> m2_6  [color=darkseagreen4, key=1, label=TModel, style=dashed];
m3_2 -> m3_10  [color=green, key=1, label="Nancy.Response", style=dashed];
m3_13 -> m3_6  [color=darkseagreen4, key=1, label="Nancy.Response", style=dashed];
m3_13 -> m3_10  [color=green, key=1, label="Nancy.Response", style=dashed];
m5_13 -> m5_10  [color=darkseagreen4, key=1, label="Nancy.Routing.Route", style=dashed];
}
