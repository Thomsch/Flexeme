digraph  {
n50 [label="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters", span=""];
n0 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.CaptureNodeWithMultipleParameters(Nancy.Routing.Trie.Nodes.TrieNode, string, Nancy.Routing.Trie.ITrieNodeFactory)", label="Entry Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.CaptureNodeWithMultipleParameters(Nancy.Routing.Trie.Nodes.TrieNode, string, Nancy.Routing.Trie.ITrieNodeFactory)", span="31-31"];
n1 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.CaptureNodeWithMultipleParameters(Nancy.Routing.Trie.Nodes.TrieNode, string, Nancy.Routing.Trie.ITrieNodeFactory)", label="this.ExtractParameterNames()", span="34-34"];
n2 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.CaptureNodeWithMultipleParameters(Nancy.Routing.Trie.Nodes.TrieNode, string, Nancy.Routing.Trie.ITrieNodeFactory)", label="Exit Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.CaptureNodeWithMultipleParameters(Nancy.Routing.Trie.Nodes.TrieNode, string, Nancy.Routing.Trie.ITrieNodeFactory)", span="31-31"];
n3 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.ExtractParameterNames()", label="Entry Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.ExtractParameterNames()", span="85-85"];
n4 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.IsMatch(string)", label="Entry Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.IsMatch(string)", span="42-42"];
n5 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.IsMatch(string)", label="return MatchRegex.Matches(segment).Cast<Group>().Count(g => g.Value != string.Empty) > 1;", span="44-44"];
n6 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.IsMatch(string)", label="Exit Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.IsMatch(string)", span="42-42"];
n7 [cluster="System.Text.RegularExpressions.Regex.Matches(string)", label="Entry System.Text.RegularExpressions.Regex.Matches(string)", span="0-0"];
n8 [cluster="System.Collections.IEnumerable.Cast<TResult>()", label="Entry System.Collections.IEnumerable.Cast<TResult>()", span="0-0"];
n9 [cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>(System.Func<TSource, bool>)", label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>(System.Func<TSource, bool>)", span="0-0"];
n10 [cluster="lambda expression", label="Entry lambda expression", span="44-44"];
n11 [cluster="lambda expression", label="g.Value != string.Empty", span="44-44"];
n12 [cluster="lambda expression", label="Exit lambda expression", span="44-44"];
n13 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.IsParameterCapture(System.Text.RegularExpressions.Capture)", label="Entry Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.IsParameterCapture(System.Text.RegularExpressions.Capture)", span="47-47"];
n14 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.IsParameterCapture(System.Text.RegularExpressions.Capture)", label="return match.Value.StartsWith(''{'') && match.Value.EndsWith(''}'');", span="49-49"];
n15 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.IsParameterCapture(System.Text.RegularExpressions.Capture)", label="Exit Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.IsParameterCapture(System.Text.RegularExpressions.Capture)", span="47-47"];
n16 [cluster="string.StartsWith(string)", label="Entry string.StartsWith(string)", span="0-0"];
n17 [cluster="string.EndsWith(string)", label="Entry string.EndsWith(string)", span="0-0"];
n18 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.Match(string)", label="Entry Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.Match(string)", span="65-65"];
n19 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.Match(string)", label="var match = SegmentMatch.NoMatch", span="67-67"];
n21 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.Match(string)", label="regex.IsMatch(segment)", span="70-70"];
n23 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.Match(string)", label="var regexMatch = regex.Match(segment)", span="73-73"];
n28 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.Match(string)", label="return match;", span="79-79"];
n30 [cluster="System.Text.RegularExpressions.Regex.Regex(string)", label="Entry System.Text.RegularExpressions.Regex.Regex(string)", span="0-0"];
n22 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.Match(string)", label="match = new SegmentMatch(true)", span="72-72"];
n31 [cluster="System.Text.RegularExpressions.Regex.IsMatch(string)", label="Entry System.Text.RegularExpressions.Regex.IsMatch(string)", span="0-0"];
n32 [cluster="Nancy.Routing.Trie.SegmentMatch.SegmentMatch(bool)", label="Entry Nancy.Routing.Trie.SegmentMatch.SegmentMatch(bool)", span="26-26"];
n26 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.Match(string)", label="match.CapturedParameters.Add(parameterNames[i - 1], regexMatch.Groups[i].Value)", span="76-76"];
n24 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.Match(string)", label="var i = 1", span="74-74"];
n33 [cluster="System.Text.RegularExpressions.Regex.Match(string)", label="Entry System.Text.RegularExpressions.Regex.Match(string)", span="0-0"];
n25 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.Match(string)", label="i < regexMatch.Groups.Count", span="74-74"];
n27 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.Match(string)", label="i++", span="74-74"];
n34 [cluster="System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0"];
n29 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.Match(string)", label="Exit Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.Match(string)", span="65-65"];
n35 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.ExtractParameterNames()", label="var matches = MatchRegex.Matches(this.RouteDefinitionSegment)", span="87-87"];
n36 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.ExtractParameterNames()", label="this.BuildRegex(AssertStart)", span="88-88"];
n37 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.ExtractParameterNames()", label=matches, span="89-89"];
n44 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.BuildRegex(string)", label="Entry Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.BuildRegex(string)", span="104-104"];
n38 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.ExtractParameterNames()", label="IsParameterCapture(match)", span="91-91"];
n42 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.ExtractParameterNames()", label="this.BuildRegex(AssertEnd)", span="101-101"];
n39 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.ExtractParameterNames()", label="parameterNames.Add(match.Value.Trim('{', '}'))", span="93-93"];
n41 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.ExtractParameterNames()", label="this.BuildRegex(Regex.Escape(match.Value))", span="98-98"];
n40 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.ExtractParameterNames()", label="this.BuildRegex(MatchParameter)", span="94-94"];
n45 [cluster="string.Trim(params char[])", label="Entry string.Trim(params char[])", span="0-0"];
n46 [cluster="System.Collections.Generic.List<T>.Add(T)", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
n47 [cluster="System.Text.RegularExpressions.Regex.Escape(string)", label="Entry System.Text.RegularExpressions.Regex.Escape(string)", span="0-0"];
n43 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.ExtractParameterNames()", label="Exit Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.ExtractParameterNames()", span="85-85"];
n48 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.BuildRegex(string)", label="this.builtRegex += regexSegment", span="106-106"];
n49 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.BuildRegex(string)", label="Exit Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.BuildRegex(string)", span="104-104"];
n50 -> n1  [color=darkseagreen4, key=1, label="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters", style=dashed];
n50 -> n26  [color=darkseagreen4, key=1, label="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters", style=dashed];
n50 -> n36  [color=darkseagreen4, key=1, label="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters", style=dashed];
n50 -> n39  [color=darkseagreen4, key=1, label="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters", style=dashed];
n50 -> n40  [color=darkseagreen4, key=1, label="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters", style=dashed];
n50 -> n41  [color=darkseagreen4, key=1, label="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters", style=dashed];
n50 -> n42  [color=darkseagreen4, key=1, label="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters", style=dashed];
n5 -> n10  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n18 -> n21  [color=darkseagreen4, key=1, label=string, style=dashed];
n19 -> n28  [color=darkseagreen4, key=1, label=match, style=dashed];
n23 -> n25  [color=darkseagreen4, key=1, label=regexMatch, style=dashed];
n23 -> n26  [color=darkseagreen4, key=1, label=regexMatch, style=dashed];
n22 -> n26  [color=darkseagreen4, key=1, label=match, style=dashed];
n22 -> n28  [color=darkseagreen4, key=1, label=match, style=dashed];
n24 -> n26  [color=darkseagreen4, key=1, label=i, style=dashed];
n24 -> n27  [color=darkseagreen4, key=1, label=i, style=dashed];
n27 -> n27  [color=darkseagreen4, key=1, label=i, style=dashed];
n35 -> n37  [color=darkseagreen4, key=1, label=matches, style=dashed];
n37 -> n39  [color=darkseagreen4, key=1, label=match, style=dashed];
n37 -> n41  [color=darkseagreen4, key=1, label=match, style=dashed];
}
