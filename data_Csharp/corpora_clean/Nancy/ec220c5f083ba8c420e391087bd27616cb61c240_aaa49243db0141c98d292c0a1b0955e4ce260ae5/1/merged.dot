digraph  {
n50 [label="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters", span=""];
n0 [label="Entry Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.CaptureNodeWithMultipleParameters(Nancy.Routing.Trie.Nodes.TrieNode, string, Nancy.Routing.Trie.ITrieNodeFactory)", span="31-31", cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.CaptureNodeWithMultipleParameters(Nancy.Routing.Trie.Nodes.TrieNode, string, Nancy.Routing.Trie.ITrieNodeFactory)"];
n1 [label="this.ExtractParameterNames()", span="34-34", cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.CaptureNodeWithMultipleParameters(Nancy.Routing.Trie.Nodes.TrieNode, string, Nancy.Routing.Trie.ITrieNodeFactory)"];
n2 [label="Exit Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.CaptureNodeWithMultipleParameters(Nancy.Routing.Trie.Nodes.TrieNode, string, Nancy.Routing.Trie.ITrieNodeFactory)", span="31-31", cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.CaptureNodeWithMultipleParameters(Nancy.Routing.Trie.Nodes.TrieNode, string, Nancy.Routing.Trie.ITrieNodeFactory)"];
n3 [label="Entry Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.ExtractParameterNames()", span="85-85", cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.ExtractParameterNames()"];
n4 [label="Entry Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.IsMatch(string)", span="42-42", cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.IsMatch(string)"];
n5 [label="return MatchRegex.Matches(segment).Cast<Group>().Count(g => g.Value != string.Empty) > 1;", span="44-44", cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.IsMatch(string)"];
n6 [label="Exit Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.IsMatch(string)", span="42-42", cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.IsMatch(string)"];
n7 [label="Entry System.Text.RegularExpressions.Regex.Matches(string)", span="0-0", cluster="System.Text.RegularExpressions.Regex.Matches(string)"];
n8 [label="Entry System.Collections.IEnumerable.Cast<TResult>()", span="0-0", cluster="System.Collections.IEnumerable.Cast<TResult>()"];
n9 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>(System.Func<TSource, bool>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>(System.Func<TSource, bool>)"];
n10 [label="Entry lambda expression", span="44-44", cluster="lambda expression"];
n11 [label="g.Value != string.Empty", span="44-44", cluster="lambda expression"];
n12 [label="Exit lambda expression", span="44-44", cluster="lambda expression"];
n13 [label="Entry Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.IsParameterCapture(System.Text.RegularExpressions.Capture)", span="47-47", cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.IsParameterCapture(System.Text.RegularExpressions.Capture)"];
n14 [label="return match.Value.StartsWith(''{'') && match.Value.EndsWith(''}'');", span="49-49", cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.IsParameterCapture(System.Text.RegularExpressions.Capture)"];
n15 [label="Exit Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.IsParameterCapture(System.Text.RegularExpressions.Capture)", span="47-47", cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.IsParameterCapture(System.Text.RegularExpressions.Capture)"];
n16 [label="Entry string.StartsWith(string)", span="0-0", cluster="string.StartsWith(string)"];
n17 [label="Entry string.EndsWith(string)", span="0-0", cluster="string.EndsWith(string)"];
n18 [label="Entry Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.Match(string)", span="65-65", cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.Match(string)"];
n19 [label="var match = SegmentMatch.NoMatch", span="67-67", cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.Match(string)"];
n21 [label="regex.IsMatch(segment)", span="70-70", cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.Match(string)"];
n23 [label="var regexMatch = regex.Match(segment)", span="73-73", cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.Match(string)"];
n20 [label="var regex = new Regex(builtRegex)", span="68-68", cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.Match(string)", color=red, community=0];
n28 [label="return match;", span="79-79", cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.Match(string)"];
n30 [label="Entry System.Text.RegularExpressions.Regex.Regex(string)", span="0-0", cluster="System.Text.RegularExpressions.Regex.Regex(string)"];
n22 [label="match = new SegmentMatch(true)", span="72-72", cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.Match(string)"];
n31 [label="Entry System.Text.RegularExpressions.Regex.IsMatch(string)", span="0-0", cluster="System.Text.RegularExpressions.Regex.IsMatch(string)"];
n32 [label="Entry Nancy.Routing.Trie.SegmentMatch.SegmentMatch(bool)", span="26-26", cluster="Nancy.Routing.Trie.SegmentMatch.SegmentMatch(bool)"];
n26 [label="match.CapturedParameters.Add(parameterNames[i - 1], regexMatch.Groups[i].Value)", span="76-76", cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.Match(string)"];
n24 [label="var i = 1", span="74-74", cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.Match(string)"];
n33 [label="Entry System.Text.RegularExpressions.Regex.Match(string)", span="0-0", cluster="System.Text.RegularExpressions.Regex.Match(string)"];
n25 [label="i < regexMatch.Groups.Count", span="74-74", cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.Match(string)"];
n27 [label="i++", span="74-74", cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.Match(string)"];
n34 [label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)"];
n29 [label="Exit Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.Match(string)", span="65-65", cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.Match(string)"];
n35 [label="var matches = MatchRegex.Matches(this.RouteDefinitionSegment)", span="87-87", cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.ExtractParameterNames()"];
n36 [label="this.BuildRegex(AssertStart)", span="88-88", cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.ExtractParameterNames()"];
n37 [label=matches, span="89-89", cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.ExtractParameterNames()"];
n44 [label="Entry Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.BuildRegex(string)", span="104-104", cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.BuildRegex(string)"];
n38 [label="IsParameterCapture(match)", span="91-91", cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.ExtractParameterNames()"];
n42 [label="this.BuildRegex(AssertEnd)", span="101-101", cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.ExtractParameterNames()"];
n39 [label="parameterNames.Add(match.Value.Trim('{', '}'))", span="93-93", cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.ExtractParameterNames()"];
n41 [label="this.BuildRegex(Regex.Escape(match.Value))", span="98-98", cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.ExtractParameterNames()"];
n40 [label="this.BuildRegex(MatchParameter)", span="94-94", cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.ExtractParameterNames()"];
n45 [label="Entry string.Trim(params char[])", span="0-0", cluster="string.Trim(params char[])"];
n46 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)"];
n47 [label="Entry System.Text.RegularExpressions.Regex.Escape(string)", span="0-0", cluster="System.Text.RegularExpressions.Regex.Escape(string)"];
n43 [label="Exit Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.ExtractParameterNames()", span="85-85", cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.ExtractParameterNames()"];
n48 [label="this.builtRegex += regexSegment", span="106-106", cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.BuildRegex(string)"];
n49 [label="Exit Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.BuildRegex(string)", span="104-104", cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.BuildRegex(string)"];
n50 -> n1  [key=1, style=dashed, color=darkseagreen4, label="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters"];
n50 -> n20  [key=1, style=dashed, color=red, label="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters"];
n50 -> n26  [key=1, style=dashed, color=darkseagreen4, label="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters"];
n50 -> n35  [key=1, style=dashed, color=darkseagreen4, label="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters"];
n50 -> n36  [key=1, style=dashed, color=darkseagreen4, label="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters"];
n50 -> n39  [key=1, style=dashed, color=darkseagreen4, label="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters"];
n50 -> n40  [key=1, style=dashed, color=darkseagreen4, label="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters"];
n50 -> n41  [key=1, style=dashed, color=darkseagreen4, label="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters"];
n50 -> n42  [key=1, style=dashed, color=darkseagreen4, label="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters"];
n50 -> n48  [key=1, style=dashed, color=darkseagreen4, label="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters"];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=2, style=dotted];
n2 -> n0  [key=0, style=bold, color=blue];
n3 -> n35  [key=0, style=solid];
n4 -> n5  [key=0, style=solid];
n5 -> n6  [key=0, style=solid];
n5 -> n7  [key=2, style=dotted];
n5 -> n8  [key=2, style=dotted];
n5 -> n9  [key=2, style=dotted];
n5 -> n10  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n6 -> n4  [key=0, style=bold, color=blue];
n10 -> n11  [key=0, style=solid];
n11 -> n12  [key=0, style=solid];
n12 -> n10  [key=0, style=bold, color=blue];
n13 -> n14  [key=0, style=solid];
n13 -> n37  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Text.RegularExpressions.Capture match"];
n14 -> n15  [key=0, style=solid];
n14 -> n16  [key=2, style=dotted];
n14 -> n17  [key=2, style=dotted];
n15 -> n13  [key=0, style=bold, color=blue];
n18 -> n19  [key=0, style=solid];
n18 -> n21  [key=1, style=dashed, color=darkseagreen4, label=string];
n18 -> n23  [key=1, style=dashed, color=darkseagreen4, label=string];
n19 -> n20  [key=0, style=solid, color=red];
n19 -> n28  [key=1, style=dashed, color=darkseagreen4, label=match];
n21 -> n22  [key=0, style=solid];
n21 -> n28  [key=0, style=solid];
n21 -> n31  [key=2, style=dotted];
n23 -> n24  [key=0, style=solid];
n23 -> n33  [key=2, style=dotted];
n23 -> n25  [key=1, style=dashed, color=darkseagreen4, label=regexMatch];
n23 -> n26  [key=1, style=dashed, color=darkseagreen4, label=regexMatch];
n20 -> n21  [key=0, style=solid, color=red];
n20 -> n30  [key=2, style=dotted, color=red];
n20 -> n23  [key=1, style=dashed, color=red, label=regex];
n28 -> n29  [key=0, style=solid];
n22 -> n23  [key=0, style=solid];
n22 -> n32  [key=2, style=dotted];
n22 -> n26  [key=1, style=dashed, color=darkseagreen4, label=match];
n22 -> n28  [key=1, style=dashed, color=darkseagreen4, label=match];
n26 -> n27  [key=0, style=solid];
n26 -> n34  [key=2, style=dotted];
n24 -> n25  [key=0, style=solid];
n24 -> n26  [key=1, style=dashed, color=darkseagreen4, label=i];
n24 -> n27  [key=1, style=dashed, color=darkseagreen4, label=i];
n24 -> n24  [key=3, color=darkorchid, style=bold, label="Local variable int i"];
n25 -> n26  [key=0, style=solid];
n25 -> n28  [key=0, style=solid];
n27 -> n25  [key=0, style=solid];
n27 -> n27  [key=1, style=dashed, color=darkseagreen4, label=i];
n29 -> n18  [key=0, style=bold, color=blue];
n35 -> n36  [key=0, style=solid];
n35 -> n7  [key=2, style=dotted];
n35 -> n37  [key=1, style=dashed, color=darkseagreen4, label=matches];
n36 -> n37  [key=0, style=solid];
n36 -> n44  [key=2, style=dotted];
n37 -> n38  [key=0, style=solid];
n37 -> n42  [key=0, style=solid];
n37 -> n39  [key=1, style=dashed, color=darkseagreen4, label=match];
n37 -> n41  [key=1, style=dashed, color=darkseagreen4, label=match];
n44 -> n48  [key=0, style=solid];
n38 -> n39  [key=0, style=solid];
n38 -> n41  [key=0, style=solid];
n38 -> n13  [key=2, style=dotted];
n42 -> n43  [key=0, style=solid];
n42 -> n44  [key=2, style=dotted];
n39 -> n40  [key=0, style=solid];
n39 -> n45  [key=2, style=dotted];
n39 -> n46  [key=2, style=dotted];
n41 -> n37  [key=0, style=solid];
n41 -> n47  [key=2, style=dotted];
n41 -> n44  [key=2, style=dotted];
n40 -> n37  [key=0, style=solid];
n40 -> n44  [key=2, style=dotted];
n43 -> n3  [key=0, style=bold, color=blue];
n48 -> n49  [key=0, style=solid];
n49 -> n44  [key=0, style=bold, color=blue];
}
