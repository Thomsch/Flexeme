digraph  {
n0 [label="Entry Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_camel_case_property_names_by_default()", span="13-13", cluster="Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_camel_case_property_names_by_default()"];
n1 [label="var sut = new DefaultJsonSerializer()", span="15-15", cluster="Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_camel_case_property_names_by_default()"];
n2 [label="var input = new { FirstName = ''Joe'', lastName = ''Doe'' }", span="16-16", cluster="Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_camel_case_property_names_by_default()"];
n8 [label="Entry Nancy.Responses.DefaultJsonSerializer.DefaultJsonSerializer()", span="9-9", cluster="Nancy.Responses.DefaultJsonSerializer.DefaultJsonSerializer()"];
n4 [label="sut.Serialize(''application/json'', input, output)", span="19-19", cluster="Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_camel_case_property_names_by_default()"];
n3 [label="var output = new MemoryStream()", span="18-18", cluster="Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_camel_case_property_names_by_default()"];
n9 [label="Entry System.IO.MemoryStream.MemoryStream()", span="0-0", cluster="System.IO.MemoryStream.MemoryStream()"];
n5 [label="var actual = Encoding.UTF8.GetString(output.ToArray())", span="20-20", cluster="Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_camel_case_property_names_by_default()"];
n10 [label="Entry Nancy.Responses.DefaultJsonSerializer.Serialize<TModel>(string, TModel, System.IO.Stream)", span="37-37", cluster="Nancy.Responses.DefaultJsonSerializer.Serialize<TModel>(string, TModel, System.IO.Stream)"];
n6 [label="actual.ShouldEqual(''{\''firstName\'':\''Joe\'',\''lastName\'':\''Doe\''}'')", span="22-22", cluster="Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_camel_case_property_names_by_default()"];
n11 [label="Entry System.IO.MemoryStream.ToArray()", span="0-0", cluster="System.IO.MemoryStream.ToArray()"];
n12 [label="Entry System.Text.Encoding.GetString(byte[])", span="0-0", cluster="System.Text.Encoding.GetString(byte[])"];
n7 [label="Exit Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_camel_case_property_names_by_default()", span="13-13", cluster="Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_camel_case_property_names_by_default()"];
n13 [label="Entry object.ShouldEqual(object)", span="95-95", cluster="object.ShouldEqual(object)"];
n14 [label="Entry Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_camel_case_field_names_be_default()", span="26-26", cluster="Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_camel_case_field_names_be_default()"];
n15 [label="var sut = new DefaultJsonSerializer()", span="28-28", cluster="Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_camel_case_field_names_be_default()"];
n16 [label="var input = new PersonWithFields { firstName = ''Joe'', LastName = ''Doe'' }", span="29-29", cluster="Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_camel_case_field_names_be_default()"];
n18 [label="sut.Serialize(''application/json'', input, output)", span="32-32", cluster="Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_camel_case_field_names_be_default()"];
n17 [label="var output = new MemoryStream()", span="31-31", cluster="Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_camel_case_field_names_be_default()"];
n22 [label="Entry Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.PersonWithFields.PersonWithFields()", span="58-58", cluster="Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.PersonWithFields.PersonWithFields()"];
n19 [label="var actual = Encoding.UTF8.GetString(output.ToArray())", span="33-33", cluster="Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_camel_case_field_names_be_default()"];
n20 [label="actual.ShouldEqual(''{\''firstName\'':\''Joe\'',\''lastName\'':\''Doe\''}'')", span="35-35", cluster="Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_camel_case_field_names_be_default()"];
n21 [label="Exit Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_camel_case_field_names_be_default()", span="26-26", cluster="Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_camel_case_field_names_be_default()"];
n23 [label="Entry Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_not_change_casing_when_retain_casing_is_true()", span="39-39", cluster="Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_not_change_casing_when_retain_casing_is_true()"];
n24 [label="JsonSettings.RetainCasing = true", span="41-41", cluster="Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_not_change_casing_when_retain_casing_is_true()"];
n25 [label="var sut = new DefaultJsonSerializer()", span="44-44", cluster="Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_not_change_casing_when_retain_casing_is_true()"];
n26 [label="var input = new {FirstName = ''Joe'', lastName = ''Doe''}", span="45-45", cluster="Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_not_change_casing_when_retain_casing_is_true()"];
n28 [label="sut.Serialize(''application/json'', input, output)", span="48-48", cluster="Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_not_change_casing_when_retain_casing_is_true()"];
n27 [label="var output = new MemoryStream()", span="47-47", cluster="Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_not_change_casing_when_retain_casing_is_true()"];
n29 [label="var actual = Encoding.UTF8.GetString(output.ToArray())", span="49-49", cluster="Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_not_change_casing_when_retain_casing_is_true()"];
n30 [label="actual.ShouldEqual(''{\''FirstName\'':\''Joe\'',\''lastName\'':\''Doe\''}'')", span="50-50", cluster="Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_not_change_casing_when_retain_casing_is_true()"];
n31 [label="Exit Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_not_change_casing_when_retain_casing_is_true()", span="39-39", cluster="Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_not_change_casing_when_retain_casing_is_true()"];
d4 [label="parameters.Length == 2", span="15-15", cluster="Nancy.Routing.Constraints.RangeRouteSegmentConstraint.TryMatch(string, string[], out int)", color=green, community=0];
d0 [label="Entry Nancy.Routing.Constraints.RangeRouteSegmentConstraint.TryMatch(string, string[], out int)", span="9-9", cluster="Nancy.Routing.Constraints.RangeRouteSegmentConstraint.TryMatch(string, string[], out int)"];
d3 [label="int intValue", span="13-13", cluster="Nancy.Routing.Constraints.RangeRouteSegmentConstraint.TryMatch(string, string[], out int)"];
d5 [label="!this.TryParseInt(parameters[0], out minRange) ||\r\n                    !this.TryParseInt(parameters[1], out maxRange) ||\r\n                    !this.TryParseInt(segment, out intValue)", span="17-19", cluster="Nancy.Routing.Constraints.RangeRouteSegmentConstraint.TryMatch(string, string[], out int)", color=green, community=0];
d8 [label="matchedValue = default(int)", span="27-27", cluster="Nancy.Routing.Constraints.RangeRouteSegmentConstraint.TryMatch(string, string[], out int)"];
d17 [label="Nancy.Routing.Constraints.RangeRouteSegmentConstraint", span=""];
d6 [label="matchedValue = default(int)", span="21-21", cluster="Nancy.Routing.Constraints.RangeRouteSegmentConstraint.TryMatch(string, string[], out int)"];
d10 [label="intValue < minRange || intValue > maxRange", span="31-31", cluster="Nancy.Routing.Constraints.RangeRouteSegmentConstraint.TryMatch(string, string[], out int)", color=green, community=0];
d16 [label="Entry Nancy.Routing.Constraints.ParameterizedRouteSegmentConstraint<T>.TryParseInt(string, out int)", span="19-19", cluster="Nancy.Routing.Constraints.ParameterizedRouteSegmentConstraint<T>.TryParseInt(string, out int)"];
d13 [label="matchedValue = intValue", span="37-37", cluster="Nancy.Routing.Constraints.RangeRouteSegmentConstraint.TryMatch(string, string[], out int)"];
d1 [label="int minRange", span="11-11", cluster="Nancy.Routing.Constraints.RangeRouteSegmentConstraint.TryMatch(string, string[], out int)"];
d2 [label="int maxRange", span="12-12", cluster="Nancy.Routing.Constraints.RangeRouteSegmentConstraint.TryMatch(string, string[], out int)"];
d11 [label="matchedValue = default(int)", span="33-33", cluster="Nancy.Routing.Constraints.RangeRouteSegmentConstraint.TryMatch(string, string[], out int)"];
d15 [label="Exit Nancy.Routing.Constraints.RangeRouteSegmentConstraint.TryMatch(string, string[], out int)", span="9-9", cluster="Nancy.Routing.Constraints.RangeRouteSegmentConstraint.TryMatch(string, string[], out int)"];
d9 [label="return false;", span="28-28", cluster="Nancy.Routing.Constraints.RangeRouteSegmentConstraint.TryMatch(string, string[], out int)"];
d7 [label="return false;", span="22-22", cluster="Nancy.Routing.Constraints.RangeRouteSegmentConstraint.TryMatch(string, string[], out int)"];
d14 [label="return true;", span="38-38", cluster="Nancy.Routing.Constraints.RangeRouteSegmentConstraint.TryMatch(string, string[], out int)"];
d12 [label="return false;", span="34-34", cluster="Nancy.Routing.Constraints.RangeRouteSegmentConstraint.TryMatch(string, string[], out int)"];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n8  [key=2, style=dotted];
n1 -> n4  [key=1, style=dashed, color=darkseagreen4, label=sut];
n2 -> n3  [key=0, style=solid];
n2 -> n4  [key=1, style=dashed, color=darkseagreen4, label=input];
n4 -> n5  [key=0, style=solid];
n4 -> n10  [key=2, style=dotted];
n3 -> n4  [key=0, style=solid];
n3 -> n9  [key=2, style=dotted];
n3 -> n5  [key=1, style=dashed, color=darkseagreen4, label=output];
n5 -> n6  [key=0, style=solid];
n5 -> n11  [key=2, style=dotted];
n5 -> n12  [key=2, style=dotted];
n6 -> n7  [key=0, style=solid];
n6 -> n13  [key=2, style=dotted];
n7 -> n0  [key=0, style=bold, color=blue];
n14 -> n15  [key=0, style=solid];
n15 -> n16  [key=0, style=solid];
n15 -> n8  [key=2, style=dotted];
n15 -> n18  [key=1, style=dashed, color=darkseagreen4, label=sut];
n16 -> n17  [key=0, style=solid];
n16 -> n22  [key=2, style=dotted];
n16 -> n18  [key=1, style=dashed, color=darkseagreen4, label=input];
n18 -> n19  [key=0, style=solid];
n18 -> n10  [key=2, style=dotted];
n17 -> n18  [key=0, style=solid];
n17 -> n9  [key=2, style=dotted];
n17 -> n19  [key=1, style=dashed, color=darkseagreen4, label=output];
n19 -> n20  [key=0, style=solid];
n19 -> n11  [key=2, style=dotted];
n19 -> n12  [key=2, style=dotted];
n20 -> n21  [key=0, style=solid];
n20 -> n13  [key=2, style=dotted];
n21 -> n14  [key=0, style=bold, color=blue];
n23 -> n24  [key=0, style=solid];
n24 -> n25  [key=0, style=solid];
n25 -> n26  [key=0, style=solid];
n25 -> n8  [key=2, style=dotted];
n25 -> n28  [key=1, style=dashed, color=darkseagreen4, label=sut];
n26 -> n27  [key=0, style=solid];
n26 -> n28  [key=1, style=dashed, color=darkseagreen4, label=input];
n28 -> n29  [key=0, style=solid];
n28 -> n10  [key=2, style=dotted];
n27 -> n28  [key=0, style=solid];
n27 -> n9  [key=2, style=dotted];
n27 -> n29  [key=1, style=dashed, color=darkseagreen4, label=output];
n29 -> n30  [key=0, style=solid];
n29 -> n11  [key=2, style=dotted];
n29 -> n12  [key=2, style=dotted];
n30 -> n31  [key=0, style=solid];
n30 -> n13  [key=2, style=dotted];
n31 -> n23  [key=0, style=bold, color=blue];
d4 -> d5  [key=0, style=solid, color=green];
d4 -> d8  [key=0, style=solid, color=green];
d0 -> d4  [key=1, style=dashed, color=green, label="string[]"];
d0 -> d5  [key=1, style=dashed, color=green, label=string];
d0 -> d1  [key=0, style=solid];
d3 -> d4  [key=0, style=solid, color=green];
d3 -> d10  [key=1, style=dashed, color=green, label=intValue];
d3 -> d13  [key=1, style=dashed, color=darkseagreen4, label=intValue];
d5 -> d6  [key=0, style=solid, color=green];
d5 -> d10  [key=0, style=solid, color=green];
d5 -> d16  [key=2, style=dotted, color=green];
d5 -> d13  [key=1, style=dashed, color=green, label=intValue];
d8 -> d9  [key=0, style=solid];
d17 -> d5  [key=1, style=dashed, color=green, label="Nancy.Routing.Constraints.RangeRouteSegmentConstraint"];
d6 -> d7  [key=0, style=solid];
d10 -> d11  [key=0, style=solid, color=green];
d10 -> d13  [key=0, style=solid, color=green];
d13 -> d14  [key=0, style=solid];
d13 -> d15  [key=1, style=dashed, color=darkseagreen4, label="out int"];
d1 -> d10  [key=1, style=dashed, color=green, label=minRange];
d1 -> d2  [key=0, style=solid];
d2 -> d10  [key=1, style=dashed, color=green, label=maxRange];
d2 -> d3  [key=0, style=solid];
d11 -> d12  [key=0, style=solid];
d15 -> d0  [key=0, style=bold, color=blue];
d9 -> d15  [key=0, style=solid];
d7 -> d15  [key=0, style=solid];
d14 -> d15  [key=0, style=solid];
d12 -> d15  [key=0, style=solid];
}
