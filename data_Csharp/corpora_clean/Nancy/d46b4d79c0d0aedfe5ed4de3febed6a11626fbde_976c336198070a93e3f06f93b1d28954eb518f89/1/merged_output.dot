digraph  {
n0 [cluster="Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_camel_case_property_names_by_default()", label="Entry Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_camel_case_property_names_by_default()", span="13-13"];
n1 [cluster="Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_camel_case_property_names_by_default()", label="var sut = new DefaultJsonSerializer()", span="15-15"];
n2 [cluster="Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_camel_case_property_names_by_default()", label="var input = new { FirstName = ''Joe'', lastName = ''Doe'' }", span="16-16"];
n8 [cluster="Nancy.Responses.DefaultJsonSerializer.DefaultJsonSerializer()", label="Entry Nancy.Responses.DefaultJsonSerializer.DefaultJsonSerializer()", span="9-9"];
n4 [cluster="Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_camel_case_property_names_by_default()", label="sut.Serialize(''application/json'', input, output)", span="19-19"];
n3 [cluster="Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_camel_case_property_names_by_default()", label="var output = new MemoryStream()", span="18-18"];
n9 [cluster="System.IO.MemoryStream.MemoryStream()", label="Entry System.IO.MemoryStream.MemoryStream()", span="0-0"];
n5 [cluster="Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_camel_case_property_names_by_default()", label="var actual = Encoding.UTF8.GetString(output.ToArray())", span="20-20"];
n10 [cluster="Nancy.Responses.DefaultJsonSerializer.Serialize<TModel>(string, TModel, System.IO.Stream)", label="Entry Nancy.Responses.DefaultJsonSerializer.Serialize<TModel>(string, TModel, System.IO.Stream)", span="37-37"];
n6 [cluster="Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_camel_case_property_names_by_default()", label="actual.ShouldEqual(''{\''firstName\'':\''Joe\'',\''lastName\'':\''Doe\''}'')", span="22-22"];
n11 [cluster="System.IO.MemoryStream.ToArray()", label="Entry System.IO.MemoryStream.ToArray()", span="0-0"];
n12 [cluster="System.Text.Encoding.GetString(byte[])", label="Entry System.Text.Encoding.GetString(byte[])", span="0-0"];
n7 [cluster="Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_camel_case_property_names_by_default()", label="Exit Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_camel_case_property_names_by_default()", span="13-13"];
n13 [cluster="object.ShouldEqual(object)", label="Entry object.ShouldEqual(object)", span="95-95"];
n14 [cluster="Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_camel_case_field_names_be_default()", label="Entry Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_camel_case_field_names_be_default()", span="26-26"];
n15 [cluster="Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_camel_case_field_names_be_default()", label="var sut = new DefaultJsonSerializer()", span="28-28"];
n16 [cluster="Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_camel_case_field_names_be_default()", label="var input = new PersonWithFields { firstName = ''Joe'', LastName = ''Doe'' }", span="29-29"];
n18 [cluster="Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_camel_case_field_names_be_default()", label="sut.Serialize(''application/json'', input, output)", span="32-32"];
n17 [cluster="Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_camel_case_field_names_be_default()", label="var output = new MemoryStream()", span="31-31"];
n22 [cluster="Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.PersonWithFields.PersonWithFields()", label="Entry Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.PersonWithFields.PersonWithFields()", span="58-58"];
n19 [cluster="Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_camel_case_field_names_be_default()", label="var actual = Encoding.UTF8.GetString(output.ToArray())", span="33-33"];
n20 [cluster="Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_camel_case_field_names_be_default()", label="actual.ShouldEqual(''{\''firstName\'':\''Joe\'',\''lastName\'':\''Doe\''}'')", span="35-35"];
n21 [cluster="Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_camel_case_field_names_be_default()", label="Exit Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_camel_case_field_names_be_default()", span="26-26"];
n23 [cluster="Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_not_change_casing_when_retain_casing_is_true()", label="Entry Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_not_change_casing_when_retain_casing_is_true()", span="39-39"];
n24 [cluster="Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_not_change_casing_when_retain_casing_is_true()", label="JsonSettings.RetainCasing = true", span="41-41"];
n25 [cluster="Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_not_change_casing_when_retain_casing_is_true()", label="var sut = new DefaultJsonSerializer()", span="44-44"];
n26 [cluster="Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_not_change_casing_when_retain_casing_is_true()", label="var input = new {FirstName = ''Joe'', lastName = ''Doe''}", span="45-45"];
n28 [cluster="Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_not_change_casing_when_retain_casing_is_true()", label="sut.Serialize(''application/json'', input, output)", span="48-48"];
n27 [cluster="Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_not_change_casing_when_retain_casing_is_true()", label="var output = new MemoryStream()", span="47-47"];
n29 [cluster="Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_not_change_casing_when_retain_casing_is_true()", label="var actual = Encoding.UTF8.GetString(output.ToArray())", span="49-49"];
n30 [cluster="Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_not_change_casing_when_retain_casing_is_true()", label="actual.ShouldEqual(''{\''FirstName\'':\''Joe\'',\''lastName\'':\''Doe\''}'')", span="50-50"];
n31 [cluster="Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_not_change_casing_when_retain_casing_is_true()", label="Exit Nancy.Tests.Unit.Responses.DefaultJsonSerializerFixture.Should_not_change_casing_when_retain_casing_is_true()", span="39-39"];
d4 [cluster="Nancy.Routing.Constraints.RangeRouteSegmentConstraint.TryMatch(string, string[], out int)", color=green, community=0, label="5: parameters.Length == 2", span="15-15"];
d0 [cluster="Nancy.Routing.Constraints.RangeRouteSegmentConstraint.TryMatch(string, string[], out int)", label="Entry Nancy.Routing.Constraints.RangeRouteSegmentConstraint.TryMatch(string, string[], out int)", span="9-9"];
d3 [cluster="Nancy.Routing.Constraints.RangeRouteSegmentConstraint.TryMatch(string, string[], out int)", label="int intValue", span="13-13"];
d5 [cluster="Nancy.Routing.Constraints.RangeRouteSegmentConstraint.TryMatch(string, string[], out int)", color=green, community=0, label="3: !this.TryParseInt(parameters[0], out minRange) ||\r\n                    !this.TryParseInt(parameters[1], out maxRange) ||\r\n                    !this.TryParseInt(segment, out intValue)", span="17-19"];
d8 [cluster="Nancy.Routing.Constraints.RangeRouteSegmentConstraint.TryMatch(string, string[], out int)", label="matchedValue = default(int)", span="27-27"];
d17 [label="Nancy.Routing.Constraints.RangeRouteSegmentConstraint", span=""];
d6 [cluster="Nancy.Routing.Constraints.RangeRouteSegmentConstraint.TryMatch(string, string[], out int)", label="matchedValue = default(int)", span="21-21"];
d10 [cluster="Nancy.Routing.Constraints.RangeRouteSegmentConstraint.TryMatch(string, string[], out int)", color=green, community=0, label="5: intValue < minRange || intValue > maxRange", span="31-31"];
d16 [cluster="Nancy.Routing.Constraints.ParameterizedRouteSegmentConstraint<T>.TryParseInt(string, out int)", label="Entry Nancy.Routing.Constraints.ParameterizedRouteSegmentConstraint<T>.TryParseInt(string, out int)", span="19-19"];
d13 [cluster="Nancy.Routing.Constraints.RangeRouteSegmentConstraint.TryMatch(string, string[], out int)", label="matchedValue = intValue", span="37-37"];
d1 [cluster="Nancy.Routing.Constraints.RangeRouteSegmentConstraint.TryMatch(string, string[], out int)", label="int minRange", span="11-11"];
d2 [cluster="Nancy.Routing.Constraints.RangeRouteSegmentConstraint.TryMatch(string, string[], out int)", label="int maxRange", span="12-12"];
d11 [cluster="Nancy.Routing.Constraints.RangeRouteSegmentConstraint.TryMatch(string, string[], out int)", label="matchedValue = default(int)", span="33-33"];
d15 [cluster="Nancy.Routing.Constraints.RangeRouteSegmentConstraint.TryMatch(string, string[], out int)", label="Exit Nancy.Routing.Constraints.RangeRouteSegmentConstraint.TryMatch(string, string[], out int)", span="9-9"];
d9 [cluster="Nancy.Routing.Constraints.RangeRouteSegmentConstraint.TryMatch(string, string[], out int)", label="return false;", span="28-28"];
d7 [cluster="Nancy.Routing.Constraints.RangeRouteSegmentConstraint.TryMatch(string, string[], out int)", label="return false;", span="22-22"];
d14 [cluster="Nancy.Routing.Constraints.RangeRouteSegmentConstraint.TryMatch(string, string[], out int)", label="return true;", span="38-38"];
d12 [cluster="Nancy.Routing.Constraints.RangeRouteSegmentConstraint.TryMatch(string, string[], out int)", label="return false;", span="34-34"];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n8  [key=2, style=dotted];
n1 -> n4  [color=darkseagreen4, key=1, label=sut, style=dashed];
n2 -> n3  [key=0, style=solid];
n2 -> n4  [color=darkseagreen4, key=1, label=input, style=dashed];
n4 -> n5  [key=0, style=solid];
n4 -> n10  [key=2, style=dotted];
n3 -> n4  [key=0, style=solid];
n3 -> n9  [key=2, style=dotted];
n3 -> n5  [color=darkseagreen4, key=1, label=output, style=dashed];
n5 -> n6  [key=0, style=solid];
n5 -> n11  [key=2, style=dotted];
n5 -> n12  [key=2, style=dotted];
n6 -> n7  [key=0, style=solid];
n6 -> n13  [key=2, style=dotted];
n7 -> n0  [color=blue, key=0, style=bold];
n14 -> n15  [key=0, style=solid];
n15 -> n16  [key=0, style=solid];
n15 -> n8  [key=2, style=dotted];
n15 -> n18  [color=darkseagreen4, key=1, label=sut, style=dashed];
n16 -> n17  [key=0, style=solid];
n16 -> n22  [key=2, style=dotted];
n16 -> n18  [color=darkseagreen4, key=1, label=input, style=dashed];
n18 -> n19  [key=0, style=solid];
n18 -> n10  [key=2, style=dotted];
n17 -> n18  [key=0, style=solid];
n17 -> n9  [key=2, style=dotted];
n17 -> n19  [color=darkseagreen4, key=1, label=output, style=dashed];
n19 -> n20  [key=0, style=solid];
n19 -> n11  [key=2, style=dotted];
n19 -> n12  [key=2, style=dotted];
n20 -> n21  [key=0, style=solid];
n20 -> n13  [key=2, style=dotted];
n21 -> n14  [color=blue, key=0, style=bold];
n23 -> n24  [key=0, style=solid];
n24 -> n25  [key=0, style=solid];
n25 -> n26  [key=0, style=solid];
n25 -> n8  [key=2, style=dotted];
n25 -> n28  [color=darkseagreen4, key=1, label=sut, style=dashed];
n26 -> n27  [key=0, style=solid];
n26 -> n28  [color=darkseagreen4, key=1, label=input, style=dashed];
n28 -> n29  [key=0, style=solid];
n28 -> n10  [key=2, style=dotted];
n27 -> n28  [key=0, style=solid];
n27 -> n9  [key=2, style=dotted];
n27 -> n29  [color=darkseagreen4, key=1, label=output, style=dashed];
n29 -> n30  [key=0, style=solid];
n29 -> n11  [key=2, style=dotted];
n29 -> n12  [key=2, style=dotted];
n30 -> n31  [key=0, style=solid];
n30 -> n13  [key=2, style=dotted];
n31 -> n23  [color=blue, key=0, style=bold];
d4 -> d5  [color=green, key=0, style=solid];
d4 -> d8  [color=green, key=0, style=solid];
d0 -> d4  [color=green, key=1, label="string[]", style=dashed];
d0 -> d5  [color=green, key=1, label=string, style=dashed];
d0 -> d1  [key=0, style=solid];
d3 -> d4  [color=green, key=0, style=solid];
d3 -> d10  [color=green, key=1, label=intValue, style=dashed];
d3 -> d13  [color=darkseagreen4, key=1, label=intValue, style=dashed];
d5 -> d6  [color=green, key=0, style=solid];
d5 -> d10  [color=green, key=0, style=solid];
d5 -> d16  [color=green, key=2, style=dotted];
d5 -> d13  [color=green, key=1, label=intValue, style=dashed];
d8 -> d9  [key=0, style=solid];
d17 -> d5  [color=green, key=1, label="Nancy.Routing.Constraints.RangeRouteSegmentConstraint", style=dashed];
d6 -> d7  [key=0, style=solid];
d10 -> d11  [color=green, key=0, style=solid];
d10 -> d13  [color=green, key=0, style=solid];
d13 -> d14  [key=0, style=solid];
d13 -> d15  [color=darkseagreen4, key=1, label="out int", style=dashed];
d1 -> d10  [color=green, key=1, label=minRange, style=dashed];
d1 -> d2  [key=0, style=solid];
d2 -> d10  [color=green, key=1, label=maxRange, style=dashed];
d2 -> d3  [key=0, style=solid];
d11 -> d12  [key=0, style=solid];
d15 -> d0  [color=blue, key=0, style=bold];
d9 -> d15  [key=0, style=solid];
d7 -> d15  [key=0, style=solid];
d14 -> d15  [key=0, style=solid];
d12 -> d15  [key=0, style=solid];
}
