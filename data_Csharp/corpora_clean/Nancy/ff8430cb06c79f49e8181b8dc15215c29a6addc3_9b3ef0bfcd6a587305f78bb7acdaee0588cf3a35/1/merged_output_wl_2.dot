digraph  {
n23 [label="Nancy.Routing.Trie.Nodes.CaptureNodeWithLiteral", span=""];
n0 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithLiteral.CaptureNodeWithLiteral(Nancy.Routing.Trie.Nodes.TrieNode, string, Nancy.Routing.Trie.ITrieNodeFactory)", label="Entry Nancy.Routing.Trie.Nodes.CaptureNodeWithLiteral.CaptureNodeWithLiteral(Nancy.Routing.Trie.Nodes.TrieNode, string, Nancy.Routing.Trie.ITrieNodeFactory)", span="26-26"];
n1 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithLiteral.CaptureNodeWithLiteral(Nancy.Routing.Trie.Nodes.TrieNode, string, Nancy.Routing.Trie.ITrieNodeFactory)", color=red, community=0, label="2: this.ExtractParameterName()", span="29-29"];
n2 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithLiteral.CaptureNodeWithLiteral(Nancy.Routing.Trie.Nodes.TrieNode, string, Nancy.Routing.Trie.ITrieNodeFactory)", label="Exit Nancy.Routing.Trie.Nodes.CaptureNodeWithLiteral.CaptureNodeWithLiteral(Nancy.Routing.Trie.Nodes.TrieNode, string, Nancy.Routing.Trie.ITrieNodeFactory)", span="26-26"];
n3 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithLiteral.ExtractParameterName()", label="Entry Nancy.Routing.Trie.Nodes.CaptureNodeWithLiteral.ExtractParameterName()", span="51-51"];
n4 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithLiteral.Match(string)", label="Entry Nancy.Routing.Trie.Nodes.CaptureNodeWithLiteral.Match(string)", span="37-37"];
n5 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithLiteral.Match(string)", color=red, community=0, label="0: var match = SegmentMatch.NoMatch", span="39-39"];
n6 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithLiteral.Match(string)", color=red, community=0, label="0: segment.StartsWith(this.preLiteral) && segment.EndsWith(this.postLiteral)", span="40-40"];
n8 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithLiteral.Match(string)", color=red, community=0, label="0: match.CapturedParameters.Add(this.parameterName, segment.Substring(this.preLiteral.Length, segment.Length - this.postLiteral.Length - this.preLiteral.Length))", span="43-43"];
n9 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithLiteral.Match(string)", color=red, community=0, label="2: return match;", span="45-45"];
n7 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithLiteral.Match(string)", color=red, community=0, label="0: match = new SegmentMatch(true)", span="42-42"];
n11 [cluster="string.StartsWith(string)", label="Entry string.StartsWith(string)", span="0-0"];
n12 [cluster="string.EndsWith(string)", label="Entry string.EndsWith(string)", span="0-0"];
n13 [cluster="Nancy.Routing.Trie.SegmentMatch.SegmentMatch(bool)", label="Entry Nancy.Routing.Trie.SegmentMatch.SegmentMatch(bool)", span="26-26"];
n14 [cluster="string.Substring(int, int)", label="Entry string.Substring(int, int)", span="0-0"];
n15 [cluster="System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0"];
n10 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithLiteral.Match(string)", label="Exit Nancy.Routing.Trie.Nodes.CaptureNodeWithLiteral.Match(string)", span="37-37"];
n16 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithLiteral.ExtractParameterName()", color=red, community=0, label="0: var matches = MatchRegex.Match(this.RouteDefinitionSegment)", span="53-53"];
n17 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithLiteral.ExtractParameterName()", color=red, community=0, label="0: this.preLiteral = matches.Groups[1].Captures[0].Value", span="54-54"];
n21 [cluster="System.Text.RegularExpressions.Regex.Match(string)", label="Entry System.Text.RegularExpressions.Regex.Match(string)", span="0-0"];
n18 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithLiteral.ExtractParameterName()", color=red, community=0, label="0: this.parameterName = matches.Groups[2].Captures[0].Value.Trim('{', '}')", span="55-55"];
n19 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithLiteral.ExtractParameterName()", color=red, community=0, label="2: this.postLiteral = matches.Groups[3].Captures[0].Value", span="56-56"];
n22 [cluster="string.Trim(params char[])", label="Entry string.Trim(params char[])", span="0-0"];
n20 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithLiteral.ExtractParameterName()", label="Exit Nancy.Routing.Trie.Nodes.CaptureNodeWithLiteral.ExtractParameterName()", span="51-51"];
m0_13 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.Match(string)", file="CaptureNodeWithMultipleParameters.cs", label="Entry Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.Match(string)", span="41-41"];
m0_14 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.Match(string)", color=green, community=0, file="CaptureNodeWithMultipleParameters.cs", label="0: var match = SegmentMatch.NoMatch", span="43-43"];
m0_15 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.Match(string)", color=green, community=0, file="CaptureNodeWithMultipleParameters.cs", label="0: var regex = new Regex(builtRegex)", span="44-44"];
m0_23 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.Match(string)", color=green, community=0, file="CaptureNodeWithMultipleParameters.cs", label="2: return match;", span="55-55"];
m0_16 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.Match(string)", color=green, community=0, file="CaptureNodeWithMultipleParameters.cs", label="0: regex.IsMatch(segment)", span="46-46"];
m0_17 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.Match(string)", color=green, community=0, file="CaptureNodeWithMultipleParameters.cs", label="0: match = new SegmentMatch(true)", span="48-48"];
m0_18 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.Match(string)", color=green, community=0, file="CaptureNodeWithMultipleParameters.cs", label="0: var regexMatch = regex.Match(segment)", span="49-49"];
m0_19 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.Match(string)", color=green, community=0, file="CaptureNodeWithMultipleParameters.cs", label="0: int i = 1", span="50-50"];
m0_20 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.Match(string)", color=green, community=0, file="CaptureNodeWithMultipleParameters.cs", label="0: i < regexMatch.Groups.Count", span="50-50"];
m0_21 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.Match(string)", color=green, community=0, file="CaptureNodeWithMultipleParameters.cs", label="0: match.CapturedParameters.Add(parameterNames[i - 1], regexMatch.Groups[i].Value)", span="52-52"];
m0_22 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.Match(string)", color=green, community=0, file="CaptureNodeWithMultipleParameters.cs", label="0: i++", span="50-50"];
m0_24 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.Match(string)", file="CaptureNodeWithMultipleParameters.cs", label="Exit Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.Match(string)", span="41-41"];
m0_12 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.ExtractParameterNames()", file="CaptureNodeWithMultipleParameters.cs", label="Entry Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.ExtractParameterNames()", span="61-61"];
m0_30 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.ExtractParameterNames()", color=green, community=0, file="CaptureNodeWithMultipleParameters.cs", label="0: var matches = MatchRegex.Matches(this.RouteDefinitionSegment)", span="63-63"];
m0_31 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.ExtractParameterNames()", color=green, community=0, file="CaptureNodeWithMultipleParameters.cs", label="0: builtRegex += ''^''", span="64-64"];
m0_32 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.ExtractParameterNames()", color=green, community=0, file="CaptureNodeWithMultipleParameters.cs", label="0: matches", span="65-65"];
m0_36 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.ExtractParameterNames()", color=green, community=0, file="CaptureNodeWithMultipleParameters.cs", label="0: builtRegex += Regex.Escape(match.Value)", span="74-74"];
m0_35 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.ExtractParameterNames()", color=green, community=0, file="CaptureNodeWithMultipleParameters.cs", label="3: builtRegex += ''(.+)''", span="70-70"];
m0_33 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.ExtractParameterNames()", color=green, community=0, file="CaptureNodeWithMultipleParameters.cs", label="0: match.Value.StartsWith(''{'') && match.Value.EndsWith(''}'')", span="67-67"];
m0_37 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.ExtractParameterNames()", color=green, community=0, file="CaptureNodeWithMultipleParameters.cs", label="2: builtRegex += ''$''", span="77-77"];
m0_34 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.ExtractParameterNames()", color=green, community=0, file="CaptureNodeWithMultipleParameters.cs", label="0: parameterNames.Add(match.Value.Trim('{', '}'))", span="69-69"];
m0_38 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.ExtractParameterNames()", file="CaptureNodeWithMultipleParameters.cs", label="Exit Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.ExtractParameterNames()", span="61-61"];
m0_26 [cluster="System.Text.RegularExpressions.Regex.IsMatch(string)", file="CaptureNodeWithMultipleParameters.cs", label="Entry System.Text.RegularExpressions.Regex.IsMatch(string)", span="0-0"];
m0_40 [cluster="string.EndsWith(string)", file="CaptureNodeWithMultipleParameters.cs", label="Entry string.EndsWith(string)", span="0-0"];
m0_28 [cluster="System.Text.RegularExpressions.Regex.Match(string)", file="CaptureNodeWithMultipleParameters.cs", label="Entry System.Text.RegularExpressions.Regex.Match(string)", span="0-0"];
m0_42 [cluster="System.Collections.Generic.List<T>.Add(T)", file="CaptureNodeWithMultipleParameters.cs", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
m0_39 [cluster="string.StartsWith(string)", file="CaptureNodeWithMultipleParameters.cs", label="Entry string.StartsWith(string)", span="0-0"];
m0_43 [cluster="System.Text.RegularExpressions.Regex.Escape(string)", file="CaptureNodeWithMultipleParameters.cs", label="Entry System.Text.RegularExpressions.Regex.Escape(string)", span="0-0"];
m0_5 [cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>(System.Func<TSource, bool>)", file="CaptureNodeWithMultipleParameters.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>(System.Func<TSource, bool>)", span="0-0"];
m0_9 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.CaptureNodeWithMultipleParameters(Nancy.Routing.Trie.Nodes.TrieNode, string, Nancy.Routing.Trie.ITrieNodeFactory)", file="CaptureNodeWithMultipleParameters.cs", label="Entry Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.CaptureNodeWithMultipleParameters(Nancy.Routing.Trie.Nodes.TrieNode, string, Nancy.Routing.Trie.ITrieNodeFactory)", span="30-30"];
m0_10 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.CaptureNodeWithMultipleParameters(Nancy.Routing.Trie.Nodes.TrieNode, string, Nancy.Routing.Trie.ITrieNodeFactory)", color=green, community=0, file="CaptureNodeWithMultipleParameters.cs", label="2: this.ExtractParameterNames()", span="33-33"];
m0_11 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.CaptureNodeWithMultipleParameters(Nancy.Routing.Trie.Nodes.TrieNode, string, Nancy.Routing.Trie.ITrieNodeFactory)", file="CaptureNodeWithMultipleParameters.cs", label="Exit Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.CaptureNodeWithMultipleParameters(Nancy.Routing.Trie.Nodes.TrieNode, string, Nancy.Routing.Trie.ITrieNodeFactory)", span="30-30"];
m0_25 [cluster="System.Text.RegularExpressions.Regex.Regex(string)", file="CaptureNodeWithMultipleParameters.cs", label="Entry System.Text.RegularExpressions.Regex.Regex(string)", span="0-0"];
m0_4 [cluster="System.Collections.IEnumerable.Cast<TResult>()", file="CaptureNodeWithMultipleParameters.cs", label="Entry System.Collections.IEnumerable.Cast<TResult>()", span="0-0"];
m0_29 [cluster="System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", file="CaptureNodeWithMultipleParameters.cs", label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0"];
m0_27 [cluster="Nancy.Routing.Trie.SegmentMatch.SegmentMatch(bool)", file="CaptureNodeWithMultipleParameters.cs", label="Entry Nancy.Routing.Trie.SegmentMatch.SegmentMatch(bool)", span="26-26"];
m0_6 [cluster="lambda expression", file="CaptureNodeWithMultipleParameters.cs", label="Entry lambda expression", span="19-19"];
m0_7 [cluster="lambda expression", color=green, community=0, file="CaptureNodeWithMultipleParameters.cs", label="1: g.Value != ''''", span="19-19"];
m0_8 [cluster="lambda expression", file="CaptureNodeWithMultipleParameters.cs", label="Exit lambda expression", span="19-19"];
m0_0 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.IsMatch(string)", file="CaptureNodeWithMultipleParameters.cs", label="Entry Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.IsMatch(string)", span="17-17"];
m0_1 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.IsMatch(string)", color=green, community=0, file="CaptureNodeWithMultipleParameters.cs", label="0: return MatchRegex.Matches(segment).Cast<Group>().Count(g => g.Value != '''') > 1;", span="19-19"];
m0_2 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.IsMatch(string)", file="CaptureNodeWithMultipleParameters.cs", label="Exit Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.IsMatch(string)", span="17-17"];
m0_3 [cluster="System.Text.RegularExpressions.Regex.Matches(string)", file="CaptureNodeWithMultipleParameters.cs", label="Entry System.Text.RegularExpressions.Regex.Matches(string)", span="0-0"];
m0_44 [file="CaptureNodeWithMultipleParameters.cs", label="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters", span=""];
m1_6 [cluster="Nancy.BeforePipeline.AddItemToStartOfPipeline(System.Func<Nancy.NancyContext, Nancy.Response>)", file="DefaultRoutePatternMatcherFixture.cs", label="Entry Nancy.BeforePipeline.AddItemToStartOfPipeline(System.Func<Nancy.NancyContext, Nancy.Response>)", span="96-96"];
m1_0 [cluster="Nancy.Security.CsrfProtection.RequiresCsrfProtection(Nancy.NancyModule)", file="DefaultRoutePatternMatcherFixture.cs", label="Entry Nancy.Security.CsrfProtection.RequiresCsrfProtection(Nancy.NancyModule)", span="7-7"];
m1_1 [cluster="Nancy.Security.CsrfProtection.RequiresCsrfProtection(Nancy.NancyModule)", file="DefaultRoutePatternMatcherFixture.cs", label="Exit Nancy.Security.CsrfProtection.RequiresCsrfProtection(Nancy.NancyModule)", span="7-7"];
m1_9 [cluster="System.NotImplementedException.NotImplementedException()", file="DefaultRoutePatternMatcherFixture.cs", label="Entry System.NotImplementedException.NotImplementedException()", span="0-0"];
m1_2 [cluster="Nancy.Security.CsrfProtection.Enable(Nancy.Bootstrapper.IApplicationPipelines)", file="DefaultRoutePatternMatcherFixture.cs", label="Entry Nancy.Security.CsrfProtection.Enable(Nancy.Bootstrapper.IApplicationPipelines)", span="12-12"];
m1_3 [cluster="Nancy.Security.CsrfProtection.Enable(Nancy.Bootstrapper.IApplicationPipelines)", file="DefaultRoutePatternMatcherFixture.cs", label="pipelines.BeforeRequest.AddItemToStartOfPipeline(getCsrfValidationHook())", span="14-14"];
m1_4 [cluster="Nancy.Security.CsrfProtection.Enable(Nancy.Bootstrapper.IApplicationPipelines)", file="DefaultRoutePatternMatcherFixture.cs", label="Exit Nancy.Security.CsrfProtection.Enable(Nancy.Bootstrapper.IApplicationPipelines)", span="12-12"];
m1_5 [cluster="Nancy.Security.CsrfProtection.getCsrfValidationHook()", file="DefaultRoutePatternMatcherFixture.cs", label="Entry Nancy.Security.CsrfProtection.getCsrfValidationHook()", span="17-17"];
m1_7 [cluster="Nancy.Security.CsrfProtection.getCsrfValidationHook()", file="DefaultRoutePatternMatcherFixture.cs", label="throw new NotImplementedException();", span="19-19"];
m1_8 [cluster="Nancy.Security.CsrfProtection.getCsrfValidationHook()", file="DefaultRoutePatternMatcherFixture.cs", label="Exit Nancy.Security.CsrfProtection.getCsrfValidationHook()", span="17-17"];
m3_26 [cluster="Nancy.Routing.Trie.Nodes.LiteralNode.LiteralNode(Nancy.Routing.Trie.Nodes.TrieNode, string, Nancy.Routing.Trie.ITrieNodeFactory)", file="TrieNodeFactory.cs", label="Entry Nancy.Routing.Trie.Nodes.LiteralNode.LiteralNode(Nancy.Routing.Trie.Nodes.TrieNode, string, Nancy.Routing.Trie.ITrieNodeFactory)", span="17-17"];
m3_40 [cluster="string.Contains(string)", file="TrieNodeFactory.cs", label="Entry string.Contains(string)", span="0-0"];
m3_18 [cluster="Nancy.Routing.Trie.Nodes.RegExNode.RegExNode(Nancy.Routing.Trie.Nodes.TrieNode, string, Nancy.Routing.Trie.ITrieNodeFactory)", file="TrieNodeFactory.cs", label="Entry Nancy.Routing.Trie.Nodes.RegExNode.RegExNode(Nancy.Routing.Trie.Nodes.TrieNode, string, Nancy.Routing.Trie.ITrieNodeFactory)", span="21-21"];
m3_21 [cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>(System.Func<TSource, bool>)", file="TrieNodeFactory.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>(System.Func<TSource, bool>)", span="0-0"];
m3_14 [cluster="Nancy.Routing.Trie.Nodes.RootNode.RootNode(Nancy.Routing.Trie.ITrieNodeFactory)", file="TrieNodeFactory.cs", label="Entry Nancy.Routing.Trie.Nodes.RootNode.RootNode(Nancy.Routing.Trie.ITrieNodeFactory)", span="21-21"];
m3_23 [cluster="Nancy.Routing.Trie.Nodes.GreedyRegExCaptureNode.GreedyRegExCaptureNode(Nancy.Routing.Trie.Nodes.TrieNode, string, Nancy.Routing.Trie.ITrieNodeFactory)", file="TrieNodeFactory.cs", label="Entry Nancy.Routing.Trie.Nodes.GreedyRegExCaptureNode.GreedyRegExCaptureNode(Nancy.Routing.Trie.Nodes.TrieNode, string, Nancy.Routing.Trie.ITrieNodeFactory)", span="27-27"];
m3_17 [cluster="string.EndsWith(string)", file="TrieNodeFactory.cs", label="Entry string.EndsWith(string)", span="0-0"];
m3_25 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.CaptureNodeWithMultipleParameters(Nancy.Routing.Trie.Nodes.TrieNode, string, Nancy.Routing.Trie.ITrieNodeFactory)", file="TrieNodeFactory.cs", label="Entry Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.CaptureNodeWithMultipleParameters(Nancy.Routing.Trie.Nodes.TrieNode, string, Nancy.Routing.Trie.ITrieNodeFactory)", span="30-30"];
m3_22 [cluster="Nancy.Routing.Trie.TrieNodeFactory.GetCaptureNode(Nancy.Routing.Trie.Nodes.TrieNode, string)", file="TrieNodeFactory.cs", label="Entry Nancy.Routing.Trie.TrieNodeFactory.GetCaptureNode(Nancy.Routing.Trie.Nodes.TrieNode, string)", span="48-48"];
m3_31 [cluster="Nancy.Routing.Trie.TrieNodeFactory.GetCaptureNode(Nancy.Routing.Trie.Nodes.TrieNode, string)", file="TrieNodeFactory.cs", label="return new CaptureNodeWithConstraint(parent, segment, this);", span="52-52"];
m3_33 [cluster="Nancy.Routing.Trie.TrieNodeFactory.GetCaptureNode(Nancy.Routing.Trie.Nodes.TrieNode, string)", file="TrieNodeFactory.cs", label="return new OptionalCaptureNode(parent, segment, this);", span="57-57"];
m3_35 [cluster="Nancy.Routing.Trie.TrieNodeFactory.GetCaptureNode(Nancy.Routing.Trie.Nodes.TrieNode, string)", file="TrieNodeFactory.cs", label="return new GreedyCaptureNode(parent, segment, this);", span="62-62"];
m3_37 [cluster="Nancy.Routing.Trie.TrieNodeFactory.GetCaptureNode(Nancy.Routing.Trie.Nodes.TrieNode, string)", file="TrieNodeFactory.cs", label="return new CaptureNodeWithDefaultValue(parent, segment, this);", span="67-67"];
m3_38 [cluster="Nancy.Routing.Trie.TrieNodeFactory.GetCaptureNode(Nancy.Routing.Trie.Nodes.TrieNode, string)", file="TrieNodeFactory.cs", label="return new CaptureNode(parent, segment, this);", span="70-70"];
m3_30 [cluster="Nancy.Routing.Trie.TrieNodeFactory.GetCaptureNode(Nancy.Routing.Trie.Nodes.TrieNode, string)", file="TrieNodeFactory.cs", label="segment.Contains('':'')", span="50-50"];
m3_32 [cluster="Nancy.Routing.Trie.TrieNodeFactory.GetCaptureNode(Nancy.Routing.Trie.Nodes.TrieNode, string)", file="TrieNodeFactory.cs", label="segment.EndsWith(''?}'')", span="55-55"];
m3_34 [cluster="Nancy.Routing.Trie.TrieNodeFactory.GetCaptureNode(Nancy.Routing.Trie.Nodes.TrieNode, string)", file="TrieNodeFactory.cs", label="segment.EndsWith(''*}'')", span="60-60"];
m3_36 [cluster="Nancy.Routing.Trie.TrieNodeFactory.GetCaptureNode(Nancy.Routing.Trie.Nodes.TrieNode, string)", file="TrieNodeFactory.cs", label="segment.Contains(''?'')", span="65-65"];
m3_39 [cluster="Nancy.Routing.Trie.TrieNodeFactory.GetCaptureNode(Nancy.Routing.Trie.Nodes.TrieNode, string)", file="TrieNodeFactory.cs", label="Exit Nancy.Routing.Trie.TrieNodeFactory.GetCaptureNode(Nancy.Routing.Trie.Nodes.TrieNode, string)", span="48-48"];
m3_24 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.IsMatch(string)", file="TrieNodeFactory.cs", label="Entry Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.IsMatch(string)", span="17-17"];
m3_45 [cluster="Nancy.Routing.Trie.Nodes.CaptureNode.CaptureNode(Nancy.Routing.Trie.Nodes.TrieNode, string, Nancy.Routing.Trie.ITrieNodeFactory)", file="TrieNodeFactory.cs", label="Entry Nancy.Routing.Trie.Nodes.CaptureNode.CaptureNode(Nancy.Routing.Trie.Nodes.TrieNode, string, Nancy.Routing.Trie.ITrieNodeFactory)", span="17-17"];
m3_42 [cluster="Nancy.Routing.Trie.Nodes.OptionalCaptureNode.OptionalCaptureNode(Nancy.Routing.Trie.Nodes.TrieNode, string, Nancy.Routing.Trie.ITrieNodeFactory)", file="TrieNodeFactory.cs", label="Entry Nancy.Routing.Trie.Nodes.OptionalCaptureNode.OptionalCaptureNode(Nancy.Routing.Trie.Nodes.TrieNode, string, Nancy.Routing.Trie.ITrieNodeFactory)", span="19-19"];
m3_20 [cluster="System.Collections.Generic.IEnumerable<TSource>.Last<TSource>()", file="TrieNodeFactory.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Last<TSource>()", span="0-0"];
m3_19 [cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="TrieNodeFactory.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0"];
m3_27 [cluster="lambda expression", file="TrieNodeFactory.cs", label="Entry lambda expression", span="30-30"];
m3_28 [cluster="lambda expression", color=green, community=0, file="TrieNodeFactory.cs", label="1: c == '{' || c == '}'", span="30-30"];
m3_29 [cluster="lambda expression", file="TrieNodeFactory.cs", label="Exit lambda expression", span="30-30"];
m3_41 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithConstraint.CaptureNodeWithConstraint(Nancy.Routing.Trie.Nodes.TrieNode, string, Nancy.Routing.Trie.ITrieNodeFactory)", file="TrieNodeFactory.cs", label="Entry Nancy.Routing.Trie.Nodes.CaptureNodeWithConstraint.CaptureNodeWithConstraint(Nancy.Routing.Trie.Nodes.TrieNode, string, Nancy.Routing.Trie.ITrieNodeFactory)", span="23-23"];
m3_15 [cluster="string.ToCharArray()", file="TrieNodeFactory.cs", label="Entry string.ToCharArray()", span="0-0"];
m3_0 [cluster="Nancy.Routing.Trie.TrieNodeFactory.GetNodeForSegment(Nancy.Routing.Trie.Nodes.TrieNode, string)", file="TrieNodeFactory.cs", label="Entry Nancy.Routing.Trie.TrieNodeFactory.GetNodeForSegment(Nancy.Routing.Trie.Nodes.TrieNode, string)", span="16-16"];
m3_3 [cluster="Nancy.Routing.Trie.TrieNodeFactory.GetNodeForSegment(Nancy.Routing.Trie.Nodes.TrieNode, string)", color=green, community=0, file="TrieNodeFactory.cs", label="0: var chars = segment.ToCharArray()", span="23-23"];
m3_1 [cluster="Nancy.Routing.Trie.TrieNodeFactory.GetNodeForSegment(Nancy.Routing.Trie.Nodes.TrieNode, string)", file="TrieNodeFactory.cs", label="parent == null", span="18-18"];
m3_4 [cluster="Nancy.Routing.Trie.TrieNodeFactory.GetNodeForSegment(Nancy.Routing.Trie.Nodes.TrieNode, string)", file="TrieNodeFactory.cs", label="segment.StartsWith(''('') && segment.EndsWith('')'')", span="25-25"];
m3_6 [cluster="Nancy.Routing.Trie.TrieNodeFactory.GetNodeForSegment(Nancy.Routing.Trie.Nodes.TrieNode, string)", color=green, community=0, file="TrieNodeFactory.cs", label="0: chars.First() == '{' && chars.Last() == '}' && chars.Count(c => c == '{' || c == '}') == 2", span="30-30"];
m3_10 [cluster="Nancy.Routing.Trie.TrieNodeFactory.GetNodeForSegment(Nancy.Routing.Trie.Nodes.TrieNode, string)", color=green, community=0, file="TrieNodeFactory.cs", label="0: CaptureNodeWithMultipleParameters.IsMatch(segment)", span="40-40"];
m3_8 [cluster="Nancy.Routing.Trie.TrieNodeFactory.GetNodeForSegment(Nancy.Routing.Trie.Nodes.TrieNode, string)", file="TrieNodeFactory.cs", label="segment.StartsWith(''^('') && (segment.EndsWith('')'') || segment.EndsWith('')$''))", span="35-35"];
m3_11 [cluster="Nancy.Routing.Trie.TrieNodeFactory.GetNodeForSegment(Nancy.Routing.Trie.Nodes.TrieNode, string)", color=green, community=0, file="TrieNodeFactory.cs", label="0: return new CaptureNodeWithMultipleParameters(parent, segment, this);", span="42-42"];
m3_12 [cluster="Nancy.Routing.Trie.TrieNodeFactory.GetNodeForSegment(Nancy.Routing.Trie.Nodes.TrieNode, string)", file="TrieNodeFactory.cs", label="return new LiteralNode(parent, segment, this);", span="45-45"];
m3_7 [cluster="Nancy.Routing.Trie.TrieNodeFactory.GetNodeForSegment(Nancy.Routing.Trie.Nodes.TrieNode, string)", file="TrieNodeFactory.cs", label="return this.GetCaptureNode(parent, segment);", span="32-32"];
m3_5 [cluster="Nancy.Routing.Trie.TrieNodeFactory.GetNodeForSegment(Nancy.Routing.Trie.Nodes.TrieNode, string)", file="TrieNodeFactory.cs", label="return new RegExNode(parent, segment, this);", span="27-27"];
m3_9 [cluster="Nancy.Routing.Trie.TrieNodeFactory.GetNodeForSegment(Nancy.Routing.Trie.Nodes.TrieNode, string)", file="TrieNodeFactory.cs", label="return new GreedyRegExCaptureNode(parent, segment, this);", span="37-37"];
m3_2 [cluster="Nancy.Routing.Trie.TrieNodeFactory.GetNodeForSegment(Nancy.Routing.Trie.Nodes.TrieNode, string)", file="TrieNodeFactory.cs", label="return new RootNode(this);", span="20-20"];
m3_13 [cluster="Nancy.Routing.Trie.TrieNodeFactory.GetNodeForSegment(Nancy.Routing.Trie.Nodes.TrieNode, string)", file="TrieNodeFactory.cs", label="Exit Nancy.Routing.Trie.TrieNodeFactory.GetNodeForSegment(Nancy.Routing.Trie.Nodes.TrieNode, string)", span="16-16"];
m3_44 [cluster="Nancy.Routing.Trie.Nodes.CaptureNodeWithDefaultValue.CaptureNodeWithDefaultValue(Nancy.Routing.Trie.Nodes.TrieNode, string, Nancy.Routing.Trie.ITrieNodeFactory)", file="TrieNodeFactory.cs", label="Entry Nancy.Routing.Trie.Nodes.CaptureNodeWithDefaultValue.CaptureNodeWithDefaultValue(Nancy.Routing.Trie.Nodes.TrieNode, string, Nancy.Routing.Trie.ITrieNodeFactory)", span="21-21"];
m3_43 [cluster="Nancy.Routing.Trie.Nodes.GreedyCaptureNode.GreedyCaptureNode(Nancy.Routing.Trie.Nodes.TrieNode, string, Nancy.Routing.Trie.ITrieNodeFactory)", file="TrieNodeFactory.cs", label="Entry Nancy.Routing.Trie.Nodes.GreedyCaptureNode.GreedyCaptureNode(Nancy.Routing.Trie.Nodes.TrieNode, string, Nancy.Routing.Trie.ITrieNodeFactory)", span="25-25"];
m3_46 [file="TrieNodeFactory.cs", label="Nancy.Routing.Trie.TrieNodeFactory", span=""];
n23 -> n1  [color=red, key=1, label="Nancy.Routing.Trie.Nodes.CaptureNodeWithLiteral", style=dashed];
n23 -> n6  [color=red, key=1, label="Nancy.Routing.Trie.Nodes.CaptureNodeWithLiteral", style=dashed];
n23 -> n8  [color=red, key=1, label="Nancy.Routing.Trie.Nodes.CaptureNodeWithLiteral", style=dashed];
n23 -> n16  [color=red, key=1, label="Nancy.Routing.Trie.Nodes.CaptureNodeWithLiteral", style=dashed];
n23 -> n17  [color=red, key=1, label="Nancy.Routing.Trie.Nodes.CaptureNodeWithLiteral", style=dashed];
n23 -> n18  [color=red, key=1, label="Nancy.Routing.Trie.Nodes.CaptureNodeWithLiteral", style=dashed];
n23 -> n19  [color=red, key=1, label="Nancy.Routing.Trie.Nodes.CaptureNodeWithLiteral", style=dashed];
n0 -> n1  [color=red, key=0, style=solid];
n1 -> n2  [color=red, key=0, style=solid];
n1 -> n3  [color=red, key=2, style=dotted];
n2 -> n0  [color=blue, key=0, style=bold];
n3 -> n16  [color=red, key=0, style=solid];
n4 -> n5  [color=red, key=0, style=solid];
n4 -> n6  [color=red, key=1, label=string, style=dashed];
n4 -> n8  [color=red, key=1, label=string, style=dashed];
n5 -> n6  [color=red, key=0, style=solid];
n5 -> n9  [color=red, key=1, label=match, style=dashed];
n6 -> n7  [color=red, key=0, style=solid];
n6 -> n9  [color=red, key=0, style=solid];
n6 -> n11  [color=red, key=2, style=dotted];
n6 -> n12  [color=red, key=2, style=dotted];
n8 -> n9  [color=red, key=0, style=solid];
n8 -> n14  [color=red, key=2, style=dotted];
n8 -> n15  [color=red, key=2, style=dotted];
n9 -> n10  [color=red, key=0, style=solid];
n7 -> n8  [color=red, key=0, style=solid];
n7 -> n13  [color=red, key=2, style=dotted];
n7 -> n9  [color=red, key=1, label=match, style=dashed];
n10 -> n4  [color=blue, key=0, style=bold];
n16 -> n17  [color=red, key=0, style=solid];
n16 -> n21  [color=red, key=2, style=dotted];
n16 -> n18  [color=red, key=1, label=matches, style=dashed];
n16 -> n19  [color=red, key=1, label=matches, style=dashed];
n17 -> n18  [color=red, key=0, style=solid];
n18 -> n19  [color=red, key=0, style=solid];
n18 -> n22  [color=red, key=2, style=dotted];
n19 -> n20  [color=red, key=0, style=solid];
n20 -> n3  [color=blue, key=0, style=bold];
m0_13 -> m0_14  [color=green, key=0, style=solid];
m0_13 -> m0_16  [color=green, key=1, label=string, style=dashed];
m0_13 -> m0_18  [color=green, key=1, label=string, style=dashed];
m0_14 -> m0_15  [color=green, key=0, style=solid];
m0_14 -> m0_23  [color=green, key=1, label=match, style=dashed];
m0_15 -> m0_16  [color=green, key=0, style=solid];
m0_15 -> m0_18  [color=green, key=1, label=regex, style=dashed];
m0_15 -> m0_25  [color=green, key=2, style=dotted];
m0_23 -> m0_24  [color=green, key=0, style=solid];
m0_16 -> m0_17  [color=green, key=0, style=solid];
m0_16 -> m0_23  [color=green, key=0, style=solid];
m0_16 -> m0_26  [color=green, key=2, style=dotted];
m0_17 -> m0_18  [color=green, key=0, style=solid];
m0_17 -> m0_23  [color=green, key=1, label=match, style=dashed];
m0_17 -> m0_27  [color=green, key=2, style=dotted];
m0_17 -> m0_21  [color=green, key=1, label=match, style=dashed];
m0_18 -> m0_19  [color=green, key=0, style=solid];
m0_18 -> m0_28  [color=green, key=2, style=dotted];
m0_18 -> m0_20  [color=green, key=1, label=regexMatch, style=dashed];
m0_18 -> m0_21  [color=green, key=1, label=regexMatch, style=dashed];
m0_19 -> m0_21  [color=green, key=1, label=i, style=dashed];
m0_19 -> m0_19  [color=green, key=3, label="Local variable int i", style=bold];
m0_19 -> m0_20  [color=green, key=0, style=solid];
m0_19 -> m0_22  [color=green, key=1, label=i, style=dashed];
m0_20 -> m0_23  [color=green, key=0, style=solid];
m0_20 -> m0_21  [color=green, key=0, style=solid];
m0_21 -> m0_22  [color=green, key=0, style=solid];
m0_21 -> m0_29  [color=green, key=2, style=dotted];
m0_22 -> m0_20  [color=green, key=0, style=solid];
m0_22 -> m0_22  [color=green, key=1, label=i, style=dashed];
m0_24 -> m0_13  [color=blue, key=0, style=bold];
m0_12 -> m0_30  [color=green, key=0, style=solid];
m0_30 -> m0_31  [color=green, key=0, style=solid];
m0_30 -> m0_3  [color=green, key=2, style=dotted];
m0_30 -> m0_32  [color=green, key=1, label=matches, style=dashed];
m0_31 -> m0_32  [color=green, key=0, style=solid];
m0_32 -> m0_33  [color=green, key=0, style=solid];
m0_32 -> m0_37  [color=green, key=0, style=solid];
m0_32 -> m0_34  [color=green, key=1, label=match, style=dashed];
m0_32 -> m0_36  [color=green, key=1, label=match, style=dashed];
m0_36 -> m0_32  [color=green, key=0, style=solid];
m0_36 -> m0_43  [color=green, key=2, style=dotted];
m0_35 -> m0_32  [color=green, key=0, style=solid];
m0_33 -> m0_34  [color=green, key=0, style=solid];
m0_33 -> m0_36  [color=green, key=0, style=solid];
m0_33 -> m0_39  [color=green, key=2, style=dotted];
m0_33 -> m0_40  [color=green, key=2, style=dotted];
m0_37 -> m0_38  [color=green, key=0, style=solid];
m0_34 -> m0_35  [color=green, key=0, style=solid];
m0_34 -> n22  [color=green, key=2, style=dotted];
m0_34 -> m0_42  [color=green, key=2, style=dotted];
m0_38 -> m0_12  [color=blue, key=0, style=bold];
m0_9 -> m0_10  [color=green, key=0, style=solid];
m0_10 -> m0_11  [color=green, key=0, style=solid];
m0_10 -> m0_12  [color=green, key=2, style=dotted];
m0_11 -> m0_9  [color=blue, key=0, style=bold];
m0_6 -> m0_7  [color=green, key=0, style=solid];
m0_7 -> m0_8  [color=green, key=0, style=solid];
m0_8 -> m0_6  [color=blue, key=0, style=bold];
m0_0 -> m0_1  [color=green, key=0, style=solid];
m0_1 -> m0_2  [color=green, key=0, style=solid];
m0_1 -> m0_3  [color=green, key=2, style=dotted];
m0_1 -> m0_4  [color=green, key=2, style=dotted];
m0_1 -> m0_5  [color=green, key=2, style=dotted];
m0_1 -> m0_6  [color=green, key=1, label="lambda expression", style=dashed];
m0_2 -> m0_0  [color=blue, key=0, style=bold];
m0_44 -> m0_10  [color=green, key=1, label="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters", style=dashed];
m0_44 -> m0_15  [color=green, key=1, label="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters", style=dashed];
m0_44 -> m0_21  [color=green, key=1, label="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters", style=dashed];
m0_44 -> m0_30  [color=green, key=1, label="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters", style=dashed];
m0_44 -> m0_31  [color=green, key=1, label="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters", style=dashed];
m0_44 -> m0_37  [color=green, key=1, label="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters", style=dashed];
m0_44 -> m0_34  [color=green, key=1, label="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters", style=dashed];
m0_44 -> m0_36  [color=green, key=1, label="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters", style=dashed];
m0_44 -> m0_35  [color=green, key=1, label="Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters", style=dashed];
m1_0 -> m1_1  [key=0, style=solid];
m1_1 -> m1_0  [color=blue, key=0, style=bold];
m1_2 -> m1_3  [key=0, style=solid];
m1_3 -> m1_4  [key=0, style=solid];
m1_3 -> m1_5  [key=2, style=dotted];
m1_3 -> m1_6  [key=2, style=dotted];
m1_4 -> m1_2  [color=blue, key=0, style=bold];
m1_5 -> m1_7  [key=0, style=solid];
m1_7 -> m1_8  [key=0, style=solid];
m1_7 -> m1_9  [key=2, style=dotted];
m1_8 -> m1_5  [color=blue, key=0, style=bold];
m3_22 -> m3_0  [color=darkorchid, key=3, label="Parameter variable string segment", style=bold];
m3_22 -> m3_30  [key=0, style=solid];
m3_22 -> m3_31  [color=darkseagreen4, key=1, label="Nancy.Routing.Trie.Nodes.TrieNode", style=dashed];
m3_22 -> m3_32  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_22 -> m3_33  [color=darkseagreen4, key=1, label="Nancy.Routing.Trie.Nodes.TrieNode", style=dashed];
m3_22 -> m3_34  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_22 -> m3_35  [color=darkseagreen4, key=1, label="Nancy.Routing.Trie.Nodes.TrieNode", style=dashed];
m3_22 -> m3_36  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_22 -> m3_37  [color=darkseagreen4, key=1, label="Nancy.Routing.Trie.Nodes.TrieNode", style=dashed];
m3_22 -> m3_38  [color=darkseagreen4, key=1, label="Nancy.Routing.Trie.Nodes.TrieNode", style=dashed];
m3_31 -> m3_39  [key=0, style=solid];
m3_31 -> m3_41  [key=2, style=dotted];
m3_33 -> m3_39  [key=0, style=solid];
m3_33 -> m3_42  [key=2, style=dotted];
m3_35 -> m3_39  [key=0, style=solid];
m3_35 -> m3_43  [key=2, style=dotted];
m3_37 -> m3_39  [key=0, style=solid];
m3_37 -> m3_44  [key=2, style=dotted];
m3_38 -> m3_39  [key=0, style=solid];
m3_38 -> m3_45  [key=2, style=dotted];
m3_30 -> m3_31  [key=0, style=solid];
m3_30 -> m3_32  [key=0, style=solid];
m3_30 -> m3_40  [key=2, style=dotted];
m3_32 -> m3_17  [key=2, style=dotted];
m3_32 -> m3_33  [key=0, style=solid];
m3_32 -> m3_34  [key=0, style=solid];
m3_34 -> m3_17  [key=2, style=dotted];
m3_34 -> m3_35  [key=0, style=solid];
m3_34 -> m3_36  [key=0, style=solid];
m3_36 -> m3_37  [key=0, style=solid];
m3_36 -> m3_38  [key=0, style=solid];
m3_36 -> m3_40  [key=2, style=dotted];
m3_39 -> m3_22  [color=blue, key=0, style=bold];
m3_27 -> m3_28  [color=green, key=0, style=solid];
m3_28 -> m3_29  [color=green, key=0, style=solid];
m3_29 -> m3_27  [color=blue, key=0, style=bold];
m3_0 -> m3_3  [color=green, key=1, label=string, style=dashed];
m3_0 -> m3_10  [color=green, key=1, label=string, style=dashed];
m3_0 -> m3_11  [color=green, key=1, label="Nancy.Routing.Trie.Nodes.TrieNode", style=dashed];
m3_0 -> m3_1  [key=0, style=solid];
m3_0 -> m3_4  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_0 -> m3_5  [color=darkseagreen4, key=1, label="Nancy.Routing.Trie.Nodes.TrieNode", style=dashed];
m3_0 -> m3_7  [color=darkseagreen4, key=1, label="Nancy.Routing.Trie.Nodes.TrieNode", style=dashed];
m3_0 -> m3_8  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_0 -> m3_9  [color=darkseagreen4, key=1, label="Nancy.Routing.Trie.Nodes.TrieNode", style=dashed];
m3_0 -> m3_12  [color=darkseagreen4, key=1, label="Nancy.Routing.Trie.Nodes.TrieNode", style=dashed];
m3_0 -> m3_22  [color=darkorchid, key=3, label="method methodReturn Nancy.Routing.Trie.Nodes.TrieNode GetNodeForSegment", style=bold];
m3_3 -> m3_4  [color=green, key=0, style=solid];
m3_3 -> m3_15  [color=green, key=2, style=dotted];
m3_3 -> m3_6  [color=green, key=1, label=chars, style=dashed];
m3_1 -> m3_3  [color=green, key=0, style=solid];
m3_1 -> m3_2  [key=0, style=solid];
m3_4 -> m3_6  [color=green, key=0, style=solid];
m3_4 -> m3_5  [key=0, style=solid];
m3_4 -> n11  [key=2, style=dotted];
m3_4 -> m3_17  [key=2, style=dotted];
m3_6 -> m3_7  [color=green, key=0, style=solid];
m3_6 -> m3_8  [color=green, key=0, style=solid];
m3_6 -> m3_19  [color=green, key=2, style=dotted];
m3_6 -> m3_20  [color=green, key=2, style=dotted];
m3_6 -> m3_21  [color=green, key=2, style=dotted];
m3_6 -> m3_27  [color=green, key=1, label="lambda expression", style=dashed];
m3_10 -> m3_11  [color=green, key=0, style=solid];
m3_10 -> m3_12  [color=green, key=0, style=solid];
m3_10 -> m3_24  [color=green, key=2, style=dotted];
m3_8 -> m3_10  [color=green, key=0, style=solid];
m3_8 -> m3_9  [key=0, style=solid];
m3_8 -> n11  [key=2, style=dotted];
m3_8 -> m3_17  [key=2, style=dotted];
m3_11 -> m3_13  [color=green, key=0, style=solid];
m3_11 -> m3_25  [color=green, key=2, style=dotted];
m3_12 -> m3_13  [key=0, style=solid];
m3_12 -> m3_26  [key=2, style=dotted];
m3_7 -> m3_13  [key=0, style=solid];
m3_7 -> m3_22  [key=2, style=dotted];
m3_5 -> m3_13  [key=0, style=solid];
m3_5 -> m3_18  [key=2, style=dotted];
m3_9 -> m3_13  [key=0, style=solid];
m3_9 -> m3_23  [key=2, style=dotted];
m3_2 -> m3_13  [key=0, style=solid];
m3_2 -> m3_14  [key=2, style=dotted];
m3_13 -> m3_0  [color=blue, key=0, style=bold];
m3_46 -> m3_11  [color=green, key=1, label="Nancy.Routing.Trie.TrieNodeFactory", style=dashed];
m3_46 -> m3_12  [color=darkseagreen4, key=1, label="Nancy.Routing.Trie.TrieNodeFactory", style=dashed];
m3_46 -> m3_2  [color=darkseagreen4, key=1, label="Nancy.Routing.Trie.TrieNodeFactory", style=dashed];
m3_46 -> m3_5  [color=darkseagreen4, key=1, label="Nancy.Routing.Trie.TrieNodeFactory", style=dashed];
m3_46 -> m3_7  [color=darkseagreen4, key=1, label="Nancy.Routing.Trie.TrieNodeFactory", style=dashed];
m3_46 -> m3_9  [color=darkseagreen4, key=1, label="Nancy.Routing.Trie.TrieNodeFactory", style=dashed];
m3_46 -> m3_31  [color=darkseagreen4, key=1, label="Nancy.Routing.Trie.TrieNodeFactory", style=dashed];
m3_46 -> m3_33  [color=darkseagreen4, key=1, label="Nancy.Routing.Trie.TrieNodeFactory", style=dashed];
m3_46 -> m3_35  [color=darkseagreen4, key=1, label="Nancy.Routing.Trie.TrieNodeFactory", style=dashed];
m3_46 -> m3_37  [color=darkseagreen4, key=1, label="Nancy.Routing.Trie.TrieNodeFactory", style=dashed];
m3_46 -> m3_38  [color=darkseagreen4, key=1, label="Nancy.Routing.Trie.TrieNodeFactory", style=dashed];
}
