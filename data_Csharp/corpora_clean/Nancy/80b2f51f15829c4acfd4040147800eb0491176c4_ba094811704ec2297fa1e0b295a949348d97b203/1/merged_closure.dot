digraph  {
n47 [label=bodyBytes, span=""];
n0 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_documentwrapper_from_context_if_it_is_present()", label="Entry Nancy.Testing.Tests.ContextExtensionsTests.Should_use_documentwrapper_from_context_if_it_is_present()", span="12-12"];
n1 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_documentwrapper_from_context_if_it_is_present()", label="var wrapper = new DocumentWrapper(''<html></html>'')", span="14-14"];
n2 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_documentwrapper_from_context_if_it_is_present()", label="var context = new NancyContext()", span="15-15"];
n7 [cluster="Nancy.Testing.DocumentWrapper.DocumentWrapper(string)", label="Entry Nancy.Testing.DocumentWrapper.DocumentWrapper(string)", span="47-47"];
n3 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_documentwrapper_from_context_if_it_is_present()", label="context.Items[''@@@@DOCUMENT_WRAPPER@@@@''] = wrapper", span="16-16"];
n5 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_documentwrapper_from_context_if_it_is_present()", label="result.ShouldBeSameAs(wrapper)", span="20-20"];
n8 [cluster="Nancy.NancyContext.NancyContext()", label="Entry Nancy.NancyContext.NancyContext()", span="16-16"];
n4 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_documentwrapper_from_context_if_it_is_present()", label="var result = context.DocumentBody()", span="18-18"];
n9 [cluster="Nancy.NancyContext.DocumentBody()", label="Entry Nancy.NancyContext.DocumentBody()", span="34-34"];
n6 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_documentwrapper_from_context_if_it_is_present()", label="Exit Nancy.Testing.Tests.ContextExtensionsTests.Should_use_documentwrapper_from_context_if_it_is_present()", span="12-12"];
n10 [cluster="object.ShouldBeSameAs(object)", label="Entry object.ShouldBeSameAs(object)", span="115-115"];
n11 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_html_response_if_not_already_present()", label="Entry Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_html_response_if_not_already_present()", span="24-24"];
n12 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_html_response_if_not_already_present()", label="var called = false", span="26-26"];
n13 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_html_response_if_not_already_present()", label="var bodyBytes = Encoding.ASCII.GetBytes(''<html></html>'')", span="27-27"];
n14 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_html_response_if_not_already_present()", label="Action<Stream> bodyDelegate = (s) =>\r\n			{\r\n				s.Write(bodyBytes, 0, bodyBytes.Length);\r\n				called = true;\r\n			}", span="28-32"];
n21 [cluster="System.Text.Encoding.GetBytes(string)", label="Entry System.Text.Encoding.GetBytes(string)", span="0-0"];
n26 [cluster="lambda expression", label="s.Write(bodyBytes, 0, bodyBytes.Length)", span="30-30"];
n15 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_html_response_if_not_already_present()", label="var response = new Response { Contents = bodyDelegate }", span="33-33"];
n16 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_html_response_if_not_already_present()", label="var context = new NancyContext() { Response = response }", span="34-34"];
n22 [cluster="Nancy.Response.Response()", label="Entry Nancy.Response.Response()", span="15-15"];
n17 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_html_response_if_not_already_present()", label="var result = context.DocumentBody()", span="36-36"];
n18 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_html_response_if_not_already_present()", label="result.ShouldBeOfType(typeof(DocumentWrapper))", span="38-38"];
n19 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_html_response_if_not_already_present()", label="called.ShouldBeTrue()", span="39-39"];
n23 [cluster="object.ShouldBeOfType(System.Type)", label="Entry object.ShouldBeOfType(System.Type)", span="140-140"];
n20 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_html_response_if_not_already_present()", label="Exit Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_html_response_if_not_already_present()", span="24-24"];
n24 [cluster="bool.ShouldBeTrue()", label="Entry bool.ShouldBeTrue()", span="70-70"];
n25 [cluster="lambda expression", label="Entry lambda expression", span="28-32"];
n27 [cluster="lambda expression", label="called = true", span="31-31"];
n29 [cluster="System.IO.Stream.Write(byte[], int, int)", label="Entry System.IO.Stream.Write(byte[], int, int)", span="0-0"];
n28 [cluster="lambda expression", label="Exit lambda expression", span="28-32"];
n30 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_jsonresponse_from_context_if_it_is_present()", label="Entry Nancy.Testing.Tests.ContextExtensionsTests.Should_use_jsonresponse_from_context_if_it_is_present()", span="48-48"];
n32 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_jsonresponse_from_context_if_it_is_present()", label="var context = new NancyContext()", span="51-51"];
n37 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.JsonModel.JsonModel()", label="Entry Nancy.Testing.Tests.ContextExtensionsTests.JsonModel.JsonModel()", span="42-42"];
n33 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_jsonresponse_from_context_if_it_is_present()", label="context.Items[''@@@@JSONRESPONSE@@@@''] = model", span="52-52"];
n35 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_jsonresponse_from_context_if_it_is_present()", label="result.ShouldBeSameAs(model)", span="56-56"];
n38 [cluster="Nancy.NancyContext.JsonBody<TModel>()", label="Entry Nancy.NancyContext.JsonBody<TModel>()", span="47-47"];
n36 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_jsonresponse_from_context_if_it_is_present()", label="Exit Nancy.Testing.Tests.ContextExtensionsTests.Should_use_jsonresponse_from_context_if_it_is_present()", span="48-48"];
n39 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_json_response_if_not_already_present()", label="Entry Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_json_response_if_not_already_present()", span="60-60"];
n41 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_json_response_if_not_already_present()", label="var context = new NancyContext() { Response = response }", span="63-63"];
n45 [cluster="Nancy.Responses.JsonResponse<TModel>.JsonResponse(TModel)", label="Entry Nancy.Responses.JsonResponse<TModel>.JsonResponse(TModel)", span="8-8"];
n43 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_json_response_if_not_already_present()", label="result.Dummy.ShouldEqual(''Data'')", span="67-67"];
n44 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_json_response_if_not_already_present()", label="Exit Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_json_response_if_not_already_present()", span="60-60"];
n46 [cluster="object.ShouldEqual(object)", label="Entry object.ShouldEqual(object)", span="80-80"];
d31 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_jsonresponse_from_context_if_it_is_present()", color=green, community=0, label="var model = new Model() { Dummy = ''Data'' }", prediction=0, span="50-50"];
d37 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Model.Model()", label="Entry Nancy.Testing.Tests.ContextExtensionsTests.Model.Model()", span="42-42"];
d34 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_jsonresponse_from_context_if_it_is_present()", color=green, community=0, label="var result = context.JsonBody<Model>()", prediction=1, span="54-54"];
d40 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_json_response_if_not_already_present()", color=green, community=0, label="var response = new JsonResponse<Model>(new Model() { Dummy = ''Data'' })", prediction=2, span="62-62"];
d42 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_json_response_if_not_already_present()", color=green, community=0, label="var result = context.JsonBody<Model>()", prediction=3, span="65-65"];
d48 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_xmlresponse_from_context_if_it_is_present()", color=green, community=0, label="var model = new Model() { Dummy = ''Data'' }", prediction=4, span="73-73"];
d47 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_xmlresponse_from_context_if_it_is_present()", label="Entry Nancy.Testing.Tests.ContextExtensionsTests.Should_use_xmlresponse_from_context_if_it_is_present()", span="71-71"];
d49 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_xmlresponse_from_context_if_it_is_present()", color=green, community=0, label="var context = new NancyContext()", prediction=5, span="74-74"];
d50 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_xmlresponse_from_context_if_it_is_present()", color=green, community=0, label="context.Items[''@@@@XMLRESPONSE@@@@''] = model", prediction=6, span="75-75"];
d52 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_xmlresponse_from_context_if_it_is_present()", color=green, community=0, label="result.ShouldBeSameAs(model)", prediction=4, span="79-79"];
d51 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_xmlresponse_from_context_if_it_is_present()", color=green, community=0, label="var result = context.XmlBody<Model>()", prediction=8, span="77-77"];
d53 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_xmlresponse_from_context_if_it_is_present()", label="Exit Nancy.Testing.Tests.ContextExtensionsTests.Should_use_xmlresponse_from_context_if_it_is_present()", span="71-71"];
d55 [cluster="Unk.ShouldBeSameAs", label="Entry Unk.ShouldBeSameAs", span=""];
d54 [cluster="Unk.>", label="Entry Unk.>", span=""];
d57 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_xml_response_if_not_already_present()", color=green, community=0, label="var response = new XmlResponse<Model>(new Model() { Dummy = ''Data'' }, ''text/xml'')", prediction=9, span="85-85"];
d56 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_xml_response_if_not_already_present()", label="Entry Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_xml_response_if_not_already_present()", span="83-83"];
d58 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_xml_response_if_not_already_present()", color=green, community=0, label="var context = new NancyContext() { Response = response }", prediction=10, span="86-86"];
d61 [cluster="Nancy.Responses.XmlResponse<TModel>.XmlResponse(TModel, string)", label="Entry Nancy.Responses.XmlResponse<TModel>.XmlResponse(TModel, string)", span="8-8"];
d59 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_xml_response_if_not_already_present()", color=green, community=0, label="var result = context.XmlBody<Model>()", prediction=11, span="88-88"];
d60 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_xml_response_if_not_already_present()", label="Exit Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_xml_response_if_not_already_present()", span="83-83"];
d63 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_fail_to_return_xml_body_on_non_xml_response()", color=green, community=0, label="var response = new JsonResponse<Model>(new Model() { Dummy = ''Data'' })", prediction=12, span="95-95"];
d62 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_fail_to_return_xml_body_on_non_xml_response()", label="Entry Nancy.Testing.Tests.ContextExtensionsTests.Should_fail_to_return_xml_body_on_non_xml_response()", span="93-93"];
d64 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_fail_to_return_xml_body_on_non_xml_response()", color=green, community=0, label="var context = new NancyContext() { Response = response }", prediction=13, span="96-96"];
d65 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_fail_to_return_xml_body_on_non_xml_response()", color=green, community=0, label="Assert.Throws<InvalidOperationException>(() => context.XmlBody<Model>())", prediction=14, span="98-98"];
d68 [cluster="lambda expression", color=green, community=0, label="context.XmlBody<Model>()", prediction=13, span="98-98"];
d66 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_fail_to_return_xml_body_on_non_xml_response()", label="Exit Nancy.Testing.Tests.ContextExtensionsTests.Should_fail_to_return_xml_body_on_non_xml_response()", span="93-93"];
d67 [cluster="lambda expression", label="Entry lambda expression", span="98-98"];
d71 [label=context, span=""];
d69 [cluster="lambda expression", label="Exit lambda expression", span="98-98"];
m0_9 [cluster="Nancy.Routing.Trie.Nodes.RootNode.Match(string)", file="NancyContextExtensions.cs", label="Entry Nancy.Routing.Trie.Nodes.RootNode.Match(string)", span="49-49"];
m0_10 [cluster="Nancy.Routing.Trie.Nodes.RootNode.Match(string)", file="NancyContextExtensions.cs", label="return this.segmentMatch;", span="51-51"];
m0_11 [cluster="Nancy.Routing.Trie.Nodes.RootNode.Match(string)", file="NancyContextExtensions.cs", label="Exit Nancy.Routing.Trie.Nodes.RootNode.Match(string)", span="49-49"];
m0_7 [cluster="Nancy.Routing.Trie.Nodes.TrieNode.BuildResults(System.Collections.Generic.IDictionary<string, object>, System.Collections.Generic.IDictionary<string, object>)", file="NancyContextExtensions.cs", label="Entry Nancy.Routing.Trie.Nodes.TrieNode.BuildResults(System.Collections.Generic.IDictionary<string, object>, System.Collections.Generic.IDictionary<string, object>)", span="201-201"];
m0_2 [cluster="Nancy.Routing.Trie.Nodes.RootNode.GetMatches(string[], int, System.Collections.Generic.IDictionary<string, object>, Nancy.NancyContext)", file="NancyContextExtensions.cs", label="Entry Nancy.Routing.Trie.Nodes.RootNode.GetMatches(string[], int, System.Collections.Generic.IDictionary<string, object>, Nancy.NancyContext)", span="34-34"];
m0_3 [cluster="Nancy.Routing.Trie.Nodes.RootNode.GetMatches(string[], int, System.Collections.Generic.IDictionary<string, object>, Nancy.NancyContext)", file="NancyContextExtensions.cs", label="segments.Length == 0", span="36-36"];
m0_4 [cluster="Nancy.Routing.Trie.Nodes.RootNode.GetMatches(string[], int, System.Collections.Generic.IDictionary<string, object>, Nancy.NancyContext)", file="NancyContextExtensions.cs", label="return this.BuildResults(capturedParameters, this.localCaptures);", span="38-38"];
m0_5 [cluster="Nancy.Routing.Trie.Nodes.RootNode.GetMatches(string[], int, System.Collections.Generic.IDictionary<string, object>, Nancy.NancyContext)", file="NancyContextExtensions.cs", label="return this.GetMatchingChildren(segments, currentIndex, capturedParameters, this.localCaptures, context);", span="41-41"];
m0_6 [cluster="Nancy.Routing.Trie.Nodes.RootNode.GetMatches(string[], int, System.Collections.Generic.IDictionary<string, object>, Nancy.NancyContext)", file="NancyContextExtensions.cs", label="Exit Nancy.Routing.Trie.Nodes.RootNode.GetMatches(string[], int, System.Collections.Generic.IDictionary<string, object>, Nancy.NancyContext)", span="34-34"];
m0_0 [cluster="Nancy.Routing.Trie.Nodes.RootNode.RootNode(Nancy.Routing.Trie.ITrieNodeFactory)", file="NancyContextExtensions.cs", label="Entry Nancy.Routing.Trie.Nodes.RootNode.RootNode(Nancy.Routing.Trie.ITrieNodeFactory)", span="21-21"];
m0_1 [cluster="Nancy.Routing.Trie.Nodes.RootNode.RootNode(Nancy.Routing.Trie.ITrieNodeFactory)", file="NancyContextExtensions.cs", label="Exit Nancy.Routing.Trie.Nodes.RootNode.RootNode(Nancy.Routing.Trie.ITrieNodeFactory)", span="21-21"];
m0_8 [cluster="Nancy.Routing.Trie.Nodes.TrieNode.GetMatchingChildren(string[], int, System.Collections.Generic.IDictionary<string, object>, System.Collections.Generic.IDictionary<string, object>, Nancy.NancyContext)", file="NancyContextExtensions.cs", label="Entry Nancy.Routing.Trie.Nodes.TrieNode.GetMatchingChildren(string[], int, System.Collections.Generic.IDictionary<string, object>, System.Collections.Generic.IDictionary<string, object>, Nancy.NancyContext)", span="241-241"];
m0_12 [file="NancyContextExtensions.cs", label="Nancy.Routing.Trie.Nodes.RootNode", span=""];
n47 -> n26  [color=darkseagreen4, key=1, label=bodyBytes, style=dashed];
n1 -> n5  [color=darkseagreen4, key=1, label=wrapper, style=dashed];
n13 -> n26  [color=darkseagreen4, key=1, label=bodyBytes, style=dashed];
n14 -> n26  [color=darkseagreen4, key=1, label="System.IO.Stream", style=dashed];
n27 -> n19  [color=darkseagreen4, key=1, label=called, style=dashed];
d31 -> n35  [color=green, key=1, label=model, style=dashed];
d48 -> d52  [color=green, key=1, label=model, style=dashed];
d64 -> d68  [color=green, key=1, label=context, style=dashed];
d65 -> d67  [color=green, key=1, label="lambda expression", style=dashed];
d71 -> d68  [color=green, key=1, label=context, style=dashed];
m0_2 -> m0_4  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, object>", style=dashed];
m0_2 -> m0_5  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m0_12 -> m0_4  [color=darkseagreen4, key=1, label="Nancy.Routing.Trie.Nodes.RootNode", style=dashed];
m0_12 -> m0_5  [color=darkseagreen4, key=1, label="Nancy.Routing.Trie.Nodes.RootNode", style=dashed];
m0_12 -> m0_10  [color=darkseagreen4, key=1, label="Nancy.Routing.Trie.Nodes.RootNode", style=dashed];
}
