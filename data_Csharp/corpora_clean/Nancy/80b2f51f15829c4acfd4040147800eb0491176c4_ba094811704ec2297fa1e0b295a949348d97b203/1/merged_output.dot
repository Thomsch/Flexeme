digraph  {
n47 [label=bodyBytes, span=""];
n0 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_documentwrapper_from_context_if_it_is_present()", label="Entry Nancy.Testing.Tests.ContextExtensionsTests.Should_use_documentwrapper_from_context_if_it_is_present()", span="12-12"];
n1 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_documentwrapper_from_context_if_it_is_present()", label="var wrapper = new DocumentWrapper(''<html></html>'')", span="14-14"];
n2 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_documentwrapper_from_context_if_it_is_present()", label="var context = new NancyContext()", span="15-15"];
n7 [cluster="Nancy.Testing.DocumentWrapper.DocumentWrapper(string)", label="Entry Nancy.Testing.DocumentWrapper.DocumentWrapper(string)", span="47-47"];
n3 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_documentwrapper_from_context_if_it_is_present()", label="context.Items[''@@@@DOCUMENT_WRAPPER@@@@''] = wrapper", span="16-16"];
n5 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_documentwrapper_from_context_if_it_is_present()", label="result.ShouldBeSameAs(wrapper)", span="20-20"];
n8 [cluster="Nancy.NancyContext.NancyContext()", label="Entry Nancy.NancyContext.NancyContext()", span="16-16"];
n4 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_documentwrapper_from_context_if_it_is_present()", label="var result = context.DocumentBody()", span="18-18"];
n9 [cluster="Nancy.NancyContext.DocumentBody()", label="Entry Nancy.NancyContext.DocumentBody()", span="34-34"];
n6 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_documentwrapper_from_context_if_it_is_present()", label="Exit Nancy.Testing.Tests.ContextExtensionsTests.Should_use_documentwrapper_from_context_if_it_is_present()", span="12-12"];
n10 [cluster="object.ShouldBeSameAs(object)", label="Entry object.ShouldBeSameAs(object)", span="115-115"];
n11 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_html_response_if_not_already_present()", label="Entry Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_html_response_if_not_already_present()", span="24-24"];
n12 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_html_response_if_not_already_present()", label="var called = false", span="26-26"];
n13 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_html_response_if_not_already_present()", label="var bodyBytes = Encoding.ASCII.GetBytes(''<html></html>'')", span="27-27"];
n14 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_html_response_if_not_already_present()", label="Action<Stream> bodyDelegate = (s) =>\r\n			{\r\n				s.Write(bodyBytes, 0, bodyBytes.Length);\r\n				called = true;\r\n			}", span="28-32"];
n21 [cluster="System.Text.Encoding.GetBytes(string)", label="Entry System.Text.Encoding.GetBytes(string)", span="0-0"];
n26 [cluster="lambda expression", label="s.Write(bodyBytes, 0, bodyBytes.Length)", span="30-30"];
n15 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_html_response_if_not_already_present()", label="var response = new Response { Contents = bodyDelegate }", span="33-33"];
n16 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_html_response_if_not_already_present()", label="var context = new NancyContext() { Response = response }", span="34-34"];
n22 [cluster="Nancy.Response.Response()", label="Entry Nancy.Response.Response()", span="15-15"];
n17 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_html_response_if_not_already_present()", label="var result = context.DocumentBody()", span="36-36"];
n18 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_html_response_if_not_already_present()", label="result.ShouldBeOfType(typeof(DocumentWrapper))", span="38-38"];
n19 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_html_response_if_not_already_present()", label="called.ShouldBeTrue()", span="39-39"];
n23 [cluster="object.ShouldBeOfType(System.Type)", label="Entry object.ShouldBeOfType(System.Type)", span="140-140"];
n20 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_html_response_if_not_already_present()", label="Exit Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_html_response_if_not_already_present()", span="24-24"];
n24 [cluster="bool.ShouldBeTrue()", label="Entry bool.ShouldBeTrue()", span="70-70"];
n25 [cluster="lambda expression", label="Entry lambda expression", span="28-32"];
n27 [cluster="lambda expression", label="called = true", span="31-31"];
n29 [cluster="System.IO.Stream.Write(byte[], int, int)", label="Entry System.IO.Stream.Write(byte[], int, int)", span="0-0"];
n28 [cluster="lambda expression", label="Exit lambda expression", span="28-32"];
n30 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_jsonresponse_from_context_if_it_is_present()", label="Entry Nancy.Testing.Tests.ContextExtensionsTests.Should_use_jsonresponse_from_context_if_it_is_present()", span="48-48"];
n31 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_jsonresponse_from_context_if_it_is_present()", color=red, community=0, label="14: var model = new JsonModel() { Dummy = ''Data'' }", span="50-50"];
n32 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_jsonresponse_from_context_if_it_is_present()", label="var context = new NancyContext()", span="51-51"];
n37 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.JsonModel.JsonModel()", label="Entry Nancy.Testing.Tests.ContextExtensionsTests.JsonModel.JsonModel()", span="42-42"];
n33 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_jsonresponse_from_context_if_it_is_present()", label="context.Items[''@@@@JSONRESPONSE@@@@''] = model", span="52-52"];
n35 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_jsonresponse_from_context_if_it_is_present()", label="result.ShouldBeSameAs(model)", span="56-56"];
n34 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_jsonresponse_from_context_if_it_is_present()", color=red, community=0, label="14: var result = context.JsonBody<JsonModel>()", span="54-54"];
n38 [cluster="Nancy.NancyContext.JsonBody<TModel>()", label="Entry Nancy.NancyContext.JsonBody<TModel>()", span="47-47"];
n36 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_jsonresponse_from_context_if_it_is_present()", label="Exit Nancy.Testing.Tests.ContextExtensionsTests.Should_use_jsonresponse_from_context_if_it_is_present()", span="48-48"];
n39 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_json_response_if_not_already_present()", label="Entry Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_json_response_if_not_already_present()", span="60-60"];
n40 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_json_response_if_not_already_present()", color=red, community=0, label="8: var response = new JsonResponse<JsonModel>(new JsonModel() { Dummy = ''Data'' })", span="62-62"];
n41 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_json_response_if_not_already_present()", label="var context = new NancyContext() { Response = response }", span="63-63"];
n45 [cluster="Nancy.Responses.JsonResponse<TModel>.JsonResponse(TModel)", label="Entry Nancy.Responses.JsonResponse<TModel>.JsonResponse(TModel)", span="8-8"];
n42 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_json_response_if_not_already_present()", color=red, community=0, label="16: var result = context.JsonBody<JsonModel>()", span="65-65"];
n43 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_json_response_if_not_already_present()", label="result.Dummy.ShouldEqual(''Data'')", span="67-67"];
n44 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_json_response_if_not_already_present()", label="Exit Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_json_response_if_not_already_present()", span="60-60"];
n46 [cluster="object.ShouldEqual(object)", label="Entry object.ShouldEqual(object)", span="80-80"];
d31 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_jsonresponse_from_context_if_it_is_present()", color=green, community=0, label="14: var model = new Model() { Dummy = ''Data'' }", span="50-50"];
d37 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Model.Model()", label="Entry Nancy.Testing.Tests.ContextExtensionsTests.Model.Model()", span="42-42"];
d34 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_jsonresponse_from_context_if_it_is_present()", color=green, community=0, label="14: var result = context.JsonBody<Model>()", span="54-54"];
d40 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_json_response_if_not_already_present()", color=green, community=0, label="13: var response = new JsonResponse<Model>(new Model() { Dummy = ''Data'' })", span="62-62"];
d42 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_json_response_if_not_already_present()", color=green, community=0, label="16: var result = context.JsonBody<Model>()", span="65-65"];
d48 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_xmlresponse_from_context_if_it_is_present()", color=green, community=0, label="4: var model = new Model() { Dummy = ''Data'' }", span="73-73"];
d47 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_xmlresponse_from_context_if_it_is_present()", label="Entry Nancy.Testing.Tests.ContextExtensionsTests.Should_use_xmlresponse_from_context_if_it_is_present()", span="71-71"];
d49 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_xmlresponse_from_context_if_it_is_present()", color=green, community=0, label="4: var context = new NancyContext()", span="74-74"];
d50 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_xmlresponse_from_context_if_it_is_present()", color=green, community=0, label="11: context.Items[''@@@@XMLRESPONSE@@@@''] = model", span="75-75"];
d52 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_xmlresponse_from_context_if_it_is_present()", color=green, community=0, label="11: result.ShouldBeSameAs(model)", span="79-79"];
d51 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_xmlresponse_from_context_if_it_is_present()", color=green, community=0, label="4: var result = context.XmlBody<Model>()", span="77-77"];
d53 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_xmlresponse_from_context_if_it_is_present()", label="Exit Nancy.Testing.Tests.ContextExtensionsTests.Should_use_xmlresponse_from_context_if_it_is_present()", span="71-71"];
d55 [cluster="Unk.ShouldBeSameAs", label="Entry Unk.ShouldBeSameAs", span=""];
d54 [cluster="Unk.>", label="Entry Unk.>", span=""];
d57 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_xml_response_if_not_already_present()", color=green, community=0, label="3: var response = new XmlResponse<Model>(new Model() { Dummy = ''Data'' }, ''text/xml'')", span="85-85"];
d56 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_xml_response_if_not_already_present()", label="Entry Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_xml_response_if_not_already_present()", span="83-83"];
d58 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_xml_response_if_not_already_present()", color=green, community=0, label="16: var context = new NancyContext() { Response = response }", span="86-86"];
d61 [cluster="Nancy.Responses.XmlResponse<TModel>.XmlResponse(TModel, string)", label="Entry Nancy.Responses.XmlResponse<TModel>.XmlResponse(TModel, string)", span="8-8"];
d59 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_xml_response_if_not_already_present()", color=green, community=0, label="3: var result = context.XmlBody<Model>()", span="88-88"];
d60 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_xml_response_if_not_already_present()", label="Exit Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_xml_response_if_not_already_present()", span="83-83"];
d63 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_fail_to_return_xml_body_on_non_xml_response()", color=green, community=0, label="13: var response = new JsonResponse<Model>(new Model() { Dummy = ''Data'' })", span="95-95"];
d62 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_fail_to_return_xml_body_on_non_xml_response()", label="Entry Nancy.Testing.Tests.ContextExtensionsTests.Should_fail_to_return_xml_body_on_non_xml_response()", span="93-93"];
d64 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_fail_to_return_xml_body_on_non_xml_response()", color=green, community=0, label="10: var context = new NancyContext() { Response = response }", span="96-96"];
d65 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_fail_to_return_xml_body_on_non_xml_response()", color=green, community=0, label="10: Assert.Throws<InvalidOperationException>(() => context.XmlBody<Model>())", span="98-98"];
d68 [cluster="lambda expression", color=green, community=0, label="10: context.XmlBody<Model>()", span="98-98"];
d66 [cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_fail_to_return_xml_body_on_non_xml_response()", label="Exit Nancy.Testing.Tests.ContextExtensionsTests.Should_fail_to_return_xml_body_on_non_xml_response()", span="93-93"];
d67 [cluster="lambda expression", label="Entry lambda expression", span="98-98"];
d71 [label=context, span=""];
d69 [cluster="lambda expression", label="Exit lambda expression", span="98-98"];
m0_9 [cluster="Nancy.Routing.Trie.Nodes.RootNode.Match(string)", file="NancyContextExtensions.cs", label="Entry Nancy.Routing.Trie.Nodes.RootNode.Match(string)", span="49-49"];
m0_10 [cluster="Nancy.Routing.Trie.Nodes.RootNode.Match(string)", file="NancyContextExtensions.cs", label="return this.segmentMatch;", span="51-51"];
m0_11 [cluster="Nancy.Routing.Trie.Nodes.RootNode.Match(string)", file="NancyContextExtensions.cs", label="Exit Nancy.Routing.Trie.Nodes.RootNode.Match(string)", span="49-49"];
m0_7 [cluster="Nancy.Routing.Trie.Nodes.TrieNode.BuildResults(System.Collections.Generic.IDictionary<string, object>, System.Collections.Generic.IDictionary<string, object>)", file="NancyContextExtensions.cs", label="Entry Nancy.Routing.Trie.Nodes.TrieNode.BuildResults(System.Collections.Generic.IDictionary<string, object>, System.Collections.Generic.IDictionary<string, object>)", span="201-201"];
m0_2 [cluster="Nancy.Routing.Trie.Nodes.RootNode.GetMatches(string[], int, System.Collections.Generic.IDictionary<string, object>, Nancy.NancyContext)", file="NancyContextExtensions.cs", label="Entry Nancy.Routing.Trie.Nodes.RootNode.GetMatches(string[], int, System.Collections.Generic.IDictionary<string, object>, Nancy.NancyContext)", span="34-34"];
m0_3 [cluster="Nancy.Routing.Trie.Nodes.RootNode.GetMatches(string[], int, System.Collections.Generic.IDictionary<string, object>, Nancy.NancyContext)", file="NancyContextExtensions.cs", label="segments.Length == 0", span="36-36"];
m0_4 [cluster="Nancy.Routing.Trie.Nodes.RootNode.GetMatches(string[], int, System.Collections.Generic.IDictionary<string, object>, Nancy.NancyContext)", file="NancyContextExtensions.cs", label="return this.BuildResults(capturedParameters, this.localCaptures);", span="38-38"];
m0_5 [cluster="Nancy.Routing.Trie.Nodes.RootNode.GetMatches(string[], int, System.Collections.Generic.IDictionary<string, object>, Nancy.NancyContext)", file="NancyContextExtensions.cs", label="return this.GetMatchingChildren(segments, currentIndex, capturedParameters, this.localCaptures, context);", span="41-41"];
m0_6 [cluster="Nancy.Routing.Trie.Nodes.RootNode.GetMatches(string[], int, System.Collections.Generic.IDictionary<string, object>, Nancy.NancyContext)", file="NancyContextExtensions.cs", label="Exit Nancy.Routing.Trie.Nodes.RootNode.GetMatches(string[], int, System.Collections.Generic.IDictionary<string, object>, Nancy.NancyContext)", span="34-34"];
m0_0 [cluster="Nancy.Routing.Trie.Nodes.RootNode.RootNode(Nancy.Routing.Trie.ITrieNodeFactory)", file="NancyContextExtensions.cs", label="Entry Nancy.Routing.Trie.Nodes.RootNode.RootNode(Nancy.Routing.Trie.ITrieNodeFactory)", span="21-21"];
m0_1 [cluster="Nancy.Routing.Trie.Nodes.RootNode.RootNode(Nancy.Routing.Trie.ITrieNodeFactory)", file="NancyContextExtensions.cs", label="Exit Nancy.Routing.Trie.Nodes.RootNode.RootNode(Nancy.Routing.Trie.ITrieNodeFactory)", span="21-21"];
m0_8 [cluster="Nancy.Routing.Trie.Nodes.TrieNode.GetMatchingChildren(string[], int, System.Collections.Generic.IDictionary<string, object>, System.Collections.Generic.IDictionary<string, object>, Nancy.NancyContext)", file="NancyContextExtensions.cs", label="Entry Nancy.Routing.Trie.Nodes.TrieNode.GetMatchingChildren(string[], int, System.Collections.Generic.IDictionary<string, object>, System.Collections.Generic.IDictionary<string, object>, Nancy.NancyContext)", span="241-241"];
m0_12 [file="NancyContextExtensions.cs", label="Nancy.Routing.Trie.Nodes.RootNode", span=""];
n47 -> n26  [color=darkseagreen4, key=1, label=bodyBytes, style=dashed];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n7  [key=2, style=dotted];
n1 -> n3  [color=darkseagreen4, key=1, label=wrapper, style=dashed];
n1 -> n5  [color=darkseagreen4, key=1, label=wrapper, style=dashed];
n2 -> n3  [key=0, style=solid];
n2 -> n8  [key=2, style=dotted];
n2 -> n4  [color=darkseagreen4, key=1, label=context, style=dashed];
n3 -> n4  [key=0, style=solid];
n5 -> n6  [key=0, style=solid];
n5 -> n10  [key=2, style=dotted];
n4 -> n5  [key=0, style=solid];
n4 -> n9  [key=2, style=dotted];
n6 -> n0  [color=blue, key=0, style=bold];
n11 -> n12  [key=0, style=solid];
n12 -> n13  [key=0, style=solid];
n12 -> n12  [color=darkorchid, key=3, label="Local variable bool called", style=bold];
n13 -> n14  [key=0, style=solid];
n13 -> n21  [key=2, style=dotted];
n13 -> n26  [color=darkseagreen4, key=1, label=bodyBytes, style=dashed];
n14 -> n15  [key=0, style=solid];
n14 -> n26  [color=darkseagreen4, key=1, label="System.IO.Stream", style=dashed];
n14 -> n14  [color=darkorchid, key=3, label="Local variable System.Action<System.IO.Stream> bodyDelegate", style=bold];
n26 -> n27  [key=0, style=solid];
n26 -> n29  [key=2, style=dotted];
n15 -> n16  [key=0, style=solid];
n15 -> n22  [key=2, style=dotted];
n16 -> n17  [key=0, style=solid];
n16 -> n8  [key=2, style=dotted];
n17 -> n18  [key=0, style=solid];
n17 -> n9  [key=2, style=dotted];
n18 -> n19  [key=0, style=solid];
n18 -> n23  [key=2, style=dotted];
n19 -> n20  [key=0, style=solid];
n19 -> n24  [key=2, style=dotted];
n20 -> n11  [color=blue, key=0, style=bold];
n25 -> n26  [key=0, style=solid];
n27 -> n28  [key=0, style=solid];
n27 -> n19  [color=darkseagreen4, key=1, label=called, style=dashed];
n28 -> n25  [color=blue, key=0, style=bold];
n30 -> n31  [color=red, key=0, style=solid];
n30 -> d31  [color=green, key=0, style=solid];
n31 -> n32  [color=red, key=0, style=solid];
n31 -> n37  [color=red, key=2, style=dotted];
n31 -> n33  [color=red, key=1, label=model, style=dashed];
n31 -> n35  [color=red, key=1, label=model, style=dashed];
n32 -> n33  [key=0, style=solid];
n32 -> n8  [key=2, style=dotted];
n32 -> n34  [color=red, key=1, label=context, style=dashed];
n32 -> d34  [color=green, key=1, label=context, style=dashed];
n33 -> n34  [color=red, key=0, style=solid];
n33 -> d34  [color=green, key=0, style=solid];
n35 -> n36  [key=0, style=solid];
n35 -> n10  [key=2, style=dotted];
n34 -> n35  [color=red, key=0, style=solid];
n34 -> n38  [color=red, key=2, style=dotted];
n36 -> n30  [color=blue, key=0, style=bold];
n39 -> n40  [color=red, key=0, style=solid];
n39 -> d40  [color=green, key=0, style=solid];
n40 -> n41  [color=red, key=0, style=solid];
n40 -> n45  [color=red, key=2, style=dotted];
n40 -> n37  [color=red, key=2, style=dotted];
n41 -> n42  [color=red, key=0, style=solid];
n41 -> n8  [key=2, style=dotted];
n41 -> d42  [color=green, key=0, style=solid];
n42 -> n43  [color=red, key=0, style=solid];
n42 -> n38  [color=red, key=2, style=dotted];
n43 -> n44  [key=0, style=solid];
n43 -> n46  [key=2, style=dotted];
n44 -> n39  [color=blue, key=0, style=bold];
d31 -> n32  [color=green, key=0, style=solid];
d31 -> d37  [color=green, key=2, style=dotted];
d31 -> n33  [color=green, key=1, label=model, style=dashed];
d31 -> n35  [color=green, key=1, label=model, style=dashed];
d34 -> n35  [color=green, key=0, style=solid];
d34 -> n38  [color=green, key=2, style=dotted];
d40 -> n41  [color=green, key=0, style=solid];
d40 -> n45  [color=green, key=2, style=dotted];
d40 -> d37  [color=green, key=2, style=dotted];
d42 -> n43  [color=green, key=0, style=solid];
d42 -> n38  [color=green, key=2, style=dotted];
d48 -> d49  [color=green, key=0, style=solid];
d48 -> d37  [color=green, key=2, style=dotted];
d48 -> d50  [color=green, key=1, label=model, style=dashed];
d48 -> d52  [color=green, key=1, label=model, style=dashed];
d47 -> d48  [color=green, key=0, style=solid];
d49 -> d50  [color=green, key=0, style=solid];
d49 -> n8  [color=green, key=2, style=dotted];
d49 -> d51  [color=green, key=1, label=context, style=dashed];
d50 -> d51  [color=green, key=0, style=solid];
d52 -> d53  [color=green, key=0, style=solid];
d52 -> d55  [color=green, key=2, style=dotted];
d51 -> d52  [color=green, key=0, style=solid];
d51 -> d54  [color=green, key=2, style=dotted];
d53 -> d47  [color=blue, key=0, style=bold];
d57 -> d58  [color=green, key=0, style=solid];
d57 -> d61  [color=green, key=2, style=dotted];
d57 -> d37  [color=green, key=2, style=dotted];
d56 -> d57  [color=green, key=0, style=solid];
d58 -> d59  [color=green, key=0, style=solid];
d58 -> n8  [color=green, key=2, style=dotted];
d59 -> d60  [color=green, key=0, style=solid];
d59 -> d54  [color=green, key=2, style=dotted];
d60 -> d56  [color=blue, key=0, style=bold];
d63 -> d64  [color=green, key=0, style=solid];
d63 -> n45  [color=green, key=2, style=dotted];
d63 -> d37  [color=green, key=2, style=dotted];
d62 -> d63  [color=green, key=0, style=solid];
d64 -> d65  [color=green, key=0, style=solid];
d64 -> n8  [color=green, key=2, style=dotted];
d64 -> d68  [color=green, key=1, label=context, style=dashed];
d65 -> d66  [color=green, key=0, style=solid];
d65 -> d54  [color=green, key=2, style=dotted];
d65 -> d67  [color=green, key=1, label="lambda expression", style=dashed];
d68 -> d69  [color=green, key=0, style=solid];
d68 -> d54  [color=green, key=2, style=dotted];
d66 -> d62  [color=blue, key=0, style=bold];
d67 -> d68  [color=green, key=0, style=solid];
d71 -> d68  [color=green, key=1, label=context, style=dashed];
d69 -> d67  [color=blue, key=0, style=bold];
m0_9 -> m0_10  [key=0, style=solid];
m0_10 -> m0_11  [key=0, style=solid];
m0_11 -> m0_9  [color=blue, key=0, style=bold];
m0_2 -> m0_3  [key=0, style=solid];
m0_2 -> m0_4  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, object>", style=dashed];
m0_2 -> m0_5  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m0_3 -> m0_4  [key=0, style=solid];
m0_3 -> m0_5  [key=0, style=solid];
m0_4 -> m0_6  [key=0, style=solid];
m0_4 -> m0_7  [key=2, style=dotted];
m0_5 -> m0_6  [key=0, style=solid];
m0_5 -> m0_8  [key=2, style=dotted];
m0_6 -> m0_2  [color=blue, key=0, style=bold];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_0  [color=blue, key=0, style=bold];
m0_12 -> m0_4  [color=darkseagreen4, key=1, label="Nancy.Routing.Trie.Nodes.RootNode", style=dashed];
m0_12 -> m0_5  [color=darkseagreen4, key=1, label="Nancy.Routing.Trie.Nodes.RootNode", style=dashed];
m0_12 -> m0_10  [color=darkseagreen4, key=1, label="Nancy.Routing.Trie.Nodes.RootNode", style=dashed];
}
