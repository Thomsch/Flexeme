digraph  {
n47 [label=bodyBytes, span=""];
n0 [label="Entry Nancy.Testing.Tests.ContextExtensionsTests.Should_use_documentwrapper_from_context_if_it_is_present()", span="12-12", cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_documentwrapper_from_context_if_it_is_present()"];
n1 [label="var wrapper = new DocumentWrapper(''<html></html>'')", span="14-14", cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_documentwrapper_from_context_if_it_is_present()"];
n2 [label="var context = new NancyContext()", span="15-15", cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_documentwrapper_from_context_if_it_is_present()"];
n7 [label="Entry Nancy.Testing.DocumentWrapper.DocumentWrapper(string)", span="47-47", cluster="Nancy.Testing.DocumentWrapper.DocumentWrapper(string)"];
n3 [label="context.Items[''@@@@DOCUMENT_WRAPPER@@@@''] = wrapper", span="16-16", cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_documentwrapper_from_context_if_it_is_present()"];
n5 [label="result.ShouldBeSameAs(wrapper)", span="20-20", cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_documentwrapper_from_context_if_it_is_present()"];
n8 [label="Entry Nancy.NancyContext.NancyContext()", span="16-16", cluster="Nancy.NancyContext.NancyContext()"];
n4 [label="var result = context.DocumentBody()", span="18-18", cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_documentwrapper_from_context_if_it_is_present()"];
n9 [label="Entry Nancy.NancyContext.DocumentBody()", span="34-34", cluster="Nancy.NancyContext.DocumentBody()"];
n6 [label="Exit Nancy.Testing.Tests.ContextExtensionsTests.Should_use_documentwrapper_from_context_if_it_is_present()", span="12-12", cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_documentwrapper_from_context_if_it_is_present()"];
n10 [label="Entry object.ShouldBeSameAs(object)", span="115-115", cluster="object.ShouldBeSameAs(object)"];
n11 [label="Entry Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_html_response_if_not_already_present()", span="24-24", cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_html_response_if_not_already_present()"];
n12 [label="var called = false", span="26-26", cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_html_response_if_not_already_present()"];
n13 [label="var bodyBytes = Encoding.ASCII.GetBytes(''<html></html>'')", span="27-27", cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_html_response_if_not_already_present()"];
n14 [label="Action<Stream> bodyDelegate = (s) =>\r\n			{\r\n				s.Write(bodyBytes, 0, bodyBytes.Length);\r\n				called = true;\r\n			}", span="28-32", cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_html_response_if_not_already_present()"];
n21 [label="Entry System.Text.Encoding.GetBytes(string)", span="0-0", cluster="System.Text.Encoding.GetBytes(string)"];
n26 [label="s.Write(bodyBytes, 0, bodyBytes.Length)", span="30-30", cluster="lambda expression"];
n15 [label="var response = new Response { Contents = bodyDelegate }", span="33-33", cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_html_response_if_not_already_present()"];
n16 [label="var context = new NancyContext() { Response = response }", span="34-34", cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_html_response_if_not_already_present()"];
n22 [label="Entry Nancy.Response.Response()", span="15-15", cluster="Nancy.Response.Response()"];
n17 [label="var result = context.DocumentBody()", span="36-36", cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_html_response_if_not_already_present()"];
n18 [label="result.ShouldBeOfType(typeof(DocumentWrapper))", span="38-38", cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_html_response_if_not_already_present()"];
n19 [label="called.ShouldBeTrue()", span="39-39", cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_html_response_if_not_already_present()"];
n23 [label="Entry object.ShouldBeOfType(System.Type)", span="140-140", cluster="object.ShouldBeOfType(System.Type)"];
n20 [label="Exit Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_html_response_if_not_already_present()", span="24-24", cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_html_response_if_not_already_present()"];
n24 [label="Entry bool.ShouldBeTrue()", span="70-70", cluster="bool.ShouldBeTrue()"];
n25 [label="Entry lambda expression", span="28-32", cluster="lambda expression"];
n27 [label="called = true", span="31-31", cluster="lambda expression"];
n29 [label="Entry System.IO.Stream.Write(byte[], int, int)", span="0-0", cluster="System.IO.Stream.Write(byte[], int, int)"];
n28 [label="Exit lambda expression", span="28-32", cluster="lambda expression"];
n30 [label="Entry Nancy.Testing.Tests.ContextExtensionsTests.Should_use_jsonresponse_from_context_if_it_is_present()", span="48-48", cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_jsonresponse_from_context_if_it_is_present()"];
n31 [label="var model = new JsonModel() { Dummy = ''Data'' }", span="50-50", cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_jsonresponse_from_context_if_it_is_present()", color=red, community=0];
n32 [label="var context = new NancyContext()", span="51-51", cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_jsonresponse_from_context_if_it_is_present()"];
n37 [label="Entry Nancy.Testing.Tests.ContextExtensionsTests.JsonModel.JsonModel()", span="42-42", cluster="Nancy.Testing.Tests.ContextExtensionsTests.JsonModel.JsonModel()"];
n33 [label="context.Items[''@@@@JSONRESPONSE@@@@''] = model", span="52-52", cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_jsonresponse_from_context_if_it_is_present()"];
n35 [label="result.ShouldBeSameAs(model)", span="56-56", cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_jsonresponse_from_context_if_it_is_present()"];
n34 [label="var result = context.JsonBody<JsonModel>()", span="54-54", cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_jsonresponse_from_context_if_it_is_present()", color=red, community=0];
n38 [label="Entry Nancy.NancyContext.JsonBody<TModel>()", span="47-47", cluster="Nancy.NancyContext.JsonBody<TModel>()"];
n36 [label="Exit Nancy.Testing.Tests.ContextExtensionsTests.Should_use_jsonresponse_from_context_if_it_is_present()", span="48-48", cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_jsonresponse_from_context_if_it_is_present()"];
n39 [label="Entry Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_json_response_if_not_already_present()", span="60-60", cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_json_response_if_not_already_present()"];
n40 [label="var response = new JsonResponse<JsonModel>(new JsonModel() { Dummy = ''Data'' })", span="62-62", cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_json_response_if_not_already_present()", color=red, community=0];
n41 [label="var context = new NancyContext() { Response = response }", span="63-63", cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_json_response_if_not_already_present()"];
n45 [label="Entry Nancy.Responses.JsonResponse<TModel>.JsonResponse(TModel)", span="8-8", cluster="Nancy.Responses.JsonResponse<TModel>.JsonResponse(TModel)"];
n42 [label="var result = context.JsonBody<JsonModel>()", span="65-65", cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_json_response_if_not_already_present()", color=red, community=0];
n43 [label="result.Dummy.ShouldEqual(''Data'')", span="67-67", cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_json_response_if_not_already_present()"];
n44 [label="Exit Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_json_response_if_not_already_present()", span="60-60", cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_json_response_if_not_already_present()"];
n46 [label="Entry object.ShouldEqual(object)", span="80-80", cluster="object.ShouldEqual(object)"];
d31 [label="var model = new Model() { Dummy = ''Data'' }", span="50-50", cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_jsonresponse_from_context_if_it_is_present()", color=green, community=0];
d37 [label="Entry Nancy.Testing.Tests.ContextExtensionsTests.Model.Model()", span="42-42", cluster="Nancy.Testing.Tests.ContextExtensionsTests.Model.Model()"];
d34 [label="var result = context.JsonBody<Model>()", span="54-54", cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_jsonresponse_from_context_if_it_is_present()", color=green, community=0];
d40 [label="var response = new JsonResponse<Model>(new Model() { Dummy = ''Data'' })", span="62-62", cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_json_response_if_not_already_present()", color=green, community=0];
d42 [label="var result = context.JsonBody<Model>()", span="65-65", cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_json_response_if_not_already_present()", color=green, community=0];
d48 [label="var model = new Model() { Dummy = ''Data'' }", span="73-73", cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_xmlresponse_from_context_if_it_is_present()", color=green, community=0];
d47 [label="Entry Nancy.Testing.Tests.ContextExtensionsTests.Should_use_xmlresponse_from_context_if_it_is_present()", span="71-71", cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_xmlresponse_from_context_if_it_is_present()"];
d49 [label="var context = new NancyContext()", span="74-74", cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_xmlresponse_from_context_if_it_is_present()", color=green, community=0];
d50 [label="context.Items[''@@@@XMLRESPONSE@@@@''] = model", span="75-75", cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_xmlresponse_from_context_if_it_is_present()", color=green, community=0];
d52 [label="result.ShouldBeSameAs(model)", span="79-79", cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_xmlresponse_from_context_if_it_is_present()", color=green, community=0];
d51 [label="var result = context.XmlBody<Model>()", span="77-77", cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_xmlresponse_from_context_if_it_is_present()", color=green, community=0];
d53 [label="Exit Nancy.Testing.Tests.ContextExtensionsTests.Should_use_xmlresponse_from_context_if_it_is_present()", span="71-71", cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_use_xmlresponse_from_context_if_it_is_present()"];
d55 [label="Entry Unk.ShouldBeSameAs", span="", cluster="Unk.ShouldBeSameAs"];
d54 [label="Entry Unk.>", span="", cluster="Unk.>"];
d57 [label="var response = new XmlResponse<Model>(new Model() { Dummy = ''Data'' }, ''text/xml'')", span="85-85", cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_xml_response_if_not_already_present()", color=green, community=0];
d56 [label="Entry Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_xml_response_if_not_already_present()", span="83-83", cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_xml_response_if_not_already_present()"];
d58 [label="var context = new NancyContext() { Response = response }", span="86-86", cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_xml_response_if_not_already_present()", color=green, community=0];
d61 [label="Entry Nancy.Responses.XmlResponse<TModel>.XmlResponse(TModel, string)", span="8-8", cluster="Nancy.Responses.XmlResponse<TModel>.XmlResponse(TModel, string)"];
d59 [label="var result = context.XmlBody<Model>()", span="88-88", cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_xml_response_if_not_already_present()", color=green, community=0];
d60 [label="Exit Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_xml_response_if_not_already_present()", span="83-83", cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_create_new_wrapper_from_xml_response_if_not_already_present()"];
d63 [label="var response = new JsonResponse<Model>(new Model() { Dummy = ''Data'' })", span="95-95", cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_fail_to_return_xml_body_on_non_xml_response()", color=green, community=0];
d62 [label="Entry Nancy.Testing.Tests.ContextExtensionsTests.Should_fail_to_return_xml_body_on_non_xml_response()", span="93-93", cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_fail_to_return_xml_body_on_non_xml_response()"];
d64 [label="var context = new NancyContext() { Response = response }", span="96-96", cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_fail_to_return_xml_body_on_non_xml_response()", color=green, community=0];
d65 [label="Assert.Throws<InvalidOperationException>(() => context.XmlBody<Model>())", span="98-98", cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_fail_to_return_xml_body_on_non_xml_response()", color=green, community=0];
d68 [label="context.XmlBody<Model>()", span="98-98", cluster="lambda expression", color=green, community=0];
d66 [label="Exit Nancy.Testing.Tests.ContextExtensionsTests.Should_fail_to_return_xml_body_on_non_xml_response()", span="93-93", cluster="Nancy.Testing.Tests.ContextExtensionsTests.Should_fail_to_return_xml_body_on_non_xml_response()"];
d67 [label="Entry lambda expression", span="98-98", cluster="lambda expression"];
d71 [label=context, span=""];
d69 [label="Exit lambda expression", span="98-98", cluster="lambda expression"];
m0_9 [label="Entry Nancy.Routing.Trie.Nodes.RootNode.Match(string)", span="49-49", cluster="Nancy.Routing.Trie.Nodes.RootNode.Match(string)", file="NancyContextExtensions.cs"];
m0_10 [label="return this.segmentMatch;", span="51-51", cluster="Nancy.Routing.Trie.Nodes.RootNode.Match(string)", file="NancyContextExtensions.cs"];
m0_11 [label="Exit Nancy.Routing.Trie.Nodes.RootNode.Match(string)", span="49-49", cluster="Nancy.Routing.Trie.Nodes.RootNode.Match(string)", file="NancyContextExtensions.cs"];
m0_7 [label="Entry Nancy.Routing.Trie.Nodes.TrieNode.BuildResults(System.Collections.Generic.IDictionary<string, object>, System.Collections.Generic.IDictionary<string, object>)", span="201-201", cluster="Nancy.Routing.Trie.Nodes.TrieNode.BuildResults(System.Collections.Generic.IDictionary<string, object>, System.Collections.Generic.IDictionary<string, object>)", file="NancyContextExtensions.cs"];
m0_2 [label="Entry Nancy.Routing.Trie.Nodes.RootNode.GetMatches(string[], int, System.Collections.Generic.IDictionary<string, object>, Nancy.NancyContext)", span="34-34", cluster="Nancy.Routing.Trie.Nodes.RootNode.GetMatches(string[], int, System.Collections.Generic.IDictionary<string, object>, Nancy.NancyContext)", file="NancyContextExtensions.cs"];
m0_3 [label="segments.Length == 0", span="36-36", cluster="Nancy.Routing.Trie.Nodes.RootNode.GetMatches(string[], int, System.Collections.Generic.IDictionary<string, object>, Nancy.NancyContext)", file="NancyContextExtensions.cs"];
m0_4 [label="return this.BuildResults(capturedParameters, this.localCaptures);", span="38-38", cluster="Nancy.Routing.Trie.Nodes.RootNode.GetMatches(string[], int, System.Collections.Generic.IDictionary<string, object>, Nancy.NancyContext)", file="NancyContextExtensions.cs"];
m0_5 [label="return this.GetMatchingChildren(segments, currentIndex, capturedParameters, this.localCaptures, context);", span="41-41", cluster="Nancy.Routing.Trie.Nodes.RootNode.GetMatches(string[], int, System.Collections.Generic.IDictionary<string, object>, Nancy.NancyContext)", file="NancyContextExtensions.cs"];
m0_6 [label="Exit Nancy.Routing.Trie.Nodes.RootNode.GetMatches(string[], int, System.Collections.Generic.IDictionary<string, object>, Nancy.NancyContext)", span="34-34", cluster="Nancy.Routing.Trie.Nodes.RootNode.GetMatches(string[], int, System.Collections.Generic.IDictionary<string, object>, Nancy.NancyContext)", file="NancyContextExtensions.cs"];
m0_0 [label="Entry Nancy.Routing.Trie.Nodes.RootNode.RootNode(Nancy.Routing.Trie.ITrieNodeFactory)", span="21-21", cluster="Nancy.Routing.Trie.Nodes.RootNode.RootNode(Nancy.Routing.Trie.ITrieNodeFactory)", file="NancyContextExtensions.cs"];
m0_1 [label="Exit Nancy.Routing.Trie.Nodes.RootNode.RootNode(Nancy.Routing.Trie.ITrieNodeFactory)", span="21-21", cluster="Nancy.Routing.Trie.Nodes.RootNode.RootNode(Nancy.Routing.Trie.ITrieNodeFactory)", file="NancyContextExtensions.cs"];
m0_8 [label="Entry Nancy.Routing.Trie.Nodes.TrieNode.GetMatchingChildren(string[], int, System.Collections.Generic.IDictionary<string, object>, System.Collections.Generic.IDictionary<string, object>, Nancy.NancyContext)", span="241-241", cluster="Nancy.Routing.Trie.Nodes.TrieNode.GetMatchingChildren(string[], int, System.Collections.Generic.IDictionary<string, object>, System.Collections.Generic.IDictionary<string, object>, Nancy.NancyContext)", file="NancyContextExtensions.cs"];
m0_12 [label="Nancy.Routing.Trie.Nodes.RootNode", span="", file="NancyContextExtensions.cs"];
n47 -> n26  [key=1, style=dashed, color=darkseagreen4, label=bodyBytes];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n7  [key=2, style=dotted];
n1 -> n3  [key=1, style=dashed, color=darkseagreen4, label=wrapper];
n1 -> n5  [key=1, style=dashed, color=darkseagreen4, label=wrapper];
n2 -> n3  [key=0, style=solid];
n2 -> n8  [key=2, style=dotted];
n2 -> n4  [key=1, style=dashed, color=darkseagreen4, label=context];
n3 -> n4  [key=0, style=solid];
n5 -> n6  [key=0, style=solid];
n5 -> n10  [key=2, style=dotted];
n4 -> n5  [key=0, style=solid];
n4 -> n9  [key=2, style=dotted];
n6 -> n0  [key=0, style=bold, color=blue];
n11 -> n12  [key=0, style=solid];
n12 -> n13  [key=0, style=solid];
n12 -> n12  [key=3, color=darkorchid, style=bold, label="Local variable bool called"];
n13 -> n14  [key=0, style=solid];
n13 -> n21  [key=2, style=dotted];
n13 -> n26  [key=1, style=dashed, color=darkseagreen4, label=bodyBytes];
n14 -> n15  [key=0, style=solid];
n14 -> n26  [key=1, style=dashed, color=darkseagreen4, label="System.IO.Stream"];
n14 -> n14  [key=3, color=darkorchid, style=bold, label="Local variable System.Action<System.IO.Stream> bodyDelegate"];
n26 -> n27  [key=0, style=solid];
n26 -> n29  [key=2, style=dotted];
n15 -> n16  [key=0, style=solid];
n15 -> n22  [key=2, style=dotted];
n16 -> n17  [key=0, style=solid];
n16 -> n8  [key=2, style=dotted];
n17 -> n18  [key=0, style=solid];
n17 -> n9  [key=2, style=dotted];
n18 -> n19  [key=0, style=solid];
n18 -> n23  [key=2, style=dotted];
n19 -> n20  [key=0, style=solid];
n19 -> n24  [key=2, style=dotted];
n20 -> n11  [key=0, style=bold, color=blue];
n25 -> n26  [key=0, style=solid];
n27 -> n28  [key=0, style=solid];
n27 -> n19  [key=1, style=dashed, color=darkseagreen4, label=called];
n28 -> n25  [key=0, style=bold, color=blue];
n30 -> n31  [key=0, style=solid, color=red];
n30 -> d31  [key=0, style=solid, color=green];
n31 -> n32  [key=0, style=solid, color=red];
n31 -> n37  [key=2, style=dotted, color=red];
n31 -> n33  [key=1, style=dashed, color=red, label=model];
n31 -> n35  [key=1, style=dashed, color=red, label=model];
n32 -> n33  [key=0, style=solid];
n32 -> n8  [key=2, style=dotted];
n32 -> n34  [key=1, style=dashed, color=red, label=context];
n32 -> d34  [key=1, style=dashed, color=green, label=context];
n33 -> n34  [key=0, style=solid, color=red];
n33 -> d34  [key=0, style=solid, color=green];
n35 -> n36  [key=0, style=solid];
n35 -> n10  [key=2, style=dotted];
n34 -> n35  [key=0, style=solid, color=red];
n34 -> n38  [key=2, style=dotted, color=red];
n36 -> n30  [key=0, style=bold, color=blue];
n39 -> n40  [key=0, style=solid, color=red];
n39 -> d40  [key=0, style=solid, color=green];
n40 -> n41  [key=0, style=solid, color=red];
n40 -> n45  [key=2, style=dotted, color=red];
n40 -> n37  [key=2, style=dotted, color=red];
n41 -> n42  [key=0, style=solid, color=red];
n41 -> n8  [key=2, style=dotted];
n41 -> d42  [key=0, style=solid, color=green];
n42 -> n43  [key=0, style=solid, color=red];
n42 -> n38  [key=2, style=dotted, color=red];
n43 -> n44  [key=0, style=solid];
n43 -> n46  [key=2, style=dotted];
n44 -> n39  [key=0, style=bold, color=blue];
d31 -> n32  [key=0, style=solid, color=green];
d31 -> d37  [key=2, style=dotted, color=green];
d31 -> n33  [key=1, style=dashed, color=green, label=model];
d31 -> n35  [key=1, style=dashed, color=green, label=model];
d34 -> n35  [key=0, style=solid, color=green];
d34 -> n38  [key=2, style=dotted, color=green];
d40 -> n41  [key=0, style=solid, color=green];
d40 -> n45  [key=2, style=dotted, color=green];
d40 -> d37  [key=2, style=dotted, color=green];
d42 -> n43  [key=0, style=solid, color=green];
d42 -> n38  [key=2, style=dotted, color=green];
d48 -> d49  [key=0, style=solid, color=green];
d48 -> d37  [key=2, style=dotted, color=green];
d48 -> d50  [key=1, style=dashed, color=green, label=model];
d48 -> d52  [key=1, style=dashed, color=green, label=model];
d47 -> d48  [key=0, style=solid, color=green];
d49 -> d50  [key=0, style=solid, color=green];
d49 -> n8  [key=2, style=dotted, color=green];
d49 -> d51  [key=1, style=dashed, color=green, label=context];
d50 -> d51  [key=0, style=solid, color=green];
d52 -> d53  [key=0, style=solid, color=green];
d52 -> d55  [key=2, style=dotted, color=green];
d51 -> d52  [key=0, style=solid, color=green];
d51 -> d54  [key=2, style=dotted, color=green];
d53 -> d47  [key=0, style=bold, color=blue];
d57 -> d58  [key=0, style=solid, color=green];
d57 -> d61  [key=2, style=dotted, color=green];
d57 -> d37  [key=2, style=dotted, color=green];
d56 -> d57  [key=0, style=solid, color=green];
d58 -> d59  [key=0, style=solid, color=green];
d58 -> n8  [key=2, style=dotted, color=green];
d59 -> d60  [key=0, style=solid, color=green];
d59 -> d54  [key=2, style=dotted, color=green];
d60 -> d56  [key=0, style=bold, color=blue];
d63 -> d64  [key=0, style=solid, color=green];
d63 -> n45  [key=2, style=dotted, color=green];
d63 -> d37  [key=2, style=dotted, color=green];
d62 -> d63  [key=0, style=solid, color=green];
d64 -> d65  [key=0, style=solid, color=green];
d64 -> n8  [key=2, style=dotted, color=green];
d64 -> d68  [key=1, style=dashed, color=green, label=context];
d65 -> d66  [key=0, style=solid, color=green];
d65 -> d54  [key=2, style=dotted, color=green];
d65 -> d67  [key=1, style=dashed, color=green, label="lambda expression"];
d68 -> d69  [key=0, style=solid, color=green];
d68 -> d54  [key=2, style=dotted, color=green];
d66 -> d62  [key=0, style=bold, color=blue];
d67 -> d68  [key=0, style=solid, color=green];
d71 -> d68  [key=1, style=dashed, color=green, label=context];
d69 -> d67  [key=0, style=bold, color=blue];
m0_9 -> m0_10  [key=0, style=solid];
m0_10 -> m0_11  [key=0, style=solid];
m0_11 -> m0_9  [key=0, style=bold, color=blue];
m0_2 -> m0_3  [key=0, style=solid];
m0_2 -> m0_4  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, object>"];
m0_2 -> m0_5  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m0_3 -> m0_4  [key=0, style=solid];
m0_3 -> m0_5  [key=0, style=solid];
m0_4 -> m0_6  [key=0, style=solid];
m0_4 -> m0_7  [key=2, style=dotted];
m0_5 -> m0_6  [key=0, style=solid];
m0_5 -> m0_8  [key=2, style=dotted];
m0_6 -> m0_2  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_0  [key=0, style=bold, color=blue];
m0_12 -> m0_4  [key=1, style=dashed, color=darkseagreen4, label="Nancy.Routing.Trie.Nodes.RootNode"];
m0_12 -> m0_5  [key=1, style=dashed, color=darkseagreen4, label="Nancy.Routing.Trie.Nodes.RootNode"];
m0_12 -> m0_10  [key=1, style=dashed, color=darkseagreen4, label="Nancy.Routing.Trie.Nodes.RootNode"];
}
