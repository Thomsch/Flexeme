digraph  {
n249 [label=fakeOptions, span=""];
n250 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
n0 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="15-15", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()"];
n1 [label="var fakeOptions = new FakeOptions()", span="18-18", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()"];
n2 [label="var expectedResult = ParserResult.Create(\r\n                ParserResultType.Options,\r\n                fakeOptions, new Error[] { new HelpRequestedError() })", span="19-21", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()"];
n6 [label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()"];
n3 [label="var result = InstanceBuilder.Build(\r\n                () => fakeOptions,\r\n                new[] { ''--help'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="24-28", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()"];
n13 [label=fakeOptions, span="25-25", cluster="lambda expression"];
n7 [label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="338-338", cluster="CommandLine.HelpRequestedError.HelpRequestedError()"];
n8 [label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="103-103", cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)"];
n4 [label="Assert.True(expectedResult.Equals(result))", span="31-31", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()"];
n9 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)"];
n12 [label="Entry lambda expression", span="25-25", cluster="lambda expression"];
n5 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="15-15", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()"];
n10 [label="Entry CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", span="90-90", cluster="CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)"];
n11 [label="Entry Unk.True", span="", cluster="Unk.True"];
n14 [label="Exit lambda expression", span="25-25", cluster="lambda expression"];
n15 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="40-40", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)"];
n16 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="45-49", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)"];
n17 [label="Assert.Equal(expected, result.Value.LongValue)", span="52-52", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)"];
n20 [label="Entry lambda expression", span="46-46", cluster="lambda expression"];
n18 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="40-40", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)"];
n19 [label="Entry Unk.Equal", span="", cluster="Unk.Equal"];
n21 [label="new FakeOptions()", span="46-46", cluster="lambda expression"];
n22 [label="Exit lambda expression", span="46-46", cluster="lambda expression"];
n23 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="63-63", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)"];
n24 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithDouble(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="68-72", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)"];
n25 [label="Assert.Equal(expected, result.Value.DoubleValue)", span="75-75", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)"];
n27 [label="Entry lambda expression", span="69-69", cluster="lambda expression"];
n26 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="63-63", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)"];
n28 [label="new FakeOptionsWithDouble()", span="69-69", cluster="lambda expression"];
n29 [label="Exit lambda expression", span="69-69", cluster="lambda expression"];
n30 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()"];
n31 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="87-87", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])"];
n32 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequence(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="92-96", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])"];
n33 [label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="99-99", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])"];
n36 [label="Entry lambda expression", span="93-93", cluster="lambda expression"];
n34 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="87-87", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])"];
n35 [label="Entry Unk.SequenceEqual", span="", cluster="Unk.SequenceEqual"];
n37 [label="new FakeOptionsWithSequence()", span="93-93", cluster="lambda expression"];
n38 [label="Exit lambda expression", span="93-93", cluster="lambda expression"];
n39 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()"];
n40 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="109-109", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])"];
n41 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="114-118", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])"];
n42 [label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="121-121", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])"];
n44 [label="Entry lambda expression", span="115-115", cluster="lambda expression"];
n43 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="109-109", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])"];
n45 [label="new FakeOptions()", span="115-115", cluster="lambda expression"];
n46 [label="Exit lambda expression", span="115-115", cluster="lambda expression"];
n47 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="132-132", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])"];
n48 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="137-141", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])"];
n49 [label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="144-144", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])"];
n51 [label="Entry lambda expression", span="138-138", cluster="lambda expression"];
n50 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="132-132", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])"];
n52 [label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="138-138", cluster="lambda expression"];
n53 [label="Exit lambda expression", span="138-138", cluster="lambda expression"];
n54 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()"];
n55 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="154-154", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])"];
n56 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="159-163", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])"];
n57 [label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="166-166", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])"];
n59 [label="Entry lambda expression", span="160-160", cluster="lambda expression"];
n58 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="154-154", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])"];
n60 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="160-160", cluster="lambda expression"];
n61 [label="Exit lambda expression", span="160-160", cluster="lambda expression"];
n62 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()"];
n63 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="172-172", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()"];
n64 [label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="175-175", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()"];
n65 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                new[] { ''-s'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="178-182", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()"];
n68 [label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="261-261", cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)"];
n69 [label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20", cluster="CommandLine.NameInfo.NameInfo(string, string)"];
n66 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="185-185", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()"];
n70 [label="Entry lambda expression", span="179-179", cluster="lambda expression"];
n67 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="172-172", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()"];
n71 [label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="179-179", cluster="lambda expression"];
n72 [label="Exit lambda expression", span="179-179", cluster="lambda expression"];
n73 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="191-191", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
n74 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="194-194", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
n75 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="197-201", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
n78 [label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316", cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)"];
n76 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="204-204", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
n79 [label="Entry lambda expression", span="198-198", cluster="lambda expression"];
n77 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="191-191", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
n80 [label="new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="198-198", cluster="lambda expression"];
n81 [label="Exit lambda expression", span="198-198", cluster="lambda expression"];
n82 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()"];
n83 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="211-211", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()"];
n84 [label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="214-214", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()"];
n85 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="217-221", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()"];
n86 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="224-224", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()"];
n88 [label="Entry lambda expression", span="218-218", cluster="lambda expression"];
n87 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="211-211", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()"];
n89 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="218-218", cluster="lambda expression"];
n90 [label="Exit lambda expression", span="218-218", cluster="lambda expression"];
n91 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="230-230", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
n92 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="233-233", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
n93 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue(),\r\n                new[] { ''one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="236-240", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
n94 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="243-243", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
n96 [label="Entry lambda expression", span="237-237", cluster="lambda expression"];
n95 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="230-230", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
n97 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="237-237", cluster="lambda expression"];
n98 [label="Exit lambda expression", span="237-237", cluster="lambda expression"];
n99 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()"];
n100 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="255-255", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)"];
n101 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="260-264", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)"];
n102 [label="expected.ShouldBeEquivalentTo(result.Value.Colors)", span="267-267", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)"];
n105 [label="Entry lambda expression", span="261-261", cluster="lambda expression"];
n103 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="255-255", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)"];
n104 [label="Entry Unk.ShouldBeEquivalentTo", span="", cluster="Unk.ShouldBeEquivalentTo"];
n106 [label="new FakeOptionsWithEnum()", span="261-261", cluster="lambda expression"];
n107 [label="Exit lambda expression", span="261-261", cluster="lambda expression"];
n108 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="16-16", cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()"];
n109 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="273-273", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()"];
n110 [label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="276-282", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()"];
n111 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="285-289", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()"];
n114 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()"];
n112 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="292-292", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()"];
n115 [label="Entry lambda expression", span="286-286", cluster="lambda expression"];
n113 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="273-273", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()"];
n116 [label="new FakeOptionsWithValues()", span="286-286", cluster="lambda expression"];
n117 [label="Exit lambda expression", span="286-286", cluster="lambda expression"];
n118 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="303-303", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])"];
n119 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceWithoutRange(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="308-312", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])"];
n120 [label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="315-315", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])"];
n122 [label="Entry lambda expression", span="309-309", cluster="lambda expression"];
n121 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="303-303", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])"];
n123 [label="new FakeOptionsWithSequenceWithoutRange()", span="309-309", cluster="lambda expression"];
n124 [label="Exit lambda expression", span="309-309", cluster="lambda expression"];
n125 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()"];
n126 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="325-325", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])"];
n127 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="330-334", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])"];
n128 [label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="337-337", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])"];
n130 [label="Entry lambda expression", span="331-331", cluster="lambda expression"];
n129 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="325-325", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])"];
n131 [label="new FakeOptionsWithSequenceAndSeparator()", span="331-331", cluster="lambda expression"];
n132 [label="Exit lambda expression", span="331-331", cluster="lambda expression"];
n133 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()"];
n134 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="347-347", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])"];
n135 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="352-356", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])"];
n136 [label="expected.ShouldBeEquivalentTo(result.Value.StringSequence)", span="359-359", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])"];
n138 [label="Entry lambda expression", span="353-353", cluster="lambda expression"];
n137 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="347-347", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])"];
n139 [label="new FakeOptionsWithSequenceAndSeparator()", span="353-353", cluster="lambda expression"];
n140 [label="Exit lambda expression", span="353-353", cluster="lambda expression"];
n141 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="368-368", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()"];
n142 [label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="371-377", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()"];
n143 [label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="378-378", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()"];
n145 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="391-391", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()"];
n144 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="381-388", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()"];
n147 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)"];
n148 [label="Entry lambda expression", span="382-382", cluster="lambda expression"];
n151 [label="Entry lambda expression", span="383-385", cluster="lambda expression"];
n146 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="368-368", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()"];
n149 [label="new FakeOptionsWithValues()", span="382-382", cluster="lambda expression"];
n150 [label="Exit lambda expression", span="382-382", cluster="lambda expression"];
n152 [label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="384-385", cluster="lambda expression"];
n156 [label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="385-385", cluster="lambda expression"];
n160 [label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="385-385", cluster="lambda expression"];
n153 [label="Exit lambda expression", span="383-385", cluster="lambda expression"];
n154 [label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="37-37", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)"];
n155 [label="Entry lambda expression", span="385-385", cluster="lambda expression"];
n157 [label="Exit lambda expression", span="385-385", cluster="lambda expression"];
n158 [label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)"];
n159 [label="Entry lambda expression", span="385-385", cluster="lambda expression"];
n161 [label="Exit lambda expression", span="385-385", cluster="lambda expression"];
n162 [label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="12-12", cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)"];
n163 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="397-397", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()"];
n164 [label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl'')),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''))\r\n                }", span="400-404", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()"];
n165 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSets(),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="407-411", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()"];
n168 [label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294", cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)"];
n166 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="414-414", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()"];
n169 [label="Entry lambda expression", span="408-408", cluster="lambda expression"];
n167 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="397-397", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()"];
n170 [label="new FakeOptionsWithSets()", span="408-408", cluster="lambda expression"];
n171 [label="Exit lambda expression", span="408-408", cluster="lambda expression"];
n172 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()"];
n173 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="420-420", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()"];
n174 [label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = null\r\n            }", span="422-425", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()"];
n175 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="427-431", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()"];
n178 [label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()"];
n176 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="434-434", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()"];
n179 [label="Entry lambda expression", span="428-428", cluster="lambda expression"];
n177 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="420-420", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()"];
n180 [label="new FakeOptionWithRequiredAndSet()", span="428-428", cluster="lambda expression"];
n181 [label="Exit lambda expression", span="428-428", cluster="lambda expression"];
n182 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="440-440", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()"];
n183 [label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="442-445", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()"];
n184 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="447-451", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()"];
n185 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="454-454", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()"];
n187 [label="Entry lambda expression", span="448-448", cluster="lambda expression"];
n186 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="440-440", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()"];
n188 [label="new FakeOptionWithRequiredAndSet()", span="448-448", cluster="lambda expression"];
n189 [label="Exit lambda expression", span="448-448", cluster="lambda expression"];
n190 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="459-459", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()"];
n191 [label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="461-465", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()"];
n192 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="467-471", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()"];
n195 [label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283", cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)"];
n193 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="474-474", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()"];
n196 [label="Entry lambda expression", span="468-468", cluster="lambda expression"];
n194 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="459-459", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()"];
n197 [label="new FakeOptionWithRequiredAndSet()", span="468-468", cluster="lambda expression"];
n198 [label="Exit lambda expression", span="468-468", cluster="lambda expression"];
n199 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="479-479", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()"];
n200 [label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="482-482", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()"];
n201 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequired(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="485-489", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()"];
n202 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="492-492", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()"];
n204 [label="Entry lambda expression", span="486-486", cluster="lambda expression"];
n203 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="479-479", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()"];
n205 [label="new FakeOptionWithRequired()", span="486-486", cluster="lambda expression"];
n206 [label="Exit lambda expression", span="486-486", cluster="lambda expression"];
n207 [label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()"];
n208 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="498-498", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()"];
n209 [label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="501-501", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()"];
n210 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="504-508", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()"];
n211 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="511-511", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()"];
n213 [label="Entry lambda expression", span="505-505", cluster="lambda expression"];
n212 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="498-498", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()"];
n214 [label="new FakeOptions()", span="505-505", cluster="lambda expression"];
n215 [label="Exit lambda expression", span="505-505", cluster="lambda expression"];
n216 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="517-517", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()"];
n217 [label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="520-520", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()"];
n218 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="523-527", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()"];
n221 [label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="272-272", cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)"];
n219 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="530-530", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()"];
n222 [label="Entry lambda expression", span="524-524", cluster="lambda expression"];
n220 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="517-517", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()"];
n223 [label="new FakeOptions()", span="524-524", cluster="lambda expression"];
n224 [label="Exit lambda expression", span="524-524", cluster="lambda expression"];
n225 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="536-536", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()"];
n226 [label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="539-539", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()"];
n227 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="542-546", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()"];
n228 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="549-549", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()"];
n230 [label="Entry lambda expression", span="543-543", cluster="lambda expression"];
n229 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="536-536", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()"];
n231 [label="new FakeOptions()", span="543-543", cluster="lambda expression"];
n232 [label="Exit lambda expression", span="543-543", cluster="lambda expression"];
n233 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="555-555", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()"];
n234 [label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="558-558", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()"];
n235 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="561-565", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()"];
n236 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="568-568", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()"];
n238 [label="Entry lambda expression", span="562-562", cluster="lambda expression"];
n237 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="555-555", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()"];
n239 [label="new FakeOptions()", span="562-562", cluster="lambda expression"];
n240 [label="Exit lambda expression", span="562-562", cluster="lambda expression"];
n241 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="576-576", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)"];
n242 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="581-585", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)"];
n243 [label="Assert.True(expected.Equals(result.Value.StringValue))", span="588-588", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)"];
n246 [label="Entry lambda expression", span="582-582", cluster="lambda expression"];
n244 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="576-576", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)"];
n245 [label="Entry string.Equals(string)", span="0-0", cluster="string.Equals(string)"];
n247 [label="new FakeOptions()", span="582-582", cluster="lambda expression"];
n248 [label="Exit lambda expression", span="582-582", cluster="lambda expression"];
d23 [label="return properties;", span="102-102", cluster="Ninject.Selection.Selector.SelectPropertiesForInjection(System.Type)", color=green, community=0];
d16 [label="List<PropertyInfo> properties = new List<PropertyInfo>()", span="87-87", cluster="Ninject.Selection.Selector.SelectPropertiesForInjection(System.Type)"];
d18 [label="this.Settings.InjectParentPrivateProperties", span="93-93", cluster="Ninject.Selection.Selector.SelectPropertiesForInjection(System.Type)"];
d20 [label="parentType != null", span="95-95", cluster="Ninject.Selection.Selector.SelectPropertiesForInjection(System.Type)"];
d24 [label="Exit Ninject.Selection.Selector.SelectPropertiesForInjection(System.Type)", span="84-84", cluster="Ninject.Selection.Selector.SelectPropertiesForInjection(System.Type)"];
d15 [label="Ensure.ArgumentNotNull(type, ''type'')", span="86-86", cluster="Ninject.Selection.Selector.SelectPropertiesForInjection(System.Type)"];
d17 [label="properties.AddRange(\r\n                type.GetProperties(this.Flags)\r\n                       .Select(p => p.GetPropertyFromDeclaredType(p, this.Flags))\r\n                       .Where(p => this.InjectionHeuristics.Any(h => h.ShouldInject(p))))", span="88-91", cluster="Ninject.Selection.Selector.SelectPropertiesForInjection(System.Type)"];
d25 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()"];
d21 [label="properties.AddRange(this.GetPrivateProperties(type.BaseType))", span="97-97", cluster="Ninject.Selection.Selector.SelectPropertiesForInjection(System.Type)"];
d62 [label="Ninject.Selection.Selector", span=""];
d19 [label="Type parentType = type.BaseType", span="95-95", cluster="Ninject.Selection.Selector.SelectPropertiesForInjection(System.Type)"];
d22 [label="parentType = parentType.BaseType", span="95-95", cluster="Ninject.Selection.Selector.SelectPropertiesForInjection(System.Type)"];
d14 [label="Entry Ninject.Selection.Selector.SelectPropertiesForInjection(System.Type)", span="84-84", cluster="Ninject.Selection.Selector.SelectPropertiesForInjection(System.Type)"];
d6 [label="Entry Ninject.Infrastructure.Ensure.ArgumentNotNull(object, string)", span="17-17", cluster="Ninject.Infrastructure.Ensure.ArgumentNotNull(object, string)"];
d26 [label="Entry System.Type.GetProperties(System.Reflection.BindingFlags)", span="0-0", cluster="System.Type.GetProperties(System.Reflection.BindingFlags)"];
d27 [label="Entry Unk.Select", span="", cluster="Unk.Select"];
d28 [label="Entry Unk.Where", span="", cluster="Unk.Where"];
d29 [label="Entry Unk.AddRange", span="", cluster="Unk.AddRange"];
d32 [label="Entry lambda expression", span="90-90", cluster="lambda expression"];
d36 [label="Entry lambda expression", span="91-91", cluster="lambda expression"];
d30 [label="Entry Ninject.Selection.Selector.GetPrivateProperties(System.Type)", span="105-105", cluster="Ninject.Selection.Selector.GetPrivateProperties(System.Type)"];
d31 [label="Entry System.Collections.Generic.List<T>.AddRange(System.Collections.Generic.IEnumerable<T>)", span="0-0", cluster="System.Collections.Generic.List<T>.AddRange(System.Collections.Generic.IEnumerable<T>)"];
d3 [label="ConstructorScorer = constructorScorer", span="62-62", cluster="Ninject.Selection.Selector.Selector(Ninject.Selection.Heuristics.IConstructorScorer, System.Collections.Generic.IEnumerable<Ninject.Selection.Heuristics.IInjectionHeuristic>)"];
d4 [label="InjectionHeuristics = injectionHeuristics.ToList()", span="63-63", cluster="Ninject.Selection.Selector.Selector(Ninject.Selection.Heuristics.IConstructorScorer, System.Collections.Generic.IEnumerable<Ninject.Selection.Heuristics.IInjectionHeuristic>)"];
d10 [label="var constructors = type.GetConstructors( Flags )", span="75-75", cluster="Ninject.Selection.Selector.SelectConstructorsForInjection(System.Type)"];
d33 [label="p.GetPropertyFromDeclaredType(p, this.Flags)", span="90-90", cluster="lambda expression"];
d37 [label="this.InjectionHeuristics.Any(h => h.ShouldInject(p))", span="91-91", cluster="lambda expression"];
d44 [label="return type.GetProperties(this.Flags).Where(p => p.DeclaringType == type && p.IsPrivate());", span="107-107", cluster="Ninject.Selection.Selector.GetPrivateProperties(System.Type)"];
d52 [label="return type.GetMethods(Flags).Where(m => InjectionHeuristics.Any(h => h.ShouldInject(m)));", span="118-118", cluster="Ninject.Selection.Selector.SelectMethodsForInjection(System.Type)"];
d56 [label="InjectionHeuristics.Any(h => h.ShouldInject(m))", span="118-118", cluster="lambda expression"];
d1 [label="Ensure.ArgumentNotNull(constructorScorer, ''constructorScorer'')", span="59-59", cluster="Ninject.Selection.Selector.Selector(Ninject.Selection.Heuristics.IConstructorScorer, System.Collections.Generic.IEnumerable<Ninject.Selection.Heuristics.IInjectionHeuristic>)"];
d2 [label="Ensure.ArgumentNotNull(injectionHeuristics, ''injectionHeuristics'')", span="60-60", cluster="Ninject.Selection.Selector.Selector(Ninject.Selection.Heuristics.IConstructorScorer, System.Collections.Generic.IEnumerable<Ninject.Selection.Heuristics.IInjectionHeuristic>)"];
d9 [label="Ensure.ArgumentNotNull(type, ''type'')", span="73-73", cluster="Ninject.Selection.Selector.SelectConstructorsForInjection(System.Type)"];
d51 [label="Ensure.ArgumentNotNull(type, ''type'')", span="117-117", cluster="Ninject.Selection.Selector.SelectMethodsForInjection(System.Type)"];
d34 [label="Exit lambda expression", span="90-90", cluster="lambda expression"];
d38 [label="Exit lambda expression", span="91-91", cluster="lambda expression"];
d41 [label="h.ShouldInject(p)", span="91-91", cluster="lambda expression"];
d45 [label="Exit Ninject.Selection.Selector.GetPrivateProperties(System.Type)", span="105-105", cluster="Ninject.Selection.Selector.GetPrivateProperties(System.Type)"];
d47 [label="p.DeclaringType == type && p.IsPrivate()", span="107-107", cluster="lambda expression"];
d0 [label="Entry Ninject.Selection.Selector.Selector(Ninject.Selection.Heuristics.IConstructorScorer, System.Collections.Generic.IEnumerable<Ninject.Selection.Heuristics.IInjectionHeuristic>)", span="57-57", cluster="Ninject.Selection.Selector.Selector(Ninject.Selection.Heuristics.IConstructorScorer, System.Collections.Generic.IEnumerable<Ninject.Selection.Heuristics.IInjectionHeuristic>)"];
d5 [label="Exit Ninject.Selection.Selector.Selector(Ninject.Selection.Heuristics.IConstructorScorer, System.Collections.Generic.IEnumerable<Ninject.Selection.Heuristics.IInjectionHeuristic>)", span="57-57", cluster="Ninject.Selection.Selector.Selector(Ninject.Selection.Heuristics.IConstructorScorer, System.Collections.Generic.IEnumerable<Ninject.Selection.Heuristics.IInjectionHeuristic>)"];
d7 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()"];
d8 [label="Entry Ninject.Selection.Selector.SelectConstructorsForInjection(System.Type)", span="71-71", cluster="Ninject.Selection.Selector.SelectConstructorsForInjection(System.Type)"];
d11 [label="return constructors.Length == 0 ? null : constructors;", span="76-76", cluster="Ninject.Selection.Selector.SelectConstructorsForInjection(System.Type)"];
d13 [label="Entry System.Type.GetConstructors(System.Reflection.BindingFlags)", span="0-0", cluster="System.Type.GetConstructors(System.Reflection.BindingFlags)"];
d35 [label="Entry System.Reflection.MemberInfo.GetPropertyFromDeclaredType(System.Reflection.PropertyInfo, System.Reflection.BindingFlags)", span="66-66", cluster="System.Reflection.MemberInfo.GetPropertyFromDeclaredType(System.Reflection.PropertyInfo, System.Reflection.BindingFlags)"];
d39 [label="Entry Unk.Any", span="", cluster="Unk.Any"];
d40 [label="Entry lambda expression", span="91-91", cluster="lambda expression"];
d46 [label="Entry lambda expression", span="107-107", cluster="lambda expression"];
d50 [label="Entry Ninject.Selection.Selector.SelectMethodsForInjection(System.Type)", span="115-115", cluster="Ninject.Selection.Selector.SelectMethodsForInjection(System.Type)"];
d53 [label="Exit Ninject.Selection.Selector.SelectMethodsForInjection(System.Type)", span="115-115", cluster="Ninject.Selection.Selector.SelectMethodsForInjection(System.Type)"];
d54 [label="Entry System.Type.GetMethods(System.Reflection.BindingFlags)", span="0-0", cluster="System.Type.GetMethods(System.Reflection.BindingFlags)"];
d55 [label="Entry lambda expression", span="118-118", cluster="lambda expression"];
d57 [label="Exit lambda expression", span="118-118", cluster="lambda expression"];
d58 [label="Entry lambda expression", span="118-118", cluster="lambda expression"];
d63 [label="?", span=""];
d42 [label="Exit lambda expression", span="91-91", cluster="lambda expression"];
d43 [label="Entry Unk.ShouldInject", span="", cluster="Unk.ShouldInject"];
d64 [label="System.Type", span=""];
d48 [label="Exit lambda expression", span="107-107", cluster="lambda expression"];
d49 [label="Entry System.Reflection.PropertyInfo.IsPrivate()", span="87-87", cluster="System.Reflection.PropertyInfo.IsPrivate()"];
d12 [label="Exit Ninject.Selection.Selector.SelectConstructorsForInjection(System.Type)", span="71-71", cluster="Ninject.Selection.Selector.SelectConstructorsForInjection(System.Type)"];
d59 [label="h.ShouldInject(m)", span="118-118", cluster="lambda expression"];
d60 [label="Exit lambda expression", span="118-118", cluster="lambda expression"];
d65 [label="System.Reflection.MethodInfo", span=""];
d61 [label="Entry Ninject.Selection.Heuristics.IInjectionHeuristic.ShouldInject(System.Reflection.MemberInfo)", span="27-27", cluster="Ninject.Selection.Heuristics.IInjectionHeuristic.ShouldInject(System.Reflection.MemberInfo)"];
m0_8 [label="Entry CommandLine.Core.NameExtensions.FromSpecification(CommandLine.Core.Specification)", span="22-22", cluster="CommandLine.Core.NameExtensions.FromSpecification(CommandLine.Core.Specification)", file="NameExtensions.cs"];
m0_9 [label="specification.Tag", span="24-24", cluster="CommandLine.Core.NameExtensions.FromSpecification(CommandLine.Core.Specification)", file="NameExtensions.cs"];
m0_11 [label="return FromOptionSpecification((OptionSpecification)specification);", span="27-27", cluster="CommandLine.Core.NameExtensions.FromSpecification(CommandLine.Core.Specification)", file="NameExtensions.cs"];
m0_10 [label="SpecificationType.Option", span="26-26", cluster="CommandLine.Core.NameExtensions.FromSpecification(CommandLine.Core.Specification)", file="NameExtensions.cs"];
m0_12 [label="return NameInfo.EmptyName;", span="29-29", cluster="CommandLine.Core.NameExtensions.FromSpecification(CommandLine.Core.Specification)", file="NameExtensions.cs"];
m0_13 [label="Exit CommandLine.Core.NameExtensions.FromSpecification(CommandLine.Core.Specification)", span="22-22", cluster="CommandLine.Core.NameExtensions.FromSpecification(CommandLine.Core.Specification)", file="NameExtensions.cs"];
m0_3 [label="Entry System.StringComparer.Equals(string, string)", span="0-0", cluster="System.StringComparer.Equals(string, string)", file="NameExtensions.cs"];
m0_0 [label="Entry CommandLine.Core.NameExtensions.MatchName(string, string, string, System.StringComparer)", span="8-8", cluster="CommandLine.Core.NameExtensions.MatchName(string, string, string, System.StringComparer)", file="NameExtensions.cs"];
m0_1 [label="return value.Length == 1\r\n               ? comparer.Equals(value, shortName)\r\n               : comparer.Equals(value, longName);", span="10-12", cluster="CommandLine.Core.NameExtensions.MatchName(string, string, string, System.StringComparer)", file="NameExtensions.cs"];
m0_2 [label="Exit CommandLine.Core.NameExtensions.MatchName(string, string, string, System.StringComparer)", span="8-8", cluster="CommandLine.Core.NameExtensions.MatchName(string, string, string, System.StringComparer)", file="NameExtensions.cs"];
m0_4 [label="Entry CommandLine.Core.NameExtensions.FromOptionSpecification(CommandLine.Core.OptionSpecification)", span="15-15", cluster="CommandLine.Core.NameExtensions.FromOptionSpecification(CommandLine.Core.OptionSpecification)", file="NameExtensions.cs"];
m0_5 [label="return new NameInfo(\r\n                specification.LongName,\r\n                specification.ShortName);", span="17-19", cluster="CommandLine.Core.NameExtensions.FromOptionSpecification(CommandLine.Core.OptionSpecification)", color=red, community=0, file="NameExtensions.cs"];
m0_6 [label="Exit CommandLine.Core.NameExtensions.FromOptionSpecification(CommandLine.Core.OptionSpecification)", span="15-15", cluster="CommandLine.Core.NameExtensions.FromOptionSpecification(CommandLine.Core.OptionSpecification)", file="NameExtensions.cs"];
m1_7 [label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", span="16-16", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", file="NameLookupTests.cs"];
m1_6 [label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124", cluster="CSharpx.Maybe.Just<T>(T)", file="NameLookupTests.cs"];
m1_8 [label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116", cluster="CSharpx.Maybe.Nothing<T>()", file="NameLookupTests.cs"];
m1_0 [label="Entry CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", span="14-14", cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs"];
m1_1 [label="var expected = Maybe.Just(''.'')", span="17-17", cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs"];
m1_2 [label="var specs = new[] { new OptionSpecification(string.Empty, ''string-seq'',\r\n                false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), '.', null, string.Empty, string.Empty, new List<string>(), typeof(IEnumerable<string>), TargetType.Sequence)}", span="18-19", cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs"];
m1_4 [label="expected.ShouldBeEquivalentTo(result)", span="25-25", cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs"];
m1_3 [label="var result = NameLookup.HavingSeparator(''string-seq'', specs, StringComparer.InvariantCulture)", span="22-22", cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs"];
m1_5 [label="Exit CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", span="14-14", cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs"];
m1_10 [label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="27-27", cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="NameLookupTests.cs"];
m1_9 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="NameLookupTests.cs"];
m4_11 [label="Entry T.ToMaybe<T>()", span="249-249", cluster="T.ToMaybe<T>()", file="TypeDescriptor.cs"];
m4_0 [label="Entry CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", span="13-13", cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", file="TypeDescriptor.cs"];
m4_1 [label="this.targetType = targetType", span="15-15", cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", file="TypeDescriptor.cs"];
m4_2 [label="this.maxItems = maxItems", span="16-16", cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", file="TypeDescriptor.cs"];
m4_3 [label="this.nextValue = nextValue", span="17-17", cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", file="TypeDescriptor.cs"];
m4_4 [label="Exit CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", span="13-13", cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", file="TypeDescriptor.cs"];
m4_16 [label="Entry lambda expression", span="47-47", cluster="lambda expression", file="TypeDescriptor.cs"];
m4_17 [label=n, span="47-47", cluster="lambda expression", color=green, community=0, file="TypeDescriptor.cs"];
m4_18 [label="Exit lambda expression", span="47-47", cluster="lambda expression", file="TypeDescriptor.cs"];
m4_12 [label="Entry CommandLine.Core.TypeDescriptorExtensions.WithNextValue(CommandLine.Core.TypeDescriptor, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", span="45-45", cluster="CommandLine.Core.TypeDescriptorExtensions.WithNextValue(CommandLine.Core.TypeDescriptor, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", file="TypeDescriptor.cs"];
m4_13 [label="return TypeDescriptor.Create(descriptor.TargetType, descriptor.MaxItems, nextValue.MapValueOrDefault(n => n, default(TypeDescriptor)));", span="47-47", cluster="CommandLine.Core.TypeDescriptorExtensions.WithNextValue(CommandLine.Core.TypeDescriptor, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", color=green, community=0, file="TypeDescriptor.cs"];
m4_14 [label="Exit CommandLine.Core.TypeDescriptorExtensions.WithNextValue(CommandLine.Core.TypeDescriptor, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", span="45-45", cluster="CommandLine.Core.TypeDescriptorExtensions.WithNextValue(CommandLine.Core.TypeDescriptor, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", file="TypeDescriptor.cs"];
m4_5 [label="Entry CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CommandLine.Core.TypeDescriptor)", span="35-35", cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CommandLine.Core.TypeDescriptor)", file="TypeDescriptor.cs"];
m4_6 [label="maximumItems == null", span="37-37", cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CommandLine.Core.TypeDescriptor)", file="TypeDescriptor.cs"];
m4_8 [label="return new TypeDescriptor(tag, maximumItems, next.ToMaybe());", span="39-39", cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CommandLine.Core.TypeDescriptor)", file="TypeDescriptor.cs"];
m4_7 [label="throw new ArgumentNullException(''maximumItems'');", span="37-37", cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CommandLine.Core.TypeDescriptor)", file="TypeDescriptor.cs"];
m4_9 [label="Exit CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CommandLine.Core.TypeDescriptor)", span="35-35", cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CommandLine.Core.TypeDescriptor)", file="TypeDescriptor.cs"];
m4_10 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="TypeDescriptor.cs"];
m4_15 [label="Entry CSharpx.Maybe<T1>.MapValueOrDefault<T1, T2>(System.Func<T1, T2>, T2)", span="377-377", cluster="CSharpx.Maybe<T1>.MapValueOrDefault<T1, T2>(System.Func<T1, T2>, T2)", file="TypeDescriptor.cs"];
m4_19 [label="out CommandLine.Core.TypeDescriptor", span="", file="TypeDescriptor.cs"];
m5_32 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", span="31-31", cluster="System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", file="ValueMapper.cs"];
m5_0 [label="Entry Ninject.INinjectSettings.Get<T>(string, T)", span="76-76", cluster="Ninject.INinjectSettings.Get<T>(string, T)", file="ValueMapper.cs"];
m5_1 [label="Exit Ninject.INinjectSettings.Get<T>(string, T)", span="76-76", cluster="Ninject.INinjectSettings.Get<T>(string, T)", file="ValueMapper.cs"];
m5_2 [label="Entry Ninject.INinjectSettings.Set(string, object)", span="83-83", cluster="Ninject.INinjectSettings.Set(string, object)", file="ValueMapper.cs"];
m5_3 [label="Exit Ninject.INinjectSettings.Set(string, object)", span="83-83", cluster="Ninject.INinjectSettings.Set(string, object)", file="ValueMapper.cs"];
m5_34 [label="Entry CommandLine.Core.Specification.CountOfMaxNumberOfValues()", span="71-71", cluster="CommandLine.Core.Specification.CountOfMaxNumberOfValues()", file="ValueMapper.cs"];
m5_4 [label="Entry CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="29-29", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m5_20 [label="var taken = values.Take(pt.Specification.CountOfMaxNumberOfValues().MapValueOrDefault(n => n, values.Count()))", span="39-39", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", color=green, community=0, file="ValueMapper.cs"];
m5_19 [label="var pt = specProps.First()", span="38-38", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m5_21 [label="taken.Empty()", span="40-40", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m5_25 [label="pt.Specification.Max.IsJust()\r\n                && next.IsNothing()\r\n                && values.Skip(taken.Count()).Any()", span="48-50", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m5_28 [label="yield return\r\n                converter(taken, pt.Property.PropertyType, pt.Specification.TargetType != TargetType.Sequence)\r\n                    .MapValueOrDefault(\r\n                        converted => Tuple.Create(pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>()),\r\n                        Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                            pt, Maybe.Just<Error>(new BadFormatConversionError(NameInfo.EmptyName))));", span="58-63", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m5_29 [label="MapValuesImpl(specProps.Skip(1), values.Skip(taken.Count()), converter)", span="65-65", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m5_17 [label="specProps.Empty()", span="34-34", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m5_18 [label="yield break;", span="36-36", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m5_22 [label="yield return\r\n                    Tuple.Create(pt, pt.Specification.MakeErrorInCaseOfMinConstraint());", span="42-43", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m5_23 [label="yield break;", span="44-44", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m5_26 [label="yield return\r\n                    Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                        pt, Maybe.Just<Error>(new SequenceOutOfRangeError(NameInfo.EmptyName)));", span="52-54", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m5_27 [label="yield break;", span="55-55", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m5_30 [label="yield return value;", span="67-67", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m5_24 [label="var next = specProps.Skip(1).FirstOrDefault(s => s.Specification.IsValue()).ToMaybe()", span="47-47", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m5_31 [label="Exit CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="29-29", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m5_6 [label="Entry Unk.>", span="", cluster="Unk.>", file="ValueMapper.cs"];
m5_56 [label="Entry CommandLine.Core.Specification.IsValue()", span="15-15", cluster="CommandLine.Core.Specification.IsValue()", file="ValueMapper.cs"];
m5_44 [label="Entry Unk.IsNothing", span="", cluster="Unk.IsNothing", file="ValueMapper.cs"];
m5_42 [label="Entry Unk.ToMaybe", span="", cluster="Unk.ToMaybe", file="ValueMapper.cs"];
m5_45 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="ValueMapper.cs"];
m5_47 [label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124", cluster="CSharpx.Maybe.Just<T>(T)", file="ValueMapper.cs"];
m5_14 [label="Entry lambda expression", span="25-25", cluster="lambda expression", file="ValueMapper.cs"];
m5_50 [label="Entry lambda expression", span="39-39", cluster="lambda expression", file="ValueMapper.cs"];
m5_51 [label=n, span="39-39", cluster="lambda expression", color=green, community=0, file="ValueMapper.cs"];
m5_52 [label="Exit lambda expression", span="39-39", cluster="lambda expression", file="ValueMapper.cs"];
m5_58 [label="Tuple.Create(pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>())", span="61-61", cluster="lambda expression", file="ValueMapper.cs"];
m5_57 [label="Entry lambda expression", span="61-61", cluster="lambda expression", file="ValueMapper.cs"];
m5_53 [label="Entry lambda expression", span="47-47", cluster="lambda expression", file="ValueMapper.cs"];
m5_59 [label="Exit lambda expression", span="61-61", cluster="lambda expression", file="ValueMapper.cs"];
m5_8 [label="Entry lambda expression", span="23-23", cluster="lambda expression", file="ValueMapper.cs"];
m5_11 [label="Entry lambda expression", span="24-24", cluster="lambda expression", file="ValueMapper.cs"];
m5_55 [label="Exit lambda expression", span="47-47", cluster="lambda expression", file="ValueMapper.cs"];
m5_54 [label="s.Specification.IsValue()", span="47-47", cluster="lambda expression", file="ValueMapper.cs"];
m5_10 [label="Exit lambda expression", span="23-23", cluster="lambda expression", file="ValueMapper.cs"];
m5_9 [label="pe.Item1", span="23-23", cluster="lambda expression", file="ValueMapper.cs"];
m5_13 [label="Exit lambda expression", span="24-24", cluster="lambda expression", file="ValueMapper.cs"];
m5_12 [label="pe.Item2", span="24-24", cluster="lambda expression", file="ValueMapper.cs"];
m5_15 [label="e.Value", span="25-25", cluster="lambda expression", file="ValueMapper.cs"];
m5_16 [label="Exit lambda expression", span="25-25", cluster="lambda expression", file="ValueMapper.cs"];
m5_33 [label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="ValueMapper.cs"];
m5_39 [label="Entry System.Tuple.Create<T1, T2>(T1, T2)", span="0-0", cluster="System.Tuple.Create<T1, T2>(T1, T2)", file="ValueMapper.cs"];
m5_60 [label="Entry CommandLine.Core.SpecificationProperty.WithValue(CSharpx.Maybe<object>)", span="18-18", cluster="CommandLine.Core.SpecificationProperty.WithValue(CSharpx.Maybe<object>)", file="ValueMapper.cs"];
m5_40 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="ValueMapper.cs"];
m5_37 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", file="ValueMapper.cs"];
m5_48 [label="Entry System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", span="0-0", cluster="System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", file="ValueMapper.cs"];
m5_72 [label="Entry CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", span="87-87", cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", file="ValueMapper.cs"];
m5_73 [label="return specification.Min.IsJust()\r\n                ? Maybe.Just<Error>(new SequenceOutOfRangeError(NameInfo.EmptyName))\r\n                : Maybe.Nothing<Error>();", span="89-91", cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", file="ValueMapper.cs"];
m5_74 [label="Exit CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", span="87-87", cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", file="ValueMapper.cs"];
m5_5 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="ValueMapper.cs"];
m5_49 [label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="349-349", cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="ValueMapper.cs"];
m5_38 [label="Entry CommandLine.Core.Specification.MakeErrorInCaseOfMinConstraint()", span="87-87", cluster="CommandLine.Core.Specification.MakeErrorInCaseOfMinConstraint()", file="ValueMapper.cs"];
m5_61 [label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116", cluster="CSharpx.Maybe.Nothing<T>()", file="ValueMapper.cs"];
m5_36 [label="Entry CSharpx.Maybe<T1>.MapValueOrDefault<T1, T2>(System.Func<T1, T2>, T2)", span="377-377", cluster="CSharpx.Maybe<T1>.MapValueOrDefault<T1, T2>(System.Func<T1, T2>, T2)", file="ValueMapper.cs"];
m5_71 [label="Entry CSharpx.Maybe<T>.FromJustOrFail<T>(System.Exception)", span="355-355", cluster="CSharpx.Maybe<T>.FromJustOrFail<T>(System.Exception)", file="ValueMapper.cs"];
m5_35 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="ValueMapper.cs"];
m5_62 [label="Entry CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", span="71-71", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs"];
m5_67 [label="specification.Max.IsJust()", span="78-78", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs"];
m5_68 [label="return Maybe.Just(specification.Max.FromJustOrFail());", span="80-80", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs"];
m5_65 [label="return Maybe.Just(1);", span="76-76", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs"];
m5_69 [label="return Maybe.Nothing<int>();", span="84-84", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs"];
m5_66 [label="TargetType.Sequence", span="77-77", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs"];
m5_64 [label="TargetType.Scalar", span="75-75", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs"];
m5_63 [label="specification.TargetType", span="73-73", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs"];
m5_70 [label="Exit CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", span="71-71", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs"];
m5_41 [label="Entry Unk.FirstOrDefault", span="", cluster="Unk.FirstOrDefault", file="ValueMapper.cs"];
m5_43 [label="Entry CSharpx.Maybe<T>.IsJust<T>()", span="326-326", cluster="CSharpx.Maybe<T>.IsJust<T>()", file="ValueMapper.cs"];
m5_7 [label="Entry Unk.Succeed", span="", cluster="Unk.Succeed", file="ValueMapper.cs"];
m5_75 [label=pt, span="", file="ValueMapper.cs"];
n249 -> n13  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
n250 -> n156  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
n250 -> n160  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n6  [key=2, style=dotted];
n1 -> n3  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
n1 -> n13  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
n2 -> n3  [key=0, style=solid];
n2 -> n7  [key=2, style=dotted];
n2 -> n8  [key=2, style=dotted];
n2 -> n4  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n3 -> n4  [key=0, style=solid];
n3 -> n9  [key=2, style=dotted];
n3 -> n12  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n13 -> n14  [key=0, style=solid];
n4 -> n5  [key=0, style=solid];
n4 -> n10  [key=2, style=dotted];
n4 -> n11  [key=2, style=dotted];
n12 -> n13  [key=0, style=solid];
n5 -> n0  [key=0, style=bold, color=blue];
n14 -> n12  [key=0, style=bold, color=blue];
n15 -> n16  [key=0, style=solid];
n15 -> n17  [key=1, style=dashed, color=darkseagreen4, label=long];
n16 -> n17  [key=0, style=solid];
n16 -> n9  [key=2, style=dotted];
n16 -> n20  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n17 -> n18  [key=0, style=solid];
n17 -> n19  [key=2, style=dotted];
n20 -> n21  [key=0, style=solid];
n18 -> n15  [key=0, style=bold, color=blue];
n21 -> n22  [key=0, style=solid];
n21 -> n6  [key=2, style=dotted];
n22 -> n20  [key=0, style=bold, color=blue];
n23 -> n24  [key=0, style=solid];
n23 -> n25  [key=1, style=dashed, color=darkseagreen4, label=double];
n24 -> n25  [key=0, style=solid];
n24 -> n9  [key=2, style=dotted];
n24 -> n27  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n25 -> n26  [key=0, style=solid];
n25 -> n19  [key=2, style=dotted];
n27 -> n28  [key=0, style=solid];
n26 -> n23  [key=0, style=bold, color=blue];
n28 -> n29  [key=0, style=solid];
n28 -> n30  [key=2, style=dotted];
n29 -> n27  [key=0, style=bold, color=blue];
n31 -> n32  [key=0, style=solid];
n31 -> n33  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
n32 -> n33  [key=0, style=solid];
n32 -> n9  [key=2, style=dotted];
n32 -> n36  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n33 -> n34  [key=0, style=solid];
n33 -> n35  [key=2, style=dotted];
n33 -> n11  [key=2, style=dotted];
n36 -> n37  [key=0, style=solid];
n34 -> n31  [key=0, style=bold, color=blue];
n37 -> n38  [key=0, style=solid];
n37 -> n39  [key=2, style=dotted];
n38 -> n36  [key=0, style=bold, color=blue];
n40 -> n41  [key=0, style=solid];
n40 -> n42  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
n41 -> n42  [key=0, style=solid];
n41 -> n9  [key=2, style=dotted];
n41 -> n44  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n42 -> n43  [key=0, style=solid];
n42 -> n35  [key=2, style=dotted];
n42 -> n11  [key=2, style=dotted];
n44 -> n45  [key=0, style=solid];
n43 -> n40  [key=0, style=bold, color=blue];
n45 -> n46  [key=0, style=solid];
n45 -> n6  [key=2, style=dotted];
n46 -> n44  [key=0, style=bold, color=blue];
n47 -> n48  [key=0, style=solid];
n47 -> n49  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
n48 -> n49  [key=0, style=solid];
n48 -> n9  [key=2, style=dotted];
n48 -> n51  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n49 -> n50  [key=0, style=solid];
n49 -> n35  [key=2, style=dotted];
n49 -> n11  [key=2, style=dotted];
n51 -> n52  [key=0, style=solid];
n50 -> n47  [key=0, style=bold, color=blue];
n52 -> n53  [key=0, style=solid];
n52 -> n54  [key=2, style=dotted];
n53 -> n51  [key=0, style=bold, color=blue];
n55 -> n56  [key=0, style=solid];
n55 -> n57  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
n56 -> n57  [key=0, style=solid];
n56 -> n9  [key=2, style=dotted];
n56 -> n59  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n57 -> n58  [key=0, style=solid];
n57 -> n35  [key=2, style=dotted];
n57 -> n11  [key=2, style=dotted];
n59 -> n60  [key=0, style=solid];
n58 -> n55  [key=0, style=bold, color=blue];
n60 -> n61  [key=0, style=solid];
n60 -> n62  [key=2, style=dotted];
n61 -> n59  [key=0, style=bold, color=blue];
n63 -> n64  [key=0, style=solid];
n64 -> n65  [key=0, style=solid];
n64 -> n68  [key=2, style=dotted];
n64 -> n69  [key=2, style=dotted];
n64 -> n66  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n65 -> n66  [key=0, style=solid];
n65 -> n9  [key=2, style=dotted];
n65 -> n70  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n66 -> n67  [key=0, style=solid];
n66 -> n35  [key=2, style=dotted];
n66 -> n11  [key=2, style=dotted];
n70 -> n71  [key=0, style=solid];
n67 -> n63  [key=0, style=bold, color=blue];
n71 -> n72  [key=0, style=solid];
n71 -> n54  [key=2, style=dotted];
n72 -> n70  [key=0, style=bold, color=blue];
n73 -> n74  [key=0, style=solid];
n74 -> n75  [key=0, style=solid];
n74 -> n78  [key=2, style=dotted];
n74 -> n76  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n75 -> n76  [key=0, style=solid];
n75 -> n9  [key=2, style=dotted];
n75 -> n79  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n76 -> n77  [key=0, style=solid];
n76 -> n35  [key=2, style=dotted];
n76 -> n11  [key=2, style=dotted];
n79 -> n80  [key=0, style=solid];
n77 -> n73  [key=0, style=bold, color=blue];
n80 -> n81  [key=0, style=solid];
n80 -> n82  [key=2, style=dotted];
n81 -> n79  [key=0, style=bold, color=blue];
n83 -> n84  [key=0, style=solid];
n84 -> n85  [key=0, style=solid];
n84 -> n78  [key=2, style=dotted];
n84 -> n69  [key=2, style=dotted];
n84 -> n86  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n85 -> n86  [key=0, style=solid];
n85 -> n9  [key=2, style=dotted];
n85 -> n88  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n86 -> n87  [key=0, style=solid];
n86 -> n35  [key=2, style=dotted];
n86 -> n11  [key=2, style=dotted];
n88 -> n89  [key=0, style=solid];
n87 -> n83  [key=0, style=bold, color=blue];
n89 -> n90  [key=0, style=solid];
n89 -> n62  [key=2, style=dotted];
n90 -> n88  [key=0, style=bold, color=blue];
n91 -> n92  [key=0, style=solid];
n92 -> n93  [key=0, style=solid];
n92 -> n78  [key=2, style=dotted];
n92 -> n94  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n93 -> n94  [key=0, style=solid];
n93 -> n9  [key=2, style=dotted];
n93 -> n96  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n94 -> n95  [key=0, style=solid];
n94 -> n35  [key=2, style=dotted];
n94 -> n11  [key=2, style=dotted];
n96 -> n97  [key=0, style=solid];
n95 -> n91  [key=0, style=bold, color=blue];
n97 -> n98  [key=0, style=solid];
n97 -> n99  [key=2, style=dotted];
n98 -> n96  [key=0, style=bold, color=blue];
n100 -> n101  [key=0, style=solid];
n100 -> n102  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Colors"];
n101 -> n102  [key=0, style=solid];
n101 -> n9  [key=2, style=dotted];
n101 -> n105  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n102 -> n103  [key=0, style=solid];
n102 -> n104  [key=2, style=dotted];
n102 -> n102  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Colors"];
n105 -> n106  [key=0, style=solid];
n103 -> n100  [key=0, style=bold, color=blue];
n106 -> n107  [key=0, style=solid];
n106 -> n108  [key=2, style=dotted];
n107 -> n105  [key=0, style=bold, color=blue];
n109 -> n110  [key=0, style=solid];
n110 -> n111  [key=0, style=solid];
n110 -> n114  [key=2, style=dotted];
n110 -> n112  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n111 -> n112  [key=0, style=solid];
n111 -> n9  [key=2, style=dotted];
n111 -> n115  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n112 -> n113  [key=0, style=solid];
n112 -> n104  [key=2, style=dotted];
n115 -> n116  [key=0, style=solid];
n113 -> n109  [key=0, style=bold, color=blue];
n116 -> n117  [key=0, style=solid];
n116 -> n114  [key=2, style=dotted];
n117 -> n115  [key=0, style=bold, color=blue];
n118 -> n119  [key=0, style=solid];
n118 -> n120  [key=1, style=dashed, color=darkseagreen4, label="long[]"];
n119 -> n120  [key=0, style=solid];
n119 -> n9  [key=2, style=dotted];
n119 -> n122  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n120 -> n121  [key=0, style=solid];
n120 -> n104  [key=2, style=dotted];
n122 -> n123  [key=0, style=solid];
n121 -> n118  [key=0, style=bold, color=blue];
n123 -> n124  [key=0, style=solid];
n123 -> n125  [key=2, style=dotted];
n124 -> n122  [key=0, style=bold, color=blue];
n126 -> n127  [key=0, style=solid];
n126 -> n128  [key=1, style=dashed, color=darkseagreen4, label="long[]"];
n127 -> n128  [key=0, style=solid];
n127 -> n9  [key=2, style=dotted];
n127 -> n130  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n128 -> n129  [key=0, style=solid];
n128 -> n104  [key=2, style=dotted];
n130 -> n131  [key=0, style=solid];
n129 -> n126  [key=0, style=bold, color=blue];
n131 -> n132  [key=0, style=solid];
n131 -> n133  [key=2, style=dotted];
n132 -> n130  [key=0, style=bold, color=blue];
n134 -> n135  [key=0, style=solid];
n134 -> n136  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
n135 -> n136  [key=0, style=solid];
n135 -> n9  [key=2, style=dotted];
n135 -> n138  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n136 -> n137  [key=0, style=solid];
n136 -> n104  [key=2, style=dotted];
n138 -> n139  [key=0, style=solid];
n137 -> n134  [key=0, style=bold, color=blue];
n139 -> n140  [key=0, style=solid];
n139 -> n133  [key=2, style=dotted];
n140 -> n138  [key=0, style=bold, color=blue];
n141 -> n142  [key=0, style=solid];
n142 -> n143  [key=0, style=solid];
n142 -> n114  [key=2, style=dotted];
n142 -> n145  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n143 -> n144  [key=0, style=solid];
n145 -> n146  [key=0, style=solid];
n145 -> n104  [key=2, style=dotted];
n144 -> n145  [key=0, style=solid];
n144 -> n147  [key=2, style=dotted];
n144 -> n148  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n144 -> n151  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n148 -> n149  [key=0, style=solid];
n151 -> n152  [key=0, style=solid];
n151 -> n156  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
n151 -> n160  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
n146 -> n141  [key=0, style=bold, color=blue];
n149 -> n150  [key=0, style=solid];
n149 -> n114  [key=2, style=dotted];
n150 -> n148  [key=0, style=bold, color=blue];
n152 -> n153  [key=0, style=solid];
n152 -> n154  [key=2, style=dotted];
n152 -> n155  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n156 -> n157  [key=0, style=solid];
n156 -> n158  [key=2, style=dotted];
n156 -> n159  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n160 -> n161  [key=0, style=solid];
n160 -> n162  [key=2, style=dotted];
n153 -> n151  [key=0, style=bold, color=blue];
n155 -> n156  [key=0, style=solid];
n157 -> n155  [key=0, style=bold, color=blue];
n159 -> n160  [key=0, style=solid];
n161 -> n159  [key=0, style=bold, color=blue];
n163 -> n164  [key=0, style=solid];
n164 -> n165  [key=0, style=solid];
n164 -> n168  [key=2, style=dotted];
n164 -> n69  [key=2, style=dotted];
n164 -> n166  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n165 -> n166  [key=0, style=solid];
n165 -> n9  [key=2, style=dotted];
n165 -> n169  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n166 -> n167  [key=0, style=solid];
n166 -> n35  [key=2, style=dotted];
n166 -> n11  [key=2, style=dotted];
n169 -> n170  [key=0, style=solid];
n167 -> n163  [key=0, style=bold, color=blue];
n170 -> n171  [key=0, style=solid];
n170 -> n172  [key=2, style=dotted];
n171 -> n169  [key=0, style=bold, color=blue];
n173 -> n174  [key=0, style=solid];
n174 -> n175  [key=0, style=solid];
n174 -> n178  [key=2, style=dotted];
n174 -> n176  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n175 -> n176  [key=0, style=solid];
n175 -> n9  [key=2, style=dotted];
n175 -> n179  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n176 -> n177  [key=0, style=solid];
n176 -> n104  [key=2, style=dotted];
n179 -> n180  [key=0, style=solid];
n177 -> n173  [key=0, style=bold, color=blue];
n180 -> n181  [key=0, style=solid];
n180 -> n178  [key=2, style=dotted];
n181 -> n179  [key=0, style=bold, color=blue];
n182 -> n183  [key=0, style=solid];
n183 -> n184  [key=0, style=solid];
n183 -> n178  [key=2, style=dotted];
n183 -> n185  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n184 -> n185  [key=0, style=solid];
n184 -> n9  [key=2, style=dotted];
n184 -> n187  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n185 -> n186  [key=0, style=solid];
n185 -> n104  [key=2, style=dotted];
n187 -> n188  [key=0, style=solid];
n186 -> n182  [key=0, style=bold, color=blue];
n188 -> n189  [key=0, style=solid];
n188 -> n178  [key=2, style=dotted];
n189 -> n187  [key=0, style=bold, color=blue];
n190 -> n191  [key=0, style=solid];
n191 -> n192  [key=0, style=solid];
n191 -> n195  [key=2, style=dotted];
n191 -> n69  [key=2, style=dotted];
n191 -> n193  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n192 -> n193  [key=0, style=solid];
n192 -> n9  [key=2, style=dotted];
n192 -> n196  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n193 -> n194  [key=0, style=solid];
n193 -> n35  [key=2, style=dotted];
n193 -> n11  [key=2, style=dotted];
n196 -> n197  [key=0, style=solid];
n194 -> n190  [key=0, style=bold, color=blue];
n197 -> n198  [key=0, style=solid];
n197 -> n178  [key=2, style=dotted];
n198 -> n196  [key=0, style=bold, color=blue];
n199 -> n200  [key=0, style=solid];
n200 -> n201  [key=0, style=solid];
n200 -> n195  [key=2, style=dotted];
n200 -> n69  [key=2, style=dotted];
n200 -> n202  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n201 -> n202  [key=0, style=solid];
n201 -> n9  [key=2, style=dotted];
n201 -> n204  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n202 -> n203  [key=0, style=solid];
n202 -> n35  [key=2, style=dotted];
n202 -> n11  [key=2, style=dotted];
n204 -> n205  [key=0, style=solid];
n203 -> n199  [key=0, style=bold, color=blue];
n205 -> n206  [key=0, style=solid];
n205 -> n207  [key=2, style=dotted];
n206 -> n204  [key=0, style=bold, color=blue];
n208 -> n209  [key=0, style=solid];
n209 -> n210  [key=0, style=solid];
n209 -> n78  [key=2, style=dotted];
n209 -> n69  [key=2, style=dotted];
n209 -> n211  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n210 -> n211  [key=0, style=solid];
n210 -> n9  [key=2, style=dotted];
n210 -> n213  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n211 -> n212  [key=0, style=solid];
n211 -> n35  [key=2, style=dotted];
n211 -> n11  [key=2, style=dotted];
n213 -> n214  [key=0, style=solid];
n212 -> n208  [key=0, style=bold, color=blue];
n214 -> n215  [key=0, style=solid];
n214 -> n6  [key=2, style=dotted];
n215 -> n213  [key=0, style=bold, color=blue];
n216 -> n217  [key=0, style=solid];
n217 -> n218  [key=0, style=solid];
n217 -> n221  [key=2, style=dotted];
n217 -> n219  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n218 -> n219  [key=0, style=solid];
n218 -> n9  [key=2, style=dotted];
n218 -> n222  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n219 -> n220  [key=0, style=solid];
n219 -> n35  [key=2, style=dotted];
n219 -> n11  [key=2, style=dotted];
n222 -> n223  [key=0, style=solid];
n220 -> n216  [key=0, style=bold, color=blue];
n223 -> n224  [key=0, style=solid];
n223 -> n6  [key=2, style=dotted];
n224 -> n222  [key=0, style=bold, color=blue];
n225 -> n226  [key=0, style=solid];
n226 -> n227  [key=0, style=solid];
n226 -> n221  [key=2, style=dotted];
n226 -> n228  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n227 -> n228  [key=0, style=solid];
n227 -> n9  [key=2, style=dotted];
n227 -> n230  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n228 -> n229  [key=0, style=solid];
n228 -> n35  [key=2, style=dotted];
n228 -> n11  [key=2, style=dotted];
n230 -> n231  [key=0, style=solid];
n229 -> n225  [key=0, style=bold, color=blue];
n231 -> n232  [key=0, style=solid];
n231 -> n6  [key=2, style=dotted];
n232 -> n230  [key=0, style=bold, color=blue];
n233 -> n234  [key=0, style=solid];
n234 -> n235  [key=0, style=solid];
n234 -> n221  [key=2, style=dotted];
n234 -> n236  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n235 -> n236  [key=0, style=solid];
n235 -> n9  [key=2, style=dotted];
n235 -> n238  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n236 -> n237  [key=0, style=solid];
n236 -> n35  [key=2, style=dotted];
n236 -> n11  [key=2, style=dotted];
n238 -> n239  [key=0, style=solid];
n237 -> n233  [key=0, style=bold, color=blue];
n239 -> n240  [key=0, style=solid];
n239 -> n6  [key=2, style=dotted];
n240 -> n238  [key=0, style=bold, color=blue];
n241 -> n242  [key=0, style=solid];
n241 -> n243  [key=1, style=dashed, color=darkseagreen4, label=string];
n242 -> n243  [key=0, style=solid];
n242 -> n9  [key=2, style=dotted];
n242 -> n246  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n243 -> n244  [key=0, style=solid];
n243 -> n245  [key=2, style=dotted];
n243 -> n11  [key=2, style=dotted];
n246 -> n247  [key=0, style=solid];
n244 -> n241  [key=0, style=bold, color=blue];
n247 -> n248  [key=0, style=solid];
n247 -> n6  [key=2, style=dotted];
n248 -> n246  [key=0, style=bold, color=blue];
d23 -> d24  [key=0, style=solid, color=green];
d16 -> d23  [key=1, style=dashed, color=green, label=properties];
d16 -> d17  [key=0, style=solid];
d16 -> d25  [key=2, style=dotted];
d16 -> d21  [key=1, style=dashed, color=darkseagreen4, label=properties];
d18 -> d23  [key=0, style=solid, color=green];
d18 -> d19  [key=0, style=solid];
d20 -> d23  [key=0, style=solid, color=green];
d20 -> d21  [key=0, style=solid];
d24 -> d14  [key=0, style=bold, color=blue];
d15 -> d16  [key=0, style=solid];
d15 -> d6  [key=2, style=dotted];
d17 -> d18  [key=0, style=solid];
d17 -> d26  [key=2, style=dotted];
d17 -> d27  [key=2, style=dotted];
d17 -> d28  [key=2, style=dotted];
d17 -> d29  [key=2, style=dotted];
d17 -> d32  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d17 -> d36  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d21 -> d22  [key=0, style=solid];
d21 -> d30  [key=2, style=dotted];
d21 -> d31  [key=2, style=dotted];
d62 -> d18  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Selection.Selector"];
d62 -> d17  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Selection.Selector"];
d62 -> d21  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Selection.Selector"];
d62 -> d3  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Selection.Selector"];
d62 -> d4  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Selection.Selector"];
d62 -> d10  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Selection.Selector"];
d62 -> d33  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Selection.Selector"];
d62 -> d37  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Selection.Selector"];
d62 -> d44  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Selection.Selector"];
d62 -> d52  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Selection.Selector"];
d62 -> d56  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Selection.Selector"];
d19 -> d20  [key=0, style=solid];
d19 -> d22  [key=1, style=dashed, color=darkseagreen4, label=parentType];
d22 -> d20  [key=0, style=solid];
d22 -> d22  [key=1, style=dashed, color=darkseagreen4, label=parentType];
d14 -> d15  [key=0, style=solid];
d14 -> d17  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d14 -> d21  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d14 -> d19  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d32 -> d33  [key=0, style=solid];
d36 -> d37  [key=0, style=solid];
d36 -> d41  [key=1, style=dashed, color=darkseagreen4, label="?"];
d30 -> d44  [key=0, style=solid];
d30 -> d47  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d3 -> d4  [key=0, style=solid];
d4 -> d5  [key=0, style=solid];
d4 -> d7  [key=2, style=dotted];
d10 -> d11  [key=0, style=solid];
d10 -> d13  [key=2, style=dotted];
d33 -> d34  [key=0, style=solid];
d33 -> d35  [key=2, style=dotted];
d37 -> d38  [key=0, style=solid];
d37 -> d39  [key=2, style=dotted];
d37 -> d40  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d44 -> d26  [key=2, style=dotted];
d44 -> d28  [key=2, style=dotted];
d44 -> d45  [key=0, style=solid];
d44 -> d46  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d52 -> d28  [key=2, style=dotted];
d52 -> d53  [key=0, style=solid];
d52 -> d54  [key=2, style=dotted];
d52 -> d55  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d56 -> d57  [key=0, style=solid];
d56 -> d39  [key=2, style=dotted];
d56 -> d58  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d1 -> d6  [key=2, style=dotted];
d1 -> d2  [key=0, style=solid];
d2 -> d6  [key=2, style=dotted];
d2 -> d3  [key=0, style=solid];
d9 -> d6  [key=2, style=dotted];
d9 -> d10  [key=0, style=solid];
d51 -> d6  [key=2, style=dotted];
d51 -> d52  [key=0, style=solid];
d34 -> d32  [key=0, style=bold, color=blue];
d38 -> d36  [key=0, style=bold, color=blue];
d41 -> d42  [key=0, style=solid];
d41 -> d43  [key=2, style=dotted];
d45 -> d30  [key=0, style=bold, color=blue];
d47 -> d48  [key=0, style=solid];
d47 -> d49  [key=2, style=dotted];
d0 -> d3  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Selection.Heuristics.IConstructorScorer"];
d0 -> d4  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<Ninject.Selection.Heuristics.IInjectionHeuristic>"];
d0 -> d1  [key=0, style=solid];
d0 -> d2  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<Ninject.Selection.Heuristics.IInjectionHeuristic>"];
d5 -> d0  [key=0, style=bold, color=blue];
d8 -> d10  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d8 -> d9  [key=0, style=solid];
d11 -> d12  [key=0, style=solid];
d40 -> d41  [key=0, style=solid];
d46 -> d47  [key=0, style=solid];
d50 -> d52  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d50 -> d51  [key=0, style=solid];
d53 -> d50  [key=0, style=bold, color=blue];
d55 -> d56  [key=0, style=solid];
d55 -> d59  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.MethodInfo"];
d57 -> d55  [key=0, style=bold, color=blue];
d58 -> d59  [key=0, style=solid];
d63 -> d41  [key=1, style=dashed, color=darkseagreen4, label="?"];
d42 -> d40  [key=0, style=bold, color=blue];
d64 -> d47  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d48 -> d46  [key=0, style=bold, color=blue];
d12 -> d8  [key=0, style=bold, color=blue];
d59 -> d60  [key=0, style=solid];
d59 -> d61  [key=2, style=dotted];
d60 -> d58  [key=0, style=bold, color=blue];
d65 -> d59  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.MethodInfo"];
m0_8 -> m0_9  [key=0, style=solid];
m0_8 -> m0_11  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m0_8 -> m0_4  [key=3, color=darkorchid, style=bold, label="method methodReturn CommandLine.NameInfo FromSpecification"];
m0_9 -> m0_10  [key=0, style=solid];
m0_9 -> m0_12  [key=0, style=solid];
m0_11 -> m0_13  [key=0, style=solid];
m0_11 -> m0_4  [key=2, style=dotted];
m0_10 -> m0_11  [key=0, style=solid];
m0_12 -> m0_13  [key=0, style=solid];
m0_13 -> m0_8  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_3  [key=2, style=dotted];
m0_2 -> m0_0  [key=0, style=bold, color=blue];
m0_4 -> m0_5  [key=0, style=solid, color=red];
m0_4 -> m0_8  [key=3, color=darkorchid, style=bold, label="Parameter variable CommandLine.Core.OptionSpecification specification"];
m0_5 -> m0_6  [key=0, style=solid, color=red];
m0_5 -> n69  [key=2, style=dotted, color=red];
m0_6 -> m0_4  [key=0, style=bold, color=blue];
m1_0 -> m1_1  [key=0, style=solid];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_6  [key=2, style=dotted];
m1_1 -> m1_4  [key=1, style=dashed, color=darkseagreen4, label=expected];
m1_2 -> m1_3  [key=0, style=solid];
m1_2 -> m1_7  [key=2, style=dotted];
m1_2 -> m1_8  [key=2, style=dotted];
m1_2 -> m1_9  [key=2, style=dotted];
m1_4 -> m1_5  [key=0, style=solid];
m1_4 -> n104  [key=2, style=dotted];
m1_3 -> m1_4  [key=0, style=solid];
m1_3 -> m1_10  [key=2, style=dotted];
m1_5 -> m1_0  [key=0, style=bold, color=blue];
m4_0 -> m4_1  [key=0, style=solid];
m4_0 -> m4_2  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<int>"];
m4_0 -> m4_3  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<CommandLine.Core.TypeDescriptor>"];
m4_1 -> m4_2  [key=0, style=solid];
m4_1 -> m4_19  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.TypeDescriptor"];
m4_2 -> m4_3  [key=0, style=solid];
m4_2 -> m4_19  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.TypeDescriptor"];
m4_3 -> m4_4  [key=0, style=solid];
m4_3 -> m4_19  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.TypeDescriptor"];
m4_4 -> m4_0  [key=0, style=bold, color=blue];
m4_16 -> m4_17  [key=0, style=solid, color=green];
m4_17 -> m4_18  [key=0, style=solid, color=green];
m4_18 -> m4_16  [key=0, style=bold, color=blue];
m4_12 -> m4_13  [key=0, style=solid, color=green];
m4_12 -> m4_5  [key=3, color=darkorchid, style=bold, label="method methodReturn CommandLine.Core.TypeDescriptor WithNextValue"];
m4_13 -> m4_14  [key=0, style=solid, color=green];
m4_13 -> m4_15  [key=2, style=dotted, color=green];
m4_13 -> m4_5  [key=2, style=dotted, color=green];
m4_13 -> m4_13  [key=1, style=dashed, color=green, label="CommandLine.Core.TypeDescriptor"];
m4_13 -> m4_16  [key=1, style=dashed, color=green, label="lambda expression"];
m4_14 -> m4_12  [key=0, style=bold, color=blue];
m4_5 -> m4_6  [key=0, style=solid];
m4_5 -> m4_8  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.TargetType"];
m4_6 -> m4_7  [key=0, style=solid];
m4_6 -> m4_8  [key=0, style=solid];
m4_8 -> m4_9  [key=0, style=solid];
m4_8 -> m4_0  [key=2, style=dotted];
m4_8 -> m4_11  [key=2, style=dotted];
m4_7 -> m4_9  [key=0, style=solid];
m4_7 -> m4_10  [key=2, style=dotted];
m4_9 -> m4_5  [key=0, style=bold, color=blue];
m5_0 -> m5_1  [key=0, style=solid];
m5_1 -> m5_4  [key=2, style=dotted];
m5_1 -> m5_2  [key=0, style=solid];
m5_1 -> m5_0  [key=0, style=bold, color=blue];
m5_2 -> m5_3  [key=0, style=solid];
m5_2 -> m5_5  [key=2, style=dotted];
m5_2 -> m5_6  [key=2, style=dotted];
m5_2 -> m5_7  [key=2, style=dotted];
m5_2 -> m5_8  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_2 -> m5_11  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_2 -> m5_14  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_3 -> m5_0  [key=0, style=bold, color=blue];
m5_3 -> m5_2  [key=0, style=bold, color=blue];
m5_4 -> m5_20  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<string>"];
m5_4 -> m5_17  [key=0, style=solid];
m5_4 -> m5_18  [key=0, style=bold, color=crimson];
m5_4 -> m5_22  [key=0, style=bold, color=crimson];
m5_4 -> m5_23  [key=0, style=bold, color=crimson];
m5_4 -> m5_26  [key=0, style=bold, color=crimson];
m5_4 -> m5_27  [key=0, style=bold, color=crimson];
m5_4 -> m5_28  [key=0, style=bold, color=crimson];
m5_4 -> m5_30  [key=0, style=bold, color=crimson];
m5_4 -> m5_19  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m5_4 -> m5_24  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m5_4 -> m5_25  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m5_4 -> m5_29  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m5_20 -> m5_21  [key=0, style=solid, color=green];
m5_20 -> m5_34  [key=2, style=dotted, color=green];
m5_20 -> m5_35  [key=2, style=dotted, color=green];
m5_20 -> m5_36  [key=2, style=dotted, color=green];
m5_20 -> m5_37  [key=2, style=dotted, color=green];
m5_20 -> m5_50  [key=1, style=dashed, color=green, label="lambda expression"];
m5_20 -> m5_25  [key=1, style=dashed, color=green, label=taken];
m5_20 -> m5_28  [key=1, style=dashed, color=green, label=taken];
m5_20 -> m5_29  [key=1, style=dashed, color=green, label=taken];
m5_19 -> m5_20  [key=0, style=solid, color=green];
m5_19 -> m5_33  [key=2, style=dotted];
m5_19 -> m5_22  [key=1, style=dashed, color=darkseagreen4, label=pt];
m5_19 -> m5_25  [key=1, style=dashed, color=darkseagreen4, label=pt];
m5_19 -> m5_26  [key=1, style=dashed, color=darkseagreen4, label=pt];
m5_19 -> m5_28  [key=1, style=dashed, color=darkseagreen4, label=pt];
m5_19 -> m5_58  [key=1, style=dashed, color=darkseagreen4, label=pt];
m5_21 -> m5_22  [key=0, style=solid];
m5_21 -> m5_24  [key=0, style=solid];
m5_21 -> m5_32  [key=2, style=dotted];
m5_25 -> m5_35  [key=2, style=dotted];
m5_25 -> m5_26  [key=0, style=solid];
m5_25 -> m5_28  [key=0, style=solid];
m5_25 -> m5_43  [key=2, style=dotted];
m5_25 -> m5_44  [key=2, style=dotted];
m5_25 -> m5_40  [key=2, style=dotted];
m5_25 -> m5_45  [key=2, style=dotted];
m5_28 -> m5_36  [key=2, style=dotted];
m5_28 -> m5_29  [key=0, style=solid];
m5_28 -> m5_48  [key=2, style=dotted];
m5_28 -> m5_49  [key=2, style=dotted];
m5_28 -> m5_47  [key=2, style=dotted];
m5_28 -> m5_39  [key=2, style=dotted];
m5_28 -> m5_57  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_29 -> m5_4  [key=2, style=dotted];
m5_29 -> m5_35  [key=2, style=dotted];
m5_29 -> m5_30  [key=0, style=solid];
m5_29 -> m5_31  [key=0, style=solid];
m5_29 -> m5_40  [key=2, style=dotted];
m5_17 -> m5_19  [key=0, style=solid];
m5_17 -> m5_18  [key=0, style=solid];
m5_17 -> m5_32  [key=2, style=dotted];
m5_18 -> m5_19  [key=0, style=solid];
m5_22 -> m5_23  [key=0, style=solid];
m5_22 -> m5_38  [key=2, style=dotted];
m5_22 -> m5_39  [key=2, style=dotted];
m5_23 -> m5_24  [key=0, style=solid];
m5_26 -> m5_27  [key=0, style=solid];
m5_26 -> n78  [key=2, style=dotted];
m5_26 -> m5_47  [key=2, style=dotted];
m5_26 -> m5_39  [key=2, style=dotted];
m5_27 -> m5_28  [key=0, style=solid];
m5_30 -> m5_29  [key=0, style=solid];
m5_24 -> m5_25  [key=0, style=solid];
m5_24 -> m5_40  [key=2, style=dotted];
m5_24 -> m5_41  [key=2, style=dotted];
m5_24 -> m5_42  [key=2, style=dotted];
m5_24 -> m5_53  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_31 -> m5_4  [key=0, style=bold, color=blue];
m5_14 -> m5_15  [key=0, style=solid];
m5_50 -> m5_51  [key=0, style=solid, color=green];
m5_51 -> m5_52  [key=0, style=solid, color=green];
m5_52 -> m5_50  [key=0, style=bold, color=blue];
m5_58 -> m5_59  [key=0, style=solid];
m5_58 -> m5_47  [key=2, style=dotted];
m5_58 -> m5_60  [key=2, style=dotted];
m5_58 -> m5_61  [key=2, style=dotted];
m5_58 -> m5_39  [key=2, style=dotted];
m5_57 -> m5_58  [key=0, style=solid];
m5_53 -> m5_54  [key=0, style=solid];
m5_59 -> m5_57  [key=0, style=bold, color=blue];
m5_8 -> m5_9  [key=0, style=solid];
m5_11 -> m5_12  [key=0, style=solid];
m5_55 -> m5_53  [key=0, style=bold, color=blue];
m5_54 -> m5_55  [key=0, style=solid];
m5_54 -> m5_56  [key=2, style=dotted];
m5_10 -> m5_8  [key=0, style=bold, color=blue];
m5_9 -> m5_10  [key=0, style=solid];
m5_13 -> m5_11  [key=0, style=bold, color=blue];
m5_12 -> m5_13  [key=0, style=solid];
m5_15 -> m5_16  [key=0, style=solid];
m5_16 -> m5_14  [key=0, style=bold, color=blue];
m5_72 -> m5_73  [key=0, style=solid];
m5_73 -> m5_43  [key=2, style=dotted];
m5_73 -> m5_47  [key=2, style=dotted];
m5_73 -> n78  [key=2, style=dotted];
m5_73 -> m5_61  [key=2, style=dotted];
m5_73 -> m5_74  [key=0, style=solid];
m5_74 -> m5_72  [key=0, style=bold, color=blue];
m5_62 -> m5_67  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m5_62 -> m5_68  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m5_62 -> m5_63  [key=0, style=solid];
m5_67 -> m5_43  [key=2, style=dotted];
m5_67 -> m5_68  [key=0, style=solid];
m5_67 -> m5_69  [key=0, style=solid];
m5_68 -> m5_47  [key=2, style=dotted];
m5_68 -> m5_70  [key=0, style=solid];
m5_68 -> m5_71  [key=2, style=dotted];
m5_65 -> m5_47  [key=2, style=dotted];
m5_65 -> m5_70  [key=0, style=solid];
m5_69 -> m5_61  [key=2, style=dotted];
m5_69 -> m5_70  [key=0, style=solid];
m5_66 -> m5_67  [key=0, style=solid];
m5_64 -> m5_65  [key=0, style=solid];
m5_63 -> m5_66  [key=0, style=solid];
m5_63 -> m5_64  [key=0, style=solid];
m5_70 -> m5_62  [key=0, style=bold, color=blue];
m5_75 -> m5_58  [key=1, style=dashed, color=darkseagreen4, label=pt];
}
