digraph  {
m2_0 [label="Entry Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", span="7-7", cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", file="HelpTextTests.cs"];
m2_7 [label="return resourceKey + PaucalPostfix;", span="18-18", cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", color=green, community=0, file="HelpTextTests.cs"];
m2_6 [label="mod10 > 1 && mod10 < 5", span="17-17", cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", file="HelpTextTests.cs"];
m2_1 [label="var mod100 = number%100", span="9-9", cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", file="HelpTextTests.cs"];
m2_3 [label="var mod10 = number%10", span="12-12", cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", file="HelpTextTests.cs"];
m2_5 [label="return resourceKey + SingularPostfix;", span="15-15", cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", file="HelpTextTests.cs"];
m2_8 [label="return resourceKey;", span="21-21", cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", file="HelpTextTests.cs"];
m2_4 [label="mod10 == 1", span="14-14", cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", file="HelpTextTests.cs"];
m2_2 [label="mod100/10 != 1", span="10-10", cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", file="HelpTextTests.cs"];
m2_9 [label="Exit Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", span="7-7", cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", file="HelpTextTests.cs"];
m3_33 [label="Entry System.Type.GetVerbSpecification()", span="27-27", cluster="System.Type.GetVerbSpecification()", file="InstanceBuilder.cs"];
m3_41 [label="Entry System.Text.StringBuilder.Append(char)", span="0-0", cluster="System.Text.StringBuilder.Append(char)", file="InstanceBuilder.cs"];
m3_118 [label="Entry Unk.doubQt", span="", cluster="Unk.doubQt", file="InstanceBuilder.cs"];
m3_143 [label="Entry CommandLine.Infrastructure.FSharpOptionHelper.IsSome(object)", span="38-38", cluster="CommandLine.Infrastructure.FSharpOptionHelper.IsSome(object)", file="InstanceBuilder.cs"];
m3_120 [label="Entry CommandLine.UnParserExtensions.SeperatorOrSpace(CommandLine.Core.Specification)", span="165-165", cluster="CommandLine.UnParserExtensions.SeperatorOrSpace(CommandLine.Core.Specification)", file="InstanceBuilder.cs"];
m3_121 [label="return (spec as OptionSpecification).ToMaybe()\r\n                .Return(o => o.Separator != '\0' ? o.Separator : ' ', ' ');", span="167-168", cluster="CommandLine.UnParserExtensions.SeperatorOrSpace(CommandLine.Core.Specification)", file="InstanceBuilder.cs"];
m3_122 [label="Exit CommandLine.UnParserExtensions.SeperatorOrSpace(CommandLine.Core.Specification)", span="165-165", cluster="CommandLine.UnParserExtensions.SeperatorOrSpace(CommandLine.Core.Specification)", file="InstanceBuilder.cs"];
m3_82 [label="Entry CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", span="133-133", cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="InstanceBuilder.cs"];
m3_92 [label="builder.Append(format(e.Current)).Append(sep)", span="147-147", cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="InstanceBuilder.cs"];
m3_94 [label="return builder.ToString();", span="151-151", cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="InstanceBuilder.cs"];
m3_83 [label="var builder = new StringBuilder()", span="135-135", cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="InstanceBuilder.cs"];
m3_88 [label="var sep = spec.SeperatorOrSpace()", span="142-142", cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="InstanceBuilder.cs"];
m3_90 [label="var e = ((IEnumerable)value).GetEnumerator()", span="145-145", cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="InstanceBuilder.cs"];
m3_89 [label="Func<object, object> format = v\r\n                        => sep == ' ' ? FormatWithQuotesIfString(v) : v", span="143-144", cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="InstanceBuilder.cs"];
m3_91 [label="e.MoveNext()", span="146-146", cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="InstanceBuilder.cs"];
m3_86 [label="builder.Append(FormatWithQuotesIfString(value))", span="139-139", cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="InstanceBuilder.cs"];
m3_93 [label="builder.TrimEndIfMatch(' ')", span="148-148", cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="InstanceBuilder.cs"];
m3_84 [label="spec.TargetType", span="136-136", cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="InstanceBuilder.cs"];
m3_87 [label="TargetType.Sequence", span="141-141", cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="InstanceBuilder.cs"];
m3_85 [label="TargetType.Scalar", span="138-138", cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="InstanceBuilder.cs"];
m3_95 [label="Exit CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", span="133-133", cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="InstanceBuilder.cs"];
m3_30 [label="Entry System.Action<T>.Invoke(T)", span="0-0", cluster="System.Action<T>.Invoke(T)", file="InstanceBuilder.cs"];
m3_99 [label="Entry System.Collections.IEnumerable.GetEnumerator()", span="0-0", cluster="System.Collections.IEnumerable.GetEnumerator()", file="InstanceBuilder.cs"];
m3_40 [label="Entry Unk.Any", span="", cluster="Unk.Any", file="InstanceBuilder.cs"];
m3_36 [label="Entry object.IsEmpty()", span="203-203", cluster="object.IsEmpty()", file="InstanceBuilder.cs"];
m3_131 [label="Entry CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification, CommandLine.UnParserSettings)", span="179-179", cluster="CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification, CommandLine.UnParserSettings)", file="InstanceBuilder.cs"];
m3_133 [label="return\r\n                new StringBuilder(longName\r\n                    ? ''--''.JoinTo(optionSpec.LongName)\r\n                    : ''-''.JoinTo(optionSpec.ShortName))\r\n                        .AppendIf(longName && settings.UseEqualToken, ''='', '' '')\r\n                    .ToString();", span="184-189", cluster="CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification, CommandLine.UnParserSettings)", file="InstanceBuilder.cs"];
m3_132 [label="var longName =\r\n                optionSpec.LongName.Length > 0\r\n                && settings.NameStyleFormat == NameStyleFormat.PreferLongName", span="181-183", cluster="CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification, CommandLine.UnParserSettings)", file="InstanceBuilder.cs"];
m3_134 [label="Exit CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification, CommandLine.UnParserSettings)", span="179-179", cluster="CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification, CommandLine.UnParserSettings)", file="InstanceBuilder.cs"];
m3_101 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)", file="InstanceBuilder.cs"];
m3_145 [label="Entry CommandLine.UnParserExtensions.IsEmpty(object)", span="203-203", cluster="CommandLine.UnParserExtensions.IsEmpty(object)", file="InstanceBuilder.cs"];
m3_148 [label="ReflectionHelper.IsFSharpOptionType(value.GetType()) && !FSharpOptionHelper.IsSome(value)", span="206-206", cluster="CommandLine.UnParserExtensions.IsEmpty(object)", file="InstanceBuilder.cs"];
m3_150 [label="value is ValueType && value.Equals(value.GetType().GetDefaultValue())", span="207-207", cluster="CommandLine.UnParserExtensions.IsEmpty(object)", file="InstanceBuilder.cs"];
m3_146 [label="value == null", span="205-205", cluster="CommandLine.UnParserExtensions.IsEmpty(object)", file="InstanceBuilder.cs"];
m3_149 [label="return true;", span="206-206", cluster="CommandLine.UnParserExtensions.IsEmpty(object)", file="InstanceBuilder.cs"];
m3_151 [label="return true;", span="207-207", cluster="CommandLine.UnParserExtensions.IsEmpty(object)", file="InstanceBuilder.cs"];
m3_152 [label="value is string && ((string)value).Length == 0", span="208-208", cluster="CommandLine.UnParserExtensions.IsEmpty(object)", file="InstanceBuilder.cs"];
m3_154 [label="value is IEnumerable && !((IEnumerable)value).GetEnumerator().MoveNext()", span="209-209", cluster="CommandLine.UnParserExtensions.IsEmpty(object)", file="InstanceBuilder.cs"];
m3_147 [label="return true;", span="205-205", cluster="CommandLine.UnParserExtensions.IsEmpty(object)", file="InstanceBuilder.cs"];
m3_153 [label="return true;", span="208-208", cluster="CommandLine.UnParserExtensions.IsEmpty(object)", file="InstanceBuilder.cs"];
m3_155 [label="return true;", span="209-209", cluster="CommandLine.UnParserExtensions.IsEmpty(object)", file="InstanceBuilder.cs"];
m3_156 [label="return false;", span="210-210", cluster="CommandLine.UnParserExtensions.IsEmpty(object)", file="InstanceBuilder.cs"];
m3_157 [label="Exit CommandLine.UnParserExtensions.IsEmpty(object)", span="203-203", cluster="CommandLine.UnParserExtensions.IsEmpty(object)", file="InstanceBuilder.cs"];
m3_38 [label="Entry Unk.Where", span="", cluster="Unk.Where", file="InstanceBuilder.cs"];
m3_136 [label="Entry System.Text.StringBuilder.AppendIf(bool, string, string)", span="34-34", cluster="System.Text.StringBuilder.AppendIf(bool, string, string)", file="InstanceBuilder.cs"];
m3_47 [label="Entry Unk.TrimEndIfMatchWhen", span="", cluster="Unk.TrimEndIfMatchWhen", file="InstanceBuilder.cs"];
m3_114 [label="Entry string.Replace(string, string)", span="0-0", cluster="string.Replace(string, string)", file="InstanceBuilder.cs"];
m3_35 [label="Entry System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", span="16-16", cluster="System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", file="InstanceBuilder.cs"];
m3_67 [label="Entry Unk.Contains", span="", cluster="Unk.Contains", file="InstanceBuilder.cs"];
m3_109 [label="Entry T.ToMaybe<T>()", span="249-249", cluster="T.ToMaybe<T>()", file="InstanceBuilder.cs"];
m3_113 [label="Entry string.Contains(string)", span="0-0", cluster="string.Contains(string)", file="InstanceBuilder.cs"];
m3_31 [label="Entry object.GetType()", span="0-0", cluster="object.GetType()", file="InstanceBuilder.cs"];
m3_110 [label="Entry lambda expression", span="156-157", cluster="lambda expression", file="InstanceBuilder.cs"];
m3_55 [label="Entry lambda expression", span="88-89", cluster="lambda expression", file="InstanceBuilder.cs"];
m3_78 [label="Entry lambda expression", span="127-127", cluster="lambda expression", file="InstanceBuilder.cs"];
m3_79 [label="builder.Append(FormatValue(val.Specification, val.Value)).Append(' ')", span="127-127", cluster="lambda expression", color=green, community=0, file="InstanceBuilder.cs"];
m3_80 [label="Exit lambda expression", span="127-127", cluster="lambda expression", file="InstanceBuilder.cs"];
m3_56 [label="new { Specification = Specification.FromProperty(pi),\r\n                            Value = pi.GetValue(options, null).NormalizeValue(), PropertyValue = pi.GetValue(options, null) }", span="88-89", cluster="lambda expression", file="InstanceBuilder.cs"];
m3_51 [label="Entry lambda expression", span="83-83", cluster="lambda expression", file="InstanceBuilder.cs"];
m3_61 [label="Entry lambda expression", span="94-94", cluster="lambda expression", file="InstanceBuilder.cs"];
m3_57 [label="Exit lambda expression", span="88-89", cluster="lambda expression", file="InstanceBuilder.cs"];
m3_68 [label="Entry lambda expression", span="111-111", cluster="lambda expression", file="InstanceBuilder.cs"];
m3_71 [label="Entry lambda expression", span="118-118", cluster="lambda expression", file="InstanceBuilder.cs"];
m3_75 [label="builder.Append(FormatOption((OptionSpecification)opt.Specification, opt.Value, settings)).Append(' ')", span="123-123", cluster="lambda expression", file="InstanceBuilder.cs"];
m3_74 [label="Entry lambda expression", span="123-123", cluster="lambda expression", file="InstanceBuilder.cs"];
m3_52 [label="builder.Append(verb.Name).Append(' ')", span="83-83", cluster="lambda expression", file="InstanceBuilder.cs"];
m3_53 [label="Exit lambda expression", span="83-83", cluster="lambda expression", file="InstanceBuilder.cs"];
m3_65 [label="!shortSwitches.Contains(info)", span="108-108", cluster="lambda expression", file="InstanceBuilder.cs"];
m3_63 [label="Exit lambda expression", span="94-94", cluster="lambda expression", file="InstanceBuilder.cs"];
m3_62 [label="i.Specification.Tag == SpecificationType.Option", span="94-94", cluster="lambda expression", file="InstanceBuilder.cs"];
m3_64 [label="Entry lambda expression", span="108-108", cluster="lambda expression", file="InstanceBuilder.cs"];
m3_70 [label="Exit lambda expression", span="111-111", cluster="lambda expression", file="InstanceBuilder.cs"];
m3_69 [label="i.Specification.Tag == SpecificationType.Value", span="111-111", cluster="lambda expression", file="InstanceBuilder.cs"];
m3_73 [label="Exit lambda expression", span="118-118", cluster="lambda expression", file="InstanceBuilder.cs"];
m3_72 [label="((OptionSpecification)info.Specification).ShortName", span="118-118", cluster="lambda expression", file="InstanceBuilder.cs"];
m3_76 [label="Exit lambda expression", span="123-123", cluster="lambda expression", file="InstanceBuilder.cs"];
m3_115 [label="Entry lambda expression", span="161-162", cluster="lambda expression", file="InstanceBuilder.cs"];
m3_123 [label="Entry lambda expression", span="168-168", cluster="lambda expression", file="InstanceBuilder.cs"];
m3_66 [label="Exit lambda expression", span="108-108", cluster="lambda expression", file="InstanceBuilder.cs"];
m3_104 [label="sep == ' ' ? FormatWithQuotesIfString(v) : v", span="144-144", cluster="lambda expression", file="InstanceBuilder.cs"];
m3_111 [label="v.Contains(''\'''') ? v.Replace(''\'''', ''\\\'''') : v", span="157-157", cluster="lambda expression", file="InstanceBuilder.cs"];
m3_116 [label="v.Contains(' ') || v.Contains(''\'''')\r\n                    ? ''\''''.JoinTo(doubQt(v), ''\'''') : v", span="161-162", cluster="lambda expression", file="InstanceBuilder.cs"];
m3_117 [label="Exit lambda expression", span="161-162", cluster="lambda expression", file="InstanceBuilder.cs"];
m3_125 [label="Exit lambda expression", span="168-168", cluster="lambda expression", file="InstanceBuilder.cs"];
m3_124 [label="o.Separator != '\0' ? o.Separator : ' '", span="168-168", cluster="lambda expression", file="InstanceBuilder.cs"];
m3_103 [label="Entry lambda expression", span="143-144", cluster="lambda expression", file="InstanceBuilder.cs"];
m3_105 [label="Exit lambda expression", span="143-144", cluster="lambda expression", file="InstanceBuilder.cs"];
m3_112 [label="Exit lambda expression", span="156-157", cluster="lambda expression", file="InstanceBuilder.cs"];
m3_130 [label="Entry System.Text.StringBuilder.AppendWhen(bool, params string[])", span="9-9", cluster="System.Text.StringBuilder.AppendWhen(bool, params string[])", file="InstanceBuilder.cs"];
m3_50 [label="Entry string.TrimEnd(params char[])", span="0-0", cluster="string.TrimEnd(params char[])", file="InstanceBuilder.cs"];
m3_102 [label="Entry System.Text.StringBuilder.TrimEndIfMatch(char)", span="85-85", cluster="System.Text.StringBuilder.TrimEndIfMatch(char)", file="InstanceBuilder.cs"];
m3_142 [label="Entry CommandLine.Infrastructure.ReflectionHelper.IsFSharpOptionType(System.Type)", span="35-35", cluster="CommandLine.Infrastructure.ReflectionHelper.IsFSharpOptionType(System.Type)", file="InstanceBuilder.cs"];
m3_46 [label="Entry System.Text.StringBuilder.TrailingSpaces()", span="101-101", cluster="System.Text.StringBuilder.TrailingSpaces()", file="InstanceBuilder.cs"];
m3_54 [label="Entry Unk.Append", span="", cluster="Unk.Append", file="InstanceBuilder.cs"];
m3_42 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="InstanceBuilder.cs"];
m3_158 [label="Entry System.Type.GetDefaultValue()", span="119-119", cluster="System.Type.GetDefaultValue()", file="InstanceBuilder.cs"];
m3_81 [label="Entry Unk.FormatValue", span="", cluster="Unk.FormatValue", file="InstanceBuilder.cs"];
m3_37 [label="Entry Unk.Memorize", span="", cluster="Unk.Memorize", file="InstanceBuilder.cs"];
m3_77 [label="Entry Unk.FormatOption", span="", cluster="Unk.FormatOption", file="InstanceBuilder.cs"];
m3_39 [label="Entry Unk.UniqueName", span="", cluster="Unk.UniqueName", file="InstanceBuilder.cs"];
m3_144 [label="Entry CommandLine.Infrastructure.FSharpOptionHelper.ValueOf(object)", span="30-30", cluster="CommandLine.Infrastructure.FSharpOptionHelper.ValueOf(object)", file="InstanceBuilder.cs"];
m3_119 [label="Entry string.JoinTo(params string[])", span="45-45", cluster="string.JoinTo(params string[])", file="InstanceBuilder.cs"];
m3_60 [label="Entry object.NormalizeValue()", span="192-192", cluster="object.NormalizeValue()", file="InstanceBuilder.cs"];
m3_34 [label="Entry Unk.Return", span="", cluster="Unk.Return", file="InstanceBuilder.cs"];
m3_49 [label="Entry System.Text.StringBuilder.ToString()", span="0-0", cluster="System.Text.StringBuilder.ToString()", file="InstanceBuilder.cs"];
m3_129 [label="Entry CommandLine.Core.OptionSpecification.FormatName(CommandLine.UnParserSettings)", span="179-179", cluster="CommandLine.Core.OptionSpecification.FormatName(CommandLine.UnParserSettings)", file="InstanceBuilder.cs"];
m3_45 [label="Entry System.Text.StringBuilder.Append(string)", span="0-0", cluster="System.Text.StringBuilder.Append(string)", file="InstanceBuilder.cs"];
m3_98 [label="Entry CommandLine.Core.Specification.SeperatorOrSpace()", span="165-165", cluster="CommandLine.Core.Specification.SeperatorOrSpace()", file="InstanceBuilder.cs"];
m3_96 [label="Entry CommandLine.UnParserExtensions.FormatWithQuotesIfString(object)", span="154-154", cluster="CommandLine.UnParserExtensions.FormatWithQuotesIfString(object)", file="InstanceBuilder.cs"];
m3_107 [label="return (value as string)\r\n                .ToMaybe()\r\n                .Return(v => v.Contains(' ') || v.Contains(''\'''')\r\n                    ? ''\''''.JoinTo(doubQt(v), ''\'''') : v, value);", span="159-162", cluster="CommandLine.UnParserExtensions.FormatWithQuotesIfString(object)", file="InstanceBuilder.cs"];
m3_106 [label="Func<string, string> doubQt = v\r\n                => v.Contains(''\'''') ? v.Replace(''\'''', ''\\\'''') : v", span="156-157", cluster="CommandLine.UnParserExtensions.FormatWithQuotesIfString(object)", file="InstanceBuilder.cs"];
m3_108 [label="Exit CommandLine.UnParserExtensions.FormatWithQuotesIfString(object)", span="154-154", cluster="CommandLine.UnParserExtensions.FormatWithQuotesIfString(object)", file="InstanceBuilder.cs"];
m3_48 [label="Entry Unk.ForEach", span="", cluster="Unk.ForEach", file="InstanceBuilder.cs"];
m3_97 [label="Entry System.Text.StringBuilder.Append(object)", span="0-0", cluster="System.Text.StringBuilder.Append(object)", file="InstanceBuilder.cs"];
m3_44 [label="Entry Unk.Join", span="", cluster="Unk.Join", file="InstanceBuilder.cs"];
m3_135 [label="Entry System.Text.StringBuilder.StringBuilder(string)", span="0-0", cluster="System.Text.StringBuilder.StringBuilder(string)", file="InstanceBuilder.cs"];
m3_32 [label="Entry System.Text.StringBuilder.StringBuilder()", span="0-0", cluster="System.Text.StringBuilder.StringBuilder()", file="InstanceBuilder.cs"];
m3_29 [label="Entry CommandLine.UnParserSettings.UnParserSettings()", span="18-18", cluster="CommandLine.UnParserSettings.UnParserSettings()", file="InstanceBuilder.cs"];
m3_159 [label="Entry object.Equals(object)", span="0-0", cluster="object.Equals(object)", file="InstanceBuilder.cs"];
m3_100 [label="Entry System.Collections.IEnumerator.MoveNext()", span="0-0", cluster="System.Collections.IEnumerator.MoveNext()", file="InstanceBuilder.cs"];
m3_7 [label="Entry CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", span="71-71", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", file="InstanceBuilder.cs"];
m3_16 [label="var specs =\r\n                (from info in\r\n                    type.GetSpecifications(\r\n                        pi => new { Specification = Specification.FromProperty(pi),\r\n                            Value = pi.GetValue(options, null).NormalizeValue(), PropertyValue = pi.GetValue(options, null) })\r\n                where !info.PropertyValue.IsEmpty()\r\n                select info)\r\n                    .Memorize()", span="85-92", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", color=green, community=0, file="InstanceBuilder.cs"];
m3_13 [label="var type = options.GetType()", span="79-79", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", file="InstanceBuilder.cs"];
m3_15 [label="type.GetVerbSpecification()\r\n                .Return(verb => builder.Append(verb.Name).Append(' '), builder)", span="82-83", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", file="InstanceBuilder.cs"];
m3_17 [label="var allOptSpecs = from info in specs.Where(i => i.Specification.Tag == SpecificationType.Option)\r\n                let o = (OptionSpecification)info.Specification\r\n                where o.TargetType != TargetType.Switch || (o.TargetType == TargetType.Switch && ((bool)info.Value))\r\n                orderby o.UniqueName()\r\n                select info", span="94-98", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", file="InstanceBuilder.cs"];
m3_20 [label="var valSpecs = from info in specs.Where(i => i.Specification.Tag == SpecificationType.Value)\r\n                let v = (ValueSpecification)info.Specification\r\n                orderby v.Index\r\n                select info", span="111-114", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", file="InstanceBuilder.cs"];
m3_24 [label="builder\r\n                .TrimEndIfMatchWhen(!valSpecs.Any() || builder.TrailingSpaces() > 1, ' ')", span="124-125", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", color=green, community=0, file="InstanceBuilder.cs"];
m3_21 [label="builder = settings.GroupSwitches && shortSwitches.Any()\r\n                ? builder.Append('-').Append(string.Join(string.Empty, shortSwitches.Select(\r\n                    info => ((OptionSpecification)info.Specification).ShortName).ToArray())).Append(' ')\r\n                : builder", span="116-119", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", file="InstanceBuilder.cs"];
m3_23 [label="optSpecs.ForEach(\r\n                opt => builder.Append(FormatOption((OptionSpecification)opt.Specification, opt.Value, settings)).Append(' '))", span="122-123", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", file="InstanceBuilder.cs"];
m3_25 [label="valSpecs.ForEach(\r\n                val => builder.Append(FormatValue(val.Specification, val.Value)).Append(' '))", span="126-127", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", color=green, community=0, file="InstanceBuilder.cs"];
m3_26 [label="return builder\r\n                .ToString().TrimEnd(' ');", span="129-130", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", file="InstanceBuilder.cs"];
m3_8 [label="options == null", span="73-73", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", file="InstanceBuilder.cs"];
m3_11 [label="configuration(settings)", span="76-76", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", file="InstanceBuilder.cs"];
m3_12 [label="settings.Consumed = true", span="77-77", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", file="InstanceBuilder.cs"];
m3_14 [label="var builder = new StringBuilder()", span="80-80", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", file="InstanceBuilder.cs"];
m3_18 [label="var shortSwitches = from info in allOptSpecs\r\n                let o = (OptionSpecification)info.Specification\r\n                where o.TargetType == TargetType.Switch\r\n                where o.ShortName.Length > 0\r\n                orderby o.UniqueName()\r\n                select info", span="100-105", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", file="InstanceBuilder.cs"];
m3_19 [label="var optSpecs = settings.GroupSwitches\r\n                ? allOptSpecs.Where(info => !shortSwitches.Contains(info))\r\n                : allOptSpecs", span="107-109", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", file="InstanceBuilder.cs"];
m3_10 [label="var settings = new UnParserSettings()", span="75-75", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", file="InstanceBuilder.cs"];
m3_22 [label="builder\r\n                .TrimEndIfMatchWhen(!optSpecs.Any() || builder.TrailingSpaces() > 1, ' ')", span="120-121", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", file="InstanceBuilder.cs"];
m3_9 [label="throw new ArgumentNullException(''options'');", span="73-73", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", file="InstanceBuilder.cs"];
m3_27 [label="Exit CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", span="71-71", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", file="InstanceBuilder.cs"];
m3_43 [label="Entry Unk.ToArray", span="", cluster="Unk.ToArray", file="InstanceBuilder.cs"];
m3_126 [label="Entry CommandLine.UnParserExtensions.FormatOption(CommandLine.Core.OptionSpecification, object, CommandLine.UnParserSettings)", span="171-171", cluster="CommandLine.UnParserExtensions.FormatOption(CommandLine.Core.OptionSpecification, object, CommandLine.UnParserSettings)", file="InstanceBuilder.cs"];
m3_127 [label="return new StringBuilder()\r\n                    .Append(spec.FormatName(settings))\r\n                    .AppendWhen(spec.TargetType != TargetType.Switch, FormatValue(spec, value))\r\n                .ToString();", span="173-176", cluster="CommandLine.UnParserExtensions.FormatOption(CommandLine.Core.OptionSpecification, object, CommandLine.UnParserSettings)", file="InstanceBuilder.cs"];
m3_128 [label="Exit CommandLine.UnParserExtensions.FormatOption(CommandLine.Core.OptionSpecification, object, CommandLine.UnParserSettings)", span="171-171", cluster="CommandLine.UnParserExtensions.FormatOption(CommandLine.Core.OptionSpecification, object, CommandLine.UnParserSettings)", file="InstanceBuilder.cs"];
m3_58 [label="Entry CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="105-105", cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="InstanceBuilder.cs"];
m3_28 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="InstanceBuilder.cs"];
m3_59 [label="Entry System.Reflection.PropertyInfo.GetValue(object, object[])", span="0-0", cluster="System.Reflection.PropertyInfo.GetValue(object, object[])", file="InstanceBuilder.cs"];
m3_137 [label="Entry CommandLine.UnParserExtensions.NormalizeValue(object)", span="192-192", cluster="CommandLine.UnParserExtensions.NormalizeValue(object)", file="InstanceBuilder.cs"];
m3_138 [label="value != null\r\n                && ReflectionHelper.IsFSharpOptionType(value.GetType())\r\n                && FSharpOptionHelper.IsSome(value)", span="194-196", cluster="CommandLine.UnParserExtensions.NormalizeValue(object)", file="InstanceBuilder.cs"];
m3_139 [label="return FSharpOptionHelper.ValueOf(value);", span="198-198", cluster="CommandLine.UnParserExtensions.NormalizeValue(object)", file="InstanceBuilder.cs"];
m3_140 [label="return value;", span="200-200", cluster="CommandLine.UnParserExtensions.NormalizeValue(object)", file="InstanceBuilder.cs"];
m3_141 [label="Exit CommandLine.UnParserExtensions.NormalizeValue(object)", span="192-192", cluster="CommandLine.UnParserExtensions.NormalizeValue(object)", file="InstanceBuilder.cs"];
m3_160 [label=builder, span="", file="InstanceBuilder.cs"];
m3_161 [label=T, span="", file="InstanceBuilder.cs"];
m3_163 [label=settings, span="", file="InstanceBuilder.cs"];
m3_162 [label=shortSwitches, span="", file="InstanceBuilder.cs"];
m3_164 [label=sep, span="", file="InstanceBuilder.cs"];
m3_165 [label=doubQt, span="", file="InstanceBuilder.cs"];
m4_12 [label="Entry Unk.Be", span="", cluster="Unk.Be", file="InstanceChooser.cs"];
m4_10 [label="Entry CommandLine.Tests.Unit.BaseFixture.ElementsShouldBeEqual(string[], System.Collections.Generic.IList<string>)", span="47-47", cluster="CommandLine.Tests.Unit.BaseFixture.ElementsShouldBeEqual(string[], System.Collections.Generic.IList<string>)", file="InstanceChooser.cs"];
m4_7 [label="Entry CommandLine.Infrastructure.StringArrayEnumerator.StringArrayEnumerator(string[])", span="36-36", cluster="CommandLine.Infrastructure.StringArrayEnumerator.StringArrayEnumerator(string[])", file="InstanceChooser.cs"];
m4_0 [label="Entry CommandLine.Tests.Unit.Infrastructure.ArgumentParserFixture.Get_next_input_values()", span="41-41", cluster="CommandLine.Tests.Unit.Infrastructure.ArgumentParserFixture.Get_next_input_values()", file="InstanceChooser.cs"];
m4_1 [label="var ae = new StringArrayEnumerator(new string[] { ''--optarr'', ''one'', ''two'', ''--plain'', ''3'' })", span="43-43", cluster="CommandLine.Tests.Unit.Infrastructure.ArgumentParserFixture.Get_next_input_values()", file="InstanceChooser.cs"];
m4_2 [label="ae.MoveNext()", span="45-45", cluster="CommandLine.Tests.Unit.Infrastructure.ArgumentParserFixture.Get_next_input_values()", file="InstanceChooser.cs"];
m4_3 [label="var items = ArgumentParser.InternalWrapperOfGetNextInputValues(ae)", span="47-47", cluster="CommandLine.Tests.Unit.Infrastructure.ArgumentParserFixture.Get_next_input_values()", file="InstanceChooser.cs"];
m4_5 [label="ae.Current.Should().Be(''two'')", span="50-50", cluster="CommandLine.Tests.Unit.Infrastructure.ArgumentParserFixture.Get_next_input_values()", file="InstanceChooser.cs"];
m4_4 [label="base.ElementsShouldBeEqual(new string[] { ''one'', ''two'' }, items)", span="49-49", cluster="CommandLine.Tests.Unit.Infrastructure.ArgumentParserFixture.Get_next_input_values()", file="InstanceChooser.cs"];
m4_6 [label="Exit CommandLine.Tests.Unit.Infrastructure.ArgumentParserFixture.Get_next_input_values()", span="41-41", cluster="CommandLine.Tests.Unit.Infrastructure.ArgumentParserFixture.Get_next_input_values()", file="InstanceChooser.cs"];
m4_8 [label="Entry CommandLine.Infrastructure.StringArrayEnumerator.MoveNext()", span="91-91", cluster="CommandLine.Infrastructure.StringArrayEnumerator.MoveNext()", file="InstanceChooser.cs"];
m4_11 [label="Entry Unk.Should", span="", cluster="Unk.Should", file="InstanceChooser.cs"];
m4_9 [label="Entry CommandLine.Infrastructure.ArgumentParser.InternalWrapperOfGetNextInputValues(CommandLine.Infrastructure.IArgumentEnumerator)", span="106-106", cluster="CommandLine.Infrastructure.ArgumentParser.InternalWrapperOfGetNextInputValues(CommandLine.Infrastructure.IArgumentEnumerator)", file="InstanceChooser.cs"];
m4_13 [label="CommandLine.Tests.Unit.Infrastructure.ArgumentParserFixture", span="", file="InstanceChooser.cs"];
m6_2 [label="Entry CommandLine.BadOptionInfo.BadOptionInfo(char?, string)", span="40-40", cluster="CommandLine.BadOptionInfo.BadOptionInfo(char?, string)", file="OptionMapperTests.cs"];
m6_3 [label="ShortName = shortName", span="42-42", cluster="CommandLine.BadOptionInfo.BadOptionInfo(char?, string)", file="OptionMapperTests.cs"];
m6_4 [label="LongName = longName", span="43-43", cluster="CommandLine.BadOptionInfo.BadOptionInfo(char?, string)", file="OptionMapperTests.cs"];
m6_5 [label="Exit CommandLine.BadOptionInfo.BadOptionInfo(char?, string)", span="40-40", cluster="CommandLine.BadOptionInfo.BadOptionInfo(char?, string)", file="OptionMapperTests.cs"];
m6_0 [label="Entry CommandLine.BadOptionInfo.BadOptionInfo()", span="36-36", cluster="CommandLine.BadOptionInfo.BadOptionInfo()", file="OptionMapperTests.cs"];
m6_1 [label="Exit CommandLine.BadOptionInfo.BadOptionInfo()", span="36-36", cluster="CommandLine.BadOptionInfo.BadOptionInfo()", file="OptionMapperTests.cs"];
m6_6 [label="CommandLine.BadOptionInfo", span="", file="OptionMapperTests.cs"];
m7_63 [label="Entry System.Text.StringBuilder.AppendIf(bool, string, string)", span="42-42", cluster="System.Text.StringBuilder.AppendIf(bool, string, string)", file="Parser.cs"];
m7_62 [label="Entry string.Substring(int, int)", span="0-0", cluster="string.Substring(int, int)", file="Parser.cs"];
m7_64 [label="Entry System.Text.StringBuilder.Append(char)", span="0-0", cluster="System.Text.StringBuilder.Append(char)", file="Parser.cs"];
m7_49 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="Parser.cs"];
m7_51 [label="Entry Unk.Join", span="", cluster="Unk.Join", file="Parser.cs"];
m7_59 [label="Entry System.Text.StringBuilder.StringBuilder(string)", span="0-0", cluster="System.Text.StringBuilder.StringBuilder(string)", file="Parser.cs"];
m7_16 [label="Entry lambda expression", span="95-129", cluster="lambda expression", file="Parser.cs"];
m7_44 [label="var msgs = bySet.Select(\r\n                            set =>\r\n                            {\r\n                                var names = string.Join(\r\n                                    string.Empty,\r\n                                    (from e in set.Errors select ''''' + e.NameInfo.NameText + ''', '').ToArray());\r\n                                var namesCount = set.Errors.Count();\r\n\r\n                                var incompat = string.Join(\r\n                                    string.Empty,\r\n                                    (from e in set.Errors\r\n                                        where !e.SetName.Equals(set.SetName)\r\n                                        select ''''' + e.NameInfo.NameText + ''', '').ToArray());\r\n                                return\r\n                                    new StringBuilder(''Option'').AppendWhen(namesCount > 1, ''s'')\r\n                                        .Append('': '')\r\n                                        .Append(names.Substring(0, names.Length - 3))\r\n                                        .AppendIf(namesCount > 1, ''are'', ''is'')\r\n                                        .Append('' not compatible with: '')\r\n                                        .Append(incompat.Substring(0, incompat.Length - 3))\r\n                                        .Append('.')\r\n                                        .ToString();\r\n                            }).ToArray()", span="145-167", cluster="lambda expression", color=green, community=0, file="Parser.cs"];
m7_41 [label="var bySet = from e in errors\r\n                                group e by e.SetName into g\r\n                                select new { SetName = g.Key, Errors = g.ToList() }", span="139-141", cluster="lambda expression", file="Parser.cs"];
m7_42 [label="bySet.Count() < 2", span="143-143", cluster="lambda expression", file="Parser.cs"];
m7_45 [label="return string.Join(Environment.NewLine, msgs);", span="168-168", cluster="lambda expression", file="Parser.cs"];
m7_52 [label="Entry lambda expression", span="146-167", cluster="lambda expression", file="Parser.cs"];
m7_40 [label="Entry lambda expression", span="137-169", cluster="lambda expression", file="Parser.cs"];
m7_43 [label="throw new InvalidOperationException();", span="143-143", cluster="lambda expression", file="Parser.cs"];
m7_46 [label="Exit lambda expression", span="137-169", cluster="lambda expression", file="Parser.cs"];
m7_53 [label="var names = string.Join(\r\n                                    string.Empty,\r\n                                    (from e in set.Errors select ''''' + e.NameInfo.NameText + ''', '').ToArray())", span="148-150", cluster="lambda expression", file="Parser.cs"];
m7_55 [label="var incompat = string.Join(\r\n                                    string.Empty,\r\n                                    (from e in set.Errors\r\n                                        where !e.SetName.Equals(set.SetName)\r\n                                        select ''''' + e.NameInfo.NameText + ''', '').ToArray())", span="153-157", cluster="lambda expression", file="Parser.cs"];
m7_57 [label="Exit lambda expression", span="146-167", cluster="lambda expression", file="Parser.cs"];
m7_54 [label="var namesCount = set.Errors.Count()", span="151-151", cluster="lambda expression", file="Parser.cs"];
m7_56 [label="return\r\n                                    new StringBuilder(''Option'').AppendWhen(namesCount > 1, ''s'')\r\n                                        .Append('': '')\r\n                                        .Append(names.Substring(0, names.Length - 3))\r\n                                        .AppendIf(namesCount > 1, ''are'', ''is'')\r\n                                        .Append('' not compatible with: '')\r\n                                        .Append(incompat.Substring(0, incompat.Length - 3))\r\n                                        .Append('.')\r\n                                        .ToString();", span="158-166", cluster="lambda expression", file="Parser.cs"];
m7_17 [label="error.Tag", span="97-97", cluster="lambda expression", file="Parser.cs"];
m7_19 [label="return ''Token ''' + ((BadFormatTokenError)error).Token + ''' is not recognized.'';", span="100-100", cluster="lambda expression", file="Parser.cs"];
m7_21 [label="return ''Option ''' + ((MissingValueOptionError)error).NameInfo.NameText\r\n                                                      + ''' has no value.'';", span="102-103", cluster="lambda expression", file="Parser.cs"];
m7_23 [label="return ''Option ''' + ((UnknownOptionError)error).Token + ''' is unknown.'';", span="105-105", cluster="lambda expression", file="Parser.cs"];
m7_25 [label="var errMisssing = ((MissingRequiredOptionError)error)", span="107-107", cluster="lambda expression", file="Parser.cs"];
m7_28 [label="var badFormat = ((BadFormatConversionError)error)", span="114-114", cluster="lambda expression", file="Parser.cs"];
m7_31 [label="var seqOutRange = ((SequenceOutOfRangeError)error)", span="119-119", cluster="lambda expression", file="Parser.cs"];
m7_34 [label="return ''Verb ''' + ((BadVerbSelectedError)error).Token + ''' is not recognized.'';", span="124-124", cluster="lambda expression", file="Parser.cs"];
m7_38 [label="throw new InvalidOperationException();", span="128-128", cluster="lambda expression", file="Parser.cs"];
m7_26 [label="return errMisssing.NameInfo == NameInfo.EmptyName\r\n                                               ? ''A required value not bound to option name is missing.''\r\n                                               : ''Required option ''' + errMisssing.NameInfo.NameText + ''' is missing.'';", span="108-110", cluster="lambda expression", file="Parser.cs"];
m7_29 [label="return badFormat.NameInfo == NameInfo.EmptyName\r\n                                               ? ''A value not bound to option name is defined with a bad format.''\r\n                                               : ''Option ''' + badFormat.NameInfo.NameText + ''' is defined with a bad format.'';", span="115-117", cluster="lambda expression", file="Parser.cs"];
m7_32 [label="return seqOutRange.NameInfo == NameInfo.EmptyName\r\n                                               ? ''A sequence value not bound to option name is defined with few items than required.''\r\n                                               : ''A sequence option ''' + seqOutRange.NameInfo.NameText + ''' is defined with few items than required.'';", span="120-122", cluster="lambda expression", file="Parser.cs"];
m7_36 [label="return ''No verb selected.'';", span="126-126", cluster="lambda expression", file="Parser.cs"];
m7_18 [label="ErrorType.BadFormatTokenError", span="99-99", cluster="lambda expression", file="Parser.cs"];
m7_20 [label="ErrorType.MissingValueOptionError", span="101-101", cluster="lambda expression", file="Parser.cs"];
m7_22 [label="ErrorType.UnknownOptionError", span="104-104", cluster="lambda expression", file="Parser.cs"];
m7_24 [label="ErrorType.MissingRequiredOptionError", span="106-106", cluster="lambda expression", file="Parser.cs"];
m7_27 [label="ErrorType.BadFormatConversionError", span="113-113", cluster="lambda expression", file="Parser.cs"];
m7_30 [label="ErrorType.SequenceOutOfRangeError", span="118-118", cluster="lambda expression", file="Parser.cs"];
m7_33 [label="ErrorType.BadVerbSelectedError", span="123-123", cluster="lambda expression", file="Parser.cs"];
m7_35 [label="ErrorType.NoVerbSelectedError", span="125-125", cluster="lambda expression", file="Parser.cs"];
m7_37 [label="Exit lambda expression", span="95-129", cluster="lambda expression", file="Parser.cs"];
m7_50 [label="Entry Unk.ToArray", span="", cluster="Unk.ToArray", file="Parser.cs"];
m7_60 [label="Entry System.Text.StringBuilder.AppendWhen(bool, params string[])", span="9-9", cluster="System.Text.StringBuilder.AppendWhen(bool, params string[])", file="Parser.cs"];
m7_48 [label="Entry Unk.Count", span="", cluster="Unk.Count", file="Parser.cs"];
m7_47 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", file="Parser.cs"];
m7_61 [label="Entry System.Text.StringBuilder.Append(string)", span="0-0", cluster="System.Text.StringBuilder.Append(string)", file="Parser.cs"];
m7_65 [label="Entry System.Text.StringBuilder.ToString()", span="0-0", cluster="System.Text.StringBuilder.ToString()", file="Parser.cs"];
m7_58 [label="Entry Unk.Equals", span="", cluster="Unk.Equals", file="Parser.cs"];
m7_39 [label="Entry System.InvalidOperationException.InvalidOperationException()", span="0-0", cluster="System.InvalidOperationException.InvalidOperationException()", file="Parser.cs"];
m11_0 [label="Entry CommandLine.Helpers.PopsicleSetter.Set<T>(bool, ref T, T)", span="6-6", cluster="CommandLine.Helpers.PopsicleSetter.Set<T>(bool, ref T, T)", file="StringBuilderExtensions.cs"];
m11_1 [label=consumed, span="8-8", cluster="CommandLine.Helpers.PopsicleSetter.Set<T>(bool, ref T, T)", file="StringBuilderExtensions.cs"];
m11_3 [label="field = value", span="12-12", cluster="CommandLine.Helpers.PopsicleSetter.Set<T>(bool, ref T, T)", file="StringBuilderExtensions.cs"];
m11_2 [label="throw new InvalidOperationException();", span="10-10", cluster="CommandLine.Helpers.PopsicleSetter.Set<T>(bool, ref T, T)", file="StringBuilderExtensions.cs"];
m11_4 [label="Exit CommandLine.Helpers.PopsicleSetter.Set<T>(bool, ref T, T)", span="6-6", cluster="CommandLine.Helpers.PopsicleSetter.Set<T>(bool, ref T, T)", file="StringBuilderExtensions.cs"];
m11_5 [label="Entry System.InvalidOperationException.InvalidOperationException()", span="0-0", cluster="System.InvalidOperationException.InvalidOperationException()", file="StringBuilderExtensions.cs"];
m12_100 [label="Entry CommandLine.Infrastructure.OptionMap.MutuallyExclusiveInfo.IncrementOccurrence()", span="289-289", cluster="CommandLine.Infrastructure.OptionMap.MutuallyExclusiveInfo.IncrementOccurrence()", file="Tokenizer.cs"];
m12_103 [label="++count", span="291-291", cluster="CommandLine.Infrastructure.OptionMap.MutuallyExclusiveInfo.IncrementOccurrence()", file="Tokenizer.cs"];
m12_104 [label="Exit CommandLine.Infrastructure.OptionMap.MutuallyExclusiveInfo.IncrementOccurrence()", span="289-289", cluster="CommandLine.Infrastructure.OptionMap.MutuallyExclusiveInfo.IncrementOccurrence()", file="Tokenizer.cs"];
m12_46 [label="Entry CommandLine.Infrastructure.OptionMap.EnforceRequiredRule()", span="219-219", cluster="CommandLine.Infrastructure.OptionMap.EnforceRequiredRule()", file="Tokenizer.cs"];
m12_73 [label="var requiredRulesAllMet = true", span="221-221", cluster="CommandLine.Infrastructure.OptionMap.EnforceRequiredRule()", file="Tokenizer.cs"];
m12_74 [label="_map.Values", span="223-223", cluster="CommandLine.Infrastructure.OptionMap.EnforceRequiredRule()", file="Tokenizer.cs"];
m12_78 [label="return requiredRulesAllMet;", span="232-232", cluster="CommandLine.Infrastructure.OptionMap.EnforceRequiredRule()", file="Tokenizer.cs"];
m12_75 [label="option.Required && !(option.IsDefined && option.ReceivedValue)", span="225-225", cluster="CommandLine.Infrastructure.OptionMap.EnforceRequiredRule()", file="Tokenizer.cs"];
m12_76 [label="SetParserStateIfNeeded(RawOptions, option, true, null)", span="227-227", cluster="CommandLine.Infrastructure.OptionMap.EnforceRequiredRule()", file="Tokenizer.cs"];
m12_77 [label="requiredRulesAllMet = false", span="228-228", cluster="CommandLine.Infrastructure.OptionMap.EnforceRequiredRule()", file="Tokenizer.cs"];
m12_79 [label="Exit CommandLine.Infrastructure.OptionMap.EnforceRequiredRule()", span="219-219", cluster="CommandLine.Infrastructure.OptionMap.EnforceRequiredRule()", file="Tokenizer.cs"];
m12_0 [label="Entry CommandLine.Infrastructure.OptionMap.OptionMap(int, CommandLine.ParserSettings)", span="47-47", cluster="CommandLine.Infrastructure.OptionMap.OptionMap(int, CommandLine.ParserSettings)", file="Tokenizer.cs"];
m12_1 [label="_settings = settings", span="49-49", cluster="CommandLine.Infrastructure.OptionMap.OptionMap(int, CommandLine.ParserSettings)", file="Tokenizer.cs"];
m12_3 [label="_names = new Dictionary<string, string>(capacity, comparer)", span="53-53", cluster="CommandLine.Infrastructure.OptionMap.OptionMap(int, CommandLine.ParserSettings)", file="Tokenizer.cs"];
m12_4 [label="_map = new Dictionary<string, OptionInfo>(capacity * 2, comparer)", span="54-54", cluster="CommandLine.Infrastructure.OptionMap.OptionMap(int, CommandLine.ParserSettings)", file="Tokenizer.cs"];
m12_6 [label="_mutuallyExclusiveSetMap = new Dictionary<string, MutuallyExclusiveInfo>(capacity, StringComparer.OrdinalIgnoreCase)", span="58-58", cluster="CommandLine.Infrastructure.OptionMap.OptionMap(int, CommandLine.ParserSettings)", file="Tokenizer.cs"];
m12_2 [label="IEqualityComparer<string> comparer =\r\n                _settings.CaseSensitive ? StringComparer.Ordinal : StringComparer.OrdinalIgnoreCase", span="51-52", cluster="CommandLine.Infrastructure.OptionMap.OptionMap(int, CommandLine.ParserSettings)", color=red, community=0, file="Tokenizer.cs"];
m12_5 [label="_settings.MutuallyExclusive", span="56-56", cluster="CommandLine.Infrastructure.OptionMap.OptionMap(int, CommandLine.ParserSettings)", file="Tokenizer.cs"];
m12_7 [label="Exit CommandLine.Infrastructure.OptionMap.OptionMap(int, CommandLine.ParserSettings)", span="47-47", cluster="CommandLine.Infrastructure.OptionMap.OptionMap(int, CommandLine.ParserSettings)", file="Tokenizer.cs"];
m12_9 [label="Entry CommandLine.Infrastructure.OptionMap.Create(object, CommandLine.ParserSettings)", span="102-102", cluster="CommandLine.Infrastructure.OptionMap.Create(object, CommandLine.ParserSettings)", file="Tokenizer.cs"];
m12_10 [label="var list = ReflectionUtil.RetrievePropertyList<BaseOptionAttribute>(target)", span="104-104", cluster="CommandLine.Infrastructure.OptionMap.Create(object, CommandLine.ParserSettings)", file="Tokenizer.cs"];
m12_13 [label="var map = new OptionMap(list.Count, settings)", span="110-110", cluster="CommandLine.Infrastructure.OptionMap.Create(object, CommandLine.ParserSettings)", file="Tokenizer.cs"];
m12_21 [label="map[uniqueName] = new OptionInfo(pair.Right, pair.Left, settings.ParsingCulture)", span="127-127", cluster="CommandLine.Infrastructure.OptionMap.Create(object, CommandLine.ParserSettings)", file="Tokenizer.cs"];
m12_22 [label="map.RawOptions = target", span="131-131", cluster="CommandLine.Infrastructure.OptionMap.Create(object, CommandLine.ParserSettings)", file="Tokenizer.cs"];
m12_11 [label="list == null", span="105-105", cluster="CommandLine.Infrastructure.OptionMap.Create(object, CommandLine.ParserSettings)", file="Tokenizer.cs"];
m12_14 [label=list, span="112-112", cluster="CommandLine.Infrastructure.OptionMap.Create(object, CommandLine.ParserSettings)", file="Tokenizer.cs"];
m12_12 [label="return null;", span="107-107", cluster="CommandLine.Infrastructure.OptionMap.Create(object, CommandLine.ParserSettings)", file="Tokenizer.cs"];
m12_23 [label="return map;", span="132-132", cluster="CommandLine.Infrastructure.OptionMap.Create(object, CommandLine.ParserSettings)", file="Tokenizer.cs"];
m12_15 [label="pair.Left != null && pair.Right != null", span="114-114", cluster="CommandLine.Infrastructure.OptionMap.Create(object, CommandLine.ParserSettings)", file="Tokenizer.cs"];
m12_17 [label="pair.Right.AutoLongName", span="117-117", cluster="CommandLine.Infrastructure.OptionMap.Create(object, CommandLine.ParserSettings)", file="Tokenizer.cs"];
m12_18 [label="uniqueName = pair.Left.Name.ToLowerInvariant()", span="119-119", cluster="CommandLine.Infrastructure.OptionMap.Create(object, CommandLine.ParserSettings)", file="Tokenizer.cs"];
m12_19 [label="pair.Right.LongName = uniqueName", span="120-120", cluster="CommandLine.Infrastructure.OptionMap.Create(object, CommandLine.ParserSettings)", file="Tokenizer.cs"];
m12_20 [label="uniqueName = pair.Right.UniqueName", span="124-124", cluster="CommandLine.Infrastructure.OptionMap.Create(object, CommandLine.ParserSettings)", file="Tokenizer.cs"];
m12_16 [label="string uniqueName", span="116-116", cluster="CommandLine.Infrastructure.OptionMap.Create(object, CommandLine.ParserSettings)", file="Tokenizer.cs"];
m12_24 [label="Exit CommandLine.Infrastructure.OptionMap.Create(object, CommandLine.ParserSettings)", span="102-102", cluster="CommandLine.Infrastructure.OptionMap.Create(object, CommandLine.ParserSettings)", file="Tokenizer.cs"];
m12_42 [label="Entry CommandLine.Infrastructure.OptionMap.EnforceRules()", span="162-162", cluster="CommandLine.Infrastructure.OptionMap.EnforceRules()", file="Tokenizer.cs"];
m12_43 [label="return EnforceMutuallyExclusiveMap() && EnforceRequiredRule();", span="164-164", cluster="CommandLine.Infrastructure.OptionMap.EnforceRules()", file="Tokenizer.cs"];
m12_44 [label="Exit CommandLine.Infrastructure.OptionMap.EnforceRules()", span="162-162", cluster="CommandLine.Infrastructure.OptionMap.EnforceRules()", file="Tokenizer.cs"];
m12_99 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", file="Tokenizer.cs"];
m12_28 [label="Entry CommandLine.Infrastructure.OptionMap.Create(object, System.Collections.Generic.IList<CommandLine.Helpers.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.ParserSettings)", span="135-135", cluster="CommandLine.Infrastructure.OptionMap.Create(object, System.Collections.Generic.IList<CommandLine.Helpers.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.ParserSettings)", file="Tokenizer.cs"];
m12_29 [label="var map = new OptionMap(verbs.Count, settings)", span="140-140", cluster="CommandLine.Infrastructure.OptionMap.Create(object, System.Collections.Generic.IList<CommandLine.Helpers.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.ParserSettings)", file="Tokenizer.cs"];
m12_30 [label=verbs, span="142-142", cluster="CommandLine.Infrastructure.OptionMap.Create(object, System.Collections.Generic.IList<CommandLine.Helpers.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.ParserSettings)", file="Tokenizer.cs"];
m12_31 [label="var optionInfo = new OptionInfo(verb.Right, verb.Left, settings.ParsingCulture)\r\n                {\r\n                    HasParameterLessCtor = verb.Left.PropertyType.GetConstructor(Type.EmptyTypes) != null\r\n                }", span="144-147", cluster="CommandLine.Infrastructure.OptionMap.Create(object, System.Collections.Generic.IList<CommandLine.Helpers.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.ParserSettings)", file="Tokenizer.cs"];
m12_32 [label="!optionInfo.HasParameterLessCtor && verb.Left.GetValue(target, null) == null", span="149-149", cluster="CommandLine.Infrastructure.OptionMap.Create(object, System.Collections.Generic.IList<CommandLine.Helpers.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.ParserSettings)", file="Tokenizer.cs"];
m12_35 [label="map.RawOptions = target", span="158-158", cluster="CommandLine.Infrastructure.OptionMap.Create(object, System.Collections.Generic.IList<CommandLine.Helpers.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.ParserSettings)", file="Tokenizer.cs"];
m12_34 [label="map[verb.Right.UniqueName] = optionInfo", span="155-155", cluster="CommandLine.Infrastructure.OptionMap.Create(object, System.Collections.Generic.IList<CommandLine.Helpers.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.ParserSettings)", file="Tokenizer.cs"];
m12_36 [label="return map;", span="159-159", cluster="CommandLine.Infrastructure.OptionMap.Create(object, System.Collections.Generic.IList<CommandLine.Helpers.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.ParserSettings)", file="Tokenizer.cs"];
m12_33 [label="throw new ParserException(''Type {0} must have a parameterless constructor or'' +\r\n                        '' be already initialized to be used as a verb command.''.FormatInvariant(verb.Left.PropertyType));", span="151-152", cluster="CommandLine.Infrastructure.OptionMap.Create(object, System.Collections.Generic.IList<CommandLine.Helpers.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.ParserSettings)", file="Tokenizer.cs"];
m12_37 [label="Exit CommandLine.Infrastructure.OptionMap.Create(object, System.Collections.Generic.IList<CommandLine.Helpers.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.ParserSettings)", span="135-135", cluster="CommandLine.Infrastructure.OptionMap.Create(object, System.Collections.Generic.IList<CommandLine.Helpers.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.ParserSettings)", file="Tokenizer.cs"];
m12_70 [label="Entry System.Reflection.PropertyInfo.SetValue(object, object, object[])", span="0-0", cluster="System.Reflection.PropertyInfo.SetValue(object, object, object[])", file="Tokenizer.cs"];
m12_98 [label="Entry CommandLine.Infrastructure.OptionMap.MutuallyExclusiveInfo.MutuallyExclusiveInfo(CommandLine.Infrastructure.OptionInfo)", span="277-277", cluster="CommandLine.Infrastructure.OptionMap.MutuallyExclusiveInfo.MutuallyExclusiveInfo(CommandLine.Infrastructure.OptionInfo)", file="Tokenizer.cs"];
m12_101 [label="BadOption = option", span="279-279", cluster="CommandLine.Infrastructure.OptionMap.MutuallyExclusiveInfo.MutuallyExclusiveInfo(CommandLine.Infrastructure.OptionInfo)", file="Tokenizer.cs"];
m12_102 [label="Exit CommandLine.Infrastructure.OptionMap.MutuallyExclusiveInfo.MutuallyExclusiveInfo(CommandLine.Infrastructure.OptionInfo)", span="277-277", cluster="CommandLine.Infrastructure.OptionMap.MutuallyExclusiveInfo.MutuallyExclusiveInfo(CommandLine.Infrastructure.OptionInfo)", file="Tokenizer.cs"];
m12_27 [label="Entry CommandLine.Infrastructure.OptionInfo.OptionInfo(CommandLine.BaseOptionAttribute, System.Reflection.PropertyInfo, System.Globalization.CultureInfo)", span="48-48", cluster="CommandLine.Infrastructure.OptionInfo.OptionInfo(CommandLine.BaseOptionAttribute, System.Reflection.PropertyInfo, System.Globalization.CultureInfo)", file="Tokenizer.cs"];
m12_47 [label="Entry CommandLine.Infrastructure.OptionMap.SetDefaults()", span="167-167", cluster="CommandLine.Infrastructure.OptionMap.SetDefaults()", file="Tokenizer.cs"];
m12_48 [label="_map.Values", span="169-169", cluster="CommandLine.Infrastructure.OptionMap.SetDefaults()", file="Tokenizer.cs"];
m12_49 [label="option.SetDefault(RawOptions)", span="171-171", cluster="CommandLine.Infrastructure.OptionMap.SetDefaults()", file="Tokenizer.cs"];
m12_50 [label="Exit CommandLine.Infrastructure.OptionMap.SetDefaults()", span="167-167", cluster="CommandLine.Infrastructure.OptionMap.SetDefaults()", file="Tokenizer.cs"];
m12_97 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", file="Tokenizer.cs"];
m12_40 [label="Entry CommandLine.ParserException.ParserException(string)", span="49-49", cluster="CommandLine.ParserException.ParserException(string)", file="Tokenizer.cs"];
m12_72 [label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.ICollection<T>.Add(T)", file="Tokenizer.cs"];
m12_38 [label="Entry System.Type.GetConstructor(System.Type[])", span="0-0", cluster="System.Type.GetConstructor(System.Type[])", file="Tokenizer.cs"];
m12_26 [label="Entry string.ToLowerInvariant()", span="0-0", cluster="string.ToLowerInvariant()", file="Tokenizer.cs"];
m12_51 [label="Entry CommandLine.Infrastructure.OptionInfo.SetDefault(object)", span="206-206", cluster="CommandLine.Infrastructure.OptionInfo.SetDefault(object)", file="Tokenizer.cs"];
m12_52 [label="Entry CommandLine.Infrastructure.OptionMap.SetParserStateIfNeeded(object, CommandLine.Infrastructure.OptionInfo, bool?, bool?)", span="175-175", cluster="CommandLine.Infrastructure.OptionMap.SetParserStateIfNeeded(object, CommandLine.Infrastructure.OptionInfo, bool?, bool?)", file="Tokenizer.cs"];
m12_53 [label="var list = ReflectionUtil.RetrievePropertyList<ParserStateAttribute>(options)", span="177-177", cluster="CommandLine.Infrastructure.OptionMap.SetParserStateIfNeeded(object, CommandLine.Infrastructure.OptionInfo, bool?, bool?)", file="Tokenizer.cs"];
m12_57 [label="property.GetValue(options, null) == null", span="186-186", cluster="CommandLine.Infrastructure.OptionMap.SetParserStateIfNeeded(object, CommandLine.Infrastructure.OptionInfo, bool?, bool?)", file="Tokenizer.cs"];
m12_58 [label="property.SetValue(options, new CommandLine.ParserState(), null)", span="188-188", cluster="CommandLine.Infrastructure.OptionMap.SetParserStateIfNeeded(object, CommandLine.Infrastructure.OptionInfo, bool?, bool?)", file="Tokenizer.cs"];
m12_59 [label="var parserState = (IParserState)property.GetValue(options, null)", span="191-191", cluster="CommandLine.Infrastructure.OptionMap.SetParserStateIfNeeded(object, CommandLine.Infrastructure.OptionInfo, bool?, bool?)", file="Tokenizer.cs"];
m12_62 [label="var error = new ParsingError\r\n            {\r\n                BadOption =\r\n                {\r\n                    ShortName = option.ShortName,\r\n                    LongName = option.LongName\r\n                }\r\n            }", span="197-204", cluster="CommandLine.Infrastructure.OptionMap.SetParserStateIfNeeded(object, CommandLine.Infrastructure.OptionInfo, bool?, bool?)", file="Tokenizer.cs"];
m12_63 [label="required != null", span="206-206", cluster="CommandLine.Infrastructure.OptionMap.SetParserStateIfNeeded(object, CommandLine.Infrastructure.OptionInfo, bool?, bool?)", file="Tokenizer.cs"];
m12_64 [label="error.ViolatesRequired = required.Value", span="208-208", cluster="CommandLine.Infrastructure.OptionMap.SetParserStateIfNeeded(object, CommandLine.Infrastructure.OptionInfo, bool?, bool?)", file="Tokenizer.cs"];
m12_65 [label="mutualExclusiveness != null", span="211-211", cluster="CommandLine.Infrastructure.OptionMap.SetParserStateIfNeeded(object, CommandLine.Infrastructure.OptionInfo, bool?, bool?)", file="Tokenizer.cs"];
m12_66 [label="error.ViolatesMutualExclusiveness = mutualExclusiveness.Value", span="213-213", cluster="CommandLine.Infrastructure.OptionMap.SetParserStateIfNeeded(object, CommandLine.Infrastructure.OptionInfo, bool?, bool?)", file="Tokenizer.cs"];
m12_54 [label="list.Count == 0", span="178-178", cluster="CommandLine.Infrastructure.OptionMap.SetParserStateIfNeeded(object, CommandLine.Infrastructure.OptionInfo, bool?, bool?)", file="Tokenizer.cs"];
m12_56 [label="var property = list[0].Left", span="183-183", cluster="CommandLine.Infrastructure.OptionMap.SetParserStateIfNeeded(object, CommandLine.Infrastructure.OptionInfo, bool?, bool?)", file="Tokenizer.cs"];
m12_55 [label="return;", span="180-180", cluster="CommandLine.Infrastructure.OptionMap.SetParserStateIfNeeded(object, CommandLine.Infrastructure.OptionInfo, bool?, bool?)", file="Tokenizer.cs"];
m12_60 [label="parserState == null", span="192-192", cluster="CommandLine.Infrastructure.OptionMap.SetParserStateIfNeeded(object, CommandLine.Infrastructure.OptionInfo, bool?, bool?)", file="Tokenizer.cs"];
m12_67 [label="parserState.Errors.Add(error)", span="216-216", cluster="CommandLine.Infrastructure.OptionMap.SetParserStateIfNeeded(object, CommandLine.Infrastructure.OptionInfo, bool?, bool?)", file="Tokenizer.cs"];
m12_61 [label="return;", span="194-194", cluster="CommandLine.Infrastructure.OptionMap.SetParserStateIfNeeded(object, CommandLine.Infrastructure.OptionInfo, bool?, bool?)", file="Tokenizer.cs"];
m12_68 [label="Exit CommandLine.Infrastructure.OptionMap.SetParserStateIfNeeded(object, CommandLine.Infrastructure.OptionInfo, bool?, bool?)", span="175-175", cluster="CommandLine.Infrastructure.OptionMap.SetParserStateIfNeeded(object, CommandLine.Infrastructure.OptionInfo, bool?, bool?)", file="Tokenizer.cs"];
m12_69 [label="Entry CommandLine.ParserState.ParserState()", span="34-34", cluster="CommandLine.ParserState.ParserState()", file="Tokenizer.cs"];
m12_45 [label="Entry CommandLine.Infrastructure.OptionMap.EnforceMutuallyExclusiveMap()", span="235-235", cluster="CommandLine.Infrastructure.OptionMap.EnforceMutuallyExclusiveMap()", file="Tokenizer.cs"];
m12_80 [label="!_settings.MutuallyExclusive", span="237-237", cluster="CommandLine.Infrastructure.OptionMap.EnforceMutuallyExclusiveMap()", file="Tokenizer.cs"];
m12_81 [label="return true;", span="239-239", cluster="CommandLine.Infrastructure.OptionMap.EnforceMutuallyExclusiveMap()", file="Tokenizer.cs"];
m12_82 [label="_map.Values", span="242-242", cluster="CommandLine.Infrastructure.OptionMap.EnforceMutuallyExclusiveMap()", file="Tokenizer.cs"];
m12_83 [label="option.IsDefined && option.MutuallyExclusiveSet != null", span="244-244", cluster="CommandLine.Infrastructure.OptionMap.EnforceMutuallyExclusiveMap()", file="Tokenizer.cs"];
m12_85 [label="_mutuallyExclusiveSetMap.Values", span="250-250", cluster="CommandLine.Infrastructure.OptionMap.EnforceMutuallyExclusiveMap()", file="Tokenizer.cs"];
m12_84 [label="BuildMutuallyExclusiveMap(option)", span="246-246", cluster="CommandLine.Infrastructure.OptionMap.EnforceMutuallyExclusiveMap()", file="Tokenizer.cs"];
m12_86 [label="info.Occurrence > 1", span="252-252", cluster="CommandLine.Infrastructure.OptionMap.EnforceMutuallyExclusiveMap()", file="Tokenizer.cs"];
m12_89 [label="return true;", span="259-259", cluster="CommandLine.Infrastructure.OptionMap.EnforceMutuallyExclusiveMap()", file="Tokenizer.cs"];
m12_87 [label="SetParserStateIfNeeded(RawOptions, info.BadOption, null, true)", span="254-254", cluster="CommandLine.Infrastructure.OptionMap.EnforceMutuallyExclusiveMap()", file="Tokenizer.cs"];
m12_88 [label="return false;", span="255-255", cluster="CommandLine.Infrastructure.OptionMap.EnforceMutuallyExclusiveMap()", file="Tokenizer.cs"];
m12_90 [label="Exit CommandLine.Infrastructure.OptionMap.EnforceMutuallyExclusiveMap()", span="235-235", cluster="CommandLine.Infrastructure.OptionMap.EnforceMutuallyExclusiveMap()", file="Tokenizer.cs"];
m12_91 [label="Entry CommandLine.Infrastructure.OptionMap.BuildMutuallyExclusiveMap(CommandLine.Infrastructure.OptionInfo)", span="262-262", cluster="CommandLine.Infrastructure.OptionMap.BuildMutuallyExclusiveMap(CommandLine.Infrastructure.OptionInfo)", file="Tokenizer.cs"];
m12_92 [label="var setName = option.MutuallyExclusiveSet", span="264-264", cluster="CommandLine.Infrastructure.OptionMap.BuildMutuallyExclusiveMap(CommandLine.Infrastructure.OptionInfo)", file="Tokenizer.cs"];
m12_94 [label="_mutuallyExclusiveSetMap.Add(setName, new MutuallyExclusiveInfo(option))", span="267-267", cluster="CommandLine.Infrastructure.OptionMap.BuildMutuallyExclusiveMap(CommandLine.Infrastructure.OptionInfo)", file="Tokenizer.cs"];
m12_93 [label="!_mutuallyExclusiveSetMap.ContainsKey(setName)", span="265-265", cluster="CommandLine.Infrastructure.OptionMap.BuildMutuallyExclusiveMap(CommandLine.Infrastructure.OptionInfo)", file="Tokenizer.cs"];
m12_95 [label="_mutuallyExclusiveSetMap[setName].IncrementOccurrence()", span="270-270", cluster="CommandLine.Infrastructure.OptionMap.BuildMutuallyExclusiveMap(CommandLine.Infrastructure.OptionInfo)", file="Tokenizer.cs"];
m12_96 [label="Exit CommandLine.Infrastructure.OptionMap.BuildMutuallyExclusiveMap(CommandLine.Infrastructure.OptionInfo)", span="262-262", cluster="CommandLine.Infrastructure.OptionMap.BuildMutuallyExclusiveMap(CommandLine.Infrastructure.OptionInfo)", file="Tokenizer.cs"];
m12_71 [label="Entry CommandLine.ParsingError.ParsingError()", span="31-31", cluster="CommandLine.ParsingError.ParsingError()", file="Tokenizer.cs"];
m12_41 [label="Entry string.FormatInvariant(params object[])", span="46-46", cluster="string.FormatInvariant(params object[])", file="Tokenizer.cs"];
m12_39 [label="Entry System.Reflection.PropertyInfo.GetValue(object, object[])", span="0-0", cluster="System.Reflection.PropertyInfo.GetValue(object, object[])", file="Tokenizer.cs"];
m12_25 [label="Entry CommandLine.Helpers.ReflectionUtil.RetrievePropertyList<TAttribute>(object)", span="46-46", cluster="CommandLine.Helpers.ReflectionUtil.RetrievePropertyList<TAttribute>(object)", file="Tokenizer.cs"];
m12_8 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(int, System.Collections.Generic.IEqualityComparer<TKey>)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(int, System.Collections.Generic.IEqualityComparer<TKey>)", file="Tokenizer.cs"];
m12_105 [label="CommandLine.Infrastructure.OptionMap", span="", file="Tokenizer.cs"];
m12_106 [label="CommandLine.Infrastructure.OptionMap.MutuallyExclusiveInfo", span="", file="Tokenizer.cs"];
m13_3 [label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>)", span="20-20", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>)", file="TokenPartitioner.cs"];
m13_7 [label="var errors = new List<Error>()", span="25-25", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>)", color=red, community=0, file="TokenPartitioner.cs"];
m13_9 [label="var tokens = (from arg in arguments\r\n                          from token in !arg.StartsWith(''-'', StringComparison.Ordinal)\r\n                               ? new[] { Token.Value(arg) }\r\n                               : arg.StartsWith(''--'', StringComparison.Ordinal)\r\n                                     ? TokenizeLongName(arg, onError)\r\n                                     : TokenizeShortName(arg, nameLookup)\r\n                          select token)\r\n                            .Memorize()", span="28-35", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>)", file="TokenPartitioner.cs"];
m13_10 [label="var normalized = normalize(tokens)", span="37-37", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>)", file="TokenPartitioner.cs"];
m13_11 [label="var unkTokens = (from t in normalized where t.IsName() && nameLookup(t.Text) == NameLookupResult.NoOptionFound select t).Memorize()", span="39-39", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>)", file="TokenPartitioner.cs"];
m13_8 [label="Action<Error> onError = errors.Add", span="26-26", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>)", file="TokenPartitioner.cs"];
m13_12 [label="return Result.Succeed(normalized.Where(x => !unkTokens.Contains(x)), errors.Concat(from t in unkTokens select new UnknownOptionError(t.Text)));", span="41-41", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>)", file="TokenPartitioner.cs"];
m13_13 [label="Exit CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>)", span="20-20", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>)", file="TokenPartitioner.cs"];
m13_201 [label="Entry string.Split(params char[])", span="0-0", cluster="string.Split(params char[])", file="TokenPartitioner.cs"];
m13_31 [label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", span="44-44", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", file="TokenPartitioner.cs"];
m13_32 [label="arguments.Any(arg => arg.EqualsOrdinal(''--''))", span="48-48", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", file="TokenPartitioner.cs"];
m13_33 [label="var tokenizerResult = tokenizer(arguments.TakeWhile(arg => !arg.EqualsOrdinal(''--'')))", span="50-50", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", file="TokenPartitioner.cs"];
m13_34 [label="var values = arguments.SkipWhile(arg => !arg.EqualsOrdinal(''--'')).Skip(1).Select(Token.Value)", span="51-51", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", file="TokenPartitioner.cs"];
m13_36 [label="return tokenizer(arguments);", span="54-54", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", file="TokenPartitioner.cs"];
m13_35 [label="return tokenizerResult.Map(tokens => tokens.Concat(values));", span="52-52", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", file="TokenPartitioner.cs"];
m13_37 [label="Exit CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", span="44-44", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", file="TokenPartitioner.cs"];
m13_86 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="TokenPartitioner.cs"];
m13_97 [label="Entry CommandLine.Core.Tokenizer.Normalize(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, bool>)", span="78-78", cluster="CommandLine.Core.Tokenizer.Normalize(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, bool>)", file="TokenPartitioner.cs"];
m13_98 [label="var indexes =\r\n                from i in\r\n                    tokens.Select(\r\n                        (t, i) =>\r\n                        {\r\n                            var prev = tokens.ElementAtOrDefault(i - 1).ToMaybe();\r\n                            return t.IsValue() && ((Value)t).ExplicitlyAssigned\r\n                                   && prev.Return(p => p.IsName() && !nameLookup(p.Text), false)\r\n                                ? Maybe.Just(i)\r\n                                : Maybe.Nothing<int>();\r\n                        }).Where(i => i.IsJust())\r\n                select i.FromJust()", span="81-92", cluster="CommandLine.Core.Tokenizer.Normalize(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, bool>)", file="TokenPartitioner.cs"];
m13_99 [label="var toExclude =\r\n                from t in\r\n                    tokens.Select((t, i) => indexes.Contains(i) ? Maybe.Just(t) : Maybe.Nothing<Token>())\r\n                        .Where(t => t.IsJust())\r\n                select t.FromJust()", span="94-98", cluster="CommandLine.Core.Tokenizer.Normalize(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, bool>)", file="TokenPartitioner.cs"];
m13_100 [label="var normalized = tokens.Except(toExclude)", span="100-100", cluster="CommandLine.Core.Tokenizer.Normalize(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, bool>)", file="TokenPartitioner.cs"];
m13_101 [label="return normalized;", span="102-102", cluster="CommandLine.Core.Tokenizer.Normalize(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, bool>)", file="TokenPartitioner.cs"];
m13_102 [label="Exit CommandLine.Core.Tokenizer.Normalize(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, bool>)", span="78-78", cluster="CommandLine.Core.Tokenizer.Normalize(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, bool>)", file="TokenPartitioner.cs"];
m13_118 [label="Entry Unk.nameLookup", span="", cluster="Unk.nameLookup", file="TokenPartitioner.cs"];
m13_18 [label="Entry CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", span="132-132", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", file="TokenPartitioner.cs"];
m13_162 [label="value.Length > 1 || value[0] == '-' || value[1] != '-'", span="136-136", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", file="TokenPartitioner.cs"];
m13_165 [label="yield return Token.Value(value);", span="142-142", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", file="TokenPartitioner.cs"];
m13_166 [label="yield break;", span="143-143", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", file="TokenPartitioner.cs"];
m13_168 [label="yield return Token.Name(text);", span="148-148", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", file="TokenPartitioner.cs"];
m13_169 [label="yield break;", span="149-149", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", file="TokenPartitioner.cs"];
m13_176 [label="yield return Token.Name(n);", span="160-160", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", file="TokenPartitioner.cs"];
m13_179 [label="yield return Token.Value(text.Substring(i));", span="167-167", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", file="TokenPartitioner.cs"];
m13_163 [label="var text = value.Substring(1)", span="138-138", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", file="TokenPartitioner.cs"];
m13_167 [label="value.Length == 2", span="146-146", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", file="TokenPartitioner.cs"];
m13_173 [label="var r = nameLookup(n)", span="156-156", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", file="TokenPartitioner.cs"];
m13_164 [label="char.IsDigit(text[0])", span="140-140", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", file="TokenPartitioner.cs"];
m13_171 [label=text, span="153-153", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", file="TokenPartitioner.cs"];
m13_178 [label="i < text.Length", span="165-165", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", file="TokenPartitioner.cs"];
m13_170 [label="var i = 0", span="152-152", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", file="TokenPartitioner.cs"];
m13_174 [label="i > 0 && r == NameLookupResult.NoOptionFound", span="158-158", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", file="TokenPartitioner.cs"];
m13_175 [label="i++", span="159-159", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", file="TokenPartitioner.cs"];
m13_172 [label="var n = new string(c, 1)", span="155-155", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", file="TokenPartitioner.cs"];
m13_177 [label="r == NameLookupResult.OtherOptionFound", span="162-162", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", file="TokenPartitioner.cs"];
m13_180 [label="Exit CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", span="132-132", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", file="TokenPartitioner.cs"];
m13_138 [label="Entry Func<IEnumerable<Token>, IEnumerable<Token>>.cstr", span="", cluster="Func<IEnumerable<Token>, IEnumerable<Token>>.cstr", file="TokenPartitioner.cs"];
m13_199 [label="Entry CommandLine.BadFormatTokenError.BadFormatTokenError(string)", span="221-221", cluster="CommandLine.BadFormatTokenError.BadFormatTokenError(string)", file="TokenPartitioner.cs"];
m13_57 [label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", span="57-57", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="TokenPartitioner.cs"];
m13_58 [label="var tokens = tokenizerResult.SucceededWith()", span="61-61", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="TokenPartitioner.cs"];
m13_59 [label="var replaces = tokens.Select((t, i) =>\r\n                optionSequenceWithSeparatorLookup(t.Text)\r\n                    .Return(sep => Tuple.Create(i + 1, sep),\r\n                        Tuple.Create(-1, '\0'))).SkipWhile(x => x.Item1 < 0)", span="63-66", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="TokenPartitioner.cs"];
m13_62 [label="return Result.Succeed(flattened, tokenizerResult.SuccessfulMessages());", span="75-75", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="TokenPartitioner.cs"];
m13_60 [label="var exploded = tokens.Select((t, i) =>\r\n                        replaces.FirstOrDefault(x => x.Item1 == i).ToMaybe()\r\n                            .Return(r => t.Text.Split(r.Item2).Select(Token.Value),\r\n                                Enumerable.Empty<Token>().Concat(new[] { t })))", span="68-71", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="TokenPartitioner.cs"];
m13_61 [label="var flattened = exploded.SelectMany(x => x)", span="73-73", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="TokenPartitioner.cs"];
m13_63 [label="Exit CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", span="57-57", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="TokenPartitioner.cs"];
m13_15 [label="Entry string.StartsWith(string, System.StringComparison)", span="0-0", cluster="string.StartsWith(string, System.StringComparison)", file="TokenPartitioner.cs"];
m13_65 [label="Entry Unk.SkipWhile", span="", cluster="Unk.SkipWhile", file="TokenPartitioner.cs"];
m13_183 [label="Entry CommandLine.Core.Token.Name(string)", span="19-19", cluster="CommandLine.Core.Token.Name(string)", file="TokenPartitioner.cs"];
m13_200 [label="Entry System.Action<T>.Invoke(T)", span="0-0", cluster="System.Action<T>.Invoke(T)", file="TokenPartitioner.cs"];
m13_21 [label="Entry CommandLine.Core.Token.IsName()", span="128-128", cluster="CommandLine.Core.Token.IsName()", file="TokenPartitioner.cs"];
m13_38 [label="Entry Unk.Any", span="", cluster="Unk.Any", file="TokenPartitioner.cs"];
m13_16 [label="Entry CommandLine.Core.Token.Value(string)", span="24-24", cluster="CommandLine.Core.Token.Value(string)", file="TokenPartitioner.cs"];
m13_117 [label="Entry Unk.IsName", span="", cluster="Unk.IsName", file="TokenPartitioner.cs"];
m13_22 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)", file="TokenPartitioner.cs"];
m13_161 [label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="27-27", cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TokenPartitioner.cs"];
m13_23 [label="Entry Unk.Where", span="", cluster="Unk.Where", file="TokenPartitioner.cs"];
m13_76 [label="Entry Unk.Create", span="", cluster="Unk.Create", file="TokenPartitioner.cs"];
m13_85 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()", file="TokenPartitioner.cs"];
m13_184 [label="Entry string.String(char, int)", span="0-0", cluster="string.String(char, int)", file="TokenPartitioner.cs"];
m13_109 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ElementAtOrDefault<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ElementAtOrDefault<TSource>(int)", file="TokenPartitioner.cs"];
m13_129 [label="Entry CommandLine.Core.Tokenizer.ConfigureTokenizer(System.StringComparer, bool, bool)", span="109-109", cluster="CommandLine.Core.Tokenizer.ConfigureTokenizer(System.StringComparer, bool, bool)", file="TokenPartitioner.cs"];
m13_130 [label="return (arguments, optionSpecs) =>\r\n                {\r\n                    var normalize = ignoreUnknownArguments\r\n                        ? toks => Tokenizer.Normalize(toks,\r\n                            name => NameLookup.Contains(name, optionSpecs, nameComparer) != NameLookupResult.NoOptionFound)\r\n                        : new Func<IEnumerable<Token>, IEnumerable<Token>>(toks => toks);\r\n\r\n                    var tokens = enableDashDash\r\n                        ? Tokenizer.PreprocessDashDash(\r\n                                arguments,\r\n                                args =>\r\n                                    Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer), normalize))\r\n                        : Tokenizer.Tokenize(arguments, name => NameLookup.Contains(name, optionSpecs, nameComparer), normalize);\r\n                    var explodedTokens = Tokenizer.ExplodeOptionList(tokens, name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer));\r\n                    return explodedTokens;\r\n                };", span="114-129", cluster="CommandLine.Core.Tokenizer.ConfigureTokenizer(System.StringComparer, bool, bool)", file="TokenPartitioner.cs"];
m13_131 [label="Exit CommandLine.Core.Tokenizer.ConfigureTokenizer(System.StringComparer, bool, bool)", span="109-109", cluster="CommandLine.Core.Tokenizer.ConfigureTokenizer(System.StringComparer, bool, bool)", file="TokenPartitioner.cs"];
m13_145 [label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="18-18", cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TokenPartitioner.cs"];
m13_30 [label="Entry Unk.Contains", span="", cluster="Unk.Contains", file="TokenPartitioner.cs"];
m13_84 [label="Entry Unk.ToMaybe", span="", cluster="Unk.ToMaybe", file="TokenPartitioner.cs"];
m13_110 [label="Entry T.ToMaybe<T>()", span="249-249", cluster="T.ToMaybe<T>()", file="TokenPartitioner.cs"];
m13_71 [label="Entry System.Tuple.Create<T1, T2>(T1, T2)", span="0-0", cluster="System.Tuple.Create<T1, T2>(T1, T2)", file="TokenPartitioner.cs"];
m13_112 [label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124", cluster="CSharpx.Maybe.Just<T>(T)", file="TokenPartitioner.cs"];
m13_152 [label="Entry lambda expression", span="125-125", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_4 [label="Entry lambda expression", span="17-17", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_5 [label=tokens, span="17-17", cluster="lambda expression", color=red, community=1, file="TokenPartitioner.cs"];
m13_6 [label="Exit lambda expression", span="17-17", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_28 [label="!unkTokens.Contains(x)", span="41-41", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_27 [label="Entry lambda expression", span="41-41", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_29 [label="Exit lambda expression", span="41-41", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_44 [label="Entry lambda expression", span="48-48", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_48 [label="Entry lambda expression", span="50-50", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_51 [label="Entry lambda expression", span="51-51", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_55 [label="tokens.Concat(values)", span="52-52", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_54 [label="Entry lambda expression", span="52-52", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_45 [label="arg.EqualsOrdinal(''--'')", span="48-48", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_46 [label="Exit lambda expression", span="48-48", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_49 [label="!arg.EqualsOrdinal(''--'')", span="50-50", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_50 [label="Exit lambda expression", span="50-50", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_52 [label="!arg.EqualsOrdinal(''--'')", span="51-51", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_53 [label="Exit lambda expression", span="51-51", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_56 [label="Exit lambda expression", span="52-52", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_69 [label="optionSequenceWithSeparatorLookup(t.Text)\r\n                    .Return(sep => Tuple.Create(i + 1, sep),\r\n                        Tuple.Create(-1, '\0'))", span="64-66", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_68 [label="Entry lambda expression", span="63-66", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_77 [label="Entry lambda expression", span="66-66", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_81 [label="replaces.FirstOrDefault(x => x.Item1 == i).ToMaybe()\r\n                            .Return(r => t.Text.Split(r.Item2).Select(Token.Value),\r\n                                Enumerable.Empty<Token>().Concat(new[] { t }))", span="69-71", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_80 [label="Entry lambda expression", span="68-71", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_94 [label="Entry lambda expression", span="73-73", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_74 [label="Tuple.Create(i + 1, sep)", span="65-65", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_70 [label="Exit lambda expression", span="63-66", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_73 [label="Entry lambda expression", span="65-65", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_75 [label="Exit lambda expression", span="65-65", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_78 [label="x.Item1 < 0", span="66-66", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_79 [label="Exit lambda expression", span="66-66", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_88 [label="x.Item1 == i", span="69-69", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_91 [label="t.Text.Split(r.Item2).Select(Token.Value)", span="70-70", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_82 [label="Exit lambda expression", span="68-71", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_87 [label="Entry lambda expression", span="69-69", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_90 [label="Entry lambda expression", span="70-70", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_89 [label="Exit lambda expression", span="69-69", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_92 [label="Exit lambda expression", span="70-70", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_95 [label=x, span="73-73", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_96 [label="Exit lambda expression", span="73-73", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_106 [label="var prev = tokens.ElementAtOrDefault(i - 1).ToMaybe()", span="86-86", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_107 [label="return t.IsValue() && ((Value)t).ExplicitlyAssigned\r\n                                   && prev.Return(p => p.IsName() && !nameLookup(p.Text), false)\r\n                                ? Maybe.Just(i)\r\n                                : Maybe.Nothing<int>();", span="87-90", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_115 [label="p.IsName() && !nameLookup(p.Text)", span="88-88", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_105 [label="Entry lambda expression", span="84-91", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_119 [label="Entry lambda expression", span="91-91", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_124 [label="indexes.Contains(i) ? Maybe.Just(t) : Maybe.Nothing<Token>()", span="96-96", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_123 [label="Entry lambda expression", span="96-96", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_126 [label="Entry lambda expression", span="97-97", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_108 [label="Exit lambda expression", span="84-91", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_114 [label="Entry lambda expression", span="88-88", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_116 [label="Exit lambda expression", span="88-88", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_120 [label="i.IsJust()", span="91-91", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_121 [label="Exit lambda expression", span="91-91", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_125 [label="Exit lambda expression", span="96-96", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_127 [label="t.IsJust()", span="97-97", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_128 [label="Exit lambda expression", span="97-97", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_133 [label="var normalize = ignoreUnknownArguments\r\n                        ? toks => Tokenizer.Normalize(toks,\r\n                            name => NameLookup.Contains(name, optionSpecs, nameComparer) != NameLookupResult.NoOptionFound)\r\n                        : new Func<IEnumerable<Token>, IEnumerable<Token>>(toks => toks)", span="116-119", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_140 [label="Tokenizer.Normalize(toks,\r\n                            name => NameLookup.Contains(name, optionSpecs, nameComparer) != NameLookupResult.NoOptionFound)", span="117-118", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_143 [label="NameLookup.Contains(name, optionSpecs, nameComparer) != NameLookupResult.NoOptionFound", span="118-118", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_134 [label="var tokens = enableDashDash\r\n                        ? Tokenizer.PreprocessDashDash(\r\n                                arguments,\r\n                                args =>\r\n                                    Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer), normalize))\r\n                        : Tokenizer.Tokenize(arguments, name => NameLookup.Contains(name, optionSpecs, nameComparer), normalize)", span="121-126", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_150 [label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer), normalize)", span="125-125", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_153 [label="NameLookup.Contains(name, optionSpecs, nameComparer)", span="125-125", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_156 [label="NameLookup.Contains(name, optionSpecs, nameComparer)", span="126-126", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_135 [label="var explodedTokens = Tokenizer.ExplodeOptionList(tokens, name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer))", span="127-127", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_159 [label="NameLookup.HavingSeparator(name, optionSpecs, nameComparer)", span="127-127", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_132 [label="Entry lambda expression", span="114-129", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_147 [label=toks, span="119-119", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_149 [label="Entry lambda expression", span="124-125", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_155 [label="Entry lambda expression", span="126-126", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_136 [label="return explodedTokens;", span="128-128", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_158 [label="Entry lambda expression", span="127-127", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_137 [label="Exit lambda expression", span="114-129", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_139 [label="Entry lambda expression", span="117-118", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_141 [label="Exit lambda expression", span="117-118", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_142 [label="Entry lambda expression", span="118-118", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_144 [label="Exit lambda expression", span="118-118", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_146 [label="Entry lambda expression", span="119-119", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_148 [label="Exit lambda expression", span="119-119", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_151 [label="Exit lambda expression", span="124-125", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_154 [label="Exit lambda expression", span="125-125", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_157 [label="Exit lambda expression", span="126-126", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_160 [label="Exit lambda expression", span="127-127", cluster="lambda expression", file="TokenPartitioner.cs"];
m13_41 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="TokenPartitioner.cs"];
m13_17 [label="Entry CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", span="172-172", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="TokenPartitioner.cs"];
m13_185 [label="value.Length > 2 && value.StartsWith(''--'', StringComparison.Ordinal)", span="176-176", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="TokenPartitioner.cs"];
m13_189 [label="yield return Token.Name(text);", span="182-182", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="TokenPartitioner.cs"];
m13_190 [label="yield break;", span="183-183", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="TokenPartitioner.cs"];
m13_193 [label="yield break;", span="188-188", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="TokenPartitioner.cs"];
m13_195 [label="yield return Token.Name(parts[0]);", span="191-191", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="TokenPartitioner.cs"];
m13_196 [label="yield return Token.Value(parts[1], true);", span="192-192", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="TokenPartitioner.cs"];
m13_186 [label="var text = value.Substring(2)", span="178-178", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="TokenPartitioner.cs"];
m13_192 [label="onError(new BadFormatTokenError(value))", span="187-187", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="TokenPartitioner.cs"];
m13_187 [label="var equalIndex = text.IndexOf('=')", span="179-179", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="TokenPartitioner.cs"];
m13_194 [label="var parts = text.Split('=')", span="190-190", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="TokenPartitioner.cs"];
m13_188 [label="equalIndex <= 0", span="180-180", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="TokenPartitioner.cs"];
m13_191 [label="equalIndex == 1", span="185-185", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="TokenPartitioner.cs"];
m13_197 [label="Exit CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", span="172-172", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="TokenPartitioner.cs"];
m13_67 [label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SuccessfulMessages<TSuccess, TMessage>()", span="15-15", cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SuccessfulMessages<TSuccess, TMessage>()", file="TokenPartitioner.cs"];
m13_40 [label="Entry System.Collections.Generic.IEnumerable<TSource>.SkipWhile<TSource>(System.Func<TSource, bool>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.SkipWhile<TSource>(System.Func<TSource, bool>)", file="TokenPartitioner.cs"];
m13_25 [label="Entry Unk.Concat", span="", cluster="Unk.Concat", file="TokenPartitioner.cs"];
m13_43 [label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.Map<TSuccess, TMessage, TResult>(System.Func<TSuccess, TResult>)", span="534-534", cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.Map<TSuccess, TMessage, TResult>(System.Func<TSuccess, TResult>)", file="TokenPartitioner.cs"];
m13_47 [label="Entry string.EqualsOrdinal(string)", span="40-40", cluster="string.EqualsOrdinal(string)", file="TokenPartitioner.cs"];
m13_39 [label="Entry System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", file="TokenPartitioner.cs"];
m13_198 [label="Entry string.IndexOf(char)", span="0-0", cluster="string.IndexOf(char)", file="TokenPartitioner.cs"];
m13_42 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="TokenPartitioner.cs"];
m13_122 [label="Entry Unk.IsJust", span="", cluster="Unk.IsJust", file="TokenPartitioner.cs"];
m13_19 [label="Entry Unk.Memorize", span="", cluster="Unk.Memorize", file="TokenPartitioner.cs"];
m13_104 [label="Entry Unk.Except", span="", cluster="Unk.Except", file="TokenPartitioner.cs"];
m13_72 [label="Entry Unk.Return", span="", cluster="Unk.Return", file="TokenPartitioner.cs"];
m13_113 [label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116", cluster="CSharpx.Maybe.Nothing<T>()", file="TokenPartitioner.cs"];
m13_64 [label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()", span="653-653", cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()", file="TokenPartitioner.cs"];
m13_111 [label="Entry CommandLine.Core.Token.IsValue()", span="133-133", cluster="CommandLine.Core.Token.IsValue()", file="TokenPartitioner.cs"];
m13_103 [label="Entry Unk.FromJust", span="", cluster="Unk.FromJust", file="TokenPartitioner.cs"];
m13_182 [label="Entry char.IsDigit(char)", span="0-0", cluster="char.IsDigit(char)", file="TokenPartitioner.cs"];
m13_14 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="TokenPartitioner.cs"];
m13_0 [label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>)", span="13-13", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>)", file="TokenPartitioner.cs"];
m13_1 [label="return Tokenizer.Tokenize(arguments, nameLookup, tokens => tokens);", span="17-17", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>)", color=red, community=0, file="TokenPartitioner.cs"];
m13_2 [label="Exit CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>)", span="13-13", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>)", file="TokenPartitioner.cs"];
m13_202 [label="Entry CommandLine.Core.Token.Value(string, bool)", span="29-29", cluster="CommandLine.Core.Token.Value(string, bool)", file="TokenPartitioner.cs"];
m13_24 [label="Entry UnknownOptionError.cstr", span="", cluster="UnknownOptionError.cstr", file="TokenPartitioner.cs"];
m13_20 [label="Entry Unk.normalize", span="", cluster="Unk.normalize", file="TokenPartitioner.cs"];
m13_66 [label="Entry Unk.SelectMany", span="", cluster="Unk.SelectMany", file="TokenPartitioner.cs"];
m13_83 [label="Entry Unk.FirstOrDefault", span="", cluster="Unk.FirstOrDefault", file="TokenPartitioner.cs"];
m13_93 [label="Entry Unk.Split", span="", cluster="Unk.Split", file="TokenPartitioner.cs"];
m13_26 [label="Entry Unk.Succeed", span="", cluster="Unk.Succeed", file="TokenPartitioner.cs"];
m13_181 [label="Entry string.Substring(int)", span="0-0", cluster="string.Substring(int)", file="TokenPartitioner.cs"];
m13_203 [label=unkTokens, span="", file="TokenPartitioner.cs"];
m13_204 [label=values, span="", file="TokenPartitioner.cs"];
m13_205 [label="System.Func<string, CSharpx.Maybe<char>>", span="", file="TokenPartitioner.cs"];
m13_206 [label=int, span="", file="TokenPartitioner.cs"];
m13_207 [label=replaces, span="", file="TokenPartitioner.cs"];
m13_208 [label=int, span="", file="TokenPartitioner.cs"];
m13_209 [label="CommandLine.Core.Token", span="", file="TokenPartitioner.cs"];
m13_210 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", span="", file="TokenPartitioner.cs"];
m13_211 [label="System.Func<string, bool>", span="", file="TokenPartitioner.cs"];
m13_212 [label=indexes, span="", file="TokenPartitioner.cs"];
m13_213 [label="System.StringComparer", span="", file="TokenPartitioner.cs"];
m13_214 [label=bool, span="", file="TokenPartitioner.cs"];
m13_215 [label=bool, span="", file="TokenPartitioner.cs"];
m13_216 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span="", file="TokenPartitioner.cs"];
m13_217 [label=normalize, span="", file="TokenPartitioner.cs"];
m14_0 [label="Entry CommandLine.Core.ValueSpecification.ValueSpecification(int, bool, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type)", span="10-10", cluster="CommandLine.Core.ValueSpecification.ValueSpecification(int, bool, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type)", file="ValueMapper.cs"];
m14_1 [label="this.index = index", span="13-13", cluster="CommandLine.Core.ValueSpecification.ValueSpecification(int, bool, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type)", color=red, community=0, file="ValueMapper.cs"];
m14_2 [label="Exit CommandLine.Core.ValueSpecification.ValueSpecification(int, bool, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type)", span="10-10", cluster="CommandLine.Core.ValueSpecification.ValueSpecification(int, bool, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type)", file="ValueMapper.cs"];
m14_3 [label="Entry CommandLine.Core.ValueSpecification.FromAttribute(CommandLine.ValueAttribute, System.Type)", span="16-16", cluster="CommandLine.Core.ValueSpecification.FromAttribute(CommandLine.ValueAttribute, System.Type)", file="ValueMapper.cs"];
m14_4 [label="return new ValueSpecification(\r\n                attribute.Index,\r\n                attribute.Required,\r\n                attribute.Min,\r\n                attribute.Max,\r\n                attribute.DefaultValue.ToMaybe(),\r\n                conversionType);", span="18-24", cluster="CommandLine.Core.ValueSpecification.FromAttribute(CommandLine.ValueAttribute, System.Type)", color=red, community=0, file="ValueMapper.cs"];
m14_5 [label="Exit CommandLine.Core.ValueSpecification.FromAttribute(CommandLine.ValueAttribute, System.Type)", span="16-16", cluster="CommandLine.Core.ValueSpecification.FromAttribute(CommandLine.ValueAttribute, System.Type)", file="ValueMapper.cs"];
m14_6 [label="Entry T.ToMaybe<T>()", span="82-82", cluster="T.ToMaybe<T>()", file="ValueMapper.cs"];
m14_7 [label="CommandLine.Core.ValueSpecification", span="", file="ValueMapper.cs"];
m2_0 -> m2_7  [key=1, style=dashed, color=green, label=string];
m2_0 -> m2_0  [key=3, color=darkorchid, style=bold, label="method methodReturn string GetResourceKey"];
m2_0 -> m2_1  [key=0, style=solid];
m2_0 -> m2_3  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_0 -> m2_5  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_0 -> m2_8  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_7 -> m2_9  [key=0, style=solid, color=green];
m2_6 -> m2_7  [key=0, style=solid, color=green];
m2_6 -> m2_8  [key=0, style=solid];
m2_1 -> m2_2  [key=0, style=solid];
m2_3 -> m2_6  [key=1, style=dashed, color=darkseagreen4, label=mod10];
m2_3 -> m2_4  [key=0, style=solid];
m2_5 -> m2_9  [key=0, style=solid];
m2_8 -> m2_9  [key=0, style=solid];
m2_4 -> m2_6  [key=0, style=solid];
m2_4 -> m2_5  [key=0, style=solid];
m2_2 -> m2_3  [key=0, style=solid];
m2_2 -> m2_8  [key=0, style=solid];
m2_9 -> m2_0  [key=0, style=bold, color=blue];
m3_120 -> m3_121  [key=0, style=solid];
m3_121 -> m3_34  [key=2, style=dotted];
m3_121 -> m3_122  [key=0, style=solid];
m3_121 -> m3_109  [key=2, style=dotted];
m3_121 -> m3_123  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_122 -> m3_120  [key=0, style=bold, color=blue];
m3_82 -> m3_83  [key=0, style=solid];
m3_82 -> m3_84  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m3_82 -> m3_86  [key=1, style=dashed, color=darkseagreen4, label=object];
m3_82 -> m3_88  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m3_82 -> m3_90  [key=1, style=dashed, color=darkseagreen4, label=object];
m3_92 -> m3_41  [key=2, style=dotted];
m3_92 -> m3_91  [key=0, style=solid];
m3_92 -> m3_101  [key=2, style=dotted];
m3_92 -> m3_97  [key=2, style=dotted];
m3_94 -> m3_49  [key=2, style=dotted];
m3_94 -> m3_95  [key=0, style=solid];
m3_83 -> m3_92  [key=1, style=dashed, color=darkseagreen4, label=builder];
m3_83 -> m3_32  [key=2, style=dotted];
m3_83 -> m3_94  [key=1, style=dashed, color=darkseagreen4, label=builder];
m3_83 -> m3_84  [key=0, style=solid];
m3_83 -> m3_86  [key=1, style=dashed, color=darkseagreen4, label=builder];
m3_83 -> m3_93  [key=1, style=dashed, color=darkseagreen4, label=builder];
m3_88 -> m3_92  [key=1, style=dashed, color=darkseagreen4, label=sep];
m3_88 -> m3_89  [key=0, style=solid];
m3_88 -> m3_98  [key=2, style=dotted];
m3_88 -> m3_104  [key=1, style=dashed, color=darkseagreen4, label=sep];
m3_90 -> m3_92  [key=1, style=dashed, color=darkseagreen4, label=e];
m3_90 -> m3_91  [key=0, style=solid];
m3_90 -> m3_99  [key=2, style=dotted];
m3_89 -> m3_92  [key=1, style=dashed, color=darkseagreen4, label=format];
m3_89 -> m3_90  [key=0, style=solid];
m3_89 -> m3_104  [key=1, style=dashed, color=darkseagreen4, label=object];
m3_91 -> m3_92  [key=0, style=solid];
m3_91 -> m3_93  [key=0, style=solid];
m3_91 -> m3_100  [key=2, style=dotted];
m3_86 -> m3_94  [key=0, style=solid];
m3_86 -> m3_97  [key=2, style=dotted];
m3_86 -> m3_96  [key=2, style=dotted];
m3_93 -> m3_94  [key=0, style=solid];
m3_93 -> m3_102  [key=2, style=dotted];
m3_84 -> m3_85  [key=0, style=solid];
m3_84 -> m3_87  [key=0, style=solid];
m3_87 -> m3_88  [key=0, style=solid];
m3_85 -> m3_86  [key=0, style=solid];
m3_95 -> m3_82  [key=0, style=bold, color=blue];
m3_131 -> m3_133  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.OptionSpecification"];
m3_131 -> m3_132  [key=0, style=solid];
m3_133 -> m3_49  [key=2, style=dotted];
m3_133 -> m3_134  [key=0, style=solid];
m3_133 -> m3_135  [key=2, style=dotted];
m3_133 -> m3_119  [key=2, style=dotted];
m3_133 -> m3_136  [key=2, style=dotted];
m3_132 -> m3_133  [key=0, style=solid];
m3_134 -> m3_131  [key=0, style=bold, color=blue];
m3_145 -> m3_148  [key=1, style=dashed, color=darkseagreen4, label=object];
m3_145 -> m3_150  [key=1, style=dashed, color=darkseagreen4, label=object];
m3_145 -> m3_146  [key=0, style=solid];
m3_145 -> m3_152  [key=1, style=dashed, color=darkseagreen4, label=object];
m3_145 -> m3_154  [key=1, style=dashed, color=darkseagreen4, label=object];
m3_148 -> m3_31  [key=2, style=dotted];
m3_148 -> m3_149  [key=0, style=solid];
m3_148 -> m3_150  [key=0, style=solid];
m3_148 -> m3_142  [key=2, style=dotted];
m3_148 -> m3_143  [key=2, style=dotted];
m3_150 -> m3_31  [key=2, style=dotted];
m3_150 -> m3_151  [key=0, style=solid];
m3_150 -> m3_152  [key=0, style=solid];
m3_150 -> m3_158  [key=2, style=dotted];
m3_150 -> m3_159  [key=2, style=dotted];
m3_146 -> m3_148  [key=0, style=solid];
m3_146 -> m3_147  [key=0, style=solid];
m3_149 -> m3_157  [key=0, style=solid];
m3_151 -> m3_157  [key=0, style=solid];
m3_152 -> m3_153  [key=0, style=solid];
m3_152 -> m3_154  [key=0, style=solid];
m3_154 -> m3_99  [key=2, style=dotted];
m3_154 -> m3_100  [key=2, style=dotted];
m3_154 -> m3_155  [key=0, style=solid];
m3_154 -> m3_156  [key=0, style=solid];
m3_147 -> m3_157  [key=0, style=solid];
m3_153 -> m3_157  [key=0, style=solid];
m3_155 -> m3_157  [key=0, style=solid];
m3_156 -> m3_157  [key=0, style=solid];
m3_157 -> m3_145  [key=0, style=bold, color=blue];
m3_110 -> m3_111  [key=0, style=solid];
m3_55 -> m3_56  [key=0, style=solid];
m3_78 -> m3_79  [key=0, style=solid, color=green];
m3_79 -> m3_80  [key=0, style=solid, color=green];
m3_79 -> m3_81  [key=2, style=dotted, color=green];
m3_79 -> m3_45  [key=2, style=dotted, color=green];
m3_79 -> m3_41  [key=2, style=dotted, color=green];
m3_80 -> m3_78  [key=0, style=bold, color=blue];
m3_56 -> m3_57  [key=0, style=solid];
m3_56 -> m3_58  [key=2, style=dotted];
m3_56 -> m3_59  [key=2, style=dotted];
m3_56 -> m3_60  [key=2, style=dotted];
m3_51 -> m3_52  [key=0, style=solid];
m3_61 -> m3_62  [key=0, style=solid];
m3_57 -> m3_55  [key=0, style=bold, color=blue];
m3_68 -> m3_69  [key=0, style=solid];
m3_71 -> m3_72  [key=0, style=solid];
m3_75 -> m3_45  [key=2, style=dotted];
m3_75 -> m3_41  [key=2, style=dotted];
m3_75 -> m3_76  [key=0, style=solid];
m3_75 -> m3_77  [key=2, style=dotted];
m3_74 -> m3_75  [key=0, style=solid];
m3_52 -> m3_41  [key=2, style=dotted];
m3_52 -> m3_53  [key=0, style=solid];
m3_52 -> m3_54  [key=2, style=dotted];
m3_53 -> m3_51  [key=0, style=bold, color=blue];
m3_65 -> m3_66  [key=0, style=solid];
m3_65 -> m3_67  [key=2, style=dotted];
m3_63 -> m3_61  [key=0, style=bold, color=blue];
m3_62 -> m3_63  [key=0, style=solid];
m3_64 -> m3_65  [key=0, style=solid];
m3_70 -> m3_68  [key=0, style=bold, color=blue];
m3_69 -> m3_70  [key=0, style=solid];
m3_73 -> m3_71  [key=0, style=bold, color=blue];
m3_72 -> m3_73  [key=0, style=solid];
m3_76 -> m3_74  [key=0, style=bold, color=blue];
m3_115 -> m3_116  [key=0, style=solid];
m3_123 -> m3_124  [key=0, style=solid];
m3_66 -> m3_64  [key=0, style=bold, color=blue];
m3_104 -> m3_96  [key=2, style=dotted];
m3_104 -> m3_105  [key=0, style=solid];
m3_111 -> m3_112  [key=0, style=solid];
m3_111 -> m3_113  [key=2, style=dotted];
m3_111 -> m3_114  [key=2, style=dotted];
m3_116 -> m3_67  [key=2, style=dotted];
m3_116 -> m3_119  [key=2, style=dotted];
m3_116 -> m3_117  [key=0, style=solid];
m3_116 -> m3_118  [key=2, style=dotted];
m3_117 -> m3_115  [key=0, style=bold, color=blue];
m3_125 -> m3_123  [key=0, style=bold, color=blue];
m3_124 -> m3_125  [key=0, style=solid];
m3_103 -> m3_104  [key=0, style=solid];
m3_105 -> m3_103  [key=0, style=bold, color=blue];
m3_112 -> m3_110  [key=0, style=bold, color=blue];
m3_96 -> m3_107  [key=1, style=dashed, color=darkseagreen4, label=object];
m3_96 -> m3_106  [key=0, style=solid];
m3_107 -> m3_34  [key=2, style=dotted];
m3_107 -> m3_108  [key=0, style=solid];
m3_107 -> m3_109  [key=2, style=dotted];
m3_107 -> m3_115  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_106 -> m3_107  [key=0, style=solid];
m3_106 -> m3_111  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_106 -> m3_116  [key=1, style=dashed, color=darkseagreen4, label=doubQt];
m3_108 -> m3_96  [key=0, style=bold, color=blue];
m3_7 -> m3_16  [key=1, style=dashed, color=green, label=T];
m3_7 -> m3_8  [key=0, style=solid];
m3_7 -> m3_11  [key=1, style=dashed, color=darkseagreen4, label="System.Action<CommandLine.UnParserSettings>"];
m3_7 -> m3_13  [key=1, style=dashed, color=darkseagreen4, label=T];
m3_7 -> m3_56  [key=1, style=dashed, color=darkseagreen4, label=T];
m3_16 -> m3_16  [key=1, style=dashed, color=green, label=info];
m3_16 -> m3_17  [key=0, style=solid, color=green];
m3_16 -> m3_35  [key=2, style=dotted, color=green];
m3_16 -> m3_36  [key=2, style=dotted, color=green];
m3_16 -> m3_37  [key=2, style=dotted, color=green];
m3_16 -> m3_55  [key=1, style=dashed, color=green, label="lambda expression"];
m3_16 -> m3_20  [key=1, style=dashed, color=green, label=specs];
m3_13 -> m3_16  [key=1, style=dashed, color=green, label=type];
m3_13 -> m3_14  [key=0, style=solid];
m3_13 -> m3_31  [key=2, style=dotted];
m3_13 -> m3_15  [key=1, style=dashed, color=darkseagreen4, label=type];
m3_15 -> m3_16  [key=0, style=solid, color=green];
m3_15 -> m3_33  [key=2, style=dotted];
m3_15 -> m3_34  [key=2, style=dotted];
m3_15 -> m3_51  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_17 -> m3_17  [key=1, style=dashed, color=darkseagreen4, label=info];
m3_17 -> m3_18  [key=0, style=solid];
m3_17 -> m3_38  [key=2, style=dotted];
m3_17 -> m3_39  [key=2, style=dotted];
m3_17 -> m3_61  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_17 -> m3_19  [key=1, style=dashed, color=darkseagreen4, label=allOptSpecs];
m3_20 -> m3_24  [key=1, style=dashed, color=green, label=valSpecs];
m3_20 -> m3_25  [key=1, style=dashed, color=green, label=valSpecs];
m3_20 -> m3_20  [key=1, style=dashed, color=darkseagreen4, label=info];
m3_20 -> m3_21  [key=0, style=solid];
m3_20 -> m3_38  [key=2, style=dotted];
m3_20 -> m3_68  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_24 -> m3_25  [key=0, style=solid, color=green];
m3_24 -> m3_40  [key=2, style=dotted, color=green];
m3_24 -> m3_46  [key=2, style=dotted, color=green];
m3_24 -> m3_47  [key=2, style=dotted, color=green];
m3_21 -> m3_24  [key=1, style=dashed, color=green, label=builder];
m3_21 -> m3_25  [key=1, style=dashed, color=green, label=builder];
m3_21 -> m3_79  [key=1, style=dashed, color=green, label=builder];
m3_21 -> m3_21  [key=1, style=dashed, color=darkseagreen4, label=builder];
m3_21 -> m3_22  [key=0, style=solid];
m3_21 -> m3_40  [key=2, style=dotted];
m3_21 -> m3_41  [key=2, style=dotted];
m3_21 -> m3_42  [key=2, style=dotted];
m3_21 -> m3_43  [key=2, style=dotted];
m3_21 -> m3_44  [key=2, style=dotted];
m3_21 -> m3_45  [key=2, style=dotted];
m3_21 -> m3_71  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_21 -> m3_23  [key=1, style=dashed, color=darkseagreen4, label=builder];
m3_21 -> m3_75  [key=1, style=dashed, color=darkseagreen4, label=builder];
m3_21 -> m3_26  [key=1, style=dashed, color=darkseagreen4, label=builder];
m3_23 -> m3_24  [key=0, style=solid, color=green];
m3_23 -> m3_48  [key=2, style=dotted];
m3_23 -> m3_74  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_25 -> m3_26  [key=0, style=solid, color=green];
m3_25 -> m3_48  [key=2, style=dotted, color=green];
m3_25 -> m3_78  [key=1, style=dashed, color=green, label="lambda expression"];
m3_26 -> m3_27  [key=0, style=solid];
m3_26 -> m3_49  [key=2, style=dotted];
m3_26 -> m3_50  [key=2, style=dotted];
m3_8 -> m3_9  [key=0, style=solid];
m3_8 -> m3_10  [key=0, style=solid];
m3_11 -> m3_12  [key=0, style=solid];
m3_11 -> m3_30  [key=2, style=dotted];
m3_12 -> m3_13  [key=0, style=solid];
m3_14 -> m3_15  [key=0, style=solid];
m3_14 -> m3_21  [key=1, style=dashed, color=darkseagreen4, label=builder];
m3_14 -> m3_32  [key=2, style=dotted];
m3_14 -> m3_52  [key=1, style=dashed, color=darkseagreen4, label=builder];
m3_18 -> m3_21  [key=1, style=dashed, color=darkseagreen4, label=shortSwitches];
m3_18 -> m3_18  [key=1, style=dashed, color=darkseagreen4, label=info];
m3_18 -> m3_19  [key=0, style=solid];
m3_18 -> m3_39  [key=2, style=dotted];
m3_18 -> m3_65  [key=1, style=dashed, color=darkseagreen4, label=shortSwitches];
m3_19 -> m3_20  [key=0, style=solid];
m3_19 -> m3_23  [key=1, style=dashed, color=darkseagreen4, label=optSpecs];
m3_19 -> m3_38  [key=2, style=dotted];
m3_19 -> m3_64  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_19 -> m3_22  [key=1, style=dashed, color=darkseagreen4, label=optSpecs];
m3_10 -> m3_21  [key=1, style=dashed, color=darkseagreen4, label=settings];
m3_10 -> m3_23  [key=1, style=dashed, color=darkseagreen4, label=settings];
m3_10 -> m3_11  [key=0, style=solid];
m3_10 -> m3_12  [key=1, style=dashed, color=darkseagreen4, label=settings];
m3_10 -> m3_19  [key=1, style=dashed, color=darkseagreen4, label=settings];
m3_10 -> m3_29  [key=2, style=dotted];
m3_10 -> m3_75  [key=1, style=dashed, color=darkseagreen4, label=settings];
m3_22 -> m3_23  [key=0, style=solid];
m3_22 -> m3_40  [key=2, style=dotted];
m3_22 -> m3_46  [key=2, style=dotted];
m3_22 -> m3_47  [key=2, style=dotted];
m3_9 -> m3_27  [key=0, style=solid];
m3_9 -> m3_28  [key=2, style=dotted];
m3_27 -> m3_7  [key=0, style=bold, color=blue];
m3_126 -> m3_127  [key=0, style=solid];
m3_127 -> m3_45  [key=2, style=dotted];
m3_127 -> m3_49  [key=2, style=dotted];
m3_127 -> m3_128  [key=0, style=solid];
m3_127 -> m3_32  [key=2, style=dotted];
m3_127 -> m3_129  [key=2, style=dotted];
m3_127 -> m3_82  [key=2, style=dotted];
m3_127 -> m3_130  [key=2, style=dotted];
m3_128 -> m3_126  [key=0, style=bold, color=blue];
m3_137 -> m3_138  [key=0, style=solid];
m3_137 -> m3_139  [key=1, style=dashed, color=darkseagreen4, label=object];
m3_137 -> m3_140  [key=1, style=dashed, color=darkseagreen4, label=object];
m3_138 -> m3_31  [key=2, style=dotted];
m3_138 -> m3_139  [key=0, style=solid];
m3_138 -> m3_140  [key=0, style=solid];
m3_138 -> m3_142  [key=2, style=dotted];
m3_138 -> m3_143  [key=2, style=dotted];
m3_139 -> m3_141  [key=0, style=solid];
m3_139 -> m3_144  [key=2, style=dotted];
m3_140 -> m3_141  [key=0, style=solid];
m3_141 -> m3_137  [key=0, style=bold, color=blue];
m3_160 -> m3_79  [key=1, style=dashed, color=green, label=builder];
m3_160 -> m3_52  [key=1, style=dashed, color=darkseagreen4, label=builder];
m3_160 -> m3_75  [key=1, style=dashed, color=darkseagreen4, label=builder];
m3_161 -> m3_56  [key=1, style=dashed, color=darkseagreen4, label=T];
m3_163 -> m3_75  [key=1, style=dashed, color=darkseagreen4, label=settings];
m3_162 -> m3_65  [key=1, style=dashed, color=darkseagreen4, label=shortSwitches];
m3_164 -> m3_104  [key=1, style=dashed, color=darkseagreen4, label=sep];
m3_165 -> m3_116  [key=1, style=dashed, color=darkseagreen4, label=doubQt];
m4_0 -> m4_1  [key=0, style=solid];
m4_1 -> m4_2  [key=0, style=solid];
m4_1 -> m4_7  [key=2, style=dotted];
m4_1 -> m4_3  [key=1, style=dashed, color=darkseagreen4, label=ae];
m4_1 -> m4_5  [key=1, style=dashed, color=darkseagreen4, label=ae];
m4_2 -> m4_3  [key=0, style=solid];
m4_2 -> m4_8  [key=2, style=dotted];
m4_3 -> m4_4  [key=0, style=solid];
m4_3 -> m4_9  [key=2, style=dotted];
m4_5 -> m4_6  [key=0, style=solid];
m4_5 -> m4_11  [key=2, style=dotted];
m4_5 -> m4_12  [key=2, style=dotted];
m4_4 -> m4_5  [key=0, style=solid];
m4_4 -> m4_10  [key=2, style=dotted];
m4_6 -> m4_0  [key=0, style=bold, color=blue];
m4_13 -> m4_4  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Unit.Infrastructure.ArgumentParserFixture"];
m6_2 -> m6_3  [key=0, style=solid];
m6_2 -> m6_4  [key=1, style=dashed, color=darkseagreen4, label=string];
m6_3 -> m6_4  [key=0, style=solid];
m6_4 -> m6_5  [key=0, style=solid];
m6_5 -> m6_2  [key=0, style=bold, color=blue];
m6_0 -> m6_1  [key=0, style=solid];
m6_1 -> m6_0  [key=0, style=bold, color=blue];
m6_6 -> m6_3  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.BadOptionInfo"];
m6_6 -> m6_4  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.BadOptionInfo"];
m7_16 -> m7_17  [key=0, style=solid];
m7_16 -> m7_19  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m7_16 -> m7_21  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m7_16 -> m7_23  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m7_16 -> m7_25  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m7_16 -> m7_28  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m7_16 -> m7_31  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m7_16 -> m7_34  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m7_44 -> m7_45  [key=0, style=solid, color=green];
m7_44 -> m7_49  [key=2, style=dotted, color=green];
m7_44 -> m7_50  [key=2, style=dotted, color=green];
m7_44 -> m7_52  [key=1, style=dashed, color=green, label="lambda expression"];
m7_41 -> m7_44  [key=1, style=dashed, color=green, label=bySet];
m7_41 -> m7_41  [key=1, style=dashed, color=darkseagreen4, label=e];
m7_41 -> m7_42  [key=0, style=solid];
m7_41 -> m7_47  [key=2, style=dotted];
m7_42 -> m7_44  [key=0, style=solid, color=green];
m7_42 -> m7_43  [key=0, style=solid];
m7_42 -> m7_48  [key=2, style=dotted];
m7_45 -> m7_46  [key=0, style=solid];
m7_45 -> m7_51  [key=2, style=dotted];
m7_52 -> m7_53  [key=0, style=solid];
m7_52 -> m7_54  [key=1, style=dashed, color=darkseagreen4, label="?"];
m7_52 -> m7_55  [key=1, style=dashed, color=darkseagreen4, label="?"];
m7_40 -> m7_41  [key=0, style=solid];
m7_40 -> m7_40  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Collections.Generic.IEnumerable<string> arguments"];
m7_40 -> m7_16  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Collections.Generic.IEnumerable<string> arguments"];
m7_43 -> m7_46  [key=0, style=solid];
m7_43 -> m7_39  [key=2, style=dotted];
m7_46 -> m7_40  [key=0, style=bold, color=blue];
m7_53 -> m7_50  [key=2, style=dotted];
m7_53 -> m7_51  [key=2, style=dotted];
m7_53 -> m7_53  [key=1, style=dashed, color=darkseagreen4, label=e];
m7_53 -> m7_54  [key=0, style=solid];
m7_53 -> m7_56  [key=1, style=dashed, color=darkseagreen4, label=names];
m7_55 -> m7_50  [key=2, style=dotted];
m7_55 -> m7_51  [key=2, style=dotted];
m7_55 -> m7_55  [key=1, style=dashed, color=darkseagreen4, label=e];
m7_55 -> m7_56  [key=0, style=solid];
m7_55 -> m7_58  [key=2, style=dotted];
m7_57 -> m7_52  [key=0, style=bold, color=blue];
m7_54 -> m7_48  [key=2, style=dotted];
m7_54 -> m7_55  [key=0, style=solid];
m7_54 -> m7_56  [key=1, style=dashed, color=darkseagreen4, label=namesCount];
m7_56 -> m7_57  [key=0, style=solid];
m7_56 -> m7_59  [key=2, style=dotted];
m7_56 -> m7_60  [key=2, style=dotted];
m7_56 -> m7_61  [key=2, style=dotted];
m7_56 -> m7_62  [key=2, style=dotted];
m7_56 -> m7_63  [key=2, style=dotted];
m7_56 -> m7_64  [key=2, style=dotted];
m7_56 -> m7_65  [key=2, style=dotted];
m7_17 -> m7_18  [key=0, style=solid];
m7_17 -> m7_20  [key=0, style=solid];
m7_17 -> m7_22  [key=0, style=solid];
m7_17 -> m7_24  [key=0, style=solid];
m7_17 -> m7_27  [key=0, style=solid];
m7_17 -> m7_30  [key=0, style=solid];
m7_17 -> m7_33  [key=0, style=solid];
m7_17 -> m7_35  [key=0, style=solid];
m7_19 -> m7_37  [key=0, style=solid];
m7_21 -> m7_37  [key=0, style=solid];
m7_23 -> m7_37  [key=0, style=solid];
m7_25 -> m7_26  [key=0, style=solid];
m7_28 -> m7_29  [key=0, style=solid];
m7_31 -> m7_32  [key=0, style=solid];
m7_34 -> m7_37  [key=0, style=solid];
m7_38 -> m7_39  [key=2, style=dotted];
m7_38 -> m7_37  [key=0, style=solid];
m7_26 -> m7_37  [key=0, style=solid];
m7_29 -> m7_37  [key=0, style=solid];
m7_32 -> m7_37  [key=0, style=solid];
m7_36 -> m7_37  [key=0, style=solid];
m7_18 -> m7_19  [key=0, style=solid];
m7_20 -> m7_21  [key=0, style=solid];
m7_22 -> m7_23  [key=0, style=solid];
m7_24 -> m7_25  [key=0, style=solid];
m7_27 -> m7_28  [key=0, style=solid];
m7_30 -> m7_31  [key=0, style=solid];
m7_33 -> m7_34  [key=0, style=solid];
m7_35 -> m7_36  [key=0, style=solid];
m7_37 -> m7_16  [key=0, style=bold, color=blue];
m11_0 -> m11_1  [key=0, style=solid];
m11_0 -> m11_3  [key=1, style=dashed, color=darkseagreen4, label=T];
m11_1 -> m11_2  [key=0, style=solid];
m11_1 -> m11_3  [key=0, style=solid];
m11_3 -> m11_4  [key=0, style=solid];
m11_2 -> m11_4  [key=0, style=solid];
m11_2 -> m11_5  [key=2, style=dotted];
m11_4 -> m11_0  [key=0, style=bold, color=blue];
m12_100 -> m12_103  [key=0, style=solid];
m12_103 -> m12_104  [key=0, style=solid];
m12_104 -> m12_100  [key=0, style=bold, color=blue];
m12_46 -> m12_73  [key=0, style=solid];
m12_73 -> m12_74  [key=0, style=solid];
m12_73 -> m12_78  [key=1, style=dashed, color=darkseagreen4, label=requiredRulesAllMet];
m12_74 -> m12_75  [key=0, style=solid];
m12_74 -> m12_78  [key=0, style=solid];
m12_74 -> m12_76  [key=1, style=dashed, color=darkseagreen4, label=option];
m12_78 -> m12_79  [key=0, style=solid];
m12_75 -> m12_76  [key=0, style=solid];
m12_75 -> m12_74  [key=0, style=solid];
m12_76 -> m12_77  [key=0, style=solid];
m12_76 -> m12_52  [key=2, style=dotted];
m12_77 -> m12_74  [key=0, style=solid];
m12_77 -> m12_78  [key=1, style=dashed, color=darkseagreen4, label=requiredRulesAllMet];
m12_79 -> m12_46  [key=0, style=bold, color=blue];
m12_0 -> m12_1  [key=0, style=solid];
m12_0 -> m12_3  [key=1, style=dashed, color=darkseagreen4, label=int];
m12_0 -> m12_4  [key=1, style=dashed, color=darkseagreen4, label=int];
m12_0 -> m12_6  [key=1, style=dashed, color=darkseagreen4, label=int];
m12_1 -> m12_2  [key=0, style=solid, color=red];
m12_3 -> m12_4  [key=0, style=solid];
m12_3 -> m12_8  [key=2, style=dotted];
m12_4 -> m12_5  [key=0, style=solid];
m12_4 -> m12_8  [key=2, style=dotted];
m12_6 -> m12_7  [key=0, style=solid];
m12_6 -> m12_8  [key=2, style=dotted];
m12_2 -> m12_3  [key=0, style=solid, color=red];
m12_2 -> m12_4  [key=1, style=dashed, color=red, label=comparer];
m12_5 -> m12_6  [key=0, style=solid];
m12_5 -> m12_7  [key=0, style=solid];
m12_7 -> m12_0  [key=0, style=bold, color=blue];
m12_9 -> m12_10  [key=0, style=solid];
m12_9 -> m12_13  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m12_9 -> m12_21  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m12_9 -> m12_22  [key=1, style=dashed, color=darkseagreen4, label=object];
m12_10 -> m12_11  [key=0, style=solid];
m12_10 -> m12_25  [key=2, style=dotted];
m12_10 -> m12_13  [key=1, style=dashed, color=darkseagreen4, label=list];
m12_10 -> m12_14  [key=1, style=dashed, color=darkseagreen4, label=list];
m12_13 -> m12_14  [key=0, style=solid];
m12_13 -> m12_0  [key=2, style=dotted];
m12_13 -> m12_21  [key=1, style=dashed, color=darkseagreen4, label=map];
m12_13 -> m12_22  [key=1, style=dashed, color=darkseagreen4, label=map];
m12_13 -> m12_23  [key=1, style=dashed, color=darkseagreen4, label=map];
m12_21 -> m12_14  [key=0, style=solid];
m12_21 -> m12_27  [key=2, style=dotted];
m12_22 -> m12_23  [key=0, style=solid];
m12_11 -> m12_12  [key=0, style=solid];
m12_11 -> m12_13  [key=0, style=solid];
m12_14 -> m12_15  [key=0, style=solid];
m12_14 -> m12_22  [key=0, style=solid];
m12_14 -> m12_17  [key=1, style=dashed, color=darkseagreen4, label=pair];
m12_14 -> m12_18  [key=1, style=dashed, color=darkseagreen4, label=pair];
m12_14 -> m12_19  [key=1, style=dashed, color=darkseagreen4, label=pair];
m12_14 -> m12_20  [key=1, style=dashed, color=darkseagreen4, label=pair];
m12_14 -> m12_21  [key=1, style=dashed, color=darkseagreen4, label=pair];
m12_12 -> m12_24  [key=0, style=solid];
m12_23 -> m12_24  [key=0, style=solid];
m12_15 -> m12_16  [key=0, style=solid];
m12_15 -> m12_14  [key=0, style=solid];
m12_17 -> m12_18  [key=0, style=solid];
m12_17 -> m12_20  [key=0, style=solid];
m12_18 -> m12_19  [key=0, style=solid];
m12_18 -> m12_26  [key=2, style=dotted];
m12_18 -> m12_21  [key=1, style=dashed, color=darkseagreen4, label=uniqueName];
m12_19 -> m12_21  [key=0, style=solid];
m12_20 -> m12_21  [key=0, style=solid];
m12_16 -> m12_17  [key=0, style=solid];
m12_24 -> m12_9  [key=0, style=bold, color=blue];
m12_42 -> m12_43  [key=0, style=solid];
m12_43 -> m12_44  [key=0, style=solid];
m12_43 -> m12_45  [key=2, style=dotted];
m12_43 -> m12_46  [key=2, style=dotted];
m12_44 -> m12_42  [key=0, style=bold, color=blue];
m12_28 -> m12_29  [key=0, style=solid];
m12_28 -> m12_30  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IList<CommandLine.Helpers.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>"];
m12_28 -> m12_31  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m12_28 -> m12_32  [key=1, style=dashed, color=darkseagreen4, label=object];
m12_28 -> m12_35  [key=1, style=dashed, color=darkseagreen4, label=object];
m12_29 -> m12_30  [key=0, style=solid];
m12_29 -> m12_0  [key=2, style=dotted];
m12_29 -> m12_34  [key=1, style=dashed, color=darkseagreen4, label=map];
m12_29 -> m12_35  [key=1, style=dashed, color=darkseagreen4, label=map];
m12_29 -> m12_36  [key=1, style=dashed, color=darkseagreen4, label=map];
m12_30 -> m12_31  [key=0, style=solid];
m12_30 -> m12_35  [key=0, style=solid];
m12_30 -> m12_32  [key=1, style=dashed, color=darkseagreen4, label=verb];
m12_30 -> m12_33  [key=1, style=dashed, color=darkseagreen4, label=verb];
m12_30 -> m12_34  [key=1, style=dashed, color=darkseagreen4, label=verb];
m12_31 -> m12_32  [key=0, style=solid];
m12_31 -> m12_27  [key=2, style=dotted];
m12_31 -> m12_38  [key=2, style=dotted];
m12_31 -> m12_34  [key=1, style=dashed, color=darkseagreen4, label=optionInfo];
m12_32 -> m12_33  [key=0, style=solid];
m12_32 -> m12_34  [key=0, style=solid];
m12_32 -> m12_39  [key=2, style=dotted];
m12_35 -> m12_36  [key=0, style=solid];
m12_34 -> m12_30  [key=0, style=solid];
m12_36 -> m12_37  [key=0, style=solid];
m12_33 -> m12_37  [key=0, style=solid];
m12_33 -> m12_40  [key=2, style=dotted];
m12_33 -> m12_41  [key=2, style=dotted];
m12_37 -> m12_28  [key=0, style=bold, color=blue];
m12_98 -> m12_101  [key=0, style=solid];
m12_101 -> m12_102  [key=0, style=solid];
m12_102 -> m12_98  [key=0, style=bold, color=blue];
m12_47 -> m12_48  [key=0, style=solid];
m12_48 -> m12_49  [key=0, style=solid];
m12_48 -> m12_50  [key=0, style=solid];
m12_49 -> m12_48  [key=0, style=solid];
m12_49 -> m12_51  [key=2, style=dotted];
m12_50 -> m12_47  [key=0, style=bold, color=blue];
m12_52 -> m12_53  [key=0, style=solid];
m12_52 -> m12_57  [key=1, style=dashed, color=darkseagreen4, label=object];
m12_52 -> m12_58  [key=1, style=dashed, color=darkseagreen4, label=object];
m12_52 -> m12_59  [key=1, style=dashed, color=darkseagreen4, label=object];
m12_52 -> m12_62  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.OptionInfo"];
m12_52 -> m12_63  [key=1, style=dashed, color=darkseagreen4, label="bool?"];
m12_52 -> m12_64  [key=1, style=dashed, color=darkseagreen4, label="bool?"];
m12_52 -> m12_65  [key=1, style=dashed, color=darkseagreen4, label="bool?"];
m12_52 -> m12_66  [key=1, style=dashed, color=darkseagreen4, label="bool?"];
m12_53 -> m12_54  [key=0, style=solid];
m12_53 -> m12_25  [key=2, style=dotted];
m12_53 -> m12_56  [key=1, style=dashed, color=darkseagreen4, label=list];
m12_57 -> m12_58  [key=0, style=solid];
m12_57 -> m12_59  [key=0, style=solid];
m12_57 -> m12_39  [key=2, style=dotted];
m12_58 -> m12_59  [key=0, style=solid];
m12_58 -> m12_69  [key=2, style=dotted];
m12_58 -> m12_70  [key=2, style=dotted];
m12_59 -> m12_60  [key=0, style=solid];
m12_59 -> m12_39  [key=2, style=dotted];
m12_59 -> m12_67  [key=1, style=dashed, color=darkseagreen4, label=parserState];
m12_62 -> m12_63  [key=0, style=solid];
m12_62 -> m12_71  [key=2, style=dotted];
m12_62 -> m12_64  [key=1, style=dashed, color=darkseagreen4, label=error];
m12_62 -> m12_66  [key=1, style=dashed, color=darkseagreen4, label=error];
m12_62 -> m12_67  [key=1, style=dashed, color=darkseagreen4, label=error];
m12_63 -> m12_64  [key=0, style=solid];
m12_63 -> m12_65  [key=0, style=solid];
m12_64 -> m12_65  [key=0, style=solid];
m12_65 -> m12_66  [key=0, style=solid];
m12_65 -> m12_67  [key=0, style=solid];
m12_66 -> m12_67  [key=0, style=solid];
m12_54 -> m12_55  [key=0, style=solid];
m12_54 -> m12_56  [key=0, style=solid];
m12_56 -> m12_57  [key=0, style=solid];
m12_56 -> m12_58  [key=1, style=dashed, color=darkseagreen4, label=property];
m12_56 -> m12_59  [key=1, style=dashed, color=darkseagreen4, label=property];
m12_55 -> m12_68  [key=0, style=solid];
m12_60 -> m12_61  [key=0, style=solid];
m12_60 -> m12_62  [key=0, style=solid];
m12_67 -> m12_68  [key=0, style=solid];
m12_67 -> m12_72  [key=2, style=dotted];
m12_61 -> m12_68  [key=0, style=solid];
m12_68 -> m12_52  [key=0, style=bold, color=blue];
m12_45 -> m12_80  [key=0, style=solid];
m12_80 -> m12_81  [key=0, style=solid];
m12_80 -> m12_82  [key=0, style=solid];
m12_81 -> m12_90  [key=0, style=solid];
m12_82 -> m12_83  [key=0, style=solid];
m12_82 -> m12_85  [key=0, style=solid];
m12_82 -> m12_84  [key=1, style=dashed, color=darkseagreen4, label=option];
m12_83 -> m12_84  [key=0, style=solid];
m12_83 -> m12_82  [key=0, style=solid];
m12_85 -> m12_86  [key=0, style=solid];
m12_85 -> m12_89  [key=0, style=solid];
m12_85 -> m12_87  [key=1, style=dashed, color=darkseagreen4, label=info];
m12_84 -> m12_82  [key=0, style=solid];
m12_84 -> m12_91  [key=2, style=dotted];
m12_86 -> m12_87  [key=0, style=solid];
m12_86 -> m12_85  [key=0, style=solid];
m12_89 -> m12_90  [key=0, style=solid];
m12_87 -> m12_88  [key=0, style=solid];
m12_87 -> m12_52  [key=2, style=dotted];
m12_88 -> m12_90  [key=0, style=solid];
m12_90 -> m12_45  [key=0, style=bold, color=blue];
m12_91 -> m12_92  [key=0, style=solid];
m12_91 -> m12_94  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.OptionInfo"];
m12_92 -> m12_93  [key=0, style=solid];
m12_92 -> m12_94  [key=1, style=dashed, color=darkseagreen4, label=setName];
m12_92 -> m12_95  [key=1, style=dashed, color=darkseagreen4, label=setName];
m12_94 -> m12_95  [key=0, style=solid];
m12_94 -> m12_98  [key=2, style=dotted];
m12_94 -> m12_99  [key=2, style=dotted];
m12_93 -> m12_94  [key=0, style=solid];
m12_93 -> m12_95  [key=0, style=solid];
m12_93 -> m12_97  [key=2, style=dotted];
m12_95 -> m12_96  [key=0, style=solid];
m12_95 -> m12_100  [key=2, style=dotted];
m12_96 -> m12_91  [key=0, style=bold, color=blue];
m12_105 -> m12_1  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.OptionMap"];
m12_105 -> m12_2  [key=1, style=dashed, color=red, label="CommandLine.Infrastructure.OptionMap"];
m12_105 -> m12_3  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.OptionMap"];
m12_105 -> m12_4  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.OptionMap"];
m12_105 -> m12_5  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.OptionMap"];
m12_105 -> m12_6  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.OptionMap"];
m12_105 -> m12_43  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.OptionMap"];
m12_105 -> m12_48  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.OptionMap"];
m12_105 -> m12_49  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.OptionMap"];
m12_105 -> m12_74  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.OptionMap"];
m12_105 -> m12_76  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.OptionMap"];
m12_105 -> m12_80  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.OptionMap"];
m12_105 -> m12_82  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.OptionMap"];
m12_105 -> m12_84  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.OptionMap"];
m12_105 -> m12_85  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.OptionMap"];
m12_105 -> m12_87  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.OptionMap"];
m12_105 -> m12_93  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.OptionMap"];
m12_105 -> m12_94  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.OptionMap"];
m12_105 -> m12_95  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.OptionMap"];
m12_106 -> m12_101  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.OptionMap.MutuallyExclusiveInfo"];
m12_106 -> m12_103  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.OptionMap.MutuallyExclusiveInfo"];
m13_3 -> m13_7  [key=0, style=solid, color=red];
m13_3 -> m13_9  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m13_3 -> m13_10  [key=1, style=dashed, color=darkseagreen4, label="System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>"];
m13_3 -> m13_11  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, CommandLine.Core.NameLookupResult>"];
m13_7 -> m13_8  [key=0, style=solid, color=red];
m13_7 -> m13_14  [key=2, style=dotted, color=red];
m13_7 -> m13_12  [key=1, style=dashed, color=red, label=errors];
m13_9 -> m13_10  [key=0, style=solid];
m13_9 -> m13_15  [key=2, style=dotted];
m13_9 -> m13_16  [key=2, style=dotted];
m13_9 -> m13_17  [key=2, style=dotted];
m13_9 -> m13_18  [key=2, style=dotted];
m13_9 -> m13_19  [key=2, style=dotted];
m13_9 -> m13_9  [key=1, style=dashed, color=darkseagreen4, label=arg];
m13_10 -> m13_11  [key=0, style=solid];
m13_10 -> m13_20  [key=2, style=dotted];
m13_10 -> m13_12  [key=1, style=dashed, color=darkseagreen4, label=normalized];
m13_11 -> m13_12  [key=0, style=solid];
m13_11 -> m13_21  [key=2, style=dotted];
m13_11 -> m13_22  [key=2, style=dotted];
m13_11 -> m13_19  [key=2, style=dotted];
m13_11 -> m13_11  [key=1, style=dashed, color=darkseagreen4, label=t];
m13_11 -> m13_28  [key=1, style=dashed, color=darkseagreen4, label=unkTokens];
m13_8 -> m13_9  [key=0, style=solid];
m13_12 -> m13_13  [key=0, style=solid];
m13_12 -> m13_23  [key=2, style=dotted];
m13_12 -> m13_24  [key=2, style=dotted];
m13_12 -> m13_25  [key=2, style=dotted];
m13_12 -> m13_26  [key=2, style=dotted];
m13_12 -> m13_27  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_12 -> m13_12  [key=1, style=dashed, color=darkseagreen4, label=t];
m13_13 -> m13_3  [key=0, style=bold, color=blue];
m13_31 -> m13_32  [key=0, style=solid];
m13_31 -> m13_33  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m13_31 -> m13_34  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m13_31 -> m13_36  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m13_32 -> m13_33  [key=0, style=solid];
m13_32 -> m13_36  [key=0, style=solid];
m13_32 -> m13_38  [key=2, style=dotted];
m13_32 -> m13_44  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_33 -> m13_34  [key=0, style=solid];
m13_33 -> m13_39  [key=2, style=dotted];
m13_33 -> m13_22  [key=2, style=dotted];
m13_33 -> m13_48  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_33 -> m13_35  [key=1, style=dashed, color=darkseagreen4, label=tokenizerResult];
m13_34 -> m13_35  [key=0, style=solid];
m13_34 -> m13_40  [key=2, style=dotted];
m13_34 -> m13_41  [key=2, style=dotted];
m13_34 -> m13_42  [key=2, style=dotted];
m13_34 -> m13_51  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_34 -> m13_55  [key=1, style=dashed, color=darkseagreen4, label=values];
m13_36 -> m13_37  [key=0, style=solid];
m13_36 -> m13_22  [key=2, style=dotted];
m13_35 -> m13_37  [key=0, style=solid];
m13_35 -> m13_43  [key=2, style=dotted];
m13_35 -> m13_54  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_37 -> m13_31  [key=0, style=bold, color=blue];
m13_97 -> m13_98  [key=0, style=solid];
m13_97 -> m13_106  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
m13_97 -> m13_107  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, bool>"];
m13_97 -> m13_115  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, bool>"];
m13_97 -> m13_99  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
m13_97 -> m13_100  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
m13_98 -> m13_99  [key=0, style=solid];
m13_98 -> m13_42  [key=2, style=dotted];
m13_98 -> m13_23  [key=2, style=dotted];
m13_98 -> m13_103  [key=2, style=dotted];
m13_98 -> m13_105  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_98 -> m13_119  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_98 -> m13_98  [key=1, style=dashed, color=darkseagreen4, label=i];
m13_98 -> m13_124  [key=1, style=dashed, color=darkseagreen4, label=indexes];
m13_99 -> m13_100  [key=0, style=solid];
m13_99 -> m13_42  [key=2, style=dotted];
m13_99 -> m13_23  [key=2, style=dotted];
m13_99 -> m13_103  [key=2, style=dotted];
m13_99 -> m13_123  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_99 -> m13_126  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_99 -> m13_99  [key=1, style=dashed, color=darkseagreen4, label=t];
m13_100 -> m13_101  [key=0, style=solid];
m13_100 -> m13_104  [key=2, style=dotted];
m13_101 -> m13_102  [key=0, style=solid];
m13_102 -> m13_97  [key=0, style=bold, color=blue];
m13_18 -> m13_162  [key=0, style=solid];
m13_18 -> m13_165  [key=0, style=bold, color=crimson];
m13_18 -> m13_166  [key=0, style=bold, color=crimson];
m13_18 -> m13_168  [key=0, style=bold, color=crimson];
m13_18 -> m13_169  [key=0, style=bold, color=crimson];
m13_18 -> m13_176  [key=0, style=bold, color=crimson];
m13_18 -> m13_179  [key=0, style=bold, color=crimson];
m13_18 -> m13_163  [key=1, style=dashed, color=darkseagreen4, label=string];
m13_18 -> m13_167  [key=1, style=dashed, color=darkseagreen4, label=string];
m13_18 -> m13_173  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, CommandLine.Core.NameLookupResult>"];
m13_162 -> m13_163  [key=0, style=solid];
m13_162 -> m13_180  [key=0, style=solid];
m13_165 -> m13_166  [key=0, style=solid];
m13_165 -> m13_16  [key=2, style=dotted];
m13_166 -> m13_167  [key=0, style=solid];
m13_168 -> m13_169  [key=0, style=solid];
m13_168 -> m13_183  [key=2, style=dotted];
m13_169 -> m13_170  [key=0, style=solid];
m13_176 -> m13_177  [key=0, style=solid];
m13_176 -> m13_183  [key=2, style=dotted];
m13_179 -> m13_180  [key=0, style=solid];
m13_179 -> m13_181  [key=2, style=dotted];
m13_179 -> m13_16  [key=2, style=dotted];
m13_163 -> m13_164  [key=0, style=solid];
m13_163 -> m13_181  [key=2, style=dotted];
m13_163 -> m13_168  [key=1, style=dashed, color=darkseagreen4, label=text];
m13_163 -> m13_171  [key=1, style=dashed, color=darkseagreen4, label=text];
m13_163 -> m13_178  [key=1, style=dashed, color=darkseagreen4, label=text];
m13_163 -> m13_179  [key=1, style=dashed, color=darkseagreen4, label=text];
m13_167 -> m13_168  [key=0, style=solid];
m13_167 -> m13_170  [key=0, style=solid];
m13_173 -> m13_174  [key=0, style=solid];
m13_173 -> m13_22  [key=2, style=dotted];
m13_173 -> m13_177  [key=1, style=dashed, color=darkseagreen4, label=r];
m13_164 -> m13_165  [key=0, style=solid];
m13_164 -> m13_167  [key=0, style=solid];
m13_164 -> m13_182  [key=2, style=dotted];
m13_171 -> m13_172  [key=0, style=solid];
m13_171 -> m13_178  [key=0, style=solid];
m13_178 -> m13_179  [key=0, style=solid];
m13_178 -> m13_180  [key=0, style=solid];
m13_170 -> m13_171  [key=0, style=solid];
m13_170 -> m13_174  [key=1, style=dashed, color=darkseagreen4, label=i];
m13_170 -> m13_175  [key=1, style=dashed, color=darkseagreen4, label=i];
m13_170 -> m13_178  [key=1, style=dashed, color=darkseagreen4, label=i];
m13_170 -> m13_179  [key=1, style=dashed, color=darkseagreen4, label=i];
m13_174 -> m13_175  [key=0, style=solid];
m13_174 -> m13_178  [key=0, style=solid];
m13_175 -> m13_176  [key=0, style=solid];
m13_175 -> m13_175  [key=1, style=dashed, color=darkseagreen4, label=i];
m13_175 -> m13_178  [key=1, style=dashed, color=darkseagreen4, label=i];
m13_175 -> m13_179  [key=1, style=dashed, color=darkseagreen4, label=i];
m13_172 -> m13_173  [key=0, style=solid];
m13_172 -> m13_184  [key=2, style=dotted];
m13_172 -> m13_176  [key=1, style=dashed, color=darkseagreen4, label=n];
m13_177 -> m13_171  [key=0, style=solid];
m13_177 -> m13_178  [key=0, style=solid];
m13_180 -> m13_18  [key=0, style=bold, color=blue];
m13_57 -> m13_58  [key=0, style=solid];
m13_57 -> m13_59  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, CSharpx.Maybe<char>>"];
m13_57 -> m13_69  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, CSharpx.Maybe<char>>"];
m13_57 -> m13_62  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>"];
m13_58 -> m13_59  [key=0, style=solid];
m13_58 -> m13_64  [key=2, style=dotted];
m13_58 -> m13_60  [key=1, style=dashed, color=darkseagreen4, label=tokens];
m13_59 -> m13_60  [key=0, style=solid];
m13_59 -> m13_42  [key=2, style=dotted];
m13_59 -> m13_65  [key=2, style=dotted];
m13_59 -> m13_68  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_59 -> m13_77  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_59 -> m13_81  [key=1, style=dashed, color=darkseagreen4, label=replaces];
m13_62 -> m13_63  [key=0, style=solid];
m13_62 -> m13_67  [key=2, style=dotted];
m13_62 -> m13_26  [key=2, style=dotted];
m13_60 -> m13_61  [key=0, style=solid];
m13_60 -> m13_42  [key=2, style=dotted];
m13_60 -> m13_80  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_61 -> m13_62  [key=0, style=solid];
m13_61 -> m13_66  [key=2, style=dotted];
m13_61 -> m13_94  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_63 -> m13_57  [key=0, style=bold, color=blue];
m13_129 -> m13_130  [key=0, style=solid];
m13_129 -> m13_133  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m13_129 -> m13_140  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m13_129 -> m13_143  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m13_129 -> m13_134  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m13_129 -> m13_150  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m13_129 -> m13_153  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m13_129 -> m13_156  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m13_129 -> m13_135  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m13_129 -> m13_159  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m13_130 -> m13_131  [key=0, style=solid];
m13_130 -> m13_133  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m13_130 -> m13_140  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m13_130 -> m13_143  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m13_130 -> m13_134  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m13_130 -> m13_150  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m13_130 -> m13_153  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m13_130 -> m13_156  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m13_130 -> m13_135  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m13_130 -> m13_159  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m13_131 -> m13_129  [key=0, style=bold, color=blue];
m13_152 -> m13_153  [key=0, style=solid];
m13_4 -> m13_5  [key=0, style=solid, color=red];
m13_5 -> m13_6  [key=0, style=solid, color=red];
m13_6 -> m13_4  [key=0, style=bold, color=blue];
m13_28 -> m13_29  [key=0, style=solid];
m13_28 -> m13_30  [key=2, style=dotted];
m13_27 -> m13_28  [key=0, style=solid];
m13_29 -> m13_27  [key=0, style=bold, color=blue];
m13_44 -> m13_45  [key=0, style=solid];
m13_48 -> m13_49  [key=0, style=solid];
m13_51 -> m13_52  [key=0, style=solid];
m13_55 -> m13_56  [key=0, style=solid];
m13_55 -> m13_25  [key=2, style=dotted];
m13_54 -> m13_55  [key=0, style=solid];
m13_45 -> m13_46  [key=0, style=solid];
m13_45 -> m13_47  [key=2, style=dotted];
m13_46 -> m13_44  [key=0, style=bold, color=blue];
m13_49 -> m13_50  [key=0, style=solid];
m13_49 -> m13_47  [key=2, style=dotted];
m13_50 -> m13_48  [key=0, style=bold, color=blue];
m13_52 -> m13_53  [key=0, style=solid];
m13_52 -> m13_47  [key=2, style=dotted];
m13_53 -> m13_51  [key=0, style=bold, color=blue];
m13_56 -> m13_54  [key=0, style=bold, color=blue];
m13_69 -> m13_70  [key=0, style=solid];
m13_69 -> m13_22  [key=2, style=dotted];
m13_69 -> m13_71  [key=2, style=dotted];
m13_69 -> m13_72  [key=2, style=dotted];
m13_69 -> m13_73  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_68 -> m13_69  [key=0, style=solid];
m13_68 -> m13_74  [key=1, style=dashed, color=darkseagreen4, label=int];
m13_77 -> m13_78  [key=0, style=solid];
m13_81 -> m13_82  [key=0, style=solid];
m13_81 -> m13_83  [key=2, style=dotted];
m13_81 -> m13_84  [key=2, style=dotted];
m13_81 -> m13_85  [key=2, style=dotted];
m13_81 -> m13_86  [key=2, style=dotted];
m13_81 -> m13_72  [key=2, style=dotted];
m13_81 -> m13_87  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_81 -> m13_90  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_80 -> m13_81  [key=0, style=solid];
m13_80 -> m13_88  [key=1, style=dashed, color=darkseagreen4, label=int];
m13_80 -> m13_91  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Token"];
m13_94 -> m13_95  [key=0, style=solid];
m13_74 -> m13_75  [key=0, style=solid];
m13_74 -> m13_76  [key=2, style=dotted];
m13_70 -> m13_68  [key=0, style=bold, color=blue];
m13_73 -> m13_74  [key=0, style=solid];
m13_75 -> m13_73  [key=0, style=bold, color=blue];
m13_78 -> m13_79  [key=0, style=solid];
m13_79 -> m13_77  [key=0, style=bold, color=blue];
m13_88 -> m13_89  [key=0, style=solid];
m13_91 -> m13_92  [key=0, style=solid];
m13_91 -> m13_93  [key=2, style=dotted];
m13_91 -> m13_42  [key=2, style=dotted];
m13_82 -> m13_80  [key=0, style=bold, color=blue];
m13_87 -> m13_88  [key=0, style=solid];
m13_90 -> m13_91  [key=0, style=solid];
m13_89 -> m13_87  [key=0, style=bold, color=blue];
m13_92 -> m13_90  [key=0, style=bold, color=blue];
m13_95 -> m13_96  [key=0, style=solid];
m13_96 -> m13_94  [key=0, style=bold, color=blue];
m13_106 -> m13_107  [key=0, style=solid];
m13_106 -> m13_109  [key=2, style=dotted];
m13_106 -> m13_110  [key=2, style=dotted];
m13_107 -> m13_108  [key=0, style=solid];
m13_107 -> m13_111  [key=2, style=dotted];
m13_107 -> m13_72  [key=2, style=dotted];
m13_107 -> m13_112  [key=2, style=dotted];
m13_107 -> m13_113  [key=2, style=dotted];
m13_107 -> m13_114  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_115 -> m13_116  [key=0, style=solid];
m13_115 -> m13_117  [key=2, style=dotted];
m13_115 -> m13_118  [key=2, style=dotted];
m13_105 -> m13_106  [key=0, style=solid];
m13_105 -> m13_107  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Token"];
m13_119 -> m13_120  [key=0, style=solid];
m13_124 -> m13_125  [key=0, style=solid];
m13_124 -> m13_30  [key=2, style=dotted];
m13_124 -> m13_112  [key=2, style=dotted];
m13_124 -> m13_113  [key=2, style=dotted];
m13_123 -> m13_124  [key=0, style=solid];
m13_126 -> m13_127  [key=0, style=solid];
m13_108 -> m13_105  [key=0, style=bold, color=blue];
m13_114 -> m13_115  [key=0, style=solid];
m13_116 -> m13_114  [key=0, style=bold, color=blue];
m13_120 -> m13_121  [key=0, style=solid];
m13_120 -> m13_122  [key=2, style=dotted];
m13_121 -> m13_119  [key=0, style=bold, color=blue];
m13_125 -> m13_123  [key=0, style=bold, color=blue];
m13_127 -> m13_128  [key=0, style=solid];
m13_127 -> m13_122  [key=2, style=dotted];
m13_128 -> m13_126  [key=0, style=bold, color=blue];
m13_133 -> m13_134  [key=0, style=solid];
m13_133 -> m13_138  [key=2, style=dotted];
m13_133 -> m13_140  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
m13_133 -> m13_147  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
m13_133 -> m13_150  [key=1, style=dashed, color=darkseagreen4, label=normalize];
m13_140 -> m13_141  [key=0, style=solid];
m13_140 -> m13_97  [key=2, style=dotted];
m13_140 -> m13_142  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_143 -> m13_144  [key=0, style=solid];
m13_143 -> m13_145  [key=2, style=dotted];
m13_134 -> m13_135  [key=0, style=solid];
m13_134 -> m13_31  [key=2, style=dotted];
m13_134 -> m13_3  [key=2, style=dotted];
m13_134 -> m13_149  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_134 -> m13_155  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_150 -> m13_151  [key=0, style=solid];
m13_150 -> m13_3  [key=2, style=dotted];
m13_150 -> m13_152  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_153 -> m13_154  [key=0, style=solid];
m13_153 -> m13_145  [key=2, style=dotted];
m13_156 -> m13_157  [key=0, style=solid];
m13_156 -> m13_145  [key=2, style=dotted];
m13_135 -> m13_136  [key=0, style=solid];
m13_135 -> m13_57  [key=2, style=dotted];
m13_135 -> m13_158  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_159 -> m13_160  [key=0, style=solid];
m13_159 -> m13_161  [key=2, style=dotted];
m13_132 -> m13_133  [key=0, style=solid];
m13_132 -> m13_140  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m13_132 -> m13_143  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m13_132 -> m13_134  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m13_132 -> m13_150  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m13_132 -> m13_153  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m13_132 -> m13_156  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m13_132 -> m13_135  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m13_132 -> m13_159  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m13_147 -> m13_148  [key=0, style=solid];
m13_149 -> m13_150  [key=0, style=solid];
m13_155 -> m13_156  [key=0, style=solid];
m13_136 -> m13_137  [key=0, style=solid];
m13_158 -> m13_159  [key=0, style=solid];
m13_137 -> m13_132  [key=0, style=bold, color=blue];
m13_139 -> m13_140  [key=0, style=solid];
m13_141 -> m13_139  [key=0, style=bold, color=blue];
m13_142 -> m13_143  [key=0, style=solid];
m13_144 -> m13_142  [key=0, style=bold, color=blue];
m13_146 -> m13_147  [key=0, style=solid];
m13_148 -> m13_146  [key=0, style=bold, color=blue];
m13_151 -> m13_149  [key=0, style=bold, color=blue];
m13_154 -> m13_152  [key=0, style=bold, color=blue];
m13_157 -> m13_155  [key=0, style=bold, color=blue];
m13_160 -> m13_158  [key=0, style=bold, color=blue];
m13_17 -> m13_185  [key=0, style=solid];
m13_17 -> m13_189  [key=0, style=bold, color=crimson];
m13_17 -> m13_190  [key=0, style=bold, color=crimson];
m13_17 -> m13_193  [key=0, style=bold, color=crimson];
m13_17 -> m13_195  [key=0, style=bold, color=crimson];
m13_17 -> m13_196  [key=0, style=bold, color=crimson];
m13_17 -> m13_186  [key=1, style=dashed, color=darkseagreen4, label=string];
m13_17 -> m13_192  [key=1, style=dashed, color=darkseagreen4, label=string];
m13_185 -> m13_186  [key=0, style=solid];
m13_185 -> m13_197  [key=0, style=solid];
m13_185 -> m13_15  [key=2, style=dotted];
m13_189 -> m13_190  [key=0, style=solid];
m13_189 -> m13_183  [key=2, style=dotted];
m13_190 -> m13_191  [key=0, style=solid];
m13_193 -> m13_194  [key=0, style=solid];
m13_195 -> m13_196  [key=0, style=solid];
m13_195 -> m13_183  [key=2, style=dotted];
m13_196 -> m13_197  [key=0, style=solid];
m13_196 -> m13_202  [key=2, style=dotted];
m13_186 -> m13_187  [key=0, style=solid];
m13_186 -> m13_181  [key=2, style=dotted];
m13_186 -> m13_189  [key=1, style=dashed, color=darkseagreen4, label=text];
m13_186 -> m13_194  [key=1, style=dashed, color=darkseagreen4, label=text];
m13_192 -> m13_193  [key=0, style=solid];
m13_192 -> m13_199  [key=2, style=dotted];
m13_192 -> m13_200  [key=2, style=dotted];
m13_187 -> m13_188  [key=0, style=solid];
m13_187 -> m13_198  [key=2, style=dotted];
m13_187 -> m13_191  [key=1, style=dashed, color=darkseagreen4, label=equalIndex];
m13_194 -> m13_195  [key=0, style=solid];
m13_194 -> m13_201  [key=2, style=dotted];
m13_194 -> m13_196  [key=1, style=dashed, color=darkseagreen4, label=parts];
m13_188 -> m13_189  [key=0, style=solid];
m13_188 -> m13_191  [key=0, style=solid];
m13_191 -> m13_192  [key=0, style=solid];
m13_191 -> m13_194  [key=0, style=solid];
m13_197 -> m13_17  [key=0, style=bold, color=blue];
m13_0 -> m13_1  [key=0, style=solid, color=red];
m13_1 -> m13_2  [key=0, style=solid, color=red];
m13_1 -> m13_3  [key=2, style=dotted, color=red];
m13_1 -> m13_4  [key=1, style=dashed, color=red, label="lambda expression"];
m13_2 -> m13_0  [key=0, style=bold, color=blue];
m13_203 -> m13_28  [key=1, style=dashed, color=darkseagreen4, label=unkTokens];
m13_204 -> m13_55  [key=1, style=dashed, color=darkseagreen4, label=values];
m13_205 -> m13_69  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, CSharpx.Maybe<char>>"];
m13_206 -> m13_74  [key=1, style=dashed, color=darkseagreen4, label=int];
m13_207 -> m13_81  [key=1, style=dashed, color=darkseagreen4, label=replaces];
m13_208 -> m13_88  [key=1, style=dashed, color=darkseagreen4, label=int];
m13_209 -> m13_91  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Token"];
m13_210 -> m13_106  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
m13_211 -> m13_107  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, bool>"];
m13_211 -> m13_115  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, bool>"];
m13_212 -> m13_124  [key=1, style=dashed, color=darkseagreen4, label=indexes];
m13_213 -> m13_133  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m13_213 -> m13_140  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m13_213 -> m13_143  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m13_213 -> m13_134  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m13_213 -> m13_150  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m13_213 -> m13_153  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m13_213 -> m13_156  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m13_213 -> m13_135  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m13_213 -> m13_159  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m13_214 -> m13_133  [key=1, style=dashed, color=darkseagreen4, label=bool];
m13_215 -> m13_134  [key=1, style=dashed, color=darkseagreen4, label=bool];
m13_216 -> m13_140  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m13_216 -> m13_143  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m13_216 -> m13_150  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m13_216 -> m13_153  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m13_216 -> m13_156  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m13_216 -> m13_159  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m13_217 -> m13_150  [key=1, style=dashed, color=darkseagreen4, label=normalize];
m14_0 -> m14_1  [key=0, style=solid, color=red];
m14_1 -> m14_2  [key=0, style=solid, color=red];
m14_2 -> m14_0  [key=0, style=bold, color=blue];
m14_3 -> m14_4  [key=0, style=solid, color=red];
m14_4 -> m14_5  [key=0, style=solid, color=red];
m14_4 -> m14_0  [key=2, style=dotted, color=red];
m14_4 -> m14_6  [key=2, style=dotted, color=red];
m14_5 -> m14_3  [key=0, style=bold, color=blue];
m14_7 -> m14_1  [key=1, style=dashed, color=red, label="CommandLine.Core.ValueSpecification"];
}
