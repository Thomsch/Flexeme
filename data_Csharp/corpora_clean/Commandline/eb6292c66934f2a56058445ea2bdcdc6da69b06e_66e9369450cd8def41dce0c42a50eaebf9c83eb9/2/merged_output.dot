digraph  {
n59 [label="System.Globalization.CultureInfo", span=""];
n60 [label=type, span=""];
n0 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="12-12"];
n1 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", label="return scalar\r\n                ? ChangeType(values.Single(), conversionType, conversionCulture)\r\n                : ChangeType(values, conversionType, conversionCulture);", span="14-16"];
n2 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", label="Exit CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="12-12"];
n3 [cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0"];
n4 [cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", span="35-35"];
n5 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", span="19-19"];
n6 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", label="var type =\r\n                conversionType.GetGenericArguments()\r\n                              .SingleOrDefault()\r\n                              .ToMaybe()\r\n                              .FromJust(\r\n                                  new ApplicationException(''Non scalar properties should be sequence of type IEnumerable<T>.''))", span="21-26"];
n7 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", label="var converted = values.Select(value => ChangeType(value, type, conversionCulture))", span="28-28"];
n21 [cluster="lambda expression", label="ChangeType(value, type, conversionCulture)", span="28-28"];
n10 [cluster="System.Type.GetGenericArguments()", label="Entry System.Type.GetGenericArguments()", span="0-0"];
n11 [cluster="System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", span="0-0"];
n12 [cluster="T.ToMaybe<T>()", label="Entry T.ToMaybe<T>()", span="79-79"];
n13 [cluster="System.ApplicationException.ApplicationException(string)", label="Entry System.ApplicationException.ApplicationException(string)", span="0-0"];
n14 [cluster="CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", label="Entry CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", span="134-134"];
n8 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", label="return converted.Any(a => a.MatchNothing())\r\n                ? Maybe.Nothing<object>()\r\n                : Maybe.Just(converted.Select(c => ((Just<object>)c).Value).ToArray(type));", span="30-32"];
n15 [cluster="Unk.Select", label="Entry Unk.Select", span=""];
n20 [cluster="lambda expression", label="Entry lambda expression", span="28-28"];
n9 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", label="Exit CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", span="19-19"];
n16 [cluster="Unk.Any", label="Entry Unk.Any", span=""];
n17 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63"];
n18 [cluster="Unk.ToArray", label="Entry Unk.ToArray", span=""];
n19 [cluster="Unk.Just", label="Entry Unk.Just", span=""];
n23 [cluster="lambda expression", label="Entry lambda expression", span="30-30"];
n27 [cluster="lambda expression", label="Entry lambda expression", span="32-32"];
n22 [cluster="lambda expression", label="Exit lambda expression", span="28-28"];
n24 [cluster="lambda expression", label="a.MatchNothing()", span="30-30"];
n25 [cluster="lambda expression", label="Exit lambda expression", span="30-30"];
n26 [cluster="Unk.MatchNothing", label="Entry Unk.MatchNothing", span=""];
n28 [cluster="lambda expression", label="((Just<object>)c).Value", span="32-32"];
n29 [cluster="lambda expression", label="Exit lambda expression", span="32-32"];
n30 [cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", label="return Maybe.Just(\r\n                    MatchBoolString(value)\r\n                        ? ConvertBoolString(value)\r\n                        : conversionType.IsEnum\r\n                            ? ConvertEnumString(value, conversionType)\r\n                            : Convert.ChangeType(value, conversionType, conversionCulture));", span="39-44"];
n31 [cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", label=InvalidCastException, span="46-46"];
n32 [cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", label="return Maybe.Nothing<object>();", span="48-48"];
n33 [cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", label=FormatException, span="50-50"];
n34 [cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", label="return Maybe.Nothing<object>();", span="52-52"];
n35 [cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", label=OverflowException, span="54-54"];
n36 [cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", label="return Maybe.Nothing<object>();", span="56-56"];
n37 [cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", label="Exit CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", span="35-35"];
n38 [cluster="CommandLine.Core.TypeConverter.MatchBoolString(string)", label="Entry CommandLine.Core.TypeConverter.MatchBoolString(string)", span="60-60"];
n39 [cluster="CommandLine.Core.TypeConverter.ConvertBoolString(string)", label="Entry CommandLine.Core.TypeConverter.ConvertBoolString(string)", span="66-66"];
n40 [cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", label="Entry CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", span="71-71"];
n41 [cluster="System.Convert.ChangeType(object, System.Type, System.IFormatProvider)", label="Entry System.Convert.ChangeType(object, System.Type, System.IFormatProvider)", span="0-0"];
n42 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68"];
n43 [cluster="CommandLine.Core.TypeConverter.MatchBoolString(string)", label="return value.Equals(''true'', StringComparison.OrdinalIgnoreCase)\r\n                   || value.Equals(''false'', StringComparison.OrdinalIgnoreCase);", span="62-63"];
n44 [cluster="CommandLine.Core.TypeConverter.MatchBoolString(string)", label="Exit CommandLine.Core.TypeConverter.MatchBoolString(string)", span="60-60"];
n45 [cluster="string.Equals(string, System.StringComparison)", label="Entry string.Equals(string, System.StringComparison)", span="0-0"];
n46 [cluster="CommandLine.Core.TypeConverter.ConvertBoolString(string)", label="return value.Equals(''true'', StringComparison.OrdinalIgnoreCase);", span="68-68"];
n47 [cluster="CommandLine.Core.TypeConverter.ConvertBoolString(string)", label="Exit CommandLine.Core.TypeConverter.ConvertBoolString(string)", span="66-66"];
n48 [cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", label="object parsedValue", span="73-73"];
n49 [cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", label="parsedValue = Enum.Parse(conversionType, value)", span="76-76"];
n52 [cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", label="Enum.IsDefined(conversionType, parsedValue)", span="82-82"];
n50 [cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", label=ArgumentException, span="78-78"];
n56 [cluster="System.Enum.Parse(System.Type, string)", label="Entry System.Enum.Parse(System.Type, string)", span="0-0"];
n53 [cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", label="return parsedValue;", span="84-84"];
n51 [cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", label="throw new FormatException();", span="80-80"];
n54 [cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", label="throw new FormatException();", span="86-86"];
n58 [cluster="System.Enum.IsDefined(System.Type, object)", label="Entry System.Enum.IsDefined(System.Type, object)", span="0-0"];
n55 [cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", label="Exit CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", span="71-71"];
n57 [cluster="System.FormatException.FormatException()", label="Entry System.FormatException.FormatException()", span="0-0"];
d1 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", color=green, community=0, label="0: return Build(\r\n                factory,\r\n                (args, optionSpecs) =>\r\n                    {\r\n                        var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer));\r\n                        var explodedTokens = Tokenizer.ExplodeOptionList(\r\n                            tokens,\r\n                            name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer));\r\n                        return Tokenizer.Normalize(explodedTokens, name => NameLookup.Contains(name, optionSpecs, nameComparer));\r\n                    },\r\n                arguments,\r\n                nameComparer,\r\n                parsingCulture,\r\n                nonFatalErrors);", span="21-34"];
d0 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="14-14"];
d2 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="Exit CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="14-14"];
d3 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="37-37"];
d4 [cluster="lambda expression", label="Entry lambda expression", span="23-30"];
d7 [cluster="lambda expression", color=green, community=0, label="0: return Tokenizer.Normalize(explodedTokens, name => NameLookup.Contains(name, optionSpecs, nameComparer));", span="29-29"];
d158 [label="System.StringComparer", span=""];
d6 [cluster="lambda expression", label="var explodedTokens = Tokenizer.ExplodeOptionList(\r\n                            tokens,\r\n                            name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer))", span="26-28"];
d8 [cluster="lambda expression", label="Exit lambda expression", span="23-30"];
d11 [cluster="CommandLine.Core.Tokenizer.Normalize(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, bool>)", label="Entry CommandLine.Core.Tokenizer.Normalize(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, bool>)", span="67-67"];
d21 [cluster="lambda expression", color=green, community=0, label="0: NameLookup.Contains(name, optionSpecs, nameComparer)", span="29-29"];
d159 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
d15 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
d5 [cluster="lambda expression", label="var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer))", span="25-25"];
d13 [cluster="lambda expression", label="NameLookup.Contains(name, optionSpecs, nameComparer)", span="25-25"];
d17 [cluster="lambda expression", label="NameLookup.HavingSeparator(name, optionSpecs, nameComparer)", span="28-28"];
d50 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="Exit CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="37-37"];
d23 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var typeInfo = factory.Return(f => f().GetType(), typeof(T))", span="45-45"];
d27 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="Func<T> makeDefault = () =>\r\n                typeof(T).IsMutable()\r\n                    ? factory.Return(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="56-60"];
d102 [cluster="lambda expression", label="typeof(T).IsMutable()\r\n                    ? factory.Return(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="57-60"];
d28 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="arguments.Any()", span="62-62"];
d29 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var preprocessorErrors = arguments.Preprocess(PreprocessorGuards.Lookup(nameComparer))", span="64-64"];
d32 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var tokenizerResult = tokenizer(arguments, optionSpecs)", span="71-71"];
d34 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var partitions = TokenPartitioner.Partition(\r\n                tokens,\r\n                name => TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer))", span="75-77"];
d110 [cluster="lambda expression", label="TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer)", span="77-77"];
d35 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var optionSpecPropsResult = OptionMapper.MapValues(\r\n                (from pt in specProps where pt.Specification.IsOption() select pt),\r\n                partitions.Options,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture),\r\n                nameComparer)", span="79-83"];
d114 [cluster="lambda expression", label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="82-82"];
d36 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var valueSpecPropsResult = ValueMapper.MapValues(\r\n                (from pt in specProps where pt.Specification.IsValue() select pt),\r\n                    partitions.Values,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture))", span="85-88"];
d118 [cluster="lambda expression", label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="88-88"];
d37 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var missingValueErrors = from token in partitions.Errors\r\n                                     select new MissingValueOptionError(\r\n                                         optionSpecs.Single(o => token.Text.MatchName(o.ShortName, o.LongName, nameComparer)).FromOptionSpecification())", span="90-92"];
d121 [cluster="lambda expression", label="token.Text.MatchName(o.ShortName, o.LongName, nameComparer)", span="92-92"];
d41 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="instance = factory.Return(f => f(), Activator.CreateInstance<T>())", span="100-100"];
d48 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var warnings =\r\n                from e in allErrors where nonFatalErrors.Contains(e.Tag)\r\n                select e", span="137-139"];
d10 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", span="46-46"];
d16 [cluster="lambda expression", label="Entry lambda expression", span="28-28"];
d9 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="13-13"];
d12 [cluster="lambda expression", label="Entry lambda expression", span="25-25"];
d14 [cluster="lambda expression", label="Exit lambda expression", span="25-25"];
d18 [cluster="lambda expression", label="Exit lambda expression", span="28-28"];
d19 [cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16"];
d31 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="return new NotParsed<T>(makeDefault().GetType().ToTypeInfo(), preprocessorErrors);", span="67-67"];
d49 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="return allErrors\r\n                .Except(warnings)\r\n                .ToParserResult(instance);", span="141-143"];
d24 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var specProps = typeInfo.GetSpecifications(pi => SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>()))", span="47-48"];
d51 [cluster="Unk.Return", label="Entry Unk.Return", span=""];
d90 [cluster="lambda expression", label="Entry lambda expression", span="45-45"];
d40 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="typeInfo.IsMutable()", span="98-98"];
d43 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var ctor = typeInfo.GetConstructor((from sp in specProps select sp.Property.PropertyType).ToArray())", span="116-116"];
d26 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var optionSpecs = specs\r\n                .ThrowingValidate(SpecificationGuards.Lookup)\r\n                .OfType<OptionSpecification>()", span="52-54"];
d160 [label="CSharpx.Maybe<System.Func<T>>", span=""];
d161 [label=specProps, span=""];
d101 [cluster="lambda expression", label="Entry lambda expression", span="56-60"];
d103 [cluster="lambda expression", label="Exit lambda expression", span="56-60"];
d104 [cluster="System.Type.IsMutable()", label="Entry System.Type.IsMutable()", span="139-139"];
d73 [cluster="System.Activator.CreateInstance<T>()", label="Entry System.Activator.CreateInstance<T>()", span="0-0"];
d75 [cluster="Unk.ToArray", label="Entry Unk.ToArray", span=""];
d105 [cluster="Unk.>", label="Entry Unk.>", span=""];
d106 [cluster="lambda expression", label="Entry lambda expression", span="58-58"];
d55 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
d30 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="preprocessorErrors.Any()", span="65-65"];
d56 [cluster="CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)", label="Entry CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)", span="11-11"];
d57 [cluster="System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", label="Entry System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="11-11"];
d33 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var tokens = tokenizerResult.SucceededWith()", span="73-73"];
d62 [cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0"];
d47 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var allErrors =\r\n                tokenizerResult\r\n                    .SuccessfulMessages()\r\n                        .Concat(missingValueErrors)\r\n                        .Concat(optionSpecPropsResult.SuccessfulMessages())\r\n                        .Concat(valueSpecPropsResult.SuccessfulMessages())\r\n                        .Concat(validationErrors)\r\n                    .Memorize()", span="128-135"];
d64 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12"];
d109 [cluster="lambda expression", label="Entry lambda expression", span="77-77"];
d162 [label="System.StringComparer", span=""];
d163 [label=optionSpecs, span=""];
d111 [cluster="lambda expression", label="Exit lambda expression", span="77-77"];
d112 [cluster="CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", label="Entry CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="23-23"];
d65 [cluster="CommandLine.Core.Specification.IsOption()", label="Entry CommandLine.Core.Specification.IsOption()", span="10-10"];
d66 [cluster="Unk.MapValues", label="Entry Unk.MapValues", span=""];
d113 [cluster="lambda expression", label="Entry lambda expression", span="82-82"];
d38 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var specPropsWithValue = optionSpecPropsResult.SucceededWith()\r\n                .Concat(valueSpecPropsResult.SucceededWith())", span="94-95"];
d164 [label="System.Globalization.CultureInfo", span=""];
d115 [cluster="lambda expression", label="Exit lambda expression", span="82-82"];
d116 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="13-13"];
d67 [cluster="CommandLine.Core.Specification.IsValue()", label="Entry CommandLine.Core.Specification.IsValue()", span="15-15"];
d117 [cluster="lambda expression", label="Entry lambda expression", span="88-88"];
d119 [cluster="lambda expression", label="Exit lambda expression", span="88-88"];
d68 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="269-269"];
d69 [cluster="Unk.Single", label="Entry Unk.Single", span=""];
d70 [cluster="Unk.FromOptionSpecification", label="Entry Unk.FromOptionSpecification", span=""];
d120 [cluster="lambda expression", label="Entry lambda expression", span="92-92"];
d165 [label=token, span=""];
d122 [cluster="lambda expression", label="Exit lambda expression", span="92-92"];
d123 [cluster="string.MatchName(string, string, System.StringComparer)", label="Entry string.MatchName(string, string, System.StringComparer)", span="8-8"];
d42 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="instance = instance\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsJust(),\r\n                        sp => sp.Value.FromJust())\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust(),\r\n                        sp => sp.Specification.DefaultValue.FromJust())\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsNothing()\r\n                            && sp.Specification.TargetType == TargetType.Sequence\r\n                            && sp.Specification.DefaultValue.MatchNothing(),\r\n                        sp => sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray())", span="101-112"];
d124 [cluster="lambda expression", label="Entry lambda expression", span="100-100"];
d87 [cluster="Unk.Contains", label="Entry Unk.Contains", span=""];
d83 [cluster="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", label="Entry System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="40-40"];
d58 [cluster="CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", label="Entry CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="163-163"];
d59 [cluster="System.Func<TResult>.Invoke()", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
d60 [cluster="object.GetType()", label="Entry object.GetType()", span="0-0"];
d61 [cluster="System.Type.ToTypeInfo()", label="Entry System.Type.ToTypeInfo()", span="174-174"];
d45 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="instance = (T)ctor.Invoke(values)", span="122-122"];
d88 [cluster="Unk.Except", label="Entry Unk.Except", span=""];
d89 [cluster="Unk.ToParserResult", label="Entry Unk.ToParserResult", span=""];
d25 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var specs = from pt in specProps select pt.Specification", span="50-50"];
d52 [cluster="Unk.GetSpecifications", label="Entry Unk.GetSpecifications", span=""];
d95 [cluster="lambda expression", label="Entry lambda expression", span="47-48"];
d44 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var values = (from prms in ctor.GetParameters()\r\n                              join sp in specPropsWithValue on prms.Name.ToLower() equals sp.Property.Name.ToLower()\r\n                              select sp.Value.Return(v => v,\r\n                                    sp.Specification.DefaultValue.Return(d => d,\r\n                                        sp.Specification.ConversionType.CreateDefaultForImmutable()))).ToArray()", span="117-121"];
d92 [cluster="lambda expression", label="Exit lambda expression", span="45-45"];
d91 [cluster="lambda expression", label="f().GetType()", span="45-45"];
d39 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="T instance", span="97-97"];
d72 [cluster="Unk.IsMutable", label="Entry Unk.IsMutable", span=""];
d76 [cluster="Unk.GetConstructor", label="Entry Unk.GetConstructor", span=""];
d53 [cluster="Unk.ThrowingValidate", label="Entry Unk.ThrowingValidate", span=""];
d54 [cluster="System.Collections.IEnumerable.OfType<TResult>()", label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0"];
d108 [cluster="lambda expression", label="Exit lambda expression", span="58-58"];
d107 [cluster="lambda expression", label="f()", span="58-58"];
d63 [cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()", label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()", span="653-653"];
d46 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var validationErrors = specPropsWithValue.Validate(\r\n                SpecificationPropertyRules.Lookup(tokens))", span="125-126"];
d84 [cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SuccessfulMessages<TSuccess, TMessage>()", label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SuccessfulMessages<TSuccess, TMessage>()", span="12-12"];
d85 [cluster="Unk.Concat", label="Entry Unk.Concat", span=""];
d86 [cluster="Unk.Memorize", label="Entry Unk.Memorize", span=""];
d71 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
d74 [cluster="T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", label="Entry T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="82-82"];
d127 [cluster="lambda expression", label="Entry lambda expression", span="103-103"];
d131 [cluster="lambda expression", label="Entry lambda expression", span="104-104"];
d135 [cluster="lambda expression", label="Entry lambda expression", span="106-106"];
d139 [cluster="lambda expression", label="Entry lambda expression", span="107-107"];
d142 [cluster="lambda expression", label="Entry lambda expression", span="109-111"];
d146 [cluster="lambda expression", label="Entry lambda expression", span="112-112"];
d126 [cluster="lambda expression", label="Exit lambda expression", span="100-100"];
d125 [cluster="lambda expression", label="f()", span="100-100"];
d81 [cluster="Unk.Invoke", label="Entry Unk.Invoke", span=""];
d97 [cluster="lambda expression", label="Exit lambda expression", span="47-48"];
d96 [cluster="lambda expression", label="SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>())", span="47-48"];
d77 [cluster="Unk.GetParameters", label="Entry Unk.GetParameters", span=""];
d78 [cluster="Unk.ToLower", label="Entry Unk.ToLower", span=""];
d79 [cluster="string.ToLower()", label="Entry string.ToLower()", span="0-0"];
d80 [cluster="Unk.CreateDefaultForImmutable", label="Entry Unk.CreateDefaultForImmutable", span=""];
d152 [cluster="lambda expression", label="Entry lambda expression", span="119-119"];
d155 [cluster="lambda expression", label="Entry lambda expression", span="120-120"];
d93 [cluster="Unk.f", label="Entry Unk.f", span=""];
d94 [cluster="Unk.GetType", label="Entry Unk.GetType", span=""];
d82 [cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", label="Entry CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12"];
d129 [cluster="lambda expression", label="Exit lambda expression", span="103-103"];
d128 [cluster="lambda expression", label="sp.Value.IsJust()", span="103-103"];
d133 [cluster="lambda expression", label="Exit lambda expression", span="104-104"];
d132 [cluster="lambda expression", label="sp.Value.FromJust()", span="104-104"];
d137 [cluster="lambda expression", label="Exit lambda expression", span="106-106"];
d136 [cluster="lambda expression", label="sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust()", span="106-106"];
d141 [cluster="lambda expression", label="Exit lambda expression", span="107-107"];
d140 [cluster="lambda expression", label="sp.Specification.DefaultValue.FromJust()", span="107-107"];
d144 [cluster="lambda expression", label="Exit lambda expression", span="109-111"];
d143 [cluster="lambda expression", label="sp.Value.IsNothing()\r\n                            && sp.Specification.TargetType == TargetType.Sequence\r\n                            && sp.Specification.DefaultValue.MatchNothing()", span="109-111"];
d148 [cluster="lambda expression", label="Exit lambda expression", span="112-112"];
d147 [cluster="lambda expression", label="sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray()", span="112-112"];
d98 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", label="Entry CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="105-105"];
d99 [cluster="CSharpx.Maybe.Nothing<T>()", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
d100 [cluster="CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)", label="Entry CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)", span="21-21"];
d154 [cluster="lambda expression", label="Exit lambda expression", span="119-119"];
d153 [cluster="lambda expression", label=v, span="119-119"];
d157 [cluster="lambda expression", label="Exit lambda expression", span="120-120"];
d156 [cluster="lambda expression", label=d, span="120-120"];
d130 [cluster="CSharpx.Maybe<T>.IsJust<T>()", label="Entry CSharpx.Maybe<T>.IsJust<T>()", span="326-326"];
d134 [cluster="CSharpx.Maybe<T>.FromJust<T>()", label="Entry CSharpx.Maybe<T>.FromJust<T>()", span="342-342"];
d138 [cluster="CSharpx.Maybe<T>.IsNothing<T>()", label="Entry CSharpx.Maybe<T>.IsNothing<T>()", span="334-334"];
d145 [cluster="CSharpx.Maybe<T>.MatchNothing()", label="Entry CSharpx.Maybe<T>.MatchNothing()", span="57-57"];
d149 [cluster="System.Type.GetGenericArguments()", label="Entry System.Type.GetGenericArguments()", span="0-0"];
d150 [cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0"];
d151 [cluster="System.Type.CreateEmptyArray()", label="Entry System.Type.CreateEmptyArray()", span="125-125"];
m1_11 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="TokenizerTests.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m1_20 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", span="42-42"];
m1_21 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TokenizerTests.cs", label="var expectedTokens = new[] { Token.Name(''x''), Token.Name(''string-seq''),\r\n                Token.Value(''aaa''), Token.Value(''bb''),  Token.Value(''cccc''), Token.Name(''switch'') }", span="45-46"];
m1_22 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TokenizerTests.cs", label="var specs = new[] { new OptionSpecification(string.Empty, ''string-seq'',\r\n                false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), ',', null, string.Empty, string.Empty, new List<string>(), typeof(IEnumerable<string>), TargetType.Sequence)}", span="47-48"];
m1_24 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TokenizerTests.cs", label="((Ok<IEnumerable<Token>, Error>)result).Value.Success.ShouldBeEquivalentTo(expectedTokens)", span="60-60"];
m1_23 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TokenizerTests.cs", label="var result =\r\n                Tokenizer.ExplodeOptionList(\r\n                    Result.Succeed(\r\n                        Enumerable.Empty<Token>().Concat(new[] { Token.Name(''x''),\r\n                            Token.Name(''string-seq''), Token.Value(''aaa,bb,cccc''), Token.Name(''switch'') }),\r\n                        Enumerable.Empty<Error>()),\r\n                        optionName => NameLookup.HavingSeparator(optionName, specs, StringComparer.InvariantCulture))", span="51-57"];
m1_25 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", span="42-42"];
m1_35 [cluster="CommandLine.Core.Token.Value(string, bool)", file="TokenizerTests.cs", label="Entry CommandLine.Core.Token.Value(string, bool)", span="29-29"];
m1_29 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", file="TokenizerTests.cs", label=specs, span=""];
m1_30 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", color=green, community=1, file="TokenizerTests.cs", label="0: specs", span=""];
m1_31 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", color=green, community=1, file="TokenizerTests.cs", label="1: Func<string, bool> nameLookup =\r\n                name => name.Equals(''x'') || name.Equals(''string-seq'') || name.Equals(''switch'')", span="74-75"];
m1_33 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", color=green, community=0, file="TokenizerTests.cs", label="1: ((Ok<IEnumerable<Token>, Error>)result).Value.Success.ShouldBeEquivalentTo(expectedTokens)", span="90-90"];
m1_32 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", color=green, community=1, file="TokenizerTests.cs", label="0: var result =\r\n                Tokenizer.Normalize(\r\n                    Result.Succeed(\r\n                        Enumerable.Empty<Token>()\r\n                            .Concat(\r\n                                new[] {\r\n                                    Token.Name(''x''), Token.Name(''string-seq''), Token.Value(''aaa''), Token.Value(''bb''),\r\n                                    Token.Name(''unknown''), Token.Name(''switch'') }),\r\n                        Enumerable.Empty<Error>()),\r\n                    nameLookup)", span="78-87"];
m1_34 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", span="68-68"];
m1_8 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", file="TokenizerTests.cs", label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", span="16-16"];
m1_0 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", span="18-18"];
m1_1 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="TokenizerTests.cs", label="var expectedTokens = new[] { Token.Name(''i''), Token.Value(''10''), Token.Name(''string-seq''),\r\n                Token.Value(''aaa''), Token.Value(''bb''),  Token.Value(''cccc''), Token.Name(''switch'') }", span="21-22"];
m1_2 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="TokenizerTests.cs", label="var specs = new[] { new OptionSpecification(string.Empty, ''string-seq'',\r\n                false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), ',', null, string.Empty, string.Empty, new List<string>(), typeof(IEnumerable<string>), TargetType.Sequence)}", span="23-24"];
m1_4 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="TokenizerTests.cs", label="((Ok<IEnumerable<Token>, Error>)result).Value.Success.ShouldBeEquivalentTo(expectedTokens)", span="36-36"];
m1_3 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="TokenizerTests.cs", label="var result =\r\n                Tokenizer.ExplodeOptionList(\r\n                    Result.Succeed(\r\n                        Enumerable.Empty<Token>().Concat(new[] { Token.Name(''i''), Token.Value(''10''),\r\n                            Token.Name(''string-seq''), Token.Value(''aaa,bb,cccc''), Token.Name(''switch'') }),\r\n                        Enumerable.Empty<Error>()),\r\n                        optionName => NameLookup.HavingSeparator(optionName, specs, StringComparer.InvariantCulture))", span="27-33"];
m1_5 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", span="18-18"];
m1_37 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="75-75"];
m1_17 [cluster="lambda expression", file="TokenizerTests.cs", label="NameLookup.HavingSeparator(optionName, specs, StringComparer.InvariantCulture)", span="33-33"];
m1_16 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="33-33"];
m1_18 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="33-33"];
m1_27 [cluster="lambda expression", file="TokenizerTests.cs", label="NameLookup.HavingSeparator(optionName, specs, StringComparer.InvariantCulture)", span="57-57"];
m1_26 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="57-57"];
m1_28 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="57-57"];
m1_38 [cluster="lambda expression", color=green, community=0, file="TokenizerTests.cs", label="1: name.Equals(''x'') || name.Equals(''string-seq'') || name.Equals(''switch'')", span="75-75"];
m1_39 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="75-75"];
m1_36 [cluster="CommandLine.Core.Tokenizer.Normalize(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, bool>)", file="TokenizerTests.cs", label="Entry CommandLine.Core.Tokenizer.Normalize(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, bool>)", span="67-67"];
m1_14 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="TokenizerTests.cs", label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", span="46-46"];
m1_6 [cluster="CommandLine.Core.Token.Name(string)", file="TokenizerTests.cs", label="Entry CommandLine.Core.Token.Name(string)", span="19-19"];
m1_9 [cluster="CSharpx.Maybe.Nothing<T>()", file="TokenizerTests.cs", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
m1_40 [cluster="string.Equals(string)", file="TokenizerTests.cs", label="Entry string.Equals(string)", span="0-0"];
m1_12 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="TokenizerTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
m1_7 [cluster="CommandLine.Core.Token.Value(string)", file="TokenizerTests.cs", label="Entry CommandLine.Core.Token.Value(string)", span="24-24"];
m1_15 [cluster="Unk.ShouldBeEquivalentTo", file="TokenizerTests.cs", label="Entry Unk.ShouldBeEquivalentTo", span=""];
m1_13 [cluster="RailwaySharp.ErrorHandling.Result.Succeed<TSuccess, TMessage>(TSuccess, System.Collections.Generic.IEnumerable<TMessage>)", file="TokenizerTests.cs", label="Entry RailwaySharp.ErrorHandling.Result.Succeed<TSuccess, TMessage>(TSuccess, System.Collections.Generic.IEnumerable<TMessage>)", span="202-202"];
m1_10 [cluster="System.Collections.Generic.List<T>.List()", file="TokenizerTests.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
n59 -> n21  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
n60 -> n21  [color=darkseagreen4, key=1, label=type, style=dashed];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=2, style=dotted];
n1 -> n4  [key=2, style=dotted];
n1 -> n5  [key=2, style=dotted];
n2 -> n0  [color=blue, key=0, style=bold];
n4 -> n30  [key=0, style=solid];
n4 -> n0  [color=darkorchid, key=3, label="Parameter variable System.Globalization.CultureInfo conversionCulture", style=bold];
n4 -> n6  [color=darkorchid, key=3, label="Parameter variable System.Type conversionType", style=bold];
n4 -> n5  [color=darkorchid, key=3, label="Parameter variable System.Globalization.CultureInfo conversionCulture", style=bold];
n4 -> n7  [color=darkorchid, key=3, label="Parameter variable string value", style=bold];
n5 -> n6  [key=0, style=solid];
n5 -> n7  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
n5 -> n21  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
n5 -> n0  [color=darkorchid, key=3, label="Parameter variable System.Globalization.CultureInfo conversionCulture", style=bold];
n6 -> n7  [key=0, style=solid];
n6 -> n10  [key=2, style=dotted];
n6 -> n11  [key=2, style=dotted];
n6 -> n12  [key=2, style=dotted];
n6 -> n13  [key=2, style=dotted];
n6 -> n14  [key=2, style=dotted];
n6 -> n21  [color=darkseagreen4, key=1, label=type, style=dashed];
n6 -> n8  [color=darkseagreen4, key=1, label=type, style=dashed];
n7 -> n8  [key=0, style=solid];
n7 -> n15  [key=2, style=dotted];
n7 -> n20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n21 -> n22  [key=0, style=solid];
n21 -> n4  [key=2, style=dotted];
n8 -> n9  [key=0, style=solid];
n8 -> n16  [key=2, style=dotted];
n8 -> n17  [key=2, style=dotted];
n8 -> n15  [key=2, style=dotted];
n8 -> n18  [key=2, style=dotted];
n8 -> n19  [key=2, style=dotted];
n8 -> n23  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n8 -> n27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n20 -> n21  [key=0, style=solid];
n20 -> d21  [color=green, key=0, style=solid];
n9 -> n5  [color=blue, key=0, style=bold];
n23 -> n24  [key=0, style=solid];
n27 -> n28  [key=0, style=solid];
n22 -> n20  [color=blue, key=0, style=bold];
n24 -> n25  [key=0, style=solid];
n24 -> n26  [key=2, style=dotted];
n25 -> n23  [color=blue, key=0, style=bold];
n28 -> n29  [key=0, style=solid];
n29 -> n27  [color=blue, key=0, style=bold];
n30 -> n37  [key=0, style=solid];
n30 -> n38  [key=2, style=dotted];
n30 -> n39  [key=2, style=dotted];
n30 -> n40  [key=2, style=dotted];
n30 -> n41  [key=2, style=dotted];
n30 -> n42  [key=2, style=dotted];
n31 -> n32  [key=0, style=solid];
n32 -> n37  [key=0, style=solid];
n32 -> n17  [key=2, style=dotted];
n33 -> n34  [key=0, style=solid];
n34 -> n37  [key=0, style=solid];
n34 -> n17  [key=2, style=dotted];
n35 -> n36  [key=0, style=solid];
n36 -> n37  [key=0, style=solid];
n36 -> n17  [key=2, style=dotted];
n37 -> n4  [color=blue, key=0, style=bold];
n38 -> n43  [key=0, style=solid];
n38 -> n4  [color=darkorchid, key=3, label="Parameter variable string value", style=bold];
n39 -> n46  [key=0, style=solid];
n39 -> n4  [color=darkorchid, key=3, label="Parameter variable string value", style=bold];
n40 -> n48  [key=0, style=solid];
n40 -> n49  [color=darkseagreen4, key=1, label=string, style=dashed];
n40 -> n52  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
n40 -> n4  [color=darkorchid, key=3, label="Parameter variable System.Type conversionType", style=bold];
n43 -> n44  [key=0, style=solid];
n43 -> n45  [key=2, style=dotted];
n44 -> n38  [color=blue, key=0, style=bold];
n46 -> n47  [key=0, style=solid];
n46 -> n45  [key=2, style=dotted];
n47 -> n39  [color=blue, key=0, style=bold];
n48 -> n49  [key=0, style=solid];
n49 -> n50  [key=0, style=solid];
n49 -> n52  [key=0, style=solid];
n49 -> n56  [key=2, style=dotted];
n49 -> n53  [color=darkseagreen4, key=1, label=parsedValue, style=dashed];
n52 -> n53  [key=0, style=solid];
n52 -> n54  [key=0, style=solid];
n52 -> n58  [key=2, style=dotted];
n50 -> n51  [key=0, style=solid];
n53 -> n55  [key=0, style=solid];
n51 -> n55  [key=0, style=solid];
n51 -> n57  [key=2, style=dotted];
n54 -> n55  [key=0, style=solid];
n54 -> n57  [key=2, style=dotted];
n55 -> n40  [color=blue, key=0, style=bold];
d1 -> d2  [color=green, key=0, style=solid];
d1 -> d3  [color=green, key=2, style=dotted];
d1 -> d4  [color=green, key=1, label="lambda expression", style=dashed];
d0 -> d1  [color=green, key=0, style=solid];
d0 -> d7  [color=green, key=1, label="System.StringComparer", style=dashed];
d0 -> d21  [color=green, key=1, label="System.StringComparer", style=dashed];
d0 -> d5  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d0 -> d13  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d0 -> d6  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d0 -> d17  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d0 -> d3  [color=darkorchid, key=3, label="method methodReturn CommandLine.ParserResult<T> Build", style=bold];
d2 -> d0  [color=blue, key=0, style=bold];
d3 -> d23  [key=0, style=solid];
d3 -> d27  [color=darkseagreen4, key=1, label="CSharpx.Maybe<System.Func<T>>", style=dashed];
d3 -> d102  [color=darkseagreen4, key=1, label="CSharpx.Maybe<System.Func<T>>", style=dashed];
d3 -> d28  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
d3 -> d29  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
d3 -> d32  [color=darkseagreen4, key=1, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>", style=dashed];
d3 -> d34  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d3 -> d110  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d3 -> d35  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d3 -> d114  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
d3 -> d36  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
d3 -> d118  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
d3 -> d37  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d3 -> d121  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d3 -> d41  [color=darkseagreen4, key=1, label="CSharpx.Maybe<System.Func<T>>", style=dashed];
d3 -> d48  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.ErrorType>", style=dashed];
d4 -> d7  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
d4 -> d21  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
d4 -> d5  [key=0, style=solid];
d4 -> d13  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
d4 -> d6  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
d4 -> d17  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
d7 -> d8  [color=green, key=0, style=solid];
d7 -> d11  [color=green, key=2, style=dotted];
d7 -> n20  [color=green, key=1, label="lambda expression", style=dashed];
d158 -> d7  [color=green, key=1, label="System.StringComparer", style=dashed];
d158 -> d21  [color=green, key=1, label="System.StringComparer", style=dashed];
d158 -> d5  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d158 -> d13  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d158 -> d6  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d158 -> d17  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d6 -> d7  [color=green, key=0, style=solid];
d6 -> d10  [key=2, style=dotted];
d6 -> d16  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d8 -> d4  [color=blue, key=0, style=bold];
d21 -> n22  [color=green, key=0, style=solid];
d21 -> d15  [color=green, key=2, style=dotted];
d159 -> d21  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
d159 -> d13  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
d159 -> d17  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
d5 -> d6  [key=0, style=solid];
d5 -> d9  [key=2, style=dotted];
d5 -> d12  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d13 -> d15  [key=2, style=dotted];
d13 -> d14  [key=0, style=solid];
d17 -> d18  [key=0, style=solid];
d17 -> d19  [key=2, style=dotted];
d50 -> d3  [color=blue, key=0, style=bold];
d23 -> d24  [key=0, style=solid];
d23 -> d51  [key=2, style=dotted];
d23 -> d90  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d23 -> d40  [color=darkseagreen4, key=1, label=typeInfo, style=dashed];
d23 -> d43  [color=darkseagreen4, key=1, label=typeInfo, style=dashed];
d27 -> d27  [color=darkorchid, key=3, label="Local variable System.Func<T> makeDefault", style=bold];
d27 -> d28  [key=0, style=solid];
d27 -> d31  [color=darkseagreen4, key=1, label=makeDefault, style=dashed];
d102 -> d102  [color=darkseagreen4, key=1, label=p, style=dashed];
d102 -> d103  [key=0, style=solid];
d102 -> d104  [key=2, style=dotted];
d102 -> d73  [key=2, style=dotted];
d102 -> d51  [key=2, style=dotted];
d102 -> d75  [key=2, style=dotted];
d102 -> d105  [key=2, style=dotted];
d102 -> d106  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d28 -> d29  [key=0, style=solid];
d28 -> d32  [key=0, style=solid];
d28 -> d55  [key=2, style=dotted];
d29 -> d30  [key=0, style=solid];
d29 -> d56  [key=2, style=dotted];
d29 -> d57  [key=2, style=dotted];
d29 -> d31  [color=darkseagreen4, key=1, label=preprocessorErrors, style=dashed];
d32 -> d33  [key=0, style=solid];
d32 -> d62  [key=2, style=dotted];
d32 -> d47  [color=darkseagreen4, key=1, label=tokenizerResult, style=dashed];
d34 -> d35  [key=0, style=solid];
d34 -> d64  [key=2, style=dotted];
d34 -> d109  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d34 -> d36  [color=darkseagreen4, key=1, label=partitions, style=dashed];
d34 -> d37  [color=darkseagreen4, key=1, label=partitions, style=dashed];
d110 -> d111  [key=0, style=solid];
d110 -> d112  [key=2, style=dotted];
d35 -> d35  [color=darkseagreen4, key=1, label=pt, style=dashed];
d35 -> d36  [key=0, style=solid];
d35 -> d65  [key=2, style=dotted];
d35 -> d66  [key=2, style=dotted];
d35 -> d113  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d35 -> d38  [color=darkseagreen4, key=1, label=optionSpecPropsResult, style=dashed];
d35 -> d47  [color=darkseagreen4, key=1, label=optionSpecPropsResult, style=dashed];
d114 -> d115  [key=0, style=solid];
d114 -> d116  [key=2, style=dotted];
d36 -> d36  [color=darkseagreen4, key=1, label=pt, style=dashed];
d36 -> d37  [key=0, style=solid];
d36 -> d67  [key=2, style=dotted];
d36 -> d66  [key=2, style=dotted];
d36 -> d117  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d36 -> d38  [color=darkseagreen4, key=1, label=valueSpecPropsResult, style=dashed];
d36 -> d47  [color=darkseagreen4, key=1, label=valueSpecPropsResult, style=dashed];
d118 -> d119  [key=0, style=solid];
d118 -> d116  [key=2, style=dotted];
d37 -> d37  [color=darkseagreen4, key=1, label=token, style=dashed];
d37 -> d38  [key=0, style=solid];
d37 -> d68  [key=2, style=dotted];
d37 -> d69  [key=2, style=dotted];
d37 -> d70  [key=2, style=dotted];
d37 -> d120  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d37 -> d121  [color=darkseagreen4, key=1, label=token, style=dashed];
d37 -> d47  [color=darkseagreen4, key=1, label=missingValueErrors, style=dashed];
d121 -> d122  [key=0, style=solid];
d121 -> d123  [key=2, style=dotted];
d41 -> d42  [key=0, style=solid];
d41 -> d73  [key=2, style=dotted];
d41 -> d51  [key=2, style=dotted];
d41 -> d124  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d48 -> d48  [color=darkseagreen4, key=1, label=e, style=dashed];
d48 -> d49  [key=0, style=solid];
d48 -> d87  [key=2, style=dotted];
d16 -> d17  [key=0, style=solid];
d12 -> d13  [key=0, style=solid];
d14 -> d12  [color=blue, key=0, style=bold];
d18 -> d16  [color=blue, key=0, style=bold];
d31 -> d50  [key=0, style=solid];
d31 -> d58  [key=2, style=dotted];
d31 -> d59  [key=2, style=dotted];
d31 -> d60  [key=2, style=dotted];
d31 -> d61  [key=2, style=dotted];
d49 -> d50  [key=0, style=solid];
d49 -> d88  [key=2, style=dotted];
d49 -> d89  [key=2, style=dotted];
d24 -> d27  [color=darkseagreen4, key=1, label=specProps, style=dashed];
d24 -> d102  [color=darkseagreen4, key=1, label=specProps, style=dashed];
d24 -> d35  [color=darkseagreen4, key=1, label=specProps, style=dashed];
d24 -> d36  [color=darkseagreen4, key=1, label=specProps, style=dashed];
d24 -> d25  [key=0, style=solid];
d24 -> d52  [key=2, style=dotted];
d24 -> d95  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d24 -> d43  [color=darkseagreen4, key=1, label=specProps, style=dashed];
d90 -> d91  [key=0, style=solid];
d40 -> d41  [key=0, style=solid];
d40 -> d43  [key=0, style=solid];
d40 -> d72  [key=2, style=dotted];
d43 -> d43  [color=darkseagreen4, key=1, label=sp, style=dashed];
d43 -> d44  [key=0, style=solid];
d43 -> d75  [key=2, style=dotted];
d43 -> d76  [key=2, style=dotted];
d43 -> d45  [color=darkseagreen4, key=1, label=ctor, style=dashed];
d26 -> d27  [key=0, style=solid];
d26 -> d32  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
d26 -> d34  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
d26 -> d110  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
d26 -> d37  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
d26 -> d53  [key=2, style=dotted];
d26 -> d54  [key=2, style=dotted];
d160 -> d102  [color=darkseagreen4, key=1, label="CSharpx.Maybe<System.Func<T>>", style=dashed];
d161 -> d102  [color=darkseagreen4, key=1, label=specProps, style=dashed];
d101 -> d102  [key=0, style=solid];
d103 -> d101  [color=blue, key=0, style=bold];
d106 -> d107  [key=0, style=solid];
d30 -> d32  [key=0, style=solid];
d30 -> d31  [key=0, style=solid];
d30 -> d55  [key=2, style=dotted];
d33 -> d34  [key=0, style=solid];
d33 -> d63  [key=2, style=dotted];
d33 -> d46  [color=darkseagreen4, key=1, label=tokens, style=dashed];
d47 -> d48  [key=0, style=solid];
d47 -> d49  [color=darkseagreen4, key=1, label=allErrors, style=dashed];
d47 -> d84  [key=2, style=dotted];
d47 -> d85  [key=2, style=dotted];
d47 -> d86  [key=2, style=dotted];
d109 -> d110  [key=0, style=solid];
d162 -> d110  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d162 -> d121  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d163 -> d110  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
d111 -> d109  [color=blue, key=0, style=bold];
d113 -> d114  [key=0, style=solid];
d38 -> d39  [key=0, style=solid];
d38 -> d63  [key=2, style=dotted];
d38 -> d71  [key=2, style=dotted];
d38 -> d42  [color=darkseagreen4, key=1, label=specPropsWithValue, style=dashed];
d38 -> d44  [color=darkseagreen4, key=1, label=specPropsWithValue, style=dashed];
d38 -> d46  [color=darkseagreen4, key=1, label=specPropsWithValue, style=dashed];
d164 -> d114  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
d164 -> d118  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
d115 -> d113  [color=blue, key=0, style=bold];
d117 -> d118  [key=0, style=solid];
d119 -> d117  [color=blue, key=0, style=bold];
d120 -> d121  [key=0, style=solid];
d165 -> d121  [color=darkseagreen4, key=1, label=token, style=dashed];
d122 -> d120  [color=blue, key=0, style=bold];
d42 -> d49  [color=darkseagreen4, key=1, label=instance, style=dashed];
d42 -> d42  [color=darkseagreen4, key=1, label=instance, style=dashed];
d42 -> d46  [key=0, style=solid];
d42 -> d74  [key=2, style=dotted];
d42 -> d127  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d42 -> d131  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d42 -> d135  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d42 -> d139  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d42 -> d142  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d42 -> d146  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d124 -> d125  [key=0, style=solid];
d83 -> d19  [color=darkorchid, key=3, label="Parameter variable System.Collections.Generic.IEnumerable<string> arguments", style=bold];
d45 -> d49  [color=darkseagreen4, key=1, label=instance, style=dashed];
d45 -> d46  [key=0, style=solid];
d45 -> d81  [key=2, style=dotted];
d25 -> d26  [key=0, style=solid];
d25 -> d25  [color=darkseagreen4, key=1, label=pt, style=dashed];
d95 -> d96  [key=0, style=solid];
d44 -> d51  [key=2, style=dotted];
d44 -> d75  [key=2, style=dotted];
d44 -> d45  [key=0, style=solid];
d44 -> d44  [color=darkseagreen4, key=1, label=prms, style=dashed];
d44 -> d77  [key=2, style=dotted];
d44 -> d78  [key=2, style=dotted];
d44 -> d79  [key=2, style=dotted];
d44 -> d80  [key=2, style=dotted];
d44 -> d152  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d44 -> d155  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d92 -> d90  [color=blue, key=0, style=bold];
d91 -> d92  [key=0, style=solid];
d91 -> d93  [key=2, style=dotted];
d91 -> d94  [key=2, style=dotted];
d39 -> d40  [key=0, style=solid];
d108 -> d106  [color=blue, key=0, style=bold];
d107 -> d108  [key=0, style=solid];
d107 -> d93  [key=2, style=dotted];
d46 -> d47  [key=0, style=solid];
d46 -> d83  [key=2, style=dotted];
d46 -> d82  [key=2, style=dotted];
d127 -> d128  [key=0, style=solid];
d131 -> d132  [key=0, style=solid];
d135 -> d136  [key=0, style=solid];
d139 -> d140  [key=0, style=solid];
d142 -> d143  [key=0, style=solid];
d146 -> d147  [key=0, style=solid];
d126 -> d124  [color=blue, key=0, style=bold];
d125 -> d126  [key=0, style=solid];
d125 -> d93  [key=2, style=dotted];
d97 -> d95  [color=blue, key=0, style=bold];
d96 -> d97  [key=0, style=solid];
d96 -> d98  [key=2, style=dotted];
d96 -> d99  [key=2, style=dotted];
d96 -> d100  [key=2, style=dotted];
d152 -> d153  [key=0, style=solid];
d155 -> d156  [key=0, style=solid];
d129 -> d127  [color=blue, key=0, style=bold];
d128 -> d129  [key=0, style=solid];
d128 -> d130  [key=2, style=dotted];
d133 -> d131  [color=blue, key=0, style=bold];
d132 -> d133  [key=0, style=solid];
d132 -> d134  [key=2, style=dotted];
d137 -> d135  [color=blue, key=0, style=bold];
d136 -> d137  [key=0, style=solid];
d136 -> d138  [key=2, style=dotted];
d136 -> d130  [key=2, style=dotted];
d141 -> d139  [color=blue, key=0, style=bold];
d140 -> d141  [key=0, style=solid];
d140 -> d134  [key=2, style=dotted];
d144 -> d142  [color=blue, key=0, style=bold];
d143 -> d144  [key=0, style=solid];
d143 -> d138  [key=2, style=dotted];
d143 -> d145  [key=2, style=dotted];
d148 -> d146  [color=blue, key=0, style=bold];
d147 -> d148  [key=0, style=solid];
d147 -> d149  [key=2, style=dotted];
d147 -> d150  [key=2, style=dotted];
d147 -> d151  [key=2, style=dotted];
d154 -> d152  [color=blue, key=0, style=bold];
d153 -> d154  [key=0, style=solid];
d157 -> d155  [color=blue, key=0, style=bold];
d156 -> d157  [key=0, style=solid];
m1_20 -> m1_21  [key=0, style=solid];
m1_21 -> m1_22  [key=0, style=solid];
m1_21 -> m1_6  [key=2, style=dotted];
m1_21 -> m1_7  [key=2, style=dotted];
m1_21 -> m1_24  [color=darkseagreen4, key=1, label=expectedTokens, style=dashed];
m1_22 -> m1_23  [key=0, style=solid];
m1_22 -> m1_8  [key=2, style=dotted];
m1_22 -> m1_9  [key=2, style=dotted];
m1_22 -> m1_10  [key=2, style=dotted];
m1_22 -> m1_27  [color=darkseagreen4, key=1, label=specs, style=dashed];
m1_24 -> m1_25  [key=0, style=solid];
m1_24 -> m1_15  [key=2, style=dotted];
m1_23 -> m1_24  [key=0, style=solid];
m1_23 -> m1_11  [key=2, style=dotted];
m1_23 -> m1_6  [key=2, style=dotted];
m1_23 -> m1_7  [key=2, style=dotted];
m1_23 -> m1_12  [key=2, style=dotted];
m1_23 -> m1_13  [key=2, style=dotted];
m1_23 -> m1_14  [key=2, style=dotted];
m1_23 -> m1_26  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_25 -> m1_20  [color=blue, key=0, style=bold];
m1_29 -> m1_30  [color=green, key=0, style=solid];
m1_29 -> m1_17  [color=darkseagreen4, key=1, label=specs, style=dashed];
m1_30 -> m1_31  [color=green, key=0, style=solid];
m1_30 -> m1_6  [color=green, key=2, style=dotted];
m1_30 -> m1_7  [color=green, key=2, style=dotted];
m1_30 -> m1_35  [color=green, key=2, style=dotted];
m1_30 -> m1_33  [color=green, key=1, label=expectedTokens, style=dashed];
m1_30 -> m1_27  [color=darkseagreen4, key=1, label=specs, style=dashed];
m1_31 -> m1_31  [color=green, key=3, label="Local variable System.Func<string, bool> nameLookup", style=bold];
m1_31 -> m1_32  [color=green, key=0, style=solid];
m1_31 -> m1_38  [color=green, key=1, label=string, style=dashed];
m1_33 -> m1_34  [color=green, key=0, style=solid];
m1_33 -> m1_15  [color=green, key=2, style=dotted];
m1_32 -> m1_33  [color=green, key=0, style=solid];
m1_32 -> m1_11  [color=green, key=2, style=dotted];
m1_32 -> m1_6  [color=green, key=2, style=dotted];
m1_32 -> m1_7  [color=green, key=2, style=dotted];
m1_32 -> m1_12  [color=green, key=2, style=dotted];
m1_32 -> m1_13  [color=green, key=2, style=dotted];
m1_32 -> m1_36  [color=green, key=2, style=dotted];
m1_34 -> m1_29  [color=blue, key=0, style=bold];
m1_0 -> m1_1  [key=0, style=solid];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_6  [key=2, style=dotted];
m1_1 -> m1_7  [key=2, style=dotted];
m1_1 -> m1_4  [color=darkseagreen4, key=1, label=expectedTokens, style=dashed];
m1_2 -> m1_3  [key=0, style=solid];
m1_2 -> m1_8  [key=2, style=dotted];
m1_2 -> m1_9  [key=2, style=dotted];
m1_2 -> m1_10  [key=2, style=dotted];
m1_2 -> m1_17  [color=darkseagreen4, key=1, label=specs, style=dashed];
m1_4 -> m1_5  [key=0, style=solid];
m1_4 -> m1_15  [key=2, style=dotted];
m1_3 -> m1_4  [key=0, style=solid];
m1_3 -> m1_11  [key=2, style=dotted];
m1_3 -> m1_6  [key=2, style=dotted];
m1_3 -> m1_7  [key=2, style=dotted];
m1_3 -> m1_12  [key=2, style=dotted];
m1_3 -> m1_13  [key=2, style=dotted];
m1_3 -> m1_14  [key=2, style=dotted];
m1_3 -> m1_16  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_5 -> m1_0  [color=blue, key=0, style=bold];
m1_37 -> m1_38  [color=green, key=0, style=solid];
m1_17 -> m1_18  [key=0, style=solid];
m1_17 -> d19  [key=2, style=dotted];
m1_16 -> m1_17  [key=0, style=solid];
m1_18 -> m1_16  [color=blue, key=0, style=bold];
m1_27 -> m1_28  [key=0, style=solid];
m1_27 -> d19  [key=2, style=dotted];
m1_26 -> m1_27  [key=0, style=solid];
m1_28 -> m1_26  [color=blue, key=0, style=bold];
m1_38 -> m1_39  [color=green, key=0, style=solid];
m1_38 -> m1_40  [color=green, key=2, style=dotted];
m1_39 -> m1_37  [color=blue, key=0, style=bold];
}
