digraph  {
m0_4 [cluster="CommandLine.CommandLineParserException.CommandLineParserException(string, System.Exception)", file="InstanceBuilderTests.cs", label="Entry CommandLine.CommandLineParserException.CommandLineParserException(string, System.Exception)", span="57-57"];
m0_5 [cluster="CommandLine.CommandLineParserException.CommandLineParserException(string, System.Exception)", file="InstanceBuilderTests.cs", label="Exit CommandLine.CommandLineParserException.CommandLineParserException(string, System.Exception)", span="57-57"];
m0_0 [cluster="CommandLine.CommandLineParserException.CommandLineParserException()", file="InstanceBuilderTests.cs", label="Entry CommandLine.CommandLineParserException.CommandLineParserException()", span="48-48"];
m0_1 [cluster="CommandLine.CommandLineParserException.CommandLineParserException()", file="InstanceBuilderTests.cs", label="Exit CommandLine.CommandLineParserException.CommandLineParserException()", span="48-48"];
m0_6 [cluster="CommandLine.CommandLineParserException.CommandLineParserException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)", file="InstanceBuilderTests.cs", label="Entry CommandLine.CommandLineParserException.CommandLineParserException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)", span="62-62"];
m0_7 [cluster="CommandLine.CommandLineParserException.CommandLineParserException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)", file="InstanceBuilderTests.cs", label="Exit CommandLine.CommandLineParserException.CommandLineParserException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)", span="62-62"];
m0_2 [cluster="CommandLine.CommandLineParserException.CommandLineParserException(string)", file="InstanceBuilderTests.cs", label="Entry CommandLine.CommandLineParserException.CommandLineParserException(string)", span="52-52"];
m0_3 [cluster="CommandLine.CommandLineParserException.CommandLineParserException(string)", file="InstanceBuilderTests.cs", label="Exit CommandLine.CommandLineParserException.CommandLineParserException(string)", span="52-52"];
m1_46 [cluster="Unk.ThrowingValidate", file="ParserResultExtensions.cs", label="Entry Unk.ThrowingValidate", span=""];
m1_65 [cluster="T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", file="ParserResultExtensions.cs", label="Entry T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="58-58"];
m1_10 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<char>>)", file="ParserResultExtensions.cs", label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<char>>)", span="44-44"];
m1_108 [cluster="string.MatchName(string, string, System.StringComparer)", file="ParserResultExtensions.cs", label="Entry string.MatchName(string, string, System.StringComparer)", span="8-8"];
m1_55 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="ParserResultExtensions.cs", label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12"];
m1_44 [cluster="CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", file="ParserResultExtensions.cs", label="Entry CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", span="100-100"];
m1_101 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="ParserResultExtensions.cs", label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="12-12"];
m1_71 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", file="ParserResultExtensions.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", span="0-0"];
m1_115 [cluster="CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", file="ParserResultExtensions.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", span="149-149"];
m1_130 [cluster="CommandLine.Infrastructure.Maybe<T>.MatchNothing()", file="ParserResultExtensions.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.MatchNothing()", span="26-26"];
m1_90 [cluster="Unk.>", file="ParserResultExtensions.cs", label="Entry Unk.>", span=""];
m1_18 [cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="ParserResultExtensions.cs", label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16"];
m1_58 [cluster="CommandLine.Core.Specification.IsValue()", file="ParserResultExtensions.cs", label="Entry CommandLine.Core.Specification.IsValue()", span="15-15"];
m1_70 [cluster="System.Type.CreateDefaultForImmutable()", file="ParserResultExtensions.cs", label="Entry System.Type.CreateDefaultForImmutable()", span="122-122"];
m1_74 [cluster="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", file="ParserResultExtensions.cs", label="Entry System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="40-40"];
m1_68 [cluster="System.Reflection.MethodBase.GetParameters()", file="ParserResultExtensions.cs", label="Entry System.Reflection.MethodBase.GetParameters()", span="0-0"];
m1_76 [cluster="Unk.Create", file="ParserResultExtensions.cs", label="Entry Unk.Create", span=""];
m1_123 [cluster="CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", file="ParserResultExtensions.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", span="144-144"];
m1_119 [cluster="CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", file="ParserResultExtensions.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", span="134-134"];
m1_86 [cluster="CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CommandLine.Infrastructure.Maybe<object>)", file="ParserResultExtensions.cs", label="Entry CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CommandLine.Infrastructure.Maybe<object>)", span="21-21"];
m1_14 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="ParserResultExtensions.cs", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
m1_67 [cluster="Unk.GetConstructor", file="ParserResultExtensions.cs", label="Entry Unk.GetConstructor", span=""];
m1_50 [cluster="System.StringComparer.Equals(string, string)", file="ParserResultExtensions.cs", label="Entry System.StringComparer.Equals(string, string)", span="0-0"];
m1_60 [cluster="Unk.Single", file="ParserResultExtensions.cs", label="Entry Unk.Single", span=""];
m1_53 [cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="ParserResultExtensions.cs", label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="100-100"];
m1_48 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="ParserResultExtensions.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
m1_51 [cluster="System.Func<TResult>.Invoke()", file="ParserResultExtensions.cs", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
m1_45 [cluster="System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", file="ParserResultExtensions.cs", label="Entry System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", span="14-14"];
m1_140 [cluster="lambda expression", file="ParserResultExtensions.cs", label="Entry lambda expression", span="115-115"];
m1_4 [cluster="lambda expression", file="ParserResultExtensions.cs", label="Entry lambda expression", span="21-28"];
m1_6 [cluster="lambda expression", color=green, community=0, file="ParserResultExtensions.cs", label="13: var explodedTokens = Tokenizer.ExplodeOptionList(\r\n                            tokens,\r\n                            name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer))", span="24-26"];
m1_5 [cluster="lambda expression", file="ParserResultExtensions.cs", label="var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer))", span="23-23"];
m1_7 [cluster="lambda expression", file="ParserResultExtensions.cs", label="return explodedTokens;", span="27-27"];
m1_15 [cluster="lambda expression", file="ParserResultExtensions.cs", label="Entry lambda expression", span="26-26"];
m1_16 [cluster="lambda expression", color=green, community=0, file="ParserResultExtensions.cs", label="16: NameLookup.HavingSeparator(name, optionSpecs, nameComparer)", span="26-26"];
m1_17 [cluster="lambda expression", file="ParserResultExtensions.cs", label="Exit lambda expression", span="26-26"];
m1_12 [cluster="lambda expression", file="ParserResultExtensions.cs", label="NameLookup.Contains(name, optionSpecs, nameComparer)", span="23-23"];
m1_88 [cluster="lambda expression", file="ParserResultExtensions.cs", label="typeof(T).IsMutable()\r\n                    ? factory.Return(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="53-56"];
m1_95 [cluster="lambda expression", file="ParserResultExtensions.cs", label="TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer)", span="72-72"];
m1_99 [cluster="lambda expression", file="ParserResultExtensions.cs", label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="77-77"];
m1_103 [cluster="lambda expression", file="ParserResultExtensions.cs", label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="83-83"];
m1_106 [cluster="lambda expression", file="ParserResultExtensions.cs", label="token.Text.MatchName(o.ShortName, o.LongName, nameComparer)", span="87-87"];
m1_8 [cluster="lambda expression", file="ParserResultExtensions.cs", label="Exit lambda expression", span="21-28"];
m1_11 [cluster="lambda expression", file="ParserResultExtensions.cs", label="Entry lambda expression", span="23-23"];
m1_13 [cluster="lambda expression", file="ParserResultExtensions.cs", label="Exit lambda expression", span="23-23"];
m1_77 [cluster="lambda expression", file="ParserResultExtensions.cs", label="Entry lambda expression", span="41-41"];
m1_87 [cluster="lambda expression", file="ParserResultExtensions.cs", label="Entry lambda expression", span="52-56"];
m1_89 [cluster="lambda expression", file="ParserResultExtensions.cs", label="Exit lambda expression", span="52-56"];
m1_91 [cluster="lambda expression", file="ParserResultExtensions.cs", label="Entry lambda expression", span="54-54"];
m1_94 [cluster="lambda expression", file="ParserResultExtensions.cs", label="Entry lambda expression", span="72-72"];
m1_96 [cluster="lambda expression", file="ParserResultExtensions.cs", label="Exit lambda expression", span="72-72"];
m1_98 [cluster="lambda expression", file="ParserResultExtensions.cs", label="Entry lambda expression", span="77-77"];
m1_100 [cluster="lambda expression", file="ParserResultExtensions.cs", label="Exit lambda expression", span="77-77"];
m1_102 [cluster="lambda expression", file="ParserResultExtensions.cs", label="Entry lambda expression", span="83-83"];
m1_104 [cluster="lambda expression", file="ParserResultExtensions.cs", label="Exit lambda expression", span="83-83"];
m1_105 [cluster="lambda expression", file="ParserResultExtensions.cs", label="Entry lambda expression", span="87-87"];
m1_107 [cluster="lambda expression", file="ParserResultExtensions.cs", label="Exit lambda expression", span="87-87"];
m1_109 [cluster="lambda expression", file="ParserResultExtensions.cs", label="Entry lambda expression", span="94-94"];
m1_81 [cluster="lambda expression", file="ParserResultExtensions.cs", label="Entry lambda expression", span="43-44"];
m1_79 [cluster="lambda expression", file="ParserResultExtensions.cs", label="Exit lambda expression", span="41-41"];
m1_78 [cluster="lambda expression", file="ParserResultExtensions.cs", label="f().GetType()", span="41-41"];
m1_93 [cluster="lambda expression", file="ParserResultExtensions.cs", label="Exit lambda expression", span="54-54"];
m1_92 [cluster="lambda expression", file="ParserResultExtensions.cs", label="f()", span="54-54"];
m1_112 [cluster="lambda expression", file="ParserResultExtensions.cs", label="Entry lambda expression", span="97-97"];
m1_116 [cluster="lambda expression", file="ParserResultExtensions.cs", label="Entry lambda expression", span="98-98"];
m1_120 [cluster="lambda expression", file="ParserResultExtensions.cs", label="Entry lambda expression", span="100-100"];
m1_124 [cluster="lambda expression", file="ParserResultExtensions.cs", label="Entry lambda expression", span="101-101"];
m1_127 [cluster="lambda expression", file="ParserResultExtensions.cs", label="Entry lambda expression", span="103-105"];
m1_131 [cluster="lambda expression", file="ParserResultExtensions.cs", label="Entry lambda expression", span="106-106"];
m1_111 [cluster="lambda expression", file="ParserResultExtensions.cs", label="Exit lambda expression", span="94-94"];
m1_110 [cluster="lambda expression", file="ParserResultExtensions.cs", label="f()", span="94-94"];
m1_83 [cluster="lambda expression", file="ParserResultExtensions.cs", label="Exit lambda expression", span="43-44"];
m1_82 [cluster="lambda expression", file="ParserResultExtensions.cs", label="SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>())", span="43-44"];
m1_137 [cluster="lambda expression", file="ParserResultExtensions.cs", label="Entry lambda expression", span="114-114"];
m1_114 [cluster="lambda expression", file="ParserResultExtensions.cs", label="Exit lambda expression", span="97-97"];
m1_113 [cluster="lambda expression", file="ParserResultExtensions.cs", label="sp.Value.IsJust()", span="97-97"];
m1_118 [cluster="lambda expression", file="ParserResultExtensions.cs", label="Exit lambda expression", span="98-98"];
m1_117 [cluster="lambda expression", file="ParserResultExtensions.cs", label="sp.Value.FromJust()", span="98-98"];
m1_122 [cluster="lambda expression", file="ParserResultExtensions.cs", label="Exit lambda expression", span="100-100"];
m1_121 [cluster="lambda expression", file="ParserResultExtensions.cs", label="sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust()", span="100-100"];
m1_126 [cluster="lambda expression", file="ParserResultExtensions.cs", label="Exit lambda expression", span="101-101"];
m1_125 [cluster="lambda expression", file="ParserResultExtensions.cs", label="sp.Specification.DefaultValue.FromJust()", span="101-101"];
m1_129 [cluster="lambda expression", file="ParserResultExtensions.cs", label="Exit lambda expression", span="103-105"];
m1_128 [cluster="lambda expression", file="ParserResultExtensions.cs", label="sp.Value.IsNothing()\r\n                            && sp.Specification.TargetType == TargetType.Sequence\r\n                            && sp.Specification.DefaultValue.MatchNothing()", span="103-105"];
m1_133 [cluster="lambda expression", file="ParserResultExtensions.cs", label="Exit lambda expression", span="106-106"];
m1_132 [cluster="lambda expression", file="ParserResultExtensions.cs", label="sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray()", span="106-106"];
m1_139 [cluster="lambda expression", file="ParserResultExtensions.cs", label="Exit lambda expression", span="114-114"];
m1_138 [cluster="lambda expression", file="ParserResultExtensions.cs", label=v, span="114-114"];
m1_141 [cluster="lambda expression", file="ParserResultExtensions.cs", label=d, span="115-115"];
m1_142 [cluster="lambda expression", file="ParserResultExtensions.cs", label="Exit lambda expression", span="115-115"];
m1_49 [cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="ParserResultExtensions.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0"];
m1_73 [cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="ParserResultExtensions.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12"];
m1_80 [cluster="object.GetType()", file="ParserResultExtensions.cs", label="Entry object.GetType()", span="0-0"];
m1_59 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="ParserResultExtensions.cs", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="265-265"];
m1_75 [cluster="Unk.Concat", file="ParserResultExtensions.cs", label="Entry Unk.Concat", span=""];
m1_135 [cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", file="ParserResultExtensions.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0"];
m1_136 [cluster="System.Type.CreateEmptyArray()", file="ParserResultExtensions.cs", label="Entry System.Type.CreateEmptyArray()", span="101-101"];
m1_69 [cluster="string.ToLower()", file="ParserResultExtensions.cs", label="Entry string.ToLower()", span="0-0"];
m1_134 [cluster="System.Type.GetGenericArguments()", file="ParserResultExtensions.cs", label="Entry System.Type.GetGenericArguments()", span="0-0"];
m1_9 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="ParserResultExtensions.cs", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11"];
m1_84 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="ParserResultExtensions.cs", label="Entry CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="82-82"];
m1_97 [cluster="CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="ParserResultExtensions.cs", label="Entry CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="23-23"];
m1_64 [cluster="System.Activator.CreateInstance<T>()", file="ParserResultExtensions.cs", label="Entry System.Activator.CreateInstance<T>()", span="0-0"];
m1_56 [cluster="CommandLine.Core.Specification.IsOption()", file="ParserResultExtensions.cs", label="Entry CommandLine.Core.Specification.IsOption()", span="10-10"];
m1_63 [cluster="System.Type.IsMutable()", file="ParserResultExtensions.cs", label="Entry System.Type.IsMutable()", span="115-115"];
m1_85 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="ParserResultExtensions.cs", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63"];
m1_47 [cluster="System.Collections.IEnumerable.OfType<TResult>()", file="ParserResultExtensions.cs", label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0"];
m1_0 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResultExtensions.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="13-13"];
m1_1 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, file="ParserResultExtensions.cs", label="16: return Build(\r\n                factory,\r\n                (args, optionSpecs) =>\r\n                    {\r\n                        var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer));\r\n                        var explodedTokens = Tokenizer.ExplodeOptionList(\r\n                            tokens,\r\n                            name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer));\r\n                        return explodedTokens;\r\n                    },\r\n                arguments,\r\n                nameComparer,\r\n                parsingCulture);", span="19-31"];
m1_2 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResultExtensions.cs", label="Exit CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="13-13"];
m1_3 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResultExtensions.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="34-34"];
m1_19 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResultExtensions.cs", label="var typeInfo = factory.Return(f => f().GetType(), typeof(T))", span="41-41"];
m1_23 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResultExtensions.cs", label="Func<T> makeDefault = () =>\r\n                typeof(T).IsMutable()\r\n                    ? factory.Return(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="52-56"];
m1_24 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResultExtensions.cs", label="arguments.Any() && nameComparer.Equals(''--help'', arguments.First())", span="58-58"];
m1_26 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResultExtensions.cs", label="var tokenizerResult = tokenizer(arguments, optionSpecs)", span="66-66"];
m1_28 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResultExtensions.cs", label="var partitions = TokenPartitioner.Partition(\r\n                tokens,\r\n                name => TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer))", span="70-72"];
m1_29 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResultExtensions.cs", label="var optionSpecProps = OptionMapper.MapValues(\r\n                (from pt in specProps where pt.Specification.IsOption() select pt),\r\n                partitions.Options,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture),\r\n                nameComparer)", span="74-78"];
m1_30 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResultExtensions.cs", label="var valueSpecProps = ValueMapper.MapValues(\r\n                (from pt in specProps where pt.Specification.IsValue() select pt),\r\n                    partitions.Values,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture))", span="80-83"];
m1_31 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResultExtensions.cs", label="var missingValueErrors = from token in partitions.Errors\r\n                                     select new MissingValueOptionError(\r\n                                         optionSpecs.Single(o => token.Text.MatchName(o.ShortName, o.LongName, nameComparer)).FromOptionSpecification())", span="85-87"];
m1_35 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResultExtensions.cs", label="instance = factory.Return(f => f(), Activator.CreateInstance<T>())", span="94-94"];
m1_25 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResultExtensions.cs", label="return ParserResult.Create(\r\n                    ParserResultType.Options,\r\n                    makeDefault(),\r\n                    new[] { new HelpRequestedError() });", span="60-63"];
m1_42 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResultExtensions.cs", label="return ParserResult.Create(\r\n                ParserResultType.Options,\r\n                instance,\r\n                tokenizerResult.Errors\r\n                    .Concat(missingValueErrors)\r\n                    .Concat(optionSpecProps.Errors)\r\n                    .Concat(valueSpecProps.Errors)\r\n                    .Concat(validationErrors));", span="123-130"];
m1_20 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResultExtensions.cs", label="var specProps = typeInfo.GetSpecifications(pi => SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>()))", span="43-44"];
m1_34 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResultExtensions.cs", label="typeInfo.IsMutable()", span="92-92"];
m1_22 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResultExtensions.cs", label="var optionSpecs = specs\r\n                .ThrowingValidate(SpecificationGuards.Lookup)\r\n                .OfType<OptionSpecification>()", span="48-50"];
m1_27 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResultExtensions.cs", label="var tokens = tokenizerResult.Value", span="68-68"];
m1_32 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResultExtensions.cs", label="var specPropsWithValue = optionSpecProps.Value.Concat(valueSpecProps.Value)", span="89-89"];
m1_36 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResultExtensions.cs", label="instance = instance\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsJust(),\r\n                        sp => sp.Value.FromJust())\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust(),\r\n                        sp => sp.Specification.DefaultValue.FromJust())\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsNothing()\r\n                            && sp.Specification.TargetType == TargetType.Sequence\r\n                            && sp.Specification.DefaultValue.MatchNothing(),\r\n                        sp => sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray())", span="95-106"];
m1_41 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResultExtensions.cs", label="var validationErrors = specPropsWithValue.Validate(\r\n                SpecificationPropertyRules.Lookup(tokens))", span="120-121"];
m1_40 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResultExtensions.cs", label="instance = (T)ctor.Invoke(values)", span="117-117"];
m1_21 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResultExtensions.cs", label="var specs = from pt in specProps select pt.Specification", span="46-46"];
m1_38 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResultExtensions.cs", label="var ctor = t.GetConstructor((from p in specProps select p.Specification.ConversionType).ToArray())", span="111-111"];
m1_39 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResultExtensions.cs", label="var values = (from prms in ctor.GetParameters()\r\n                              join sp in specPropsWithValue on prms.Name.ToLower() equals sp.Property.Name.ToLower()\r\n                              select sp.Value.Return(v => v,\r\n                                    sp.Specification.DefaultValue.Return(d => d,\r\n                                        sp.Specification.ConversionType.CreateDefaultForImmutable()))).ToArray()", span="112-116"];
m1_33 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResultExtensions.cs", label="T instance", span="91-91"];
m1_37 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResultExtensions.cs", label="var t = typeof(T)", span="110-110"];
m1_43 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResultExtensions.cs", label="Exit CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="34-34"];
m1_72 [cluster="System.Reflection.ConstructorInfo.Invoke(object[])", file="ParserResultExtensions.cs", label="Entry System.Reflection.ConstructorInfo.Invoke(object[])", span="0-0"];
m1_66 [cluster="Unk.ToArray", file="ParserResultExtensions.cs", label="Entry Unk.ToArray", span=""];
m1_52 [cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="ParserResultExtensions.cs", label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="353-353"];
m1_61 [cluster="Unk.FromOptionSpecification", file="ParserResultExtensions.cs", label="Entry Unk.FromOptionSpecification", span=""];
m1_54 [cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", file="ParserResultExtensions.cs", label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0"];
m1_62 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="ParserResultExtensions.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
m1_57 [cluster="Unk.MapValues", file="ParserResultExtensions.cs", label="Entry Unk.MapValues", span=""];
m1_143 [file="ParserResultExtensions.cs", label="System.StringComparer", span=""];
m1_144 [file="ParserResultExtensions.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
m1_145 [file="ParserResultExtensions.cs", label="CommandLine.Infrastructure.Maybe<System.Func<T>>", span=""];
m1_146 [file="ParserResultExtensions.cs", label=specProps, span=""];
m1_147 [file="ParserResultExtensions.cs", label="System.StringComparer", span=""];
m1_148 [file="ParserResultExtensions.cs", label=optionSpecs, span=""];
m1_149 [file="ParserResultExtensions.cs", label="System.Globalization.CultureInfo", span=""];
m1_150 [file="ParserResultExtensions.cs", label=token, span=""];
m3_52 [cluster="CommandLine.Core.Specification.GetSetName()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.Specification.GetSetName()", span="80-80"];
m3_0 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="18-18"];
m3_1 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="SpecificationPropertyRules.cs", label="return specProps =>\r\n                {\r\n                    var options = specProps.Where(sp => sp.Specification.IsOption() && sp.Value.IsJust());\r\n                    var groups = options.GroupBy(g => ((OptionSpecification)g.Specification).SetName);\r\n                    if (groups.Count() > 1)\r\n                    {\r\n                        return options.Select(s => Maybe.Just<Error>(new MutuallyExclusiveSetError(NameInfo.FromOptionSpecification((OptionSpecification)s.Specification))));\r\n                    }\r\n                    return Enumerable.Empty<Nothing<Error>>();\r\n                };", span="20-29"];
m3_2 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="SpecificationPropertyRules.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="18-18"];
m3_19 [cluster="CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", span="149-149"];
m3_59 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="52-52"];
m3_60 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", color=red, community=0, file="SpecificationPropertyRules.cs", label="3: return specProps =>\r\n                {\r\n                    var options = specProps.Where(\r\n                        sp => sp.Specification.ConversionType.ToDescriptorKind() == TypeDescriptorKind.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (!sp.Specification.IsMinNotSpecified() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min)\r\n                            || (!sp.Specification.IsMaxNotSpecified() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max)\r\n                        )\r\n                    );\r\n                    if (options.Any())\r\n                    {\r\n                        return options.Select(s => Maybe.Just<Error>(new SequenceOutOfRangeError(\r\n                            NameInfo.FromSpecification(s.Specification))));\r\n                    }\r\n                    return Enumerable.Empty<Nothing<Error>>();\r\n                };", span="54-70"];
m3_61 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="SpecificationPropertyRules.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="52-52"];
m3_57 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283"];
m3_40 [cluster="Unk.Any", file="SpecificationPropertyRules.cs", label="Entry Unk.Any", span=""];
m3_10 [cluster="Unk.Where", file="SpecificationPropertyRules.cs", label="Entry Unk.Where", span=""];
m3_14 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="SpecificationPropertyRules.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m3_58 [cluster="Unk.FromSpecification", file="SpecificationPropertyRules.cs", label="Entry Unk.FromSpecification", span=""];
m3_73 [cluster="CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", span="134-134"];
m3_51 [cluster="CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", span="144-144"];
m3_78 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316"];
m3_75 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="66-67"];
m3_4 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var options = specProps.Where(sp => sp.Specification.IsOption() && sp.Value.IsJust())", span="22-22"];
m3_3 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="20-29"];
m3_5 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var groups = options.GroupBy(g => ((OptionSpecification)g.Specification).SetName)", span="23-23"];
m3_15 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="22-22"];
m3_7 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="return options.Select(s => Maybe.Just<Error>(new MutuallyExclusiveSetError(NameInfo.FromOptionSpecification((OptionSpecification)s.Specification))));", span="26-26"];
m3_6 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="groups.Count() > 1", span="24-24"];
m3_20 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="23-23"];
m3_8 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="return Enumerable.Empty<Nothing<Error>>();", span="28-28"];
m3_9 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="20-29"];
m3_23 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="26-26"];
m3_16 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="sp.Specification.IsOption() && sp.Value.IsJust()", span="22-22"];
m3_17 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="22-22"];
m3_21 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="((OptionSpecification)g.Specification).SetName", span="23-23"];
m3_22 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="23-23"];
m3_24 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Maybe.Just<Error>(new MutuallyExclusiveSetError(NameInfo.FromOptionSpecification((OptionSpecification)s.Specification)))", span="26-26"];
m3_25 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="26-26"];
m3_33 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="List<string> setsWithTrue =\r\n                    specProps.Where(sp => sp.Specification.IsOption() && sp.Value.IsJust() && sp.Specification.Required)\r\n                        .Select(x => x.Specification.GetSetName()).ToList()", span="36-38"];
m3_34 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var requiredButEmpty =\r\n                    specProps.Where(sp => sp.Value.IsNothing() && \r\n                                          sp.Specification.Required &&\r\n                                          !setsWithTrue.Contains(sp.Specification.GetSetName())).ToList()", span="40-43"];
m3_32 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="34-49"];
m3_41 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="37-37"];
m3_44 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="38-38"];
m3_49 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="sp.Value.IsNothing() && \r\n                                          sp.Specification.Required &&\r\n                                          !setsWithTrue.Contains(sp.Specification.GetSetName())", span="41-43"];
m3_35 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="requiredButEmpty.Any()", span="44-44"];
m3_48 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="41-43"];
m3_36 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="return requiredButEmpty.Select(s => Maybe.Just<Error>(new MissingRequiredOptionError(\r\n                            NameInfo.FromSpecification(s.Specification))));", span="45-46"];
m3_37 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="return Enumerable.Empty<Nothing<Error>>();", span="48-48"];
m3_38 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="34-49"];
m3_54 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="45-46"];
m3_42 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="sp.Specification.IsOption() && sp.Value.IsJust() && sp.Specification.Required", span="37-37"];
m3_43 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="37-37"];
m3_45 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="x.Specification.GetSetName()", span="38-38"];
m3_46 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="38-38"];
m3_50 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="41-43"];
m3_55 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Maybe.Just<Error>(new MissingRequiredOptionError(\r\n                            NameInfo.FromSpecification(s.Specification)))", span="45-46"];
m3_56 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="45-46"];
m3_63 [cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs", label="24: var options = specProps.Where(\r\n                        sp => sp.Specification.ConversionType.ToDescriptorKind() == TypeDescriptorKind.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (!sp.Specification.IsMinNotSpecified() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min)\r\n                            || (!sp.Specification.IsMaxNotSpecified() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max)\r\n                        )\r\n                    )", span="56-63"];
m3_62 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="54-70"];
m3_64 [cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs", label="13: options.Any()", span="64-64"];
m3_68 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="57-62"];
m3_65 [cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs", label="7: return options.Select(s => Maybe.Just<Error>(new SequenceOutOfRangeError(\r\n                            NameInfo.FromSpecification(s.Specification))));", span="66-67"];
m3_66 [cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs", label="7: return Enumerable.Empty<Nothing<Error>>();", span="69-69"];
m3_67 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="54-70"];
m3_69 [cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs", label="5: sp.Specification.ConversionType.ToDescriptorKind() == TypeDescriptorKind.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (!sp.Specification.IsMinNotSpecified() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min)\r\n                            || (!sp.Specification.IsMaxNotSpecified() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max)\r\n                        )", span="57-62"];
m3_70 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="57-62"];
m3_76 [cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs", label="13: Maybe.Just<Error>(new SequenceOutOfRangeError(\r\n                            NameInfo.FromSpecification(s.Specification)))", span="66-67"];
m3_77 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="66-67"];
m3_72 [cluster="CommandLine.Core.Specification.IsMinNotSpecified()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.Specification.IsMinNotSpecified()", span="70-70"];
m3_29 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="32-32"];
m3_30 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", color=red, community=0, file="SpecificationPropertyRules.cs", label="26: return specProps =>\r\n            {\r\n                List<string> setsWithTrue =\r\n                    specProps.Where(sp => sp.Specification.IsOption() && sp.Value.IsJust() && sp.Specification.Required)\r\n                        .Select(x => x.Specification.GetSetName()).ToList();\r\n                \r\n                var requiredButEmpty =\r\n                    specProps.Where(sp => sp.Value.IsNothing() && \r\n                                          sp.Specification.Required &&\r\n                                          !setsWithTrue.Contains(sp.Specification.GetSetName())).ToList();\r\n                    if (requiredButEmpty.Any()) {\r\n                        return requiredButEmpty.Select(s => Maybe.Just<Error>(new MissingRequiredOptionError(\r\n                            NameInfo.FromSpecification(s.Specification))));\r\n                    }\r\n                    return Enumerable.Empty<Nothing<Error>>();\r\n                };", span="34-49"];
m3_31 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", file="SpecificationPropertyRules.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="32-32"];
m3_28 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68"];
m3_13 [cluster="Unk.Select", file="SpecificationPropertyRules.cs", label="Entry Unk.Select", span=""];
m3_71 [cluster="System.Type.ToDescriptorKind()", file="SpecificationPropertyRules.cs", label="Entry System.Type.ToDescriptorKind()", span="22-22"];
m3_39 [cluster="Unk.ToList", file="SpecificationPropertyRules.cs", label="Entry Unk.ToList", span=""];
m3_26 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294"];
m3_18 [cluster="CommandLine.Core.Specification.IsOption()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.Specification.IsOption()", span="11-11"];
m3_27 [cluster="CommandLine.NameInfo.FromOptionSpecification(CommandLine.Core.OptionSpecification)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.NameInfo.FromOptionSpecification(CommandLine.Core.OptionSpecification)", span="60-60"];
m3_47 [cluster="Unk.GetSetName", file="SpecificationPropertyRules.cs", label="Entry Unk.GetSetName", span=""];
m3_11 [cluster="Unk.GroupBy", file="SpecificationPropertyRules.cs", label="Entry Unk.GroupBy", span=""];
m3_12 [cluster="Unk.Count", file="SpecificationPropertyRules.cs", label="Entry Unk.Count", span=""];
m3_53 [cluster="System.Collections.Generic.List<T>.Contains(T)", file="SpecificationPropertyRules.cs", label="Entry System.Collections.Generic.List<T>.Contains(T)", span="0-0"];
m3_74 [cluster="CommandLine.Core.Specification.IsMaxNotSpecified()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.Specification.IsMaxNotSpecified()", span="75-75"];
m3_79 [file="SpecificationPropertyRules.cs", label=setsWithTrue, span=""];
m0_4 -> m0_5  [key=0, style=solid];
m0_5 -> m0_4  [color=blue, key=0, style=bold];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_0  [color=blue, key=0, style=bold];
m0_6 -> m0_7  [key=0, style=solid];
m0_7 -> m0_6  [color=blue, key=0, style=bold];
m0_2 -> m0_3  [key=0, style=solid];
m0_3 -> m0_2  [color=blue, key=0, style=bold];
m1_140 -> m1_141  [key=0, style=solid];
m1_4 -> m1_6  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_4 -> m1_16  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_4 -> m1_5  [key=0, style=solid];
m1_4 -> m1_12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_6 -> m1_7  [color=green, key=0, style=solid];
m1_6 -> m1_10  [color=green, key=2, style=dotted];
m1_6 -> m1_15  [color=green, key=1, label="lambda expression", style=dashed];
m1_5 -> m1_6  [color=green, key=0, style=solid];
m1_5 -> m1_9  [key=2, style=dotted];
m1_5 -> m1_11  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_7 -> m1_8  [key=0, style=solid];
m1_15 -> m1_16  [color=green, key=0, style=solid];
m1_16 -> m1_17  [color=green, key=0, style=solid];
m1_16 -> m1_18  [color=green, key=2, style=dotted];
m1_17 -> m1_15  [color=blue, key=0, style=bold];
m1_12 -> m1_13  [key=0, style=solid];
m1_12 -> m1_14  [key=2, style=dotted];
m1_88 -> m1_88  [color=darkseagreen4, key=1, label=p, style=dashed];
m1_88 -> m1_89  [key=0, style=solid];
m1_88 -> m1_63  [key=2, style=dotted];
m1_88 -> m1_64  [key=2, style=dotted];
m1_88 -> m1_44  [key=2, style=dotted];
m1_88 -> m1_66  [key=2, style=dotted];
m1_88 -> m1_90  [key=2, style=dotted];
m1_88 -> m1_91  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_95 -> m1_96  [key=0, style=solid];
m1_95 -> m1_97  [key=2, style=dotted];
m1_99 -> m1_100  [key=0, style=solid];
m1_99 -> m1_101  [key=2, style=dotted];
m1_103 -> m1_104  [key=0, style=solid];
m1_103 -> m1_101  [key=2, style=dotted];
m1_106 -> m1_107  [key=0, style=solid];
m1_106 -> m1_108  [key=2, style=dotted];
m1_8 -> m1_4  [color=blue, key=0, style=bold];
m1_11 -> m1_12  [key=0, style=solid];
m1_13 -> m1_11  [color=blue, key=0, style=bold];
m1_77 -> m1_78  [key=0, style=solid];
m1_87 -> m1_88  [key=0, style=solid];
m1_89 -> m1_87  [color=blue, key=0, style=bold];
m1_91 -> m1_92  [key=0, style=solid];
m1_94 -> m1_95  [key=0, style=solid];
m1_96 -> m1_94  [color=blue, key=0, style=bold];
m1_98 -> m1_99  [key=0, style=solid];
m1_100 -> m1_98  [color=blue, key=0, style=bold];
m1_102 -> m1_103  [key=0, style=solid];
m1_104 -> m1_102  [color=blue, key=0, style=bold];
m1_105 -> m1_106  [key=0, style=solid];
m1_107 -> m1_105  [color=blue, key=0, style=bold];
m1_109 -> m1_110  [key=0, style=solid];
m1_81 -> m1_82  [key=0, style=solid];
m1_79 -> m1_77  [color=blue, key=0, style=bold];
m1_78 -> m1_51  [key=2, style=dotted];
m1_78 -> m1_79  [key=0, style=solid];
m1_78 -> m1_80  [key=2, style=dotted];
m1_93 -> m1_91  [color=blue, key=0, style=bold];
m1_92 -> m1_51  [key=2, style=dotted];
m1_92 -> m1_93  [key=0, style=solid];
m1_112 -> m1_113  [key=0, style=solid];
m1_116 -> m1_117  [key=0, style=solid];
m1_120 -> m1_121  [key=0, style=solid];
m1_124 -> m1_125  [key=0, style=solid];
m1_127 -> m1_128  [key=0, style=solid];
m1_131 -> m1_132  [key=0, style=solid];
m1_111 -> m1_109  [color=blue, key=0, style=bold];
m1_110 -> m1_51  [key=2, style=dotted];
m1_110 -> m1_111  [key=0, style=solid];
m1_83 -> m1_81  [color=blue, key=0, style=bold];
m1_82 -> m1_83  [key=0, style=solid];
m1_82 -> m1_84  [key=2, style=dotted];
m1_82 -> m1_85  [key=2, style=dotted];
m1_82 -> m1_86  [key=2, style=dotted];
m1_137 -> m1_138  [key=0, style=solid];
m1_114 -> m1_112  [color=blue, key=0, style=bold];
m1_113 -> m1_114  [key=0, style=solid];
m1_113 -> m1_115  [key=2, style=dotted];
m1_118 -> m1_116  [color=blue, key=0, style=bold];
m1_117 -> m1_118  [key=0, style=solid];
m1_117 -> m1_119  [key=2, style=dotted];
m1_122 -> m1_120  [color=blue, key=0, style=bold];
m1_121 -> m1_122  [key=0, style=solid];
m1_121 -> m1_123  [key=2, style=dotted];
m1_121 -> m1_115  [key=2, style=dotted];
m1_126 -> m1_124  [color=blue, key=0, style=bold];
m1_125 -> m1_126  [key=0, style=solid];
m1_125 -> m1_119  [key=2, style=dotted];
m1_129 -> m1_127  [color=blue, key=0, style=bold];
m1_128 -> m1_129  [key=0, style=solid];
m1_128 -> m1_123  [key=2, style=dotted];
m1_128 -> m1_130  [key=2, style=dotted];
m1_133 -> m1_131  [color=blue, key=0, style=bold];
m1_132 -> m1_133  [key=0, style=solid];
m1_132 -> m1_134  [key=2, style=dotted];
m1_132 -> m1_135  [key=2, style=dotted];
m1_132 -> m1_136  [key=2, style=dotted];
m1_139 -> m1_137  [color=blue, key=0, style=bold];
m1_138 -> m1_139  [key=0, style=solid];
m1_141 -> m1_142  [key=0, style=solid];
m1_142 -> m1_140  [color=blue, key=0, style=bold];
m1_0 -> m1_1  [color=green, key=0, style=solid];
m1_0 -> m1_6  [color=green, key=1, label="System.StringComparer", style=dashed];
m1_0 -> m1_16  [color=green, key=1, label="System.StringComparer", style=dashed];
m1_0 -> m1_5  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_0 -> m1_12  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_1 -> m1_2  [color=green, key=0, style=solid];
m1_1 -> m1_3  [color=green, key=2, style=dotted];
m1_1 -> m1_4  [color=green, key=1, label="lambda expression", style=dashed];
m1_2 -> m1_0  [color=blue, key=0, style=bold];
m1_3 -> m1_19  [key=0, style=solid];
m1_3 -> m1_23  [color=darkseagreen4, key=1, label="CommandLine.Infrastructure.Maybe<System.Func<T>>", style=dashed];
m1_3 -> m1_88  [color=darkseagreen4, key=1, label="CommandLine.Infrastructure.Maybe<System.Func<T>>", style=dashed];
m1_3 -> m1_24  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m1_3 -> m1_26  [color=darkseagreen4, key=1, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>", style=dashed];
m1_3 -> m1_28  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_3 -> m1_95  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_3 -> m1_29  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_3 -> m1_99  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m1_3 -> m1_30  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m1_3 -> m1_103  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m1_3 -> m1_31  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_3 -> m1_106  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_3 -> m1_35  [color=darkseagreen4, key=1, label="CommandLine.Infrastructure.Maybe<System.Func<T>>", style=dashed];
m1_19 -> m1_20  [key=0, style=solid];
m1_19 -> m1_44  [key=2, style=dotted];
m1_19 -> m1_77  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_19 -> m1_34  [color=darkseagreen4, key=1, label=typeInfo, style=dashed];
m1_23 -> m1_24  [key=0, style=solid];
m1_23 -> m1_25  [color=darkseagreen4, key=1, label=makeDefault, style=dashed];
m1_24 -> m1_25  [key=0, style=solid];
m1_24 -> m1_26  [key=0, style=solid];
m1_24 -> m1_48  [key=2, style=dotted];
m1_24 -> m1_49  [key=2, style=dotted];
m1_24 -> m1_50  [key=2, style=dotted];
m1_26 -> m1_27  [key=0, style=solid];
m1_26 -> m1_54  [key=2, style=dotted];
m1_26 -> m1_42  [color=darkseagreen4, key=1, label=tokenizerResult, style=dashed];
m1_28 -> m1_29  [key=0, style=solid];
m1_28 -> m1_55  [key=2, style=dotted];
m1_28 -> m1_94  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_28 -> m1_30  [color=darkseagreen4, key=1, label=partitions, style=dashed];
m1_28 -> m1_31  [color=darkseagreen4, key=1, label=partitions, style=dashed];
m1_29 -> m1_29  [color=darkseagreen4, key=1, label=pt, style=dashed];
m1_29 -> m1_30  [key=0, style=solid];
m1_29 -> m1_56  [key=2, style=dotted];
m1_29 -> m1_57  [key=2, style=dotted];
m1_29 -> m1_98  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_29 -> m1_32  [color=darkseagreen4, key=1, label=optionSpecProps, style=dashed];
m1_29 -> m1_42  [color=darkseagreen4, key=1, label=optionSpecProps, style=dashed];
m1_30 -> m1_30  [color=darkseagreen4, key=1, label=pt, style=dashed];
m1_30 -> m1_31  [key=0, style=solid];
m1_30 -> m1_58  [key=2, style=dotted];
m1_30 -> m1_57  [key=2, style=dotted];
m1_30 -> m1_102  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_30 -> m1_32  [color=darkseagreen4, key=1, label=valueSpecProps, style=dashed];
m1_30 -> m1_42  [color=darkseagreen4, key=1, label=valueSpecProps, style=dashed];
m1_31 -> m1_31  [color=darkseagreen4, key=1, label=token, style=dashed];
m1_31 -> m1_32  [key=0, style=solid];
m1_31 -> m1_59  [key=2, style=dotted];
m1_31 -> m1_60  [key=2, style=dotted];
m1_31 -> m1_61  [key=2, style=dotted];
m1_31 -> m1_105  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_31 -> m1_106  [color=darkseagreen4, key=1, label=token, style=dashed];
m1_31 -> m1_42  [color=darkseagreen4, key=1, label=missingValueErrors, style=dashed];
m1_35 -> m1_36  [key=0, style=solid];
m1_35 -> m1_64  [key=2, style=dotted];
m1_35 -> m1_44  [key=2, style=dotted];
m1_35 -> m1_109  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_25 -> m1_43  [key=0, style=solid];
m1_25 -> m1_51  [key=2, style=dotted];
m1_25 -> m1_52  [key=2, style=dotted];
m1_25 -> m1_53  [key=2, style=dotted];
m1_42 -> m1_43  [key=0, style=solid];
m1_42 -> m1_75  [key=2, style=dotted];
m1_42 -> m1_76  [key=2, style=dotted];
m1_20 -> m1_23  [color=darkseagreen4, key=1, label=specProps, style=dashed];
m1_20 -> m1_88  [color=darkseagreen4, key=1, label=specProps, style=dashed];
m1_20 -> m1_29  [color=darkseagreen4, key=1, label=specProps, style=dashed];
m1_20 -> m1_30  [color=darkseagreen4, key=1, label=specProps, style=dashed];
m1_20 -> m1_21  [key=0, style=solid];
m1_20 -> m1_45  [key=2, style=dotted];
m1_20 -> m1_81  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_20 -> m1_38  [color=darkseagreen4, key=1, label=specProps, style=dashed];
m1_34 -> m1_35  [key=0, style=solid];
m1_34 -> m1_37  [key=0, style=solid];
m1_34 -> m1_63  [key=2, style=dotted];
m1_22 -> m1_23  [key=0, style=solid];
m1_22 -> m1_26  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
m1_22 -> m1_28  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
m1_22 -> m1_95  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
m1_22 -> m1_31  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
m1_22 -> m1_46  [key=2, style=dotted];
m1_22 -> m1_47  [key=2, style=dotted];
m1_27 -> m1_28  [key=0, style=solid];
m1_27 -> m1_41  [color=darkseagreen4, key=1, label=tokens, style=dashed];
m1_32 -> m1_33  [key=0, style=solid];
m1_32 -> m1_62  [key=2, style=dotted];
m1_32 -> m1_36  [color=darkseagreen4, key=1, label=specPropsWithValue, style=dashed];
m1_32 -> m1_39  [color=darkseagreen4, key=1, label=specPropsWithValue, style=dashed];
m1_32 -> m1_41  [color=darkseagreen4, key=1, label=specPropsWithValue, style=dashed];
m1_36 -> m1_42  [color=darkseagreen4, key=1, label=instance, style=dashed];
m1_36 -> m1_36  [color=darkseagreen4, key=1, label=instance, style=dashed];
m1_36 -> m1_41  [key=0, style=solid];
m1_36 -> m1_65  [key=2, style=dotted];
m1_36 -> m1_112  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_36 -> m1_116  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_36 -> m1_120  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_36 -> m1_124  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_36 -> m1_127  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_36 -> m1_131  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_41 -> m1_42  [key=0, style=solid];
m1_41 -> m1_73  [key=2, style=dotted];
m1_41 -> m1_74  [key=2, style=dotted];
m1_40 -> m1_42  [color=darkseagreen4, key=1, label=instance, style=dashed];
m1_40 -> m1_41  [key=0, style=solid];
m1_40 -> m1_72  [key=2, style=dotted];
m1_21 -> m1_22  [key=0, style=solid];
m1_21 -> m1_21  [color=darkseagreen4, key=1, label=pt, style=dashed];
m1_38 -> m1_66  [key=2, style=dotted];
m1_38 -> m1_40  [color=darkseagreen4, key=1, label=ctor, style=dashed];
m1_38 -> m1_38  [color=darkseagreen4, key=1, label=p, style=dashed];
m1_38 -> m1_39  [key=0, style=solid];
m1_38 -> m1_67  [key=2, style=dotted];
m1_39 -> m1_44  [key=2, style=dotted];
m1_39 -> m1_40  [key=0, style=solid];
m1_39 -> m1_39  [color=darkseagreen4, key=1, label=prms, style=dashed];
m1_39 -> m1_68  [key=2, style=dotted];
m1_39 -> m1_69  [key=2, style=dotted];
m1_39 -> m1_70  [key=2, style=dotted];
m1_39 -> m1_71  [key=2, style=dotted];
m1_39 -> m1_137  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_39 -> m1_140  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_33 -> m1_34  [key=0, style=solid];
m1_37 -> m1_38  [key=0, style=solid];
m1_43 -> m1_3  [color=blue, key=0, style=bold];
m1_143 -> m1_6  [color=green, key=1, label="System.StringComparer", style=dashed];
m1_143 -> m1_16  [color=green, key=1, label="System.StringComparer", style=dashed];
m1_143 -> m1_5  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_143 -> m1_12  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_144 -> m1_16  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_144 -> m1_12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_145 -> m1_88  [color=darkseagreen4, key=1, label="CommandLine.Infrastructure.Maybe<System.Func<T>>", style=dashed];
m1_146 -> m1_88  [color=darkseagreen4, key=1, label=specProps, style=dashed];
m1_147 -> m1_95  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_147 -> m1_106  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_148 -> m1_95  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
m1_149 -> m1_99  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m1_149 -> m1_103  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m1_150 -> m1_106  [color=darkseagreen4, key=1, label=token, style=dashed];
m3_0 -> m3_1  [key=0, style=solid];
m3_1 -> m3_2  [key=0, style=solid];
m3_1 -> m3_4  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m3_2 -> m3_0  [color=blue, key=0, style=bold];
m3_59 -> m3_60  [color=red, key=0, style=solid];
m3_60 -> m3_61  [color=red, key=0, style=solid];
m3_60 -> m3_63  [color=red, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m3_61 -> m3_59  [color=blue, key=0, style=bold];
m3_75 -> m3_76  [color=red, key=0, style=solid];
m3_4 -> m3_5  [key=0, style=solid];
m3_4 -> m3_10  [key=2, style=dotted];
m3_4 -> m3_15  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_4 -> m3_7  [color=darkseagreen4, key=1, label=options, style=dashed];
m3_3 -> m3_4  [key=0, style=solid];
m3_5 -> m3_6  [key=0, style=solid];
m3_5 -> m3_11  [key=2, style=dotted];
m3_5 -> m3_20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_15 -> m3_16  [key=0, style=solid];
m3_7 -> m3_9  [key=0, style=solid];
m3_7 -> m3_13  [key=2, style=dotted];
m3_7 -> m3_23  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_6 -> m3_7  [key=0, style=solid];
m3_6 -> m3_8  [key=0, style=solid];
m3_6 -> m3_12  [key=2, style=dotted];
m3_20 -> m3_21  [key=0, style=solid];
m3_8 -> m3_9  [key=0, style=solid];
m3_8 -> m3_14  [key=2, style=dotted];
m3_9 -> m3_3  [color=blue, key=0, style=bold];
m3_23 -> m3_24  [key=0, style=solid];
m3_16 -> m3_17  [key=0, style=solid];
m3_16 -> m3_18  [key=2, style=dotted];
m3_16 -> m3_19  [key=2, style=dotted];
m3_17 -> m3_15  [color=blue, key=0, style=bold];
m3_21 -> m3_22  [key=0, style=solid];
m3_22 -> m3_20  [color=blue, key=0, style=bold];
m3_24 -> m3_25  [key=0, style=solid];
m3_24 -> m3_26  [key=2, style=dotted];
m3_24 -> m3_27  [key=2, style=dotted];
m3_24 -> m3_28  [key=2, style=dotted];
m3_25 -> m3_23  [color=blue, key=0, style=bold];
m3_33 -> m3_34  [key=0, style=solid];
m3_33 -> m3_10  [key=2, style=dotted];
m3_33 -> m3_13  [key=2, style=dotted];
m3_33 -> m3_39  [key=2, style=dotted];
m3_33 -> m3_41  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_33 -> m3_44  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_33 -> m3_49  [color=darkseagreen4, key=1, label=setsWithTrue, style=dashed];
m3_34 -> m3_35  [key=0, style=solid];
m3_34 -> m3_10  [key=2, style=dotted];
m3_34 -> m3_39  [key=2, style=dotted];
m3_34 -> m3_48  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_34 -> m3_36  [color=darkseagreen4, key=1, label=requiredButEmpty, style=dashed];
m3_32 -> m3_33  [key=0, style=solid];
m3_32 -> m3_34  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m3_41 -> m3_42  [key=0, style=solid];
m3_44 -> m3_45  [key=0, style=solid];
m3_49 -> m3_50  [key=0, style=solid];
m3_49 -> m3_51  [key=2, style=dotted];
m3_49 -> m3_52  [key=2, style=dotted];
m3_49 -> m3_53  [key=2, style=dotted];
m3_35 -> m3_36  [key=0, style=solid];
m3_35 -> m3_37  [key=0, style=solid];
m3_35 -> m3_40  [key=2, style=dotted];
m3_48 -> m3_49  [key=0, style=solid];
m3_36 -> m3_38  [key=0, style=solid];
m3_36 -> m3_13  [key=2, style=dotted];
m3_36 -> m3_54  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_37 -> m3_38  [key=0, style=solid];
m3_37 -> m3_14  [key=2, style=dotted];
m3_38 -> m3_32  [color=blue, key=0, style=bold];
m3_54 -> m3_55  [key=0, style=solid];
m3_42 -> m3_43  [key=0, style=solid];
m3_42 -> m3_18  [key=2, style=dotted];
m3_42 -> m3_19  [key=2, style=dotted];
m3_43 -> m3_41  [color=blue, key=0, style=bold];
m3_45 -> m3_46  [key=0, style=solid];
m3_45 -> m3_47  [key=2, style=dotted];
m3_46 -> m3_44  [color=blue, key=0, style=bold];
m3_50 -> m3_48  [color=blue, key=0, style=bold];
m3_55 -> m3_56  [key=0, style=solid];
m3_55 -> m3_57  [key=2, style=dotted];
m3_55 -> m3_58  [key=2, style=dotted];
m3_55 -> m3_28  [key=2, style=dotted];
m3_56 -> m3_54  [color=blue, key=0, style=bold];
m3_63 -> m3_64  [color=red, key=0, style=solid];
m3_63 -> m3_10  [color=red, key=2, style=dotted];
m3_63 -> m3_68  [color=red, key=1, label="lambda expression", style=dashed];
m3_63 -> m3_65  [color=red, key=1, label=options, style=dashed];
m3_62 -> m3_63  [color=red, key=0, style=solid];
m3_64 -> m3_65  [color=red, key=0, style=solid];
m3_64 -> m3_66  [color=red, key=0, style=solid];
m3_64 -> m3_40  [color=red, key=2, style=dotted];
m3_68 -> m3_69  [color=red, key=0, style=solid];
m3_65 -> m3_67  [color=red, key=0, style=solid];
m3_65 -> m3_13  [color=red, key=2, style=dotted];
m3_65 -> m3_75  [color=red, key=1, label="lambda expression", style=dashed];
m3_66 -> m3_67  [color=red, key=0, style=solid];
m3_66 -> m3_14  [color=red, key=2, style=dotted];
m3_67 -> m3_62  [color=blue, key=0, style=bold];
m3_69 -> m3_70  [color=red, key=0, style=solid];
m3_69 -> m3_71  [color=red, key=2, style=dotted];
m3_69 -> m3_19  [color=red, key=2, style=dotted];
m3_69 -> m3_72  [color=red, key=2, style=dotted];
m3_69 -> m3_73  [color=red, key=2, style=dotted];
m3_69 -> m3_74  [color=red, key=2, style=dotted];
m3_70 -> m3_68  [color=blue, key=0, style=bold];
m3_76 -> m3_77  [color=red, key=0, style=solid];
m3_76 -> m3_78  [color=red, key=2, style=dotted];
m3_76 -> m3_58  [color=red, key=2, style=dotted];
m3_76 -> m3_28  [color=red, key=2, style=dotted];
m3_77 -> m3_75  [color=blue, key=0, style=bold];
m3_29 -> m3_30  [color=red, key=0, style=solid];
m3_30 -> m3_31  [color=red, key=0, style=solid];
m3_30 -> m3_33  [color=red, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m3_30 -> m3_34  [color=red, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m3_31 -> m3_29  [color=blue, key=0, style=bold];
m3_79 -> m3_49  [color=darkseagreen4, key=1, label=setsWithTrue, style=dashed];
}
