digraph  {
m0_8 [cluster="System.IO.StringWriter.StringWriter()", file="NameLookupTests.cs", label="Entry System.IO.StringWriter.StringWriter()", span="0-0"];
m0_16 [cluster="Unk.Be", file="NameLookupTests.cs", label="Entry Unk.Be", span=""];
m0_27 [cluster="CommandLine.ParserSettings.ParserSettings()", file="NameLookupTests.cs", label="Entry CommandLine.ParserSettings.ParserSettings()", span="44-44"];
m0_6 [cluster="CommandLine.Tests.Unit.ParserSettingsFixture.Setting_help_writer_using_constructor()", file="NameLookupTests.cs", label="writer.ToString().Should().Be(''MockOptions::GetUsage()'')", span="49-49"];
m0_15 [cluster="System.IO.StringWriter.ToString()", file="NameLookupTests.cs", label="Entry System.IO.StringWriter.ToString()", span="0-0"];
m0_10 [cluster="CommandLine.ParserSettings.ParserSettings(System.IO.TextWriter)", file="NameLookupTests.cs", label="Entry CommandLine.ParserSettings.ParserSettings(System.IO.TextWriter)", span="65-65"];
m0_12 [cluster="CommandLine.IParser.ParseArguments(string[], object)", file="NameLookupTests.cs", label="Entry CommandLine.IParser.ParseArguments(string[], object)", span="49-49"];
m0_14 [cluster="Unk.BeFalse", file="NameLookupTests.cs", label="Entry Unk.BeFalse", span=""];
m0_7 [cluster="CommandLine.Tests.Unit.ParserSettingsFixture.Setting_help_writer_using_constructor()", file="NameLookupTests.cs", label="Exit CommandLine.Tests.Unit.ParserSettingsFixture.Setting_help_writer_using_constructor()", span="40-40"];
m0_0 [cluster="CommandLine.Tests.Unit.ParserSettingsFixture.Setting_help_writer_using_constructor()", file="NameLookupTests.cs", label="Entry CommandLine.Tests.Unit.ParserSettingsFixture.Setting_help_writer_using_constructor()", span="40-40"];
m0_2 [cluster="CommandLine.Tests.Unit.ParserSettingsFixture.Setting_help_writer_using_constructor()", color=green, community=0, file="NameLookupTests.cs", label="IParser parser = new Parser(new ParserSettings(writer))", prediction=0, span="43-43"];
m0_1 [cluster="CommandLine.Tests.Unit.ParserSettingsFixture.Setting_help_writer_using_constructor()", file="NameLookupTests.cs", label="var writer = new StringWriter()", span="42-42"];
m0_3 [cluster="CommandLine.Tests.Unit.ParserSettingsFixture.Setting_help_writer_using_constructor()", file="NameLookupTests.cs", label="var options = new SimpleOptionsWithHelpOption()", span="44-44"];
m0_4 [cluster="CommandLine.Tests.Unit.ParserSettingsFixture.Setting_help_writer_using_constructor()", file="NameLookupTests.cs", label="bool success = parser.ParseArguments(new string[] {''--help''}, options)", span="46-46"];
m0_5 [cluster="CommandLine.Tests.Unit.ParserSettingsFixture.Setting_help_writer_using_constructor()", file="NameLookupTests.cs", label="success.Should().BeFalse()", span="48-48"];
m0_17 [cluster="CommandLine.Tests.Unit.ParserSettingsFixture.Setting_help_writer_using_property()", file="NameLookupTests.cs", label="Entry CommandLine.Tests.Unit.ParserSettingsFixture.Setting_help_writer_using_property()", span="53-53"];
m0_18 [cluster="CommandLine.Tests.Unit.ParserSettingsFixture.Setting_help_writer_using_property()", file="NameLookupTests.cs", label="var writer = new StringWriter()", span="55-55"];
m0_19 [cluster="CommandLine.Tests.Unit.ParserSettingsFixture.Setting_help_writer_using_property()", file="NameLookupTests.cs", label="var settings = new ParserSettings()", span="56-56"];
m0_20 [cluster="CommandLine.Tests.Unit.ParserSettingsFixture.Setting_help_writer_using_property()", file="NameLookupTests.cs", label="settings.HelpWriter = writer", span="57-57"];
m0_25 [cluster="CommandLine.Tests.Unit.ParserSettingsFixture.Setting_help_writer_using_property()", file="NameLookupTests.cs", label="writer.ToString().Should().Be(''MockOptions::GetUsage()'')", span="64-64"];
m0_21 [cluster="CommandLine.Tests.Unit.ParserSettingsFixture.Setting_help_writer_using_property()", file="NameLookupTests.cs", label="IParser parser = new Parser(settings)", span="58-58"];
m0_22 [cluster="CommandLine.Tests.Unit.ParserSettingsFixture.Setting_help_writer_using_property()", file="NameLookupTests.cs", label="var options = new SimpleOptionsWithHelpOption()", span="59-59"];
m0_23 [cluster="CommandLine.Tests.Unit.ParserSettingsFixture.Setting_help_writer_using_property()", file="NameLookupTests.cs", label="bool success = parser.ParseArguments(new string[] { ''--help'' }, options)", span="61-61"];
m0_24 [cluster="CommandLine.Tests.Unit.ParserSettingsFixture.Setting_help_writer_using_property()", file="NameLookupTests.cs", label="success.Should().BeFalse()", span="63-63"];
m0_26 [cluster="CommandLine.Tests.Unit.ParserSettingsFixture.Setting_help_writer_using_property()", file="NameLookupTests.cs", label="Exit CommandLine.Tests.Unit.ParserSettingsFixture.Setting_help_writer_using_property()", span="53-53"];
m0_9 [cluster="System.Collections.Generic.List<T>.List()", file="NameLookupTests.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m0_13 [cluster="Unk.Should", file="NameLookupTests.cs", label="Entry Unk.Should", span=""];
m0_11 [cluster="CommandLine.Tests.Fakes.SimpleOptionsWithHelpOption.SimpleOptionsWithHelpOption()", file="NameLookupTests.cs", label="Entry CommandLine.Tests.Fakes.SimpleOptionsWithHelpOption.SimpleOptionsWithHelpOption()", span="32-32"];
m3_51 [cluster="Unk.SingleOrDefault", file="Specification.cs", label="Entry Unk.SingleOrDefault", span=""];
m3_7 [cluster="CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", file="Specification.cs", label="Entry CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", span="81-81"];
m3_62 [cluster="CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", file="Specification.cs", label="return new NotParsed<object>(TypeInfo.Create(typeof(NullInstance), types), errors);", span="83-83"];
m3_63 [cluster="CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", file="Specification.cs", label="Exit CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", span="81-81"];
m3_31 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="Specification.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="14-14"];
m3_30 [cluster="Unk.>", file="Specification.cs", label="Entry Unk.>", span=""];
m3_34 [cluster="Unk.MakeNotParsed", file="Specification.cs", label="Entry Unk.MakeNotParsed", span=""];
m3_29 [cluster="Unk.Any", file="Specification.cs", label="Entry Unk.Any", span=""];
m3_16 [cluster="System.Func<T, TResult>.Invoke(T)", file="Specification.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m3_64 [cluster="CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="Specification.cs", label="Entry CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="163-163"];
m3_33 [cluster="CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", file="Specification.cs", label="Entry CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", span="382-382"];
m3_53 [cluster="CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", file="Specification.cs", label="Entry CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", span="408-408"];
m3_20 [cluster="CommandLine.VersionRequestedError.VersionRequestedError()", file="Specification.cs", label="Entry CommandLine.VersionRequestedError.VersionRequestedError()", span="457-457"];
m3_25 [cluster="System.StringComparer.Equals(string, string)", file="Specification.cs", label="Entry System.StringComparer.Equals(string, string)", span="0-0"];
m3_52 [cluster="Unk.ToMaybe", file="Specification.cs", label="Entry Unk.ToMaybe", span=""];
m3_41 [cluster="Unk.Single", file="Specification.cs", label="Entry Unk.Single", span=""];
m3_4 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="Specification.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
m3_26 [cluster="string.Concat(string, string)", file="Specification.cs", label="Entry string.Concat(string, string)", span="0-0"];
m3_5 [cluster="System.Func<TResult>.Invoke()", file="Specification.cs", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
m3_58 [cluster="lambda expression", file="Specification.cs", label="Entry lambda expression", span="76-76"];
m3_10 [cluster="lambda expression", color=green, community=0, file="Specification.cs", label="Func<string, bool> preprocCompare = command =>\r\n                        nameComparer.Equals(command, firstArg) ||\r\n                        nameComparer.Equals(string.Concat(''--'', command), firstArg)", prediction=1, span="26-28"];
m3_9 [cluster="lambda expression", file="Specification.cs", label="var firstArg = arguments.First()", span="24-24"];
m3_11 [cluster="lambda expression", file="Specification.cs", label="var verbs = Verb.SelectFromTypes(types)", span="30-30"];
m3_23 [cluster="lambda expression", color=green, community=0, file="Specification.cs", label="nameComparer.Equals(command, firstArg) ||\r\n                        nameComparer.Equals(string.Concat(''--'', command), firstArg)", prediction=1, span="27-28"];
m3_12 [cluster="lambda expression", file="Specification.cs", label="return preprocCompare(''help'')\r\n                    ? MakeNotParsed(types,\r\n                        MakeHelpVerbRequestedError(verbs,\r\n                            arguments.Skip(1).FirstOrDefault() ?? string.Empty, nameComparer))\r\n                    : preprocCompare(''version'')\r\n                        ? MakeNotParsed(types, new VersionRequestedError())\r\n                        : MatchVerb(tokenizer, verbs, arguments, nameComparer, parsingCulture, nonFatalErrors);", span="32-38"];
m3_22 [cluster="lambda expression", file="Specification.cs", label="Entry lambda expression", span="26-28"];
m3_24 [cluster="lambda expression", file="Specification.cs", label="Exit lambda expression", span="26-28"];
m3_8 [cluster="lambda expression", file="Specification.cs", label="Entry lambda expression", span="22-39"];
m3_13 [cluster="lambda expression", file="Specification.cs", label="Exit lambda expression", span="22-39"];
m3_36 [cluster="lambda expression", file="Specification.cs", label="nameComparer.Equals(a.Item1.Name, arguments.First())", span="54-54"];
m3_44 [cluster="lambda expression", file="Specification.cs", label="nameComparer.Equals(v.Item1.Name, arguments.First())", span="58-58"];
m3_56 [cluster="lambda expression", file="Specification.cs", label="nameComparer.Equals(v.Item1.Name, verb)", span="73-73"];
m3_39 [cluster="lambda expression", file="Specification.cs", label="verbs.Single(v => nameComparer.Equals(v.Item1.Name, arguments.First())).Item2.AutoDefault()", span="58-58"];
m3_35 [cluster="lambda expression", file="Specification.cs", label="Entry lambda expression", span="54-54"];
m3_37 [cluster="lambda expression", file="Specification.cs", label="Exit lambda expression", span="54-54"];
m3_43 [cluster="lambda expression", file="Specification.cs", label="Entry lambda expression", span="58-58"];
m3_45 [cluster="lambda expression", file="Specification.cs", label="Exit lambda expression", span="58-58"];
m3_55 [cluster="lambda expression", file="Specification.cs", label="Entry lambda expression", span="73-73"];
m3_57 [cluster="lambda expression", file="Specification.cs", label="Exit lambda expression", span="73-73"];
m3_38 [cluster="lambda expression", file="Specification.cs", label="Entry lambda expression", span="57-58"];
m3_46 [cluster="lambda expression", file="Specification.cs", label="Entry lambda expression", span="64-64"];
m3_40 [cluster="lambda expression", file="Specification.cs", label="Exit lambda expression", span="57-58"];
m3_48 [cluster="lambda expression", file="Specification.cs", label="Exit lambda expression", span="64-64"];
m3_47 [cluster="lambda expression", file="Specification.cs", label="v.Item2", span="64-64"];
m3_59 [cluster="lambda expression", file="Specification.cs", label="new HelpVerbRequestedError(v.Item1.Name, v.Item2, true)", span="76-76"];
m3_60 [cluster="lambda expression", file="Specification.cs", label="Exit lambda expression", span="76-76"];
m3_14 [cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="Specification.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0"];
m3_65 [cluster="CommandLine.TypeInfo.Create(System.Type, System.Collections.Generic.IEnumerable<System.Type>)", file="Specification.cs", label="Entry CommandLine.TypeInfo.Create(System.Type, System.Collections.Generic.IEnumerable<System.Type>)", span="34-34"];
m3_17 [cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="Specification.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0"];
m3_21 [cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="Specification.cs", label="Entry CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="46-46"];
m3_27 [cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="Specification.cs", label="return verbs.Any(a => nameComparer.Equals(a.Item1.Name, arguments.First()))\r\n                ? InstanceBuilder.Build(\r\n                    Maybe.Just<Func<object>>(\r\n                        () =>\r\n                            verbs.Single(v => nameComparer.Equals(v.Item1.Name, arguments.First())).Item2.AutoDefault()),\r\n                    tokenizer,\r\n                    arguments.Skip(1),\r\n                    nameComparer,\r\n                    parsingCulture,\r\n                    nonFatalErrors)\r\n                : MakeNotParsed(verbs.Select(v => v.Item2), new BadVerbSelectedError(arguments.First()));", span="54-64"];
m3_28 [cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="Specification.cs", label="Exit CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="46-46"];
m3_19 [cluster="CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", file="Specification.cs", label="Entry CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", span="67-67"];
m3_49 [cluster="CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", file="Specification.cs", label="return verb.Length > 0\r\n                ? verbs.SingleOrDefault(v => nameComparer.Equals(v.Item1.Name, verb))\r\n                        .ToMaybe()\r\n                        .Return(\r\n                            v => new HelpVerbRequestedError(v.Item1.Name, v.Item2, true),\r\n                            new HelpVerbRequestedError(null, null, false))\r\n                : new HelpVerbRequestedError(null, null, false);", span="72-78"];
m3_50 [cluster="CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", file="Specification.cs", label="Exit CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", span="67-67"];
m3_32 [cluster="Unk.Select", file="Specification.cs", label="Entry Unk.Select", span=""];
m3_6 [cluster="CommandLine.NoVerbSelectedError.NoVerbSelectedError()", file="Specification.cs", label="Entry CommandLine.NoVerbSelectedError.NoVerbSelectedError()", span="446-446"];
m3_54 [cluster="Unk.Return", file="Specification.cs", label="Entry Unk.Return", span=""];
m3_42 [cluster="Unk.AutoDefault", file="Specification.cs", label="Entry Unk.AutoDefault", span=""];
m3_18 [cluster="System.Collections.Generic.IEnumerable<TSource>.FirstOrDefault<TSource>()", file="Specification.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.FirstOrDefault<TSource>()", span="0-0"];
m3_0 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="Specification.cs", label="Entry CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="14-14"];
m3_1 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", color=green, community=0, file="Specification.cs", label="Func<ParserResult<object>> choose = () =>\r\n            {\r\n                var firstArg = arguments.First();\r\n\r\n                Func<string, bool> preprocCompare = command =>\r\n                        nameComparer.Equals(command, firstArg) ||\r\n                        nameComparer.Equals(string.Concat(''--'', command), firstArg);\r\n\r\n                var verbs = Verb.SelectFromTypes(types);\r\n\r\n                return preprocCompare(''help'')\r\n                    ? MakeNotParsed(types,\r\n                        MakeHelpVerbRequestedError(verbs,\r\n                            arguments.Skip(1).FirstOrDefault() ?? string.Empty, nameComparer))\r\n                    : preprocCompare(''version'')\r\n                        ? MakeNotParsed(types, new VersionRequestedError())\r\n                        : MatchVerb(tokenizer, verbs, arguments, nameComparer, parsingCulture, nonFatalErrors);\r\n            }", prediction=3, span="22-39"];
m3_2 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="Specification.cs", label="return arguments.Any()\r\n                ? choose()\r\n                : MakeNotParsed(types, new NoVerbSelectedError());", span="41-43"];
m3_3 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="Specification.cs", label="Exit CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="14-14"];
m3_15 [cluster="CommandLine.Core.Verb.SelectFromTypes(System.Collections.Generic.IEnumerable<System.Type>)", file="Specification.cs", label="Entry CommandLine.Core.Verb.SelectFromTypes(System.Collections.Generic.IEnumerable<System.Type>)", span="40-40"];
m3_61 [cluster="HelpVerbRequestedError.cstr", file="Specification.cs", label="Entry HelpVerbRequestedError.cstr", span=""];
m3_67 [file="Specification.cs", label="System.StringComparer", span=""];
m3_72 [file="Specification.cs", label=firstArg, span=""];
m3_66 [file="Specification.cs", label="System.Collections.Generic.IEnumerable<string>", span=""];
m3_68 [file="Specification.cs", label="System.Collections.Generic.IEnumerable<System.Type>", span=""];
m3_69 [file="Specification.cs", label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>", span=""];
m3_70 [file="Specification.cs", label="System.Globalization.CultureInfo", span=""];
m3_71 [file="Specification.cs", label="System.Collections.Generic.IEnumerable<CommandLine.ErrorType>", span=""];
m3_73 [file="Specification.cs", label="System.Collections.Generic.IEnumerable<string>", span=""];
m3_74 [file="Specification.cs", label="System.StringComparer", span=""];
m3_76 [file="Specification.cs", label=string, span=""];
m3_77 [file="Specification.cs", label="System.StringComparer", span=""];
m3_75 [file="Specification.cs", label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>", span=""];
m8_0 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs", label="Entry CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", span="13-13"];
m8_1 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs", label="var expectedSequence = new[]\r\n                {\r\n                    new KeyValuePair<string, IEnumerable<string>>(''i'', new[] {''10'', ''20'', ''30'', ''40''}) \r\n                }", span="16-19"];
m8_4 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs", label="Assert.True(expectedSequence.All(a => result.Options.Any(r => a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value))))", span="33-33"];
m8_3 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs", label="var result = TokenPartitioner.Partition(\r\n                new[] { Token.Name(''i''), Token.Value(''10''), Token.Value(''20''), Token.Value(''30''), Token.Value(''40'') },\r\n                name => TypeLookup.FindTypeDescriptor(name, specs, StringComparer.InvariantCulture)\r\n                )", span="27-30"];
m8_5 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs", label="Exit CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", span="13-13"];
m8_6 [cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", file="TokenPartitionerTests.cs", label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0"];
m8_11 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitionerTests.cs", label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12"];
m8_13 [cluster="Unk.True", file="TokenPartitionerTests.cs", label="Entry Unk.True", span=""];
m8_12 [cluster="Unk.All", file="TokenPartitionerTests.cs", label="Entry Unk.All", span=""];
m8_39 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="59-59"];
m8_15 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="TypeLookup.FindTypeDescriptor(name, specs, StringComparer.InvariantCulture)", span="29-29"];
m8_14 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="29-29"];
m8_19 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="result.Options.Any(r => a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value))", span="33-33"];
m8_18 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="33-33"];
m8_16 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="29-29"];
m8_20 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="33-33"];
m8_22 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="33-33"];
m8_23 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value)", span="33-33"];
m8_24 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="33-33"];
m8_34 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="TypeLookup.FindTypeDescriptor(name, specs, StringComparer.InvariantCulture)", span="55-55"];
m8_33 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="55-55"];
m8_37 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="result.Options.Any(r => a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value))", span="59-59"];
m8_36 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="59-59"];
m8_35 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="55-55"];
m8_38 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="59-59"];
m8_40 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value)", span="59-59"];
m8_41 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="59-59"];
m8_17 [cluster="CommandLine.Core.TypeLookup.FindTypeDescriptor(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TokenPartitionerTests.cs", label="Entry CommandLine.Core.TypeLookup.FindTypeDescriptor(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
m8_25 [cluster="string.Equals(string)", file="TokenPartitionerTests.cs", label="Entry string.Equals(string)", span="0-0"];
m8_9 [cluster="CommandLine.Core.Token.Name(string)", file="TokenPartitionerTests.cs", label="Entry CommandLine.Core.Token.Name(string)", span="19-19"];
m8_7 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="TokenPartitionerTests.cs", label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", span="17-17"];
m8_21 [cluster="Unk.Any", file="TokenPartitionerTests.cs", label="Entry Unk.Any", span=""];
m8_10 [cluster="CommandLine.Core.Token.Value(string)", file="TokenPartitionerTests.cs", label="Entry CommandLine.Core.Token.Value(string)", span="24-24"];
m8_26 [cluster="Unk.SequenceEqual", file="TokenPartitionerTests.cs", label="Entry Unk.SequenceEqual", span=""];
m8_27 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", file="TokenPartitionerTests.cs", label="Entry CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", span="39-39"];
m8_28 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", file="TokenPartitionerTests.cs", label="var expectedSequence = new[]\r\n                {\r\n                    new KeyValuePair<string, IEnumerable<string>>(''i'', new[] {''10'', ''10'', ''30'', ''40''}) \r\n                }", span="42-45"];
m8_31 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", file="TokenPartitionerTests.cs", label="Assert.True(expectedSequence.All(a => result.Options.Any(r => a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value))))", span="59-59"];
m8_30 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", file="TokenPartitionerTests.cs", label="var result = TokenPartitioner.Partition(\r\n                new[] { Token.Name(''i''), Token.Value(''10''), Token.Value(''10''), Token.Value(''30''), Token.Value(''40'') },\r\n                name => TypeLookup.FindTypeDescriptor(name, specs, StringComparer.InvariantCulture)\r\n                )", span="53-56"];
m8_32 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", file="TokenPartitionerTests.cs", label="Exit CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", span="39-39"];
m8_8 [cluster="System.Collections.Generic.List<T>.List()", file="TokenPartitionerTests.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m8_42 [file="TokenPartitionerTests.cs", label=specs, span=""];
m8_43 [file="TokenPartitionerTests.cs", label=result, span=""];
m8_44 [file="TokenPartitionerTests.cs", label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", span=""];
m8_45 [file="TokenPartitionerTests.cs", label=specs, span=""];
m8_46 [file="TokenPartitionerTests.cs", label=result, span=""];
m8_47 [file="TokenPartitionerTests.cs", label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", span=""];
m0_18 -> m0_25  [color=darkseagreen4, key=1, label=writer, style=dashed];
m3_10 -> m3_23  [color=green, key=1, label=string, style=dashed];
m3_10 -> m3_12  [color=green, key=1, label=preprocCompare, style=dashed];
m3_9 -> m3_23  [color=green, key=1, label=firstArg, style=dashed];
m3_39 -> m3_43  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_21 -> m3_36  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m3_21 -> m3_39  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>", style=dashed];
m3_21 -> m3_44  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m3_27 -> m3_35  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_27 -> m3_38  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_27 -> m3_46  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_19 -> m3_56  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_49 -> m3_55  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_49 -> m3_58  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_0 -> m3_23  [color=green, key=1, label="System.StringComparer", style=dashed];
m3_0 -> m3_12  [color=darkseagreen4, key=1, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>", style=dashed];
m3_0 -> m3_2  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Type>", style=dashed];
m3_67 -> m3_23  [color=green, key=1, label="System.StringComparer", style=dashed];
m3_67 -> m3_12  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m3_72 -> m3_23  [color=green, key=1, label=firstArg, style=dashed];
m3_66 -> m3_12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m3_68 -> m3_12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Type>", style=dashed];
m3_69 -> m3_12  [color=darkseagreen4, key=1, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>", style=dashed];
m3_70 -> m3_12  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m3_71 -> m3_12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.ErrorType>", style=dashed];
m3_73 -> m3_36  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m3_73 -> m3_44  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m3_73 -> m3_39  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m3_74 -> m3_36  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m3_74 -> m3_44  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m3_74 -> m3_39  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m3_76 -> m3_56  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_77 -> m3_56  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m3_75 -> m3_39  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>", style=dashed];
m8_1 -> m8_4  [color=darkseagreen4, key=1, label=expectedSequence, style=dashed];
m8_4 -> m8_18  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_3 -> m8_14  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_3 -> m8_19  [color=darkseagreen4, key=1, label=result, style=dashed];
m8_19 -> m8_22  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_19 -> m8_23  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
m8_23 -> m8_23  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
m8_37 -> m8_39  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_37 -> m8_40  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
m8_40 -> m8_40  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
m8_28 -> m8_31  [color=darkseagreen4, key=1, label=expectedSequence, style=dashed];
m8_31 -> m8_36  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_30 -> m8_33  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_30 -> m8_37  [color=darkseagreen4, key=1, label=result, style=dashed];
m8_42 -> m8_15  [color=darkseagreen4, key=1, label=specs, style=dashed];
m8_43 -> m8_19  [color=darkseagreen4, key=1, label=result, style=dashed];
m8_44 -> m8_23  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
m8_45 -> m8_34  [color=darkseagreen4, key=1, label=specs, style=dashed];
m8_46 -> m8_37  [color=darkseagreen4, key=1, label=result, style=dashed];
m8_47 -> m8_40  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
}
