digraph  {
n191 [label=fakeOptions, span=""];
n192 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
n0 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="15-15", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()"];
n1 [label="var fakeOptions = new FakeOptions()", span="18-18", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()"];
n2 [label="var expectedResult = ParserResult.Create(\r\n                ParserResultType.Options,\r\n                fakeOptions, new Error[] { new HelpRequestedError() })", span="19-21", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()"];
n6 [label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()"];
n3 [label="var result = InstanceBuilder.Build(\r\n                () => fakeOptions,\r\n                new[] { ''--help'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="24-28", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()"];
n13 [label=fakeOptions, span="25-25", cluster="lambda expression"];
n7 [label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="338-338", cluster="CommandLine.HelpRequestedError.HelpRequestedError()"];
n8 [label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="103-103", cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)"];
n4 [label="Assert.True(expectedResult.Equals(result))", span="31-31", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()"];
n9 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)"];
n12 [label="Entry lambda expression", span="25-25", cluster="lambda expression"];
n5 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="15-15", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()"];
n10 [label="Entry CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", span="90-90", cluster="CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)"];
n11 [label="Entry Unk.True", span="", cluster="Unk.True"];
n14 [label="Exit lambda expression", span="25-25", cluster="lambda expression"];
n15 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_int_value()", span="37-37", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_int_value()"];
n16 [label="var expectedResult = -123", span="40-40", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_int_value()"];
n17 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-123'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="43-47", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_int_value()"];
n18 [label="Assert.Equal(expectedResult, result.Value.LongValue)", span="50-50", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_int_value()"];
n21 [label="Entry lambda expression", span="44-44", cluster="lambda expression"];
n19 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_int_value()", span="37-37", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_int_value()"];
n20 [label="Entry Unk.Equal", span="", cluster="Unk.Equal"];
n22 [label="new FakeOptions()", span="44-44", cluster="lambda expression"];
n23 [label="Exit lambda expression", span="44-44", cluster="lambda expression"];
n24 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value()", span="56-56", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value()"];
n25 [label="var expectedResult = .123D", span="59-59", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value()"];
n26 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithDouble(),\r\n                new[] { ''0.123'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="62-66", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value()"];
n27 [label="Assert.Equal(expectedResult, result.Value.DoubleValue)", span="69-69", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value()"];
n29 [label="Entry lambda expression", span="63-63", cluster="lambda expression"];
n28 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value()", span="56-56", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value()"];
n30 [label="new FakeOptionsWithDouble()", span="63-63", cluster="lambda expression"];
n31 [label="Exit lambda expression", span="63-63", cluster="lambda expression"];
n32 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", span="7-7", cluster="CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()"];
n33 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_double_value()", span="75-75", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_double_value()"];
n34 [label="var expectedResult = -.123D", span="78-78", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_double_value()"];
n35 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithDouble(),\r\n                new[] { ''-0.123'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="81-85", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_double_value()"];
n36 [label="Assert.Equal(expectedResult, result.Value.DoubleValue)", span="88-88", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_double_value()"];
n38 [label="Entry lambda expression", span="82-82", cluster="lambda expression"];
n37 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_double_value()", span="75-75", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_double_value()"];
n39 [label="new FakeOptionsWithDouble()", span="82-82", cluster="lambda expression"];
n40 [label="Exit lambda expression", span="82-82", cluster="lambda expression"];
n41 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range()", span="94-94", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range()"];
n42 [label="var expectedResult = new[] { 10, 20, 30, 40 }", span="97-97", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range()"];
n43 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-i'', ''10'', ''20'', ''30'', ''40'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="100-104", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range()"];
n44 [label="Assert.True(expectedResult.SequenceEqual(result.Value.IntSequence))", span="107-107", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range()"];
n47 [label="Entry lambda expression", span="101-101", cluster="lambda expression"];
n45 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range()", span="94-94", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range()"];
n46 [label="Entry Unk.SequenceEqual", span="", cluster="Unk.SequenceEqual"];
n48 [label="new FakeOptions()", span="101-101", cluster="lambda expression"];
n49 [label="Exit lambda expression", span="101-101", cluster="lambda expression"];
n50 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", span="113-113", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()"];
n51 [label="var expectedResult = new FakeOptionsWithEnum\r\n                {\r\n                    Colors = Colors.Green\r\n                }", span="116-119", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()"];
n52 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''Green'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="122-126", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()"];
n55 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="14-14", cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()"];
n53 [label="expectedResult.ShouldHave().AllProperties().EqualTo(result.Value)", span="129-129", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()"];
n59 [label="Entry lambda expression", span="123-123", cluster="lambda expression"];
n54 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", span="113-113", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()"];
n56 [label="Entry Unk.ShouldHave", span="", cluster="Unk.ShouldHave"];
n57 [label="Entry Unk.AllProperties", span="", cluster="Unk.AllProperties"];
n58 [label="Entry Unk.EqualTo", span="", cluster="Unk.EqualTo"];
n60 [label="new FakeOptionsWithEnum()", span="123-123", cluster="lambda expression"];
n61 [label="Exit lambda expression", span="123-123", cluster="lambda expression"];
n62 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="135-135", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()"];
n63 [label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="138-144", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()"];
n64 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="147-151", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()"];
n67 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()"];
n65 [label="expectedResult.ShouldHave().AllProperties().EqualTo(result.Value)", span="154-154", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()"];
n68 [label="Entry lambda expression", span="148-148", cluster="lambda expression"];
n66 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="135-135", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()"];
n69 [label="new FakeOptionsWithValues()", span="148-148", cluster="lambda expression"];
n70 [label="Exit lambda expression", span="148-148", cluster="lambda expression"];
n71 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", span="160-160", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()"];
n72 [label="var expectedResult = new FakeOptionsWithSequenceWithoutRange\r\n                {\r\n                    LongSequence = new[] { 1L, 2L, 3L, 4L, 5L, 6L }\r\n                }", span="163-166", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()"];
n73 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceWithoutRange(),\r\n                new[] { ''1'', ''2'', ''3'', ''4'', ''5'', ''6'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="169-173", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()"];
n76 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="7-7", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()"];
n74 [label="expectedResult.ShouldHave().AllProperties().EqualTo(result.Value)", span="176-176", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()"];
n77 [label="Entry lambda expression", span="170-170", cluster="lambda expression"];
n75 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", span="160-160", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()"];
n78 [label="new FakeOptionsWithSequenceWithoutRange()", span="170-170", cluster="lambda expression"];
n79 [label="Exit lambda expression", span="170-170", cluster="lambda expression"];
n80 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator()", span="182-182", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator()"];
n81 [label="var expectedResult = new FakeOptionsWithSequenceAndSeparator\r\n                {\r\n                    StringSequence = new[] { ''abc'',''1234'',''xyz@aaa.com'' }\r\n                }", span="185-188", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator()"];
n82 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                new[] { ''abc;1234;xyz@aaa.com'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="191-195", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator()", color=red, community=0];
n85 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="7-7", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()"];
n83 [label="expectedResult.ShouldHave().AllProperties().EqualTo(result.Value)", span="198-198", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator()"];
n86 [label="Entry lambda expression", span="192-192", cluster="lambda expression"];
n84 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator()", span="182-182", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator()"];
n87 [label="new FakeOptionsWithSequenceAndSeparator()", span="192-192", cluster="lambda expression"];
n88 [label="Exit lambda expression", span="192-192", cluster="lambda expression"];
n89 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="207-207", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()"];
n90 [label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="210-216", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()"];
n91 [label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="217-217", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()"];
n93 [label="expectedResult.ShouldHave().AllProperties().EqualTo(result.Value)", span="230-230", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()"];
n92 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="220-227", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()"];
n95 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="27-27", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)"];
n96 [label="Entry lambda expression", span="221-221", cluster="lambda expression"];
n99 [label="Entry lambda expression", span="222-224", cluster="lambda expression"];
n94 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="207-207", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()"];
n97 [label="new FakeOptionsWithValues()", span="221-221", cluster="lambda expression"];
n98 [label="Exit lambda expression", span="221-221", cluster="lambda expression"];
n100 [label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="223-224", cluster="lambda expression"];
n104 [label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="224-224", cluster="lambda expression"];
n108 [label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="224-224", cluster="lambda expression"];
n101 [label="Exit lambda expression", span="222-224", cluster="lambda expression"];
n102 [label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="33-33", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)"];
n103 [label="Entry lambda expression", span="224-224", cluster="lambda expression"];
n105 [label="Exit lambda expression", span="224-224", cluster="lambda expression"];
n106 [label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)"];
n107 [label="Entry lambda expression", span="224-224", cluster="lambda expression"];
n109 [label="Exit lambda expression", span="224-224", cluster="lambda expression"];
n110 [label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="10-10", cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)"];
n111 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="236-236", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()"];
n112 [label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl'')),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''))\r\n                }", span="239-243", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()"];
n113 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSets(),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="246-250", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()"];
n116 [label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294", cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)"];
n117 [label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20", cluster="CommandLine.NameInfo.NameInfo(string, string)"];
n114 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="253-253", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()"];
n118 [label="Entry lambda expression", span="247-247", cluster="lambda expression"];
n115 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="236-236", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()"];
n119 [label="new FakeOptionsWithSets()", span="247-247", cluster="lambda expression"];
n120 [label="Exit lambda expression", span="247-247", cluster="lambda expression"];
n121 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()"];
n122 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="259-259", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()"];
n123 [label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = null\r\n            }", span="261-264", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()"];
n124 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="266-270", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()"];
n127 [label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", span="2-2", cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()"];
n125 [label="expectedResult.ShouldHave().AllProperties().EqualTo(result.Value)", span="273-273", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()"];
n128 [label="Entry lambda expression", span="267-267", cluster="lambda expression"];
n126 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="259-259", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()"];
n129 [label="new FakeOptionWithRequiredAndSet()", span="267-267", cluster="lambda expression"];
n130 [label="Exit lambda expression", span="267-267", cluster="lambda expression"];
n131 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="279-279", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()"];
n132 [label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="281-284", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()"];
n133 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="286-290", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()"];
n134 [label="expectedResult.ShouldHave().AllProperties().EqualTo(result.Value)", span="293-293", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()"];
n136 [label="Entry lambda expression", span="287-287", cluster="lambda expression"];
n135 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="279-279", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()"];
n137 [label="new FakeOptionWithRequiredAndSet()", span="287-287", cluster="lambda expression"];
n138 [label="Exit lambda expression", span="287-287", cluster="lambda expression"];
n139 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="298-298", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()"];
n140 [label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="300-304", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()"];
n141 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="306-310", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()"];
n144 [label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283", cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)"];
n142 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="313-313", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()"];
n145 [label="Entry lambda expression", span="307-307", cluster="lambda expression"];
n143 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="298-298", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()"];
n146 [label="new FakeOptionWithRequiredAndSet()", span="307-307", cluster="lambda expression"];
n147 [label="Exit lambda expression", span="307-307", cluster="lambda expression"];
n148 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="318-318", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()"];
n149 [label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="321-321", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()"];
n150 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequired(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="324-328", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()"];
n151 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="331-331", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()"];
n153 [label="Entry lambda expression", span="325-325", cluster="lambda expression"];
n152 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="318-318", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()"];
n154 [label="new FakeOptionWithRequired()", span="325-325", cluster="lambda expression"];
n155 [label="Exit lambda expression", span="325-325", cluster="lambda expression"];
n156 [label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()"];
n157 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="337-337", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()"];
n158 [label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="340-340", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()"];
n159 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="343-347", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()"];
n162 [label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316", cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)"];
n160 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="350-350", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()"];
n163 [label="Entry lambda expression", span="344-344", cluster="lambda expression"];
n161 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="337-337", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()"];
n164 [label="new FakeOptions()", span="344-344", cluster="lambda expression"];
n165 [label="Exit lambda expression", span="344-344", cluster="lambda expression"];
n166 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="356-356", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()"];
n167 [label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="359-359", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()"];
n168 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="362-366", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()"];
n171 [label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="272-272", cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)"];
n169 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="369-369", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()"];
n172 [label="Entry lambda expression", span="363-363", cluster="lambda expression"];
n170 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="356-356", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()"];
n173 [label="new FakeOptions()", span="363-363", cluster="lambda expression"];
n174 [label="Exit lambda expression", span="363-363", cluster="lambda expression"];
n175 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="375-375", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()"];
n176 [label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="378-378", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()"];
n177 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="381-385", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()"];
n178 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="388-388", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()"];
n180 [label="Entry lambda expression", span="382-382", cluster="lambda expression"];
n179 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="375-375", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()"];
n181 [label="new FakeOptions()", span="382-382", cluster="lambda expression"];
n182 [label="Exit lambda expression", span="382-382", cluster="lambda expression"];
n183 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="394-394", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()"];
n184 [label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="397-397", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()"];
n185 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="400-404", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()"];
n186 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="407-407", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()"];
n188 [label="Entry lambda expression", span="401-401", cluster="lambda expression"];
n187 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="394-394", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()"];
n189 [label="new FakeOptions()", span="401-401", cluster="lambda expression"];
n190 [label="Exit lambda expression", span="401-401", cluster="lambda expression"];
d82 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                new[] { ''--string-seq'', ''abc;1234;xyz@aaa.com'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="191-195", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator()", color=green, community=0];
m0_1 [label="arguments == null", span="15-15", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="Tokenizer.cs"];
m0_5 [label="var tokens = (from arg in arguments\r\n                          from token in !arg.StartsWith(''-'', StringComparison.Ordinal)\r\n                               ? new Token[] { Token.Value(arg) }\r\n                               : arg.StartsWith(''--'', StringComparison.Ordinal)\r\n                                     ? TokenizeLongName(arg, onError)\r\n                                     : TokenizeShortName(arg, nameLookup)\r\n                          select token).ToList()", span="20-26", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="Tokenizer.cs"];
m0_6 [label="var unkTokens = (from t in tokens where t.IsName() && !nameLookup(t.Text) select t).ToList()", span="28-28", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="Tokenizer.cs"];
m0_2 [label="throw new ArgumentNullException(''arguments'');", span="15-15", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="Tokenizer.cs"];
m0_3 [label="var errors = new List<Error>()", span="17-17", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="Tokenizer.cs"];
m0_4 [label="Action<Error> onError = e => errors.Add(e)", span="18-18", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="Tokenizer.cs"];
m0_7 [label="return StatePair.Create(tokens.Where(x=>!unkTokens.Contains(x)), errors.Concat(from t in unkTokens select new UnknownOptionError(t.Text)));", span="30-30", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="Tokenizer.cs"];
m0_8 [label="Exit CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="Tokenizer.cs"];
m0_108 [label="Entry string.Split(params char[])", span="0-0", cluster="string.Split(params char[])", file="Tokenizer.cs"];
m0_17 [label="Entry Unk.nameLookup", span="", cluster="Unk.nameLookup", file="Tokenizer.cs"];
m0_106 [label="Entry CommandLine.BadFormatTokenError.BadFormatTokenError(string)", span="188-188", cluster="CommandLine.BadFormatTokenError.BadFormatTokenError(string)", file="Tokenizer.cs"];
m0_11 [label="Entry string.StartsWith(string, System.StringComparison)", span="0-0", cluster="string.StartsWith(string, System.StringComparison)", file="Tokenizer.cs"];
m0_85 [label="Entry CommandLine.Core.Token.Name(string)", span="19-19", cluster="CommandLine.Core.Token.Name(string)", file="Tokenizer.cs"];
m0_107 [label="Entry System.Action<T>.Invoke(T)", span="0-0", cluster="System.Action<T>.Invoke(T)", file="Tokenizer.cs"];
m0_82 [label="Exit CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", span="48-48", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m0_39 [label="Entry Unk.Any", span="", cluster="Unk.Any", file="Tokenizer.cs"];
m0_12 [label="Entry CommandLine.Core.Token.Value(string)", span="26-26", cluster="CommandLine.Core.Token.Value(string)", file="Tokenizer.cs"];
m0_16 [label="Entry Unk.IsName", span="", cluster="Unk.IsName", file="Tokenizer.cs"];
m0_41 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)", file="Tokenizer.cs"];
m0_18 [label="Entry Unk.Where", span="", cluster="Unk.Where", file="Tokenizer.cs"];
m0_21 [label="Entry Unk.Create", span="", cluster="Unk.Create", file="Tokenizer.cs"];
m0_86 [label="Entry lambda expression", span="66-66", cluster="lambda expression", file="Tokenizer.cs"];
m0_87 [label="Token.Value(str)", span="66-66", cluster="lambda expression", file="Tokenizer.cs", color=green, community=0];
m0_29 [label="Entry Unk.Contains", span="", cluster="Unk.Contains", file="Tokenizer.cs"];
m0_70 [label="yield return Token.Name(text);", span="69-69", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m0_73 [label="yield return Token.Name(first);", span="74-74", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m0_23 [label="errors.Add(e)", span="18-18", cluster="lambda expression", file="Tokenizer.cs"];
m0_27 [label="!unkTokens.Contains(x)", span="30-30", cluster="lambda expression", file="Tokenizer.cs"];
m0_26 [label="Entry lambda expression", span="30-30", cluster="lambda expression", file="Tokenizer.cs"];
m0_22 [label="Entry lambda expression", span="18-18", cluster="lambda expression", file="Tokenizer.cs"];
m0_24 [label="Exit lambda expression", span="18-18", cluster="lambda expression", file="Tokenizer.cs"];
m0_28 [label="Exit lambda expression", span="30-30", cluster="lambda expression", file="Tokenizer.cs"];
m0_46 [label="Entry lambda expression", span="39-39", cluster="lambda expression", file="Tokenizer.cs"];
m0_50 [label="Entry lambda expression", span="41-41", cluster="lambda expression", file="Tokenizer.cs"];
m0_53 [label="Entry lambda expression", span="42-42", cluster="lambda expression", file="Tokenizer.cs"];
m0_56 [label="Entry lambda expression", span="42-42", cluster="lambda expression", file="Tokenizer.cs"];
m0_60 [label="tokens.Concat(values)", span="43-43", cluster="lambda expression", file="Tokenizer.cs"];
m0_59 [label="Entry lambda expression", span="43-43", cluster="lambda expression", file="Tokenizer.cs"];
m0_47 [label="arg.EqualsOrdinal(''--'')", span="39-39", cluster="lambda expression", file="Tokenizer.cs"];
m0_48 [label="Exit lambda expression", span="39-39", cluster="lambda expression", file="Tokenizer.cs"];
m0_51 [label="!arg.EqualsOrdinal(''--'')", span="41-41", cluster="lambda expression", file="Tokenizer.cs"];
m0_52 [label="Exit lambda expression", span="41-41", cluster="lambda expression", file="Tokenizer.cs"];
m0_54 [label="!arg.EqualsOrdinal(''--'')", span="42-42", cluster="lambda expression", file="Tokenizer.cs"];
m0_55 [label="Exit lambda expression", span="42-42", cluster="lambda expression", file="Tokenizer.cs"];
m0_57 [label="Token.Value(t)", span="42-42", cluster="lambda expression", file="Tokenizer.cs"];
m0_58 [label="Exit lambda expression", span="42-42", cluster="lambda expression", file="Tokenizer.cs"];
m0_61 [label="Exit lambda expression", span="43-43", cluster="lambda expression", file="Tokenizer.cs"];
m0_75 [label="text.Substring(1)", span="78-78", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m0_77 [label="!seen.Contains(c) && nameLookup(n)", span="81-81", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", color=green, community=0, file="Tokenizer.cs"];
m0_76 [label="var n = new string(c, 1)", span="80-80", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", color=green, community=0, file="Tokenizer.cs"];
m0_78 [label="seen.Add(c)", span="83-83", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", color=green, community=0, file="Tokenizer.cs"];
m0_80 [label="seen.Count() < text.Length", span="91-91", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", color=green, community=0, file="Tokenizer.cs"];
m0_89 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="Tokenizer.cs"];
m0_79 [label="yield return Token.Name(n);", span="84-84", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", color=green, community=0, file="Tokenizer.cs"];
m0_81 [label="yield return Token.Value(text.Substring(seen.Count()));", span="93-93", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m0_88 [label="Entry System.Collections.Generic.List<T>.Contains(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Contains(T)", file="Tokenizer.cs"];
m0_90 [label="value == null", span="102-102", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", color=green, community=0, file="Tokenizer.cs"];
m0_91 [label="throw new ArgumentNullException(''value'');", span="104-104", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m0_43 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="Tokenizer.cs"];
m0_13 [label="Entry CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", span="98-98", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m0_96 [label="yield return Token.Name(text);", span="113-113", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m0_97 [label="yield break;", span="114-114", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m0_100 [label="yield break;", span="119-119", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m0_102 [label="yield return Token.Name(parts[0]);", span="122-122", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m0_103 [label="yield return Token.Value(parts[1]);", span="123-123", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m0_92 [label="value.Length > 2 && value.StartsWith(''--'', StringComparison.Ordinal)", span="107-107", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m0_93 [label="var text = value.Substring(2)", span="109-109", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m0_99 [label="onError(new BadFormatTokenError(value))", span="118-118", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m0_94 [label="var equalIndex = text.IndexOf('=')", span="110-110", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m0_101 [label="var parts = text.Split('=')", span="121-121", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m0_95 [label="equalIndex <= 0", span="111-111", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m0_98 [label="equalIndex == 1", span="116-116", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m0_104 [label="Exit CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", span="98-98", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m0_42 [label="Entry System.Collections.Generic.IEnumerable<TSource>.SkipWhile<TSource>(System.Func<TSource, bool>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.SkipWhile<TSource>(System.Func<TSource, bool>)", file="Tokenizer.cs"];
m0_20 [label="Entry Unk.Concat", span="", cluster="Unk.Concat", file="Tokenizer.cs"];
m0_49 [label="Entry string.EqualsOrdinal(string)", span="34-34", cluster="string.EqualsOrdinal(string)", file="Tokenizer.cs"];
m0_72 [label="var first = text.Substring(0, 1)", span="73-73", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m0_40 [label="Entry System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", file="Tokenizer.cs"];
m0_105 [label="Entry string.IndexOf(char)", span="0-0", cluster="string.IndexOf(char)", file="Tokenizer.cs"];
m0_44 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="Tokenizer.cs"];
m0_45 [label="Entry CommandLine.Core.StatePair<T1>.MapValue<T1, T2>(System.Func<T1, T2>)", span="69-69", cluster="CommandLine.Core.StatePair<T1>.MapValue<T1, T2>(System.Func<T1, T2>)", file="Tokenizer.cs"];
m0_30 [label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="33-33", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="Tokenizer.cs"];
m0_31 [label="arguments == null", span="37-37", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="Tokenizer.cs"];
m0_33 [label="arguments.Any(arg => arg.EqualsOrdinal(''--''))", span="39-39", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="Tokenizer.cs"];
m0_34 [label="var tokenizerResult = tokenizer(arguments.TakeWhile(arg => !arg.EqualsOrdinal(''--'')))", span="41-41", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="Tokenizer.cs"];
m0_35 [label="var values = arguments.SkipWhile(arg => !arg.EqualsOrdinal(''--'')).Skip(1).Select(t => Token.Value(t))", span="42-42", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="Tokenizer.cs"];
m0_37 [label="return tokenizer(arguments);", span="45-45", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="Tokenizer.cs"];
m0_32 [label="throw new ArgumentNullException(''arguments'');", span="37-37", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="Tokenizer.cs"];
m0_36 [label="return tokenizerResult.MapValue(tokens => tokens.Concat(values));", span="43-43", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="Tokenizer.cs"];
m0_38 [label="Exit CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="33-33", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="Tokenizer.cs"];
m0_83 [label="Entry string.Substring(int)", span="0-0", cluster="string.Substring(int)", file="Tokenizer.cs"];
m0_15 [label="Entry Unk.ToList", span="", cluster="Unk.ToList", file="Tokenizer.cs"];
m0_25 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)", file="Tokenizer.cs"];
m0_84 [label="Entry System.Convert.ToChar(string)", span="0-0", cluster="System.Convert.ToChar(string)", file="Tokenizer.cs"];
m0_10 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="Tokenizer.cs"];
m0_62 [label="value == null", span="52-52", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m0_63 [label="throw new ArgumentNullException(''value'');", span="54-54", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", color=green, community=0, file="Tokenizer.cs"];
m0_64 [label="value.Length > 1 || value[0] == '-' || value[1] != '-'", span="57-57", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", color=green, community=0, file="Tokenizer.cs"];
m0_65 [label="var text = value.Substring(1)", span="59-59", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", color=green, community=0, file="Tokenizer.cs"];
m0_66 [label="char.IsDigit(text[0])", span="61-61", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", color=green, community=0, file="Tokenizer.cs"];
m0_67 [label="yield return Token.Value(value);", span="63-63", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", color=green, community=1, file="Tokenizer.cs"];
m0_68 [label="yield break;", span="64-64", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", color=green, community=0, file="Tokenizer.cs"];
m0_69 [label="value.Length == 2", span="67-67", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m0_19 [label="Entry UnknownOptionError.cstr", span="", cluster="UnknownOptionError.cstr", file="Tokenizer.cs"];
m0_14 [label="Entry CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", span="48-48", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m0_71 [label="yield break;", span="70-70", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m0_74 [label="Entry CommandLine.Core.StatePair.Create<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="61-61", cluster="CommandLine.Core.StatePair.Create<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="Tokenizer.cs"];
m0_9 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="Tokenizer.cs"];
m0_109 [label=errors, span="", file="Tokenizer.cs"];
m0_110 [label=unkTokens, span="", file="Tokenizer.cs"];
m0_111 [label=values, span="", file="Tokenizer.cs"];
m0_140 [label="System.Func<string, CommandLine.Infrastructure.Maybe<string>>", span="", file="Tokenizer.cs"];
m1_10 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()", file="TokenizerTests.cs"];
m1_13 [label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<string>>)", span="48-48", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<string>>)", file="TokenizerTests.cs"];
m1_21 [label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="66-66", cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="TokenizerTests.cs"];
m1_12 [label="Entry CommandLine.Core.StatePair.Create<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="61-61", cluster="CommandLine.Core.StatePair.Create<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="TokenizerTests.cs"];
m1_20 [label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="71-71", cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="TokenizerTests.cs"];
m1_8 [label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, string, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", span="16-16", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, string, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="TokenizerTests.cs"];
m1_0 [label="Entry CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_returns_sequence()", span="16-16", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_returns_sequence()", file="TokenizerTests.cs"];
m1_1 [label="var expectedTokens = new[] { Token.Name(''string-seq''),\r\n                Token.Value(''aaa''), Token.Value(''bb''),  Token.Value(''cccc'')}", span="19-20", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_returns_sequence()", color=green, community=1, file="TokenizerTests.cs"];
m1_2 [label="var specs = new[] { new OptionSpecification(string.Empty, ''string-seq'',\r\n                false, string.Empty, -1, -1, '','', null, typeof(IEnumerable<string>), string.Empty, string.Empty, new List<string>())}", span="21-22", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_returns_sequence()", color=green, community=1, file="TokenizerTests.cs"];
m1_4 [label="Assert.True(expectedTokens.SequenceEqual(result.Value))", span="33-33", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_returns_sequence()", color=green, community=0, file="TokenizerTests.cs"];
m1_3 [label="var result =\r\n                Tokenizer.ExplodeOptionList(\r\n                    StatePair.Create(\r\n                        Enumerable.Empty<Token>().Concat(new[] { Token.Name(''string-seq''), Token.Value(''aaa,bb,cccc'') }),\r\n                        Enumerable.Empty<Error>()),\r\n                        optionName => ''string-seq''.EqualsOrdinal(optionName) ? Maybe.Just('','') : Maybe.Nothing<string>())", span="25-30", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_returns_sequence()", color=green, community=1, file="TokenizerTests.cs"];
m1_5 [label="Exit CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_returns_sequence()", span="16-16", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_returns_sequence()", file="TokenizerTests.cs"];
m1_16 [label="Entry lambda expression", span="30-30", cluster="lambda expression", file="TokenizerTests.cs"];
m1_17 [label="''string-seq''.EqualsOrdinal(optionName) ? Maybe.Just('','') : Maybe.Nothing<string>()", span="30-30", cluster="lambda expression", color=green, community=0, file="TokenizerTests.cs"];
m1_18 [label="Exit lambda expression", span="30-30", cluster="lambda expression", file="TokenizerTests.cs"];
m1_6 [label="Entry CommandLine.Core.Token.Name(string)", span="19-19", cluster="CommandLine.Core.Token.Name(string)", file="TokenizerTests.cs"];
m1_14 [label="Entry Unk.SequenceEqual", span="", cluster="Unk.SequenceEqual", file="TokenizerTests.cs"];
m1_11 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="TokenizerTests.cs"];
m1_19 [label="Entry string.EqualsOrdinal(string)", span="34-34", cluster="string.EqualsOrdinal(string)", file="TokenizerTests.cs"];
m1_7 [label="Entry CommandLine.Core.Token.Value(string)", span="26-26", cluster="CommandLine.Core.Token.Value(string)", file="TokenizerTests.cs"];
m1_9 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="TokenizerTests.cs"];
n191 -> n13  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
n192 -> n104  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
n192 -> n108  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n6  [key=2, style=dotted];
n1 -> n3  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
n1 -> n13  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
n2 -> n3  [key=0, style=solid];
n2 -> n7  [key=2, style=dotted];
n2 -> n8  [key=2, style=dotted];
n2 -> n4  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n3 -> n4  [key=0, style=solid];
n3 -> n9  [key=2, style=dotted];
n3 -> n12  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n13 -> n14  [key=0, style=solid];
n4 -> n5  [key=0, style=solid];
n4 -> n10  [key=2, style=dotted];
n4 -> n11  [key=2, style=dotted];
n12 -> n13  [key=0, style=solid];
n5 -> n0  [key=0, style=bold, color=blue];
n14 -> n12  [key=0, style=bold, color=blue];
n15 -> n16  [key=0, style=solid];
n16 -> n17  [key=0, style=solid];
n16 -> n18  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n16 -> n16  [key=3, color=darkorchid, style=bold, label="Local variable int expectedResult"];
n17 -> n18  [key=0, style=solid];
n17 -> n9  [key=2, style=dotted];
n17 -> n21  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n18 -> n19  [key=0, style=solid];
n18 -> n20  [key=2, style=dotted];
n21 -> n22  [key=0, style=solid];
n19 -> n15  [key=0, style=bold, color=blue];
n22 -> n23  [key=0, style=solid];
n22 -> n6  [key=2, style=dotted];
n23 -> n21  [key=0, style=bold, color=blue];
n24 -> n25  [key=0, style=solid];
n25 -> n26  [key=0, style=solid];
n25 -> n27  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n25 -> n25  [key=3, color=darkorchid, style=bold, label="Local variable double expectedResult"];
n26 -> n27  [key=0, style=solid];
n26 -> n9  [key=2, style=dotted];
n26 -> n29  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n27 -> n28  [key=0, style=solid];
n27 -> n20  [key=2, style=dotted];
n29 -> n30  [key=0, style=solid];
n28 -> n24  [key=0, style=bold, color=blue];
n30 -> n31  [key=0, style=solid];
n30 -> n32  [key=2, style=dotted];
n31 -> n29  [key=0, style=bold, color=blue];
n33 -> n34  [key=0, style=solid];
n34 -> n35  [key=0, style=solid];
n34 -> n36  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n34 -> n34  [key=3, color=darkorchid, style=bold, label="Local variable double expectedResult"];
n35 -> n36  [key=0, style=solid];
n35 -> n9  [key=2, style=dotted];
n35 -> n38  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n36 -> n37  [key=0, style=solid];
n36 -> n20  [key=2, style=dotted];
n38 -> n39  [key=0, style=solid];
n37 -> n33  [key=0, style=bold, color=blue];
n39 -> n40  [key=0, style=solid];
n39 -> n32  [key=2, style=dotted];
n40 -> n38  [key=0, style=bold, color=blue];
n41 -> n42  [key=0, style=solid];
n42 -> n43  [key=0, style=solid];
n42 -> n44  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n43 -> n44  [key=0, style=solid];
n43 -> n9  [key=2, style=dotted];
n43 -> n47  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n44 -> n45  [key=0, style=solid];
n44 -> n46  [key=2, style=dotted];
n44 -> n11  [key=2, style=dotted];
n47 -> n48  [key=0, style=solid];
n45 -> n41  [key=0, style=bold, color=blue];
n48 -> n49  [key=0, style=solid];
n48 -> n6  [key=2, style=dotted];
n49 -> n47  [key=0, style=bold, color=blue];
n50 -> n51  [key=0, style=solid];
n51 -> n52  [key=0, style=solid];
n51 -> n55  [key=2, style=dotted];
n51 -> n53  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n52 -> n53  [key=0, style=solid];
n52 -> n9  [key=2, style=dotted];
n52 -> n59  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n53 -> n54  [key=0, style=solid];
n53 -> n56  [key=2, style=dotted];
n53 -> n57  [key=2, style=dotted];
n53 -> n58  [key=2, style=dotted];
n59 -> n60  [key=0, style=solid];
n54 -> n50  [key=0, style=bold, color=blue];
n60 -> n61  [key=0, style=solid];
n60 -> n55  [key=2, style=dotted];
n61 -> n59  [key=0, style=bold, color=blue];
n62 -> n63  [key=0, style=solid];
n63 -> n64  [key=0, style=solid];
n63 -> n67  [key=2, style=dotted];
n63 -> n65  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n64 -> n65  [key=0, style=solid];
n64 -> n9  [key=2, style=dotted];
n64 -> n68  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n65 -> n66  [key=0, style=solid];
n65 -> n56  [key=2, style=dotted];
n65 -> n57  [key=2, style=dotted];
n65 -> n58  [key=2, style=dotted];
n68 -> n69  [key=0, style=solid];
n66 -> n62  [key=0, style=bold, color=blue];
n69 -> n70  [key=0, style=solid];
n69 -> n67  [key=2, style=dotted];
n70 -> n68  [key=0, style=bold, color=blue];
n71 -> n72  [key=0, style=solid];
n72 -> n73  [key=0, style=solid];
n72 -> n76  [key=2, style=dotted];
n72 -> n74  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n73 -> n74  [key=0, style=solid];
n73 -> n9  [key=2, style=dotted];
n73 -> n77  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n74 -> n75  [key=0, style=solid];
n74 -> n56  [key=2, style=dotted];
n74 -> n57  [key=2, style=dotted];
n74 -> n58  [key=2, style=dotted];
n77 -> n78  [key=0, style=solid];
n75 -> n71  [key=0, style=bold, color=blue];
n78 -> n79  [key=0, style=solid];
n78 -> n76  [key=2, style=dotted];
n79 -> n77  [key=0, style=bold, color=blue];
n80 -> n81  [key=0, style=solid];
n81 -> n82  [key=0, style=solid, color=red];
n81 -> n85  [key=2, style=dotted];
n81 -> n83  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n81 -> d82  [key=0, style=solid, color=green];
n82 -> n83  [key=0, style=solid, color=red];
n82 -> n9  [key=2, style=dotted, color=red];
n82 -> n86  [key=1, style=dashed, color=red, label="lambda expression"];
n83 -> n84  [key=0, style=solid];
n83 -> n56  [key=2, style=dotted];
n83 -> n57  [key=2, style=dotted];
n83 -> n58  [key=2, style=dotted];
n86 -> n87  [key=0, style=solid];
n84 -> n80  [key=0, style=bold, color=blue];
n87 -> n88  [key=0, style=solid];
n87 -> n85  [key=2, style=dotted];
n88 -> n86  [key=0, style=bold, color=blue];
n89 -> n90  [key=0, style=solid];
n90 -> n91  [key=0, style=solid];
n90 -> n67  [key=2, style=dotted];
n90 -> n93  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n91 -> n92  [key=0, style=solid];
n93 -> n94  [key=0, style=solid];
n93 -> n56  [key=2, style=dotted];
n93 -> n57  [key=2, style=dotted];
n93 -> n58  [key=2, style=dotted];
n92 -> n93  [key=0, style=solid];
n92 -> n95  [key=2, style=dotted];
n92 -> n96  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n92 -> n99  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n96 -> n97  [key=0, style=solid];
n99 -> n100  [key=0, style=solid];
n99 -> n104  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
n99 -> n108  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
n94 -> n89  [key=0, style=bold, color=blue];
n97 -> n98  [key=0, style=solid];
n97 -> n67  [key=2, style=dotted];
n98 -> n96  [key=0, style=bold, color=blue];
n100 -> n101  [key=0, style=solid];
n100 -> n102  [key=2, style=dotted];
n100 -> n103  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n104 -> n105  [key=0, style=solid];
n104 -> n106  [key=2, style=dotted];
n104 -> n107  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n108 -> n109  [key=0, style=solid];
n108 -> n110  [key=2, style=dotted];
n101 -> n99  [key=0, style=bold, color=blue];
n103 -> n104  [key=0, style=solid];
n105 -> n103  [key=0, style=bold, color=blue];
n107 -> n108  [key=0, style=solid];
n109 -> n107  [key=0, style=bold, color=blue];
n111 -> n112  [key=0, style=solid];
n112 -> n113  [key=0, style=solid];
n112 -> n116  [key=2, style=dotted];
n112 -> n117  [key=2, style=dotted];
n112 -> n114  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n113 -> n114  [key=0, style=solid];
n113 -> n9  [key=2, style=dotted];
n113 -> n118  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n114 -> n115  [key=0, style=solid];
n114 -> n46  [key=2, style=dotted];
n114 -> n11  [key=2, style=dotted];
n118 -> n119  [key=0, style=solid];
n115 -> n111  [key=0, style=bold, color=blue];
n119 -> n120  [key=0, style=solid];
n119 -> n121  [key=2, style=dotted];
n120 -> n118  [key=0, style=bold, color=blue];
n122 -> n123  [key=0, style=solid];
n123 -> n124  [key=0, style=solid];
n123 -> n127  [key=2, style=dotted];
n123 -> n125  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n124 -> n125  [key=0, style=solid];
n124 -> n9  [key=2, style=dotted];
n124 -> n128  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n125 -> n126  [key=0, style=solid];
n125 -> n56  [key=2, style=dotted];
n125 -> n57  [key=2, style=dotted];
n125 -> n58  [key=2, style=dotted];
n128 -> n129  [key=0, style=solid];
n126 -> n122  [key=0, style=bold, color=blue];
n129 -> n130  [key=0, style=solid];
n129 -> n127  [key=2, style=dotted];
n130 -> n128  [key=0, style=bold, color=blue];
n131 -> n132  [key=0, style=solid];
n132 -> n133  [key=0, style=solid];
n132 -> n127  [key=2, style=dotted];
n132 -> n134  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n133 -> n134  [key=0, style=solid];
n133 -> n9  [key=2, style=dotted];
n133 -> n136  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n134 -> n135  [key=0, style=solid];
n134 -> n56  [key=2, style=dotted];
n134 -> n57  [key=2, style=dotted];
n134 -> n58  [key=2, style=dotted];
n136 -> n137  [key=0, style=solid];
n135 -> n131  [key=0, style=bold, color=blue];
n137 -> n138  [key=0, style=solid];
n137 -> n127  [key=2, style=dotted];
n138 -> n136  [key=0, style=bold, color=blue];
n139 -> n140  [key=0, style=solid];
n140 -> n141  [key=0, style=solid];
n140 -> n144  [key=2, style=dotted];
n140 -> n117  [key=2, style=dotted];
n140 -> n142  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n141 -> n142  [key=0, style=solid];
n141 -> n9  [key=2, style=dotted];
n141 -> n145  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n142 -> n143  [key=0, style=solid];
n142 -> n46  [key=2, style=dotted];
n142 -> n11  [key=2, style=dotted];
n145 -> n146  [key=0, style=solid];
n143 -> n139  [key=0, style=bold, color=blue];
n146 -> n147  [key=0, style=solid];
n146 -> n127  [key=2, style=dotted];
n147 -> n145  [key=0, style=bold, color=blue];
n148 -> n149  [key=0, style=solid];
n149 -> n150  [key=0, style=solid];
n149 -> n144  [key=2, style=dotted];
n149 -> n117  [key=2, style=dotted];
n149 -> n151  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n150 -> n151  [key=0, style=solid];
n150 -> n9  [key=2, style=dotted];
n150 -> n153  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n151 -> n152  [key=0, style=solid];
n151 -> n46  [key=2, style=dotted];
n151 -> n11  [key=2, style=dotted];
n153 -> n154  [key=0, style=solid];
n152 -> n148  [key=0, style=bold, color=blue];
n154 -> n155  [key=0, style=solid];
n154 -> n156  [key=2, style=dotted];
n155 -> n153  [key=0, style=bold, color=blue];
n157 -> n158  [key=0, style=solid];
n158 -> n159  [key=0, style=solid];
n158 -> n162  [key=2, style=dotted];
n158 -> n117  [key=2, style=dotted];
n158 -> n160  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n159 -> n160  [key=0, style=solid];
n159 -> n9  [key=2, style=dotted];
n159 -> n163  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n160 -> n161  [key=0, style=solid];
n160 -> n46  [key=2, style=dotted];
n160 -> n11  [key=2, style=dotted];
n163 -> n164  [key=0, style=solid];
n161 -> n157  [key=0, style=bold, color=blue];
n164 -> n165  [key=0, style=solid];
n164 -> n6  [key=2, style=dotted];
n165 -> n163  [key=0, style=bold, color=blue];
n166 -> n167  [key=0, style=solid];
n167 -> n168  [key=0, style=solid];
n167 -> n171  [key=2, style=dotted];
n167 -> n169  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n168 -> n169  [key=0, style=solid];
n168 -> n9  [key=2, style=dotted];
n168 -> n172  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n169 -> n170  [key=0, style=solid];
n169 -> n46  [key=2, style=dotted];
n169 -> n11  [key=2, style=dotted];
n172 -> n173  [key=0, style=solid];
n170 -> n166  [key=0, style=bold, color=blue];
n173 -> n174  [key=0, style=solid];
n173 -> n6  [key=2, style=dotted];
n174 -> n172  [key=0, style=bold, color=blue];
n175 -> n176  [key=0, style=solid];
n176 -> n177  [key=0, style=solid];
n176 -> n171  [key=2, style=dotted];
n176 -> n178  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n177 -> n178  [key=0, style=solid];
n177 -> n9  [key=2, style=dotted];
n177 -> n180  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n178 -> n179  [key=0, style=solid];
n178 -> n46  [key=2, style=dotted];
n178 -> n11  [key=2, style=dotted];
n180 -> n181  [key=0, style=solid];
n179 -> n175  [key=0, style=bold, color=blue];
n181 -> n182  [key=0, style=solid];
n181 -> n6  [key=2, style=dotted];
n182 -> n180  [key=0, style=bold, color=blue];
n183 -> n184  [key=0, style=solid];
n184 -> n185  [key=0, style=solid];
n184 -> n171  [key=2, style=dotted];
n184 -> n186  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n185 -> n186  [key=0, style=solid];
n185 -> n9  [key=2, style=dotted];
n185 -> n188  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n186 -> n187  [key=0, style=solid];
n186 -> n46  [key=2, style=dotted];
n186 -> n11  [key=2, style=dotted];
n188 -> n189  [key=0, style=solid];
n187 -> n183  [key=0, style=bold, color=blue];
n189 -> n190  [key=0, style=solid];
n189 -> n6  [key=2, style=dotted];
n190 -> n188  [key=0, style=bold, color=blue];
d82 -> n83  [key=0, style=solid, color=green];
d82 -> n9  [key=2, style=dotted, color=green];
d82 -> n86  [key=1, style=dashed, color=green, label="lambda expression"];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_3  [key=0, style=solid];
m0_5 -> m0_6  [key=0, style=solid];
m0_5 -> m0_11  [key=2, style=dotted];
m0_5 -> m0_12  [key=2, style=dotted];
m0_5 -> m0_13  [key=2, style=dotted];
m0_5 -> m0_14  [key=2, style=dotted];
m0_5 -> m0_15  [key=2, style=dotted];
m0_5 -> m0_5  [key=1, style=dashed, color=darkseagreen4, label=arg];
m0_5 -> m0_7  [key=1, style=dashed, color=darkseagreen4, label=tokens];
m0_6 -> m0_7  [key=0, style=solid];
m0_6 -> m0_16  [key=2, style=dotted];
m0_6 -> m0_17  [key=2, style=dotted];
m0_6 -> m0_15  [key=2, style=dotted];
m0_6 -> m0_6  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_6 -> m0_27  [key=1, style=dashed, color=darkseagreen4, label=unkTokens];
m0_2 -> m0_8  [key=0, style=solid];
m0_2 -> m0_9  [key=2, style=dotted];
m0_3 -> m0_4  [key=0, style=solid];
m0_3 -> m0_10  [key=2, style=dotted];
m0_3 -> m0_23  [key=1, style=dashed, color=darkseagreen4, label=errors];
m0_3 -> m0_7  [key=1, style=dashed, color=darkseagreen4, label=errors];
m0_4 -> m0_5  [key=0, style=solid];
m0_4 -> m0_23  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m0_4 -> m0_4  [key=3, color=darkorchid, style=bold, label="Local variable System.Action<CommandLine.Error> onError"];
m0_7 -> m0_8  [key=0, style=solid];
m0_7 -> m0_18  [key=2, style=dotted];
m0_7 -> m0_19  [key=2, style=dotted];
m0_7 -> m0_20  [key=2, style=dotted];
m0_7 -> m0_21  [key=2, style=dotted];
m0_7 -> m0_26  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_7 -> m0_7  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_8 -> n106  [key=0, style=bold, color=blue];
m0_82 -> m0_14  [key=0, style=bold, color=blue];
m0_86 -> m0_87  [key=0, style=solid, color=green];
m0_87 -> m0_88  [key=0, style=solid, color=green];
m0_87 -> m0_12  [key=2, style=dotted, color=green];
m0_70 -> m0_71  [key=0, style=solid];
m0_70 -> m0_85  [key=2, style=dotted];
m0_73 -> m0_74  [key=0, style=solid];
m0_73 -> m0_85  [key=2, style=dotted];
m0_23 -> m0_24  [key=0, style=solid];
m0_23 -> m0_25  [key=2, style=dotted];
m0_27 -> m0_28  [key=0, style=solid];
m0_27 -> m0_29  [key=2, style=dotted];
m0_26 -> m0_27  [key=0, style=solid];
m0_22 -> m0_23  [key=0, style=solid];
m0_24 -> m0_22  [key=0, style=bold, color=blue];
m0_28 -> m0_26  [key=0, style=bold, color=blue];
m0_46 -> m0_47  [key=0, style=solid];
m0_50 -> m0_51  [key=0, style=solid];
m0_53 -> m0_54  [key=0, style=solid];
m0_56 -> m0_57  [key=0, style=solid];
m0_60 -> m0_61  [key=0, style=solid];
m0_60 -> m0_20  [key=2, style=dotted];
m0_59 -> m0_60  [key=0, style=solid];
m0_47 -> m0_48  [key=0, style=solid];
m0_47 -> m0_49  [key=2, style=dotted];
m0_48 -> m0_46  [key=0, style=bold, color=blue];
m0_51 -> m0_52  [key=0, style=solid];
m0_51 -> m0_49  [key=2, style=dotted];
m0_52 -> m0_50  [key=0, style=bold, color=blue];
m0_54 -> m0_55  [key=0, style=solid];
m0_54 -> m0_49  [key=2, style=dotted];
m0_55 -> m0_53  [key=0, style=bold, color=blue];
m0_57 -> m0_58  [key=0, style=solid];
m0_57 -> m0_12  [key=2, style=dotted];
m0_58 -> m0_56  [key=0, style=bold, color=blue];
m0_61 -> m0_59  [key=0, style=bold, color=blue];
m0_75 -> m0_77  [key=1, style=dashed, color=darkseagreen4, label=c];
m0_75 -> m0_76  [key=0, style=solid, color=green];
m0_75 -> m0_78  [key=1, style=dashed, color=darkseagreen4, label=c];
m0_75 -> m0_79  [key=1, style=dashed, color=green, label="CommandLine.Core.Token"];
m0_75 -> m0_80  [key=1, style=dashed, color=green, label="CommandLine.Core.Token"];
m0_75 -> m0_83  [key=2, style=dotted];
m0_77 -> m0_78  [key=0, style=solid, color=green];
m0_77 -> m0_80  [key=0, style=solid, color=green];
m0_77 -> m0_82  [key=2, style=dotted, color=green];
m0_77 -> m0_41  [key=2, style=dotted, color=green];
m0_77 -> m0_83  [key=2, style=dotted, color=green];
m0_77 -> m0_88  [key=2, style=dotted];
m0_76 -> m0_77  [key=0, style=solid, color=green];
m0_76 -> m0_87  [key=2, style=dotted];
m0_76 -> m0_79  [key=1, style=dashed, color=darkseagreen4, label=n];
m0_78 -> m0_79  [key=0, style=solid, color=green];
m0_78 -> m0_84  [key=2, style=dotted, color=green];
m0_78 -> m0_108  [key=2, style=dotted, color=green];
m0_78 -> m0_25  [key=2, style=dotted];
m0_80 -> m0_81  [key=0, style=solid, color=green];
m0_80 -> m0_82  [key=0, style=solid];
m0_80 -> m0_89  [key=2, style=dotted];
m0_89 -> m0_90  [key=0, style=solid, color=green];
m0_79 -> m0_81  [key=0, style=solid, color=green];
m0_79 -> m0_44  [key=2, style=dotted, color=green];
m0_79 -> m0_20  [key=2, style=dotted, color=green];
m0_79 -> m0_86  [key=1, style=dashed, color=green, label="lambda expression"];
m0_79 -> m0_75  [key=0, style=solid];
m0_79 -> m0_85  [key=2, style=dotted];
m0_81 -> m0_75  [key=0, style=bold, color=blue];
m0_81 -> m0_82  [key=0, style=solid];
m0_81 -> m0_89  [key=2, style=dotted];
m0_81 -> m0_83  [key=2, style=dotted];
m0_81 -> m0_12  [key=2, style=dotted];
m0_88 -> m0_86  [key=0, style=bold, color=blue];
m0_90 -> m0_91  [key=0, style=solid, color=green];
m0_90 -> m0_92  [key=0, style=solid];
m0_91 -> m0_89  [key=0, style=bold, color=blue];
m0_91 -> m0_104  [key=0, style=solid];
m0_91 -> m0_9  [key=2, style=dotted];
m0_13 -> m0_90  [key=0, style=solid];
m0_13 -> m0_96  [key=0, style=bold, color=crimson];
m0_13 -> m0_97  [key=0, style=bold, color=crimson];
m0_13 -> m0_100  [key=0, style=bold, color=crimson];
m0_13 -> m0_102  [key=0, style=bold, color=crimson];
m0_13 -> m0_103  [key=0, style=bold, color=crimson];
m0_13 -> m0_92  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_13 -> m0_93  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_13 -> m0_99  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_96 -> m0_97  [key=0, style=solid];
m0_96 -> m0_85  [key=2, style=dotted];
m0_97 -> m0_98  [key=0, style=solid];
m0_100 -> m0_101  [key=0, style=solid];
m0_102 -> m0_103  [key=0, style=solid];
m0_102 -> m0_85  [key=2, style=dotted];
m0_103 -> m0_104  [key=0, style=solid];
m0_103 -> m0_12  [key=2, style=dotted];
m0_92 -> m0_93  [key=0, style=solid];
m0_92 -> m0_104  [key=0, style=solid];
m0_92 -> m0_11  [key=2, style=dotted];
m0_93 -> m0_94  [key=0, style=solid];
m0_93 -> m0_83  [key=2, style=dotted];
m0_93 -> m0_96  [key=1, style=dashed, color=darkseagreen4, label=text];
m0_93 -> m0_101  [key=1, style=dashed, color=darkseagreen4, label=text];
m0_99 -> m0_100  [key=0, style=solid];
m0_99 -> m0_106  [key=2, style=dotted];
m0_99 -> m0_107  [key=2, style=dotted];
m0_94 -> m0_95  [key=0, style=solid];
m0_94 -> m0_105  [key=2, style=dotted];
m0_94 -> m0_98  [key=1, style=dashed, color=darkseagreen4, label=equalIndex];
m0_101 -> m0_102  [key=0, style=solid];
m0_101 -> m0_108  [key=2, style=dotted];
m0_101 -> m0_103  [key=1, style=dashed, color=darkseagreen4, label=parts];
m0_95 -> m0_96  [key=0, style=solid];
m0_95 -> m0_98  [key=0, style=solid];
m0_98 -> m0_99  [key=0, style=solid];
m0_98 -> m0_101  [key=0, style=solid];
m0_104 -> m0_13  [key=0, style=bold, color=blue];
m0_72 -> m0_73  [key=0, style=solid];
m0_72 -> m0_86  [key=2, style=dotted];
m0_72 -> m0_74  [key=1, style=dashed, color=darkseagreen4, label=first];
m0_30 -> m0_31  [key=0, style=solid];
m0_30 -> m0_33  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m0_30 -> m0_34  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m0_30 -> m0_35  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m0_30 -> m0_37  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m0_31 -> m0_32  [key=0, style=solid];
m0_31 -> m0_33  [key=0, style=solid];
m0_33 -> m0_34  [key=0, style=solid];
m0_33 -> m0_37  [key=0, style=solid];
m0_33 -> m0_39  [key=2, style=dotted];
m0_33 -> m0_46  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_34 -> m0_35  [key=0, style=solid];
m0_34 -> m0_40  [key=2, style=dotted];
m0_34 -> m0_41  [key=2, style=dotted];
m0_34 -> m0_50  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_34 -> m0_36  [key=1, style=dashed, color=darkseagreen4, label=tokenizerResult];
m0_35 -> m0_36  [key=0, style=solid];
m0_35 -> m0_42  [key=2, style=dotted];
m0_35 -> m0_43  [key=2, style=dotted];
m0_35 -> m0_44  [key=2, style=dotted];
m0_35 -> m0_53  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_35 -> m0_56  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_35 -> m0_60  [key=1, style=dashed, color=darkseagreen4, label=values];
m0_37 -> m0_38  [key=0, style=solid];
m0_37 -> m0_41  [key=2, style=dotted];
m0_32 -> m0_38  [key=0, style=solid];
m0_32 -> m0_9  [key=2, style=dotted];
m0_36 -> m0_38  [key=0, style=solid];
m0_36 -> m0_45  [key=2, style=dotted];
m0_36 -> m0_59  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_38 -> m0_30  [key=0, style=bold, color=blue];
m0_62 -> m0_63  [key=0, style=solid, color=green];
m0_62 -> m0_65  [key=1, style=dashed, color=green, label="CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>"];
m0_62 -> m0_66  [key=1, style=dashed, color=green, label="CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>"];
m0_62 -> m0_67  [key=1, style=dashed, color=green, label="CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>"];
m0_62 -> m0_77  [key=1, style=dashed, color=green, label="System.Func<string, CommandLine.Infrastructure.Maybe<string>>"];
m0_62 -> m0_68  [key=1, style=dashed, color=green, label="CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>"];
m0_62 -> m0_64  [key=0, style=solid];
m0_63 -> m0_64  [key=0, style=solid, color=green];
m0_63 -> m0_65  [key=0, style=solid, color=green];
m0_63 -> m0_82  [key=0, style=solid];
m0_63 -> m0_9  [key=2, style=dotted];
m0_64 -> m0_69  [key=0, style=solid, color=green];
m0_64 -> m0_9  [key=2, style=dotted, color=green];
m0_64 -> m0_65  [key=0, style=solid];
m0_64 -> m0_82  [key=0, style=solid];
m0_65 -> m0_66  [key=0, style=solid, color=green];
m0_65 -> m0_67  [key=0, style=solid, color=green];
m0_65 -> m0_70  [key=2, style=dotted, color=green];
m0_65 -> m0_89  [key=2, style=dotted, color=green];
m0_65 -> m0_83  [key=2, style=dotted];
m0_65 -> m0_72  [key=1, style=dashed, color=darkseagreen4, label=text];
m0_65 -> m0_75  [key=1, style=dashed, color=darkseagreen4, label=text];
m0_65 -> m0_80  [key=1, style=dashed, color=darkseagreen4, label=text];
m0_65 -> m0_81  [key=1, style=dashed, color=darkseagreen4, label=text];
m0_66 -> m0_69  [key=0, style=solid, color=green];
m0_66 -> m0_67  [key=0, style=solid];
m0_66 -> m0_84  [key=2, style=dotted];
m0_67 -> m0_68  [key=0, style=solid, color=green];
m0_67 -> m0_72  [key=2, style=dotted, color=green];
m0_67 -> m0_75  [key=1, style=dashed, color=green, label="lambda expression"];
m0_67 -> m0_12  [key=2, style=dotted];
m0_68 -> m0_69  [key=0, style=solid, color=green];
m0_68 -> m0_73  [key=2, style=dotted, color=green];
m0_68 -> m0_74  [key=2, style=dotted, color=green];
m0_68 -> m0_89  [key=1, style=dashed, color=green, label="lambda expression"];
m0_69 -> m0_62  [key=0, style=bold, color=blue];
m0_69 -> m0_70  [key=0, style=solid];
m0_69 -> m0_72  [key=0, style=solid];
m0_14 -> m0_62  [key=0, style=solid];
m0_14 -> m0_67  [key=0, style=bold, color=crimson];
m0_14 -> m0_68  [key=0, style=bold, color=crimson];
m0_14 -> m0_70  [key=0, style=bold, color=crimson];
m0_14 -> m0_71  [key=0, style=bold, color=crimson];
m0_14 -> m0_73  [key=0, style=bold, color=crimson];
m0_14 -> m0_79  [key=0, style=bold, color=crimson];
m0_14 -> m0_81  [key=0, style=bold, color=crimson];
m0_14 -> m0_64  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_14 -> m0_65  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_14 -> m0_69  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_14 -> m0_77  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, bool>"];
m0_71 -> m0_72  [key=0, style=solid];
m0_74 -> m0_75  [key=0, style=solid];
m0_74 -> m0_10  [key=2, style=dotted];
m0_74 -> m0_77  [key=1, style=dashed, color=darkseagreen4, label=seen];
m0_74 -> m0_78  [key=1, style=dashed, color=darkseagreen4, label=seen];
m0_74 -> m0_80  [key=1, style=dashed, color=darkseagreen4, label=seen];
m0_74 -> m0_81  [key=1, style=dashed, color=darkseagreen4, label=seen];
m0_109 -> m0_23  [key=1, style=dashed, color=darkseagreen4, label=errors];
m0_110 -> m0_27  [key=1, style=dashed, color=darkseagreen4, label=unkTokens];
m0_111 -> m0_60  [key=1, style=dashed, color=darkseagreen4, label=values];
m0_140 -> m0_77  [key=1, style=dashed, color=green, label="System.Func<string, CommandLine.Infrastructure.Maybe<string>>"];
m1_0 -> m1_1  [key=0, style=solid, color=green];
m1_1 -> m1_2  [key=0, style=solid, color=green];
m1_1 -> m1_6  [key=2, style=dotted, color=green];
m1_1 -> m1_7  [key=2, style=dotted, color=green];
m1_1 -> m1_4  [key=1, style=dashed, color=green, label=expectedTokens];
m1_2 -> m1_3  [key=0, style=solid, color=green];
m1_2 -> m1_8  [key=2, style=dotted, color=green];
m1_2 -> m1_9  [key=2, style=dotted, color=green];
m1_4 -> m1_5  [key=0, style=solid, color=green];
m1_4 -> m1_14  [key=2, style=dotted, color=green];
m1_4 -> n11  [key=2, style=dotted, color=green];
m1_3 -> m1_4  [key=0, style=solid, color=green];
m1_3 -> m1_10  [key=2, style=dotted, color=green];
m1_3 -> m1_6  [key=2, style=dotted, color=green];
m1_3 -> m1_7  [key=2, style=dotted, color=green];
m1_3 -> m1_11  [key=2, style=dotted, color=green];
m1_3 -> m1_12  [key=2, style=dotted, color=green];
m1_3 -> m1_13  [key=2, style=dotted, color=green];
m1_3 -> m1_16  [key=1, style=dashed, color=green, label="lambda expression"];
m1_5 -> m1_0  [key=0, style=bold, color=blue];
m1_16 -> m1_17  [key=0, style=solid, color=green];
m1_17 -> m1_18  [key=0, style=solid, color=green];
m1_17 -> m1_19  [key=2, style=dotted, color=green];
m1_17 -> m1_20  [key=2, style=dotted, color=green];
m1_17 -> m1_21  [key=2, style=dotted, color=green];
m1_18 -> m1_16  [key=0, style=bold, color=blue];
}
