digraph  {
n0 [label="Entry Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.DateHumanizeTests()", span="9-9", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.DateHumanizeTests()"];
n1 [label="Exit Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.DateHumanizeTests()", span="9-9", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.DateHumanizeTests()"];
n2 [label="Entry Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.DaysFromNow(int, string)", span="14-14", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.DaysFromNow(int, string)"];
n3 [label="DateHumanize.Verify(expected, days, TimeUnit.Day, Tense.Future)", span="16-16", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.DaysFromNow(int, string)"];
n4 [label="Exit Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.DaysFromNow(int, string)", span="14-14", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.DaysFromNow(int, string)"];
n5 [label="Entry Humanizer.Tests.DateHumanize.Verify(string, int, Humanizer.Localisation.TimeUnit, Humanizer.Localisation.Tense, double?, System.Globalization.CultureInfo)", span="30-30", cluster="Humanizer.Tests.DateHumanize.Verify(string, int, Humanizer.Localisation.TimeUnit, Humanizer.Localisation.Tense, double?, System.Globalization.CultureInfo)"];
n6 [label="Entry Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.DaysAgo(int, string)", span="22-22", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.DaysAgo(int, string)"];
n7 [label="DateHumanize.Verify(expected, days, TimeUnit.Day, Tense.Past)", span="24-24", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.DaysAgo(int, string)"];
n8 [label="Exit Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.DaysAgo(int, string)", span="22-22", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.DaysAgo(int, string)"];
n9 [label="Entry Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.HoursFromNow(int, string)", span="30-30", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.HoursFromNow(int, string)"];
n10 [label="DateHumanize.Verify(expected, hours, TimeUnit.Hour, Tense.Future)", span="32-32", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.HoursFromNow(int, string)"];
n11 [label="Exit Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.HoursFromNow(int, string)", span="30-30", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.HoursFromNow(int, string)"];
n12 [label="Entry Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.HoursAgo(int, string)", span="38-38", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.HoursAgo(int, string)"];
n13 [label="DateHumanize.Verify(expected, hours, TimeUnit.Hour, Tense.Past)", span="40-40", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.HoursAgo(int, string)"];
n14 [label="Exit Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.HoursAgo(int, string)", span="38-38", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.HoursAgo(int, string)"];
n15 [label="Entry Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MinutesFromNow(int, string)", span="46-46", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MinutesFromNow(int, string)"];
n16 [label="DateHumanize.Verify(expected, minutes, TimeUnit.Minute, Tense.Future)", span="48-48", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MinutesFromNow(int, string)"];
n17 [label="Exit Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MinutesFromNow(int, string)", span="46-46", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MinutesFromNow(int, string)"];
n18 [label="Entry Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MinutesAgo(int, string)", span="54-54", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MinutesAgo(int, string)"];
n19 [label="DateHumanize.Verify(expected, minutes, TimeUnit.Minute, Tense.Past)", span="56-56", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MinutesAgo(int, string)"];
n20 [label="Exit Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MinutesAgo(int, string)", span="54-54", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MinutesAgo(int, string)"];
n21 [label="Entry Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MonthsFromNow(int, string)", span="62-62", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MonthsFromNow(int, string)"];
n22 [label="DateHumanize.Verify(expected, months, TimeUnit.Month, Tense.Future)", span="64-64", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MonthsFromNow(int, string)"];
n23 [label="Exit Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MonthsFromNow(int, string)", span="62-62", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MonthsFromNow(int, string)"];
n24 [label="Entry Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MonthsAgo(int, string)", span="70-70", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MonthsAgo(int, string)"];
n25 [label="DateHumanize.Verify(expected, months, TimeUnit.Month, Tense.Past)", span="72-72", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MonthsAgo(int, string)"];
n26 [label="Exit Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MonthsAgo(int, string)", span="70-70", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MonthsAgo(int, string)"];
n27 [label="Entry Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.SecondsFromNow(int, string)", span="78-78", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.SecondsFromNow(int, string)"];
n28 [label="DateHumanize.Verify(expected, seconds, TimeUnit.Second, Tense.Future)", span="80-80", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.SecondsFromNow(int, string)"];
n29 [label="Exit Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.SecondsFromNow(int, string)", span="78-78", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.SecondsFromNow(int, string)"];
n30 [label="Entry Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.SecondsAgo(int, string)", span="86-86", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.SecondsAgo(int, string)"];
n31 [label="DateHumanize.Verify(expected, seconds, TimeUnit.Second, Tense.Past)", span="88-88", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.SecondsAgo(int, string)"];
n32 [label="Exit Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.SecondsAgo(int, string)", span="86-86", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.SecondsAgo(int, string)"];
n33 [label="Entry Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.YearsFromNow(int, string)", span="94-94", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.YearsFromNow(int, string)"];
n34 [label="DateHumanize.Verify(expected, years, TimeUnit.Year, Tense.Future)", span="96-96", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.YearsFromNow(int, string)"];
n35 [label="Exit Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.YearsFromNow(int, string)", span="94-94", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.YearsFromNow(int, string)"];
n36 [label="Entry Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.YearsAgo(int, string)", span="102-102", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.YearsAgo(int, string)"];
n37 [label="DateHumanize.Verify(expected, years, TimeUnit.Year, Tense.Past)", span="104-104", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.YearsAgo(int, string)"];
n38 [label="Exit Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.YearsAgo(int, string)", span="102-102", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.YearsAgo(int, string)"];
n39 [label="Entry Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.DateHumanizeTests()", span="115-115", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.DateHumanizeTests()"];
n40 [label="Exit Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.DateHumanizeTests()", span="115-115", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.DateHumanizeTests()"];
n41 [label="Entry Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.DaysFromNow(int, string)", span="120-120", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.DaysFromNow(int, string)"];
n42 [label="Assert.Equal(expected, DateTime.UtcNow.AddDays(days).Humanize())", span="122-122", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.DaysFromNow(int, string)"];
n43 [label="Exit Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.DaysFromNow(int, string)", span="120-120", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.DaysFromNow(int, string)"];
n44 [label="Entry System.DateTime.AddDays(double)", span="0-0", cluster="System.DateTime.AddDays(double)"];
n45 [label="Entry System.DateTime.Humanize(bool, System.DateTime?, System.Globalization.CultureInfo)", span="19-19", cluster="System.DateTime.Humanize(bool, System.DateTime?, System.Globalization.CultureInfo)"];
n46 [label="Entry Unk.Equal", span="", cluster="Unk.Equal"];
n47 [label="Entry Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.DaysAgo(int, string)", span="128-128", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.DaysAgo(int, string)"];
n48 [label="Assert.Equal(expected, DateTime.UtcNow.AddDays(days).Humanize())", span="130-130", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.DaysAgo(int, string)"];
n49 [label="Exit Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.DaysAgo(int, string)", span="128-128", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.DaysAgo(int, string)"];
n50 [label="Entry Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.HoursFromNow(int, string)", span="136-136", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.HoursFromNow(int, string)"];
n51 [label="Assert.Equal(expected, DateTime.UtcNow.AddHours(hours).Humanize())", span="138-138", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.HoursFromNow(int, string)"];
n52 [label="Exit Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.HoursFromNow(int, string)", span="136-136", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.HoursFromNow(int, string)"];
n53 [label="Entry System.DateTime.AddHours(double)", span="0-0", cluster="System.DateTime.AddHours(double)"];
n54 [label="Entry Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.HoursAgo(int, string)", span="144-144", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.HoursAgo(int, string)"];
n55 [label="Assert.Equal(expected, DateTime.UtcNow.AddHours(hours).Humanize())", span="146-146", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.HoursAgo(int, string)"];
n56 [label="Exit Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.HoursAgo(int, string)", span="144-144", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.HoursAgo(int, string)"];
n57 [label="Entry Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MinutesFromNow(int, string)", span="152-152", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MinutesFromNow(int, string)"];
n58 [label="Assert.Equal(expected, DateTime.UtcNow.AddMinutes(minutes).Humanize())", span="154-154", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MinutesFromNow(int, string)"];
n59 [label="Exit Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MinutesFromNow(int, string)", span="152-152", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MinutesFromNow(int, string)"];
n60 [label="Entry System.DateTime.AddMinutes(double)", span="0-0", cluster="System.DateTime.AddMinutes(double)"];
n61 [label="Entry Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MinutesAgo(int, string)", span="160-160", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MinutesAgo(int, string)"];
n62 [label="Assert.Equal(expected, DateTime.UtcNow.AddMinutes(minutes).Humanize())", span="162-162", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MinutesAgo(int, string)"];
n63 [label="Exit Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MinutesAgo(int, string)", span="160-160", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MinutesAgo(int, string)"];
n64 [label="Entry Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MonthsFromNow(int, string)", span="168-168", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MonthsFromNow(int, string)"];
n65 [label="Assert.Equal(expected, DateTime.UtcNow.AddMonths(months).Humanize())", span="170-170", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MonthsFromNow(int, string)"];
n66 [label="Exit Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MonthsFromNow(int, string)", span="168-168", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MonthsFromNow(int, string)"];
n67 [label="Entry System.DateTime.AddMonths(int)", span="0-0", cluster="System.DateTime.AddMonths(int)"];
n68 [label="Entry Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MonthsAgo(int, string)", span="176-176", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MonthsAgo(int, string)"];
n69 [label="Assert.Equal(expected, DateTime.UtcNow.AddMonths(months).Humanize())", span="178-178", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MonthsAgo(int, string)"];
n70 [label="Exit Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MonthsAgo(int, string)", span="176-176", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MonthsAgo(int, string)"];
n71 [label="Entry Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.SecondsFromNow(int, string)", span="184-184", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.SecondsFromNow(int, string)"];
n72 [label="Assert.Equal(expected, DateTime.UtcNow.AddSeconds(seconds).Humanize())", span="186-186", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.SecondsFromNow(int, string)"];
n73 [label="Exit Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.SecondsFromNow(int, string)", span="184-184", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.SecondsFromNow(int, string)"];
n74 [label="Entry System.DateTime.AddSeconds(double)", span="0-0", cluster="System.DateTime.AddSeconds(double)"];
n75 [label="Entry Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.SecondsAgo(int, string)", span="192-192", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.SecondsAgo(int, string)"];
n76 [label="Assert.Equal(expected, DateTime.UtcNow.AddSeconds(seconds).Humanize())", span="194-194", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.SecondsAgo(int, string)"];
n77 [label="Exit Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.SecondsAgo(int, string)", span="192-192", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.SecondsAgo(int, string)"];
n78 [label="Entry Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.YearsFromNow(int, string)", span="200-200", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.YearsFromNow(int, string)"];
n79 [label="Assert.Equal(expected, DateTime.UtcNow.AddYears(years).Humanize())", span="202-202", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.YearsFromNow(int, string)"];
n80 [label="Exit Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.YearsFromNow(int, string)", span="200-200", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.YearsFromNow(int, string)"];
n81 [label="Entry System.DateTime.AddYears(int)", span="0-0", cluster="System.DateTime.AddYears(int)"];
n82 [label="Entry Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.YearsAgo(int, string)", span="208-208", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.YearsAgo(int, string)"];
n83 [label="Assert.Equal(expected, DateTime.UtcNow.AddYears(years).Humanize())", span="210-210", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.YearsAgo(int, string)"];
n84 [label="Exit Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.YearsAgo(int, string)", span="208-208", cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.YearsAgo(int, string)"];
d38 [label="return specProps =>\r\n            {\r\n                var setsWithTrue =\r\n                    specProps\r\n                        .Where(sp => sp.Specification.IsOption()\r\n                            && sp.Value.IsJust() && sp.Specification.Required)\r\n                        .Select(s => ((OptionSpecification)s.Specification).SetName).ToList();\r\n                \r\n                var requiredButEmpty =\r\n                    specProps\r\n                        .Where(sp => sp.Specification.IsOption())\r\n                        .Where(sp => sp.Value.IsNothing()\r\n                            && sp.Specification.Required\r\n                            && !setsWithTrue.Contains(((OptionSpecification)sp.Specification).SetName))\r\n                    .Concat(specProps\r\n                        .Where(sp => sp.Specification.IsValue()\r\n                            && sp.Value.IsNothing()\r\n                            && sp.Specification.Required)).ToList();\r\n                    if (requiredButEmpty.Any()) {\r\n                        return requiredButEmpty.Select(s =>new MissingRequiredOptionError(\r\n                            NameExtensions.FromSpecification(s.Specification)));\r\n                    }\r\n                    return Enumerable.Empty<Error>();\r\n                };", span="45-68", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", color=green, community=0];
d5 [label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="43-43", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()"];
d39 [label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="43-43", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()"];
d41 [label="var setsWithTrue =\r\n                    specProps\r\n                        .Where(sp => sp.Specification.IsOption()\r\n                            && sp.Value.IsJust() && sp.Specification.Required)\r\n                        .Select(s => ((OptionSpecification)s.Specification).SetName).ToList()", span="47-51", cluster="lambda expression"];
d42 [label="var requiredButEmpty =\r\n                    specProps\r\n                        .Where(sp => sp.Specification.IsOption())\r\n                        .Where(sp => sp.Value.IsNothing()\r\n                            && sp.Specification.Required\r\n                            && !setsWithTrue.Contains(((OptionSpecification)sp.Specification).SetName))\r\n                    .Concat(specProps\r\n                        .Where(sp => sp.Specification.IsValue()\r\n                            && sp.Value.IsNothing()\r\n                            && sp.Specification.Required)).ToList()", span="53-62", cluster="lambda expression"];
d45 [label="return Enumerable.Empty<Error>();", span="67-67", cluster="lambda expression", color=green, community=0];
d43 [label="requiredButEmpty.Any()", span="63-63", cluster="lambda expression"];
d46 [label="Exit lambda expression", span="45-68", cluster="lambda expression"];
d21 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()"];
d75 [label="return specProps =>\r\n                {\r\n                    var options = specProps.Where(\r\n                        sp => sp.Specification.TargetType == TargetType.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min.FromJust())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max.FromJust())\r\n                        )\r\n                    );\r\n                    if (options.Any())\r\n                    {\r\n                        return options.Select(s => new SequenceOutOfRangeError(\r\n                            NameExtensions.FromSpecification(s.Specification)));\r\n                    }\r\n                    return Enumerable.Empty<Error>();\r\n                };", span="73-89", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", color=green, community=0];
d6 [label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="71-71", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()"];
d76 [label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="71-71", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()"];
d78 [label="var options = specProps.Where(\r\n                        sp => sp.Specification.TargetType == TargetType.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min.FromJust())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max.FromJust())\r\n                        )\r\n                    )", span="75-82", cluster="lambda expression", color=green, community=0];
d77 [label="Entry lambda expression", span="73-89", cluster="lambda expression"];
d79 [label="options.Any()", span="83-83", cluster="lambda expression"];
d17 [label="Entry Unk.Where", span="", cluster="Unk.Where"];
d83 [label="Entry lambda expression", span="76-81", cluster="lambda expression"];
d80 [label="return options.Select(s => new SequenceOutOfRangeError(\r\n                            NameExtensions.FromSpecification(s.Specification)));", span="85-86", cluster="lambda expression"];
d84 [label="sp.Specification.TargetType == TargetType.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min.FromJust())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max.FromJust())\r\n                        )", span="76-81", cluster="lambda expression", color=green, community=0];
d85 [label="Exit lambda expression", span="76-81", cluster="lambda expression"];
d53 [label="Entry CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", span="149-149", cluster="CommandLine.Infrastructure.Maybe<T>.IsJust<T>()"];
d86 [label="Entry CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", span="134-134", cluster="CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)"];
d1 [label="return new List<Func<IEnumerable<SpecificationProperty>, IEnumerable<Error>>>\r\n                {\r\n                    EnforceMutuallyExclusiveSet(),\r\n                    EnforceRequired(),\r\n                    EnforceRange(),\r\n                    EnforceSingle(tokens)\r\n                };", span="15-21", cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)"];
d40 [label="Entry lambda expression", span="45-68", cluster="lambda expression"];
d20 [label="Entry Unk.Select", span="", cluster="Unk.Select"];
d47 [label="Entry Unk.ToList", span="", cluster="Unk.ToList"];
d50 [label="Entry lambda expression", span="49-50", cluster="lambda expression"];
d54 [label="Entry lambda expression", span="51-51", cluster="lambda expression"];
d61 [label="sp.Value.IsNothing()\r\n                            && sp.Specification.Required\r\n                            && !setsWithTrue.Contains(((OptionSpecification)sp.Specification).SetName)", span="56-58", cluster="lambda expression"];
d48 [label="Entry Unk.Concat", span="", cluster="Unk.Concat"];
d57 [label="Entry lambda expression", span="55-55", cluster="lambda expression"];
d60 [label="Entry lambda expression", span="56-58", cluster="lambda expression"];
d65 [label="Entry lambda expression", span="60-62", cluster="lambda expression"];
d44 [label="return requiredButEmpty.Select(s =>new MissingRequiredOptionError(\r\n                            NameExtensions.FromSpecification(s.Specification)));", span="64-65", cluster="lambda expression"];
d49 [label="Entry Unk.Any", span="", cluster="Unk.Any"];
d15 [label="return Enumerable.Empty<Error>();", span="39-39", cluster="lambda expression"];
d81 [label="return Enumerable.Empty<Error>();", span="88-88", cluster="lambda expression"];
d82 [label="Exit lambda expression", span="73-89", cluster="lambda expression"];
d11 [label="var options = specProps\r\n                            .Where(sp => sp.Specification.IsOption())\r\n                            .Where(sp => ((OptionSpecification)sp.Specification).SetName.Length > 0\r\n                                   && sp.Value.IsJust())", span="28-31", cluster="lambda expression"];
d95 [label="var options = from t in tokens.Where(t => t.IsName())\r\n                                  join o in specs on t.Text equals o.UniqueName() into to\r\n                                  from o in to.DefaultIfEmpty()\r\n                                  where o != null\r\n                                  select new { o.ShortName, o.LongName }", span="99-103", cluster="lambda expression"];
d87 [label="Entry lambda expression", span="85-86", cluster="lambda expression"];
d51 [label="sp.Specification.IsOption()\r\n                            && sp.Value.IsJust() && sp.Specification.Required", span="49-50", cluster="lambda expression"];
d94 [label="var specs = from sp in specProps\r\n                                where sp.Specification.IsOption() && sp.Value.IsJust()\r\n                                select (OptionSpecification)sp.Specification", span="96-98", cluster="lambda expression"];
d0 [label="Entry CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12", cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)"];
d2 [label="Exit CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12", cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)"];
d3 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()"];
d4 [label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="24-24", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()"];
d7 [label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="92-92", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)"];
d14 [label="return options.Select(s =>\r\n                            new MutuallyExclusiveSetError(\r\n                                NameExtensions.FromOptionSpecification((OptionSpecification)s.Specification)));", span="35-37", cluster="lambda expression"];
d52 [label="Exit lambda expression", span="49-50", cluster="lambda expression"];
d56 [label="Exit lambda expression", span="51-51", cluster="lambda expression"];
d55 [label="((OptionSpecification)s.Specification).SetName", span="51-51", cluster="lambda expression"];
d108 [label=setsWithTrue, span=""];
d62 [label="Exit lambda expression", span="56-58", cluster="lambda expression"];
d63 [label="Entry Unk.IsNothing", span="", cluster="Unk.IsNothing"];
d64 [label="Entry Unk.Contains", span="", cluster="Unk.Contains"];
d59 [label="Exit lambda expression", span="55-55", cluster="lambda expression"];
d58 [label="sp.Specification.IsOption()", span="55-55", cluster="lambda expression"];
d67 [label="Exit lambda expression", span="60-62", cluster="lambda expression"];
d66 [label="sp.Specification.IsValue()\r\n                            && sp.Value.IsNothing()\r\n                            && sp.Specification.Required", span="60-62", cluster="lambda expression"];
d70 [label="Entry lambda expression", span="64-65", cluster="lambda expression"];
d13 [label="groups.Count() > 1", span="33-33", cluster="lambda expression"];
d16 [label="Exit lambda expression", span="26-40", cluster="lambda expression"];
d8 [label="return specProps =>\r\n                {\r\n                    var options = specProps\r\n                            .Where(sp => sp.Specification.IsOption())\r\n                            .Where(sp => ((OptionSpecification)sp.Specification).SetName.Length > 0\r\n                                   && sp.Value.IsJust());\r\n                    var groups = options.GroupBy(g => ((OptionSpecification)g.Specification).SetName);\r\n                    if (groups.Count() > 1)\r\n                    {\r\n                        return options.Select(s =>\r\n                            new MutuallyExclusiveSetError(\r\n                                NameExtensions.FromOptionSpecification((OptionSpecification)s.Specification)));\r\n                    }\r\n                    return Enumerable.Empty<Error>();\r\n                };", span="26-40", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()"];
d10 [label="Entry lambda expression", span="26-40", cluster="lambda expression"];
d12 [label="var groups = options.GroupBy(g => ((OptionSpecification)g.Specification).SetName)", span="32-32", cluster="lambda expression"];
d22 [label="Entry lambda expression", span="29-29", cluster="lambda expression"];
d26 [label="Entry lambda expression", span="30-31", cluster="lambda expression"];
d109 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", span=""];
d96 [label="var groups = from x in options\r\n                                 group x by x into g\r\n                                 let count = g.Count()\r\n                                 select new { Value = g.Key, Count = count }", span="104-107", cluster="lambda expression"];
d100 [label="Entry Unk.UniqueName", span="", cluster="Unk.UniqueName"];
d101 [label="Entry Unk.DefaultIfEmpty", span="", cluster="Unk.DefaultIfEmpty"];
d104 [label="Entry lambda expression", span="99-99", cluster="lambda expression"];
d89 [label="Exit lambda expression", span="85-86", cluster="lambda expression"];
d88 [label="new SequenceOutOfRangeError(\r\n                            NameExtensions.FromSpecification(s.Specification))", span="85-86", cluster="lambda expression"];
d25 [label="Entry CommandLine.Core.Specification.IsOption()", span="10-10", cluster="CommandLine.Core.Specification.IsOption()"];
d91 [label="return specProps =>\r\n                {\r\n                    var specs = from sp in specProps\r\n                                where sp.Specification.IsOption() && sp.Value.IsJust()\r\n                                select (OptionSpecification)sp.Specification;\r\n                    var options = from t in tokens.Where(t => t.IsName())\r\n                                  join o in specs on t.Text equals o.UniqueName() into to\r\n                                  from o in to.DefaultIfEmpty()\r\n                                  where o != null\r\n                                  select new { o.ShortName, o.LongName };\r\n                    var groups = from x in options\r\n                                 group x by x into g\r\n                                 let count = g.Count()\r\n                                 select new { Value = g.Key, Count = count };\r\n                    var errors = from y in groups\r\n                                 where y.Count > 1\r\n                                 select new RepeatedOptionError(new NameInfo(y.Value.ShortName, y.Value.LongName));\r\n                    return errors;\r\n                };", span="94-112", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)"];
d93 [label="Entry lambda expression", span="94-112", cluster="lambda expression"];
d9 [label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="24-24", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()"];
d92 [label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="92-92", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)"];
d33 [label="Entry lambda expression", span="35-37", cluster="lambda expression"];
d68 [label="Entry CommandLine.Core.Specification.IsValue()", span="15-15", cluster="CommandLine.Core.Specification.IsValue()"];
d69 [label="Entry CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", span="144-144", cluster="CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()"];
d72 [label="Exit lambda expression", span="64-65", cluster="lambda expression"];
d71 [label="new MissingRequiredOptionError(\r\n                            NameExtensions.FromSpecification(s.Specification))", span="64-65", cluster="lambda expression"];
d19 [label="Entry Unk.Count", span="", cluster="Unk.Count"];
d18 [label="Entry Unk.GroupBy", span="", cluster="Unk.GroupBy"];
d30 [label="Entry lambda expression", span="32-32", cluster="lambda expression"];
d24 [label="Exit lambda expression", span="29-29", cluster="lambda expression"];
d23 [label="sp.Specification.IsOption()", span="29-29", cluster="lambda expression"];
d28 [label="Exit lambda expression", span="30-31", cluster="lambda expression"];
d27 [label="((OptionSpecification)sp.Specification).SetName.Length > 0\r\n                                   && sp.Value.IsJust()", span="30-31", cluster="lambda expression"];
d97 [label="var errors = from y in groups\r\n                                 where y.Count > 1\r\n                                 select new RepeatedOptionError(new NameInfo(y.Value.ShortName, y.Value.LongName))", span="108-110", cluster="lambda expression"];
d106 [label="Exit lambda expression", span="99-99", cluster="lambda expression"];
d105 [label="t.IsName()", span="99-99", cluster="lambda expression"];
d90 [label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="324-324", cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)"];
d74 [label="Entry Unk.FromSpecification", span="", cluster="Unk.FromSpecification"];
d99 [label="Exit lambda expression", span="94-112", cluster="lambda expression"];
d35 [label="Exit lambda expression", span="35-37", cluster="lambda expression"];
d34 [label="new MutuallyExclusiveSetError(\r\n                                NameExtensions.FromOptionSpecification((OptionSpecification)s.Specification))", span="36-37", cluster="lambda expression"];
d73 [label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="291-291", cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)"];
d32 [label="Exit lambda expression", span="32-32", cluster="lambda expression"];
d31 [label="((OptionSpecification)g.Specification).SetName", span="32-32", cluster="lambda expression"];
d29 [label="Entry Unk.IsJust", span="", cluster="Unk.IsJust"];
d98 [label="return errors;", span="111-111", cluster="lambda expression"];
d102 [label="Entry CommandLine.RepeatedOptionError.RepeatedOptionError(CommandLine.NameInfo)", span="335-335", cluster="CommandLine.RepeatedOptionError.RepeatedOptionError(CommandLine.NameInfo)"];
d103 [label="Entry NameInfo.cstr", span="", cluster="NameInfo.cstr"];
d107 [label="Entry CommandLine.Core.Token.IsName()", span="68-68", cluster="CommandLine.Core.Token.IsName()"];
d36 [label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="302-302", cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)"];
d37 [label="Entry CommandLine.Core.NameExtensions.FromOptionSpecification(CommandLine.Core.OptionSpecification)", span="15-15", cluster="CommandLine.Core.NameExtensions.FromOptionSpecification(CommandLine.Core.OptionSpecification)"];
m1_51 [label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", span="95-95", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", file="TokenGroup.cs"];
m1_52 [label="var sut = new HelpText { AddDashesToOption = true }\r\n                .AddPreOptionsLine(''pre-options'')\r\n                .AddOptions(new NotParsed<Options_With_Enum_Having_HelpText>(TypeInfo.Create(typeof(Options_With_Enum_Having_HelpText)), Enumerable.Empty<Error>()))\r\n                .AddPostOptionsLine(''post-options'')", span="99-102", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", file="TokenGroup.cs"];
m1_53 [label="var lines = sut.ToString().ToNotEmptyLines().TrimStringArray()", span="106-106", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", file="TokenGroup.cs"];
m1_54 [label="lines[0].ShouldBeEquivalentTo(''pre-options'')", span="107-107", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", file="TokenGroup.cs"];
m1_55 [label="lines[1].ShouldBeEquivalentTo(''--stringvalue    Define a string value here.'')", span="108-108", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", file="TokenGroup.cs"];
m1_56 [label="lines[2].ShouldBeEquivalentTo(''--shape          Define a enum value here.'')", span="109-109", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", file="TokenGroup.cs"];
m1_57 [label="lines[3].ShouldBeEquivalentTo(''--help           Display this help screen.'')", span="110-110", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", file="TokenGroup.cs"];
m1_58 [label="lines[4].ShouldBeEquivalentTo(''--version        Display version information.'')", span="111-111", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", file="TokenGroup.cs"];
m1_59 [label="lines[5].ShouldBeEquivalentTo(''post-options'')", span="112-112", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", file="TokenGroup.cs"];
m1_60 [label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", span="95-95", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", file="TokenGroup.cs"];
m1_16 [label="Entry CommandLine.Text.HelpText.HelpText(string, string)", span="83-83", cluster="CommandLine.Text.HelpText.HelpText(string, string)", file="TokenGroup.cs"];
m1_79 [label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column_given_width_of_100()", span="158-158", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column_given_width_of_100()", file="TokenGroup.cs"];
m1_82 [label="var lines = sut.ToString().Split(new[] { Environment.NewLine }, StringSplitOptions.None)", span="169-169", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column_given_width_of_100()", file="TokenGroup.cs"];
m1_83 [label="lines[2].ShouldBeEquivalentTo(''  v, verbose    This is the description of the verbosity to test out the wrapping capabilities of '')", span="170-170", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column_given_width_of_100()", file="TokenGroup.cs"];
m1_84 [label="lines[3].ShouldBeEquivalentTo(''                the Help Text.'')", span="172-172", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column_given_width_of_100()", file="TokenGroup.cs"];
m1_80 [label="var sut = new HelpText(new HeadingInfo(''CommandLine.Tests.dll'', ''1.9.4.131'')) { MaximumDisplayWidth = 100}", span="162-162", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column_given_width_of_100()", file="TokenGroup.cs"];
m1_81 [label="sut.AddOptions(\r\n                new NotParsed<Simple_Options_With_HelpText_Set_To_Long_Description>(\r\n                    TypeInfo.Create(typeof(Simple_Options_With_HelpText_Set_To_Long_Description)),\r\n                    Enumerable.Empty<Error>()))", span="163-166", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column_given_width_of_100()", file="TokenGroup.cs"];
m1_85 [label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column_given_width_of_100()", span="158-158", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column_given_width_of_100()", file="TokenGroup.cs"];
m1_141 [label="Entry CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)", span="471-471", cluster="CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)", file="TokenGroup.cs"];
m1_22 [label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", span="47-47", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", file="TokenGroup.cs"];
m1_23 [label="var sut = new HelpText { AddDashesToOption = true }\r\n                .AddPreOptionsLine(''pre-options'')\r\n                .AddOptions(new NotParsed<Simple_Options>(TypeInfo.Create(typeof(Simple_Options)), Enumerable.Empty<Error>()))\r\n                .AddPostOptionsLine(''post-options'')", span="51-54", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", file="TokenGroup.cs"];
m1_24 [label="var lines = sut.ToString().ToNotEmptyLines().TrimStringArray()", span="58-58", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", file="TokenGroup.cs"];
m1_25 [label="lines[0].ShouldBeEquivalentTo(''pre-options'')", span="59-59", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", file="TokenGroup.cs"];
m1_26 [label="lines[1].ShouldBeEquivalentTo(''--stringvalue         Define a string value here.'')", span="60-60", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", file="TokenGroup.cs"];
m1_27 [label="lines[2].ShouldBeEquivalentTo(''-s, --shortandlong    Example with both short and long name.'')", span="61-61", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", file="TokenGroup.cs"];
m1_28 [label="lines[3].ShouldBeEquivalentTo(''-i                    Define a int sequence here.'')", span="62-62", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", file="TokenGroup.cs"];
m1_29 [label="lines[4].ShouldBeEquivalentTo(''-x                    Define a boolean or switch value here.'')", span="63-63", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", file="TokenGroup.cs"];
m1_30 [label="lines[5].ShouldBeEquivalentTo(''--help                Display this help screen.'')", span="64-64", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", file="TokenGroup.cs"];
m1_31 [label="lines[6].ShouldBeEquivalentTo(''--version             Display version information.'')", span="65-65", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", file="TokenGroup.cs"];
m1_32 [label="lines[7].ShouldBeEquivalentTo(''value pos. 0          Define a long value here.'')", span="66-66", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", file="TokenGroup.cs"];
m1_33 [label="lines[8].ShouldBeEquivalentTo(''post-options'')", span="67-67", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", file="TokenGroup.cs"];
m1_34 [label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", span="47-47", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", file="TokenGroup.cs"];
m1_86 [label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_has_hidden_option_it_should_not_be_added_to_help_text_output()", span="177-177", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_has_hidden_option_it_should_not_be_added_to_help_text_output()", file="TokenGroup.cs"];
m1_89 [label="var lines = sut.ToString().Split(new[] { Environment.NewLine }, StringSplitOptions.None)", span="188-188", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_has_hidden_option_it_should_not_be_added_to_help_text_output()", file="TokenGroup.cs"];
m1_90 [label="lines[2].ShouldBeEquivalentTo(''  v, verbose    This is the description of the verbosity to test out the '')", span="189-189", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_has_hidden_option_it_should_not_be_added_to_help_text_output()", file="TokenGroup.cs"];
m1_91 [label="lines[3].ShouldBeEquivalentTo(''                wrapping capabilities of the Help Text.'')", span="191-191", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_has_hidden_option_it_should_not_be_added_to_help_text_output()", file="TokenGroup.cs"];
m1_87 [label="var sut = new HelpText(new HeadingInfo(''CommandLine.Tests.dll'', ''1.9.4.131''))", span="181-181", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_has_hidden_option_it_should_not_be_added_to_help_text_output()", file="TokenGroup.cs"];
m1_88 [label="sut.AddOptions(\r\n                new NotParsed<Simple_Options_With_HelpText_Set_To_Long_Description>(\r\n                    TypeInfo.Create(typeof(Simple_Options_With_HelpText_Set_To_Long_Description)),\r\n                    Enumerable.Empty<Error>()))", span="182-185", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_has_hidden_option_it_should_not_be_added_to_help_text_output()", file="TokenGroup.cs"];
m1_92 [label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_has_hidden_option_it_should_not_be_added_to_help_text_output()", span="177-177", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_has_hidden_option_it_should_not_be_added_to_help_text_output()", file="TokenGroup.cs"];
m1_249 [label="Entry CommandLine.Text.HelpText.RenderUsageText<T>(CommandLine.ParserResult<T>)", span="529-529", cluster="CommandLine.Text.HelpText.RenderUsageText<T>(CommandLine.ParserResult<T>)", file="TokenGroup.cs"];
m1_93 [label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", span="196-196", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", file="TokenGroup.cs"];
m1_97 [label="var lines = sut.ToString().ToNotEmptyLines()", span="208-208", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", file="TokenGroup.cs"];
m1_98 [label="lines[1].ShouldBeEquivalentTo(''  v, verbose    Before '')", span="209-209", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", file="TokenGroup.cs"];
m1_99 [label="lines[2].ShouldBeEquivalentTo(''                012345678901234567890123'')", span="210-210", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", file="TokenGroup.cs"];
m1_100 [label="lines[3].ShouldBeEquivalentTo(''                After'')", span="211-211", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", file="TokenGroup.cs"];
m1_101 [label="lines[4].ShouldBeEquivalentTo(''  input-file    Before '')", span="212-212", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", file="TokenGroup.cs"];
m1_102 [label="lines[5].ShouldBeEquivalentTo(''                012345678901234567890123'')", span="213-213", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", file="TokenGroup.cs"];
m1_103 [label="lines[6].ShouldBeEquivalentTo(''                456789 After'')", span="214-214", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", file="TokenGroup.cs"];
m1_94 [label="var sut = new HelpText(new HeadingInfo(''CommandLine.Tests.dll'', ''1.9.4.131''))", span="200-200", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", file="TokenGroup.cs"];
m1_96 [label="sut.AddOptions(\r\n                new NotParsed<Simple_Options_With_HelpText_Set_To_Long_Description_Without_Spaces>(\r\n                    TypeInfo.Create(typeof(Simple_Options_With_HelpText_Set_To_Long_Description_Without_Spaces)),\r\n                    Enumerable.Empty<Error>()))", span="202-205", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", file="TokenGroup.cs"];
m1_95 [label="sut.MaximumDisplayWidth = 40", span="201-201", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", file="TokenGroup.cs"];
m1_104 [label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", span="196-196", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", file="TokenGroup.cs"];
m1_218 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="TokenGroup.cs"];
m1_131 [label="Entry CommandLine.BadFormatTokenError.BadFormatTokenError(string)", span="221-221", cluster="CommandLine.BadFormatTokenError.BadFormatTokenError(string)", file="TokenGroup.cs"];
m1_220 [label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", span="435-435", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", file="TokenGroup.cs"];
m1_221 [label="var sut = new HelpText { AddDashesToOption = true }\r\n                .AddPreOptionsLine(''pre-options'')\r\n                .AddOptions(new NotParsed<Options_With_HelpText_And_MetaValue>(TypeInfo.Create(typeof(Options_With_HelpText_And_MetaValue)), Enumerable.Empty<Error>()))\r\n                .AddPostOptionsLine(''post-options'')", span="439-442", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", file="TokenGroup.cs"];
m1_222 [label="var lines = sut.ToString().ToNotEmptyLines().TrimStringArray()", span="446-446", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", file="TokenGroup.cs"];
m1_223 [label="lines[0].ShouldBeEquivalentTo(''pre-options'')", span="447-447", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", file="TokenGroup.cs"];
m1_224 [label="lines[1].ShouldBeEquivalentTo(''--stringvalue=STR            Define a string value here.'')", span="448-448", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", file="TokenGroup.cs"];
m1_225 [label="lines[2].ShouldBeEquivalentTo(''-i INTSEQ                    Define a int sequence here.'')", span="449-449", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", file="TokenGroup.cs"];
m1_226 [label="lines[3].ShouldBeEquivalentTo(''-x                           Define a boolean or switch value here.'')", span="450-450", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", file="TokenGroup.cs"];
m1_227 [label="lines[4].ShouldBeEquivalentTo(''--help                       Display this help screen.'')", span="451-451", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", file="TokenGroup.cs"];
m1_228 [label="lines[5].ShouldBeEquivalentTo(''--version                    Display version information.'')", span="452-452", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", file="TokenGroup.cs"];
m1_229 [label="lines[6].ShouldBeEquivalentTo(''number (pos. 0) NUM          Define a long value here.'')", span="453-453", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", file="TokenGroup.cs"];
m1_230 [label="lines[7].ShouldBeEquivalentTo(''paintcolor (pos. 1) COLOR    Define a color value here.'')", span="454-454", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", file="TokenGroup.cs"];
m1_231 [label="lines[8].ShouldBeEquivalentTo(''post-options'', lines[8])", span="455-455", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", file="TokenGroup.cs"];
m1_232 [label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", span="435-435", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", file="TokenGroup.cs"];
m1_164 [label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", span="301-301", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_167 [label="var lines = helpText.ToString().ToNotEmptyLines().TrimStringArray()", span="316-316", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_170 [label="lines[2].ShouldBeEquivalentTo(''ERROR(S):'')", span="325-325", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_171 [label="lines[3].ShouldBeEquivalentTo(''Token 'badtoken' is not recognized.'')", span="326-326", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_172 [label="lines[4].ShouldBeEquivalentTo(''A sequence option 'i' is defined with fewer or more items than required.'')", span="327-327", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_173 [label="lines[5].ShouldBeEquivalentTo(''--stringvalue         Define a string value here.'')", span="328-328", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_174 [label="lines[6].ShouldBeEquivalentTo(''-s, --shortandlong    Example with both short and long name.'')", span="329-329", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_175 [label="lines[7].ShouldBeEquivalentTo(''-i                    Define a int sequence here.'')", span="330-330", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_176 [label="lines[8].ShouldBeEquivalentTo(''-x                    Define a boolean or switch value here.'')", span="331-331", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_177 [label="lines[9].ShouldBeEquivalentTo(''--help                Display this help screen.'')", span="332-332", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_166 [label="var helpText = HelpText.AutoBuild(fakeResult)", span="313-313", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_168 [label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="318-318", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_169 [label="lines[1].Should().StartWithEquivalent(''Copyright (c)'')", span="319-319", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_165 [label="var fakeResult = new NotParsed<Simple_Options>(\r\n                TypeInfo.Create(typeof(Simple_Options)),\r\n                new Error[]\r\n                    {\r\n                        new BadFormatTokenError(''badtoken''),\r\n                        new SequenceOutOfRangeError(new NameInfo(''i'', ''''))\r\n                    })", span="304-310", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_178 [label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", span="301-301", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_67 [label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column_given_width_of_40()", span="133-133", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column_given_width_of_40()", file="TokenGroup.cs"];
m1_71 [label="var lines = sut.ToString().Split(new[] { Environment.NewLine }, StringSplitOptions.None)", span="145-145", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column_given_width_of_40()", file="TokenGroup.cs"];
m1_72 [label="lines[2].ShouldBeEquivalentTo(''  v, verbose    This is the description'')", span="146-146", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column_given_width_of_40()", file="TokenGroup.cs"];
m1_73 [label="lines[3].ShouldBeEquivalentTo(''                of the verbosity to '')", span="148-148", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column_given_width_of_40()", file="TokenGroup.cs"];
m1_74 [label="lines[4].ShouldBeEquivalentTo(''                test out the wrapping '')", span="149-149", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column_given_width_of_40()", file="TokenGroup.cs"];
m1_75 [label="lines[5].ShouldBeEquivalentTo(''                capabilities of the '')", span="150-150", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column_given_width_of_40()", file="TokenGroup.cs"];
m1_76 [label="lines[6].ShouldBeEquivalentTo(''                Help Text.'')", span="151-151", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column_given_width_of_40()", file="TokenGroup.cs"];
m1_68 [label="var sut = new HelpText(new HeadingInfo(''CommandLine.Tests.dll'', ''1.9.4.131''))", span="137-137", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column_given_width_of_40()", file="TokenGroup.cs"];
m1_70 [label="sut.AddOptions(\r\n                new NotParsed<Simple_Options_With_HelpText_Set_To_Long_Description>(\r\n                    TypeInfo.Create(typeof(Simple_Options_With_HelpText_Set_To_Long_Description)),\r\n                    Enumerable.Empty<Error>()))", span="139-142", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column_given_width_of_40()", file="TokenGroup.cs"];
m1_69 [label="sut.MaximumDisplayWidth = 40", span="138-138", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column_given_width_of_40()", file="TokenGroup.cs"];
m1_77 [label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column_given_width_of_40()", span="133-133", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column_given_width_of_40()", file="TokenGroup.cs"];
m1_40 [label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", span="72-72", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", file="TokenGroup.cs"];
m1_41 [label="var sut = new HelpText { AddDashesToOption = true, AddEnumValuesToHelpText = true }\r\n                .AddPreOptionsLine(''pre-options'')\r\n                .AddOptions(new NotParsed<Options_With_Enum_Having_HelpText>(TypeInfo.Create(typeof(Options_With_Enum_Having_HelpText)), Enumerable.Empty<Error>()))\r\n                .AddPostOptionsLine(''post-options'')", span="76-79", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", file="TokenGroup.cs"];
m1_42 [label="var lines = sut.ToString().ToNotEmptyLines().TrimStringArray()", span="83-83", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", file="TokenGroup.cs"];
m1_43 [label="lines[0].ShouldBeEquivalentTo(''pre-options'')", span="84-84", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", file="TokenGroup.cs"];
m1_44 [label="lines[1].ShouldBeEquivalentTo(''--stringvalue    Define a string value here.'')", span="85-85", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", file="TokenGroup.cs"];
m1_45 [label="lines[2].ShouldBeEquivalentTo(''--shape          Define a enum value here. Valid values: Circle, Square,'')", span="86-86", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", file="TokenGroup.cs"];
m1_46 [label="lines[3].ShouldBeEquivalentTo(''Triangle'')", span="87-87", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", file="TokenGroup.cs"];
m1_47 [label="lines[4].ShouldBeEquivalentTo(''--help           Display this help screen.'')", span="88-88", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", file="TokenGroup.cs"];
m1_48 [label="lines[5].ShouldBeEquivalentTo(''--version        Display version information.'')", span="89-89", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", file="TokenGroup.cs"];
m1_49 [label="lines[6].ShouldBeEquivalentTo(''post-options'')", span="90-90", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", file="TokenGroup.cs"];
m1_50 [label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", span="72-72", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", file="TokenGroup.cs"];
m1_105 [label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", span="219-219", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", file="TokenGroup.cs"];
m1_109 [label="var lines = sut.ToString().ToNotEmptyLines()", span="230-230", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", file="TokenGroup.cs"];
m1_110 [label="lines[1].ShouldBeEquivalentTo(''Before '')", span="231-231", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", file="TokenGroup.cs"];
m1_111 [label="lines[2].ShouldBeEquivalentTo(''0123456789012345678901234567890123456789'')", span="232-232", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", file="TokenGroup.cs"];
m1_112 [label="lines[3].ShouldBeEquivalentTo(''012 After'')", span="233-233", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", file="TokenGroup.cs"];
m1_113 [label="lines[lines.Length - 3].ShouldBeEquivalentTo(''Before '')", span="234-234", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", file="TokenGroup.cs"];
m1_114 [label="lines[lines.Length - 2].ShouldBeEquivalentTo(''0123456789012345678901234567890123456789'')", span="235-235", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", file="TokenGroup.cs"];
m1_115 [label="lines[lines.Length - 1].ShouldBeEquivalentTo('' After'')", span="236-236", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", file="TokenGroup.cs"];
m1_108 [label="sut.AddPreOptionsLine(''Before 0123456789012345678901234567890123456789012 After'')\r\n                .AddOptions(new NotParsed<Simple_Options_Without_HelpText>(TypeInfo.Create(typeof(Simple_Options_Without_HelpText)), Enumerable.Empty<Error>()))\r\n                .AddPostOptionsLine(''Before 0123456789012345678901234567890123456789 After'')", span="225-227", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", file="TokenGroup.cs"];
m1_106 [label="var sut = new HelpText(''Heading Info.'')", span="223-223", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", file="TokenGroup.cs"];
m1_107 [label="sut.MaximumDisplayWidth = 40", span="224-224", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", file="TokenGroup.cs"];
m1_116 [label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", span="219-219", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", file="TokenGroup.cs"];
m1_205 [label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", span="402-402", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_209 [label="var lines = helpText.ToString().ToNotEmptyLines().TrimStringArray()", span="416-416", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_212 [label="lines[2].ShouldBeEquivalentTo(''add        Add file contents to the index.'')", span="426-426", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_213 [label="lines[3].ShouldBeEquivalentTo(''commit     Record changes to the repository.'')", span="427-427", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_214 [label="lines[4].ShouldBeEquivalentTo(''clone      Clone a repository into a new directory.'')", span="428-428", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_215 [label="lines[5].ShouldBeEquivalentTo(''help       Display more information on a specific command.'')", span="429-429", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_216 [label="lines[6].ShouldBeEquivalentTo(''version    Display version information.'')", span="430-430", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_208 [label="var helpText = HelpText.AutoBuild(fakeResult)", span="413-413", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_210 [label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="419-419", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_211 [label="lines[1].Should().StartWithEquivalent(''Copyright (c)'')", span="420-420", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_207 [label="var fakeResult = new NotParsed<object>(\r\n                TypeInfo.Create(typeof(NullInstance),\r\n                    verbTypes),\r\n                new Error[] { new HelpVerbRequestedError(null, null, false) })", span="407-410", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_206 [label="var verbTypes = Enumerable.Empty<Type>().Concat(\r\n                new[] { typeof(Add_Verb), typeof(Commit_Verb), typeof(Clone_Verb) })", span="405-406", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_217 [label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", span="402-402", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_0 [label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Create_empty_instance()", span="17-17", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_empty_instance()", file="TokenGroup.cs"];
m1_1 [label="string.Empty.ShouldBeEquivalentTo(new HelpText().ToString())", span="19-19", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_empty_instance()", color=green, community=0, file="TokenGroup.cs"];
m1_2 [label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Create_empty_instance()", span="17-17", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_empty_instance()", file="TokenGroup.cs"];
m1_295 [label="Entry System.Type.ToTypeInfo()", span="178-178", cluster="System.Type.ToTypeInfo()", file="TokenGroup.cs"];
m1_293 [label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0", cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="TokenGroup.cs"];
m1_160 [label="Entry System.InvalidOperationException.InvalidOperationException()", span="0-0", cluster="System.InvalidOperationException.InvalidOperationException()", file="TokenGroup.cs"];
m1_37 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()", file="TokenGroup.cs"];
m1_39 [label="Entry System.Collections.Generic.IEnumerable<string>.TrimStringArray()", span="15-15", cluster="System.Collections.Generic.IEnumerable<string>.TrimStringArray()", file="TokenGroup.cs"];
m1_35 [label="Entry CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="163-163", cluster="CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="TokenGroup.cs"];
m1_138 [label="Entry CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", span="382-382", cluster="CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", file="TokenGroup.cs"];
m1_3 [label="Entry CommandLine.Text.HelpText.HelpText()", span="37-37", cluster="CommandLine.Text.HelpText.HelpText()", file="TokenGroup.cs"];
m1_61 [label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.When_defined_MetaValue_should_be_rendered()", span="117-117", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_defined_MetaValue_should_be_rendered()", file="TokenGroup.cs"];
m1_63 [label="var lines = sut.ToString().ToNotEmptyLines().TrimStringArray()", span="126-126", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_defined_MetaValue_should_be_rendered()", file="TokenGroup.cs"];
m1_64 [label="lines[2].ShouldBeEquivalentTo(''i FILE, input-file=FILE    Required. Specify input FILE to be processed.'')", span="128-128", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_defined_MetaValue_should_be_rendered()", file="TokenGroup.cs"];
m1_62 [label="var sut =\r\n                new HelpText(''Meta Value.'').AddOptions(\r\n                    new NotParsed<Options_With_MetaValue>(TypeInfo.Create(typeof(Options_With_MetaValue)), Enumerable.Empty<Error>()))", span="121-123", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_defined_MetaValue_should_be_rendered()", file="TokenGroup.cs"];
m1_65 [label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.When_defined_MetaValue_should_be_rendered()", span="117-117", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_defined_MetaValue_should_be_rendered()", file="TokenGroup.cs"];
m1_19 [label="Entry CommandLine.Text.HelpText.AddPreOptionsLine(string)", span="335-335", cluster="CommandLine.Text.HelpText.AddPreOptionsLine(string)", file="TokenGroup.cs"];
m1_233 [label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.RenderUsageText_returns_properly_formatted_text()", span="460-460", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.RenderUsageText_returns_properly_formatted_text()", file="TokenGroup.cs"];
m1_237 [label="lines[0].ShouldBeEquivalentTo(''Normal scenario:'')", span="474-474", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.RenderUsageText_returns_properly_formatted_text()", file="TokenGroup.cs"];
m1_238 [label="lines[1].ShouldBeEquivalentTo(''  mono testapp.exe --input file.bin --output out.bin'')", span="475-475", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.RenderUsageText_returns_properly_formatted_text()", file="TokenGroup.cs"];
m1_239 [label="lines[2].ShouldBeEquivalentTo(''Logging warnings:'')", span="476-476", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.RenderUsageText_returns_properly_formatted_text()", file="TokenGroup.cs"];
m1_240 [label="lines[3].ShouldBeEquivalentTo(''  mono testapp.exe -w --input file.bin'')", span="477-477", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.RenderUsageText_returns_properly_formatted_text()", file="TokenGroup.cs"];
m1_241 [label="lines[4].ShouldBeEquivalentTo(''Logging errors:'')", span="478-478", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.RenderUsageText_returns_properly_formatted_text()", file="TokenGroup.cs"];
m1_242 [label="lines[5].ShouldBeEquivalentTo(''  mono testapp.exe -e --input file.bin'')", span="479-479", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.RenderUsageText_returns_properly_formatted_text()", file="TokenGroup.cs"];
m1_243 [label="lines[6].ShouldBeEquivalentTo(''  mono testapp.exe --errs --input=file.bin'')", span="480-480", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.RenderUsageText_returns_properly_formatted_text()", file="TokenGroup.cs"];
m1_244 [label="lines[7].ShouldBeEquivalentTo(''List:'')", span="481-481", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.RenderUsageText_returns_properly_formatted_text()", file="TokenGroup.cs"];
m1_245 [label="lines[8].ShouldBeEquivalentTo(''  mono testapp.exe -l 1,2'')", span="482-482", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.RenderUsageText_returns_properly_formatted_text()", file="TokenGroup.cs"];
m1_246 [label="lines[9].ShouldBeEquivalentTo(''Value:'')", span="483-483", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.RenderUsageText_returns_properly_formatted_text()", file="TokenGroup.cs"];
m1_247 [label="lines[10].ShouldBeEquivalentTo(''  mono testapp.exe value'')", span="484-484", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.RenderUsageText_returns_properly_formatted_text()", file="TokenGroup.cs"];
m1_236 [label="var lines = text.ToNotEmptyLines()", span="471-471", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.RenderUsageText_returns_properly_formatted_text()", file="TokenGroup.cs"];
m1_235 [label="var text = HelpText.RenderUsageText(result)", span="468-468", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.RenderUsageText_returns_properly_formatted_text()", file="TokenGroup.cs"];
m1_234 [label="ParserResult<Options_With_Usage_Attribute> result =\r\n                new NotParsed<Options_With_Usage_Attribute>(\r\n                    TypeInfo.Create(typeof(Options_With_Usage_Attribute)), Enumerable.Empty<Error>())", span="463-465", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.RenderUsageText_returns_properly_formatted_text()", file="TokenGroup.cs"];
m1_248 [label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.RenderUsageText_returns_properly_formatted_text()", span="460-460", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.RenderUsageText_returns_properly_formatted_text()", file="TokenGroup.cs"];
m1_140 [label="Entry CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", span="408-408", cluster="CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", file="TokenGroup.cs"];
m1_136 [label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="360-360", cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="TokenGroup.cs"];
m1_281 [label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Default_set_to_sequence_should_be_properly_printed()", span="541-541", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Default_set_to_sequence_should_be_properly_printed()", file="TokenGroup.cs"];
m1_287 [label="var text = helpText.ToString()", span="556-556", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Default_set_to_sequence_should_be_properly_printed()", file="TokenGroup.cs"];
m1_288 [label="var lines = text.ToNotEmptyLines().TrimStringArray()", span="557-557", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Default_set_to_sequence_should_be_properly_printed()", file="TokenGroup.cs"];
m1_286 [label="handlers.ResetCulture()", span="553-553", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Default_set_to_sequence_should_be_properly_printed()", file="TokenGroup.cs"];
m1_285 [label="var helpText = HelpText.AutoBuild(fakeResult)", span="552-552", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Default_set_to_sequence_should_be_properly_printed()", file="TokenGroup.cs"];
m1_289 [label="lines[4].Should().Be(''-z, --strseq    (Default: a b c)'')", span="559-559", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Default_set_to_sequence_should_be_properly_printed()", file="TokenGroup.cs"];
m1_290 [label="lines[5].Should().Be(''-y, --intseq    (Default: 1 2 3)'')", span="560-560", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Default_set_to_sequence_should_be_properly_printed()", file="TokenGroup.cs"];
m1_291 [label="lines[6].Should().Be(''-q, --dblseq    (Default: 1.1 2.2 3.3)'')", span="561-561", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Default_set_to_sequence_should_be_properly_printed()", file="TokenGroup.cs"];
m1_283 [label="var fakeResult =\r\n                new NotParsed<Options_With_Default_Set_To_Sequence>(\r\n                    typeof(Options_With_Default_Set_To_Sequence).ToTypeInfo(),\r\n                    new Error[] { new BadFormatTokenError(''badtoken'') })", span="545-548", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Default_set_to_sequence_should_be_properly_printed()", file="TokenGroup.cs"];
m1_282 [label="var handlers = new CultureInfo(''en-US'').MakeCultureHandlers()", span="544-544", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Default_set_to_sequence_should_be_properly_printed()", file="TokenGroup.cs"];
m1_284 [label="handlers.ChangeCulture()", span="551-551", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Default_set_to_sequence_should_be_properly_printed()", file="TokenGroup.cs"];
m1_292 [label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Default_set_to_sequence_should_be_properly_printed()", span="541-541", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Default_set_to_sequence_should_be_properly_printed()", file="TokenGroup.cs"];
m1_38 [label="Entry CommandLine.Text.HelpText.AddOptions<T>(CommandLine.ParserResult<T>)", span="402-402", cluster="CommandLine.Text.HelpText.AddOptions<T>(CommandLine.ParserResult<T>)", file="TokenGroup.cs"];
m1_179 [label="Entry CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, int)", span="273-273", cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, int)", file="TokenGroup.cs"];
m1_219 [label="Entry CommandLine.TypeInfo.Create(System.Type, System.Collections.Generic.IEnumerable<System.Type>)", span="34-34", cluster="CommandLine.TypeInfo.Create(System.Type, System.Collections.Generic.IEnumerable<System.Type>)", file="TokenGroup.cs"];
m1_36 [label="Entry CommandLine.TypeInfo.Create(System.Type)", span="29-29", cluster="CommandLine.TypeInfo.Create(System.Type)", file="TokenGroup.cs"];
m1_142 [label="Entry lambda expression", span="259-280", cluster="lambda expression", file="TokenGroup.cs"];
m1_143 [label="err.Tag", span="261-261", cluster="lambda expression", file="TokenGroup.cs"];
m1_145 [label="return ''ERR '' + ((BadFormatTokenError)err).Token;", span="264-264", cluster="lambda expression", file="TokenGroup.cs"];
m1_147 [label="return ''ERR '' + ((MissingValueOptionError)err).NameInfo.NameText;", span="266-266", cluster="lambda expression", file="TokenGroup.cs"];
m1_149 [label="return ''ERR '' + ((UnknownOptionError)err).Token;", span="268-268", cluster="lambda expression", file="TokenGroup.cs"];
m1_151 [label="return ''ERR '' + ((MissingRequiredOptionError)err).NameInfo.NameText;", span="270-270", cluster="lambda expression", file="TokenGroup.cs"];
m1_153 [label="return ''ERR '' + ((SequenceOutOfRangeError)err).NameInfo.NameText;", span="272-272", cluster="lambda expression", file="TokenGroup.cs"];
m1_157 [label="return ''ERR '' + ((BadVerbSelectedError)err).Token;", span="276-276", cluster="lambda expression", file="TokenGroup.cs"];
m1_144 [label="ErrorType.BadFormatTokenError", span="263-263", cluster="lambda expression", file="TokenGroup.cs"];
m1_146 [label="ErrorType.MissingValueOptionError", span="265-265", cluster="lambda expression", file="TokenGroup.cs"];
m1_148 [label="ErrorType.UnknownOptionError", span="267-267", cluster="lambda expression", file="TokenGroup.cs"];
m1_150 [label="ErrorType.MissingRequiredOptionError", span="269-269", cluster="lambda expression", file="TokenGroup.cs"];
m1_152 [label="ErrorType.SequenceOutOfRangeError", span="271-271", cluster="lambda expression", file="TokenGroup.cs"];
m1_154 [label="ErrorType.NoVerbSelectedError", span="273-273", cluster="lambda expression", file="TokenGroup.cs"];
m1_156 [label="ErrorType.BadVerbSelectedError", span="275-275", cluster="lambda expression", file="TokenGroup.cs"];
m1_158 [label="throw new InvalidOperationException();", span="278-278", cluster="lambda expression", file="TokenGroup.cs"];
m1_155 [label="return ''ERR no-verb-selected'';", span="274-274", cluster="lambda expression", file="TokenGroup.cs"];
m1_159 [label="Exit lambda expression", span="259-280", cluster="lambda expression", file="TokenGroup.cs"];
m1_66 [label="Entry CommandLine.Text.HelpText.HelpText(string)", span="60-60", cluster="CommandLine.Text.HelpText.HelpText(string)", file="TokenGroup.cs"];
m1_132 [label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="294-294", cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="TokenGroup.cs"];
m1_180 [label="Entry Unk.Should", span="", cluster="Unk.Should", file="TokenGroup.cs"];
m1_294 [label="Entry System.Globalization.CultureInfo.MakeCultureHandlers()", span="17-17", cluster="System.Globalization.CultureInfo.MakeCultureHandlers()", file="TokenGroup.cs"];
m1_297 [label="Entry Unk.Be", span="", cluster="Unk.Be", file="TokenGroup.cs"];
m1_4 [label="Entry CommandLine.Text.HelpText.ToString()", span="593-593", cluster="CommandLine.Text.HelpText.ToString()", file="TokenGroup.cs"];
m1_181 [label="Entry Unk.StartWithEquivalent", span="", cluster="Unk.StartWithEquivalent", file="TokenGroup.cs"];
m1_137 [label="Entry CommandLine.NoVerbSelectedError.NoVerbSelectedError()", span="446-446", cluster="CommandLine.NoVerbSelectedError.NoVerbSelectedError()", file="TokenGroup.cs"];
m1_17 [label="Entry CommandLine.Text.HeadingInfo.HeadingInfo(string, string)", span="27-27", cluster="CommandLine.Text.HeadingInfo.HeadingInfo(string, string)", file="TokenGroup.cs"];
m1_134 [label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="305-305", cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", file="TokenGroup.cs"];
m1_18 [label="Entry CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])", span="60-60", cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])", file="TokenGroup.cs"];
m1_20 [label="Entry CommandLine.Text.HelpText.AddPostOptionsLine(string)", span="346-346", cluster="CommandLine.Text.HelpText.AddPostOptionsLine(string)", file="TokenGroup.cs"];
m1_21 [label="Entry string.ToNotEmptyLines()", span="10-10", cluster="string.ToNotEmptyLines()", file="TokenGroup.cs"];
m1_194 [label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text_given_display_width_100()", span="370-370", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text_given_display_width_100()", file="TokenGroup.cs"];
m1_197 [label="var lines = helpText.ToString().ToNotEmptyLines().TrimStringArray()", span="384-384", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text_given_display_width_100()", file="TokenGroup.cs"];
m1_199 [label="lines[1].ShouldBeEquivalentTo(''Copyright (c) 2005 - 2015 Giacomo Stelluti Scala'')", span="388-388", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text_given_display_width_100()", file="TokenGroup.cs"];
m1_200 [label="lines[2].ShouldBeEquivalentTo(''-p, --patch      Use the interactive patch selection interface to chose which changes to commit.'')", span="394-394", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text_given_display_width_100()", file="TokenGroup.cs"];
m1_201 [label="lines[3].ShouldBeEquivalentTo(''--amend          Used to amend the tip of the current branch.'')", span="395-395", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text_given_display_width_100()", file="TokenGroup.cs"];
m1_202 [label="lines[4].ShouldBeEquivalentTo(''-m, --message    Use the given message as the commit message.'')", span="396-396", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text_given_display_width_100()", file="TokenGroup.cs"];
m1_203 [label="lines[5].ShouldBeEquivalentTo(''--help           Display this help screen.'')", span="397-397", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text_given_display_width_100()", file="TokenGroup.cs"];
m1_196 [label="var helpText = HelpText.AutoBuild(fakeResult, maxDisplayWidth: 100)", span="381-381", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text_given_display_width_100()", file="TokenGroup.cs"];
m1_198 [label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="387-387", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text_given_display_width_100()", file="TokenGroup.cs"];
m1_195 [label="var fakeResult = new NotParsed<object>(\r\n                TypeInfo.Create(typeof(NullInstance)),\r\n                new Error[]\r\n                    {\r\n                        new HelpVerbRequestedError(''commit'', typeof(Commit_Verb), true)\r\n                    })", span="373-378", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text_given_display_width_100()", file="TokenGroup.cs"];
m1_204 [label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text_given_display_width_100()", span="370-370", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text_given_display_width_100()", file="TokenGroup.cs"];
m1_250 [label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", span="488-488", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_253 [label="var text = helpText.ToString()", span="502-502", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_257 [label="lines[2].ShouldBeEquivalentTo(''ERROR(S):'')", span="512-512", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_258 [label="lines[3].ShouldBeEquivalentTo(''Token 'badtoken' is not recognized.'')", span="513-513", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_259 [label="lines[4].ShouldBeEquivalentTo(''USAGE:'')", span="514-514", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_260 [label="lines[5].ShouldBeEquivalentTo(''Normal scenario:'')", span="515-515", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_261 [label="lines[6].ShouldBeEquivalentTo(''mono testapp.exe --input file.bin --output out.bin'')", span="516-516", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_262 [label="lines[7].ShouldBeEquivalentTo(''Logging warnings:'')", span="517-517", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_263 [label="lines[8].ShouldBeEquivalentTo(''mono testapp.exe -w --input file.bin'')", span="518-518", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_264 [label="lines[9].ShouldBeEquivalentTo(''Logging errors:'')", span="519-519", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_265 [label="lines[10].ShouldBeEquivalentTo(''mono testapp.exe -e --input file.bin'')", span="520-520", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_266 [label="lines[11].ShouldBeEquivalentTo(''mono testapp.exe --errs --input=file.bin'')", span="521-521", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_267 [label="lines[12].ShouldBeEquivalentTo(''List:'')", span="522-522", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_268 [label="lines[13].ShouldBeEquivalentTo(''mono testapp.exe -l 1,2'')", span="523-523", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_269 [label="lines[14].ShouldBeEquivalentTo(''Value:'')", span="524-524", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_270 [label="lines[15].ShouldBeEquivalentTo(''mono testapp.exe value'')", span="525-525", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_271 [label="lines[16].ShouldBeEquivalentTo(''-i, --input     Set input file.'')", span="526-526", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_272 [label="lines[17].ShouldBeEquivalentTo(''-i, --output    Set output file.'')", span="527-527", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_273 [label="lines[18].ShouldBeEquivalentTo(''--verbose       Set verbosity level.'')", span="528-528", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_274 [label="lines[19].ShouldBeEquivalentTo(''-w, --warns     Log warnings.'')", span="529-529", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_275 [label="lines[20].ShouldBeEquivalentTo(''-e, --errs      Log errors.'')", span="530-530", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_276 [label="lines[21].ShouldBeEquivalentTo(''-l              List.'')", span="531-531", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_277 [label="lines[22].ShouldBeEquivalentTo(''--help          Display this help screen.'')", span="532-532", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_278 [label="lines[23].ShouldBeEquivalentTo(''--version       Display version information.'')", span="533-533", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_279 [label="lines[24].ShouldBeEquivalentTo(''value pos. 0    Value.'')", span="534-534", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_254 [label="var lines = text.ToNotEmptyLines().TrimStringArray()", span="503-503", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_252 [label="var helpText = HelpText.AutoBuild(fakeResult)", span="499-499", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_256 [label="lines[1].Should().StartWithEquivalent(''Copyright (c)'')", span="506-506", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_255 [label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="505-505", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_251 [label="var fakeResult = new NotParsed<Options_With_Usage_Attribute>(\r\n                TypeInfo.Create(typeof(Options_With_Usage_Attribute)),\r\n                new Error[]\r\n                    {\r\n                        new BadFormatTokenError(''badtoken'')\r\n                    })", span="491-496", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_280 [label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", span="488-488", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_133 [label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20", cluster="CommandLine.NameInfo.NameInfo(string, string)", file="TokenGroup.cs"];
m1_6 [label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", span="23-23", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", file="TokenGroup.cs"];
m1_7 [label="var sut =\r\n                new HelpText(new HeadingInfo(''Unit-tests'', ''2.0''), new CopyrightInfo(true, ''Author'', 2005, 2013))\r\n                    .AddPreOptionsLine(''pre-options line 1'')\r\n                    .AddPreOptionsLine(''pre-options line 2'')\r\n                    .AddPostOptionsLine(''post-options line 1'')\r\n                    .AddPostOptionsLine(''post-options line 2'')", span="27-32", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", color=green, community=0, file="TokenGroup.cs"];
m1_8 [label="var lines = sut.ToString().ToNotEmptyLines()", span="35-35", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", color=green, community=0, file="TokenGroup.cs"];
m1_9 [label="lines[0].ShouldBeEquivalentTo(''Unit-tests 2.0'')", span="37-37", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", color=green, community=0, file="TokenGroup.cs"];
m1_10 [label="lines[1].ShouldBeEquivalentTo(''Copyright (C) 2005 - 2013 Author'')", span="38-38", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", color=green, community=0, file="TokenGroup.cs"];
m1_11 [label="lines[2].ShouldBeEquivalentTo(''pre-options line 1'')", span="39-39", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", color=green, community=0, file="TokenGroup.cs"];
m1_12 [label="lines[3].ShouldBeEquivalentTo(''pre-options line 2'')", span="40-40", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", color=green, community=0, file="TokenGroup.cs"];
m1_13 [label="lines[4].ShouldBeEquivalentTo(''post-options line 1'')", span="41-41", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", color=green, community=0, file="TokenGroup.cs"];
m1_14 [label="lines[5].ShouldBeEquivalentTo(''post-options line 2'')", span="42-42", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", color=green, community=0, file="TokenGroup.cs"];
m1_15 [label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", span="23-23", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", file="TokenGroup.cs"];
m1_117 [label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", span="242-242", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_123 [label="lines[0].ShouldBeEquivalentTo(''  ERR badtoken'')", span="290-290", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_124 [label="lines[1].ShouldBeEquivalentTo(''  ERR x, switch'')", span="291-291", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_125 [label="lines[2].ShouldBeEquivalentTo(''  ERR unknown'')", span="292-292", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_126 [label="lines[3].ShouldBeEquivalentTo(''  ERR missing'')", span="293-293", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_127 [label="lines[4].ShouldBeEquivalentTo(''  ERR s, sequence'')", span="294-294", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_128 [label="lines[5].ShouldBeEquivalentTo(''  ERR no-verb-selected'')", span="295-295", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_129 [label="lines[6].ShouldBeEquivalentTo(''  ERR badverb'')", span="296-296", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_122 [label="var lines = errorsText.ToNotEmptyLines()", span="288-288", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_121 [label="var errorsText = HelpText.RenderParsingErrorsText(fakeResult, fakeRenderer, fakeMutExclRenderer, 2)", span="285-285", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_118 [label="var fakeResult = new NotParsed<object>(\r\n                TypeInfo.Create(typeof(NullInstance)),\r\n                new Error[]\r\n                    {\r\n                        new BadFormatTokenError(''badtoken''),\r\n                        new MissingValueOptionError(new NameInfo(''x'', ''switch'')),\r\n                        new UnknownOptionError(''unknown''),\r\n                        new MissingRequiredOptionError(new NameInfo('''', ''missing'')),\r\n                        new SequenceOutOfRangeError(new NameInfo(''s'', ''sequence'')),\r\n                        new NoVerbSelectedError(),\r\n                        new BadVerbSelectedError(''badverb''),\r\n                        new HelpRequestedError(), // should be ignored\r\n                        new HelpVerbRequestedError(null, null, false) // should be ignored \r\n                    })", span="245-258", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_119 [label="Func<Error, string> fakeRenderer = err =>\r\n                {\r\n                    switch (err.Tag)\r\n                    {\r\n                        case ErrorType.BadFormatTokenError:\r\n                            return ''ERR '' + ((BadFormatTokenError)err).Token;\r\n                        case ErrorType.MissingValueOptionError:\r\n                            return ''ERR '' + ((MissingValueOptionError)err).NameInfo.NameText;\r\n                        case ErrorType.UnknownOptionError:\r\n                            return ''ERR '' + ((UnknownOptionError)err).Token;\r\n                        case ErrorType.MissingRequiredOptionError:\r\n                            return ''ERR '' + ((MissingRequiredOptionError)err).NameInfo.NameText;\r\n                        case ErrorType.SequenceOutOfRangeError:\r\n                            return ''ERR '' + ((SequenceOutOfRangeError)err).NameInfo.NameText;\r\n                        case ErrorType.NoVerbSelectedError:\r\n                            return ''ERR no-verb-selected'';\r\n                        case ErrorType.BadVerbSelectedError:\r\n                            return ''ERR '' + ((BadVerbSelectedError)err).Token;\r\n                        default:\r\n                            throw new InvalidOperationException();\r\n                    }\r\n                }", span="259-280", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_120 [label="Func<IEnumerable<MutuallyExclusiveSetError>, string> fakeMutExclRenderer =\r\n                _ => string.Empty", span="281-282", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_130 [label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", span="242-242", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_182 [label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", span="337-337", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_185 [label="var lines = helpText.ToString().ToNotEmptyLines().TrimStringArray()", span="351-351", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_188 [label="lines[2].ShouldBeEquivalentTo(''-p, --patch      Use the interactive patch selection interface to chose which'')", span="361-361", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_189 [label="lines[3].ShouldBeEquivalentTo(''changes to commit.'')", span="362-362", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_190 [label="lines[4].ShouldBeEquivalentTo(''--amend          Used to amend the tip of the current branch.'')", span="363-363", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_191 [label="lines[5].ShouldBeEquivalentTo(''-m, --message    Use the given message as the commit message.'')", span="364-364", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_192 [label="lines[6].ShouldBeEquivalentTo(''--help           Display this help screen.'')", span="365-365", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_184 [label="var helpText = HelpText.AutoBuild(fakeResult)", span="348-348", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_186 [label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="354-354", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_187 [label="lines[1].Should().StartWithEquivalent(''Copyright (c)'')", span="355-355", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_183 [label="var fakeResult = new NotParsed<object>(\r\n                TypeInfo.Create(typeof(NullInstance)),\r\n                new Error[]\r\n                    {\r\n                        new HelpVerbRequestedError(''commit'', typeof(Commit_Verb), true)\r\n                    })", span="340-345", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_193 [label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", span="337-337", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", file="TokenGroup.cs"];
m1_296 [label="Entry System.Action.Invoke()", span="0-0", cluster="System.Action.Invoke()", file="TokenGroup.cs"];
m1_139 [label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="393-393", cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="TokenGroup.cs"];
m1_78 [label="Entry string.Split(string[], System.StringSplitOptions)", span="0-0", cluster="string.Split(string[], System.StringSplitOptions)", file="TokenGroup.cs"];
m1_5 [label="Entry Unk.ShouldBeEquivalentTo", span="", cluster="Unk.ShouldBeEquivalentTo", file="TokenGroup.cs"];
m2_66 [label="Entry Unk.SingleOrDefault", span="", cluster="Unk.SingleOrDefault", file="TokenPartitioner.cs"];
m2_28 [label="Entry CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", span="95-95", cluster="CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", file="TokenPartitioner.cs"];
m2_77 [label="return new NotParsed<object>(typeof(NullInstance), types, errors);", span="97-97", cluster="CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", file="TokenPartitioner.cs"];
m2_78 [label="Exit CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", span="95-95", cluster="CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", file="TokenPartitioner.cs"];
m2_46 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="35-35", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitioner.cs"];
m2_26 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", span="31-31", cluster="System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", file="TokenPartitioner.cs"];
m2_10 [label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", span="46-46", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="TokenPartitioner.cs"];
m2_45 [label="Entry Unk.>", span="", cluster="Unk.>", file="TokenPartitioner.cs"];
m2_49 [label="Entry Unk.MakeNotParsed", span="", cluster="Unk.MakeNotParsed", file="TokenPartitioner.cs"];
m2_18 [label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16", cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TokenPartitioner.cs"];
m2_31 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)", file="TokenPartitioner.cs"];
m2_36 [label="Entry CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="62-62", cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitioner.cs"];
m2_42 [label="return verbs.Any(a => nameComparer.Equals(a.Item1.Name, arguments.First()))\r\n                ? InstanceBuilder.Build(\r\n                    Maybe.Just<Func<object>>(\r\n                        () =>\r\n                            verbs.Single(v => nameComparer.Equals(v.Item1.Name, arguments.First())).Item2.AutoDefault()),\r\n                    tokenizer,\r\n                    arguments.Skip(1),\r\n                    nameComparer,\r\n                    parsingCulture)\r\n                : MakeNotParsed(verbs.Select(v => v.Item2), new BadVerbSelectedError(arguments.First()));", span="69-78", cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitioner.cs"];
m2_43 [label="Exit CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="62-62", cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitioner.cs"];
m2_48 [label="Entry CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", span="357-357", cluster="CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", file="TokenPartitioner.cs"];
m2_68 [label="Entry CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", span="383-383", cluster="CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", file="TokenPartitioner.cs"];
m2_14 [label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11", cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TokenPartitioner.cs"];
m2_35 [label="Entry CommandLine.VersionRequestedError.VersionRequestedError()", span="432-432", cluster="CommandLine.VersionRequestedError.VersionRequestedError()", file="TokenPartitioner.cs"];
m2_40 [label="Entry System.StringComparer.Equals(string, string)", span="0-0", cluster="System.StringComparer.Equals(string, string)", file="TokenPartitioner.cs"];
m2_56 [label="Entry Unk.Single", span="", cluster="Unk.Single", file="TokenPartitioner.cs"];
m2_67 [label="Entry Unk.ToMaybe", span="", cluster="Unk.ToMaybe", file="TokenPartitioner.cs"];
m2_41 [label="Entry string.Concat(string, string)", span="0-0", cluster="string.Concat(string, string)", file="TokenPartitioner.cs"];
m2_73 [label="Entry lambda expression", span="90-90", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_4 [label="Entry lambda expression", span="21-26", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_5 [label="var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer))", span="23-23", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_12 [label="NameLookup.Contains(name, optionSpecs, nameComparer)", span="23-23", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_6 [label="var explodedTokens = Tokenizer.ExplodeOptionList(tokens, name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer))", span="24-24", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_16 [label="NameLookup.HavingSeparator(name, optionSpecs, nameComparer)", span="24-24", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_50 [label="Entry lambda expression", span="69-69", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_53 [label="Entry lambda expression", span="72-73", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_61 [label="Entry lambda expression", span="78-78", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_38 [label="nameComparer.Equals(command, firstArg) ||\r\n                    nameComparer.Equals(string.Concat(''--'', command), firstArg)", span="48-49", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_8 [label="Exit lambda expression", span="21-26", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_11 [label="Entry lambda expression", span="23-23", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_13 [label="Exit lambda expression", span="23-23", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_7 [label="return explodedTokens;", span="25-25", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_15 [label="Entry lambda expression", span="24-24", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_17 [label="Exit lambda expression", span="24-24", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_51 [label="nameComparer.Equals(a.Item1.Name, arguments.First())", span="69-69", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_54 [label="verbs.Single(v => nameComparer.Equals(v.Item1.Name, arguments.First())).Item2.AutoDefault()", span="73-73", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_59 [label="nameComparer.Equals(v.Item1.Name, arguments.First())", span="73-73", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_52 [label="Exit lambda expression", span="69-69", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_55 [label="Exit lambda expression", span="72-73", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_63 [label="Exit lambda expression", span="78-78", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_62 [label="v.Item2", span="78-78", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_37 [label="Entry lambda expression", span="47-49", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_39 [label="Exit lambda expression", span="47-49", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_58 [label="Entry lambda expression", span="73-73", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_60 [label="Exit lambda expression", span="73-73", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_71 [label="nameComparer.Equals(v.Item1.Name, verb)", span="87-87", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_70 [label="Entry lambda expression", span="87-87", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_72 [label="Exit lambda expression", span="87-87", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_74 [label="new HelpVerbRequestedError(v.Item1.Name, v.Item2, true)", span="90-90", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_75 [label="Exit lambda expression", span="90-90", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_29 [label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="TokenPartitioner.cs"];
m2_32 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="TokenPartitioner.cs"];
m2_79 [label="Entry CommandLine.NotParsed<T>.NotParsed(System.Type, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="184-184", cluster="CommandLine.NotParsed<T>.NotParsed(System.Type, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="TokenPartitioner.cs"];
m2_34 [label="Entry CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", span="81-81", cluster="CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", file="TokenPartitioner.cs"];
m2_64 [label="return verb.Length > 0\r\n                ? verbs.SingleOrDefault(v => nameComparer.Equals(v.Item1.Name, verb))\r\n                        .ToMaybe()\r\n                        .Return(\r\n                            v => new HelpVerbRequestedError(v.Item1.Name, v.Item2, true),\r\n                            new HelpVerbRequestedError(null, null, false))\r\n                : new HelpVerbRequestedError(null, null, false);", span="86-92", cluster="CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", file="TokenPartitioner.cs"];
m2_65 [label="Exit CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", span="81-81", cluster="CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", file="TokenPartitioner.cs"];
m2_47 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="TokenPartitioner.cs"];
m2_27 [label="Entry CommandLine.NoVerbSelectedError.NoVerbSelectedError()", span="421-421", cluster="CommandLine.NoVerbSelectedError.NoVerbSelectedError()", file="TokenPartitioner.cs"];
m2_0 [label="Entry CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="14-14", cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitioner.cs"];
m2_1 [label="return Choose(\r\n                (args, optionSpecs) =>\r\n                    {\r\n                        var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer));\r\n                        var explodedTokens = Tokenizer.ExplodeOptionList(tokens, name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer));\r\n                        return explodedTokens;\r\n                    },\r\n                types,\r\n                arguments,\r\n                nameComparer,\r\n                parsingCulture);", span="20-30", cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, file="TokenPartitioner.cs"];
m2_2 [label="Exit CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="14-14", cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitioner.cs"];
m2_3 [label="Entry CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33", cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitioner.cs"];
m2_19 [label="arguments.Empty()", span="40-40", cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitioner.cs"];
m2_20 [label="return MakeNotParsed(types, new NoVerbSelectedError());", span="42-42", cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitioner.cs"];
m2_21 [label="var firstArg = arguments.First()", span="45-45", cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitioner.cs"];
m2_22 [label="Func<string, bool> preprocCompare = command =>\r\n                    nameComparer.Equals(command, firstArg) ||\r\n                    nameComparer.Equals(string.Concat(''--'', command), firstArg)", span="47-49", cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitioner.cs"];
m2_23 [label="var verbs = Verb.SelectFromTypes(types)", span="51-51", cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitioner.cs"];
m2_24 [label="return preprocCompare(''help'')\r\n                ? MakeNotParsed(types,\r\n                    MakeHelpVerbRequestedError(verbs,\r\n                        arguments.Skip(1).SingleOrDefault() ?? string.Empty, nameComparer))\r\n                : preprocCompare(''version'')\r\n                    ? MakeNotParsed(types, new VersionRequestedError())\r\n                    : MatchVerb(tokenizer, verbs, arguments, nameComparer, parsingCulture);", span="53-59", cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitioner.cs"];
m2_25 [label="Exit CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33", cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitioner.cs"];
m2_9 [label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="13-13", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="TokenPartitioner.cs"];
m2_69 [label="Entry Unk.Return", span="", cluster="Unk.Return", file="TokenPartitioner.cs"];
m2_57 [label="Entry Unk.AutoDefault", span="", cluster="Unk.AutoDefault", file="TokenPartitioner.cs"];
m2_30 [label="Entry CommandLine.Core.Verb.SelectFromTypes(System.Collections.Generic.IEnumerable<System.Type>)", span="40-40", cluster="CommandLine.Core.Verb.SelectFromTypes(System.Collections.Generic.IEnumerable<System.Type>)", file="TokenPartitioner.cs"];
m2_33 [label="Entry System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", file="TokenPartitioner.cs"];
m2_76 [label="Entry HelpVerbRequestedError.cstr", span="", cluster="HelpVerbRequestedError.cstr", file="TokenPartitioner.cs"];
m2_80 [label="System.StringComparer", span="", file="TokenPartitioner.cs"];
m2_81 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span="", file="TokenPartitioner.cs"];
m2_82 [label="System.StringComparer", span="", file="TokenPartitioner.cs"];
m2_83 [label=firstArg, span="", file="TokenPartitioner.cs"];
m2_84 [label="System.Collections.Generic.IEnumerable<string>", span="", file="TokenPartitioner.cs"];
m2_85 [label="System.StringComparer", span="", file="TokenPartitioner.cs"];
m2_86 [label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>", span="", file="TokenPartitioner.cs"];
m2_87 [label=string, span="", file="TokenPartitioner.cs"];
m2_88 [label="System.StringComparer", span="", file="TokenPartitioner.cs"];
n0 -> n1  [key=0, style=solid];
n1 -> n0  [key=0, style=bold, color=blue];
n2 -> n3  [key=0, style=solid];
n3 -> n4  [key=0, style=solid];
n3 -> n5  [key=2, style=dotted];
n4 -> n2  [key=0, style=bold, color=blue];
n6 -> n7  [key=0, style=solid];
n7 -> n8  [key=0, style=solid];
n7 -> n5  [key=2, style=dotted];
n8 -> n6  [key=0, style=bold, color=blue];
n9 -> n10  [key=0, style=solid];
n10 -> n11  [key=0, style=solid];
n10 -> n5  [key=2, style=dotted];
n11 -> n9  [key=0, style=bold, color=blue];
n12 -> n13  [key=0, style=solid];
n13 -> n14  [key=0, style=solid];
n13 -> n5  [key=2, style=dotted];
n14 -> n12  [key=0, style=bold, color=blue];
n15 -> n16  [key=0, style=solid];
n16 -> n17  [key=0, style=solid];
n16 -> n5  [key=2, style=dotted];
n17 -> n15  [key=0, style=bold, color=blue];
n18 -> n19  [key=0, style=solid];
n19 -> n20  [key=0, style=solid];
n19 -> n5  [key=2, style=dotted];
n20 -> n18  [key=0, style=bold, color=blue];
n21 -> n22  [key=0, style=solid];
n22 -> n23  [key=0, style=solid];
n22 -> n5  [key=2, style=dotted];
n23 -> n21  [key=0, style=bold, color=blue];
n24 -> n25  [key=0, style=solid];
n25 -> n26  [key=0, style=solid];
n25 -> n5  [key=2, style=dotted];
n26 -> n24  [key=0, style=bold, color=blue];
n27 -> n28  [key=0, style=solid];
n28 -> n29  [key=0, style=solid];
n28 -> n5  [key=2, style=dotted];
n29 -> n27  [key=0, style=bold, color=blue];
n30 -> n31  [key=0, style=solid];
n31 -> n32  [key=0, style=solid];
n31 -> n5  [key=2, style=dotted];
n32 -> n30  [key=0, style=bold, color=blue];
n33 -> n34  [key=0, style=solid];
n34 -> n35  [key=0, style=solid];
n34 -> n5  [key=2, style=dotted];
n35 -> n33  [key=0, style=bold, color=blue];
n36 -> n37  [key=0, style=solid];
n37 -> n38  [key=0, style=solid];
n37 -> n5  [key=2, style=dotted];
n38 -> n36  [key=0, style=bold, color=blue];
n39 -> n40  [key=0, style=solid];
n40 -> n39  [key=0, style=bold, color=blue];
n41 -> n42  [key=0, style=solid];
n42 -> n43  [key=0, style=solid];
n42 -> n44  [key=2, style=dotted];
n42 -> n45  [key=2, style=dotted];
n42 -> n46  [key=2, style=dotted];
n43 -> n41  [key=0, style=bold, color=blue];
n47 -> n48  [key=0, style=solid];
n48 -> n49  [key=0, style=solid];
n48 -> n44  [key=2, style=dotted];
n48 -> n45  [key=2, style=dotted];
n48 -> n46  [key=2, style=dotted];
n49 -> n47  [key=0, style=bold, color=blue];
n50 -> n51  [key=0, style=solid];
n51 -> n52  [key=0, style=solid];
n51 -> n53  [key=2, style=dotted];
n51 -> n45  [key=2, style=dotted];
n51 -> n46  [key=2, style=dotted];
n52 -> n50  [key=0, style=bold, color=blue];
n54 -> n55  [key=0, style=solid];
n55 -> n56  [key=0, style=solid];
n55 -> n53  [key=2, style=dotted];
n55 -> n45  [key=2, style=dotted];
n55 -> n46  [key=2, style=dotted];
n56 -> n54  [key=0, style=bold, color=blue];
n57 -> n58  [key=0, style=solid];
n58 -> n59  [key=0, style=solid];
n58 -> n60  [key=2, style=dotted];
n58 -> n45  [key=2, style=dotted];
n58 -> n46  [key=2, style=dotted];
n59 -> n57  [key=0, style=bold, color=blue];
n61 -> n62  [key=0, style=solid];
n62 -> n63  [key=0, style=solid];
n62 -> n60  [key=2, style=dotted];
n62 -> n45  [key=2, style=dotted];
n62 -> n46  [key=2, style=dotted];
n63 -> n61  [key=0, style=bold, color=blue];
n64 -> n65  [key=0, style=solid];
n65 -> n66  [key=0, style=solid];
n65 -> n67  [key=2, style=dotted];
n65 -> n45  [key=2, style=dotted];
n65 -> n46  [key=2, style=dotted];
n66 -> n64  [key=0, style=bold, color=blue];
n68 -> n69  [key=0, style=solid];
n69 -> n70  [key=0, style=solid];
n69 -> n67  [key=2, style=dotted];
n69 -> n45  [key=2, style=dotted];
n69 -> n46  [key=2, style=dotted];
n70 -> n68  [key=0, style=bold, color=blue];
n71 -> n72  [key=0, style=solid];
n72 -> n73  [key=0, style=solid];
n72 -> n74  [key=2, style=dotted];
n72 -> n45  [key=2, style=dotted];
n72 -> n46  [key=2, style=dotted];
n73 -> n71  [key=0, style=bold, color=blue];
n75 -> n76  [key=0, style=solid];
n76 -> n77  [key=0, style=solid];
n76 -> n74  [key=2, style=dotted];
n76 -> n45  [key=2, style=dotted];
n76 -> n46  [key=2, style=dotted];
n77 -> n75  [key=0, style=bold, color=blue];
n78 -> n79  [key=0, style=solid];
n79 -> n80  [key=0, style=solid];
n79 -> n81  [key=2, style=dotted];
n79 -> n45  [key=2, style=dotted];
n79 -> n46  [key=2, style=dotted];
n80 -> n78  [key=0, style=bold, color=blue];
n82 -> n83  [key=0, style=solid];
n83 -> n84  [key=0, style=solid];
n83 -> n81  [key=2, style=dotted];
n83 -> n45  [key=2, style=dotted];
n83 -> n46  [key=2, style=dotted];
n84 -> n82  [key=0, style=bold, color=blue];
d38 -> d39  [key=0, style=solid, color=green];
d38 -> d41  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
d38 -> d42  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
d5 -> d38  [key=0, style=solid, color=green];
d39 -> d5  [key=0, style=bold, color=blue];
d41 -> d42  [key=0, style=solid];
d41 -> d17  [key=2, style=dotted];
d41 -> d20  [key=2, style=dotted];
d41 -> d47  [key=2, style=dotted];
d41 -> d50  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d41 -> d54  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d41 -> d61  [key=1, style=dashed, color=darkseagreen4, label=setsWithTrue];
d42 -> d43  [key=0, style=solid];
d42 -> d17  [key=2, style=dotted];
d42 -> d48  [key=2, style=dotted];
d42 -> d47  [key=2, style=dotted];
d42 -> d57  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d42 -> d60  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d42 -> d65  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d42 -> d44  [key=1, style=dashed, color=darkseagreen4, label=requiredButEmpty];
d45 -> d46  [key=0, style=solid, color=green];
d45 -> d21  [key=2, style=dotted, color=green];
d43 -> d45  [key=0, style=solid, color=green];
d43 -> d44  [key=0, style=solid];
d43 -> d49  [key=2, style=dotted];
d46 -> d40  [key=0, style=bold, color=blue];
d75 -> d76  [key=0, style=solid, color=green];
d75 -> d78  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
d6 -> d75  [key=0, style=solid, color=green];
d76 -> d6  [key=0, style=bold, color=blue];
d78 -> d79  [key=0, style=solid, color=green];
d78 -> d17  [key=2, style=dotted, color=green];
d78 -> d83  [key=1, style=dashed, color=green, label="lambda expression"];
d78 -> d80  [key=1, style=dashed, color=green, label=options];
d77 -> d78  [key=0, style=solid, color=green];
d79 -> d80  [key=0, style=solid];
d79 -> d81  [key=0, style=solid];
d79 -> d49  [key=2, style=dotted];
d83 -> d84  [key=0, style=solid, color=green];
d80 -> d82  [key=0, style=solid];
d80 -> d20  [key=2, style=dotted];
d80 -> d87  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d84 -> d85  [key=0, style=solid, color=green];
d84 -> d53  [key=2, style=dotted, color=green];
d84 -> d86  [key=2, style=dotted, color=green];
d85 -> d83  [key=0, style=bold, color=blue];
d1 -> d5  [key=2, style=dotted];
d1 -> d6  [key=2, style=dotted];
d1 -> d2  [key=0, style=solid];
d1 -> d3  [key=2, style=dotted];
d1 -> d4  [key=2, style=dotted];
d1 -> d7  [key=2, style=dotted];
d40 -> d41  [key=0, style=solid];
d40 -> d42  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
d50 -> d51  [key=0, style=solid];
d54 -> d55  [key=0, style=solid];
d61 -> d62  [key=0, style=solid];
d61 -> d63  [key=2, style=dotted];
d61 -> d64  [key=2, style=dotted];
d57 -> d58  [key=0, style=solid];
d60 -> d61  [key=0, style=solid];
d65 -> d66  [key=0, style=solid];
d44 -> d46  [key=0, style=solid];
d44 -> d20  [key=2, style=dotted];
d44 -> d70  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d15 -> d21  [key=2, style=dotted];
d15 -> d16  [key=0, style=solid];
d81 -> d21  [key=2, style=dotted];
d81 -> d82  [key=0, style=solid];
d82 -> d77  [key=0, style=bold, color=blue];
d11 -> d17  [key=2, style=dotted];
d11 -> d12  [key=0, style=solid];
d11 -> d22  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d11 -> d26  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d11 -> d14  [key=1, style=dashed, color=darkseagreen4, label=options];
d95 -> d17  [key=2, style=dotted];
d95 -> d95  [key=1, style=dashed, color=darkseagreen4, label=t];
d95 -> d96  [key=0, style=solid];
d95 -> d100  [key=2, style=dotted];
d95 -> d101  [key=2, style=dotted];
d95 -> d104  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d87 -> d88  [key=0, style=solid];
d51 -> d53  [key=2, style=dotted];
d51 -> d52  [key=0, style=solid];
d51 -> d25  [key=2, style=dotted];
d94 -> d53  [key=2, style=dotted];
d94 -> d95  [key=0, style=solid];
d94 -> d94  [key=1, style=dashed, color=darkseagreen4, label=sp];
d94 -> d25  [key=2, style=dotted];
d0 -> d1  [key=0, style=solid];
d2 -> d0  [key=0, style=bold, color=blue];
d4 -> d8  [key=0, style=solid];
d7 -> d95  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
d7 -> d91  [key=0, style=solid];
d14 -> d20  [key=2, style=dotted];
d14 -> d16  [key=0, style=solid];
d14 -> d33  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d52 -> d50  [key=0, style=bold, color=blue];
d56 -> d54  [key=0, style=bold, color=blue];
d55 -> d56  [key=0, style=solid];
d108 -> d61  [key=1, style=dashed, color=darkseagreen4, label=setsWithTrue];
d62 -> d60  [key=0, style=bold, color=blue];
d59 -> d57  [key=0, style=bold, color=blue];
d58 -> d59  [key=0, style=solid];
d58 -> d25  [key=2, style=dotted];
d67 -> d65  [key=0, style=bold, color=blue];
d66 -> d67  [key=0, style=solid];
d66 -> d68  [key=2, style=dotted];
d66 -> d69  [key=2, style=dotted];
d70 -> d71  [key=0, style=solid];
d13 -> d15  [key=0, style=solid];
d13 -> d14  [key=0, style=solid];
d13 -> d19  [key=2, style=dotted];
d16 -> d10  [key=0, style=bold, color=blue];
d8 -> d11  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
d8 -> d9  [key=0, style=solid];
d10 -> d11  [key=0, style=solid];
d12 -> d13  [key=0, style=solid];
d12 -> d18  [key=2, style=dotted];
d12 -> d30  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d22 -> d23  [key=0, style=solid];
d26 -> d27  [key=0, style=solid];
d109 -> d95  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
d96 -> d96  [key=1, style=dashed, color=darkseagreen4, label=x];
d96 -> d97  [key=0, style=solid];
d96 -> d19  [key=2, style=dotted];
d104 -> d105  [key=0, style=solid];
d89 -> d87  [key=0, style=bold, color=blue];
d88 -> d89  [key=0, style=solid];
d88 -> d90  [key=2, style=dotted];
d88 -> d74  [key=2, style=dotted];
d91 -> d94  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
d91 -> d92  [key=0, style=solid];
d93 -> d94  [key=0, style=solid];
d9 -> d4  [key=0, style=bold, color=blue];
d92 -> d7  [key=0, style=bold, color=blue];
d33 -> d34  [key=0, style=solid];
d72 -> d70  [key=0, style=bold, color=blue];
d71 -> d72  [key=0, style=solid];
d71 -> d73  [key=2, style=dotted];
d71 -> d74  [key=2, style=dotted];
d30 -> d31  [key=0, style=solid];
d24 -> d22  [key=0, style=bold, color=blue];
d23 -> d25  [key=2, style=dotted];
d23 -> d24  [key=0, style=solid];
d28 -> d26  [key=0, style=bold, color=blue];
d27 -> d28  [key=0, style=solid];
d27 -> d29  [key=2, style=dotted];
d97 -> d97  [key=1, style=dashed, color=darkseagreen4, label=y];
d97 -> d98  [key=0, style=solid];
d97 -> d102  [key=2, style=dotted];
d97 -> d103  [key=2, style=dotted];
d106 -> d104  [key=0, style=bold, color=blue];
d105 -> d106  [key=0, style=solid];
d105 -> d107  [key=2, style=dotted];
d99 -> d93  [key=0, style=bold, color=blue];
d35 -> d33  [key=0, style=bold, color=blue];
d34 -> d35  [key=0, style=solid];
d34 -> d36  [key=2, style=dotted];
d34 -> d37  [key=2, style=dotted];
d32 -> d30  [key=0, style=bold, color=blue];
d31 -> d32  [key=0, style=solid];
d98 -> d99  [key=0, style=solid];
m1_51 -> m1_52  [key=0, style=solid];
m1_52 -> m1_3  [key=2, style=dotted];
m1_52 -> m1_19  [key=2, style=dotted];
m1_52 -> m1_20  [key=2, style=dotted];
m1_52 -> m1_53  [key=0, style=solid];
m1_52 -> m1_35  [key=2, style=dotted];
m1_52 -> m1_36  [key=2, style=dotted];
m1_52 -> m1_37  [key=2, style=dotted];
m1_52 -> m1_38  [key=2, style=dotted];
m1_53 -> m1_4  [key=2, style=dotted];
m1_53 -> m1_21  [key=2, style=dotted];
m1_53 -> m1_54  [key=0, style=solid];
m1_53 -> m1_39  [key=2, style=dotted];
m1_53 -> m1_55  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_53 -> m1_56  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_53 -> m1_57  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_53 -> m1_58  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_53 -> m1_59  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_54 -> m1_5  [key=2, style=dotted];
m1_54 -> m1_55  [key=0, style=solid];
m1_55 -> m1_5  [key=2, style=dotted];
m1_55 -> m1_56  [key=0, style=solid];
m1_56 -> m1_5  [key=2, style=dotted];
m1_56 -> m1_57  [key=0, style=solid];
m1_57 -> m1_5  [key=2, style=dotted];
m1_57 -> m1_58  [key=0, style=solid];
m1_58 -> m1_5  [key=2, style=dotted];
m1_58 -> m1_59  [key=0, style=solid];
m1_59 -> m1_5  [key=2, style=dotted];
m1_59 -> m1_60  [key=0, style=solid];
m1_60 -> m1_51  [key=0, style=bold, color=blue];
m1_79 -> m1_80  [key=0, style=solid];
m1_82 -> m1_4  [key=2, style=dotted];
m1_82 -> m1_83  [key=0, style=solid];
m1_82 -> m1_78  [key=2, style=dotted];
m1_82 -> m1_84  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_83 -> m1_5  [key=2, style=dotted];
m1_83 -> m1_84  [key=0, style=solid];
m1_84 -> m1_5  [key=2, style=dotted];
m1_84 -> m1_85  [key=0, style=solid];
m1_80 -> m1_17  [key=2, style=dotted];
m1_80 -> m1_82  [key=1, style=dashed, color=darkseagreen4, label=sut];
m1_80 -> m1_81  [key=0, style=solid];
m1_80 -> m1_66  [key=2, style=dotted];
m1_81 -> m1_82  [key=0, style=solid];
m1_81 -> m1_35  [key=2, style=dotted];
m1_81 -> m1_36  [key=2, style=dotted];
m1_81 -> m1_37  [key=2, style=dotted];
m1_81 -> m1_38  [key=2, style=dotted];
m1_85 -> m1_79  [key=0, style=bold, color=blue];
m1_22 -> m1_23  [key=0, style=solid];
m1_23 -> m1_3  [key=2, style=dotted];
m1_23 -> m1_19  [key=2, style=dotted];
m1_23 -> m1_20  [key=2, style=dotted];
m1_23 -> m1_24  [key=0, style=solid];
m1_23 -> m1_35  [key=2, style=dotted];
m1_23 -> m1_36  [key=2, style=dotted];
m1_23 -> m1_37  [key=2, style=dotted];
m1_23 -> m1_38  [key=2, style=dotted];
m1_24 -> m1_4  [key=2, style=dotted];
m1_24 -> m1_21  [key=2, style=dotted];
m1_24 -> m1_25  [key=0, style=solid];
m1_24 -> m1_39  [key=2, style=dotted];
m1_24 -> m1_26  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_24 -> m1_27  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_24 -> m1_28  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_24 -> m1_29  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_24 -> m1_30  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_24 -> m1_31  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_24 -> m1_32  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_24 -> m1_33  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_25 -> m1_5  [key=2, style=dotted];
m1_25 -> m1_26  [key=0, style=solid];
m1_26 -> m1_5  [key=2, style=dotted];
m1_26 -> m1_27  [key=0, style=solid];
m1_27 -> m1_5  [key=2, style=dotted];
m1_27 -> m1_28  [key=0, style=solid];
m1_28 -> m1_5  [key=2, style=dotted];
m1_28 -> m1_29  [key=0, style=solid];
m1_29 -> m1_5  [key=2, style=dotted];
m1_29 -> m1_30  [key=0, style=solid];
m1_30 -> m1_5  [key=2, style=dotted];
m1_30 -> m1_31  [key=0, style=solid];
m1_31 -> m1_5  [key=2, style=dotted];
m1_31 -> m1_32  [key=0, style=solid];
m1_32 -> m1_5  [key=2, style=dotted];
m1_32 -> m1_33  [key=0, style=solid];
m1_33 -> m1_5  [key=2, style=dotted];
m1_33 -> m1_34  [key=0, style=solid];
m1_34 -> m1_22  [key=0, style=bold, color=blue];
m1_86 -> m1_87  [key=0, style=solid];
m1_89 -> m1_4  [key=2, style=dotted];
m1_89 -> m1_90  [key=0, style=solid];
m1_89 -> m1_78  [key=2, style=dotted];
m1_89 -> m1_91  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_90 -> m1_5  [key=2, style=dotted];
m1_90 -> m1_91  [key=0, style=solid];
m1_91 -> m1_5  [key=2, style=dotted];
m1_91 -> m1_92  [key=0, style=solid];
m1_87 -> m1_17  [key=2, style=dotted];
m1_87 -> m1_89  [key=1, style=dashed, color=darkseagreen4, label=sut];
m1_87 -> m1_88  [key=0, style=solid];
m1_87 -> m1_66  [key=2, style=dotted];
m1_88 -> m1_89  [key=0, style=solid];
m1_88 -> m1_35  [key=2, style=dotted];
m1_88 -> m1_36  [key=2, style=dotted];
m1_88 -> m1_37  [key=2, style=dotted];
m1_88 -> m1_38  [key=2, style=dotted];
m1_92 -> m1_86  [key=0, style=bold, color=blue];
m1_93 -> m1_94  [key=0, style=solid];
m1_97 -> m1_4  [key=2, style=dotted];
m1_97 -> m1_21  [key=2, style=dotted];
m1_97 -> m1_98  [key=0, style=solid];
m1_97 -> m1_99  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_97 -> m1_100  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_97 -> m1_101  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_97 -> m1_102  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_97 -> m1_103  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_98 -> m1_5  [key=2, style=dotted];
m1_98 -> m1_99  [key=0, style=solid];
m1_99 -> m1_5  [key=2, style=dotted];
m1_99 -> m1_100  [key=0, style=solid];
m1_100 -> m1_5  [key=2, style=dotted];
m1_100 -> m1_101  [key=0, style=solid];
m1_101 -> m1_5  [key=2, style=dotted];
m1_101 -> m1_102  [key=0, style=solid];
m1_102 -> m1_5  [key=2, style=dotted];
m1_102 -> m1_103  [key=0, style=solid];
m1_103 -> m1_5  [key=2, style=dotted];
m1_103 -> m1_104  [key=0, style=solid];
m1_94 -> m1_17  [key=2, style=dotted];
m1_94 -> m1_97  [key=1, style=dashed, color=darkseagreen4, label=sut];
m1_94 -> m1_95  [key=0, style=solid];
m1_94 -> m1_66  [key=2, style=dotted];
m1_94 -> m1_96  [key=1, style=dashed, color=darkseagreen4, label=sut];
m1_96 -> m1_97  [key=0, style=solid];
m1_96 -> m1_35  [key=2, style=dotted];
m1_96 -> m1_36  [key=2, style=dotted];
m1_96 -> m1_37  [key=2, style=dotted];
m1_96 -> m1_38  [key=2, style=dotted];
m1_95 -> m1_96  [key=0, style=solid];
m1_104 -> m1_93  [key=0, style=bold, color=blue];
m1_220 -> m1_221  [key=0, style=solid];
m1_221 -> m1_3  [key=2, style=dotted];
m1_221 -> m1_19  [key=2, style=dotted];
m1_221 -> m1_20  [key=2, style=dotted];
m1_221 -> m1_222  [key=0, style=solid];
m1_221 -> m1_35  [key=2, style=dotted];
m1_221 -> m1_36  [key=2, style=dotted];
m1_221 -> m1_37  [key=2, style=dotted];
m1_221 -> m1_38  [key=2, style=dotted];
m1_222 -> m1_4  [key=2, style=dotted];
m1_222 -> m1_21  [key=2, style=dotted];
m1_222 -> m1_223  [key=0, style=solid];
m1_222 -> m1_39  [key=2, style=dotted];
m1_222 -> m1_224  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_222 -> m1_225  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_222 -> m1_226  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_222 -> m1_227  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_222 -> m1_228  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_222 -> m1_229  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_222 -> m1_230  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_222 -> m1_231  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_223 -> m1_5  [key=2, style=dotted];
m1_223 -> m1_224  [key=0, style=solid];
m1_224 -> m1_5  [key=2, style=dotted];
m1_224 -> m1_225  [key=0, style=solid];
m1_225 -> m1_5  [key=2, style=dotted];
m1_225 -> m1_226  [key=0, style=solid];
m1_226 -> m1_5  [key=2, style=dotted];
m1_226 -> m1_227  [key=0, style=solid];
m1_227 -> m1_5  [key=2, style=dotted];
m1_227 -> m1_228  [key=0, style=solid];
m1_228 -> m1_5  [key=2, style=dotted];
m1_228 -> m1_229  [key=0, style=solid];
m1_229 -> m1_5  [key=2, style=dotted];
m1_229 -> m1_230  [key=0, style=solid];
m1_230 -> m1_5  [key=2, style=dotted];
m1_230 -> m1_231  [key=0, style=solid];
m1_231 -> m1_5  [key=2, style=dotted];
m1_231 -> m1_232  [key=0, style=solid];
m1_232 -> m1_220  [key=0, style=bold, color=blue];
m1_164 -> m1_165  [key=0, style=solid];
m1_167 -> m1_4  [key=2, style=dotted];
m1_167 -> m1_21  [key=2, style=dotted];
m1_167 -> m1_168  [key=0, style=solid];
m1_167 -> m1_39  [key=2, style=dotted];
m1_167 -> m1_169  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_167 -> m1_170  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_167 -> m1_171  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_167 -> m1_172  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_167 -> m1_173  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_167 -> m1_174  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_167 -> m1_175  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_167 -> m1_176  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_167 -> m1_177  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_170 -> m1_5  [key=2, style=dotted];
m1_170 -> m1_171  [key=0, style=solid];
m1_171 -> m1_5  [key=2, style=dotted];
m1_171 -> m1_172  [key=0, style=solid];
m1_172 -> m1_5  [key=2, style=dotted];
m1_172 -> m1_173  [key=0, style=solid];
m1_173 -> m1_5  [key=2, style=dotted];
m1_173 -> m1_174  [key=0, style=solid];
m1_174 -> m1_5  [key=2, style=dotted];
m1_174 -> m1_175  [key=0, style=solid];
m1_175 -> m1_5  [key=2, style=dotted];
m1_175 -> m1_176  [key=0, style=solid];
m1_176 -> m1_5  [key=2, style=dotted];
m1_176 -> m1_177  [key=0, style=solid];
m1_177 -> m1_5  [key=2, style=dotted];
m1_177 -> m1_178  [key=0, style=solid];
m1_166 -> m1_167  [key=0, style=solid];
m1_166 -> m1_179  [key=2, style=dotted];
m1_168 -> m1_169  [key=0, style=solid];
m1_168 -> m1_180  [key=2, style=dotted];
m1_168 -> m1_181  [key=2, style=dotted];
m1_169 -> m1_170  [key=0, style=solid];
m1_169 -> m1_180  [key=2, style=dotted];
m1_169 -> m1_181  [key=2, style=dotted];
m1_165 -> m1_35  [key=2, style=dotted];
m1_165 -> m1_36  [key=2, style=dotted];
m1_165 -> m1_166  [key=0, style=solid];
m1_165 -> m1_131  [key=2, style=dotted];
m1_165 -> m1_136  [key=2, style=dotted];
m1_165 -> m1_133  [key=2, style=dotted];
m1_178 -> m1_164  [key=0, style=bold, color=blue];
m1_67 -> m1_68  [key=0, style=solid];
m1_71 -> m1_4  [key=2, style=dotted];
m1_71 -> m1_72  [key=0, style=solid];
m1_71 -> m1_78  [key=2, style=dotted];
m1_71 -> m1_73  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_71 -> m1_74  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_71 -> m1_75  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_71 -> m1_76  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_72 -> m1_5  [key=2, style=dotted];
m1_72 -> m1_73  [key=0, style=solid];
m1_73 -> m1_5  [key=2, style=dotted];
m1_73 -> m1_74  [key=0, style=solid];
m1_74 -> m1_5  [key=2, style=dotted];
m1_74 -> m1_75  [key=0, style=solid];
m1_75 -> m1_5  [key=2, style=dotted];
m1_75 -> m1_76  [key=0, style=solid];
m1_76 -> m1_5  [key=2, style=dotted];
m1_76 -> m1_77  [key=0, style=solid];
m1_68 -> m1_17  [key=2, style=dotted];
m1_68 -> m1_71  [key=1, style=dashed, color=darkseagreen4, label=sut];
m1_68 -> m1_69  [key=0, style=solid];
m1_68 -> m1_66  [key=2, style=dotted];
m1_68 -> m1_70  [key=1, style=dashed, color=darkseagreen4, label=sut];
m1_70 -> m1_71  [key=0, style=solid];
m1_70 -> m1_35  [key=2, style=dotted];
m1_70 -> m1_36  [key=2, style=dotted];
m1_70 -> m1_37  [key=2, style=dotted];
m1_70 -> m1_38  [key=2, style=dotted];
m1_69 -> m1_70  [key=0, style=solid];
m1_77 -> m1_67  [key=0, style=bold, color=blue];
m1_40 -> m1_41  [key=0, style=solid];
m1_41 -> m1_3  [key=2, style=dotted];
m1_41 -> m1_19  [key=2, style=dotted];
m1_41 -> m1_20  [key=2, style=dotted];
m1_41 -> m1_42  [key=0, style=solid];
m1_41 -> m1_35  [key=2, style=dotted];
m1_41 -> m1_36  [key=2, style=dotted];
m1_41 -> m1_37  [key=2, style=dotted];
m1_41 -> m1_38  [key=2, style=dotted];
m1_42 -> m1_4  [key=2, style=dotted];
m1_42 -> m1_21  [key=2, style=dotted];
m1_42 -> m1_43  [key=0, style=solid];
m1_42 -> m1_39  [key=2, style=dotted];
m1_42 -> m1_44  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_42 -> m1_45  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_42 -> m1_46  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_42 -> m1_47  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_42 -> m1_48  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_42 -> m1_49  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_43 -> m1_5  [key=2, style=dotted];
m1_43 -> m1_44  [key=0, style=solid];
m1_44 -> m1_5  [key=2, style=dotted];
m1_44 -> m1_45  [key=0, style=solid];
m1_45 -> m1_5  [key=2, style=dotted];
m1_45 -> m1_46  [key=0, style=solid];
m1_46 -> m1_5  [key=2, style=dotted];
m1_46 -> m1_47  [key=0, style=solid];
m1_47 -> m1_5  [key=2, style=dotted];
m1_47 -> m1_48  [key=0, style=solid];
m1_48 -> m1_5  [key=2, style=dotted];
m1_48 -> m1_49  [key=0, style=solid];
m1_49 -> m1_5  [key=2, style=dotted];
m1_49 -> m1_50  [key=0, style=solid];
m1_50 -> m1_40  [key=0, style=bold, color=blue];
m1_105 -> m1_106  [key=0, style=solid];
m1_109 -> m1_4  [key=2, style=dotted];
m1_109 -> m1_21  [key=2, style=dotted];
m1_109 -> m1_110  [key=0, style=solid];
m1_109 -> m1_111  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_109 -> m1_112  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_109 -> m1_113  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_109 -> m1_114  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_109 -> m1_115  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_110 -> m1_5  [key=2, style=dotted];
m1_110 -> m1_111  [key=0, style=solid];
m1_111 -> m1_5  [key=2, style=dotted];
m1_111 -> m1_112  [key=0, style=solid];
m1_112 -> m1_5  [key=2, style=dotted];
m1_112 -> m1_113  [key=0, style=solid];
m1_113 -> m1_5  [key=2, style=dotted];
m1_113 -> m1_114  [key=0, style=solid];
m1_114 -> m1_5  [key=2, style=dotted];
m1_114 -> m1_115  [key=0, style=solid];
m1_115 -> m1_5  [key=2, style=dotted];
m1_115 -> m1_116  [key=0, style=solid];
m1_108 -> m1_19  [key=2, style=dotted];
m1_108 -> m1_20  [key=2, style=dotted];
m1_108 -> m1_109  [key=0, style=solid];
m1_108 -> m1_35  [key=2, style=dotted];
m1_108 -> m1_36  [key=2, style=dotted];
m1_108 -> m1_37  [key=2, style=dotted];
m1_108 -> m1_38  [key=2, style=dotted];
m1_106 -> m1_109  [key=1, style=dashed, color=darkseagreen4, label=sut];
m1_106 -> m1_108  [key=1, style=dashed, color=darkseagreen4, label=sut];
m1_106 -> m1_107  [key=0, style=solid];
m1_106 -> m1_66  [key=2, style=dotted];
m1_107 -> m1_108  [key=0, style=solid];
m1_116 -> m1_105  [key=0, style=bold, color=blue];
m1_205 -> m1_206  [key=0, style=solid];
m1_209 -> m1_4  [key=2, style=dotted];
m1_209 -> m1_21  [key=2, style=dotted];
m1_209 -> m1_210  [key=0, style=solid];
m1_209 -> m1_39  [key=2, style=dotted];
m1_209 -> m1_211  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_209 -> m1_212  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_209 -> m1_213  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_209 -> m1_214  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_209 -> m1_215  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_209 -> m1_216  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_212 -> m1_5  [key=2, style=dotted];
m1_212 -> m1_213  [key=0, style=solid];
m1_213 -> m1_5  [key=2, style=dotted];
m1_213 -> m1_214  [key=0, style=solid];
m1_214 -> m1_5  [key=2, style=dotted];
m1_214 -> m1_215  [key=0, style=solid];
m1_215 -> m1_5  [key=2, style=dotted];
m1_215 -> m1_216  [key=0, style=solid];
m1_216 -> m1_5  [key=2, style=dotted];
m1_216 -> m1_217  [key=0, style=solid];
m1_208 -> m1_209  [key=0, style=solid];
m1_208 -> m1_179  [key=2, style=dotted];
m1_210 -> m1_211  [key=0, style=solid];
m1_210 -> m1_180  [key=2, style=dotted];
m1_210 -> m1_181  [key=2, style=dotted];
m1_211 -> m1_212  [key=0, style=solid];
m1_211 -> m1_180  [key=2, style=dotted];
m1_211 -> m1_181  [key=2, style=dotted];
m1_207 -> m1_35  [key=2, style=dotted];
m1_207 -> m1_208  [key=0, style=solid];
m1_207 -> m1_219  [key=2, style=dotted];
m1_207 -> m1_140  [key=2, style=dotted];
m1_206 -> m1_37  [key=2, style=dotted];
m1_206 -> m1_207  [key=0, style=solid];
m1_206 -> m1_218  [key=2, style=dotted];
m1_217 -> m1_205  [key=0, style=bold, color=blue];
m1_0 -> m1_1  [key=0, style=solid, color=green];
m1_1 -> m1_2  [key=0, style=solid, color=green];
m1_1 -> m1_3  [key=2, style=dotted, color=green];
m1_1 -> m1_4  [key=2, style=dotted, color=green];
m1_1 -> m1_5  [key=2, style=dotted, color=green];
m1_2 -> m1_0  [key=0, style=bold, color=blue];
m1_61 -> m1_62  [key=0, style=solid];
m1_63 -> m1_4  [key=2, style=dotted];
m1_63 -> m1_21  [key=2, style=dotted];
m1_63 -> m1_64  [key=0, style=solid];
m1_63 -> m1_39  [key=2, style=dotted];
m1_64 -> m1_5  [key=2, style=dotted];
m1_64 -> m1_65  [key=0, style=solid];
m1_62 -> m1_63  [key=0, style=solid];
m1_62 -> m1_35  [key=2, style=dotted];
m1_62 -> m1_36  [key=2, style=dotted];
m1_62 -> m1_37  [key=2, style=dotted];
m1_62 -> m1_38  [key=2, style=dotted];
m1_62 -> m1_66  [key=2, style=dotted];
m1_65 -> m1_61  [key=0, style=bold, color=blue];
m1_233 -> m1_234  [key=0, style=solid];
m1_237 -> m1_5  [key=2, style=dotted];
m1_237 -> m1_238  [key=0, style=solid];
m1_238 -> m1_5  [key=2, style=dotted];
m1_238 -> m1_239  [key=0, style=solid];
m1_239 -> m1_5  [key=2, style=dotted];
m1_239 -> m1_240  [key=0, style=solid];
m1_240 -> m1_5  [key=2, style=dotted];
m1_240 -> m1_241  [key=0, style=solid];
m1_241 -> m1_5  [key=2, style=dotted];
m1_241 -> m1_242  [key=0, style=solid];
m1_242 -> m1_5  [key=2, style=dotted];
m1_242 -> m1_243  [key=0, style=solid];
m1_243 -> m1_5  [key=2, style=dotted];
m1_243 -> m1_244  [key=0, style=solid];
m1_244 -> m1_5  [key=2, style=dotted];
m1_244 -> m1_245  [key=0, style=solid];
m1_245 -> m1_5  [key=2, style=dotted];
m1_245 -> m1_246  [key=0, style=solid];
m1_246 -> m1_5  [key=2, style=dotted];
m1_246 -> m1_247  [key=0, style=solid];
m1_247 -> m1_5  [key=2, style=dotted];
m1_247 -> m1_248  [key=0, style=solid];
m1_236 -> m1_21  [key=2, style=dotted];
m1_236 -> m1_237  [key=0, style=solid];
m1_236 -> m1_238  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_236 -> m1_239  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_236 -> m1_240  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_236 -> m1_241  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_236 -> m1_242  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_236 -> m1_243  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_236 -> m1_244  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_236 -> m1_245  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_236 -> m1_246  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_236 -> m1_247  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_235 -> m1_236  [key=0, style=solid];
m1_235 -> m1_249  [key=2, style=dotted];
m1_234 -> m1_35  [key=2, style=dotted];
m1_234 -> m1_36  [key=2, style=dotted];
m1_234 -> m1_37  [key=2, style=dotted];
m1_234 -> m1_235  [key=0, style=solid];
m1_248 -> m1_233  [key=0, style=bold, color=blue];
m1_281 -> m1_282  [key=0, style=solid];
m1_287 -> m1_4  [key=2, style=dotted];
m1_287 -> m1_288  [key=0, style=solid];
m1_288 -> m1_21  [key=2, style=dotted];
m1_288 -> m1_289  [key=0, style=solid];
m1_288 -> m1_39  [key=2, style=dotted];
m1_288 -> m1_290  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_288 -> m1_291  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_286 -> m1_287  [key=0, style=solid];
m1_286 -> m1_296  [key=2, style=dotted];
m1_285 -> m1_287  [key=1, style=dashed, color=darkseagreen4, label=helpText];
m1_285 -> m1_286  [key=0, style=solid];
m1_285 -> m1_179  [key=2, style=dotted];
m1_289 -> m1_290  [key=0, style=solid];
m1_289 -> m1_180  [key=2, style=dotted];
m1_289 -> m1_297  [key=2, style=dotted];
m1_290 -> m1_291  [key=0, style=solid];
m1_290 -> m1_180  [key=2, style=dotted];
m1_290 -> m1_297  [key=2, style=dotted];
m1_291 -> m1_292  [key=0, style=solid];
m1_291 -> m1_180  [key=2, style=dotted];
m1_291 -> m1_297  [key=2, style=dotted];
m1_283 -> m1_35  [key=2, style=dotted];
m1_283 -> m1_285  [key=1, style=dashed, color=darkseagreen4, label=fakeResult];
m1_283 -> m1_284  [key=0, style=solid];
m1_283 -> m1_295  [key=2, style=dotted];
m1_283 -> m1_131  [key=2, style=dotted];
m1_282 -> m1_286  [key=1, style=dashed, color=darkseagreen4, label=handlers];
m1_282 -> m1_283  [key=0, style=solid];
m1_282 -> m1_293  [key=2, style=dotted];
m1_282 -> m1_294  [key=2, style=dotted];
m1_282 -> m1_284  [key=1, style=dashed, color=darkseagreen4, label=handlers];
m1_284 -> m1_285  [key=0, style=solid];
m1_284 -> m1_296  [key=2, style=dotted];
m1_292 -> m1_281  [key=0, style=bold, color=blue];
m1_142 -> m1_143  [key=0, style=solid];
m1_142 -> m1_145  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m1_142 -> m1_147  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m1_142 -> m1_149  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m1_142 -> m1_151  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m1_142 -> m1_153  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m1_142 -> m1_157  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m1_143 -> m1_144  [key=0, style=solid];
m1_143 -> m1_146  [key=0, style=solid];
m1_143 -> m1_148  [key=0, style=solid];
m1_143 -> m1_150  [key=0, style=solid];
m1_143 -> m1_152  [key=0, style=solid];
m1_143 -> m1_154  [key=0, style=solid];
m1_143 -> m1_156  [key=0, style=solid];
m1_143 -> m1_158  [key=0, style=solid];
m1_145 -> m1_159  [key=0, style=solid];
m1_147 -> m1_159  [key=0, style=solid];
m1_149 -> m1_159  [key=0, style=solid];
m1_151 -> m1_159  [key=0, style=solid];
m1_153 -> m1_159  [key=0, style=solid];
m1_157 -> m1_159  [key=0, style=solid];
m1_144 -> m1_145  [key=0, style=solid];
m1_146 -> m1_147  [key=0, style=solid];
m1_148 -> m1_149  [key=0, style=solid];
m1_150 -> m1_151  [key=0, style=solid];
m1_152 -> m1_153  [key=0, style=solid];
m1_154 -> m1_155  [key=0, style=solid];
m1_156 -> m1_157  [key=0, style=solid];
m1_158 -> m1_159  [key=0, style=solid];
m1_158 -> m1_160  [key=2, style=dotted];
m1_155 -> m1_159  [key=0, style=solid];
m1_159 -> m1_142  [key=0, style=bold, color=blue];
m1_194 -> m1_195  [key=0, style=solid];
m1_197 -> m1_4  [key=2, style=dotted];
m1_197 -> m1_21  [key=2, style=dotted];
m1_197 -> m1_198  [key=0, style=solid];
m1_197 -> m1_39  [key=2, style=dotted];
m1_197 -> m1_199  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_197 -> m1_200  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_197 -> m1_201  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_197 -> m1_202  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_197 -> m1_203  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_199 -> m1_5  [key=2, style=dotted];
m1_199 -> m1_200  [key=0, style=solid];
m1_200 -> m1_5  [key=2, style=dotted];
m1_200 -> m1_201  [key=0, style=solid];
m1_201 -> m1_5  [key=2, style=dotted];
m1_201 -> m1_202  [key=0, style=solid];
m1_202 -> m1_5  [key=2, style=dotted];
m1_202 -> m1_203  [key=0, style=solid];
m1_203 -> m1_5  [key=2, style=dotted];
m1_203 -> m1_204  [key=0, style=solid];
m1_196 -> m1_197  [key=0, style=solid];
m1_196 -> m1_179  [key=2, style=dotted];
m1_198 -> m1_199  [key=0, style=solid];
m1_198 -> m1_180  [key=2, style=dotted];
m1_198 -> m1_181  [key=2, style=dotted];
m1_195 -> m1_35  [key=2, style=dotted];
m1_195 -> m1_36  [key=2, style=dotted];
m1_195 -> m1_196  [key=0, style=solid];
m1_195 -> m1_140  [key=2, style=dotted];
m1_204 -> m1_194  [key=0, style=bold, color=blue];
m1_250 -> m1_251  [key=0, style=solid];
m1_253 -> m1_4  [key=2, style=dotted];
m1_253 -> m1_254  [key=0, style=solid];
m1_257 -> m1_5  [key=2, style=dotted];
m1_257 -> m1_258  [key=0, style=solid];
m1_258 -> m1_5  [key=2, style=dotted];
m1_258 -> m1_259  [key=0, style=solid];
m1_259 -> m1_5  [key=2, style=dotted];
m1_259 -> m1_260  [key=0, style=solid];
m1_260 -> m1_5  [key=2, style=dotted];
m1_260 -> m1_261  [key=0, style=solid];
m1_261 -> m1_5  [key=2, style=dotted];
m1_261 -> m1_262  [key=0, style=solid];
m1_262 -> m1_5  [key=2, style=dotted];
m1_262 -> m1_263  [key=0, style=solid];
m1_263 -> m1_5  [key=2, style=dotted];
m1_263 -> m1_264  [key=0, style=solid];
m1_264 -> m1_5  [key=2, style=dotted];
m1_264 -> m1_265  [key=0, style=solid];
m1_265 -> m1_5  [key=2, style=dotted];
m1_265 -> m1_266  [key=0, style=solid];
m1_266 -> m1_5  [key=2, style=dotted];
m1_266 -> m1_267  [key=0, style=solid];
m1_267 -> m1_5  [key=2, style=dotted];
m1_267 -> m1_268  [key=0, style=solid];
m1_268 -> m1_5  [key=2, style=dotted];
m1_268 -> m1_269  [key=0, style=solid];
m1_269 -> m1_5  [key=2, style=dotted];
m1_269 -> m1_270  [key=0, style=solid];
m1_270 -> m1_5  [key=2, style=dotted];
m1_270 -> m1_271  [key=0, style=solid];
m1_271 -> m1_5  [key=2, style=dotted];
m1_271 -> m1_272  [key=0, style=solid];
m1_272 -> m1_5  [key=2, style=dotted];
m1_272 -> m1_273  [key=0, style=solid];
m1_273 -> m1_5  [key=2, style=dotted];
m1_273 -> m1_274  [key=0, style=solid];
m1_274 -> m1_5  [key=2, style=dotted];
m1_274 -> m1_275  [key=0, style=solid];
m1_275 -> m1_5  [key=2, style=dotted];
m1_275 -> m1_276  [key=0, style=solid];
m1_276 -> m1_5  [key=2, style=dotted];
m1_276 -> m1_277  [key=0, style=solid];
m1_277 -> m1_5  [key=2, style=dotted];
m1_277 -> m1_278  [key=0, style=solid];
m1_278 -> m1_5  [key=2, style=dotted];
m1_278 -> m1_279  [key=0, style=solid];
m1_279 -> m1_5  [key=2, style=dotted];
m1_279 -> m1_280  [key=0, style=solid];
m1_254 -> m1_21  [key=2, style=dotted];
m1_254 -> m1_257  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_254 -> m1_258  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_254 -> m1_259  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_254 -> m1_260  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_254 -> m1_261  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_254 -> m1_262  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_254 -> m1_263  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_254 -> m1_264  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_254 -> m1_265  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_254 -> m1_266  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_254 -> m1_267  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_254 -> m1_268  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_254 -> m1_269  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_254 -> m1_270  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_254 -> m1_271  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_254 -> m1_272  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_254 -> m1_273  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_254 -> m1_274  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_254 -> m1_275  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_254 -> m1_276  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_254 -> m1_277  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_254 -> m1_278  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_254 -> m1_279  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_254 -> m1_255  [key=0, style=solid];
m1_254 -> m1_39  [key=2, style=dotted];
m1_254 -> m1_256  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_252 -> m1_253  [key=0, style=solid];
m1_252 -> m1_179  [key=2, style=dotted];
m1_256 -> m1_257  [key=0, style=solid];
m1_256 -> m1_180  [key=2, style=dotted];
m1_256 -> m1_181  [key=2, style=dotted];
m1_255 -> m1_256  [key=0, style=solid];
m1_255 -> m1_180  [key=2, style=dotted];
m1_255 -> m1_181  [key=2, style=dotted];
m1_251 -> m1_35  [key=2, style=dotted];
m1_251 -> m1_36  [key=2, style=dotted];
m1_251 -> m1_252  [key=0, style=solid];
m1_251 -> m1_131  [key=2, style=dotted];
m1_280 -> m1_250  [key=0, style=bold, color=blue];
m1_6 -> m1_7  [key=0, style=solid, color=green];
m1_7 -> m1_8  [key=0, style=solid, color=green];
m1_7 -> m1_16  [key=2, style=dotted, color=green];
m1_7 -> m1_17  [key=2, style=dotted, color=green];
m1_7 -> m1_18  [key=2, style=dotted, color=green];
m1_7 -> m1_19  [key=2, style=dotted, color=green];
m1_7 -> m1_20  [key=2, style=dotted, color=green];
m1_8 -> m1_9  [key=0, style=solid, color=green];
m1_8 -> m1_4  [key=2, style=dotted, color=green];
m1_8 -> m1_21  [key=2, style=dotted, color=green];
m1_8 -> m1_10  [key=1, style=dashed, color=green, label=lines];
m1_8 -> m1_11  [key=1, style=dashed, color=green, label=lines];
m1_8 -> m1_12  [key=1, style=dashed, color=green, label=lines];
m1_8 -> m1_13  [key=1, style=dashed, color=green, label=lines];
m1_8 -> m1_14  [key=1, style=dashed, color=green, label=lines];
m1_9 -> m1_10  [key=0, style=solid, color=green];
m1_9 -> m1_5  [key=2, style=dotted, color=green];
m1_10 -> m1_11  [key=0, style=solid, color=green];
m1_10 -> m1_5  [key=2, style=dotted, color=green];
m1_11 -> m1_12  [key=0, style=solid, color=green];
m1_11 -> m1_5  [key=2, style=dotted, color=green];
m1_12 -> m1_13  [key=0, style=solid, color=green];
m1_12 -> m1_5  [key=2, style=dotted, color=green];
m1_13 -> m1_14  [key=0, style=solid, color=green];
m1_13 -> m1_5  [key=2, style=dotted, color=green];
m1_14 -> m1_15  [key=0, style=solid, color=green];
m1_14 -> m1_5  [key=2, style=dotted, color=green];
m1_15 -> m1_6  [key=0, style=bold, color=blue];
m1_117 -> m1_118  [key=0, style=solid];
m1_123 -> m1_5  [key=2, style=dotted];
m1_123 -> m1_124  [key=0, style=solid];
m1_124 -> m1_5  [key=2, style=dotted];
m1_124 -> m1_125  [key=0, style=solid];
m1_125 -> m1_5  [key=2, style=dotted];
m1_125 -> m1_126  [key=0, style=solid];
m1_126 -> m1_5  [key=2, style=dotted];
m1_126 -> m1_127  [key=0, style=solid];
m1_127 -> m1_5  [key=2, style=dotted];
m1_127 -> m1_128  [key=0, style=solid];
m1_128 -> m1_5  [key=2, style=dotted];
m1_128 -> m1_129  [key=0, style=solid];
m1_129 -> m1_5  [key=2, style=dotted];
m1_129 -> m1_130  [key=0, style=solid];
m1_122 -> m1_21  [key=2, style=dotted];
m1_122 -> m1_123  [key=0, style=solid];
m1_122 -> m1_124  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_122 -> m1_125  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_122 -> m1_126  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_122 -> m1_127  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_122 -> m1_128  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_122 -> m1_129  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_121 -> m1_122  [key=0, style=solid];
m1_121 -> m1_141  [key=2, style=dotted];
m1_118 -> m1_35  [key=2, style=dotted];
m1_118 -> m1_36  [key=2, style=dotted];
m1_118 -> m1_121  [key=1, style=dashed, color=darkseagreen4, label=fakeResult];
m1_118 -> m1_119  [key=0, style=solid];
m1_118 -> m1_131  [key=2, style=dotted];
m1_118 -> m1_132  [key=2, style=dotted];
m1_118 -> m1_133  [key=2, style=dotted];
m1_118 -> m1_134  [key=2, style=dotted];
m1_118 -> d73  [key=2, style=dotted];
m1_118 -> m1_136  [key=2, style=dotted];
m1_118 -> m1_137  [key=2, style=dotted];
m1_118 -> m1_138  [key=2, style=dotted];
m1_118 -> m1_139  [key=2, style=dotted];
m1_118 -> m1_140  [key=2, style=dotted];
m1_119 -> m1_121  [key=1, style=dashed, color=darkseagreen4, label=fakeRenderer];
m1_119 -> m1_120  [key=0, style=solid];
m1_119 -> m1_143  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m1_119 -> m1_145  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m1_119 -> m1_147  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m1_119 -> m1_149  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m1_119 -> m1_151  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m1_119 -> m1_153  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m1_119 -> m1_157  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m1_120 -> m1_121  [key=0, style=solid];
m1_130 -> m1_117  [key=0, style=bold, color=blue];
m1_182 -> m1_183  [key=0, style=solid];
m1_185 -> m1_4  [key=2, style=dotted];
m1_185 -> m1_21  [key=2, style=dotted];
m1_185 -> m1_186  [key=0, style=solid];
m1_185 -> m1_39  [key=2, style=dotted];
m1_185 -> m1_187  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_185 -> m1_188  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_185 -> m1_189  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_185 -> m1_190  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_185 -> m1_191  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_185 -> m1_192  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_188 -> m1_5  [key=2, style=dotted];
m1_188 -> m1_189  [key=0, style=solid];
m1_189 -> m1_5  [key=2, style=dotted];
m1_189 -> m1_190  [key=0, style=solid];
m1_190 -> m1_5  [key=2, style=dotted];
m1_190 -> m1_191  [key=0, style=solid];
m1_191 -> m1_5  [key=2, style=dotted];
m1_191 -> m1_192  [key=0, style=solid];
m1_192 -> m1_5  [key=2, style=dotted];
m1_192 -> m1_193  [key=0, style=solid];
m1_184 -> m1_185  [key=0, style=solid];
m1_184 -> m1_179  [key=2, style=dotted];
m1_186 -> m1_187  [key=0, style=solid];
m1_186 -> m1_180  [key=2, style=dotted];
m1_186 -> m1_181  [key=2, style=dotted];
m1_187 -> m1_188  [key=0, style=solid];
m1_187 -> m1_180  [key=2, style=dotted];
m1_187 -> m1_181  [key=2, style=dotted];
m1_183 -> m1_35  [key=2, style=dotted];
m1_183 -> m1_36  [key=2, style=dotted];
m1_183 -> m1_184  [key=0, style=solid];
m1_183 -> m1_140  [key=2, style=dotted];
m1_193 -> m1_182  [key=0, style=bold, color=blue];
m2_28 -> m2_46  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Collections.Generic.IEnumerable<System.Type> types"];
m2_28 -> m2_77  [key=0, style=solid];
m2_28 -> m2_34  [key=3, color=darkorchid, style=bold, label="Parameter variable CommandLine.Error[] errors"];
m2_77 -> m2_78  [key=0, style=solid];
m2_77 -> m2_79  [key=2, style=dotted];
m2_78 -> m2_28  [key=0, style=bold, color=blue];
m2_36 -> m2_42  [key=0, style=solid];
m2_36 -> m2_51  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m2_36 -> m2_54  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>"];
m2_36 -> m2_59  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m2_42 -> m2_1  [key=3, color=green, style=bold, label="Parameter variable System.Collections.Generic.IEnumerable<CommandLine.Core.Token> tokens"];
m2_42 -> m2_43  [key=0, style=solid];
m2_42 -> d49  [key=2, style=dotted];
m2_42 -> m2_45  [key=2, style=dotted];
m2_42 -> m2_32  [key=2, style=dotted];
m2_42 -> m2_46  [key=2, style=dotted];
m2_42 -> m2_47  [key=2, style=dotted];
m2_42 -> m2_48  [key=2, style=dotted];
m2_42 -> m2_29  [key=2, style=dotted];
m2_42 -> m2_49  [key=2, style=dotted];
m2_42 -> m2_50  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_42 -> m2_53  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_42 -> m2_61  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_43 -> m2_36  [key=0, style=bold, color=blue];
m2_73 -> m2_74  [key=0, style=solid];
m2_4 -> m2_5  [key=0, style=solid];
m2_4 -> m2_12  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m2_4 -> m2_6  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m2_4 -> m2_16  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m2_5 -> m2_6  [key=0, style=solid];
m2_5 -> m2_9  [key=2, style=dotted];
m2_5 -> m2_11  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_12 -> m2_13  [key=0, style=solid];
m2_12 -> m2_14  [key=2, style=dotted];
m2_6 -> m2_7  [key=0, style=solid];
m2_6 -> m2_10  [key=2, style=dotted];
m2_6 -> m2_15  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_16 -> m2_17  [key=0, style=solid];
m2_16 -> m2_18  [key=2, style=dotted];
m2_50 -> m2_51  [key=0, style=solid];
m2_53 -> m2_54  [key=0, style=solid];
m2_61 -> m2_62  [key=0, style=solid];
m2_38 -> m2_39  [key=0, style=solid];
m2_38 -> m2_40  [key=2, style=dotted];
m2_38 -> m2_41  [key=2, style=dotted];
m2_8 -> m2_4  [key=0, style=bold, color=blue];
m2_11 -> m2_12  [key=0, style=solid];
m2_13 -> m2_11  [key=0, style=bold, color=blue];
m2_7 -> m2_8  [key=0, style=solid];
m2_15 -> m2_16  [key=0, style=solid];
m2_17 -> m2_15  [key=0, style=bold, color=blue];
m2_51 -> m2_29  [key=2, style=dotted];
m2_51 -> m2_52  [key=0, style=solid];
m2_51 -> m2_40  [key=2, style=dotted];
m2_54 -> m2_55  [key=0, style=solid];
m2_54 -> m2_56  [key=2, style=dotted];
m2_54 -> m2_57  [key=2, style=dotted];
m2_54 -> m2_58  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_59 -> m2_29  [key=2, style=dotted];
m2_59 -> m2_60  [key=0, style=solid];
m2_59 -> m2_40  [key=2, style=dotted];
m2_52 -> m2_50  [key=0, style=bold, color=blue];
m2_55 -> m2_53  [key=0, style=bold, color=blue];
m2_63 -> m2_61  [key=0, style=bold, color=blue];
m2_62 -> m2_63  [key=0, style=solid];
m2_37 -> m2_38  [key=0, style=solid];
m2_39 -> m2_37  [key=0, style=bold, color=blue];
m2_58 -> m2_59  [key=0, style=solid];
m2_60 -> m2_58  [key=0, style=bold, color=blue];
m2_71 -> m2_40  [key=2, style=dotted];
m2_71 -> m2_72  [key=0, style=solid];
m2_70 -> m2_71  [key=0, style=solid];
m2_72 -> m2_70  [key=0, style=bold, color=blue];
m2_74 -> m2_75  [key=0, style=solid];
m2_74 -> m2_76  [key=2, style=dotted];
m2_75 -> m2_73  [key=0, style=bold, color=blue];
m2_34 -> m2_64  [key=0, style=solid];
m2_34 -> m2_71  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_64 -> m2_26  [key=3, color=darkorchid, style=bold, label="Parameter variable string[] values"];
m2_64 -> m2_65  [key=0, style=solid];
m2_64 -> m2_66  [key=2, style=dotted];
m2_64 -> m2_67  [key=2, style=dotted];
m2_64 -> m2_68  [key=2, style=dotted];
m2_64 -> m2_69  [key=2, style=dotted];
m2_64 -> m2_70  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_64 -> m2_73  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_65 -> m2_34  [key=0, style=bold, color=blue];
m2_0 -> m2_1  [key=0, style=solid, color=green];
m2_0 -> m2_5  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m2_0 -> m2_12  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m2_0 -> m2_6  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m2_0 -> m2_16  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m2_0 -> m2_3  [key=3, color=darkorchid, style=bold, label="method methodReturn CommandLine.ParserResult<object> Choose"];
m2_1 -> m2_1  [key=3, color=green, style=bold, label="method methodReturn RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error> "];
m2_1 -> m2_2  [key=0, style=solid, color=green];
m2_1 -> m2_3  [key=2, style=dotted, color=green];
m2_1 -> m2_4  [key=1, style=dashed, color=green, label="lambda expression"];
m2_2 -> m2_0  [key=0, style=bold, color=blue];
m2_3 -> m2_19  [key=0, style=solid];
m2_3 -> m2_20  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<System.Type>"];
m2_3 -> m2_21  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m2_3 -> m2_22  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m2_3 -> m2_38  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m2_3 -> m2_23  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<System.Type>"];
m2_3 -> m2_24  [key=1, style=dashed, color=darkseagreen4, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>"];
m2_3 -> m2_28  [key=3, color=darkorchid, style=bold, label="method methodReturn CommandLine.ParserResult<object> Choose"];
m2_19 -> m2_20  [key=0, style=solid];
m2_19 -> m2_21  [key=0, style=solid];
m2_19 -> m2_26  [key=2, style=dotted];
m2_20 -> m2_25  [key=0, style=solid];
m2_20 -> m2_27  [key=2, style=dotted];
m2_20 -> m2_28  [key=2, style=dotted];
m2_21 -> m2_29  [key=2, style=dotted];
m2_21 -> m2_22  [key=0, style=solid];
m2_21 -> m2_38  [key=1, style=dashed, color=darkseagreen4, label=firstArg];
m2_22 -> m2_22  [key=3, color=darkorchid, style=bold, label="Local variable System.Func<string, bool> preprocCompare"];
m2_22 -> m2_23  [key=0, style=solid];
m2_22 -> m2_38  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_22 -> m2_24  [key=1, style=dashed, color=darkseagreen4, label=preprocCompare];
m2_23 -> m2_24  [key=0, style=solid];
m2_23 -> m2_30  [key=2, style=dotted];
m2_24 -> m2_36  [key=2, style=dotted];
m2_24 -> m2_32  [key=2, style=dotted];
m2_24 -> m2_25  [key=0, style=solid];
m2_24 -> m2_31  [key=2, style=dotted];
m2_24 -> m2_33  [key=2, style=dotted];
m2_24 -> m2_34  [key=2, style=dotted];
m2_24 -> m2_28  [key=2, style=dotted];
m2_24 -> m2_35  [key=2, style=dotted];
m2_25 -> m2_3  [key=0, style=bold, color=blue];
m2_80 -> m2_5  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m2_80 -> m2_12  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m2_80 -> m2_6  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m2_80 -> m2_16  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m2_81 -> m2_12  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m2_81 -> m2_16  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m2_82 -> m2_38  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m2_83 -> m2_38  [key=1, style=dashed, color=darkseagreen4, label=firstArg];
m2_84 -> m2_51  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m2_84 -> m2_54  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m2_84 -> m2_59  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m2_85 -> m2_51  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m2_85 -> m2_54  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m2_85 -> m2_59  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m2_86 -> m2_54  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>"];
m2_87 -> m2_71  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_88 -> m2_71  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
}
