digraph  {
n0 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.DateHumanizeTests()", label="Entry Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.DateHumanizeTests()", span="9-9"];
n1 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.DateHumanizeTests()", label="Exit Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.DateHumanizeTests()", span="9-9"];
n2 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.DaysFromNow(int, string)", label="Entry Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.DaysFromNow(int, string)", span="14-14"];
n3 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.DaysFromNow(int, string)", label="DateHumanize.Verify(expected, days, TimeUnit.Day, Tense.Future)", span="16-16"];
n4 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.DaysFromNow(int, string)", label="Exit Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.DaysFromNow(int, string)", span="14-14"];
n5 [cluster="Humanizer.Tests.DateHumanize.Verify(string, int, Humanizer.Localisation.TimeUnit, Humanizer.Localisation.Tense, double?, System.Globalization.CultureInfo)", label="Entry Humanizer.Tests.DateHumanize.Verify(string, int, Humanizer.Localisation.TimeUnit, Humanizer.Localisation.Tense, double?, System.Globalization.CultureInfo)", span="30-30"];
n6 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.DaysAgo(int, string)", label="Entry Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.DaysAgo(int, string)", span="22-22"];
n7 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.DaysAgo(int, string)", label="DateHumanize.Verify(expected, days, TimeUnit.Day, Tense.Past)", span="24-24"];
n8 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.DaysAgo(int, string)", label="Exit Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.DaysAgo(int, string)", span="22-22"];
n9 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.HoursFromNow(int, string)", label="Entry Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.HoursFromNow(int, string)", span="30-30"];
n10 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.HoursFromNow(int, string)", label="DateHumanize.Verify(expected, hours, TimeUnit.Hour, Tense.Future)", span="32-32"];
n11 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.HoursFromNow(int, string)", label="Exit Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.HoursFromNow(int, string)", span="30-30"];
n12 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.HoursAgo(int, string)", label="Entry Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.HoursAgo(int, string)", span="38-38"];
n13 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.HoursAgo(int, string)", label="DateHumanize.Verify(expected, hours, TimeUnit.Hour, Tense.Past)", span="40-40"];
n14 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.HoursAgo(int, string)", label="Exit Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.HoursAgo(int, string)", span="38-38"];
n15 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MinutesFromNow(int, string)", label="Entry Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MinutesFromNow(int, string)", span="46-46"];
n16 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MinutesFromNow(int, string)", label="DateHumanize.Verify(expected, minutes, TimeUnit.Minute, Tense.Future)", span="48-48"];
n17 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MinutesFromNow(int, string)", label="Exit Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MinutesFromNow(int, string)", span="46-46"];
n18 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MinutesAgo(int, string)", label="Entry Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MinutesAgo(int, string)", span="54-54"];
n19 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MinutesAgo(int, string)", label="DateHumanize.Verify(expected, minutes, TimeUnit.Minute, Tense.Past)", span="56-56"];
n20 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MinutesAgo(int, string)", label="Exit Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MinutesAgo(int, string)", span="54-54"];
n21 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MonthsFromNow(int, string)", label="Entry Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MonthsFromNow(int, string)", span="62-62"];
n22 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MonthsFromNow(int, string)", label="DateHumanize.Verify(expected, months, TimeUnit.Month, Tense.Future)", span="64-64"];
n23 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MonthsFromNow(int, string)", label="Exit Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MonthsFromNow(int, string)", span="62-62"];
n24 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MonthsAgo(int, string)", label="Entry Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MonthsAgo(int, string)", span="70-70"];
n25 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MonthsAgo(int, string)", label="DateHumanize.Verify(expected, months, TimeUnit.Month, Tense.Past)", span="72-72"];
n26 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MonthsAgo(int, string)", label="Exit Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MonthsAgo(int, string)", span="70-70"];
n27 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.SecondsFromNow(int, string)", label="Entry Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.SecondsFromNow(int, string)", span="78-78"];
n28 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.SecondsFromNow(int, string)", label="DateHumanize.Verify(expected, seconds, TimeUnit.Second, Tense.Future)", span="80-80"];
n29 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.SecondsFromNow(int, string)", label="Exit Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.SecondsFromNow(int, string)", span="78-78"];
n30 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.SecondsAgo(int, string)", label="Entry Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.SecondsAgo(int, string)", span="86-86"];
n31 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.SecondsAgo(int, string)", label="DateHumanize.Verify(expected, seconds, TimeUnit.Second, Tense.Past)", span="88-88"];
n32 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.SecondsAgo(int, string)", label="Exit Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.SecondsAgo(int, string)", span="86-86"];
n33 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.YearsFromNow(int, string)", label="Entry Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.YearsFromNow(int, string)", span="94-94"];
n34 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.YearsFromNow(int, string)", label="DateHumanize.Verify(expected, years, TimeUnit.Year, Tense.Future)", span="96-96"];
n35 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.YearsFromNow(int, string)", label="Exit Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.YearsFromNow(int, string)", span="94-94"];
n36 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.YearsAgo(int, string)", label="Entry Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.YearsAgo(int, string)", span="102-102"];
n37 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.YearsAgo(int, string)", label="DateHumanize.Verify(expected, years, TimeUnit.Year, Tense.Past)", span="104-104"];
n38 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.YearsAgo(int, string)", label="Exit Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.YearsAgo(int, string)", span="102-102"];
n39 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.DateHumanizeTests()", label="Entry Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.DateHumanizeTests()", span="115-115"];
n40 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.DateHumanizeTests()", label="Exit Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.DateHumanizeTests()", span="115-115"];
n41 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.DaysFromNow(int, string)", label="Entry Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.DaysFromNow(int, string)", span="120-120"];
n42 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.DaysFromNow(int, string)", label="Assert.Equal(expected, DateTime.UtcNow.AddDays(days).Humanize())", span="122-122"];
n43 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.DaysFromNow(int, string)", label="Exit Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.DaysFromNow(int, string)", span="120-120"];
n44 [cluster="System.DateTime.AddDays(double)", label="Entry System.DateTime.AddDays(double)", span="0-0"];
n45 [cluster="System.DateTime.Humanize(bool, System.DateTime?, System.Globalization.CultureInfo)", label="Entry System.DateTime.Humanize(bool, System.DateTime?, System.Globalization.CultureInfo)", span="19-19"];
n46 [cluster="Unk.Equal", label="Entry Unk.Equal", span=""];
n47 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.DaysAgo(int, string)", label="Entry Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.DaysAgo(int, string)", span="128-128"];
n48 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.DaysAgo(int, string)", label="Assert.Equal(expected, DateTime.UtcNow.AddDays(days).Humanize())", span="130-130"];
n49 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.DaysAgo(int, string)", label="Exit Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.DaysAgo(int, string)", span="128-128"];
n50 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.HoursFromNow(int, string)", label="Entry Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.HoursFromNow(int, string)", span="136-136"];
n51 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.HoursFromNow(int, string)", label="Assert.Equal(expected, DateTime.UtcNow.AddHours(hours).Humanize())", span="138-138"];
n52 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.HoursFromNow(int, string)", label="Exit Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.HoursFromNow(int, string)", span="136-136"];
n53 [cluster="System.DateTime.AddHours(double)", label="Entry System.DateTime.AddHours(double)", span="0-0"];
n54 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.HoursAgo(int, string)", label="Entry Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.HoursAgo(int, string)", span="144-144"];
n55 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.HoursAgo(int, string)", label="Assert.Equal(expected, DateTime.UtcNow.AddHours(hours).Humanize())", span="146-146"];
n56 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.HoursAgo(int, string)", label="Exit Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.HoursAgo(int, string)", span="144-144"];
n57 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MinutesFromNow(int, string)", label="Entry Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MinutesFromNow(int, string)", span="152-152"];
n58 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MinutesFromNow(int, string)", label="Assert.Equal(expected, DateTime.UtcNow.AddMinutes(minutes).Humanize())", span="154-154"];
n59 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MinutesFromNow(int, string)", label="Exit Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MinutesFromNow(int, string)", span="152-152"];
n60 [cluster="System.DateTime.AddMinutes(double)", label="Entry System.DateTime.AddMinutes(double)", span="0-0"];
n61 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MinutesAgo(int, string)", label="Entry Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MinutesAgo(int, string)", span="160-160"];
n62 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MinutesAgo(int, string)", label="Assert.Equal(expected, DateTime.UtcNow.AddMinutes(minutes).Humanize())", span="162-162"];
n63 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MinutesAgo(int, string)", label="Exit Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MinutesAgo(int, string)", span="160-160"];
n64 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MonthsFromNow(int, string)", label="Entry Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MonthsFromNow(int, string)", span="168-168"];
n65 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MonthsFromNow(int, string)", label="Assert.Equal(expected, DateTime.UtcNow.AddMonths(months).Humanize())", span="170-170"];
n66 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MonthsFromNow(int, string)", label="Exit Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MonthsFromNow(int, string)", span="168-168"];
n67 [cluster="System.DateTime.AddMonths(int)", label="Entry System.DateTime.AddMonths(int)", span="0-0"];
n68 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MonthsAgo(int, string)", label="Entry Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MonthsAgo(int, string)", span="176-176"];
n69 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MonthsAgo(int, string)", label="Assert.Equal(expected, DateTime.UtcNow.AddMonths(months).Humanize())", span="178-178"];
n70 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MonthsAgo(int, string)", label="Exit Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.MonthsAgo(int, string)", span="176-176"];
n71 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.SecondsFromNow(int, string)", label="Entry Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.SecondsFromNow(int, string)", span="184-184"];
n72 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.SecondsFromNow(int, string)", label="Assert.Equal(expected, DateTime.UtcNow.AddSeconds(seconds).Humanize())", span="186-186"];
n73 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.SecondsFromNow(int, string)", label="Exit Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.SecondsFromNow(int, string)", span="184-184"];
n74 [cluster="System.DateTime.AddSeconds(double)", label="Entry System.DateTime.AddSeconds(double)", span="0-0"];
n75 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.SecondsAgo(int, string)", label="Entry Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.SecondsAgo(int, string)", span="192-192"];
n76 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.SecondsAgo(int, string)", label="Assert.Equal(expected, DateTime.UtcNow.AddSeconds(seconds).Humanize())", span="194-194"];
n77 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.SecondsAgo(int, string)", label="Exit Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.SecondsAgo(int, string)", span="192-192"];
n78 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.YearsFromNow(int, string)", label="Entry Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.YearsFromNow(int, string)", span="200-200"];
n79 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.YearsFromNow(int, string)", label="Assert.Equal(expected, DateTime.UtcNow.AddYears(years).Humanize())", span="202-202"];
n80 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.YearsFromNow(int, string)", label="Exit Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.YearsFromNow(int, string)", span="200-200"];
n81 [cluster="System.DateTime.AddYears(int)", label="Entry System.DateTime.AddYears(int)", span="0-0"];
n82 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.YearsAgo(int, string)", label="Entry Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.YearsAgo(int, string)", span="208-208"];
n83 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.YearsAgo(int, string)", label="Assert.Equal(expected, DateTime.UtcNow.AddYears(years).Humanize())", span="210-210"];
n84 [cluster="Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.YearsAgo(int, string)", label="Exit Humanizer.Tests.Localisation.bnBD.DateHumanizeTests.YearsAgo(int, string)", span="208-208"];
d38 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", color=green, community=0, label="return specProps =>\r\n            {\r\n                var setsWithTrue =\r\n                    specProps\r\n                        .Where(sp => sp.Specification.IsOption()\r\n                            && sp.Value.IsJust() && sp.Specification.Required)\r\n                        .Select(s => ((OptionSpecification)s.Specification).SetName).ToList();\r\n                \r\n                var requiredButEmpty =\r\n                    specProps\r\n                        .Where(sp => sp.Specification.IsOption())\r\n                        .Where(sp => sp.Value.IsNothing()\r\n                            && sp.Specification.Required\r\n                            && !setsWithTrue.Contains(((OptionSpecification)sp.Specification).SetName))\r\n                    .Concat(specProps\r\n                        .Where(sp => sp.Specification.IsValue()\r\n                            && sp.Value.IsNothing()\r\n                            && sp.Specification.Required)).ToList();\r\n                    if (requiredButEmpty.Any()) {\r\n                        return requiredButEmpty.Select(s =>new MissingRequiredOptionError(\r\n                            NameExtensions.FromSpecification(s.Specification)));\r\n                    }\r\n                    return Enumerable.Empty<Error>();\r\n                };", prediction=0, span="45-68"];
d5 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="43-43"];
d39 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="43-43"];
d41 [cluster="lambda expression", label="var setsWithTrue =\r\n                    specProps\r\n                        .Where(sp => sp.Specification.IsOption()\r\n                            && sp.Value.IsJust() && sp.Specification.Required)\r\n                        .Select(s => ((OptionSpecification)s.Specification).SetName).ToList()", span="47-51"];
d42 [cluster="lambda expression", label="var requiredButEmpty =\r\n                    specProps\r\n                        .Where(sp => sp.Specification.IsOption())\r\n                        .Where(sp => sp.Value.IsNothing()\r\n                            && sp.Specification.Required\r\n                            && !setsWithTrue.Contains(((OptionSpecification)sp.Specification).SetName))\r\n                    .Concat(specProps\r\n                        .Where(sp => sp.Specification.IsValue()\r\n                            && sp.Value.IsNothing()\r\n                            && sp.Specification.Required)).ToList()", span="53-62"];
d45 [cluster="lambda expression", color=green, community=0, label="return Enumerable.Empty<Error>();", prediction=1, span="67-67"];
d43 [cluster="lambda expression", label="requiredButEmpty.Any()", span="63-63"];
d46 [cluster="lambda expression", label="Exit lambda expression", span="45-68"];
d21 [cluster="System.Linq.Enumerable.Empty<TResult>()", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
d75 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", color=green, community=0, label="return specProps =>\r\n                {\r\n                    var options = specProps.Where(\r\n                        sp => sp.Specification.TargetType == TargetType.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min.FromJust())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max.FromJust())\r\n                        )\r\n                    );\r\n                    if (options.Any())\r\n                    {\r\n                        return options.Select(s => new SequenceOutOfRangeError(\r\n                            NameExtensions.FromSpecification(s.Specification)));\r\n                    }\r\n                    return Enumerable.Empty<Error>();\r\n                };", prediction=2, span="73-89"];
d6 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="71-71"];
d76 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="71-71"];
d78 [cluster="lambda expression", color=green, community=0, label="var options = specProps.Where(\r\n                        sp => sp.Specification.TargetType == TargetType.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min.FromJust())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max.FromJust())\r\n                        )\r\n                    )", prediction=3, span="75-82"];
d77 [cluster="lambda expression", label="Entry lambda expression", span="73-89"];
d79 [cluster="lambda expression", label="options.Any()", span="83-83"];
d17 [cluster="Unk.Where", label="Entry Unk.Where", span=""];
d83 [cluster="lambda expression", label="Entry lambda expression", span="76-81"];
d80 [cluster="lambda expression", label="return options.Select(s => new SequenceOutOfRangeError(\r\n                            NameExtensions.FromSpecification(s.Specification)));", span="85-86"];
d84 [cluster="lambda expression", color=green, community=0, label="sp.Specification.TargetType == TargetType.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min.FromJust())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max.FromJust())\r\n                        )", prediction=4, span="76-81"];
d85 [cluster="lambda expression", label="Exit lambda expression", span="76-81"];
d53 [cluster="CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", label="Entry CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", span="149-149"];
d86 [cluster="CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", label="Entry CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", span="134-134"];
d1 [cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", label="return new List<Func<IEnumerable<SpecificationProperty>, IEnumerable<Error>>>\r\n                {\r\n                    EnforceMutuallyExclusiveSet(),\r\n                    EnforceRequired(),\r\n                    EnforceRange(),\r\n                    EnforceSingle(tokens)\r\n                };", span="15-21"];
d40 [cluster="lambda expression", label="Entry lambda expression", span="45-68"];
d20 [cluster="Unk.Select", label="Entry Unk.Select", span=""];
d47 [cluster="Unk.ToList", label="Entry Unk.ToList", span=""];
d50 [cluster="lambda expression", label="Entry lambda expression", span="49-50"];
d54 [cluster="lambda expression", label="Entry lambda expression", span="51-51"];
d61 [cluster="lambda expression", label="sp.Value.IsNothing()\r\n                            && sp.Specification.Required\r\n                            && !setsWithTrue.Contains(((OptionSpecification)sp.Specification).SetName)", span="56-58"];
d48 [cluster="Unk.Concat", label="Entry Unk.Concat", span=""];
d57 [cluster="lambda expression", label="Entry lambda expression", span="55-55"];
d60 [cluster="lambda expression", label="Entry lambda expression", span="56-58"];
d65 [cluster="lambda expression", label="Entry lambda expression", span="60-62"];
d44 [cluster="lambda expression", label="return requiredButEmpty.Select(s =>new MissingRequiredOptionError(\r\n                            NameExtensions.FromSpecification(s.Specification)));", span="64-65"];
d49 [cluster="Unk.Any", label="Entry Unk.Any", span=""];
d15 [cluster="lambda expression", label="return Enumerable.Empty<Error>();", span="39-39"];
d81 [cluster="lambda expression", label="return Enumerable.Empty<Error>();", span="88-88"];
d82 [cluster="lambda expression", label="Exit lambda expression", span="73-89"];
d11 [cluster="lambda expression", label="var options = specProps\r\n                            .Where(sp => sp.Specification.IsOption())\r\n                            .Where(sp => ((OptionSpecification)sp.Specification).SetName.Length > 0\r\n                                   && sp.Value.IsJust())", span="28-31"];
d95 [cluster="lambda expression", label="var options = from t in tokens.Where(t => t.IsName())\r\n                                  join o in specs on t.Text equals o.UniqueName() into to\r\n                                  from o in to.DefaultIfEmpty()\r\n                                  where o != null\r\n                                  select new { o.ShortName, o.LongName }", span="99-103"];
d87 [cluster="lambda expression", label="Entry lambda expression", span="85-86"];
d51 [cluster="lambda expression", label="sp.Specification.IsOption()\r\n                            && sp.Value.IsJust() && sp.Specification.Required", span="49-50"];
d94 [cluster="lambda expression", label="var specs = from sp in specProps\r\n                                where sp.Specification.IsOption() && sp.Value.IsJust()\r\n                                select (OptionSpecification)sp.Specification", span="96-98"];
d0 [cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", label="Entry CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12"];
d2 [cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", label="Exit CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12"];
d3 [cluster="System.Collections.Generic.List<T>.List()", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
d4 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="24-24"];
d7 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="92-92"];
d14 [cluster="lambda expression", label="return options.Select(s =>\r\n                            new MutuallyExclusiveSetError(\r\n                                NameExtensions.FromOptionSpecification((OptionSpecification)s.Specification)));", span="35-37"];
d52 [cluster="lambda expression", label="Exit lambda expression", span="49-50"];
d56 [cluster="lambda expression", label="Exit lambda expression", span="51-51"];
d55 [cluster="lambda expression", label="((OptionSpecification)s.Specification).SetName", span="51-51"];
d108 [label=setsWithTrue, span=""];
d62 [cluster="lambda expression", label="Exit lambda expression", span="56-58"];
d63 [cluster="Unk.IsNothing", label="Entry Unk.IsNothing", span=""];
d64 [cluster="Unk.Contains", label="Entry Unk.Contains", span=""];
d59 [cluster="lambda expression", label="Exit lambda expression", span="55-55"];
d58 [cluster="lambda expression", label="sp.Specification.IsOption()", span="55-55"];
d67 [cluster="lambda expression", label="Exit lambda expression", span="60-62"];
d66 [cluster="lambda expression", label="sp.Specification.IsValue()\r\n                            && sp.Value.IsNothing()\r\n                            && sp.Specification.Required", span="60-62"];
d70 [cluster="lambda expression", label="Entry lambda expression", span="64-65"];
d13 [cluster="lambda expression", label="groups.Count() > 1", span="33-33"];
d16 [cluster="lambda expression", label="Exit lambda expression", span="26-40"];
d8 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", label="return specProps =>\r\n                {\r\n                    var options = specProps\r\n                            .Where(sp => sp.Specification.IsOption())\r\n                            .Where(sp => ((OptionSpecification)sp.Specification).SetName.Length > 0\r\n                                   && sp.Value.IsJust());\r\n                    var groups = options.GroupBy(g => ((OptionSpecification)g.Specification).SetName);\r\n                    if (groups.Count() > 1)\r\n                    {\r\n                        return options.Select(s =>\r\n                            new MutuallyExclusiveSetError(\r\n                                NameExtensions.FromOptionSpecification((OptionSpecification)s.Specification)));\r\n                    }\r\n                    return Enumerable.Empty<Error>();\r\n                };", span="26-40"];
d10 [cluster="lambda expression", label="Entry lambda expression", span="26-40"];
d12 [cluster="lambda expression", label="var groups = options.GroupBy(g => ((OptionSpecification)g.Specification).SetName)", span="32-32"];
d22 [cluster="lambda expression", label="Entry lambda expression", span="29-29"];
d26 [cluster="lambda expression", label="Entry lambda expression", span="30-31"];
d109 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", span=""];
d96 [cluster="lambda expression", label="var groups = from x in options\r\n                                 group x by x into g\r\n                                 let count = g.Count()\r\n                                 select new { Value = g.Key, Count = count }", span="104-107"];
d100 [cluster="Unk.UniqueName", label="Entry Unk.UniqueName", span=""];
d101 [cluster="Unk.DefaultIfEmpty", label="Entry Unk.DefaultIfEmpty", span=""];
d104 [cluster="lambda expression", label="Entry lambda expression", span="99-99"];
d89 [cluster="lambda expression", label="Exit lambda expression", span="85-86"];
d88 [cluster="lambda expression", label="new SequenceOutOfRangeError(\r\n                            NameExtensions.FromSpecification(s.Specification))", span="85-86"];
d25 [cluster="CommandLine.Core.Specification.IsOption()", label="Entry CommandLine.Core.Specification.IsOption()", span="10-10"];
d91 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", label="return specProps =>\r\n                {\r\n                    var specs = from sp in specProps\r\n                                where sp.Specification.IsOption() && sp.Value.IsJust()\r\n                                select (OptionSpecification)sp.Specification;\r\n                    var options = from t in tokens.Where(t => t.IsName())\r\n                                  join o in specs on t.Text equals o.UniqueName() into to\r\n                                  from o in to.DefaultIfEmpty()\r\n                                  where o != null\r\n                                  select new { o.ShortName, o.LongName };\r\n                    var groups = from x in options\r\n                                 group x by x into g\r\n                                 let count = g.Count()\r\n                                 select new { Value = g.Key, Count = count };\r\n                    var errors = from y in groups\r\n                                 where y.Count > 1\r\n                                 select new RepeatedOptionError(new NameInfo(y.Value.ShortName, y.Value.LongName));\r\n                    return errors;\r\n                };", span="94-112"];
d93 [cluster="lambda expression", label="Entry lambda expression", span="94-112"];
d9 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="24-24"];
d92 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="92-92"];
d33 [cluster="lambda expression", label="Entry lambda expression", span="35-37"];
d68 [cluster="CommandLine.Core.Specification.IsValue()", label="Entry CommandLine.Core.Specification.IsValue()", span="15-15"];
d69 [cluster="CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", label="Entry CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", span="144-144"];
d72 [cluster="lambda expression", label="Exit lambda expression", span="64-65"];
d71 [cluster="lambda expression", label="new MissingRequiredOptionError(\r\n                            NameExtensions.FromSpecification(s.Specification))", span="64-65"];
d19 [cluster="Unk.Count", label="Entry Unk.Count", span=""];
d18 [cluster="Unk.GroupBy", label="Entry Unk.GroupBy", span=""];
d30 [cluster="lambda expression", label="Entry lambda expression", span="32-32"];
d24 [cluster="lambda expression", label="Exit lambda expression", span="29-29"];
d23 [cluster="lambda expression", label="sp.Specification.IsOption()", span="29-29"];
d28 [cluster="lambda expression", label="Exit lambda expression", span="30-31"];
d27 [cluster="lambda expression", label="((OptionSpecification)sp.Specification).SetName.Length > 0\r\n                                   && sp.Value.IsJust()", span="30-31"];
d97 [cluster="lambda expression", label="var errors = from y in groups\r\n                                 where y.Count > 1\r\n                                 select new RepeatedOptionError(new NameInfo(y.Value.ShortName, y.Value.LongName))", span="108-110"];
d106 [cluster="lambda expression", label="Exit lambda expression", span="99-99"];
d105 [cluster="lambda expression", label="t.IsName()", span="99-99"];
d90 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="324-324"];
d74 [cluster="Unk.FromSpecification", label="Entry Unk.FromSpecification", span=""];
d99 [cluster="lambda expression", label="Exit lambda expression", span="94-112"];
d35 [cluster="lambda expression", label="Exit lambda expression", span="35-37"];
d34 [cluster="lambda expression", label="new MutuallyExclusiveSetError(\r\n                                NameExtensions.FromOptionSpecification((OptionSpecification)s.Specification))", span="36-37"];
d73 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="291-291"];
d32 [cluster="lambda expression", label="Exit lambda expression", span="32-32"];
d31 [cluster="lambda expression", label="((OptionSpecification)g.Specification).SetName", span="32-32"];
d29 [cluster="Unk.IsJust", label="Entry Unk.IsJust", span=""];
d98 [cluster="lambda expression", label="return errors;", span="111-111"];
d102 [cluster="CommandLine.RepeatedOptionError.RepeatedOptionError(CommandLine.NameInfo)", label="Entry CommandLine.RepeatedOptionError.RepeatedOptionError(CommandLine.NameInfo)", span="335-335"];
d103 [cluster="NameInfo.cstr", label="Entry NameInfo.cstr", span=""];
d107 [cluster="CommandLine.Core.Token.IsName()", label="Entry CommandLine.Core.Token.IsName()", span="68-68"];
d36 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="302-302"];
d37 [cluster="CommandLine.Core.NameExtensions.FromOptionSpecification(CommandLine.Core.OptionSpecification)", label="Entry CommandLine.Core.NameExtensions.FromOptionSpecification(CommandLine.Core.OptionSpecification)", span="15-15"];
m1_51 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", file="TokenGroup.cs", label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", span="95-95"];
m1_52 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", file="TokenGroup.cs", label="var sut = new HelpText { AddDashesToOption = true }\r\n                .AddPreOptionsLine(''pre-options'')\r\n                .AddOptions(new NotParsed<Options_With_Enum_Having_HelpText>(TypeInfo.Create(typeof(Options_With_Enum_Having_HelpText)), Enumerable.Empty<Error>()))\r\n                .AddPostOptionsLine(''post-options'')", span="99-102"];
m1_53 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", file="TokenGroup.cs", label="var lines = sut.ToString().ToNotEmptyLines().TrimStringArray()", span="106-106"];
m1_54 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", file="TokenGroup.cs", label="lines[0].ShouldBeEquivalentTo(''pre-options'')", span="107-107"];
m1_55 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", file="TokenGroup.cs", label="lines[1].ShouldBeEquivalentTo(''--stringvalue    Define a string value here.'')", span="108-108"];
m1_56 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", file="TokenGroup.cs", label="lines[2].ShouldBeEquivalentTo(''--shape          Define a enum value here.'')", span="109-109"];
m1_57 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", file="TokenGroup.cs", label="lines[3].ShouldBeEquivalentTo(''--help           Display this help screen.'')", span="110-110"];
m1_58 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", file="TokenGroup.cs", label="lines[4].ShouldBeEquivalentTo(''--version        Display version information.'')", span="111-111"];
m1_59 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", file="TokenGroup.cs", label="lines[5].ShouldBeEquivalentTo(''post-options'')", span="112-112"];
m1_60 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", file="TokenGroup.cs", label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", span="95-95"];
m1_16 [cluster="CommandLine.Text.HelpText.HelpText(string, string)", file="TokenGroup.cs", label="Entry CommandLine.Text.HelpText.HelpText(string, string)", span="83-83"];
m1_79 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column_given_width_of_100()", file="TokenGroup.cs", label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column_given_width_of_100()", span="158-158"];
m1_82 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column_given_width_of_100()", file="TokenGroup.cs", label="var lines = sut.ToString().Split(new[] { Environment.NewLine }, StringSplitOptions.None)", span="169-169"];
m1_83 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column_given_width_of_100()", file="TokenGroup.cs", label="lines[2].ShouldBeEquivalentTo(''  v, verbose    This is the description of the verbosity to test out the wrapping capabilities of '')", span="170-170"];
m1_84 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column_given_width_of_100()", file="TokenGroup.cs", label="lines[3].ShouldBeEquivalentTo(''                the Help Text.'')", span="172-172"];
m1_80 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column_given_width_of_100()", file="TokenGroup.cs", label="var sut = new HelpText(new HeadingInfo(''CommandLine.Tests.dll'', ''1.9.4.131'')) { MaximumDisplayWidth = 100}", span="162-162"];
m1_81 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column_given_width_of_100()", file="TokenGroup.cs", label="sut.AddOptions(\r\n                new NotParsed<Simple_Options_With_HelpText_Set_To_Long_Description>(\r\n                    TypeInfo.Create(typeof(Simple_Options_With_HelpText_Set_To_Long_Description)),\r\n                    Enumerable.Empty<Error>()))", span="163-166"];
m1_85 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column_given_width_of_100()", file="TokenGroup.cs", label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column_given_width_of_100()", span="158-158"];
m1_141 [cluster="CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)", file="TokenGroup.cs", label="Entry CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)", span="471-471"];
m1_22 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", file="TokenGroup.cs", label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", span="47-47"];
m1_23 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", file="TokenGroup.cs", label="var sut = new HelpText { AddDashesToOption = true }\r\n                .AddPreOptionsLine(''pre-options'')\r\n                .AddOptions(new NotParsed<Simple_Options>(TypeInfo.Create(typeof(Simple_Options)), Enumerable.Empty<Error>()))\r\n                .AddPostOptionsLine(''post-options'')", span="51-54"];
m1_24 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", file="TokenGroup.cs", label="var lines = sut.ToString().ToNotEmptyLines().TrimStringArray()", span="58-58"];
m1_25 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", file="TokenGroup.cs", label="lines[0].ShouldBeEquivalentTo(''pre-options'')", span="59-59"];
m1_26 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", file="TokenGroup.cs", label="lines[1].ShouldBeEquivalentTo(''--stringvalue         Define a string value here.'')", span="60-60"];
m1_27 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", file="TokenGroup.cs", label="lines[2].ShouldBeEquivalentTo(''-s, --shortandlong    Example with both short and long name.'')", span="61-61"];
m1_28 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", file="TokenGroup.cs", label="lines[3].ShouldBeEquivalentTo(''-i                    Define a int sequence here.'')", span="62-62"];
m1_29 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", file="TokenGroup.cs", label="lines[4].ShouldBeEquivalentTo(''-x                    Define a boolean or switch value here.'')", span="63-63"];
m1_30 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", file="TokenGroup.cs", label="lines[5].ShouldBeEquivalentTo(''--help                Display this help screen.'')", span="64-64"];
m1_31 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", file="TokenGroup.cs", label="lines[6].ShouldBeEquivalentTo(''--version             Display version information.'')", span="65-65"];
m1_32 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", file="TokenGroup.cs", label="lines[7].ShouldBeEquivalentTo(''value pos. 0          Define a long value here.'')", span="66-66"];
m1_33 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", file="TokenGroup.cs", label="lines[8].ShouldBeEquivalentTo(''post-options'')", span="67-67"];
m1_34 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", file="TokenGroup.cs", label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", span="47-47"];
m1_86 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_has_hidden_option_it_should_not_be_added_to_help_text_output()", file="TokenGroup.cs", label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_has_hidden_option_it_should_not_be_added_to_help_text_output()", span="177-177"];
m1_89 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_has_hidden_option_it_should_not_be_added_to_help_text_output()", file="TokenGroup.cs", label="var lines = sut.ToString().Split(new[] { Environment.NewLine }, StringSplitOptions.None)", span="188-188"];
m1_90 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_has_hidden_option_it_should_not_be_added_to_help_text_output()", file="TokenGroup.cs", label="lines[2].ShouldBeEquivalentTo(''  v, verbose    This is the description of the verbosity to test out the '')", span="189-189"];
m1_91 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_has_hidden_option_it_should_not_be_added_to_help_text_output()", file="TokenGroup.cs", label="lines[3].ShouldBeEquivalentTo(''                wrapping capabilities of the Help Text.'')", span="191-191"];
m1_87 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_has_hidden_option_it_should_not_be_added_to_help_text_output()", file="TokenGroup.cs", label="var sut = new HelpText(new HeadingInfo(''CommandLine.Tests.dll'', ''1.9.4.131''))", span="181-181"];
m1_88 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_has_hidden_option_it_should_not_be_added_to_help_text_output()", file="TokenGroup.cs", label="sut.AddOptions(\r\n                new NotParsed<Simple_Options_With_HelpText_Set_To_Long_Description>(\r\n                    TypeInfo.Create(typeof(Simple_Options_With_HelpText_Set_To_Long_Description)),\r\n                    Enumerable.Empty<Error>()))", span="182-185"];
m1_92 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_has_hidden_option_it_should_not_be_added_to_help_text_output()", file="TokenGroup.cs", label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_has_hidden_option_it_should_not_be_added_to_help_text_output()", span="177-177"];
m1_249 [cluster="CommandLine.Text.HelpText.RenderUsageText<T>(CommandLine.ParserResult<T>)", file="TokenGroup.cs", label="Entry CommandLine.Text.HelpText.RenderUsageText<T>(CommandLine.ParserResult<T>)", span="529-529"];
m1_93 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", file="TokenGroup.cs", label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", span="196-196"];
m1_97 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", file="TokenGroup.cs", label="var lines = sut.ToString().ToNotEmptyLines()", span="208-208"];
m1_98 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", file="TokenGroup.cs", label="lines[1].ShouldBeEquivalentTo(''  v, verbose    Before '')", span="209-209"];
m1_99 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", file="TokenGroup.cs", label="lines[2].ShouldBeEquivalentTo(''                012345678901234567890123'')", span="210-210"];
m1_100 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", file="TokenGroup.cs", label="lines[3].ShouldBeEquivalentTo(''                After'')", span="211-211"];
m1_101 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", file="TokenGroup.cs", label="lines[4].ShouldBeEquivalentTo(''  input-file    Before '')", span="212-212"];
m1_102 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", file="TokenGroup.cs", label="lines[5].ShouldBeEquivalentTo(''                012345678901234567890123'')", span="213-213"];
m1_103 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", file="TokenGroup.cs", label="lines[6].ShouldBeEquivalentTo(''                456789 After'')", span="214-214"];
m1_94 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", file="TokenGroup.cs", label="var sut = new HelpText(new HeadingInfo(''CommandLine.Tests.dll'', ''1.9.4.131''))", span="200-200"];
m1_96 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", file="TokenGroup.cs", label="sut.AddOptions(\r\n                new NotParsed<Simple_Options_With_HelpText_Set_To_Long_Description_Without_Spaces>(\r\n                    TypeInfo.Create(typeof(Simple_Options_With_HelpText_Set_To_Long_Description_Without_Spaces)),\r\n                    Enumerable.Empty<Error>()))", span="202-205"];
m1_95 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", file="TokenGroup.cs", label="sut.MaximumDisplayWidth = 40", span="201-201"];
m1_104 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", file="TokenGroup.cs", label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", span="196-196"];
m1_218 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="TokenGroup.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
m1_131 [cluster="CommandLine.BadFormatTokenError.BadFormatTokenError(string)", file="TokenGroup.cs", label="Entry CommandLine.BadFormatTokenError.BadFormatTokenError(string)", span="221-221"];
m1_220 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", file="TokenGroup.cs", label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", span="435-435"];
m1_221 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", file="TokenGroup.cs", label="var sut = new HelpText { AddDashesToOption = true }\r\n                .AddPreOptionsLine(''pre-options'')\r\n                .AddOptions(new NotParsed<Options_With_HelpText_And_MetaValue>(TypeInfo.Create(typeof(Options_With_HelpText_And_MetaValue)), Enumerable.Empty<Error>()))\r\n                .AddPostOptionsLine(''post-options'')", span="439-442"];
m1_222 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", file="TokenGroup.cs", label="var lines = sut.ToString().ToNotEmptyLines().TrimStringArray()", span="446-446"];
m1_223 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", file="TokenGroup.cs", label="lines[0].ShouldBeEquivalentTo(''pre-options'')", span="447-447"];
m1_224 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", file="TokenGroup.cs", label="lines[1].ShouldBeEquivalentTo(''--stringvalue=STR            Define a string value here.'')", span="448-448"];
m1_225 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", file="TokenGroup.cs", label="lines[2].ShouldBeEquivalentTo(''-i INTSEQ                    Define a int sequence here.'')", span="449-449"];
m1_226 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", file="TokenGroup.cs", label="lines[3].ShouldBeEquivalentTo(''-x                           Define a boolean or switch value here.'')", span="450-450"];
m1_227 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", file="TokenGroup.cs", label="lines[4].ShouldBeEquivalentTo(''--help                       Display this help screen.'')", span="451-451"];
m1_228 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", file="TokenGroup.cs", label="lines[5].ShouldBeEquivalentTo(''--version                    Display version information.'')", span="452-452"];
m1_229 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", file="TokenGroup.cs", label="lines[6].ShouldBeEquivalentTo(''number (pos. 0) NUM          Define a long value here.'')", span="453-453"];
m1_230 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", file="TokenGroup.cs", label="lines[7].ShouldBeEquivalentTo(''paintcolor (pos. 1) COLOR    Define a color value here.'')", span="454-454"];
m1_231 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", file="TokenGroup.cs", label="lines[8].ShouldBeEquivalentTo(''post-options'', lines[8])", span="455-455"];
m1_232 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", file="TokenGroup.cs", label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", span="435-435"];
m1_164 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", span="301-301"];
m1_167 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="var lines = helpText.ToString().ToNotEmptyLines().TrimStringArray()", span="316-316"];
m1_170 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="lines[2].ShouldBeEquivalentTo(''ERROR(S):'')", span="325-325"];
m1_171 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="lines[3].ShouldBeEquivalentTo(''Token 'badtoken' is not recognized.'')", span="326-326"];
m1_172 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="lines[4].ShouldBeEquivalentTo(''A sequence option 'i' is defined with fewer or more items than required.'')", span="327-327"];
m1_173 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="lines[5].ShouldBeEquivalentTo(''--stringvalue         Define a string value here.'')", span="328-328"];
m1_174 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="lines[6].ShouldBeEquivalentTo(''-s, --shortandlong    Example with both short and long name.'')", span="329-329"];
m1_175 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="lines[7].ShouldBeEquivalentTo(''-i                    Define a int sequence here.'')", span="330-330"];
m1_176 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="lines[8].ShouldBeEquivalentTo(''-x                    Define a boolean or switch value here.'')", span="331-331"];
m1_177 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="lines[9].ShouldBeEquivalentTo(''--help                Display this help screen.'')", span="332-332"];
m1_166 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="var helpText = HelpText.AutoBuild(fakeResult)", span="313-313"];
m1_168 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="318-318"];
m1_169 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="lines[1].Should().StartWithEquivalent(''Copyright (c)'')", span="319-319"];
m1_165 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="var fakeResult = new NotParsed<Simple_Options>(\r\n                TypeInfo.Create(typeof(Simple_Options)),\r\n                new Error[]\r\n                    {\r\n                        new BadFormatTokenError(''badtoken''),\r\n                        new SequenceOutOfRangeError(new NameInfo(''i'', ''''))\r\n                    })", span="304-310"];
m1_178 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", span="301-301"];
m1_67 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column_given_width_of_40()", file="TokenGroup.cs", label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column_given_width_of_40()", span="133-133"];
m1_71 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column_given_width_of_40()", file="TokenGroup.cs", label="var lines = sut.ToString().Split(new[] { Environment.NewLine }, StringSplitOptions.None)", span="145-145"];
m1_72 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column_given_width_of_40()", file="TokenGroup.cs", label="lines[2].ShouldBeEquivalentTo(''  v, verbose    This is the description'')", span="146-146"];
m1_73 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column_given_width_of_40()", file="TokenGroup.cs", label="lines[3].ShouldBeEquivalentTo(''                of the verbosity to '')", span="148-148"];
m1_74 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column_given_width_of_40()", file="TokenGroup.cs", label="lines[4].ShouldBeEquivalentTo(''                test out the wrapping '')", span="149-149"];
m1_75 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column_given_width_of_40()", file="TokenGroup.cs", label="lines[5].ShouldBeEquivalentTo(''                capabilities of the '')", span="150-150"];
m1_76 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column_given_width_of_40()", file="TokenGroup.cs", label="lines[6].ShouldBeEquivalentTo(''                Help Text.'')", span="151-151"];
m1_68 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column_given_width_of_40()", file="TokenGroup.cs", label="var sut = new HelpText(new HeadingInfo(''CommandLine.Tests.dll'', ''1.9.4.131''))", span="137-137"];
m1_70 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column_given_width_of_40()", file="TokenGroup.cs", label="sut.AddOptions(\r\n                new NotParsed<Simple_Options_With_HelpText_Set_To_Long_Description>(\r\n                    TypeInfo.Create(typeof(Simple_Options_With_HelpText_Set_To_Long_Description)),\r\n                    Enumerable.Empty<Error>()))", span="139-142"];
m1_69 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column_given_width_of_40()", file="TokenGroup.cs", label="sut.MaximumDisplayWidth = 40", span="138-138"];
m1_77 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column_given_width_of_40()", file="TokenGroup.cs", label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column_given_width_of_40()", span="133-133"];
m1_40 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", file="TokenGroup.cs", label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", span="72-72"];
m1_41 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", file="TokenGroup.cs", label="var sut = new HelpText { AddDashesToOption = true, AddEnumValuesToHelpText = true }\r\n                .AddPreOptionsLine(''pre-options'')\r\n                .AddOptions(new NotParsed<Options_With_Enum_Having_HelpText>(TypeInfo.Create(typeof(Options_With_Enum_Having_HelpText)), Enumerable.Empty<Error>()))\r\n                .AddPostOptionsLine(''post-options'')", span="76-79"];
m1_42 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", file="TokenGroup.cs", label="var lines = sut.ToString().ToNotEmptyLines().TrimStringArray()", span="83-83"];
m1_43 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", file="TokenGroup.cs", label="lines[0].ShouldBeEquivalentTo(''pre-options'')", span="84-84"];
m1_44 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", file="TokenGroup.cs", label="lines[1].ShouldBeEquivalentTo(''--stringvalue    Define a string value here.'')", span="85-85"];
m1_45 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", file="TokenGroup.cs", label="lines[2].ShouldBeEquivalentTo(''--shape          Define a enum value here. Valid values: Circle, Square,'')", span="86-86"];
m1_46 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", file="TokenGroup.cs", label="lines[3].ShouldBeEquivalentTo(''Triangle'')", span="87-87"];
m1_47 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", file="TokenGroup.cs", label="lines[4].ShouldBeEquivalentTo(''--help           Display this help screen.'')", span="88-88"];
m1_48 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", file="TokenGroup.cs", label="lines[5].ShouldBeEquivalentTo(''--version        Display version information.'')", span="89-89"];
m1_49 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", file="TokenGroup.cs", label="lines[6].ShouldBeEquivalentTo(''post-options'')", span="90-90"];
m1_50 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", file="TokenGroup.cs", label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", span="72-72"];
m1_105 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", file="TokenGroup.cs", label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", span="219-219"];
m1_109 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", file="TokenGroup.cs", label="var lines = sut.ToString().ToNotEmptyLines()", span="230-230"];
m1_110 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", file="TokenGroup.cs", label="lines[1].ShouldBeEquivalentTo(''Before '')", span="231-231"];
m1_111 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", file="TokenGroup.cs", label="lines[2].ShouldBeEquivalentTo(''0123456789012345678901234567890123456789'')", span="232-232"];
m1_112 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", file="TokenGroup.cs", label="lines[3].ShouldBeEquivalentTo(''012 After'')", span="233-233"];
m1_113 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", file="TokenGroup.cs", label="lines[lines.Length - 3].ShouldBeEquivalentTo(''Before '')", span="234-234"];
m1_114 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", file="TokenGroup.cs", label="lines[lines.Length - 2].ShouldBeEquivalentTo(''0123456789012345678901234567890123456789'')", span="235-235"];
m1_115 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", file="TokenGroup.cs", label="lines[lines.Length - 1].ShouldBeEquivalentTo('' After'')", span="236-236"];
m1_108 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", file="TokenGroup.cs", label="sut.AddPreOptionsLine(''Before 0123456789012345678901234567890123456789012 After'')\r\n                .AddOptions(new NotParsed<Simple_Options_Without_HelpText>(TypeInfo.Create(typeof(Simple_Options_Without_HelpText)), Enumerable.Empty<Error>()))\r\n                .AddPostOptionsLine(''Before 0123456789012345678901234567890123456789 After'')", span="225-227"];
m1_106 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", file="TokenGroup.cs", label="var sut = new HelpText(''Heading Info.'')", span="223-223"];
m1_107 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", file="TokenGroup.cs", label="sut.MaximumDisplayWidth = 40", span="224-224"];
m1_116 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", file="TokenGroup.cs", label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", span="219-219"];
m1_205 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", span="402-402"];
m1_209 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="var lines = helpText.ToString().ToNotEmptyLines().TrimStringArray()", span="416-416"];
m1_212 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="lines[2].ShouldBeEquivalentTo(''add        Add file contents to the index.'')", span="426-426"];
m1_213 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="lines[3].ShouldBeEquivalentTo(''commit     Record changes to the repository.'')", span="427-427"];
m1_214 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="lines[4].ShouldBeEquivalentTo(''clone      Clone a repository into a new directory.'')", span="428-428"];
m1_215 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="lines[5].ShouldBeEquivalentTo(''help       Display more information on a specific command.'')", span="429-429"];
m1_216 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="lines[6].ShouldBeEquivalentTo(''version    Display version information.'')", span="430-430"];
m1_208 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="var helpText = HelpText.AutoBuild(fakeResult)", span="413-413"];
m1_210 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="419-419"];
m1_211 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="lines[1].Should().StartWithEquivalent(''Copyright (c)'')", span="420-420"];
m1_207 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="var fakeResult = new NotParsed<object>(\r\n                TypeInfo.Create(typeof(NullInstance),\r\n                    verbTypes),\r\n                new Error[] { new HelpVerbRequestedError(null, null, false) })", span="407-410"];
m1_206 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="var verbTypes = Enumerable.Empty<Type>().Concat(\r\n                new[] { typeof(Add_Verb), typeof(Commit_Verb), typeof(Clone_Verb) })", span="405-406"];
m1_217 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", span="402-402"];
m1_0 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_empty_instance()", file="TokenGroup.cs", label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Create_empty_instance()", span="17-17"];
m1_1 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_empty_instance()", color=green, community=0, file="TokenGroup.cs", label="string.Empty.ShouldBeEquivalentTo(new HelpText().ToString())", prediction=5, span="19-19"];
m1_2 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_empty_instance()", file="TokenGroup.cs", label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Create_empty_instance()", span="17-17"];
m1_295 [cluster="System.Type.ToTypeInfo()", file="TokenGroup.cs", label="Entry System.Type.ToTypeInfo()", span="178-178"];
m1_293 [cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="TokenGroup.cs", label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0"];
m1_160 [cluster="System.InvalidOperationException.InvalidOperationException()", file="TokenGroup.cs", label="Entry System.InvalidOperationException.InvalidOperationException()", span="0-0"];
m1_37 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="TokenGroup.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m1_39 [cluster="System.Collections.Generic.IEnumerable<string>.TrimStringArray()", file="TokenGroup.cs", label="Entry System.Collections.Generic.IEnumerable<string>.TrimStringArray()", span="15-15"];
m1_35 [cluster="CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="TokenGroup.cs", label="Entry CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="163-163"];
m1_138 [cluster="CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", file="TokenGroup.cs", label="Entry CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", span="382-382"];
m1_3 [cluster="CommandLine.Text.HelpText.HelpText()", file="TokenGroup.cs", label="Entry CommandLine.Text.HelpText.HelpText()", span="37-37"];
m1_61 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_defined_MetaValue_should_be_rendered()", file="TokenGroup.cs", label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.When_defined_MetaValue_should_be_rendered()", span="117-117"];
m1_63 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_defined_MetaValue_should_be_rendered()", file="TokenGroup.cs", label="var lines = sut.ToString().ToNotEmptyLines().TrimStringArray()", span="126-126"];
m1_64 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_defined_MetaValue_should_be_rendered()", file="TokenGroup.cs", label="lines[2].ShouldBeEquivalentTo(''i FILE, input-file=FILE    Required. Specify input FILE to be processed.'')", span="128-128"];
m1_62 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_defined_MetaValue_should_be_rendered()", file="TokenGroup.cs", label="var sut =\r\n                new HelpText(''Meta Value.'').AddOptions(\r\n                    new NotParsed<Options_With_MetaValue>(TypeInfo.Create(typeof(Options_With_MetaValue)), Enumerable.Empty<Error>()))", span="121-123"];
m1_65 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_defined_MetaValue_should_be_rendered()", file="TokenGroup.cs", label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.When_defined_MetaValue_should_be_rendered()", span="117-117"];
m1_19 [cluster="CommandLine.Text.HelpText.AddPreOptionsLine(string)", file="TokenGroup.cs", label="Entry CommandLine.Text.HelpText.AddPreOptionsLine(string)", span="335-335"];
m1_233 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.RenderUsageText_returns_properly_formatted_text()", file="TokenGroup.cs", label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.RenderUsageText_returns_properly_formatted_text()", span="460-460"];
m1_237 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.RenderUsageText_returns_properly_formatted_text()", file="TokenGroup.cs", label="lines[0].ShouldBeEquivalentTo(''Normal scenario:'')", span="474-474"];
m1_238 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.RenderUsageText_returns_properly_formatted_text()", file="TokenGroup.cs", label="lines[1].ShouldBeEquivalentTo(''  mono testapp.exe --input file.bin --output out.bin'')", span="475-475"];
m1_239 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.RenderUsageText_returns_properly_formatted_text()", file="TokenGroup.cs", label="lines[2].ShouldBeEquivalentTo(''Logging warnings:'')", span="476-476"];
m1_240 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.RenderUsageText_returns_properly_formatted_text()", file="TokenGroup.cs", label="lines[3].ShouldBeEquivalentTo(''  mono testapp.exe -w --input file.bin'')", span="477-477"];
m1_241 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.RenderUsageText_returns_properly_formatted_text()", file="TokenGroup.cs", label="lines[4].ShouldBeEquivalentTo(''Logging errors:'')", span="478-478"];
m1_242 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.RenderUsageText_returns_properly_formatted_text()", file="TokenGroup.cs", label="lines[5].ShouldBeEquivalentTo(''  mono testapp.exe -e --input file.bin'')", span="479-479"];
m1_243 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.RenderUsageText_returns_properly_formatted_text()", file="TokenGroup.cs", label="lines[6].ShouldBeEquivalentTo(''  mono testapp.exe --errs --input=file.bin'')", span="480-480"];
m1_244 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.RenderUsageText_returns_properly_formatted_text()", file="TokenGroup.cs", label="lines[7].ShouldBeEquivalentTo(''List:'')", span="481-481"];
m1_245 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.RenderUsageText_returns_properly_formatted_text()", file="TokenGroup.cs", label="lines[8].ShouldBeEquivalentTo(''  mono testapp.exe -l 1,2'')", span="482-482"];
m1_246 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.RenderUsageText_returns_properly_formatted_text()", file="TokenGroup.cs", label="lines[9].ShouldBeEquivalentTo(''Value:'')", span="483-483"];
m1_247 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.RenderUsageText_returns_properly_formatted_text()", file="TokenGroup.cs", label="lines[10].ShouldBeEquivalentTo(''  mono testapp.exe value'')", span="484-484"];
m1_236 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.RenderUsageText_returns_properly_formatted_text()", file="TokenGroup.cs", label="var lines = text.ToNotEmptyLines()", span="471-471"];
m1_235 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.RenderUsageText_returns_properly_formatted_text()", file="TokenGroup.cs", label="var text = HelpText.RenderUsageText(result)", span="468-468"];
m1_234 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.RenderUsageText_returns_properly_formatted_text()", file="TokenGroup.cs", label="ParserResult<Options_With_Usage_Attribute> result =\r\n                new NotParsed<Options_With_Usage_Attribute>(\r\n                    TypeInfo.Create(typeof(Options_With_Usage_Attribute)), Enumerable.Empty<Error>())", span="463-465"];
m1_248 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.RenderUsageText_returns_properly_formatted_text()", file="TokenGroup.cs", label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.RenderUsageText_returns_properly_formatted_text()", span="460-460"];
m1_140 [cluster="CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", file="TokenGroup.cs", label="Entry CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", span="408-408"];
m1_136 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="TokenGroup.cs", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="360-360"];
m1_281 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Default_set_to_sequence_should_be_properly_printed()", file="TokenGroup.cs", label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Default_set_to_sequence_should_be_properly_printed()", span="541-541"];
m1_287 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Default_set_to_sequence_should_be_properly_printed()", file="TokenGroup.cs", label="var text = helpText.ToString()", span="556-556"];
m1_288 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Default_set_to_sequence_should_be_properly_printed()", file="TokenGroup.cs", label="var lines = text.ToNotEmptyLines().TrimStringArray()", span="557-557"];
m1_286 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Default_set_to_sequence_should_be_properly_printed()", file="TokenGroup.cs", label="handlers.ResetCulture()", span="553-553"];
m1_285 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Default_set_to_sequence_should_be_properly_printed()", file="TokenGroup.cs", label="var helpText = HelpText.AutoBuild(fakeResult)", span="552-552"];
m1_289 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Default_set_to_sequence_should_be_properly_printed()", file="TokenGroup.cs", label="lines[4].Should().Be(''-z, --strseq    (Default: a b c)'')", span="559-559"];
m1_290 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Default_set_to_sequence_should_be_properly_printed()", file="TokenGroup.cs", label="lines[5].Should().Be(''-y, --intseq    (Default: 1 2 3)'')", span="560-560"];
m1_291 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Default_set_to_sequence_should_be_properly_printed()", file="TokenGroup.cs", label="lines[6].Should().Be(''-q, --dblseq    (Default: 1.1 2.2 3.3)'')", span="561-561"];
m1_283 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Default_set_to_sequence_should_be_properly_printed()", file="TokenGroup.cs", label="var fakeResult =\r\n                new NotParsed<Options_With_Default_Set_To_Sequence>(\r\n                    typeof(Options_With_Default_Set_To_Sequence).ToTypeInfo(),\r\n                    new Error[] { new BadFormatTokenError(''badtoken'') })", span="545-548"];
m1_282 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Default_set_to_sequence_should_be_properly_printed()", file="TokenGroup.cs", label="var handlers = new CultureInfo(''en-US'').MakeCultureHandlers()", span="544-544"];
m1_284 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Default_set_to_sequence_should_be_properly_printed()", file="TokenGroup.cs", label="handlers.ChangeCulture()", span="551-551"];
m1_292 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Default_set_to_sequence_should_be_properly_printed()", file="TokenGroup.cs", label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Default_set_to_sequence_should_be_properly_printed()", span="541-541"];
m1_38 [cluster="CommandLine.Text.HelpText.AddOptions<T>(CommandLine.ParserResult<T>)", file="TokenGroup.cs", label="Entry CommandLine.Text.HelpText.AddOptions<T>(CommandLine.ParserResult<T>)", span="402-402"];
m1_179 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, int)", file="TokenGroup.cs", label="Entry CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, int)", span="273-273"];
m1_219 [cluster="CommandLine.TypeInfo.Create(System.Type, System.Collections.Generic.IEnumerable<System.Type>)", file="TokenGroup.cs", label="Entry CommandLine.TypeInfo.Create(System.Type, System.Collections.Generic.IEnumerable<System.Type>)", span="34-34"];
m1_36 [cluster="CommandLine.TypeInfo.Create(System.Type)", file="TokenGroup.cs", label="Entry CommandLine.TypeInfo.Create(System.Type)", span="29-29"];
m1_142 [cluster="lambda expression", file="TokenGroup.cs", label="Entry lambda expression", span="259-280"];
m1_143 [cluster="lambda expression", file="TokenGroup.cs", label="err.Tag", span="261-261"];
m1_145 [cluster="lambda expression", file="TokenGroup.cs", label="return ''ERR '' + ((BadFormatTokenError)err).Token;", span="264-264"];
m1_147 [cluster="lambda expression", file="TokenGroup.cs", label="return ''ERR '' + ((MissingValueOptionError)err).NameInfo.NameText;", span="266-266"];
m1_149 [cluster="lambda expression", file="TokenGroup.cs", label="return ''ERR '' + ((UnknownOptionError)err).Token;", span="268-268"];
m1_151 [cluster="lambda expression", file="TokenGroup.cs", label="return ''ERR '' + ((MissingRequiredOptionError)err).NameInfo.NameText;", span="270-270"];
m1_153 [cluster="lambda expression", file="TokenGroup.cs", label="return ''ERR '' + ((SequenceOutOfRangeError)err).NameInfo.NameText;", span="272-272"];
m1_157 [cluster="lambda expression", file="TokenGroup.cs", label="return ''ERR '' + ((BadVerbSelectedError)err).Token;", span="276-276"];
m1_144 [cluster="lambda expression", file="TokenGroup.cs", label="ErrorType.BadFormatTokenError", span="263-263"];
m1_146 [cluster="lambda expression", file="TokenGroup.cs", label="ErrorType.MissingValueOptionError", span="265-265"];
m1_148 [cluster="lambda expression", file="TokenGroup.cs", label="ErrorType.UnknownOptionError", span="267-267"];
m1_150 [cluster="lambda expression", file="TokenGroup.cs", label="ErrorType.MissingRequiredOptionError", span="269-269"];
m1_152 [cluster="lambda expression", file="TokenGroup.cs", label="ErrorType.SequenceOutOfRangeError", span="271-271"];
m1_154 [cluster="lambda expression", file="TokenGroup.cs", label="ErrorType.NoVerbSelectedError", span="273-273"];
m1_156 [cluster="lambda expression", file="TokenGroup.cs", label="ErrorType.BadVerbSelectedError", span="275-275"];
m1_158 [cluster="lambda expression", file="TokenGroup.cs", label="throw new InvalidOperationException();", span="278-278"];
m1_155 [cluster="lambda expression", file="TokenGroup.cs", label="return ''ERR no-verb-selected'';", span="274-274"];
m1_159 [cluster="lambda expression", file="TokenGroup.cs", label="Exit lambda expression", span="259-280"];
m1_66 [cluster="CommandLine.Text.HelpText.HelpText(string)", file="TokenGroup.cs", label="Entry CommandLine.Text.HelpText.HelpText(string)", span="60-60"];
m1_132 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="TokenGroup.cs", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="294-294"];
m1_180 [cluster="Unk.Should", file="TokenGroup.cs", label="Entry Unk.Should", span=""];
m1_294 [cluster="System.Globalization.CultureInfo.MakeCultureHandlers()", file="TokenGroup.cs", label="Entry System.Globalization.CultureInfo.MakeCultureHandlers()", span="17-17"];
m1_297 [cluster="Unk.Be", file="TokenGroup.cs", label="Entry Unk.Be", span=""];
m1_4 [cluster="CommandLine.Text.HelpText.ToString()", file="TokenGroup.cs", label="Entry CommandLine.Text.HelpText.ToString()", span="593-593"];
m1_181 [cluster="Unk.StartWithEquivalent", file="TokenGroup.cs", label="Entry Unk.StartWithEquivalent", span=""];
m1_137 [cluster="CommandLine.NoVerbSelectedError.NoVerbSelectedError()", file="TokenGroup.cs", label="Entry CommandLine.NoVerbSelectedError.NoVerbSelectedError()", span="446-446"];
m1_17 [cluster="CommandLine.Text.HeadingInfo.HeadingInfo(string, string)", file="TokenGroup.cs", label="Entry CommandLine.Text.HeadingInfo.HeadingInfo(string, string)", span="27-27"];
m1_134 [cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", file="TokenGroup.cs", label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="305-305"];
m1_18 [cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])", file="TokenGroup.cs", label="Entry CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])", span="60-60"];
m1_20 [cluster="CommandLine.Text.HelpText.AddPostOptionsLine(string)", file="TokenGroup.cs", label="Entry CommandLine.Text.HelpText.AddPostOptionsLine(string)", span="346-346"];
m1_21 [cluster="string.ToNotEmptyLines()", file="TokenGroup.cs", label="Entry string.ToNotEmptyLines()", span="10-10"];
m1_194 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text_given_display_width_100()", file="TokenGroup.cs", label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text_given_display_width_100()", span="370-370"];
m1_197 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text_given_display_width_100()", file="TokenGroup.cs", label="var lines = helpText.ToString().ToNotEmptyLines().TrimStringArray()", span="384-384"];
m1_199 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text_given_display_width_100()", file="TokenGroup.cs", label="lines[1].ShouldBeEquivalentTo(''Copyright (c) 2005 - 2015 Giacomo Stelluti Scala'')", span="388-388"];
m1_200 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text_given_display_width_100()", file="TokenGroup.cs", label="lines[2].ShouldBeEquivalentTo(''-p, --patch      Use the interactive patch selection interface to chose which changes to commit.'')", span="394-394"];
m1_201 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text_given_display_width_100()", file="TokenGroup.cs", label="lines[3].ShouldBeEquivalentTo(''--amend          Used to amend the tip of the current branch.'')", span="395-395"];
m1_202 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text_given_display_width_100()", file="TokenGroup.cs", label="lines[4].ShouldBeEquivalentTo(''-m, --message    Use the given message as the commit message.'')", span="396-396"];
m1_203 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text_given_display_width_100()", file="TokenGroup.cs", label="lines[5].ShouldBeEquivalentTo(''--help           Display this help screen.'')", span="397-397"];
m1_196 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text_given_display_width_100()", file="TokenGroup.cs", label="var helpText = HelpText.AutoBuild(fakeResult, maxDisplayWidth: 100)", span="381-381"];
m1_198 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text_given_display_width_100()", file="TokenGroup.cs", label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="387-387"];
m1_195 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text_given_display_width_100()", file="TokenGroup.cs", label="var fakeResult = new NotParsed<object>(\r\n                TypeInfo.Create(typeof(NullInstance)),\r\n                new Error[]\r\n                    {\r\n                        new HelpVerbRequestedError(''commit'', typeof(Commit_Verb), true)\r\n                    })", span="373-378"];
m1_204 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text_given_display_width_100()", file="TokenGroup.cs", label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text_given_display_width_100()", span="370-370"];
m1_250 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", span="488-488"];
m1_253 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="var text = helpText.ToString()", span="502-502"];
m1_257 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="lines[2].ShouldBeEquivalentTo(''ERROR(S):'')", span="512-512"];
m1_258 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="lines[3].ShouldBeEquivalentTo(''Token 'badtoken' is not recognized.'')", span="513-513"];
m1_259 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="lines[4].ShouldBeEquivalentTo(''USAGE:'')", span="514-514"];
m1_260 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="lines[5].ShouldBeEquivalentTo(''Normal scenario:'')", span="515-515"];
m1_261 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="lines[6].ShouldBeEquivalentTo(''mono testapp.exe --input file.bin --output out.bin'')", span="516-516"];
m1_262 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="lines[7].ShouldBeEquivalentTo(''Logging warnings:'')", span="517-517"];
m1_263 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="lines[8].ShouldBeEquivalentTo(''mono testapp.exe -w --input file.bin'')", span="518-518"];
m1_264 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="lines[9].ShouldBeEquivalentTo(''Logging errors:'')", span="519-519"];
m1_265 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="lines[10].ShouldBeEquivalentTo(''mono testapp.exe -e --input file.bin'')", span="520-520"];
m1_266 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="lines[11].ShouldBeEquivalentTo(''mono testapp.exe --errs --input=file.bin'')", span="521-521"];
m1_267 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="lines[12].ShouldBeEquivalentTo(''List:'')", span="522-522"];
m1_268 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="lines[13].ShouldBeEquivalentTo(''mono testapp.exe -l 1,2'')", span="523-523"];
m1_269 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="lines[14].ShouldBeEquivalentTo(''Value:'')", span="524-524"];
m1_270 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="lines[15].ShouldBeEquivalentTo(''mono testapp.exe value'')", span="525-525"];
m1_271 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="lines[16].ShouldBeEquivalentTo(''-i, --input     Set input file.'')", span="526-526"];
m1_272 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="lines[17].ShouldBeEquivalentTo(''-i, --output    Set output file.'')", span="527-527"];
m1_273 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="lines[18].ShouldBeEquivalentTo(''--verbose       Set verbosity level.'')", span="528-528"];
m1_274 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="lines[19].ShouldBeEquivalentTo(''-w, --warns     Log warnings.'')", span="529-529"];
m1_275 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="lines[20].ShouldBeEquivalentTo(''-e, --errs      Log errors.'')", span="530-530"];
m1_276 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="lines[21].ShouldBeEquivalentTo(''-l              List.'')", span="531-531"];
m1_277 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="lines[22].ShouldBeEquivalentTo(''--help          Display this help screen.'')", span="532-532"];
m1_278 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="lines[23].ShouldBeEquivalentTo(''--version       Display version information.'')", span="533-533"];
m1_279 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="lines[24].ShouldBeEquivalentTo(''value pos. 0    Value.'')", span="534-534"];
m1_254 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="var lines = text.ToNotEmptyLines().TrimStringArray()", span="503-503"];
m1_252 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="var helpText = HelpText.AutoBuild(fakeResult)", span="499-499"];
m1_256 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="lines[1].Should().StartWithEquivalent(''Copyright (c)'')", span="506-506"];
m1_255 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="505-505"];
m1_251 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="var fakeResult = new NotParsed<Options_With_Usage_Attribute>(\r\n                TypeInfo.Create(typeof(Options_With_Usage_Attribute)),\r\n                new Error[]\r\n                    {\r\n                        new BadFormatTokenError(''badtoken'')\r\n                    })", span="491-496"];
m1_280 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_with_Usage_returns_appropriate_formatted_text()", span="488-488"];
m1_133 [cluster="CommandLine.NameInfo.NameInfo(string, string)", file="TokenGroup.cs", label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20"];
m1_6 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", file="TokenGroup.cs", label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", span="23-23"];
m1_7 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", color=green, community=0, file="TokenGroup.cs", label="var sut =\r\n                new HelpText(new HeadingInfo(''Unit-tests'', ''2.0''), new CopyrightInfo(true, ''Author'', 2005, 2013))\r\n                    .AddPreOptionsLine(''pre-options line 1'')\r\n                    .AddPreOptionsLine(''pre-options line 2'')\r\n                    .AddPostOptionsLine(''post-options line 1'')\r\n                    .AddPostOptionsLine(''post-options line 2'')", prediction=6, span="27-32"];
m1_8 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", color=green, community=0, file="TokenGroup.cs", label="var lines = sut.ToString().ToNotEmptyLines()", prediction=7, span="35-35"];
m1_9 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", color=green, community=0, file="TokenGroup.cs", label="lines[0].ShouldBeEquivalentTo(''Unit-tests 2.0'')", prediction=8, span="37-37"];
m1_10 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", color=green, community=0, file="TokenGroup.cs", label="lines[1].ShouldBeEquivalentTo(''Copyright (C) 2005 - 2013 Author'')", prediction=7, span="38-38"];
m1_11 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", color=green, community=0, file="TokenGroup.cs", label="lines[2].ShouldBeEquivalentTo(''pre-options line 1'')", prediction=7, span="39-39"];
m1_12 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", color=green, community=0, file="TokenGroup.cs", label="lines[3].ShouldBeEquivalentTo(''pre-options line 2'')", prediction=7, span="40-40"];
m1_13 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", color=green, community=0, file="TokenGroup.cs", label="lines[4].ShouldBeEquivalentTo(''post-options line 1'')", prediction=7, span="41-41"];
m1_14 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", color=green, community=0, file="TokenGroup.cs", label="lines[5].ShouldBeEquivalentTo(''post-options line 2'')", prediction=7, span="42-42"];
m1_15 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", file="TokenGroup.cs", label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", span="23-23"];
m1_117 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", span="242-242"];
m1_123 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="lines[0].ShouldBeEquivalentTo(''  ERR badtoken'')", span="290-290"];
m1_124 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="lines[1].ShouldBeEquivalentTo(''  ERR x, switch'')", span="291-291"];
m1_125 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="lines[2].ShouldBeEquivalentTo(''  ERR unknown'')", span="292-292"];
m1_126 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="lines[3].ShouldBeEquivalentTo(''  ERR missing'')", span="293-293"];
m1_127 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="lines[4].ShouldBeEquivalentTo(''  ERR s, sequence'')", span="294-294"];
m1_128 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="lines[5].ShouldBeEquivalentTo(''  ERR no-verb-selected'')", span="295-295"];
m1_129 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="lines[6].ShouldBeEquivalentTo(''  ERR badverb'')", span="296-296"];
m1_122 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="var lines = errorsText.ToNotEmptyLines()", span="288-288"];
m1_121 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="var errorsText = HelpText.RenderParsingErrorsText(fakeResult, fakeRenderer, fakeMutExclRenderer, 2)", span="285-285"];
m1_118 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="var fakeResult = new NotParsed<object>(\r\n                TypeInfo.Create(typeof(NullInstance)),\r\n                new Error[]\r\n                    {\r\n                        new BadFormatTokenError(''badtoken''),\r\n                        new MissingValueOptionError(new NameInfo(''x'', ''switch'')),\r\n                        new UnknownOptionError(''unknown''),\r\n                        new MissingRequiredOptionError(new NameInfo('''', ''missing'')),\r\n                        new SequenceOutOfRangeError(new NameInfo(''s'', ''sequence'')),\r\n                        new NoVerbSelectedError(),\r\n                        new BadVerbSelectedError(''badverb''),\r\n                        new HelpRequestedError(), // should be ignored\r\n                        new HelpVerbRequestedError(null, null, false) // should be ignored \r\n                    })", span="245-258"];
m1_119 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="Func<Error, string> fakeRenderer = err =>\r\n                {\r\n                    switch (err.Tag)\r\n                    {\r\n                        case ErrorType.BadFormatTokenError:\r\n                            return ''ERR '' + ((BadFormatTokenError)err).Token;\r\n                        case ErrorType.MissingValueOptionError:\r\n                            return ''ERR '' + ((MissingValueOptionError)err).NameInfo.NameText;\r\n                        case ErrorType.UnknownOptionError:\r\n                            return ''ERR '' + ((UnknownOptionError)err).Token;\r\n                        case ErrorType.MissingRequiredOptionError:\r\n                            return ''ERR '' + ((MissingRequiredOptionError)err).NameInfo.NameText;\r\n                        case ErrorType.SequenceOutOfRangeError:\r\n                            return ''ERR '' + ((SequenceOutOfRangeError)err).NameInfo.NameText;\r\n                        case ErrorType.NoVerbSelectedError:\r\n                            return ''ERR no-verb-selected'';\r\n                        case ErrorType.BadVerbSelectedError:\r\n                            return ''ERR '' + ((BadVerbSelectedError)err).Token;\r\n                        default:\r\n                            throw new InvalidOperationException();\r\n                    }\r\n                }", span="259-280"];
m1_120 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="Func<IEnumerable<MutuallyExclusiveSetError>, string> fakeMutExclRenderer =\r\n                _ => string.Empty", span="281-282"];
m1_130 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", span="242-242"];
m1_182 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", span="337-337"];
m1_185 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="var lines = helpText.ToString().ToNotEmptyLines().TrimStringArray()", span="351-351"];
m1_188 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="lines[2].ShouldBeEquivalentTo(''-p, --patch      Use the interactive patch selection interface to chose which'')", span="361-361"];
m1_189 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="lines[3].ShouldBeEquivalentTo(''changes to commit.'')", span="362-362"];
m1_190 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="lines[4].ShouldBeEquivalentTo(''--amend          Used to amend the tip of the current branch.'')", span="363-363"];
m1_191 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="lines[5].ShouldBeEquivalentTo(''-m, --message    Use the given message as the commit message.'')", span="364-364"];
m1_192 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="lines[6].ShouldBeEquivalentTo(''--help           Display this help screen.'')", span="365-365"];
m1_184 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="var helpText = HelpText.AutoBuild(fakeResult)", span="348-348"];
m1_186 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="354-354"];
m1_187 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="lines[1].Should().StartWithEquivalent(''Copyright (c)'')", span="355-355"];
m1_183 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="var fakeResult = new NotParsed<object>(\r\n                TypeInfo.Create(typeof(NullInstance)),\r\n                new Error[]\r\n                    {\r\n                        new HelpVerbRequestedError(''commit'', typeof(Commit_Verb), true)\r\n                    })", span="340-345"];
m1_193 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", file="TokenGroup.cs", label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", span="337-337"];
m1_296 [cluster="System.Action.Invoke()", file="TokenGroup.cs", label="Entry System.Action.Invoke()", span="0-0"];
m1_139 [cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="TokenGroup.cs", label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="393-393"];
m1_78 [cluster="string.Split(string[], System.StringSplitOptions)", file="TokenGroup.cs", label="Entry string.Split(string[], System.StringSplitOptions)", span="0-0"];
m1_5 [cluster="Unk.ShouldBeEquivalentTo", file="TokenGroup.cs", label="Entry Unk.ShouldBeEquivalentTo", span=""];
m2_66 [cluster="Unk.SingleOrDefault", file="TokenPartitioner.cs", label="Entry Unk.SingleOrDefault", span=""];
m2_28 [cluster="CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", file="TokenPartitioner.cs", label="Entry CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", span="95-95"];
m2_77 [cluster="CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", file="TokenPartitioner.cs", label="return new NotParsed<object>(typeof(NullInstance), types, errors);", span="97-97"];
m2_78 [cluster="CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", file="TokenPartitioner.cs", label="Exit CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", span="95-95"];
m2_46 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="35-35"];
m2_26 [cluster="System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", file="TokenPartitioner.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", span="31-31"];
m2_10 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", span="46-46"];
m2_45 [cluster="Unk.>", file="TokenPartitioner.cs", label="Entry Unk.>", span=""];
m2_49 [cluster="Unk.MakeNotParsed", file="TokenPartitioner.cs", label="Entry Unk.MakeNotParsed", span=""];
m2_18 [cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16"];
m2_31 [cluster="System.Func<T, TResult>.Invoke(T)", file="TokenPartitioner.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m2_36 [cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="62-62"];
m2_42 [cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitioner.cs", label="return verbs.Any(a => nameComparer.Equals(a.Item1.Name, arguments.First()))\r\n                ? InstanceBuilder.Build(\r\n                    Maybe.Just<Func<object>>(\r\n                        () =>\r\n                            verbs.Single(v => nameComparer.Equals(v.Item1.Name, arguments.First())).Item2.AutoDefault()),\r\n                    tokenizer,\r\n                    arguments.Skip(1),\r\n                    nameComparer,\r\n                    parsingCulture)\r\n                : MakeNotParsed(verbs.Select(v => v.Item2), new BadVerbSelectedError(arguments.First()));", span="69-78"];
m2_43 [cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitioner.cs", label="Exit CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="62-62"];
m2_48 [cluster="CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", file="TokenPartitioner.cs", label="Entry CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", span="357-357"];
m2_68 [cluster="CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", file="TokenPartitioner.cs", label="Entry CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", span="383-383"];
m2_14 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
m2_35 [cluster="CommandLine.VersionRequestedError.VersionRequestedError()", file="TokenPartitioner.cs", label="Entry CommandLine.VersionRequestedError.VersionRequestedError()", span="432-432"];
m2_40 [cluster="System.StringComparer.Equals(string, string)", file="TokenPartitioner.cs", label="Entry System.StringComparer.Equals(string, string)", span="0-0"];
m2_56 [cluster="Unk.Single", file="TokenPartitioner.cs", label="Entry Unk.Single", span=""];
m2_67 [cluster="Unk.ToMaybe", file="TokenPartitioner.cs", label="Entry Unk.ToMaybe", span=""];
m2_41 [cluster="string.Concat(string, string)", file="TokenPartitioner.cs", label="Entry string.Concat(string, string)", span="0-0"];
m2_73 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="90-90"];
m2_4 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="21-26"];
m2_5 [cluster="lambda expression", file="TokenPartitioner.cs", label="var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer))", span="23-23"];
m2_12 [cluster="lambda expression", file="TokenPartitioner.cs", label="NameLookup.Contains(name, optionSpecs, nameComparer)", span="23-23"];
m2_6 [cluster="lambda expression", file="TokenPartitioner.cs", label="var explodedTokens = Tokenizer.ExplodeOptionList(tokens, name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer))", span="24-24"];
m2_16 [cluster="lambda expression", file="TokenPartitioner.cs", label="NameLookup.HavingSeparator(name, optionSpecs, nameComparer)", span="24-24"];
m2_50 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="69-69"];
m2_53 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="72-73"];
m2_61 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="78-78"];
m2_38 [cluster="lambda expression", file="TokenPartitioner.cs", label="nameComparer.Equals(command, firstArg) ||\r\n                    nameComparer.Equals(string.Concat(''--'', command), firstArg)", span="48-49"];
m2_8 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="21-26"];
m2_11 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="23-23"];
m2_13 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="23-23"];
m2_7 [cluster="lambda expression", file="TokenPartitioner.cs", label="return explodedTokens;", span="25-25"];
m2_15 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="24-24"];
m2_17 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="24-24"];
m2_51 [cluster="lambda expression", file="TokenPartitioner.cs", label="nameComparer.Equals(a.Item1.Name, arguments.First())", span="69-69"];
m2_54 [cluster="lambda expression", file="TokenPartitioner.cs", label="verbs.Single(v => nameComparer.Equals(v.Item1.Name, arguments.First())).Item2.AutoDefault()", span="73-73"];
m2_59 [cluster="lambda expression", file="TokenPartitioner.cs", label="nameComparer.Equals(v.Item1.Name, arguments.First())", span="73-73"];
m2_52 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="69-69"];
m2_55 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="72-73"];
m2_63 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="78-78"];
m2_62 [cluster="lambda expression", file="TokenPartitioner.cs", label="v.Item2", span="78-78"];
m2_37 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="47-49"];
m2_39 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="47-49"];
m2_58 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="73-73"];
m2_60 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="73-73"];
m2_71 [cluster="lambda expression", file="TokenPartitioner.cs", label="nameComparer.Equals(v.Item1.Name, verb)", span="87-87"];
m2_70 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="87-87"];
m2_72 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="87-87"];
m2_74 [cluster="lambda expression", file="TokenPartitioner.cs", label="new HelpVerbRequestedError(v.Item1.Name, v.Item2, true)", span="90-90"];
m2_75 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="90-90"];
m2_29 [cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="TokenPartitioner.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0"];
m2_32 [cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="TokenPartitioner.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0"];
m2_79 [cluster="CommandLine.NotParsed<T>.NotParsed(System.Type, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="TokenPartitioner.cs", label="Entry CommandLine.NotParsed<T>.NotParsed(System.Type, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="184-184"];
m2_34 [cluster="CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", span="81-81"];
m2_64 [cluster="CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", file="TokenPartitioner.cs", label="return verb.Length > 0\r\n                ? verbs.SingleOrDefault(v => nameComparer.Equals(v.Item1.Name, verb))\r\n                        .ToMaybe()\r\n                        .Return(\r\n                            v => new HelpVerbRequestedError(v.Item1.Name, v.Item2, true),\r\n                            new HelpVerbRequestedError(null, null, false))\r\n                : new HelpVerbRequestedError(null, null, false);", span="86-92"];
m2_65 [cluster="CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", file="TokenPartitioner.cs", label="Exit CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", span="81-81"];
m2_47 [cluster="Unk.Select", file="TokenPartitioner.cs", label="Entry Unk.Select", span=""];
m2_27 [cluster="CommandLine.NoVerbSelectedError.NoVerbSelectedError()", file="TokenPartitioner.cs", label="Entry CommandLine.NoVerbSelectedError.NoVerbSelectedError()", span="421-421"];
m2_0 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="14-14"];
m2_1 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, file="TokenPartitioner.cs", label="return Choose(\r\n                (args, optionSpecs) =>\r\n                    {\r\n                        var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer));\r\n                        var explodedTokens = Tokenizer.ExplodeOptionList(tokens, name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer));\r\n                        return explodedTokens;\r\n                    },\r\n                types,\r\n                arguments,\r\n                nameComparer,\r\n                parsingCulture);", prediction=14, span="20-30"];
m2_2 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitioner.cs", label="Exit CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="14-14"];
m2_3 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33"];
m2_19 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitioner.cs", label="arguments.Empty()", span="40-40"];
m2_20 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitioner.cs", label="return MakeNotParsed(types, new NoVerbSelectedError());", span="42-42"];
m2_21 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitioner.cs", label="var firstArg = arguments.First()", span="45-45"];
m2_22 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitioner.cs", label="Func<string, bool> preprocCompare = command =>\r\n                    nameComparer.Equals(command, firstArg) ||\r\n                    nameComparer.Equals(string.Concat(''--'', command), firstArg)", span="47-49"];
m2_23 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitioner.cs", label="var verbs = Verb.SelectFromTypes(types)", span="51-51"];
m2_24 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitioner.cs", label="return preprocCompare(''help'')\r\n                ? MakeNotParsed(types,\r\n                    MakeHelpVerbRequestedError(verbs,\r\n                        arguments.Skip(1).SingleOrDefault() ?? string.Empty, nameComparer))\r\n                : preprocCompare(''version'')\r\n                    ? MakeNotParsed(types, new VersionRequestedError())\r\n                    : MatchVerb(tokenizer, verbs, arguments, nameComparer, parsingCulture);", span="53-59"];
m2_25 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitioner.cs", label="Exit CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33"];
m2_9 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="13-13"];
m2_69 [cluster="Unk.Return", file="TokenPartitioner.cs", label="Entry Unk.Return", span=""];
m2_57 [cluster="Unk.AutoDefault", file="TokenPartitioner.cs", label="Entry Unk.AutoDefault", span=""];
m2_30 [cluster="CommandLine.Core.Verb.SelectFromTypes(System.Collections.Generic.IEnumerable<System.Type>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.Verb.SelectFromTypes(System.Collections.Generic.IEnumerable<System.Type>)", span="40-40"];
m2_33 [cluster="System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", file="TokenPartitioner.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", span="0-0"];
m2_76 [cluster="HelpVerbRequestedError.cstr", file="TokenPartitioner.cs", label="Entry HelpVerbRequestedError.cstr", span=""];
m2_80 [file="TokenPartitioner.cs", label="System.StringComparer", span=""];
m2_81 [file="TokenPartitioner.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
m2_82 [file="TokenPartitioner.cs", label="System.StringComparer", span=""];
m2_83 [file="TokenPartitioner.cs", label=firstArg, span=""];
m2_84 [file="TokenPartitioner.cs", label="System.Collections.Generic.IEnumerable<string>", span=""];
m2_85 [file="TokenPartitioner.cs", label="System.StringComparer", span=""];
m2_86 [file="TokenPartitioner.cs", label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>", span=""];
m2_87 [file="TokenPartitioner.cs", label=string, span=""];
m2_88 [file="TokenPartitioner.cs", label="System.StringComparer", span=""];
d38 -> d41  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
d38 -> d42  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
d41 -> d50  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d41 -> d54  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d41 -> d61  [color=darkseagreen4, key=1, label=setsWithTrue, style=dashed];
d42 -> d57  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d42 -> d60  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d42 -> d65  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d42 -> d44  [color=darkseagreen4, key=1, label=requiredButEmpty, style=dashed];
d78 -> d83  [color=green, key=1, label="lambda expression", style=dashed];
d78 -> d80  [color=green, key=1, label=options, style=dashed];
d80 -> d87  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d40 -> d42  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
d44 -> d70  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d11 -> d22  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d11 -> d26  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d11 -> d14  [color=darkseagreen4, key=1, label=options, style=dashed];
d95 -> d104  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d14 -> d33  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d108 -> d61  [color=darkseagreen4, key=1, label=setsWithTrue, style=dashed];
d12 -> d30  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_53 -> m1_55  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_53 -> m1_56  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_53 -> m1_57  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_53 -> m1_58  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_53 -> m1_59  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_82 -> m1_84  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_24 -> m1_26  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_24 -> m1_27  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_24 -> m1_28  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_24 -> m1_29  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_24 -> m1_30  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_24 -> m1_31  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_24 -> m1_32  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_24 -> m1_33  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_89 -> m1_91  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_97 -> m1_99  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_97 -> m1_100  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_97 -> m1_101  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_97 -> m1_102  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_97 -> m1_103  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_94 -> m1_96  [color=darkseagreen4, key=1, label=sut, style=dashed];
m1_222 -> m1_224  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_222 -> m1_225  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_222 -> m1_226  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_222 -> m1_227  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_222 -> m1_228  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_222 -> m1_229  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_222 -> m1_230  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_222 -> m1_231  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_167 -> m1_169  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_167 -> m1_170  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_167 -> m1_171  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_167 -> m1_172  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_167 -> m1_173  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_167 -> m1_174  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_167 -> m1_175  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_167 -> m1_176  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_167 -> m1_177  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_71 -> m1_73  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_71 -> m1_74  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_71 -> m1_75  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_71 -> m1_76  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_68 -> m1_70  [color=darkseagreen4, key=1, label=sut, style=dashed];
m1_42 -> m1_44  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_42 -> m1_45  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_42 -> m1_46  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_42 -> m1_47  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_42 -> m1_48  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_42 -> m1_49  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_109 -> m1_111  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_109 -> m1_112  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_109 -> m1_113  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_109 -> m1_114  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_109 -> m1_115  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_106 -> m1_108  [color=darkseagreen4, key=1, label=sut, style=dashed];
m1_209 -> m1_211  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_209 -> m1_212  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_209 -> m1_213  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_209 -> m1_214  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_209 -> m1_215  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_209 -> m1_216  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_236 -> m1_238  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_236 -> m1_239  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_236 -> m1_240  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_236 -> m1_241  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_236 -> m1_242  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_236 -> m1_243  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_236 -> m1_244  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_236 -> m1_245  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_236 -> m1_246  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_236 -> m1_247  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_288 -> m1_290  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_288 -> m1_291  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_282 -> m1_286  [color=darkseagreen4, key=1, label=handlers, style=dashed];
m1_282 -> m1_284  [color=darkseagreen4, key=1, label=handlers, style=dashed];
m1_142 -> m1_145  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
m1_142 -> m1_147  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
m1_142 -> m1_149  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
m1_142 -> m1_151  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
m1_142 -> m1_153  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
m1_142 -> m1_157  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
m1_197 -> m1_199  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_197 -> m1_200  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_197 -> m1_201  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_197 -> m1_202  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_197 -> m1_203  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_254 -> m1_257  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_254 -> m1_258  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_254 -> m1_259  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_254 -> m1_260  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_254 -> m1_261  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_254 -> m1_262  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_254 -> m1_263  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_254 -> m1_264  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_254 -> m1_265  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_254 -> m1_266  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_254 -> m1_267  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_254 -> m1_268  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_254 -> m1_269  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_254 -> m1_270  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_254 -> m1_271  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_254 -> m1_272  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_254 -> m1_273  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_254 -> m1_274  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_254 -> m1_275  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_254 -> m1_276  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_254 -> m1_277  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_254 -> m1_278  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_254 -> m1_279  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_254 -> m1_256  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_8 -> m1_10  [color=green, key=1, label=lines, style=dashed];
m1_8 -> m1_11  [color=green, key=1, label=lines, style=dashed];
m1_8 -> m1_12  [color=green, key=1, label=lines, style=dashed];
m1_8 -> m1_13  [color=green, key=1, label=lines, style=dashed];
m1_8 -> m1_14  [color=green, key=1, label=lines, style=dashed];
m1_122 -> m1_124  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_122 -> m1_125  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_122 -> m1_126  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_122 -> m1_127  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_122 -> m1_128  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_122 -> m1_129  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_119 -> m1_143  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
m1_119 -> m1_145  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
m1_119 -> m1_147  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
m1_119 -> m1_149  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
m1_119 -> m1_151  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
m1_119 -> m1_153  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
m1_119 -> m1_157  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
m1_185 -> m1_187  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_185 -> m1_188  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_185 -> m1_189  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_185 -> m1_190  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_185 -> m1_191  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_185 -> m1_192  [color=darkseagreen4, key=1, label=lines, style=dashed];
m2_36 -> m2_51  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m2_36 -> m2_54  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>", style=dashed];
m2_36 -> m2_59  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m2_42 -> m2_50  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_42 -> m2_53  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_42 -> m2_61  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_4 -> m2_12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m2_4 -> m2_16  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m2_5 -> m2_11  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_6 -> m2_15  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_54 -> m2_58  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_34 -> m2_71  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_64 -> m2_70  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_64 -> m2_73  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_0 -> m2_12  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m2_0 -> m2_16  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m2_1 -> m2_4  [color=green, key=1, label="lambda expression", style=dashed];
m2_3 -> m2_20  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Type>", style=dashed];
m2_3 -> m2_38  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m2_3 -> m2_24  [color=darkseagreen4, key=1, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>", style=dashed];
m2_21 -> m2_38  [color=darkseagreen4, key=1, label=firstArg, style=dashed];
m2_22 -> m2_38  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_22 -> m2_24  [color=darkseagreen4, key=1, label=preprocCompare, style=dashed];
m2_80 -> m2_12  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m2_80 -> m2_16  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m2_81 -> m2_12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m2_81 -> m2_16  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m2_82 -> m2_38  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m2_83 -> m2_38  [color=darkseagreen4, key=1, label=firstArg, style=dashed];
m2_84 -> m2_51  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m2_84 -> m2_54  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m2_84 -> m2_59  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m2_85 -> m2_51  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m2_85 -> m2_54  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m2_85 -> m2_59  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m2_86 -> m2_54  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>", style=dashed];
m2_87 -> m2_71  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_88 -> m2_71  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
}
