digraph  {
m0_3 [cluster="System.Collections.Generic.IEnumerable<TSource>.Pairwise<TSource, TResult>(System.Func<TSource, TSource, TResult>)", file="Scalar.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Pairwise<TSource, TResult>(System.Func<TSource, TSource, TResult>)", span="24-24"];
m0_11 [cluster="lambda expression", file="Scalar.cs", label="Entry lambda expression", span="18-19"];
m0_4 [cluster="lambda expression", file="Scalar.cs", label="Entry lambda expression", span="16-20"];
m0_5 [cluster="lambda expression", color=green, community=1, file="Scalar.cs", label="f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).Return(info =>\r\n                                    info.Item1 == DescriptorType.Scalar ? new[] { f, s } : new Token[] { }, new Token[] { })\r\n                                    : new Token[] { }", prediction=0, span="17-20"];
m0_6 [cluster="lambda expression", file="Scalar.cs", label="Exit lambda expression", span="16-20"];
m0_12 [cluster="lambda expression", color=green, community=0, file="Scalar.cs", label="info.Item1 == DescriptorType.Scalar ? new[] { f, s } : new Token[] { }", prediction=1, span="19-19"];
m0_13 [cluster="lambda expression", file="Scalar.cs", label="Exit lambda expression", span="18-19"];
m0_0 [cluster="CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="Scalar.cs", label="Entry CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", span="11-11"];
m0_1 [cluster="CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", color=green, community=1, file="Scalar.cs", label="return from tseq in tokens.Pairwise(\r\n                (f, s) =>\r\n                        f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).Return(info =>\r\n                                    info.Item1 == DescriptorType.Scalar ? new[] { f, s } : new Token[] { }, new Token[] { })\r\n                                    : new Token[] { })\r\n                   from t in tseq\r\n                   select t;", prediction=2, span="15-22"];
m0_2 [cluster="CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="Scalar.cs", label="Exit CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", span="11-11"];
m0_10 [cluster="CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", file="Scalar.cs", label="Entry CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", span="103-103"];
m0_7 [cluster="CommandLine.Core.Token.IsName()", file="Scalar.cs", label="Entry CommandLine.Core.Token.IsName()", span="72-72"];
m0_8 [cluster="CommandLine.Core.Token.IsValue()", file="Scalar.cs", label="Entry CommandLine.Core.Token.IsValue()", span="77-77"];
m0_9 [cluster="System.Func<T, TResult>.Invoke(T)", file="Scalar.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m0_14 [file="Scalar.cs", label="System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>", span=""];
m0_15 [file="Scalar.cs", label="CommandLine.Core.Token", span=""];
m0_16 [file="Scalar.cs", label="CommandLine.Core.Token", span=""];
m1_0 [cluster="CommandLine.Text.Example.Example(string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, object)", file="Sequence.cs", label="Entry CommandLine.Text.Example.Example(string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, object)", span="16-16"];
m1_1 [cluster="CommandLine.Text.Example.Example(string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, object)", color=green, community=0, file="Sequence.cs", label="string.IsNullOrEmpty(helpText)", prediction=3, span="18-18"];
m1_2 [cluster="CommandLine.Text.Example.Example(string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, object)", color=green, community=0, file="Sequence.cs", label="throw new ArgumentException(''helpText can't be null or empty'', ''helpText'');", prediction=4, span="18-18"];
m1_3 [cluster="CommandLine.Text.Example.Example(string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, object)", color=green, community=0, file="Sequence.cs", label="formatStyles == null", prediction=5, span="19-19"];
m1_4 [cluster="CommandLine.Text.Example.Example(string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, object)", color=green, community=0, file="Sequence.cs", label="throw new ArgumentNullException(''formatStyles'');", prediction=6, span="19-19"];
m1_5 [cluster="CommandLine.Text.Example.Example(string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, object)", color=green, community=0, file="Sequence.cs", label="sample == null", prediction=5, span="20-20"];
m1_6 [cluster="CommandLine.Text.Example.Example(string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, object)", color=green, community=0, file="Sequence.cs", label="throw new ArgumentNullException(''sample'');", prediction=8, span="20-20"];
m1_7 [cluster="CommandLine.Text.Example.Example(string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, object)", color=green, community=0, file="Sequence.cs", label="this.helpText = helpText", prediction=9, span="22-22"];
m1_8 [cluster="CommandLine.Text.Example.Example(string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, object)", color=green, community=0, file="Sequence.cs", label="this.formatStyles = formatStyles", prediction=10, span="23-23"];
m1_9 [cluster="CommandLine.Text.Example.Example(string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, object)", color=green, community=0, file="Sequence.cs", label="this.sample = sample", prediction=11, span="24-24"];
m1_10 [cluster="CommandLine.Text.Example.Example(string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, object)", file="Sequence.cs", label="Exit CommandLine.Text.Example.Example(string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, object)", span="16-16"];
m1_24 [cluster="CommandLine.Text.Example.Equals(CommandLine.Text.Example)", file="Sequence.cs", label="Entry CommandLine.Text.Example.Equals(CommandLine.Text.Example)", span="82-82"];
m1_32 [cluster="CommandLine.Text.Example.Equals(CommandLine.Text.Example)", file="Sequence.cs", label="return HelpText.Equals(other.HelpText)\r\n                && FormatStyles.SequenceEqual(other.FormatStyles)\r\n                && Sample.Equals(other.Sample);", span="89-91"];
m1_30 [cluster="CommandLine.Text.Example.Equals(CommandLine.Text.Example)", file="Sequence.cs", label="other == null", span="84-84"];
m1_31 [cluster="CommandLine.Text.Example.Equals(CommandLine.Text.Example)", file="Sequence.cs", label="return false;", span="86-86"];
m1_33 [cluster="CommandLine.Text.Example.Equals(CommandLine.Text.Example)", file="Sequence.cs", label="Exit CommandLine.Text.Example.Equals(CommandLine.Text.Example)", span="82-82"];
m1_26 [cluster="CommandLine.Text.Example.GetHashCode()", file="Sequence.cs", label="Entry CommandLine.Text.Example.GetHashCode()", span="72-72"];
m1_27 [cluster="CommandLine.Text.Example.GetHashCode()", file="Sequence.cs", label="return new { HelpText, FormatStyles, Sample }.GetHashCode();", span="74-74"];
m1_28 [cluster="CommandLine.Text.Example.GetHashCode()", file="Sequence.cs", label="Exit CommandLine.Text.Example.GetHashCode()", span="72-72"];
m1_25 [cluster="object.Equals(object)", file="Sequence.cs", label="Entry object.Equals(object)", span="0-0"];
m1_34 [cluster="string.Equals(string)", file="Sequence.cs", label="Entry string.Equals(string)", span="0-0"];
m1_11 [cluster="string.IsNullOrEmpty(string)", file="Sequence.cs", label="Entry string.IsNullOrEmpty(string)", span="0-0"];
m1_12 [cluster="System.ArgumentException.ArgumentException(string, string)", file="Sequence.cs", label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0"];
m1_35 [cluster="Unk.SequenceEqual", file="Sequence.cs", label="Entry Unk.SequenceEqual", span=""];
m1_13 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="Sequence.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m1_18 [cluster="CommandLine.Text.Example.Equals(object)", file="Sequence.cs", label="Entry CommandLine.Text.Example.Equals(object)", span="57-57"];
m1_19 [cluster="CommandLine.Text.Example.Equals(object)", color=green, community=0, file="Sequence.cs", label="var other = obj as Example", prediction=12, span="59-59"];
m1_20 [cluster="CommandLine.Text.Example.Equals(object)", color=green, community=0, file="Sequence.cs", label="other != null", prediction=13, span="60-60"];
m1_21 [cluster="CommandLine.Text.Example.Equals(object)", file="Sequence.cs", label="return Equals(other);", span="62-62"];
m1_22 [cluster="CommandLine.Text.Example.Equals(object)", file="Sequence.cs", label="return base.Equals(obj);", span="65-65"];
m1_23 [cluster="CommandLine.Text.Example.Equals(object)", file="Sequence.cs", label="Exit CommandLine.Text.Example.Equals(object)", span="57-57"];
m1_29 [cluster="object.GetHashCode()", file="Sequence.cs", label="Entry object.GetHashCode()", span="0-0"];
m1_41 [file="Sequence.cs", label="CommandLine.Text.Example", span=""];
m3_0 [cluster="CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="Switch.cs", label="Entry CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", span="11-11"];
m3_1 [cluster="CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", color=green, community=1, file="Switch.cs", label="return from t in tokens\r\n                   where typeLookup(t.Text).Return(info => t.IsName() && info.Item1 == DescriptorType.Boolean, false)\r\n                   select t;", prediction=14, span="15-17"];
m3_2 [cluster="CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="Switch.cs", label="Exit CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", span="11-11"];
m3_5 [cluster="lambda expression", file="Switch.cs", label="Entry lambda expression", span="16-16"];
m3_6 [cluster="lambda expression", color=green, community=0, file="Switch.cs", label="t.IsName() && info.Item1 == DescriptorType.Boolean", prediction=14, span="16-16"];
m3_7 [cluster="lambda expression", file="Switch.cs", label="Exit lambda expression", span="16-16"];
m3_4 [cluster="CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", file="Switch.cs", label="Entry CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", span="103-103"];
m3_8 [cluster="CommandLine.Core.Token.IsName()", file="Switch.cs", label="Entry CommandLine.Core.Token.IsName()", span="72-72"];
m3_3 [cluster="System.Func<T, TResult>.Invoke(T)", file="Switch.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m3_9 [file="Switch.cs", label=t, span=""];
m4_34 [cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])", file="TokenPartitioner.cs", label="Entry CommandLine.Text.CopyrightInfo.FormatYears(int[])", span="161-161"];
m4_36 [cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])", file="TokenPartitioner.cs", label="years.Length == 1", span="163-163"];
m4_37 [cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])", file="TokenPartitioner.cs", label="return years[0].ToString(CultureInfo.InvariantCulture);", span="165-165"];
m4_38 [cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])", file="TokenPartitioner.cs", label="var yearsPart = new StringBuilder(years.Length * 6)", span="168-168"];
m4_40 [cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])", file="TokenPartitioner.cs", label="i < years.Length", span="169-169"];
m4_41 [cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])", file="TokenPartitioner.cs", label="yearsPart.Append(years[i].ToString(CultureInfo.InvariantCulture))", span="171-171"];
m4_43 [cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])", file="TokenPartitioner.cs", label="next < years.Length", span="173-173"];
m4_44 [cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])", file="TokenPartitioner.cs", label="yearsPart.Append(years[next] - years[i] > 1 ? '' - '' : '', '')", span="175-175"];
m4_39 [cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])", file="TokenPartitioner.cs", label="int i = 0", span="169-169"];
m4_46 [cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])", file="TokenPartitioner.cs", label="return yearsPart.ToString();", span="179-179"];
m4_42 [cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])", file="TokenPartitioner.cs", label="int next = i + 1", span="172-172"];
m4_45 [cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])", file="TokenPartitioner.cs", label="i++", span="169-169"];
m4_47 [cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])", file="TokenPartitioner.cs", label="Exit CommandLine.Text.CopyrightInfo.FormatYears(int[])", span="161-161"];
m4_33 [cluster="System.Text.StringBuilder.Append(char)", file="TokenPartitioner.cs", label="Entry System.Text.StringBuilder.Append(char)", span="0-0"];
m4_18 [cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo()", file="TokenPartitioner.cs", label="Entry CommandLine.Text.CopyrightInfo.CopyrightInfo()", span="74-74"];
m4_19 [cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo()", file="TokenPartitioner.cs", label="Exit CommandLine.Text.CopyrightInfo.CopyrightInfo()", span="74-74"];
m4_32 [cluster="System.Text.StringBuilder.Append(string)", file="TokenPartitioner.cs", label="Entry System.Text.StringBuilder.Append(string)", span="0-0"];
m4_20 [cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(System.Reflection.AssemblyCopyrightAttribute)", file="TokenPartitioner.cs", label="Entry CommandLine.Text.CopyrightInfo.CopyrightInfo(System.Reflection.AssemblyCopyrightAttribute)", span="83-83"];
m4_22 [cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(System.Reflection.AssemblyCopyrightAttribute)", file="TokenPartitioner.cs", label="Exit CommandLine.Text.CopyrightInfo.CopyrightInfo(System.Reflection.AssemblyCopyrightAttribute)", span="83-83"];
m4_31 [cluster="System.Text.StringBuilder.StringBuilder(int)", file="TokenPartitioner.cs", label="Entry System.Text.StringBuilder.StringBuilder(int)", span="0-0"];
m4_4 [cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])", file="TokenPartitioner.cs", label="Entry CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])", span="59-59"];
m4_14 [cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])", file="TokenPartitioner.cs", label="Exit CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])", span="59-59"];
m4_0 [cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(string, int)", file="TokenPartitioner.cs", label="Entry CommandLine.Text.CopyrightInfo.CopyrightInfo(string, int)", span="32-32"];
m4_1 [cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(string, int)", file="TokenPartitioner.cs", label="Exit CommandLine.Text.CopyrightInfo.CopyrightInfo(string, int)", span="32-32"];
m4_48 [cluster="int.ToString(System.IFormatProvider)", file="TokenPartitioner.cs", label="Entry int.ToString(System.IFormatProvider)", span="0-0"];
m4_26 [cluster="CommandLine.Text.CopyrightInfo.ToString()", file="TokenPartitioner.cs", label="Entry CommandLine.Text.CopyrightInfo.ToString()", span="137-137"];
m4_27 [cluster="CommandLine.Text.CopyrightInfo.ToString()", file="TokenPartitioner.cs", label="attribute != null", span="139-139"];
m4_28 [cluster="CommandLine.Text.CopyrightInfo.ToString()", file="TokenPartitioner.cs", label="return attribute.Copyright;", span="141-141"];
m4_29 [cluster="CommandLine.Text.CopyrightInfo.ToString()", file="TokenPartitioner.cs", label="return new StringBuilder(builderSize)\r\n                .Append(CopyrightWord)\r\n                .Append(' ')\r\n                .Append(isSymbolUpper ? SymbolUpper : SymbolLower)\r\n                .Append(' ')\r\n                .Append(FormatYears(copyrightYears))\r\n                .Append(' ')\r\n                .Append(author)\r\n                .ToString();", span="144-152"];
m4_30 [cluster="CommandLine.Text.CopyrightInfo.ToString()", file="TokenPartitioner.cs", label="Exit CommandLine.Text.CopyrightInfo.ToString()", span="137-137"];
m4_23 [cluster="CommandLine.Text.CopyrightInfo.implicit operator string(CommandLine.Text.CopyrightInfo)", file="TokenPartitioner.cs", label="Entry CommandLine.Text.CopyrightInfo.implicit operator string(CommandLine.Text.CopyrightInfo)", span="128-128"];
m4_24 [cluster="CommandLine.Text.CopyrightInfo.implicit operator string(CommandLine.Text.CopyrightInfo)", file="TokenPartitioner.cs", label="return info.ToString();", span="130-130"];
m4_25 [cluster="CommandLine.Text.CopyrightInfo.implicit operator string(CommandLine.Text.CopyrightInfo)", file="TokenPartitioner.cs", label="Exit CommandLine.Text.CopyrightInfo.implicit operator string(CommandLine.Text.CopyrightInfo)", span="128-128"];
m4_2 [cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(string, params int[])", file="TokenPartitioner.cs", label="Entry CommandLine.Text.CopyrightInfo.CopyrightInfo(string, params int[])", span="45-45"];
m4_3 [cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(string, params int[])", file="TokenPartitioner.cs", label="Exit CommandLine.Text.CopyrightInfo.CopyrightInfo(string, params int[])", span="45-45"];
m4_35 [cluster="System.Text.StringBuilder.ToString()", file="TokenPartitioner.cs", label="Entry System.Text.StringBuilder.ToString()", span="0-0"];
m4_17 [cluster="System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", file="TokenPartitioner.cs", label="Entry System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", span="0-0"];
m4_16 [cluster="System.ArgumentException.ArgumentException(string)", file="TokenPartitioner.cs", label="Entry System.ArgumentException.ArgumentException(string)", span="0-0"];
m4_15 [cluster="string.IsNullOrWhiteSpace(string)", file="TokenPartitioner.cs", label="Entry string.IsNullOrWhiteSpace(string)", span="0-0"];
m4_49 [file="TokenPartitioner.cs", label="CommandLine.Text.CopyrightInfo", span=""];
m0_4 -> m0_12  [color=green, key=1, label="CommandLine.Core.Token", style=dashed];
m0_5 -> m0_11  [color=green, key=1, label="lambda expression", style=dashed];
m0_0 -> m0_5  [color=green, key=1, label="System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>", style=dashed];
m0_1 -> m0_1  [color=green, key=1, label=tseq, style=dashed];
m0_1 -> m0_4  [color=green, key=1, label="lambda expression", style=dashed];
m0_14 -> m0_5  [color=green, key=1, label="System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>", style=dashed];
m0_15 -> m0_12  [color=green, key=1, label="CommandLine.Core.Token", style=dashed];
m0_16 -> m0_12  [color=green, key=1, label="CommandLine.Core.Token", style=dashed];
m1_0 -> m1_3  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>", style=dashed];
m1_0 -> m1_5  [color=green, key=1, label=object, style=dashed];
m1_24 -> m1_32  [color=darkseagreen4, key=1, label="CommandLine.Text.Example", style=dashed];
m1_18 -> m1_22  [color=darkseagreen4, key=1, label=object, style=dashed];
m1_19 -> m1_21  [color=green, key=1, label=other, style=dashed];
m1_41 -> m1_21  [color=darkseagreen4, key=1, label="CommandLine.Text.Example", style=dashed];
m1_41 -> m1_22  [color=darkseagreen4, key=1, label="CommandLine.Text.Example", style=dashed];
m1_41 -> m1_27  [color=darkseagreen4, key=1, label="CommandLine.Text.Example", style=dashed];
m1_41 -> m1_32  [color=darkseagreen4, key=1, label="CommandLine.Text.Example", style=dashed];
m3_1 -> m3_1  [color=green, key=1, label=t, style=dashed];
m3_1 -> m3_5  [color=green, key=1, label="lambda expression", style=dashed];
m3_1 -> m3_6  [color=green, key=1, label=t, style=dashed];
m3_9 -> m3_6  [color=green, key=1, label=t, style=dashed];
m4_34 -> m4_37  [color=darkseagreen4, key=1, label="int[]", style=dashed];
m4_34 -> m4_40  [color=darkseagreen4, key=1, label="int[]", style=dashed];
m4_34 -> m4_41  [color=darkseagreen4, key=1, label="int[]", style=dashed];
m4_34 -> m4_43  [color=darkseagreen4, key=1, label="int[]", style=dashed];
m4_34 -> m4_44  [color=darkseagreen4, key=1, label="int[]", style=dashed];
m4_38 -> m4_41  [color=darkseagreen4, key=1, label=yearsPart, style=dashed];
m4_38 -> m4_44  [color=darkseagreen4, key=1, label=yearsPart, style=dashed];
m4_38 -> m4_46  [color=darkseagreen4, key=1, label=yearsPart, style=dashed];
m4_39 -> m4_41  [color=darkseagreen4, key=1, label=i, style=dashed];
m4_39 -> m4_44  [color=darkseagreen4, key=1, label=i, style=dashed];
m4_39 -> m4_45  [color=darkseagreen4, key=1, label=i, style=dashed];
m4_42 -> m4_44  [color=darkseagreen4, key=1, label=next, style=dashed];
m4_45 -> m4_45  [color=darkseagreen4, key=1, label=i, style=dashed];
m4_49 -> m4_27  [color=darkseagreen4, key=1, label="CommandLine.Text.CopyrightInfo", style=dashed];
m4_49 -> m4_28  [color=darkseagreen4, key=1, label="CommandLine.Text.CopyrightInfo", style=dashed];
m4_49 -> m4_29  [color=darkseagreen4, key=1, label="CommandLine.Text.CopyrightInfo", style=dashed];
}
