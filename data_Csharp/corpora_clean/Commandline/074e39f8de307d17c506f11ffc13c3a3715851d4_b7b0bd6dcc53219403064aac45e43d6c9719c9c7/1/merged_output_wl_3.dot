digraph  {
m1_172 [cluster="string.Split(params char[])", file="Tokenizer.cs", label="Entry string.Split(params char[])", span="0-0"];
m1_31 [cluster="string.Equals(string)", file="Tokenizer.cs", label="Entry string.Equals(string)", span="0-0"];
m1_33 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", file="Tokenizer.cs", label="var tokenizerResult = tokenizer(arguments.TakeWhile(arg => !arg.EqualsOrdinal(''--'')))", span="50-50"];
m1_36 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", file="Tokenizer.cs", label="return tokenizer(arguments);", span="54-54"];
m1_32 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", file="Tokenizer.cs", label="arguments.Any(arg => arg.EqualsOrdinal(''--''))", span="48-48"];
m1_34 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", file="Tokenizer.cs", label="var values = arguments.SkipWhile(arg => !arg.EqualsOrdinal(''--'')).Skip(1).Select(Token.Value)", span="51-51"];
m1_35 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", file="Tokenizer.cs", label="return tokenizerResult.Map(tokens => tokens.Concat(values));", span="52-52"];
m1_37 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", file="Tokenizer.cs", label="Exit CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", span="44-44"];
m1_97 [cluster="CommandLine.Core.Tokenizer.Normalize(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, bool>)", file="Tokenizer.cs", label="Entry CommandLine.Core.Tokenizer.Normalize(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, bool>)", span="78-78"];
m1_98 [cluster="CommandLine.Core.Tokenizer.Normalize(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, bool>)", file="Tokenizer.cs", label="var indexes =\r\n                from i in\r\n                    tokens.Select(\r\n                        (t, i) =>\r\n                        {\r\n                            var prev = tokens.ElementAtOrDefault(i - 1).ToMaybe();\r\n                            return t.IsValue() && ((Value)t).ExplicitlyAssigned\r\n                                   && prev.Return(p => p.IsName() && !nameLookup(p.Text), false)\r\n                                ? Maybe.Just(i)\r\n                                : Maybe.Nothing<int>();\r\n                        }).Where(i => i.IsJust())\r\n                select i.FromJust()", span="81-92"];
m1_99 [cluster="CommandLine.Core.Tokenizer.Normalize(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, bool>)", file="Tokenizer.cs", label="var toExclude =\r\n                from t in\r\n                    tokens.Select((t, i) => indexes.Contains(i) ? Maybe.Just(t) : Maybe.Nothing<Token>())\r\n                        .Where(t => t.IsJust())\r\n                select t.FromJust()", span="94-98"];
m1_100 [cluster="CommandLine.Core.Tokenizer.Normalize(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, bool>)", file="Tokenizer.cs", label="var normalized = tokens.Except(toExclude)", span="100-100"];
m1_101 [cluster="CommandLine.Core.Tokenizer.Normalize(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, bool>)", file="Tokenizer.cs", label="return normalized;", span="102-102"];
m1_102 [cluster="CommandLine.Core.Tokenizer.Normalize(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, bool>)", file="Tokenizer.cs", label="Exit CommandLine.Core.Tokenizer.Normalize(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, bool>)", span="78-78"];
m1_86 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="Tokenizer.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
m1_118 [cluster="Unk.nameLookup", file="Tokenizer.cs", label="Entry Unk.nameLookup", span=""];
m1_27 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="41-41"];
m1_170 [cluster="CommandLine.BadFormatTokenError.BadFormatTokenError(string)", file="Tokenizer.cs", label="Entry CommandLine.BadFormatTokenError.BadFormatTokenError(string)", span="196-196"];
m1_57 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="Tokenizer.cs", label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", span="57-57"];
m1_62 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="Tokenizer.cs", label="return Result.Succeed(flattened, tokenizerResult.SuccessfulMessages());", span="75-75"];
m1_61 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="Tokenizer.cs", label="var flattened = exploded.SelectMany(x => x)", span="73-73"];
m1_58 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="Tokenizer.cs", label="var tokens = tokenizerResult.SucceededWith()", span="61-61"];
m1_59 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="Tokenizer.cs", label="var replaces = tokens.Select((t,i) =>\r\n                optionSequenceWithSeparatorLookup(t.Text)\r\n                    .Return(sep => Tuple.Create(i + 1, sep),\r\n                        Tuple.Create(-1, '\0'))).SkipWhile(x => x.Item1 < 0)", span="63-66"];
m1_60 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="Tokenizer.cs", label="var exploded = tokens.Select((t, i) =>\r\n                        replaces.FirstOrDefault(x => x.Item1 == i).ToMaybe()\r\n                            .Return(r => t.Text.Split(r.Item2).Select(Token.Value),\r\n                                Enumerable.Empty<Token>().Concat(new[]{ t })))", span="68-71"];
m1_63 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="Tokenizer.cs", label="Exit CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", span="57-57"];
m1_15 [cluster="Unk.NotNull", file="Tokenizer.cs", label="Entry Unk.NotNull", span=""];
m1_150 [cluster="CommandLine.Core.Token.Name(string)", file="Tokenizer.cs", label="Entry CommandLine.Core.Token.Name(string)", span="19-19"];
m1_171 [cluster="System.Action<T>.Invoke(T)", file="Tokenizer.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m1_65 [cluster="Unk.SkipWhile", file="Tokenizer.cs", label="Entry Unk.SkipWhile", span=""];
m1_21 [cluster="lambda expression", file="Tokenizer.cs", label="pt.Specification.IsOption()", span="33-33"];
m1_38 [cluster="Unk.Any", file="Tokenizer.cs", label="Entry Unk.Any", span=""];
m1_16 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="27-27"];
m1_117 [cluster="Unk.IsName", file="Tokenizer.cs", label="Entry Unk.IsName", span=""];
m1_22 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="33-33"];
m1_3 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="Tokenizer.cs", label="var result = OptionMapper.MapValues(\r\n                specProps.Where(pt => pt.Specification.IsOption()),\r\n                tokenPartitions,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, CultureInfo.InvariantCulture),\r\n                StringComparer.InvariantCulture)", span="32-36"];
m1_10 [cluster="System.Type.GetProperties()", color=green, community=0, file="Tokenizer.cs", label="0: Entry System.Type.GetProperties()", span="0-0"];
m1_9 [cluster="System.Collections.Generic.List<T>.List()", file="Tokenizer.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m1_11 [cluster="Unk.Single", file="Tokenizer.cs", label="Entry Unk.Single", span=""];
m1_12 [cluster="Unk.Create", file="Tokenizer.cs", label="Entry Unk.Create", span=""];
m1_7 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="Tokenizer.cs", label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", span="17-17"];
m1_8 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="Tokenizer.cs", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="66-66"];
m1_13 [cluster="Unk.Where", file="Tokenizer.cs", label="Entry Unk.Where", span=""];
m1_23 [cluster="CommandLine.Core.Specification.IsOption()", file="Tokenizer.cs", label="Entry CommandLine.Core.Specification.IsOption()", span="11-11"];
m1_151 [cluster="string.Substring(int, int)", file="Tokenizer.cs", label="Entry string.Substring(int, int)", span="0-0"];
m1_85 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="Tokenizer.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m1_152 [cluster="string.String(char, int)", file="Tokenizer.cs", label="Entry string.String(char, int)", span="0-0"];
m1_109 [cluster="System.Collections.Generic.IEnumerable<TSource>.ElementAtOrDefault<TSource>(int)", file="Tokenizer.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ElementAtOrDefault<TSource>(int)", span="0-0"];
m1_30 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="40-42"];
m1_84 [cluster="Unk.ToMaybe", file="Tokenizer.cs", label="Entry Unk.ToMaybe", span=""];
m1_112 [cluster="CSharpx.Maybe.Just<T>(T)", file="Tokenizer.cs", label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124"];
m1_71 [cluster="System.Tuple.Create<T1, T2>(T1, T2)", file="Tokenizer.cs", label="Entry System.Tuple.Create<T1, T2>(T1, T2)", span="0-0"];
m1_110 [cluster="T.ToMaybe<T>()", file="Tokenizer.cs", label="Entry T.ToMaybe<T>()", span="249-249"];
m1_114 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="88-88"];
m1_20 [cluster="Unk.normalize", file="Tokenizer.cs", label="Entry Unk.normalize", span=""];
m1_24 [cluster="UnknownOptionError.cstr", file="Tokenizer.cs", label="Entry UnknownOptionError.cstr", span=""];
m1_28 [cluster="lambda expression", file="Tokenizer.cs", label="!unkTokens.Contains(x)", span="41-41"];
m1_17 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="Entry CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", span="150-150"];
m1_18 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="Entry CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", span="105-105"];
m1_25 [cluster="Unk.Concat", file="Tokenizer.cs", label="Entry Unk.Concat", span=""];
m1_26 [cluster="Unk.Succeed", file="Tokenizer.cs", label="Entry Unk.Succeed", span=""];
m1_29 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="41-41"];
m1_4 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="Tokenizer.cs", label="Assert.NotNull(result.Value.Single(\r\n                a => a.Specification.IsOption()\r\n                && ((OptionSpecification)a.Specification).ShortName.Equals(''x'')\r\n                && (bool)((Just<object>)a.Value).Value == true))", span="39-42"];
m1_5 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", color=green, community=0, file="Tokenizer.cs", label="0: Exit CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", span="16-16"];
m1_6 [cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", file="Tokenizer.cs", label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0"];
m1_69 [cluster="lambda expression", file="Tokenizer.cs", label="optionSequenceWithSeparatorLookup(t.Text)\r\n                    .Return(sep => Tuple.Create(i + 1, sep),\r\n                        Tuple.Create(-1, '\0'))", span="64-66"];
m1_55 [cluster="lambda expression", file="Tokenizer.cs", label="tokens.Concat(values)", span="52-52"];
m1_48 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="50-50"];
m1_68 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="63-66"];
m1_70 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="63-66"];
m1_73 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="65-65"];
m1_124 [cluster="lambda expression", file="Tokenizer.cs", label="indexes.Contains(i) ? Maybe.Just(t) : Maybe.Nothing<Token>()", span="96-96"];
m1_105 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="84-91"];
m1_119 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="91-91"];
m1_123 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="96-96"];
m1_126 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="97-97"];
m1_54 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="52-52"];
m1_56 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="52-52"];
m1_44 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="48-48"];
m1_51 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="51-51"];
m1_50 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="50-50"];
m1_49 [cluster="lambda expression", file="Tokenizer.cs", label="!arg.EqualsOrdinal(''--'')", span="50-50"];
m1_74 [cluster="lambda expression", file="Tokenizer.cs", label="Tuple.Create(i + 1, sep)", span="65-65"];
m1_81 [cluster="lambda expression", file="Tokenizer.cs", label="replaces.FirstOrDefault(x => x.Item1 == i).ToMaybe()\r\n                            .Return(r => t.Text.Split(r.Item2).Select(Token.Value),\r\n                                Enumerable.Empty<Token>().Concat(new[]{ t }))", span="69-71"];
m1_107 [cluster="lambda expression", file="Tokenizer.cs", label="return t.IsValue() && ((Value)t).ExplicitlyAssigned\r\n                                   && prev.Return(p => p.IsName() && !nameLookup(p.Text), false)\r\n                                ? Maybe.Just(i)\r\n                                : Maybe.Nothing<int>();", span="87-90"];
m1_75 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="65-65"];
m1_125 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="96-96"];
m1_106 [cluster="lambda expression", file="Tokenizer.cs", label="var prev = tokens.ElementAtOrDefault(i - 1).ToMaybe()", span="86-86"];
m1_115 [cluster="lambda expression", file="Tokenizer.cs", label="p.IsName() && !nameLookup(p.Text)", span="88-88"];
m1_91 [cluster="lambda expression", file="Tokenizer.cs", label="t.Text.Split(r.Item2).Select(Token.Value)", span="70-70"];
m1_108 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="84-91"];
m1_121 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="91-91"];
m1_120 [cluster="lambda expression", file="Tokenizer.cs", label="i.IsJust()", span="91-91"];
m1_128 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="97-97"];
m1_127 [cluster="lambda expression", file="Tokenizer.cs", label="t.IsJust()", span="97-97"];
m1_94 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="73-73"];
m1_46 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="48-48"];
m1_45 [cluster="lambda expression", file="Tokenizer.cs", label="arg.EqualsOrdinal(''--'')", span="48-48"];
m1_53 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="51-51"];
m1_52 [cluster="lambda expression", file="Tokenizer.cs", label="!arg.EqualsOrdinal(''--'')", span="51-51"];
m1_77 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="66-66"];
m1_80 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="68-71"];
m1_82 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="68-71"];
m1_87 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="69-69"];
m1_90 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="70-70"];
m1_116 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="88-88"];
m1_92 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="70-70"];
m1_96 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="73-73"];
m1_95 [cluster="lambda expression", file="Tokenizer.cs", label=x, span="73-73"];
m1_79 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="66-66"];
m1_78 [cluster="lambda expression", file="Tokenizer.cs", label="x.Item1 < 0", span="66-66"];
m1_88 [cluster="lambda expression", file="Tokenizer.cs", label="x.Item1 == i", span="69-69"];
m1_89 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="69-69"];
m1_41 [cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="Tokenizer.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0"];
m1_156 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="value.Length > 2 && value.StartsWith(''--'', StringComparison.Ordinal)", span="154-154"];
m1_160 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="yield return Token.Name(text);", span="160-160"];
m1_161 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="yield break;", span="161-161"];
m1_164 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="yield break;", span="166-166"];
m1_166 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="yield return Token.Name(parts[0]);", span="169-169"];
m1_167 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="yield return Token.Value(parts[1], true);", span="170-170"];
m1_157 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="var text = value.Substring(2)", span="156-156"];
m1_163 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="onError(new BadFormatTokenError(value))", span="165-165"];
m1_159 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="equalIndex <= 0", span="158-158"];
m1_162 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="equalIndex == 1", span="163-163"];
m1_165 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="var parts = text.Split('=')", span="168-168"];
m1_158 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="var equalIndex = text.IndexOf('=')", span="157-157"];
m1_168 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="Exit CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", span="150-150"];
m1_19 [cluster="Unk.Memorize", file="Tokenizer.cs", label="Entry Unk.Memorize", span=""];
m1_67 [cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SuccessfulMessages<TSuccess, TMessage>()", file="Tokenizer.cs", label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SuccessfulMessages<TSuccess, TMessage>()", span="12-12"];
m1_40 [cluster="System.Collections.Generic.IEnumerable<TSource>.SkipWhile<TSource>(System.Func<TSource, bool>)", file="Tokenizer.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.SkipWhile<TSource>(System.Func<TSource, bool>)", span="0-0"];
m1_43 [cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.Map<TSuccess, TMessage, TResult>(System.Func<TSuccess, TResult>)", file="Tokenizer.cs", label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.Map<TSuccess, TMessage, TResult>(System.Func<TSuccess, TResult>)", span="534-534"];
m1_47 [cluster="string.EqualsOrdinal(string)", file="Tokenizer.cs", label="Entry string.EqualsOrdinal(string)", span="40-40"];
m1_39 [cluster="System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", file="Tokenizer.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", span="0-0"];
m1_169 [cluster="string.IndexOf(char)", file="Tokenizer.cs", label="Entry string.IndexOf(char)", span="0-0"];
m1_42 [cluster="Unk.Select", file="Tokenizer.cs", label="Entry Unk.Select", span=""];
m1_122 [cluster="Unk.IsJust", file="Tokenizer.cs", label="Entry Unk.IsJust", span=""];
m1_0 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="Tokenizer.cs", label="Entry CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", span="16-16"];
m1_1 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", color=green, community=0, file="Tokenizer.cs", label="0: var tokenPartitions = new[]\r\n                {\r\n                    new KeyValuePair<string, IEnumerable<string>>(''x'', new [] { ''true'' })\r\n                }", span="19-22"];
m1_2 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", color=red, community=0, file="Tokenizer.cs", label="0: var specProps = new[]\r\n                {\r\n                    SpecificationProperty.Create(\r\n                        new OptionSpecification(''x'', string.Empty, false, string.Empty, -1, -1, '\0', Maybe.Nothing<object>(), typeof(bool), string.Empty, string.Empty, new List<string>()), \r\n                        typeof(FakeOptions).GetProperties().Single(p => p.Name.Equals(''BoolValue'', StringComparison.Ordinal)),\r\n                        Maybe.Nothing<object>())\r\n                }", span="23-29"];
m1_104 [cluster="Unk.Except", file="Tokenizer.cs", label="Entry Unk.Except", span=""];
m1_72 [cluster="Unk.Return", file="Tokenizer.cs", label="Entry Unk.Return", span=""];
m1_113 [cluster="CSharpx.Maybe.Nothing<T>()", file="Tokenizer.cs", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
m1_154 [cluster="System.Collections.Generic.List<T>.Add(T)", file="Tokenizer.cs", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
m1_64 [cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()", file="Tokenizer.cs", label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()", span="653-653"];
m1_111 [cluster="CommandLine.Core.Token.IsValue()", file="Tokenizer.cs", label="Entry CommandLine.Core.Token.IsValue()", span="133-133"];
m1_103 [cluster="Unk.FromJust", file="Tokenizer.cs", label="Entry Unk.FromJust", span=""];
m1_149 [cluster="char.IsDigit(char)", file="Tokenizer.cs", label="Entry char.IsDigit(char)", span="0-0"];
m1_173 [cluster="CommandLine.Core.Token.Value(string, bool)", file="Tokenizer.cs", label="Entry CommandLine.Core.Token.Value(string, bool)", span="29-29"];
m1_155 [cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="Tokenizer.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0"];
m1_66 [cluster="Unk.SelectMany", file="Tokenizer.cs", label="Entry Unk.SelectMany", span=""];
m1_83 [cluster="Unk.FirstOrDefault", file="Tokenizer.cs", label="Entry Unk.FirstOrDefault", span=""];
m1_93 [cluster="Unk.Split", file="Tokenizer.cs", label="Entry Unk.Split", span=""];
m1_132 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="yield return Token.Value(value);", span="115-115"];
m1_146 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="yield return Token.Value(text.Substring(seen.Count()));", span="145-145"];
m1_129 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="value.Length > 1 || value[0] == '-' || value[1] != '-'", span="109-109"];
m1_133 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="yield break;", span="116-116"];
m1_135 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="yield return Token.Name(text);", span="121-121"];
m1_136 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="yield break;", span="122-122"];
m1_138 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="yield return Token.Name(first);", span="126-126"];
m1_144 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="yield return Token.Name(n);", span="136-136"];
m1_130 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="var text = value.Substring(1)", span="111-111"];
m1_134 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="value.Length == 2", span="119-119"];
m1_142 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="!seen.Contains(c) && nameLookup(n)", span="133-133"];
m1_131 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="char.IsDigit(text[0])", span="113-113"];
m1_145 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="seen.Count() < text.Length", span="143-143"];
m1_139 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="var seen = new List<char> { first[0] }", span="128-128"];
m1_137 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="var first = text.Substring(0, 1)", span="125-125"];
m1_143 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="seen.Add(c)", span="135-135"];
m1_141 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="var n = new string(c, 1)", span="132-132"];
m1_140 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="text.Substring(1)", span="130-130"];
m1_147 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="Exit CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", span="105-105"];
m1_14 [cluster="Unk.MapValues", file="Tokenizer.cs", label="Entry Unk.MapValues", span=""];
m1_153 [cluster="System.Collections.Generic.List<T>.Contains(T)", file="Tokenizer.cs", label="Entry System.Collections.Generic.List<T>.Contains(T)", span="0-0"];
m1_148 [cluster="string.Substring(int)", file="Tokenizer.cs", label="Entry string.Substring(int)", span="0-0"];
m1_174 [file="Tokenizer.cs", label=unkTokens, span=""];
m1_176 [file="Tokenizer.cs", label="System.Func<string, CSharpx.Maybe<char>>", span=""];
m1_175 [file="Tokenizer.cs", label=values, span=""];
m1_183 [file="Tokenizer.cs", label=indexes, span=""];
m1_177 [file="Tokenizer.cs", label=int, span=""];
m1_178 [file="Tokenizer.cs", label=replaces, span=""];
m1_182 [file="Tokenizer.cs", label="System.Func<string, bool>", span=""];
m1_181 [file="Tokenizer.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", span=""];
m1_180 [file="Tokenizer.cs", label="CommandLine.Core.Token", span=""];
m1_179 [file="Tokenizer.cs", label=int, span=""];
m1_31 -> m1_33  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m1_31 -> m1_36  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m1_31 -> m1_32  [key=0, style=solid];
m1_31 -> m1_34  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m1_33 -> m1_22  [key=2, style=dotted];
m1_33 -> m1_34  [key=0, style=solid];
m1_33 -> m1_39  [key=2, style=dotted];
m1_33 -> m1_48  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_33 -> m1_35  [color=darkseagreen4, key=1, label=tokenizerResult, style=dashed];
m1_36 -> m1_22  [key=2, style=dotted];
m1_36 -> m1_37  [key=0, style=solid];
m1_32 -> m1_33  [key=0, style=solid];
m1_32 -> m1_36  [key=0, style=solid];
m1_32 -> m1_38  [key=2, style=dotted];
m1_32 -> m1_44  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_34 -> m1_55  [color=darkseagreen4, key=1, label=values, style=dashed];
m1_34 -> m1_35  [key=0, style=solid];
m1_34 -> m1_40  [key=2, style=dotted];
m1_34 -> m1_41  [key=2, style=dotted];
m1_34 -> m1_42  [key=2, style=dotted];
m1_34 -> m1_51  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_35 -> m1_37  [key=0, style=solid];
m1_35 -> m1_43  [key=2, style=dotted];
m1_35 -> m1_54  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_37 -> m1_31  [color=blue, key=0, style=bold];
m1_97 -> m1_98  [key=0, style=solid];
m1_97 -> m1_99  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m1_97 -> m1_106  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m1_97 -> m1_107  [color=darkseagreen4, key=1, label="System.Func<string, bool>", style=dashed];
m1_97 -> m1_115  [color=darkseagreen4, key=1, label="System.Func<string, bool>", style=dashed];
m1_97 -> m1_100  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m1_98 -> m1_23  [key=2, style=dotted];
m1_98 -> m1_98  [color=darkseagreen4, key=1, label=i, style=dashed];
m1_98 -> m1_99  [key=0, style=solid];
m1_98 -> m1_42  [key=2, style=dotted];
m1_98 -> m1_103  [key=2, style=dotted];
m1_98 -> m1_105  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_98 -> m1_119  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_98 -> m1_124  [color=darkseagreen4, key=1, label=indexes, style=dashed];
m1_99 -> m1_23  [key=2, style=dotted];
m1_99 -> m1_99  [color=darkseagreen4, key=1, label=t, style=dashed];
m1_99 -> m1_100  [key=0, style=solid];
m1_99 -> m1_42  [key=2, style=dotted];
m1_99 -> m1_103  [key=2, style=dotted];
m1_99 -> m1_123  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_99 -> m1_126  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_100 -> m1_101  [key=0, style=solid];
m1_100 -> m1_104  [key=2, style=dotted];
m1_101 -> m1_102  [key=0, style=solid];
m1_102 -> m1_97  [color=blue, key=0, style=bold];
m1_27 -> m1_28  [key=0, style=solid];
m1_57 -> m1_69  [color=darkseagreen4, key=1, label="System.Func<string, CSharpx.Maybe<char>>", style=dashed];
m1_57 -> m1_62  [color=darkseagreen4, key=1, label="RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>", style=dashed];
m1_57 -> m1_58  [key=0, style=solid];
m1_57 -> m1_59  [color=darkseagreen4, key=1, label="System.Func<string, CSharpx.Maybe<char>>", style=dashed];
m1_62 -> m1_26  [key=2, style=dotted];
m1_62 -> m1_63  [key=0, style=solid];
m1_62 -> m1_67  [key=2, style=dotted];
m1_61 -> m1_62  [key=0, style=solid];
m1_61 -> m1_66  [key=2, style=dotted];
m1_61 -> m1_94  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_58 -> m1_59  [key=0, style=solid];
m1_58 -> m1_64  [key=2, style=dotted];
m1_58 -> m1_60  [color=darkseagreen4, key=1, label=tokens, style=dashed];
m1_59 -> m1_68  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_59 -> m1_42  [key=2, style=dotted];
m1_59 -> m1_60  [key=0, style=solid];
m1_59 -> m1_65  [key=2, style=dotted];
m1_59 -> m1_77  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_59 -> m1_81  [color=darkseagreen4, key=1, label=replaces, style=dashed];
m1_60 -> m1_42  [key=2, style=dotted];
m1_60 -> m1_61  [key=0, style=solid];
m1_60 -> m1_80  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_63 -> m1_57  [color=blue, key=0, style=bold];
m1_21 -> m1_22  [key=0, style=solid];
m1_21 -> m1_23  [key=2, style=dotted];
m1_16 -> m1_17  [key=0, style=solid];
m1_22 -> m1_20  [color=blue, key=0, style=bold];
m1_3 -> m1_10  [color=green, key=1, label="System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>", style=dashed];
m1_3 -> m1_7  [key=0, style=solid];
m1_3 -> m1_9  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m1_3 -> m1_11  [color=darkseagreen4, key=1, label="System.Func<string, bool>", style=dashed];
m1_3 -> m1_4  [key=0, style=solid];
m1_3 -> m1_13  [key=2, style=dotted];
m1_3 -> m1_14  [key=2, style=dotted];
m1_3 -> m1_20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_3 -> m1_24  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_10 -> m1_11  [color=green, key=0, style=solid];
m1_10 -> m1_20  [color=green, key=2, style=dotted];
m1_10 -> m1_12  [color=green, key=1, label=normalized, style=dashed];
m1_9 -> m1_10  [color=green, key=0, style=solid];
m1_9 -> m1_9  [color=darkseagreen4, key=1, label=arg, style=dashed];
m1_9 -> m1_15  [key=2, style=dotted];
m1_9 -> m1_16  [key=2, style=dotted];
m1_9 -> m1_17  [key=2, style=dotted];
m1_9 -> m1_18  [key=2, style=dotted];
m1_9 -> m1_19  [key=2, style=dotted];
m1_11 -> m1_11  [color=darkseagreen4, key=1, label=t, style=dashed];
m1_11 -> m1_12  [key=0, style=solid];
m1_11 -> m1_21  [key=2, style=dotted];
m1_11 -> m1_22  [key=2, style=dotted];
m1_11 -> m1_19  [key=2, style=dotted];
m1_11 -> m1_28  [color=darkseagreen4, key=1, label=unkTokens, style=dashed];
m1_12 -> m1_12  [color=darkseagreen4, key=1, label=t, style=dashed];
m1_12 -> m1_13  [key=0, style=solid];
m1_12 -> m1_23  [key=2, style=dotted];
m1_12 -> m1_24  [key=2, style=dotted];
m1_12 -> m1_25  [key=2, style=dotted];
m1_12 -> m1_26  [key=2, style=dotted];
m1_12 -> m1_27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_7 -> m1_12  [color=darkseagreen4, key=1, label=errors, style=dashed];
m1_7 -> m1_8  [key=0, style=solid];
m1_7 -> m1_9  [key=2, style=dotted];
m1_8 -> m1_9  [key=0, style=solid];
m1_13 -> m1_3  [color=blue, key=0, style=bold];
m1_30 -> m1_28  [color=blue, key=0, style=bold];
m1_114 -> m1_115  [key=0, style=solid];
m1_20 -> m1_21  [key=0, style=solid];
m1_24 -> m1_25  [key=0, style=solid];
m1_28 -> m1_29  [key=0, style=solid];
m1_28 -> m1_30  [key=2, style=dotted];
m1_17 -> m1_18  [key=0, style=solid];
m1_17 -> m1_19  [key=2, style=dotted];
m1_17 -> m1_156  [key=0, style=solid];
m1_17 -> m1_160  [color=crimson, key=0, style=bold];
m1_17 -> m1_161  [color=crimson, key=0, style=bold];
m1_17 -> m1_164  [color=crimson, key=0, style=bold];
m1_17 -> m1_166  [color=crimson, key=0, style=bold];
m1_17 -> m1_167  [color=crimson, key=0, style=bold];
m1_17 -> m1_157  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_17 -> m1_163  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_18 -> m1_16  [color=blue, key=0, style=bold];
m1_18 -> m1_129  [key=0, style=solid];
m1_18 -> m1_132  [color=crimson, key=0, style=bold];
m1_18 -> m1_133  [color=crimson, key=0, style=bold];
m1_18 -> m1_135  [color=crimson, key=0, style=bold];
m1_18 -> m1_136  [color=crimson, key=0, style=bold];
m1_18 -> m1_138  [color=crimson, key=0, style=bold];
m1_18 -> m1_144  [color=crimson, key=0, style=bold];
m1_18 -> m1_146  [color=crimson, key=0, style=bold];
m1_18 -> m1_130  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_18 -> m1_134  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_18 -> m1_142  [color=darkseagreen4, key=1, label="System.Func<string, bool>", style=dashed];
m1_25 -> m1_26  [key=0, style=solid];
m1_25 -> m1_27  [key=2, style=dotted];
m1_26 -> m1_24  [color=blue, key=0, style=bold];
m1_29 -> m1_30  [key=0, style=solid];
m1_29 -> m1_23  [key=2, style=dotted];
m1_29 -> m1_31  [key=2, style=dotted];
m1_29 -> m1_27  [color=blue, key=0, style=bold];
m1_4 -> m1_5  [color=green, key=0, style=solid];
m1_4 -> m1_11  [key=2, style=dotted];
m1_4 -> m1_15  [key=2, style=dotted];
m1_4 -> m1_28  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_5 -> m1_6  [color=green, key=0, style=solid];
m1_5 -> m1_0  [color=blue, key=0, style=bold];
m1_6 -> m1_4  [color=blue, key=0, style=bold];
m1_69 -> m1_22  [key=2, style=dotted];
m1_69 -> m1_70  [key=0, style=solid];
m1_69 -> m1_71  [key=2, style=dotted];
m1_69 -> m1_72  [key=2, style=dotted];
m1_69 -> m1_73  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_55 -> m1_25  [key=2, style=dotted];
m1_55 -> m1_56  [key=0, style=solid];
m1_48 -> m1_49  [key=0, style=solid];
m1_68 -> m1_69  [key=0, style=solid];
m1_68 -> m1_74  [color=darkseagreen4, key=1, label=int, style=dashed];
m1_70 -> m1_68  [color=blue, key=0, style=bold];
m1_73 -> m1_74  [key=0, style=solid];
m1_124 -> m1_30  [key=2, style=dotted];
m1_124 -> m1_125  [key=0, style=solid];
m1_124 -> m1_112  [key=2, style=dotted];
m1_124 -> m1_113  [key=2, style=dotted];
m1_105 -> m1_106  [key=0, style=solid];
m1_105 -> m1_107  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m1_119 -> m1_120  [key=0, style=solid];
m1_123 -> m1_124  [key=0, style=solid];
m1_126 -> m1_127  [key=0, style=solid];
m1_54 -> m1_55  [key=0, style=solid];
m1_56 -> m1_54  [color=blue, key=0, style=bold];
m1_44 -> m1_45  [key=0, style=solid];
m1_51 -> m1_52  [key=0, style=solid];
m1_50 -> m1_48  [color=blue, key=0, style=bold];
m1_49 -> m1_50  [key=0, style=solid];
m1_49 -> m1_47  [key=2, style=dotted];
m1_74 -> m1_75  [key=0, style=solid];
m1_74 -> m1_12  [key=2, style=dotted];
m1_81 -> m1_72  [key=2, style=dotted];
m1_81 -> m1_82  [key=0, style=solid];
m1_81 -> m1_83  [key=2, style=dotted];
m1_81 -> m1_84  [key=2, style=dotted];
m1_81 -> m1_85  [key=2, style=dotted];
m1_81 -> m1_86  [key=2, style=dotted];
m1_81 -> m1_87  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_81 -> m1_90  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_107 -> m1_72  [key=2, style=dotted];
m1_107 -> m1_108  [key=0, style=solid];
m1_107 -> m1_111  [key=2, style=dotted];
m1_107 -> m1_112  [key=2, style=dotted];
m1_107 -> m1_113  [key=2, style=dotted];
m1_107 -> m1_114  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_75 -> m1_73  [color=blue, key=0, style=bold];
m1_125 -> m1_123  [color=blue, key=0, style=bold];
m1_106 -> m1_107  [key=0, style=solid];
m1_106 -> m1_109  [key=2, style=dotted];
m1_106 -> m1_110  [key=2, style=dotted];
m1_115 -> m1_116  [key=0, style=solid];
m1_115 -> m1_117  [key=2, style=dotted];
m1_115 -> m1_118  [key=2, style=dotted];
m1_91 -> m1_42  [key=2, style=dotted];
m1_91 -> m1_92  [key=0, style=solid];
m1_91 -> m1_93  [key=2, style=dotted];
m1_108 -> m1_105  [color=blue, key=0, style=bold];
m1_121 -> m1_119  [color=blue, key=0, style=bold];
m1_120 -> m1_121  [key=0, style=solid];
m1_120 -> m1_122  [key=2, style=dotted];
m1_128 -> m1_126  [color=blue, key=0, style=bold];
m1_127 -> m1_128  [key=0, style=solid];
m1_127 -> m1_122  [key=2, style=dotted];
m1_94 -> m1_95  [key=0, style=solid];
m1_46 -> m1_44  [color=blue, key=0, style=bold];
m1_45 -> m1_46  [key=0, style=solid];
m1_45 -> m1_47  [key=2, style=dotted];
m1_53 -> m1_51  [color=blue, key=0, style=bold];
m1_52 -> m1_53  [key=0, style=solid];
m1_52 -> m1_47  [key=2, style=dotted];
m1_77 -> m1_78  [key=0, style=solid];
m1_80 -> m1_81  [key=0, style=solid];
m1_80 -> m1_91  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m1_80 -> m1_88  [color=darkseagreen4, key=1, label=int, style=dashed];
m1_82 -> m1_80  [color=blue, key=0, style=bold];
m1_87 -> m1_88  [key=0, style=solid];
m1_90 -> m1_91  [key=0, style=solid];
m1_116 -> m1_114  [color=blue, key=0, style=bold];
m1_92 -> m1_90  [color=blue, key=0, style=bold];
m1_96 -> m1_94  [color=blue, key=0, style=bold];
m1_95 -> m1_96  [key=0, style=solid];
m1_79 -> m1_77  [color=blue, key=0, style=bold];
m1_78 -> m1_79  [key=0, style=solid];
m1_88 -> m1_89  [key=0, style=solid];
m1_89 -> m1_87  [color=blue, key=0, style=bold];
m1_156 -> m1_15  [key=2, style=dotted];
m1_156 -> m1_157  [key=0, style=solid];
m1_156 -> m1_168  [key=0, style=solid];
m1_160 -> m1_161  [key=0, style=solid];
m1_160 -> m1_150  [key=2, style=dotted];
m1_161 -> m1_162  [key=0, style=solid];
m1_164 -> m1_165  [key=0, style=solid];
m1_166 -> m1_167  [key=0, style=solid];
m1_166 -> m1_150  [key=2, style=dotted];
m1_167 -> m1_168  [key=0, style=solid];
m1_167 -> m1_173  [key=2, style=dotted];
m1_157 -> m1_160  [color=darkseagreen4, key=1, label=text, style=dashed];
m1_157 -> m1_158  [key=0, style=solid];
m1_157 -> m1_148  [key=2, style=dotted];
m1_157 -> m1_165  [color=darkseagreen4, key=1, label=text, style=dashed];
m1_163 -> m1_164  [key=0, style=solid];
m1_163 -> m1_170  [key=2, style=dotted];
m1_163 -> m1_171  [key=2, style=dotted];
m1_159 -> m1_160  [key=0, style=solid];
m1_159 -> m1_162  [key=0, style=solid];
m1_162 -> m1_163  [key=0, style=solid];
m1_162 -> m1_165  [key=0, style=solid];
m1_165 -> m1_166  [key=0, style=solid];
m1_165 -> m1_167  [color=darkseagreen4, key=1, label=parts, style=dashed];
m1_165 -> m1_172  [key=2, style=dotted];
m1_158 -> m1_159  [key=0, style=solid];
m1_158 -> m1_162  [color=darkseagreen4, key=1, label=equalIndex, style=dashed];
m1_158 -> m1_169  [key=2, style=dotted];
m1_168 -> m1_17  [color=blue, key=0, style=bold];
m1_0 -> m1_1  [color=green, key=0, style=solid];
m1_0 -> m1_3  [color=darkorchid, key=3, label="method methodReturn RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error> Tokenize", style=bold];
m1_1 -> m1_2  [color=red, key=0, style=solid];
m1_1 -> m1_3  [color=green, key=2, style=dotted];
m1_1 -> m1_4  [color=green, key=1, label="lambda expression", style=dashed];
m1_1 -> m1_6  [key=2, style=dotted];
m1_2 -> m1_0  [color=blue, key=0, style=bold];
m1_2 -> m1_3  [color=red, key=0, style=solid];
m1_2 -> m1_7  [color=red, key=2, style=dotted];
m1_2 -> m1_8  [color=red, key=2, style=dotted];
m1_2 -> m1_9  [color=red, key=2, style=dotted];
m1_2 -> m1_10  [color=red, key=2, style=dotted];
m1_2 -> m1_11  [color=red, key=2, style=dotted];
m1_2 -> m1_12  [color=red, key=2, style=dotted];
m1_2 -> m1_16  [color=red, key=1, label="lambda expression", style=dashed];
m1_132 -> m1_16  [key=2, style=dotted];
m1_132 -> m1_133  [key=0, style=solid];
m1_146 -> m1_16  [key=2, style=dotted];
m1_146 -> m1_147  [key=0, style=solid];
m1_146 -> m1_155  [key=2, style=dotted];
m1_146 -> m1_148  [key=2, style=dotted];
m1_129 -> m1_147  [key=0, style=solid];
m1_129 -> m1_130  [key=0, style=solid];
m1_133 -> m1_134  [key=0, style=solid];
m1_135 -> m1_136  [key=0, style=solid];
m1_135 -> m1_150  [key=2, style=dotted];
m1_136 -> m1_137  [key=0, style=solid];
m1_138 -> m1_139  [key=0, style=solid];
m1_138 -> m1_150  [key=2, style=dotted];
m1_144 -> m1_140  [key=0, style=solid];
m1_144 -> m1_150  [key=2, style=dotted];
m1_130 -> m1_146  [color=darkseagreen4, key=1, label=text, style=dashed];
m1_130 -> m1_135  [color=darkseagreen4, key=1, label=text, style=dashed];
m1_130 -> m1_131  [key=0, style=solid];
m1_130 -> m1_148  [key=2, style=dotted];
m1_130 -> m1_137  [color=darkseagreen4, key=1, label=text, style=dashed];
m1_130 -> m1_140  [color=darkseagreen4, key=1, label=text, style=dashed];
m1_130 -> m1_145  [color=darkseagreen4, key=1, label=text, style=dashed];
m1_134 -> m1_135  [key=0, style=solid];
m1_134 -> m1_137  [key=0, style=solid];
m1_142 -> m1_22  [key=2, style=dotted];
m1_142 -> m1_143  [key=0, style=solid];
m1_142 -> m1_145  [key=0, style=solid];
m1_142 -> m1_153  [key=2, style=dotted];
m1_131 -> m1_132  [key=0, style=solid];
m1_131 -> m1_134  [key=0, style=solid];
m1_131 -> m1_149  [key=2, style=dotted];
m1_145 -> m1_146  [key=0, style=solid];
m1_145 -> m1_147  [key=0, style=solid];
m1_145 -> m1_155  [key=2, style=dotted];
m1_139 -> m1_146  [color=darkseagreen4, key=1, label=seen, style=dashed];
m1_139 -> m1_142  [color=darkseagreen4, key=1, label=seen, style=dashed];
m1_139 -> m1_145  [color=darkseagreen4, key=1, label=seen, style=dashed];
m1_139 -> m1_140  [key=0, style=solid];
m1_139 -> m1_9  [key=2, style=dotted];
m1_139 -> m1_143  [color=darkseagreen4, key=1, label=seen, style=dashed];
m1_137 -> m1_138  [key=0, style=solid];
m1_137 -> m1_139  [color=darkseagreen4, key=1, label=first, style=dashed];
m1_137 -> m1_151  [key=2, style=dotted];
m1_143 -> m1_144  [key=0, style=solid];
m1_143 -> m1_154  [key=2, style=dotted];
m1_141 -> m1_144  [color=darkseagreen4, key=1, label=n, style=dashed];
m1_141 -> m1_142  [key=0, style=solid];
m1_141 -> m1_152  [key=2, style=dotted];
m1_140 -> m1_142  [color=darkseagreen4, key=1, label=c, style=dashed];
m1_140 -> m1_145  [key=0, style=solid];
m1_140 -> m1_148  [key=2, style=dotted];
m1_140 -> m1_143  [color=darkseagreen4, key=1, label=c, style=dashed];
m1_140 -> m1_141  [key=0, style=solid];
m1_147 -> m1_18  [color=blue, key=0, style=bold];
m1_174 -> m1_28  [color=darkseagreen4, key=1, label=unkTokens, style=dashed];
m1_176 -> m1_69  [color=darkseagreen4, key=1, label="System.Func<string, CSharpx.Maybe<char>>", style=dashed];
m1_175 -> m1_55  [color=darkseagreen4, key=1, label=values, style=dashed];
m1_183 -> m1_124  [color=darkseagreen4, key=1, label=indexes, style=dashed];
m1_177 -> m1_74  [color=darkseagreen4, key=1, label=int, style=dashed];
m1_178 -> m1_81  [color=darkseagreen4, key=1, label=replaces, style=dashed];
m1_182 -> m1_107  [color=darkseagreen4, key=1, label="System.Func<string, bool>", style=dashed];
m1_182 -> m1_115  [color=darkseagreen4, key=1, label="System.Func<string, bool>", style=dashed];
m1_181 -> m1_106  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m1_180 -> m1_91  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m1_179 -> m1_88  [color=darkseagreen4, key=1, label=int, style=dashed];
}
