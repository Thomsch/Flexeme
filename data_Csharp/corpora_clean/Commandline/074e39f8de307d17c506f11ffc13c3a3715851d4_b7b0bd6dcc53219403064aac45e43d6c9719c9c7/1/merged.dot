digraph  {
m1_172 [label="Entry string.Split(params char[])", span="0-0", cluster="string.Split(params char[])", file="Tokenizer.cs"];
m1_31 [label="Entry string.Equals(string)", span="0-0", cluster="string.Equals(string)", file="Tokenizer.cs"];
m1_33 [label="var tokenizerResult = tokenizer(arguments.TakeWhile(arg => !arg.EqualsOrdinal(''--'')))", span="50-50", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", file="Tokenizer.cs"];
m1_36 [label="return tokenizer(arguments);", span="54-54", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", file="Tokenizer.cs"];
m1_32 [label="arguments.Any(arg => arg.EqualsOrdinal(''--''))", span="48-48", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", file="Tokenizer.cs"];
m1_34 [label="var values = arguments.SkipWhile(arg => !arg.EqualsOrdinal(''--'')).Skip(1).Select(Token.Value)", span="51-51", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", file="Tokenizer.cs"];
m1_35 [label="return tokenizerResult.Map(tokens => tokens.Concat(values));", span="52-52", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", file="Tokenizer.cs"];
m1_37 [label="Exit CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", span="44-44", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", file="Tokenizer.cs"];
m1_97 [label="Entry CommandLine.Core.Tokenizer.Normalize(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, bool>)", span="78-78", cluster="CommandLine.Core.Tokenizer.Normalize(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, bool>)", file="Tokenizer.cs"];
m1_98 [label="var indexes =\r\n                from i in\r\n                    tokens.Select(\r\n                        (t, i) =>\r\n                        {\r\n                            var prev = tokens.ElementAtOrDefault(i - 1).ToMaybe();\r\n                            return t.IsValue() && ((Value)t).ExplicitlyAssigned\r\n                                   && prev.Return(p => p.IsName() && !nameLookup(p.Text), false)\r\n                                ? Maybe.Just(i)\r\n                                : Maybe.Nothing<int>();\r\n                        }).Where(i => i.IsJust())\r\n                select i.FromJust()", span="81-92", cluster="CommandLine.Core.Tokenizer.Normalize(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, bool>)", file="Tokenizer.cs"];
m1_99 [label="var toExclude =\r\n                from t in\r\n                    tokens.Select((t, i) => indexes.Contains(i) ? Maybe.Just(t) : Maybe.Nothing<Token>())\r\n                        .Where(t => t.IsJust())\r\n                select t.FromJust()", span="94-98", cluster="CommandLine.Core.Tokenizer.Normalize(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, bool>)", file="Tokenizer.cs"];
m1_100 [label="var normalized = tokens.Except(toExclude)", span="100-100", cluster="CommandLine.Core.Tokenizer.Normalize(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, bool>)", file="Tokenizer.cs"];
m1_101 [label="return normalized;", span="102-102", cluster="CommandLine.Core.Tokenizer.Normalize(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, bool>)", file="Tokenizer.cs"];
m1_102 [label="Exit CommandLine.Core.Tokenizer.Normalize(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, bool>)", span="78-78", cluster="CommandLine.Core.Tokenizer.Normalize(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, bool>)", file="Tokenizer.cs"];
m1_86 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="Tokenizer.cs"];
m1_118 [label="Entry Unk.nameLookup", span="", cluster="Unk.nameLookup", file="Tokenizer.cs"];
m1_27 [label="Entry lambda expression", span="41-41", cluster="lambda expression", file="Tokenizer.cs"];
m1_170 [label="Entry CommandLine.BadFormatTokenError.BadFormatTokenError(string)", span="196-196", cluster="CommandLine.BadFormatTokenError.BadFormatTokenError(string)", file="Tokenizer.cs"];
m1_57 [label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", span="57-57", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="Tokenizer.cs"];
m1_62 [label="return Result.Succeed(flattened, tokenizerResult.SuccessfulMessages());", span="75-75", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="Tokenizer.cs"];
m1_61 [label="var flattened = exploded.SelectMany(x => x)", span="73-73", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="Tokenizer.cs"];
m1_58 [label="var tokens = tokenizerResult.SucceededWith()", span="61-61", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="Tokenizer.cs"];
m1_59 [label="var replaces = tokens.Select((t,i) =>\r\n                optionSequenceWithSeparatorLookup(t.Text)\r\n                    .Return(sep => Tuple.Create(i + 1, sep),\r\n                        Tuple.Create(-1, '\0'))).SkipWhile(x => x.Item1 < 0)", span="63-66", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="Tokenizer.cs"];
m1_60 [label="var exploded = tokens.Select((t, i) =>\r\n                        replaces.FirstOrDefault(x => x.Item1 == i).ToMaybe()\r\n                            .Return(r => t.Text.Split(r.Item2).Select(Token.Value),\r\n                                Enumerable.Empty<Token>().Concat(new[]{ t })))", span="68-71", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="Tokenizer.cs"];
m1_63 [label="Exit CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", span="57-57", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="Tokenizer.cs"];
m1_15 [label="Entry Unk.NotNull", span="", cluster="Unk.NotNull", file="Tokenizer.cs"];
m1_150 [label="Entry CommandLine.Core.Token.Name(string)", span="19-19", cluster="CommandLine.Core.Token.Name(string)", file="Tokenizer.cs"];
m1_171 [label="Entry System.Action<T>.Invoke(T)", span="0-0", cluster="System.Action<T>.Invoke(T)", file="Tokenizer.cs"];
m1_65 [label="Entry Unk.SkipWhile", span="", cluster="Unk.SkipWhile", file="Tokenizer.cs"];
m1_21 [label="pt.Specification.IsOption()", span="33-33", cluster="lambda expression", file="Tokenizer.cs"];
m1_38 [label="Entry Unk.Any", span="", cluster="Unk.Any", file="Tokenizer.cs"];
m1_16 [label="Entry lambda expression", span="27-27", cluster="lambda expression", file="Tokenizer.cs"];
m1_117 [label="Entry Unk.IsName", span="", cluster="Unk.IsName", file="Tokenizer.cs"];
m1_22 [label="Exit lambda expression", span="33-33", cluster="lambda expression", file="Tokenizer.cs"];
m1_3 [label="var result = OptionMapper.MapValues(\r\n                specProps.Where(pt => pt.Specification.IsOption()),\r\n                tokenPartitions,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, CultureInfo.InvariantCulture),\r\n                StringComparer.InvariantCulture)", span="32-36", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="Tokenizer.cs"];
m1_10 [label="Entry System.Type.GetProperties()", span="0-0", cluster="System.Type.GetProperties()", color=green, community=0, file="Tokenizer.cs"];
m1_9 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="Tokenizer.cs"];
m1_11 [label="Entry Unk.Single", span="", cluster="Unk.Single", file="Tokenizer.cs"];
m1_12 [label="Entry Unk.Create", span="", cluster="Unk.Create", file="Tokenizer.cs"];
m1_7 [label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", span="17-17", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="Tokenizer.cs"];
m1_8 [label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="66-66", cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="Tokenizer.cs"];
m1_13 [label="Entry Unk.Where", span="", cluster="Unk.Where", file="Tokenizer.cs"];
m1_23 [label="Entry CommandLine.Core.Specification.IsOption()", span="11-11", cluster="CommandLine.Core.Specification.IsOption()", file="Tokenizer.cs"];
m1_151 [label="Entry string.Substring(int, int)", span="0-0", cluster="string.Substring(int, int)", file="Tokenizer.cs"];
m1_85 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()", file="Tokenizer.cs"];
m1_152 [label="Entry string.String(char, int)", span="0-0", cluster="string.String(char, int)", file="Tokenizer.cs"];
m1_109 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ElementAtOrDefault<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ElementAtOrDefault<TSource>(int)", file="Tokenizer.cs"];
m1_30 [label="Exit lambda expression", span="40-42", cluster="lambda expression", file="Tokenizer.cs"];
m1_84 [label="Entry Unk.ToMaybe", span="", cluster="Unk.ToMaybe", file="Tokenizer.cs"];
m1_112 [label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124", cluster="CSharpx.Maybe.Just<T>(T)", file="Tokenizer.cs"];
m1_71 [label="Entry System.Tuple.Create<T1, T2>(T1, T2)", span="0-0", cluster="System.Tuple.Create<T1, T2>(T1, T2)", file="Tokenizer.cs"];
m1_110 [label="Entry T.ToMaybe<T>()", span="249-249", cluster="T.ToMaybe<T>()", file="Tokenizer.cs"];
m1_114 [label="Entry lambda expression", span="88-88", cluster="lambda expression", file="Tokenizer.cs"];
m1_20 [label="Entry Unk.normalize", span="", cluster="Unk.normalize", file="Tokenizer.cs"];
m1_24 [label="Entry UnknownOptionError.cstr", span="", cluster="UnknownOptionError.cstr", file="Tokenizer.cs"];
m1_28 [label="!unkTokens.Contains(x)", span="41-41", cluster="lambda expression", file="Tokenizer.cs"];
m1_17 [label="Entry CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", span="150-150", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m1_18 [label="Entry CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", span="105-105", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m1_25 [label="Entry Unk.Concat", span="", cluster="Unk.Concat", file="Tokenizer.cs"];
m1_26 [label="Entry Unk.Succeed", span="", cluster="Unk.Succeed", file="Tokenizer.cs"];
m1_29 [label="Exit lambda expression", span="41-41", cluster="lambda expression", file="Tokenizer.cs"];
m1_4 [label="Assert.NotNull(result.Value.Single(\r\n                a => a.Specification.IsOption()\r\n                && ((OptionSpecification)a.Specification).ShortName.Equals(''x'')\r\n                && (bool)((Just<object>)a.Value).Value == true))", span="39-42", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="Tokenizer.cs"];
m1_5 [label="Exit CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", span="16-16", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", color=green, community=0, file="Tokenizer.cs"];
m1_6 [label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", file="Tokenizer.cs"];
m1_69 [label="optionSequenceWithSeparatorLookup(t.Text)\r\n                    .Return(sep => Tuple.Create(i + 1, sep),\r\n                        Tuple.Create(-1, '\0'))", span="64-66", cluster="lambda expression", file="Tokenizer.cs"];
m1_55 [label="tokens.Concat(values)", span="52-52", cluster="lambda expression", file="Tokenizer.cs"];
m1_48 [label="Entry lambda expression", span="50-50", cluster="lambda expression", file="Tokenizer.cs"];
m1_68 [label="Entry lambda expression", span="63-66", cluster="lambda expression", file="Tokenizer.cs"];
m1_70 [label="Exit lambda expression", span="63-66", cluster="lambda expression", file="Tokenizer.cs"];
m1_73 [label="Entry lambda expression", span="65-65", cluster="lambda expression", file="Tokenizer.cs"];
m1_124 [label="indexes.Contains(i) ? Maybe.Just(t) : Maybe.Nothing<Token>()", span="96-96", cluster="lambda expression", file="Tokenizer.cs"];
m1_105 [label="Entry lambda expression", span="84-91", cluster="lambda expression", file="Tokenizer.cs"];
m1_119 [label="Entry lambda expression", span="91-91", cluster="lambda expression", file="Tokenizer.cs"];
m1_123 [label="Entry lambda expression", span="96-96", cluster="lambda expression", file="Tokenizer.cs"];
m1_126 [label="Entry lambda expression", span="97-97", cluster="lambda expression", file="Tokenizer.cs"];
m1_54 [label="Entry lambda expression", span="52-52", cluster="lambda expression", file="Tokenizer.cs"];
m1_56 [label="Exit lambda expression", span="52-52", cluster="lambda expression", file="Tokenizer.cs"];
m1_44 [label="Entry lambda expression", span="48-48", cluster="lambda expression", file="Tokenizer.cs"];
m1_51 [label="Entry lambda expression", span="51-51", cluster="lambda expression", file="Tokenizer.cs"];
m1_50 [label="Exit lambda expression", span="50-50", cluster="lambda expression", file="Tokenizer.cs"];
m1_49 [label="!arg.EqualsOrdinal(''--'')", span="50-50", cluster="lambda expression", file="Tokenizer.cs"];
m1_74 [label="Tuple.Create(i + 1, sep)", span="65-65", cluster="lambda expression", file="Tokenizer.cs"];
m1_81 [label="replaces.FirstOrDefault(x => x.Item1 == i).ToMaybe()\r\n                            .Return(r => t.Text.Split(r.Item2).Select(Token.Value),\r\n                                Enumerable.Empty<Token>().Concat(new[]{ t }))", span="69-71", cluster="lambda expression", file="Tokenizer.cs"];
m1_107 [label="return t.IsValue() && ((Value)t).ExplicitlyAssigned\r\n                                   && prev.Return(p => p.IsName() && !nameLookup(p.Text), false)\r\n                                ? Maybe.Just(i)\r\n                                : Maybe.Nothing<int>();", span="87-90", cluster="lambda expression", file="Tokenizer.cs"];
m1_75 [label="Exit lambda expression", span="65-65", cluster="lambda expression", file="Tokenizer.cs"];
m1_125 [label="Exit lambda expression", span="96-96", cluster="lambda expression", file="Tokenizer.cs"];
m1_106 [label="var prev = tokens.ElementAtOrDefault(i - 1).ToMaybe()", span="86-86", cluster="lambda expression", file="Tokenizer.cs"];
m1_115 [label="p.IsName() && !nameLookup(p.Text)", span="88-88", cluster="lambda expression", file="Tokenizer.cs"];
m1_91 [label="t.Text.Split(r.Item2).Select(Token.Value)", span="70-70", cluster="lambda expression", file="Tokenizer.cs"];
m1_108 [label="Exit lambda expression", span="84-91", cluster="lambda expression", file="Tokenizer.cs"];
m1_121 [label="Exit lambda expression", span="91-91", cluster="lambda expression", file="Tokenizer.cs"];
m1_120 [label="i.IsJust()", span="91-91", cluster="lambda expression", file="Tokenizer.cs"];
m1_128 [label="Exit lambda expression", span="97-97", cluster="lambda expression", file="Tokenizer.cs"];
m1_127 [label="t.IsJust()", span="97-97", cluster="lambda expression", file="Tokenizer.cs"];
m1_94 [label="Entry lambda expression", span="73-73", cluster="lambda expression", file="Tokenizer.cs"];
m1_46 [label="Exit lambda expression", span="48-48", cluster="lambda expression", file="Tokenizer.cs"];
m1_45 [label="arg.EqualsOrdinal(''--'')", span="48-48", cluster="lambda expression", file="Tokenizer.cs"];
m1_53 [label="Exit lambda expression", span="51-51", cluster="lambda expression", file="Tokenizer.cs"];
m1_52 [label="!arg.EqualsOrdinal(''--'')", span="51-51", cluster="lambda expression", file="Tokenizer.cs"];
m1_77 [label="Entry lambda expression", span="66-66", cluster="lambda expression", file="Tokenizer.cs"];
m1_80 [label="Entry lambda expression", span="68-71", cluster="lambda expression", file="Tokenizer.cs"];
m1_82 [label="Exit lambda expression", span="68-71", cluster="lambda expression", file="Tokenizer.cs"];
m1_87 [label="Entry lambda expression", span="69-69", cluster="lambda expression", file="Tokenizer.cs"];
m1_90 [label="Entry lambda expression", span="70-70", cluster="lambda expression", file="Tokenizer.cs"];
m1_116 [label="Exit lambda expression", span="88-88", cluster="lambda expression", file="Tokenizer.cs"];
m1_92 [label="Exit lambda expression", span="70-70", cluster="lambda expression", file="Tokenizer.cs"];
m1_96 [label="Exit lambda expression", span="73-73", cluster="lambda expression", file="Tokenizer.cs"];
m1_95 [label=x, span="73-73", cluster="lambda expression", file="Tokenizer.cs"];
m1_79 [label="Exit lambda expression", span="66-66", cluster="lambda expression", file="Tokenizer.cs"];
m1_78 [label="x.Item1 < 0", span="66-66", cluster="lambda expression", file="Tokenizer.cs"];
m1_88 [label="x.Item1 == i", span="69-69", cluster="lambda expression", file="Tokenizer.cs"];
m1_89 [label="Exit lambda expression", span="69-69", cluster="lambda expression", file="Tokenizer.cs"];
m1_41 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="Tokenizer.cs"];
m1_156 [label="value.Length > 2 && value.StartsWith(''--'', StringComparison.Ordinal)", span="154-154", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m1_160 [label="yield return Token.Name(text);", span="160-160", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m1_161 [label="yield break;", span="161-161", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m1_164 [label="yield break;", span="166-166", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m1_166 [label="yield return Token.Name(parts[0]);", span="169-169", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m1_167 [label="yield return Token.Value(parts[1], true);", span="170-170", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m1_157 [label="var text = value.Substring(2)", span="156-156", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m1_163 [label="onError(new BadFormatTokenError(value))", span="165-165", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m1_159 [label="equalIndex <= 0", span="158-158", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m1_162 [label="equalIndex == 1", span="163-163", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m1_165 [label="var parts = text.Split('=')", span="168-168", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m1_158 [label="var equalIndex = text.IndexOf('=')", span="157-157", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m1_168 [label="Exit CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", span="150-150", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m1_19 [label="Entry Unk.Memorize", span="", cluster="Unk.Memorize", file="Tokenizer.cs"];
m1_67 [label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SuccessfulMessages<TSuccess, TMessage>()", span="12-12", cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SuccessfulMessages<TSuccess, TMessage>()", file="Tokenizer.cs"];
m1_40 [label="Entry System.Collections.Generic.IEnumerable<TSource>.SkipWhile<TSource>(System.Func<TSource, bool>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.SkipWhile<TSource>(System.Func<TSource, bool>)", file="Tokenizer.cs"];
m1_43 [label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.Map<TSuccess, TMessage, TResult>(System.Func<TSuccess, TResult>)", span="534-534", cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.Map<TSuccess, TMessage, TResult>(System.Func<TSuccess, TResult>)", file="Tokenizer.cs"];
m1_47 [label="Entry string.EqualsOrdinal(string)", span="40-40", cluster="string.EqualsOrdinal(string)", file="Tokenizer.cs"];
m1_39 [label="Entry System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", file="Tokenizer.cs"];
m1_169 [label="Entry string.IndexOf(char)", span="0-0", cluster="string.IndexOf(char)", file="Tokenizer.cs"];
m1_42 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="Tokenizer.cs"];
m1_122 [label="Entry Unk.IsJust", span="", cluster="Unk.IsJust", file="Tokenizer.cs"];
m1_0 [label="Entry CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", span="16-16", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="Tokenizer.cs"];
m1_1 [label="var tokenPartitions = new[]\r\n                {\r\n                    new KeyValuePair<string, IEnumerable<string>>(''x'', new [] { ''true'' })\r\n                }", span="19-22", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", color=green, community=0, file="Tokenizer.cs"];
m1_2 [label="var specProps = new[]\r\n                {\r\n                    SpecificationProperty.Create(\r\n                        new OptionSpecification(''x'', string.Empty, false, string.Empty, -1, -1, '\0', Maybe.Nothing<object>(), typeof(bool), string.Empty, string.Empty, new List<string>()), \r\n                        typeof(FakeOptions).GetProperties().Single(p => p.Name.Equals(''BoolValue'', StringComparison.Ordinal)),\r\n                        Maybe.Nothing<object>())\r\n                }", span="23-29", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="Tokenizer.cs", color=red, community=0];
m1_104 [label="Entry Unk.Except", span="", cluster="Unk.Except", file="Tokenizer.cs"];
m1_72 [label="Entry Unk.Return", span="", cluster="Unk.Return", file="Tokenizer.cs"];
m1_113 [label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116", cluster="CSharpx.Maybe.Nothing<T>()", file="Tokenizer.cs"];
m1_154 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)", file="Tokenizer.cs"];
m1_64 [label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()", span="653-653", cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()", file="Tokenizer.cs"];
m1_111 [label="Entry CommandLine.Core.Token.IsValue()", span="133-133", cluster="CommandLine.Core.Token.IsValue()", file="Tokenizer.cs"];
m1_103 [label="Entry Unk.FromJust", span="", cluster="Unk.FromJust", file="Tokenizer.cs"];
m1_149 [label="Entry char.IsDigit(char)", span="0-0", cluster="char.IsDigit(char)", file="Tokenizer.cs"];
m1_173 [label="Entry CommandLine.Core.Token.Value(string, bool)", span="29-29", cluster="CommandLine.Core.Token.Value(string, bool)", file="Tokenizer.cs"];
m1_155 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="Tokenizer.cs"];
m1_66 [label="Entry Unk.SelectMany", span="", cluster="Unk.SelectMany", file="Tokenizer.cs"];
m1_83 [label="Entry Unk.FirstOrDefault", span="", cluster="Unk.FirstOrDefault", file="Tokenizer.cs"];
m1_93 [label="Entry Unk.Split", span="", cluster="Unk.Split", file="Tokenizer.cs"];
m1_132 [label="yield return Token.Value(value);", span="115-115", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m1_146 [label="yield return Token.Value(text.Substring(seen.Count()));", span="145-145", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m1_129 [label="value.Length > 1 || value[0] == '-' || value[1] != '-'", span="109-109", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m1_133 [label="yield break;", span="116-116", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m1_135 [label="yield return Token.Name(text);", span="121-121", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m1_136 [label="yield break;", span="122-122", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m1_138 [label="yield return Token.Name(first);", span="126-126", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m1_144 [label="yield return Token.Name(n);", span="136-136", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m1_130 [label="var text = value.Substring(1)", span="111-111", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m1_134 [label="value.Length == 2", span="119-119", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m1_142 [label="!seen.Contains(c) && nameLookup(n)", span="133-133", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m1_131 [label="char.IsDigit(text[0])", span="113-113", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m1_145 [label="seen.Count() < text.Length", span="143-143", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m1_139 [label="var seen = new List<char> { first[0] }", span="128-128", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m1_137 [label="var first = text.Substring(0, 1)", span="125-125", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m1_143 [label="seen.Add(c)", span="135-135", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m1_141 [label="var n = new string(c, 1)", span="132-132", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m1_140 [label="text.Substring(1)", span="130-130", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m1_147 [label="Exit CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", span="105-105", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m1_14 [label="Entry Unk.MapValues", span="", cluster="Unk.MapValues", file="Tokenizer.cs"];
m1_153 [label="Entry System.Collections.Generic.List<T>.Contains(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Contains(T)", file="Tokenizer.cs"];
m1_148 [label="Entry string.Substring(int)", span="0-0", cluster="string.Substring(int)", file="Tokenizer.cs"];
m1_174 [label=unkTokens, span="", file="Tokenizer.cs"];
m1_176 [label="System.Func<string, CSharpx.Maybe<char>>", span="", file="Tokenizer.cs"];
m1_175 [label=values, span="", file="Tokenizer.cs"];
m1_183 [label=indexes, span="", file="Tokenizer.cs"];
m1_177 [label=int, span="", file="Tokenizer.cs"];
m1_178 [label=replaces, span="", file="Tokenizer.cs"];
m1_182 [label="System.Func<string, bool>", span="", file="Tokenizer.cs"];
m1_181 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", span="", file="Tokenizer.cs"];
m1_180 [label="CommandLine.Core.Token", span="", file="Tokenizer.cs"];
m1_179 [label=int, span="", file="Tokenizer.cs"];
m1_31 -> m1_33  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m1_31 -> m1_36  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m1_31 -> m1_32  [key=0, style=solid];
m1_31 -> m1_34  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m1_33 -> m1_22  [key=2, style=dotted];
m1_33 -> m1_34  [key=0, style=solid];
m1_33 -> m1_39  [key=2, style=dotted];
m1_33 -> m1_48  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_33 -> m1_35  [key=1, style=dashed, color=darkseagreen4, label=tokenizerResult];
m1_36 -> m1_22  [key=2, style=dotted];
m1_36 -> m1_37  [key=0, style=solid];
m1_32 -> m1_33  [key=0, style=solid];
m1_32 -> m1_36  [key=0, style=solid];
m1_32 -> m1_38  [key=2, style=dotted];
m1_32 -> m1_44  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_34 -> m1_55  [key=1, style=dashed, color=darkseagreen4, label=values];
m1_34 -> m1_35  [key=0, style=solid];
m1_34 -> m1_40  [key=2, style=dotted];
m1_34 -> m1_41  [key=2, style=dotted];
m1_34 -> m1_42  [key=2, style=dotted];
m1_34 -> m1_51  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_35 -> m1_37  [key=0, style=solid];
m1_35 -> m1_43  [key=2, style=dotted];
m1_35 -> m1_54  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_37 -> m1_31  [key=0, style=bold, color=blue];
m1_97 -> m1_98  [key=0, style=solid];
m1_97 -> m1_99  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
m1_97 -> m1_106  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
m1_97 -> m1_107  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, bool>"];
m1_97 -> m1_115  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, bool>"];
m1_97 -> m1_100  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
m1_98 -> m1_23  [key=2, style=dotted];
m1_98 -> m1_98  [key=1, style=dashed, color=darkseagreen4, label=i];
m1_98 -> m1_99  [key=0, style=solid];
m1_98 -> m1_42  [key=2, style=dotted];
m1_98 -> m1_103  [key=2, style=dotted];
m1_98 -> m1_105  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_98 -> m1_119  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_98 -> m1_124  [key=1, style=dashed, color=darkseagreen4, label=indexes];
m1_99 -> m1_23  [key=2, style=dotted];
m1_99 -> m1_99  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_99 -> m1_100  [key=0, style=solid];
m1_99 -> m1_42  [key=2, style=dotted];
m1_99 -> m1_103  [key=2, style=dotted];
m1_99 -> m1_123  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_99 -> m1_126  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_100 -> m1_101  [key=0, style=solid];
m1_100 -> m1_104  [key=2, style=dotted];
m1_101 -> m1_102  [key=0, style=solid];
m1_102 -> m1_97  [key=0, style=bold, color=blue];
m1_27 -> m1_28  [key=0, style=solid];
m1_57 -> m1_69  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, CSharpx.Maybe<char>>"];
m1_57 -> m1_62  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>"];
m1_57 -> m1_58  [key=0, style=solid];
m1_57 -> m1_59  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, CSharpx.Maybe<char>>"];
m1_62 -> m1_26  [key=2, style=dotted];
m1_62 -> m1_63  [key=0, style=solid];
m1_62 -> m1_67  [key=2, style=dotted];
m1_61 -> m1_62  [key=0, style=solid];
m1_61 -> m1_66  [key=2, style=dotted];
m1_61 -> m1_94  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_58 -> m1_59  [key=0, style=solid];
m1_58 -> m1_64  [key=2, style=dotted];
m1_58 -> m1_60  [key=1, style=dashed, color=darkseagreen4, label=tokens];
m1_59 -> m1_68  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_59 -> m1_42  [key=2, style=dotted];
m1_59 -> m1_60  [key=0, style=solid];
m1_59 -> m1_65  [key=2, style=dotted];
m1_59 -> m1_77  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_59 -> m1_81  [key=1, style=dashed, color=darkseagreen4, label=replaces];
m1_60 -> m1_42  [key=2, style=dotted];
m1_60 -> m1_61  [key=0, style=solid];
m1_60 -> m1_80  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_63 -> m1_57  [key=0, style=bold, color=blue];
m1_21 -> m1_22  [key=0, style=solid];
m1_21 -> m1_23  [key=2, style=dotted];
m1_16 -> m1_17  [key=0, style=solid];
m1_22 -> m1_20  [key=0, style=bold, color=blue];
m1_3 -> m1_10  [key=1, style=dashed, color=green, label="System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>"];
m1_3 -> m1_7  [key=0, style=solid];
m1_3 -> m1_9  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m1_3 -> m1_11  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, bool>"];
m1_3 -> m1_4  [key=0, style=solid];
m1_3 -> m1_13  [key=2, style=dotted];
m1_3 -> m1_14  [key=2, style=dotted];
m1_3 -> m1_20  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_3 -> m1_24  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_10 -> m1_11  [key=0, style=solid, color=green];
m1_10 -> m1_20  [key=2, style=dotted, color=green];
m1_10 -> m1_12  [key=1, style=dashed, color=green, label=normalized];
m1_9 -> m1_10  [key=0, style=solid, color=green];
m1_9 -> m1_9  [key=1, style=dashed, color=darkseagreen4, label=arg];
m1_9 -> m1_15  [key=2, style=dotted];
m1_9 -> m1_16  [key=2, style=dotted];
m1_9 -> m1_17  [key=2, style=dotted];
m1_9 -> m1_18  [key=2, style=dotted];
m1_9 -> m1_19  [key=2, style=dotted];
m1_11 -> m1_11  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_11 -> m1_12  [key=0, style=solid];
m1_11 -> m1_21  [key=2, style=dotted];
m1_11 -> m1_22  [key=2, style=dotted];
m1_11 -> m1_19  [key=2, style=dotted];
m1_11 -> m1_28  [key=1, style=dashed, color=darkseagreen4, label=unkTokens];
m1_12 -> m1_12  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_12 -> m1_13  [key=0, style=solid];
m1_12 -> m1_23  [key=2, style=dotted];
m1_12 -> m1_24  [key=2, style=dotted];
m1_12 -> m1_25  [key=2, style=dotted];
m1_12 -> m1_26  [key=2, style=dotted];
m1_12 -> m1_27  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_7 -> m1_12  [key=1, style=dashed, color=darkseagreen4, label=errors];
m1_7 -> m1_8  [key=0, style=solid];
m1_7 -> m1_9  [key=2, style=dotted];
m1_8 -> m1_9  [key=0, style=solid];
m1_13 -> m1_3  [key=0, style=bold, color=blue];
m1_30 -> m1_28  [key=0, style=bold, color=blue];
m1_114 -> m1_115  [key=0, style=solid];
m1_20 -> m1_21  [key=0, style=solid];
m1_24 -> m1_25  [key=0, style=solid];
m1_28 -> m1_29  [key=0, style=solid];
m1_28 -> m1_30  [key=2, style=dotted];
m1_17 -> m1_18  [key=0, style=solid];
m1_17 -> m1_19  [key=2, style=dotted];
m1_17 -> m1_156  [key=0, style=solid];
m1_17 -> m1_160  [key=0, style=bold, color=crimson];
m1_17 -> m1_161  [key=0, style=bold, color=crimson];
m1_17 -> m1_164  [key=0, style=bold, color=crimson];
m1_17 -> m1_166  [key=0, style=bold, color=crimson];
m1_17 -> m1_167  [key=0, style=bold, color=crimson];
m1_17 -> m1_157  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_17 -> m1_163  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_18 -> m1_16  [key=0, style=bold, color=blue];
m1_18 -> m1_129  [key=0, style=solid];
m1_18 -> m1_132  [key=0, style=bold, color=crimson];
m1_18 -> m1_133  [key=0, style=bold, color=crimson];
m1_18 -> m1_135  [key=0, style=bold, color=crimson];
m1_18 -> m1_136  [key=0, style=bold, color=crimson];
m1_18 -> m1_138  [key=0, style=bold, color=crimson];
m1_18 -> m1_144  [key=0, style=bold, color=crimson];
m1_18 -> m1_146  [key=0, style=bold, color=crimson];
m1_18 -> m1_130  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_18 -> m1_134  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_18 -> m1_142  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, bool>"];
m1_25 -> m1_26  [key=0, style=solid];
m1_25 -> m1_27  [key=2, style=dotted];
m1_26 -> m1_24  [key=0, style=bold, color=blue];
m1_29 -> m1_30  [key=0, style=solid];
m1_29 -> m1_23  [key=2, style=dotted];
m1_29 -> m1_31  [key=2, style=dotted];
m1_29 -> m1_27  [key=0, style=bold, color=blue];
m1_4 -> m1_5  [key=0, style=solid, color=green];
m1_4 -> m1_11  [key=2, style=dotted];
m1_4 -> m1_15  [key=2, style=dotted];
m1_4 -> m1_28  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_5 -> m1_6  [key=0, style=solid, color=green];
m1_5 -> m1_0  [key=0, style=bold, color=blue];
m1_6 -> m1_4  [key=0, style=bold, color=blue];
m1_69 -> m1_22  [key=2, style=dotted];
m1_69 -> m1_70  [key=0, style=solid];
m1_69 -> m1_71  [key=2, style=dotted];
m1_69 -> m1_72  [key=2, style=dotted];
m1_69 -> m1_73  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_55 -> m1_25  [key=2, style=dotted];
m1_55 -> m1_56  [key=0, style=solid];
m1_48 -> m1_49  [key=0, style=solid];
m1_68 -> m1_69  [key=0, style=solid];
m1_68 -> m1_74  [key=1, style=dashed, color=darkseagreen4, label=int];
m1_70 -> m1_68  [key=0, style=bold, color=blue];
m1_73 -> m1_74  [key=0, style=solid];
m1_124 -> m1_30  [key=2, style=dotted];
m1_124 -> m1_125  [key=0, style=solid];
m1_124 -> m1_112  [key=2, style=dotted];
m1_124 -> m1_113  [key=2, style=dotted];
m1_105 -> m1_106  [key=0, style=solid];
m1_105 -> m1_107  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Token"];
m1_119 -> m1_120  [key=0, style=solid];
m1_123 -> m1_124  [key=0, style=solid];
m1_126 -> m1_127  [key=0, style=solid];
m1_54 -> m1_55  [key=0, style=solid];
m1_56 -> m1_54  [key=0, style=bold, color=blue];
m1_44 -> m1_45  [key=0, style=solid];
m1_51 -> m1_52  [key=0, style=solid];
m1_50 -> m1_48  [key=0, style=bold, color=blue];
m1_49 -> m1_50  [key=0, style=solid];
m1_49 -> m1_47  [key=2, style=dotted];
m1_74 -> m1_75  [key=0, style=solid];
m1_74 -> m1_12  [key=2, style=dotted];
m1_81 -> m1_72  [key=2, style=dotted];
m1_81 -> m1_82  [key=0, style=solid];
m1_81 -> m1_83  [key=2, style=dotted];
m1_81 -> m1_84  [key=2, style=dotted];
m1_81 -> m1_85  [key=2, style=dotted];
m1_81 -> m1_86  [key=2, style=dotted];
m1_81 -> m1_87  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_81 -> m1_90  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_107 -> m1_72  [key=2, style=dotted];
m1_107 -> m1_108  [key=0, style=solid];
m1_107 -> m1_111  [key=2, style=dotted];
m1_107 -> m1_112  [key=2, style=dotted];
m1_107 -> m1_113  [key=2, style=dotted];
m1_107 -> m1_114  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_75 -> m1_73  [key=0, style=bold, color=blue];
m1_125 -> m1_123  [key=0, style=bold, color=blue];
m1_106 -> m1_107  [key=0, style=solid];
m1_106 -> m1_109  [key=2, style=dotted];
m1_106 -> m1_110  [key=2, style=dotted];
m1_115 -> m1_116  [key=0, style=solid];
m1_115 -> m1_117  [key=2, style=dotted];
m1_115 -> m1_118  [key=2, style=dotted];
m1_91 -> m1_42  [key=2, style=dotted];
m1_91 -> m1_92  [key=0, style=solid];
m1_91 -> m1_93  [key=2, style=dotted];
m1_108 -> m1_105  [key=0, style=bold, color=blue];
m1_121 -> m1_119  [key=0, style=bold, color=blue];
m1_120 -> m1_121  [key=0, style=solid];
m1_120 -> m1_122  [key=2, style=dotted];
m1_128 -> m1_126  [key=0, style=bold, color=blue];
m1_127 -> m1_128  [key=0, style=solid];
m1_127 -> m1_122  [key=2, style=dotted];
m1_94 -> m1_95  [key=0, style=solid];
m1_46 -> m1_44  [key=0, style=bold, color=blue];
m1_45 -> m1_46  [key=0, style=solid];
m1_45 -> m1_47  [key=2, style=dotted];
m1_53 -> m1_51  [key=0, style=bold, color=blue];
m1_52 -> m1_53  [key=0, style=solid];
m1_52 -> m1_47  [key=2, style=dotted];
m1_77 -> m1_78  [key=0, style=solid];
m1_80 -> m1_81  [key=0, style=solid];
m1_80 -> m1_91  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Token"];
m1_80 -> m1_88  [key=1, style=dashed, color=darkseagreen4, label=int];
m1_82 -> m1_80  [key=0, style=bold, color=blue];
m1_87 -> m1_88  [key=0, style=solid];
m1_90 -> m1_91  [key=0, style=solid];
m1_116 -> m1_114  [key=0, style=bold, color=blue];
m1_92 -> m1_90  [key=0, style=bold, color=blue];
m1_96 -> m1_94  [key=0, style=bold, color=blue];
m1_95 -> m1_96  [key=0, style=solid];
m1_79 -> m1_77  [key=0, style=bold, color=blue];
m1_78 -> m1_79  [key=0, style=solid];
m1_88 -> m1_89  [key=0, style=solid];
m1_89 -> m1_87  [key=0, style=bold, color=blue];
m1_156 -> m1_15  [key=2, style=dotted];
m1_156 -> m1_157  [key=0, style=solid];
m1_156 -> m1_168  [key=0, style=solid];
m1_160 -> m1_161  [key=0, style=solid];
m1_160 -> m1_150  [key=2, style=dotted];
m1_161 -> m1_162  [key=0, style=solid];
m1_164 -> m1_165  [key=0, style=solid];
m1_166 -> m1_167  [key=0, style=solid];
m1_166 -> m1_150  [key=2, style=dotted];
m1_167 -> m1_168  [key=0, style=solid];
m1_167 -> m1_173  [key=2, style=dotted];
m1_157 -> m1_160  [key=1, style=dashed, color=darkseagreen4, label=text];
m1_157 -> m1_158  [key=0, style=solid];
m1_157 -> m1_148  [key=2, style=dotted];
m1_157 -> m1_165  [key=1, style=dashed, color=darkseagreen4, label=text];
m1_163 -> m1_164  [key=0, style=solid];
m1_163 -> m1_170  [key=2, style=dotted];
m1_163 -> m1_171  [key=2, style=dotted];
m1_159 -> m1_160  [key=0, style=solid];
m1_159 -> m1_162  [key=0, style=solid];
m1_162 -> m1_163  [key=0, style=solid];
m1_162 -> m1_165  [key=0, style=solid];
m1_165 -> m1_166  [key=0, style=solid];
m1_165 -> m1_167  [key=1, style=dashed, color=darkseagreen4, label=parts];
m1_165 -> m1_172  [key=2, style=dotted];
m1_158 -> m1_159  [key=0, style=solid];
m1_158 -> m1_162  [key=1, style=dashed, color=darkseagreen4, label=equalIndex];
m1_158 -> m1_169  [key=2, style=dotted];
m1_168 -> m1_17  [key=0, style=bold, color=blue];
m1_0 -> m1_1  [key=0, style=solid, color=green];
m1_0 -> m1_3  [key=3, color=darkorchid, style=bold, label="method methodReturn RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error> Tokenize"];
m1_1 -> m1_2  [key=0, style=solid, color=red];
m1_1 -> m1_3  [key=2, style=dotted, color=green];
m1_1 -> m1_4  [key=1, style=dashed, color=green, label="lambda expression"];
m1_1 -> m1_6  [key=2, style=dotted];
m1_2 -> m1_0  [key=0, style=bold, color=blue];
m1_2 -> m1_3  [key=0, style=solid, color=red];
m1_2 -> m1_7  [key=2, style=dotted, color=red];
m1_2 -> m1_8  [key=2, style=dotted, color=red];
m1_2 -> m1_9  [key=2, style=dotted, color=red];
m1_2 -> m1_10  [key=2, style=dotted, color=red];
m1_2 -> m1_11  [key=2, style=dotted, color=red];
m1_2 -> m1_12  [key=2, style=dotted, color=red];
m1_2 -> m1_16  [key=1, style=dashed, color=red, label="lambda expression"];
m1_132 -> m1_16  [key=2, style=dotted];
m1_132 -> m1_133  [key=0, style=solid];
m1_146 -> m1_16  [key=2, style=dotted];
m1_146 -> m1_147  [key=0, style=solid];
m1_146 -> m1_155  [key=2, style=dotted];
m1_146 -> m1_148  [key=2, style=dotted];
m1_129 -> m1_147  [key=0, style=solid];
m1_129 -> m1_130  [key=0, style=solid];
m1_133 -> m1_134  [key=0, style=solid];
m1_135 -> m1_136  [key=0, style=solid];
m1_135 -> m1_150  [key=2, style=dotted];
m1_136 -> m1_137  [key=0, style=solid];
m1_138 -> m1_139  [key=0, style=solid];
m1_138 -> m1_150  [key=2, style=dotted];
m1_144 -> m1_140  [key=0, style=solid];
m1_144 -> m1_150  [key=2, style=dotted];
m1_130 -> m1_146  [key=1, style=dashed, color=darkseagreen4, label=text];
m1_130 -> m1_135  [key=1, style=dashed, color=darkseagreen4, label=text];
m1_130 -> m1_131  [key=0, style=solid];
m1_130 -> m1_148  [key=2, style=dotted];
m1_130 -> m1_137  [key=1, style=dashed, color=darkseagreen4, label=text];
m1_130 -> m1_140  [key=1, style=dashed, color=darkseagreen4, label=text];
m1_130 -> m1_145  [key=1, style=dashed, color=darkseagreen4, label=text];
m1_134 -> m1_135  [key=0, style=solid];
m1_134 -> m1_137  [key=0, style=solid];
m1_142 -> m1_22  [key=2, style=dotted];
m1_142 -> m1_143  [key=0, style=solid];
m1_142 -> m1_145  [key=0, style=solid];
m1_142 -> m1_153  [key=2, style=dotted];
m1_131 -> m1_132  [key=0, style=solid];
m1_131 -> m1_134  [key=0, style=solid];
m1_131 -> m1_149  [key=2, style=dotted];
m1_145 -> m1_146  [key=0, style=solid];
m1_145 -> m1_147  [key=0, style=solid];
m1_145 -> m1_155  [key=2, style=dotted];
m1_139 -> m1_146  [key=1, style=dashed, color=darkseagreen4, label=seen];
m1_139 -> m1_142  [key=1, style=dashed, color=darkseagreen4, label=seen];
m1_139 -> m1_145  [key=1, style=dashed, color=darkseagreen4, label=seen];
m1_139 -> m1_140  [key=0, style=solid];
m1_139 -> m1_9  [key=2, style=dotted];
m1_139 -> m1_143  [key=1, style=dashed, color=darkseagreen4, label=seen];
m1_137 -> m1_138  [key=0, style=solid];
m1_137 -> m1_139  [key=1, style=dashed, color=darkseagreen4, label=first];
m1_137 -> m1_151  [key=2, style=dotted];
m1_143 -> m1_144  [key=0, style=solid];
m1_143 -> m1_154  [key=2, style=dotted];
m1_141 -> m1_144  [key=1, style=dashed, color=darkseagreen4, label=n];
m1_141 -> m1_142  [key=0, style=solid];
m1_141 -> m1_152  [key=2, style=dotted];
m1_140 -> m1_142  [key=1, style=dashed, color=darkseagreen4, label=c];
m1_140 -> m1_145  [key=0, style=solid];
m1_140 -> m1_148  [key=2, style=dotted];
m1_140 -> m1_143  [key=1, style=dashed, color=darkseagreen4, label=c];
m1_140 -> m1_141  [key=0, style=solid];
m1_147 -> m1_18  [key=0, style=bold, color=blue];
m1_174 -> m1_28  [key=1, style=dashed, color=darkseagreen4, label=unkTokens];
m1_176 -> m1_69  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, CSharpx.Maybe<char>>"];
m1_175 -> m1_55  [key=1, style=dashed, color=darkseagreen4, label=values];
m1_183 -> m1_124  [key=1, style=dashed, color=darkseagreen4, label=indexes];
m1_177 -> m1_74  [key=1, style=dashed, color=darkseagreen4, label=int];
m1_178 -> m1_81  [key=1, style=dashed, color=darkseagreen4, label=replaces];
m1_182 -> m1_107  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, bool>"];
m1_182 -> m1_115  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, bool>"];
m1_181 -> m1_106  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
m1_180 -> m1_91  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Token"];
m1_179 -> m1_88  [key=1, style=dashed, color=darkseagreen4, label=int];
}
