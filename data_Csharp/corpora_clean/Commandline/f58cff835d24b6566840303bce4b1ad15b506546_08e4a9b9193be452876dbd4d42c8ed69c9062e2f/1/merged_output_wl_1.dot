digraph  {
n75 [label=pt, span=""];
n0 [cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="Entry CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="15-15"];
n1 [cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="var propAndErrors = MapValuesImpl(specProps, values, converter)", span="20-20"];
n2 [cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="return Result.Succeed(\r\n                propAndErrors.Select(pe => pe.Item1),\r\n                propAndErrors.Select(pe => pe.Item2)\r\n                    .OfType<Just<Error>>().Select(e => e.Value)\r\n                );", span="22-26"];
n4 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="Entry CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="29-29"];
n3 [cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="Exit CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="15-15"];
n5 [cluster="Unk.Select", label="Entry Unk.Select", span=""];
n6 [cluster="Unk.>", label="Entry Unk.>", span=""];
n7 [cluster="Unk.Succeed", label="Entry Unk.Succeed", span=""];
n8 [cluster="lambda expression", label="Entry lambda expression", span="23-23"];
n11 [cluster="lambda expression", label="Entry lambda expression", span="24-24"];
n14 [cluster="lambda expression", label="Entry lambda expression", span="25-25"];
n9 [cluster="lambda expression", label="pe.Item1", span="23-23"];
n10 [cluster="lambda expression", label="Exit lambda expression", span="23-23"];
n12 [cluster="lambda expression", label="pe.Item2", span="24-24"];
n13 [cluster="lambda expression", label="Exit lambda expression", span="24-24"];
n15 [cluster="lambda expression", label="e.Value", span="25-25"];
n16 [cluster="lambda expression", label="Exit lambda expression", span="25-25"];
n17 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="specProps.Empty()", span="34-34"];
n18 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="yield break;", span="36-36"];
n22 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="yield return\r\n                    Tuple.Create(pt, pt.Specification.MakeErrorInCaseOfMinConstraint());", span="42-43"];
n23 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="yield break;", span="44-44"];
n26 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="yield return\r\n                    Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                        pt, Maybe.Just<Error>(new SequenceOutOfRangeError(NameInfo.EmptyName)));", span="52-54"];
n27 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="yield break;", span="55-55"];
n28 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="yield return\r\n                converter(taken, pt.Property.PropertyType, pt.Specification.TargetType != TargetType.Sequence)\r\n                    .MapValueOrDefault(\r\n                        converted => Tuple.Create(pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>()),\r\n                        Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                            pt, Maybe.Just<Error>(new BadFormatConversionError(NameInfo.EmptyName))));", span="58-63"];
n30 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="yield return value;", span="67-67"];
n19 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="var pt = specProps.First()", span="38-38"];
n20 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="var taken = values.Take(pt.Specification.CountOfMaxNumberOfValues().MapValueOrDefault(n => n, values.Count()))", span="39-39"];
n24 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="var next = specProps.Skip(1).FirstOrDefault(s => s.Specification.IsValue()).ToMaybe()", span="47-47"];
n25 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="pt.Specification.Max.IsJust()\r\n                && next.IsNothing()\r\n                && values.Skip(taken.Count()).Any()", span="48-50"];
n29 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", color=red, community=0, label="0: MapValuesImpl(specProps.Skip(1), values.Skip(taken.Count()), converter)", span="65-65"];
n32 [cluster="System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", span="31-31"];
n33 [cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0"];
n58 [cluster="lambda expression", label="Tuple.Create(pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>())", span="61-61"];
n21 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="taken.Empty()", span="40-40"];
n34 [cluster="CommandLine.Core.Specification.CountOfMaxNumberOfValues()", label="Entry CommandLine.Core.Specification.CountOfMaxNumberOfValues()", span="71-71"];
n35 [cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0"];
n36 [cluster="CSharpx.Maybe<T1>.MapValueOrDefault<T1, T2>(System.Func<T1, T2>, T2)", label="Entry CSharpx.Maybe<T1>.MapValueOrDefault<T1, T2>(System.Func<T1, T2>, T2)", span="377-377"];
n37 [cluster="System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", label="Entry System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", span="0-0"];
n50 [cluster="lambda expression", label="Entry lambda expression", span="39-39"];
n38 [cluster="CommandLine.Core.Specification.MakeErrorInCaseOfMinConstraint()", label="Entry CommandLine.Core.Specification.MakeErrorInCaseOfMinConstraint()", span="87-87"];
n39 [cluster="System.Tuple.Create<T1, T2>(T1, T2)", label="Entry System.Tuple.Create<T1, T2>(T1, T2)", span="0-0"];
n40 [cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0"];
n41 [cluster="Unk.FirstOrDefault", label="Entry Unk.FirstOrDefault", span=""];
n42 [cluster="Unk.ToMaybe", label="Entry Unk.ToMaybe", span=""];
n53 [cluster="lambda expression", label="Entry lambda expression", span="47-47"];
n43 [cluster="CSharpx.Maybe<T>.IsJust<T>()", label="Entry CSharpx.Maybe<T>.IsJust<T>()", span="326-326"];
n44 [cluster="Unk.IsNothing", label="Entry Unk.IsNothing", span=""];
n45 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
n46 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="360-360"];
n47 [cluster="CSharpx.Maybe.Just<T>(T)", label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124"];
n48 [cluster="System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", label="Entry System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", span="0-0"];
n49 [cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="349-349"];
n57 [cluster="lambda expression", label="Entry lambda expression", span="61-61"];
n31 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="Exit CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="29-29"];
n51 [cluster="lambda expression", label=n, span="39-39"];
n52 [cluster="lambda expression", label="Exit lambda expression", span="39-39"];
n54 [cluster="lambda expression", label="s.Specification.IsValue()", span="47-47"];
n55 [cluster="lambda expression", label="Exit lambda expression", span="47-47"];
n56 [cluster="CommandLine.Core.Specification.IsValue()", label="Entry CommandLine.Core.Specification.IsValue()", span="15-15"];
n59 [cluster="lambda expression", label="Exit lambda expression", span="61-61"];
n60 [cluster="CommandLine.Core.SpecificationProperty.WithValue(CSharpx.Maybe<object>)", label="Entry CommandLine.Core.SpecificationProperty.WithValue(CSharpx.Maybe<object>)", span="18-18"];
n61 [cluster="CSharpx.Maybe.Nothing<T>()", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
n62 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", label="Entry CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", span="71-71"];
n63 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", label="specification.TargetType", span="73-73"];
n67 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", label="specification.Max.IsJust()", span="78-78"];
n68 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", label="return Maybe.Just(specification.Max.FromJustOrFail());", span="80-80"];
n64 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", label="TargetType.Scalar", span="75-75"];
n66 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", label="TargetType.Sequence", span="77-77"];
n65 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", label="return Maybe.Just(1);", span="76-76"];
n69 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", label="return Maybe.Nothing<int>();", span="84-84"];
n70 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", label="Exit CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", span="71-71"];
n71 [cluster="CSharpx.Maybe<T>.FromJustOrFail<T>(System.Exception)", label="Entry CSharpx.Maybe<T>.FromJustOrFail<T>(System.Exception)", span="355-355"];
n72 [cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", label="Entry CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", span="87-87"];
n73 [cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", label="return specification.Min.IsJust()\r\n                ? Maybe.Just<Error>(new SequenceOutOfRangeError(NameInfo.EmptyName))\r\n                : Maybe.Nothing<Error>();", span="89-91"];
n74 [cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", label="Exit CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", span="87-87"];
m1_0 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Sequence.cs", label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="16-16"];
m1_1 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", color=green, community=0, file="Sequence.cs", label="0: var tokenList = tokens.Memorize()", span="20-20"];
m1_2 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Sequence.cs", label="var switches = Switch.Partition(tokenList, typeLookup).Memorize()", span="21-21"];
m1_3 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Sequence.cs", label="var scalars = Scalar.Partition(tokenList, typeLookup).Memorize()", span="22-22"];
m1_4 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Sequence.cs", label="var sequences = Sequence.Partition(tokenList, typeLookup).Memorize()", span="23-23"];
m1_5 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", color=green, community=0, file="Sequence.cs", label="0: var nonOptions = tokenList\r\n                .Where(t => !switches.Contains(t))\r\n                .Where(t => !scalars.Contains(t))\r\n                .Where(t => !sequences.Contains(t)).Memorize()", span="24-27"];
m1_6 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Sequence.cs", label="var values = nonOptions.Where(v => v.IsValue()).Memorize()", span="28-28"];
m1_7 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Sequence.cs", label="var errors = nonOptions.Except(values).Memorize()", span="29-29"];
m1_8 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", color=green, community=0, file="Sequence.cs", label="0: return Tuple.Create(\r\n                    KeyValuePairHelper.ForSwitch(switches)\r\n                        .Concat(KeyValuePairHelper.ForScalar(scalars))\r\n                        .Concat(KeyValuePairHelper.ForSequence(sequences)),\r\n                values.Select(t => t.Text),\r\n                errors);", span="31-36"];
m1_9 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Sequence.cs", label="Exit CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="16-16"];
m1_14 [cluster="Unk.Where", file="Sequence.cs", label="Entry Unk.Where", span=""];
m1_22 [cluster="Unk.Create", file="Sequence.cs", label="Entry Unk.Create", span=""];
m1_26 [cluster="System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", file="Sequence.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", span="0-0"];
m1_13 [cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Sequence.cs", label="Entry CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12"];
m1_15 [cluster="Unk.Memorize", file="Sequence.cs", label="Entry Unk.Memorize", span=""];
m1_30 [cluster="Unk.Contains", file="Sequence.cs", label="Entry Unk.Contains", span=""];
m1_11 [cluster="CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Sequence.cs", label="Entry CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11"];
m1_16 [cluster="System.Collections.Generic.IEnumerable<TSource>.Except<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="Sequence.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Except<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
m1_34 [cluster="lambda expression", file="Sequence.cs", label="Entry lambda expression", span="28-28"];
m1_23 [cluster="lambda expression", file="Sequence.cs", label="Entry lambda expression", span="25-25"];
m1_27 [cluster="lambda expression", file="Sequence.cs", label="Entry lambda expression", span="26-26"];
m1_31 [cluster="lambda expression", file="Sequence.cs", label="Entry lambda expression", span="27-27"];
m1_38 [cluster="lambda expression", file="Sequence.cs", label="Entry lambda expression", span="35-35"];
m1_32 [cluster="lambda expression", color=green, community=0, file="Sequence.cs", label="0: !sequences.Contains(t)", span="27-27"];
m1_33 [cluster="lambda expression", file="Sequence.cs", label="Exit lambda expression", span="27-27"];
m1_39 [cluster="lambda expression", color=green, community=0, file="Sequence.cs", label="0: t.Text", span="35-35"];
m1_40 [cluster="lambda expression", file="Sequence.cs", label="Exit lambda expression", span="35-35"];
m1_24 [cluster="lambda expression", file="Sequence.cs", label="!switches.Contains(t)", span="25-25"];
m1_28 [cluster="lambda expression", file="Sequence.cs", label="!scalars.Contains(t)", span="26-26"];
m1_25 [cluster="lambda expression", file="Sequence.cs", label="Exit lambda expression", span="25-25"];
m1_29 [cluster="lambda expression", file="Sequence.cs", label="Exit lambda expression", span="26-26"];
m1_35 [cluster="lambda expression", file="Sequence.cs", label="v.IsValue()", span="28-28"];
m1_36 [cluster="lambda expression", file="Sequence.cs", label="Exit lambda expression", span="28-28"];
m1_10 [cluster="System.Collections.Generic.IEnumerable<T>.Memorize<T>()", file="Sequence.cs", label="Entry System.Collections.Generic.IEnumerable<T>.Memorize<T>()", span="374-374"];
m1_17 [cluster="CommandLine.Core.KeyValuePairHelper.ForSwitch(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="Sequence.cs", label="Entry CommandLine.Core.KeyValuePairHelper.ForSwitch(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="10-10"];
m1_12 [cluster="CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Sequence.cs", label="Entry CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12"];
m1_18 [cluster="CommandLine.Core.KeyValuePairHelper.ForScalar(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="Sequence.cs", label="Entry CommandLine.Core.KeyValuePairHelper.ForScalar(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="16-16"];
m1_37 [cluster="Unk.IsValue", file="Sequence.cs", label="Entry Unk.IsValue", span=""];
m1_19 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="Sequence.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
m1_20 [cluster="CommandLine.Core.KeyValuePairHelper.ForSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="Sequence.cs", label="Entry CommandLine.Core.KeyValuePairHelper.ForSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="22-22"];
m1_43 [file="Sequence.cs", label=sequences, span=""];
m1_41 [file="Sequence.cs", label=switches, span=""];
m1_42 [file="Sequence.cs", label=scalars, span=""];
m2_14 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="TokenPartitioner.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m2_0 [cluster="CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)", span="11-11"];
m2_1 [cluster="CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)", file="TokenPartitioner.cs", label="return new List<Func<IEnumerable<string>, IEnumerable<Error>>>\r\n                {\r\n                    HelpCommand(nameComparer),\r\n                    VersionCommand(nameComparer)\r\n                };", span="13-17"];
m2_2 [cluster="CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)", file="TokenPartitioner.cs", label="Exit CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)", span="11-11"];
m2_5 [cluster="CommandLine.Core.PreprocessorGuards.VersionCommand(System.StringComparer)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.PreprocessorGuards.VersionCommand(System.StringComparer)", span="29-29"];
m2_15 [cluster="CommandLine.Core.PreprocessorGuards.VersionCommand(System.StringComparer)", file="TokenPartitioner.cs", label="return\r\n                arguments =>\r\n                    nameComparer.Equals(''--version'', arguments.First())\r\n                        ? new Error[] { new VersionRequestedError() }\r\n                        : Enumerable.Empty<Error>();", span="31-35"];
m2_16 [cluster="CommandLine.Core.PreprocessorGuards.VersionCommand(System.StringComparer)", file="TokenPartitioner.cs", label="Exit CommandLine.Core.PreprocessorGuards.VersionCommand(System.StringComparer)", span="29-29"];
m2_20 [cluster="CommandLine.VersionRequestedError.VersionRequestedError()", file="TokenPartitioner.cs", label="Entry CommandLine.VersionRequestedError.VersionRequestedError()", span="432-432"];
m2_12 [cluster="System.StringComparer.Equals(string, string)", file="TokenPartitioner.cs", label="Entry System.StringComparer.Equals(string, string)", span="0-0"];
m2_17 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="32-35"];
m2_9 [cluster="lambda expression", color=green, community=0, file="TokenPartitioner.cs", label="0: nameComparer.Equals(''--help'', arguments.First())\r\n                        ? new Error[] { new HelpRequestedError() }\r\n                        : Enumerable.Empty<Error>()", span="24-26"];
m2_8 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="23-26"];
m2_10 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="23-26"];
m2_18 [cluster="lambda expression", file="TokenPartitioner.cs", label="nameComparer.Equals(''--version'', arguments.First())\r\n                        ? new Error[] { new VersionRequestedError() }\r\n                        : Enumerable.Empty<Error>()", span="33-35"];
m2_19 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="32-35"];
m2_13 [cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="TokenPartitioner.cs", label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="368-368"];
m2_4 [cluster="CommandLine.Core.PreprocessorGuards.HelpCommand(System.StringComparer)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.PreprocessorGuards.HelpCommand(System.StringComparer)", span="20-20"];
m2_6 [cluster="CommandLine.Core.PreprocessorGuards.HelpCommand(System.StringComparer)", color=green, community=0, file="TokenPartitioner.cs", label="0: return\r\n                arguments =>\r\n                    nameComparer.Equals(''--help'', arguments.First())\r\n                        ? new Error[] { new HelpRequestedError() }\r\n                        : Enumerable.Empty<Error>();", span="22-26"];
m2_7 [cluster="CommandLine.Core.PreprocessorGuards.HelpCommand(System.StringComparer)", file="TokenPartitioner.cs", label="Exit CommandLine.Core.PreprocessorGuards.HelpCommand(System.StringComparer)", span="20-20"];
m2_3 [cluster="System.Collections.Generic.List<T>.List()", file="TokenPartitioner.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m2_21 [file="TokenPartitioner.cs", label="System.StringComparer", span=""];
m2_22 [file="TokenPartitioner.cs", label="System.StringComparer", span=""];
m3_9 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="TypeDescriptor.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m3_4 [cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>)", file="TypeDescriptor.cs", label="Entry CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>)", span="28-28"];
m3_5 [cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>)", file="TypeDescriptor.cs", label="maximumItems == null", span="30-30"];
m3_7 [cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>)", color=red, community=0, file="TypeDescriptor.cs", label="0: return new TypeDescriptor(tag, maximumItems);", span="32-32"];
m3_6 [cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>)", file="TypeDescriptor.cs", label="throw new ArgumentNullException(''maximumItems'');", span="30-30"];
m3_8 [cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>)", file="TypeDescriptor.cs", label="Exit CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>)", span="28-28"];
m3_0 [cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>)", file="TypeDescriptor.cs", label="Entry CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>)", span="12-12"];
m3_1 [cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>)", file="TypeDescriptor.cs", label="this.targetType = targetType", span="14-14"];
m3_2 [cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>)", file="TypeDescriptor.cs", label="this.maxItems = maxItems", span="15-15"];
m3_3 [cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>)", file="TypeDescriptor.cs", label="Exit CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>)", span="12-12"];
m3_10 [file="TypeDescriptor.cs", label="CommandLine.Core.TypeDescriptor", span=""];
n75 -> n58  [color=darkseagreen4, key=1, label=pt, style=dashed];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n4  [key=2, style=dotted];
n2 -> n3  [key=0, style=solid];
n2 -> n5  [key=2, style=dotted];
n2 -> n6  [key=2, style=dotted];
n2 -> n7  [key=2, style=dotted];
n2 -> n8  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n2 -> n11  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n2 -> n14  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n4 -> n17  [key=0, style=solid];
n4 -> n18  [color=crimson, key=0, style=bold];
n4 -> n22  [color=crimson, key=0, style=bold];
n4 -> n23  [color=crimson, key=0, style=bold];
n4 -> n26  [color=crimson, key=0, style=bold];
n4 -> n27  [color=crimson, key=0, style=bold];
n4 -> n28  [color=crimson, key=0, style=bold];
n4 -> n30  [color=crimson, key=0, style=bold];
n4 -> n19  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
n4 -> n20  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
n4 -> n24  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
n4 -> n25  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
n4 -> n29  [color=red, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
n3 -> n0  [color=blue, key=0, style=bold];
n8 -> n9  [key=0, style=solid];
n11 -> n12  [key=0, style=solid];
n14 -> n15  [key=0, style=solid];
n9 -> n10  [key=0, style=solid];
n10 -> n8  [color=blue, key=0, style=bold];
n12 -> n13  [key=0, style=solid];
n13 -> n11  [color=blue, key=0, style=bold];
n15 -> n16  [key=0, style=solid];
n16 -> n14  [color=blue, key=0, style=bold];
n17 -> n18  [key=0, style=solid];
n17 -> n19  [key=0, style=solid];
n17 -> n32  [key=2, style=dotted];
n18 -> n19  [key=0, style=solid];
n22 -> n23  [key=0, style=solid];
n22 -> n38  [key=2, style=dotted];
n22 -> n39  [key=2, style=dotted];
n23 -> n24  [key=0, style=solid];
n26 -> n27  [key=0, style=solid];
n26 -> n46  [key=2, style=dotted];
n26 -> n47  [key=2, style=dotted];
n26 -> n39  [key=2, style=dotted];
n27 -> n28  [key=0, style=solid];
n28 -> n29  [color=red, key=0, style=solid];
n28 -> n48  [key=2, style=dotted];
n28 -> n49  [key=2, style=dotted];
n28 -> n47  [key=2, style=dotted];
n28 -> n39  [key=2, style=dotted];
n28 -> n36  [key=2, style=dotted];
n28 -> n57  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n30 -> n29  [color=red, key=0, style=solid];
n19 -> n20  [key=0, style=solid];
n19 -> n33  [key=2, style=dotted];
n19 -> n22  [color=darkseagreen4, key=1, label=pt, style=dashed];
n19 -> n25  [color=darkseagreen4, key=1, label=pt, style=dashed];
n19 -> n26  [color=darkseagreen4, key=1, label=pt, style=dashed];
n19 -> n28  [color=darkseagreen4, key=1, label=pt, style=dashed];
n19 -> n58  [color=darkseagreen4, key=1, label=pt, style=dashed];
n20 -> n21  [key=0, style=solid];
n20 -> n34  [key=2, style=dotted];
n20 -> n35  [key=2, style=dotted];
n20 -> n36  [key=2, style=dotted];
n20 -> n37  [key=2, style=dotted];
n20 -> n50  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n20 -> n25  [color=darkseagreen4, key=1, label=taken, style=dashed];
n20 -> n28  [color=darkseagreen4, key=1, label=taken, style=dashed];
n20 -> n29  [color=red, key=1, label=taken, style=dashed];
n24 -> n25  [key=0, style=solid];
n24 -> n40  [key=2, style=dotted];
n24 -> n41  [key=2, style=dotted];
n24 -> n42  [key=2, style=dotted];
n24 -> n53  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n25 -> n26  [key=0, style=solid];
n25 -> n28  [key=0, style=solid];
n25 -> n43  [key=2, style=dotted];
n25 -> n44  [key=2, style=dotted];
n25 -> n35  [key=2, style=dotted];
n25 -> n40  [key=2, style=dotted];
n25 -> n45  [key=2, style=dotted];
n29 -> n30  [color=red, key=0, style=solid];
n29 -> n31  [color=red, key=0, style=solid];
n29 -> n40  [color=red, key=2, style=dotted];
n29 -> n35  [color=red, key=2, style=dotted];
n29 -> n4  [color=red, key=2, style=dotted];
n58 -> n59  [key=0, style=solid];
n58 -> n47  [key=2, style=dotted];
n58 -> n60  [key=2, style=dotted];
n58 -> n61  [key=2, style=dotted];
n58 -> n39  [key=2, style=dotted];
n21 -> n22  [key=0, style=solid];
n21 -> n24  [key=0, style=solid];
n21 -> n32  [key=2, style=dotted];
n50 -> n51  [key=0, style=solid];
n53 -> n54  [key=0, style=solid];
n57 -> n58  [key=0, style=solid];
n31 -> n4  [color=blue, key=0, style=bold];
n51 -> n52  [key=0, style=solid];
n52 -> n50  [color=blue, key=0, style=bold];
n54 -> n55  [key=0, style=solid];
n54 -> n56  [key=2, style=dotted];
n55 -> n53  [color=blue, key=0, style=bold];
n59 -> n57  [color=blue, key=0, style=bold];
n62 -> n63  [key=0, style=solid];
n62 -> n67  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
n62 -> n68  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
n63 -> n64  [key=0, style=solid];
n63 -> n66  [key=0, style=solid];
n67 -> n68  [key=0, style=solid];
n67 -> n69  [key=0, style=solid];
n67 -> n43  [key=2, style=dotted];
n68 -> n70  [key=0, style=solid];
n68 -> n71  [key=2, style=dotted];
n68 -> n47  [key=2, style=dotted];
n64 -> n65  [key=0, style=solid];
n66 -> n67  [key=0, style=solid];
n65 -> n70  [key=0, style=solid];
n65 -> n47  [key=2, style=dotted];
n69 -> n70  [key=0, style=solid];
n69 -> n61  [key=2, style=dotted];
n70 -> n62  [color=blue, key=0, style=bold];
n72 -> n73  [key=0, style=solid];
n73 -> n74  [key=0, style=solid];
n73 -> n43  [key=2, style=dotted];
n73 -> n46  [key=2, style=dotted];
n73 -> n47  [key=2, style=dotted];
n73 -> n61  [key=2, style=dotted];
n74 -> n72  [color=blue, key=0, style=bold];
m1_0 -> m1_1  [color=green, key=0, style=solid];
m1_0 -> m1_2  [color=darkseagreen4, key=1, label="System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>", style=dashed];
m1_0 -> m1_3  [color=darkseagreen4, key=1, label="System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>", style=dashed];
m1_0 -> m1_4  [color=darkseagreen4, key=1, label="System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>", style=dashed];
m1_1 -> m1_2  [color=green, key=0, style=solid];
m1_1 -> m1_10  [color=green, key=2, style=dotted];
m1_1 -> m1_3  [color=green, key=1, label=tokenList, style=dashed];
m1_1 -> m1_4  [color=green, key=1, label=tokenList, style=dashed];
m1_1 -> m1_5  [color=green, key=1, label=tokenList, style=dashed];
m1_2 -> m1_5  [color=green, key=1, label=switches, style=dashed];
m1_2 -> m1_8  [color=green, key=1, label=switches, style=dashed];
m1_2 -> m1_3  [key=0, style=solid];
m1_2 -> m1_11  [key=2, style=dotted];
m1_2 -> m1_10  [key=2, style=dotted];
m1_2 -> m1_24  [color=darkseagreen4, key=1, label=switches, style=dashed];
m1_3 -> m1_5  [color=green, key=1, label=scalars, style=dashed];
m1_3 -> m1_8  [color=green, key=1, label=scalars, style=dashed];
m1_3 -> m1_10  [key=2, style=dotted];
m1_3 -> m1_4  [key=0, style=solid];
m1_3 -> m1_12  [key=2, style=dotted];
m1_3 -> m1_28  [color=darkseagreen4, key=1, label=scalars, style=dashed];
m1_4 -> m1_5  [color=green, key=0, style=solid];
m1_4 -> m1_8  [color=green, key=1, label=sequences, style=dashed];
m1_4 -> m1_32  [color=green, key=1, label=sequences, style=dashed];
m1_4 -> m1_10  [key=2, style=dotted];
m1_4 -> m1_13  [key=2, style=dotted];
m1_5 -> m1_6  [color=green, key=0, style=solid];
m1_5 -> m1_14  [color=green, key=2, style=dotted];
m1_5 -> m1_15  [color=green, key=2, style=dotted];
m1_5 -> m1_23  [color=green, key=1, label="lambda expression", style=dashed];
m1_5 -> m1_27  [color=green, key=1, label="lambda expression", style=dashed];
m1_5 -> m1_31  [color=green, key=1, label="lambda expression", style=dashed];
m1_5 -> m1_7  [color=green, key=1, label=nonOptions, style=dashed];
m1_6 -> m1_8  [color=green, key=1, label=values, style=dashed];
m1_6 -> m1_7  [key=0, style=solid];
m1_6 -> m1_14  [key=2, style=dotted];
m1_6 -> m1_15  [key=2, style=dotted];
m1_6 -> m1_34  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_7 -> m1_8  [color=green, key=0, style=solid];
m1_7 -> m1_10  [key=2, style=dotted];
m1_7 -> m1_16  [key=2, style=dotted];
m1_8 -> m1_9  [color=green, key=0, style=solid];
m1_8 -> m1_17  [color=green, key=2, style=dotted];
m1_8 -> m1_18  [color=green, key=2, style=dotted];
m1_8 -> m1_19  [color=green, key=2, style=dotted];
m1_8 -> m1_20  [color=green, key=2, style=dotted];
m1_8 -> n5  [color=green, key=2, style=dotted];
m1_8 -> m1_22  [color=green, key=2, style=dotted];
m1_8 -> m1_38  [color=green, key=1, label="lambda expression", style=dashed];
m1_9 -> m1_0  [color=blue, key=0, style=bold];
m1_34 -> m1_35  [key=0, style=solid];
m1_23 -> m1_24  [key=0, style=solid];
m1_27 -> m1_28  [key=0, style=solid];
m1_31 -> m1_32  [color=green, key=0, style=solid];
m1_38 -> m1_39  [color=green, key=0, style=solid];
m1_32 -> m1_33  [color=green, key=0, style=solid];
m1_32 -> m1_30  [color=green, key=2, style=dotted];
m1_33 -> m1_31  [color=blue, key=0, style=bold];
m1_39 -> m1_40  [color=green, key=0, style=solid];
m1_40 -> m1_38  [color=blue, key=0, style=bold];
m1_24 -> m1_25  [key=0, style=solid];
m1_24 -> m1_26  [key=2, style=dotted];
m1_28 -> m1_30  [key=2, style=dotted];
m1_28 -> m1_29  [key=0, style=solid];
m1_25 -> m1_23  [color=blue, key=0, style=bold];
m1_29 -> m1_27  [color=blue, key=0, style=bold];
m1_35 -> m1_36  [key=0, style=solid];
m1_35 -> m1_37  [key=2, style=dotted];
m1_36 -> m1_34  [color=blue, key=0, style=bold];
m1_43 -> m1_32  [color=green, key=1, label=sequences, style=dashed];
m1_41 -> m1_24  [color=darkseagreen4, key=1, label=switches, style=dashed];
m1_42 -> m1_28  [color=darkseagreen4, key=1, label=scalars, style=dashed];
m2_0 -> m2_1  [key=0, style=solid];
m2_1 -> m2_2  [key=0, style=solid];
m2_1 -> m2_3  [key=2, style=dotted];
m2_1 -> m2_4  [key=2, style=dotted];
m2_1 -> m2_5  [key=2, style=dotted];
m2_2 -> m2_0  [color=blue, key=0, style=bold];
m2_5 -> m2_15  [key=0, style=solid];
m2_5 -> m2_18  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m2_5 -> m2_0  [color=darkorchid, key=3, label="Parameter variable System.StringComparer nameComparer", style=bold];
m2_15 -> m2_16  [key=0, style=solid];
m2_15 -> m2_18  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m2_16 -> m2_5  [color=blue, key=0, style=bold];
m2_17 -> m2_18  [key=0, style=solid];
m2_9 -> m2_10  [color=green, key=0, style=solid];
m2_9 -> n33  [color=green, key=2, style=dotted];
m2_9 -> m2_12  [color=green, key=2, style=dotted];
m2_9 -> m2_13  [color=green, key=2, style=dotted];
m2_9 -> m2_14  [color=green, key=2, style=dotted];
m2_8 -> m2_9  [color=green, key=0, style=solid];
m2_10 -> m2_8  [color=blue, key=0, style=bold];
m2_18 -> m2_19  [key=0, style=solid];
m2_18 -> n33  [key=2, style=dotted];
m2_18 -> m2_12  [key=2, style=dotted];
m2_18 -> m2_20  [key=2, style=dotted];
m2_18 -> m2_14  [key=2, style=dotted];
m2_19 -> m2_17  [color=blue, key=0, style=bold];
m2_4 -> m2_6  [color=green, key=0, style=solid];
m2_4 -> m2_9  [color=green, key=1, label="System.StringComparer", style=dashed];
m2_4 -> m2_0  [color=darkorchid, key=3, label="Parameter variable System.StringComparer nameComparer", style=bold];
m2_6 -> m2_7  [color=green, key=0, style=solid];
m2_6 -> m2_9  [color=green, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m2_7 -> m2_4  [color=blue, key=0, style=bold];
m2_21 -> m2_9  [color=green, key=1, label="System.StringComparer", style=dashed];
m2_22 -> m2_18  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m3_4 -> m3_5  [key=0, style=solid];
m3_4 -> m3_7  [color=red, key=1, label="CommandLine.Core.TargetType", style=dashed];
m3_5 -> m3_6  [key=0, style=solid];
m3_5 -> m3_7  [color=red, key=0, style=solid];
m3_7 -> m3_8  [color=red, key=0, style=solid];
m3_7 -> m3_0  [color=red, key=2, style=dotted];
m3_6 -> m3_8  [key=0, style=solid];
m3_6 -> m3_9  [key=2, style=dotted];
m3_8 -> m3_4  [color=blue, key=0, style=bold];
m3_0 -> m3_1  [key=0, style=solid];
m3_0 -> m3_2  [color=darkseagreen4, key=1, label="CommandLine.Infrastructure.Maybe<int>", style=dashed];
m3_1 -> m3_2  [key=0, style=solid];
m3_2 -> m3_3  [key=0, style=solid];
m3_3 -> m3_0  [color=blue, key=0, style=bold];
m3_10 -> m3_1  [color=darkseagreen4, key=1, label="CommandLine.Core.TypeDescriptor", style=dashed];
m3_10 -> m3_2  [color=darkseagreen4, key=1, label="CommandLine.Core.TypeDescriptor", style=dashed];
}
