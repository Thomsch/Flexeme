digraph  {
n68 [label="System.StringComparer", span=""];
n69 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
n70 [label="System.Collections.Generic.IEnumerable<string>", span=""];
n71 [label="System.StringComparer", span=""];
n72 [label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>", span=""];
n73 [label=string, span=""];
n74 [label="System.StringComparer", span=""];
n0 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12"];
n1 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="return Choose(\r\n                (args, optionSpecs) =>\r\n                    {\r\n                        var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer));\r\n                        var explodedTokens = Tokenizer.ExplodeOptionList(tokens, name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer));\r\n                        return explodedTokens;\r\n                    },\r\n                types,\r\n                arguments,\r\n                nameComparer,\r\n                parsingCulture);", span="18-28"];
n5 [cluster="lambda expression", label="var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer))", span="21-21"];
n12 [cluster="lambda expression", label="NameLookup.Contains(name, optionSpecs, nameComparer)", span="21-21"];
n6 [cluster="lambda expression", label="var explodedTokens = Tokenizer.ExplodeOptionList(tokens, name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer))", span="22-22"];
n16 [cluster="lambda expression", label="NameLookup.HavingSeparator(name, optionSpecs, nameComparer)", span="22-22"];
n2 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Exit CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12"];
n3 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="31-31"];
n4 [cluster="lambda expression", label="Entry lambda expression", span="19-24"];
n9 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11"];
n11 [cluster="lambda expression", label="Entry lambda expression", span="21-21"];
n7 [cluster="lambda expression", label="return explodedTokens;", span="23-23"];
n10 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<char>>)", label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<char>>)", span="44-44"];
n15 [cluster="lambda expression", label="Entry lambda expression", span="22-22"];
n8 [cluster="lambda expression", label="Exit lambda expression", span="19-24"];
n13 [cluster="lambda expression", label="Exit lambda expression", span="21-21"];
n14 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
n17 [cluster="lambda expression", label="Exit lambda expression", span="22-22"];
n18 [cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16"];
n19 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var verbs = Verb.SelectFromTypes(types)", span="38-38"];
n22 [cluster="CommandLine.Core.Verb.SelectFromTypes(System.Collections.Generic.IEnumerable<System.Type>)", label="Entry CommandLine.Core.Verb.SelectFromTypes(System.Collections.Generic.IEnumerable<System.Type>)", span="40-40"];
n21 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Exit CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="31-31"];
n23 [cluster="System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", span="62-62"];
n24 [cluster="CommandLine.NotParsed<T>.NotParsed(T, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<CommandLine.Error>)", label="Entry CommandLine.NotParsed<T>.NotParsed(T, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="136-136"];
n25 [cluster="CommandLine.NullInstance.NullInstance()", label="Entry CommandLine.NullInstance.NullInstance()", span="9-9"];
n26 [cluster="CommandLine.NoVerbSelectedError.NoVerbSelectedError()", label="Entry CommandLine.NoVerbSelectedError.NoVerbSelectedError()", span="410-410"];
n27 [cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0"];
n28 [cluster="System.StringComparer.Equals(string, string)", label="Entry System.StringComparer.Equals(string, string)", span="0-0"];
n29 [cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0"];
n30 [cluster="System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", span="0-0"];
n31 [cluster="CommandLine.Core.InstanceChooser.CreateHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", label="Entry CommandLine.Core.InstanceChooser.CreateHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", span="75-75"];
n32 [cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="55-55"];
n33 [cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="return verbs.Any(a => nameComparer.Equals(a.Item1.Name, arguments.First()))\r\n                ? InstanceBuilder.Build(\r\n                    Maybe.Just<Func<object>>(() => verbs.Single(v => nameComparer.Equals(v.Item1.Name, arguments.First())).Item2.AutoDefault()),\r\n                    tokenizer,\r\n                    arguments.Skip(1),\r\n                    nameComparer,\r\n                    parsingCulture)\r\n                : new NotParsed<object>(\r\n                    new NullInstance(),\r\n                    verbs.Select(v => v.Item2),\r\n                    new[] { new BadVerbSelectedError(arguments.First()) });", span="62-72"];
n42 [cluster="lambda expression", label="nameComparer.Equals(a.Item1.Name, arguments.First())", span="62-62"];
n45 [cluster="lambda expression", label="verbs.Single(v => nameComparer.Equals(v.Item1.Name, arguments.First())).Item2.AutoDefault()", span="64-64"];
n50 [cluster="lambda expression", label="nameComparer.Equals(v.Item1.Name, arguments.First())", span="64-64"];
n34 [cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Exit CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="55-55"];
n35 [cluster="Unk.Any", label="Entry Unk.Any", span=""];
n36 [cluster="Unk.>", label="Entry Unk.>", span=""];
n37 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="34-34"];
n38 [cluster="NotParsed<object>.cstr", label="Entry NotParsed<object>.cstr", span=""];
n39 [cluster="Unk.Select", label="Entry Unk.Select", span=""];
n40 [cluster="CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", label="Entry CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", span="346-346"];
n41 [cluster="lambda expression", label="Entry lambda expression", span="62-62"];
n44 [cluster="lambda expression", label="Entry lambda expression", span="64-64"];
n52 [cluster="lambda expression", label="Entry lambda expression", span="71-71"];
n43 [cluster="lambda expression", label="Exit lambda expression", span="62-62"];
n46 [cluster="lambda expression", label="Exit lambda expression", span="64-64"];
n47 [cluster="Unk.Single", label="Entry Unk.Single", span=""];
n48 [cluster="Unk.AutoDefault", label="Entry Unk.AutoDefault", span=""];
n49 [cluster="lambda expression", label="Entry lambda expression", span="64-64"];
n51 [cluster="lambda expression", label="Exit lambda expression", span="64-64"];
n53 [cluster="lambda expression", label="v.Item2", span="71-71"];
n54 [cluster="lambda expression", label="Exit lambda expression", span="71-71"];
n55 [cluster="CommandLine.Core.InstanceChooser.CreateHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", label="return verb.Length > 0\r\n                      ? verbs.SingleOrDefault(v => nameComparer.Equals(v.Item1.Name, verb))\r\n                             .ToMaybe()\r\n                             .Return(\r\n                                 v => new HelpVerbRequestedError(v.Item1.Name, v.Item2, true),\r\n                                 new HelpVerbRequestedError(null, null, false))\r\n                      : new HelpVerbRequestedError(null, null, false);", span="80-86"];
n62 [cluster="lambda expression", label="nameComparer.Equals(v.Item1.Name, verb)", span="81-81"];
n56 [cluster="CommandLine.Core.InstanceChooser.CreateHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", label="Exit CommandLine.Core.InstanceChooser.CreateHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", span="75-75"];
n57 [cluster="Unk.SingleOrDefault", label="Entry Unk.SingleOrDefault", span=""];
n58 [cluster="Unk.ToMaybe", label="Entry Unk.ToMaybe", span=""];
n59 [cluster="CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", label="Entry CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", span="372-372"];
n60 [cluster="Unk.Return", label="Entry Unk.Return", span=""];
n61 [cluster="lambda expression", label="Entry lambda expression", span="81-81"];
n64 [cluster="lambda expression", label="Entry lambda expression", span="84-84"];
n63 [cluster="lambda expression", label="Exit lambda expression", span="81-81"];
n65 [cluster="lambda expression", label="new HelpVerbRequestedError(v.Item1.Name, v.Item2, true)", span="84-84"];
n66 [cluster="lambda expression", label="Exit lambda expression", span="84-84"];
n67 [cluster="HelpVerbRequestedError.cstr", label="Entry HelpVerbRequestedError.cstr", span=""];
d8 [cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo, bool)", color=green, community=0, label="return converted.Any(a => a.MatchNothing())\r\n                ? Maybe.Nothing<object>()\r\n                : Maybe.Just(converted.Select(c => ((Just<object>)c).Value).ToUntypedArray(type));", prediction=0, span="38-40"];
d6 [cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo, bool)", label="var type =\r\n                conversionType.GetTypeInfo()\r\n                              .GetGenericArguments()\r\n                              .SingleOrDefault()\r\n                              .ToMaybe()\r\n                              .FromJustOrFail(\r\n                                  new InvalidOperationException(''Non scalar properties should be sequence of type IEnumerable<T>.'')\r\n                    )", span="27-34"];
d7 [cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo, bool)", label="var converted = values.Select(value => ChangeTypeScalar(value, type, conversionCulture, ignoreValueCase))", span="36-36"];
d45 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo, bool)", color=green, community=0, label="Func<object> changeType = () =>\r\n            {\r\n                Func<object> safeChangeType = () =>\r\n                {\r\n                    var isFsOption = ReflectionHelper.IsFSharpOptionType(conversionType);\r\n\r\n                    Func<Type> getUnderlyingType =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.GetUnderlyingType(conversionType)\r\n                                : Nullable.GetUnderlyingType(conversionType);\r\n\r\n                    var type = getUnderlyingType() ?? conversionType;\r\n\r\n                    Func<object> withValue =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.Some(type, Convert.ChangeType(value, type, conversionCulture))\r\n                                : Convert.ChangeType(value, type, conversionCulture);\r\n\r\n                    Func<object> empty = () => isFsOption ? FSharpOptionHelper.None(type) : null;\r\n\r\n                    return (value == null) ? empty() : withValue();\r\n                };\r\n\r\n                return value.IsBooleanString()\r\n                    ? value.ToBoolean() : conversionType.GetTypeInfo().IsEnum\r\n                        ? value.ToEnum(conversionType, ignoreValueCase) : safeChangeType();\r\n            }", prediction=1, span="53-81"];
d46 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo, bool)", label="Func<object> makeType = () =>\r\n            {\r\n                try\r\n                {\r\n                    var ctor = conversionType.GetTypeInfo().GetConstructor(new[] { typeof(string) });\r\n                    return ctor.Invoke(new object[] { value });\r\n                }\r\n                catch (Exception)\r\n                {\r\n                    throw new FormatException(''Destination conversion type must have a constructor that accepts a string.'');\r\n                }\r\n            }", span="83-94"];
d9 [cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo, bool)", label="Exit CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo, bool)", span="25-25"];
d18 [cluster="CSharpx.Maybe.Nothing<T>()", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
d16 [cluster="Unk.Select", label="Entry Unk.Select", span=""];
d19 [cluster="Unk.ToUntypedArray", label="Entry Unk.ToUntypedArray", span=""];
d20 [cluster="CSharpx.Maybe.Just<T>(T)", label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124"];
d24 [cluster="lambda expression", label="Entry lambda expression", span="38-38"];
d29 [cluster="lambda expression", color=green, community=0, label="((Just<object>)c).Value", prediction=2, span="40-40"];
d30 [cluster="lambda expression", label="Exit lambda expression", span="40-40"];
d31 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo, bool)", color=green, community=0, label="var result = ChangeTypeScalarImpl(value, conversionType, conversionCulture, ignoreValueCase)", prediction=3, span="45-45"];
d4 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo, bool)", label="Entry CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo, bool)", span="43-43"];
d32 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo, bool)", color=green, community=0, label="result.Match((_,__) => { }, e => e.First().RethrowWhenAbsentIn(\r\n                new[] { typeof(InvalidCastException), typeof(FormatException), typeof(OverflowException) }))", prediction=4, span="46-47"];
d35 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo, bool)", label="Entry CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo, bool)", span="51-51"];
d33 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo, bool)", color=green, community=0, label="return result.ToMaybe();", prediction=3, span="48-48"];
d36 [cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.Match<TSuccess, TMessage>(System.Action<TSuccess, System.Collections.Generic.IEnumerable<TMessage>>, System.Action<System.Collections.Generic.IEnumerable<TMessage>>)", label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.Match<TSuccess, TMessage>(System.Action<TSuccess, System.Collections.Generic.IEnumerable<TMessage>>, System.Action<System.Collections.Generic.IEnumerable<TMessage>>)", span="495-495"];
d40 [cluster="lambda expression", label="Entry lambda expression", span="46-47"];
d34 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo, bool)", label="Exit CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo, bool)", span="43-43"];
d37 [cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.ToMaybe<TSuccess, TMessage>()", label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.ToMaybe<TSuccess, TMessage>()", span="25-25"];
d41 [cluster="lambda expression", color=green, community=0, label="e.First().RethrowWhenAbsentIn(\r\n                new[] { typeof(InvalidCastException), typeof(FormatException), typeof(OverflowException) })", prediction=6, span="46-47"];
d42 [cluster="lambda expression", label="Exit lambda expression", span="46-47"];
d44 [cluster="System.Exception.RethrowWhenAbsentIn(System.Collections.Generic.IEnumerable<System.Type>)", label="Entry System.Exception.RethrowWhenAbsentIn(System.Collections.Generic.IEnumerable<System.Type>)", span="11-11"];
d47 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo, bool)", label="return Result.Try(\r\n                conversionType.IsPrimitiveEx() || ReflectionHelper.IsFSharpOptionType(conversionType)\r\n                    ? changeType\r\n                    : makeType);", span="96-99"];
d53 [cluster="lambda expression", color=green, community=0, label="Func<object> safeChangeType = () =>\r\n                {\r\n                    var isFsOption = ReflectionHelper.IsFSharpOptionType(conversionType);\r\n\r\n                    Func<Type> getUnderlyingType =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.GetUnderlyingType(conversionType)\r\n                                : Nullable.GetUnderlyingType(conversionType);\r\n\r\n                    var type = getUnderlyingType() ?? conversionType;\r\n\r\n                    Func<object> withValue =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.Some(type, Convert.ChangeType(value, type, conversionCulture))\r\n                                : Convert.ChangeType(value, type, conversionCulture);\r\n\r\n                    Func<object> empty = () => isFsOption ? FSharpOptionHelper.None(type) : null;\r\n\r\n                    return (value == null) ? empty() : withValue();\r\n                }", prediction=7, span="55-76"];
d106 [label=string, span=""];
d107 [label="System.Type", span=""];
d108 [label="System.Globalization.CultureInfo", span=""];
d52 [cluster="lambda expression", label="Entry lambda expression", span="53-81"];
d54 [cluster="lambda expression", label="return value.IsBooleanString()\r\n                    ? value.ToBoolean() : conversionType.GetTypeInfo().IsEnum\r\n                        ? value.ToEnum(conversionType, ignoreValueCase) : safeChangeType();", span="78-80"];
d61 [cluster="lambda expression", color=green, community=0, label="var isFsOption = ReflectionHelper.IsFSharpOptionType(conversionType)", prediction=8, span="57-57"];
d60 [cluster="lambda expression", label="Entry lambda expression", span="55-76"];
d62 [cluster="lambda expression", color=green, community=0, label="Func<Type> getUnderlyingType =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.GetUnderlyingType(conversionType)\r\n                                : Nullable.GetUnderlyingType(conversionType)", prediction=8, span="59-63"];
d50 [cluster="CommandLine.Infrastructure.ReflectionHelper.IsFSharpOptionType(System.Type)", label="Entry CommandLine.Infrastructure.ReflectionHelper.IsFSharpOptionType(System.Type)", span="40-40"];
d69 [cluster="lambda expression", color=green, community=0, label="isFsOption\r\n                                ? FSharpOptionHelper.GetUnderlyingType(conversionType)\r\n                                : Nullable.GetUnderlyingType(conversionType)", prediction=8, span="61-63"];
d64 [cluster="lambda expression", label="Func<object> withValue =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.Some(type, Convert.ChangeType(value, type, conversionCulture))\r\n                                : Convert.ChangeType(value, type, conversionCulture)", span="67-71"];
d74 [cluster="lambda expression", label="isFsOption\r\n                                ? FSharpOptionHelper.Some(type, Convert.ChangeType(value, type, conversionCulture))\r\n                                : Convert.ChangeType(value, type, conversionCulture)", span="69-71"];
d65 [cluster="lambda expression", label="Func<object> empty = () => isFsOption ? FSharpOptionHelper.None(type) : null", span="73-73"];
d79 [cluster="lambda expression", label="isFsOption ? FSharpOptionHelper.None(type) : null", span="73-73"];
d63 [cluster="lambda expression", label="var type = getUnderlyingType() ?? conversionType", span="65-65"];
d110 [label=isFsOption, span=""];
d68 [cluster="lambda expression", label="Entry lambda expression", span="60-63"];
d70 [cluster="lambda expression", label="Exit lambda expression", span="60-63"];
d71 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.GetUnderlyingType(System.Type)", label="Entry CommandLine.Infrastructure.FSharpOptionHelper.GetUnderlyingType(System.Type)", span="11-11"];
d72 [cluster="System.Nullable.GetUnderlyingType(System.Type)", label="Entry System.Nullable.GetUnderlyingType(System.Type)", span="0-0"];
d5 [cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo, bool)", label="Entry CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo, bool)", span="25-25"];
d10 [cluster="System.Type.GetTypeInfo()", label="Entry System.Type.GetTypeInfo()", span="245-245"];
d11 [cluster="System.Type.GetGenericArguments()", label="Entry System.Type.GetGenericArguments()", span="0-0"];
d13 [cluster="T.ToMaybe<T>()", label="Entry T.ToMaybe<T>()", span="249-249"];
d14 [cluster="System.InvalidOperationException.InvalidOperationException(string)", label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0"];
d15 [cluster="CSharpx.Maybe<T>.FromJustOrFail<T>(System.Exception)", label="Entry CSharpx.Maybe<T>.FromJustOrFail<T>(System.Exception)", span="355-355"];
d22 [cluster="lambda expression", label="ChangeTypeScalar(value, type, conversionCulture, ignoreValueCase)", span="36-36"];
d21 [cluster="lambda expression", label="Entry lambda expression", span="36-36"];
d26 [cluster="lambda expression", label="Exit lambda expression", span="38-38"];
d25 [cluster="lambda expression", label="a.MatchNothing()", span="38-38"];
d1 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo, bool)", label="return scalar\r\n                ? ChangeTypeScalar(values.Single(), conversionType, conversionCulture, ignoreValueCase)\r\n                : ChangeTypeSequence(values, conversionType, conversionCulture, ignoreValueCase);", span="20-22"];
d0 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo, bool)", label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo, bool)", span="18-18"];
d48 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo, bool)", label="Exit CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo, bool)", span="51-51"];
d58 [cluster="string.ToEnum(System.Type, bool)", label="Entry string.ToEnum(System.Type, bool)", span="102-102"];
d66 [cluster="lambda expression", label="return (value == null) ? empty() : withValue();", span="75-75"];
d83 [cluster="lambda expression", label="var ctor = conversionType.GetTypeInfo().GetConstructor(new[] { typeof(string) })", span="87-87"];
d84 [cluster="lambda expression", label="return ctor.Invoke(new object[] { value });", span="88-88"];
d49 [cluster="System.Type.IsPrimitiveEx()", label="Entry System.Type.IsPrimitiveEx()", span="228-228"];
d51 [cluster="RailwaySharp.ErrorHandling.Result.Try<TSuccess>(System.Func<TSuccess>)", label="Entry RailwaySharp.ErrorHandling.Result.Try<TSuccess>(System.Func<TSuccess>)", span="210-210"];
d55 [cluster="lambda expression", label="Exit lambda expression", span="53-81"];
d109 [label=bool, span=""];
d56 [cluster="string.IsBooleanString()", label="Entry string.IsBooleanString()", span="65-65"];
d57 [cluster="string.ToBoolean()", label="Entry string.ToBoolean()", span="71-71"];
d59 [cluster="System.Func<TResult>.Invoke()", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
d67 [cluster="lambda expression", label="Exit lambda expression", span="55-76"];
d111 [label=type, span=""];
d73 [cluster="lambda expression", label="Entry lambda expression", span="68-71"];
d75 [cluster="lambda expression", label="Exit lambda expression", span="68-71"];
d76 [cluster="System.Convert.ChangeType(object, System.Type, System.IFormatProvider)", label="Entry System.Convert.ChangeType(object, System.Type, System.IFormatProvider)", span="0-0"];
d77 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)", label="Entry CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)", span="20-20"];
d78 [cluster="lambda expression", label="Entry lambda expression", span="73-73"];
d80 [cluster="lambda expression", label="Exit lambda expression", span="73-73"];
d81 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)", label="Entry CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)", span="28-28"];
d103 [label="System.Globalization.CultureInfo", span=""];
d104 [label=bool, span=""];
d105 [label=type, span=""];
d23 [cluster="lambda expression", label="Exit lambda expression", span="36-36"];
d27 [cluster="Unk.MatchNothing", label="Entry Unk.MatchNothing", span=""];
d2 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo, bool)", label="Exit CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo, bool)", span="18-18"];
d3 [cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0"];
d92 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type, bool)", label="object parsedValue", span="104-104"];
d82 [cluster="lambda expression", label="Entry lambda expression", span="83-94"];
d88 [cluster="System.Type.GetConstructor(System.Type[])", label="Entry System.Type.GetConstructor(System.Type[])", span="0-0"];
d87 [cluster="lambda expression", label="Exit lambda expression", span="83-94"];
d89 [cluster="System.Reflection.ConstructorInfo.Invoke(object[])", label="Entry System.Reflection.ConstructorInfo.Invoke(object[])", span="0-0"];
d91 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type, bool)", label="Entry CommandLine.Core.TypeConverter.ToEnum(string, System.Type, bool)", span="102-102"];
d93 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type, bool)", label="parsedValue = Enum.Parse(conversionType, value, ignoreValueCase)", span="107-107"];
d86 [cluster="lambda expression", label="throw new FormatException(''Destination conversion type must have a constructor that accepts a string.'');", span="92-92"];
d99 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type, bool)", label="Exit CommandLine.Core.TypeConverter.ToEnum(string, System.Type, bool)", span="102-102"];
d96 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type, bool)", label="Enum.IsDefined(conversionType, parsedValue)", span="113-113"];
d94 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type, bool)", label=ArgumentException, span="109-109"];
d100 [cluster="System.Enum.Parse(System.Type, string, bool)", label="Entry System.Enum.Parse(System.Type, string, bool)", span="0-0"];
d97 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type, bool)", label="return parsedValue;", span="115-115"];
d85 [cluster="lambda expression", label=Exception, span="90-90"];
d90 [cluster="System.FormatException.FormatException(string)", label="Entry System.FormatException.FormatException(string)", span="0-0"];
d95 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type, bool)", label="throw new FormatException();", span="111-111"];
d98 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type, bool)", label="throw new FormatException();", span="117-117"];
d102 [cluster="System.Enum.IsDefined(System.Type, object)", label="Entry System.Enum.IsDefined(System.Type, object)", span="0-0"];
d101 [cluster="System.FormatException.FormatException()", label="Entry System.FormatException.FormatException()", span="0-0"];
n68 -> n12  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n68 -> n16  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n69 -> n12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
n69 -> n16  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
n70 -> n42  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
n70 -> n45  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
n70 -> n50  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
n71 -> n42  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n71 -> n45  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n71 -> n50  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n72 -> n45  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>", style=dashed];
n73 -> n62  [color=darkseagreen4, key=1, label=string, style=dashed];
n74 -> n62  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n0 -> n12  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n0 -> n16  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n1 -> n4  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n5 -> n11  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n6 -> n15  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n4 -> n12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
n4 -> n16  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
n31 -> n62  [color=darkseagreen4, key=1, label=string, style=dashed];
n32 -> n42  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
n32 -> n45  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>", style=dashed];
n32 -> n50  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
n33 -> n41  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n33 -> n44  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n33 -> n52  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n45 -> n49  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n55 -> n61  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n55 -> n64  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d8 -> d24  [color=green, key=1, label="lambda expression", style=dashed];
d8 -> n4  [color=green, key=1, label="lambda expression", style=dashed];
d6 -> d8  [color=green, key=1, label=type, style=dashed];
d6 -> d22  [color=darkseagreen4, key=1, label=type, style=dashed];
d7 -> d21  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d45 -> d47  [color=green, key=1, label=changeType, style=dashed];
d31 -> d33  [color=green, key=1, label=result, style=dashed];
d32 -> n15  [color=green, key=1, label="lambda expression", style=dashed];
d32 -> d40  [color=green, key=1, label="lambda expression", style=dashed];
d35 -> d62  [color=green, key=1, label="System.Type", style=dashed];
d35 -> d69  [color=green, key=1, label="System.Type", style=dashed];
d35 -> d64  [color=darkseagreen4, key=1, label=string, style=dashed];
d35 -> d74  [color=darkseagreen4, key=1, label=string, style=dashed];
d35 -> d66  [color=darkseagreen4, key=1, label=string, style=dashed];
d35 -> d54  [color=darkseagreen4, key=1, label=string, style=dashed];
d35 -> d84  [color=darkseagreen4, key=1, label=string, style=dashed];
d35 -> d47  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
d106 -> d64  [color=darkseagreen4, key=1, label=string, style=dashed];
d106 -> d74  [color=darkseagreen4, key=1, label=string, style=dashed];
d106 -> d66  [color=darkseagreen4, key=1, label=string, style=dashed];
d106 -> d54  [color=darkseagreen4, key=1, label=string, style=dashed];
d106 -> d84  [color=darkseagreen4, key=1, label=string, style=dashed];
d107 -> d62  [color=green, key=1, label="System.Type", style=dashed];
d107 -> d69  [color=green, key=1, label="System.Type", style=dashed];
d107 -> d54  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
d108 -> d64  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
d108 -> d74  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
d61 -> d69  [color=green, key=1, label=isFsOption, style=dashed];
d61 -> d64  [color=green, key=1, label=isFsOption, style=dashed];
d61 -> d74  [color=green, key=1, label=isFsOption, style=dashed];
d61 -> d79  [color=green, key=1, label=isFsOption, style=dashed];
d64 -> d66  [color=darkseagreen4, key=1, label=withValue, style=dashed];
d63 -> d74  [color=darkseagreen4, key=1, label=type, style=dashed];
d63 -> d79  [color=darkseagreen4, key=1, label=type, style=dashed];
d110 -> d69  [color=green, key=1, label=isFsOption, style=dashed];
d110 -> d74  [color=darkseagreen4, key=1, label=isFsOption, style=dashed];
d110 -> d79  [color=darkseagreen4, key=1, label=isFsOption, style=dashed];
d5 -> d22  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
d109 -> d54  [color=darkseagreen4, key=1, label=bool, style=dashed];
d111 -> d74  [color=darkseagreen4, key=1, label=type, style=dashed];
d111 -> d79  [color=darkseagreen4, key=1, label=type, style=dashed];
d103 -> d22  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
d104 -> d22  [color=darkseagreen4, key=1, label=bool, style=dashed];
d105 -> d22  [color=darkseagreen4, key=1, label=type, style=dashed];
d91 -> d96  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
d93 -> d97  [color=darkseagreen4, key=1, label=parsedValue, style=dashed];
}
