digraph  {
m0_40 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="106-106"];
m0_41 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="111-115"];
m0_42 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="InstanceBuilderTests.cs", label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="118-118"];
m0_43 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="106-106"];
m0_124 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="9-9"];
m0_151 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33"];
m0_119 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", span="293-293"];
m0_120 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", file="InstanceBuilderTests.cs", label="var expectedResult = new FakeOptionsWithSequenceWithoutRange\r\n                {\r\n                    LongSequence = new[] { 1L, 2L, 3L, 4L, 5L, 6L }\r\n                }", span="296-299"];
m0_121 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceWithoutRange(),\r\n                new[] { ''1'', ''2'', ''3'', ''4'', ''5'', ''6'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="302-306"];
m0_122 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", file="InstanceBuilderTests.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="309-309"];
m0_123 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", span="293-293"];
m0_11 [cluster="Unk.True", file="InstanceBuilderTests.cs", label="Entry Unk.True", span=""];
m0_212 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="494-494"];
m0_213 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="497-497"];
m0_214 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="500-504"];
m0_215 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="507-507"];
m0_216 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="494-494"];
m0_199 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283"];
m0_82 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="9-9"];
m0_62 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="9-9"];
m0_220 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="513-513"];
m0_221 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="516-516"];
m0_222 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="519-523"];
m0_223 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="526-526"];
m0_224 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="513-513"];
m0_55 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="151-151"];
m0_56 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="156-160"];
m0_57 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="InstanceBuilderTests.cs", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="163-163"];
m0_58 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="151-151"];
m0_54 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", span="9-9"];
m0_245 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="572-572"];
m0_246 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="577-581"];
m0_247 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="InstanceBuilderTests.cs", label="Assert.True(expected.Equals(result.Value.StringValue))", span="584-584"];
m0_248 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="572-572"];
m0_186 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="436-436"];
m0_187 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="438-441"];
m0_188 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="443-447"];
m0_189 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="450-450"];
m0_190 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="436-436"];
m0_166 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="12-12"];
m0_31 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="87-87"];
m0_32 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequence(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="92-96"];
m0_33 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="InstanceBuilderTests.cs", label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="99-99"];
m0_34 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="87-87"];
m0_0 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="15-15"];
m0_1 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs", label="var fakeOptions = new FakeOptions()", span="18-18"];
m0_2 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs", label="var expectedResult = ParserResult.Create(\r\n                ParserResultType.Options,\r\n                fakeOptions, new Error[] { new HelpRequestedError() })", span="19-21"];
m0_3 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => fakeOptions,\r\n                new[] { ''--help'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="24-28"];
m0_4 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.Equals(result))", span="31-31"];
m0_5 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="15-15"];
m0_203 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="475-475"];
m0_204 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="478-478"];
m0_205 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequired(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="481-485"];
m0_206 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="488-488"];
m0_207 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="475-475"];
m0_8 [cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="InstanceBuilderTests.cs", label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="103-103"];
m0_78 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316"];
m0_250 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="578-578"];
m0_13 [cluster="lambda expression", file="InstanceBuilderTests.cs", label=fakeOptions, span="25-25"];
m0_12 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="25-25"];
m0_14 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="25-25"];
m0_20 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="46-46"];
m0_21 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptions()", span="46-46"];
m0_22 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="46-46"];
m0_27 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="69-69"];
m0_28 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithDouble()", span="69-69"];
m0_29 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="69-69"];
m0_36 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="93-93"];
m0_37 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSequence()", span="93-93"];
m0_38 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="93-93"];
m0_44 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="112-112"];
m0_45 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptions()", span="112-112"];
m0_46 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="112-112"];
m0_51 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="135-135"];
m0_52 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="135-135"];
m0_53 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="135-135"];
m0_59 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="157-157"];
m0_60 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="157-157"];
m0_61 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="157-157"];
m0_70 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="176-176"];
m0_71 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="176-176"];
m0_72 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="176-176"];
m0_79 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="195-195"];
m0_80 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="195-195"];
m0_81 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="195-195"];
m0_88 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="215-215"];
m0_89 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="215-215"];
m0_90 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="215-215"];
m0_96 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="234-234"];
m0_97 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="234-234"];
m0_98 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="234-234"];
m0_107 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="256-256"];
m0_108 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithEnum()", span="256-256"];
m0_109 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="256-256"];
m0_116 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="281-281"];
m0_117 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithValues()", span="281-281"];
m0_118 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="281-281"];
m0_125 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="303-303"];
m0_126 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSequenceWithoutRange()", span="303-303"];
m0_127 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="303-303"];
m0_134 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="326-326"];
m0_135 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSequenceAndSeparator()", span="326-326"];
m0_136 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="326-326"];
m0_142 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="349-349"];
m0_143 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSequenceAndSeparator()", span="349-349"];
m0_144 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="349-349"];
m0_152 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="378-378"];
m0_155 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="379-381"];
m0_153 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithValues()", span="378-378"];
m0_154 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="378-378"];
m0_156 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="380-381"];
m0_160 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="381-381"];
m0_164 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="381-381"];
m0_157 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="379-381"];
m0_159 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="381-381"];
m0_161 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="381-381"];
m0_163 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="381-381"];
m0_165 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="381-381"];
m0_173 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="404-404"];
m0_174 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSets()", span="404-404"];
m0_175 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="404-404"];
m0_183 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="424-424"];
m0_184 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionWithRequiredAndSet()", span="424-424"];
m0_185 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="424-424"];
m0_191 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="444-444"];
m0_192 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionWithRequiredAndSet()", span="444-444"];
m0_193 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="444-444"];
m0_200 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="464-464"];
m0_201 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionWithRequiredAndSet()", span="464-464"];
m0_202 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="464-464"];
m0_208 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="482-482"];
m0_209 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionWithRequired()", span="482-482"];
m0_210 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="482-482"];
m0_217 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="501-501"];
m0_218 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptions()", span="501-501"];
m0_219 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="501-501"];
m0_226 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="520-520"];
m0_227 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptions()", span="520-520"];
m0_228 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="520-520"];
m0_234 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="539-539"];
m0_235 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptions()", span="539-539"];
m0_236 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="539-539"];
m0_242 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="558-558"];
m0_243 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptions()", span="558-558"];
m0_244 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="558-558"];
m0_251 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptions()", span="578-578"];
m0_252 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="578-578"];
m0_194 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="455-455"];
m0_195 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs", label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="457-461"];
m0_196 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="463-467"];
m0_197 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="470-470"];
m0_198 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="455-455"];
m0_100 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", span="246-246"];
m0_102 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", color=red, community=0, file="InstanceBuilderTests.cs", label="0: var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''Green'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="255-259"];
m0_101 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", color=red, community=1, file="InstanceBuilderTests.cs", label="0: var expectedResult = new FakeOptionsWithEnum\r\n                {\r\n                    Colors = Colors.Green\r\n                }", span="249-252"];
m0_103 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", color=red, community=0, file="InstanceBuilderTests.cs", label="0: expectedResult.ShouldBeEquivalentTo(result.Value)", span="262-262"];
m0_104 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", span="246-246"];
m0_35 [cluster="Unk.SequenceEqual", file="InstanceBuilderTests.cs", label="Entry Unk.SequenceEqual", span=""];
m0_145 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="364-364"];
m0_146 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="367-373"];
m0_147 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs", label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="374-374"];
m0_149 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="387-387"];
m0_148 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="377-384"];
m0_150 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="364-364"];
m0_68 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="261-261"];
m0_99 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="9-9"];
m0_128 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator()", span="315-315"];
m0_129 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator()", file="InstanceBuilderTests.cs", label="var expectedResult = new FakeOptionsWithSequenceAndSeparator\r\n                {\r\n                    LongSequence = new[] { 1L, 1234L, 59678L },\r\n                    StringSequence = new string[] { }\r\n                }", span="318-322"];
m0_130 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                new[] { ''--long-seq'', ''1;1234;59678'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="325-329"];
m0_131 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator()", file="InstanceBuilderTests.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="332-332"];
m0_132 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator()", span="315-315"];
m0_83 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="208-208"];
m0_84 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="211-211"];
m0_85 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="214-218"];
m0_86 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="221-221"];
m0_87 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="208-208"];
m0_237 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="551-551"];
m0_238 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="554-554"];
m0_239 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="557-561"];
m0_240 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="564-564"];
m0_241 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="551-551"];
m0_10 [cluster="CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", file="InstanceBuilderTests.cs", label="Entry CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", span="90-90"];
m0_30 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", span="9-9"];
m0_63 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="169-169"];
m0_64 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="172-172"];
m0_65 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                new[] { ''-s'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="175-179"];
m0_66 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="182-182"];
m0_67 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="169-169"];
m0_105 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="16-16"];
m0_110 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="268-268"];
m0_111 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="271-277"];
m0_112 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="280-284"];
m0_113 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="287-287"];
m0_114 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="268-268"];
m0_182 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", span="4-4"];
m0_73 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="188-188"];
m0_74 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="191-191"];
m0_75 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="194-198"];
m0_76 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="201-201"];
m0_77 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="188-188"];
m0_225 [cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", file="InstanceBuilderTests.cs", label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="272-272"];
m0_91 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="227-227"];
m0_92 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="230-230"];
m0_93 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue(),\r\n                new[] { ''one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="233-237"];
m0_94 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="240-240"];
m0_95 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="227-227"];
m0_133 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="9-9"];
m0_158 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="37-37"];
m0_162 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11"];
m0_177 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="416-416"];
m0_178 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceBuilderTests.cs", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = null\r\n            }", span="418-421"];
m0_179 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="423-427"];
m0_180 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceBuilderTests.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="430-430"];
m0_181 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="416-416"];
m0_176 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4"];
m0_249 [cluster="string.Equals(string)", file="InstanceBuilderTests.cs", label="Entry string.Equals(string)", span="0-0"];
m0_137 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator()", span="338-338"];
m0_138 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator()", file="InstanceBuilderTests.cs", label="var expectedResult = new FakeOptionsWithSequenceAndSeparator\r\n            {\r\n                LongSequence = new long[] {},\r\n                StringSequence = new[] { ''eml1@xyz.com'', ''test@unit.org'', ''xyz@srv.it'' }\r\n            }", span="341-345"];
m0_139 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                new[] { ''-s'', ''eml1@xyz.com,test@unit.org,xyz@srv.it'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="348-352"];
m0_140 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator()", file="InstanceBuilderTests.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="355-355"];
m0_141 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator()", span="338-338"];
m0_172 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294"];
m0_211 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4"];
m0_69 [cluster="CommandLine.NameInfo.NameInfo(string, string)", file="InstanceBuilderTests.cs", label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20"];
m0_47 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="129-129"];
m0_48 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="134-138"];
m0_49 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="InstanceBuilderTests.cs", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="141-141"];
m0_50 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="129-129"];
m0_15 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="40-40"];
m0_16 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="45-49"];
m0_17 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="InstanceBuilderTests.cs", label="Assert.Equal(expected, result.Value.LongValue)", span="52-52"];
m0_18 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="40-40"];
m0_39 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", span="9-9"];
m0_6 [cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6"];
m0_229 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="532-532"];
m0_230 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="535-535"];
m0_231 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="538-542"];
m0_232 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="545-545"];
m0_233 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="532-532"];
m0_115 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6"];
m0_23 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="63-63"];
m0_24 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithDouble(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="68-72"];
m0_25 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="InstanceBuilderTests.cs", label="Assert.Equal(expected, result.Value.DoubleValue)", span="75-75"];
m0_26 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="63-63"];
m0_7 [cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="338-338"];
m0_19 [cluster="Unk.Equal", file="InstanceBuilderTests.cs", label="Entry Unk.Equal", span=""];
m0_167 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="393-393"];
m0_168 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl'')),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''))\r\n                }", span="396-400"];
m0_169 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSets(),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="403-407"];
m0_170 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="410-410"];
m0_171 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="393-393"];
m0_106 [cluster="Unk.ShouldBeEquivalentTo", file="InstanceBuilderTests.cs", label="Entry Unk.ShouldBeEquivalentTo", span=""];
m0_9 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12"];
m0_253 [file="InstanceBuilderTests.cs", label=fakeOptions, span=""];
m0_254 [file="InstanceBuilderTests.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
m0_40 -> m0_41  [key=0, style=solid];
m0_40 -> m0_42  [color=darkseagreen4, key=1, label="int[]", style=dashed];
m0_41 -> m0_42  [key=0, style=solid];
m0_41 -> m0_9  [key=2, style=dotted];
m0_41 -> m0_44  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_42 -> m0_43  [key=0, style=solid];
m0_42 -> m0_35  [key=2, style=dotted];
m0_42 -> m0_11  [key=2, style=dotted];
m0_43 -> m0_40  [color=blue, key=0, style=bold];
m0_119 -> m0_120  [key=0, style=solid];
m0_120 -> m0_121  [key=0, style=solid];
m0_120 -> m0_124  [key=2, style=dotted];
m0_120 -> m0_122  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_121 -> m0_122  [key=0, style=solid];
m0_121 -> m0_9  [key=2, style=dotted];
m0_121 -> m0_125  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_122 -> m0_123  [key=0, style=solid];
m0_122 -> m0_106  [key=2, style=dotted];
m0_123 -> m0_119  [color=blue, key=0, style=bold];
m0_212 -> m0_213  [key=0, style=solid];
m0_213 -> m0_214  [key=0, style=solid];
m0_213 -> m0_78  [key=2, style=dotted];
m0_213 -> m0_69  [key=2, style=dotted];
m0_213 -> m0_215  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_214 -> m0_215  [key=0, style=solid];
m0_214 -> m0_9  [key=2, style=dotted];
m0_214 -> m0_217  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_215 -> m0_216  [key=0, style=solid];
m0_215 -> m0_35  [key=2, style=dotted];
m0_215 -> m0_11  [key=2, style=dotted];
m0_216 -> m0_212  [color=blue, key=0, style=bold];
m0_220 -> m0_221  [key=0, style=solid];
m0_221 -> m0_222  [key=0, style=solid];
m0_221 -> m0_225  [key=2, style=dotted];
m0_221 -> m0_223  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_222 -> m0_223  [key=0, style=solid];
m0_222 -> m0_9  [key=2, style=dotted];
m0_222 -> m0_226  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_223 -> m0_224  [key=0, style=solid];
m0_223 -> m0_35  [key=2, style=dotted];
m0_223 -> m0_11  [key=2, style=dotted];
m0_224 -> m0_220  [color=blue, key=0, style=bold];
m0_55 -> m0_56  [key=0, style=solid];
m0_55 -> m0_57  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m0_56 -> m0_57  [key=0, style=solid];
m0_56 -> m0_9  [key=2, style=dotted];
m0_56 -> m0_59  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_57 -> m0_58  [key=0, style=solid];
m0_57 -> m0_35  [key=2, style=dotted];
m0_57 -> m0_11  [key=2, style=dotted];
m0_58 -> m0_55  [color=blue, key=0, style=bold];
m0_245 -> m0_246  [key=0, style=solid];
m0_245 -> m0_247  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_246 -> m0_247  [key=0, style=solid];
m0_246 -> m0_9  [key=2, style=dotted];
m0_246 -> m0_250  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_247 -> m0_248  [key=0, style=solid];
m0_247 -> m0_249  [key=2, style=dotted];
m0_247 -> m0_11  [key=2, style=dotted];
m0_248 -> m0_245  [color=blue, key=0, style=bold];
m0_186 -> m0_187  [key=0, style=solid];
m0_187 -> m0_188  [key=0, style=solid];
m0_187 -> m0_182  [key=2, style=dotted];
m0_187 -> m0_189  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_188 -> m0_189  [key=0, style=solid];
m0_188 -> m0_9  [key=2, style=dotted];
m0_188 -> m0_191  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_189 -> m0_190  [key=0, style=solid];
m0_189 -> m0_106  [key=2, style=dotted];
m0_190 -> m0_186  [color=blue, key=0, style=bold];
m0_31 -> m0_32  [key=0, style=solid];
m0_31 -> m0_33  [color=darkseagreen4, key=1, label="int[]", style=dashed];
m0_32 -> m0_33  [key=0, style=solid];
m0_32 -> m0_9  [key=2, style=dotted];
m0_32 -> m0_36  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_33 -> m0_34  [key=0, style=solid];
m0_33 -> m0_35  [key=2, style=dotted];
m0_33 -> m0_11  [key=2, style=dotted];
m0_34 -> m0_31  [color=blue, key=0, style=bold];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_6  [key=2, style=dotted];
m0_1 -> m0_3  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m0_1 -> m0_13  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m0_2 -> m0_3  [key=0, style=solid];
m0_2 -> m0_7  [key=2, style=dotted];
m0_2 -> m0_8  [key=2, style=dotted];
m0_2 -> m0_4  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_3 -> m0_4  [key=0, style=solid];
m0_3 -> m0_9  [key=2, style=dotted];
m0_3 -> m0_12  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_4 -> m0_5  [key=0, style=solid];
m0_4 -> m0_10  [key=2, style=dotted];
m0_4 -> m0_11  [key=2, style=dotted];
m0_5 -> m0_0  [color=blue, key=0, style=bold];
m0_203 -> m0_204  [key=0, style=solid];
m0_204 -> m0_205  [key=0, style=solid];
m0_204 -> m0_199  [key=2, style=dotted];
m0_204 -> m0_69  [key=2, style=dotted];
m0_204 -> m0_206  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_205 -> m0_206  [key=0, style=solid];
m0_205 -> m0_9  [key=2, style=dotted];
m0_205 -> m0_208  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_206 -> m0_207  [key=0, style=solid];
m0_206 -> m0_35  [key=2, style=dotted];
m0_206 -> m0_11  [key=2, style=dotted];
m0_207 -> m0_203  [color=blue, key=0, style=bold];
m0_250 -> m0_251  [key=0, style=solid];
m0_13 -> m0_14  [key=0, style=solid];
m0_12 -> m0_13  [key=0, style=solid];
m0_14 -> m0_12  [color=blue, key=0, style=bold];
m0_20 -> m0_21  [key=0, style=solid];
m0_21 -> m0_22  [key=0, style=solid];
m0_21 -> m0_6  [key=2, style=dotted];
m0_22 -> m0_20  [color=blue, key=0, style=bold];
m0_27 -> m0_28  [key=0, style=solid];
m0_28 -> m0_29  [key=0, style=solid];
m0_28 -> m0_30  [key=2, style=dotted];
m0_29 -> m0_27  [color=blue, key=0, style=bold];
m0_36 -> m0_37  [key=0, style=solid];
m0_37 -> m0_38  [key=0, style=solid];
m0_37 -> m0_39  [key=2, style=dotted];
m0_38 -> m0_36  [color=blue, key=0, style=bold];
m0_44 -> m0_45  [key=0, style=solid];
m0_45 -> m0_46  [key=0, style=solid];
m0_45 -> m0_6  [key=2, style=dotted];
m0_46 -> m0_44  [color=blue, key=0, style=bold];
m0_51 -> m0_52  [key=0, style=solid];
m0_52 -> m0_53  [key=0, style=solid];
m0_52 -> m0_54  [key=2, style=dotted];
m0_53 -> m0_51  [color=blue, key=0, style=bold];
m0_59 -> m0_60  [key=0, style=solid];
m0_60 -> m0_61  [key=0, style=solid];
m0_60 -> m0_62  [key=2, style=dotted];
m0_61 -> m0_59  [color=blue, key=0, style=bold];
m0_70 -> m0_71  [key=0, style=solid];
m0_71 -> m0_72  [key=0, style=solid];
m0_71 -> m0_54  [key=2, style=dotted];
m0_72 -> m0_70  [color=blue, key=0, style=bold];
m0_79 -> m0_80  [key=0, style=solid];
m0_80 -> m0_81  [key=0, style=solid];
m0_80 -> m0_82  [key=2, style=dotted];
m0_81 -> m0_79  [color=blue, key=0, style=bold];
m0_88 -> m0_89  [key=0, style=solid];
m0_89 -> m0_90  [key=0, style=solid];
m0_89 -> m0_62  [key=2, style=dotted];
m0_90 -> m0_88  [color=blue, key=0, style=bold];
m0_96 -> m0_97  [key=0, style=solid];
m0_97 -> m0_98  [key=0, style=solid];
m0_97 -> m0_99  [key=2, style=dotted];
m0_98 -> m0_96  [color=blue, key=0, style=bold];
m0_107 -> m0_108  [key=0, style=solid];
m0_108 -> m0_109  [key=0, style=solid];
m0_108 -> m0_105  [key=2, style=dotted];
m0_109 -> m0_107  [color=blue, key=0, style=bold];
m0_116 -> m0_117  [key=0, style=solid];
m0_117 -> m0_118  [key=0, style=solid];
m0_117 -> m0_115  [key=2, style=dotted];
m0_118 -> m0_116  [color=blue, key=0, style=bold];
m0_125 -> m0_126  [key=0, style=solid];
m0_126 -> m0_127  [key=0, style=solid];
m0_126 -> m0_124  [key=2, style=dotted];
m0_127 -> m0_125  [color=blue, key=0, style=bold];
m0_134 -> m0_135  [key=0, style=solid];
m0_135 -> m0_136  [key=0, style=solid];
m0_135 -> m0_133  [key=2, style=dotted];
m0_136 -> m0_134  [color=blue, key=0, style=bold];
m0_142 -> m0_143  [key=0, style=solid];
m0_143 -> m0_144  [key=0, style=solid];
m0_143 -> m0_133  [key=2, style=dotted];
m0_144 -> m0_142  [color=blue, key=0, style=bold];
m0_152 -> m0_153  [key=0, style=solid];
m0_155 -> m0_156  [key=0, style=solid];
m0_155 -> m0_160  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_155 -> m0_164  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_153 -> m0_154  [key=0, style=solid];
m0_153 -> m0_115  [key=2, style=dotted];
m0_154 -> m0_152  [color=blue, key=0, style=bold];
m0_156 -> m0_157  [key=0, style=solid];
m0_156 -> m0_158  [key=2, style=dotted];
m0_156 -> m0_159  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_160 -> m0_161  [key=0, style=solid];
m0_160 -> m0_162  [key=2, style=dotted];
m0_160 -> m0_163  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_164 -> m0_165  [key=0, style=solid];
m0_164 -> m0_166  [key=2, style=dotted];
m0_157 -> m0_155  [color=blue, key=0, style=bold];
m0_159 -> m0_160  [key=0, style=solid];
m0_161 -> m0_159  [color=blue, key=0, style=bold];
m0_163 -> m0_164  [key=0, style=solid];
m0_165 -> m0_163  [color=blue, key=0, style=bold];
m0_173 -> m0_174  [key=0, style=solid];
m0_174 -> m0_175  [key=0, style=solid];
m0_174 -> m0_176  [key=2, style=dotted];
m0_175 -> m0_173  [color=blue, key=0, style=bold];
m0_183 -> m0_184  [key=0, style=solid];
m0_184 -> m0_185  [key=0, style=solid];
m0_184 -> m0_182  [key=2, style=dotted];
m0_185 -> m0_183  [color=blue, key=0, style=bold];
m0_191 -> m0_192  [key=0, style=solid];
m0_192 -> m0_193  [key=0, style=solid];
m0_192 -> m0_182  [key=2, style=dotted];
m0_193 -> m0_191  [color=blue, key=0, style=bold];
m0_200 -> m0_201  [key=0, style=solid];
m0_201 -> m0_202  [key=0, style=solid];
m0_201 -> m0_182  [key=2, style=dotted];
m0_202 -> m0_200  [color=blue, key=0, style=bold];
m0_208 -> m0_209  [key=0, style=solid];
m0_209 -> m0_210  [key=0, style=solid];
m0_209 -> m0_211  [key=2, style=dotted];
m0_210 -> m0_208  [color=blue, key=0, style=bold];
m0_217 -> m0_218  [key=0, style=solid];
m0_218 -> m0_219  [key=0, style=solid];
m0_218 -> m0_6  [key=2, style=dotted];
m0_219 -> m0_217  [color=blue, key=0, style=bold];
m0_226 -> m0_227  [key=0, style=solid];
m0_227 -> m0_228  [key=0, style=solid];
m0_227 -> m0_6  [key=2, style=dotted];
m0_228 -> m0_226  [color=blue, key=0, style=bold];
m0_234 -> m0_235  [key=0, style=solid];
m0_235 -> m0_236  [key=0, style=solid];
m0_235 -> m0_6  [key=2, style=dotted];
m0_236 -> m0_234  [color=blue, key=0, style=bold];
m0_242 -> m0_243  [key=0, style=solid];
m0_243 -> m0_244  [key=0, style=solid];
m0_243 -> m0_6  [key=2, style=dotted];
m0_244 -> m0_242  [color=blue, key=0, style=bold];
m0_251 -> m0_252  [key=0, style=solid];
m0_251 -> m0_6  [key=2, style=dotted];
m0_252 -> m0_250  [color=blue, key=0, style=bold];
m0_194 -> m0_195  [key=0, style=solid];
m0_195 -> m0_196  [key=0, style=solid];
m0_195 -> m0_199  [key=2, style=dotted];
m0_195 -> m0_69  [key=2, style=dotted];
m0_195 -> m0_197  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_196 -> m0_197  [key=0, style=solid];
m0_196 -> m0_9  [key=2, style=dotted];
m0_196 -> m0_200  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_197 -> m0_198  [key=0, style=solid];
m0_197 -> m0_35  [key=2, style=dotted];
m0_197 -> m0_11  [key=2, style=dotted];
m0_198 -> m0_194  [color=blue, key=0, style=bold];
m0_100 -> m0_101  [color=red, key=0, style=solid];
m0_102 -> m0_103  [color=red, key=0, style=solid];
m0_102 -> m0_9  [color=red, key=2, style=dotted];
m0_102 -> m0_107  [color=red, key=1, label="lambda expression", style=dashed];
m0_101 -> m0_102  [color=red, key=0, style=solid];
m0_101 -> m0_105  [color=red, key=2, style=dotted];
m0_101 -> m0_103  [color=red, key=1, label=expectedResult, style=dashed];
m0_103 -> m0_104  [color=red, key=0, style=solid];
m0_103 -> m0_106  [color=red, key=2, style=dotted];
m0_104 -> m0_100  [color=blue, key=0, style=bold];
m0_145 -> m0_146  [key=0, style=solid];
m0_146 -> m0_147  [key=0, style=solid];
m0_146 -> m0_115  [key=2, style=dotted];
m0_146 -> m0_149  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_147 -> m0_148  [key=0, style=solid];
m0_149 -> m0_150  [key=0, style=solid];
m0_149 -> m0_106  [key=2, style=dotted];
m0_148 -> m0_149  [key=0, style=solid];
m0_148 -> m0_151  [key=2, style=dotted];
m0_148 -> m0_152  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_148 -> m0_155  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_150 -> m0_145  [color=blue, key=0, style=bold];
m0_128 -> m0_129  [key=0, style=solid];
m0_129 -> m0_130  [key=0, style=solid];
m0_129 -> m0_133  [key=2, style=dotted];
m0_129 -> m0_131  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_130 -> m0_131  [key=0, style=solid];
m0_130 -> m0_9  [key=2, style=dotted];
m0_130 -> m0_134  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_131 -> m0_132  [key=0, style=solid];
m0_131 -> m0_106  [key=2, style=dotted];
m0_132 -> m0_128  [color=blue, key=0, style=bold];
m0_83 -> m0_84  [key=0, style=solid];
m0_84 -> m0_85  [key=0, style=solid];
m0_84 -> m0_78  [key=2, style=dotted];
m0_84 -> m0_69  [key=2, style=dotted];
m0_84 -> m0_86  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_85 -> m0_86  [key=0, style=solid];
m0_85 -> m0_9  [key=2, style=dotted];
m0_85 -> m0_88  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_86 -> m0_87  [key=0, style=solid];
m0_86 -> m0_35  [key=2, style=dotted];
m0_86 -> m0_11  [key=2, style=dotted];
m0_87 -> m0_83  [color=blue, key=0, style=bold];
m0_237 -> m0_238  [key=0, style=solid];
m0_238 -> m0_239  [key=0, style=solid];
m0_238 -> m0_225  [key=2, style=dotted];
m0_238 -> m0_240  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_239 -> m0_240  [key=0, style=solid];
m0_239 -> m0_9  [key=2, style=dotted];
m0_239 -> m0_242  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_240 -> m0_241  [key=0, style=solid];
m0_240 -> m0_35  [key=2, style=dotted];
m0_240 -> m0_11  [key=2, style=dotted];
m0_241 -> m0_237  [color=blue, key=0, style=bold];
m0_63 -> m0_64  [key=0, style=solid];
m0_64 -> m0_65  [key=0, style=solid];
m0_64 -> m0_68  [key=2, style=dotted];
m0_64 -> m0_69  [key=2, style=dotted];
m0_64 -> m0_66  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_65 -> m0_66  [key=0, style=solid];
m0_65 -> m0_9  [key=2, style=dotted];
m0_65 -> m0_70  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_66 -> m0_67  [key=0, style=solid];
m0_66 -> m0_35  [key=2, style=dotted];
m0_66 -> m0_11  [key=2, style=dotted];
m0_67 -> m0_63  [color=blue, key=0, style=bold];
m0_110 -> m0_111  [key=0, style=solid];
m0_111 -> m0_112  [key=0, style=solid];
m0_111 -> m0_115  [key=2, style=dotted];
m0_111 -> m0_113  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_112 -> m0_113  [key=0, style=solid];
m0_112 -> m0_9  [key=2, style=dotted];
m0_112 -> m0_116  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_113 -> m0_114  [key=0, style=solid];
m0_113 -> m0_106  [key=2, style=dotted];
m0_114 -> m0_110  [color=blue, key=0, style=bold];
m0_73 -> m0_74  [key=0, style=solid];
m0_74 -> m0_75  [key=0, style=solid];
m0_74 -> m0_78  [key=2, style=dotted];
m0_74 -> m0_76  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_75 -> m0_76  [key=0, style=solid];
m0_75 -> m0_9  [key=2, style=dotted];
m0_75 -> m0_79  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_76 -> m0_77  [key=0, style=solid];
m0_76 -> m0_35  [key=2, style=dotted];
m0_76 -> m0_11  [key=2, style=dotted];
m0_77 -> m0_73  [color=blue, key=0, style=bold];
m0_91 -> m0_92  [key=0, style=solid];
m0_92 -> m0_93  [key=0, style=solid];
m0_92 -> m0_78  [key=2, style=dotted];
m0_92 -> m0_94  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_93 -> m0_94  [key=0, style=solid];
m0_93 -> m0_9  [key=2, style=dotted];
m0_93 -> m0_96  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_94 -> m0_95  [key=0, style=solid];
m0_94 -> m0_35  [key=2, style=dotted];
m0_94 -> m0_11  [key=2, style=dotted];
m0_95 -> m0_91  [color=blue, key=0, style=bold];
m0_177 -> m0_178  [key=0, style=solid];
m0_178 -> m0_179  [key=0, style=solid];
m0_178 -> m0_182  [key=2, style=dotted];
m0_178 -> m0_180  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_179 -> m0_180  [key=0, style=solid];
m0_179 -> m0_9  [key=2, style=dotted];
m0_179 -> m0_183  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_180 -> m0_181  [key=0, style=solid];
m0_180 -> m0_106  [key=2, style=dotted];
m0_181 -> m0_177  [color=blue, key=0, style=bold];
m0_137 -> m0_138  [key=0, style=solid];
m0_138 -> m0_139  [key=0, style=solid];
m0_138 -> m0_133  [key=2, style=dotted];
m0_138 -> m0_140  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_139 -> m0_140  [key=0, style=solid];
m0_139 -> m0_9  [key=2, style=dotted];
m0_139 -> m0_142  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_140 -> m0_141  [key=0, style=solid];
m0_140 -> m0_106  [key=2, style=dotted];
m0_141 -> m0_137  [color=blue, key=0, style=bold];
m0_47 -> m0_48  [key=0, style=solid];
m0_47 -> m0_49  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m0_48 -> m0_49  [key=0, style=solid];
m0_48 -> m0_9  [key=2, style=dotted];
m0_48 -> m0_51  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_49 -> m0_50  [key=0, style=solid];
m0_49 -> m0_35  [key=2, style=dotted];
m0_49 -> m0_11  [key=2, style=dotted];
m0_50 -> m0_47  [color=blue, key=0, style=bold];
m0_15 -> m0_16  [key=0, style=solid];
m0_15 -> m0_17  [color=darkseagreen4, key=1, label=long, style=dashed];
m0_16 -> m0_17  [key=0, style=solid];
m0_16 -> m0_9  [key=2, style=dotted];
m0_16 -> m0_20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_17 -> m0_18  [key=0, style=solid];
m0_17 -> m0_19  [key=2, style=dotted];
m0_18 -> m0_15  [color=blue, key=0, style=bold];
m0_229 -> m0_230  [key=0, style=solid];
m0_230 -> m0_231  [key=0, style=solid];
m0_230 -> m0_225  [key=2, style=dotted];
m0_230 -> m0_232  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_231 -> m0_232  [key=0, style=solid];
m0_231 -> m0_9  [key=2, style=dotted];
m0_231 -> m0_234  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_232 -> m0_233  [key=0, style=solid];
m0_232 -> m0_35  [key=2, style=dotted];
m0_232 -> m0_11  [key=2, style=dotted];
m0_233 -> m0_229  [color=blue, key=0, style=bold];
m0_23 -> m0_24  [key=0, style=solid];
m0_23 -> m0_25  [color=darkseagreen4, key=1, label=double, style=dashed];
m0_24 -> m0_25  [key=0, style=solid];
m0_24 -> m0_9  [key=2, style=dotted];
m0_24 -> m0_27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_25 -> m0_26  [key=0, style=solid];
m0_25 -> m0_19  [key=2, style=dotted];
m0_26 -> m0_23  [color=blue, key=0, style=bold];
m0_167 -> m0_168  [key=0, style=solid];
m0_168 -> m0_169  [key=0, style=solid];
m0_168 -> m0_172  [key=2, style=dotted];
m0_168 -> m0_69  [key=2, style=dotted];
m0_168 -> m0_170  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_169 -> m0_170  [key=0, style=solid];
m0_169 -> m0_9  [key=2, style=dotted];
m0_169 -> m0_173  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_170 -> m0_171  [key=0, style=solid];
m0_170 -> m0_35  [key=2, style=dotted];
m0_170 -> m0_11  [key=2, style=dotted];
m0_171 -> m0_167  [color=blue, key=0, style=bold];
m0_253 -> m0_13  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m0_254 -> m0_160  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_254 -> m0_164  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
}
