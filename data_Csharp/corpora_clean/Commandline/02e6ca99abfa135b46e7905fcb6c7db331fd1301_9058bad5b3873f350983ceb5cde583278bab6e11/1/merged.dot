digraph  {
n0 [label="Entry CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", span="12-12", cluster="CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)"];
n1 [label="result.Tag == ResultType.Ok", span="14-14", cluster="CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)"];
n2 [label="var ok = (Ok<TSuccess, TMessage>)result", span="16-16", cluster="CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)"];
n4 [label="return Enumerable.Empty<TMessage>();", span="19-19", cluster="CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)"];
n3 [label="return ok.Value.Messages;", span="17-17", cluster="CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)"];
n5 [label="Exit CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", span="12-12", cluster="CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)"];
n6 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()"];
m0_50 [label="Entry Unk.Protect", span="", cluster="Unk.Protect", file="TypeConverter.cs"];
m0_95 [label="Enum.IsDefined(conversionType, parsedValue)", span="106-106", cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="TypeConverter.cs"];
m0_16 [label="NameLookup.HavingSeparator(name, optionSpecs, nameComparer)", span="27-27", cluster="lambda expression", file="TypeConverter.cs"];
m0_79 [label="Exit lambda expression", span="66-66", cluster="lambda expression", file="TypeConverter.cs"];
m0_61 [label="Func<Type> getUnderlyingType =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.GetUnderlyingType(conversionType)\r\n                                : Nullable.GetUnderlyingType(conversionType)", span="52-56", cluster="lambda expression", file="TypeConverter.cs"];
m0_3 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="35-35", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TypeConverter.cs"];
m0_140 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", file="TypeConverter.cs"];
m0_23 [label="Func<T> makeDefault = () =>\r\n                typeof(T).IsMutable()\r\n                    ? factory.Return(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="53-57", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TypeConverter.cs"];
m0_9 [label="Exit CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", span="20-20", cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs"];
m0_10 [label="Entry System.Type.GetGenericArguments()", span="0-0", cluster="System.Type.GetGenericArguments()", file="TypeConverter.cs"];
m0_87 [label="SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>())", span="44-45", cluster="lambda expression", file="TypeConverter.cs", color=red, community=0];
m0_90 [label="Entry CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", span="95-95", cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="TypeConverter.cs"];
m0_91 [label="object parsedValue", span="97-97", cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="TypeConverter.cs"];
m0_53 [label="return input.IsBooleanString()\r\n                    ? input.ToBoolean() : conversionType.IsEnum\r\n                        ? input.ToEnum(conversionType) : safeChangeType();", span="71-73", cluster="lambda expression", file="TypeConverter.cs", color=green, community=0];
m0_64 [label="Func<object> empty = () => isFsOption ? FSharpOptionHelper.None(type) : null", span="66-66", cluster="lambda expression", file="TypeConverter.cs"];
m0_60 [label="var isFsOption = ReflectionHelper.IsFSharpOptionType(conversionType)", span="50-50", cluster="lambda expression", file="TypeConverter.cs"];
m0_58 [label="Entry System.Func<TResult>.Invoke()", span="0-0", cluster="System.Func<TResult>.Invoke()", file="TypeConverter.cs"];
m0_68 [label="isFsOption\r\n                                ? FSharpOptionHelper.GetUnderlyingType(conversionType)\r\n                                : Nullable.GetUnderlyingType(conversionType)", span="54-56", cluster="lambda expression", file="TypeConverter.cs"];
m0_113 [label="Entry string.MatchName(string, string, System.StringComparer)", span="8-8", cluster="string.MatchName(string, string, System.StringComparer)", file="TypeConverter.cs"];
m0_74 [label="Exit lambda expression", span="61-64", cluster="lambda expression", file="TypeConverter.cs"];
m0_101 [label="Exit lambda expression", span="74-74", cluster="lambda expression", file="TypeConverter.cs"];
m0_124 [label="Entry CSharpx.Maybe<T>.FromJust<T>(System.Exception)", span="160-160", cluster="CSharpx.Maybe<T>.FromJust<T>(System.Exception)", file="TypeConverter.cs"];
m0_76 [label="Entry CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12", cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="TypeConverter.cs"];
m0_13 [label="Exit lambda expression", span="24-24", cluster="lambda expression", file="TypeConverter.cs"];
m0_18 [label="Entry Unk.ToUntypedArray", span="", cluster="Unk.ToUntypedArray", file="TypeConverter.cs"];
m0_99 [label="Entry lambda expression", span="74-74", cluster="lambda expression", file="TypeConverter.cs"];
m0_70 [label="Entry CommandLine.Infrastructure.FSharpOptionHelper.GetUnderlyingType(System.Type)", span="8-8", cluster="CommandLine.Infrastructure.FSharpOptionHelper.GetUnderlyingType(System.Type)", file="TypeConverter.cs"];
m0_63 [label="Func<object> withValue =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.Some(type, Convert.ChangeType(input, type, conversionCulture))\r\n                                : Convert.ChangeType(input, type, conversionCulture)", span="60-64", cluster="lambda expression", file="TypeConverter.cs", color=green, community=0];
m0_28 [label="var tokenizerResult = tokenizer(arguments, optionSpecs)", span="68-68", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TypeConverter.cs", color=red, community=0];
m0_5 [label="Entry CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", span="20-20", cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs"];
m0_12 [label="Entry T.ToMaybe<T>()", span="249-249", cluster="T.ToMaybe<T>()", file="TypeConverter.cs"];
m0_6 [label="var type =\r\n                conversionType.GetGenericArguments()\r\n                              .SingleOrDefault()\r\n                              .ToMaybe()\r\n                              .FromJust(\r\n                                  new ApplicationException(''Non scalar properties should be sequence of type IEnumerable<T>.''))", span="22-27", cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs"];
m0_4 [label="Entry CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo)", span="36-36", cluster="CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs"];
m0_11 [label="Entry System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", file="TypeConverter.cs"];
m0_7 [label="var converted = values.Select(value => ChangeTypeScalar(value, type, conversionCulture))", span="29-29", cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs"];
m0_15 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="TypeConverter.cs"];
m0_8 [label="return converted.Any(a => a.MatchNothing())\r\n                ? Maybe.Nothing<object>()\r\n                : Maybe.Just(converted.Select(c => ((Just<object>)c).Value).ToUntypedArray(type));", span="31-33", cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs"];
m0_17 [label="Exit lambda expression", span="27-27", cluster="lambda expression", file="TypeConverter.cs"];
m0_93 [label=ArgumentException, span="102-102", cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="TypeConverter.cs"];
m0_100 [label="Entry System.FormatException.FormatException()", span="0-0", cluster="System.FormatException.FormatException()", file="TypeConverter.cs"];
m0_104 [label="System.Type", span="", cluster="lambda expression", file="TypeConverter.cs"];
m0_108 [label=type, span="", cluster="lambda expression", file="TypeConverter.cs"];
m0_111 [label="token.Text.MatchName(o.ShortName, o.LongName, nameComparer)", span="89-89", cluster="lambda expression", color=red, community=0, file="TypeConverter.cs"];
m0_82 [label="var ctor = conversionType.GetConstructor(new[] { typeof(string) })", span="80-80", cluster="lambda expression", file="TypeConverter.cs"];
m0_86 [label="Exit lambda expression", span="76-87", cluster="lambda expression", file="TypeConverter.cs"];
m0_103 [label=type, span="", cluster="lambda expression", file="TypeConverter.cs"];
m0_107 [label=isFsOption, span="", cluster="lambda expression", file="TypeConverter.cs"];
m0_110 [label="Entry lambda expression", span="89-89", cluster="lambda expression", file="TypeConverter.cs"];
m0_114 [label="Entry lambda expression", span="96-96", cluster="lambda expression", file="TypeConverter.cs"];
m0_142 [label="Entry lambda expression", span="115-115", cluster="lambda expression", file="TypeConverter.cs"];
m0_145 [label="Entry lambda expression", span="116-116", cluster="lambda expression", file="TypeConverter.cs"];
m0_117 [label="Entry lambda expression", span="99-99", cluster="lambda expression", file="TypeConverter.cs"];
m0_121 [label="Entry lambda expression", span="100-100", cluster="lambda expression", file="TypeConverter.cs"];
m0_125 [label="Entry lambda expression", span="102-102", cluster="lambda expression", file="TypeConverter.cs"];
m0_129 [label="Entry lambda expression", span="103-103", cluster="lambda expression", file="TypeConverter.cs"];
m0_132 [label="Entry lambda expression", span="105-107", cluster="lambda expression", file="TypeConverter.cs"];
m0_136 [label="Entry lambda expression", span="108-108", cluster="lambda expression", file="TypeConverter.cs"];
m0_83 [label="return ctor.Invoke(new object[] { input });", span="81-81", cluster="lambda expression", file="TypeConverter.cs"];
m0_84 [label=Exception, span="83-83", cluster="lambda expression", file="TypeConverter.cs"];
m0_88 [label="Entry System.Reflection.ConstructorInfo.Invoke(object[])", span="0-0", cluster="System.Reflection.ConstructorInfo.Invoke(object[])", file="TypeConverter.cs"];
m0_92 [label="parsedValue = Enum.Parse(conversionType, value)", span="100-100", cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="TypeConverter.cs"];
m0_94 [label="throw new FormatException();", span="104-104", cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="TypeConverter.cs"];
m0_96 [label="return parsedValue;", span="108-108", cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="TypeConverter.cs"];
m0_97 [label="throw new FormatException();", span="110-110", cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="TypeConverter.cs"];
m0_98 [label="Exit CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", span="95-95", cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="TypeConverter.cs"];
m0_105 [label="Exit lambda expression", span="79-79", cluster="lambda expression", file="TypeConverter.cs"];
m0_109 [label="Exit lambda expression", span="85-85", cluster="lambda expression", file="TypeConverter.cs"];
m0_112 [label="Exit lambda expression", span="89-89", cluster="lambda expression", file="TypeConverter.cs"];
m0_115 [label="f()", span="96-96", cluster="lambda expression", file="TypeConverter.cs"];
m0_116 [label="Exit lambda expression", span="96-96", cluster="lambda expression", file="TypeConverter.cs"];
m0_118 [label="sp.Value.IsJust()", span="99-99", cluster="lambda expression", file="TypeConverter.cs"];
m0_119 [label="Exit lambda expression", span="99-99", cluster="lambda expression", file="TypeConverter.cs"];
m0_122 [label="sp.Value.FromJust()", span="100-100", cluster="lambda expression", file="TypeConverter.cs"];
m0_123 [label="Exit lambda expression", span="100-100", cluster="lambda expression", file="TypeConverter.cs"];
m0_126 [label="sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust()", span="102-102", cluster="lambda expression", file="TypeConverter.cs"];
m0_127 [label="Exit lambda expression", span="102-102", cluster="lambda expression", file="TypeConverter.cs"];
m0_130 [label="sp.Specification.DefaultValue.FromJust()", span="103-103", cluster="lambda expression", file="TypeConverter.cs"];
m0_131 [label="Exit lambda expression", span="103-103", cluster="lambda expression", file="TypeConverter.cs"];
m0_133 [label="sp.Value.IsNothing()\r\n                            && sp.Specification.TargetType == TargetType.Sequence\r\n                            && sp.Specification.DefaultValue.MatchNothing()", span="105-107", cluster="lambda expression", file="TypeConverter.cs"];
m0_134 [label="Exit lambda expression", span="105-107", cluster="lambda expression", file="TypeConverter.cs"];
m0_137 [label="sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray()", span="108-108", cluster="lambda expression", file="TypeConverter.cs"];
m0_138 [label="Exit lambda expression", span="108-108", cluster="lambda expression", file="TypeConverter.cs"];
m0_143 [label=v, span="115-115", cluster="lambda expression", file="TypeConverter.cs"];
m0_144 [label="Exit lambda expression", span="115-115", cluster="lambda expression", file="TypeConverter.cs"];
m0_146 [label=d, span="116-116", cluster="lambda expression", file="TypeConverter.cs"];
m0_147 [label="Exit lambda expression", span="116-116", cluster="lambda expression", file="TypeConverter.cs"];
m0_38 [label="instance = instance\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsJust(),\r\n                        sp => sp.Value.FromJust())\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust(),\r\n                        sp => sp.Specification.DefaultValue.FromJust())\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsNothing()\r\n                            && sp.Specification.TargetType == TargetType.Sequence\r\n                            && sp.Specification.DefaultValue.MatchNothing(),\r\n                        sp => sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray())", span="97-108", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TypeConverter.cs"];
m0_40 [label="var values = (from prms in ctor.GetParameters()\r\n                              join sp in specPropsWithValue on prms.Name.ToLower() equals sp.Property.Name.ToLower()\r\n                              select sp.Value.Return(v => v,\r\n                                    sp.Specification.DefaultValue.Return(d => d,\r\n                                        sp.Specification.ConversionType.CreateDefaultForImmutable()))).ToArray()", span="113-117", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TypeConverter.cs"];
m0_41 [label="instance = (T)ctor.Invoke(values)", span="118-118", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, file="TypeConverter.cs"];
m0_42 [label="var validationErrors = specPropsWithValue.Validate(\r\n                SpecificationPropertyRules.Lookup(tokens))", span="121-122", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TypeConverter.cs"];
m0_52 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", color=green, community=0, file="TypeConverter.cs"];
m0_73 [label="Entry System.Type.CreateDefaultForImmutable()", span="125-125", cluster="System.Type.CreateDefaultForImmutable()", color=green, community=0, file="TypeConverter.cs"];
m0_65 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="TypeConverter.cs"];
m0_51 [label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0", cluster="System.Collections.IEnumerable.OfType<TResult>()", file="TypeConverter.cs"];
m0_62 [label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="269-269", cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="TypeConverter.cs"];
m0_72 [label="Entry string.ToLower()", span="0-0", cluster="string.ToLower()", file="TypeConverter.cs"];
m0_54 [label="Entry System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="12-12", cluster="System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", file="TypeConverter.cs"];
m0_39 [label="var ctor = typeInfo.GetConstructor((from sp in specProps select sp.Property.PropertyType).ToArray())", span="112-112", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TypeConverter.cs"];
m0_66 [label="Entry System.Type.IsMutable()", span="115-115", cluster="System.Type.IsMutable()", file="TypeConverter.cs"];
m0_59 [label="Entry CommandLine.Core.Specification.IsOption()", span="10-10", cluster="CommandLine.Core.Specification.IsOption()", file="TypeConverter.cs"];
m0_78 [label="Entry Unk.Concat", span="", cluster="Unk.Concat", file="TypeConverter.cs"];
m0_81 [label="Entry CommandLine.Parsed<T>.Parsed(T)", span="72-72", cluster="CommandLine.Parsed<T>.Parsed(T)", file="TypeConverter.cs"];
m0_67 [label="Entry System.Activator.CreateInstance<T>()", span="0-0", cluster="System.Activator.CreateInstance<T>()", file="TypeConverter.cs"];
m0_69 [label="Entry Unk.ToArray", span="", cluster="Unk.ToArray", file="TypeConverter.cs"];
m0_77 [label="Entry System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="40-40", cluster="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", file="TypeConverter.cs"];
m0_85 [label="Entry object.GetType()", span="0-0", cluster="object.GetType()", file="TypeConverter.cs"];
m0_21 [label="var specs = from pt in specProps select pt.Specification", span="47-47", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TypeConverter.cs"];
m0_29 [label="var tokens = tokenizerResult.Value", span="70-70", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TypeConverter.cs"];
m0_30 [label="var partitions = TokenPartitioner.Partition(\r\n                tokens,\r\n                name => TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer))", span="72-74", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TypeConverter.cs", color=red, community=0];
m0_0 [label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="13-13", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="TypeConverter.cs"];
m0_1 [label="return scalar\r\n                ? ChangeTypeScalar(values.Single(), conversionType, conversionCulture)\r\n                : ChangeTypeSequence(values, conversionType, conversionCulture);", span="15-17", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="TypeConverter.cs"];
m0_2 [label="Exit CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="13-13", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="TypeConverter.cs"];
m0_75 [label="Entry System.Reflection.ConstructorInfo.Invoke(object[])", span="0-0", cluster="System.Reflection.ConstructorInfo.Invoke(object[])", file="TypeConverter.cs"];
m0_49 [label="Entry System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", span="14-14", cluster="System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", file="TypeConverter.cs"];
m0_48 [label="Entry CSharpx.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", span="126-126", cluster="CSharpx.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", file="TypeConverter.cs"];
m0_37 [label="instance = factory.Return(f => f(), Activator.CreateInstance<T>())", span="96-96", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TypeConverter.cs"];
m0_139 [label="Entry System.Type.GetGenericArguments()", span="0-0", cluster="System.Type.GetGenericArguments()", file="TypeConverter.cs"];
m0_135 [label="Entry CSharpx.Maybe<T>.MatchNothing()", span="29-29", cluster="CSharpx.Maybe<T>.MatchNothing()", file="TypeConverter.cs"];
m0_80 [label="Entry NotParsed<T>.cstr", span="", cluster="NotParsed<T>.cstr", file="TypeConverter.cs"];
m0_55 [label="Entry string.IsBooleanString()", span="60-60", cluster="string.IsBooleanString()", file="TypeConverter.cs"];
m0_71 [label="Entry System.Reflection.MethodBase.GetParameters()", span="0-0", cluster="System.Reflection.MethodBase.GetParameters()", file="TypeConverter.cs"];
m0_14 [label="Entry Unk.FromJust", span="", cluster="Unk.FromJust", file="TypeConverter.cs"];
m0_57 [label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0", cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", file="TypeConverter.cs"];
m0_141 [label="Entry System.Type.CreateEmptyArray()", span="101-101", cluster="System.Type.CreateEmptyArray()", file="TypeConverter.cs"];
m0_36 [label="typeInfo.IsMutable()", span="94-94", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TypeConverter.cs"];
m0_56 [label="Entry System.Func<TResult>.Invoke()", span="0-0", cluster="System.Func<TResult>.Invoke()", file="TypeConverter.cs"];
m0_89 [label="Entry CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="105-105", cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="TypeConverter.cs"];
m0_19 [label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124", cluster="CSharpx.Maybe.Just<T>(T)", file="TypeConverter.cs"];
m0_24 [label="arguments.Any()", span="59-59", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TypeConverter.cs"];
m0_25 [label="var preprocessorErrors = arguments.Preprocess(PreprocessorGuards.Lookup(nameComparer))", span="61-61", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TypeConverter.cs"];
m0_31 [label="var result = ChangeTypeScalarImpl(value, conversionType, conversionCulture)", span="38-38", cluster="CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo)", color=red, community=0, file="TypeConverter.cs"];
m0_32 [label="result.Match(_ => { }, e => e.RethrowWhenAbsentIn(\r\n                new[] { typeof(InvalidCastException), typeof(FormatException), typeof(OverflowException) }))", span="39-40", cluster="CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", color=green, community=0];
m0_33 [label="return Maybe.OfEither(result);", span="41-41", cluster="CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo)", color=red, community=0, file="TypeConverter.cs"];
m0_20 [label="var specProps = typeInfo.GetSpecifications(pi => SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>()))", span="44-45", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=red, community=0, file="TypeConverter.cs"];
m0_22 [label="var optionSpecs = specs\r\n                .ThrowingValidate(SpecificationGuards.Lookup)\r\n                .OfType<OptionSpecification>()", span="49-51", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TypeConverter.cs"];
m0_27 [label="return new NotParsed<T>(makeDefault(), preprocessorErrors);", span="64-64", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=red, community=0, file="TypeConverter.cs"];
m0_26 [label="preprocessorErrors.Any()", span="62-62", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TypeConverter.cs"];
m0_43 [label="Entry Unk.RethrowWhenAbsentIn", span="", cluster="Unk.RethrowWhenAbsentIn", file="TypeConverter.cs"];
m0_34 [label="Exit CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo)", span="36-36", cluster="CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs"];
m0_35 [label="Entry CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)", span="44-44", cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs"];
m0_45 [label="Func<string, object> makeType = input =>\r\n            {\r\n                try\r\n                {\r\n                    var ctor = conversionType.GetConstructor(new[] { typeof(string) });\r\n                    return ctor.Invoke(new object[] { input });\r\n                }\r\n                catch (Exception)\r\n                {\r\n                    throw new FormatException(''Destination conversion type must have a constructor that accepts a string.'');\r\n                }\r\n            }", span="76-87", cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", color=green, community=0];
m0_46 [label="return Either.Protect(\r\n                conversionType.IsPrimitiveEx() || ReflectionHelper.IsFSharpOptionType(conversionType)\r\n                    ? changeType\r\n                    : makeType, value);", span="89-92", cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", color=green, community=0];
m0_44 [label="Func<string, object> changeType = input =>\r\n            {\r\n                Func<object> safeChangeType = () =>\r\n                {\r\n                    var isFsOption = ReflectionHelper.IsFSharpOptionType(conversionType);\r\n\r\n                    Func<Type> getUnderlyingType =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.GetUnderlyingType(conversionType)\r\n                                : Nullable.GetUnderlyingType(conversionType);\r\n\r\n                    var type = getUnderlyingType() ?? conversionType;\r\n\r\n                    Func<object> withValue =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.Some(type, Convert.ChangeType(input, type, conversionCulture))\r\n                                : Convert.ChangeType(input, type, conversionCulture);\r\n\r\n                    Func<object> empty = () => isFsOption ? FSharpOptionHelper.None(type) : null;\r\n\r\n                    return (input == null) ? empty() : withValue();\r\n                };\r\n\r\n                return input.IsBooleanString()\r\n                    ? input.ToBoolean() : conversionType.IsEnum\r\n                        ? input.ToEnum(conversionType) : safeChangeType();\r\n            }", span="46-74", cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", color=green, community=0];
m0_47 [label="Exit CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)", span="44-44", cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs"];
m0_128 [label="Entry CSharpx.Maybe<T>.IsNothing<T>()", span="170-170", cluster="CSharpx.Maybe<T>.IsNothing<T>()", file="TypeConverter.cs"];
m0_106 [label=string, span="", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="TypeConverter.cs"];
m0_102 [label="System.Globalization.CultureInfo", span="", cluster="CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TypeConverter.cs"];
m0_120 [label="Entry CSharpx.Maybe<T>.IsJust<T>()", span="175-175", cluster="CSharpx.Maybe<T>.IsJust<T>()", file="TypeConverter.cs"];
m0_148 [label="System.StringComparer", span="", file="TypeConverter.cs"];
m0_149 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span="", file="TypeConverter.cs"];
m0_150 [label="CSharpx.Maybe<System.Func<T>>", span="", file="TypeConverter.cs"];
m0_151 [label=specProps, span="", file="TypeConverter.cs"];
m0_152 [label="System.StringComparer", span="", file="TypeConverter.cs"];
m0_153 [label=optionSpecs, span="", file="TypeConverter.cs"];
m0_154 [label="System.Globalization.CultureInfo", span="", file="TypeConverter.cs"];
m0_155 [label=token, span="", file="TypeConverter.cs"];
n0 -> n1  [key=0, style=solid];
n0 -> n2  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>"];
n1 -> n2  [key=0, style=solid];
n1 -> n4  [key=0, style=solid];
n2 -> n3  [key=0, style=solid];
n4 -> n5  [key=0, style=solid];
n4 -> n6  [key=2, style=dotted];
n3 -> n5  [key=0, style=solid];
n5 -> n0  [key=0, style=bold, color=blue];
m0_95 -> m0_96  [key=0, style=solid];
m0_95 -> m0_97  [key=0, style=solid];
m0_95 -> m0_101  [key=2, style=dotted];
m0_16 -> m0_17  [key=0, style=solid];
m0_16 -> m0_18  [key=2, style=dotted];
m0_79 -> m0_77  [key=0, style=bold, color=blue];
m0_61 -> m0_62  [key=0, style=solid];
m0_3 -> m0_19  [key=0, style=solid];
m0_3 -> m0_23  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Func<T>>"];
m0_3 -> m0_93  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Func<T>>"];
m0_3 -> m0_24  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m0_3 -> m0_25  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m0_3 -> m0_28  [key=1, style=dashed, color=red, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>"];
m0_3 -> m0_30  [key=1, style=dashed, color=red, label="System.StringComparer"];
m0_3 -> m0_100  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_3 -> m0_31  [key=1, style=dashed, color=red, label="System.StringComparer"];
m0_3 -> m0_104  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m0_3 -> m0_32  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m0_3 -> m0_108  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m0_3 -> m0_33  [key=1, style=dashed, color=red, label="System.StringComparer"];
m0_3 -> m0_111  [key=1, style=dashed, color=red, label="System.StringComparer"];
m0_3 -> m0_37  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Func<T>>"];
m0_23 -> m0_24  [key=0, style=solid];
m0_23 -> m0_27  [key=1, style=dashed, color=red, label=makeDefault];
m0_23 -> m0_23  [key=3, color=darkorchid, style=bold, label="Local variable System.Func<T> makeDefault"];
m0_9 -> m0_5  [key=0, style=bold, color=blue];
m0_87 -> m0_88  [key=0, style=solid, color=red];
m0_87 -> m0_89  [key=2, style=dotted, color=red];
m0_87 -> m0_90  [key=2, style=dotted, color=red];
m0_87 -> m0_91  [key=2, style=dotted, color=red];
m0_90 -> m0_91  [key=0, style=solid];
m0_90 -> m0_92  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_90 -> m0_95  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m0_91 -> m0_92  [key=0, style=solid];
m0_53 -> m0_54  [key=0, style=solid, color=green];
m0_53 -> m0_55  [key=2, style=dotted, color=green];
m0_53 -> m0_56  [key=2, style=dotted, color=green];
m0_53 -> m0_57  [key=2, style=dotted, color=green];
m0_53 -> m0_58  [key=2, style=dotted, color=green];
m0_64 -> m0_65  [key=0, style=solid];
m0_60 -> m0_63  [key=1, style=dashed, color=green, label=isFsOption];
m0_60 -> m0_73  [key=1, style=dashed, color=green, label=isFsOption];
m0_60 -> m0_61  [key=0, style=solid];
m0_60 -> m0_49  [key=2, style=dotted];
m0_60 -> m0_68  [key=1, style=dashed, color=darkseagreen4, label=isFsOption];
m0_60 -> m0_64  [key=1, style=dashed, color=darkseagreen4, label=isFsOption];
m0_60 -> m0_78  [key=1, style=dashed, color=darkseagreen4, label=isFsOption];
m0_68 -> m0_69  [key=0, style=solid];
m0_68 -> m0_70  [key=2, style=dotted];
m0_68 -> m0_71  [key=2, style=dotted];
m0_74 -> m0_72  [key=0, style=bold, color=blue];
m0_101 -> m0_99  [key=0, style=bold, color=blue];
m0_13 -> m0_11  [key=0, style=bold, color=blue];
m0_99 -> m0_100  [key=0, style=solid];
m0_63 -> m0_64  [key=0, style=solid, color=green];
m0_63 -> m0_65  [key=1, style=dashed, color=green, label=withValue];
m0_28 -> m0_29  [key=0, style=solid, color=red];
m0_28 -> m0_57  [key=2, style=dotted, color=red];
m0_28 -> m0_43  [key=1, style=dashed, color=red, label=tokenizerResult];
m0_5 -> m0_6  [key=0, style=solid];
m0_5 -> m0_9  [key=2, style=dotted];
m0_5 -> m0_11  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_5 -> m0_0  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Globalization.CultureInfo conversionCulture"];
m0_5 -> m0_7  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m0_5 -> m0_21  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m0_12 -> m0_13  [key=0, style=solid];
m0_12 -> m0_14  [key=2, style=dotted];
m0_6 -> m0_7  [key=0, style=solid];
m0_6 -> m0_10  [key=2, style=dotted];
m0_6 -> m0_15  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_6 -> m0_11  [key=2, style=dotted];
m0_6 -> m0_12  [key=2, style=dotted];
m0_6 -> m0_13  [key=2, style=dotted];
m0_6 -> m0_14  [key=2, style=dotted];
m0_6 -> m0_21  [key=1, style=dashed, color=darkseagreen4, label=type];
m0_6 -> m0_8  [key=1, style=dashed, color=darkseagreen4, label=type];
m0_4 -> m0_5  [key=0, style=solid];
m0_4 -> m0_12  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m0_4 -> m0_6  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m0_4 -> m0_16  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m0_4 -> m0_31  [key=0, style=solid];
m0_4 -> m0_0  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Globalization.CultureInfo conversionCulture"];
m0_11 -> m0_12  [key=0, style=solid];
m0_7 -> m0_8  [key=0, style=solid];
m0_7 -> m0_15  [key=2, style=dotted];
m0_7 -> m0_86  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_15 -> m0_16  [key=0, style=solid];
m0_8 -> m0_4  [key=0, style=bold, color=blue];
m0_8 -> m0_9  [key=0, style=solid];
m0_8 -> m0_16  [key=2, style=dotted];
m0_8 -> m0_90  [key=2, style=dotted];
m0_8 -> m0_15  [key=2, style=dotted];
m0_8 -> m0_18  [key=2, style=dotted];
m0_8 -> m0_19  [key=2, style=dotted];
m0_8 -> m0_110  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_8 -> m0_28  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_17 -> m0_15  [key=0, style=bold, color=blue];
m0_93 -> m0_94  [key=0, style=solid];
m0_93 -> m0_66  [key=2, style=dotted];
m0_93 -> m0_67  [key=2, style=dotted];
m0_93 -> m0_48  [key=2, style=dotted];
m0_93 -> m0_69  [key=2, style=dotted];
m0_93 -> m0_95  [key=2, style=dotted];
m0_93 -> m0_96  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_93 -> m0_93  [key=1, style=dashed, color=darkseagreen4, label=p];
m0_100 -> m0_101  [key=0, style=solid];
m0_100 -> m0_102  [key=2, style=dotted];
m0_104 -> m0_105  [key=0, style=solid];
m0_104 -> m0_106  [key=2, style=dotted];
m0_104 -> m0_52  [key=1, style=dashed, color=green, label="System.Type"];
m0_104 -> m0_53  [key=1, style=dashed, color=green, label="System.Type"];
m0_104 -> m0_60  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m0_104 -> m0_61  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m0_104 -> m0_68  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m0_104 -> m0_62  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m0_104 -> m0_82  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m0_108 -> m0_109  [key=0, style=solid];
m0_108 -> m0_106  [key=2, style=dotted];
m0_108 -> m0_73  [key=1, style=dashed, color=green, label=type];
m0_108 -> m0_78  [key=1, style=dashed, color=darkseagreen4, label=type];
m0_111 -> m0_112  [key=0, style=solid, color=red];
m0_111 -> m0_113  [key=2, style=dotted, color=red];
m0_82 -> m0_83  [key=0, style=solid];
m0_82 -> m0_87  [key=2, style=dotted];
m0_86 -> m0_87  [key=0, style=solid, color=red];
m0_86 -> m0_21  [key=0, style=solid];
m0_86 -> m0_81  [key=0, style=bold, color=blue];
m0_103 -> m0_104  [key=0, style=solid];
m0_103 -> m0_21  [key=1, style=dashed, color=darkseagreen4, label=type];
m0_107 -> m0_108  [key=0, style=solid];
m0_107 -> m0_73  [key=1, style=dashed, color=green, label=isFsOption];
m0_107 -> m0_68  [key=1, style=dashed, color=darkseagreen4, label=isFsOption];
m0_107 -> m0_78  [key=1, style=dashed, color=darkseagreen4, label=isFsOption];
m0_110 -> m0_111  [key=0, style=solid, color=red];
m0_114 -> m0_115  [key=0, style=solid];
m0_142 -> m0_143  [key=0, style=solid];
m0_145 -> m0_146  [key=0, style=solid];
m0_117 -> m0_118  [key=0, style=solid];
m0_121 -> m0_122  [key=0, style=solid];
m0_125 -> m0_126  [key=0, style=solid];
m0_129 -> m0_130  [key=0, style=solid];
m0_132 -> m0_133  [key=0, style=solid];
m0_136 -> m0_137  [key=0, style=solid];
m0_83 -> m0_84  [key=0, style=solid];
m0_83 -> m0_56  [key=2, style=dotted];
m0_83 -> m0_85  [key=2, style=dotted];
m0_83 -> m0_86  [key=0, style=solid];
m0_83 -> m0_88  [key=2, style=dotted];
m0_84 -> m0_82  [key=0, style=bold, color=blue];
m0_84 -> m0_85  [key=0, style=solid];
m0_88 -> m0_86  [key=0, style=bold, color=blue];
m0_92 -> m0_93  [key=0, style=solid];
m0_92 -> m0_95  [key=0, style=solid];
m0_92 -> m0_99  [key=2, style=dotted];
m0_92 -> m0_96  [key=1, style=dashed, color=darkseagreen4, label=parsedValue];
m0_94 -> m0_92  [key=0, style=bold, color=blue];
m0_94 -> m0_98  [key=0, style=solid];
m0_94 -> m0_100  [key=2, style=dotted];
m0_96 -> m0_97  [key=0, style=solid];
m0_96 -> m0_98  [key=0, style=solid];
m0_97 -> m0_98  [key=0, style=solid];
m0_97 -> m0_56  [key=2, style=dotted];
m0_97 -> m0_100  [key=2, style=dotted];
m0_98 -> m0_96  [key=0, style=bold, color=blue];
m0_98 -> m0_90  [key=0, style=bold, color=blue];
m0_105 -> m0_103  [key=0, style=bold, color=blue];
m0_109 -> m0_107  [key=0, style=bold, color=blue];
m0_112 -> m0_110  [key=0, style=bold, color=blue];
m0_115 -> m0_116  [key=0, style=solid];
m0_115 -> m0_56  [key=2, style=dotted];
m0_116 -> m0_114  [key=0, style=bold, color=blue];
m0_118 -> m0_119  [key=0, style=solid];
m0_118 -> m0_120  [key=2, style=dotted];
m0_119 -> m0_117  [key=0, style=bold, color=blue];
m0_122 -> m0_123  [key=0, style=solid];
m0_122 -> m0_124  [key=2, style=dotted];
m0_123 -> m0_121  [key=0, style=bold, color=blue];
m0_126 -> m0_127  [key=0, style=solid];
m0_126 -> m0_128  [key=2, style=dotted];
m0_126 -> m0_120  [key=2, style=dotted];
m0_127 -> m0_125  [key=0, style=bold, color=blue];
m0_130 -> m0_131  [key=0, style=solid];
m0_130 -> m0_124  [key=2, style=dotted];
m0_131 -> m0_129  [key=0, style=bold, color=blue];
m0_133 -> m0_134  [key=0, style=solid];
m0_133 -> m0_128  [key=2, style=dotted];
m0_133 -> m0_135  [key=2, style=dotted];
m0_134 -> m0_132  [key=0, style=bold, color=blue];
m0_137 -> m0_138  [key=0, style=solid];
m0_137 -> m0_139  [key=2, style=dotted];
m0_137 -> m0_140  [key=2, style=dotted];
m0_137 -> m0_141  [key=2, style=dotted];
m0_138 -> m0_136  [key=0, style=bold, color=blue];
m0_143 -> m0_144  [key=0, style=solid];
m0_144 -> m0_142  [key=0, style=bold, color=blue];
m0_146 -> m0_147  [key=0, style=solid];
m0_147 -> m0_145  [key=0, style=bold, color=blue];
m0_38 -> m0_39  [key=0, style=solid];
m0_38 -> m0_42  [key=0, style=solid];
m0_38 -> m0_68  [key=2, style=dotted];
m0_38 -> m0_38  [key=1, style=dashed, color=darkseagreen4, label=instance];
m0_38 -> m0_117  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_38 -> m0_121  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_38 -> m0_125  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_38 -> m0_129  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_38 -> m0_132  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_38 -> m0_136  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_38 -> m0_45  [key=1, style=dashed, color=darkseagreen4, label=instance];
m0_38 -> m0_46  [key=1, style=dashed, color=darkseagreen4, label=instance];
m0_40 -> m0_41  [key=0, style=solid, color=green];
m0_40 -> m0_71  [key=2, style=dotted];
m0_40 -> m0_72  [key=2, style=dotted];
m0_40 -> m0_73  [key=2, style=dotted];
m0_40 -> m0_48  [key=2, style=dotted];
m0_40 -> m0_74  [key=2, style=dotted];
m0_40 -> m0_40  [key=1, style=dashed, color=darkseagreen4, label=prms];
m0_40 -> m0_142  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_40 -> m0_145  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_41 -> m0_42  [key=0, style=solid, color=green];
m0_41 -> m0_43  [key=2, style=dotted, color=green];
m0_41 -> m0_75  [key=2, style=dotted];
m0_41 -> m0_45  [key=1, style=dashed, color=darkseagreen4, label=instance];
m0_41 -> m0_46  [key=1, style=dashed, color=darkseagreen4, label=instance];
m0_42 -> m0_40  [key=0, style=bold, color=blue];
m0_42 -> m0_43  [key=0, style=solid];
m0_42 -> m0_76  [key=2, style=dotted];
m0_42 -> m0_77  [key=2, style=dotted];
m0_52 -> m0_53  [key=0, style=solid, color=green];
m0_73 -> m0_74  [key=0, style=solid, color=green];
m0_73 -> m0_75  [key=2, style=dotted, color=green];
m0_73 -> m0_76  [key=2, style=dotted, color=green];
m0_65 -> m0_66  [key=0, style=solid];
m0_65 -> m0_58  [key=2, style=dotted];
m0_51 -> m0_52  [key=0, style=solid, color=green];
m0_51 -> m0_63  [key=1, style=dashed, color=green, label=string];
m0_51 -> m0_73  [key=1, style=dashed, color=green, label=string];
m0_51 -> m0_53  [key=1, style=dashed, color=green, label=string];
m0_51 -> m0_65  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_62 -> m0_63  [key=0, style=solid, color=green];
m0_62 -> m0_73  [key=1, style=dashed, color=green, label=type];
m0_62 -> m0_58  [key=2, style=dotted];
m0_62 -> m0_64  [key=1, style=dashed, color=darkseagreen4, label=type];
m0_62 -> m0_78  [key=1, style=dashed, color=darkseagreen4, label=type];
m0_72 -> m0_73  [key=0, style=solid, color=green];
m0_54 -> m0_51  [key=0, style=bold, color=blue];
m0_39 -> m0_38  [key=0, style=bold, color=blue];
m0_39 -> m0_40  [key=0, style=solid];
m0_39 -> m0_69  [key=2, style=dotted];
m0_39 -> m0_70  [key=2, style=dotted];
m0_39 -> m0_39  [key=1, style=dashed, color=darkseagreen4, label=sp];
m0_39 -> m0_41  [key=1, style=dashed, color=darkseagreen4, label=ctor];
m0_66 -> m0_59  [key=0, style=bold, color=blue];
m0_59 -> m0_60  [key=0, style=solid];
m0_78 -> m0_79  [key=0, style=solid];
m0_78 -> m0_80  [key=2, style=dotted];
m0_81 -> m0_83  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_81 -> m0_82  [key=0, style=solid];
m0_67 -> m0_68  [key=0, style=solid];
m0_69 -> m0_67  [key=0, style=bold, color=blue];
m0_77 -> m0_78  [key=0, style=solid];
m0_85 -> m0_86  [key=0, style=solid];
m0_85 -> m0_89  [key=2, style=dotted];
m0_21 -> m0_88  [key=0, style=solid];
m0_21 -> m0_23  [key=2, style=dotted];
m0_21 -> m0_22  [key=0, style=solid];
m0_21 -> m0_21  [key=1, style=dashed, color=darkseagreen4, label=pt];
m0_29 -> m0_30  [key=0, style=solid, color=red];
m0_29 -> m0_42  [key=1, style=dashed, color=darkseagreen4, label=tokens];
m0_30 -> m0_28  [key=0, style=bold, color=blue];
m0_30 -> m0_31  [key=0, style=solid, color=red];
m0_30 -> m0_58  [key=2, style=dotted, color=red];
m0_30 -> m0_99  [key=1, style=dashed, color=red, label="lambda expression"];
m0_30 -> m0_32  [key=1, style=dashed, color=red, label=partitions];
m0_30 -> m0_33  [key=1, style=dashed, color=red, label=partitions];
m0_0 -> m0_1  [key=0, style=solid];
m0_0 -> m0_5  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_0 -> m0_12  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_0 -> m0_6  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_0 -> m0_16  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_0 -> m0_3  [key=3, color=darkorchid, style=bold, label="method methodReturn CommandLine.ParserResult<T> Build"];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_3  [key=2, style=dotted];
m0_1 -> m0_4  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_1 -> m0_1  [key=3, color=darkorchid, style=bold, label="method methodReturn CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>> "];
m0_1 -> m0_5  [key=2, style=dotted];
m0_2 -> m0_0  [key=0, style=bold, color=blue];
m0_37 -> m0_38  [key=0, style=solid];
m0_37 -> m0_67  [key=2, style=dotted];
m0_37 -> m0_48  [key=2, style=dotted];
m0_37 -> m0_114  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_57 -> m0_35  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Type conversionType"];
m0_57 -> m0_91  [key=3, color=darkorchid, style=bold, label="method methodReturn object ToEnum"];
m0_36 -> m0_37  [key=0, style=solid];
m0_36 -> m0_39  [key=0, style=solid];
m0_36 -> m0_66  [key=2, style=dotted];
m0_19 -> m0_20  [key=0, style=solid, color=red];
m0_19 -> m0_48  [key=2, style=dotted];
m0_19 -> m0_82  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_19 -> m0_36  [key=1, style=dashed, color=darkseagreen4, label=typeInfo];
m0_19 -> m0_39  [key=1, style=dashed, color=darkseagreen4, label=typeInfo];
m0_24 -> m0_25  [key=0, style=solid];
m0_24 -> m0_28  [key=0, style=solid, color=red];
m0_24 -> m0_52  [key=2, style=dotted];
m0_25 -> m0_26  [key=0, style=solid];
m0_25 -> m0_53  [key=2, style=dotted];
m0_25 -> m0_54  [key=2, style=dotted];
m0_25 -> m0_27  [key=1, style=dashed, color=red, label=preprocessorErrors];
m0_31 -> m0_32  [key=0, style=solid, color=green];
m0_31 -> m0_59  [key=2, style=dotted, color=red];
m0_31 -> m0_60  [key=2, style=dotted, color=red];
m0_31 -> m0_31  [key=1, style=dashed, color=red, label=pt];
m0_31 -> m0_103  [key=1, style=dashed, color=red, label="lambda expression"];
m0_31 -> m0_34  [key=1, style=dashed, color=red, label=optionSpecProps];
m0_31 -> m0_43  [key=1, style=dashed, color=red, label=optionSpecProps];
m0_31 -> m0_35  [key=2, style=dotted];
m0_31 -> m0_33  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_32 -> m0_33  [key=0, style=solid, color=green];
m0_32 -> m0_61  [key=2, style=dotted];
m0_32 -> m0_60  [key=2, style=dotted];
m0_32 -> m0_32  [key=1, style=dashed, color=darkseagreen4, label=pt];
m0_32 -> m0_107  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_32 -> m0_34  [key=1, style=dashed, color=darkseagreen4, label=valueSpecProps];
m0_32 -> m0_43  [key=1, style=dashed, color=darkseagreen4, label=valueSpecProps];
m0_32 -> m0_36  [key=2, style=dotted, color=green];
m0_32 -> m0_38  [key=1, style=dashed, color=green, label="lambda expression"];
m0_32 -> m0_40  [key=1, style=dashed, color=green, label="lambda expression"];
m0_33 -> m0_34  [key=0, style=solid, color=red];
m0_33 -> m0_62  [key=2, style=dotted, color=red];
m0_33 -> m0_63  [key=2, style=dotted, color=red];
m0_33 -> m0_64  [key=2, style=dotted, color=red];
m0_33 -> m0_33  [key=1, style=dashed, color=red, label=token];
m0_33 -> m0_110  [key=1, style=dashed, color=red, label="lambda expression"];
m0_33 -> m0_111  [key=1, style=dashed, color=red, label=token];
m0_33 -> m0_43  [key=1, style=dashed, color=red, label=missingValueErrors];
m0_33 -> m0_37  [key=2, style=dotted];
m0_20 -> m0_21  [key=0, style=solid, color=red];
m0_20 -> m0_49  [key=2, style=dotted, color=red];
m0_20 -> m0_86  [key=1, style=dashed, color=red, label="lambda expression"];
m0_20 -> m0_23  [key=1, style=dashed, color=red, label=specProps];
m0_20 -> m0_93  [key=1, style=dashed, color=red, label=specProps];
m0_20 -> m0_31  [key=1, style=dashed, color=red, label=specProps];
m0_20 -> m0_32  [key=1, style=dashed, color=red, label=specProps];
m0_20 -> m0_39  [key=1, style=dashed, color=red, label=specProps];
m0_22 -> m0_23  [key=0, style=solid];
m0_22 -> m0_50  [key=2, style=dotted];
m0_22 -> m0_51  [key=2, style=dotted];
m0_22 -> m0_28  [key=1, style=dashed, color=red, label=optionSpecs];
m0_22 -> m0_30  [key=1, style=dashed, color=red, label=optionSpecs];
m0_22 -> m0_100  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
m0_22 -> m0_33  [key=1, style=dashed, color=red, label=optionSpecs];
m0_27 -> m0_47  [key=0, style=solid, color=red];
m0_27 -> m0_55  [key=2, style=dotted, color=red];
m0_27 -> m0_56  [key=2, style=dotted, color=red];
m0_26 -> m0_27  [key=0, style=solid, color=red];
m0_26 -> m0_28  [key=0, style=solid, color=red];
m0_26 -> m0_52  [key=2, style=dotted];
m0_43 -> m0_44  [key=0, style=solid];
m0_43 -> m0_78  [key=2, style=dotted];
m0_43 -> m0_45  [key=1, style=dashed, color=darkseagreen4, label=allErrors];
m0_34 -> m0_35  [key=0, style=solid];
m0_34 -> m0_65  [key=2, style=dotted];
m0_34 -> m0_38  [key=1, style=dashed, color=darkseagreen4, label=specPropsWithValue];
m0_34 -> m0_40  [key=1, style=dashed, color=darkseagreen4, label=specPropsWithValue];
m0_34 -> m0_42  [key=1, style=dashed, color=darkseagreen4, label=specPropsWithValue];
m0_34 -> m0_4  [key=0, style=bold, color=blue];
m0_35 -> m0_36  [key=0, style=solid];
m0_35 -> m0_44  [key=0, style=solid, color=green];
m0_35 -> m0_52  [key=1, style=dashed, color=green, label="System.Type"];
m0_35 -> m0_63  [key=1, style=dashed, color=green, label="System.Globalization.CultureInfo"];
m0_35 -> m0_73  [key=1, style=dashed, color=green, label="System.Globalization.CultureInfo"];
m0_35 -> m0_53  [key=1, style=dashed, color=green, label="System.Type"];
m0_35 -> m0_45  [key=1, style=dashed, color=green, label="System.Type"];
m0_35 -> m0_46  [key=1, style=dashed, color=green, label=string];
m0_35 -> m0_60  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m0_35 -> m0_61  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m0_35 -> m0_68  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m0_35 -> m0_62  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m0_35 -> m0_82  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m0_35 -> m0_4  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Globalization.CultureInfo conversionCulture"];
m0_45 -> m0_47  [key=0, style=solid];
m0_45 -> m0_80  [key=2, style=dotted];
m0_45 -> m0_45  [key=3, color=green, style=bold, label="Local variable System.Func<string, object> makeType"];
m0_45 -> m0_46  [key=0, style=solid, color=green];
m0_45 -> m0_83  [key=1, style=dashed, color=green, label=string];
m0_46 -> m0_47  [key=0, style=solid, color=green];
m0_46 -> m0_81  [key=2, style=dotted];
m0_46 -> m0_48  [key=2, style=dotted, color=green];
m0_46 -> m0_49  [key=2, style=dotted, color=green];
m0_46 -> m0_50  [key=2, style=dotted, color=green];
m0_44 -> m0_45  [key=0, style=solid, color=green];
m0_44 -> m0_46  [key=0, style=solid];
m0_44 -> m0_79  [key=2, style=dotted];
m0_44 -> m0_1  [key=3, color=darkorchid, style=bold, label="Property variable string Copyright"];
m0_44 -> m0_44  [key=3, color=green, style=bold, label="Local variable System.Func<string, object> changeType"];
m0_44 -> m0_52  [key=1, style=dashed, color=green, label=string];
m0_44 -> m0_63  [key=1, style=dashed, color=green, label=string];
m0_44 -> m0_73  [key=1, style=dashed, color=green, label=string];
m0_44 -> m0_65  [key=1, style=dashed, color=green, label=string];
m0_44 -> m0_53  [key=1, style=dashed, color=green, label=string];
m0_47 -> m0_3  [key=0, style=bold, color=blue];
m0_47 -> m0_35  [key=0, style=bold, color=blue];
m0_106 -> m0_63  [key=1, style=dashed, color=green, label=string];
m0_106 -> m0_73  [key=1, style=dashed, color=green, label=string];
m0_106 -> m0_65  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_102 -> m0_21  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m0_148 -> m0_5  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_148 -> m0_12  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_148 -> m0_6  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_148 -> m0_16  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_149 -> m0_12  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m0_149 -> m0_16  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m0_150 -> m0_93  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Func<T>>"];
m0_151 -> m0_93  [key=1, style=dashed, color=darkseagreen4, label=specProps];
m0_152 -> m0_100  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_152 -> m0_111  [key=1, style=dashed, color=red, label="System.StringComparer"];
m0_153 -> m0_100  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
m0_154 -> m0_104  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m0_154 -> m0_108  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m0_154 -> m0_52  [key=1, style=dashed, color=green, label="System.Globalization.CultureInfo"];
m0_154 -> m0_63  [key=1, style=dashed, color=green, label="System.Globalization.CultureInfo"];
m0_154 -> m0_73  [key=1, style=dashed, color=green, label="System.Globalization.CultureInfo"];
m0_155 -> m0_111  [key=1, style=dashed, color=red, label=token];
}
