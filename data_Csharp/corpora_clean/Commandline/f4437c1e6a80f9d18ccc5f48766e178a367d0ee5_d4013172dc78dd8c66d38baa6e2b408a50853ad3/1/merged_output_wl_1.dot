digraph  {
n40 [label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>", span=""];
n41 [label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>", span=""];
n42 [label="System.StringComparer", span=""];
n43 [label="CommandLine.Core.SpecificationProperty", span=""];
n0 [cluster="CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>, System.StringComparer)", label="Entry CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>, System.StringComparer)", span="14-14"];
n1 [cluster="CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>, System.StringComparer)", label="var sequencesAndErrors = propertyTuples\r\n                .Select(pt =>\r\n                    options.FirstOrDefault(\r\n                            s =>\r\n                            s.Key.MatchName(((OptionSpecification)pt.Specification).ShortName, ((OptionSpecification)pt.Specification).LongName, comparer))\r\n                               .ToMaybe()\r\n                               .MapMaybe(sequence =>\r\n                                    converter(sequence.Value, pt.Property.PropertyType, pt.Specification.TargetType != TargetType.Sequence)\r\n                                    .MapMaybe(converted =>\r\n                                            Tuple.Create(\r\n                                                pt.WithValue(Maybe.Just(converted)),\r\n                                                Maybe.Nothing<Error>()),\r\n                                            Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                                                pt,\r\n                                                Maybe.Just<Error>(new BadFormatConversionError(((OptionSpecification)pt.Specification).FromOptionSpecification())))),\r\n                                Tuple.Create(pt, Maybe.Nothing<Error>()))\r\n                )", span="20-36"];
n8 [cluster="lambda expression", label="options.FirstOrDefault(\r\n                            s =>\r\n                            s.Key.MatchName(((OptionSpecification)pt.Specification).ShortName, ((OptionSpecification)pt.Specification).LongName, comparer))\r\n                               .ToMaybe()\r\n                               .MapMaybe(sequence =>\r\n                                    converter(sequence.Value, pt.Property.PropertyType, pt.Specification.TargetType != TargetType.Sequence)\r\n                                    .MapMaybe(converted =>\r\n                                            Tuple.Create(\r\n                                                pt.WithValue(Maybe.Just(converted)),\r\n                                                Maybe.Nothing<Error>()),\r\n                                            Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                                                pt,\r\n                                                Maybe.Just<Error>(new BadFormatConversionError(((OptionSpecification)pt.Specification).FromOptionSpecification())))),\r\n                                Tuple.Create(pt, Maybe.Nothing<Error>()))", span="22-35"];
n16 [cluster="lambda expression", label="s.Key.MatchName(((OptionSpecification)pt.Specification).ShortName, ((OptionSpecification)pt.Specification).LongName, comparer)", span="24-24"];
n20 [cluster="lambda expression", label="converter(sequence.Value, pt.Property.PropertyType, pt.Specification.TargetType != TargetType.Sequence)\r\n                                    .MapMaybe(converted =>\r\n                                            Tuple.Create(\r\n                                                pt.WithValue(Maybe.Just(converted)),\r\n                                                Maybe.Nothing<Error>()),\r\n                                            Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                                                pt,\r\n                                                Maybe.Just<Error>(new BadFormatConversionError(((OptionSpecification)pt.Specification).FromOptionSpecification()))))", span="27-34"];
n2 [cluster="CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>, System.StringComparer)", label="return Result.Succeed(\r\n                sequencesAndErrors.Select(se => se.Item1),\r\n                sequencesAndErrors.Select(se => se.Item2).OfType<Just<Error>>().Select(se => se.Value));", span="37-39"];
n4 [cluster="Unk.Select", label="Entry Unk.Select", span=""];
n7 [cluster="lambda expression", label="Entry lambda expression", span="21-35"];
n3 [cluster="CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>, System.StringComparer)", label="Exit CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>, System.StringComparer)", span="14-14"];
n5 [cluster="Unk.>", label="Entry Unk.>", span=""];
n6 [cluster="Unk.Succeed", label="Entry Unk.Succeed", span=""];
n31 [cluster="lambda expression", label="Entry lambda expression", span="38-38"];
n34 [cluster="lambda expression", label="Entry lambda expression", span="39-39"];
n37 [cluster="lambda expression", label="Entry lambda expression", span="39-39"];
n27 [cluster="lambda expression", label="Tuple.Create(\r\n                                                pt.WithValue(Maybe.Just(converted)),\r\n                                                Maybe.Nothing<Error>())", span="29-31"];
n9 [cluster="lambda expression", label="Exit lambda expression", span="21-35"];
n10 [cluster="Unk.FirstOrDefault", label="Entry Unk.FirstOrDefault", span=""];
n11 [cluster="Unk.ToMaybe", label="Entry Unk.ToMaybe", span=""];
n12 [cluster="CSharpx.Maybe.Nothing<T>()", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
n13 [cluster="System.Tuple.Create<T1, T2>(T1, T2)", label="Entry System.Tuple.Create<T1, T2>(T1, T2)", span="0-0"];
n14 [cluster="Unk.MapMaybe", label="Entry Unk.MapMaybe", span=""];
n15 [cluster="lambda expression", label="Entry lambda expression", span="23-24"];
n19 [cluster="lambda expression", label="Entry lambda expression", span="26-34"];
n17 [cluster="lambda expression", label="Exit lambda expression", span="23-24"];
n18 [cluster="string.MatchName(string, string, System.StringComparer)", label="Entry string.MatchName(string, string, System.StringComparer)", span="8-8"];
n21 [cluster="lambda expression", label="Exit lambda expression", span="26-34"];
n22 [cluster="Unk.converter", label="Entry Unk.converter", span=""];
n23 [cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="349-349"];
n24 [cluster="CommandLine.Core.OptionSpecification.FromOptionSpecification()", label="Entry CommandLine.Core.OptionSpecification.FromOptionSpecification()", span="15-15"];
n25 [cluster="CSharpx.Maybe.Just<T>(T)", label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124"];
n26 [cluster="lambda expression", label="Entry lambda expression", span="28-31"];
n28 [cluster="lambda expression", label="Exit lambda expression", span="28-31"];
n29 [cluster="Unk.Just", label="Entry Unk.Just", span=""];
n30 [cluster="Unk.WithValue", label="Entry Unk.WithValue", span=""];
n32 [cluster="lambda expression", label="se.Item1", span="38-38"];
n33 [cluster="lambda expression", label="Exit lambda expression", span="38-38"];
n35 [cluster="lambda expression", label="se.Item2", span="39-39"];
n36 [cluster="lambda expression", label="Exit lambda expression", span="39-39"];
n38 [cluster="lambda expression", label="se.Value", span="39-39"];
n39 [cluster="lambda expression", label="Exit lambda expression", span="39-39"];
m0_4 [cluster="System.Exception.GetType()", file="ExceptionExtensions.cs", label="Entry System.Exception.GetType()", span="0-0"];
m0_5 [cluster="System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", file="ExceptionExtensions.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", span="0-0"];
m0_0 [cluster="CommandLine.Infrastructure.ExceptionExtensions.RethrowWhenAbsentIn(System.Exception, System.Collections.Generic.IEnumerable<System.Type>)", file="ExceptionExtensions.cs", label="Entry CommandLine.Infrastructure.ExceptionExtensions.RethrowWhenAbsentIn(System.Exception, System.Collections.Generic.IEnumerable<System.Type>)", span="11-11"];
m0_1 [cluster="CommandLine.Infrastructure.ExceptionExtensions.RethrowWhenAbsentIn(System.Exception, System.Collections.Generic.IEnumerable<System.Type>)", color=green, community=0, file="ExceptionExtensions.cs", label="0: !validExceptions.Contains(exception.GetType())", span="13-13"];
m0_2 [cluster="CommandLine.Infrastructure.ExceptionExtensions.RethrowWhenAbsentIn(System.Exception, System.Collections.Generic.IEnumerable<System.Type>)", color=green, community=0, file="ExceptionExtensions.cs", label="0: throw exception;", span="15-15"];
m0_3 [cluster="CommandLine.Infrastructure.ExceptionExtensions.RethrowWhenAbsentIn(System.Exception, System.Collections.Generic.IEnumerable<System.Type>)", file="ExceptionExtensions.cs", label="Exit CommandLine.Infrastructure.ExceptionExtensions.RethrowWhenAbsentIn(System.Exception, System.Collections.Generic.IEnumerable<System.Type>)", span="11-11"];
n40 -> n8  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>", style=dashed];
n41 -> n8  [color=darkseagreen4, key=1, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>", style=dashed];
n41 -> n20  [color=darkseagreen4, key=1, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>", style=dashed];
n42 -> n8  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n42 -> n16  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n43 -> n16  [color=darkseagreen4, key=1, label="CommandLine.Core.SpecificationProperty", style=dashed];
n43 -> n20  [color=darkseagreen4, key=1, label="CommandLine.Core.SpecificationProperty", style=dashed];
n43 -> n27  [color=darkseagreen4, key=1, label="CommandLine.Core.SpecificationProperty", style=dashed];
n0 -> n1  [key=0, style=solid];
n0 -> n8  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>", style=dashed];
n0 -> n16  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n0 -> n20  [color=darkseagreen4, key=1, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>", style=dashed];
n1 -> n2  [key=0, style=solid];
n1 -> n4  [key=2, style=dotted];
n1 -> n7  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n1 -> n1  [color=darkorchid, key=3, label="Property variable CSharpx.Either2Type Tag", style=bold];
n8 -> n9  [key=0, style=solid];
n8 -> n10  [key=2, style=dotted];
n8 -> n11  [key=2, style=dotted];
n8 -> n12  [key=2, style=dotted];
n8 -> n13  [key=2, style=dotted];
n8 -> n14  [key=2, style=dotted];
n8 -> n15  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n8 -> n19  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n16 -> n17  [key=0, style=solid];
n16 -> n18  [key=2, style=dotted];
n16 -> n16  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
n20 -> n21  [key=0, style=solid];
n20 -> n22  [key=2, style=dotted];
n20 -> n23  [key=2, style=dotted];
n20 -> n24  [key=2, style=dotted];
n20 -> n25  [key=2, style=dotted];
n20 -> n13  [key=2, style=dotted];
n20 -> n14  [key=2, style=dotted];
n20 -> n26  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n2 -> n3  [key=0, style=solid];
n2 -> n4  [key=2, style=dotted];
n2 -> n5  [key=2, style=dotted];
n2 -> n6  [key=2, style=dotted];
n2 -> n31  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n2 -> n34  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n2 -> n37  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n7 -> n8  [key=0, style=solid];
n7 -> n16  [color=darkseagreen4, key=1, label="CommandLine.Core.SpecificationProperty", style=dashed];
n7 -> n20  [color=darkseagreen4, key=1, label="CommandLine.Core.SpecificationProperty", style=dashed];
n7 -> n27  [color=darkseagreen4, key=1, label="CommandLine.Core.SpecificationProperty", style=dashed];
n3 -> n0  [color=blue, key=0, style=bold];
n31 -> n32  [key=0, style=solid];
n34 -> n35  [key=0, style=solid];
n37 -> n38  [key=0, style=solid];
n27 -> n28  [key=0, style=solid];
n27 -> n29  [key=2, style=dotted];
n27 -> n30  [key=2, style=dotted];
n27 -> n12  [key=2, style=dotted];
n27 -> n13  [key=2, style=dotted];
n9 -> n7  [color=blue, key=0, style=bold];
n15 -> n16  [key=0, style=solid];
n19 -> n20  [key=0, style=solid];
n17 -> n15  [color=blue, key=0, style=bold];
n21 -> n19  [color=blue, key=0, style=bold];
n26 -> n27  [key=0, style=solid];
n28 -> n26  [color=blue, key=0, style=bold];
n32 -> n33  [key=0, style=solid];
n33 -> n31  [color=blue, key=0, style=bold];
n35 -> n36  [key=0, style=solid];
n36 -> n34  [color=blue, key=0, style=bold];
n38 -> n39  [key=0, style=solid];
n39 -> n37  [color=blue, key=0, style=bold];
m0_0 -> m0_1  [color=green, key=0, style=solid];
m0_0 -> m0_2  [color=green, key=1, label="System.Exception", style=dashed];
m0_1 -> m0_2  [color=green, key=0, style=solid];
m0_1 -> m0_3  [color=green, key=0, style=solid];
m0_1 -> m0_4  [color=green, key=2, style=dotted];
m0_1 -> m0_5  [color=green, key=2, style=dotted];
m0_2 -> m0_3  [color=green, key=0, style=solid];
m0_3 -> m0_0  [color=blue, key=0, style=bold];
}
