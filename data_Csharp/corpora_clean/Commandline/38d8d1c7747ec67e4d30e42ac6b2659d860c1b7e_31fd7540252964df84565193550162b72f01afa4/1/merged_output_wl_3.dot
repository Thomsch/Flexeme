digraph  {
m2_0 [cluster="CommandLine.Internal.Pair<TLeft, TRight>.Pair(TLeft, TRight)", file="ScalarTests.cs", label="Entry CommandLine.Internal.Pair<TLeft, TRight>.Pair(TLeft, TRight)", span="37-37"];
m2_1 [cluster="CommandLine.Internal.Pair<TLeft, TRight>.Pair(TLeft, TRight)", file="ScalarTests.cs", label="_left = left", span="39-39"];
m2_2 [cluster="CommandLine.Internal.Pair<TLeft, TRight>.Pair(TLeft, TRight)", file="ScalarTests.cs", label="_right = right", span="40-40"];
m2_3 [cluster="CommandLine.Internal.Pair<TLeft, TRight>.Pair(TLeft, TRight)", file="ScalarTests.cs", label="Exit CommandLine.Internal.Pair<TLeft, TRight>.Pair(TLeft, TRight)", span="37-37"];
m2_10 [cluster="CommandLine.Internal.Pair<TLeft, TRight>.Equals(object)", file="ScalarTests.cs", label="Entry CommandLine.Internal.Pair<TLeft, TRight>.Equals(object)", span="61-61"];
m2_11 [cluster="CommandLine.Internal.Pair<TLeft, TRight>.Equals(object)", file="ScalarTests.cs", label="var other = obj as Pair<TLeft, TRight>", span="63-63"];
m2_12 [cluster="CommandLine.Internal.Pair<TLeft, TRight>.Equals(object)", file="ScalarTests.cs", label="other == null", span="65-65"];
m2_14 [cluster="CommandLine.Internal.Pair<TLeft, TRight>.Equals(object)", file="ScalarTests.cs", label="return Equals(_left, other._left) && Equals(_right, other._right);", span="69-69"];
m2_13 [cluster="CommandLine.Internal.Pair<TLeft, TRight>.Equals(object)", file="ScalarTests.cs", label="return false;", span="67-67"];
m2_15 [cluster="CommandLine.Internal.Pair<TLeft, TRight>.Equals(object)", file="ScalarTests.cs", label="Exit CommandLine.Internal.Pair<TLeft, TRight>.Equals(object)", span="61-61"];
m2_4 [cluster="CommandLine.Internal.Pair<TLeft, TRight>.GetHashCode()", file="ScalarTests.cs", label="Entry CommandLine.Internal.Pair<TLeft, TRight>.GetHashCode()", span="53-53"];
m2_5 [cluster="CommandLine.Internal.Pair<TLeft, TRight>.GetHashCode()", file="ScalarTests.cs", label="int leftHash = (_left == null ? 0 : _left.GetHashCode())", span="55-55"];
m2_6 [cluster="CommandLine.Internal.Pair<TLeft, TRight>.GetHashCode()", file="ScalarTests.cs", label="int rightHash = (_right == null ? 0 : _right.GetHashCode())", span="56-56"];
m2_7 [cluster="CommandLine.Internal.Pair<TLeft, TRight>.GetHashCode()", file="ScalarTests.cs", label="return leftHash ^ rightHash;", span="58-58"];
m2_8 [cluster="CommandLine.Internal.Pair<TLeft, TRight>.GetHashCode()", file="ScalarTests.cs", label="Exit CommandLine.Internal.Pair<TLeft, TRight>.GetHashCode()", span="53-53"];
m2_16 [cluster="object.Equals(object, object)", file="ScalarTests.cs", label="Entry object.Equals(object, object)", span="0-0"];
m2_9 [cluster="object.GetHashCode()", file="ScalarTests.cs", label="Entry object.GetHashCode()", span="0-0"];
m2_17 [file="ScalarTests.cs", label="CommandLine.Internal.Pair<TLeft, TRight>", span=""];
m4_10 [cluster="System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", file="SwitchTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", span="0-0"];
m4_14 [cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values()", file="SwitchTests.cs", label="Entry CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values()", span="28-28"];
m4_15 [cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values()", file="SwitchTests.cs", label="var expected = new [] { Token.Name(''x'') }", span="30-30"];
m4_16 [cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values()", file="SwitchTests.cs", label="var result = Switch.Partition(\r\n                new []\r\n                    {\r\n                        Token.Name(''str''), Token.Value(''strvalue''), Token.Value(''freevalue''),\r\n                        Token.Name(''x''), Token.Value(''freevalue2'')\r\n                    },\r\n                name =>\r\n                    new[] { ''x'', ''switch'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TargetType.Switch, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>())", span="32-41"];
m4_17 [cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values()", color=red, community=0, file="SwitchTests.cs", label="0: expected.ShouldAllBeEquivalentTo(result)", span="43-43"];
m4_18 [cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values()", file="SwitchTests.cs", label="Exit CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values()", span="28-28"];
m4_5 [cluster="CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="SwitchTests.cs", label="Entry CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11"];
m4_13 [cluster="CSharpx.Maybe.Just<T>(T)", file="SwitchTests.cs", label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124"];
m4_6 [cluster="Unk.ShouldAllBeEquivalentTo", file="SwitchTests.cs", label="Entry Unk.ShouldAllBeEquivalentTo", span=""];
m4_21 [cluster="lambda expression", file="SwitchTests.cs", label="Entry lambda expression", span="38-41"];
m4_7 [cluster="lambda expression", file="SwitchTests.cs", label="Entry lambda expression", span="19-22"];
m4_8 [cluster="lambda expression", file="SwitchTests.cs", label="new[] { ''x'', ''switch'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TargetType.Switch, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>()", span="20-22"];
m4_9 [cluster="lambda expression", file="SwitchTests.cs", label="Exit lambda expression", span="19-22"];
m4_22 [cluster="lambda expression", file="SwitchTests.cs", label="new[] { ''x'', ''switch'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TargetType.Switch, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>()", span="39-41"];
m4_23 [cluster="lambda expression", file="SwitchTests.cs", label="Exit lambda expression", span="38-41"];
m4_19 [cluster="CommandLine.Core.Token.Name(string)", file="SwitchTests.cs", label="Entry CommandLine.Core.Token.Name(string)", span="19-19"];
m4_11 [cluster="CSharpx.Maybe.Nothing<T>()", file="SwitchTests.cs", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
m4_12 [cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CommandLine.Core.TypeDescriptor)", file="SwitchTests.cs", label="Entry CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CommandLine.Core.TypeDescriptor)", span="35-35"];
m4_20 [cluster="CommandLine.Core.Token.Value(string)", file="SwitchTests.cs", label="Entry CommandLine.Core.Token.Value(string)", span="24-24"];
m4_0 [cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values_from_empty_token_sequence()", file="SwitchTests.cs", label="Entry CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values_from_empty_token_sequence()", span="13-13"];
m4_1 [cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values_from_empty_token_sequence()", file="SwitchTests.cs", label="var expected = new Token[] { }", span="15-15"];
m4_2 [cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values_from_empty_token_sequence()", file="SwitchTests.cs", label="var result = Switch.Partition(\r\n                new Token[] { },\r\n                name =>\r\n                    new[] { ''x'', ''switch'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TargetType.Switch, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>())", span="17-22"];
m4_3 [cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values_from_empty_token_sequence()", color=red, community=0, file="SwitchTests.cs", label="0: expected.ShouldAllBeEquivalentTo(result)", span="24-24"];
m4_4 [cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values_from_empty_token_sequence()", file="SwitchTests.cs", label="Exit CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values_from_empty_token_sequence()", span="13-13"];
m5_11 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="TokenizerTests.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m5_21 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", span="39-39"];
m5_22 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TokenizerTests.cs", label="var expectedTokens = new[] { Token.Name(''x''), Token.Name(''string-seq''),\r\n                Token.Value(''aaa''), Token.Value(''bb''),  Token.Value(''cccc''), Token.Name(''switch'') }", span="42-43"];
m5_23 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TokenizerTests.cs", label="var specs = new[] { new OptionSpecification(string.Empty, ''string-seq'',\r\n                false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), ',', null, string.Empty, string.Empty, new List<string>(), typeof(IEnumerable<string>), TargetType.Sequence)}", span="44-45"];
m5_25 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", color=red, community=0, file="TokenizerTests.cs", label="0: Assert.True(expectedTokens.SequenceEqual(((Ok<IEnumerable<Token>, Error>)result).Value.Success))", span="57-57"];
m5_24 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TokenizerTests.cs", label="var result =\r\n                Tokenizer.ExplodeOptionList(\r\n                    Result.Succeed(\r\n                        Enumerable.Empty<Token>().Concat(new[] { Token.Name(''x''),\r\n                            Token.Name(''string-seq''), Token.Value(''aaa,bb,cccc''), Token.Name(''switch'') }),\r\n                        Enumerable.Empty<Error>()),\r\n                        optionName => NameLookup.HavingSeparator(optionName, specs, StringComparer.InvariantCulture))", span="48-54"];
m5_26 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", span="39-39"];
m5_20 [cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TokenizerTests.cs", label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16"];
m5_8 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", file="TokenizerTests.cs", label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", span="16-16"];
m5_0 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", span="15-15"];
m5_1 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="TokenizerTests.cs", label="var expectedTokens = new[] { Token.Name(''i''), Token.Value(''10''), Token.Name(''string-seq''),\r\n                Token.Value(''aaa''), Token.Value(''bb''),  Token.Value(''cccc''), Token.Name(''switch'') }", span="18-19"];
m5_2 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="TokenizerTests.cs", label="var specs = new[] { new OptionSpecification(string.Empty, ''string-seq'',\r\n                false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), ',', null, string.Empty, string.Empty, new List<string>(), typeof(IEnumerable<string>), TargetType.Sequence)}", span="20-21"];
m5_4 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", color=red, community=0, file="TokenizerTests.cs", label="0: Assert.True(expectedTokens.SequenceEqual(((Ok<IEnumerable<Token>, Error>)result).Value.Success))", span="33-33"];
m5_3 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="TokenizerTests.cs", label="var result =\r\n                Tokenizer.ExplodeOptionList(\r\n                    Result.Succeed(\r\n                        Enumerable.Empty<Token>().Concat(new[] { Token.Name(''i''), Token.Value(''10''),\r\n                            Token.Name(''string-seq''), Token.Value(''aaa,bb,cccc''), Token.Name(''switch'') }),\r\n                        Enumerable.Empty<Error>()),\r\n                        optionName => NameLookup.HavingSeparator(optionName, specs, StringComparer.InvariantCulture))", span="24-30"];
m5_5 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", span="15-15"];
m5_16 [cluster="Unk.True", file="TokenizerTests.cs", label="Entry Unk.True", span=""];
m5_27 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="54-54"];
m5_18 [cluster="lambda expression", file="TokenizerTests.cs", label="NameLookup.HavingSeparator(optionName, specs, StringComparer.InvariantCulture)", span="30-30"];
m5_17 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="30-30"];
m5_19 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="30-30"];
m5_28 [cluster="lambda expression", file="TokenizerTests.cs", label="NameLookup.HavingSeparator(optionName, specs, StringComparer.InvariantCulture)", span="54-54"];
m5_29 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="54-54"];
m5_14 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="TokenizerTests.cs", label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", span="46-46"];
m5_6 [cluster="CommandLine.Core.Token.Name(string)", file="TokenizerTests.cs", label="Entry CommandLine.Core.Token.Name(string)", span="19-19"];
m5_9 [cluster="CSharpx.Maybe.Nothing<T>()", file="TokenizerTests.cs", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
m5_15 [cluster="Unk.SequenceEqual", file="TokenizerTests.cs", label="Entry Unk.SequenceEqual", span=""];
m5_12 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="TokenizerTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
m5_7 [cluster="CommandLine.Core.Token.Value(string)", file="TokenizerTests.cs", label="Entry CommandLine.Core.Token.Value(string)", span="24-24"];
m5_13 [cluster="RailwaySharp.ErrorHandling.Result.Succeed<TSuccess, TMessage>(TSuccess, System.Collections.Generic.IEnumerable<TMessage>)", file="TokenizerTests.cs", label="Entry RailwaySharp.ErrorHandling.Result.Succeed<TSuccess, TMessage>(TSuccess, System.Collections.Generic.IEnumerable<TMessage>)", span="202-202"];
m5_10 [cluster="System.Collections.Generic.List<T>.List()", file="TokenizerTests.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m5_30 [file="TokenizerTests.cs", label=specs, span=""];
m5_31 [file="TokenizerTests.cs", label=specs, span=""];
m2_0 -> m2_1  [key=0, style=solid];
m2_0 -> m2_2  [color=darkseagreen4, key=1, label=TRight, style=dashed];
m2_1 -> m2_2  [key=0, style=solid];
m2_2 -> m2_3  [key=0, style=solid];
m2_3 -> m2_0  [color=blue, key=0, style=bold];
m2_10 -> m2_11  [key=0, style=solid];
m2_11 -> m2_12  [key=0, style=solid];
m2_11 -> m2_14  [color=darkseagreen4, key=1, label=other, style=dashed];
m2_12 -> m2_13  [key=0, style=solid];
m2_12 -> m2_14  [key=0, style=solid];
m2_14 -> m2_15  [key=0, style=solid];
m2_14 -> m2_16  [key=2, style=dotted];
m2_13 -> m2_15  [key=0, style=solid];
m2_15 -> m2_10  [color=blue, key=0, style=bold];
m2_4 -> m2_5  [key=0, style=solid];
m2_5 -> m2_6  [key=0, style=solid];
m2_5 -> m2_9  [key=2, style=dotted];
m2_5 -> m2_7  [color=darkseagreen4, key=1, label=leftHash, style=dashed];
m2_6 -> m2_7  [key=0, style=solid];
m2_6 -> m2_9  [key=2, style=dotted];
m2_7 -> m2_8  [key=0, style=solid];
m2_8 -> m2_4  [color=blue, key=0, style=bold];
m2_17 -> m2_1  [color=darkseagreen4, key=1, label="CommandLine.Internal.Pair<TLeft, TRight>", style=dashed];
m2_17 -> m2_2  [color=darkseagreen4, key=1, label="CommandLine.Internal.Pair<TLeft, TRight>", style=dashed];
m2_17 -> m2_5  [color=darkseagreen4, key=1, label="CommandLine.Internal.Pair<TLeft, TRight>", style=dashed];
m2_17 -> m2_6  [color=darkseagreen4, key=1, label="CommandLine.Internal.Pair<TLeft, TRight>", style=dashed];
m2_17 -> m2_14  [color=darkseagreen4, key=1, label="CommandLine.Internal.Pair<TLeft, TRight>", style=dashed];
m4_14 -> m4_15  [key=0, style=solid];
m4_15 -> m4_16  [key=0, style=solid];
m4_15 -> m4_19  [key=2, style=dotted];
m4_15 -> m4_17  [color=red, key=1, label=expected, style=dashed];
m4_16 -> m4_17  [color=red, key=0, style=solid];
m4_16 -> m4_19  [key=2, style=dotted];
m4_16 -> m4_20  [key=2, style=dotted];
m4_16 -> m4_5  [key=2, style=dotted];
m4_16 -> m4_21  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_17 -> m4_18  [color=red, key=0, style=solid];
m4_17 -> m4_6  [color=red, key=2, style=dotted];
m4_18 -> m4_14  [color=blue, key=0, style=bold];
m4_21 -> m4_22  [key=0, style=solid];
m4_7 -> m4_8  [key=0, style=solid];
m4_8 -> m4_9  [key=0, style=solid];
m4_8 -> m4_10  [key=2, style=dotted];
m4_8 -> m4_11  [key=2, style=dotted];
m4_8 -> m4_12  [key=2, style=dotted];
m4_8 -> m4_13  [key=2, style=dotted];
m4_9 -> m4_7  [color=blue, key=0, style=bold];
m4_22 -> m4_23  [key=0, style=solid];
m4_22 -> m4_10  [key=2, style=dotted];
m4_22 -> m4_11  [key=2, style=dotted];
m4_22 -> m4_12  [key=2, style=dotted];
m4_22 -> m4_13  [key=2, style=dotted];
m4_23 -> m4_21  [color=blue, key=0, style=bold];
m4_0 -> m4_1  [key=0, style=solid];
m4_1 -> m4_2  [key=0, style=solid];
m4_1 -> m4_3  [color=red, key=1, label=expected, style=dashed];
m4_2 -> m4_3  [color=red, key=0, style=solid];
m4_2 -> m4_5  [key=2, style=dotted];
m4_2 -> m4_7  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_3 -> m4_4  [color=red, key=0, style=solid];
m4_3 -> m4_6  [color=red, key=2, style=dotted];
m4_4 -> m4_0  [color=blue, key=0, style=bold];
m5_21 -> m5_22  [key=0, style=solid];
m5_22 -> m5_23  [key=0, style=solid];
m5_22 -> m5_6  [key=2, style=dotted];
m5_22 -> m5_7  [key=2, style=dotted];
m5_22 -> m5_25  [color=red, key=1, label=expectedTokens, style=dashed];
m5_23 -> m5_24  [key=0, style=solid];
m5_23 -> m5_8  [key=2, style=dotted];
m5_23 -> m5_9  [key=2, style=dotted];
m5_23 -> m5_10  [key=2, style=dotted];
m5_23 -> m5_28  [color=darkseagreen4, key=1, label=specs, style=dashed];
m5_25 -> m5_26  [color=red, key=0, style=solid];
m5_25 -> m5_15  [color=red, key=2, style=dotted];
m5_25 -> m5_16  [color=red, key=2, style=dotted];
m5_24 -> m5_25  [color=red, key=0, style=solid];
m5_24 -> m5_11  [key=2, style=dotted];
m5_24 -> m5_6  [key=2, style=dotted];
m5_24 -> m5_7  [key=2, style=dotted];
m5_24 -> m5_12  [key=2, style=dotted];
m5_24 -> m5_13  [key=2, style=dotted];
m5_24 -> m5_14  [key=2, style=dotted];
m5_24 -> m5_27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_26 -> m5_21  [color=blue, key=0, style=bold];
m5_0 -> m5_1  [key=0, style=solid];
m5_1 -> m5_2  [key=0, style=solid];
m5_1 -> m5_6  [key=2, style=dotted];
m5_1 -> m5_7  [key=2, style=dotted];
m5_1 -> m5_4  [color=red, key=1, label=expectedTokens, style=dashed];
m5_2 -> m5_3  [key=0, style=solid];
m5_2 -> m5_8  [key=2, style=dotted];
m5_2 -> m5_9  [key=2, style=dotted];
m5_2 -> m5_10  [key=2, style=dotted];
m5_2 -> m5_18  [color=darkseagreen4, key=1, label=specs, style=dashed];
m5_4 -> m5_5  [color=red, key=0, style=solid];
m5_4 -> m5_15  [color=red, key=2, style=dotted];
m5_4 -> m5_16  [color=red, key=2, style=dotted];
m5_3 -> m5_4  [color=red, key=0, style=solid];
m5_3 -> m5_11  [key=2, style=dotted];
m5_3 -> m5_6  [key=2, style=dotted];
m5_3 -> m5_7  [key=2, style=dotted];
m5_3 -> m5_12  [key=2, style=dotted];
m5_3 -> m5_13  [key=2, style=dotted];
m5_3 -> m5_14  [key=2, style=dotted];
m5_3 -> m5_17  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_5 -> m5_0  [color=blue, key=0, style=bold];
m5_27 -> m5_28  [key=0, style=solid];
m5_18 -> m5_19  [key=0, style=solid];
m5_18 -> m5_20  [key=2, style=dotted];
m5_17 -> m5_18  [key=0, style=solid];
m5_19 -> m5_17  [color=blue, key=0, style=bold];
m5_28 -> m5_29  [key=0, style=solid];
m5_28 -> m5_20  [key=2, style=dotted];
m5_29 -> m5_27  [color=blue, key=0, style=bold];
m5_30 -> m5_18  [color=darkseagreen4, key=1, label=specs, style=dashed];
m5_31 -> m5_28  [color=darkseagreen4, key=1, label=specs, style=dashed];
}
