digraph  {
m0_70 [cluster="Unk.SingleOrDefault", file="NameLookup.cs", label="Entry Unk.SingleOrDefault", span=""];
m0_32 [cluster="CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", file="NameLookup.cs", label="Entry CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", span="101-101"];
m0_81 [cluster="CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", file="NameLookup.cs", label="return new NotParsed<object>(new NullInstance(), types, errors);", span="103-103"];
m0_82 [cluster="CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", file="NameLookup.cs", label="Exit CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", span="101-101"];
m0_30 [cluster="System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", file="NameLookup.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", span="57-57"];
m0_49 [cluster="Unk.>", file="NameLookup.cs", label="Entry Unk.>", span=""];
m0_53 [cluster="Unk.MakeNotParsed", file="NameLookup.cs", label="Entry Unk.MakeNotParsed", span=""];
m0_48 [cluster="Unk.Any", file="NameLookup.cs", label="Entry Unk.Any", span=""];
m0_18 [cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="NameLookup.cs", label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16"];
m0_35 [cluster="System.Func<T, TResult>.Invoke(T)", file="NameLookup.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m0_83 [cluster="CommandLine.NotParsed<T>.NotParsed(T, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="NameLookup.cs", label="Entry CommandLine.NotParsed<T>.NotParsed(T, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="136-136"];
m0_52 [cluster="CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", file="NameLookup.cs", label="Entry CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", span="357-357"];
m0_72 [cluster="CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", file="NameLookup.cs", label="Entry CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", span="383-383"];
m0_3 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="NameLookup.cs", label="Entry CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="32-32"];
m0_19 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="NameLookup.cs", label="arguments.Empty()", span="39-39"];
m0_20 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="NameLookup.cs", label="return MakeNotParsed(types, new NoVerbSelectedError());", span="41-41"];
m0_21 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="NameLookup.cs", label="var firstArg = arguments.First()", span="44-44"];
m0_22 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="NameLookup.cs", label="Func<string, bool> preprocCompare = command =>\r\n                    nameComparer.Equals(command, firstArg) ||\r\n                    nameComparer.Equals(string.Concat(''--'', command), firstArg)", span="46-48"];
m0_23 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="NameLookup.cs", label="var verbs = Verb.SelectFromTypes(types)", span="50-50"];
m0_25 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="NameLookup.cs", label="return MakeNotParsed(types,\r\n                    MakeHelpVerbRequestedError(verbs,\r\n                        arguments.Skip(1).SingleOrDefault() ?? string.Empty, nameComparer));", span="54-56"];
m0_27 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="NameLookup.cs", label="return MakeNotParsed(types, new VersionRequestedError());", span="61-61"];
m0_28 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="NameLookup.cs", label="return MatchVerb(tokenizer, verbs, arguments, nameComparer, parsingCulture);", span="64-64"];
m0_24 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="NameLookup.cs", label="preprocCompare(''help'')", span="52-52"];
m0_26 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="NameLookup.cs", label="preprocCompare(''version'')", span="59-59"];
m0_29 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="NameLookup.cs", label="Exit CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="32-32"];
m0_14 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="NameLookup.cs", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
m0_39 [cluster="CommandLine.VersionRequestedError.VersionRequestedError()", file="NameLookup.cs", label="Entry CommandLine.VersionRequestedError.VersionRequestedError()", span="432-432"];
m0_44 [cluster="System.StringComparer.Equals(string, string)", file="NameLookup.cs", label="Entry System.StringComparer.Equals(string, string)", span="0-0"];
m0_60 [cluster="Unk.Single", file="NameLookup.cs", label="Entry Unk.Single", span=""];
m0_71 [cluster="Unk.ToMaybe", file="NameLookup.cs", label="Entry Unk.ToMaybe", span=""];
m0_45 [cluster="string.Concat(string, string)", file="NameLookup.cs", label="Entry string.Concat(string, string)", span="0-0"];
m0_77 [cluster="lambda expression", file="NameLookup.cs", label="Entry lambda expression", span="96-96"];
m0_5 [cluster="lambda expression", file="NameLookup.cs", label="var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer))", span="22-22"];
m0_12 [cluster="lambda expression", file="NameLookup.cs", label="NameLookup.Contains(name, optionSpecs, nameComparer)", span="22-22"];
m0_6 [cluster="lambda expression", file="NameLookup.cs", label="var explodedTokens = Tokenizer.ExplodeOptionList(tokens, name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer))", span="23-23"];
m0_16 [cluster="lambda expression", file="NameLookup.cs", label="NameLookup.HavingSeparator(name, optionSpecs, nameComparer)", span="23-23"];
m0_4 [cluster="lambda expression", file="NameLookup.cs", label="Entry lambda expression", span="20-25"];
m0_11 [cluster="lambda expression", file="NameLookup.cs", label="Entry lambda expression", span="22-22"];
m0_7 [cluster="lambda expression", file="NameLookup.cs", label="return explodedTokens;", span="24-24"];
m0_15 [cluster="lambda expression", file="NameLookup.cs", label="Entry lambda expression", span="23-23"];
m0_8 [cluster="lambda expression", file="NameLookup.cs", label="Exit lambda expression", span="20-25"];
m0_13 [cluster="lambda expression", file="NameLookup.cs", label="Exit lambda expression", span="22-22"];
m0_17 [cluster="lambda expression", file="NameLookup.cs", label="Exit lambda expression", span="23-23"];
m0_42 [cluster="lambda expression", file="NameLookup.cs", label="nameComparer.Equals(command, firstArg) ||\r\n                    nameComparer.Equals(string.Concat(''--'', command), firstArg)", span="47-48"];
m0_41 [cluster="lambda expression", file="NameLookup.cs", label="Entry lambda expression", span="46-48"];
m0_43 [cluster="lambda expression", file="NameLookup.cs", label="Exit lambda expression", span="46-48"];
m0_55 [cluster="lambda expression", file="NameLookup.cs", label="nameComparer.Equals(a.Item1.Name, arguments.First())", span="74-74"];
m0_58 [cluster="lambda expression", file="NameLookup.cs", label="verbs.Single(v => nameComparer.Equals(v.Item1.Name, arguments.First()))\r\n                                .Item2.AutoDefault()", span="78-79"];
m0_63 [cluster="lambda expression", file="NameLookup.cs", label="nameComparer.Equals(v.Item1.Name, arguments.First())", span="78-78"];
m0_54 [cluster="lambda expression", file="NameLookup.cs", label="Entry lambda expression", span="74-74"];
m0_57 [cluster="lambda expression", file="NameLookup.cs", label="Entry lambda expression", span="77-79"];
m0_65 [cluster="lambda expression", file="NameLookup.cs", label="Entry lambda expression", span="84-84"];
m0_56 [cluster="lambda expression", file="NameLookup.cs", label="Exit lambda expression", span="74-74"];
m0_59 [cluster="lambda expression", file="NameLookup.cs", label="Exit lambda expression", span="77-79"];
m0_62 [cluster="lambda expression", file="NameLookup.cs", label="Entry lambda expression", span="78-78"];
m0_64 [cluster="lambda expression", file="NameLookup.cs", label="Exit lambda expression", span="78-78"];
m0_66 [cluster="lambda expression", file="NameLookup.cs", label="v.Item2", span="84-84"];
m0_67 [cluster="lambda expression", file="NameLookup.cs", label="Exit lambda expression", span="84-84"];
m0_75 [cluster="lambda expression", file="NameLookup.cs", label="nameComparer.Equals(v.Item1.Name, verb)", span="93-93"];
m0_74 [cluster="lambda expression", file="NameLookup.cs", label="Entry lambda expression", span="93-93"];
m0_76 [cluster="lambda expression", file="NameLookup.cs", label="Exit lambda expression", span="93-93"];
m0_78 [cluster="lambda expression", file="NameLookup.cs", label="new HelpVerbRequestedError(v.Item1.Name, v.Item2, true)", span="96-96"];
m0_79 [cluster="lambda expression", file="NameLookup.cs", label="Exit lambda expression", span="96-96"];
m0_33 [cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="NameLookup.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0"];
m0_36 [cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="NameLookup.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0"];
m0_38 [cluster="CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", file="NameLookup.cs", label="Entry CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", span="87-87"];
m0_68 [cluster="CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", file="NameLookup.cs", label="return verb.Length > 0\r\n                      ? verbs.SingleOrDefault(v => nameComparer.Equals(v.Item1.Name, verb))\r\n                             .ToMaybe()\r\n                             .Return(\r\n                                 v => new HelpVerbRequestedError(v.Item1.Name, v.Item2, true),\r\n                                 new HelpVerbRequestedError(null, null, false))\r\n                      : new HelpVerbRequestedError(null, null, false);", span="92-98"];
m0_69 [cluster="CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", file="NameLookup.cs", label="Exit CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", span="87-87"];
m0_51 [cluster="Unk.Select", file="NameLookup.cs", label="Entry Unk.Select", span=""];
m0_31 [cluster="CommandLine.NoVerbSelectedError.NoVerbSelectedError()", file="NameLookup.cs", label="Entry CommandLine.NoVerbSelectedError.NoVerbSelectedError()", span="421-421"];
m0_0 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="NameLookup.cs", label="Entry CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="13-13"];
m0_1 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="NameLookup.cs", label="return Choose(\r\n                (args, optionSpecs) =>\r\n                    {\r\n                        var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer));\r\n                        var explodedTokens = Tokenizer.ExplodeOptionList(tokens, name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer));\r\n                        return explodedTokens;\r\n                    },\r\n                types,\r\n                arguments,\r\n                nameComparer,\r\n                parsingCulture);", span="19-29"];
m0_2 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="NameLookup.cs", label="Exit CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="13-13"];
m0_9 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="NameLookup.cs", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="12-12"];
m0_73 [cluster="Unk.Return", file="NameLookup.cs", label="Entry Unk.Return", span=""];
m0_40 [cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="NameLookup.cs", label="Entry CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="67-67"];
m0_46 [cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="NameLookup.cs", label="return verbs.Any(a => nameComparer.Equals(a.Item1.Name, arguments.First()))\r\n                ? InstanceBuilder.Build(\r\n                    Maybe.Just<Func<object>>(\r\n                        () =>\r\n                            verbs.Single(v => nameComparer.Equals(v.Item1.Name, arguments.First()))\r\n                                .Item2.AutoDefault()),\r\n                    tokenizer,\r\n                    arguments.Skip(1),\r\n                    nameComparer,\r\n                    parsingCulture)\r\n                : MakeNotParsed(verbs.Select(v => v.Item2), new BadVerbSelectedError(arguments.First()));", span="74-84"];
m0_47 [cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="NameLookup.cs", label="Exit CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="67-67"];
m0_50 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="NameLookup.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="35-35"];
m0_61 [cluster="Unk.AutoDefault", file="NameLookup.cs", label="Entry Unk.AutoDefault", span=""];
m0_84 [cluster="CommandLine.NullInstance.NullInstance()", file="NameLookup.cs", label="Entry CommandLine.NullInstance.NullInstance()", span="9-9"];
m0_34 [cluster="CommandLine.Core.Verb.SelectFromTypes(System.Collections.Generic.IEnumerable<System.Type>)", file="NameLookup.cs", label="Entry CommandLine.Core.Verb.SelectFromTypes(System.Collections.Generic.IEnumerable<System.Type>)", span="40-40"];
m0_10 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CSharpx.Maybe<char>>)", file="NameLookup.cs", label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CSharpx.Maybe<char>>)", span="45-45"];
m0_37 [cluster="System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", file="NameLookup.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", span="0-0"];
m0_80 [cluster="HelpVerbRequestedError.cstr", file="NameLookup.cs", label="Entry HelpVerbRequestedError.cstr", span=""];
m0_85 [file="NameLookup.cs", label="System.StringComparer", span=""];
m0_86 [file="NameLookup.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
m0_87 [file="NameLookup.cs", label="System.StringComparer", span=""];
m0_88 [file="NameLookup.cs", label=firstArg, span=""];
m0_89 [file="NameLookup.cs", label="System.Collections.Generic.IEnumerable<string>", span=""];
m0_90 [file="NameLookup.cs", label="System.StringComparer", span=""];
m0_91 [file="NameLookup.cs", label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>", span=""];
m0_92 [file="NameLookup.cs", label=string, span=""];
m0_93 [file="NameLookup.cs", label="System.StringComparer", span=""];
m1_33 [cluster="System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", file="Tokenizer.cs", label="Entry System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", span="0-0"];
m1_34 [cluster="Unk.nameof", file="Tokenizer.cs", label="Entry Unk.nameof", span=""];
m1_21 [cluster="CommandLine.Infrastructure.EnumerableExtensions.Group<T>(System.Collections.Generic.IEnumerable<T>, int)", file="Tokenizer.cs", label="Entry CommandLine.Infrastructure.EnumerableExtensions.Group<T>(System.Collections.Generic.IEnumerable<T>, int)", span="43-43"];
m1_29 [cluster="CommandLine.Infrastructure.EnumerableExtensions.Group<T>(System.Collections.Generic.IEnumerable<T>, int)", color=green, community=0, file="Tokenizer.cs", label="yield return group;", prediction=0, span="59-59"];
m1_24 [cluster="CommandLine.Infrastructure.EnumerableExtensions.Group<T>(System.Collections.Generic.IEnumerable<T>, int)", file="Tokenizer.cs", label="T[] group = new T[groupSize]", span="50-50"];
m1_28 [cluster="CommandLine.Infrastructure.EnumerableExtensions.Group<T>(System.Collections.Generic.IEnumerable<T>, int)", file="Tokenizer.cs", label="groupIndex == groupSize", span="57-57"];
m1_30 [cluster="CommandLine.Infrastructure.EnumerableExtensions.Group<T>(System.Collections.Generic.IEnumerable<T>, int)", file="Tokenizer.cs", label="group = new T[groupSize]", span="61-61"];
m1_22 [cluster="CommandLine.Infrastructure.EnumerableExtensions.Group<T>(System.Collections.Generic.IEnumerable<T>, int)", file="Tokenizer.cs", label="groupSize < 1", span="45-45"];
m1_23 [cluster="CommandLine.Infrastructure.EnumerableExtensions.Group<T>(System.Collections.Generic.IEnumerable<T>, int)", file="Tokenizer.cs", label="throw new ArgumentOutOfRangeException(nameof(groupSize));", span="47-47"];
m1_26 [cluster="CommandLine.Infrastructure.EnumerableExtensions.Group<T>(System.Collections.Generic.IEnumerable<T>, int)", file="Tokenizer.cs", label=source, span="53-53"];
m1_25 [cluster="CommandLine.Infrastructure.EnumerableExtensions.Group<T>(System.Collections.Generic.IEnumerable<T>, int)", file="Tokenizer.cs", label="int groupIndex = 0", span="51-51"];
m1_27 [cluster="CommandLine.Infrastructure.EnumerableExtensions.Group<T>(System.Collections.Generic.IEnumerable<T>, int)", file="Tokenizer.cs", label="group[groupIndex++] = item", span="55-55"];
m1_31 [cluster="CommandLine.Infrastructure.EnumerableExtensions.Group<T>(System.Collections.Generic.IEnumerable<T>, int)", file="Tokenizer.cs", label="groupIndex = 0", span="62-62"];
m1_32 [cluster="CommandLine.Infrastructure.EnumerableExtensions.Group<T>(System.Collections.Generic.IEnumerable<T>, int)", file="Tokenizer.cs", label="Exit CommandLine.Infrastructure.EnumerableExtensions.Group<T>(System.Collections.Generic.IEnumerable<T>, int)", span="43-43"];
m2_10 [cluster="Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter.ConvertToOrdinal(int)", file="TokenizerTests.cs", label="Entry Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter.ConvertToOrdinal(int)", span="45-45"];
m2_12 [cluster="Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter.ConvertToOrdinal(int)", file="TokenizerTests.cs", label="Exit Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter.ConvertToOrdinal(int)", span="45-45"];
m2_11 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="TokenizerTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
m2_8 [cluster="Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter.ConvertToOrdinal(int, Humanizer.GrammaticalGender)", file="TokenizerTests.cs", label="return ConvertToOrdinal(number);", span="37-37"];
m2_6 [cluster="CommandLine.Core.Token.Name(string)", file="TokenizerTests.cs", label="Entry CommandLine.Core.Token.Name(string)", span="19-19"];
m2_15 [cluster="Unk.True", file="TokenizerTests.cs", label="Entry Unk.True", span=""];
m2_0 [cluster="Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter.Convert(int, Humanizer.GrammaticalGender)", file="TokenizerTests.cs", label="Entry Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter.Convert(int, Humanizer.GrammaticalGender)", span="12-12"];
m2_1 [cluster="Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter.Convert(int, Humanizer.GrammaticalGender)", color=green, community=0, file="TokenizerTests.cs", label="return Convert(number);", prediction=1, span="14-14"];
m2_2 [cluster="Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter.Convert(int, Humanizer.GrammaticalGender)", color=green, community=0, file="TokenizerTests.cs", label="Exit Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter.Convert(int, Humanizer.GrammaticalGender)", prediction=2, span="12-12"];
m2_4 [cluster="Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter.Convert(int)", color=green, community=0, file="TokenizerTests.cs", label="return number.ToString();", prediction=1, span="24-24"];
m2_3 [cluster="Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter.Convert(int)", color=green, community=0, file="TokenizerTests.cs", label="Entry Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter.Convert(int)", prediction=4, span="22-22"];
m2_5 [cluster="Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter.Convert(int)", file="TokenizerTests.cs", label="Exit Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter.Convert(int)", span="22-22"];
m2_16 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="30-30"];
m2_17 [cluster="lambda expression", color=green, community=0, file="TokenizerTests.cs", label="NameLookup.WithSeparator(optionName, specs, StringComparer.InvariantCulture)", prediction=2, span="30-30"];
m2_18 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="30-30"];
m2_13 [cluster="Unk.ExplodeOptionList", file="TokenizerTests.cs", label="Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter", span=""];
m2_19 [cluster="Unk.WithSeparator", file="TokenizerTests.cs", label="Entry Unk.WithSeparator", span=""];
m2_14 [cluster="Unk.SequenceEqual", file="TokenizerTests.cs", label="Entry Unk.SequenceEqual", span=""];
m2_7 [cluster="Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter.ConvertToOrdinal(int, Humanizer.GrammaticalGender)", file="TokenizerTests.cs", label="Entry Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter.ConvertToOrdinal(int, Humanizer.GrammaticalGender)", span="35-35"];
m2_9 [cluster="System.Collections.Generic.List<T>.List()", file="TokenizerTests.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m2_20 [file="TokenizerTests.cs", label=specs, span=""];
m0_3 -> m0_20  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Type>", style=dashed];
m0_3 -> m0_42  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_3 -> m0_25  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Type>", style=dashed];
m0_3 -> m0_27  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Type>", style=dashed];
m0_3 -> m0_28  [color=darkseagreen4, key=1, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>", style=dashed];
m0_21 -> m0_42  [color=darkseagreen4, key=1, label=firstArg, style=dashed];
m0_22 -> m0_42  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_22 -> m0_24  [color=darkseagreen4, key=1, label=preprocCompare, style=dashed];
m0_22 -> m0_26  [color=darkseagreen4, key=1, label=preprocCompare, style=dashed];
m0_23 -> m0_25  [color=darkseagreen4, key=1, label=verbs, style=dashed];
m0_23 -> m0_28  [color=darkseagreen4, key=1, label=verbs, style=dashed];
m0_5 -> m0_11  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_6 -> m0_15  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_4 -> m0_12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_4 -> m0_16  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_58 -> m0_62  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_38 -> m0_75  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_68 -> m0_74  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_68 -> m0_77  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_0 -> m0_12  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_0 -> m0_16  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_1 -> m0_4  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_40 -> m0_55  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m0_40 -> m0_58  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>", style=dashed];
m0_40 -> m0_63  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m0_46 -> m0_54  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_46 -> m0_57  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_46 -> m0_65  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_85 -> m0_12  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_85 -> m0_16  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_86 -> m0_12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_86 -> m0_16  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_87 -> m0_42  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_88 -> m0_42  [color=darkseagreen4, key=1, label=firstArg, style=dashed];
m0_89 -> m0_55  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m0_89 -> m0_58  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m0_89 -> m0_63  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m0_90 -> m0_55  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_90 -> m0_58  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_90 -> m0_63  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_91 -> m0_58  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>", style=dashed];
m0_92 -> m0_75  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_93 -> m0_75  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_21 -> m1_23  [color=darkseagreen4, key=1, label=int, style=dashed];
m1_21 -> m1_26  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<T>", style=dashed];
m1_21 -> m1_28  [color=darkseagreen4, key=1, label=int, style=dashed];
m1_24 -> m1_29  [color=green, key=1, label=group, style=dashed];
m2_1 -> m2_4  [color=green, key=1, label=expectedTokens, style=dashed];
m2_2 -> m2_17  [color=green, key=1, label=specs, style=dashed];
m2_3 -> m2_16  [color=green, key=1, label="lambda expression", style=dashed];
m2_13 -> m2_1  [color=darkseagreen4, key=1, label="Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter", style=dashed];
m2_13 -> m2_8  [color=darkseagreen4, key=1, label="Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter", style=dashed];
m2_20 -> m2_17  [color=green, key=1, label=specs, style=dashed];
}
