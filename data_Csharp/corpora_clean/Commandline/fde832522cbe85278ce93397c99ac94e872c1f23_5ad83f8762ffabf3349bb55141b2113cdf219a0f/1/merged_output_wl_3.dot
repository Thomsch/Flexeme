digraph  {
n28 [label="CommandLine.Internal.OneCharStringEnumerator", span=""];
n0 [cluster="CommandLine.Internal.OneCharStringEnumerator.OneCharStringEnumerator(string)", label="Entry CommandLine.Internal.OneCharStringEnumerator.OneCharStringEnumerator(string)", span="37-37"];
n1 [cluster="CommandLine.Internal.OneCharStringEnumerator.OneCharStringEnumerator(string)", label="Assumes.NotNullOrEmpty(value, ''value'')", span="39-39"];
n2 [cluster="CommandLine.Internal.OneCharStringEnumerator.OneCharStringEnumerator(string)", color=red, community=0, label="1: _data = value", span="40-40"];
n5 [cluster="CommandLine.Utils.Assumes.NotNullOrEmpty(string, string)", label="Entry CommandLine.Utils.Assumes.NotNullOrEmpty(string, string)", span="54-54"];
n3 [cluster="CommandLine.Internal.OneCharStringEnumerator.OneCharStringEnumerator(string)", label="_index = -1", span="41-41"];
n4 [cluster="CommandLine.Internal.OneCharStringEnumerator.OneCharStringEnumerator(string)", label="Exit CommandLine.Internal.OneCharStringEnumerator.OneCharStringEnumerator(string)", span="37-37"];
n6 [cluster="CommandLine.Internal.OneCharStringEnumerator.MoveNext()", label="Entry CommandLine.Internal.OneCharStringEnumerator.MoveNext()", span="75-75"];
n7 [cluster="CommandLine.Internal.OneCharStringEnumerator.MoveNext()", label="_index < (_data.Length - 1)", span="77-77"];
n8 [cluster="CommandLine.Internal.OneCharStringEnumerator.MoveNext()", label="_index++", span="79-79"];
n11 [cluster="CommandLine.Internal.OneCharStringEnumerator.MoveNext()", label="_index = _data.Length", span="83-83"];
n9 [cluster="CommandLine.Internal.OneCharStringEnumerator.MoveNext()", label="_currentElement = _data.Substring(_index, 1)", span="80-80"];
n10 [cluster="CommandLine.Internal.OneCharStringEnumerator.MoveNext()", label="return true;", span="81-81"];
n14 [cluster="string.Substring(int, int)", label="Entry string.Substring(int, int)", span="0-0"];
n12 [cluster="CommandLine.Internal.OneCharStringEnumerator.MoveNext()", label="return false;", span="84-84"];
n13 [cluster="CommandLine.Internal.OneCharStringEnumerator.MoveNext()", label="Exit CommandLine.Internal.OneCharStringEnumerator.MoveNext()", span="75-75"];
n15 [cluster="CommandLine.Internal.OneCharStringEnumerator.GetRemainingFromNext()", label="Entry CommandLine.Internal.OneCharStringEnumerator.GetRemainingFromNext()", span="87-87"];
n16 [cluster="CommandLine.Internal.OneCharStringEnumerator.GetRemainingFromNext()", label="_index == -1", span="89-89"];
n17 [cluster="CommandLine.Internal.OneCharStringEnumerator.GetRemainingFromNext()", label="throw new InvalidOperationException();", span="89-89"];
n18 [cluster="CommandLine.Internal.OneCharStringEnumerator.GetRemainingFromNext()", label="_index > _data.Length", span="90-90"];
n19 [cluster="CommandLine.Internal.OneCharStringEnumerator.GetRemainingFromNext()", label="throw new InvalidOperationException();", span="90-90"];
n20 [cluster="CommandLine.Internal.OneCharStringEnumerator.GetRemainingFromNext()", label="return _data.Substring(_index + 1);", span="91-91"];
n21 [cluster="CommandLine.Internal.OneCharStringEnumerator.GetRemainingFromNext()", label="Exit CommandLine.Internal.OneCharStringEnumerator.GetRemainingFromNext()", span="87-87"];
n23 [cluster="string.Substring(int)", label="Entry string.Substring(int)", span="0-0"];
n22 [cluster="System.InvalidOperationException.InvalidOperationException()", label="Entry System.InvalidOperationException.InvalidOperationException()", span="0-0"];
n24 [cluster="CommandLine.Internal.OneCharStringEnumerator.MovePrevious()", label="Entry CommandLine.Internal.OneCharStringEnumerator.MovePrevious()", span="94-94"];
n25 [cluster="CommandLine.Internal.OneCharStringEnumerator.MovePrevious()", label="throw new NotSupportedException();", span="94-94"];
n26 [cluster="CommandLine.Internal.OneCharStringEnumerator.MovePrevious()", label="Exit CommandLine.Internal.OneCharStringEnumerator.MovePrevious()", span="94-94"];
n27 [cluster="System.NotSupportedException.NotSupportedException()", label="Entry System.NotSupportedException.NotSupportedException()", span="0-0"];
d33 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", color=green, community=0, label="0: return specProps =>\r\n            {\r\n                List<string> setsWithTrue =\r\n                    specProps\r\n                        .Where(sp => sp.Specification.IsOption()\r\n                            && sp.Value.IsJust() && sp.Specification.Required)\r\n                        .Select(s => ((OptionSpecification)s.Specification).SetName).ToList();\r\n                \r\n                var requiredButEmpty =\r\n                    specProps\r\n                        .Where(sp => sp.Specification.IsOption())\r\n                        .Where(sp => sp.Value.IsNothing()\r\n                            && sp.Specification.Required\r\n                            && !setsWithTrue.Contains(((OptionSpecification)sp.Specification).SetName))\r\n                    .Concat(specProps\r\n                        .Where(sp => sp.Specification.IsValue()\r\n                            && sp.Value.IsNothing()\r\n                            && sp.Specification.Required)).ToList();\r\n                    if (requiredButEmpty.Any()) {\r\n                        return requiredButEmpty.Select(s => Maybe.Just<Error>(new MissingRequiredOptionError(\r\n                            NameInfo.FromSpecification(s.Specification))));\r\n                    }\r\n                    return Enumerable.Empty<Nothing<Error>>();\r\n                };", span="39-62"];
d32 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="37-37"];
d34 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="37-37"];
d36 [cluster="lambda expression", label="List<string> setsWithTrue =\r\n                    specProps\r\n                        .Where(sp => sp.Specification.IsOption()\r\n                            && sp.Value.IsJust() && sp.Specification.Required)\r\n                        .Select(s => ((OptionSpecification)s.Specification).SetName).ToList()", span="41-45"];
d37 [cluster="lambda expression", color=green, community=0, label="0: var requiredButEmpty =\r\n                    specProps\r\n                        .Where(sp => sp.Specification.IsOption())\r\n                        .Where(sp => sp.Value.IsNothing()\r\n                            && sp.Specification.Required\r\n                            && !setsWithTrue.Contains(((OptionSpecification)sp.Specification).SetName))\r\n                    .Concat(specProps\r\n                        .Where(sp => sp.Specification.IsValue()\r\n                            && sp.Value.IsNothing()\r\n                            && sp.Specification.Required)).ToList()", span="47-56"];
d35 [cluster="lambda expression", label="Entry lambda expression", span="39-62"];
d38 [cluster="lambda expression", color=green, community=0, label="0: requiredButEmpty.Any()", span="57-57"];
d10 [cluster="Unk.Where", label="Entry Unk.Where", span=""];
d43 [cluster="Unk.Concat", label="Entry Unk.Concat", span=""];
d42 [cluster="Unk.ToList", label="Entry Unk.ToList", span=""];
d52 [cluster="lambda expression", label="Entry lambda expression", span="49-49"];
d55 [cluster="lambda expression", label="Entry lambda expression", span="50-52"];
d60 [cluster="lambda expression", label="Entry lambda expression", span="54-56"];
d39 [cluster="lambda expression", color=green, community=0, label="0: return requiredButEmpty.Select(s => Maybe.Just<Error>(new MissingRequiredOptionError(\r\n                            NameInfo.FromSpecification(s.Specification))));", span="58-59"];
d56 [cluster="lambda expression", color=green, community=0, label="0: sp.Value.IsNothing()\r\n                            && sp.Specification.Required\r\n                            && !setsWithTrue.Contains(((OptionSpecification)sp.Specification).SetName)", span="50-52"];
d87 [label=setsWithTrue, span=""];
d57 [cluster="lambda expression", label="Exit lambda expression", span="50-52"];
d58 [cluster="Unk.IsNothing", label="Entry Unk.IsNothing", span=""];
d59 [cluster="System.Collections.Generic.List<T>.Contains(T)", label="Entry System.Collections.Generic.List<T>.Contains(T)", span="0-0"];
d40 [cluster="lambda expression", label="return Enumerable.Empty<Nothing<Error>>();", span="61-61"];
d44 [cluster="Unk.Any", label="Entry Unk.Any", span=""];
d41 [cluster="lambda expression", label="Exit lambda expression", span="39-62"];
d13 [cluster="Unk.Select", label="Entry Unk.Select", span=""];
d65 [cluster="lambda expression", label="Entry lambda expression", span="58-59"];
d61 [cluster="lambda expression", color=green, community=0, label="0: sp.Specification.IsValue()\r\n                            && sp.Value.IsNothing()\r\n                            && sp.Specification.Required", span="54-56"];
d62 [cluster="lambda expression", label="Exit lambda expression", span="54-56"];
d63 [cluster="CommandLine.Core.Specification.IsValue()", label="Entry CommandLine.Core.Specification.IsValue()", span="15-15"];
d64 [cluster="CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", label="Entry CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", span="144-144"];
d66 [cluster="lambda expression", color=green, community=0, label="0: Maybe.Just<Error>(new MissingRequiredOptionError(\r\n                            NameInfo.FromSpecification(s.Specification)))", span="58-59"];
d67 [cluster="lambda expression", label="Exit lambda expression", span="58-59"];
d68 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283"];
d69 [cluster="Unk.FromSpecification", label="Entry Unk.FromSpecification", span=""];
d31 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68"];
d45 [cluster="lambda expression", label="Entry lambda expression", span="43-44"];
d49 [cluster="lambda expression", label="Entry lambda expression", span="45-45"];
d4 [cluster="lambda expression", label="var options = specProps\r\n                            .Where(sp => sp.Specification.IsOption())\r\n                            .Where(sp => ((OptionSpecification)sp.Specification).SetName.Length > 0\r\n                                   && sp.Value.IsJust())", span="22-25"];
d74 [cluster="lambda expression", label="var options = specProps.Where(\r\n                        sp => sp.Specification.TargetType == TargetType.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min.FromJust())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max.FromJust())\r\n                        )\r\n                    )", span="69-76"];
d54 [cluster="lambda expression", label="Exit lambda expression", span="49-49"];
d53 [cluster="lambda expression", label="sp.Specification.IsOption()", span="49-49"];
d14 [cluster="System.Linq.Enumerable.Empty<TResult>()", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
d75 [cluster="lambda expression", label="options.Any()", span="77-77"];
d7 [cluster="lambda expression", label="return options.Select(s => Maybe.Just<Error>(\r\n                            new MutuallyExclusiveSetError(\r\n                                NameInfo.FromOptionSpecification((OptionSpecification)s.Specification))));", span="29-31"];
d76 [cluster="lambda expression", label="return options.Select(s => Maybe.Just<Error>(new SequenceOutOfRangeError(\r\n                            NameInfo.FromSpecification(s.Specification))));", span="79-80"];
d84 [cluster="lambda expression", label="Maybe.Just<Error>(new SequenceOutOfRangeError(\r\n                            NameInfo.FromSpecification(s.Specification)))", span="79-80"];
d27 [cluster="lambda expression", label="Maybe.Just<Error>(\r\n                            new MutuallyExclusiveSetError(\r\n                                NameInfo.FromOptionSpecification((OptionSpecification)s.Specification)))", span="29-31"];
d47 [cluster="lambda expression", label="Exit lambda expression", span="43-44"];
d46 [cluster="lambda expression", label="sp.Specification.IsOption()\r\n                            && sp.Value.IsJust() && sp.Specification.Required", span="43-44"];
d51 [cluster="lambda expression", label="Exit lambda expression", span="45-45"];
d50 [cluster="lambda expression", label="((OptionSpecification)s.Specification).SetName", span="45-45"];
d1 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", label="return specProps =>\r\n                {\r\n                    var options = specProps\r\n                            .Where(sp => sp.Specification.IsOption())\r\n                            .Where(sp => ((OptionSpecification)sp.Specification).SetName.Length > 0\r\n                                   && sp.Value.IsJust());\r\n                    var groups = options.GroupBy(g => ((OptionSpecification)g.Specification).SetName);\r\n                    if (groups.Count() > 1)\r\n                    {\r\n                        return options.Select(s => Maybe.Just<Error>(\r\n                            new MutuallyExclusiveSetError(\r\n                                NameInfo.FromOptionSpecification((OptionSpecification)s.Specification))));\r\n                    }\r\n                    return Enumerable.Empty<Nothing<Error>>();\r\n                };", span="20-34"];
d3 [cluster="lambda expression", label="Entry lambda expression", span="20-34"];
d5 [cluster="lambda expression", label="var groups = options.GroupBy(g => ((OptionSpecification)g.Specification).SetName)", span="26-26"];
d15 [cluster="lambda expression", label="Entry lambda expression", span="23-23"];
d19 [cluster="lambda expression", label="Entry lambda expression", span="24-25"];
d71 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", label="return specProps =>\r\n                {\r\n                    var options = specProps.Where(\r\n                        sp => sp.Specification.TargetType == TargetType.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min.FromJust())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max.FromJust())\r\n                        )\r\n                    );\r\n                    if (options.Any())\r\n                    {\r\n                        return options.Select(s => Maybe.Just<Error>(new SequenceOutOfRangeError(\r\n                            NameInfo.FromSpecification(s.Specification))));\r\n                    }\r\n                    return Enumerable.Empty<Nothing<Error>>();\r\n                };", span="67-83"];
d73 [cluster="lambda expression", label="Entry lambda expression", span="67-83"];
d79 [cluster="lambda expression", label="Entry lambda expression", span="70-75"];
d18 [cluster="CommandLine.Core.Specification.IsOption()", label="Entry CommandLine.Core.Specification.IsOption()", span="10-10"];
d8 [cluster="lambda expression", label="return Enumerable.Empty<Nothing<Error>>();", span="33-33"];
d77 [cluster="lambda expression", label="return Enumerable.Empty<Nothing<Error>>();", span="82-82"];
d6 [cluster="lambda expression", label="groups.Count() > 1", span="27-27"];
d9 [cluster="lambda expression", label="Exit lambda expression", span="20-34"];
d26 [cluster="lambda expression", label="Entry lambda expression", span="29-31"];
d78 [cluster="lambda expression", label="Exit lambda expression", span="67-83"];
d83 [cluster="lambda expression", label="Entry lambda expression", span="79-80"];
d85 [cluster="lambda expression", label="Exit lambda expression", span="79-80"];
d86 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316"];
d28 [cluster="lambda expression", label="Exit lambda expression", span="29-31"];
d29 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294"];
d30 [cluster="CommandLine.NameInfo.FromOptionSpecification(CommandLine.Core.OptionSpecification)", label="Entry CommandLine.NameInfo.FromOptionSpecification(CommandLine.Core.OptionSpecification)", span="60-60"];
d48 [cluster="CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", label="Entry CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", span="149-149"];
d0 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="18-18"];
d2 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="18-18"];
d11 [cluster="Unk.GroupBy", label="Entry Unk.GroupBy", span=""];
d23 [cluster="lambda expression", label="Entry lambda expression", span="26-26"];
d17 [cluster="lambda expression", label="Exit lambda expression", span="23-23"];
d16 [cluster="lambda expression", label="sp.Specification.IsOption()", span="23-23"];
d21 [cluster="lambda expression", label="Exit lambda expression", span="24-25"];
d20 [cluster="lambda expression", label="((OptionSpecification)sp.Specification).SetName.Length > 0\r\n                                   && sp.Value.IsJust()", span="24-25"];
d70 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="65-65"];
d72 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="65-65"];
d81 [cluster="lambda expression", label="Exit lambda expression", span="70-75"];
d80 [cluster="lambda expression", label="sp.Specification.TargetType == TargetType.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min.FromJust())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max.FromJust())\r\n                        )", span="70-75"];
d12 [cluster="Unk.Count", label="Entry Unk.Count", span=""];
d25 [cluster="lambda expression", label="Exit lambda expression", span="26-26"];
d24 [cluster="lambda expression", label="((OptionSpecification)g.Specification).SetName", span="26-26"];
d22 [cluster="Unk.IsJust", label="Entry Unk.IsJust", span=""];
d82 [cluster="CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", label="Entry CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", span="134-134"];
n28 -> n2  [color=red, key=1, label="CommandLine.Internal.OneCharStringEnumerator", style=dashed];
n28 -> n3  [color=darkseagreen4, key=1, label="CommandLine.Internal.OneCharStringEnumerator", style=dashed];
n28 -> n7  [color=darkseagreen4, key=1, label="CommandLine.Internal.OneCharStringEnumerator", style=dashed];
n28 -> n8  [color=darkseagreen4, key=1, label="CommandLine.Internal.OneCharStringEnumerator", style=dashed];
n28 -> n9  [color=darkseagreen4, key=1, label="CommandLine.Internal.OneCharStringEnumerator", style=dashed];
n28 -> n11  [color=darkseagreen4, key=1, label="CommandLine.Internal.OneCharStringEnumerator", style=dashed];
n28 -> n16  [color=darkseagreen4, key=1, label="CommandLine.Internal.OneCharStringEnumerator", style=dashed];
n28 -> n18  [color=darkseagreen4, key=1, label="CommandLine.Internal.OneCharStringEnumerator", style=dashed];
n28 -> n20  [color=darkseagreen4, key=1, label="CommandLine.Internal.OneCharStringEnumerator", style=dashed];
n0 -> n1  [key=0, style=solid];
n0 -> n2  [color=red, key=1, label=string, style=dashed];
n1 -> n2  [color=red, key=0, style=solid];
n1 -> n5  [key=2, style=dotted];
n2 -> n3  [color=red, key=0, style=solid];
n3 -> n4  [key=0, style=solid];
n4 -> n0  [color=blue, key=0, style=bold];
n6 -> n7  [key=0, style=solid];
n6 -> n8  [color=darkorchid, key=3, label="Property variable System.Func<bool, string> HelpCommandText", style=bold];
n7 -> n8  [key=0, style=solid];
n7 -> n11  [key=0, style=solid];
n8 -> n9  [key=0, style=solid];
n11 -> n12  [key=0, style=solid];
n9 -> n10  [key=0, style=solid];
n9 -> n14  [key=2, style=dotted];
n10 -> n13  [key=0, style=solid];
n12 -> n13  [key=0, style=solid];
n13 -> n6  [color=blue, key=0, style=bold];
n15 -> n16  [key=0, style=solid];
n16 -> n17  [key=0, style=solid];
n16 -> n18  [key=0, style=solid];
n17 -> n21  [key=0, style=solid];
n17 -> n22  [key=2, style=dotted];
n18 -> n19  [key=0, style=solid];
n18 -> n20  [key=0, style=solid];
n18 -> n24  [color=darkorchid, key=3, label="Property variable System.Func<CommandLine.Error, string> FormatError", style=bold];
n19 -> n21  [key=0, style=solid];
n19 -> n22  [key=2, style=dotted];
n20 -> n21  [key=0, style=solid];
n20 -> n23  [key=2, style=dotted];
n21 -> n15  [color=blue, key=0, style=bold];
n24 -> n25  [key=0, style=solid];
n25 -> n26  [key=0, style=solid];
n25 -> n27  [key=2, style=dotted];
n26 -> n24  [color=blue, key=0, style=bold];
d33 -> d34  [color=green, key=0, style=solid];
d33 -> d36  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
d33 -> d37  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
d32 -> d33  [color=green, key=0, style=solid];
d34 -> d32  [color=blue, key=0, style=bold];
d36 -> d37  [color=green, key=0, style=solid];
d36 -> d56  [color=green, key=1, label=setsWithTrue, style=dashed];
d36 -> d10  [key=2, style=dotted];
d36 -> d13  [key=2, style=dotted];
d36 -> d42  [key=2, style=dotted];
d36 -> d45  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d36 -> d49  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d37 -> d38  [color=green, key=0, style=solid];
d37 -> d10  [color=green, key=2, style=dotted];
d37 -> d43  [color=green, key=2, style=dotted];
d37 -> d42  [color=green, key=2, style=dotted];
d37 -> d52  [color=green, key=1, label="lambda expression", style=dashed];
d37 -> d55  [color=green, key=1, label="lambda expression", style=dashed];
d37 -> d60  [color=green, key=1, label="lambda expression", style=dashed];
d37 -> d39  [color=green, key=1, label=requiredButEmpty, style=dashed];
d35 -> d37  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
d35 -> d36  [key=0, style=solid];
d38 -> d39  [color=green, key=0, style=solid];
d38 -> d40  [color=green, key=0, style=solid];
d38 -> d44  [color=green, key=2, style=dotted];
d52 -> d53  [key=0, style=solid];
d55 -> d56  [color=green, key=0, style=solid];
d60 -> d61  [color=green, key=0, style=solid];
d39 -> d41  [color=green, key=0, style=solid];
d39 -> d13  [color=green, key=2, style=dotted];
d39 -> d65  [color=green, key=1, label="lambda expression", style=dashed];
d56 -> d57  [color=green, key=0, style=solid];
d56 -> d58  [color=green, key=2, style=dotted];
d56 -> d59  [color=green, key=2, style=dotted];
d87 -> d56  [color=green, key=1, label=setsWithTrue, style=dashed];
d57 -> d55  [color=blue, key=0, style=bold];
d40 -> d41  [key=0, style=solid];
d40 -> d14  [key=2, style=dotted];
d41 -> d35  [color=blue, key=0, style=bold];
d65 -> d66  [color=green, key=0, style=solid];
d61 -> d62  [color=green, key=0, style=solid];
d61 -> d63  [color=green, key=2, style=dotted];
d61 -> d64  [color=green, key=2, style=dotted];
d62 -> d60  [color=blue, key=0, style=bold];
d66 -> d67  [color=green, key=0, style=solid];
d66 -> d68  [color=green, key=2, style=dotted];
d66 -> d69  [color=green, key=2, style=dotted];
d66 -> d31  [color=green, key=2, style=dotted];
d67 -> d65  [color=blue, key=0, style=bold];
d45 -> d46  [key=0, style=solid];
d49 -> d50  [key=0, style=solid];
d4 -> d10  [key=2, style=dotted];
d4 -> d5  [key=0, style=solid];
d4 -> d15  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d4 -> d19  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d4 -> d7  [color=darkseagreen4, key=1, label=options, style=dashed];
d74 -> d10  [key=2, style=dotted];
d74 -> d75  [key=0, style=solid];
d74 -> d79  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d74 -> d76  [color=darkseagreen4, key=1, label=options, style=dashed];
d54 -> d52  [color=blue, key=0, style=bold];
d53 -> d54  [key=0, style=solid];
d53 -> d18  [key=2, style=dotted];
d75 -> d44  [key=2, style=dotted];
d75 -> d76  [key=0, style=solid];
d75 -> d77  [key=0, style=solid];
d7 -> d13  [key=2, style=dotted];
d7 -> d9  [key=0, style=solid];
d7 -> d26  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d76 -> d13  [key=2, style=dotted];
d76 -> d78  [key=0, style=solid];
d76 -> d83  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d84 -> d69  [key=2, style=dotted];
d84 -> d31  [key=2, style=dotted];
d84 -> d85  [key=0, style=solid];
d84 -> d86  [key=2, style=dotted];
d27 -> d31  [key=2, style=dotted];
d27 -> d28  [key=0, style=solid];
d27 -> d29  [key=2, style=dotted];
d27 -> d30  [key=2, style=dotted];
d47 -> d45  [color=blue, key=0, style=bold];
d46 -> d47  [key=0, style=solid];
d46 -> d18  [key=2, style=dotted];
d46 -> d48  [key=2, style=dotted];
d51 -> d49  [color=blue, key=0, style=bold];
d50 -> d51  [key=0, style=solid];
d1 -> d4  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
d1 -> d2  [key=0, style=solid];
d3 -> d4  [key=0, style=solid];
d5 -> d6  [key=0, style=solid];
d5 -> d11  [key=2, style=dotted];
d5 -> d23  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d15 -> d16  [key=0, style=solid];
d19 -> d20  [key=0, style=solid];
d71 -> d74  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
d71 -> d72  [key=0, style=solid];
d73 -> d74  [key=0, style=solid];
d79 -> d80  [key=0, style=solid];
d8 -> d14  [key=2, style=dotted];
d8 -> d9  [key=0, style=solid];
d77 -> d14  [key=2, style=dotted];
d77 -> d78  [key=0, style=solid];
d6 -> d7  [key=0, style=solid];
d6 -> d8  [key=0, style=solid];
d6 -> d12  [key=2, style=dotted];
d9 -> d3  [color=blue, key=0, style=bold];
d26 -> d27  [key=0, style=solid];
d78 -> d73  [color=blue, key=0, style=bold];
d83 -> d84  [key=0, style=solid];
d85 -> d83  [color=blue, key=0, style=bold];
d28 -> d26  [color=blue, key=0, style=bold];
d0 -> d1  [key=0, style=solid];
d2 -> d0  [color=blue, key=0, style=bold];
d23 -> d24  [key=0, style=solid];
d17 -> d15  [color=blue, key=0, style=bold];
d16 -> d18  [key=2, style=dotted];
d16 -> d17  [key=0, style=solid];
d21 -> d19  [color=blue, key=0, style=bold];
d20 -> d21  [key=0, style=solid];
d20 -> d22  [key=2, style=dotted];
d70 -> d71  [key=0, style=solid];
d72 -> d70  [color=blue, key=0, style=bold];
d81 -> d79  [color=blue, key=0, style=bold];
d80 -> d48  [key=2, style=dotted];
d80 -> d81  [key=0, style=solid];
d80 -> d82  [key=2, style=dotted];
d25 -> d23  [color=blue, key=0, style=bold];
d24 -> d25  [key=0, style=solid];
}
