digraph  {
n146 [label=setCount, span=""];
n147 [label=setWithRequired, span=""];
n148 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", span=""];
n0 [label="Entry CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12", cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)"];
n1 [label="return new List<Func<IEnumerable<SpecificationProperty>, IEnumerable<Error>>>\r\n                {\r\n                    EnforceMutuallyExclusiveSet(),\r\n                    EnforceRequired(),\r\n                    EnforceRange(),\r\n                    EnforceSingle(tokens)\r\n                };", span="15-21", cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)"];
n2 [label="Exit CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12", cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)"];
n3 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()"];
n4 [label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="24-24", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()"];
n5 [label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="43-43", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()"];
n6 [label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="86-86", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()"];
n7 [label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="106-106", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)"];
n8 [label="return specProps =>\r\n                {\r\n                    var options = specProps\r\n                            .Where(sp => sp.Specification.IsOption())\r\n                            .Where(sp => ((OptionSpecification)sp.Specification).SetName.Length > 0\r\n                                   && sp.Value.IsJust());\r\n                    var groups = options.GroupBy(g => ((OptionSpecification)g.Specification).SetName);\r\n                    if (groups.Count() > 1)\r\n                    {\r\n                        return options.Select(s =>\r\n                            new MutuallyExclusiveSetError(\r\n                                ((OptionSpecification)s.Specification).FromOptionSpecification()));\r\n                    }\r\n                    return Enumerable.Empty<Error>();\r\n                };", span="26-40", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", color=red, community=0];
n9 [label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="24-24", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()"];
n11 [label="var options = specProps\r\n                            .Where(sp => sp.Specification.IsOption())\r\n                            .Where(sp => ((OptionSpecification)sp.Specification).SetName.Length > 0\r\n                                   && sp.Value.IsJust())", span="28-31", cluster="lambda expression", color=red, community=0];
n10 [label="Entry lambda expression", span="26-40", cluster="lambda expression"];
n12 [label="var groups = options.GroupBy(g => ((OptionSpecification)g.Specification).SetName)", span="32-32", cluster="lambda expression"];
n17 [label="Entry Unk.Where", span="", cluster="Unk.Where"];
n22 [label="Entry lambda expression", span="29-29", cluster="lambda expression"];
n26 [label="Entry lambda expression", span="30-31", cluster="lambda expression"];
n14 [label="return options.Select(s =>\r\n                            new MutuallyExclusiveSetError(\r\n                                ((OptionSpecification)s.Specification).FromOptionSpecification()));", span="35-37", cluster="lambda expression", color=red, community=1];
n13 [label="groups.Count() > 1", span="33-33", cluster="lambda expression"];
n18 [label="Entry Unk.GroupBy", span="", cluster="Unk.GroupBy"];
n30 [label="Entry lambda expression", span="32-32", cluster="lambda expression"];
n15 [label="return Enumerable.Empty<Error>();", span="39-39", cluster="lambda expression"];
n19 [label="Entry Unk.Count", span="", cluster="Unk.Count"];
n16 [label="Exit lambda expression", span="26-40", cluster="lambda expression"];
n21 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()"];
n20 [label="Entry Unk.Select", span="", cluster="Unk.Select"];
n33 [label="Entry lambda expression", span="35-37", cluster="lambda expression"];
n23 [label="sp.Specification.IsOption()", span="29-29", cluster="lambda expression", color=red, community=0];
n24 [label="Exit lambda expression", span="29-29", cluster="lambda expression"];
n25 [label="Entry CommandLine.Core.Specification.IsOption()", span="10-10", cluster="CommandLine.Core.Specification.IsOption()"];
n27 [label="((OptionSpecification)sp.Specification).SetName.Length > 0\r\n                                   && sp.Value.IsJust()", span="30-31", cluster="lambda expression", color=red, community=0];
n28 [label="Exit lambda expression", span="30-31", cluster="lambda expression"];
n29 [label="Entry Unk.IsJust", span="", cluster="Unk.IsJust"];
n31 [label="((OptionSpecification)g.Specification).SetName", span="32-32", cluster="lambda expression"];
n32 [label="Exit lambda expression", span="32-32", cluster="lambda expression"];
n34 [label="new MutuallyExclusiveSetError(\r\n                                ((OptionSpecification)s.Specification).FromOptionSpecification())", span="36-37", cluster="lambda expression", color=red, community=1];
n35 [label="Exit lambda expression", span="35-37", cluster="lambda expression"];
n36 [label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="302-302", cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)"];
n37 [label="Entry CommandLine.Core.OptionSpecification.FromOptionSpecification()", span="15-15", cluster="CommandLine.Core.OptionSpecification.FromOptionSpecification()"];
n38 [label="return specProps =>\r\n            {\r\n                var setCount =\r\n                    specProps.Where(sp => sp.Specification.IsOption())\r\n                        .Select(sp => ((OptionSpecification)sp.Specification).SetName)\r\n                        .Distinct()\r\n                        .ToList()\r\n                        .Count();\r\n\r\n                var setWithRequired =\r\n                    specProps.Where(sp => sp.Specification.IsOption())\r\n                        .Where(sp => sp.Specification.Required)\r\n                        .Select(sp => ((OptionSpecification)sp.Specification).SetName)\r\n                        .Distinct()\r\n                        .ToList();\r\n\r\n                var missing =\r\n                    specProps.Where(sp => sp.Specification.IsOption())\r\n                        .Where(sp => sp.Specification.Required)\r\n                        .Where(sp => sp.Value.IsNothing())\r\n                        .Where(sp => ((OptionSpecification)sp.Specification).SetName.Length == 0)\r\n                        .Concat(\r\n                            specProps.Where(sp => sp.Specification.IsOption())\r\n                                .Where(sp => sp.Specification.Required)\r\n                                .Where(sp => sp.Value.IsNothing())\r\n                                .Where(\r\n                                    sp =>\r\n                                        ((OptionSpecification)sp.Specification).SetName.Length > 0 && setCount == 1\r\n                                        || (setCount > 1\r\n                                            && !setWithRequired.Contains(\r\n                                                ((OptionSpecification)sp.Specification).SetName))))\r\n                        .Concat(\r\n                            specProps\r\n                                .Where(sp => sp.Specification.IsValue())\r\n                                .Where(sp => sp.Specification.Required)\r\n                                .Where(sp => sp.Value.IsNothing())).ToList();\r\n\r\n                return missing.Select(sp => new MissingRequiredOptionError(sp.Specification.FromSpecification()));\r\n            };", span="45-83", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", color=red, community=0];
n39 [label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="43-43", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()"];
n41 [label="var setCount =\r\n                    specProps.Where(sp => sp.Specification.IsOption())\r\n                        .Select(sp => ((OptionSpecification)sp.Specification).SetName)\r\n                        .Distinct()\r\n                        .ToList()\r\n                        .Count()", span="47-52", cluster="lambda expression"];
n42 [label="var setWithRequired =\r\n                    specProps.Where(sp => sp.Specification.IsOption())\r\n                        .Where(sp => sp.Specification.Required)\r\n                        .Select(sp => ((OptionSpecification)sp.Specification).SetName)\r\n                        .Distinct()\r\n                        .ToList()", span="54-59", cluster="lambda expression"];
n43 [label="var missing =\r\n                    specProps.Where(sp => sp.Specification.IsOption())\r\n                        .Where(sp => sp.Specification.Required)\r\n                        .Where(sp => sp.Value.IsNothing())\r\n                        .Where(sp => ((OptionSpecification)sp.Specification).SetName.Length == 0)\r\n                        .Concat(\r\n                            specProps.Where(sp => sp.Specification.IsOption())\r\n                                .Where(sp => sp.Specification.Required)\r\n                                .Where(sp => sp.Value.IsNothing())\r\n                                .Where(\r\n                                    sp =>\r\n                                        ((OptionSpecification)sp.Specification).SetName.Length > 0 && setCount == 1\r\n                                        || (setCount > 1\r\n                                            && !setWithRequired.Contains(\r\n                                                ((OptionSpecification)sp.Specification).SetName))))\r\n                        .Concat(\r\n                            specProps\r\n                                .Where(sp => sp.Specification.IsValue())\r\n                                .Where(sp => sp.Specification.Required)\r\n                                .Where(sp => sp.Value.IsNothing())).ToList()", span="61-80", cluster="lambda expression"];
n40 [label="Entry lambda expression", span="45-83", cluster="lambda expression"];
n46 [label="Entry Unk.Distinct", span="", cluster="Unk.Distinct"];
n47 [label="Entry Unk.ToList", span="", cluster="Unk.ToList"];
n49 [label="Entry lambda expression", span="48-48", cluster="lambda expression"];
n52 [label="Entry lambda expression", span="49-49", cluster="lambda expression"];
n87 [label="((OptionSpecification)sp.Specification).SetName.Length > 0 && setCount == 1\r\n                                        || (setCount > 1\r\n                                            && !setWithRequired.Contains(\r\n                                                ((OptionSpecification)sp.Specification).SetName))", span="72-75", cluster="lambda expression"];
n55 [label="Entry lambda expression", span="55-55", cluster="lambda expression"];
n58 [label="Entry lambda expression", span="56-56", cluster="lambda expression"];
n61 [label="Entry lambda expression", span="57-57", cluster="lambda expression"];
n44 [label="return missing.Select(sp => new MissingRequiredOptionError(sp.Specification.FromSpecification()));", span="82-82", cluster="lambda expression", color=red, community=0];
n48 [label="Entry Unk.Concat", span="", cluster="Unk.Concat"];
n64 [label="Entry lambda expression", span="62-62", cluster="lambda expression"];
n67 [label="Entry lambda expression", span="63-63", cluster="lambda expression"];
n70 [label="Entry lambda expression", span="64-64", cluster="lambda expression"];
n74 [label="Entry lambda expression", span="65-65", cluster="lambda expression"];
n77 [label="Entry lambda expression", span="67-67", cluster="lambda expression"];
n80 [label="Entry lambda expression", span="68-68", cluster="lambda expression"];
n83 [label="Entry lambda expression", span="69-69", cluster="lambda expression"];
n86 [label="Entry lambda expression", span="71-75", cluster="lambda expression"];
n90 [label="Entry lambda expression", span="78-78", cluster="lambda expression"];
n94 [label="Entry lambda expression", span="79-79", cluster="lambda expression"];
n97 [label="Entry lambda expression", span="80-80", cluster="lambda expression"];
n45 [label="Exit lambda expression", span="45-83", cluster="lambda expression"];
n100 [label="Entry lambda expression", span="82-82", cluster="lambda expression"];
n50 [label="sp.Specification.IsOption()", span="48-48", cluster="lambda expression"];
n51 [label="Exit lambda expression", span="48-48", cluster="lambda expression"];
n53 [label="((OptionSpecification)sp.Specification).SetName", span="49-49", cluster="lambda expression"];
n54 [label="Exit lambda expression", span="49-49", cluster="lambda expression"];
n56 [label="sp.Specification.IsOption()", span="55-55", cluster="lambda expression"];
n57 [label="Exit lambda expression", span="55-55", cluster="lambda expression"];
n59 [label="sp.Specification.Required", span="56-56", cluster="lambda expression"];
n60 [label="Exit lambda expression", span="56-56", cluster="lambda expression"];
n62 [label="((OptionSpecification)sp.Specification).SetName", span="57-57", cluster="lambda expression"];
n63 [label="Exit lambda expression", span="57-57", cluster="lambda expression"];
n65 [label="sp.Specification.IsOption()", span="62-62", cluster="lambda expression"];
n66 [label="Exit lambda expression", span="62-62", cluster="lambda expression"];
n68 [label="sp.Specification.Required", span="63-63", cluster="lambda expression"];
n69 [label="Exit lambda expression", span="63-63", cluster="lambda expression"];
n71 [label="sp.Value.IsNothing()", span="64-64", cluster="lambda expression"];
n72 [label="Exit lambda expression", span="64-64", cluster="lambda expression"];
n73 [label="Entry Unk.IsNothing", span="", cluster="Unk.IsNothing"];
n75 [label="((OptionSpecification)sp.Specification).SetName.Length == 0", span="65-65", cluster="lambda expression"];
n76 [label="Exit lambda expression", span="65-65", cluster="lambda expression"];
n78 [label="sp.Specification.IsOption()", span="67-67", cluster="lambda expression"];
n79 [label="Exit lambda expression", span="67-67", cluster="lambda expression"];
n81 [label="sp.Specification.Required", span="68-68", cluster="lambda expression"];
n82 [label="Exit lambda expression", span="68-68", cluster="lambda expression"];
n84 [label="sp.Value.IsNothing()", span="69-69", cluster="lambda expression"];
n85 [label="Exit lambda expression", span="69-69", cluster="lambda expression"];
n88 [label="Exit lambda expression", span="71-75", cluster="lambda expression"];
n89 [label="Entry Unk.Contains", span="", cluster="Unk.Contains"];
n91 [label="sp.Specification.IsValue()", span="78-78", cluster="lambda expression"];
n92 [label="Exit lambda expression", span="78-78", cluster="lambda expression"];
n93 [label="Entry CommandLine.Core.Specification.IsValue()", span="15-15", cluster="CommandLine.Core.Specification.IsValue()"];
n95 [label="sp.Specification.Required", span="79-79", cluster="lambda expression"];
n96 [label="Exit lambda expression", span="79-79", cluster="lambda expression"];
n98 [label="sp.Value.IsNothing()", span="80-80", cluster="lambda expression"];
n99 [label="Exit lambda expression", span="80-80", cluster="lambda expression"];
n101 [label="new MissingRequiredOptionError(sp.Specification.FromSpecification())", span="82-82", cluster="lambda expression", color=red, community=0];
n102 [label="Exit lambda expression", span="82-82", cluster="lambda expression"];
n103 [label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="291-291", cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)"];
n104 [label="Entry Unk.FromSpecification", span="", cluster="Unk.FromSpecification"];
n105 [label="return specProps =>\r\n                {\r\n                    var options = specProps\r\n                        .Where(sp => sp.Specification.TargetType == TargetType.Sequence)\r\n                        .Where(sp => sp.Value.IsJust())\r\n                        .Where(sp =>\r\n                            (sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min.FromJust())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max.FromJust())\r\n                        );\r\n                    if (options.Any())\r\n                    {\r\n                        return options.Select(s => new SequenceOutOfRangeError(\r\n                            s.Specification.FromSpecification()));\r\n                    }\r\n                    return Enumerable.Empty<Error>();\r\n                };", span="88-103", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", color=red, community=0];
n106 [label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="86-86", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()"];
n108 [label="var options = specProps\r\n                        .Where(sp => sp.Specification.TargetType == TargetType.Sequence)\r\n                        .Where(sp => sp.Value.IsJust())\r\n                        .Where(sp =>\r\n                            (sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min.FromJust())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max.FromJust())\r\n                        )", span="90-96", cluster="lambda expression"];
n107 [label="Entry lambda expression", span="88-103", cluster="lambda expression"];
n109 [label="options.Any()", span="97-97", cluster="lambda expression"];
n114 [label="Entry lambda expression", span="91-91", cluster="lambda expression"];
n117 [label="Entry lambda expression", span="92-92", cluster="lambda expression"];
n120 [label="Entry lambda expression", span="93-95", cluster="lambda expression"];
n110 [label="return options.Select(s => new SequenceOutOfRangeError(\r\n                            s.Specification.FromSpecification()));", span="99-100", cluster="lambda expression", color=red, community=2];
n111 [label="return Enumerable.Empty<Error>();", span="102-102", cluster="lambda expression"];
n113 [label="Entry Unk.Any", span="", cluster="Unk.Any"];
n112 [label="Exit lambda expression", span="88-103", cluster="lambda expression"];
n124 [label="Entry lambda expression", span="99-100", cluster="lambda expression"];
n115 [label="sp.Specification.TargetType == TargetType.Sequence", span="91-91", cluster="lambda expression"];
n116 [label="Exit lambda expression", span="91-91", cluster="lambda expression"];
n118 [label="sp.Value.IsJust()", span="92-92", cluster="lambda expression"];
n119 [label="Exit lambda expression", span="92-92", cluster="lambda expression"];
n121 [label="(sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min.FromJust())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max.FromJust())", span="94-95", cluster="lambda expression"];
n122 [label="Exit lambda expression", span="93-95", cluster="lambda expression"];
n123 [label="Entry Unk.FromJust", span="", cluster="Unk.FromJust"];
n125 [label="new SequenceOutOfRangeError(\r\n                            s.Specification.FromSpecification())", span="99-100", cluster="lambda expression", color=red, community=2];
n126 [label="Exit lambda expression", span="99-100", cluster="lambda expression"];
n127 [label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="324-324", cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)"];
n128 [label="return specProps =>\r\n                {\r\n                    var specs = from sp in specProps\r\n                                where sp.Specification.IsOption() && sp.Value.IsJust()\r\n                                select (OptionSpecification)sp.Specification;\r\n                    var options = from t in tokens.Where(t => t.IsName())\r\n                                  join o in specs on t.Text equals o.UniqueName() into to\r\n                                  from o in to.DefaultIfEmpty()\r\n                                  where o != null\r\n                                  select new { o.ShortName, o.LongName };\r\n                    var groups = from x in options\r\n                                 group x by x into g\r\n                                 let count = g.Count()\r\n                                 select new { Value = g.Key, Count = count };\r\n                    var errors = from y in groups\r\n                                 where y.Count > 1\r\n                                 select new RepeatedOptionError(new NameInfo(y.Value.ShortName, y.Value.LongName));\r\n                    return errors;\r\n                };", span="108-126", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)"];
n132 [label="var options = from t in tokens.Where(t => t.IsName())\r\n                                  join o in specs on t.Text equals o.UniqueName() into to\r\n                                  from o in to.DefaultIfEmpty()\r\n                                  where o != null\r\n                                  select new { o.ShortName, o.LongName }", span="113-117", cluster="lambda expression"];
n129 [label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="106-106", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)"];
n131 [label="var specs = from sp in specProps\r\n                                where sp.Specification.IsOption() && sp.Value.IsJust()\r\n                                select (OptionSpecification)sp.Specification", span="110-112", cluster="lambda expression"];
n130 [label="Entry lambda expression", span="108-126", cluster="lambda expression"];
n137 [label="Entry CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", span="149-149", cluster="CommandLine.Infrastructure.Maybe<T>.IsJust<T>()"];
n133 [label="var groups = from x in options\r\n                                 group x by x into g\r\n                                 let count = g.Count()\r\n                                 select new { Value = g.Key, Count = count }", span="118-121", cluster="lambda expression"];
n138 [label="Entry Unk.UniqueName", span="", cluster="Unk.UniqueName"];
n139 [label="Entry Unk.DefaultIfEmpty", span="", cluster="Unk.DefaultIfEmpty"];
n142 [label="Entry lambda expression", span="113-113", cluster="lambda expression"];
n134 [label="var errors = from y in groups\r\n                                 where y.Count > 1\r\n                                 select new RepeatedOptionError(new NameInfo(y.Value.ShortName, y.Value.LongName))", span="122-124", cluster="lambda expression"];
n135 [label="return errors;", span="125-125", cluster="lambda expression"];
n140 [label="Entry CommandLine.RepeatedOptionError.RepeatedOptionError(CommandLine.NameInfo)", span="335-335", cluster="CommandLine.RepeatedOptionError.RepeatedOptionError(CommandLine.NameInfo)"];
n141 [label="Entry NameInfo.cstr", span="", cluster="NameInfo.cstr"];
n136 [label="Exit lambda expression", span="108-126", cluster="lambda expression"];
n143 [label="t.IsName()", span="113-113", cluster="lambda expression"];
n144 [label="Exit lambda expression", span="113-113", cluster="lambda expression"];
n145 [label="Entry CommandLine.Core.Token.IsName()", span="68-68", cluster="CommandLine.Core.Token.IsName()"];
d1 [label="Assert.Equal(plural, singular.Pluralize())", span="38-38", cluster="Humanizer.Tests.InflectorTests.Pluralize(string, string)", color=green, community=0];
d0 [label="Entry Humanizer.Tests.InflectorTests.Pluralize(string, string)", span="36-36", cluster="Humanizer.Tests.InflectorTests.Pluralize(string, string)"];
d2 [label="Exit Humanizer.Tests.InflectorTests.Pluralize(string, string)", span="36-36", cluster="Humanizer.Tests.InflectorTests.Pluralize(string, string)"];
d3 [label="Entry string.Pluralize(Humanizer.Plurality)", span="170-170", cluster="string.Pluralize(Humanizer.Plurality)"];
d4 [label="Entry Unk.Equal", span="", cluster="Unk.Equal"];
d6 [label="Assert.Equal(plural, plural.Pluralize(Plurality.Plural))", span="45-45", cluster="Humanizer.Tests.InflectorTests.PluralizeAlreadyPluralWord(string, string)"];
d9 [label="Assert.Equal(plural, plural.Pluralize(Plurality.CouldBeEither))", span="52-52", cluster="Humanizer.Tests.InflectorTests.PluralizeWordsWithUnknownPlurality(string, string)"];
d10 [label="Assert.Equal(plural, singular.Pluralize(Plurality.CouldBeEither))", span="53-53", cluster="Humanizer.Tests.InflectorTests.PluralizeWordsWithUnknownPlurality(string, string)"];
d13 [label="Assert.Equal(singular, plural.Singularize())", span="60-60", cluster="Humanizer.Tests.InflectorTests.Singularize(string, string)"];
d17 [label="Assert.Equal(singular, singular.Singularize(Plurality.Singular))", span="67-67", cluster="Humanizer.Tests.InflectorTests.SingularizeAlreadySingularWord(string, string)"];
d20 [label="Assert.Equal(singular, singular.Singularize(Plurality.CouldBeEither))", span="74-74", cluster="Humanizer.Tests.InflectorTests.SingularizeWordsWithUnknownSingularity(string, string)"];
d21 [label="Assert.Equal(singular, plural.Singularize(Plurality.CouldBeEither))", span="75-75", cluster="Humanizer.Tests.InflectorTests.SingularizeWordsWithUnknownSingularity(string, string)"];
d24 [label="Assert.Equal(expectedOuput, input.Titleize())", span="88-88", cluster="Humanizer.Tests.InflectorTests.Titleize(string, string)"];
d28 [label="Assert.Equal(input.Dasherize(), expectedOutput)", span="98-98", cluster="Humanizer.Tests.InflectorTests.Dasherize(string, string)"];
d32 [label="Assert.Equal(input.Hyphenate(), expectedOutput)", span="108-108", cluster="Humanizer.Tests.InflectorTests.Hyphenate(string, string)"];
d36 [label="Assert.Equal(expectedOutput, input.Pascalize())", span="121-121", cluster="Humanizer.Tests.InflectorTests.Pascalize(string, string)"];
d40 [label="Assert.Equal(expectedOutput, input.Camelize())", span="135-135", cluster="Humanizer.Tests.InflectorTests.Camelize(string, string)"];
d44 [label="Assert.Equal(expectedOuput, input.Underscore())", span="148-148", cluster="Humanizer.Tests.InflectorTests.Underscore(string, string)"];
d5 [label="Entry Humanizer.Tests.InflectorTests.PluralizeAlreadyPluralWord(string, string)", span="43-43", cluster="Humanizer.Tests.InflectorTests.PluralizeAlreadyPluralWord(string, string)"];
d7 [label="Exit Humanizer.Tests.InflectorTests.PluralizeAlreadyPluralWord(string, string)", span="43-43", cluster="Humanizer.Tests.InflectorTests.PluralizeAlreadyPluralWord(string, string)"];
d8 [label="Entry Humanizer.Tests.InflectorTests.PluralizeWordsWithUnknownPlurality(string, string)", span="50-50", cluster="Humanizer.Tests.InflectorTests.PluralizeWordsWithUnknownPlurality(string, string)"];
d11 [label="Exit Humanizer.Tests.InflectorTests.PluralizeWordsWithUnknownPlurality(string, string)", span="50-50", cluster="Humanizer.Tests.InflectorTests.PluralizeWordsWithUnknownPlurality(string, string)"];
d12 [label="Entry Humanizer.Tests.InflectorTests.Singularize(string, string)", span="58-58", cluster="Humanizer.Tests.InflectorTests.Singularize(string, string)"];
d14 [label="Exit Humanizer.Tests.InflectorTests.Singularize(string, string)", span="58-58", cluster="Humanizer.Tests.InflectorTests.Singularize(string, string)"];
d15 [label="Entry string.Singularize(Humanizer.Plurality)", span="194-194", cluster="string.Singularize(Humanizer.Plurality)"];
d16 [label="Entry Humanizer.Tests.InflectorTests.SingularizeAlreadySingularWord(string, string)", span="65-65", cluster="Humanizer.Tests.InflectorTests.SingularizeAlreadySingularWord(string, string)"];
d18 [label="Exit Humanizer.Tests.InflectorTests.SingularizeAlreadySingularWord(string, string)", span="65-65", cluster="Humanizer.Tests.InflectorTests.SingularizeAlreadySingularWord(string, string)"];
d19 [label="Entry Humanizer.Tests.InflectorTests.SingularizeWordsWithUnknownSingularity(string, string)", span="72-72", cluster="Humanizer.Tests.InflectorTests.SingularizeWordsWithUnknownSingularity(string, string)"];
d22 [label="Exit Humanizer.Tests.InflectorTests.SingularizeWordsWithUnknownSingularity(string, string)", span="72-72", cluster="Humanizer.Tests.InflectorTests.SingularizeWordsWithUnknownSingularity(string, string)"];
d23 [label="Entry Humanizer.Tests.InflectorTests.Titleize(string, string)", span="86-86", cluster="Humanizer.Tests.InflectorTests.Titleize(string, string)"];
d25 [label="Exit Humanizer.Tests.InflectorTests.Titleize(string, string)", span="86-86", cluster="Humanizer.Tests.InflectorTests.Titleize(string, string)"];
d26 [label="Entry string.Titleize()", span="239-239", cluster="string.Titleize()"];
d27 [label="Entry Humanizer.Tests.InflectorTests.Dasherize(string, string)", span="96-96", cluster="Humanizer.Tests.InflectorTests.Dasherize(string, string)"];
d29 [label="Exit Humanizer.Tests.InflectorTests.Dasherize(string, string)", span="96-96", cluster="Humanizer.Tests.InflectorTests.Dasherize(string, string)"];
d30 [label="Entry string.Dasherize()", span="282-282", cluster="string.Dasherize()"];
d31 [label="Entry Humanizer.Tests.InflectorTests.Hyphenate(string, string)", span="106-106", cluster="Humanizer.Tests.InflectorTests.Hyphenate(string, string)"];
d33 [label="Exit Humanizer.Tests.InflectorTests.Hyphenate(string, string)", span="106-106", cluster="Humanizer.Tests.InflectorTests.Hyphenate(string, string)"];
d34 [label="Entry string.Hyphenate()", span="292-292", cluster="string.Hyphenate()"];
d35 [label="Entry Humanizer.Tests.InflectorTests.Pascalize(string, string)", span="119-119", cluster="Humanizer.Tests.InflectorTests.Pascalize(string, string)"];
d37 [label="Exit Humanizer.Tests.InflectorTests.Pascalize(string, string)", span="119-119", cluster="Humanizer.Tests.InflectorTests.Pascalize(string, string)"];
d38 [label="Entry string.Pascalize()", span="249-249", cluster="string.Pascalize()"];
d39 [label="Entry Humanizer.Tests.InflectorTests.Camelize(string, string)", span="133-133", cluster="Humanizer.Tests.InflectorTests.Camelize(string, string)"];
d41 [label="Exit Humanizer.Tests.InflectorTests.Camelize(string, string)", span="133-133", cluster="Humanizer.Tests.InflectorTests.Camelize(string, string)"];
d42 [label="Entry string.Camelize()", span="259-259", cluster="string.Camelize()"];
d43 [label="Entry Humanizer.Tests.InflectorTests.Underscore(string, string)", span="146-146", cluster="Humanizer.Tests.InflectorTests.Underscore(string, string)"];
d45 [label="Exit Humanizer.Tests.InflectorTests.Underscore(string, string)", span="146-146", cluster="Humanizer.Tests.InflectorTests.Underscore(string, string)"];
d46 [label="Entry string.Underscore()", span="270-270", cluster="string.Underscore()"];
n146 -> n87  [key=1, style=dashed, color=darkseagreen4, label=setCount];
n147 -> n87  [key=1, style=dashed, color=darkseagreen4, label=setWithRequired];
n148 -> n132  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=2, style=dotted];
n1 -> n4  [key=2, style=dotted];
n1 -> n5  [key=2, style=dotted];
n1 -> n6  [key=2, style=dotted];
n1 -> n7  [key=2, style=dotted];
n2 -> n0  [key=0, style=bold, color=blue];
n4 -> n8  [key=0, style=solid, color=red];
n5 -> n38  [key=0, style=solid, color=red];
n6 -> n105  [key=0, style=solid, color=red];
n7 -> n128  [key=0, style=solid];
n7 -> n132  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
n8 -> n9  [key=0, style=solid, color=red];
n8 -> n11  [key=1, style=dashed, color=red, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
n9 -> n4  [key=0, style=bold, color=blue];
n11 -> n12  [key=0, style=solid, color=red];
n11 -> n17  [key=2, style=dotted, color=red];
n11 -> n22  [key=1, style=dashed, color=red, label="lambda expression"];
n11 -> n26  [key=1, style=dashed, color=red, label="lambda expression"];
n11 -> n14  [key=1, style=dashed, color=red, label=options];
n10 -> n11  [key=0, style=solid, color=red];
n12 -> n13  [key=0, style=solid];
n12 -> n18  [key=2, style=dotted];
n12 -> n30  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n22 -> n23  [key=0, style=solid, color=red];
n26 -> n27  [key=0, style=solid, color=red];
n14 -> n16  [key=0, style=solid, color=red];
n14 -> n20  [key=2, style=dotted, color=red];
n14 -> n33  [key=1, style=dashed, color=red, label="lambda expression"];
n13 -> n14  [key=0, style=solid, color=red];
n13 -> n15  [key=0, style=solid];
n13 -> n19  [key=2, style=dotted];
n30 -> n31  [key=0, style=solid];
n15 -> n16  [key=0, style=solid];
n15 -> n21  [key=2, style=dotted];
n16 -> n10  [key=0, style=bold, color=blue];
n33 -> n34  [key=0, style=solid, color=red];
n23 -> n24  [key=0, style=solid, color=red];
n23 -> n25  [key=2, style=dotted, color=red];
n24 -> n22  [key=0, style=bold, color=blue];
n27 -> n28  [key=0, style=solid, color=red];
n27 -> n29  [key=2, style=dotted, color=red];
n28 -> n26  [key=0, style=bold, color=blue];
n31 -> n32  [key=0, style=solid];
n32 -> n30  [key=0, style=bold, color=blue];
n34 -> n35  [key=0, style=solid, color=red];
n34 -> n36  [key=2, style=dotted, color=red];
n34 -> n37  [key=2, style=dotted, color=red];
n35 -> n33  [key=0, style=bold, color=blue];
n38 -> n39  [key=0, style=solid, color=red];
n38 -> n41  [key=1, style=dashed, color=red, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
n38 -> n42  [key=1, style=dashed, color=red, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
n38 -> n43  [key=1, style=dashed, color=red, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
n39 -> n5  [key=0, style=bold, color=blue];
n41 -> n42  [key=0, style=solid];
n41 -> n17  [key=2, style=dotted];
n41 -> n20  [key=2, style=dotted];
n41 -> n46  [key=2, style=dotted];
n41 -> n47  [key=2, style=dotted];
n41 -> n19  [key=2, style=dotted];
n41 -> n49  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n41 -> n52  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n41 -> n43  [key=1, style=dashed, color=darkseagreen4, label=setCount];
n41 -> n87  [key=1, style=dashed, color=darkseagreen4, label=setCount];
n42 -> n43  [key=0, style=solid];
n42 -> n17  [key=2, style=dotted];
n42 -> n20  [key=2, style=dotted];
n42 -> n46  [key=2, style=dotted];
n42 -> n47  [key=2, style=dotted];
n42 -> n55  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n42 -> n58  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n42 -> n61  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n42 -> n87  [key=1, style=dashed, color=darkseagreen4, label=setWithRequired];
n43 -> n44  [key=0, style=solid, color=red];
n43 -> n17  [key=2, style=dotted];
n43 -> n48  [key=2, style=dotted];
n43 -> n47  [key=2, style=dotted];
n43 -> n64  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n43 -> n67  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n43 -> n70  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n43 -> n74  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n43 -> n77  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n43 -> n80  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n43 -> n83  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n43 -> n86  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n43 -> n90  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n43 -> n94  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n43 -> n97  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n40 -> n41  [key=0, style=solid];
n40 -> n42  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
n40 -> n43  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
n49 -> n50  [key=0, style=solid];
n52 -> n53  [key=0, style=solid];
n87 -> n88  [key=0, style=solid];
n87 -> n89  [key=2, style=dotted];
n55 -> n56  [key=0, style=solid];
n58 -> n59  [key=0, style=solid];
n61 -> n62  [key=0, style=solid];
n44 -> n45  [key=0, style=solid, color=red];
n44 -> n20  [key=2, style=dotted, color=red];
n44 -> n100  [key=1, style=dashed, color=red, label="lambda expression"];
n64 -> n65  [key=0, style=solid];
n67 -> n68  [key=0, style=solid];
n70 -> n71  [key=0, style=solid];
n74 -> n75  [key=0, style=solid];
n77 -> n78  [key=0, style=solid];
n80 -> n81  [key=0, style=solid];
n83 -> n84  [key=0, style=solid];
n86 -> n87  [key=0, style=solid];
n90 -> n91  [key=0, style=solid];
n94 -> n95  [key=0, style=solid];
n97 -> n98  [key=0, style=solid];
n45 -> n40  [key=0, style=bold, color=blue];
n100 -> n101  [key=0, style=solid, color=red];
n50 -> n51  [key=0, style=solid];
n50 -> n25  [key=2, style=dotted];
n51 -> n49  [key=0, style=bold, color=blue];
n53 -> n54  [key=0, style=solid];
n54 -> n52  [key=0, style=bold, color=blue];
n56 -> n57  [key=0, style=solid];
n56 -> n25  [key=2, style=dotted];
n57 -> n55  [key=0, style=bold, color=blue];
n59 -> n60  [key=0, style=solid];
n60 -> n58  [key=0, style=bold, color=blue];
n62 -> n63  [key=0, style=solid];
n63 -> n61  [key=0, style=bold, color=blue];
n65 -> n66  [key=0, style=solid];
n65 -> n25  [key=2, style=dotted];
n66 -> n64  [key=0, style=bold, color=blue];
n68 -> n69  [key=0, style=solid];
n69 -> n67  [key=0, style=bold, color=blue];
n71 -> n72  [key=0, style=solid];
n71 -> n73  [key=2, style=dotted];
n72 -> n70  [key=0, style=bold, color=blue];
n75 -> n76  [key=0, style=solid];
n76 -> n74  [key=0, style=bold, color=blue];
n78 -> n79  [key=0, style=solid];
n78 -> n25  [key=2, style=dotted];
n79 -> n77  [key=0, style=bold, color=blue];
n81 -> n82  [key=0, style=solid];
n82 -> n80  [key=0, style=bold, color=blue];
n84 -> n85  [key=0, style=solid];
n84 -> n73  [key=2, style=dotted];
n85 -> n83  [key=0, style=bold, color=blue];
n88 -> n86  [key=0, style=bold, color=blue];
n91 -> n92  [key=0, style=solid];
n91 -> n93  [key=2, style=dotted];
n92 -> n90  [key=0, style=bold, color=blue];
n95 -> n96  [key=0, style=solid];
n96 -> n94  [key=0, style=bold, color=blue];
n98 -> n99  [key=0, style=solid];
n98 -> n73  [key=2, style=dotted];
n99 -> n97  [key=0, style=bold, color=blue];
n101 -> n102  [key=0, style=solid, color=red];
n101 -> n103  [key=2, style=dotted, color=red];
n101 -> n104  [key=2, style=dotted, color=red];
n102 -> n100  [key=0, style=bold, color=blue];
n105 -> n106  [key=0, style=solid, color=red];
n105 -> n108  [key=1, style=dashed, color=red, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
n106 -> n6  [key=0, style=bold, color=blue];
n108 -> n109  [key=0, style=solid];
n108 -> n17  [key=2, style=dotted];
n108 -> n114  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n108 -> n117  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n108 -> n120  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n108 -> n110  [key=1, style=dashed, color=red, label=options];
n107 -> n108  [key=0, style=solid];
n109 -> n110  [key=0, style=solid, color=red];
n109 -> n111  [key=0, style=solid];
n109 -> n113  [key=2, style=dotted];
n114 -> n115  [key=0, style=solid];
n117 -> n118  [key=0, style=solid];
n120 -> n121  [key=0, style=solid];
n110 -> n112  [key=0, style=solid, color=red];
n110 -> n20  [key=2, style=dotted, color=red];
n110 -> n124  [key=1, style=dashed, color=red, label="lambda expression"];
n111 -> n112  [key=0, style=solid];
n111 -> n21  [key=2, style=dotted];
n112 -> n107  [key=0, style=bold, color=blue];
n124 -> n125  [key=0, style=solid, color=red];
n115 -> n116  [key=0, style=solid];
n116 -> n114  [key=0, style=bold, color=blue];
n118 -> n119  [key=0, style=solid];
n118 -> n29  [key=2, style=dotted];
n119 -> n117  [key=0, style=bold, color=blue];
n121 -> n122  [key=0, style=solid];
n121 -> n29  [key=2, style=dotted];
n121 -> n123  [key=2, style=dotted];
n122 -> n120  [key=0, style=bold, color=blue];
n125 -> n126  [key=0, style=solid, color=red];
n125 -> n127  [key=2, style=dotted, color=red];
n125 -> n104  [key=2, style=dotted, color=red];
n126 -> n124  [key=0, style=bold, color=blue];
n128 -> n129  [key=0, style=solid];
n128 -> n131  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
n128 -> n128  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Collections.Generic.IEnumerable<CommandLine.Error> "];
n132 -> n133  [key=0, style=solid];
n132 -> n17  [key=2, style=dotted];
n132 -> n138  [key=2, style=dotted];
n132 -> n139  [key=2, style=dotted];
n132 -> n142  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n132 -> n132  [key=1, style=dashed, color=darkseagreen4, label=t];
n129 -> n7  [key=0, style=bold, color=blue];
n131 -> n132  [key=0, style=solid];
n131 -> n25  [key=2, style=dotted];
n131 -> n137  [key=2, style=dotted];
n131 -> n131  [key=1, style=dashed, color=darkseagreen4, label=sp];
n130 -> n131  [key=0, style=solid];
n133 -> n134  [key=0, style=solid];
n133 -> n19  [key=2, style=dotted];
n133 -> n133  [key=1, style=dashed, color=darkseagreen4, label=x];
n142 -> n143  [key=0, style=solid];
n134 -> n135  [key=0, style=solid];
n134 -> n140  [key=2, style=dotted];
n134 -> n141  [key=2, style=dotted];
n134 -> n134  [key=1, style=dashed, color=darkseagreen4, label=y];
n135 -> n136  [key=0, style=solid];
n136 -> n130  [key=0, style=bold, color=blue];
n143 -> n144  [key=0, style=solid];
n143 -> n145  [key=2, style=dotted];
n144 -> n142  [key=0, style=bold, color=blue];
d1 -> d2  [key=0, style=solid, color=green];
d1 -> d3  [key=2, style=dotted, color=green];
d1 -> d4  [key=2, style=dotted, color=green];
d0 -> d1  [key=0, style=solid, color=green];
d2 -> d0  [key=0, style=bold, color=blue];
d6 -> d3  [key=2, style=dotted];
d6 -> d4  [key=2, style=dotted];
d6 -> d7  [key=0, style=solid];
d9 -> d3  [key=2, style=dotted];
d9 -> d4  [key=2, style=dotted];
d9 -> d10  [key=0, style=solid];
d10 -> d3  [key=2, style=dotted];
d10 -> d4  [key=2, style=dotted];
d10 -> d11  [key=0, style=solid];
d13 -> d4  [key=2, style=dotted];
d13 -> d14  [key=0, style=solid];
d13 -> d15  [key=2, style=dotted];
d17 -> d4  [key=2, style=dotted];
d17 -> d18  [key=0, style=solid];
d17 -> d15  [key=2, style=dotted];
d20 -> d4  [key=2, style=dotted];
d20 -> d21  [key=0, style=solid];
d20 -> d15  [key=2, style=dotted];
d21 -> d4  [key=2, style=dotted];
d21 -> d22  [key=0, style=solid];
d21 -> d15  [key=2, style=dotted];
d24 -> d4  [key=2, style=dotted];
d24 -> d25  [key=0, style=solid];
d24 -> d26  [key=2, style=dotted];
d28 -> d4  [key=2, style=dotted];
d28 -> d29  [key=0, style=solid];
d28 -> d30  [key=2, style=dotted];
d32 -> d4  [key=2, style=dotted];
d32 -> d33  [key=0, style=solid];
d32 -> d34  [key=2, style=dotted];
d36 -> d4  [key=2, style=dotted];
d36 -> d37  [key=0, style=solid];
d36 -> d38  [key=2, style=dotted];
d40 -> d4  [key=2, style=dotted];
d40 -> d41  [key=0, style=solid];
d40 -> d42  [key=2, style=dotted];
d44 -> d4  [key=2, style=dotted];
d44 -> d45  [key=0, style=solid];
d44 -> d46  [key=2, style=dotted];
d5 -> d6  [key=0, style=solid];
d7 -> d5  [key=0, style=bold, color=blue];
d8 -> d9  [key=0, style=solid];
d8 -> d10  [key=1, style=dashed, color=darkseagreen4, label=string];
d11 -> d8  [key=0, style=bold, color=blue];
d12 -> d13  [key=0, style=solid];
d14 -> d12  [key=0, style=bold, color=blue];
d16 -> d17  [key=0, style=solid];
d18 -> d16  [key=0, style=bold, color=blue];
d19 -> d20  [key=0, style=solid];
d19 -> d21  [key=1, style=dashed, color=darkseagreen4, label=string];
d22 -> d19  [key=0, style=bold, color=blue];
d23 -> d24  [key=0, style=solid];
d25 -> d23  [key=0, style=bold, color=blue];
d27 -> d28  [key=0, style=solid];
d29 -> d27  [key=0, style=bold, color=blue];
d31 -> d32  [key=0, style=solid];
d33 -> d31  [key=0, style=bold, color=blue];
d35 -> d36  [key=0, style=solid];
d37 -> d35  [key=0, style=bold, color=blue];
d39 -> d40  [key=0, style=solid];
d41 -> d39  [key=0, style=bold, color=blue];
d43 -> d44  [key=0, style=solid];
d45 -> d43  [key=0, style=bold, color=blue];
}
