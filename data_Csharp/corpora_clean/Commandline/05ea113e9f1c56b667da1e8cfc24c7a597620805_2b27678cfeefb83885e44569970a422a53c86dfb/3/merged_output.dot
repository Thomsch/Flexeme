digraph  {
n146 [label=setCount, span=""];
n147 [label=setWithRequired, span=""];
n148 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", span=""];
n0 [cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", label="Entry CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12"];
n1 [cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", label="return new List<Func<IEnumerable<SpecificationProperty>, IEnumerable<Error>>>\r\n                {\r\n                    EnforceMutuallyExclusiveSet(),\r\n                    EnforceRequired(),\r\n                    EnforceRange(),\r\n                    EnforceSingle(tokens)\r\n                };", span="15-21"];
n2 [cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", label="Exit CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12"];
n3 [cluster="System.Collections.Generic.List<T>.List()", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
n4 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="24-24"];
n5 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="43-43"];
n6 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="86-86"];
n7 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="106-106"];
n8 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", color=red, community=0, label="1: return specProps =>\r\n                {\r\n                    var options = specProps\r\n                            .Where(sp => sp.Specification.IsOption())\r\n                            .Where(sp => ((OptionSpecification)sp.Specification).SetName.Length > 0\r\n                                   && sp.Value.IsJust());\r\n                    var groups = options.GroupBy(g => ((OptionSpecification)g.Specification).SetName);\r\n                    if (groups.Count() > 1)\r\n                    {\r\n                        return options.Select(s =>\r\n                            new MutuallyExclusiveSetError(\r\n                                ((OptionSpecification)s.Specification).FromOptionSpecification()));\r\n                    }\r\n                    return Enumerable.Empty<Error>();\r\n                };", span="26-40"];
n9 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="24-24"];
n11 [cluster="lambda expression", color=red, community=0, label="0: var options = specProps\r\n                            .Where(sp => sp.Specification.IsOption())\r\n                            .Where(sp => ((OptionSpecification)sp.Specification).SetName.Length > 0\r\n                                   && sp.Value.IsJust())", span="28-31"];
n10 [cluster="lambda expression", label="Entry lambda expression", span="26-40"];
n12 [cluster="lambda expression", label="var groups = options.GroupBy(g => ((OptionSpecification)g.Specification).SetName)", span="32-32"];
n17 [cluster="Unk.Where", label="Entry Unk.Where", span=""];
n22 [cluster="lambda expression", label="Entry lambda expression", span="29-29"];
n26 [cluster="lambda expression", label="Entry lambda expression", span="30-31"];
n14 [cluster="lambda expression", color=red, community=1, label="0: return options.Select(s =>\r\n                            new MutuallyExclusiveSetError(\r\n                                ((OptionSpecification)s.Specification).FromOptionSpecification()));", span="35-37"];
n13 [cluster="lambda expression", label="groups.Count() > 1", span="33-33"];
n18 [cluster="Unk.GroupBy", label="Entry Unk.GroupBy", span=""];
n30 [cluster="lambda expression", label="Entry lambda expression", span="32-32"];
n15 [cluster="lambda expression", label="return Enumerable.Empty<Error>();", span="39-39"];
n19 [cluster="Unk.Count", label="Entry Unk.Count", span=""];
n16 [cluster="lambda expression", label="Exit lambda expression", span="26-40"];
n21 [cluster="System.Linq.Enumerable.Empty<TResult>()", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
n20 [cluster="Unk.Select", label="Entry Unk.Select", span=""];
n33 [cluster="lambda expression", label="Entry lambda expression", span="35-37"];
n23 [cluster="lambda expression", color=red, community=0, label="0: sp.Specification.IsOption()", span="29-29"];
n24 [cluster="lambda expression", label="Exit lambda expression", span="29-29"];
n25 [cluster="CommandLine.Core.Specification.IsOption()", label="Entry CommandLine.Core.Specification.IsOption()", span="10-10"];
n27 [cluster="lambda expression", color=red, community=0, label="0: ((OptionSpecification)sp.Specification).SetName.Length > 0\r\n                                   && sp.Value.IsJust()", span="30-31"];
n28 [cluster="lambda expression", label="Exit lambda expression", span="30-31"];
n29 [cluster="Unk.IsJust", label="Entry Unk.IsJust", span=""];
n31 [cluster="lambda expression", label="((OptionSpecification)g.Specification).SetName", span="32-32"];
n32 [cluster="lambda expression", label="Exit lambda expression", span="32-32"];
n34 [cluster="lambda expression", color=red, community=1, label="0: new MutuallyExclusiveSetError(\r\n                                ((OptionSpecification)s.Specification).FromOptionSpecification())", span="36-37"];
n35 [cluster="lambda expression", label="Exit lambda expression", span="35-37"];
n36 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="302-302"];
n37 [cluster="CommandLine.Core.OptionSpecification.FromOptionSpecification()", label="Entry CommandLine.Core.OptionSpecification.FromOptionSpecification()", span="15-15"];
n38 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", color=red, community=0, label="2: return specProps =>\r\n            {\r\n                var setCount =\r\n                    specProps.Where(sp => sp.Specification.IsOption())\r\n                        .Select(sp => ((OptionSpecification)sp.Specification).SetName)\r\n                        .Distinct()\r\n                        .ToList()\r\n                        .Count();\r\n\r\n                var setWithRequired =\r\n                    specProps.Where(sp => sp.Specification.IsOption())\r\n                        .Where(sp => sp.Specification.Required)\r\n                        .Select(sp => ((OptionSpecification)sp.Specification).SetName)\r\n                        .Distinct()\r\n                        .ToList();\r\n\r\n                var missing =\r\n                    specProps.Where(sp => sp.Specification.IsOption())\r\n                        .Where(sp => sp.Specification.Required)\r\n                        .Where(sp => sp.Value.IsNothing())\r\n                        .Where(sp => ((OptionSpecification)sp.Specification).SetName.Length == 0)\r\n                        .Concat(\r\n                            specProps.Where(sp => sp.Specification.IsOption())\r\n                                .Where(sp => sp.Specification.Required)\r\n                                .Where(sp => sp.Value.IsNothing())\r\n                                .Where(\r\n                                    sp =>\r\n                                        ((OptionSpecification)sp.Specification).SetName.Length > 0 && setCount == 1\r\n                                        || (setCount > 1\r\n                                            && !setWithRequired.Contains(\r\n                                                ((OptionSpecification)sp.Specification).SetName))))\r\n                        .Concat(\r\n                            specProps\r\n                                .Where(sp => sp.Specification.IsValue())\r\n                                .Where(sp => sp.Specification.Required)\r\n                                .Where(sp => sp.Value.IsNothing())).ToList();\r\n\r\n                return missing.Select(sp => new MissingRequiredOptionError(sp.Specification.FromSpecification()));\r\n            };", span="45-83"];
n39 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="43-43"];
n41 [cluster="lambda expression", label="var setCount =\r\n                    specProps.Where(sp => sp.Specification.IsOption())\r\n                        .Select(sp => ((OptionSpecification)sp.Specification).SetName)\r\n                        .Distinct()\r\n                        .ToList()\r\n                        .Count()", span="47-52"];
n42 [cluster="lambda expression", label="var setWithRequired =\r\n                    specProps.Where(sp => sp.Specification.IsOption())\r\n                        .Where(sp => sp.Specification.Required)\r\n                        .Select(sp => ((OptionSpecification)sp.Specification).SetName)\r\n                        .Distinct()\r\n                        .ToList()", span="54-59"];
n43 [cluster="lambda expression", label="var missing =\r\n                    specProps.Where(sp => sp.Specification.IsOption())\r\n                        .Where(sp => sp.Specification.Required)\r\n                        .Where(sp => sp.Value.IsNothing())\r\n                        .Where(sp => ((OptionSpecification)sp.Specification).SetName.Length == 0)\r\n                        .Concat(\r\n                            specProps.Where(sp => sp.Specification.IsOption())\r\n                                .Where(sp => sp.Specification.Required)\r\n                                .Where(sp => sp.Value.IsNothing())\r\n                                .Where(\r\n                                    sp =>\r\n                                        ((OptionSpecification)sp.Specification).SetName.Length > 0 && setCount == 1\r\n                                        || (setCount > 1\r\n                                            && !setWithRequired.Contains(\r\n                                                ((OptionSpecification)sp.Specification).SetName))))\r\n                        .Concat(\r\n                            specProps\r\n                                .Where(sp => sp.Specification.IsValue())\r\n                                .Where(sp => sp.Specification.Required)\r\n                                .Where(sp => sp.Value.IsNothing())).ToList()", span="61-80"];
n40 [cluster="lambda expression", label="Entry lambda expression", span="45-83"];
n46 [cluster="Unk.Distinct", label="Entry Unk.Distinct", span=""];
n47 [cluster="Unk.ToList", label="Entry Unk.ToList", span=""];
n49 [cluster="lambda expression", label="Entry lambda expression", span="48-48"];
n52 [cluster="lambda expression", label="Entry lambda expression", span="49-49"];
n87 [cluster="lambda expression", label="((OptionSpecification)sp.Specification).SetName.Length > 0 && setCount == 1\r\n                                        || (setCount > 1\r\n                                            && !setWithRequired.Contains(\r\n                                                ((OptionSpecification)sp.Specification).SetName))", span="72-75"];
n55 [cluster="lambda expression", label="Entry lambda expression", span="55-55"];
n58 [cluster="lambda expression", label="Entry lambda expression", span="56-56"];
n61 [cluster="lambda expression", label="Entry lambda expression", span="57-57"];
n44 [cluster="lambda expression", color=red, community=0, label="0: return missing.Select(sp => new MissingRequiredOptionError(sp.Specification.FromSpecification()));", span="82-82"];
n48 [cluster="Unk.Concat", label="Entry Unk.Concat", span=""];
n64 [cluster="lambda expression", label="Entry lambda expression", span="62-62"];
n67 [cluster="lambda expression", label="Entry lambda expression", span="63-63"];
n70 [cluster="lambda expression", label="Entry lambda expression", span="64-64"];
n74 [cluster="lambda expression", label="Entry lambda expression", span="65-65"];
n77 [cluster="lambda expression", label="Entry lambda expression", span="67-67"];
n80 [cluster="lambda expression", label="Entry lambda expression", span="68-68"];
n83 [cluster="lambda expression", label="Entry lambda expression", span="69-69"];
n86 [cluster="lambda expression", label="Entry lambda expression", span="71-75"];
n90 [cluster="lambda expression", label="Entry lambda expression", span="78-78"];
n94 [cluster="lambda expression", label="Entry lambda expression", span="79-79"];
n97 [cluster="lambda expression", label="Entry lambda expression", span="80-80"];
n45 [cluster="lambda expression", label="Exit lambda expression", span="45-83"];
n100 [cluster="lambda expression", label="Entry lambda expression", span="82-82"];
n50 [cluster="lambda expression", label="sp.Specification.IsOption()", span="48-48"];
n51 [cluster="lambda expression", label="Exit lambda expression", span="48-48"];
n53 [cluster="lambda expression", label="((OptionSpecification)sp.Specification).SetName", span="49-49"];
n54 [cluster="lambda expression", label="Exit lambda expression", span="49-49"];
n56 [cluster="lambda expression", label="sp.Specification.IsOption()", span="55-55"];
n57 [cluster="lambda expression", label="Exit lambda expression", span="55-55"];
n59 [cluster="lambda expression", label="sp.Specification.Required", span="56-56"];
n60 [cluster="lambda expression", label="Exit lambda expression", span="56-56"];
n62 [cluster="lambda expression", label="((OptionSpecification)sp.Specification).SetName", span="57-57"];
n63 [cluster="lambda expression", label="Exit lambda expression", span="57-57"];
n65 [cluster="lambda expression", label="sp.Specification.IsOption()", span="62-62"];
n66 [cluster="lambda expression", label="Exit lambda expression", span="62-62"];
n68 [cluster="lambda expression", label="sp.Specification.Required", span="63-63"];
n69 [cluster="lambda expression", label="Exit lambda expression", span="63-63"];
n71 [cluster="lambda expression", label="sp.Value.IsNothing()", span="64-64"];
n72 [cluster="lambda expression", label="Exit lambda expression", span="64-64"];
n73 [cluster="Unk.IsNothing", label="Entry Unk.IsNothing", span=""];
n75 [cluster="lambda expression", label="((OptionSpecification)sp.Specification).SetName.Length == 0", span="65-65"];
n76 [cluster="lambda expression", label="Exit lambda expression", span="65-65"];
n78 [cluster="lambda expression", label="sp.Specification.IsOption()", span="67-67"];
n79 [cluster="lambda expression", label="Exit lambda expression", span="67-67"];
n81 [cluster="lambda expression", label="sp.Specification.Required", span="68-68"];
n82 [cluster="lambda expression", label="Exit lambda expression", span="68-68"];
n84 [cluster="lambda expression", label="sp.Value.IsNothing()", span="69-69"];
n85 [cluster="lambda expression", label="Exit lambda expression", span="69-69"];
n88 [cluster="lambda expression", label="Exit lambda expression", span="71-75"];
n89 [cluster="Unk.Contains", label="Entry Unk.Contains", span=""];
n91 [cluster="lambda expression", label="sp.Specification.IsValue()", span="78-78"];
n92 [cluster="lambda expression", label="Exit lambda expression", span="78-78"];
n93 [cluster="CommandLine.Core.Specification.IsValue()", label="Entry CommandLine.Core.Specification.IsValue()", span="15-15"];
n95 [cluster="lambda expression", label="sp.Specification.Required", span="79-79"];
n96 [cluster="lambda expression", label="Exit lambda expression", span="79-79"];
n98 [cluster="lambda expression", label="sp.Value.IsNothing()", span="80-80"];
n99 [cluster="lambda expression", label="Exit lambda expression", span="80-80"];
n101 [cluster="lambda expression", color=red, community=0, label="0: new MissingRequiredOptionError(sp.Specification.FromSpecification())", span="82-82"];
n102 [cluster="lambda expression", label="Exit lambda expression", span="82-82"];
n103 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="291-291"];
n104 [cluster="Unk.FromSpecification", label="Entry Unk.FromSpecification", span=""];
n105 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", color=red, community=0, label="0: return specProps =>\r\n                {\r\n                    var options = specProps\r\n                        .Where(sp => sp.Specification.TargetType == TargetType.Sequence)\r\n                        .Where(sp => sp.Value.IsJust())\r\n                        .Where(sp =>\r\n                            (sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min.FromJust())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max.FromJust())\r\n                        );\r\n                    if (options.Any())\r\n                    {\r\n                        return options.Select(s => new SequenceOutOfRangeError(\r\n                            s.Specification.FromSpecification()));\r\n                    }\r\n                    return Enumerable.Empty<Error>();\r\n                };", span="88-103"];
n106 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="86-86"];
n108 [cluster="lambda expression", label="var options = specProps\r\n                        .Where(sp => sp.Specification.TargetType == TargetType.Sequence)\r\n                        .Where(sp => sp.Value.IsJust())\r\n                        .Where(sp =>\r\n                            (sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min.FromJust())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max.FromJust())\r\n                        )", span="90-96"];
n107 [cluster="lambda expression", label="Entry lambda expression", span="88-103"];
n109 [cluster="lambda expression", label="options.Any()", span="97-97"];
n114 [cluster="lambda expression", label="Entry lambda expression", span="91-91"];
n117 [cluster="lambda expression", label="Entry lambda expression", span="92-92"];
n120 [cluster="lambda expression", label="Entry lambda expression", span="93-95"];
n110 [cluster="lambda expression", color=red, community=2, label="0: return options.Select(s => new SequenceOutOfRangeError(\r\n                            s.Specification.FromSpecification()));", span="99-100"];
n111 [cluster="lambda expression", label="return Enumerable.Empty<Error>();", span="102-102"];
n113 [cluster="Unk.Any", label="Entry Unk.Any", span=""];
n112 [cluster="lambda expression", label="Exit lambda expression", span="88-103"];
n124 [cluster="lambda expression", label="Entry lambda expression", span="99-100"];
n115 [cluster="lambda expression", label="sp.Specification.TargetType == TargetType.Sequence", span="91-91"];
n116 [cluster="lambda expression", label="Exit lambda expression", span="91-91"];
n118 [cluster="lambda expression", label="sp.Value.IsJust()", span="92-92"];
n119 [cluster="lambda expression", label="Exit lambda expression", span="92-92"];
n121 [cluster="lambda expression", label="(sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min.FromJust())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max.FromJust())", span="94-95"];
n122 [cluster="lambda expression", label="Exit lambda expression", span="93-95"];
n123 [cluster="Unk.FromJust", label="Entry Unk.FromJust", span=""];
n125 [cluster="lambda expression", color=red, community=2, label="0: new SequenceOutOfRangeError(\r\n                            s.Specification.FromSpecification())", span="99-100"];
n126 [cluster="lambda expression", label="Exit lambda expression", span="99-100"];
n127 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="324-324"];
n128 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", label="return specProps =>\r\n                {\r\n                    var specs = from sp in specProps\r\n                                where sp.Specification.IsOption() && sp.Value.IsJust()\r\n                                select (OptionSpecification)sp.Specification;\r\n                    var options = from t in tokens.Where(t => t.IsName())\r\n                                  join o in specs on t.Text equals o.UniqueName() into to\r\n                                  from o in to.DefaultIfEmpty()\r\n                                  where o != null\r\n                                  select new { o.ShortName, o.LongName };\r\n                    var groups = from x in options\r\n                                 group x by x into g\r\n                                 let count = g.Count()\r\n                                 select new { Value = g.Key, Count = count };\r\n                    var errors = from y in groups\r\n                                 where y.Count > 1\r\n                                 select new RepeatedOptionError(new NameInfo(y.Value.ShortName, y.Value.LongName));\r\n                    return errors;\r\n                };", span="108-126"];
n132 [cluster="lambda expression", label="var options = from t in tokens.Where(t => t.IsName())\r\n                                  join o in specs on t.Text equals o.UniqueName() into to\r\n                                  from o in to.DefaultIfEmpty()\r\n                                  where o != null\r\n                                  select new { o.ShortName, o.LongName }", span="113-117"];
n129 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="106-106"];
n131 [cluster="lambda expression", label="var specs = from sp in specProps\r\n                                where sp.Specification.IsOption() && sp.Value.IsJust()\r\n                                select (OptionSpecification)sp.Specification", span="110-112"];
n130 [cluster="lambda expression", label="Entry lambda expression", span="108-126"];
n137 [cluster="CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", label="Entry CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", span="149-149"];
n133 [cluster="lambda expression", label="var groups = from x in options\r\n                                 group x by x into g\r\n                                 let count = g.Count()\r\n                                 select new { Value = g.Key, Count = count }", span="118-121"];
n138 [cluster="Unk.UniqueName", label="Entry Unk.UniqueName", span=""];
n139 [cluster="Unk.DefaultIfEmpty", label="Entry Unk.DefaultIfEmpty", span=""];
n142 [cluster="lambda expression", label="Entry lambda expression", span="113-113"];
n134 [cluster="lambda expression", label="var errors = from y in groups\r\n                                 where y.Count > 1\r\n                                 select new RepeatedOptionError(new NameInfo(y.Value.ShortName, y.Value.LongName))", span="122-124"];
n135 [cluster="lambda expression", label="return errors;", span="125-125"];
n140 [cluster="CommandLine.RepeatedOptionError.RepeatedOptionError(CommandLine.NameInfo)", label="Entry CommandLine.RepeatedOptionError.RepeatedOptionError(CommandLine.NameInfo)", span="335-335"];
n141 [cluster="NameInfo.cstr", label="Entry NameInfo.cstr", span=""];
n136 [cluster="lambda expression", label="Exit lambda expression", span="108-126"];
n143 [cluster="lambda expression", label="t.IsName()", span="113-113"];
n144 [cluster="lambda expression", label="Exit lambda expression", span="113-113"];
n145 [cluster="CommandLine.Core.Token.IsName()", label="Entry CommandLine.Core.Token.IsName()", span="68-68"];
d1 [cluster="Humanizer.Tests.InflectorTests.Pluralize(string, string)", color=green, community=0, label="0: Assert.Equal(plural, singular.Pluralize())", span="38-38"];
d0 [cluster="Humanizer.Tests.InflectorTests.Pluralize(string, string)", label="Entry Humanizer.Tests.InflectorTests.Pluralize(string, string)", span="36-36"];
d2 [cluster="Humanizer.Tests.InflectorTests.Pluralize(string, string)", label="Exit Humanizer.Tests.InflectorTests.Pluralize(string, string)", span="36-36"];
d3 [cluster="string.Pluralize(Humanizer.Plurality)", label="Entry string.Pluralize(Humanizer.Plurality)", span="170-170"];
d4 [cluster="Unk.Equal", label="Entry Unk.Equal", span=""];
d6 [cluster="Humanizer.Tests.InflectorTests.PluralizeAlreadyPluralWord(string, string)", label="Assert.Equal(plural, plural.Pluralize(Plurality.Plural))", span="45-45"];
d9 [cluster="Humanizer.Tests.InflectorTests.PluralizeWordsWithUnknownPlurality(string, string)", label="Assert.Equal(plural, plural.Pluralize(Plurality.CouldBeEither))", span="52-52"];
d10 [cluster="Humanizer.Tests.InflectorTests.PluralizeWordsWithUnknownPlurality(string, string)", label="Assert.Equal(plural, singular.Pluralize(Plurality.CouldBeEither))", span="53-53"];
d13 [cluster="Humanizer.Tests.InflectorTests.Singularize(string, string)", label="Assert.Equal(singular, plural.Singularize())", span="60-60"];
d17 [cluster="Humanizer.Tests.InflectorTests.SingularizeAlreadySingularWord(string, string)", label="Assert.Equal(singular, singular.Singularize(Plurality.Singular))", span="67-67"];
d20 [cluster="Humanizer.Tests.InflectorTests.SingularizeWordsWithUnknownSingularity(string, string)", label="Assert.Equal(singular, singular.Singularize(Plurality.CouldBeEither))", span="74-74"];
d21 [cluster="Humanizer.Tests.InflectorTests.SingularizeWordsWithUnknownSingularity(string, string)", label="Assert.Equal(singular, plural.Singularize(Plurality.CouldBeEither))", span="75-75"];
d24 [cluster="Humanizer.Tests.InflectorTests.Titleize(string, string)", label="Assert.Equal(expectedOuput, input.Titleize())", span="88-88"];
d28 [cluster="Humanizer.Tests.InflectorTests.Dasherize(string, string)", label="Assert.Equal(input.Dasherize(), expectedOutput)", span="98-98"];
d32 [cluster="Humanizer.Tests.InflectorTests.Hyphenate(string, string)", label="Assert.Equal(input.Hyphenate(), expectedOutput)", span="108-108"];
d36 [cluster="Humanizer.Tests.InflectorTests.Pascalize(string, string)", label="Assert.Equal(expectedOutput, input.Pascalize())", span="121-121"];
d40 [cluster="Humanizer.Tests.InflectorTests.Camelize(string, string)", label="Assert.Equal(expectedOutput, input.Camelize())", span="135-135"];
d44 [cluster="Humanizer.Tests.InflectorTests.Underscore(string, string)", label="Assert.Equal(expectedOuput, input.Underscore())", span="148-148"];
d5 [cluster="Humanizer.Tests.InflectorTests.PluralizeAlreadyPluralWord(string, string)", label="Entry Humanizer.Tests.InflectorTests.PluralizeAlreadyPluralWord(string, string)", span="43-43"];
d7 [cluster="Humanizer.Tests.InflectorTests.PluralizeAlreadyPluralWord(string, string)", label="Exit Humanizer.Tests.InflectorTests.PluralizeAlreadyPluralWord(string, string)", span="43-43"];
d8 [cluster="Humanizer.Tests.InflectorTests.PluralizeWordsWithUnknownPlurality(string, string)", label="Entry Humanizer.Tests.InflectorTests.PluralizeWordsWithUnknownPlurality(string, string)", span="50-50"];
d11 [cluster="Humanizer.Tests.InflectorTests.PluralizeWordsWithUnknownPlurality(string, string)", label="Exit Humanizer.Tests.InflectorTests.PluralizeWordsWithUnknownPlurality(string, string)", span="50-50"];
d12 [cluster="Humanizer.Tests.InflectorTests.Singularize(string, string)", label="Entry Humanizer.Tests.InflectorTests.Singularize(string, string)", span="58-58"];
d14 [cluster="Humanizer.Tests.InflectorTests.Singularize(string, string)", label="Exit Humanizer.Tests.InflectorTests.Singularize(string, string)", span="58-58"];
d15 [cluster="string.Singularize(Humanizer.Plurality)", label="Entry string.Singularize(Humanizer.Plurality)", span="194-194"];
d16 [cluster="Humanizer.Tests.InflectorTests.SingularizeAlreadySingularWord(string, string)", label="Entry Humanizer.Tests.InflectorTests.SingularizeAlreadySingularWord(string, string)", span="65-65"];
d18 [cluster="Humanizer.Tests.InflectorTests.SingularizeAlreadySingularWord(string, string)", label="Exit Humanizer.Tests.InflectorTests.SingularizeAlreadySingularWord(string, string)", span="65-65"];
d19 [cluster="Humanizer.Tests.InflectorTests.SingularizeWordsWithUnknownSingularity(string, string)", label="Entry Humanizer.Tests.InflectorTests.SingularizeWordsWithUnknownSingularity(string, string)", span="72-72"];
d22 [cluster="Humanizer.Tests.InflectorTests.SingularizeWordsWithUnknownSingularity(string, string)", label="Exit Humanizer.Tests.InflectorTests.SingularizeWordsWithUnknownSingularity(string, string)", span="72-72"];
d23 [cluster="Humanizer.Tests.InflectorTests.Titleize(string, string)", label="Entry Humanizer.Tests.InflectorTests.Titleize(string, string)", span="86-86"];
d25 [cluster="Humanizer.Tests.InflectorTests.Titleize(string, string)", label="Exit Humanizer.Tests.InflectorTests.Titleize(string, string)", span="86-86"];
d26 [cluster="string.Titleize()", label="Entry string.Titleize()", span="239-239"];
d27 [cluster="Humanizer.Tests.InflectorTests.Dasherize(string, string)", label="Entry Humanizer.Tests.InflectorTests.Dasherize(string, string)", span="96-96"];
d29 [cluster="Humanizer.Tests.InflectorTests.Dasherize(string, string)", label="Exit Humanizer.Tests.InflectorTests.Dasherize(string, string)", span="96-96"];
d30 [cluster="string.Dasherize()", label="Entry string.Dasherize()", span="282-282"];
d31 [cluster="Humanizer.Tests.InflectorTests.Hyphenate(string, string)", label="Entry Humanizer.Tests.InflectorTests.Hyphenate(string, string)", span="106-106"];
d33 [cluster="Humanizer.Tests.InflectorTests.Hyphenate(string, string)", label="Exit Humanizer.Tests.InflectorTests.Hyphenate(string, string)", span="106-106"];
d34 [cluster="string.Hyphenate()", label="Entry string.Hyphenate()", span="292-292"];
d35 [cluster="Humanizer.Tests.InflectorTests.Pascalize(string, string)", label="Entry Humanizer.Tests.InflectorTests.Pascalize(string, string)", span="119-119"];
d37 [cluster="Humanizer.Tests.InflectorTests.Pascalize(string, string)", label="Exit Humanizer.Tests.InflectorTests.Pascalize(string, string)", span="119-119"];
d38 [cluster="string.Pascalize()", label="Entry string.Pascalize()", span="249-249"];
d39 [cluster="Humanizer.Tests.InflectorTests.Camelize(string, string)", label="Entry Humanizer.Tests.InflectorTests.Camelize(string, string)", span="133-133"];
d41 [cluster="Humanizer.Tests.InflectorTests.Camelize(string, string)", label="Exit Humanizer.Tests.InflectorTests.Camelize(string, string)", span="133-133"];
d42 [cluster="string.Camelize()", label="Entry string.Camelize()", span="259-259"];
d43 [cluster="Humanizer.Tests.InflectorTests.Underscore(string, string)", label="Entry Humanizer.Tests.InflectorTests.Underscore(string, string)", span="146-146"];
d45 [cluster="Humanizer.Tests.InflectorTests.Underscore(string, string)", label="Exit Humanizer.Tests.InflectorTests.Underscore(string, string)", span="146-146"];
d46 [cluster="string.Underscore()", label="Entry string.Underscore()", span="270-270"];
n146 -> n87  [color=darkseagreen4, key=1, label=setCount, style=dashed];
n147 -> n87  [color=darkseagreen4, key=1, label=setWithRequired, style=dashed];
n148 -> n132  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=2, style=dotted];
n1 -> n4  [key=2, style=dotted];
n1 -> n5  [key=2, style=dotted];
n1 -> n6  [key=2, style=dotted];
n1 -> n7  [key=2, style=dotted];
n2 -> n0  [color=blue, key=0, style=bold];
n4 -> n8  [color=red, key=0, style=solid];
n5 -> n38  [color=red, key=0, style=solid];
n6 -> n105  [color=red, key=0, style=solid];
n7 -> n128  [key=0, style=solid];
n7 -> n132  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
n8 -> n9  [color=red, key=0, style=solid];
n8 -> n11  [color=red, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
n9 -> n4  [color=blue, key=0, style=bold];
n11 -> n12  [color=red, key=0, style=solid];
n11 -> n17  [color=red, key=2, style=dotted];
n11 -> n22  [color=red, key=1, label="lambda expression", style=dashed];
n11 -> n26  [color=red, key=1, label="lambda expression", style=dashed];
n11 -> n14  [color=red, key=1, label=options, style=dashed];
n10 -> n11  [color=red, key=0, style=solid];
n12 -> n13  [key=0, style=solid];
n12 -> n18  [key=2, style=dotted];
n12 -> n30  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n22 -> n23  [color=red, key=0, style=solid];
n26 -> n27  [color=red, key=0, style=solid];
n14 -> n16  [color=red, key=0, style=solid];
n14 -> n20  [color=red, key=2, style=dotted];
n14 -> n33  [color=red, key=1, label="lambda expression", style=dashed];
n13 -> n14  [color=red, key=0, style=solid];
n13 -> n15  [key=0, style=solid];
n13 -> n19  [key=2, style=dotted];
n30 -> n31  [key=0, style=solid];
n15 -> n16  [key=0, style=solid];
n15 -> n21  [key=2, style=dotted];
n16 -> n10  [color=blue, key=0, style=bold];
n33 -> n34  [color=red, key=0, style=solid];
n23 -> n24  [color=red, key=0, style=solid];
n23 -> n25  [color=red, key=2, style=dotted];
n24 -> n22  [color=blue, key=0, style=bold];
n27 -> n28  [color=red, key=0, style=solid];
n27 -> n29  [color=red, key=2, style=dotted];
n28 -> n26  [color=blue, key=0, style=bold];
n31 -> n32  [key=0, style=solid];
n32 -> n30  [color=blue, key=0, style=bold];
n34 -> n35  [color=red, key=0, style=solid];
n34 -> n36  [color=red, key=2, style=dotted];
n34 -> n37  [color=red, key=2, style=dotted];
n35 -> n33  [color=blue, key=0, style=bold];
n38 -> n39  [color=red, key=0, style=solid];
n38 -> n41  [color=red, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
n38 -> n42  [color=red, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
n38 -> n43  [color=red, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
n39 -> n5  [color=blue, key=0, style=bold];
n41 -> n42  [key=0, style=solid];
n41 -> n17  [key=2, style=dotted];
n41 -> n20  [key=2, style=dotted];
n41 -> n46  [key=2, style=dotted];
n41 -> n47  [key=2, style=dotted];
n41 -> n19  [key=2, style=dotted];
n41 -> n49  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n41 -> n52  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n41 -> n43  [color=darkseagreen4, key=1, label=setCount, style=dashed];
n41 -> n87  [color=darkseagreen4, key=1, label=setCount, style=dashed];
n42 -> n43  [key=0, style=solid];
n42 -> n17  [key=2, style=dotted];
n42 -> n20  [key=2, style=dotted];
n42 -> n46  [key=2, style=dotted];
n42 -> n47  [key=2, style=dotted];
n42 -> n55  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n42 -> n58  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n42 -> n61  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n42 -> n87  [color=darkseagreen4, key=1, label=setWithRequired, style=dashed];
n43 -> n44  [color=red, key=0, style=solid];
n43 -> n17  [key=2, style=dotted];
n43 -> n48  [key=2, style=dotted];
n43 -> n47  [key=2, style=dotted];
n43 -> n64  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n43 -> n67  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n43 -> n70  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n43 -> n74  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n43 -> n77  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n43 -> n80  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n43 -> n83  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n43 -> n86  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n43 -> n90  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n43 -> n94  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n43 -> n97  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n40 -> n41  [key=0, style=solid];
n40 -> n42  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
n40 -> n43  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
n49 -> n50  [key=0, style=solid];
n52 -> n53  [key=0, style=solid];
n87 -> n88  [key=0, style=solid];
n87 -> n89  [key=2, style=dotted];
n55 -> n56  [key=0, style=solid];
n58 -> n59  [key=0, style=solid];
n61 -> n62  [key=0, style=solid];
n44 -> n45  [color=red, key=0, style=solid];
n44 -> n20  [color=red, key=2, style=dotted];
n44 -> n100  [color=red, key=1, label="lambda expression", style=dashed];
n64 -> n65  [key=0, style=solid];
n67 -> n68  [key=0, style=solid];
n70 -> n71  [key=0, style=solid];
n74 -> n75  [key=0, style=solid];
n77 -> n78  [key=0, style=solid];
n80 -> n81  [key=0, style=solid];
n83 -> n84  [key=0, style=solid];
n86 -> n87  [key=0, style=solid];
n90 -> n91  [key=0, style=solid];
n94 -> n95  [key=0, style=solid];
n97 -> n98  [key=0, style=solid];
n45 -> n40  [color=blue, key=0, style=bold];
n100 -> n101  [color=red, key=0, style=solid];
n50 -> n51  [key=0, style=solid];
n50 -> n25  [key=2, style=dotted];
n51 -> n49  [color=blue, key=0, style=bold];
n53 -> n54  [key=0, style=solid];
n54 -> n52  [color=blue, key=0, style=bold];
n56 -> n57  [key=0, style=solid];
n56 -> n25  [key=2, style=dotted];
n57 -> n55  [color=blue, key=0, style=bold];
n59 -> n60  [key=0, style=solid];
n60 -> n58  [color=blue, key=0, style=bold];
n62 -> n63  [key=0, style=solid];
n63 -> n61  [color=blue, key=0, style=bold];
n65 -> n66  [key=0, style=solid];
n65 -> n25  [key=2, style=dotted];
n66 -> n64  [color=blue, key=0, style=bold];
n68 -> n69  [key=0, style=solid];
n69 -> n67  [color=blue, key=0, style=bold];
n71 -> n72  [key=0, style=solid];
n71 -> n73  [key=2, style=dotted];
n72 -> n70  [color=blue, key=0, style=bold];
n75 -> n76  [key=0, style=solid];
n76 -> n74  [color=blue, key=0, style=bold];
n78 -> n79  [key=0, style=solid];
n78 -> n25  [key=2, style=dotted];
n79 -> n77  [color=blue, key=0, style=bold];
n81 -> n82  [key=0, style=solid];
n82 -> n80  [color=blue, key=0, style=bold];
n84 -> n85  [key=0, style=solid];
n84 -> n73  [key=2, style=dotted];
n85 -> n83  [color=blue, key=0, style=bold];
n88 -> n86  [color=blue, key=0, style=bold];
n91 -> n92  [key=0, style=solid];
n91 -> n93  [key=2, style=dotted];
n92 -> n90  [color=blue, key=0, style=bold];
n95 -> n96  [key=0, style=solid];
n96 -> n94  [color=blue, key=0, style=bold];
n98 -> n99  [key=0, style=solid];
n98 -> n73  [key=2, style=dotted];
n99 -> n97  [color=blue, key=0, style=bold];
n101 -> n102  [color=red, key=0, style=solid];
n101 -> n103  [color=red, key=2, style=dotted];
n101 -> n104  [color=red, key=2, style=dotted];
n102 -> n100  [color=blue, key=0, style=bold];
n105 -> n106  [color=red, key=0, style=solid];
n105 -> n108  [color=red, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
n106 -> n6  [color=blue, key=0, style=bold];
n108 -> n109  [key=0, style=solid];
n108 -> n17  [key=2, style=dotted];
n108 -> n114  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n108 -> n117  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n108 -> n120  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n108 -> n110  [color=red, key=1, label=options, style=dashed];
n107 -> n108  [key=0, style=solid];
n109 -> n110  [color=red, key=0, style=solid];
n109 -> n111  [key=0, style=solid];
n109 -> n113  [key=2, style=dotted];
n114 -> n115  [key=0, style=solid];
n117 -> n118  [key=0, style=solid];
n120 -> n121  [key=0, style=solid];
n110 -> n112  [color=red, key=0, style=solid];
n110 -> n20  [color=red, key=2, style=dotted];
n110 -> n124  [color=red, key=1, label="lambda expression", style=dashed];
n111 -> n112  [key=0, style=solid];
n111 -> n21  [key=2, style=dotted];
n112 -> n107  [color=blue, key=0, style=bold];
n124 -> n125  [color=red, key=0, style=solid];
n115 -> n116  [key=0, style=solid];
n116 -> n114  [color=blue, key=0, style=bold];
n118 -> n119  [key=0, style=solid];
n118 -> n29  [key=2, style=dotted];
n119 -> n117  [color=blue, key=0, style=bold];
n121 -> n122  [key=0, style=solid];
n121 -> n29  [key=2, style=dotted];
n121 -> n123  [key=2, style=dotted];
n122 -> n120  [color=blue, key=0, style=bold];
n125 -> n126  [color=red, key=0, style=solid];
n125 -> n127  [color=red, key=2, style=dotted];
n125 -> n104  [color=red, key=2, style=dotted];
n126 -> n124  [color=blue, key=0, style=bold];
n128 -> n129  [key=0, style=solid];
n128 -> n131  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
n128 -> n128  [color=darkorchid, key=3, label="method methodReturn System.Collections.Generic.IEnumerable<CommandLine.Error> ", style=bold];
n132 -> n133  [key=0, style=solid];
n132 -> n17  [key=2, style=dotted];
n132 -> n138  [key=2, style=dotted];
n132 -> n139  [key=2, style=dotted];
n132 -> n142  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n132 -> n132  [color=darkseagreen4, key=1, label=t, style=dashed];
n129 -> n7  [color=blue, key=0, style=bold];
n131 -> n132  [key=0, style=solid];
n131 -> n25  [key=2, style=dotted];
n131 -> n137  [key=2, style=dotted];
n131 -> n131  [color=darkseagreen4, key=1, label=sp, style=dashed];
n130 -> n131  [key=0, style=solid];
n133 -> n134  [key=0, style=solid];
n133 -> n19  [key=2, style=dotted];
n133 -> n133  [color=darkseagreen4, key=1, label=x, style=dashed];
n142 -> n143  [key=0, style=solid];
n134 -> n135  [key=0, style=solid];
n134 -> n140  [key=2, style=dotted];
n134 -> n141  [key=2, style=dotted];
n134 -> n134  [color=darkseagreen4, key=1, label=y, style=dashed];
n135 -> n136  [key=0, style=solid];
n136 -> n130  [color=blue, key=0, style=bold];
n143 -> n144  [key=0, style=solid];
n143 -> n145  [key=2, style=dotted];
n144 -> n142  [color=blue, key=0, style=bold];
d1 -> d2  [color=green, key=0, style=solid];
d1 -> d3  [color=green, key=2, style=dotted];
d1 -> d4  [color=green, key=2, style=dotted];
d0 -> d1  [color=green, key=0, style=solid];
d2 -> d0  [color=blue, key=0, style=bold];
d6 -> d3  [key=2, style=dotted];
d6 -> d4  [key=2, style=dotted];
d6 -> d7  [key=0, style=solid];
d9 -> d3  [key=2, style=dotted];
d9 -> d4  [key=2, style=dotted];
d9 -> d10  [key=0, style=solid];
d10 -> d3  [key=2, style=dotted];
d10 -> d4  [key=2, style=dotted];
d10 -> d11  [key=0, style=solid];
d13 -> d4  [key=2, style=dotted];
d13 -> d14  [key=0, style=solid];
d13 -> d15  [key=2, style=dotted];
d17 -> d4  [key=2, style=dotted];
d17 -> d18  [key=0, style=solid];
d17 -> d15  [key=2, style=dotted];
d20 -> d4  [key=2, style=dotted];
d20 -> d21  [key=0, style=solid];
d20 -> d15  [key=2, style=dotted];
d21 -> d4  [key=2, style=dotted];
d21 -> d22  [key=0, style=solid];
d21 -> d15  [key=2, style=dotted];
d24 -> d4  [key=2, style=dotted];
d24 -> d25  [key=0, style=solid];
d24 -> d26  [key=2, style=dotted];
d28 -> d4  [key=2, style=dotted];
d28 -> d29  [key=0, style=solid];
d28 -> d30  [key=2, style=dotted];
d32 -> d4  [key=2, style=dotted];
d32 -> d33  [key=0, style=solid];
d32 -> d34  [key=2, style=dotted];
d36 -> d4  [key=2, style=dotted];
d36 -> d37  [key=0, style=solid];
d36 -> d38  [key=2, style=dotted];
d40 -> d4  [key=2, style=dotted];
d40 -> d41  [key=0, style=solid];
d40 -> d42  [key=2, style=dotted];
d44 -> d4  [key=2, style=dotted];
d44 -> d45  [key=0, style=solid];
d44 -> d46  [key=2, style=dotted];
d5 -> d6  [key=0, style=solid];
d7 -> d5  [color=blue, key=0, style=bold];
d8 -> d9  [key=0, style=solid];
d8 -> d10  [color=darkseagreen4, key=1, label=string, style=dashed];
d11 -> d8  [color=blue, key=0, style=bold];
d12 -> d13  [key=0, style=solid];
d14 -> d12  [color=blue, key=0, style=bold];
d16 -> d17  [key=0, style=solid];
d18 -> d16  [color=blue, key=0, style=bold];
d19 -> d20  [key=0, style=solid];
d19 -> d21  [color=darkseagreen4, key=1, label=string, style=dashed];
d22 -> d19  [color=blue, key=0, style=bold];
d23 -> d24  [key=0, style=solid];
d25 -> d23  [color=blue, key=0, style=bold];
d27 -> d28  [key=0, style=solid];
d29 -> d27  [color=blue, key=0, style=bold];
d31 -> d32  [key=0, style=solid];
d33 -> d31  [color=blue, key=0, style=bold];
d35 -> d36  [key=0, style=solid];
d37 -> d35  [color=blue, key=0, style=bold];
d39 -> d40  [key=0, style=solid];
d41 -> d39  [color=blue, key=0, style=bold];
d43 -> d44  [key=0, style=solid];
d45 -> d43  [color=blue, key=0, style=bold];
}
