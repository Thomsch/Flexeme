digraph  {
m0_37 [cluster="CommandLine.Core.OptionSpecification.FromOptionSpecification()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.OptionSpecification.FromOptionSpecification()", span="15-15"];
m0_109 [cluster="NameInfo.cstr", file="SpecificationPropertyRules.cs", label="Entry NameInfo.cstr", span=""];
m0_4 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="24-24"];
m0_8 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="SpecificationPropertyRules.cs", label="return specProps =>\r\n                {\r\n                    var options = specProps\r\n                            .Where(sp => sp.Specification.IsOption())\r\n                            .Where(sp => ((OptionSpecification)sp.Specification).SetName.Length > 0\r\n                                   && sp.Value.IsJust());\r\n                    var groups = options.GroupBy(g => ((OptionSpecification)g.Specification).SetName);\r\n                    if (groups.Count() > 1)\r\n                    {\r\n                        return options.Select(s =>\r\n                            new MutuallyExclusiveSetError(\r\n                                ((OptionSpecification)s.Specification).FromOptionSpecification()));\r\n                    }\r\n                    return Enumerable.Empty<Error>();\r\n                };", span="26-40"];
m0_9 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="SpecificationPropertyRules.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="24-24"];
m0_90 [cluster="CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", span="149-149"];
m0_6 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="97-97"];
m0_78 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="SpecificationPropertyRules.cs", label="return specProps =>\r\n                {\r\n                    var options = specProps.Where(\r\n                        sp => sp.Specification.TargetType == TargetType.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min.FromJust())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max.FromJust())\r\n                        )\r\n                    );\r\n                    if (options.Any())\r\n                    {\r\n                        return options.Select(s => new SequenceOutOfRangeError(\r\n                            s.Specification.FromSpecification()));\r\n                    }\r\n                    return Enumerable.Empty<Error>();\r\n                };", span="99-115"];
m0_79 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="SpecificationPropertyRules.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="97-97"];
m0_60 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="291-291"];
m0_113 [cluster="CommandLine.Core.Token.IsName()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.Token.IsName()", span="68-68"];
m0_86 [cluster="Unk.Any", file="SpecificationPropertyRules.cs", label="Entry Unk.Any", span=""];
m0_43 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequiredImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRequiredImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>)", span="51-51"];
m0_56 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequiredImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>)", file="SpecificationPropertyRules.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRequiredImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>)", span="51-51"];
m0_17 [cluster="Unk.Where", file="SpecificationPropertyRules.cs", label="Entry Unk.Where", span=""];
m0_21 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="SpecificationPropertyRules.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m0_96 [cluster="Unk.FromSpecification", file="SpecificationPropertyRules.cs", label="Entry Unk.FromSpecification", span=""];
m0_91 [cluster="CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", span="134-134"];
m0_7 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="118-118"];
m0_97 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs", label="return specProps =>\r\n                {\r\n                    var specs = from sp in specProps\r\n                                where sp.Specification.IsOption() && sp.Value.IsJust()\r\n                                select (OptionSpecification)sp.Specification;\r\n                    var options = from t in tokens.Where(t => t.IsName())\r\n                                  join o in specs on t.Text equals o.UniqueName() into to\r\n                                  from o in to.DefaultIfEmpty()\r\n                                  where o != null\r\n                                  select new { o.ShortName, o.LongName };\r\n                    var groups = from x in options\r\n                                 group x by x into g\r\n                                 let count = g.Count()\r\n                                 select new { Value = g.Key, Count = count };\r\n                    var errors = from y in groups\r\n                                 where y.Count > 1\r\n                                 select new RepeatedOptionError(new NameInfo(y.Value.ShortName, y.Value.LongName));\r\n                    return errors;\r\n                };", span="120-138"];
m0_98 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="118-118"];
m0_59 [cluster="CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", span="144-144"];
m0_62 [cluster="Unk.Contains", file="SpecificationPropertyRules.cs", label="Entry Unk.Contains", span=""];
m0_95 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="324-324"];
m0_0 [cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12"];
m0_1 [cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs", label="return new List<Func<IEnumerable<SpecificationProperty>, IEnumerable<Error>>>\r\n                {\r\n                    EnforceMutuallyExclusiveSet(),\r\n                    EnforceRequired(),\r\n                    EnforceRange(),\r\n                    EnforceSingle(tokens)\r\n                };", span="15-21"];
m0_2 [cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12"];
m0_110 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="125-125"];
m0_11 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var options = specProps\r\n                            .Where(sp => sp.Specification.IsOption())\r\n                            .Where(sp => ((OptionSpecification)sp.Specification).SetName.Length > 0\r\n                                   && sp.Value.IsJust())", span="28-31"];
m0_10 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="26-40"];
m0_12 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var groups = options.GroupBy(g => ((OptionSpecification)g.Specification).SetName)", span="32-32"];
m0_22 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="29-29"];
m0_26 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="30-31"];
m0_14 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="return options.Select(s =>\r\n                            new MutuallyExclusiveSetError(\r\n                                ((OptionSpecification)s.Specification).FromOptionSpecification()));", span="35-37"];
m0_13 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="groups.Count() > 1", span="33-33"];
m0_30 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="32-32"];
m0_15 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="return Enumerable.Empty<Error>();", span="39-39"];
m0_16 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="26-40"];
m0_33 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="35-37"];
m0_23 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="sp.Specification.IsOption()", span="29-29"];
m0_24 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="29-29"];
m0_27 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="((OptionSpecification)sp.Specification).SetName.Length > 0\r\n                                   && sp.Value.IsJust()", span="30-31"];
m0_28 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="30-31"];
m0_31 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="((OptionSpecification)g.Specification).SetName", span="32-32"];
m0_32 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="32-32"];
m0_34 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="new MutuallyExclusiveSetError(\r\n                                ((OptionSpecification)s.Specification).FromOptionSpecification())", span="36-37"];
m0_35 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="35-37"];
m0_40 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="45-48"];
m0_42 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="45-48"];
m0_63 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="54-54"];
m0_66 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="55-55"];
m0_69 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="61-61"];
m0_72 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="62-62"];
m0_75 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="63-63"];
m0_65 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="54-54"];
m0_68 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="55-55"];
m0_71 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="61-61"];
m0_74 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="62-62"];
m0_77 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="63-63"];
m0_81 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var options = specProps.Where(\r\n                        sp => sp.Specification.TargetType == TargetType.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min.FromJust())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max.FromJust())\r\n                        )\r\n                    )", span="101-108"];
m0_80 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="99-115"];
m0_82 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="options.Any()", span="109-109"];
m0_87 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="102-107"];
m0_83 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="return options.Select(s => new SequenceOutOfRangeError(\r\n                            s.Specification.FromSpecification()));", span="111-112"];
m0_84 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="return Enumerable.Empty<Error>();", span="114-114"];
m0_85 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="99-115"];
m0_92 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="111-112"];
m0_88 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="sp.Specification.TargetType == TargetType.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min.FromJust())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max.FromJust())\r\n                        )", span="102-107"];
m0_89 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="102-107"];
m0_93 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="new SequenceOutOfRangeError(\r\n                            s.Specification.FromSpecification())", span="111-112"];
m0_94 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="111-112"];
m0_101 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var options = from t in tokens.Where(t => t.IsName())\r\n                                  join o in specs on t.Text equals o.UniqueName() into to\r\n                                  from o in to.DefaultIfEmpty()\r\n                                  where o != null\r\n                                  select new { o.ShortName, o.LongName }", span="125-129"];
m0_100 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var specs = from sp in specProps\r\n                                where sp.Specification.IsOption() && sp.Value.IsJust()\r\n                                select (OptionSpecification)sp.Specification", span="122-124"];
m0_99 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="120-138"];
m0_102 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var groups = from x in options\r\n                                 group x by x into g\r\n                                 let count = g.Count()\r\n                                 select new { Value = g.Key, Count = count }", span="130-133"];
m0_103 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var errors = from y in groups\r\n                                 where y.Count > 1\r\n                                 select new RepeatedOptionError(new NameInfo(y.Value.ShortName, y.Value.LongName))", span="134-136"];
m0_104 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="return errors;", span="137-137"];
m0_105 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="120-138"];
m0_111 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="t.IsName()", span="125-125"];
m0_112 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="125-125"];
m0_108 [cluster="CommandLine.RepeatedOptionError.RepeatedOptionError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.RepeatedOptionError.RepeatedOptionError(CommandLine.NameInfo)", span="335-335"];
m0_5 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="43-43"];
m0_39 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", file="SpecificationPropertyRules.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="43-43"];
m0_20 [cluster="Unk.Select", file="SpecificationPropertyRules.cs", label="Entry Unk.Select", span=""];
m0_29 [cluster="Unk.IsJust", file="SpecificationPropertyRules.cs", label="Entry Unk.IsJust", span=""];
m0_106 [cluster="Unk.UniqueName", file="SpecificationPropertyRules.cs", label="Entry Unk.UniqueName", span=""];
m0_58 [cluster="Unk.ToList", file="SpecificationPropertyRules.cs", label="Entry Unk.ToList", span=""];
m0_36 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="302-302"];
m0_107 [cluster="Unk.DefaultIfEmpty", file="SpecificationPropertyRules.cs", label="Entry Unk.DefaultIfEmpty", span=""];
m0_25 [cluster="CommandLine.Core.Specification.IsOption()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.Specification.IsOption()", span="10-10"];
m0_61 [cluster="CommandLine.Core.Specification.FromSpecification()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.Specification.FromSpecification()", span="22-22"];
m0_3 [cluster="System.Collections.Generic.List<T>.List()", file="SpecificationPropertyRules.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m0_57 [cluster="Unk.Distinct", file="SpecificationPropertyRules.cs", label="Entry Unk.Distinct", span=""];
m0_18 [cluster="Unk.GroupBy", file="SpecificationPropertyRules.cs", label="Entry Unk.GroupBy", span=""];
m0_19 [cluster="Unk.Count", file="SpecificationPropertyRules.cs", label="Entry Unk.Count", span=""];
m0_114 [file="SpecificationPropertyRules.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", span=""];
m0_11 -> m0_22  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_11 -> m0_26  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_11 -> m0_14  [color=darkseagreen4, key=1, label=options, style=dashed];
m0_12 -> m0_30  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_14 -> m0_33  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_81 -> m0_87  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_81 -> m0_83  [color=darkseagreen4, key=1, label=options, style=dashed];
m0_83 -> m0_92  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_101 -> m0_110  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
}
