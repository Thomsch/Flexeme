digraph  {
m0_37 [label="Entry CommandLine.Core.OptionSpecification.FromOptionSpecification()", span="15-15", cluster="CommandLine.Core.OptionSpecification.FromOptionSpecification()", file="SpecificationPropertyRules.cs"];
m0_109 [label="Entry NameInfo.cstr", span="", cluster="NameInfo.cstr", file="SpecificationPropertyRules.cs"];
m0_4 [label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="24-24", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="SpecificationPropertyRules.cs"];
m0_8 [label="return specProps =>\r\n                {\r\n                    var options = specProps\r\n                            .Where(sp => sp.Specification.IsOption())\r\n                            .Where(sp => ((OptionSpecification)sp.Specification).SetName.Length > 0\r\n                                   && sp.Value.IsJust());\r\n                    var groups = options.GroupBy(g => ((OptionSpecification)g.Specification).SetName);\r\n                    if (groups.Count() > 1)\r\n                    {\r\n                        return options.Select(s =>\r\n                            new MutuallyExclusiveSetError(\r\n                                ((OptionSpecification)s.Specification).FromOptionSpecification()));\r\n                    }\r\n                    return Enumerable.Empty<Error>();\r\n                };", span="26-40", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="SpecificationPropertyRules.cs"];
m0_9 [label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="24-24", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="SpecificationPropertyRules.cs"];
m0_90 [label="Entry CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", span="149-149", cluster="CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", file="SpecificationPropertyRules.cs"];
m0_6 [label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="97-97", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="SpecificationPropertyRules.cs"];
m0_78 [label="return specProps =>\r\n                {\r\n                    var options = specProps.Where(\r\n                        sp => sp.Specification.TargetType == TargetType.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min.FromJust())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max.FromJust())\r\n                        )\r\n                    );\r\n                    if (options.Any())\r\n                    {\r\n                        return options.Select(s => new SequenceOutOfRangeError(\r\n                            s.Specification.FromSpecification()));\r\n                    }\r\n                    return Enumerable.Empty<Error>();\r\n                };", span="99-115", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="SpecificationPropertyRules.cs"];
m0_79 [label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="97-97", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="SpecificationPropertyRules.cs"];
m0_60 [label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="291-291", cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs"];
m0_113 [label="Entry CommandLine.Core.Token.IsName()", span="68-68", cluster="CommandLine.Core.Token.IsName()", file="SpecificationPropertyRules.cs"];
m0_86 [label="Entry Unk.Any", span="", cluster="Unk.Any", file="SpecificationPropertyRules.cs"];
m0_43 [label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRequiredImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>)", span="51-51", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequiredImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>)", file="SpecificationPropertyRules.cs"];
m0_44 [label="var setCount =\r\n                specProps.Where(sp => sp.Specification.IsOption())\r\n                    .Select(sp => ((OptionSpecification)sp.Specification).SetName)\r\n                    .Distinct()\r\n                    .ToList()\r\n                    .Count()", span="53-58", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequiredImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>)", color=red, community=0, file="SpecificationPropertyRules.cs"];
m0_51 [label="yield return new MissingRequiredOptionError(sp.Specification.FromSpecification());", span="76-76", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequiredImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>)", color=red, community=0, file="SpecificationPropertyRules.cs"];
m0_53 [label="yield return new MissingRequiredOptionError(sp.Specification.FromSpecification());", span="83-83", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequiredImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>)", color=red, community=0, file="SpecificationPropertyRules.cs"];
m0_55 [label="yield return new MissingRequiredOptionError(sp.Specification.FromSpecification());", span="91-91", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequiredImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>)", color=red, community=0, file="SpecificationPropertyRules.cs"];
m0_45 [label="var setWithRequired =\r\n                specProps.Where(sp => sp.Specification.IsOption())\r\n                    .Where(sp => sp.Specification.Required)\r\n                    .Select(sp => ((OptionSpecification)sp.Specification).SetName)\r\n                    .Distinct()\r\n                    .ToList()", span="60-65", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequiredImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>)", color=red, community=0, file="SpecificationPropertyRules.cs"];
m0_46 [label=specProps, span="67-67", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequiredImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>)", color=red, community=0, file="SpecificationPropertyRules.cs"];
m0_52 [label="option.SetName.Length > 0 && (\r\n                            setCount == 1 ||\r\n                            (setCount > 1 && !setWithRequired.Contains(option.SetName)))", span="78-80", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequiredImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>)", color=red, community=0, file="SpecificationPropertyRules.cs"];
m0_47 [label="sp.Specification.IsOption()", span="69-69", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequiredImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>)", color=red, community=0, file="SpecificationPropertyRules.cs"];
m0_48 [label="var option = (OptionSpecification)sp.Specification", span="71-71", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequiredImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>)", color=red, community=0, file="SpecificationPropertyRules.cs"];
m0_49 [label="sp.Specification.Required && sp.Value.IsNothing()", span="72-72", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequiredImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>)", color=red, community=0, file="SpecificationPropertyRules.cs"];
m0_54 [label="sp.Specification.Required && sp.Value.IsNothing()", span="89-89", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequiredImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>)", color=red, community=0, file="SpecificationPropertyRules.cs"];
m0_50 [label="option.SetName.Length == 0", span="74-74", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequiredImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>)", color=red, community=0, file="SpecificationPropertyRules.cs"];
m0_56 [label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRequiredImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>)", span="51-51", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequiredImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>)", file="SpecificationPropertyRules.cs"];
m0_17 [label="Entry Unk.Where", span="", cluster="Unk.Where", file="SpecificationPropertyRules.cs"];
m0_21 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()", file="SpecificationPropertyRules.cs"];
m0_96 [label="Entry Unk.FromSpecification", span="", cluster="Unk.FromSpecification", file="SpecificationPropertyRules.cs"];
m0_91 [label="Entry CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", span="134-134", cluster="CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", file="SpecificationPropertyRules.cs"];
m0_7 [label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="118-118", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs"];
m0_97 [label="return specProps =>\r\n                {\r\n                    var specs = from sp in specProps\r\n                                where sp.Specification.IsOption() && sp.Value.IsJust()\r\n                                select (OptionSpecification)sp.Specification;\r\n                    var options = from t in tokens.Where(t => t.IsName())\r\n                                  join o in specs on t.Text equals o.UniqueName() into to\r\n                                  from o in to.DefaultIfEmpty()\r\n                                  where o != null\r\n                                  select new { o.ShortName, o.LongName };\r\n                    var groups = from x in options\r\n                                 group x by x into g\r\n                                 let count = g.Count()\r\n                                 select new { Value = g.Key, Count = count };\r\n                    var errors = from y in groups\r\n                                 where y.Count > 1\r\n                                 select new RepeatedOptionError(new NameInfo(y.Value.ShortName, y.Value.LongName));\r\n                    return errors;\r\n                };", span="120-138", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs"];
m0_98 [label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="118-118", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs"];
m0_59 [label="Entry CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", span="144-144", cluster="CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", file="SpecificationPropertyRules.cs"];
m0_62 [label="Entry Unk.Contains", span="", cluster="Unk.Contains", file="SpecificationPropertyRules.cs"];
m0_95 [label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="324-324", cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs"];
m0_0 [label="Entry CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12", cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs"];
m0_1 [label="return new List<Func<IEnumerable<SpecificationProperty>, IEnumerable<Error>>>\r\n                {\r\n                    EnforceMutuallyExclusiveSet(),\r\n                    EnforceRequired(),\r\n                    EnforceRange(),\r\n                    EnforceSingle(tokens)\r\n                };", span="15-21", cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs"];
m0_2 [label="Exit CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12", cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs"];
m0_110 [label="Entry lambda expression", span="125-125", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m0_11 [label="var options = specProps\r\n                            .Where(sp => sp.Specification.IsOption())\r\n                            .Where(sp => ((OptionSpecification)sp.Specification).SetName.Length > 0\r\n                                   && sp.Value.IsJust())", span="28-31", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m0_10 [label="Entry lambda expression", span="26-40", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m0_12 [label="var groups = options.GroupBy(g => ((OptionSpecification)g.Specification).SetName)", span="32-32", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m0_22 [label="Entry lambda expression", span="29-29", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m0_26 [label="Entry lambda expression", span="30-31", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m0_14 [label="return options.Select(s =>\r\n                            new MutuallyExclusiveSetError(\r\n                                ((OptionSpecification)s.Specification).FromOptionSpecification()));", span="35-37", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m0_13 [label="groups.Count() > 1", span="33-33", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m0_30 [label="Entry lambda expression", span="32-32", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m0_15 [label="return Enumerable.Empty<Error>();", span="39-39", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m0_16 [label="Exit lambda expression", span="26-40", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m0_33 [label="Entry lambda expression", span="35-37", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m0_23 [label="sp.Specification.IsOption()", span="29-29", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m0_24 [label="Exit lambda expression", span="29-29", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m0_27 [label="((OptionSpecification)sp.Specification).SetName.Length > 0\r\n                                   && sp.Value.IsJust()", span="30-31", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m0_28 [label="Exit lambda expression", span="30-31", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m0_31 [label="((OptionSpecification)g.Specification).SetName", span="32-32", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m0_32 [label="Exit lambda expression", span="32-32", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m0_34 [label="new MutuallyExclusiveSetError(\r\n                                ((OptionSpecification)s.Specification).FromOptionSpecification())", span="36-37", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m0_35 [label="Exit lambda expression", span="35-37", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m0_41 [label="return EnforceRequiredImpl(specProps);", span="47-47", cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs"];
m0_40 [label="Entry lambda expression", span="45-48", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m0_42 [label="Exit lambda expression", span="45-48", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m0_63 [label="Entry lambda expression", span="54-54", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m0_66 [label="Entry lambda expression", span="55-55", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m0_69 [label="Entry lambda expression", span="61-61", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m0_72 [label="Entry lambda expression", span="62-62", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m0_75 [label="Entry lambda expression", span="63-63", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m0_64 [label="sp.Specification.IsOption()", span="54-54", cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs"];
m0_65 [label="Exit lambda expression", span="54-54", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m0_67 [label="((OptionSpecification)sp.Specification).SetName", span="55-55", cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs"];
m0_68 [label="Exit lambda expression", span="55-55", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m0_70 [label="sp.Specification.IsOption()", span="61-61", cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs"];
m0_71 [label="Exit lambda expression", span="61-61", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m0_73 [label="sp.Specification.Required", span="62-62", cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs"];
m0_74 [label="Exit lambda expression", span="62-62", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m0_76 [label="((OptionSpecification)sp.Specification).SetName", span="63-63", cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs"];
m0_77 [label="Exit lambda expression", span="63-63", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m0_81 [label="var options = specProps.Where(\r\n                        sp => sp.Specification.TargetType == TargetType.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min.FromJust())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max.FromJust())\r\n                        )\r\n                    )", span="101-108", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m0_80 [label="Entry lambda expression", span="99-115", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m0_82 [label="options.Any()", span="109-109", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m0_87 [label="Entry lambda expression", span="102-107", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m0_83 [label="return options.Select(s => new SequenceOutOfRangeError(\r\n                            s.Specification.FromSpecification()));", span="111-112", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m0_84 [label="return Enumerable.Empty<Error>();", span="114-114", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m0_85 [label="Exit lambda expression", span="99-115", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m0_92 [label="Entry lambda expression", span="111-112", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m0_88 [label="sp.Specification.TargetType == TargetType.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min.FromJust())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max.FromJust())\r\n                        )", span="102-107", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m0_89 [label="Exit lambda expression", span="102-107", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m0_93 [label="new SequenceOutOfRangeError(\r\n                            s.Specification.FromSpecification())", span="111-112", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m0_94 [label="Exit lambda expression", span="111-112", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m0_101 [label="var options = from t in tokens.Where(t => t.IsName())\r\n                                  join o in specs on t.Text equals o.UniqueName() into to\r\n                                  from o in to.DefaultIfEmpty()\r\n                                  where o != null\r\n                                  select new { o.ShortName, o.LongName }", span="125-129", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m0_100 [label="var specs = from sp in specProps\r\n                                where sp.Specification.IsOption() && sp.Value.IsJust()\r\n                                select (OptionSpecification)sp.Specification", span="122-124", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m0_99 [label="Entry lambda expression", span="120-138", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m0_102 [label="var groups = from x in options\r\n                                 group x by x into g\r\n                                 let count = g.Count()\r\n                                 select new { Value = g.Key, Count = count }", span="130-133", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m0_103 [label="var errors = from y in groups\r\n                                 where y.Count > 1\r\n                                 select new RepeatedOptionError(new NameInfo(y.Value.ShortName, y.Value.LongName))", span="134-136", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m0_104 [label="return errors;", span="137-137", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m0_105 [label="Exit lambda expression", span="120-138", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m0_111 [label="t.IsName()", span="125-125", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m0_112 [label="Exit lambda expression", span="125-125", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m0_108 [label="Entry CommandLine.RepeatedOptionError.RepeatedOptionError(CommandLine.NameInfo)", span="335-335", cluster="CommandLine.RepeatedOptionError.RepeatedOptionError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs"];
m0_5 [label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="43-43", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", file="SpecificationPropertyRules.cs"];
m0_38 [label="return specProps =>\r\n            {\r\n                return EnforceRequiredImpl(specProps);\r\n            };", span="45-48", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", color=red, community=0, file="SpecificationPropertyRules.cs"];
m0_39 [label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="43-43", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", file="SpecificationPropertyRules.cs"];
m0_20 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="SpecificationPropertyRules.cs"];
m0_29 [label="Entry Unk.IsJust", span="", cluster="Unk.IsJust", file="SpecificationPropertyRules.cs"];
m0_106 [label="Entry Unk.UniqueName", span="", cluster="Unk.UniqueName", file="SpecificationPropertyRules.cs"];
m0_58 [label="Entry Unk.ToList", span="", cluster="Unk.ToList", file="SpecificationPropertyRules.cs"];
m0_36 [label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="302-302", cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs"];
m0_107 [label="Entry Unk.DefaultIfEmpty", span="", cluster="Unk.DefaultIfEmpty", file="SpecificationPropertyRules.cs"];
m0_25 [label="Entry CommandLine.Core.Specification.IsOption()", span="10-10", cluster="CommandLine.Core.Specification.IsOption()", file="SpecificationPropertyRules.cs"];
m0_61 [label="Entry CommandLine.Core.Specification.FromSpecification()", span="22-22", cluster="CommandLine.Core.Specification.FromSpecification()", file="SpecificationPropertyRules.cs"];
m0_3 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="SpecificationPropertyRules.cs"];
m0_57 [label="Entry Unk.Distinct", span="", cluster="Unk.Distinct", file="SpecificationPropertyRules.cs"];
m0_18 [label="Entry Unk.GroupBy", span="", cluster="Unk.GroupBy", file="SpecificationPropertyRules.cs"];
m0_19 [label="Entry Unk.Count", span="", cluster="Unk.Count", file="SpecificationPropertyRules.cs"];
m0_114 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", span="", file="SpecificationPropertyRules.cs"];
m0_4 -> m0_8  [key=0, style=solid];
m0_8 -> m0_9  [key=0, style=solid];
m0_8 -> m0_11  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m0_9 -> m0_4  [key=0, style=bold, color=blue];
m0_6 -> m0_78  [key=0, style=solid];
m0_78 -> m0_79  [key=0, style=solid];
m0_78 -> m0_81  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m0_79 -> m0_6  [key=0, style=bold, color=blue];
m0_43 -> m0_44  [key=0, style=solid, color=red];
m0_43 -> m0_51  [key=0, style=bold, color=red];
m0_43 -> m0_53  [key=0, style=bold, color=red];
m0_43 -> m0_55  [key=0, style=bold, color=red];
m0_43 -> m0_45  [key=1, style=dashed, color=red, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m0_43 -> m0_46  [key=1, style=dashed, color=red, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m0_43 -> m0_38  [key=3, color=red, style=bold, label="Parameter variable System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty> specProps"];
m0_44 -> m0_45  [key=0, style=solid, color=red];
m0_44 -> m0_17  [key=2, style=dotted, color=red];
m0_44 -> m0_20  [key=2, style=dotted, color=red];
m0_44 -> m0_57  [key=2, style=dotted, color=red];
m0_44 -> m0_58  [key=2, style=dotted, color=red];
m0_44 -> m0_19  [key=2, style=dotted, color=red];
m0_44 -> m0_63  [key=1, style=dashed, color=red, label="lambda expression"];
m0_44 -> m0_66  [key=1, style=dashed, color=red, label="lambda expression"];
m0_44 -> m0_52  [key=1, style=dashed, color=red, label=setCount];
m0_51 -> m0_46  [key=0, style=solid, color=red];
m0_51 -> m0_60  [key=2, style=dotted, color=red];
m0_51 -> m0_61  [key=2, style=dotted, color=red];
m0_53 -> m0_46  [key=0, style=solid, color=red];
m0_53 -> m0_60  [key=2, style=dotted, color=red];
m0_53 -> m0_61  [key=2, style=dotted, color=red];
m0_55 -> m0_46  [key=0, style=solid, color=red];
m0_55 -> m0_60  [key=2, style=dotted, color=red];
m0_55 -> m0_61  [key=2, style=dotted, color=red];
m0_45 -> m0_46  [key=0, style=solid, color=red];
m0_45 -> m0_17  [key=2, style=dotted, color=red];
m0_45 -> m0_20  [key=2, style=dotted, color=red];
m0_45 -> m0_57  [key=2, style=dotted, color=red];
m0_45 -> m0_58  [key=2, style=dotted, color=red];
m0_45 -> m0_69  [key=1, style=dashed, color=red, label="lambda expression"];
m0_45 -> m0_72  [key=1, style=dashed, color=red, label="lambda expression"];
m0_45 -> m0_75  [key=1, style=dashed, color=red, label="lambda expression"];
m0_45 -> m0_52  [key=1, style=dashed, color=red, label=setWithRequired];
m0_46 -> m0_47  [key=0, style=solid, color=red];
m0_46 -> m0_56  [key=0, style=solid, color=red];
m0_46 -> m0_48  [key=1, style=dashed, color=red, label=sp];
m0_46 -> m0_49  [key=1, style=dashed, color=red, label=sp];
m0_46 -> m0_51  [key=1, style=dashed, color=red, label=sp];
m0_46 -> m0_53  [key=1, style=dashed, color=red, label=sp];
m0_46 -> m0_54  [key=1, style=dashed, color=red, label=sp];
m0_46 -> m0_55  [key=1, style=dashed, color=red, label=sp];
m0_52 -> m0_53  [key=0, style=solid, color=red];
m0_52 -> m0_46  [key=0, style=solid, color=red];
m0_52 -> m0_62  [key=2, style=dotted, color=red];
m0_47 -> m0_48  [key=0, style=solid, color=red];
m0_47 -> m0_54  [key=0, style=solid, color=red];
m0_47 -> m0_25  [key=2, style=dotted, color=red];
m0_48 -> m0_49  [key=0, style=solid, color=red];
m0_48 -> m0_50  [key=1, style=dashed, color=red, label=option];
m0_48 -> m0_52  [key=1, style=dashed, color=red, label=option];
m0_49 -> m0_50  [key=0, style=solid, color=red];
m0_49 -> m0_46  [key=0, style=solid, color=red];
m0_49 -> m0_59  [key=2, style=dotted, color=red];
m0_54 -> m0_55  [key=0, style=solid, color=red];
m0_54 -> m0_46  [key=0, style=solid, color=red];
m0_54 -> m0_59  [key=2, style=dotted, color=red];
m0_50 -> m0_51  [key=0, style=solid, color=red];
m0_50 -> m0_52  [key=0, style=solid, color=red];
m0_56 -> m0_43  [key=0, style=bold, color=blue];
m0_7 -> m0_97  [key=0, style=solid];
m0_7 -> m0_101  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
m0_97 -> m0_98  [key=0, style=solid];
m0_97 -> m0_100  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m0_97 -> m0_91  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Collections.Generic.IEnumerable<CommandLine.Error> "];
m0_98 -> m0_7  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_3  [key=2, style=dotted];
m0_1 -> m0_4  [key=2, style=dotted];
m0_1 -> m0_5  [key=2, style=dotted];
m0_1 -> m0_6  [key=2, style=dotted];
m0_1 -> m0_7  [key=2, style=dotted];
m0_2 -> m0_0  [key=0, style=bold, color=blue];
m0_110 -> m0_111  [key=0, style=solid];
m0_11 -> m0_12  [key=0, style=solid];
m0_11 -> m0_17  [key=2, style=dotted];
m0_11 -> m0_22  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_11 -> m0_26  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_11 -> m0_14  [key=1, style=dashed, color=darkseagreen4, label=options];
m0_10 -> m0_11  [key=0, style=solid];
m0_12 -> m0_13  [key=0, style=solid];
m0_12 -> m0_18  [key=2, style=dotted];
m0_12 -> m0_30  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_22 -> m0_23  [key=0, style=solid];
m0_26 -> m0_27  [key=0, style=solid];
m0_14 -> m0_16  [key=0, style=solid];
m0_14 -> m0_20  [key=2, style=dotted];
m0_14 -> m0_33  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_13 -> m0_14  [key=0, style=solid];
m0_13 -> m0_15  [key=0, style=solid];
m0_13 -> m0_19  [key=2, style=dotted];
m0_30 -> m0_31  [key=0, style=solid];
m0_15 -> m0_16  [key=0, style=solid];
m0_15 -> m0_21  [key=2, style=dotted];
m0_16 -> m0_10  [key=0, style=bold, color=blue];
m0_33 -> m0_34  [key=0, style=solid];
m0_23 -> m0_24  [key=0, style=solid];
m0_23 -> m0_25  [key=2, style=dotted];
m0_24 -> m0_22  [key=0, style=bold, color=blue];
m0_27 -> m0_28  [key=0, style=solid];
m0_27 -> m0_29  [key=2, style=dotted];
m0_28 -> m0_26  [key=0, style=bold, color=blue];
m0_31 -> m0_32  [key=0, style=solid];
m0_32 -> m0_30  [key=0, style=bold, color=blue];
m0_34 -> m0_35  [key=0, style=solid];
m0_34 -> m0_36  [key=2, style=dotted];
m0_34 -> m0_37  [key=2, style=dotted];
m0_35 -> m0_33  [key=0, style=bold, color=blue];
m0_41 -> m0_42  [key=0, style=solid, color=red];
m0_41 -> m0_43  [key=2, style=dotted, color=red];
m0_40 -> m0_41  [key=0, style=solid, color=red];
m0_42 -> m0_40  [key=0, style=bold, color=blue];
m0_63 -> m0_64  [key=0, style=solid, color=red];
m0_66 -> m0_67  [key=0, style=solid, color=red];
m0_69 -> m0_70  [key=0, style=solid, color=red];
m0_72 -> m0_73  [key=0, style=solid, color=red];
m0_75 -> m0_76  [key=0, style=solid, color=red];
m0_64 -> m0_65  [key=0, style=solid, color=red];
m0_64 -> m0_25  [key=2, style=dotted, color=red];
m0_65 -> m0_63  [key=0, style=bold, color=blue];
m0_67 -> m0_68  [key=0, style=solid, color=red];
m0_68 -> m0_66  [key=0, style=bold, color=blue];
m0_70 -> m0_71  [key=0, style=solid, color=red];
m0_70 -> m0_25  [key=2, style=dotted, color=red];
m0_71 -> m0_69  [key=0, style=bold, color=blue];
m0_73 -> m0_74  [key=0, style=solid, color=red];
m0_74 -> m0_72  [key=0, style=bold, color=blue];
m0_76 -> m0_77  [key=0, style=solid, color=red];
m0_77 -> m0_75  [key=0, style=bold, color=blue];
m0_81 -> m0_82  [key=0, style=solid];
m0_81 -> m0_17  [key=2, style=dotted];
m0_81 -> m0_87  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_81 -> m0_83  [key=1, style=dashed, color=darkseagreen4, label=options];
m0_80 -> m0_81  [key=0, style=solid];
m0_82 -> m0_83  [key=0, style=solid];
m0_82 -> m0_84  [key=0, style=solid];
m0_82 -> m0_86  [key=2, style=dotted];
m0_87 -> m0_88  [key=0, style=solid];
m0_83 -> m0_85  [key=0, style=solid];
m0_83 -> m0_20  [key=2, style=dotted];
m0_83 -> m0_92  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_84 -> m0_85  [key=0, style=solid];
m0_84 -> m0_21  [key=2, style=dotted];
m0_85 -> m0_80  [key=0, style=bold, color=blue];
m0_92 -> m0_93  [key=0, style=solid];
m0_88 -> m0_89  [key=0, style=solid];
m0_88 -> m0_90  [key=2, style=dotted];
m0_88 -> m0_91  [key=2, style=dotted];
m0_89 -> m0_87  [key=0, style=bold, color=blue];
m0_93 -> m0_94  [key=0, style=solid];
m0_93 -> m0_95  [key=2, style=dotted];
m0_93 -> m0_96  [key=2, style=dotted];
m0_94 -> m0_92  [key=0, style=bold, color=blue];
m0_101 -> m0_102  [key=0, style=solid];
m0_101 -> m0_17  [key=2, style=dotted];
m0_101 -> m0_106  [key=2, style=dotted];
m0_101 -> m0_107  [key=2, style=dotted];
m0_101 -> m0_110  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_101 -> m0_101  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_100 -> m0_101  [key=0, style=solid];
m0_100 -> m0_25  [key=2, style=dotted];
m0_100 -> m0_90  [key=2, style=dotted];
m0_100 -> m0_100  [key=1, style=dashed, color=darkseagreen4, label=sp];
m0_99 -> m0_100  [key=0, style=solid];
m0_102 -> m0_103  [key=0, style=solid];
m0_102 -> m0_19  [key=2, style=dotted];
m0_102 -> m0_102  [key=1, style=dashed, color=darkseagreen4, label=x];
m0_103 -> m0_104  [key=0, style=solid];
m0_103 -> m0_108  [key=2, style=dotted];
m0_103 -> m0_109  [key=2, style=dotted];
m0_103 -> m0_103  [key=1, style=dashed, color=darkseagreen4, label=y];
m0_104 -> m0_105  [key=0, style=solid];
m0_105 -> m0_99  [key=0, style=bold, color=blue];
m0_111 -> m0_112  [key=0, style=solid];
m0_111 -> m0_113  [key=2, style=dotted];
m0_112 -> m0_110  [key=0, style=bold, color=blue];
m0_5 -> m0_38  [key=0, style=solid, color=red];
m0_38 -> m0_39  [key=0, style=solid, color=red];
m0_38 -> m0_41  [key=1, style=dashed, color=red, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m0_38 -> m0_43  [key=3, color=red, style=bold, label="method methodReturn System.Collections.Generic.IEnumerable<CommandLine.Error> "];
m0_39 -> m0_5  [key=0, style=bold, color=blue];
m0_114 -> m0_101  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
}
