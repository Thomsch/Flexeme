digraph  {
n40 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", span=""];
n0 [label="Entry CommandLine.Core.SpecificationPropertyExtensions.WithSpecification(CommandLine.Core.SpecificationProperty, CommandLine.Core.Specification)", span="11-11", cluster="CommandLine.Core.SpecificationPropertyExtensions.WithSpecification(CommandLine.Core.SpecificationProperty, CommandLine.Core.Specification)"];
n1 [label="specProp == null", span="13-13", cluster="CommandLine.Core.SpecificationPropertyExtensions.WithSpecification(CommandLine.Core.SpecificationProperty, CommandLine.Core.Specification)"];
n3 [label="newSpecification == null", span="14-14", cluster="CommandLine.Core.SpecificationPropertyExtensions.WithSpecification(CommandLine.Core.SpecificationProperty, CommandLine.Core.Specification)"];
n5 [label="return SpecificationProperty.Create(newSpecification, specProp.Property, specProp.Value);", span="16-16", cluster="CommandLine.Core.SpecificationPropertyExtensions.WithSpecification(CommandLine.Core.SpecificationProperty, CommandLine.Core.Specification)"];
n2 [label="throw new ArgumentNullException(''specProp'');", span="13-13", cluster="CommandLine.Core.SpecificationPropertyExtensions.WithSpecification(CommandLine.Core.SpecificationProperty, CommandLine.Core.Specification)"];
n4 [label="throw new ArgumentNullException(''newSpecification'');", span="14-14", cluster="CommandLine.Core.SpecificationPropertyExtensions.WithSpecification(CommandLine.Core.SpecificationProperty, CommandLine.Core.Specification)"];
n6 [label="Exit CommandLine.Core.SpecificationPropertyExtensions.WithSpecification(CommandLine.Core.SpecificationProperty, CommandLine.Core.Specification)", span="11-11", cluster="CommandLine.Core.SpecificationPropertyExtensions.WithSpecification(CommandLine.Core.SpecificationProperty, CommandLine.Core.Specification)"];
n8 [label="Entry CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CommandLine.Infrastructure.Maybe<object>)", span="21-21", cluster="CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CommandLine.Infrastructure.Maybe<object>)"];
n7 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)"];
n9 [label="Entry CommandLine.Core.SpecificationPropertyExtensions.WithValue(CommandLine.Core.SpecificationProperty, CommandLine.Infrastructure.Maybe<object>)", span="19-19", cluster="CommandLine.Core.SpecificationPropertyExtensions.WithValue(CommandLine.Core.SpecificationProperty, CommandLine.Infrastructure.Maybe<object>)"];
n10 [label="specProp == null", span="21-21", cluster="CommandLine.Core.SpecificationPropertyExtensions.WithValue(CommandLine.Core.SpecificationProperty, CommandLine.Infrastructure.Maybe<object>)"];
n12 [label="newValue == null", span="22-22", cluster="CommandLine.Core.SpecificationPropertyExtensions.WithValue(CommandLine.Core.SpecificationProperty, CommandLine.Infrastructure.Maybe<object>)"];
n14 [label="return SpecificationProperty.Create(specProp.Specification, specProp.Property, newValue);", span="24-24", cluster="CommandLine.Core.SpecificationPropertyExtensions.WithValue(CommandLine.Core.SpecificationProperty, CommandLine.Infrastructure.Maybe<object>)", color=red, community=0];
n11 [label="throw new ArgumentNullException(''specProp'');", span="21-21", cluster="CommandLine.Core.SpecificationPropertyExtensions.WithValue(CommandLine.Core.SpecificationProperty, CommandLine.Infrastructure.Maybe<object>)"];
n13 [label="throw new ArgumentNullException(''newValue'');", span="22-22", cluster="CommandLine.Core.SpecificationPropertyExtensions.WithValue(CommandLine.Core.SpecificationProperty, CommandLine.Infrastructure.Maybe<object>)"];
n15 [label="Exit CommandLine.Core.SpecificationPropertyExtensions.WithValue(CommandLine.Core.SpecificationProperty, CommandLine.Infrastructure.Maybe<object>)", span="19-19", cluster="CommandLine.Core.SpecificationPropertyExtensions.WithValue(CommandLine.Core.SpecificationProperty, CommandLine.Infrastructure.Maybe<object>)"];
n16 [label="Entry CommandLine.Core.SpecificationPropertyExtensions.GetConversionType(CommandLine.Core.SpecificationProperty)", span="27-27", cluster="CommandLine.Core.SpecificationPropertyExtensions.GetConversionType(CommandLine.Core.SpecificationProperty)"];
n17 [label="specProp == null", span="29-29", cluster="CommandLine.Core.SpecificationPropertyExtensions.GetConversionType(CommandLine.Core.SpecificationProperty)", color=red, community=0];
n19 [label="specProp.Specification.ConversionType.ToDescriptor()", span="31-31", cluster="CommandLine.Core.SpecificationPropertyExtensions.GetConversionType(CommandLine.Core.SpecificationProperty)", color=red, community=0];
n21 [label="return specProp.Property.PropertyType.GetGenericArguments()\r\n                             .SingleOrDefault()\r\n                             .ToMaybe()\r\n                             .FromJust(\r\n                                 new InvalidOperationException(''Sequence properties should be of type IEnumerable<T>.''));", span="34-38", cluster="CommandLine.Core.SpecificationPropertyExtensions.GetConversionType(CommandLine.Core.SpecificationProperty)", color=red, community=0];
n22 [label="return specProp.Property.PropertyType;", span="40-40", cluster="CommandLine.Core.SpecificationPropertyExtensions.GetConversionType(CommandLine.Core.SpecificationProperty)"];
n18 [label="throw new ArgumentNullException(''specProp'');", span="29-29", cluster="CommandLine.Core.SpecificationPropertyExtensions.GetConversionType(CommandLine.Core.SpecificationProperty)", color=red, community=0];
n20 [label="TypeDescriptorKind.Sequence", span="33-33", cluster="CommandLine.Core.SpecificationPropertyExtensions.GetConversionType(CommandLine.Core.SpecificationProperty)"];
n24 [label="Entry System.Type.ToDescriptor()", span="22-22", cluster="System.Type.ToDescriptor()"];
n23 [label="Exit CommandLine.Core.SpecificationPropertyExtensions.GetConversionType(CommandLine.Core.SpecificationProperty)", span="27-27", cluster="CommandLine.Core.SpecificationPropertyExtensions.GetConversionType(CommandLine.Core.SpecificationProperty)"];
n25 [label="Entry System.Type.GetGenericArguments()", span="0-0", cluster="System.Type.GetGenericArguments()"];
n26 [label="Entry System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()"];
n27 [label="Entry T.ToMaybe<T>()", span="82-82", cluster="T.ToMaybe<T>()"];
n28 [label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0", cluster="System.InvalidOperationException.InvalidOperationException(string)"];
n29 [label="Entry CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", span="137-137", cluster="CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)"];
n30 [label="Entry CommandLine.Core.SpecificationPropertyExtensions.Validate(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Infrastructure.Maybe<CommandLine.Error>>>>)", span="44-44", cluster="CommandLine.Core.SpecificationPropertyExtensions.Validate(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Infrastructure.Maybe<CommandLine.Error>>>>)"];
n31 [label="specProps == null", span="49-49", cluster="CommandLine.Core.SpecificationPropertyExtensions.Validate(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Infrastructure.Maybe<CommandLine.Error>>>>)"];
n33 [label="return rules.SelectMany(rule => rule(specProps));", span="51-51", cluster="CommandLine.Core.SpecificationPropertyExtensions.Validate(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Infrastructure.Maybe<CommandLine.Error>>>>)"];
n37 [label="rule(specProps)", span="51-51", cluster="lambda expression"];
n32 [label="throw new ArgumentNullException(''specProps'');", span="49-49", cluster="CommandLine.Core.SpecificationPropertyExtensions.Validate(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Infrastructure.Maybe<CommandLine.Error>>>>)"];
n34 [label="Exit CommandLine.Core.SpecificationPropertyExtensions.Validate(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Infrastructure.Maybe<CommandLine.Error>>>>)", span="44-44", cluster="CommandLine.Core.SpecificationPropertyExtensions.Validate(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Infrastructure.Maybe<CommandLine.Error>>>>)"];
n35 [label="Entry System.Collections.Generic.IEnumerable<TSource>.SelectMany<TSource, TResult>(System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.SelectMany<TSource, TResult>(System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)"];
n36 [label="Entry lambda expression", span="51-51", cluster="lambda expression"];
n38 [label="Exit lambda expression", span="51-51", cluster="lambda expression"];
n39 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)"];
m0_43 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="121-121", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="ParserContext.cs"];
m0_44 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Simple_Options>>(() => new Simple_Options()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="126-131", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="ParserContext.cs"];
m0_45 [label="((Parsed<Simple_Options>)result).Value.IntSequence.ShouldBeEquivalentTo(expected)", span="134-134", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="ParserContext.cs"];
m0_46 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="121-121", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="ParserContext.cs"];
m0_350 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", span="858-858", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="ParserContext.cs"];
m0_351 [label="Action test = () => InstanceBuilder.Build(\r\n                Maybe.Just<Func<Options_With_Both_Min_And_Max_Set_To_Zero>>(() => new Options_With_Both_Min_And_Max_Set_To_Zero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="861-866", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="ParserContext.cs"];
m0_352 [label="Assert.Throws<ApplicationException>(test)", span="869-869", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="ParserContext.cs"];
m0_353 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", span="858-858", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="ParserContext.cs"];
m0_174 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="37-37", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="ParserContext.cs"];
m0_331 [label="Entry Unk.>", span="", cluster="Unk.>", file="ParserContext.cs"];
m0_153 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="406-406", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="ParserContext.cs"];
m0_154 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Options_With_Sequence_Having_Separator_Set>>(() => new Options_With_Sequence_Having_Separator_Set()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="411-416", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="ParserContext.cs"];
m0_155 [label="expected.ShouldBeEquivalentTo(((Parsed<Options_With_Sequence_Having_Separator_Set>)result).Value.LongSequence)", span="419-419", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="ParserContext.cs"];
m0_156 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="406-406", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="ParserContext.cs"];
m0_42 [label="Entry CommandLine.Tests.Fakes.Options_With_Sequence.Options_With_Sequence()", span="6-6", cluster="CommandLine.Tests.Fakes.Options_With_Sequence.Options_With_Sequence()", file="ParserContext.cs"];
m0_205 [label="Entry CommandLine.Tests.Fakes.Options_With_Required_Set_To_True_Within_Same_Set.Options_With_Required_Set_To_True_Within_Same_Set()", span="4-4", cluster="CommandLine.Tests.Fakes.Options_With_Required_Set_To_True_Within_Same_Set.Options_With_Required_Set_To_True_Within_Same_Set()", file="ParserContext.cs"];
m0_260 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="649-649", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="ParserContext.cs"];
m0_261 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Simple_Options>>(() => new Simple_Options()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="654-659", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="ParserContext.cs"];
m0_262 [label="((Parsed<Simple_Options>)result).Value.StringValue.ShouldBeEquivalentTo(expected)", span="662-662", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="ParserContext.cs"];
m0_263 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="649-649", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="ParserContext.cs"];
m0_327 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", span="828-828", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="ParserContext.cs"];
m0_328 [label="Action test = () => InstanceBuilder.Build(\r\n                Maybe.Just<Func<Options_With_Min_Set_To_Zero>>(() => new Options_With_Min_Set_To_Zero()),\r\n                new string[] {},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="831-836", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="ParserContext.cs"];
m0_329 [label="Assert.Throws<ApplicationException>(test)", span="839-839", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="ParserContext.cs"];
m0_330 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", span="828-828", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="ParserContext.cs"];
m0_300 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="758-758", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="ParserContext.cs"];
m0_301 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Options_With_Nullables>>(() => new Options_With_Nullables()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="763-768", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="ParserContext.cs"];
m0_302 [label="expected.ShouldBeEquivalentTo(((Parsed<Options_With_Nullables>)result).Value.NullableLong)", span="771-771", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="ParserContext.cs"];
m0_303 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="758-758", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="ParserContext.cs"];
m0_81 [label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="360-360", cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="ParserContext.cs"];
m0_16 [label="Entry CommandLine.TypeInfo.Create(System.Type)", span="29-29", cluster="CommandLine.TypeInfo.Create(System.Type)", file="ParserContext.cs"];
m0_409 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.Options_With_Required_Set_To_True_For_Values)", span="963-963", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.Options_With_Required_Set_To_True_For_Values)", file="ParserContext.cs"];
m0_410 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Options_With_Required_Set_To_True_For_Values>>(() => new Options_With_Required_Set_To_True_For_Values()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="968-973", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.Options_With_Required_Set_To_True_For_Values)", file="ParserContext.cs"];
m0_411 [label="expected.ShouldBeEquivalentTo(((Parsed<Options_With_Required_Set_To_True_For_Values>)result).Value)", span="976-976", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.Options_With_Required_Set_To_True_For_Values)", file="ParserContext.cs"];
m0_412 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.Options_With_Required_Set_To_True_For_Values)", span="963-963", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.Options_With_Required_Set_To_True_For_Values)", file="ParserContext.cs"];
m0_168 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="451-451", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="ParserContext.cs"];
m0_169 [label="var expectedResult = new Simple_Options_With_Values\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="454-460", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="ParserContext.cs"];
m0_170 [label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="461-461", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="ParserContext.cs"];
m0_172 [label="expectedResult.ShouldBeEquivalentTo(((Parsed<Simple_Options_With_Values>)result).Value)", span="475-475", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="ParserContext.cs"];
m0_171 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Simple_Options_With_Values>>(() => new Simple_Options_With_Values()),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="464-472", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="ParserContext.cs"];
m0_173 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="451-451", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="ParserContext.cs"];
m0_252 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="627-627", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="ParserContext.cs"];
m0_253 [label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="630-630", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="ParserContext.cs"];
m0_254 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Simple_Options>>(() => new Simple_Options()),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="633-638", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="ParserContext.cs"];
m0_255 [label="((NotParsed<Simple_Options>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="641-641", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="ParserContext.cs"];
m0_256 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="627-627", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="ParserContext.cs"];
m0_291 [label="Entry CommandLine.Tests.Fakes.Options_With_Sequence_Having_Both_Min_And_Max_Equal.Options_With_Sequence_Having_Both_Min_And_Max_Equal()", span="9-9", cluster="CommandLine.Tests.Fakes.Options_With_Sequence_Having_Both_Min_And_Max_Equal.Options_With_Sequence_Having_Both_Min_And_Max_Equal()", file="ParserContext.cs"];
m0_387 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", span="918-918", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", file="ParserContext.cs"];
m0_388 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Options_With_Interface>>(() => new Options_With_Interface()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="921-926", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", file="ParserContext.cs"];
m0_389 [label="expected.ShouldBeEquivalentTo(((Parsed<Options_With_Interface>)result).Value.InputFile)", span="929-929", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", file="ParserContext.cs"];
m0_390 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", span="918-918", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", file="ParserContext.cs"];
m0_76 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="207-207", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ParserContext.cs"];
m0_77 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="210-210", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ParserContext.cs"];
m0_78 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Options_With_Sequence_And_Only_Min_Constraint_For_Value>>(() => new Options_With_Sequence_And_Only_Min_Constraint_For_Value()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="213-218", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ParserContext.cs"];
m0_79 [label="((NotParsed<Options_With_Sequence_And_Only_Min_Constraint_For_Value>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="221-221", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ParserContext.cs"];
m0_80 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="207-207", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ParserContext.cs"];
m0_240 [label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="305-305", cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", file="ParserContext.cs"];
m0_94 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="247-247", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ParserContext.cs"];
m0_95 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="250-250", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ParserContext.cs"];
m0_96 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Options_With_Sequence_And_Only_Max_Constraint_For_Value>>(() => new Options_With_Sequence_And_Only_Max_Constraint_For_Value()),\r\n                new[] { ''one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="253-258", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ParserContext.cs"];
m0_97 [label="((NotParsed<Options_With_Sequence_And_Only_Max_Constraint_For_Value>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="261-261", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ParserContext.cs"];
m0_98 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="247-247", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ParserContext.cs"];
m0_449 [label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116", cluster="CSharpx.Maybe.Nothing<T>()", file="ParserContext.cs"];
m0_307 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="779-779", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="ParserContext.cs"];
m0_308 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Options_With_FSharpOption>>(() => new Options_With_FSharpOption()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="784-789", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="ParserContext.cs"];
m0_310 [label="expectedValue.ShouldBeEquivalentTo(((Parsed<Options_With_FSharpOption>)result).Value.FileName.Value)", span="794-794", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="ParserContext.cs"];
m0_311 [label="expectedSome.ShouldBeEquivalentTo(FSharpOption<string>.get_IsSome(((Parsed<Options_With_FSharpOption>)result).Value.FileName))", span="796-796", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="ParserContext.cs"];
m0_309 [label="((Parsed<Options_With_FSharpOption>)result).Value.FileName != null", span="792-792", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="ParserContext.cs"];
m0_312 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="779-779", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="ParserContext.cs"];
m0_432 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", span="1028-1028", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", file="ParserContext.cs"];
m0_433 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Options_With_Two_Options_Having_Required_Set_To_True>>(() => new Options_With_Two_Options_Having_Required_Set_To_True()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="1031-1036", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", file="ParserContext.cs"];
m0_435 [label="errors.OfType<MissingRequiredOptionError>().Should().HaveCount(x => x == expected)", span="1040-1040", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", file="ParserContext.cs"];
m0_434 [label="var errors = ((NotParsed<Options_With_Two_Options_Having_Required_Set_To_True>)result).Errors", span="1039-1039", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", file="ParserContext.cs"];
m0_436 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", span="1028-1028", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", file="ParserContext.cs"];
m0_185 [label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>)", span="13-13", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>)", file="ParserContext.cs"];
m0_244 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="607-607", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="ParserContext.cs"];
m0_245 [label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="610-610", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="ParserContext.cs"];
m0_246 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Simple_Options>>(() => new Simple_Options()),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="613-618", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="ParserContext.cs"];
m0_247 [label="((NotParsed<Simple_Options>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="621-621", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="ParserContext.cs"];
m0_248 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="607-607", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="ParserContext.cs"];
m0_338 [label="Entry CommandLine.Tests.Fakes.Options_With_Min_Set_To_Zero.Options_With_Min_Set_To_Zero()", span="6-6", cluster="CommandLine.Tests.Fakes.Options_With_Min_Set_To_Zero.Options_With_Min_Set_To_Zero()", file="ParserContext.cs"];
m0_111 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="292-292", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="ParserContext.cs"];
m0_112 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="295-295", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="ParserContext.cs"];
m0_113 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Simple_Options_With_Enum>>(() => new Simple_Options_With_Enum()),\r\n                new[] { ''--colors'', ''3'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="298-303", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="ParserContext.cs"];
m0_114 [label="((NotParsed<Simple_Options_With_Enum>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="306-306", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="ParserContext.cs"];
m0_115 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="292-292", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="ParserContext.cs"];
m0_199 [label="Entry CommandLine.Tests.Fakes.Options_With_Two_Sets.Options_With_Two_Sets()", span="4-4", cluster="CommandLine.Tests.Fakes.Options_With_Two_Sets.Options_With_Two_Sets()", file="ParserContext.cs"];
m0_17 [label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="393-393", cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="ParserContext.cs"];
m0_18 [label="Entry Unk.ShouldBeEquivalentTo", span="", cluster="Unk.ShouldBeEquivalentTo", file="ParserContext.cs"];
m0_9 [label="Entry T.cstr", span="", cluster="T.cstr", file="ParserContext.cs"];
m0_145 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="383-383", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="ParserContext.cs"];
m0_146 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Options_With_Sequence_Without_Range_For_Value>>(() => new Options_With_Sequence_Without_Range_For_Value()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="388-393", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="ParserContext.cs"];
m0_147 [label="expected.ShouldBeEquivalentTo(((Parsed<Options_With_Sequence_Without_Range_For_Value>)result).Value.LongSequence)", span="396-396", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="ParserContext.cs"];
m0_148 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="383-383", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="ParserContext.cs"];
m0_58 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="168-168", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="ParserContext.cs"];
m0_59 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Options_With_Sequence_And_Only_Max_Constraint>>(() => new Options_With_Sequence_And_Only_Max_Constraint()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="173-178", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="ParserContext.cs"];
m0_60 [label="((Parsed<Options_With_Sequence_And_Only_Max_Constraint>)result).Value.StringSequence.ShouldBeEquivalentTo(expected)", span="181-181", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="ParserContext.cs"];
m0_61 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="168-168", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="ParserContext.cs"];
m0_405 [label="Entry CommandLine.Tests.Fakes.Options_With_Two_Option_Required_Set_To_True_And_Two_Sets.Options_With_Two_Option_Required_Set_To_True_And_Two_Sets()", span="4-4", cluster="CommandLine.Tests.Fakes.Options_With_Two_Option_Required_Set_To_True_And_Two_Sets.Options_With_Two_Option_Required_Set_To_True_And_Two_Sets()", file="ParserContext.cs"];
m0_361 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", span="878-878", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", file="ParserContext.cs"];
m0_362 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Options_With_Named_And_Empty_Sets>>(() => new Options_With_Named_And_Empty_Sets()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="881-886", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", file="ParserContext.cs"];
m0_363 [label="type == ParserResultType.NotParsed", span="889-889", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", file="ParserContext.cs"];
m0_364 [label="((NotParsed<Options_With_Named_And_Empty_Sets>)result).Errors.Should().HaveCount(x => x == expected)", span="891-891", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", file="ParserContext.cs"];
m0_365 [label="type == ParserResultType.Parsed", span="893-893", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", file="ParserContext.cs"];
m0_366 [label="result.Should().BeOfType<Parsed<Options_With_Named_And_Empty_Sets>>()", span="895-895", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", file="ParserContext.cs"];
m0_367 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", span="878-878", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", file="ParserContext.cs"];
m0_57 [label="Entry CommandLine.Tests.Fakes.Options_With_Sequence_And_Only_Min_Constraint.Options_With_Sequence_And_Only_Min_Constraint()", span="6-6", cluster="CommandLine.Tests.Fakes.Options_With_Sequence_And_Only_Min_Constraint.Options_With_Sequence_And_Only_Min_Constraint()", file="ParserContext.cs"];
m0_35 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="98-98", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="ParserContext.cs"];
m0_36 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Options_With_Sequence>>(() => new Options_With_Sequence()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="103-108", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="ParserContext.cs"];
m0_37 [label="((Parsed<Options_With_Sequence>)result).Value.IntSequence.ShouldBeEquivalentTo(expected)", span="111-111", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="ParserContext.cs"];
m0_38 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="98-98", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="ParserContext.cs"];
m0_458 [label="Entry lambda expression", span="1071-1071", cluster="lambda expression", file="ParserContext.cs"];
m0_6 [label="Entry lambda expression", span="21-21", cluster="lambda expression", file="ParserContext.cs"];
m0_7 [label="new T()", span="21-21", cluster="lambda expression", color=red, community=0, file="ParserContext.cs"];
m0_8 [label="Exit lambda expression", span="21-21", cluster="lambda expression", file="ParserContext.cs"];
m0_23 [label="Entry lambda expression", span="55-55", cluster="lambda expression", file="ParserContext.cs"];
m0_24 [label="new Simple_Options()", span="55-55", cluster="lambda expression", color=red, community=0, file="ParserContext.cs"];
m0_25 [label="Exit lambda expression", span="55-55", cluster="lambda expression", file="ParserContext.cs"];
m0_31 [label="Entry lambda expression", span="79-79", cluster="lambda expression", file="ParserContext.cs"];
m0_32 [label="new Simple_Options_With_Double_Value()", span="79-79", cluster="lambda expression", file="ParserContext.cs"];
m0_33 [label="Exit lambda expression", span="79-79", cluster="lambda expression", file="ParserContext.cs"];
m0_39 [label="Entry lambda expression", span="104-104", cluster="lambda expression", file="ParserContext.cs"];
m0_40 [label="new Options_With_Sequence()", span="104-104", cluster="lambda expression", file="ParserContext.cs"];
m0_41 [label="Exit lambda expression", span="104-104", cluster="lambda expression", file="ParserContext.cs"];
m0_47 [label="Entry lambda expression", span="127-127", cluster="lambda expression", file="ParserContext.cs"];
m0_48 [label="new Simple_Options()", span="127-127", cluster="lambda expression", file="ParserContext.cs"];
m0_49 [label="Exit lambda expression", span="127-127", cluster="lambda expression", file="ParserContext.cs"];
m0_54 [label="Entry lambda expression", span="151-151", cluster="lambda expression", file="ParserContext.cs"];
m0_55 [label="new Options_With_Sequence_And_Only_Min_Constraint()", span="151-151", cluster="lambda expression", file="ParserContext.cs"];
m0_56 [label="Exit lambda expression", span="151-151", cluster="lambda expression", file="ParserContext.cs"];
m0_62 [label="Entry lambda expression", span="174-174", cluster="lambda expression", file="ParserContext.cs"];
m0_63 [label="new Options_With_Sequence_And_Only_Max_Constraint()", span="174-174", cluster="lambda expression", file="ParserContext.cs"];
m0_64 [label="Exit lambda expression", span="174-174", cluster="lambda expression", file="ParserContext.cs"];
m0_73 [label="Entry lambda expression", span="194-194", cluster="lambda expression", file="ParserContext.cs"];
m0_74 [label="new Options_With_Sequence_And_Only_Min_Constraint()", span="194-194", cluster="lambda expression", file="ParserContext.cs"];
m0_75 [label="Exit lambda expression", span="194-194", cluster="lambda expression", file="ParserContext.cs"];
m0_82 [label="Entry lambda expression", span="214-214", cluster="lambda expression", file="ParserContext.cs"];
m0_83 [label="new Options_With_Sequence_And_Only_Min_Constraint_For_Value()", span="214-214", cluster="lambda expression", file="ParserContext.cs"];
m0_84 [label="Exit lambda expression", span="214-214", cluster="lambda expression", file="ParserContext.cs"];
m0_91 [label="Entry lambda expression", span="234-234", cluster="lambda expression", file="ParserContext.cs"];
m0_92 [label="new Options_With_Sequence_And_Only_Max_Constraint()", span="234-234", cluster="lambda expression", file="ParserContext.cs"];
m0_93 [label="Exit lambda expression", span="234-234", cluster="lambda expression", file="ParserContext.cs"];
m0_99 [label="Entry lambda expression", span="254-254", cluster="lambda expression", file="ParserContext.cs"];
m0_100 [label="new Options_With_Sequence_And_Only_Max_Constraint_For_Value()", span="254-254", cluster="lambda expression", file="ParserContext.cs"];
m0_101 [label="Exit lambda expression", span="254-254", cluster="lambda expression", file="ParserContext.cs"];
m0_107 [label="Entry lambda expression", span="279-279", cluster="lambda expression", file="ParserContext.cs"];
m0_108 [label="new Simple_Options_With_Enum()", span="279-279", cluster="lambda expression", file="ParserContext.cs"];
m0_109 [label="Exit lambda expression", span="279-279", cluster="lambda expression", file="ParserContext.cs"];
m0_117 [label="Entry lambda expression", span="299-299", cluster="lambda expression", file="ParserContext.cs"];
m0_118 [label="new Simple_Options_With_Enum()", span="299-299", cluster="lambda expression", file="ParserContext.cs"];
m0_119 [label="Exit lambda expression", span="299-299", cluster="lambda expression", file="ParserContext.cs"];
m0_125 [label="Entry lambda expression", span="319-319", cluster="lambda expression", file="ParserContext.cs"];
m0_126 [label="new Simple_Options_With_Enum()", span="319-319", cluster="lambda expression", file="ParserContext.cs"];
m0_127 [label="Exit lambda expression", span="319-319", cluster="lambda expression", file="ParserContext.cs"];
m0_133 [label="Entry lambda expression", span="339-339", cluster="lambda expression", file="ParserContext.cs"];
m0_134 [label="new Simple_Options_With_Enum()", span="339-339", cluster="lambda expression", file="ParserContext.cs"];
m0_135 [label="Exit lambda expression", span="339-339", cluster="lambda expression", file="ParserContext.cs"];
m0_142 [label="Entry lambda expression", span="365-365", cluster="lambda expression", file="ParserContext.cs"];
m0_143 [label="new Simple_Options_With_Values()", span="365-365", cluster="lambda expression", file="ParserContext.cs"];
m0_144 [label="Exit lambda expression", span="365-365", cluster="lambda expression", file="ParserContext.cs"];
m0_149 [label="Entry lambda expression", span="389-389", cluster="lambda expression", file="ParserContext.cs"];
m0_150 [label="new Options_With_Sequence_Without_Range_For_Value()", span="389-389", cluster="lambda expression", file="ParserContext.cs"];
m0_151 [label="Exit lambda expression", span="389-389", cluster="lambda expression", file="ParserContext.cs"];
m0_157 [label="Entry lambda expression", span="412-412", cluster="lambda expression", file="ParserContext.cs"];
m0_158 [label="new Options_With_Sequence_Having_Separator_Set()", span="412-412", cluster="lambda expression", file="ParserContext.cs"];
m0_159 [label="Exit lambda expression", span="412-412", cluster="lambda expression", file="ParserContext.cs"];
m0_165 [label="Entry lambda expression", span="435-435", cluster="lambda expression", file="ParserContext.cs"];
m0_166 [label="new Options_With_Sequence_Having_Separator_Set()", span="435-435", cluster="lambda expression", file="ParserContext.cs"];
m0_167 [label="Exit lambda expression", span="435-435", cluster="lambda expression", file="ParserContext.cs"];
m0_175 [label="Entry lambda expression", span="465-465", cluster="lambda expression", file="ParserContext.cs"];
m0_178 [label="Entry lambda expression", span="466-468", cluster="lambda expression", file="ParserContext.cs"];
m0_176 [label="new Simple_Options_With_Values()", span="465-465", cluster="lambda expression", file="ParserContext.cs"];
m0_177 [label="Exit lambda expression", span="465-465", cluster="lambda expression", file="ParserContext.cs"];
m0_179 [label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="467-468", cluster="lambda expression", file="ParserContext.cs"];
m0_183 [label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="468-468", cluster="lambda expression", file="ParserContext.cs"];
m0_187 [label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="468-468", cluster="lambda expression", file="ParserContext.cs"];
m0_180 [label="Exit lambda expression", span="466-468", cluster="lambda expression", file="ParserContext.cs"];
m0_182 [label="Entry lambda expression", span="468-468", cluster="lambda expression", file="ParserContext.cs"];
m0_184 [label="Exit lambda expression", span="468-468", cluster="lambda expression", file="ParserContext.cs"];
m0_186 [label="Entry lambda expression", span="468-468", cluster="lambda expression", file="ParserContext.cs"];
m0_188 [label="Exit lambda expression", span="468-468", cluster="lambda expression", file="ParserContext.cs"];
m0_196 [label="Entry lambda expression", span="492-492", cluster="lambda expression", file="ParserContext.cs"];
m0_197 [label="new Options_With_Two_Sets()", span="492-492", cluster="lambda expression", file="ParserContext.cs"];
m0_198 [label="Exit lambda expression", span="492-492", cluster="lambda expression", file="ParserContext.cs"];
m0_206 [label="Entry lambda expression", span="513-513", cluster="lambda expression", file="ParserContext.cs"];
m0_207 [label="new Options_With_Required_Set_To_True_Within_Same_Set()", span="513-513", cluster="lambda expression", file="ParserContext.cs"];
m0_208 [label="Exit lambda expression", span="513-513", cluster="lambda expression", file="ParserContext.cs"];
m0_215 [label="Entry lambda expression", span="534-534", cluster="lambda expression", file="ParserContext.cs"];
m0_216 [label="new Options_With_Required_Set_To_True_Within_Same_Set()", span="534-534", cluster="lambda expression", file="ParserContext.cs"];
m0_217 [label="Exit lambda expression", span="534-534", cluster="lambda expression", file="ParserContext.cs"];
m0_223 [label="Entry lambda expression", span="554-554", cluster="lambda expression", file="ParserContext.cs"];
m0_224 [label="new Options_With_Required_Set_To_True()", span="554-554", cluster="lambda expression", file="ParserContext.cs"];
m0_225 [label="Exit lambda expression", span="554-554", cluster="lambda expression", file="ParserContext.cs"];
m0_232 [label="Entry lambda expression", span="574-574", cluster="lambda expression", file="ParserContext.cs"];
m0_233 [label="new Simple_Options()", span="574-574", cluster="lambda expression", file="ParserContext.cs"];
m0_234 [label="Exit lambda expression", span="574-574", cluster="lambda expression", file="ParserContext.cs"];
m0_241 [label="Entry lambda expression", span="594-594", cluster="lambda expression", file="ParserContext.cs"];
m0_242 [label="new Simple_Options()", span="594-594", cluster="lambda expression", file="ParserContext.cs"];
m0_243 [label="Exit lambda expression", span="594-594", cluster="lambda expression", file="ParserContext.cs"];
m0_249 [label="Entry lambda expression", span="614-614", cluster="lambda expression", file="ParserContext.cs"];
m0_250 [label="new Simple_Options()", span="614-614", cluster="lambda expression", file="ParserContext.cs"];
m0_251 [label="Exit lambda expression", span="614-614", cluster="lambda expression", file="ParserContext.cs"];
m0_257 [label="Entry lambda expression", span="634-634", cluster="lambda expression", file="ParserContext.cs"];
m0_258 [label="new Simple_Options()", span="634-634", cluster="lambda expression", file="ParserContext.cs"];
m0_259 [label="Exit lambda expression", span="634-634", cluster="lambda expression", file="ParserContext.cs"];
m0_264 [label="Entry lambda expression", span="655-655", cluster="lambda expression", file="ParserContext.cs"];
m0_265 [label="new Simple_Options()", span="655-655", cluster="lambda expression", file="ParserContext.cs"];
m0_266 [label="Exit lambda expression", span="655-655", cluster="lambda expression", file="ParserContext.cs"];
m0_272 [label="Entry lambda expression", span="675-675", cluster="lambda expression", file="ParserContext.cs"];
m0_273 [label="new Options_With_Required_Set_To_True_For_Values()", span="675-675", cluster="lambda expression", file="ParserContext.cs"];
m0_274 [label="Exit lambda expression", span="675-675", cluster="lambda expression", file="ParserContext.cs"];
m0_280 [label="Entry lambda expression", span="698-698", cluster="lambda expression", file="ParserContext.cs"];
m0_281 [label="new Simple_Options()", span="698-698", cluster="lambda expression", file="ParserContext.cs"];
m0_282 [label="Exit lambda expression", span="698-698", cluster="lambda expression", file="ParserContext.cs"];
m0_288 [label="Entry lambda expression", span="718-718", cluster="lambda expression", file="ParserContext.cs"];
m0_289 [label="new Options_With_Sequence_Having_Both_Min_And_Max_Equal()", span="718-718", cluster="lambda expression", file="ParserContext.cs"];
m0_290 [label="Exit lambda expression", span="718-718", cluster="lambda expression", file="ParserContext.cs"];
m0_296 [label="Entry lambda expression", span="741-741", cluster="lambda expression", file="ParserContext.cs"];
m0_297 [label="new Options_With_Nullables()", span="741-741", cluster="lambda expression", file="ParserContext.cs"];
m0_298 [label="Exit lambda expression", span="741-741", cluster="lambda expression", file="ParserContext.cs"];
m0_304 [label="Entry lambda expression", span="764-764", cluster="lambda expression", file="ParserContext.cs"];
m0_305 [label="new Options_With_Nullables()", span="764-764", cluster="lambda expression", file="ParserContext.cs"];
m0_306 [label="Exit lambda expression", span="764-764", cluster="lambda expression", file="ParserContext.cs"];
m0_314 [label="Entry lambda expression", span="785-785", cluster="lambda expression", file="ParserContext.cs"];
m0_315 [label="new Options_With_FSharpOption()", span="785-785", cluster="lambda expression", file="ParserContext.cs"];
m0_316 [label="Exit lambda expression", span="785-785", cluster="lambda expression", file="ParserContext.cs"];
m0_324 [label="Entry lambda expression", span="810-810", cluster="lambda expression", file="ParserContext.cs"];
m0_325 [label="new Options_With_FSharpOption()", span="810-810", cluster="lambda expression", file="ParserContext.cs"];
m0_326 [label="Exit lambda expression", span="810-810", cluster="lambda expression", file="ParserContext.cs"];
m0_332 [label="Entry lambda expression", span="831-836", cluster="lambda expression", file="ParserContext.cs"];
m0_333 [label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<Options_With_Min_Set_To_Zero>>(() => new Options_With_Min_Set_To_Zero()),\r\n                new string[] {},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="831-836", cluster="lambda expression", file="ParserContext.cs"];
m0_334 [label="Exit lambda expression", span="831-836", cluster="lambda expression", file="ParserContext.cs"];
m0_335 [label="Entry lambda expression", span="832-832", cluster="lambda expression", file="ParserContext.cs"];
m0_336 [label="new Options_With_Min_Set_To_Zero()", span="832-832", cluster="lambda expression", file="ParserContext.cs"];
m0_337 [label="Exit lambda expression", span="832-832", cluster="lambda expression", file="ParserContext.cs"];
m0_343 [label="Entry lambda expression", span="846-851", cluster="lambda expression", file="ParserContext.cs"];
m0_344 [label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<Options_With_Max_Set_To_Zero>>(() => new Options_With_Max_Set_To_Zero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="846-851", cluster="lambda expression", file="ParserContext.cs"];
m0_345 [label="Exit lambda expression", span="846-851", cluster="lambda expression", file="ParserContext.cs"];
m0_346 [label="Entry lambda expression", span="847-847", cluster="lambda expression", file="ParserContext.cs"];
m0_347 [label="new Options_With_Max_Set_To_Zero()", span="847-847", cluster="lambda expression", file="ParserContext.cs"];
m0_348 [label="Exit lambda expression", span="847-847", cluster="lambda expression", file="ParserContext.cs"];
m0_354 [label="Entry lambda expression", span="861-866", cluster="lambda expression", file="ParserContext.cs"];
m0_355 [label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<Options_With_Both_Min_And_Max_Set_To_Zero>>(() => new Options_With_Both_Min_And_Max_Set_To_Zero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="861-866", cluster="lambda expression", file="ParserContext.cs"];
m0_356 [label="Exit lambda expression", span="861-866", cluster="lambda expression", file="ParserContext.cs"];
m0_357 [label="Entry lambda expression", span="862-862", cluster="lambda expression", file="ParserContext.cs"];
m0_358 [label="new Options_With_Both_Min_And_Max_Set_To_Zero()", span="862-862", cluster="lambda expression", file="ParserContext.cs"];
m0_359 [label="Exit lambda expression", span="862-862", cluster="lambda expression", file="ParserContext.cs"];
m0_375 [label="x == expected", span="891-891", cluster="lambda expression", file="ParserContext.cs"];
m0_370 [label="Entry lambda expression", span="882-882", cluster="lambda expression", file="ParserContext.cs"];
m0_374 [label="Entry lambda expression", span="891-891", cluster="lambda expression", file="ParserContext.cs"];
m0_371 [label="new Options_With_Named_And_Empty_Sets()", span="882-882", cluster="lambda expression", file="ParserContext.cs"];
m0_372 [label="Exit lambda expression", span="882-882", cluster="lambda expression", file="ParserContext.cs"];
m0_376 [label="Exit lambda expression", span="891-891", cluster="lambda expression", file="ParserContext.cs"];
m0_385 [label="x == expected", span="912-912", cluster="lambda expression", file="ParserContext.cs"];
m0_381 [label="Entry lambda expression", span="905-905", cluster="lambda expression", file="ParserContext.cs"];
m0_384 [label="Entry lambda expression", span="912-912", cluster="lambda expression", file="ParserContext.cs"];
m0_382 [label="new Simple_Options()", span="905-905", cluster="lambda expression", file="ParserContext.cs"];
m0_383 [label="Exit lambda expression", span="905-905", cluster="lambda expression", file="ParserContext.cs"];
m0_386 [label="Exit lambda expression", span="912-912", cluster="lambda expression", file="ParserContext.cs"];
m0_391 [label="Entry lambda expression", span="922-922", cluster="lambda expression", file="ParserContext.cs"];
m0_392 [label="new Options_With_Interface()", span="922-922", cluster="lambda expression", file="ParserContext.cs"];
m0_393 [label="Exit lambda expression", span="922-922", cluster="lambda expression", file="ParserContext.cs"];
m0_407 [label="x == expected", span="953-953", cluster="lambda expression", file="ParserContext.cs"];
m0_402 [label="Entry lambda expression", span="944-944", cluster="lambda expression", file="ParserContext.cs"];
m0_406 [label="Entry lambda expression", span="953-953", cluster="lambda expression", file="ParserContext.cs"];
m0_403 [label="new Options_With_Two_Option_Required_Set_To_True_And_Two_Sets()", span="944-944", cluster="lambda expression", file="ParserContext.cs"];
m0_404 [label="Exit lambda expression", span="944-944", cluster="lambda expression", file="ParserContext.cs"];
m0_408 [label="Exit lambda expression", span="953-953", cluster="lambda expression", file="ParserContext.cs"];
m0_413 [label="Entry lambda expression", span="969-969", cluster="lambda expression", file="ParserContext.cs"];
m0_414 [label="new Options_With_Required_Set_To_True_For_Values()", span="969-969", cluster="lambda expression", file="ParserContext.cs"];
m0_415 [label="Exit lambda expression", span="969-969", cluster="lambda expression", file="ParserContext.cs"];
m0_420 [label="Entry lambda expression", span="989-989", cluster="lambda expression", file="ParserContext.cs"];
m0_421 [label="new Options_With_Scalar_Value_And_Adjacent_SequenceString()", span="989-989", cluster="lambda expression", file="ParserContext.cs"];
m0_422 [label="Exit lambda expression", span="989-989", cluster="lambda expression", file="ParserContext.cs"];
m0_429 [label="Entry lambda expression", span="1009-1009", cluster="lambda expression", file="ParserContext.cs"];
m0_430 [label="new Simple_Options()", span="1009-1009", cluster="lambda expression", file="ParserContext.cs"];
m0_431 [label="Exit lambda expression", span="1009-1009", cluster="lambda expression", file="ParserContext.cs"];
m0_443 [label="x == expected", span="1040-1040", cluster="lambda expression", file="ParserContext.cs"];
m0_438 [label="Entry lambda expression", span="1032-1032", cluster="lambda expression", file="ParserContext.cs"];
m0_442 [label="Entry lambda expression", span="1040-1040", cluster="lambda expression", file="ParserContext.cs"];
m0_439 [label="new Options_With_Two_Options_Having_Required_Set_To_True()", span="1032-1032", cluster="lambda expression", file="ParserContext.cs"];
m0_440 [label="Exit lambda expression", span="1032-1032", cluster="lambda expression", file="ParserContext.cs"];
m0_444 [label="Exit lambda expression", span="1040-1040", cluster="lambda expression", file="ParserContext.cs"];
m0_459 [label="new Options_With_Uri_And_SimpleType()", span="1071-1071", cluster="lambda expression", file="ParserContext.cs"];
m0_460 [label="Exit lambda expression", span="1071-1071", cluster="lambda expression", file="ParserContext.cs"];
m0_102 [label="Entry CommandLine.Tests.Fakes.Options_With_Sequence_And_Only_Max_Constraint_For_Value.Options_With_Sequence_And_Only_Max_Constraint_For_Value()", span="6-6", cluster="CommandLine.Tests.Fakes.Options_With_Sequence_And_Only_Max_Constraint_For_Value.Options_With_Sequence_And_Only_Max_Constraint_For_Value()", file="ParserContext.cs"];
m0_110 [label="Entry CommandLine.Tests.Fakes.Simple_Options_With_Enum.Simple_Options_With_Enum()", span="11-11", cluster="CommandLine.Tests.Fakes.Simple_Options_With_Enum.Simple_Options_With_Enum()", file="ParserContext.cs"];
m0_445 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.Immutable_Simple_Options)", span="1045-1045", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.Immutable_Simple_Options)", file="ParserContext.cs"];
m0_446 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Nothing<Func<Immutable_Simple_Options>>(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="1050-1055", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.Immutable_Simple_Options)", file="ParserContext.cs"];
m0_447 [label="expected.ShouldBeEquivalentTo(((Parsed<Immutable_Simple_Options>)result).Value)", span="1058-1058", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.Immutable_Simple_Options)", file="ParserContext.cs"];
m0_448 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.Immutable_Simple_Options)", span="1045-1045", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.Immutable_Simple_Options)", file="ParserContext.cs"];
m0_377 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", span="901-901", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="ParserContext.cs"];
m0_378 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Simple_Options>>(() => new Simple_Options()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="904-909", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="ParserContext.cs"];
m0_379 [label="((NotParsed<Simple_Options>)result).Errors.Should().HaveCount(x => x == expected)", span="912-912", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="ParserContext.cs"];
m0_380 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", span="901-901", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="ParserContext.cs"];
m0_395 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", span="940-940", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", file="ParserContext.cs"];
m0_396 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Options_With_Two_Option_Required_Set_To_True_And_Two_Sets>>(() => new Options_With_Two_Option_Required_Set_To_True_And_Two_Sets()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="943-948", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", file="ParserContext.cs"];
m0_397 [label="type == ParserResultType.NotParsed", span="951-951", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", file="ParserContext.cs"];
m0_398 [label="((NotParsed<Options_With_Two_Option_Required_Set_To_True_And_Two_Sets>)result).Errors.Should().HaveCount(x => x == expected)", span="953-953", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", file="ParserContext.cs"];
m0_399 [label="type == ParserResultType.Parsed", span="955-955", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", file="ParserContext.cs"];
m0_400 [label="result.Should().BeOfType<Parsed<Options_With_Two_Option_Required_Set_To_True_And_Two_Sets>>()", span="957-957", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", file="ParserContext.cs"];
m0_401 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", span="940-940", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", file="ParserContext.cs"];
m0_394 [label="Entry CommandLine.Tests.Fakes.Options_With_Interface.Options_With_Interface()", span="2-2", cluster="CommandLine.Tests.Fakes.Options_With_Interface.Options_With_Interface()", file="ParserContext.cs"];
m0_50 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="145-145", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="ParserContext.cs"];
m0_51 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Options_With_Sequence_And_Only_Min_Constraint>>(() => new Options_With_Sequence_And_Only_Min_Constraint()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="150-155", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="ParserContext.cs"];
m0_52 [label="((Parsed<Options_With_Sequence_And_Only_Min_Constraint>)result).Value.StringSequence.ShouldBeEquivalentTo(expected)", span="158-158", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="ParserContext.cs"];
m0_53 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="145-145", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="ParserContext.cs"];
m0_120 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="312-312", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="ParserContext.cs"];
m0_121 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="315-315", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="ParserContext.cs"];
m0_122 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Simple_Options_With_Enum>>(() => new Simple_Options_With_Enum()),\r\n                new[] { ''--colors'', ''Yellow'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="318-323", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="ParserContext.cs"];
m0_123 [label="((NotParsed<Simple_Options_With_Enum>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="326-326", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="ParserContext.cs"];
m0_124 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="312-312", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="ParserContext.cs"];
m0_441 [label="Entry CommandLine.Tests.Fakes.Options_With_Two_Options_Having_Required_Set_To_True.Options_With_Two_Options_Having_Required_Set_To_True()", span="4-4", cluster="CommandLine.Tests.Fakes.Options_With_Two_Options_Having_Required_Set_To_True.Options_With_Two_Options_Having_Required_Set_To_True()", file="ParserContext.cs"];
m0_27 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="73-73", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="ParserContext.cs"];
m0_28 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Simple_Options_With_Double_Value>>(() => new Simple_Options_With_Double_Value()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="78-83", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="ParserContext.cs"];
m0_29 [label="((Parsed<Simple_Options_With_Double_Value>)result).Value.DoubleValue.ShouldBeEquivalentTo(expected)", span="86-86", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="ParserContext.cs"];
m0_30 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="73-73", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="ParserContext.cs"];
m0_360 [label="Entry CommandLine.Tests.Fakes.Options_With_Both_Min_And_Max_Set_To_Zero.Options_With_Both_Min_And_Max_Set_To_Zero()", span="6-6", cluster="CommandLine.Tests.Fakes.Options_With_Both_Min_And_Max_Set_To_Zero.Options_With_Both_Min_And_Max_Set_To_Zero()", file="ParserContext.cs"];
m0_141 [label="Entry CommandLine.Tests.Fakes.Simple_Options_With_Values.Simple_Options_With_Values()", span="6-6", cluster="CommandLine.Tests.Fakes.Simple_Options_With_Values.Simple_Options_With_Values()", file="ParserContext.cs"];
m0_373 [label="Entry CommandLine.Tests.Fakes.Options_With_Named_And_Empty_Sets.Options_With_Named_And_Empty_Sets()", span="4-4", cluster="CommandLine.Tests.Fakes.Options_With_Named_And_Empty_Sets.Options_With_Named_And_Empty_Sets()", file="ParserContext.cs"];
m0_455 [label="Entry CommandLine.Tests.Fakes.Options_With_Uri_And_SimpleType.Options_With_Uri_And_SimpleType()", span="23-23", cluster="CommandLine.Tests.Fakes.Options_With_Uri_And_SimpleType.Options_With_Uri_And_SimpleType()", file="ParserContext.cs"];
m0_456 [label="Entry System.Uri.Uri(string)", span="0-0", cluster="System.Uri.Uri(string)", file="ParserContext.cs"];
m0_267 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="668-668", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="ParserContext.cs"];
m0_268 [label="var expectedResult = new[] { new MissingRequiredOptionError(NameInfo.EmptyName) }", span="671-671", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="ParserContext.cs"];
m0_269 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Options_With_Required_Set_To_True_For_Values>>(() => new Options_With_Required_Set_To_True_For_Values()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="674-679", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="ParserContext.cs"];
m0_270 [label="((NotParsed<Options_With_Required_Set_To_True_For_Values>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="682-682", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="ParserContext.cs"];
m0_271 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="668-668", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="ParserContext.cs"];
m0_227 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="567-567", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="ParserContext.cs"];
m0_228 [label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="570-570", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="ParserContext.cs"];
m0_229 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Simple_Options>>(() => new Simple_Options()),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="573-578", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="ParserContext.cs"];
m0_230 [label="((NotParsed<Simple_Options>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="581-581", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="ParserContext.cs"];
m0_231 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="567-567", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="ParserContext.cs"];
m0_313 [label="Entry Unk.get_IsSome", span="", cluster="Unk.get_IsSome", file="ParserContext.cs"];
m0_4 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()", file="ParserContext.cs"];
m0_15 [label="Entry CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="163-163", cluster="CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="ParserContext.cs"];
m0_0 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.InvokeBuild<T>(string[])", span="17-17", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.InvokeBuild<T>(string[])", file="ParserContext.cs"];
m0_1 [label="return InstanceBuilder.Build(\r\n                Maybe.Just<Func<T>>(() => new T()),\r\n                args,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>());", span="20-25", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.InvokeBuild<T>(string[])", color=red, community=0, file="ParserContext.cs"];
m0_2 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.InvokeBuild<T>(string[])", span="17-17", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.InvokeBuild<T>(string[])", file="ParserContext.cs"];
m0_189 [label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="18-18", cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="ParserContext.cs"];
m0_226 [label="Entry CommandLine.Tests.Fakes.Options_With_Required_Set_To_True.Options_With_Required_Set_To_True()", span="4-4", cluster="CommandLine.Tests.Fakes.Options_With_Required_Set_To_True.Options_With_Required_Set_To_True()", file="ParserContext.cs"];
m0_10 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="29-29", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="ParserContext.cs"];
m0_11 [label="var expectedResult = new NotParsed<Simple_Options>(\r\n                TypeInfo.Create(typeof(Simple_Options)), new Error[] { new HelpRequestedError() })", span="32-33", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", color=red, community=0, file="ParserContext.cs"];
m0_12 [label="var result = InvokeBuild<Simple_Options>(\r\n                new[] { ''--help'' })", span="36-37", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", color=red, community=0, file="ParserContext.cs"];
m0_13 [label="result.ShouldBeEquivalentTo(expectedResult)", span="40-40", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", color=red, community=0, file="ParserContext.cs"];
m0_14 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="29-29", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="ParserContext.cs"];
m0_218 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="547-547", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="ParserContext.cs"];
m0_219 [label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="550-550", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="ParserContext.cs"];
m0_220 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Options_With_Required_Set_To_True>>(() => new Options_With_Required_Set_To_True()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="553-558", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="ParserContext.cs"];
m0_221 [label="((NotParsed<Options_With_Required_Set_To_True>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="561-561", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="ParserContext.cs"];
m0_222 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="547-547", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="ParserContext.cs"];
m0_209 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="525-525", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="ParserContext.cs"];
m0_210 [label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="527-531", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="ParserContext.cs"];
m0_211 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Options_With_Required_Set_To_True_Within_Same_Set>>(() => new Options_With_Required_Set_To_True_Within_Same_Set()),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="533-538", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="ParserContext.cs"];
m0_212 [label="((NotParsed<Options_With_Required_Set_To_True_Within_Same_Set>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="541-541", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="ParserContext.cs"];
m0_213 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="525-525", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="ParserContext.cs"];
m0_128 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="332-332", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="ParserContext.cs"];
m0_129 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="335-335", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="ParserContext.cs"];
m0_130 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Simple_Options_With_Enum>>(() => new Simple_Options_With_Enum()),\r\n                new[] { ''--colors'', ''RED'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="338-343", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="ParserContext.cs"];
m0_131 [label="((NotParsed<Simple_Options_With_Enum>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="346-346", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="ParserContext.cs"];
m0_132 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="332-332", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="ParserContext.cs"];
m0_71 [label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="294-294", cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="ParserContext.cs"];
m0_86 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="227-227", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="ParserContext.cs"];
m0_87 [label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="230-230", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="ParserContext.cs"];
m0_88 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Options_With_Sequence_And_Only_Max_Constraint>>(() => new Options_With_Sequence_And_Only_Max_Constraint()),\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="233-238", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="ParserContext.cs"];
m0_89 [label="((NotParsed<Options_With_Sequence_And_Only_Max_Constraint>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="241-241", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="ParserContext.cs"];
m0_90 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="227-227", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="ParserContext.cs"];
m0_66 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="187-187", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="ParserContext.cs"];
m0_67 [label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="190-190", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="ParserContext.cs"];
m0_68 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Options_With_Sequence_And_Only_Min_Constraint>>(() => new Options_With_Sequence_And_Only_Min_Constraint()),\r\n                new[] { ''-s'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="193-198", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="ParserContext.cs"];
m0_69 [label="((NotParsed<Options_With_Sequence_And_Only_Min_Constraint>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="201-201", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="ParserContext.cs"];
m0_70 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="187-187", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="ParserContext.cs"];
m0_136 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="352-352", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="ParserContext.cs"];
m0_137 [label="var expectedResult = new Simple_Options_With_Values\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="355-361", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="ParserContext.cs"];
m0_138 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Simple_Options_With_Values>>(() => new Simple_Options_With_Values()),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="364-369", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="ParserContext.cs"];
m0_139 [label="expectedResult.ShouldBeEquivalentTo(((Parsed<Simple_Options_With_Values>)result).Value)", span="372-372", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="ParserContext.cs"];
m0_140 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="352-352", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="ParserContext.cs"];
m0_369 [label="Entry Unk.HaveCount", span="", cluster="Unk.HaveCount", file="ParserContext.cs"];
m0_5 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="14-14", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="ParserContext.cs"];
m0_72 [label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20", cluster="CommandLine.NameInfo.NameInfo(string, string)", file="ParserContext.cs"];
m0_416 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.Options_With_Scalar_Value_And_Adjacent_SequenceString)", span="983-983", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.Options_With_Scalar_Value_And_Adjacent_SequenceString)", file="ParserContext.cs"];
m0_417 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Options_With_Scalar_Value_And_Adjacent_SequenceString>>(() => new Options_With_Scalar_Value_And_Adjacent_SequenceString()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="988-993", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.Options_With_Scalar_Value_And_Adjacent_SequenceString)", file="ParserContext.cs"];
m0_418 [label="expected.ShouldBeEquivalentTo(((Parsed<Options_With_Scalar_Value_And_Adjacent_SequenceString>)result).Value)", span="996-996", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.Options_With_Scalar_Value_And_Adjacent_SequenceString)", file="ParserContext.cs"];
m0_419 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.Options_With_Scalar_Value_And_Adjacent_SequenceString)", span="983-983", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.Options_With_Scalar_Value_And_Adjacent_SequenceString)", file="ParserContext.cs"];
m0_19 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="49-49", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="ParserContext.cs"];
m0_20 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Simple_Options>>(() => new Simple_Options()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="54-59", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", color=red, community=0, file="ParserContext.cs"];
m0_21 [label="((Parsed<Simple_Options>)result).Value.LongValue.ShouldBeEquivalentTo(expected)", span="62-62", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", color=red, community=0, file="ParserContext.cs"];
m0_22 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="49-49", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="ParserContext.cs"];
m0_26 [label="Entry CommandLine.Tests.Fakes.Simple_Options.Simple_Options()", span="6-6", cluster="CommandLine.Tests.Fakes.Simple_Options.Simple_Options()", file="ParserContext.cs"];
m0_160 [label="Entry CommandLine.Tests.Fakes.Options_With_Sequence_Having_Separator_Set.Options_With_Sequence_Having_Separator_Set()", span="6-6", cluster="CommandLine.Tests.Fakes.Options_With_Sequence_Having_Separator_Set.Options_With_Sequence_Having_Separator_Set()", file="ParserContext.cs"];
m0_318 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="804-804", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="ParserContext.cs"];
m0_319 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Options_With_FSharpOption>>(() => new Options_With_FSharpOption()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="809-814", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="ParserContext.cs"];
m0_321 [label="expectedValue.ShouldBeEquivalentTo(((Parsed<Options_With_FSharpOption>)result).Value.Offset.Value)", span="819-819", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="ParserContext.cs"];
m0_322 [label="expectedSome.ShouldBeEquivalentTo(FSharpOption<int>.get_IsSome(((Parsed<Options_With_FSharpOption>)result).Value.Offset))", span="821-821", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="ParserContext.cs"];
m0_320 [label="((Parsed<Options_With_FSharpOption>)result).Value.Offset != null", span="817-817", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="ParserContext.cs"];
m0_323 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="804-804", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="ParserContext.cs"];
m0_424 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", span="1002-1002", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="ParserContext.cs"];
m0_425 [label="var expectedResult = new Simple_Options { StringValue=''strval0'', IntSequence=new[] { 9, 7, 8 }, BoolValue = true,  LongValue = 9876543210L }", span="1005-1005", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="ParserContext.cs"];
m0_426 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Simple_Options>>(() => new Simple_Options()),\r\n                new[] { ''--stringvalue=strval0'', ''-i'', ''9'', ''7'', ''8'', ''-x'', ''9876543210'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="1008-1013", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="ParserContext.cs"];
m0_427 [label="expectedResult.ShouldBeEquivalentTo(((Parsed<Simple_Options>)result).Value)", span="1016-1016", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="ParserContext.cs"];
m0_428 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", span="1002-1002", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="ParserContext.cs"];
m0_195 [label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo, string)", span="329-329", cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo, string)", file="ParserContext.cs"];
m0_181 [label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", span="44-44", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", file="ParserContext.cs"];
m0_161 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="429-429", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="ParserContext.cs"];
m0_162 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Options_With_Sequence_Having_Separator_Set>>(() => new Options_With_Sequence_Having_Separator_Set()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="434-439", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="ParserContext.cs"];
m0_163 [label="expected.ShouldBeEquivalentTo(((Parsed<Options_With_Sequence_Having_Separator_Set>)result).Value.StringSequence)", span="442-442", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="ParserContext.cs"];
m0_164 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="429-429", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="ParserContext.cs"];
m0_214 [label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="316-316", cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="ParserContext.cs"];
m0_292 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="735-735", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="ParserContext.cs"];
m0_293 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Options_With_Nullables>>(() => new Options_With_Nullables()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="740-745", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="ParserContext.cs"];
m0_294 [label="expected.ShouldBeEquivalentTo(((Parsed<Options_With_Nullables>)result).Value.NullableInt)", span="748-748", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="ParserContext.cs"];
m0_295 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="735-735", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="ParserContext.cs"];
m0_235 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="587-587", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="ParserContext.cs"];
m0_236 [label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="590-590", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="ParserContext.cs"];
m0_237 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Simple_Options>>(() => new Simple_Options()),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="593-598", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="ParserContext.cs"];
m0_238 [label="((NotParsed<Simple_Options>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="601-601", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="ParserContext.cs"];
m0_239 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="587-587", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="ParserContext.cs"];
m0_349 [label="Entry CommandLine.Tests.Fakes.Options_With_Max_Set_To_Zero.Options_With_Max_Set_To_Zero()", span="6-6", cluster="CommandLine.Tests.Fakes.Options_With_Max_Set_To_Zero.Options_With_Max_Set_To_Zero()", file="ParserContext.cs"];
m0_65 [label="Entry CommandLine.Tests.Fakes.Options_With_Sequence_And_Only_Max_Constraint.Options_With_Sequence_And_Only_Max_Constraint()", span="6-6", cluster="CommandLine.Tests.Fakes.Options_With_Sequence_And_Only_Max_Constraint.Options_With_Sequence_And_Only_Max_Constraint()", file="ParserContext.cs"];
m0_200 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="505-505", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="ParserContext.cs"];
m0_201 [label="var expectedResult = new Options_With_Required_Set_To_True_Within_Same_Set {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="507-510", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="ParserContext.cs"];
m0_202 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Options_With_Required_Set_To_True_Within_Same_Set>>(() => new Options_With_Required_Set_To_True_Within_Same_Set()),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="512-517", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="ParserContext.cs"];
m0_203 [label="expectedResult.ShouldBeEquivalentTo(((Parsed<Options_With_Required_Set_To_True_Within_Same_Set>)result).Value)", span="520-520", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="ParserContext.cs"];
m0_204 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="505-505", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="ParserContext.cs"];
m0_85 [label="Entry CommandLine.Tests.Fakes.Options_With_Sequence_And_Only_Min_Constraint_For_Value.Options_With_Sequence_And_Only_Min_Constraint_For_Value()", span="6-6", cluster="CommandLine.Tests.Fakes.Options_With_Sequence_And_Only_Min_Constraint_For_Value.Options_With_Sequence_And_Only_Min_Constraint_For_Value()", file="ParserContext.cs"];
m0_152 [label="Entry CommandLine.Tests.Fakes.Options_With_Sequence_Without_Range_For_Value.Options_With_Sequence_Without_Range_For_Value()", span="6-6", cluster="CommandLine.Tests.Fakes.Options_With_Sequence_Without_Range_For_Value.Options_With_Sequence_Without_Range_For_Value()", file="ParserContext.cs"];
m0_423 [label="Entry CommandLine.Tests.Fakes.Options_With_Scalar_Value_And_Adjacent_SequenceString.Options_With_Scalar_Value_And_Adjacent_SequenceString()", span="6-6", cluster="CommandLine.Tests.Fakes.Options_With_Scalar_Value_And_Adjacent_SequenceString.Options_With_Scalar_Value_And_Adjacent_SequenceString()", file="ParserContext.cs"];
m0_283 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="711-711", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ParserContext.cs"];
m0_284 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="714-714", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ParserContext.cs"];
m0_285 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Options_With_Sequence_Having_Both_Min_And_Max_Equal>>(() => new Options_With_Sequence_Having_Both_Min_And_Max_Equal()),\r\n                new[] { ''one'', ''two'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="717-722", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ParserContext.cs"];
m0_286 [label="((NotParsed<Options_With_Sequence_Having_Both_Min_And_Max_Equal>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="725-725", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ParserContext.cs"];
m0_287 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="711-711", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ParserContext.cs"];
m0_3 [label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124", cluster="CSharpx.Maybe.Just<T>(T)", file="ParserContext.cs"];
m0_103 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="273-273", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="ParserContext.cs"];
m0_104 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Simple_Options_With_Enum>>(() => new Simple_Options_With_Enum()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="278-283", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="ParserContext.cs"];
m0_105 [label="expected.ShouldBeEquivalentTo(((Parsed<Simple_Options_With_Enum>)result).Value.Colors)", span="286-286", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="ParserContext.cs"];
m0_106 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="273-273", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="ParserContext.cs"];
m0_368 [label="Entry Unk.Should", span="", cluster="Unk.Should", file="ParserContext.cs"];
m0_457 [label="Entry CommandLine.Tests.Fakes.MySimpleType.MySimpleType(string)", span="12-12", cluster="CommandLine.Tests.Fakes.MySimpleType.MySimpleType(string)", file="ParserContext.cs"];
m0_276 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="692-692", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="ParserContext.cs"];
m0_277 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Simple_Options>>(() => new Simple_Options()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="697-702", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="ParserContext.cs"];
m0_278 [label="expected.ShouldBeEquivalentTo(((Parsed<Simple_Options>)result).Value.StringValue)", span="705-705", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="ParserContext.cs"];
m0_279 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="692-692", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="ParserContext.cs"];
m0_116 [label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="349-349", cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="ParserContext.cs"];
m0_450 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_type_with_single_string_ctor_builds_up_correct_instance()", span="1064-1064", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_type_with_single_string_ctor_builds_up_correct_instance()", file="ParserContext.cs"];
m0_451 [label="var expectedResult = new Options_With_Uri_And_SimpleType { EndPoint = new Uri(''http://localhost/test/''), MyValue = new MySimpleType(''custom-value'') }", span="1067-1067", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_type_with_single_string_ctor_builds_up_correct_instance()", file="ParserContext.cs"];
m0_452 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Options_With_Uri_And_SimpleType>>(() => new Options_With_Uri_And_SimpleType()),\r\n                new[] { ''--endpoint=http://localhost/test/'', ''custom-value'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="1070-1075", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_type_with_single_string_ctor_builds_up_correct_instance()", file="ParserContext.cs"];
m0_453 [label="expectedResult.ShouldBeEquivalentTo(((Parsed<Options_With_Uri_And_SimpleType>)result).Value)", span="1078-1078", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_type_with_single_string_ctor_builds_up_correct_instance()", file="ParserContext.cs"];
m0_454 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_type_with_single_string_ctor_builds_up_correct_instance()", span="1064-1064", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_type_with_single_string_ctor_builds_up_correct_instance()", file="ParserContext.cs"];
m0_34 [label="Entry CommandLine.Tests.Fakes.Simple_Options_With_Double_Value.Simple_Options_With_Double_Value()", span="4-4", cluster="CommandLine.Tests.Fakes.Simple_Options_With_Double_Value.Simple_Options_With_Double_Value()", file="ParserContext.cs"];
m0_299 [label="Entry CommandLine.Tests.Fakes.Options_With_Nullables.Options_With_Nullables()", span="4-4", cluster="CommandLine.Tests.Fakes.Options_With_Nullables.Options_With_Nullables()", file="ParserContext.cs"];
m0_275 [label="Entry CommandLine.Tests.Fakes.Options_With_Required_Set_To_True_For_Values.Options_With_Required_Set_To_True_For_Values()", span="4-4", cluster="CommandLine.Tests.Fakes.Options_With_Required_Set_To_True_For_Values.Options_With_Required_Set_To_True_For_Values()", file="ParserContext.cs"];
m0_437 [label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0", cluster="System.Collections.IEnumerable.OfType<TResult>()", file="ParserContext.cs"];
m0_339 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", span="843-843", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="ParserContext.cs"];
m0_340 [label="Action test = () => InstanceBuilder.Build(\r\n                Maybe.Just<Func<Options_With_Max_Set_To_Zero>>(() => new Options_With_Max_Set_To_Zero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="846-851", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="ParserContext.cs"];
m0_341 [label="Assert.Throws<ApplicationException>(test)", span="854-854", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="ParserContext.cs"];
m0_342 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", span="843-843", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="ParserContext.cs"];
m0_317 [label="Entry CommandLine.Tests.Fakes.Options_With_FSharpOption.Options_With_FSharpOption()", span="6-6", cluster="CommandLine.Tests.Fakes.Options_With_FSharpOption.Options_With_FSharpOption()", file="ParserContext.cs"];
m0_190 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="481-481", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="ParserContext.cs"];
m0_191 [label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl''), string.Empty),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''), string.Empty)\r\n                }", span="484-488", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="ParserContext.cs"];
m0_192 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Options_With_Two_Sets>>(() => new Options_With_Two_Sets()),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="491-496", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="ParserContext.cs"];
m0_193 [label="((NotParsed<Options_With_Two_Sets>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="499-499", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="ParserContext.cs"];
m0_194 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="481-481", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="ParserContext.cs"];
m0_461 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span="", file="ParserContext.cs"];
m0_462 [label=int, span="", file="ParserContext.cs"];
m0_463 [label=int, span="", file="ParserContext.cs"];
m0_464 [label=int, span="", file="ParserContext.cs"];
m0_465 [label=int, span="", file="ParserContext.cs"];
n40 -> n37  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
n0 -> n1  [key=0, style=solid];
n0 -> n3  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
n0 -> n5  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.SpecificationProperty"];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=0, style=solid];
n3 -> n4  [key=0, style=solid];
n3 -> n5  [key=0, style=solid];
n5 -> n6  [key=0, style=solid];
n5 -> n8  [key=2, style=dotted];
n2 -> n6  [key=0, style=solid];
n2 -> n7  [key=2, style=dotted];
n4 -> n6  [key=0, style=solid];
n4 -> n7  [key=2, style=dotted];
n6 -> n0  [key=0, style=bold, color=blue];
n9 -> n10  [key=0, style=solid];
n9 -> n12  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.Maybe<object>"];
n9 -> n14  [key=1, style=dashed, color=red, label="CommandLine.Core.SpecificationProperty"];
n10 -> n11  [key=0, style=solid];
n10 -> n12  [key=0, style=solid];
n12 -> n13  [key=0, style=solid];
n12 -> n14  [key=0, style=solid, color=red];
n14 -> n15  [key=0, style=solid, color=red];
n14 -> n8  [key=2, style=dotted, color=red];
n11 -> n15  [key=0, style=solid];
n11 -> n7  [key=2, style=dotted];
n13 -> n15  [key=0, style=solid];
n13 -> n7  [key=2, style=dotted];
n15 -> n9  [key=0, style=bold, color=blue];
n16 -> n17  [key=0, style=solid, color=red];
n16 -> n19  [key=1, style=dashed, color=red, label="CommandLine.Core.SpecificationProperty"];
n16 -> n21  [key=1, style=dashed, color=red, label="CommandLine.Core.SpecificationProperty"];
n16 -> n22  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.SpecificationProperty"];
n17 -> n18  [key=0, style=solid, color=red];
n17 -> n19  [key=0, style=solid, color=red];
n19 -> n20  [key=0, style=solid, color=red];
n19 -> n22  [key=0, style=solid, color=red];
n19 -> n24  [key=2, style=dotted, color=red];
n21 -> n23  [key=0, style=solid, color=red];
n21 -> n25  [key=2, style=dotted, color=red];
n21 -> n26  [key=2, style=dotted, color=red];
n21 -> n27  [key=2, style=dotted, color=red];
n21 -> n28  [key=2, style=dotted, color=red];
n21 -> n29  [key=2, style=dotted, color=red];
n22 -> n23  [key=0, style=solid];
n18 -> n23  [key=0, style=solid, color=red];
n18 -> n7  [key=2, style=dotted, color=red];
n20 -> n21  [key=0, style=solid, color=red];
n23 -> n16  [key=0, style=bold, color=blue];
n30 -> n31  [key=0, style=solid];
n30 -> n33  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
n30 -> n37  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
n31 -> n32  [key=0, style=solid];
n31 -> n33  [key=0, style=solid];
n33 -> n34  [key=0, style=solid];
n33 -> n35  [key=2, style=dotted];
n33 -> n36  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n37 -> n38  [key=0, style=solid];
n37 -> n39  [key=2, style=dotted];
n32 -> n34  [key=0, style=solid];
n32 -> n7  [key=2, style=dotted];
n34 -> n30  [key=0, style=bold, color=blue];
n36 -> n37  [key=0, style=solid];
n38 -> n36  [key=0, style=bold, color=blue];
m0_43 -> m0_44  [key=0, style=solid];
m0_43 -> m0_45  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
m0_44 -> m0_45  [key=0, style=solid];
m0_44 -> m0_3  [key=2, style=dotted];
m0_44 -> m0_4  [key=2, style=dotted];
m0_44 -> m0_5  [key=2, style=dotted];
m0_44 -> m0_47  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_45 -> m0_46  [key=0, style=solid];
m0_45 -> m0_18  [key=2, style=dotted];
m0_46 -> m0_43  [key=0, style=bold, color=blue];
m0_350 -> m0_351  [key=0, style=solid];
m0_351 -> m0_352  [key=0, style=solid];
m0_352 -> m0_353  [key=0, style=solid];
m0_352 -> m0_331  [key=2, style=dotted];
m0_353 -> m0_350  [key=0, style=bold, color=blue];
m0_153 -> m0_154  [key=0, style=solid];
m0_153 -> m0_155  [key=1, style=dashed, color=darkseagreen4, label="long[]"];
m0_154 -> m0_155  [key=0, style=solid];
m0_154 -> m0_3  [key=2, style=dotted];
m0_154 -> m0_4  [key=2, style=dotted];
m0_154 -> m0_5  [key=2, style=dotted];
m0_154 -> m0_157  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_155 -> m0_156  [key=0, style=solid];
m0_155 -> m0_18  [key=2, style=dotted];
m0_156 -> m0_153  [key=0, style=bold, color=blue];
m0_260 -> m0_261  [key=0, style=solid];
m0_260 -> m0_262  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_261 -> m0_262  [key=0, style=solid];
m0_261 -> m0_3  [key=2, style=dotted];
m0_261 -> m0_4  [key=2, style=dotted];
m0_261 -> m0_5  [key=2, style=dotted];
m0_261 -> m0_264  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_262 -> m0_263  [key=0, style=solid];
m0_262 -> m0_18  [key=2, style=dotted];
m0_263 -> m0_260  [key=0, style=bold, color=blue];
m0_327 -> m0_328  [key=0, style=solid];
m0_328 -> m0_329  [key=0, style=solid];
m0_329 -> m0_330  [key=0, style=solid];
m0_329 -> m0_331  [key=2, style=dotted];
m0_330 -> m0_327  [key=0, style=bold, color=blue];
m0_300 -> m0_301  [key=0, style=solid];
m0_300 -> m0_302  [key=1, style=dashed, color=darkseagreen4, label="long?"];
m0_301 -> m0_302  [key=0, style=solid];
m0_301 -> m0_3  [key=2, style=dotted];
m0_301 -> m0_4  [key=2, style=dotted];
m0_301 -> m0_5  [key=2, style=dotted];
m0_301 -> m0_304  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_302 -> m0_303  [key=0, style=solid];
m0_302 -> m0_18  [key=2, style=dotted];
m0_303 -> m0_300  [key=0, style=bold, color=blue];
m0_409 -> m0_410  [key=0, style=solid];
m0_409 -> m0_411  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Options_With_Required_Set_To_True_For_Values"];
m0_410 -> m0_411  [key=0, style=solid];
m0_410 -> m0_3  [key=2, style=dotted];
m0_410 -> m0_4  [key=2, style=dotted];
m0_410 -> m0_5  [key=2, style=dotted];
m0_410 -> m0_413  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_411 -> m0_412  [key=0, style=solid];
m0_411 -> m0_18  [key=2, style=dotted];
m0_412 -> m0_409  [key=0, style=bold, color=blue];
m0_168 -> m0_169  [key=0, style=solid];
m0_169 -> m0_170  [key=0, style=solid];
m0_169 -> m0_141  [key=2, style=dotted];
m0_169 -> m0_172  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_170 -> m0_171  [key=0, style=solid];
m0_172 -> m0_173  [key=0, style=solid];
m0_172 -> m0_18  [key=2, style=dotted];
m0_171 -> m0_172  [key=0, style=solid];
m0_171 -> m0_3  [key=2, style=dotted];
m0_171 -> m0_4  [key=2, style=dotted];
m0_171 -> m0_174  [key=2, style=dotted];
m0_171 -> m0_175  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_171 -> m0_178  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_173 -> m0_168  [key=0, style=bold, color=blue];
m0_252 -> m0_253  [key=0, style=solid];
m0_253 -> m0_254  [key=0, style=solid];
m0_253 -> m0_240  [key=2, style=dotted];
m0_253 -> m0_255  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_254 -> m0_255  [key=0, style=solid];
m0_254 -> m0_3  [key=2, style=dotted];
m0_254 -> m0_4  [key=2, style=dotted];
m0_254 -> m0_5  [key=2, style=dotted];
m0_254 -> m0_257  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_255 -> m0_256  [key=0, style=solid];
m0_255 -> m0_18  [key=2, style=dotted];
m0_256 -> m0_252  [key=0, style=bold, color=blue];
m0_387 -> m0_388  [key=0, style=solid];
m0_387 -> m0_389  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_388 -> m0_389  [key=0, style=solid];
m0_388 -> m0_3  [key=2, style=dotted];
m0_388 -> m0_4  [key=2, style=dotted];
m0_388 -> m0_5  [key=2, style=dotted];
m0_388 -> m0_391  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_389 -> m0_390  [key=0, style=solid];
m0_389 -> m0_18  [key=2, style=dotted];
m0_390 -> m0_387  [key=0, style=bold, color=blue];
m0_76 -> m0_77  [key=0, style=solid];
m0_77 -> m0_78  [key=0, style=solid];
m0_77 -> m0_81  [key=2, style=dotted];
m0_77 -> m0_79  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_78 -> m0_79  [key=0, style=solid];
m0_78 -> m0_3  [key=2, style=dotted];
m0_78 -> m0_4  [key=2, style=dotted];
m0_78 -> m0_5  [key=2, style=dotted];
m0_78 -> m0_82  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_79 -> m0_80  [key=0, style=solid];
m0_79 -> m0_18  [key=2, style=dotted];
m0_80 -> m0_76  [key=0, style=bold, color=blue];
m0_94 -> m0_95  [key=0, style=solid];
m0_95 -> m0_96  [key=0, style=solid];
m0_95 -> m0_81  [key=2, style=dotted];
m0_95 -> m0_97  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_96 -> m0_97  [key=0, style=solid];
m0_96 -> m0_3  [key=2, style=dotted];
m0_96 -> m0_4  [key=2, style=dotted];
m0_96 -> m0_5  [key=2, style=dotted];
m0_96 -> m0_99  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_97 -> m0_98  [key=0, style=solid];
m0_97 -> m0_18  [key=2, style=dotted];
m0_98 -> m0_94  [key=0, style=bold, color=blue];
m0_307 -> m0_308  [key=0, style=solid];
m0_307 -> m0_310  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_307 -> m0_311  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_308 -> m0_309  [key=0, style=solid];
m0_308 -> m0_3  [key=2, style=dotted];
m0_308 -> m0_4  [key=2, style=dotted];
m0_308 -> m0_5  [key=2, style=dotted];
m0_308 -> m0_314  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_308 -> m0_310  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_308 -> m0_311  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_310 -> m0_311  [key=0, style=solid];
m0_310 -> m0_18  [key=2, style=dotted];
m0_311 -> m0_312  [key=0, style=solid];
m0_311 -> m0_313  [key=2, style=dotted];
m0_311 -> m0_18  [key=2, style=dotted];
m0_309 -> m0_310  [key=0, style=solid];
m0_309 -> m0_311  [key=0, style=solid];
m0_312 -> m0_307  [key=0, style=bold, color=blue];
m0_432 -> m0_433  [key=0, style=solid];
m0_432 -> m0_435  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_432 -> m0_443  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_433 -> m0_434  [key=0, style=solid];
m0_433 -> m0_3  [key=2, style=dotted];
m0_433 -> m0_4  [key=2, style=dotted];
m0_433 -> m0_5  [key=2, style=dotted];
m0_433 -> m0_438  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_435 -> m0_436  [key=0, style=solid];
m0_435 -> m0_437  [key=2, style=dotted];
m0_435 -> m0_368  [key=2, style=dotted];
m0_435 -> m0_369  [key=2, style=dotted];
m0_435 -> m0_442  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_434 -> m0_435  [key=0, style=solid];
m0_436 -> m0_432  [key=0, style=bold, color=blue];
m0_244 -> m0_245  [key=0, style=solid];
m0_245 -> m0_246  [key=0, style=solid];
m0_245 -> m0_240  [key=2, style=dotted];
m0_245 -> m0_247  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_246 -> m0_247  [key=0, style=solid];
m0_246 -> m0_3  [key=2, style=dotted];
m0_246 -> m0_4  [key=2, style=dotted];
m0_246 -> m0_5  [key=2, style=dotted];
m0_246 -> m0_249  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_247 -> m0_248  [key=0, style=solid];
m0_247 -> m0_18  [key=2, style=dotted];
m0_248 -> m0_244  [key=0, style=bold, color=blue];
m0_111 -> m0_112  [key=0, style=solid];
m0_112 -> m0_113  [key=0, style=solid];
m0_112 -> m0_116  [key=2, style=dotted];
m0_112 -> m0_72  [key=2, style=dotted];
m0_112 -> m0_114  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_113 -> m0_114  [key=0, style=solid];
m0_113 -> m0_3  [key=2, style=dotted];
m0_113 -> m0_4  [key=2, style=dotted];
m0_113 -> m0_5  [key=2, style=dotted];
m0_113 -> m0_117  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_114 -> m0_115  [key=0, style=solid];
m0_114 -> m0_18  [key=2, style=dotted];
m0_115 -> m0_111  [key=0, style=bold, color=blue];
m0_145 -> m0_146  [key=0, style=solid];
m0_145 -> m0_147  [key=1, style=dashed, color=darkseagreen4, label="long[]"];
m0_146 -> m0_147  [key=0, style=solid];
m0_146 -> m0_3  [key=2, style=dotted];
m0_146 -> m0_4  [key=2, style=dotted];
m0_146 -> m0_5  [key=2, style=dotted];
m0_146 -> m0_149  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_147 -> m0_148  [key=0, style=solid];
m0_147 -> m0_18  [key=2, style=dotted];
m0_148 -> m0_145  [key=0, style=bold, color=blue];
m0_58 -> m0_59  [key=0, style=solid];
m0_58 -> m0_60  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m0_59 -> m0_60  [key=0, style=solid];
m0_59 -> m0_3  [key=2, style=dotted];
m0_59 -> m0_4  [key=2, style=dotted];
m0_59 -> m0_5  [key=2, style=dotted];
m0_59 -> m0_62  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_60 -> m0_61  [key=0, style=solid];
m0_60 -> m0_18  [key=2, style=dotted];
m0_61 -> m0_58  [key=0, style=bold, color=blue];
m0_361 -> m0_362  [key=0, style=solid];
m0_361 -> m0_363  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResultType"];
m0_361 -> m0_364  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_361 -> m0_375  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_361 -> m0_365  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResultType"];
m0_362 -> m0_363  [key=0, style=solid];
m0_362 -> m0_3  [key=2, style=dotted];
m0_362 -> m0_4  [key=2, style=dotted];
m0_362 -> m0_5  [key=2, style=dotted];
m0_362 -> m0_370  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_362 -> m0_364  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_362 -> m0_366  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_363 -> m0_364  [key=0, style=solid];
m0_363 -> m0_365  [key=0, style=solid];
m0_364 -> m0_367  [key=0, style=solid];
m0_364 -> m0_368  [key=2, style=dotted];
m0_364 -> m0_369  [key=2, style=dotted];
m0_364 -> m0_374  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_365 -> m0_366  [key=0, style=solid];
m0_365 -> m0_367  [key=0, style=solid];
m0_366 -> m0_367  [key=0, style=solid];
m0_366 -> m0_368  [key=2, style=dotted];
m0_366 -> m0_331  [key=2, style=dotted];
m0_367 -> m0_361  [key=0, style=bold, color=blue];
m0_35 -> m0_36  [key=0, style=solid];
m0_35 -> m0_37  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
m0_36 -> m0_37  [key=0, style=solid];
m0_36 -> m0_3  [key=2, style=dotted];
m0_36 -> m0_4  [key=2, style=dotted];
m0_36 -> m0_5  [key=2, style=dotted];
m0_36 -> m0_39  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_37 -> m0_38  [key=0, style=solid];
m0_37 -> m0_18  [key=2, style=dotted];
m0_38 -> m0_35  [key=0, style=bold, color=blue];
m0_458 -> m0_459  [key=0, style=solid];
m0_6 -> m0_7  [key=0, style=solid, color=red];
m0_7 -> m0_8  [key=0, style=solid, color=red];
m0_7 -> m0_9  [key=2, style=dotted, color=red];
m0_8 -> m0_6  [key=0, style=bold, color=blue];
m0_23 -> m0_24  [key=0, style=solid, color=red];
m0_24 -> m0_25  [key=0, style=solid, color=red];
m0_24 -> m0_26  [key=2, style=dotted, color=red];
m0_25 -> m0_23  [key=0, style=bold, color=blue];
m0_31 -> m0_32  [key=0, style=solid];
m0_32 -> m0_33  [key=0, style=solid];
m0_32 -> m0_34  [key=2, style=dotted];
m0_33 -> m0_31  [key=0, style=bold, color=blue];
m0_39 -> m0_40  [key=0, style=solid];
m0_40 -> m0_41  [key=0, style=solid];
m0_40 -> m0_42  [key=2, style=dotted];
m0_41 -> m0_39  [key=0, style=bold, color=blue];
m0_47 -> m0_48  [key=0, style=solid];
m0_48 -> m0_49  [key=0, style=solid];
m0_48 -> m0_26  [key=2, style=dotted];
m0_49 -> m0_47  [key=0, style=bold, color=blue];
m0_54 -> m0_55  [key=0, style=solid];
m0_55 -> m0_56  [key=0, style=solid];
m0_55 -> m0_57  [key=2, style=dotted];
m0_56 -> m0_54  [key=0, style=bold, color=blue];
m0_62 -> m0_63  [key=0, style=solid];
m0_63 -> m0_64  [key=0, style=solid];
m0_63 -> m0_65  [key=2, style=dotted];
m0_64 -> m0_62  [key=0, style=bold, color=blue];
m0_73 -> m0_74  [key=0, style=solid];
m0_74 -> m0_75  [key=0, style=solid];
m0_74 -> m0_57  [key=2, style=dotted];
m0_75 -> m0_73  [key=0, style=bold, color=blue];
m0_82 -> m0_83  [key=0, style=solid];
m0_83 -> m0_84  [key=0, style=solid];
m0_83 -> m0_85  [key=2, style=dotted];
m0_84 -> m0_82  [key=0, style=bold, color=blue];
m0_91 -> m0_92  [key=0, style=solid];
m0_92 -> m0_93  [key=0, style=solid];
m0_92 -> m0_65  [key=2, style=dotted];
m0_93 -> m0_91  [key=0, style=bold, color=blue];
m0_99 -> m0_100  [key=0, style=solid];
m0_100 -> m0_101  [key=0, style=solid];
m0_100 -> m0_102  [key=2, style=dotted];
m0_101 -> m0_99  [key=0, style=bold, color=blue];
m0_107 -> m0_108  [key=0, style=solid];
m0_108 -> m0_109  [key=0, style=solid];
m0_108 -> m0_110  [key=2, style=dotted];
m0_109 -> m0_107  [key=0, style=bold, color=blue];
m0_117 -> m0_118  [key=0, style=solid];
m0_118 -> m0_119  [key=0, style=solid];
m0_118 -> m0_110  [key=2, style=dotted];
m0_119 -> m0_117  [key=0, style=bold, color=blue];
m0_125 -> m0_126  [key=0, style=solid];
m0_126 -> m0_127  [key=0, style=solid];
m0_126 -> m0_110  [key=2, style=dotted];
m0_127 -> m0_125  [key=0, style=bold, color=blue];
m0_133 -> m0_134  [key=0, style=solid];
m0_134 -> m0_135  [key=0, style=solid];
m0_134 -> m0_110  [key=2, style=dotted];
m0_135 -> m0_133  [key=0, style=bold, color=blue];
m0_142 -> m0_143  [key=0, style=solid];
m0_143 -> m0_144  [key=0, style=solid];
m0_143 -> m0_141  [key=2, style=dotted];
m0_144 -> m0_142  [key=0, style=bold, color=blue];
m0_149 -> m0_150  [key=0, style=solid];
m0_150 -> m0_151  [key=0, style=solid];
m0_150 -> m0_152  [key=2, style=dotted];
m0_151 -> m0_149  [key=0, style=bold, color=blue];
m0_157 -> m0_158  [key=0, style=solid];
m0_158 -> m0_159  [key=0, style=solid];
m0_158 -> m0_160  [key=2, style=dotted];
m0_159 -> m0_157  [key=0, style=bold, color=blue];
m0_165 -> m0_166  [key=0, style=solid];
m0_166 -> m0_167  [key=0, style=solid];
m0_166 -> m0_160  [key=2, style=dotted];
m0_167 -> m0_165  [key=0, style=bold, color=blue];
m0_175 -> m0_176  [key=0, style=solid];
m0_178 -> m0_179  [key=0, style=solid];
m0_178 -> m0_183  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m0_178 -> m0_187  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m0_176 -> m0_177  [key=0, style=solid];
m0_176 -> m0_141  [key=2, style=dotted];
m0_177 -> m0_175  [key=0, style=bold, color=blue];
m0_179 -> m0_180  [key=0, style=solid];
m0_179 -> m0_181  [key=2, style=dotted];
m0_179 -> m0_182  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_183 -> m0_184  [key=0, style=solid];
m0_183 -> m0_185  [key=2, style=dotted];
m0_183 -> m0_186  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_187 -> m0_188  [key=0, style=solid];
m0_187 -> m0_189  [key=2, style=dotted];
m0_180 -> m0_178  [key=0, style=bold, color=blue];
m0_182 -> m0_183  [key=0, style=solid];
m0_184 -> m0_182  [key=0, style=bold, color=blue];
m0_186 -> m0_187  [key=0, style=solid];
m0_188 -> m0_186  [key=0, style=bold, color=blue];
m0_196 -> m0_197  [key=0, style=solid];
m0_197 -> m0_198  [key=0, style=solid];
m0_197 -> m0_199  [key=2, style=dotted];
m0_198 -> m0_196  [key=0, style=bold, color=blue];
m0_206 -> m0_207  [key=0, style=solid];
m0_207 -> m0_208  [key=0, style=solid];
m0_207 -> m0_205  [key=2, style=dotted];
m0_208 -> m0_206  [key=0, style=bold, color=blue];
m0_215 -> m0_216  [key=0, style=solid];
m0_216 -> m0_217  [key=0, style=solid];
m0_216 -> m0_205  [key=2, style=dotted];
m0_217 -> m0_215  [key=0, style=bold, color=blue];
m0_223 -> m0_224  [key=0, style=solid];
m0_224 -> m0_225  [key=0, style=solid];
m0_224 -> m0_226  [key=2, style=dotted];
m0_225 -> m0_223  [key=0, style=bold, color=blue];
m0_232 -> m0_233  [key=0, style=solid];
m0_233 -> m0_234  [key=0, style=solid];
m0_233 -> m0_26  [key=2, style=dotted];
m0_234 -> m0_232  [key=0, style=bold, color=blue];
m0_241 -> m0_242  [key=0, style=solid];
m0_242 -> m0_243  [key=0, style=solid];
m0_242 -> m0_26  [key=2, style=dotted];
m0_243 -> m0_241  [key=0, style=bold, color=blue];
m0_249 -> m0_250  [key=0, style=solid];
m0_250 -> m0_251  [key=0, style=solid];
m0_250 -> m0_26  [key=2, style=dotted];
m0_251 -> m0_249  [key=0, style=bold, color=blue];
m0_257 -> m0_258  [key=0, style=solid];
m0_258 -> m0_259  [key=0, style=solid];
m0_258 -> m0_26  [key=2, style=dotted];
m0_259 -> m0_257  [key=0, style=bold, color=blue];
m0_264 -> m0_265  [key=0, style=solid];
m0_265 -> m0_266  [key=0, style=solid];
m0_265 -> m0_26  [key=2, style=dotted];
m0_266 -> m0_264  [key=0, style=bold, color=blue];
m0_272 -> m0_273  [key=0, style=solid];
m0_273 -> m0_274  [key=0, style=solid];
m0_273 -> m0_275  [key=2, style=dotted];
m0_274 -> m0_272  [key=0, style=bold, color=blue];
m0_280 -> m0_281  [key=0, style=solid];
m0_281 -> m0_282  [key=0, style=solid];
m0_281 -> m0_26  [key=2, style=dotted];
m0_282 -> m0_280  [key=0, style=bold, color=blue];
m0_288 -> m0_289  [key=0, style=solid];
m0_289 -> m0_290  [key=0, style=solid];
m0_289 -> m0_291  [key=2, style=dotted];
m0_290 -> m0_288  [key=0, style=bold, color=blue];
m0_296 -> m0_297  [key=0, style=solid];
m0_297 -> m0_298  [key=0, style=solid];
m0_297 -> m0_299  [key=2, style=dotted];
m0_298 -> m0_296  [key=0, style=bold, color=blue];
m0_304 -> m0_305  [key=0, style=solid];
m0_305 -> m0_306  [key=0, style=solid];
m0_305 -> m0_299  [key=2, style=dotted];
m0_306 -> m0_304  [key=0, style=bold, color=blue];
m0_314 -> m0_315  [key=0, style=solid];
m0_315 -> m0_316  [key=0, style=solid];
m0_315 -> m0_317  [key=2, style=dotted];
m0_316 -> m0_314  [key=0, style=bold, color=blue];
m0_324 -> m0_325  [key=0, style=solid];
m0_325 -> m0_326  [key=0, style=solid];
m0_325 -> m0_317  [key=2, style=dotted];
m0_326 -> m0_324  [key=0, style=bold, color=blue];
m0_332 -> m0_333  [key=0, style=solid];
m0_333 -> m0_334  [key=0, style=solid];
m0_333 -> m0_3  [key=2, style=dotted];
m0_333 -> m0_4  [key=2, style=dotted];
m0_333 -> m0_5  [key=2, style=dotted];
m0_333 -> m0_335  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_334 -> m0_332  [key=0, style=bold, color=blue];
m0_335 -> m0_336  [key=0, style=solid];
m0_336 -> m0_337  [key=0, style=solid];
m0_336 -> m0_338  [key=2, style=dotted];
m0_337 -> m0_335  [key=0, style=bold, color=blue];
m0_343 -> m0_344  [key=0, style=solid];
m0_344 -> m0_345  [key=0, style=solid];
m0_344 -> m0_3  [key=2, style=dotted];
m0_344 -> m0_4  [key=2, style=dotted];
m0_344 -> m0_5  [key=2, style=dotted];
m0_344 -> m0_346  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_345 -> m0_343  [key=0, style=bold, color=blue];
m0_346 -> m0_347  [key=0, style=solid];
m0_347 -> m0_348  [key=0, style=solid];
m0_347 -> m0_349  [key=2, style=dotted];
m0_348 -> m0_346  [key=0, style=bold, color=blue];
m0_354 -> m0_355  [key=0, style=solid];
m0_355 -> m0_356  [key=0, style=solid];
m0_355 -> m0_3  [key=2, style=dotted];
m0_355 -> m0_4  [key=2, style=dotted];
m0_355 -> m0_5  [key=2, style=dotted];
m0_355 -> m0_357  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_356 -> m0_354  [key=0, style=bold, color=blue];
m0_357 -> m0_358  [key=0, style=solid];
m0_358 -> m0_359  [key=0, style=solid];
m0_358 -> m0_360  [key=2, style=dotted];
m0_359 -> m0_357  [key=0, style=bold, color=blue];
m0_375 -> m0_376  [key=0, style=solid];
m0_370 -> m0_371  [key=0, style=solid];
m0_374 -> m0_375  [key=0, style=solid];
m0_371 -> m0_372  [key=0, style=solid];
m0_371 -> m0_373  [key=2, style=dotted];
m0_372 -> m0_370  [key=0, style=bold, color=blue];
m0_376 -> m0_374  [key=0, style=bold, color=blue];
m0_385 -> m0_386  [key=0, style=solid];
m0_381 -> m0_382  [key=0, style=solid];
m0_384 -> m0_385  [key=0, style=solid];
m0_382 -> m0_383  [key=0, style=solid];
m0_382 -> m0_26  [key=2, style=dotted];
m0_383 -> m0_381  [key=0, style=bold, color=blue];
m0_386 -> m0_384  [key=0, style=bold, color=blue];
m0_391 -> m0_392  [key=0, style=solid];
m0_392 -> m0_393  [key=0, style=solid];
m0_392 -> m0_394  [key=2, style=dotted];
m0_393 -> m0_391  [key=0, style=bold, color=blue];
m0_407 -> m0_408  [key=0, style=solid];
m0_402 -> m0_403  [key=0, style=solid];
m0_406 -> m0_407  [key=0, style=solid];
m0_403 -> m0_404  [key=0, style=solid];
m0_403 -> m0_405  [key=2, style=dotted];
m0_404 -> m0_402  [key=0, style=bold, color=blue];
m0_408 -> m0_406  [key=0, style=bold, color=blue];
m0_413 -> m0_414  [key=0, style=solid];
m0_414 -> m0_415  [key=0, style=solid];
m0_414 -> m0_275  [key=2, style=dotted];
m0_415 -> m0_413  [key=0, style=bold, color=blue];
m0_420 -> m0_421  [key=0, style=solid];
m0_421 -> m0_422  [key=0, style=solid];
m0_421 -> m0_423  [key=2, style=dotted];
m0_422 -> m0_420  [key=0, style=bold, color=blue];
m0_429 -> m0_430  [key=0, style=solid];
m0_430 -> m0_431  [key=0, style=solid];
m0_430 -> m0_26  [key=2, style=dotted];
m0_431 -> m0_429  [key=0, style=bold, color=blue];
m0_443 -> m0_444  [key=0, style=solid];
m0_438 -> m0_439  [key=0, style=solid];
m0_442 -> m0_443  [key=0, style=solid];
m0_439 -> m0_440  [key=0, style=solid];
m0_439 -> m0_441  [key=2, style=dotted];
m0_440 -> m0_438  [key=0, style=bold, color=blue];
m0_444 -> m0_442  [key=0, style=bold, color=blue];
m0_459 -> m0_460  [key=0, style=solid];
m0_459 -> m0_455  [key=2, style=dotted];
m0_460 -> m0_458  [key=0, style=bold, color=blue];
m0_445 -> m0_446  [key=0, style=solid];
m0_445 -> m0_447  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Immutable_Simple_Options"];
m0_446 -> m0_447  [key=0, style=solid];
m0_446 -> m0_449  [key=2, style=dotted];
m0_446 -> m0_4  [key=2, style=dotted];
m0_446 -> m0_5  [key=2, style=dotted];
m0_447 -> m0_448  [key=0, style=solid];
m0_447 -> m0_18  [key=2, style=dotted];
m0_448 -> m0_445  [key=0, style=bold, color=blue];
m0_377 -> m0_378  [key=0, style=solid];
m0_377 -> m0_379  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_377 -> m0_385  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_378 -> m0_379  [key=0, style=solid];
m0_378 -> m0_3  [key=2, style=dotted];
m0_378 -> m0_4  [key=2, style=dotted];
m0_378 -> m0_5  [key=2, style=dotted];
m0_378 -> m0_381  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_379 -> m0_380  [key=0, style=solid];
m0_379 -> m0_368  [key=2, style=dotted];
m0_379 -> m0_369  [key=2, style=dotted];
m0_379 -> m0_384  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_380 -> m0_377  [key=0, style=bold, color=blue];
m0_395 -> m0_396  [key=0, style=solid];
m0_395 -> m0_397  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResultType"];
m0_395 -> m0_398  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_395 -> m0_407  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_395 -> m0_399  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResultType"];
m0_396 -> m0_397  [key=0, style=solid];
m0_396 -> m0_3  [key=2, style=dotted];
m0_396 -> m0_4  [key=2, style=dotted];
m0_396 -> m0_5  [key=2, style=dotted];
m0_396 -> m0_402  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_396 -> m0_398  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_396 -> m0_400  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_397 -> m0_398  [key=0, style=solid];
m0_397 -> m0_399  [key=0, style=solid];
m0_398 -> m0_401  [key=0, style=solid];
m0_398 -> m0_368  [key=2, style=dotted];
m0_398 -> m0_369  [key=2, style=dotted];
m0_398 -> m0_406  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_399 -> m0_400  [key=0, style=solid];
m0_399 -> m0_401  [key=0, style=solid];
m0_400 -> m0_401  [key=0, style=solid];
m0_400 -> m0_368  [key=2, style=dotted];
m0_400 -> m0_331  [key=2, style=dotted];
m0_401 -> m0_395  [key=0, style=bold, color=blue];
m0_50 -> m0_51  [key=0, style=solid];
m0_50 -> m0_52  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m0_51 -> m0_52  [key=0, style=solid];
m0_51 -> m0_3  [key=2, style=dotted];
m0_51 -> m0_4  [key=2, style=dotted];
m0_51 -> m0_5  [key=2, style=dotted];
m0_51 -> m0_54  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_52 -> m0_53  [key=0, style=solid];
m0_52 -> m0_18  [key=2, style=dotted];
m0_53 -> m0_50  [key=0, style=bold, color=blue];
m0_120 -> m0_121  [key=0, style=solid];
m0_121 -> m0_122  [key=0, style=solid];
m0_121 -> m0_116  [key=2, style=dotted];
m0_121 -> m0_72  [key=2, style=dotted];
m0_121 -> m0_123  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_122 -> m0_123  [key=0, style=solid];
m0_122 -> m0_3  [key=2, style=dotted];
m0_122 -> m0_4  [key=2, style=dotted];
m0_122 -> m0_5  [key=2, style=dotted];
m0_122 -> m0_125  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_123 -> m0_124  [key=0, style=solid];
m0_123 -> m0_18  [key=2, style=dotted];
m0_124 -> m0_120  [key=0, style=bold, color=blue];
m0_27 -> m0_28  [key=0, style=solid];
m0_27 -> m0_29  [key=1, style=dashed, color=darkseagreen4, label=double];
m0_28 -> m0_29  [key=0, style=solid];
m0_28 -> m0_3  [key=2, style=dotted];
m0_28 -> m0_4  [key=2, style=dotted];
m0_28 -> m0_5  [key=2, style=dotted];
m0_28 -> m0_31  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_29 -> m0_30  [key=0, style=solid];
m0_29 -> m0_18  [key=2, style=dotted];
m0_30 -> m0_27  [key=0, style=bold, color=blue];
m0_267 -> m0_268  [key=0, style=solid];
m0_268 -> m0_269  [key=0, style=solid];
m0_268 -> m0_214  [key=2, style=dotted];
m0_268 -> m0_270  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_269 -> m0_270  [key=0, style=solid];
m0_269 -> m0_3  [key=2, style=dotted];
m0_269 -> m0_4  [key=2, style=dotted];
m0_269 -> m0_5  [key=2, style=dotted];
m0_269 -> m0_272  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_270 -> m0_271  [key=0, style=solid];
m0_270 -> m0_18  [key=2, style=dotted];
m0_271 -> m0_267  [key=0, style=bold, color=blue];
m0_227 -> m0_228  [key=0, style=solid];
m0_228 -> m0_229  [key=0, style=solid];
m0_228 -> m0_81  [key=2, style=dotted];
m0_228 -> m0_72  [key=2, style=dotted];
m0_228 -> m0_230  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_229 -> m0_230  [key=0, style=solid];
m0_229 -> m0_3  [key=2, style=dotted];
m0_229 -> m0_4  [key=2, style=dotted];
m0_229 -> m0_5  [key=2, style=dotted];
m0_229 -> m0_232  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_230 -> m0_231  [key=0, style=solid];
m0_230 -> m0_18  [key=2, style=dotted];
m0_231 -> m0_227  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid, color=red];
m0_1 -> m0_2  [key=0, style=solid, color=red];
m0_1 -> m0_3  [key=2, style=dotted, color=red];
m0_1 -> m0_4  [key=2, style=dotted, color=red];
m0_1 -> m0_5  [key=2, style=dotted, color=red];
m0_1 -> m0_6  [key=1, style=dashed, color=red, label="lambda expression"];
m0_2 -> m0_0  [key=0, style=bold, color=blue];
m0_10 -> m0_11  [key=0, style=solid, color=red];
m0_11 -> m0_12  [key=0, style=solid, color=red];
m0_11 -> m0_15  [key=2, style=dotted, color=red];
m0_11 -> m0_16  [key=2, style=dotted, color=red];
m0_11 -> m0_17  [key=2, style=dotted, color=red];
m0_11 -> m0_13  [key=1, style=dashed, color=red, label=expectedResult];
m0_12 -> m0_13  [key=0, style=solid, color=red];
m0_12 -> m0_0  [key=2, style=dotted, color=red];
m0_13 -> m0_14  [key=0, style=solid, color=red];
m0_13 -> m0_18  [key=2, style=dotted, color=red];
m0_14 -> m0_10  [key=0, style=bold, color=blue];
m0_218 -> m0_219  [key=0, style=solid];
m0_219 -> m0_220  [key=0, style=solid];
m0_219 -> m0_214  [key=2, style=dotted];
m0_219 -> m0_72  [key=2, style=dotted];
m0_219 -> m0_221  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_220 -> m0_221  [key=0, style=solid];
m0_220 -> m0_3  [key=2, style=dotted];
m0_220 -> m0_4  [key=2, style=dotted];
m0_220 -> m0_5  [key=2, style=dotted];
m0_220 -> m0_223  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_221 -> m0_222  [key=0, style=solid];
m0_221 -> m0_18  [key=2, style=dotted];
m0_222 -> m0_218  [key=0, style=bold, color=blue];
m0_209 -> m0_210  [key=0, style=solid];
m0_210 -> m0_211  [key=0, style=solid];
m0_210 -> m0_214  [key=2, style=dotted];
m0_210 -> m0_72  [key=2, style=dotted];
m0_210 -> m0_212  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_211 -> m0_212  [key=0, style=solid];
m0_211 -> m0_3  [key=2, style=dotted];
m0_211 -> m0_4  [key=2, style=dotted];
m0_211 -> m0_5  [key=2, style=dotted];
m0_211 -> m0_215  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_212 -> m0_213  [key=0, style=solid];
m0_212 -> m0_18  [key=2, style=dotted];
m0_213 -> m0_209  [key=0, style=bold, color=blue];
m0_128 -> m0_129  [key=0, style=solid];
m0_129 -> m0_130  [key=0, style=solid];
m0_129 -> m0_116  [key=2, style=dotted];
m0_129 -> m0_72  [key=2, style=dotted];
m0_129 -> m0_131  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_130 -> m0_131  [key=0, style=solid];
m0_130 -> m0_3  [key=2, style=dotted];
m0_130 -> m0_4  [key=2, style=dotted];
m0_130 -> m0_5  [key=2, style=dotted];
m0_130 -> m0_133  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_131 -> m0_132  [key=0, style=solid];
m0_131 -> m0_18  [key=2, style=dotted];
m0_132 -> m0_128  [key=0, style=bold, color=blue];
m0_86 -> m0_87  [key=0, style=solid];
m0_87 -> m0_88  [key=0, style=solid];
m0_87 -> m0_81  [key=2, style=dotted];
m0_87 -> m0_72  [key=2, style=dotted];
m0_87 -> m0_89  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_88 -> m0_89  [key=0, style=solid];
m0_88 -> m0_3  [key=2, style=dotted];
m0_88 -> m0_4  [key=2, style=dotted];
m0_88 -> m0_5  [key=2, style=dotted];
m0_88 -> m0_91  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_89 -> m0_90  [key=0, style=solid];
m0_89 -> m0_18  [key=2, style=dotted];
m0_90 -> m0_86  [key=0, style=bold, color=blue];
m0_66 -> m0_67  [key=0, style=solid];
m0_67 -> m0_68  [key=0, style=solid];
m0_67 -> m0_71  [key=2, style=dotted];
m0_67 -> m0_72  [key=2, style=dotted];
m0_67 -> m0_69  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_68 -> m0_69  [key=0, style=solid];
m0_68 -> m0_3  [key=2, style=dotted];
m0_68 -> m0_4  [key=2, style=dotted];
m0_68 -> m0_5  [key=2, style=dotted];
m0_68 -> m0_73  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_69 -> m0_70  [key=0, style=solid];
m0_69 -> m0_18  [key=2, style=dotted];
m0_70 -> m0_66  [key=0, style=bold, color=blue];
m0_136 -> m0_137  [key=0, style=solid];
m0_137 -> m0_138  [key=0, style=solid];
m0_137 -> m0_141  [key=2, style=dotted];
m0_137 -> m0_139  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_138 -> m0_139  [key=0, style=solid];
m0_138 -> m0_3  [key=2, style=dotted];
m0_138 -> m0_4  [key=2, style=dotted];
m0_138 -> m0_5  [key=2, style=dotted];
m0_138 -> m0_142  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_139 -> m0_140  [key=0, style=solid];
m0_139 -> m0_18  [key=2, style=dotted];
m0_140 -> m0_136  [key=0, style=bold, color=blue];
m0_416 -> m0_417  [key=0, style=solid];
m0_416 -> m0_418  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Options_With_Scalar_Value_And_Adjacent_SequenceString"];
m0_417 -> m0_418  [key=0, style=solid];
m0_417 -> m0_3  [key=2, style=dotted];
m0_417 -> m0_4  [key=2, style=dotted];
m0_417 -> m0_5  [key=2, style=dotted];
m0_417 -> m0_420  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_418 -> m0_419  [key=0, style=solid];
m0_418 -> m0_18  [key=2, style=dotted];
m0_419 -> m0_416  [key=0, style=bold, color=blue];
m0_19 -> m0_20  [key=0, style=solid, color=red];
m0_19 -> m0_21  [key=1, style=dashed, color=red, label=long];
m0_20 -> m0_21  [key=0, style=solid, color=red];
m0_20 -> m0_3  [key=2, style=dotted, color=red];
m0_20 -> m0_4  [key=2, style=dotted, color=red];
m0_20 -> m0_5  [key=2, style=dotted, color=red];
m0_20 -> m0_23  [key=1, style=dashed, color=red, label="lambda expression"];
m0_21 -> m0_22  [key=0, style=solid, color=red];
m0_21 -> m0_18  [key=2, style=dotted, color=red];
m0_22 -> m0_19  [key=0, style=bold, color=blue];
m0_318 -> m0_319  [key=0, style=solid];
m0_318 -> m0_321  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_318 -> m0_322  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_319 -> m0_320  [key=0, style=solid];
m0_319 -> m0_3  [key=2, style=dotted];
m0_319 -> m0_4  [key=2, style=dotted];
m0_319 -> m0_5  [key=2, style=dotted];
m0_319 -> m0_324  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_319 -> m0_321  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_319 -> m0_322  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_321 -> m0_322  [key=0, style=solid];
m0_321 -> m0_18  [key=2, style=dotted];
m0_322 -> m0_323  [key=0, style=solid];
m0_322 -> m0_313  [key=2, style=dotted];
m0_322 -> m0_18  [key=2, style=dotted];
m0_320 -> m0_321  [key=0, style=solid];
m0_320 -> m0_322  [key=0, style=solid];
m0_323 -> m0_318  [key=0, style=bold, color=blue];
m0_424 -> m0_425  [key=0, style=solid];
m0_425 -> m0_426  [key=0, style=solid];
m0_425 -> m0_26  [key=2, style=dotted];
m0_425 -> m0_427  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_426 -> m0_427  [key=0, style=solid];
m0_426 -> m0_3  [key=2, style=dotted];
m0_426 -> m0_4  [key=2, style=dotted];
m0_426 -> m0_5  [key=2, style=dotted];
m0_426 -> m0_429  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_427 -> m0_428  [key=0, style=solid];
m0_427 -> m0_18  [key=2, style=dotted];
m0_428 -> m0_424  [key=0, style=bold, color=blue];
m0_161 -> m0_162  [key=0, style=solid];
m0_161 -> m0_163  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m0_162 -> m0_163  [key=0, style=solid];
m0_162 -> m0_3  [key=2, style=dotted];
m0_162 -> m0_4  [key=2, style=dotted];
m0_162 -> m0_5  [key=2, style=dotted];
m0_162 -> m0_165  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_163 -> m0_164  [key=0, style=solid];
m0_163 -> m0_18  [key=2, style=dotted];
m0_164 -> m0_161  [key=0, style=bold, color=blue];
m0_292 -> m0_293  [key=0, style=solid];
m0_292 -> m0_294  [key=1, style=dashed, color=darkseagreen4, label="int?"];
m0_293 -> m0_294  [key=0, style=solid];
m0_293 -> m0_3  [key=2, style=dotted];
m0_293 -> m0_4  [key=2, style=dotted];
m0_293 -> m0_5  [key=2, style=dotted];
m0_293 -> m0_296  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_294 -> m0_295  [key=0, style=solid];
m0_294 -> m0_18  [key=2, style=dotted];
m0_295 -> m0_292  [key=0, style=bold, color=blue];
m0_235 -> m0_236  [key=0, style=solid];
m0_236 -> m0_237  [key=0, style=solid];
m0_236 -> m0_240  [key=2, style=dotted];
m0_236 -> m0_238  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_237 -> m0_238  [key=0, style=solid];
m0_237 -> m0_3  [key=2, style=dotted];
m0_237 -> m0_4  [key=2, style=dotted];
m0_237 -> m0_5  [key=2, style=dotted];
m0_237 -> m0_241  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_238 -> m0_239  [key=0, style=solid];
m0_238 -> m0_18  [key=2, style=dotted];
m0_239 -> m0_235  [key=0, style=bold, color=blue];
m0_200 -> m0_201  [key=0, style=solid];
m0_201 -> m0_202  [key=0, style=solid];
m0_201 -> m0_205  [key=2, style=dotted];
m0_201 -> m0_203  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_202 -> m0_203  [key=0, style=solid];
m0_202 -> m0_3  [key=2, style=dotted];
m0_202 -> m0_4  [key=2, style=dotted];
m0_202 -> m0_5  [key=2, style=dotted];
m0_202 -> m0_206  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_203 -> m0_204  [key=0, style=solid];
m0_203 -> m0_18  [key=2, style=dotted];
m0_204 -> m0_200  [key=0, style=bold, color=blue];
m0_283 -> m0_284  [key=0, style=solid];
m0_284 -> m0_285  [key=0, style=solid];
m0_284 -> m0_81  [key=2, style=dotted];
m0_284 -> m0_286  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_285 -> m0_286  [key=0, style=solid];
m0_285 -> m0_3  [key=2, style=dotted];
m0_285 -> m0_4  [key=2, style=dotted];
m0_285 -> m0_5  [key=2, style=dotted];
m0_285 -> m0_288  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_286 -> m0_287  [key=0, style=solid];
m0_286 -> m0_18  [key=2, style=dotted];
m0_287 -> m0_283  [key=0, style=bold, color=blue];
m0_103 -> m0_104  [key=0, style=solid];
m0_103 -> m0_105  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Colors"];
m0_104 -> m0_105  [key=0, style=solid];
m0_104 -> m0_3  [key=2, style=dotted];
m0_104 -> m0_4  [key=2, style=dotted];
m0_104 -> m0_5  [key=2, style=dotted];
m0_104 -> m0_107  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_105 -> m0_106  [key=0, style=solid];
m0_105 -> m0_18  [key=2, style=dotted];
m0_105 -> m0_105  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Colors"];
m0_106 -> m0_103  [key=0, style=bold, color=blue];
m0_276 -> m0_277  [key=0, style=solid];
m0_276 -> m0_278  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_277 -> m0_278  [key=0, style=solid];
m0_277 -> m0_3  [key=2, style=dotted];
m0_277 -> m0_4  [key=2, style=dotted];
m0_277 -> m0_5  [key=2, style=dotted];
m0_277 -> m0_280  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_278 -> m0_279  [key=0, style=solid];
m0_278 -> m0_18  [key=2, style=dotted];
m0_279 -> m0_276  [key=0, style=bold, color=blue];
m0_450 -> m0_451  [key=0, style=solid];
m0_451 -> m0_452  [key=0, style=solid];
m0_451 -> m0_455  [key=2, style=dotted];
m0_451 -> m0_456  [key=2, style=dotted];
m0_451 -> m0_457  [key=2, style=dotted];
m0_451 -> m0_453  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_452 -> m0_453  [key=0, style=solid];
m0_452 -> m0_3  [key=2, style=dotted];
m0_452 -> m0_4  [key=2, style=dotted];
m0_452 -> m0_5  [key=2, style=dotted];
m0_452 -> m0_458  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_453 -> m0_454  [key=0, style=solid];
m0_453 -> m0_18  [key=2, style=dotted];
m0_454 -> m0_450  [key=0, style=bold, color=blue];
m0_339 -> m0_340  [key=0, style=solid];
m0_340 -> m0_341  [key=0, style=solid];
m0_341 -> m0_342  [key=0, style=solid];
m0_341 -> m0_331  [key=2, style=dotted];
m0_342 -> m0_339  [key=0, style=bold, color=blue];
m0_190 -> m0_191  [key=0, style=solid];
m0_191 -> m0_192  [key=0, style=solid];
m0_191 -> m0_195  [key=2, style=dotted];
m0_191 -> m0_72  [key=2, style=dotted];
m0_191 -> m0_193  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_192 -> m0_193  [key=0, style=solid];
m0_192 -> m0_3  [key=2, style=dotted];
m0_192 -> m0_4  [key=2, style=dotted];
m0_192 -> m0_5  [key=2, style=dotted];
m0_192 -> m0_196  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_193 -> m0_194  [key=0, style=solid];
m0_193 -> m0_18  [key=2, style=dotted];
m0_194 -> m0_190  [key=0, style=bold, color=blue];
m0_461 -> m0_183  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m0_461 -> m0_187  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m0_462 -> m0_375  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_463 -> m0_385  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_464 -> m0_407  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_465 -> m0_443  [key=1, style=dashed, color=darkseagreen4, label=int];
}
