digraph  {
d18 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", color=green, community=0, label="yield break;", prediction=0, span="36-36"];
d4 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="Entry CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="29-29"];
d17 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="specProps.Empty()", span="34-34"];
d19 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", color=green, community=0, label="var pt = specProps.First()", prediction=1, span="38-38"];
d22 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", color=green, community=0, label="yield return\r\n                    Tuple.Create(pt, pt.Specification.MakeErrorInCaseOfMinConstraint());", prediction=1, span="42-43"];
d21 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", color=green, community=0, label="taken.Empty()", prediction=3, span="40-40"];
d23 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="yield break;", span="44-44"];
d38 [cluster="CommandLine.Core.Specification.MakeErrorInCaseOfMinConstraint()", label="Entry CommandLine.Core.Specification.MakeErrorInCaseOfMinConstraint()", span="87-87"];
d39 [cluster="System.Tuple.Create<T1, T2>(T1, T2)", label="Entry System.Tuple.Create<T1, T2>(T1, T2)", span="0-0"];
d26 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", color=green, community=0, label="yield return\r\n                    Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                        pt, Maybe.Just<Error>(new SequenceOutOfRangeError(NameInfo.EmptyName)));", prediction=1, span="52-54"];
d25 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="pt.Specification.Max.IsJust()\r\n                && next.IsNothing()\r\n                && values.Skip(taken.Count()).Any()", span="48-50"];
d27 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="yield break;", span="55-55"];
d46 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="360-360"];
d47 [cluster="CSharpx.Maybe.Just<T>(T)", label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124"];
d28 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", color=green, community=0, label="yield return\r\n                converter(taken, pt.Property.PropertyType, pt.Specification.TargetType != TargetType.Sequence)\r\n                    .MapValueOrDefault(\r\n                        converted => Tuple.Create(pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>()),\r\n                        Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                            pt, Maybe.Just<Error>(new BadFormatConversionError(NameInfo.EmptyName))));", prediction=1, span="58-63"];
d20 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", color=green, community=0, label="var taken = values.Take(pt.Specification.CountOfMaxNumberOfValues().MapValueOrDefault(n => n, values.Count()))", prediction=1, span="39-39"];
d29 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", color=green, community=0, label="MapValuesImpl(specProps.Skip(1), values.Skip(taken.Count()), converter)", prediction=1, span="65-65"];
d48 [cluster="System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", label="Entry System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", span="0-0"];
d49 [cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="349-349"];
d36 [cluster="CSharpx.Maybe<T1>.MapValueOrDefault<T1, T2>(System.Func<T1, T2>, T2)", label="Entry CSharpx.Maybe<T1>.MapValueOrDefault<T1, T2>(System.Func<T1, T2>, T2)", span="377-377"];
d57 [cluster="lambda expression", label="Entry lambda expression", span="61-61"];
d33 [cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0"];
d58 [cluster="lambda expression", color=green, community=0, label="Tuple.Create(pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>())", prediction=1, span="61-61"];
d34 [cluster="CommandLine.Core.Specification.CountOfMaxNumberOfValues()", label="Entry CommandLine.Core.Specification.CountOfMaxNumberOfValues()", span="71-71"];
d35 [cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0"];
d37 [cluster="System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", label="Entry System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", span="0-0"];
d50 [cluster="lambda expression", label="Entry lambda expression", span="39-39"];
d24 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", color=green, community=0, label="var next = specProps.Skip(1).FirstOrDefault(s => s.Specification.IsValue()).ToMaybe()", prediction=9, span="47-47"];
d40 [cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0"];
d41 [cluster="Unk.FirstOrDefault", label="Entry Unk.FirstOrDefault", span=""];
d42 [cluster="Unk.ToMaybe", label="Entry Unk.ToMaybe", span=""];
d53 [cluster="lambda expression", label="Entry lambda expression", span="47-47"];
d30 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="yield return value;", span="67-67"];
d31 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="Exit CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="29-29"];
d75 [label=pt, span=""];
d59 [cluster="lambda expression", label="Exit lambda expression", span="61-61"];
d60 [cluster="CommandLine.Core.SpecificationProperty.WithValue(CSharpx.Maybe<object>)", label="Entry CommandLine.Core.SpecificationProperty.WithValue(CSharpx.Maybe<object>)", span="18-18"];
d61 [cluster="CSharpx.Maybe.Nothing<T>()", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
d32 [cluster="System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", span="31-31"];
d51 [cluster="lambda expression", color=green, community=1, label=n, prediction=10, span="39-39"];
d52 [cluster="lambda expression", label="Exit lambda expression", span="39-39"];
d54 [cluster="lambda expression", color=green, community=0, label="s.Specification.IsValue()", prediction=11, span="47-47"];
d55 [cluster="lambda expression", label="Exit lambda expression", span="47-47"];
d56 [cluster="CommandLine.Core.Specification.IsValue()", label="Entry CommandLine.Core.Specification.IsValue()", span="15-15"];
d68 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", color=green, community=0, label="return Maybe.Just(specification.Max.FromJustOrFail());", prediction=12, span="80-80"];
d62 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", label="Entry CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", span="71-71"];
d67 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", label="specification.Max.IsJust()", span="78-78"];
d70 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", label="Exit CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", span="71-71"];
d71 [cluster="CSharpx.Maybe<T>.FromJustOrFail<T>(System.Exception)", label="Entry CSharpx.Maybe<T>.FromJustOrFail<T>(System.Exception)", span="355-355"];
d64 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", color=green, community=0, label="TargetType.Scalar", prediction=13, span="75-75"];
d63 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", label="specification.TargetType", span="73-73"];
d65 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", label="return Maybe.Just(1);", span="76-76"];
d69 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", color=green, community=0, label="return Maybe.Nothing<int>();", prediction=14, span="84-84"];
d73 [cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", color=green, community=0, label="return specification.Min.IsJust()\r\n                ? Maybe.Just<Error>(new SequenceOutOfRangeError(NameInfo.EmptyName))\r\n                : Maybe.Nothing<Error>();", prediction=15, span="89-91"];
d72 [cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", label="Entry CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", span="87-87"];
d74 [cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", label="Exit CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", span="87-87"];
d43 [cluster="CSharpx.Maybe<T>.IsJust<T>()", label="Entry CSharpx.Maybe<T>.IsJust<T>()", span="326-326"];
d1 [cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="var propAndErrors = MapValuesImpl(specProps, values, converter)", span="20-20"];
d44 [cluster="Unk.IsNothing", label="Entry Unk.IsNothing", span=""];
d45 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
d66 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", label="TargetType.Sequence", span="77-77"];
d0 [cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="Entry CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="15-15"];
d2 [cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="return Result.Succeed(\r\n                propAndErrors.Select(pe => pe.Item1),\r\n                propAndErrors.Select(pe => pe.Item2)\r\n                    .OfType<Just<Error>>().Select(e => e.Value)\r\n                );", span="22-26"];
d3 [cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="Exit CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="15-15"];
d5 [cluster="Unk.Select", label="Entry Unk.Select", span=""];
d6 [cluster="Unk.>", label="Entry Unk.>", span=""];
d7 [cluster="Unk.Succeed", label="Entry Unk.Succeed", span=""];
d8 [cluster="lambda expression", label="Entry lambda expression", span="23-23"];
d11 [cluster="lambda expression", label="Entry lambda expression", span="24-24"];
d14 [cluster="lambda expression", label="Entry lambda expression", span="25-25"];
d10 [cluster="lambda expression", label="Exit lambda expression", span="23-23"];
d9 [cluster="lambda expression", label="pe.Item1", span="23-23"];
d13 [cluster="lambda expression", label="Exit lambda expression", span="24-24"];
d12 [cluster="lambda expression", label="pe.Item2", span="24-24"];
d16 [cluster="lambda expression", label="Exit lambda expression", span="25-25"];
d15 [cluster="lambda expression", label="e.Value", span="25-25"];
m0_14 [cluster="Unk.Where", file="Tokenizer.cs", label="Entry Unk.Where", span=""];
m0_22 [cluster="Unk.Create", file="Tokenizer.cs", label="Entry Unk.Create", span=""];
m0_12 [cluster="CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Tokenizer.cs", label="Entry CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11"];
m0_18 [cluster="CommandLine.Core.KeyValuePairHelper.ForScalar(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="Tokenizer.cs", label="Entry CommandLine.Core.KeyValuePairHelper.ForScalar(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="16-16"];
m0_13 [cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Tokenizer.cs", label="Entry CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11"];
m0_0 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Tokenizer.cs", label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12"];
m0_3 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", color=green, community=0, file="Tokenizer.cs", label="var scalars = Scalar.Partition(tokenList, typeLookup).ToList()", prediction=16, span="18-18"];
m0_1 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Tokenizer.cs", label="var tokenList = tokens.ToList()", span="16-16"];
m0_2 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Tokenizer.cs", label="var switches = Switch.Partition(tokenList, typeLookup).ToList()", span="17-17"];
m0_4 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", color=green, community=0, file="Tokenizer.cs", label="var sequences = Sequence.Partition(tokenList, typeLookup).ToList()", prediction=17, span="19-19"];
m0_5 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", color=green, community=0, file="Tokenizer.cs", label="var nonOptions = tokenList\r\n                .Where(t => !switches.Contains(t))\r\n                .Where(t => !scalars.Contains(t))\r\n                .Where(t => !sequences.Contains(t)).ToList()", prediction=18, span="20-23"];
m0_8 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Tokenizer.cs", label="return TokenPartitions.Create(\r\n                    KeyValuePairHelper.ForSwitch(switches)\r\n                        .Concat(KeyValuePairHelper.ForScalar(scalars))\r\n                        .Concat(KeyValuePairHelper.ForSequence(sequences)),\r\n                values.Select(t => t.Text),\r\n                errors);", span="27-32"];
m0_6 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Tokenizer.cs", label="var values = nonOptions.Where(v => v.IsValue()).ToList()", span="24-24"];
m0_7 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Tokenizer.cs", label="var errors = nonOptions.Except(values).ToList()", span="25-25"];
m0_9 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Tokenizer.cs", label="Exit CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12"];
m0_30 [cluster="Unk.Contains", file="Tokenizer.cs", label="Entry Unk.Contains", span=""];
m0_16 [cluster="Unk.Except", file="Tokenizer.cs", label="Entry Unk.Except", span=""];
m0_34 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="24-24"];
m0_28 [cluster="lambda expression", color=green, community=0, file="Tokenizer.cs", label="!scalars.Contains(t)", prediction=16, span="22-22"];
m0_32 [cluster="lambda expression", file="Tokenizer.cs", label="!sequences.Contains(t)", span="23-23"];
m0_23 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="21-21"];
m0_27 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="22-22"];
m0_31 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="23-23"];
m0_24 [cluster="lambda expression", color=green, community=0, file="Tokenizer.cs", label="!switches.Contains(t)", prediction=20, span="21-21"];
m0_25 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="21-21"];
m0_29 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="22-22"];
m0_38 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="31-31"];
m0_33 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="23-23"];
m0_40 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="31-31"];
m0_39 [cluster="lambda expression", file="Tokenizer.cs", label="t.Text", span="31-31"];
m0_35 [cluster="lambda expression", file="Tokenizer.cs", label="v.IsValue()", span="24-24"];
m0_36 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="24-24"];
m0_15 [cluster="Unk.ToList", file="Tokenizer.cs", label="Entry Unk.ToList", span=""];
m0_17 [cluster="CommandLine.Core.KeyValuePairHelper.ForSwitch(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="Tokenizer.cs", label="Entry CommandLine.Core.KeyValuePairHelper.ForSwitch(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="10-10"];
m0_11 [cluster="CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Tokenizer.cs", label="Entry CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11"];
m0_10 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", file="Tokenizer.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", span="0-0"];
m0_37 [cluster="Unk.IsValue", file="Tokenizer.cs", label="Entry Unk.IsValue", span=""];
m0_19 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="Tokenizer.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
m0_20 [cluster="CommandLine.Core.KeyValuePairHelper.ForSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="Tokenizer.cs", label="Entry CommandLine.Core.KeyValuePairHelper.ForSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="22-22"];
m0_26 [cluster="System.Collections.Generic.List<T>.Contains(T)", file="Tokenizer.cs", label="Entry System.Collections.Generic.List<T>.Contains(T)", span="0-0"];
m0_41 [file="Tokenizer.cs", label=switches, span=""];
m0_42 [file="Tokenizer.cs", label=scalars, span=""];
m0_43 [file="Tokenizer.cs", label=sequences, span=""];
m1_15 [cluster="CommandLine.Infrastructure.Unit.operator !=(CommandLine.Infrastructure.Unit, CommandLine.Infrastructure.Unit)", file="Unit.cs", label="Entry CommandLine.Infrastructure.Unit.operator !=(CommandLine.Infrastructure.Unit, CommandLine.Infrastructure.Unit)", span="41-41"];
m1_16 [cluster="CommandLine.Infrastructure.Unit.operator !=(CommandLine.Infrastructure.Unit, CommandLine.Infrastructure.Unit)", color=green, community=0, file="Unit.cs", label="return false;", prediction=21, span="43-43"];
m1_17 [cluster="CommandLine.Infrastructure.Unit.operator !=(CommandLine.Infrastructure.Unit, CommandLine.Infrastructure.Unit)", file="Unit.cs", label="Exit CommandLine.Infrastructure.Unit.operator !=(CommandLine.Infrastructure.Unit, CommandLine.Infrastructure.Unit)", span="41-41"];
m1_0 [cluster="CommandLine.Infrastructure.Unit.Equals(CommandLine.Infrastructure.Unit)", file="Unit.cs", label="Entry CommandLine.Infrastructure.Unit.Equals(CommandLine.Infrastructure.Unit)", span="16-16"];
m1_1 [cluster="CommandLine.Infrastructure.Unit.Equals(CommandLine.Infrastructure.Unit)", color=green, community=0, file="Unit.cs", label="return true;", prediction=22, span="18-18"];
m1_2 [cluster="CommandLine.Infrastructure.Unit.Equals(CommandLine.Infrastructure.Unit)", file="Unit.cs", label="Exit CommandLine.Infrastructure.Unit.Equals(CommandLine.Infrastructure.Unit)", span="16-16"];
m1_6 [cluster="CommandLine.Infrastructure.Unit.GetHashCode()", file="Unit.cs", label="Entry CommandLine.Infrastructure.Unit.GetHashCode()", span="26-26"];
m1_7 [cluster="CommandLine.Infrastructure.Unit.GetHashCode()", color=green, community=0, file="Unit.cs", label="return 0;", prediction=23, span="28-28"];
m1_8 [cluster="CommandLine.Infrastructure.Unit.GetHashCode()", file="Unit.cs", label="Exit CommandLine.Infrastructure.Unit.GetHashCode()", span="26-26"];
m1_9 [cluster="CommandLine.Infrastructure.Unit.ToString()", file="Unit.cs", label="Entry CommandLine.Infrastructure.Unit.ToString()", span="31-31"];
m1_10 [cluster="CommandLine.Infrastructure.Unit.ToString()", color=green, community=0, file="Unit.cs", label="return ''()'';", prediction=24, span="33-33"];
m1_11 [cluster="CommandLine.Infrastructure.Unit.ToString()", file="Unit.cs", label="Exit CommandLine.Infrastructure.Unit.ToString()", span="31-31"];
m1_3 [cluster="CommandLine.Infrastructure.Unit.Equals(object)", file="Unit.cs", label="Entry CommandLine.Infrastructure.Unit.Equals(object)", span="21-21"];
m1_4 [cluster="CommandLine.Infrastructure.Unit.Equals(object)", color=green, community=0, file="Unit.cs", label="return obj is Unit;", prediction=25, span="23-23"];
m1_5 [cluster="CommandLine.Infrastructure.Unit.Equals(object)", file="Unit.cs", label="Exit CommandLine.Infrastructure.Unit.Equals(object)", span="21-21"];
m1_12 [cluster="CommandLine.Infrastructure.Unit.operator ==(CommandLine.Infrastructure.Unit, CommandLine.Infrastructure.Unit)", file="Unit.cs", label="Entry CommandLine.Infrastructure.Unit.operator ==(CommandLine.Infrastructure.Unit, CommandLine.Infrastructure.Unit)", span="36-36"];
m1_13 [cluster="CommandLine.Infrastructure.Unit.operator ==(CommandLine.Infrastructure.Unit, CommandLine.Infrastructure.Unit)", color=green, community=0, file="Unit.cs", label="return true;", prediction=26, span="38-38"];
m1_14 [cluster="CommandLine.Infrastructure.Unit.operator ==(CommandLine.Infrastructure.Unit, CommandLine.Infrastructure.Unit)", file="Unit.cs", label="Exit CommandLine.Infrastructure.Unit.operator ==(CommandLine.Infrastructure.Unit, CommandLine.Infrastructure.Unit)", span="36-36"];
d4 -> d29  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
d4 -> d25  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
d19 -> d22  [color=green, key=1, label=pt, style=dashed];
d19 -> d26  [color=green, key=1, label=pt, style=dashed];
d19 -> d28  [color=green, key=1, label=pt, style=dashed];
d19 -> d25  [color=green, key=1, label=pt, style=dashed];
d19 -> d58  [color=green, key=1, label=pt, style=dashed];
d28 -> d57  [color=green, key=1, label="lambda expression", style=dashed];
d20 -> d28  [color=green, key=1, label=taken, style=dashed];
d20 -> d50  [color=green, key=1, label="lambda expression", style=dashed];
d20 -> d25  [color=green, key=1, label=taken, style=dashed];
d20 -> d29  [color=green, key=1, label=taken, style=dashed];
d24 -> d53  [color=green, key=1, label="lambda expression", style=dashed];
d75 -> d58  [color=green, key=1, label=pt, style=dashed];
d62 -> d68  [color=green, key=1, label="CommandLine.Core.Specification", style=dashed];
d62 -> d67  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
d2 -> d8  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d2 -> d11  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d2 -> d14  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_3 -> m0_28  [color=green, key=1, label=scalars, style=dashed];
m0_3 -> m0_8  [color=green, key=1, label=scalars, style=dashed];
m0_2 -> m0_24  [color=green, key=1, label=switches, style=dashed];
m0_2 -> m0_8  [color=darkseagreen4, key=1, label=switches, style=dashed];
m0_4 -> m0_32  [color=green, key=1, label=sequences, style=dashed];
m0_4 -> m0_8  [color=green, key=1, label=sequences, style=dashed];
m0_5 -> m0_23  [color=green, key=1, label="lambda expression", style=dashed];
m0_5 -> m0_27  [color=green, key=1, label="lambda expression", style=dashed];
m0_5 -> m0_31  [color=green, key=1, label="lambda expression", style=dashed];
m0_8 -> m0_38  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_6 -> m0_8  [color=darkseagreen4, key=1, label=values, style=dashed];
m0_6 -> m0_34  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_41 -> m0_24  [color=green, key=1, label=switches, style=dashed];
m0_42 -> m0_28  [color=green, key=1, label=scalars, style=dashed];
m0_43 -> m0_32  [color=darkseagreen4, key=1, label=sequences, style=dashed];
}
