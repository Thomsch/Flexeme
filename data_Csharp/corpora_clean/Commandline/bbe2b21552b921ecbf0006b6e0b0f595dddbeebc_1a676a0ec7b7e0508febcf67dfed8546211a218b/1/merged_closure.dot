digraph  {
n75 [label=pt, span=""];
n0 [cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="Entry CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="15-15"];
n1 [cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="var propAndErrors = MapValuesImpl(specProps, values, converter)", span="20-20"];
n2 [cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="return Result.Succeed(\r\n                propAndErrors.Select(pe => pe.Item1),\r\n                propAndErrors.Select(pe => pe.Item2)\r\n                    .OfType<Just<Error>>().Select(e => e.Value)\r\n                );", span="22-26"];
n4 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="Entry CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="29-29"];
n3 [cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="Exit CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="15-15"];
n5 [cluster="Unk.Select", label="Entry Unk.Select", span=""];
n6 [cluster="Unk.>", label="Entry Unk.>", span=""];
n7 [cluster="Unk.Succeed", label="Entry Unk.Succeed", span=""];
n8 [cluster="lambda expression", label="Entry lambda expression", span="23-23"];
n11 [cluster="lambda expression", label="Entry lambda expression", span="24-24"];
n14 [cluster="lambda expression", label="Entry lambda expression", span="25-25"];
n9 [cluster="lambda expression", label="pe.Item1", span="23-23"];
n10 [cluster="lambda expression", label="Exit lambda expression", span="23-23"];
n12 [cluster="lambda expression", label="pe.Item2", span="24-24"];
n13 [cluster="lambda expression", label="Exit lambda expression", span="24-24"];
n15 [cluster="lambda expression", label="e.Value", span="25-25"];
n16 [cluster="lambda expression", label="Exit lambda expression", span="25-25"];
n17 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="specProps.Empty()", span="34-34"];
n18 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="yield break;", span="36-36"];
n22 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="yield return\r\n                    Tuple.Create(pt, pt.Specification.MakeErrorInCaseOfMinConstraint());", span="42-43"];
n23 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="yield break;", span="44-44"];
n26 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="yield return\r\n                    Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                        pt, Maybe.Just<Error>(new SequenceOutOfRangeError(NameInfo.EmptyName)));", span="52-54"];
n27 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="yield break;", span="55-55"];
n30 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="yield return value;", span="67-67"];
n19 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="var pt = specProps.First()", span="38-38"];
n20 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="var taken = values.Take(pt.Specification.CountOfMaxNumberOfValues().MapValueOrDefault(n => n, values.Count()))", span="39-39"];
n24 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="var next = specProps.Skip(1).FirstOrDefault(s => s.Specification.IsValue()).ToMaybe()", span="47-47"];
n25 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="pt.Specification.Max.IsJust()\r\n                && next.IsNothing()\r\n                && values.Skip(taken.Count()).Any()", span="48-50"];
n29 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="MapValuesImpl(specProps.Skip(1), values.Skip(taken.Count()), converter)", span="65-65"];
n32 [cluster="System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", span="31-31"];
n33 [cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0"];
n58 [cluster="lambda expression", label="Tuple.Create(pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>())", span="61-61"];
n21 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="taken.Empty()", span="40-40"];
n34 [cluster="CommandLine.Core.Specification.CountOfMaxNumberOfValues()", label="Entry CommandLine.Core.Specification.CountOfMaxNumberOfValues()", span="71-71"];
n35 [cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0"];
n36 [cluster="CSharpx.Maybe<T1>.MapValueOrDefault<T1, T2>(System.Func<T1, T2>, T2)", label="Entry CSharpx.Maybe<T1>.MapValueOrDefault<T1, T2>(System.Func<T1, T2>, T2)", span="377-377"];
n37 [cluster="System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", label="Entry System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", span="0-0"];
n50 [cluster="lambda expression", label="Entry lambda expression", span="39-39"];
n38 [cluster="CommandLine.Core.Specification.MakeErrorInCaseOfMinConstraint()", label="Entry CommandLine.Core.Specification.MakeErrorInCaseOfMinConstraint()", span="87-87"];
n39 [cluster="System.Tuple.Create<T1, T2>(T1, T2)", label="Entry System.Tuple.Create<T1, T2>(T1, T2)", span="0-0"];
n40 [cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0"];
n41 [cluster="Unk.FirstOrDefault", label="Entry Unk.FirstOrDefault", span=""];
n42 [cluster="Unk.ToMaybe", label="Entry Unk.ToMaybe", span=""];
n53 [cluster="lambda expression", label="Entry lambda expression", span="47-47"];
n43 [cluster="CSharpx.Maybe<T>.IsJust<T>()", label="Entry CSharpx.Maybe<T>.IsJust<T>()", span="326-326"];
n44 [cluster="Unk.IsNothing", label="Entry Unk.IsNothing", span=""];
n45 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
n46 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="360-360"];
n47 [cluster="CSharpx.Maybe.Just<T>(T)", label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124"];
n48 [cluster="System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", label="Entry System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", span="0-0"];
n49 [cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="349-349"];
n57 [cluster="lambda expression", label="Entry lambda expression", span="61-61"];
n31 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="Exit CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="29-29"];
n51 [cluster="lambda expression", label=n, span="39-39"];
n52 [cluster="lambda expression", label="Exit lambda expression", span="39-39"];
n54 [cluster="lambda expression", label="s.Specification.IsValue()", span="47-47"];
n55 [cluster="lambda expression", label="Exit lambda expression", span="47-47"];
n56 [cluster="CommandLine.Core.Specification.IsValue()", label="Entry CommandLine.Core.Specification.IsValue()", span="15-15"];
n59 [cluster="lambda expression", label="Exit lambda expression", span="61-61"];
n60 [cluster="CommandLine.Core.SpecificationProperty.WithValue(CSharpx.Maybe<object>)", label="Entry CommandLine.Core.SpecificationProperty.WithValue(CSharpx.Maybe<object>)", span="18-18"];
n61 [cluster="CSharpx.Maybe.Nothing<T>()", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
n62 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", label="Entry CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", span="71-71"];
n63 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", label="specification.TargetType", span="73-73"];
n64 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", label="TargetType.Scalar", span="75-75"];
n66 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", label="TargetType.Sequence", span="77-77"];
n65 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", label="return Maybe.Just(1);", span="76-76"];
n70 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", label="Exit CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", span="71-71"];
n71 [cluster="CSharpx.Maybe<T>.FromJustOrFail<T>(System.Exception)", label="Entry CSharpx.Maybe<T>.FromJustOrFail<T>(System.Exception)", span="355-355"];
n72 [cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", label="Entry CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", span="87-87"];
n74 [cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", label="Exit CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", span="87-87"];
d33 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", color=green, community=0, label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequence(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", prediction=0, span="94-98"];
d31 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="88-88"];
d32 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", label="var expectedResult = new[] { 1, 20, 300, 4000 }", span="91-91"];
d34 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", label="Assert.True(expectedResult.SequenceEqual(result.Value.IntSequence))", span="101-101"];
d9 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12"];
d37 [cluster="lambda expression", label="Entry lambda expression", span="95-95"];
d43 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", color=green, community=0, label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-i'', ''10'', ''20'', ''30'', ''40'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", prediction=1, span="117-121"];
d42 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", label="var expectedResult = new[] { 10, 20, 30, 40 }", span="114-114"];
d44 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", label="Assert.True(expectedResult.SequenceEqual(result.Value.IntSequence))", span="124-124"];
d46 [cluster="lambda expression", label="Entry lambda expression", span="118-118"];
d35 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="88-88"];
d36 [cluster="Unk.SequenceEqual", label="Entry Unk.SequenceEqual", span=""];
d11 [cluster="Unk.True", label="Entry Unk.True", span=""];
d3 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", label="var result = InstanceBuilder.Build(\r\n                () => fakeOptions,\r\n                new[] { ''--help'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="25-29"];
d16 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="46-50"];
d24 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithDouble(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="69-73"];
d50 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="140-144"];
d58 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="162-166"];
d67 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                new[] { ''-s'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="181-185"];
d77 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="200-204"];
d87 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="220-224"];
d95 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue(),\r\n                new[] { ''one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="239-243"];
d104 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''Green'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="261-265"];
d114 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="286-290"];
d123 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceWithoutRange(),\r\n                new[] { ''1'', ''2'', ''3'', ''4'', ''5'', ''6'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="308-312"];
d132 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                new[] { ''--long-seq'', ''1;1234;59678'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="331-335"];
d141 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                new[] { ''-s'', ''eml1@xyz.com,test@unit.org,xyz@srv.it'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="354-358"];
d171 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSets(),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="409-413"];
d181 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="429-433"];
d190 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="449-453"];
d198 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="469-473"];
d207 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequired(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="487-491"];
d216 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="506-510"];
d224 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="525-529"];
d233 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="544-548"];
d241 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="563-567"];
d248 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="583-587"];
d39 [cluster="lambda expression", label="Exit lambda expression", span="95-95"];
d38 [cluster="lambda expression", label="new FakeOptionsWithSequence()", span="95-95"];
d41 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="111-111"];
d45 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="111-111"];
d48 [cluster="lambda expression", label="Exit lambda expression", span="118-118"];
d47 [cluster="lambda expression", label="new FakeOptions()", span="118-118"];
d51 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="147-147"];
d59 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="169-169"];
d68 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="188-188"];
d78 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="207-207"];
d88 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="227-227"];
d96 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="246-246"];
d172 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="416-416"];
d199 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="476-476"];
d208 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="494-494"];
d217 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="513-513"];
d225 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="532-532"];
d234 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="551-551"];
d242 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="570-570"];
d4 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", label="Assert.True(expectedResult.Equals(result))", span="32-32"];
d249 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", label="Assert.True(expected.Equals(result.Value.StringValue))", span="590-590"];
d1 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", label="var fakeOptions = new FakeOptions()", span="19-19"];
d2 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", label="var expectedResult = ParserResult.Create(\r\n                ParserResultType.Options,\r\n                fakeOptions, new Error[] { new HelpRequestedError() })", span="20-22"];
d12 [cluster="lambda expression", label="Entry lambda expression", span="26-26"];
d15 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="41-41"];
d17 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", label="Assert.Equal(expected, result.Value.LongValue)", span="53-53"];
d20 [cluster="lambda expression", label="Entry lambda expression", span="47-47"];
d23 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="64-64"];
d25 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", label="Assert.Equal(expected, result.Value.DoubleValue)", span="76-76"];
d27 [cluster="lambda expression", label="Entry lambda expression", span="70-70"];
d49 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="135-135"];
d53 [cluster="lambda expression", label="Entry lambda expression", span="141-141"];
d57 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="157-157"];
d61 [cluster="lambda expression", label="Entry lambda expression", span="163-163"];
d66 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="178-178"];
d72 [cluster="lambda expression", label="Entry lambda expression", span="182-182"];
d76 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="197-197"];
d81 [cluster="lambda expression", label="Entry lambda expression", span="201-201"];
d86 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="217-217"];
d90 [cluster="lambda expression", label="Entry lambda expression", span="221-221"];
d94 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="236-236"];
d98 [cluster="lambda expression", label="Entry lambda expression", span="240-240"];
d103 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", label="var expectedResult = new FakeOptionsWithEnum\r\n                {\r\n                    Colors = Colors.Green\r\n                }", span="255-258"];
d105 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="268-268"];
d109 [cluster="lambda expression", label="Entry lambda expression", span="262-262"];
d113 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="277-283"];
d115 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="293-293"];
d118 [cluster="lambda expression", label="Entry lambda expression", span="287-287"];
d122 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", label="var expectedResult = new FakeOptionsWithSequenceWithoutRange\r\n                {\r\n                    LongSequence = new[] { 1L, 2L, 3L, 4L, 5L, 6L }\r\n                }", span="302-305"];
d124 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="315-315"];
d127 [cluster="lambda expression", label="Entry lambda expression", span="309-309"];
d131 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator()", label="var expectedResult = new FakeOptionsWithSequenceAndSeparator\r\n                {\r\n                    LongSequence = new[] { 1L, 1234L, 59678L },\r\n                    StringSequence = new string[] { }\r\n                }", span="324-328"];
d133 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator()", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="338-338"];
d136 [cluster="lambda expression", label="Entry lambda expression", span="332-332"];
d140 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator()", label="var expectedResult = new FakeOptionsWithSequenceAndSeparator\r\n            {\r\n                LongSequence = new long[] {},\r\n                StringSequence = new[] { ''eml1@xyz.com'', ''test@unit.org'', ''xyz@srv.it'' }\r\n            }", span="347-351"];
d142 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator()", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="361-361"];
d144 [cluster="lambda expression", label="Entry lambda expression", span="355-355"];
d170 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl'')),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''))\r\n                }", span="402-406"];
d175 [cluster="lambda expression", label="Entry lambda expression", span="410-410"];
d180 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = null\r\n            }", span="424-427"];
d182 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="436-436"];
d185 [cluster="lambda expression", label="Entry lambda expression", span="430-430"];
d189 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="444-447"];
d191 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="456-456"];
d193 [cluster="lambda expression", label="Entry lambda expression", span="450-450"];
d197 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="463-467"];
d202 [cluster="lambda expression", label="Entry lambda expression", span="470-470"];
d206 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="484-484"];
d210 [cluster="lambda expression", label="Entry lambda expression", span="488-488"];
d215 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="503-503"];
d219 [cluster="lambda expression", label="Entry lambda expression", span="507-507"];
d223 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="522-522"];
d228 [cluster="lambda expression", label="Entry lambda expression", span="526-526"];
d232 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="541-541"];
d236 [cluster="lambda expression", label="Entry lambda expression", span="545-545"];
d240 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="560-560"];
d244 [cluster="lambda expression", label="Entry lambda expression", span="564-564"];
d247 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="578-578"];
d252 [cluster="lambda expression", label="Entry lambda expression", span="584-584"];
d40 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", span="9-9"];
d6 [cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6"];
d52 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="135-135"];
d60 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="157-157"];
d69 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="175-175"];
d79 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="194-194"];
d89 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="214-214"];
d97 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="233-233"];
d173 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="399-399"];
d200 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="461-461"];
d209 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="481-481"];
d218 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="500-500"];
d226 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="519-519"];
d235 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="538-538"];
d243 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="557-557"];
d5 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="16-16"];
d10 [cluster="CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", label="Entry CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", span="90-90"];
d250 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="578-578"];
d251 [cluster="string.Equals(string)", label="Entry string.Equals(string)", span="0-0"];
d0 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="16-16"];
d13 [cluster="lambda expression", label=fakeOptions, span="26-26"];
d7 [cluster="CommandLine.HelpRequestedError.HelpRequestedError()", label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="338-338"];
d8 [cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="103-103"];
d14 [cluster="lambda expression", label="Exit lambda expression", span="26-26"];
d18 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="41-41"];
d19 [cluster="Unk.Equal", label="Entry Unk.Equal", span=""];
d22 [cluster="lambda expression", label="Exit lambda expression", span="47-47"];
d21 [cluster="lambda expression", label="new FakeOptions()", span="47-47"];
d26 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="64-64"];
d29 [cluster="lambda expression", label="Exit lambda expression", span="70-70"];
d28 [cluster="lambda expression", label="new FakeOptionsWithDouble()", span="70-70"];
d55 [cluster="lambda expression", label="Exit lambda expression", span="141-141"];
d54 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="141-141"];
d63 [cluster="lambda expression", label="Exit lambda expression", span="163-163"];
d62 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="163-163"];
d65 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="175-175"];
d70 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="261-261"];
d71 [cluster="CommandLine.NameInfo.NameInfo(string, string)", label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20"];
d74 [cluster="lambda expression", label="Exit lambda expression", span="182-182"];
d73 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="182-182"];
d75 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="194-194"];
d80 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316"];
d83 [cluster="lambda expression", label="Exit lambda expression", span="201-201"];
d82 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="201-201"];
d85 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="214-214"];
d92 [cluster="lambda expression", label="Exit lambda expression", span="221-221"];
d91 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="221-221"];
d93 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="233-233"];
d100 [cluster="lambda expression", label="Exit lambda expression", span="240-240"];
d99 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="240-240"];
d102 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", span="252-252"];
d107 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="16-16"];
d106 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", span="252-252"];
d108 [cluster="Unk.ShouldBeEquivalentTo", label="Entry Unk.ShouldBeEquivalentTo", span=""];
d111 [cluster="lambda expression", label="Exit lambda expression", span="262-262"];
d110 [cluster="lambda expression", label="new FakeOptionsWithEnum()", span="262-262"];
d112 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="274-274"];
d117 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6"];
d116 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="274-274"];
d120 [cluster="lambda expression", label="Exit lambda expression", span="287-287"];
d119 [cluster="lambda expression", label="new FakeOptionsWithValues()", span="287-287"];
d121 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", span="299-299"];
d126 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="9-9"];
d125 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", span="299-299"];
d129 [cluster="lambda expression", label="Exit lambda expression", span="309-309"];
d128 [cluster="lambda expression", label="new FakeOptionsWithSequenceWithoutRange()", span="309-309"];
d130 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator()", span="321-321"];
d135 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="9-9"];
d134 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator()", span="321-321"];
d138 [cluster="lambda expression", label="Exit lambda expression", span="332-332"];
d137 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndSeparator()", span="332-332"];
d139 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator()", span="344-344"];
d143 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator()", span="344-344"];
d146 [cluster="lambda expression", label="Exit lambda expression", span="355-355"];
d145 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndSeparator()", span="355-355"];
d169 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="399-399"];
d174 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294"];
d177 [cluster="lambda expression", label="Exit lambda expression", span="410-410"];
d176 [cluster="lambda expression", label="new FakeOptionsWithSets()", span="410-410"];
d179 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="422-422"];
d184 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", span="4-4"];
d183 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="422-422"];
d187 [cluster="lambda expression", label="Exit lambda expression", span="430-430"];
d186 [cluster="lambda expression", label="new FakeOptionWithRequiredAndSet()", span="430-430"];
d188 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="442-442"];
d192 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="442-442"];
d195 [cluster="lambda expression", label="Exit lambda expression", span="450-450"];
d194 [cluster="lambda expression", label="new FakeOptionWithRequiredAndSet()", span="450-450"];
d196 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="461-461"];
d201 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283"];
d204 [cluster="lambda expression", label="Exit lambda expression", span="470-470"];
d203 [cluster="lambda expression", label="new FakeOptionWithRequiredAndSet()", span="470-470"];
d205 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="481-481"];
d212 [cluster="lambda expression", label="Exit lambda expression", span="488-488"];
d211 [cluster="lambda expression", label="new FakeOptionWithRequired()", span="488-488"];
d214 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="500-500"];
d221 [cluster="lambda expression", label="Exit lambda expression", span="507-507"];
d220 [cluster="lambda expression", label="new FakeOptions()", span="507-507"];
d222 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="519-519"];
d227 [cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="272-272"];
d230 [cluster="lambda expression", label="Exit lambda expression", span="526-526"];
d229 [cluster="lambda expression", label="new FakeOptions()", span="526-526"];
d231 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="538-538"];
d238 [cluster="lambda expression", label="Exit lambda expression", span="545-545"];
d237 [cluster="lambda expression", label="new FakeOptions()", span="545-545"];
d239 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="557-557"];
d246 [cluster="lambda expression", label="Exit lambda expression", span="564-564"];
d245 [cluster="lambda expression", label="new FakeOptions()", span="564-564"];
d254 [cluster="lambda expression", label="Exit lambda expression", span="584-584"];
d253 [cluster="lambda expression", label="new FakeOptions()", span="584-584"];
d255 [label=fakeOptions, span=""];
d30 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", span="9-9"];
d56 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", span="9-9"];
d64 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="9-9"];
d84 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="9-9"];
d101 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="9-9"];
d151 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="393-393"];
d148 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="373-379"];
d155 [cluster="lambda expression", label="new FakeOptionsWithValues()", span="384-384"];
d178 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4"];
d213 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4"];
d150 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="383-390"];
d152 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="370-370"];
d147 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="370-370"];
d149 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="380-380"];
d154 [cluster="lambda expression", label="Entry lambda expression", span="384-384"];
d156 [cluster="lambda expression", label="Exit lambda expression", span="384-384"];
d153 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33"];
d157 [cluster="lambda expression", label="Entry lambda expression", span="385-387"];
d159 [cluster="lambda expression", label="Exit lambda expression", span="385-387"];
d158 [cluster="lambda expression", label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="386-387"];
d162 [cluster="lambda expression", label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="387-387"];
d166 [cluster="lambda expression", label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="387-387"];
d160 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="37-37"];
d161 [cluster="lambda expression", label="Entry lambda expression", span="387-387"];
d256 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
d163 [cluster="lambda expression", label="Exit lambda expression", span="387-387"];
d164 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11"];
d165 [cluster="lambda expression", label="Entry lambda expression", span="387-387"];
d167 [cluster="lambda expression", label="Exit lambda expression", span="387-387"];
d168 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="12-12"];
n75 -> n58  [color=darkseagreen4, key=1, label=pt, style=dashed];
n2 -> n8  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n2 -> n11  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n2 -> n14  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n4 -> n25  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
n4 -> n29  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
n19 -> n22  [color=darkseagreen4, key=1, label=pt, style=dashed];
n19 -> n25  [color=darkseagreen4, key=1, label=pt, style=dashed];
n19 -> n26  [color=darkseagreen4, key=1, label=pt, style=dashed];
n19 -> n58  [color=darkseagreen4, key=1, label=pt, style=dashed];
n20 -> n50  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n20 -> n25  [color=darkseagreen4, key=1, label=taken, style=dashed];
n20 -> n29  [color=darkseagreen4, key=1, label=taken, style=dashed];
n24 -> n53  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d33 -> d37  [color=green, key=1, label="lambda expression", style=dashed];
d32 -> d34  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d43 -> d46  [color=green, key=1, label="lambda expression", style=dashed];
d42 -> d44  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d3 -> d12  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d16 -> d20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d24 -> d27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d50 -> d53  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d58 -> d61  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d67 -> d72  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d77 -> d81  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d87 -> d90  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d95 -> d98  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d104 -> d109  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d114 -> d118  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d123 -> d127  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d132 -> d136  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d141 -> d144  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d171 -> d175  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d181 -> d185  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d190 -> d193  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d198 -> d202  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d207 -> d210  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d216 -> d219  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d224 -> d228  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d233 -> d236  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d241 -> d244  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d248 -> d252  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d1 -> d13  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
d2 -> d4  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d15 -> d17  [color=darkseagreen4, key=1, label=long, style=dashed];
d23 -> d25  [color=darkseagreen4, key=1, label=double, style=dashed];
d49 -> d51  [color=darkseagreen4, key=1, label="string[]", style=dashed];
d57 -> d59  [color=darkseagreen4, key=1, label="string[]", style=dashed];
d66 -> d68  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d76 -> d78  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d86 -> d88  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d94 -> d96  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d103 -> d105  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d113 -> d115  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d122 -> d124  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d131 -> d133  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d140 -> d142  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d170 -> d172  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d180 -> d182  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d189 -> d191  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d197 -> d199  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d206 -> d208  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d215 -> d217  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d223 -> d225  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d232 -> d234  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d240 -> d242  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d247 -> d249  [color=darkseagreen4, key=1, label=string, style=dashed];
d255 -> d13  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
d148 -> d151  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d150 -> d154  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d150 -> d157  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d157 -> d162  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
d157 -> d166  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
d158 -> d161  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d162 -> d165  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d256 -> d162  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
d256 -> d166  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
}
