digraph  {
n75 [label=pt, span=""];
n0 [label="Entry CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="15-15", cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)"];
n1 [label="var propAndErrors = MapValuesImpl(specProps, values, converter)", span="20-20", cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)"];
n2 [label="return Result.Succeed(\r\n                propAndErrors.Select(pe => pe.Item1),\r\n                propAndErrors.Select(pe => pe.Item2)\r\n                    .OfType<Just<Error>>().Select(e => e.Value)\r\n                );", span="22-26", cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)"];
n4 [label="Entry CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="29-29", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)"];
n3 [label="Exit CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="15-15", cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)"];
n5 [label="Entry Unk.Select", span="", cluster="Unk.Select"];
n6 [label="Entry Unk.>", span="", cluster="Unk.>"];
n7 [label="Entry Unk.Succeed", span="", cluster="Unk.Succeed"];
n8 [label="Entry lambda expression", span="23-23", cluster="lambda expression"];
n11 [label="Entry lambda expression", span="24-24", cluster="lambda expression"];
n14 [label="Entry lambda expression", span="25-25", cluster="lambda expression"];
n9 [label="pe.Item1", span="23-23", cluster="lambda expression"];
n10 [label="Exit lambda expression", span="23-23", cluster="lambda expression"];
n12 [label="pe.Item2", span="24-24", cluster="lambda expression"];
n13 [label="Exit lambda expression", span="24-24", cluster="lambda expression"];
n15 [label="e.Value", span="25-25", cluster="lambda expression"];
n16 [label="Exit lambda expression", span="25-25", cluster="lambda expression"];
n17 [label="specProps.Empty()", span="34-34", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)"];
n18 [label="yield break;", span="36-36", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)"];
n22 [label="yield return\r\n                    Tuple.Create(pt, pt.Specification.MakeErrorInCaseOfMinConstraint());", span="42-43", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)"];
n23 [label="yield break;", span="44-44", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)"];
n26 [label="yield return\r\n                    Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                        pt, Maybe.Just<Error>(new SequenceOutOfRangeError(NameInfo.EmptyName)));", span="52-54", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)"];
n27 [label="yield break;", span="55-55", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)"];
n28 [label="yield return\r\n                converter(taken, pt.Property.PropertyType, pt.Specification.TargetType != TargetType.Sequence)\r\n                    .MapValueOrDefault(\r\n                        converted => Tuple.Create(pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>()),\r\n                        Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                            pt, Maybe.Just<Error>(new BadFormatConversionError(NameInfo.EmptyName))));", span="58-63", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", color=red, community=0];
n30 [label="yield return value;", span="67-67", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)"];
n19 [label="var pt = specProps.First()", span="38-38", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)"];
n20 [label="var taken = values.Take(pt.Specification.CountOfMaxNumberOfValues().MapValueOrDefault(n => n, values.Count()))", span="39-39", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)"];
n24 [label="var next = specProps.Skip(1).FirstOrDefault(s => s.Specification.IsValue()).ToMaybe()", span="47-47", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)"];
n25 [label="pt.Specification.Max.IsJust()\r\n                && next.IsNothing()\r\n                && values.Skip(taken.Count()).Any()", span="48-50", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)"];
n29 [label="MapValuesImpl(specProps.Skip(1), values.Skip(taken.Count()), converter)", span="65-65", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)"];
n32 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", span="31-31", cluster="System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()"];
n33 [label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()"];
n58 [label="Tuple.Create(pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>())", span="61-61", cluster="lambda expression"];
n21 [label="taken.Empty()", span="40-40", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)"];
n34 [label="Entry CommandLine.Core.Specification.CountOfMaxNumberOfValues()", span="71-71", cluster="CommandLine.Core.Specification.CountOfMaxNumberOfValues()"];
n35 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()"];
n36 [label="Entry CSharpx.Maybe<T1>.MapValueOrDefault<T1, T2>(System.Func<T1, T2>, T2)", span="377-377", cluster="CSharpx.Maybe<T1>.MapValueOrDefault<T1, T2>(System.Func<T1, T2>, T2)"];
n37 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)"];
n50 [label="Entry lambda expression", span="39-39", cluster="lambda expression"];
n38 [label="Entry CommandLine.Core.Specification.MakeErrorInCaseOfMinConstraint()", span="87-87", cluster="CommandLine.Core.Specification.MakeErrorInCaseOfMinConstraint()"];
n39 [label="Entry System.Tuple.Create<T1, T2>(T1, T2)", span="0-0", cluster="System.Tuple.Create<T1, T2>(T1, T2)"];
n40 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)"];
n41 [label="Entry Unk.FirstOrDefault", span="", cluster="Unk.FirstOrDefault"];
n42 [label="Entry Unk.ToMaybe", span="", cluster="Unk.ToMaybe"];
n53 [label="Entry lambda expression", span="47-47", cluster="lambda expression"];
n43 [label="Entry CSharpx.Maybe<T>.IsJust<T>()", span="326-326", cluster="CSharpx.Maybe<T>.IsJust<T>()"];
n44 [label="Entry Unk.IsNothing", span="", cluster="Unk.IsNothing"];
n45 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()"];
n46 [label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="360-360", cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)"];
n47 [label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124", cluster="CSharpx.Maybe.Just<T>(T)"];
n48 [label="Entry System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", span="0-0", cluster="System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)"];
n49 [label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="349-349", cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)"];
n57 [label="Entry lambda expression", span="61-61", cluster="lambda expression"];
n31 [label="Exit CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="29-29", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)"];
n51 [label=n, span="39-39", cluster="lambda expression"];
n52 [label="Exit lambda expression", span="39-39", cluster="lambda expression"];
n54 [label="s.Specification.IsValue()", span="47-47", cluster="lambda expression"];
n55 [label="Exit lambda expression", span="47-47", cluster="lambda expression"];
n56 [label="Entry CommandLine.Core.Specification.IsValue()", span="15-15", cluster="CommandLine.Core.Specification.IsValue()"];
n59 [label="Exit lambda expression", span="61-61", cluster="lambda expression"];
n60 [label="Entry CommandLine.Core.SpecificationProperty.WithValue(CSharpx.Maybe<object>)", span="18-18", cluster="CommandLine.Core.SpecificationProperty.WithValue(CSharpx.Maybe<object>)"];
n61 [label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116", cluster="CSharpx.Maybe.Nothing<T>()"];
n62 [label="Entry CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", span="71-71", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)"];
n63 [label="specification.TargetType", span="73-73", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)"];
n67 [label="specification.Max.IsJust()", span="78-78", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", color=red, community=0];
n68 [label="return Maybe.Just(specification.Max.FromJustOrFail());", span="80-80", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", color=red, community=0];
n64 [label="TargetType.Scalar", span="75-75", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)"];
n66 [label="TargetType.Sequence", span="77-77", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)"];
n65 [label="return Maybe.Just(1);", span="76-76", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)"];
n69 [label="return Maybe.Nothing<int>();", span="84-84", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", color=red, community=0];
n70 [label="Exit CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", span="71-71", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)"];
n71 [label="Entry CSharpx.Maybe<T>.FromJustOrFail<T>(System.Exception)", span="355-355", cluster="CSharpx.Maybe<T>.FromJustOrFail<T>(System.Exception)"];
n72 [label="Entry CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", span="87-87", cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)"];
n73 [label="return specification.Min.IsJust()\r\n                ? Maybe.Just<Error>(new SequenceOutOfRangeError(NameInfo.EmptyName))\r\n                : Maybe.Nothing<Error>();", span="89-91", cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", color=red, community=0];
n74 [label="Exit CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", span="87-87", cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)"];
d33 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequence(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="94-98", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", color=green, community=0];
d31 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="88-88", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])"];
d32 [label="var expectedResult = new[] { 1, 20, 300, 4000 }", span="91-91", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])"];
d34 [label="Assert.True(expectedResult.SequenceEqual(result.Value.IntSequence))", span="101-101", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])"];
d9 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)"];
d37 [label="Entry lambda expression", span="95-95", cluster="lambda expression"];
d43 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-i'', ''10'', ''20'', ''30'', ''40'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="117-121", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", color=green, community=0];
d42 [label="var expectedResult = new[] { 10, 20, 30, 40 }", span="114-114", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])"];
d44 [label="Assert.True(expectedResult.SequenceEqual(result.Value.IntSequence))", span="124-124", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])"];
d46 [label="Entry lambda expression", span="118-118", cluster="lambda expression"];
d35 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="88-88", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])"];
d36 [label="Entry Unk.SequenceEqual", span="", cluster="Unk.SequenceEqual"];
d11 [label="Entry Unk.True", span="", cluster="Unk.True"];
d3 [label="var result = InstanceBuilder.Build(\r\n                () => fakeOptions,\r\n                new[] { ''--help'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="25-29", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()"];
d16 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="46-50", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)"];
d24 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithDouble(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="69-73", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)"];
d50 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="140-144", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])"];
d58 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="162-166", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])"];
d67 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                new[] { ''-s'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="181-185", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()"];
d77 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="200-204", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
d87 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="220-224", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()"];
d95 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue(),\r\n                new[] { ''one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="239-243", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
d104 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''Green'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="261-265", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()"];
d114 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="286-290", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()"];
d123 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceWithoutRange(),\r\n                new[] { ''1'', ''2'', ''3'', ''4'', ''5'', ''6'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="308-312", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()"];
d132 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                new[] { ''--long-seq'', ''1;1234;59678'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="331-335", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator()"];
d141 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                new[] { ''-s'', ''eml1@xyz.com,test@unit.org,xyz@srv.it'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="354-358", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator()"];
d171 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSets(),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="409-413", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()"];
d181 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="429-433", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()"];
d190 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="449-453", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()"];
d198 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="469-473", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()"];
d207 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequired(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="487-491", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()"];
d216 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="506-510", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()"];
d224 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="525-529", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()"];
d233 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="544-548", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()"];
d241 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="563-567", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()"];
d248 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="583-587", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)"];
d39 [label="Exit lambda expression", span="95-95", cluster="lambda expression"];
d38 [label="new FakeOptionsWithSequence()", span="95-95", cluster="lambda expression"];
d41 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="111-111", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])"];
d45 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="111-111", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])"];
d48 [label="Exit lambda expression", span="118-118", cluster="lambda expression"];
d47 [label="new FakeOptions()", span="118-118", cluster="lambda expression"];
d51 [label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="147-147", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])"];
d59 [label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="169-169", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])"];
d68 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="188-188", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()"];
d78 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="207-207", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
d88 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="227-227", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()"];
d96 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="246-246", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
d172 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="416-416", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()"];
d199 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="476-476", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()"];
d208 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="494-494", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()"];
d217 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="513-513", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()"];
d225 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="532-532", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()"];
d234 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="551-551", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()"];
d242 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="570-570", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()"];
d4 [label="Assert.True(expectedResult.Equals(result))", span="32-32", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()"];
d249 [label="Assert.True(expected.Equals(result.Value.StringValue))", span="590-590", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)"];
d1 [label="var fakeOptions = new FakeOptions()", span="19-19", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()"];
d2 [label="var expectedResult = ParserResult.Create(\r\n                ParserResultType.Options,\r\n                fakeOptions, new Error[] { new HelpRequestedError() })", span="20-22", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()"];
d12 [label="Entry lambda expression", span="26-26", cluster="lambda expression"];
d15 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="41-41", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)"];
d17 [label="Assert.Equal(expected, result.Value.LongValue)", span="53-53", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)"];
d20 [label="Entry lambda expression", span="47-47", cluster="lambda expression"];
d23 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="64-64", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)"];
d25 [label="Assert.Equal(expected, result.Value.DoubleValue)", span="76-76", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)"];
d27 [label="Entry lambda expression", span="70-70", cluster="lambda expression"];
d49 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="135-135", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])"];
d53 [label="Entry lambda expression", span="141-141", cluster="lambda expression"];
d57 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="157-157", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])"];
d61 [label="Entry lambda expression", span="163-163", cluster="lambda expression"];
d66 [label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="178-178", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()"];
d72 [label="Entry lambda expression", span="182-182", cluster="lambda expression"];
d76 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="197-197", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
d81 [label="Entry lambda expression", span="201-201", cluster="lambda expression"];
d86 [label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="217-217", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()"];
d90 [label="Entry lambda expression", span="221-221", cluster="lambda expression"];
d94 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="236-236", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
d98 [label="Entry lambda expression", span="240-240", cluster="lambda expression"];
d103 [label="var expectedResult = new FakeOptionsWithEnum\r\n                {\r\n                    Colors = Colors.Green\r\n                }", span="255-258", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()"];
d105 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="268-268", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()"];
d109 [label="Entry lambda expression", span="262-262", cluster="lambda expression"];
d113 [label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="277-283", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()"];
d115 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="293-293", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()"];
d118 [label="Entry lambda expression", span="287-287", cluster="lambda expression"];
d122 [label="var expectedResult = new FakeOptionsWithSequenceWithoutRange\r\n                {\r\n                    LongSequence = new[] { 1L, 2L, 3L, 4L, 5L, 6L }\r\n                }", span="302-305", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()"];
d124 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="315-315", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()"];
d127 [label="Entry lambda expression", span="309-309", cluster="lambda expression"];
d131 [label="var expectedResult = new FakeOptionsWithSequenceAndSeparator\r\n                {\r\n                    LongSequence = new[] { 1L, 1234L, 59678L },\r\n                    StringSequence = new string[] { }\r\n                }", span="324-328", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator()"];
d133 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="338-338", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator()"];
d136 [label="Entry lambda expression", span="332-332", cluster="lambda expression"];
d140 [label="var expectedResult = new FakeOptionsWithSequenceAndSeparator\r\n            {\r\n                LongSequence = new long[] {},\r\n                StringSequence = new[] { ''eml1@xyz.com'', ''test@unit.org'', ''xyz@srv.it'' }\r\n            }", span="347-351", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator()"];
d142 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="361-361", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator()"];
d144 [label="Entry lambda expression", span="355-355", cluster="lambda expression"];
d170 [label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl'')),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''))\r\n                }", span="402-406", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()"];
d175 [label="Entry lambda expression", span="410-410", cluster="lambda expression"];
d180 [label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = null\r\n            }", span="424-427", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()"];
d182 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="436-436", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()"];
d185 [label="Entry lambda expression", span="430-430", cluster="lambda expression"];
d189 [label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="444-447", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()"];
d191 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="456-456", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()"];
d193 [label="Entry lambda expression", span="450-450", cluster="lambda expression"];
d197 [label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="463-467", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()"];
d202 [label="Entry lambda expression", span="470-470", cluster="lambda expression"];
d206 [label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="484-484", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()"];
d210 [label="Entry lambda expression", span="488-488", cluster="lambda expression"];
d215 [label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="503-503", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()"];
d219 [label="Entry lambda expression", span="507-507", cluster="lambda expression"];
d223 [label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="522-522", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()"];
d228 [label="Entry lambda expression", span="526-526", cluster="lambda expression"];
d232 [label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="541-541", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()"];
d236 [label="Entry lambda expression", span="545-545", cluster="lambda expression"];
d240 [label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="560-560", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()"];
d244 [label="Entry lambda expression", span="564-564", cluster="lambda expression"];
d247 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="578-578", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)"];
d252 [label="Entry lambda expression", span="584-584", cluster="lambda expression"];
d40 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()"];
d6 [label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()"];
d52 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="135-135", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])"];
d60 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="157-157", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])"];
d69 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="175-175", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()"];
d79 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="194-194", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
d89 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="214-214", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()"];
d97 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="233-233", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
d173 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="399-399", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()"];
d200 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="461-461", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()"];
d209 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="481-481", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()"];
d218 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="500-500", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()"];
d226 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="519-519", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()"];
d235 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="538-538", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()"];
d243 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="557-557", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()"];
d5 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="16-16", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()"];
d10 [label="Entry CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", span="90-90", cluster="CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)"];
d250 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="578-578", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)"];
d251 [label="Entry string.Equals(string)", span="0-0", cluster="string.Equals(string)"];
d0 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="16-16", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()"];
d13 [label=fakeOptions, span="26-26", cluster="lambda expression"];
d7 [label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="338-338", cluster="CommandLine.HelpRequestedError.HelpRequestedError()"];
d8 [label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="103-103", cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)"];
d14 [label="Exit lambda expression", span="26-26", cluster="lambda expression"];
d18 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="41-41", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)"];
d19 [label="Entry Unk.Equal", span="", cluster="Unk.Equal"];
d22 [label="Exit lambda expression", span="47-47", cluster="lambda expression"];
d21 [label="new FakeOptions()", span="47-47", cluster="lambda expression"];
d26 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="64-64", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)"];
d29 [label="Exit lambda expression", span="70-70", cluster="lambda expression"];
d28 [label="new FakeOptionsWithDouble()", span="70-70", cluster="lambda expression"];
d55 [label="Exit lambda expression", span="141-141", cluster="lambda expression"];
d54 [label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="141-141", cluster="lambda expression"];
d63 [label="Exit lambda expression", span="163-163", cluster="lambda expression"];
d62 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="163-163", cluster="lambda expression"];
d65 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="175-175", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()"];
d70 [label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="261-261", cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)"];
d71 [label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20", cluster="CommandLine.NameInfo.NameInfo(string, string)"];
d74 [label="Exit lambda expression", span="182-182", cluster="lambda expression"];
d73 [label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="182-182", cluster="lambda expression"];
d75 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="194-194", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
d80 [label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316", cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)"];
d83 [label="Exit lambda expression", span="201-201", cluster="lambda expression"];
d82 [label="new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="201-201", cluster="lambda expression"];
d85 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="214-214", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()"];
d92 [label="Exit lambda expression", span="221-221", cluster="lambda expression"];
d91 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="221-221", cluster="lambda expression"];
d93 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="233-233", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
d100 [label="Exit lambda expression", span="240-240", cluster="lambda expression"];
d99 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="240-240", cluster="lambda expression"];
d102 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", span="252-252", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()"];
d107 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="16-16", cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()"];
d106 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", span="252-252", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()"];
d108 [label="Entry Unk.ShouldBeEquivalentTo", span="", cluster="Unk.ShouldBeEquivalentTo"];
d111 [label="Exit lambda expression", span="262-262", cluster="lambda expression"];
d110 [label="new FakeOptionsWithEnum()", span="262-262", cluster="lambda expression"];
d112 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="274-274", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()"];
d117 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()"];
d116 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="274-274", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()"];
d120 [label="Exit lambda expression", span="287-287", cluster="lambda expression"];
d119 [label="new FakeOptionsWithValues()", span="287-287", cluster="lambda expression"];
d121 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", span="299-299", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()"];
d126 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()"];
d125 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", span="299-299", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()"];
d129 [label="Exit lambda expression", span="309-309", cluster="lambda expression"];
d128 [label="new FakeOptionsWithSequenceWithoutRange()", span="309-309", cluster="lambda expression"];
d130 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator()", span="321-321", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator()"];
d135 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()"];
d134 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator()", span="321-321", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator()"];
d138 [label="Exit lambda expression", span="332-332", cluster="lambda expression"];
d137 [label="new FakeOptionsWithSequenceAndSeparator()", span="332-332", cluster="lambda expression"];
d139 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator()", span="344-344", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator()"];
d143 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator()", span="344-344", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator()"];
d146 [label="Exit lambda expression", span="355-355", cluster="lambda expression"];
d145 [label="new FakeOptionsWithSequenceAndSeparator()", span="355-355", cluster="lambda expression"];
d169 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="399-399", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()"];
d174 [label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294", cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)"];
d177 [label="Exit lambda expression", span="410-410", cluster="lambda expression"];
d176 [label="new FakeOptionsWithSets()", span="410-410", cluster="lambda expression"];
d179 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="422-422", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()"];
d184 [label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()"];
d183 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="422-422", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()"];
d187 [label="Exit lambda expression", span="430-430", cluster="lambda expression"];
d186 [label="new FakeOptionWithRequiredAndSet()", span="430-430", cluster="lambda expression"];
d188 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="442-442", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()"];
d192 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="442-442", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()"];
d195 [label="Exit lambda expression", span="450-450", cluster="lambda expression"];
d194 [label="new FakeOptionWithRequiredAndSet()", span="450-450", cluster="lambda expression"];
d196 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="461-461", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()"];
d201 [label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283", cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)"];
d204 [label="Exit lambda expression", span="470-470", cluster="lambda expression"];
d203 [label="new FakeOptionWithRequiredAndSet()", span="470-470", cluster="lambda expression"];
d205 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="481-481", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()"];
d212 [label="Exit lambda expression", span="488-488", cluster="lambda expression"];
d211 [label="new FakeOptionWithRequired()", span="488-488", cluster="lambda expression"];
d214 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="500-500", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()"];
d221 [label="Exit lambda expression", span="507-507", cluster="lambda expression"];
d220 [label="new FakeOptions()", span="507-507", cluster="lambda expression"];
d222 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="519-519", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()"];
d227 [label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="272-272", cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)"];
d230 [label="Exit lambda expression", span="526-526", cluster="lambda expression"];
d229 [label="new FakeOptions()", span="526-526", cluster="lambda expression"];
d231 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="538-538", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()"];
d238 [label="Exit lambda expression", span="545-545", cluster="lambda expression"];
d237 [label="new FakeOptions()", span="545-545", cluster="lambda expression"];
d239 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="557-557", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()"];
d246 [label="Exit lambda expression", span="564-564", cluster="lambda expression"];
d245 [label="new FakeOptions()", span="564-564", cluster="lambda expression"];
d254 [label="Exit lambda expression", span="584-584", cluster="lambda expression"];
d253 [label="new FakeOptions()", span="584-584", cluster="lambda expression"];
d255 [label=fakeOptions, span=""];
d30 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()"];
d56 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()"];
d64 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()"];
d84 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()"];
d101 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()"];
d151 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="393-393", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()"];
d148 [label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="373-379", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()"];
d155 [label="new FakeOptionsWithValues()", span="384-384", cluster="lambda expression"];
d178 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()"];
d213 [label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()"];
d150 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="383-390", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()"];
d152 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="370-370", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()"];
d147 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="370-370", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()"];
d149 [label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="380-380", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()"];
d154 [label="Entry lambda expression", span="384-384", cluster="lambda expression"];
d156 [label="Exit lambda expression", span="384-384", cluster="lambda expression"];
d153 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)"];
d157 [label="Entry lambda expression", span="385-387", cluster="lambda expression"];
d159 [label="Exit lambda expression", span="385-387", cluster="lambda expression"];
d158 [label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="386-387", cluster="lambda expression"];
d162 [label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="387-387", cluster="lambda expression"];
d166 [label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="387-387", cluster="lambda expression"];
d160 [label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="37-37", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)"];
d161 [label="Entry lambda expression", span="387-387", cluster="lambda expression"];
d256 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
d163 [label="Exit lambda expression", span="387-387", cluster="lambda expression"];
d164 [label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)"];
d165 [label="Entry lambda expression", span="387-387", cluster="lambda expression"];
d167 [label="Exit lambda expression", span="387-387", cluster="lambda expression"];
d168 [label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="12-12", cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)"];
n75 -> n58  [key=1, style=dashed, color=darkseagreen4, label=pt];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n4  [key=2, style=dotted];
n2 -> n3  [key=0, style=solid];
n2 -> n5  [key=2, style=dotted];
n2 -> n6  [key=2, style=dotted];
n2 -> n7  [key=2, style=dotted];
n2 -> n8  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n2 -> n11  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n2 -> n14  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n4 -> n17  [key=0, style=solid];
n4 -> n18  [key=0, style=bold, color=crimson];
n4 -> n22  [key=0, style=bold, color=crimson];
n4 -> n23  [key=0, style=bold, color=crimson];
n4 -> n26  [key=0, style=bold, color=crimson];
n4 -> n27  [key=0, style=bold, color=crimson];
n4 -> n28  [key=0, style=bold, color=red];
n4 -> n30  [key=0, style=bold, color=crimson];
n4 -> n19  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
n4 -> n20  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
n4 -> n24  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
n4 -> n25  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
n4 -> n29  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
n3 -> n0  [key=0, style=bold, color=blue];
n8 -> n9  [key=0, style=solid];
n11 -> n12  [key=0, style=solid];
n14 -> n15  [key=0, style=solid];
n9 -> n10  [key=0, style=solid];
n10 -> n8  [key=0, style=bold, color=blue];
n12 -> n13  [key=0, style=solid];
n13 -> n11  [key=0, style=bold, color=blue];
n15 -> n16  [key=0, style=solid];
n16 -> n14  [key=0, style=bold, color=blue];
n17 -> n18  [key=0, style=solid];
n17 -> n19  [key=0, style=solid];
n17 -> n32  [key=2, style=dotted];
n18 -> n19  [key=0, style=solid];
n22 -> n23  [key=0, style=solid];
n22 -> n38  [key=2, style=dotted];
n22 -> n39  [key=2, style=dotted];
n23 -> n24  [key=0, style=solid];
n26 -> n27  [key=0, style=solid];
n26 -> n46  [key=2, style=dotted];
n26 -> n47  [key=2, style=dotted];
n26 -> n39  [key=2, style=dotted];
n27 -> n28  [key=0, style=solid, color=red];
n28 -> n29  [key=0, style=solid, color=red];
n28 -> n48  [key=2, style=dotted, color=red];
n28 -> n49  [key=2, style=dotted, color=red];
n28 -> n47  [key=2, style=dotted, color=red];
n28 -> n39  [key=2, style=dotted, color=red];
n28 -> n36  [key=2, style=dotted, color=red];
n28 -> n57  [key=1, style=dashed, color=red, label="lambda expression"];
n30 -> n29  [key=0, style=solid];
n19 -> n20  [key=0, style=solid];
n19 -> n33  [key=2, style=dotted];
n19 -> n22  [key=1, style=dashed, color=darkseagreen4, label=pt];
n19 -> n25  [key=1, style=dashed, color=darkseagreen4, label=pt];
n19 -> n26  [key=1, style=dashed, color=darkseagreen4, label=pt];
n19 -> n28  [key=1, style=dashed, color=red, label=pt];
n19 -> n58  [key=1, style=dashed, color=darkseagreen4, label=pt];
n20 -> n21  [key=0, style=solid];
n20 -> n34  [key=2, style=dotted];
n20 -> n35  [key=2, style=dotted];
n20 -> n36  [key=2, style=dotted];
n20 -> n37  [key=2, style=dotted];
n20 -> n50  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n20 -> n25  [key=1, style=dashed, color=darkseagreen4, label=taken];
n20 -> n28  [key=1, style=dashed, color=red, label=taken];
n20 -> n29  [key=1, style=dashed, color=darkseagreen4, label=taken];
n24 -> n25  [key=0, style=solid];
n24 -> n40  [key=2, style=dotted];
n24 -> n41  [key=2, style=dotted];
n24 -> n42  [key=2, style=dotted];
n24 -> n53  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n25 -> n26  [key=0, style=solid];
n25 -> n28  [key=0, style=solid, color=red];
n25 -> n43  [key=2, style=dotted];
n25 -> n44  [key=2, style=dotted];
n25 -> n35  [key=2, style=dotted];
n25 -> n40  [key=2, style=dotted];
n25 -> n45  [key=2, style=dotted];
n29 -> n30  [key=0, style=solid];
n29 -> n31  [key=0, style=solid];
n29 -> n40  [key=2, style=dotted];
n29 -> n35  [key=2, style=dotted];
n29 -> n4  [key=2, style=dotted];
n58 -> n59  [key=0, style=solid];
n58 -> n47  [key=2, style=dotted];
n58 -> n60  [key=2, style=dotted];
n58 -> n61  [key=2, style=dotted];
n58 -> n39  [key=2, style=dotted];
n21 -> n22  [key=0, style=solid];
n21 -> n24  [key=0, style=solid];
n21 -> n32  [key=2, style=dotted];
n50 -> n51  [key=0, style=solid];
n53 -> n54  [key=0, style=solid];
n57 -> n58  [key=0, style=solid];
n31 -> n4  [key=0, style=bold, color=blue];
n51 -> n52  [key=0, style=solid];
n52 -> n50  [key=0, style=bold, color=blue];
n54 -> n55  [key=0, style=solid];
n54 -> n56  [key=2, style=dotted];
n55 -> n53  [key=0, style=bold, color=blue];
n59 -> n57  [key=0, style=bold, color=blue];
n62 -> n63  [key=0, style=solid];
n62 -> n67  [key=1, style=dashed, color=red, label="CommandLine.Core.Specification"];
n62 -> n68  [key=1, style=dashed, color=red, label="CommandLine.Core.Specification"];
n63 -> n64  [key=0, style=solid];
n63 -> n66  [key=0, style=solid];
n67 -> n68  [key=0, style=solid, color=red];
n67 -> n69  [key=0, style=solid, color=red];
n67 -> n43  [key=2, style=dotted, color=red];
n68 -> n70  [key=0, style=solid, color=red];
n68 -> n71  [key=2, style=dotted, color=red];
n68 -> n47  [key=2, style=dotted, color=red];
n64 -> n65  [key=0, style=solid];
n66 -> n67  [key=0, style=solid, color=red];
n65 -> n70  [key=0, style=solid];
n65 -> n47  [key=2, style=dotted];
n69 -> n70  [key=0, style=solid, color=red];
n69 -> n61  [key=2, style=dotted, color=red];
n70 -> n62  [key=0, style=bold, color=blue];
n72 -> n73  [key=0, style=solid, color=red];
n73 -> n74  [key=0, style=solid, color=red];
n73 -> n43  [key=2, style=dotted, color=red];
n73 -> n46  [key=2, style=dotted, color=red];
n73 -> n47  [key=2, style=dotted, color=red];
n73 -> n61  [key=2, style=dotted, color=red];
n74 -> n72  [key=0, style=bold, color=blue];
d33 -> d34  [key=0, style=solid, color=green];
d33 -> d9  [key=2, style=dotted, color=green];
d33 -> d37  [key=1, style=dashed, color=green, label="lambda expression"];
d31 -> d33  [key=1, style=dashed, color=green, label="string[]"];
d31 -> d32  [key=0, style=solid];
d32 -> d33  [key=0, style=solid, color=green];
d32 -> d34  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d34 -> d35  [key=0, style=solid];
d34 -> d36  [key=2, style=dotted];
d34 -> d11  [key=2, style=dotted];
d37 -> d38  [key=0, style=solid];
d43 -> d44  [key=0, style=solid, color=green];
d43 -> d9  [key=2, style=dotted, color=green];
d43 -> d46  [key=1, style=dashed, color=green, label="lambda expression"];
d42 -> d43  [key=0, style=solid, color=green];
d42 -> d44  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d44 -> d45  [key=0, style=solid];
d44 -> d36  [key=2, style=dotted];
d44 -> d11  [key=2, style=dotted];
d46 -> d47  [key=0, style=solid];
d35 -> d31  [key=0, style=bold, color=blue];
d3 -> d9  [key=2, style=dotted];
d3 -> d4  [key=0, style=solid];
d3 -> d12  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d16 -> d9  [key=2, style=dotted];
d16 -> d17  [key=0, style=solid];
d16 -> d20  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d24 -> d9  [key=2, style=dotted];
d24 -> d25  [key=0, style=solid];
d24 -> d27  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d50 -> d9  [key=2, style=dotted];
d50 -> d51  [key=0, style=solid];
d50 -> d53  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d58 -> d9  [key=2, style=dotted];
d58 -> d59  [key=0, style=solid];
d58 -> d61  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d67 -> d9  [key=2, style=dotted];
d67 -> d68  [key=0, style=solid];
d67 -> d72  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d77 -> d9  [key=2, style=dotted];
d77 -> d78  [key=0, style=solid];
d77 -> d81  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d87 -> d9  [key=2, style=dotted];
d87 -> d88  [key=0, style=solid];
d87 -> d90  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d95 -> d9  [key=2, style=dotted];
d95 -> d96  [key=0, style=solid];
d95 -> d98  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d104 -> d9  [key=2, style=dotted];
d104 -> d105  [key=0, style=solid];
d104 -> d109  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d114 -> d9  [key=2, style=dotted];
d114 -> d115  [key=0, style=solid];
d114 -> d118  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d123 -> d9  [key=2, style=dotted];
d123 -> d124  [key=0, style=solid];
d123 -> d127  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d132 -> d9  [key=2, style=dotted];
d132 -> d133  [key=0, style=solid];
d132 -> d136  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d141 -> d9  [key=2, style=dotted];
d141 -> d142  [key=0, style=solid];
d141 -> d144  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d171 -> d9  [key=2, style=dotted];
d171 -> d172  [key=0, style=solid];
d171 -> d175  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d181 -> d9  [key=2, style=dotted];
d181 -> d182  [key=0, style=solid];
d181 -> d185  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d190 -> d9  [key=2, style=dotted];
d190 -> d191  [key=0, style=solid];
d190 -> d193  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d198 -> d9  [key=2, style=dotted];
d198 -> d199  [key=0, style=solid];
d198 -> d202  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d207 -> d9  [key=2, style=dotted];
d207 -> d208  [key=0, style=solid];
d207 -> d210  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d216 -> d9  [key=2, style=dotted];
d216 -> d217  [key=0, style=solid];
d216 -> d219  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d224 -> d9  [key=2, style=dotted];
d224 -> d225  [key=0, style=solid];
d224 -> d228  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d233 -> d9  [key=2, style=dotted];
d233 -> d234  [key=0, style=solid];
d233 -> d236  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d241 -> d9  [key=2, style=dotted];
d241 -> d242  [key=0, style=solid];
d241 -> d244  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d248 -> d9  [key=2, style=dotted];
d248 -> d249  [key=0, style=solid];
d248 -> d252  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d39 -> d37  [key=0, style=bold, color=blue];
d38 -> d39  [key=0, style=solid];
d38 -> d40  [key=2, style=dotted];
d41 -> d42  [key=0, style=solid];
d45 -> d41  [key=0, style=bold, color=blue];
d48 -> d46  [key=0, style=bold, color=blue];
d47 -> d48  [key=0, style=solid];
d47 -> d6  [key=2, style=dotted];
d51 -> d36  [key=2, style=dotted];
d51 -> d11  [key=2, style=dotted];
d51 -> d52  [key=0, style=solid];
d59 -> d36  [key=2, style=dotted];
d59 -> d11  [key=2, style=dotted];
d59 -> d60  [key=0, style=solid];
d68 -> d36  [key=2, style=dotted];
d68 -> d11  [key=2, style=dotted];
d68 -> d69  [key=0, style=solid];
d78 -> d36  [key=2, style=dotted];
d78 -> d11  [key=2, style=dotted];
d78 -> d79  [key=0, style=solid];
d88 -> d36  [key=2, style=dotted];
d88 -> d11  [key=2, style=dotted];
d88 -> d89  [key=0, style=solid];
d96 -> d36  [key=2, style=dotted];
d96 -> d11  [key=2, style=dotted];
d96 -> d97  [key=0, style=solid];
d172 -> d36  [key=2, style=dotted];
d172 -> d11  [key=2, style=dotted];
d172 -> d173  [key=0, style=solid];
d199 -> d36  [key=2, style=dotted];
d199 -> d11  [key=2, style=dotted];
d199 -> d200  [key=0, style=solid];
d208 -> d36  [key=2, style=dotted];
d208 -> d11  [key=2, style=dotted];
d208 -> d209  [key=0, style=solid];
d217 -> d36  [key=2, style=dotted];
d217 -> d11  [key=2, style=dotted];
d217 -> d218  [key=0, style=solid];
d225 -> d36  [key=2, style=dotted];
d225 -> d11  [key=2, style=dotted];
d225 -> d226  [key=0, style=solid];
d234 -> d36  [key=2, style=dotted];
d234 -> d11  [key=2, style=dotted];
d234 -> d235  [key=0, style=solid];
d242 -> d36  [key=2, style=dotted];
d242 -> d11  [key=2, style=dotted];
d242 -> d243  [key=0, style=solid];
d4 -> d11  [key=2, style=dotted];
d4 -> d5  [key=0, style=solid];
d4 -> d10  [key=2, style=dotted];
d249 -> d11  [key=2, style=dotted];
d249 -> d250  [key=0, style=solid];
d249 -> d251  [key=2, style=dotted];
d1 -> d3  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
d1 -> d2  [key=0, style=solid];
d1 -> d6  [key=2, style=dotted];
d1 -> d13  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
d2 -> d3  [key=0, style=solid];
d2 -> d4  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d2 -> d7  [key=2, style=dotted];
d2 -> d8  [key=2, style=dotted];
d12 -> d13  [key=0, style=solid];
d15 -> d16  [key=0, style=solid];
d15 -> d17  [key=1, style=dashed, color=darkseagreen4, label=long];
d17 -> d18  [key=0, style=solid];
d17 -> d19  [key=2, style=dotted];
d20 -> d21  [key=0, style=solid];
d23 -> d24  [key=0, style=solid];
d23 -> d25  [key=1, style=dashed, color=darkseagreen4, label=double];
d25 -> d26  [key=0, style=solid];
d25 -> d19  [key=2, style=dotted];
d27 -> d28  [key=0, style=solid];
d49 -> d50  [key=0, style=solid];
d49 -> d51  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
d53 -> d54  [key=0, style=solid];
d57 -> d58  [key=0, style=solid];
d57 -> d59  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
d61 -> d62  [key=0, style=solid];
d66 -> d67  [key=0, style=solid];
d66 -> d68  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d66 -> d70  [key=2, style=dotted];
d66 -> d71  [key=2, style=dotted];
d72 -> d73  [key=0, style=solid];
d76 -> d77  [key=0, style=solid];
d76 -> d78  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d76 -> d80  [key=2, style=dotted];
d81 -> d82  [key=0, style=solid];
d86 -> d87  [key=0, style=solid];
d86 -> d88  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d86 -> d80  [key=2, style=dotted];
d86 -> d71  [key=2, style=dotted];
d90 -> d91  [key=0, style=solid];
d94 -> d95  [key=0, style=solid];
d94 -> d96  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d94 -> d80  [key=2, style=dotted];
d98 -> d99  [key=0, style=solid];
d103 -> d104  [key=0, style=solid];
d103 -> d107  [key=2, style=dotted];
d103 -> d105  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d105 -> d106  [key=0, style=solid];
d105 -> d108  [key=2, style=dotted];
d109 -> d110  [key=0, style=solid];
d113 -> d114  [key=0, style=solid];
d113 -> d117  [key=2, style=dotted];
d113 -> d115  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d115 -> d116  [key=0, style=solid];
d115 -> d108  [key=2, style=dotted];
d118 -> d119  [key=0, style=solid];
d122 -> d123  [key=0, style=solid];
d122 -> d126  [key=2, style=dotted];
d122 -> d124  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d124 -> d125  [key=0, style=solid];
d124 -> d108  [key=2, style=dotted];
d127 -> d128  [key=0, style=solid];
d131 -> d132  [key=0, style=solid];
d131 -> d135  [key=2, style=dotted];
d131 -> d133  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d133 -> d134  [key=0, style=solid];
d133 -> d108  [key=2, style=dotted];
d136 -> d137  [key=0, style=solid];
d140 -> d141  [key=0, style=solid];
d140 -> d135  [key=2, style=dotted];
d140 -> d142  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d142 -> d143  [key=0, style=solid];
d142 -> d108  [key=2, style=dotted];
d144 -> d145  [key=0, style=solid];
d170 -> d171  [key=0, style=solid];
d170 -> d172  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d170 -> d174  [key=2, style=dotted];
d170 -> d71  [key=2, style=dotted];
d175 -> d176  [key=0, style=solid];
d180 -> d181  [key=0, style=solid];
d180 -> d184  [key=2, style=dotted];
d180 -> d182  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d182 -> d183  [key=0, style=solid];
d182 -> d108  [key=2, style=dotted];
d185 -> d186  [key=0, style=solid];
d189 -> d190  [key=0, style=solid];
d189 -> d184  [key=2, style=dotted];
d189 -> d191  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d191 -> d192  [key=0, style=solid];
d191 -> d108  [key=2, style=dotted];
d193 -> d194  [key=0, style=solid];
d197 -> d198  [key=0, style=solid];
d197 -> d199  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d197 -> d201  [key=2, style=dotted];
d197 -> d71  [key=2, style=dotted];
d202 -> d203  [key=0, style=solid];
d206 -> d207  [key=0, style=solid];
d206 -> d208  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d206 -> d201  [key=2, style=dotted];
d206 -> d71  [key=2, style=dotted];
d210 -> d211  [key=0, style=solid];
d215 -> d216  [key=0, style=solid];
d215 -> d217  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d215 -> d80  [key=2, style=dotted];
d215 -> d71  [key=2, style=dotted];
d219 -> d220  [key=0, style=solid];
d223 -> d224  [key=0, style=solid];
d223 -> d225  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d223 -> d227  [key=2, style=dotted];
d228 -> d229  [key=0, style=solid];
d232 -> d233  [key=0, style=solid];
d232 -> d234  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d232 -> d227  [key=2, style=dotted];
d236 -> d237  [key=0, style=solid];
d240 -> d241  [key=0, style=solid];
d240 -> d242  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d240 -> d227  [key=2, style=dotted];
d244 -> d245  [key=0, style=solid];
d247 -> d248  [key=0, style=solid];
d247 -> d249  [key=1, style=dashed, color=darkseagreen4, label=string];
d252 -> d253  [key=0, style=solid];
d52 -> d49  [key=0, style=bold, color=blue];
d60 -> d57  [key=0, style=bold, color=blue];
d69 -> d65  [key=0, style=bold, color=blue];
d79 -> d75  [key=0, style=bold, color=blue];
d89 -> d85  [key=0, style=bold, color=blue];
d97 -> d93  [key=0, style=bold, color=blue];
d173 -> d169  [key=0, style=bold, color=blue];
d200 -> d196  [key=0, style=bold, color=blue];
d209 -> d205  [key=0, style=bold, color=blue];
d218 -> d214  [key=0, style=bold, color=blue];
d226 -> d222  [key=0, style=bold, color=blue];
d235 -> d231  [key=0, style=bold, color=blue];
d243 -> d239  [key=0, style=bold, color=blue];
d5 -> d0  [key=0, style=bold, color=blue];
d250 -> d247  [key=0, style=bold, color=blue];
d0 -> d1  [key=0, style=solid];
d13 -> d14  [key=0, style=solid];
d14 -> d12  [key=0, style=bold, color=blue];
d18 -> d15  [key=0, style=bold, color=blue];
d22 -> d20  [key=0, style=bold, color=blue];
d21 -> d6  [key=2, style=dotted];
d21 -> d22  [key=0, style=solid];
d26 -> d23  [key=0, style=bold, color=blue];
d29 -> d27  [key=0, style=bold, color=blue];
d28 -> d29  [key=0, style=solid];
d28 -> d30  [key=2, style=dotted];
d55 -> d53  [key=0, style=bold, color=blue];
d54 -> d55  [key=0, style=solid];
d54 -> d56  [key=2, style=dotted];
d63 -> d61  [key=0, style=bold, color=blue];
d62 -> d63  [key=0, style=solid];
d62 -> d64  [key=2, style=dotted];
d65 -> d66  [key=0, style=solid];
d74 -> d72  [key=0, style=bold, color=blue];
d73 -> d74  [key=0, style=solid];
d73 -> d56  [key=2, style=dotted];
d75 -> d76  [key=0, style=solid];
d83 -> d81  [key=0, style=bold, color=blue];
d82 -> d83  [key=0, style=solid];
d82 -> d84  [key=2, style=dotted];
d85 -> d86  [key=0, style=solid];
d92 -> d90  [key=0, style=bold, color=blue];
d91 -> d92  [key=0, style=solid];
d91 -> d64  [key=2, style=dotted];
d93 -> d94  [key=0, style=solid];
d100 -> d98  [key=0, style=bold, color=blue];
d99 -> d100  [key=0, style=solid];
d99 -> d101  [key=2, style=dotted];
d102 -> d103  [key=0, style=solid];
d106 -> d102  [key=0, style=bold, color=blue];
d111 -> d109  [key=0, style=bold, color=blue];
d110 -> d107  [key=2, style=dotted];
d110 -> d111  [key=0, style=solid];
d112 -> d113  [key=0, style=solid];
d116 -> d112  [key=0, style=bold, color=blue];
d120 -> d118  [key=0, style=bold, color=blue];
d119 -> d117  [key=2, style=dotted];
d119 -> d120  [key=0, style=solid];
d121 -> d122  [key=0, style=solid];
d125 -> d121  [key=0, style=bold, color=blue];
d129 -> d127  [key=0, style=bold, color=blue];
d128 -> d126  [key=2, style=dotted];
d128 -> d129  [key=0, style=solid];
d130 -> d131  [key=0, style=solid];
d134 -> d130  [key=0, style=bold, color=blue];
d138 -> d136  [key=0, style=bold, color=blue];
d137 -> d135  [key=2, style=dotted];
d137 -> d138  [key=0, style=solid];
d139 -> d140  [key=0, style=solid];
d143 -> d139  [key=0, style=bold, color=blue];
d146 -> d144  [key=0, style=bold, color=blue];
d145 -> d135  [key=2, style=dotted];
d145 -> d146  [key=0, style=solid];
d169 -> d170  [key=0, style=solid];
d177 -> d175  [key=0, style=bold, color=blue];
d176 -> d177  [key=0, style=solid];
d176 -> d178  [key=2, style=dotted];
d179 -> d180  [key=0, style=solid];
d183 -> d179  [key=0, style=bold, color=blue];
d187 -> d185  [key=0, style=bold, color=blue];
d186 -> d184  [key=2, style=dotted];
d186 -> d187  [key=0, style=solid];
d188 -> d189  [key=0, style=solid];
d192 -> d188  [key=0, style=bold, color=blue];
d195 -> d193  [key=0, style=bold, color=blue];
d194 -> d184  [key=2, style=dotted];
d194 -> d195  [key=0, style=solid];
d196 -> d197  [key=0, style=solid];
d204 -> d202  [key=0, style=bold, color=blue];
d203 -> d184  [key=2, style=dotted];
d203 -> d204  [key=0, style=solid];
d205 -> d206  [key=0, style=solid];
d212 -> d210  [key=0, style=bold, color=blue];
d211 -> d212  [key=0, style=solid];
d211 -> d213  [key=2, style=dotted];
d214 -> d215  [key=0, style=solid];
d221 -> d219  [key=0, style=bold, color=blue];
d220 -> d6  [key=2, style=dotted];
d220 -> d221  [key=0, style=solid];
d222 -> d223  [key=0, style=solid];
d230 -> d228  [key=0, style=bold, color=blue];
d229 -> d6  [key=2, style=dotted];
d229 -> d230  [key=0, style=solid];
d231 -> d232  [key=0, style=solid];
d238 -> d236  [key=0, style=bold, color=blue];
d237 -> d6  [key=2, style=dotted];
d237 -> d238  [key=0, style=solid];
d239 -> d240  [key=0, style=solid];
d246 -> d244  [key=0, style=bold, color=blue];
d245 -> d6  [key=2, style=dotted];
d245 -> d246  [key=0, style=solid];
d254 -> d252  [key=0, style=bold, color=blue];
d253 -> d6  [key=2, style=dotted];
d253 -> d254  [key=0, style=solid];
d255 -> d13  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
d151 -> d108  [key=2, style=dotted];
d151 -> d152  [key=0, style=solid];
d148 -> d117  [key=2, style=dotted];
d148 -> d151  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d148 -> d149  [key=0, style=solid];
d155 -> d117  [key=2, style=dotted];
d155 -> d156  [key=0, style=solid];
d150 -> d151  [key=0, style=solid];
d150 -> d153  [key=2, style=dotted];
d150 -> d154  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d150 -> d157  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d152 -> d147  [key=0, style=bold, color=blue];
d147 -> d148  [key=0, style=solid];
d149 -> d150  [key=0, style=solid];
d154 -> d155  [key=0, style=solid];
d156 -> d154  [key=0, style=bold, color=blue];
d157 -> d158  [key=0, style=solid];
d157 -> d162  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
d157 -> d166  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
d159 -> d157  [key=0, style=bold, color=blue];
d158 -> d159  [key=0, style=solid];
d158 -> d160  [key=2, style=dotted];
d158 -> d161  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d162 -> d163  [key=0, style=solid];
d162 -> d164  [key=2, style=dotted];
d162 -> d165  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d166 -> d167  [key=0, style=solid];
d166 -> d168  [key=2, style=dotted];
d161 -> d162  [key=0, style=solid];
d256 -> d162  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
d256 -> d166  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
d163 -> d161  [key=0, style=bold, color=blue];
d165 -> d166  [key=0, style=solid];
d167 -> d165  [key=0, style=bold, color=blue];
}
