digraph  {
n0 [label="Entry CommandLine.Core.ArgumentsExtension.Preprocess(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="11-11", cluster="CommandLine.Core.ArgumentsExtension.Preprocess(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)"];
n1 [label="preprocessorLookup.Empty()", span="17-17", cluster="CommandLine.Core.ArgumentsExtension.Preprocess(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", color=red, community=0];
n3 [label="var errors = preprocessorLookup.First()(arguments)", span="21-21", cluster="CommandLine.Core.ArgumentsExtension.Preprocess(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", color=red, community=0];
n4 [label="return errors.Any()\r\n                ? errors\r\n                : arguments.Preprocess(preprocessorLookup.Skip(1));", span="22-24", cluster="CommandLine.Core.ArgumentsExtension.Preprocess(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", color=red, community=1];
n2 [label="return Enumerable.Empty<Error>();", span="19-19", cluster="CommandLine.Core.ArgumentsExtension.Preprocess(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", color=red, community=0];
n6 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", span="31-31", cluster="System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()"];
n8 [label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()"];
n9 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)"];
n5 [label="Exit CommandLine.Core.ArgumentsExtension.Preprocess(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="11-11", cluster="CommandLine.Core.ArgumentsExtension.Preprocess(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)"];
n7 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()"];
n10 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()"];
n11 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)"];
n12 [label="Entry System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="11-11", cluster="System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)"];
m0_37 [label="Entry CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)", span="176-176", cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)", file="EnumerableExtensions.cs"];
m0_57 [label="var list = ReflectionUtil.RetrievePropertyList<ParserStateAttribute>(options)", span="178-178", cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)", file="EnumerableExtensions.cs"];
m0_61 [label="property.GetValue(options, null) == null", span="185-185", cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)", file="EnumerableExtensions.cs"];
m0_62 [label="property.SetValue(options, new CommandLine.ParserState(), null)", span="187-187", cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)", file="EnumerableExtensions.cs"];
m0_63 [label="var parserState = (IParserState)property.GetValue(options, null)", span="189-189", cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)", file="EnumerableExtensions.cs"];
m0_66 [label="var error = new ParsingError\r\n            {\r\n                BadOption =\r\n                {\r\n                    ShortName = option.ShortName,\r\n                    LongName = option.LongName\r\n                }\r\n            }", span="194-201", cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)", file="EnumerableExtensions.cs"];
m0_67 [label="required != null", span="202-202", cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)", file="EnumerableExtensions.cs"];
m0_68 [label="error.ViolatesRequired = required.Value", span="202-202", cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)", file="EnumerableExtensions.cs"];
m0_69 [label="mutualExclusiveness != null", span="203-203", cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)", file="EnumerableExtensions.cs"];
m0_70 [label="error.ViolatesMutualExclusiveness = mutualExclusiveness.Value", span="203-203", cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)", file="EnumerableExtensions.cs"];
m0_58 [label="list.Count == 0", span="179-179", cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)", file="EnumerableExtensions.cs"];
m0_60 [label="var property = list[0].Left", span="183-183", cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)", file="EnumerableExtensions.cs"];
m0_59 [label="return;", span="181-181", cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)", file="EnumerableExtensions.cs"];
m0_64 [label="parserState == null", span="190-190", cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)", file="EnumerableExtensions.cs"];
m0_71 [label="parserState.Errors.Add(error)", span="204-204", cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)", file="EnumerableExtensions.cs"];
m0_65 [label="return;", span="192-192", cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)", file="EnumerableExtensions.cs"];
m0_72 [label="Exit CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)", span="176-176", cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)", file="EnumerableExtensions.cs"];
m0_49 [label="Entry CommandLine.Internal.OptionMap.BuildMutuallyExclusiveMap(CommandLine.Internal.OptionInfo)", span="166-166", cluster="CommandLine.Internal.OptionMap.BuildMutuallyExclusiveMap(CommandLine.Internal.OptionInfo)", file="EnumerableExtensions.cs"];
m0_50 [label="var setName = option.MutuallyExclusiveSet", span="168-168", cluster="CommandLine.Internal.OptionMap.BuildMutuallyExclusiveMap(CommandLine.Internal.OptionInfo)", file="EnumerableExtensions.cs"];
m0_52 [label="_mutuallyExclusiveSetMap.Add(setName, new MutuallyExclusiveInfo(option))", span="171-171", cluster="CommandLine.Internal.OptionMap.BuildMutuallyExclusiveMap(CommandLine.Internal.OptionInfo)", file="EnumerableExtensions.cs"];
m0_51 [label="!_mutuallyExclusiveSetMap.ContainsKey(setName)", span="169-169", cluster="CommandLine.Internal.OptionMap.BuildMutuallyExclusiveMap(CommandLine.Internal.OptionInfo)", file="EnumerableExtensions.cs"];
m0_53 [label="_mutuallyExclusiveSetMap[setName].IncrementOccurrence()", span="173-173", cluster="CommandLine.Internal.OptionMap.BuildMutuallyExclusiveMap(CommandLine.Internal.OptionInfo)", file="EnumerableExtensions.cs"];
m0_54 [label="Exit CommandLine.Internal.OptionMap.BuildMutuallyExclusiveMap(CommandLine.Internal.OptionInfo)", span="166-166", cluster="CommandLine.Internal.OptionMap.BuildMutuallyExclusiveMap(CommandLine.Internal.OptionInfo)", file="EnumerableExtensions.cs"];
m0_24 [label="Entry CommandLine.Internal.OptionMap.EnforceRequiredRule()", span="128-128", cluster="CommandLine.Internal.OptionMap.EnforceRequiredRule()", file="EnumerableExtensions.cs"];
m0_30 [label="bool requiredRulesAllMet = true", span="130-130", cluster="CommandLine.Internal.OptionMap.EnforceRequiredRule()", file="EnumerableExtensions.cs"];
m0_31 [label="_map.Values", span="131-131", cluster="CommandLine.Internal.OptionMap.EnforceRequiredRule()", file="EnumerableExtensions.cs"];
m0_35 [label="return requiredRulesAllMet;", span="139-139", cluster="CommandLine.Internal.OptionMap.EnforceRequiredRule()", file="EnumerableExtensions.cs"];
m0_32 [label="option.Required && !option.IsDefined", span="133-133", cluster="CommandLine.Internal.OptionMap.EnforceRequiredRule()", file="EnumerableExtensions.cs"];
m0_33 [label="SetParserStateIfNeeded(RawOptions, option, true, null)", span="135-135", cluster="CommandLine.Internal.OptionMap.EnforceRequiredRule()", file="EnumerableExtensions.cs"];
m0_34 [label="requiredRulesAllMet = false", span="136-136", cluster="CommandLine.Internal.OptionMap.EnforceRequiredRule()", file="EnumerableExtensions.cs"];
m0_36 [label="Exit CommandLine.Internal.OptionMap.EnforceRequiredRule()", span="128-128", cluster="CommandLine.Internal.OptionMap.EnforceRequiredRule()", file="EnumerableExtensions.cs"];
m0_29 [label="Entry CommandLine.Internal.OptionInfo.SetDefault(object)", span="197-197", cluster="CommandLine.Internal.OptionInfo.SetDefault(object)", file="EnumerableExtensions.cs"];
m0_25 [label="Entry CommandLine.Internal.OptionMap.SetDefaults()", span="120-120", cluster="CommandLine.Internal.OptionMap.SetDefaults()", file="EnumerableExtensions.cs"];
m0_26 [label="_map.Values", span="122-122", cluster="CommandLine.Internal.OptionMap.SetDefaults()", file="EnumerableExtensions.cs"];
m0_27 [label="option.SetDefault(RawOptions)", span="124-124", cluster="CommandLine.Internal.OptionMap.SetDefaults()", file="EnumerableExtensions.cs"];
m0_28 [label="Exit CommandLine.Internal.OptionMap.SetDefaults()", span="120-120", cluster="CommandLine.Internal.OptionMap.SetDefaults()", file="EnumerableExtensions.cs"];
m0_20 [label="Entry CommandLine.Internal.OptionMap.EnforceRules()", span="115-115", cluster="CommandLine.Internal.OptionMap.EnforceRules()", file="EnumerableExtensions.cs"];
m0_21 [label="return EnforceMutuallyExclusiveMap() && EnforceRequiredRule();", span="117-117", cluster="CommandLine.Internal.OptionMap.EnforceRules()", file="EnumerableExtensions.cs"];
m0_22 [label="Exit CommandLine.Internal.OptionMap.EnforceRules()", span="115-115", cluster="CommandLine.Internal.OptionMap.EnforceRules()", file="EnumerableExtensions.cs"];
m0_56 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", file="EnumerableExtensions.cs"];
m0_75 [label="Entry CommandLine.ParserState.ParserState()", span="47-47", cluster="CommandLine.ParserState.ParserState()", file="EnumerableExtensions.cs"];
m0_78 [label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.ICollection<T>.Add(T)", file="EnumerableExtensions.cs"];
m0_0 [label="Entry CommandLine.Internal.OptionMap.MutuallyExclusiveInfo.MutuallyExclusiveInfo()", span="45-45", cluster="CommandLine.Internal.OptionMap.MutuallyExclusiveInfo.MutuallyExclusiveInfo()", file="EnumerableExtensions.cs"];
m0_1 [label="Exit CommandLine.Internal.OptionMap.MutuallyExclusiveInfo.MutuallyExclusiveInfo()", span="45-45", cluster="CommandLine.Internal.OptionMap.MutuallyExclusiveInfo.MutuallyExclusiveInfo()", file="EnumerableExtensions.cs"];
m0_8 [label="Entry CommandLine.Internal.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", span="61-61", cluster="CommandLine.Internal.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", file="EnumerableExtensions.cs"];
m0_9 [label="_settings = settings", span="63-63", cluster="CommandLine.Internal.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", file="EnumerableExtensions.cs"];
m0_14 [label="_names = new Dictionary<string, string>(capacity, comparer)", span="74-74", cluster="CommandLine.Internal.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", file="EnumerableExtensions.cs"];
m0_15 [label="_map = new Dictionary<string, OptionInfo>(capacity * 2, comparer)", span="75-75", cluster="CommandLine.Internal.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", file="EnumerableExtensions.cs"];
m0_17 [label="_mutuallyExclusiveSetMap = new Dictionary<string, MutuallyExclusiveInfo>(capacity, StringComparer.OrdinalIgnoreCase)", span="78-78", cluster="CommandLine.Internal.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", file="EnumerableExtensions.cs"];
m0_10 [label="IEqualityComparer<string> comparer", span="65-65", cluster="CommandLine.Internal.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", file="EnumerableExtensions.cs"];
m0_11 [label="_settings.CaseSensitive", span="66-66", cluster="CommandLine.Internal.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", file="EnumerableExtensions.cs"];
m0_12 [label="comparer = StringComparer.Ordinal", span="68-68", cluster="CommandLine.Internal.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", file="EnumerableExtensions.cs"];
m0_13 [label="comparer = StringComparer.OrdinalIgnoreCase", span="72-72", cluster="CommandLine.Internal.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", file="EnumerableExtensions.cs"];
m0_16 [label="_settings.MutuallyExclusive", span="76-76", cluster="CommandLine.Internal.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", file="EnumerableExtensions.cs"];
m0_18 [label="Exit CommandLine.Internal.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", span="61-61", cluster="CommandLine.Internal.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", file="EnumerableExtensions.cs"];
m0_73 [label="Entry CommandLine.Internal.ReflectionUtil.RetrievePropertyList<TAttribute>(object)", span="43-43", cluster="CommandLine.Internal.ReflectionUtil.RetrievePropertyList<TAttribute>(object)", file="EnumerableExtensions.cs"];
m0_76 [label="Entry System.Reflection.PropertyInfo.SetValue(object, object, object[])", span="0-0", cluster="System.Reflection.PropertyInfo.SetValue(object, object, object[])", file="EnumerableExtensions.cs"];
m0_77 [label="Entry CommandLine.ParsingError.ParsingError()", span="47-47", cluster="CommandLine.ParsingError.ParsingError()", file="EnumerableExtensions.cs"];
m0_55 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", file="EnumerableExtensions.cs"];
m0_74 [label="Entry System.Reflection.PropertyInfo.GetValue(object, object[])", span="0-0", cluster="System.Reflection.PropertyInfo.GetValue(object, object[])", file="EnumerableExtensions.cs"];
m0_2 [label="Entry CommandLine.Internal.OptionMap.MutuallyExclusiveInfo.MutuallyExclusiveInfo(CommandLine.Internal.OptionInfo)", span="47-47", cluster="CommandLine.Internal.OptionMap.MutuallyExclusiveInfo.MutuallyExclusiveInfo(CommandLine.Internal.OptionInfo)", file="EnumerableExtensions.cs"];
m0_3 [label="BadOption = option", span="49-49", cluster="CommandLine.Internal.OptionMap.MutuallyExclusiveInfo.MutuallyExclusiveInfo(CommandLine.Internal.OptionInfo)", file="EnumerableExtensions.cs"];
m0_4 [label="Exit CommandLine.Internal.OptionMap.MutuallyExclusiveInfo.MutuallyExclusiveInfo(CommandLine.Internal.OptionInfo)", span="47-47", cluster="CommandLine.Internal.OptionMap.MutuallyExclusiveInfo.MutuallyExclusiveInfo(CommandLine.Internal.OptionInfo)", file="EnumerableExtensions.cs"];
m0_5 [label="Entry CommandLine.Internal.OptionMap.MutuallyExclusiveInfo.IncrementOccurrence()", span="54-54", cluster="CommandLine.Internal.OptionMap.MutuallyExclusiveInfo.IncrementOccurrence()", file="EnumerableExtensions.cs"];
m0_6 [label="++_count", span="54-54", cluster="CommandLine.Internal.OptionMap.MutuallyExclusiveInfo.IncrementOccurrence()", file="EnumerableExtensions.cs"];
m0_7 [label="Exit CommandLine.Internal.OptionMap.MutuallyExclusiveInfo.IncrementOccurrence()", span="54-54", cluster="CommandLine.Internal.OptionMap.MutuallyExclusiveInfo.IncrementOccurrence()", file="EnumerableExtensions.cs"];
m0_23 [label="Entry CommandLine.Internal.OptionMap.EnforceMutuallyExclusiveMap()", span="142-142", cluster="CommandLine.Internal.OptionMap.EnforceMutuallyExclusiveMap()", file="EnumerableExtensions.cs"];
m0_38 [label="!_settings.MutuallyExclusive", span="144-144", cluster="CommandLine.Internal.OptionMap.EnforceMutuallyExclusiveMap()", file="EnumerableExtensions.cs"];
m0_39 [label="return true;", span="146-146", cluster="CommandLine.Internal.OptionMap.EnforceMutuallyExclusiveMap()", file="EnumerableExtensions.cs"];
m0_40 [label="_map.Values", span="148-148", cluster="CommandLine.Internal.OptionMap.EnforceMutuallyExclusiveMap()", file="EnumerableExtensions.cs"];
m0_41 [label="option.IsDefined && option.MutuallyExclusiveSet != null", span="150-150", cluster="CommandLine.Internal.OptionMap.EnforceMutuallyExclusiveMap()", file="EnumerableExtensions.cs"];
m0_43 [label="_mutuallyExclusiveSetMap.Values", span="155-155", cluster="CommandLine.Internal.OptionMap.EnforceMutuallyExclusiveMap()", file="EnumerableExtensions.cs"];
m0_42 [label="BuildMutuallyExclusiveMap(option)", span="152-152", cluster="CommandLine.Internal.OptionMap.EnforceMutuallyExclusiveMap()", file="EnumerableExtensions.cs"];
m0_44 [label="info.Occurrence > 1", span="157-157", cluster="CommandLine.Internal.OptionMap.EnforceMutuallyExclusiveMap()", file="EnumerableExtensions.cs"];
m0_47 [label="return true;", span="163-163", cluster="CommandLine.Internal.OptionMap.EnforceMutuallyExclusiveMap()", file="EnumerableExtensions.cs"];
m0_45 [label="SetParserStateIfNeeded(RawOptions, info.BadOption, null, true)", span="159-159", cluster="CommandLine.Internal.OptionMap.EnforceMutuallyExclusiveMap()", file="EnumerableExtensions.cs"];
m0_46 [label="return false;", span="160-160", cluster="CommandLine.Internal.OptionMap.EnforceMutuallyExclusiveMap()", file="EnumerableExtensions.cs"];
m0_48 [label="Exit CommandLine.Internal.OptionMap.EnforceMutuallyExclusiveMap()", span="142-142", cluster="CommandLine.Internal.OptionMap.EnforceMutuallyExclusiveMap()", file="EnumerableExtensions.cs"];
m0_19 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(int, System.Collections.Generic.IEqualityComparer<TKey>)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(int, System.Collections.Generic.IEqualityComparer<TKey>)", file="EnumerableExtensions.cs"];
m0_79 [label="CommandLine.Internal.OptionMap.MutuallyExclusiveInfo", span="", file="EnumerableExtensions.cs"];
m0_80 [label="CommandLine.Internal.OptionMap", span="", file="EnumerableExtensions.cs"];
n0 -> n1  [key=0, style=solid, color=red];
n0 -> n3  [key=1, style=dashed, color=red, label="System.Collections.Generic.IEnumerable<string>"];
n0 -> n4  [key=1, style=dashed, color=red, label="System.Collections.Generic.IEnumerable<string>"];
n1 -> n2  [key=0, style=solid, color=red];
n1 -> n3  [key=0, style=solid, color=red];
n1 -> n6  [key=2, style=dotted, color=red];
n3 -> n4  [key=0, style=solid, color=red];
n3 -> n8  [key=2, style=dotted, color=red];
n3 -> n9  [key=2, style=dotted, color=red];
n4 -> n5  [key=0, style=solid, color=red];
n4 -> n10  [key=2, style=dotted, color=red];
n4 -> n11  [key=2, style=dotted, color=red];
n4 -> n12  [key=2, style=dotted, color=red];
n2 -> n5  [key=0, style=solid, color=red];
n2 -> n7  [key=2, style=dotted, color=red];
n5 -> n0  [key=0, style=bold, color=blue];
m0_37 -> m0_57  [key=0, style=solid];
m0_37 -> m0_61  [key=1, style=dashed, color=darkseagreen4, label=object];
m0_37 -> m0_62  [key=1, style=dashed, color=darkseagreen4, label=object];
m0_37 -> m0_63  [key=1, style=dashed, color=darkseagreen4, label=object];
m0_37 -> m0_66  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Internal.OptionInfo"];
m0_37 -> m0_67  [key=1, style=dashed, color=darkseagreen4, label="bool?"];
m0_37 -> m0_68  [key=1, style=dashed, color=darkseagreen4, label="bool?"];
m0_37 -> m0_69  [key=1, style=dashed, color=darkseagreen4, label="bool?"];
m0_37 -> m0_70  [key=1, style=dashed, color=darkseagreen4, label="bool?"];
m0_37 -> m0_31  [key=3, color=darkorchid, style=bold, label="Parameter variable CommandLine.Internal.OptionInfo option"];
m0_37 -> m0_30  [key=3, color=darkorchid, style=bold, label="Parameter variable bool? mutualExclusiveness"];
m0_57 -> m0_58  [key=0, style=solid];
m0_57 -> m0_73  [key=2, style=dotted];
m0_57 -> m0_60  [key=1, style=dashed, color=darkseagreen4, label=list];
m0_61 -> m0_62  [key=0, style=solid];
m0_61 -> m0_63  [key=0, style=solid];
m0_61 -> m0_74  [key=2, style=dotted];
m0_62 -> m0_63  [key=0, style=solid];
m0_62 -> m0_75  [key=2, style=dotted];
m0_62 -> m0_76  [key=2, style=dotted];
m0_63 -> m0_64  [key=0, style=solid];
m0_63 -> m0_74  [key=2, style=dotted];
m0_63 -> m0_71  [key=1, style=dashed, color=darkseagreen4, label=parserState];
m0_66 -> m0_67  [key=0, style=solid];
m0_66 -> m0_77  [key=2, style=dotted];
m0_66 -> m0_68  [key=1, style=dashed, color=darkseagreen4, label=error];
m0_66 -> m0_70  [key=1, style=dashed, color=darkseagreen4, label=error];
m0_66 -> m0_71  [key=1, style=dashed, color=darkseagreen4, label=error];
m0_67 -> m0_68  [key=0, style=solid];
m0_67 -> m0_69  [key=0, style=solid];
m0_68 -> m0_69  [key=0, style=solid];
m0_69 -> m0_70  [key=0, style=solid];
m0_69 -> m0_71  [key=0, style=solid];
m0_70 -> m0_71  [key=0, style=solid];
m0_58 -> m0_59  [key=0, style=solid];
m0_58 -> m0_60  [key=0, style=solid];
m0_60 -> m0_61  [key=0, style=solid];
m0_60 -> m0_62  [key=1, style=dashed, color=darkseagreen4, label=property];
m0_60 -> m0_63  [key=1, style=dashed, color=darkseagreen4, label=property];
m0_59 -> m0_72  [key=0, style=solid];
m0_64 -> m0_65  [key=0, style=solid];
m0_64 -> m0_66  [key=0, style=solid];
m0_71 -> m0_72  [key=0, style=solid];
m0_71 -> m0_78  [key=2, style=dotted];
m0_65 -> m0_72  [key=0, style=solid];
m0_72 -> m0_37  [key=0, style=bold, color=blue];
m0_49 -> m0_50  [key=0, style=solid];
m0_49 -> m0_52  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Internal.OptionInfo"];
m0_49 -> m0_40  [key=3, color=darkorchid, style=bold, label="Parameter variable CommandLine.Internal.OptionInfo option"];
m0_50 -> m0_51  [key=0, style=solid];
m0_50 -> m0_52  [key=1, style=dashed, color=darkseagreen4, label=setName];
m0_50 -> m0_53  [key=1, style=dashed, color=darkseagreen4, label=setName];
m0_52 -> m0_53  [key=0, style=solid];
m0_52 -> m0_2  [key=2, style=dotted];
m0_52 -> m0_56  [key=2, style=dotted];
m0_51 -> m0_52  [key=0, style=solid];
m0_51 -> m0_53  [key=0, style=solid];
m0_51 -> m0_55  [key=2, style=dotted];
m0_53 -> m0_54  [key=0, style=solid];
m0_53 -> m0_5  [key=2, style=dotted];
m0_54 -> m0_49  [key=0, style=bold, color=blue];
m0_24 -> m0_30  [key=0, style=solid];
m0_30 -> m0_31  [key=0, style=solid];
m0_30 -> m0_35  [key=1, style=dashed, color=darkseagreen4, label=requiredRulesAllMet];
m0_30 -> m0_30  [key=3, color=darkorchid, style=bold, label="Local variable bool requiredRulesAllMet"];
m0_31 -> m0_32  [key=0, style=solid];
m0_31 -> m0_35  [key=0, style=solid];
m0_31 -> m0_33  [key=1, style=dashed, color=darkseagreen4, label=option];
m0_35 -> m0_36  [key=0, style=solid];
m0_32 -> m0_33  [key=0, style=solid];
m0_32 -> m0_31  [key=0, style=solid];
m0_33 -> m0_34  [key=0, style=solid];
m0_33 -> m0_37  [key=2, style=dotted];
m0_34 -> m0_31  [key=0, style=solid];
m0_34 -> m0_35  [key=1, style=dashed, color=darkseagreen4, label=requiredRulesAllMet];
m0_36 -> m0_24  [key=0, style=bold, color=blue];
m0_25 -> m0_26  [key=0, style=solid];
m0_26 -> m0_27  [key=0, style=solid];
m0_26 -> m0_28  [key=0, style=solid];
m0_27 -> m0_26  [key=0, style=solid];
m0_27 -> m0_29  [key=2, style=dotted];
m0_28 -> m0_25  [key=0, style=bold, color=blue];
m0_20 -> m0_21  [key=0, style=solid];
m0_21 -> m0_22  [key=0, style=solid];
m0_21 -> m0_23  [key=2, style=dotted];
m0_21 -> m0_24  [key=2, style=dotted];
m0_22 -> m0_20  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_0 -> m0_0  [key=3, color=darkorchid, style=bold, label="Local variable int iterations"];
m0_1 -> m0_0  [key=0, style=bold, color=blue];
m0_8 -> m0_9  [key=0, style=solid];
m0_8 -> m0_14  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_8 -> m0_15  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_8 -> m0_17  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_9 -> m0_10  [key=0, style=solid];
m0_14 -> m0_15  [key=0, style=solid];
m0_14 -> m0_19  [key=2, style=dotted];
m0_15 -> m0_16  [key=0, style=solid];
m0_15 -> m0_19  [key=2, style=dotted];
m0_17 -> m0_18  [key=0, style=solid];
m0_17 -> m0_19  [key=2, style=dotted];
m0_10 -> m0_11  [key=0, style=solid];
m0_11 -> m0_12  [key=0, style=solid];
m0_11 -> m0_13  [key=0, style=solid];
m0_12 -> m0_14  [key=0, style=solid];
m0_12 -> m0_15  [key=1, style=dashed, color=darkseagreen4, label=comparer];
m0_13 -> m0_14  [key=0, style=solid];
m0_13 -> m0_15  [key=1, style=dashed, color=darkseagreen4, label=comparer];
m0_16 -> m0_17  [key=0, style=solid];
m0_16 -> m0_18  [key=0, style=solid];
m0_18 -> m0_8  [key=0, style=bold, color=blue];
m0_2 -> m0_3  [key=0, style=solid];
m0_3 -> m0_4  [key=0, style=solid];
m0_4 -> m0_2  [key=0, style=bold, color=blue];
m0_5 -> m0_6  [key=0, style=solid];
m0_6 -> m0_7  [key=0, style=solid];
m0_7 -> m0_5  [key=0, style=bold, color=blue];
m0_23 -> m0_38  [key=0, style=solid];
m0_23 -> m0_30  [key=3, color=darkorchid, style=bold, label="method methodReturn bool EnforceMutuallyExclusiveMap"];
m0_23 -> m0_46  [key=3, color=darkorchid, style=bold, label="method methodReturn bool EnforceMutuallyExclusiveMap"];
m0_38 -> m0_39  [key=0, style=solid];
m0_38 -> m0_40  [key=0, style=solid];
m0_39 -> m0_48  [key=0, style=solid];
m0_40 -> m0_41  [key=0, style=solid];
m0_40 -> m0_43  [key=0, style=solid];
m0_40 -> m0_42  [key=1, style=dashed, color=darkseagreen4, label=option];
m0_41 -> m0_42  [key=0, style=solid];
m0_41 -> m0_40  [key=0, style=solid];
m0_43 -> m0_44  [key=0, style=solid];
m0_43 -> m0_47  [key=0, style=solid];
m0_43 -> m0_45  [key=1, style=dashed, color=darkseagreen4, label=info];
m0_42 -> m0_40  [key=0, style=solid];
m0_42 -> m0_49  [key=2, style=dotted];
m0_44 -> m0_45  [key=0, style=solid];
m0_44 -> m0_43  [key=0, style=solid];
m0_47 -> m0_48  [key=0, style=solid];
m0_45 -> m0_46  [key=0, style=solid];
m0_45 -> m0_37  [key=2, style=dotted];
m0_46 -> m0_48  [key=0, style=solid];
m0_48 -> m0_23  [key=0, style=bold, color=blue];
m0_79 -> m0_3  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Internal.OptionMap.MutuallyExclusiveInfo"];
m0_79 -> m0_6  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Internal.OptionMap.MutuallyExclusiveInfo"];
m0_80 -> m0_9  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Internal.OptionMap"];
m0_80 -> m0_11  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Internal.OptionMap"];
m0_80 -> m0_14  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Internal.OptionMap"];
m0_80 -> m0_15  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Internal.OptionMap"];
m0_80 -> m0_16  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Internal.OptionMap"];
m0_80 -> m0_17  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Internal.OptionMap"];
m0_80 -> m0_21  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Internal.OptionMap"];
m0_80 -> m0_26  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Internal.OptionMap"];
m0_80 -> m0_27  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Internal.OptionMap"];
m0_80 -> m0_31  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Internal.OptionMap"];
m0_80 -> m0_33  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Internal.OptionMap"];
m0_80 -> m0_38  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Internal.OptionMap"];
m0_80 -> m0_40  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Internal.OptionMap"];
m0_80 -> m0_42  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Internal.OptionMap"];
m0_80 -> m0_43  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Internal.OptionMap"];
m0_80 -> m0_45  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Internal.OptionMap"];
m0_80 -> m0_51  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Internal.OptionMap"];
m0_80 -> m0_52  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Internal.OptionMap"];
m0_80 -> m0_53  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Internal.OptionMap"];
}
