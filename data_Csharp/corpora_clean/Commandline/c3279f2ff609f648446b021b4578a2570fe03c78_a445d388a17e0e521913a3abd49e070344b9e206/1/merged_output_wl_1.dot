digraph  {
d31 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, label="0: var optionSpecPropsResult = OptionMapper.MapValues(\r\n                (from pt in specProps where pt.Specification.IsOption() select pt),\r\n                partitions.Options,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture),\r\n                nameComparer)", span="76-80"];
d3 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="35-35"];
d30 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var partitions = TokenPartitioner.Partition(\r\n                tokens,\r\n                name => TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer))", span="72-74"];
d20 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var specProps = typeInfo.GetSpecifications(pi => SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>()))", span="44-45"];
d32 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, label="0: var valueSpecPropsResult = ValueMapper.MapValues(\r\n                (from pt in specProps where pt.Specification.IsValue() select pt),\r\n                    partitions.Values,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture))", span="82-85"];
d58 [cluster="CommandLine.Core.Specification.IsOption()", label="Entry CommandLine.Core.Specification.IsOption()", span="10-10"];
d59 [cluster="Unk.MapValues", label="Entry Unk.MapValues", span=""];
d105 [cluster="lambda expression", label="Entry lambda expression", span="79-79"];
d34 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, label="0: var specPropsWithValue = optionSpecPropsResult.SucceededWith()\r\n                .Concat(valueSpecPropsResult.SucceededWith())", span="91-92"];
d43 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, label="0: var allErrors = tokenizerResult.SuccessfulMessages()\r\n                .Concat(missingValueErrors)\r\n                .Concat(optionSpecPropsResult.SuccessfulMessages())\r\n                .Concat(valueSpecPropsResult.SuccessfulMessages())\r\n                .Concat(validationErrors)", span="125-129"];
d33 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var missingValueErrors = from token in partitions.Errors\r\n                                     select new MissingValueOptionError(\r\n                                         optionSpecs.Single(o => token.Text.MatchName(o.ShortName, o.LongName, nameComparer)).FromOptionSpecification())", span="87-89"];
d60 [cluster="CommandLine.Core.Specification.IsValue()", label="Entry CommandLine.Core.Specification.IsValue()", span="15-15"];
d109 [cluster="lambda expression", label="Entry lambda expression", span="85-85"];
d28 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var tokenizerResult = tokenizer(arguments, optionSpecs)", span="68-68"];
d42 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var validationErrors = specPropsWithValue.Validate(\r\n                SpecificationPropertyRules.Lookup(tokens))", span="122-123"];
d44 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="return allErrors.Any()\r\n                ? (ParserResult<T>)new NotParsed<T>(instance, allErrors)\r\n                : (ParserResult<T>)new Parsed<T>(instance);", span="131-133"];
d77 [cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SuccessfulMessages<TSuccess, TMessage>()", label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SuccessfulMessages<TSuccess, TMessage>()", span="12-12"];
d78 [cluster="Unk.Concat", label="Entry Unk.Concat", span=""];
d35 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="T instance", span="94-94"];
d56 [cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()", label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()", span="653-653"];
d64 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
d38 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="instance = instance\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsJust(),\r\n                        sp => sp.Value.FromJust())\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust(),\r\n                        sp => sp.Specification.DefaultValue.FromJust())\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsNothing()\r\n                            && sp.Specification.TargetType == TargetType.Sequence\r\n                            && sp.Specification.DefaultValue.MatchNothing(),\r\n                        sp => sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray())", span="98-109"];
d40 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var values = (from prms in ctor.GetParameters()\r\n                              join sp in specPropsWithValue on prms.Name.ToLower() equals sp.Property.Name.ToLower()\r\n                              select sp.Value.Return(v => v,\r\n                                    sp.Specification.DefaultValue.Return(d => d,\r\n                                        sp.Specification.ConversionType.CreateDefaultForImmutable()))).ToArray()", span="114-118"];
d0 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="14-14"];
d1 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="return Build(\r\n                factory,\r\n                (args, optionSpecs) =>\r\n                    {\r\n                        var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer));\r\n                        var explodedTokens = Tokenizer.ExplodeOptionList(\r\n                            tokens,\r\n                            name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer));\r\n                        return explodedTokens;\r\n                    },\r\n                arguments,\r\n                nameComparer,\r\n                parsingCulture);", span="20-32"];
d45 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Exit CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="35-35"];
d19 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var typeInfo = factory.Return(f => f().GetType(), typeof(T))", span="42-42"];
d23 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Func<T> makeDefault = () =>\r\n                typeof(T).IsMutable()\r\n                    ? factory.Return(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="53-57"];
d94 [cluster="lambda expression", label="typeof(T).IsMutable()\r\n                    ? factory.Return(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="54-57"];
d24 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="arguments.Any()", span="59-59"];
d25 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var preprocessorErrors = arguments.Preprocess(PreprocessorGuards.Lookup(nameComparer))", span="61-61"];
d102 [cluster="lambda expression", label="TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer)", span="74-74"];
d106 [cluster="lambda expression", label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="79-79"];
d110 [cluster="lambda expression", label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="85-85"];
d113 [cluster="lambda expression", label="token.Text.MatchName(o.ShortName, o.LongName, nameComparer)", span="89-89"];
d37 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="instance = factory.Return(f => f(), Activator.CreateInstance<T>())", span="97-97"];
d22 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var optionSpecs = specs\r\n                .ThrowingValidate(SpecificationGuards.Lookup)\r\n                .OfType<OptionSpecification>()", span="49-51"];
d29 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var tokens = tokenizerResult.SucceededWith()", span="70-70"];
d57 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12"];
d101 [cluster="lambda expression", label="Entry lambda expression", span="74-74"];
d21 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var specs = from pt in specProps select pt.Specification", span="47-47"];
d47 [cluster="Unk.GetSpecifications", label="Entry Unk.GetSpecifications", span=""];
d87 [cluster="lambda expression", label="Entry lambda expression", span="44-45"];
d39 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var ctor = typeInfo.GetConstructor((from sp in specProps select sp.Property.PropertyType).ToArray())", span="113-113"];
d107 [cluster="lambda expression", label="Exit lambda expression", span="79-79"];
d61 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="269-269"];
d62 [cluster="Unk.Single", label="Entry Unk.Single", span=""];
d63 [cluster="Unk.FromOptionSpecification", label="Entry Unk.FromOptionSpecification", span=""];
d112 [cluster="lambda expression", label="Entry lambda expression", span="89-89"];
d111 [cluster="lambda expression", label="Exit lambda expression", span="85-85"];
d26 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="preprocessorErrors.Any()", span="62-62"];
d55 [cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0"];
d41 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="instance = (T)ctor.Invoke(values)", span="119-119"];
d75 [cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", label="Entry CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12"];
d76 [cluster="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", label="Entry System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="40-40"];
d79 [cluster="Unk.Any", label="Entry Unk.Any", span=""];
d80 [cluster="NotParsed<T>.cstr", label="Entry NotParsed<T>.cstr", span=""];
d81 [cluster="CommandLine.Parsed<T>.Parsed(T)", label="Entry CommandLine.Parsed<T>.Parsed(T)", span="72-72"];
d36 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="typeInfo.IsMutable()", span="95-95"];
d67 [cluster="T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", label="Entry T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="71-71"];
d119 [cluster="lambda expression", label="Entry lambda expression", span="100-100"];
d123 [cluster="lambda expression", label="Entry lambda expression", span="101-101"];
d127 [cluster="lambda expression", label="Entry lambda expression", span="103-103"];
d131 [cluster="lambda expression", label="Entry lambda expression", span="104-104"];
d134 [cluster="lambda expression", label="Entry lambda expression", span="106-108"];
d138 [cluster="lambda expression", label="Entry lambda expression", span="109-109"];
d70 [cluster="Unk.GetParameters", label="Entry Unk.GetParameters", span=""];
d71 [cluster="Unk.ToLower", label="Entry Unk.ToLower", span=""];
d72 [cluster="string.ToLower()", label="Entry string.ToLower()", span="0-0"];
d73 [cluster="Unk.CreateDefaultForImmutable", label="Entry Unk.CreateDefaultForImmutable", span=""];
d46 [cluster="Unk.Return", label="Entry Unk.Return", span=""];
d68 [cluster="Unk.ToArray", label="Entry Unk.ToArray", span=""];
d144 [cluster="lambda expression", label="Entry lambda expression", span="116-116"];
d147 [cluster="lambda expression", label="Entry lambda expression", span="117-117"];
d2 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Exit CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="14-14"];
d5 [cluster="lambda expression", label="var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer))", span="24-24"];
d12 [cluster="lambda expression", label="NameLookup.Contains(name, optionSpecs, nameComparer)", span="24-24"];
d6 [cluster="lambda expression", label="var explodedTokens = Tokenizer.ExplodeOptionList(\r\n                            tokens,\r\n                            name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer))", span="25-27"];
d16 [cluster="lambda expression", label="NameLookup.HavingSeparator(name, optionSpecs, nameComparer)", span="27-27"];
d4 [cluster="lambda expression", label="Entry lambda expression", span="22-29"];
d27 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="return new NotParsed<T>(makeDefault(), preprocessorErrors);", span="64-64"];
d82 [cluster="lambda expression", label="Entry lambda expression", span="42-42"];
d152 [label="CSharpx.Maybe<System.Func<T>>", span=""];
d153 [label=specProps, span=""];
d93 [cluster="lambda expression", label="Entry lambda expression", span="53-57"];
d95 [cluster="lambda expression", label="Exit lambda expression", span="53-57"];
d96 [cluster="System.Type.IsMutable()", label="Entry System.Type.IsMutable()", span="128-128"];
d66 [cluster="System.Activator.CreateInstance<T>()", label="Entry System.Activator.CreateInstance<T>()", span="0-0"];
d97 [cluster="Unk.>", label="Entry Unk.>", span=""];
d98 [cluster="lambda expression", label="Entry lambda expression", span="55-55"];
d50 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
d51 [cluster="CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)", label="Entry CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)", span="11-11"];
d52 [cluster="System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", label="Entry System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="11-11"];
d154 [label="System.StringComparer", span=""];
d155 [label=optionSpecs, span=""];
d103 [cluster="lambda expression", label="Exit lambda expression", span="74-74"];
d104 [cluster="CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", label="Entry CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="23-23"];
d156 [label="System.Globalization.CultureInfo", span=""];
d108 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="13-13"];
d157 [label=token, span=""];
d114 [cluster="lambda expression", label="Exit lambda expression", span="89-89"];
d115 [cluster="string.MatchName(string, string, System.StringComparer)", label="Entry string.MatchName(string, string, System.StringComparer)", span="8-8"];
d116 [cluster="lambda expression", label="Entry lambda expression", span="97-97"];
d48 [cluster="Unk.ThrowingValidate", label="Entry Unk.ThrowingValidate", span=""];
d49 [cluster="System.Collections.IEnumerable.OfType<TResult>()", label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0"];
d89 [cluster="lambda expression", label="Exit lambda expression", span="44-45"];
d88 [cluster="lambda expression", label="SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>())", span="44-45"];
d69 [cluster="Unk.GetConstructor", label="Entry Unk.GetConstructor", span=""];
d74 [cluster="Unk.Invoke", label="Entry Unk.Invoke", span=""];
d65 [cluster="Unk.IsMutable", label="Entry Unk.IsMutable", span=""];
d121 [cluster="lambda expression", label="Exit lambda expression", span="100-100"];
d120 [cluster="lambda expression", label="sp.Value.IsJust()", span="100-100"];
d125 [cluster="lambda expression", label="Exit lambda expression", span="101-101"];
d124 [cluster="lambda expression", label="sp.Value.FromJust()", span="101-101"];
d129 [cluster="lambda expression", label="Exit lambda expression", span="103-103"];
d128 [cluster="lambda expression", label="sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust()", span="103-103"];
d133 [cluster="lambda expression", label="Exit lambda expression", span="104-104"];
d132 [cluster="lambda expression", label="sp.Specification.DefaultValue.FromJust()", span="104-104"];
d136 [cluster="lambda expression", label="Exit lambda expression", span="106-108"];
d135 [cluster="lambda expression", label="sp.Value.IsNothing()\r\n                            && sp.Specification.TargetType == TargetType.Sequence\r\n                            && sp.Specification.DefaultValue.MatchNothing()", span="106-108"];
d140 [cluster="lambda expression", label="Exit lambda expression", span="109-109"];
d139 [cluster="lambda expression", label="sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray()", span="109-109"];
d146 [cluster="lambda expression", label="Exit lambda expression", span="116-116"];
d145 [cluster="lambda expression", label=v, span="116-116"];
d149 [cluster="lambda expression", label="Exit lambda expression", span="117-117"];
d148 [cluster="lambda expression", label=d, span="117-117"];
d150 [label="System.StringComparer", span=""];
d9 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="13-13"];
d11 [cluster="lambda expression", label="Entry lambda expression", span="24-24"];
d151 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
d13 [cluster="lambda expression", label="Exit lambda expression", span="24-24"];
d14 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
d7 [cluster="lambda expression", label="return explodedTokens;", span="28-28"];
d10 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", span="46-46"];
d15 [cluster="lambda expression", label="Entry lambda expression", span="27-27"];
d17 [cluster="lambda expression", label="Exit lambda expression", span="27-27"];
d18 [cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16"];
d8 [cluster="lambda expression", label="Exit lambda expression", span="22-29"];
d53 [cluster="CommandLine.NotParsed<T>.NotParsed(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", label="Entry CommandLine.NotParsed<T>.NotParsed(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="142-142"];
d54 [cluster="System.Func<TResult>.Invoke()", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
d84 [cluster="lambda expression", label="Exit lambda expression", span="42-42"];
d83 [cluster="lambda expression", label="f().GetType()", span="42-42"];
d100 [cluster="lambda expression", label="Exit lambda expression", span="55-55"];
d99 [cluster="lambda expression", label="f()", span="55-55"];
d118 [cluster="lambda expression", label="Exit lambda expression", span="97-97"];
d117 [cluster="lambda expression", label="f()", span="97-97"];
d90 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", label="Entry CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="105-105"];
d91 [cluster="CSharpx.Maybe.Nothing<T>()", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
d92 [cluster="CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)", label="Entry CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)", span="21-21"];
d122 [cluster="CSharpx.Maybe<T>.IsJust<T>()", label="Entry CSharpx.Maybe<T>.IsJust<T>()", span="326-326"];
d126 [cluster="CSharpx.Maybe<T>.FromJust<T>()", label="Entry CSharpx.Maybe<T>.FromJust<T>()", span="342-342"];
d130 [cluster="CSharpx.Maybe<T>.IsNothing<T>()", label="Entry CSharpx.Maybe<T>.IsNothing<T>()", span="334-334"];
d137 [cluster="CSharpx.Maybe<T>.MatchNothing()", label="Entry CSharpx.Maybe<T>.MatchNothing()", span="57-57"];
d141 [cluster="System.Type.GetGenericArguments()", label="Entry System.Type.GetGenericArguments()", span="0-0"];
d142 [cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0"];
d143 [cluster="System.Type.CreateEmptyArray()", label="Entry System.Type.CreateEmptyArray()", span="114-114"];
d85 [cluster="Unk.f", label="Entry Unk.f", span=""];
d86 [cluster="Unk.GetType", label="Entry Unk.GetType", span=""];
m0_0 [cluster="CommandLine.Text.HelpText.HelpText()", file="ResultExtensions.cs", label="Entry CommandLine.Text.HelpText.HelpText()", span="33-33"];
m0_1 [cluster="CommandLine.Text.HelpText.HelpText()", file="ResultExtensions.cs", label="Exit CommandLine.Text.HelpText.HelpText()", span="33-33"];
m0_2 [cluster="CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ResultExtensions.cs", label="var ok = (Ok<TSuccess, TMessage>)result", span="16-16"];
m0_4 [cluster="CommandLine.Text.HelpText.HelpText(string)", file="ResultExtensions.cs", label="Entry CommandLine.Text.HelpText.HelpText(string)", span="56-56"];
m0_3 [cluster="CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ResultExtensions.cs", label="return ok.Value.Messages;", span="17-17"];
m0_5 [cluster="CommandLine.Text.HelpText.HelpText(string)", file="ResultExtensions.cs", label="Exit CommandLine.Text.HelpText.HelpText(string)", span="56-56"];
m0_88 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", file="ResultExtensions.cs", label="Entry CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", span="321-321"];
m0_96 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", file="ResultExtensions.cs", label="throw new ArgumentNullException(''parserResult'');", span="323-323"];
m0_98 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", file="ResultExtensions.cs", label="throw new ArgumentNullException(''current'');", span="324-324"];
m0_95 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", file="ResultExtensions.cs", label="parserResult == null", span="323-323"];
m0_97 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", file="ResultExtensions.cs", label="current == null", span="324-324"];
m0_104 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", file="ResultExtensions.cs", label="current.AddPreOptionsLine(string.Concat(Environment.NewLine, current.SentenceBuilder.ErrorsHeadingText()))", span="338-338"];
m0_107 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", file="ResultExtensions.cs", label="current.AddPreOptionsLine(line)", span="342-342"];
m0_102 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", file="ResultExtensions.cs", label="string.IsNullOrEmpty(errors)", span="333-333"];
m0_100 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", file="ResultExtensions.cs", label="return current;", span="328-328"];
m0_103 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", file="ResultExtensions.cs", label="return current;", span="335-335"];
m0_108 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", file="ResultExtensions.cs", label="return current;", span="345-345"];
m0_99 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", file="ResultExtensions.cs", label="FilterMeaningfulErrors(((NotParsed<T>)parserResult).Errors).Empty()", span="326-326"];
m0_105 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", file="ResultExtensions.cs", label="var lines = errors.Split(new[] { Environment.NewLine }, StringSplitOptions.None)", span="339-339"];
m0_106 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", file="ResultExtensions.cs", label=lines, span="340-340"];
m0_101 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", file="ResultExtensions.cs", label="var errors = RenderParsingErrorsText(parserResult, current.SentenceBuilder.FormatError, 2)", span="331-331"];
m0_109 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", file="ResultExtensions.cs", label="Exit CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", span="321-321"];
m0_110 [cluster="System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", file="ResultExtensions.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", span="62-62"];
m0_171 [cluster="System.Text.StringBuilder.AppendLine(string)", file="ResultExtensions.cs", label="Entry System.Text.StringBuilder.AppendLine(string)", span="0-0"];
m0_111 [cluster="CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, int)", file="ResultExtensions.cs", label="Entry CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, int)", span="448-448"];
m0_155 [cluster="CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, int)", file="ResultExtensions.cs", label="throw new ArgumentNullException(''parserResult'');", span="453-453"];
m0_154 [cluster="CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, int)", file="ResultExtensions.cs", label="parserResult == null", span="453-453"];
m0_162 [cluster="CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, int)", file="ResultExtensions.cs", label="line.Append(indent.Spaces())", span="465-465"];
m0_163 [cluster="CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, int)", file="ResultExtensions.cs", label="line.Append(formatError(error))", span="467-467"];
m0_164 [cluster="CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, int)", file="ResultExtensions.cs", label="text.AppendLine(line.ToString())", span="469-469"];
m0_165 [cluster="CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, int)", file="ResultExtensions.cs", label="return text.ToString();", span="472-472"];
m0_156 [cluster="CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, int)", file="ResultExtensions.cs", label="var meaningfulErrors = FilterMeaningfulErrors(((NotParsed<T>)parserResult).Errors)", span="455-455"];
m0_158 [cluster="CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, int)", file="ResultExtensions.cs", label="return string.Empty;", span="458-458"];
m0_161 [cluster="CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, int)", file="ResultExtensions.cs", label="var line = new StringBuilder()", span="464-464"];
m0_160 [cluster="CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, int)", file="ResultExtensions.cs", label=meaningfulErrors, span="462-462"];
m0_159 [cluster="CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, int)", file="ResultExtensions.cs", label="var text = new StringBuilder()", span="461-461"];
m0_157 [cluster="CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, int)", file="ResultExtensions.cs", label="meaningfulErrors.Empty()", span="456-456"];
m0_166 [cluster="CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, int)", file="ResultExtensions.cs", label="Exit CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, int)", span="448-448"];
m0_50 [cluster="CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", file="ResultExtensions.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", span="134-134"];
m0_359 [cluster="T.ToStringInvariant<T>()", file="ResultExtensions.cs", label="Entry T.ToStringInvariant<T>()", span="14-14"];
m0_284 [cluster="string.PadRight(int)", file="ResultExtensions.cs", label="Entry string.PadRight(int)", span="0-0"];
m0_178 [cluster="System.Text.StringBuilder.SafeToString()", file="ResultExtensions.cs", label="Entry System.Text.StringBuilder.SafeToString()", span="42-42"];
m0_177 [cluster="System.Text.StringBuilder.AppendWhen(bool, params string[])", file="ResultExtensions.cs", label="Entry System.Text.StringBuilder.AppendWhen(bool, params string[])", span="9-9"];
m0_241 [cluster="CommandLine.Text.HelpText.CreateVersionEntry()", file="ResultExtensions.cs", label="Exit CommandLine.Text.HelpText.CreateVersionEntry()", span="595-595"];
m0_240 [cluster="CommandLine.Text.HelpText.CreateVersionEntry()", file="ResultExtensions.cs", label="return OptionSpecification.NewSwitch(\r\n                string.Empty,\r\n                ''version'',\r\n                false,\r\n                sentenceBuilder.VersionCommandText(AddDashesToOption),\r\n                string.Empty);", span="597-602"];
m0_218 [cluster="CommandLine.Text.HelpText.CreateVersionEntry()", file="ResultExtensions.cs", label="Entry CommandLine.Text.HelpText.CreateVersionEntry()", span="595-595"];
m0_76 [cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", file="ResultExtensions.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0"];
m0_303 [cluster="System.Text.StringBuilder.AppendFormat(string, object)", file="ResultExtensions.cs", label="Entry System.Text.StringBuilder.AppendFormat(string, object)", span="0-0"];
m0_55 [cluster="CommandLine.Text.HelpText.AddOptions<T>(T)", file="ResultExtensions.cs", label="Entry CommandLine.Text.HelpText.AddOptions<T>(T)", span="383-383"];
m0_129 [cluster="CommandLine.Text.HelpText.AddOptions<T>(T)", file="ResultExtensions.cs", label="return AddOptionsImpl(\r\n                this.GetSpecificationsFromType(options),\r\n                SentenceBuilder.RequiredWord(),\r\n                MaximumDisplayWidth);", span="387-390"];
m0_128 [cluster="CommandLine.Text.HelpText.AddOptions<T>(T)", file="ResultExtensions.cs", label="throw new ArgumentNullException(''options'');", span="385-385"];
m0_127 [cluster="CommandLine.Text.HelpText.AddOptions<T>(T)", file="ResultExtensions.cs", label="Equals(options, default(T))", span="385-385"];
m0_130 [cluster="CommandLine.Text.HelpText.AddOptions<T>(T)", file="ResultExtensions.cs", label="Exit CommandLine.Text.HelpText.AddOptions<T>(T)", span="383-383"];
m0_119 [cluster="CommandLine.Text.HelpText.ToString()", file="ResultExtensions.cs", label="Entry CommandLine.Text.HelpText.ToString()", span="479-479"];
m0_173 [cluster="CommandLine.Text.HelpText.ToString()", file="ResultExtensions.cs", label="return\r\n                new StringBuilder(\r\n                    heading.SafeLength() + copyright.SafeLength() + preOptionsHelp.SafeLength() +\r\n                        optionsHelp.SafeLength() + ExtraLength).Append(heading)\r\n                    .AppendWhen(!string.IsNullOrEmpty(copyright), Environment.NewLine, copyright)\r\n                    .AppendWhen(preOptionsHelp.Length > 0, Environment.NewLine, preOptionsHelp.ToString())\r\n                    .AppendWhen(\r\n                        optionsHelp != null && optionsHelp.Length > 0,\r\n                        Environment.NewLine,\r\n                        Environment.NewLine,\r\n                        optionsHelp.SafeToString())\r\n                    .AppendWhen(postOptionsHelp.Length > 0, Environment.NewLine, postOptionsHelp.ToString())\r\n                .ToString();", span="482-494"];
m0_172 [cluster="CommandLine.Text.HelpText.ToString()", file="ResultExtensions.cs", label="int ExtraLength = 10", span="481-481"];
m0_174 [cluster="CommandLine.Text.HelpText.ToString()", file="ResultExtensions.cs", label="Exit CommandLine.Text.HelpText.ToString()", span="479-479"];
m0_175 [cluster="string.SafeLength()", file="ResultExtensions.cs", label="Entry string.SafeLength()", span="39-39"];
m0_123 [cluster="CommandLine.Text.HelpText.AddPostOptionsLine(string)", file="ResultExtensions.cs", label="Entry CommandLine.Text.HelpText.AddPostOptionsLine(string)", span="373-373"];
m0_124 [cluster="CommandLine.Text.HelpText.AddPostOptionsLine(string)", file="ResultExtensions.cs", label="return AddLine(postOptionsHelp, value);", span="375-375"];
m0_125 [cluster="CommandLine.Text.HelpText.AddPostOptionsLine(string)", file="ResultExtensions.cs", label="Exit CommandLine.Text.HelpText.AddPostOptionsLine(string)", span="373-373"];
m0_112 [cluster="string.IsNullOrEmpty(string)", file="ResultExtensions.cs", label="Entry string.IsNullOrEmpty(string)", span="0-0"];
m0_325 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="ResultExtensions.cs", label="Entry CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", span="754-754"];
m0_336 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="ResultExtensions.cs", label=AddDashesToOption, span="770-770"];
m0_341 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="ResultExtensions.cs", label=AddDashesToOption, span="781-781"];
m0_335 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="ResultExtensions.cs", label="++specLength", span="769-769"];
m0_337 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="ResultExtensions.cs", label="++specLength", span="772-772"];
m0_338 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="ResultExtensions.cs", label="specLength += metaLength", span="775-775"];
m0_340 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="ResultExtensions.cs", label="specLength += spec.LongName.Length", span="780-780"];
m0_342 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="ResultExtensions.cs", label="specLength += 2", span="783-783"];
m0_343 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="ResultExtensions.cs", label="specLength += metaLength", span="786-786"];
m0_328 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="ResultExtensions.cs", label="var specLength = 0", span="756-756"];
m0_329 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="ResultExtensions.cs", label="var hasShort = spec.ShortName.Length > 0", span="758-758"];
m0_330 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="ResultExtensions.cs", label="var hasLong = spec.LongName.Length > 0", span="759-759"];
m0_332 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="ResultExtensions.cs", label="spec.MetaValue.Length > 0", span="762-762"];
m0_333 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="ResultExtensions.cs", label="metaLength = spec.MetaValue.Length + 1", span="764-764"];
m0_334 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="ResultExtensions.cs", label=hasShort, span="767-767"];
m0_331 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="ResultExtensions.cs", label="var metaLength = 0", span="761-761"];
m0_339 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="ResultExtensions.cs", label=hasLong, span="778-778"];
m0_345 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="ResultExtensions.cs", label="specLength += 2", span="791-791"];
m0_346 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="ResultExtensions.cs", label="return specLength;", span="794-794"];
m0_344 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="ResultExtensions.cs", label="hasShort && hasLong", span="789-789"];
m0_347 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="ResultExtensions.cs", label="Exit CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", span="754-754"];
m0_141 [cluster="CommandLine.Text.HelpText.AdaptVerbsToSpecifications(System.Collections.Generic.IEnumerable<System.Type>)", file="ResultExtensions.cs", label="Entry CommandLine.Text.HelpText.AdaptVerbsToSpecifications(System.Collections.Generic.IEnumerable<System.Type>)", span="554-554"];
m0_224 [cluster="CommandLine.Text.HelpText.AdaptVerbsToSpecifications(System.Collections.Generic.IEnumerable<System.Type>)", file="ResultExtensions.cs", label="return (from verbTuple in Verb.SelectFromTypes(types)\r\n                    select\r\n                        OptionSpecification.NewSwitch(\r\n                            string.Empty,\r\n                            verbTuple.Item1.Name,\r\n                            false,\r\n                            verbTuple.Item1.HelpText,\r\n                            string.Empty)).Concat(new[] { CreateHelpEntry(), CreateVersionEntry() });", span="556-563"];
m0_225 [cluster="CommandLine.Text.HelpText.AdaptVerbsToSpecifications(System.Collections.Generic.IEnumerable<System.Type>)", file="ResultExtensions.cs", label="Exit CommandLine.Text.HelpText.AdaptVerbsToSpecifications(System.Collections.Generic.IEnumerable<System.Type>)", span="554-554"];
m0_288 [cluster="string.Trim()", file="ResultExtensions.cs", label="Entry string.Trim()", span="0-0"];
m0_176 [cluster="System.Text.StringBuilder.SafeLength()", file="ResultExtensions.cs", label="Entry System.Text.StringBuilder.SafeLength()", span="47-47"];
m0_226 [cluster="CommandLine.Core.Verb.SelectFromTypes(System.Collections.Generic.IEnumerable<System.Type>)", file="ResultExtensions.cs", label="Entry CommandLine.Core.Verb.SelectFromTypes(System.Collections.Generic.IEnumerable<System.Type>)", span="40-40"];
m0_287 [cluster="string.FormatInvariant(params object[])", file="ResultExtensions.cs", label="Entry string.FormatInvariant(params object[])", span="19-19"];
m0_23 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="ResultExtensions.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m0_209 [cluster="string.Substring(int)", file="ResultExtensions.cs", label="Entry string.Substring(int)", span="0-0"];
m0_45 [cluster="CommandLine.Text.HelpText.FilterMeaningfulErrors(System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="ResultExtensions.cs", label="Entry CommandLine.Text.HelpText.FilterMeaningfulErrors(System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="497-497"];
m0_179 [cluster="CommandLine.Text.HelpText.FilterMeaningfulErrors(System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="ResultExtensions.cs", label="return errors.Where(e => e.Tag != ErrorType.HelpRequestedError && e.Tag != ErrorType.HelpVerbRequestedError);", span="499-499"];
m0_180 [cluster="CommandLine.Text.HelpText.FilterMeaningfulErrors(System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="ResultExtensions.cs", label="Exit CommandLine.Text.HelpText.FilterMeaningfulErrors(System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="497-497"];
m0_302 [cluster="System.Text.StringBuilder.AppendWhen(bool, params char[])", file="ResultExtensions.cs", label="Entry System.Text.StringBuilder.AppendWhen(bool, params char[])", span="21-21"];
m0_53 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", file="ResultExtensions.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", span="0-0"];
m0_48 [cluster="CommandLine.Infrastructure.ReflectionHelper.GetAttribute<TAttribute>()", file="ResultExtensions.cs", label="Entry CommandLine.Infrastructure.ReflectionHelper.GetAttribute<TAttribute>()", span="11-11"];
m0_237 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="ResultExtensions.cs", label="Entry CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", span="612-612"];
m0_245 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="ResultExtensions.cs", label="optionsHelp.Append(''  '')", span="614-614"];
m0_248 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="ResultExtensions.cs", label="name.Append(AddOptionName(maxLength, (OptionSpecification)specification))", span="618-618"];
m0_249 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="ResultExtensions.cs", label="name.Append(AddValueName(maxLength, (ValueSpecification)specification))", span="622-622"];
m0_250 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="ResultExtensions.cs", label="optionsHelp.Append(name.Length < maxLength ? name.ToString().PadRight(maxLength) : name.ToString())", span="625-625"];
m0_251 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="ResultExtensions.cs", label="optionsHelp.Append(''    '')", span="627-627"];
m0_253 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="ResultExtensions.cs", label="addEnumValuesToHelpText && specification.EnumValues.Any()", span="630-630"];
m0_265 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="ResultExtensions.cs", label="optionsHelp.Append(words[i])", span="655-655"];
m0_268 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="ResultExtensions.cs", label="optionsHelp.Append('' '')", span="659-659"];
m0_271 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="ResultExtensions.cs", label="optionsHelp.Append(words[i].Substring(0, widthOfHelpText))", span="665-665"];
m0_275 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="ResultExtensions.cs", label="optionsHelp.AppendWhen(optionHelpText.Length > 0, Environment.NewLine,\r\n                        new string(' ', maxLength + 6))", span="676-677"];
m0_277 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="ResultExtensions.cs", label="optionsHelp.Append(optionHelpText)", span="682-682"];
m0_278 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="ResultExtensions.cs", label="optionsHelp.Append(Environment.NewLine)", span="683-683"];
m0_279 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="ResultExtensions.cs", label="optionsHelp.AppendWhen(additionalNewLineAfterOption, Environment.NewLine)", span="684-684"];
m0_280 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="ResultExtensions.cs", label="return this;", span="686-686"];
m0_246 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="ResultExtensions.cs", label="var name = new StringBuilder(maxLength)", span="615-615"];
m0_247 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="ResultExtensions.cs", label="specification.Tag == SpecificationType.Option", span="616-616"];
m0_252 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="ResultExtensions.cs", label="var optionHelpText = specification.HelpText", span="628-628"];
m0_254 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="ResultExtensions.cs", label="optionHelpText += '' Valid values: '' + string.Join('', '', specification.EnumValues)", span="632-632"];
m0_255 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="ResultExtensions.cs", label="specification.DefaultValue.IsJust()", span="635-635"];
m0_264 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="ResultExtensions.cs", label="words[i].Length < (widthOfHelpText - wordBuffer)", span="653-653"];
m0_261 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="ResultExtensions.cs", label="var words = optionHelpText.Split(new[] { ' ' })", span="650-650"];
m0_262 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="ResultExtensions.cs", label="var i = 0", span="651-651"];
m0_266 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="ResultExtensions.cs", label="wordBuffer += words[i].Length", span="656-656"];
m0_267 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="ResultExtensions.cs", label="(widthOfHelpText - wordBuffer) > 1 && i != words.Length - 1", span="657-657"];
m0_269 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="ResultExtensions.cs", label="wordBuffer++", span="660-660"];
m0_270 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="ResultExtensions.cs", label="words[i].Length >= widthOfHelpText && wordBuffer == 0", span="663-663"];
m0_272 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="ResultExtensions.cs", label="wordBuffer = widthOfHelpText", span="666-666"];
m0_274 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="ResultExtensions.cs", label="optionHelpText = optionHelpText.Substring(Math.Min(wordBuffer, optionHelpText.Length)).Trim()", span="675-675"];
m0_276 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="ResultExtensions.cs", label="optionHelpText.Length > widthOfHelpText", span="679-679"];
m0_256 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="ResultExtensions.cs", label="optionHelpText = ''(Default: {0}) ''.FormatLocal(specification.DefaultValue.FromJust()) + optionHelpText", span="637-637"];
m0_258 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="ResultExtensions.cs", label="optionHelpText = ''{0} ''.FormatInvariant(requiredWord) + optionHelpText", span="642-642"];
m0_259 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="ResultExtensions.cs", label="!string.IsNullOrEmpty(optionHelpText)", span="645-645"];
m0_257 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="ResultExtensions.cs", label="specification.Required", span="640-640"];
m0_260 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="ResultExtensions.cs", label="var wordBuffer = 0", span="649-649"];
m0_263 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="ResultExtensions.cs", label="i < words.Length", span="651-651"];
m0_273 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="ResultExtensions.cs", label="i++", span="651-651"];
m0_281 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="ResultExtensions.cs", label="Exit CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", span="612-612"];
m0_304 [cluster="System.Text.StringBuilder.AppendFormatWhen(bool, string, params object[])", file="ResultExtensions.cs", label="Entry System.Text.StringBuilder.AppendFormatWhen(bool, string, params object[])", span="33-33"];
m0_114 [cluster="string.Concat(string, string)", file="ResultExtensions.cs", label="Entry string.Concat(string, string)", span="0-0"];
m0_182 [cluster="lambda expression", file="ResultExtensions.cs", label="Entry lambda expression", span="499-499"];
m0_221 [cluster="lambda expression", file="ResultExtensions.cs", label="Entry lambda expression", span="548-548"];
m0_223 [cluster="lambda expression", file="ResultExtensions.cs", label="Exit lambda expression", span="548-548"];
m0_222 [cluster="lambda expression", file="ResultExtensions.cs", label="v.Index", span="548-548"];
m0_56 [cluster="lambda expression", file="ResultExtensions.cs", label="Entry lambda expression", span="264-264"];
m0_86 [cluster="lambda expression", file="ResultExtensions.cs", label="DefaultParsingErrorsHandler(parserResult, current)", span="303-303"];
m0_93 [cluster="lambda expression", file="ResultExtensions.cs", label="DefaultParsingErrorsHandler(parserResult, current)", span="313-313"];
m0_90 [cluster="lambda expression", file="ResultExtensions.cs", label="DefaultParsingErrorsHandler(pr, current)", span="310-310"];
m0_79 [cluster="lambda expression", file="ResultExtensions.cs", label="Entry lambda expression", span="296-296"];
m0_82 [cluster="lambda expression", file="ResultExtensions.cs", label="Entry lambda expression", span="301-301"];
m0_58 [cluster="lambda expression", file="ResultExtensions.cs", label="Exit lambda expression", span="264-264"];
m0_57 [cluster="lambda expression", file="ResultExtensions.cs", label="e.Tag == ErrorType.NoVerbSelectedError", span="264-264"];
m0_85 [cluster="lambda expression", file="ResultExtensions.cs", label="Entry lambda expression", span="303-303"];
m0_87 [cluster="lambda expression", file="ResultExtensions.cs", label="Exit lambda expression", span="303-303"];
m0_92 [cluster="lambda expression", file="ResultExtensions.cs", label="Entry lambda expression", span="313-313"];
m0_94 [cluster="lambda expression", file="ResultExtensions.cs", label="Exit lambda expression", span="313-313"];
m0_89 [cluster="lambda expression", file="ResultExtensions.cs", label="Entry lambda expression", span="310-310"];
m0_91 [cluster="lambda expression", file="ResultExtensions.cs", label="Exit lambda expression", span="310-310"];
m0_81 [cluster="lambda expression", file="ResultExtensions.cs", label="Exit lambda expression", span="296-296"];
m0_80 [cluster="lambda expression", file="ResultExtensions.cs", label="e.Tag == ErrorType.VersionRequestedError", span="296-296"];
m0_84 [cluster="lambda expression", file="ResultExtensions.cs", label="Exit lambda expression", span="301-301"];
m0_83 [cluster="lambda expression", file="ResultExtensions.cs", label="e.Tag == ErrorType.HelpVerbRequestedError", span="301-301"];
m0_183 [cluster="lambda expression", file="ResultExtensions.cs", label="e.Tag != ErrorType.HelpRequestedError && e.Tag != ErrorType.HelpVerbRequestedError", span="499-499"];
m0_184 [cluster="lambda expression", file="ResultExtensions.cs", label="Exit lambda expression", span="499-499"];
m0_282 [cluster="CommandLine.Text.HelpText.AddOptionName(int, CommandLine.Core.OptionSpecification)", file="ResultExtensions.cs", label="Entry CommandLine.Text.HelpText.AddOptionName(int, CommandLine.Core.OptionSpecification)", span="689-689"];
m0_292 [cluster="CommandLine.Text.HelpText.AddOptionName(int, CommandLine.Core.OptionSpecification)", file="ResultExtensions.cs", label="optionName.AppendWhen(addDashesToOption, '-')", span="694-694"];
m0_297 [cluster="CommandLine.Text.HelpText.AddOptionName(int, CommandLine.Core.OptionSpecification)", file="ResultExtensions.cs", label="optionName.AppendWhen(addDashesToOption, ''--'')", span="701-701"];
m0_290 [cluster="CommandLine.Text.HelpText.AddOptionName(int, CommandLine.Core.OptionSpecification)", file="ResultExtensions.cs", label="var optionName = new StringBuilder(maxLength)", span="691-691"];
m0_291 [cluster="CommandLine.Text.HelpText.AddOptionName(int, CommandLine.Core.OptionSpecification)", file="ResultExtensions.cs", label="specification.ShortName.Length > 0", span="692-692"];
m0_293 [cluster="CommandLine.Text.HelpText.AddOptionName(int, CommandLine.Core.OptionSpecification)", file="ResultExtensions.cs", label="optionName.AppendFormat(''{0}'', specification.ShortName)", span="695-695"];
m0_296 [cluster="CommandLine.Text.HelpText.AddOptionName(int, CommandLine.Core.OptionSpecification)", file="ResultExtensions.cs", label="specification.LongName.Length > 0", span="699-699"];
m0_298 [cluster="CommandLine.Text.HelpText.AddOptionName(int, CommandLine.Core.OptionSpecification)", file="ResultExtensions.cs", label="optionName.AppendFormat(''{0}'', specification.LongName)", span="702-702"];
m0_294 [cluster="CommandLine.Text.HelpText.AddOptionName(int, CommandLine.Core.OptionSpecification)", file="ResultExtensions.cs", label="optionName.AppendFormatWhen(specification.MetaValue.Length > 0, '' {0}'', specification.MetaValue)", span="696-696"];
m0_295 [cluster="CommandLine.Text.HelpText.AddOptionName(int, CommandLine.Core.OptionSpecification)", file="ResultExtensions.cs", label="optionName.AppendWhen(specification.LongName.Length > 0, '', '')", span="697-697"];
m0_299 [cluster="CommandLine.Text.HelpText.AddOptionName(int, CommandLine.Core.OptionSpecification)", file="ResultExtensions.cs", label="optionName.AppendFormatWhen(specification.MetaValue.Length > 0, ''={0}'', specification.MetaValue)", span="703-703"];
m0_300 [cluster="CommandLine.Text.HelpText.AddOptionName(int, CommandLine.Core.OptionSpecification)", file="ResultExtensions.cs", label="return optionName.ToString();", span="705-705"];
m0_301 [cluster="CommandLine.Text.HelpText.AddOptionName(int, CommandLine.Core.OptionSpecification)", file="ResultExtensions.cs", label="Exit CommandLine.Text.HelpText.AddOptionName(int, CommandLine.Core.OptionSpecification)", span="689-689"];
m0_228 [cluster="Unk.Concat", file="ResultExtensions.cs", label="Entry Unk.Concat", span=""];
m0_25 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)", file="ResultExtensions.cs", label="Entry CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)", span="227-227"];
m0_41 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)", file="ResultExtensions.cs", label="auto.AddOptions(parserResult.Value)", span="271-271"];
m0_40 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)", file="ResultExtensions.cs", label="auto.AddVerbs(parserResult.VerbTypes.ToArray())", span="267-267"];
m0_31 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)", file="ResultExtensions.cs", label="auto = onError(auto)", span="248-248"];
m0_38 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)", file="ResultExtensions.cs", label="(verbsIndex && parserResult.VerbTypes.Any()) || errors.Any(e => e.Tag == ErrorType.NoVerbSelectedError)", span="264-264"];
m0_30 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)", file="ResultExtensions.cs", label="FilterMeaningfulErrors(errors).Any()", span="246-246"];
m0_26 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)", file="ResultExtensions.cs", label="var auto = new HelpText\r\n                       {\r\n                           Heading = HeadingInfo.Default,\r\n                           Copyright = CopyrightInfo.Default,\r\n                           AdditionalNewLineAfterOption = true,\r\n                           AddDashesToOption = !verbsIndex\r\n                       }", span="232-238"];
m0_42 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)", file="ResultExtensions.cs", label="return auto;", span="274-274"];
m0_39 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)", file="ResultExtensions.cs", label="auto.AddDashesToOption = false", span="266-266"];
m0_27 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)", file="ResultExtensions.cs", label="var errors = Enumerable.Empty<Error>()", span="240-240"];
m0_32 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)", file="ResultExtensions.cs", label="var license = ReflectionHelper.GetAttribute<AssemblyLicenseAttribute>()", span="252-252"];
m0_34 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)", file="ResultExtensions.cs", label="license.FromJust().AddToHelpText(auto, true)", span="255-255"];
m0_37 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)", file="ResultExtensions.cs", label="usage.FromJust().AddToHelpText(auto, true)", span="261-261"];
m0_33 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)", file="ResultExtensions.cs", label="license.IsJust()", span="253-253"];
m0_36 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)", file="ResultExtensions.cs", label="usage.IsJust()", span="259-259"];
m0_29 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)", file="ResultExtensions.cs", label="errors = ((NotParsed<T>)parserResult).Errors", span="244-244"];
m0_28 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)", file="ResultExtensions.cs", label="onError != null && parserResult.Tag == ParserResultType.NotParsed", span="242-242"];
m0_35 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)", file="ResultExtensions.cs", label="var usage = ReflectionHelper.GetAttribute<AssemblyUsageAttribute>()", span="258-258"];
m0_43 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)", file="ResultExtensions.cs", label="Exit CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)", span="227-227"];
m0_59 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", file="ResultExtensions.cs", label="Entry CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", span="287-287"];
m0_64 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", file="ResultExtensions.cs", label="return new HelpText(HeadingInfo.Default).AddPreOptionsLine(Environment.NewLine);", span="298-298"];
m0_67 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", file="ResultExtensions.cs", label="var err = errors.OfType<HelpVerbRequestedError>().Single()", span="306-306"];
m0_63 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", file="ResultExtensions.cs", label="errors.Any(e => e.Tag == ErrorType.VersionRequestedError)", span="296-296"];
m0_62 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", file="ResultExtensions.cs", label="var errors = ((NotParsed<T>)parserResult).Errors", span="294-294"];
m0_65 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", file="ResultExtensions.cs", label="!errors.Any(e => e.Tag == ErrorType.HelpVerbRequestedError)", span="301-301"];
m0_68 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", file="ResultExtensions.cs", label="err.Matched", span="307-307"];
m0_69 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", file="ResultExtensions.cs", label="var pr = new NotParsed<object>(err.Type.AutoDefault(), Enumerable.Empty<Error>())", span="309-309"];
m0_66 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", file="ResultExtensions.cs", label="return AutoBuild(parserResult, current => DefaultParsingErrorsHandler(parserResult, current));", span="303-303"];
m0_71 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", file="ResultExtensions.cs", label="return AutoBuild(parserResult, current => DefaultParsingErrorsHandler(parserResult, current), true);", span="313-313"];
m0_61 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", file="ResultExtensions.cs", label="throw new InvalidOperationException();", span="291-291"];
m0_70 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", file="ResultExtensions.cs", label="return AutoBuild(pr, current => DefaultParsingErrorsHandler(pr, current));", span="310-310"];
m0_60 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", file="ResultExtensions.cs", label="parserResult.Tag != ParserResultType.NotParsed", span="289-289"];
m0_72 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", file="ResultExtensions.cs", label="Exit CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", span="287-287"];
m0_168 [cluster="int.Spaces()", file="ResultExtensions.cs", label="Entry int.Spaces()", span="29-29"];
m0_51 [cluster="CommandLine.Text.MultilineTextAttribute.AddToHelpText(CommandLine.Text.HelpText, bool)", file="ResultExtensions.cs", label="Entry CommandLine.Text.MultilineTextAttribute.AddToHelpText(CommandLine.Text.HelpText, bool)", span="155-155"];
m0_170 [cluster="System.Text.StringBuilder.ToString()", file="ResultExtensions.cs", label="Entry System.Text.StringBuilder.ToString()", span="0-0"];
m0_167 [cluster="System.Text.StringBuilder.StringBuilder()", file="ResultExtensions.cs", label="Entry System.Text.StringBuilder.StringBuilder()", span="0-0"];
m0_54 [cluster="CommandLine.Text.HelpText.AddVerbs(params System.Type[])", file="ResultExtensions.cs", label="Entry CommandLine.Text.HelpText.AddVerbs(params System.Type[])", span="399-399"];
m0_138 [cluster="CommandLine.Text.HelpText.AddVerbs(params System.Type[])", file="ResultExtensions.cs", label="return AddOptionsImpl(\r\n                this.AdaptVerbsToSpecifications(types),\r\n                SentenceBuilder.RequiredWord(),\r\n                MaximumDisplayWidth);", span="404-407"];
m0_135 [cluster="CommandLine.Text.HelpText.AddVerbs(params System.Type[])", file="ResultExtensions.cs", label="throw new ArgumentNullException(''types'');", span="401-401"];
m0_136 [cluster="CommandLine.Text.HelpText.AddVerbs(params System.Type[])", file="ResultExtensions.cs", label="types.Length == 0", span="402-402"];
m0_134 [cluster="CommandLine.Text.HelpText.AddVerbs(params System.Type[])", file="ResultExtensions.cs", label="types == null", span="401-401"];
m0_137 [cluster="CommandLine.Text.HelpText.AddVerbs(params System.Type[])", file="ResultExtensions.cs", label="throw new ArgumentOutOfRangeException(''types'');", span="402-402"];
m0_139 [cluster="CommandLine.Text.HelpText.AddVerbs(params System.Type[])", file="ResultExtensions.cs", label="Exit CommandLine.Text.HelpText.AddVerbs(params System.Type[])", span="399-399"];
m0_115 [cluster="string.Split(string[], System.StringSplitOptions)", file="ResultExtensions.cs", label="Entry string.Split(string[], System.StringSplitOptions)", span="0-0"];
m0_285 [cluster="string.Join(string, System.Collections.Generic.IEnumerable<string>)", file="ResultExtensions.cs", label="Entry string.Join(string, System.Collections.Generic.IEnumerable<string>)", span="0-0"];
m0_206 [cluster="string.Split(params char[])", file="ResultExtensions.cs", label="Entry string.Split(params char[])", span="0-0"];
m0_78 [cluster="System.Type.AutoDefault()", file="ResultExtensions.cs", label="Entry System.Type.AutoDefault()", span="135-135"];
m0_24 [cluster="System.Text.StringBuilder.StringBuilder(int)", file="ResultExtensions.cs", label="Entry System.Text.StringBuilder.StringBuilder(int)", span="0-0"];
m0_77 [cluster="CommandLine.NotParsed<T>.NotParsed(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="ResultExtensions.cs", label="Entry CommandLine.NotParsed<T>.NotParsed(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="142-142"];
m0_227 [cluster="CommandLine.Core.OptionSpecification.NewSwitch(string, string, bool, string, string)", file="ResultExtensions.cs", label="Entry CommandLine.Core.OptionSpecification.NewSwitch(string, string, bool, string, string)", span="46-46"];
m0_49 [cluster="CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", file="ResultExtensions.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", span="149-149"];
m0_132 [cluster="CommandLine.Text.HelpText.GetSpecificationsFromType<T>(T)", file="ResultExtensions.cs", label="Entry CommandLine.Text.HelpText.GetSpecificationsFromType<T>(T)", span="540-540"];
m0_211 [cluster="CommandLine.Text.HelpText.GetSpecificationsFromType<T>(T)", file="ResultExtensions.cs", label="var optionSpecs = type.GetSpecifications(Specification.FromProperty)\r\n                    .OfType<OptionSpecification>()\r\n                    .Concat(new[] { CreateHelpEntry(), CreateVersionEntry() })", span="543-545"];
m0_210 [cluster="CommandLine.Text.HelpText.GetSpecificationsFromType<T>(T)", file="ResultExtensions.cs", label="var type = options.GetType()", span="542-542"];
m0_212 [cluster="CommandLine.Text.HelpText.GetSpecificationsFromType<T>(T)", file="ResultExtensions.cs", label="var valueSpecs = type.GetSpecifications(Specification.FromProperty)\r\n                .OfType<ValueSpecification>()\r\n                .OrderBy(v => v.Index)", span="546-548"];
m0_213 [cluster="CommandLine.Text.HelpText.GetSpecificationsFromType<T>(T)", file="ResultExtensions.cs", label="return Enumerable.Empty<Specification>()\r\n                .Concat(optionSpecs)\r\n                .Concat(valueSpecs);", span="549-551"];
m0_214 [cluster="CommandLine.Text.HelpText.GetSpecificationsFromType<T>(T)", file="ResultExtensions.cs", label="Exit CommandLine.Text.HelpText.GetSpecificationsFromType<T>(T)", span="540-540"];
m0_47 [cluster="System.Func<T, TResult>.Invoke(T)", file="ResultExtensions.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m0_44 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="ResultExtensions.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m0_6 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="ResultExtensions.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m0_181 [cluster="Unk.Where", file="ResultExtensions.cs", label="Entry Unk.Where", span=""];
m0_289 [cluster="string.String(char, int)", file="ResultExtensions.cs", label="Entry string.String(char, int)", span="0-0"];
m0_142 [cluster="CommandLine.Text.HelpText.AddOptions<T>(int, T)", file="ResultExtensions.cs", label="Entry CommandLine.Text.HelpText.AddOptions<T>(int, T)", span="416-416"];
m0_145 [cluster="CommandLine.Text.HelpText.AddOptions<T>(int, T)", file="ResultExtensions.cs", label="return AddOptionsImpl(\r\n                this.GetSpecificationsFromType(options),\r\n                SentenceBuilder.RequiredWord(),\r\n                maximumLength);", span="420-423"];
m0_144 [cluster="CommandLine.Text.HelpText.AddOptions<T>(int, T)", file="ResultExtensions.cs", label="throw new ArgumentNullException(''options'');", span="418-418"];
m0_143 [cluster="CommandLine.Text.HelpText.AddOptions<T>(int, T)", file="ResultExtensions.cs", label="Equals(options, default(T))", span="418-418"];
m0_146 [cluster="CommandLine.Text.HelpText.AddOptions<T>(int, T)", file="ResultExtensions.cs", label="Exit CommandLine.Text.HelpText.AddOptions<T>(int, T)", span="416-416"];
m0_208 [cluster="System.Math.Min(int, int)", file="ResultExtensions.cs", label="Entry System.Math.Min(int, int)", span="0-0"];
m0_220 [cluster="System.Collections.Generic.IEnumerable<TSource>.OrderBy<TSource, TKey>(System.Func<TSource, TKey>)", file="ResultExtensions.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.OrderBy<TSource, TKey>(System.Func<TSource, TKey>)", span="0-0"];
m0_312 [cluster="System.Text.StringBuilder.AppendFormat(string, object, object)", file="ResultExtensions.cs", label="Entry System.Text.StringBuilder.AppendFormat(string, object, object)", span="0-0"];
m0_239 [cluster="CommandLine.Text.HelpText.CreateHelpEntry()", file="ResultExtensions.cs", label="Exit CommandLine.Text.HelpText.CreateHelpEntry()", span="585-585"];
m0_238 [cluster="CommandLine.Text.HelpText.CreateHelpEntry()", file="ResultExtensions.cs", label="return OptionSpecification.NewSwitch(\r\n                string.Empty,\r\n                ''help'',\r\n                false,\r\n                sentenceBuilder.HelpCommandText(AddDashesToOption),\r\n                string.Empty);", span="587-592"];
m0_217 [cluster="CommandLine.Text.HelpText.CreateHelpEntry()", file="ResultExtensions.cs", label="Entry CommandLine.Text.HelpText.CreateHelpEntry()", span="585-585"];
m0_133 [cluster="CommandLine.Text.HelpText.AddOptionsImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, string, int)", file="ResultExtensions.cs", label="Entry CommandLine.Text.HelpText.AddOptionsImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, string, int)", span="566-566"];
m0_229 [cluster="CommandLine.Text.HelpText.AddOptionsImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, string, int)", file="ResultExtensions.cs", label="var maxLength = GetMaxLength(specifications)", span="571-571"];
m0_230 [cluster="CommandLine.Text.HelpText.AddOptionsImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, string, int)", file="ResultExtensions.cs", label="optionsHelp = new StringBuilder(BuilderCapacity)", span="573-573"];
m0_233 [cluster="CommandLine.Text.HelpText.AddOptionsImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, string, int)", file="ResultExtensions.cs", label="AddOption(requiredWord, maxLength, option, remainingSpace)", span="579-579"];
m0_234 [cluster="CommandLine.Text.HelpText.AddOptionsImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, string, int)", file="ResultExtensions.cs", label="return this;", span="582-582"];
m0_231 [cluster="CommandLine.Text.HelpText.AddOptionsImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, string, int)", file="ResultExtensions.cs", label="var remainingSpace = maximumLength - (maxLength + 6)", span="575-575"];
m0_232 [cluster="CommandLine.Text.HelpText.AddOptionsImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, string, int)", file="ResultExtensions.cs", label=specifications, span="577-577"];
m0_235 [cluster="CommandLine.Text.HelpText.AddOptionsImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, string, int)", file="ResultExtensions.cs", label="Exit CommandLine.Text.HelpText.AddOptionsImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, string, int)", span="566-566"];
m0_131 [cluster="object.Equals(object, object)", file="ResultExtensions.cs", label="Entry object.Equals(object, object)", span="0-0"];
m0_169 [cluster="System.Text.StringBuilder.Append(string)", file="ResultExtensions.cs", label="Entry System.Text.StringBuilder.Append(string)", span="0-0"];
m0_116 [cluster="CommandLine.Text.HelpText.implicit operator string(CommandLine.Text.HelpText)", file="ResultExtensions.cs", label="Entry CommandLine.Text.HelpText.implicit operator string(CommandLine.Text.HelpText)", span="353-353"];
m0_117 [cluster="CommandLine.Text.HelpText.implicit operator string(CommandLine.Text.HelpText)", file="ResultExtensions.cs", label="return info.ToString();", span="355-355"];
m0_118 [cluster="CommandLine.Text.HelpText.implicit operator string(CommandLine.Text.HelpText)", file="ResultExtensions.cs", label="Exit CommandLine.Text.HelpText.implicit operator string(CommandLine.Text.HelpText)", span="353-353"];
m0_122 [cluster="CommandLine.Text.HelpText.AddPreOptionsLine(string, int)", file="ResultExtensions.cs", label="Entry CommandLine.Text.HelpText.AddPreOptionsLine(string, int)", span="605-605"];
m0_242 [cluster="CommandLine.Text.HelpText.AddPreOptionsLine(string, int)", file="ResultExtensions.cs", label="AddLine(preOptionsHelp, value, maximumLength)", span="607-607"];
m0_243 [cluster="CommandLine.Text.HelpText.AddPreOptionsLine(string, int)", file="ResultExtensions.cs", label="return this;", span="609-609"];
m0_244 [cluster="CommandLine.Text.HelpText.AddPreOptionsLine(string, int)", file="ResultExtensions.cs", label="Exit CommandLine.Text.HelpText.AddPreOptionsLine(string, int)", span="605-605"];
m0_126 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string)", file="ResultExtensions.cs", label="Entry CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string)", span="725-725"];
m0_313 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string)", file="ResultExtensions.cs", label="AddLine(builder, value, MaximumDisplayWidth)", span="727-727"];
m0_314 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string)", file="ResultExtensions.cs", label="return this;", span="729-729"];
m0_315 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string)", file="ResultExtensions.cs", label="Exit CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string)", span="725-725"];
m0_185 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="ResultExtensions.cs", label="Entry CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", span="502-502"];
m0_192 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="ResultExtensions.cs", label="builder.Append(words[i])", span="513-513"];
m0_195 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="ResultExtensions.cs", label="builder.Append('' '')", span="517-517"];
m0_198 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="ResultExtensions.cs", label="builder.Append(words[i].Substring(0, maximumLength))", span="523-523"];
m0_204 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="ResultExtensions.cs", label="builder.Append(value)", span="537-537"];
m0_186 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="ResultExtensions.cs", label="builder.AppendWhen(builder.Length > 0, Environment.NewLine)", span="504-504"];
m0_202 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="ResultExtensions.cs", label="builder.AppendWhen(value.Length > 0, Environment.NewLine)", span="533-533"];
m0_188 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="ResultExtensions.cs", label="var words = value.Split(new[] { ' ' })", span="508-508"];
m0_191 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="ResultExtensions.cs", label="words[i].Length < (maximumLength - wordBuffer)", span="511-511"];
m0_194 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="ResultExtensions.cs", label="(maximumLength - wordBuffer) > 1 && i != words.Length - 1", span="515-515"];
m0_197 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="ResultExtensions.cs", label="words[i].Length >= maximumLength && wordBuffer == 0", span="521-521"];
m0_199 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="ResultExtensions.cs", label="wordBuffer = maximumLength", span="524-524"];
m0_201 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="ResultExtensions.cs", label="value = value.Substring(Math.Min(wordBuffer, value.Length))", span="532-532"];
m0_203 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="ResultExtensions.cs", label="value.Length > maximumLength", span="535-535"];
m0_189 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="ResultExtensions.cs", label="var i = 0", span="509-509"];
m0_193 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="ResultExtensions.cs", label="wordBuffer += words[i].Length", span="514-514"];
m0_196 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="ResultExtensions.cs", label="wordBuffer++", span="518-518"];
m0_187 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="ResultExtensions.cs", label="var wordBuffer = 0", span="507-507"];
m0_190 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="ResultExtensions.cs", label="i < words.Length", span="509-509"];
m0_200 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="ResultExtensions.cs", label="i++", span="509-509"];
m0_205 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="ResultExtensions.cs", label="Exit CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", span="502-502"];
m0_10 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", file="ResultExtensions.cs", label="Entry CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", span="92-92"];
m0_11 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", color=green, community=0, file="ResultExtensions.cs", label="0: sentenceBuilder == null", span="94-94"];
m0_12 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", color=green, community=0, file="ResultExtensions.cs", label="0: throw new ArgumentNullException(''sentenceBuilder'');", span="94-94"];
m0_13 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", color=green, community=0, file="ResultExtensions.cs", label="0: heading == null", span="95-95"];
m0_14 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", color=green, community=0, file="ResultExtensions.cs", label="0: throw new ArgumentNullException(''heading'');", span="95-95"];
m0_15 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", color=green, community=0, file="ResultExtensions.cs", label="0: copyright == null", span="96-96"];
m0_16 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", color=green, community=0, file="ResultExtensions.cs", label="0: throw new ArgumentNullException(''copyright'');", span="96-96"];
m0_17 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", color=green, community=0, file="ResultExtensions.cs", label="0: preOptionsHelp = new StringBuilder(BuilderCapacity)", span="98-98"];
m0_19 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", color=green, community=0, file="ResultExtensions.cs", label="0: this.sentenceBuilder = sentenceBuilder", span="101-101"];
m0_18 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", color=green, community=0, file="ResultExtensions.cs", label="0: postOptionsHelp = new StringBuilder(BuilderCapacity)", span="99-99"];
m0_20 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", color=green, community=0, file="ResultExtensions.cs", label="0: this.heading = heading", span="102-102"];
m0_21 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", color=green, community=0, file="ResultExtensions.cs", label="0: this.copyright = copyright", span="103-103"];
m0_22 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", file="ResultExtensions.cs", label="Exit CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", span="92-92"];
m0_283 [cluster="CommandLine.Text.HelpText.AddValueName(int, CommandLine.Core.ValueSpecification)", file="ResultExtensions.cs", label="Entry CommandLine.Text.HelpText.AddValueName(int, CommandLine.Core.ValueSpecification)", span="708-708"];
m0_305 [cluster="CommandLine.Text.HelpText.AddValueName(int, CommandLine.Core.ValueSpecification)", file="ResultExtensions.cs", label="var valueName = new StringBuilder(maxLength)", span="710-710"];
m0_306 [cluster="CommandLine.Text.HelpText.AddValueName(int, CommandLine.Core.ValueSpecification)", file="ResultExtensions.cs", label="specification.MetaName.Length > 0", span="712-712"];
m0_307 [cluster="CommandLine.Text.HelpText.AddValueName(int, CommandLine.Core.ValueSpecification)", file="ResultExtensions.cs", label="valueName.AppendFormat(''{0} (pos. {1})'', specification.MetaName, specification.Index)", span="714-714"];
m0_308 [cluster="CommandLine.Text.HelpText.AddValueName(int, CommandLine.Core.ValueSpecification)", file="ResultExtensions.cs", label="valueName.AppendFormat(''value pos. {0}'', specification.Index)", span="718-718"];
m0_309 [cluster="CommandLine.Text.HelpText.AddValueName(int, CommandLine.Core.ValueSpecification)", file="ResultExtensions.cs", label="valueName.AppendFormatWhen(specification.MetaValue.Length > 0, '' {0}'', specification.MetaValue)", span="720-720"];
m0_310 [cluster="CommandLine.Text.HelpText.AddValueName(int, CommandLine.Core.ValueSpecification)", file="ResultExtensions.cs", label="return valueName.ToString();", span="722-722"];
m0_311 [cluster="CommandLine.Text.HelpText.AddValueName(int, CommandLine.Core.ValueSpecification)", file="ResultExtensions.cs", label="Exit CommandLine.Text.HelpText.AddValueName(int, CommandLine.Core.ValueSpecification)", span="708-708"];
m0_327 [cluster="System.Math.Max(int, int)", file="ResultExtensions.cs", label="Entry System.Math.Max(int, int)", span="0-0"];
m0_236 [cluster="CommandLine.Text.HelpText.GetMaxLength(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>)", file="ResultExtensions.cs", label="Entry CommandLine.Text.HelpText.GetMaxLength(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>)", span="732-732"];
m0_320 [cluster="CommandLine.Text.HelpText.GetMaxLength(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>)", file="ResultExtensions.cs", label="specLength = GetMaxOptionLength((OptionSpecification)spec)", span="741-741"];
m0_321 [cluster="CommandLine.Text.HelpText.GetMaxLength(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>)", file="ResultExtensions.cs", label="specLength = GetMaxValueLength((ValueSpecification)spec)", span="745-745"];
m0_317 [cluster="CommandLine.Text.HelpText.GetMaxLength(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>)", file="ResultExtensions.cs", label=specifications, span="736-736"];
m0_319 [cluster="CommandLine.Text.HelpText.GetMaxLength(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>)", file="ResultExtensions.cs", label="spec.Tag == SpecificationType.Option", span="739-739"];
m0_322 [cluster="CommandLine.Text.HelpText.GetMaxLength(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>)", file="ResultExtensions.cs", label="length = Math.Max(length, specLength)", span="748-748"];
m0_316 [cluster="CommandLine.Text.HelpText.GetMaxLength(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>)", file="ResultExtensions.cs", label="var length = 0", span="734-734"];
m0_318 [cluster="CommandLine.Text.HelpText.GetMaxLength(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>)", file="ResultExtensions.cs", label="var specLength = 0", span="738-738"];
m0_323 [cluster="CommandLine.Text.HelpText.GetMaxLength(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>)", file="ResultExtensions.cs", label="return length;", span="751-751"];
m0_324 [cluster="CommandLine.Text.HelpText.GetMaxLength(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>)", file="ResultExtensions.cs", label="Exit CommandLine.Text.HelpText.GetMaxLength(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>)", span="732-732"];
m0_140 [cluster="System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", file="ResultExtensions.cs", label="Entry System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", span="0-0"];
m0_73 [cluster="System.InvalidOperationException.InvalidOperationException()", file="ResultExtensions.cs", label="Entry System.InvalidOperationException.InvalidOperationException()", span="0-0"];
m0_207 [cluster="string.Substring(int, int)", file="ResultExtensions.cs", label="Entry string.Substring(int, int)", span="0-0"];
m0_286 [cluster="string.FormatLocal(params object[])", file="ResultExtensions.cs", label="Entry string.FormatLocal(params object[])", span="24-24"];
m0_326 [cluster="CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)", file="ResultExtensions.cs", label="Entry CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)", span="797-797"];
m0_348 [cluster="CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)", file="ResultExtensions.cs", label="var specLength = 0", span="799-799"];
m0_349 [cluster="CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)", file="ResultExtensions.cs", label="var hasMeta = spec.MetaName.Length > 0", span="801-801"];
m0_351 [cluster="CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)", file="ResultExtensions.cs", label="spec.MetaValue.Length > 0", span="804-804"];
m0_352 [cluster="CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)", file="ResultExtensions.cs", label="metaLength = spec.MetaValue.Length + 1", span="806-806"];
m0_354 [cluster="CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)", file="ResultExtensions.cs", label="specLength += spec.MetaName.Length + spec.Index.ToStringInvariant().Length + 8", span="811-811"];
m0_355 [cluster="CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)", file="ResultExtensions.cs", label="specLength += spec.Index.ToStringInvariant().Length + 11", span="815-815"];
m0_357 [cluster="CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)", file="ResultExtensions.cs", label="return specLength;", span="820-820"];
m0_350 [cluster="CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)", file="ResultExtensions.cs", label="var metaLength = 0", span="803-803"];
m0_353 [cluster="CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)", file="ResultExtensions.cs", label=hasMeta, span="809-809"];
m0_356 [cluster="CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)", file="ResultExtensions.cs", label="specLength += metaLength", span="818-818"];
m0_358 [cluster="CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)", file="ResultExtensions.cs", label="Exit CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)", span="797-797"];
m0_74 [cluster="CommandLine.Text.HelpText.AddPreOptionsLine(string)", file="ResultExtensions.cs", label="Entry CommandLine.Text.HelpText.AddPreOptionsLine(string)", span="363-363"];
m0_120 [cluster="CommandLine.Text.HelpText.AddPreOptionsLine(string)", file="ResultExtensions.cs", label="return AddPreOptionsLine(value, MaximumDisplayWidth);", span="365-365"];
m0_121 [cluster="CommandLine.Text.HelpText.AddPreOptionsLine(string)", file="ResultExtensions.cs", label="Exit CommandLine.Text.HelpText.AddPreOptionsLine(string)", span="363-363"];
m0_216 [cluster="System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", file="ResultExtensions.cs", label="Entry System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", span="14-14"];
m0_113 [cluster="System.Func<TResult>.Invoke()", file="ResultExtensions.cs", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
m0_46 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="ResultExtensions.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
m0_215 [cluster="object.GetType()", file="ResultExtensions.cs", label="Entry object.GetType()", span="0-0"];
m0_147 [cluster="CommandLine.Text.HelpText.AddVerbs(int, params System.Type[])", file="ResultExtensions.cs", label="Entry CommandLine.Text.HelpText.AddVerbs(int, params System.Type[])", span="433-433"];
m0_152 [cluster="CommandLine.Text.HelpText.AddVerbs(int, params System.Type[])", file="ResultExtensions.cs", label="return AddOptionsImpl(this.AdaptVerbsToSpecifications(types), SentenceBuilder.RequiredWord(), maximumLength);", span="438-438"];
m0_149 [cluster="CommandLine.Text.HelpText.AddVerbs(int, params System.Type[])", file="ResultExtensions.cs", label="throw new ArgumentNullException(''types'');", span="435-435"];
m0_150 [cluster="CommandLine.Text.HelpText.AddVerbs(int, params System.Type[])", file="ResultExtensions.cs", label="types.Length == 0", span="436-436"];
m0_148 [cluster="CommandLine.Text.HelpText.AddVerbs(int, params System.Type[])", file="ResultExtensions.cs", label="types == null", span="435-435"];
m0_151 [cluster="CommandLine.Text.HelpText.AddVerbs(int, params System.Type[])", file="ResultExtensions.cs", label="throw new ArgumentOutOfRangeException(''types'');", span="436-436"];
m0_153 [cluster="CommandLine.Text.HelpText.AddVerbs(int, params System.Type[])", file="ResultExtensions.cs", label="Exit CommandLine.Text.HelpText.AddVerbs(int, params System.Type[])", span="433-433"];
m0_75 [cluster="System.Collections.IEnumerable.OfType<TResult>()", file="ResultExtensions.cs", label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0"];
m0_219 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="ResultExtensions.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
m0_360 [file="ResultExtensions.cs", label="CommandLine.Text.HelpText", span=""];
m0_361 [file="ResultExtensions.cs", label="CommandLine.ParserResult<T>", span=""];
m0_362 [file="ResultExtensions.cs", label=pr, span=""];
d0 -> d3  [color=darkorchid, key=3, label="method methodReturn CommandLine.ParserResult<T> Build", style=bold];
d1 -> d1  [color=darkorchid, key=3, label="method methodReturn RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error> ", style=bold];
d23 -> d23  [color=darkorchid, key=3, label="Local variable System.Func<T> makeDefault", style=bold];
}
