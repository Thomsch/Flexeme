digraph  {
n151 [label="CSharpx.Maybe<System.Func<T>>", span=""];
n152 [label=specProps, span=""];
n153 [label=makeDefault, span=""];
n154 [label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>", span=""];
n155 [label="System.Collections.Generic.IEnumerable<string>", span=""];
n156 [label=optionSpecs, span=""];
n157 [label="System.StringComparer", span=""];
n158 [label="System.Globalization.CultureInfo", span=""];
n159 [label=typeInfo, span=""];
n160 [label="System.Collections.Generic.IEnumerable<CommandLine.ErrorType>", span=""];
n161 [label=token, span=""];
n162 [label=specPropsWithValue, span=""];
n0 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="14-14", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
n1 [label="var typeInfo = factory.MapValueOrDefault(f => f().GetType(), typeof(T))", span="22-22", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
n5 [label="Func<T> makeDefault = () =>\r\n                typeof(T).IsMutable()\r\n                    ? factory.MapValueOrDefault(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="33-37", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
n33 [label="typeof(T).IsMutable()\r\n                    ? factory.MapValueOrDefault(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="34-37", cluster="lambda expression"];
n7 [label="Func<ParserResult<T>> buildUp = () =>\r\n            {\r\n                var tokenizerResult = tokenizer(arguments, optionSpecs);\r\n\r\n                var tokens = tokenizerResult.SucceededWith();\r\n\r\n                var partitions = TokenPartitioner.Partition(\r\n                    tokens,\r\n                    name => TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer));\r\n                var optionsPartition = partitions.Item1;\r\n                var valuesPartition = partitions.Item2;\r\n                var errorsPartition = partitions.Item3;\r\n\r\n                var optionSpecPropsResult =\r\n                    OptionMapper.MapValues(\r\n                        (from pt in specProps where pt.Specification.IsOption() select pt),\r\n                        optionsPartition,\r\n                        (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture),\r\n                        nameComparer);\r\n\r\n                var valueSpecPropsResult =\r\n                    ValueMapper.MapValues(\r\n                        (from pt in specProps where pt.Specification.IsValue() select pt),\r\n                        valuesPartition,\r\n                        (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture));\r\n\r\n                var missingValueErrors = from token in errorsPartition\r\n                                         select\r\n                        new MissingValueOptionError(\r\n                            optionSpecs.Single(o => token.Text.MatchName(o.ShortName, o.LongName, nameComparer))\r\n                                .FromOptionSpecification());\r\n\r\n                var specPropsWithValue =\r\n                    optionSpecPropsResult.SucceededWith().Concat(valueSpecPropsResult.SucceededWith());\r\n\r\n                Func<T> buildMutable = () =>\r\n                {\r\n                    var mutable = factory.MapValueOrDefault(f => f(), Activator.CreateInstance<T>());\r\n                    mutable =\r\n                        mutable.SetProperties(specPropsWithValue, sp => sp.Value.IsJust(), sp => sp.Value.FromJustOrFail())\r\n                            .SetProperties(\r\n                                specPropsWithValue,\r\n                                sp => sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust(),\r\n                                sp => sp.Specification.DefaultValue.FromJustOrFail())\r\n                            .SetProperties(\r\n                                specPropsWithValue,\r\n                                sp =>\r\n                                    sp.Value.IsNothing() && sp.Specification.TargetType == TargetType.Sequence\r\n                                    && sp.Specification.DefaultValue.MatchNothing(),\r\n                                sp => sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray());\r\n                    return mutable;\r\n                };\r\n\r\n                Func<T> buildImmutable = () =>\r\n                {\r\n                    var ctor = typeInfo.GetConstructor((from sp in specProps select sp.Property.PropertyType).ToArray());\r\n                    var values = (from prms in ctor.GetParameters()\r\n                        join sp in specPropsWithValue on prms.Name.ToLower() equals sp.Property.Name.ToLower()\r\n                        select\r\n                            sp.Value.MapValueOrDefault(\r\n                                v => v,\r\n                                sp.Specification.DefaultValue.MapValueOrDefault(\r\n                                    d => d,\r\n                                    sp.Specification.ConversionType.CreateDefaultForImmutable()))).ToArray();\r\n                    var immutable = (T)ctor.Invoke(values);\r\n                    return immutable;\r\n                };\r\n\r\n                var instance = typeInfo.IsMutable() ? buildMutable() : buildImmutable();\r\n\r\n                var validationErrors = specPropsWithValue.Validate(SpecificationPropertyRules.Lookup(tokens));\r\n\r\n                var allErrors =\r\n                    tokenizerResult.SuccessfulMessages()\r\n                        .Concat(missingValueErrors)\r\n                        .Concat(optionSpecPropsResult.SuccessfulMessages())\r\n                        .Concat(valueSpecPropsResult.SuccessfulMessages())\r\n                        .Concat(validationErrors)\r\n                        .Memorize();\r\n\r\n                var warnings = from e in allErrors where nonFatalErrors.Contains(e.Tag) select e;\r\n\r\n                return allErrors.Except(warnings).ToParserResult(instance);\r\n            }", span="42-125", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", color=red, community=0];
n48 [label="var tokenizerResult = tokenizer(arguments, optionSpecs)", span="44-44", cluster="lambda expression"];
n50 [label="var partitions = TokenPartitioner.Partition(\r\n                    tokens,\r\n                    name => TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer))", span="48-50", cluster="lambda expression"];
n85 [label="TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer)", span="50-50", cluster="lambda expression"];
n54 [label="var optionSpecPropsResult =\r\n                    OptionMapper.MapValues(\r\n                        (from pt in specProps where pt.Specification.IsOption() select pt),\r\n                        optionsPartition,\r\n                        (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture),\r\n                        nameComparer)", span="55-60", cluster="lambda expression"];
n89 [label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="59-59", cluster="lambda expression"];
n55 [label="var valueSpecPropsResult =\r\n                    ValueMapper.MapValues(\r\n                        (from pt in specProps where pt.Specification.IsValue() select pt),\r\n                        valuesPartition,\r\n                        (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture))", span="62-66", cluster="lambda expression"];
n93 [label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="66-66", cluster="lambda expression"];
n56 [label="var missingValueErrors = from token in errorsPartition\r\n                                         select\r\n                        new MissingValueOptionError(\r\n                            optionSpecs.Single(o => token.Text.MatchName(o.ShortName, o.LongName, nameComparer))\r\n                                .FromOptionSpecification())", span="68-72", cluster="lambda expression"];
n96 [label="token.Text.MatchName(o.ShortName, o.LongName, nameComparer)", span="71-71", cluster="lambda expression"];
n58 [label="Func<T> buildMutable = () =>\r\n                {\r\n                    var mutable = factory.MapValueOrDefault(f => f(), Activator.CreateInstance<T>());\r\n                    mutable =\r\n                        mutable.SetProperties(specPropsWithValue, sp => sp.Value.IsJust(), sp => sp.Value.FromJustOrFail())\r\n                            .SetProperties(\r\n                                specPropsWithValue,\r\n                                sp => sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust(),\r\n                                sp => sp.Specification.DefaultValue.FromJustOrFail())\r\n                            .SetProperties(\r\n                                specPropsWithValue,\r\n                                sp =>\r\n                                    sp.Value.IsNothing() && sp.Specification.TargetType == TargetType.Sequence\r\n                                    && sp.Specification.DefaultValue.MatchNothing(),\r\n                                sp => sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray());\r\n                    return mutable;\r\n                }", span="77-93", cluster="lambda expression"];
n100 [label="var mutable = factory.MapValueOrDefault(f => f(), Activator.CreateInstance<T>())", span="79-79", cluster="lambda expression"];
n63 [label="var warnings = from e in allErrors where nonFatalErrors.Contains(e.Tag) select e", span="122-122", cluster="lambda expression"];
n8 [label="var preprocessorErrors = arguments.Any()\r\n                ? arguments.Preprocess(PreprocessorGuards.Lookup(nameComparer))\r\n                : Enumerable.Empty<Error>()", span="127-129", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
n9 [label="var result = arguments.Any()\r\n                ? preprocessorErrors.Any()\r\n                    ? notParsed(preprocessorErrors)\r\n                    : buildUp()\r\n                : buildUp()", span="131-135", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
n2 [label="var specProps = typeInfo.GetSpecifications(pi => SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>()))", span="24-25", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
n12 [label="Entry CSharpx.Maybe<T1>.MapValueOrDefault<T1, T2>(System.Func<T1, T2>, T2)", span="377-377", cluster="CSharpx.Maybe<T1>.MapValueOrDefault<T1, T2>(System.Func<T1, T2>, T2)"];
n22 [label="Entry lambda expression", span="22-22", cluster="lambda expression"];
n59 [label="Func<T> buildImmutable = () =>\r\n                {\r\n                    var ctor = typeInfo.GetConstructor((from sp in specProps select sp.Property.PropertyType).ToArray());\r\n                    var values = (from prms in ctor.GetParameters()\r\n                        join sp in specPropsWithValue on prms.Name.ToLower() equals sp.Property.Name.ToLower()\r\n                        select\r\n                            sp.Value.MapValueOrDefault(\r\n                                v => v,\r\n                                sp.Specification.DefaultValue.MapValueOrDefault(\r\n                                    d => d,\r\n                                    sp.Specification.ConversionType.CreateDefaultForImmutable()))).ToArray();\r\n                    var immutable = (T)ctor.Invoke(values);\r\n                    return immutable;\r\n                }", span="95-108", cluster="lambda expression", color=red, community=0];
n134 [label="var ctor = typeInfo.GetConstructor((from sp in specProps select sp.Property.PropertyType).ToArray())", span="97-97", cluster="lambda expression"];
n60 [label="var instance = typeInfo.IsMutable() ? buildMutable() : buildImmutable()", span="110-110", cluster="lambda expression"];
n3 [label="var specs = from pt in specProps select pt.Specification", span="27-27", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
n13 [label="Entry System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", span="16-16", cluster="System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)"];
n26 [label="Entry lambda expression", span="24-25", cluster="lambda expression"];
n4 [label="var optionSpecs = specs\r\n                .ThrowingValidate(SpecificationGuards.Lookup)\r\n                .OfType<OptionSpecification>()", span="29-31", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
n14 [label="Entry Unk.ThrowingValidate", span="", cluster="Unk.ThrowingValidate"];
n15 [label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0", cluster="System.Collections.IEnumerable.OfType<TResult>()"];
n6 [label="Func<IEnumerable<Error>, ParserResult<T>> notParsed =\r\n                errs => new NotParsed<T>(makeDefault().GetType().ToTypeInfo(), errs)", span="39-40", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
n43 [label="new NotParsed<T>(makeDefault().GetType().ToTypeInfo(), errs)", span="40-40", cluster="lambda expression"];
n16 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()"];
n17 [label="Entry CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)", span="11-11", cluster="CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)"];
n18 [label="Entry System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="11-11", cluster="System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)"];
n19 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()"];
n10 [label="return result;", span="137-137", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
n20 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)"];
n21 [label="Entry System.Func<TResult>.Invoke()", span="0-0", cluster="System.Func<TResult>.Invoke()"];
n11 [label="Exit CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="14-14", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
n23 [label="f().GetType()", span="22-22", cluster="lambda expression"];
n24 [label="Exit lambda expression", span="22-22", cluster="lambda expression"];
n25 [label="Entry object.GetType()", span="0-0", cluster="object.GetType()"];
n27 [label="SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>())", span="24-25", cluster="lambda expression"];
n28 [label="Exit lambda expression", span="24-25", cluster="lambda expression"];
n29 [label="Entry CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="103-103", cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)"];
n30 [label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116", cluster="CSharpx.Maybe.Nothing<T>()"];
n31 [label="Entry CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)", span="21-21", cluster="CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)"];
n32 [label="Entry lambda expression", span="33-37", cluster="lambda expression"];
n34 [label="Exit lambda expression", span="33-37", cluster="lambda expression"];
n35 [label="Entry System.Type.IsMutable()", span="139-139", cluster="System.Type.IsMutable()"];
n36 [label="Entry System.Activator.CreateInstance<T>()", span="0-0", cluster="System.Activator.CreateInstance<T>()"];
n37 [label="Entry Unk.ToArray", span="", cluster="Unk.ToArray"];
n38 [label="Entry Unk.>", span="", cluster="Unk.>"];
n39 [label="Entry lambda expression", span="35-35", cluster="lambda expression"];
n40 [label="f()", span="35-35", cluster="lambda expression"];
n41 [label="Exit lambda expression", span="35-35", cluster="lambda expression"];
n42 [label="Entry lambda expression", span="40-40", cluster="lambda expression"];
n44 [label="Exit lambda expression", span="40-40", cluster="lambda expression"];
n45 [label="Entry CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="163-163", cluster="CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)"];
n46 [label="Entry System.Type.ToTypeInfo()", span="174-174", cluster="System.Type.ToTypeInfo()"];
n47 [label="Entry lambda expression", span="42-125", cluster="lambda expression"];
n49 [label="var tokens = tokenizerResult.SucceededWith()", span="46-46", cluster="lambda expression"];
n66 [label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0", cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)"];
n62 [label="var allErrors =\r\n                    tokenizerResult.SuccessfulMessages()\r\n                        .Concat(missingValueErrors)\r\n                        .Concat(optionSpecPropsResult.SuccessfulMessages())\r\n                        .Concat(valueSpecPropsResult.SuccessfulMessages())\r\n                        .Concat(validationErrors)\r\n                        .Memorize()", span="114-120", cluster="lambda expression"];
n67 [label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()", span="653-653", cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()"];
n61 [label="var validationErrors = specPropsWithValue.Validate(SpecificationPropertyRules.Lookup(tokens))", span="112-112", cluster="lambda expression"];
n51 [label="var optionsPartition = partitions.Item1", span="51-51", cluster="lambda expression"];
n68 [label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="16-16", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)"];
n84 [label="Entry lambda expression", span="50-50", cluster="lambda expression"];
n52 [label="var valuesPartition = partitions.Item2", span="52-52", cluster="lambda expression"];
n53 [label="var errorsPartition = partitions.Item3", span="53-53", cluster="lambda expression"];
n69 [label="Entry CommandLine.Core.Specification.IsOption()", span="10-10", cluster="CommandLine.Core.Specification.IsOption()"];
n70 [label="Entry Unk.MapValues", span="", cluster="Unk.MapValues"];
n88 [label="Entry lambda expression", span="59-59", cluster="lambda expression"];
n57 [label="var specPropsWithValue =\r\n                    optionSpecPropsResult.SucceededWith().Concat(valueSpecPropsResult.SucceededWith())", span="74-75", cluster="lambda expression"];
n71 [label="Entry CommandLine.Core.Specification.IsValue()", span="15-15", cluster="CommandLine.Core.Specification.IsValue()"];
n92 [label="Entry lambda expression", span="66-66", cluster="lambda expression"];
n72 [label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="294-294", cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)"];
n73 [label="Entry Unk.Single", span="", cluster="Unk.Single"];
n74 [label="Entry Unk.FromOptionSpecification", span="", cluster="Unk.FromOptionSpecification"];
n95 [label="Entry lambda expression", span="71-71", cluster="lambda expression"];
n75 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)"];
n101 [label="mutable =\r\n                        mutable.SetProperties(specPropsWithValue, sp => sp.Value.IsJust(), sp => sp.Value.FromJustOrFail())\r\n                            .SetProperties(\r\n                                specPropsWithValue,\r\n                                sp => sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust(),\r\n                                sp => sp.Specification.DefaultValue.FromJustOrFail())\r\n                            .SetProperties(\r\n                                specPropsWithValue,\r\n                                sp =>\r\n                                    sp.Value.IsNothing() && sp.Specification.TargetType == TargetType.Sequence\r\n                                    && sp.Specification.DefaultValue.MatchNothing(),\r\n                                sp => sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray())", span="80-91", cluster="lambda expression"];
n135 [label="var values = (from prms in ctor.GetParameters()\r\n                        join sp in specPropsWithValue on prms.Name.ToLower() equals sp.Property.Name.ToLower()\r\n                        select\r\n                            sp.Value.MapValueOrDefault(\r\n                                v => v,\r\n                                sp.Specification.DefaultValue.MapValueOrDefault(\r\n                                    d => d,\r\n                                    sp.Specification.ConversionType.CreateDefaultForImmutable()))).ToArray()", span="98-105", cluster="lambda expression", color=red, community=0];
n64 [label="return allErrors.Except(warnings).ToParserResult(instance);", span="124-124", cluster="lambda expression"];
n76 [label="Entry CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12", cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)"];
n77 [label="Entry System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="40-40", cluster="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)"];
n78 [label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SuccessfulMessages<TSuccess, TMessage>()", span="15-15", cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SuccessfulMessages<TSuccess, TMessage>()"];
n79 [label="Entry Unk.Concat", span="", cluster="Unk.Concat"];
n80 [label="Entry Unk.Memorize", span="", cluster="Unk.Memorize"];
n81 [label="Entry Unk.Contains", span="", cluster="Unk.Contains"];
n65 [label="Exit lambda expression", span="42-125", cluster="lambda expression"];
n82 [label="Entry Unk.Except", span="", cluster="Unk.Except"];
n83 [label="Entry Unk.ToParserResult", span="", cluster="Unk.ToParserResult"];
n86 [label="Exit lambda expression", span="50-50", cluster="lambda expression"];
n87 [label="Entry CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11", cluster="CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)"];
n90 [label="Exit lambda expression", span="59-59", cluster="lambda expression"];
n91 [label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="14-14", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)"];
n94 [label="Exit lambda expression", span="66-66", cluster="lambda expression"];
n97 [label="Exit lambda expression", span="71-71", cluster="lambda expression"];
n98 [label="Entry string.MatchName(string, string, System.StringComparer)", span="8-8", cluster="string.MatchName(string, string, System.StringComparer)"];
n99 [label="Entry lambda expression", span="77-93", cluster="lambda expression"];
n105 [label="Entry lambda expression", span="79-79", cluster="lambda expression"];
n102 [label="return mutable;", span="92-92", cluster="lambda expression"];
n104 [label="Entry T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="82-82", cluster="T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)"];
n108 [label="Entry lambda expression", span="81-81", cluster="lambda expression"];
n112 [label="Entry lambda expression", span="81-81", cluster="lambda expression"];
n116 [label="Entry lambda expression", span="84-84", cluster="lambda expression"];
n120 [label="Entry lambda expression", span="85-85", cluster="lambda expression"];
n123 [label="Entry lambda expression", span="88-90", cluster="lambda expression"];
n127 [label="Entry lambda expression", span="91-91", cluster="lambda expression"];
n103 [label="Exit lambda expression", span="77-93", cluster="lambda expression"];
n106 [label="f()", span="79-79", cluster="lambda expression"];
n107 [label="Exit lambda expression", span="79-79", cluster="lambda expression"];
n109 [label="sp.Value.IsJust()", span="81-81", cluster="lambda expression"];
n110 [label="Exit lambda expression", span="81-81", cluster="lambda expression"];
n111 [label="Entry CSharpx.Maybe<T>.IsJust<T>()", span="326-326", cluster="CSharpx.Maybe<T>.IsJust<T>()"];
n113 [label="sp.Value.FromJustOrFail()", span="81-81", cluster="lambda expression"];
n114 [label="Exit lambda expression", span="81-81", cluster="lambda expression"];
n115 [label="Entry CSharpx.Maybe<T>.FromJustOrFail<T>(System.Exception)", span="355-355", cluster="CSharpx.Maybe<T>.FromJustOrFail<T>(System.Exception)"];
n117 [label="sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust()", span="84-84", cluster="lambda expression"];
n118 [label="Exit lambda expression", span="84-84", cluster="lambda expression"];
n119 [label="Entry CSharpx.Maybe<T>.IsNothing<T>()", span="334-334", cluster="CSharpx.Maybe<T>.IsNothing<T>()"];
n121 [label="sp.Specification.DefaultValue.FromJustOrFail()", span="85-85", cluster="lambda expression"];
n122 [label="Exit lambda expression", span="85-85", cluster="lambda expression"];
n124 [label="sp.Value.IsNothing() && sp.Specification.TargetType == TargetType.Sequence\r\n                                    && sp.Specification.DefaultValue.MatchNothing()", span="89-90", cluster="lambda expression"];
n125 [label="Exit lambda expression", span="88-90", cluster="lambda expression"];
n126 [label="Entry CSharpx.Maybe<T>.MatchNothing()", span="57-57", cluster="CSharpx.Maybe<T>.MatchNothing()"];
n128 [label="sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray()", span="91-91", cluster="lambda expression"];
n129 [label="Exit lambda expression", span="91-91", cluster="lambda expression"];
n130 [label="Entry System.Type.GetGenericArguments()", span="0-0", cluster="System.Type.GetGenericArguments()"];
n131 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()"];
n132 [label="Entry System.Type.CreateEmptyArray()", span="125-125", cluster="System.Type.CreateEmptyArray()"];
n133 [label="Entry lambda expression", span="95-108", cluster="lambda expression"];
n139 [label="Entry Unk.GetConstructor", span="", cluster="Unk.GetConstructor"];
n136 [label="var immutable = (T)ctor.Invoke(values)", span="106-106", cluster="lambda expression"];
n140 [label="Entry System.Reflection.MethodBase.GetParameters()", span="0-0", cluster="System.Reflection.MethodBase.GetParameters()"];
n141 [label="Entry string.ToLower()", span="0-0", cluster="string.ToLower()"];
n142 [label="Entry System.Type.CreateDefaultForImmutable()", span="149-149", cluster="System.Type.CreateDefaultForImmutable()"];
n143 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()"];
n145 [label="Entry lambda expression", span="102-102", cluster="lambda expression"];
n148 [label="Entry lambda expression", span="104-104", cluster="lambda expression"];
n137 [label="return immutable;", span="107-107", cluster="lambda expression"];
n144 [label="Entry System.Reflection.ConstructorInfo.Invoke(object[])", span="0-0", cluster="System.Reflection.ConstructorInfo.Invoke(object[])"];
n138 [label="Exit lambda expression", span="95-108", cluster="lambda expression"];
n146 [label=v, span="102-102", cluster="lambda expression", color=red, community=0];
n147 [label="Exit lambda expression", span="102-102", cluster="lambda expression"];
n149 [label=d, span="104-104", cluster="lambda expression", color=red, community=0];
n150 [label="Exit lambda expression", span="104-104", cluster="lambda expression"];
m0_33 [label="Entry Ninject.Syntax.IBindingInSyntax<T>.InRequestScope()", span="168-168", cluster="Ninject.Syntax.IBindingInSyntax<T>.InRequestScope()", file="NameExtensions.cs"];
m0_18 [label="Entry Ninject.Tests.Integration.RequestScopeTests.WhenServiceIsBoundWithRequestScope.InstancesAreReusedWithinSameHttpContext()", span="37-37", cluster="Ninject.Tests.Integration.RequestScopeTests.WhenServiceIsBoundWithRequestScope.InstancesAreReusedWithinSameHttpContext()", file="NameExtensions.cs"];
m0_20 [label="BeginNewFakeWebRequest()", span="41-41", cluster="Ninject.Tests.Integration.RequestScopeTests.WhenServiceIsBoundWithRequestScope.InstancesAreReusedWithinSameHttpContext()", file="NameExtensions.cs"];
m0_24 [label="BeginNewFakeWebRequest()", span="48-48", cluster="Ninject.Tests.Integration.RequestScopeTests.WhenServiceIsBoundWithRequestScope.InstancesAreReusedWithinSameHttpContext()", file="NameExtensions.cs"];
m0_19 [label="kernel.Bind<IWeapon>().To<Sword>().InRequestScope()", span="39-39", cluster="Ninject.Tests.Integration.RequestScopeTests.WhenServiceIsBoundWithRequestScope.InstancesAreReusedWithinSameHttpContext()", file="NameExtensions.cs"];
m0_21 [label="var weapon1 = kernel.Get<IWeapon>()", span="43-43", cluster="Ninject.Tests.Integration.RequestScopeTests.WhenServiceIsBoundWithRequestScope.InstancesAreReusedWithinSameHttpContext()", file="NameExtensions.cs"];
m0_23 [label="weapon1.ShouldBeSameAs(weapon2)", span="46-46", cluster="Ninject.Tests.Integration.RequestScopeTests.WhenServiceIsBoundWithRequestScope.InstancesAreReusedWithinSameHttpContext()", file="NameExtensions.cs"];
m0_25 [label="GC.Collect()", span="50-50", cluster="Ninject.Tests.Integration.RequestScopeTests.WhenServiceIsBoundWithRequestScope.InstancesAreReusedWithinSameHttpContext()", file="NameExtensions.cs"];
m0_22 [label="var weapon2 = kernel.Get<IWeapon>()", span="44-44", cluster="Ninject.Tests.Integration.RequestScopeTests.WhenServiceIsBoundWithRequestScope.InstancesAreReusedWithinSameHttpContext()", file="NameExtensions.cs"];
m0_27 [label="var weapon3 = kernel.Get<IWeapon>()", span="53-53", cluster="Ninject.Tests.Integration.RequestScopeTests.WhenServiceIsBoundWithRequestScope.InstancesAreReusedWithinSameHttpContext()", file="NameExtensions.cs"];
m0_28 [label="weapon3.ShouldNotBeSameAs(weapon1)", span="55-55", cluster="Ninject.Tests.Integration.RequestScopeTests.WhenServiceIsBoundWithRequestScope.InstancesAreReusedWithinSameHttpContext()", file="NameExtensions.cs"];
m0_26 [label="GC.WaitForPendingFinalizers()", span="51-51", cluster="Ninject.Tests.Integration.RequestScopeTests.WhenServiceIsBoundWithRequestScope.InstancesAreReusedWithinSameHttpContext()", file="NameExtensions.cs"];
m0_29 [label="weapon3.ShouldNotBeSameAs(weapon2)", span="56-56", cluster="Ninject.Tests.Integration.RequestScopeTests.WhenServiceIsBoundWithRequestScope.InstancesAreReusedWithinSameHttpContext()", file="NameExtensions.cs"];
m0_30 [label="Exit Ninject.Tests.Integration.RequestScopeTests.WhenServiceIsBoundWithRequestScope.InstancesAreReusedWithinSameHttpContext()", span="37-37", cluster="Ninject.Tests.Integration.RequestScopeTests.WhenServiceIsBoundWithRequestScope.InstancesAreReusedWithinSameHttpContext()", file="NameExtensions.cs"];
m0_36 [label="Entry System.GC.Collect()", span="0-0", cluster="System.GC.Collect()", file="NameExtensions.cs"];
m0_6 [label="Exit CommandLine.Core.NameExtensions.FromOptionSpecification(CommandLine.Core.OptionSpecification)", span="15-15", cluster="CommandLine.Core.NameExtensions.FromOptionSpecification(CommandLine.Core.OptionSpecification)", file="NameExtensions.cs"];
m0_7 [label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20", cluster="CommandLine.NameInfo.NameInfo(string, string)", file="NameExtensions.cs"];
m0_8 [label="Entry CommandLine.Core.NameExtensions.FromSpecification(CommandLine.Core.Specification)", span="22-22", cluster="CommandLine.Core.NameExtensions.FromSpecification(CommandLine.Core.Specification)", file="NameExtensions.cs"];
m0_0 [label="Entry Ninject.Tests.Integration.RequestScopeTests.RequestScopeContext.RequestScopeContext()", span="15-15", cluster="Ninject.Tests.Integration.RequestScopeTests.RequestScopeContext.RequestScopeContext()", file="NameExtensions.cs"];
m0_1 [label="var settings = new NinjectSettings { CachePruningIntervalMs = Int32.MaxValue }", span="17-17", cluster="Ninject.Tests.Integration.RequestScopeTests.RequestScopeContext.RequestScopeContext()", file="NameExtensions.cs"];
m0_2 [label="kernel = new StandardKernel(settings)", span="18-18", cluster="Ninject.Tests.Integration.RequestScopeTests.RequestScopeContext.RequestScopeContext()", file="NameExtensions.cs", color=green, community=0];
m0_5 [label="return new NameInfo(\r\n                specification.LongName,\r\n                specification.ShortName);", span="17-19", cluster="CommandLine.Core.NameExtensions.FromOptionSpecification(CommandLine.Core.OptionSpecification)", file="NameExtensions.cs", color=red, community=0];
m0_31 [label="Entry Ninject.Syntax.BindingRoot.Bind<T>()", span="34-34", cluster="Ninject.Syntax.BindingRoot.Bind<T>()", file="NameExtensions.cs"];
m0_52 [label="Entry Ninject.Components.IComponentContainer.Get<T>()", span="59-59", cluster="Ninject.Components.IComponentContainer.Get<T>()", file="NameExtensions.cs"];
m0_16 [label="Entry System.IO.StringWriter.StringWriter()", span="0-0", cluster="System.IO.StringWriter.StringWriter()", file="NameExtensions.cs"];
m0_3 [label="Exit Ninject.Tests.Integration.RequestScopeTests.RequestScopeContext.RequestScopeContext()", span="15-15", cluster="Ninject.Tests.Integration.RequestScopeTests.RequestScopeContext.RequestScopeContext()", file="NameExtensions.cs"];
m0_9 [label="Entry Ninject.Tests.Integration.RequestScopeTests.RequestScopeContext.GetFakeHttpContext()", span="26-26", cluster="Ninject.Tests.Integration.RequestScopeTests.RequestScopeContext.GetFakeHttpContext()", file="NameExtensions.cs"];
m0_11 [label="var response = new HttpResponse(new StringWriter())", span="29-29", cluster="Ninject.Tests.Integration.RequestScopeTests.RequestScopeContext.GetFakeHttpContext()", file="NameExtensions.cs"];
m0_10 [label="var request = new HttpRequest(''index.html'', ''http://example.org/index.html'', String.Empty)", span="28-28", cluster="Ninject.Tests.Integration.RequestScopeTests.RequestScopeContext.GetFakeHttpContext()", file="NameExtensions.cs"];
m0_12 [label="return new HttpContext(request, response);", span="30-30", cluster="Ninject.Tests.Integration.RequestScopeTests.RequestScopeContext.GetFakeHttpContext()", file="NameExtensions.cs"];
m0_13 [label="Exit Ninject.Tests.Integration.RequestScopeTests.RequestScopeContext.GetFakeHttpContext()", span="26-26", cluster="Ninject.Tests.Integration.RequestScopeTests.RequestScopeContext.GetFakeHttpContext()", file="NameExtensions.cs"];
m0_39 [label="Entry Ninject.Tests.Integration.RequestScopeTests.WhenServiceIsBoundWithRequestScope.InstancesAreDisposedWhenRequestEndsAndCacheIsPruned()", span="60-60", cluster="Ninject.Tests.Integration.RequestScopeTests.WhenServiceIsBoundWithRequestScope.InstancesAreDisposedWhenRequestEndsAndCacheIsPruned()", file="NameExtensions.cs"];
m0_42 [label="BeginNewFakeWebRequest()", span="65-65", cluster="Ninject.Tests.Integration.RequestScopeTests.WhenServiceIsBoundWithRequestScope.InstancesAreDisposedWhenRequestEndsAndCacheIsPruned()", file="NameExtensions.cs"];
m0_46 [label="BeginNewFakeWebRequest()", span="72-72", cluster="Ninject.Tests.Integration.RequestScopeTests.WhenServiceIsBoundWithRequestScope.InstancesAreDisposedWhenRequestEndsAndCacheIsPruned()", file="NameExtensions.cs"];
m0_41 [label="var cache = kernel.Components.Get<ICache>()", span="63-63", cluster="Ninject.Tests.Integration.RequestScopeTests.WhenServiceIsBoundWithRequestScope.InstancesAreDisposedWhenRequestEndsAndCacheIsPruned()", file="NameExtensions.cs"];
m0_43 [label="var instance = kernel.Get<INotifyWhenDisposed>()", span="67-67", cluster="Ninject.Tests.Integration.RequestScopeTests.WhenServiceIsBoundWithRequestScope.InstancesAreDisposedWhenRequestEndsAndCacheIsPruned()", file="NameExtensions.cs"];
m0_45 [label="instance.ShouldBeInstanceOf<NotifiesWhenDisposed>()", span="70-70", cluster="Ninject.Tests.Integration.RequestScopeTests.WhenServiceIsBoundWithRequestScope.InstancesAreDisposedWhenRequestEndsAndCacheIsPruned()", file="NameExtensions.cs"];
m0_47 [label="GC.Collect()", span="74-74", cluster="Ninject.Tests.Integration.RequestScopeTests.WhenServiceIsBoundWithRequestScope.InstancesAreDisposedWhenRequestEndsAndCacheIsPruned()", file="NameExtensions.cs"];
m0_40 [label="kernel.Bind<INotifyWhenDisposed>().To<NotifiesWhenDisposed>().InRequestScope()", span="62-62", cluster="Ninject.Tests.Integration.RequestScopeTests.WhenServiceIsBoundWithRequestScope.InstancesAreDisposedWhenRequestEndsAndCacheIsPruned()", file="NameExtensions.cs"];
m0_49 [label="cache.Prune()", span="77-77", cluster="Ninject.Tests.Integration.RequestScopeTests.WhenServiceIsBoundWithRequestScope.InstancesAreDisposedWhenRequestEndsAndCacheIsPruned()", file="NameExtensions.cs"];
m0_44 [label="instance.ShouldNotBeNull()", span="69-69", cluster="Ninject.Tests.Integration.RequestScopeTests.WhenServiceIsBoundWithRequestScope.InstancesAreDisposedWhenRequestEndsAndCacheIsPruned()", file="NameExtensions.cs"];
m0_50 [label="instance.IsDisposed.ShouldBeTrue()", span="79-79", cluster="Ninject.Tests.Integration.RequestScopeTests.WhenServiceIsBoundWithRequestScope.InstancesAreDisposedWhenRequestEndsAndCacheIsPruned()", file="NameExtensions.cs"];
m0_48 [label="GC.WaitForPendingFinalizers()", span="75-75", cluster="Ninject.Tests.Integration.RequestScopeTests.WhenServiceIsBoundWithRequestScope.InstancesAreDisposedWhenRequestEndsAndCacheIsPruned()", file="NameExtensions.cs"];
m0_51 [label="Exit Ninject.Tests.Integration.RequestScopeTests.WhenServiceIsBoundWithRequestScope.InstancesAreDisposedWhenRequestEndsAndCacheIsPruned()", span="60-60", cluster="Ninject.Tests.Integration.RequestScopeTests.WhenServiceIsBoundWithRequestScope.InstancesAreDisposedWhenRequestEndsAndCacheIsPruned()", file="NameExtensions.cs"];
m0_32 [label="Entry Ninject.Syntax.IBindingToSyntax<T>.To<TImplementation>()", span="39-39", cluster="Ninject.Syntax.IBindingToSyntax<T>.To<TImplementation>()", file="NameExtensions.cs"];
m0_14 [label="Entry HttpRequest.cstr", span="", cluster="HttpRequest.cstr", file="NameExtensions.cs"];
m0_15 [label="Entry HttpResponse.cstr", span="", cluster="HttpResponse.cstr", file="NameExtensions.cs"];
m0_38 [label="Entry Unk.ShouldNotBeSameAs", span="", cluster="Unk.ShouldNotBeSameAs", file="NameExtensions.cs"];
m0_17 [label="Entry HttpContext.cstr", span="", cluster="HttpContext.cstr", file="NameExtensions.cs"];
m0_34 [label="Entry Ninject.Syntax.IResolutionRoot.Get<T>(params Ninject.Parameters.IParameter[])", span="41-41", cluster="Ninject.Syntax.IResolutionRoot.Get<T>(params Ninject.Parameters.IParameter[])", file="NameExtensions.cs"];
m0_37 [label="Entry System.GC.WaitForPendingFinalizers()", span="0-0", cluster="System.GC.WaitForPendingFinalizers()", file="NameExtensions.cs"];
m0_53 [label="Entry Unk.ShouldNotBeNull", span="", cluster="Unk.ShouldNotBeNull", file="NameExtensions.cs"];
m0_55 [label="Entry Ninject.Activation.Caching.ICache.Prune()", span="44-44", cluster="Ninject.Activation.Caching.ICache.Prune()", file="NameExtensions.cs"];
m0_4 [label="Entry CommandLine.Core.NameExtensions.FromOptionSpecification(CommandLine.Core.OptionSpecification)", span="15-15", cluster="CommandLine.Core.NameExtensions.FromOptionSpecification(CommandLine.Core.OptionSpecification)", file="NameExtensions.cs"];
m0_56 [label="Entry Unk.ShouldBeTrue", span="", cluster="Unk.ShouldBeTrue", file="NameExtensions.cs"];
m0_35 [label="Entry Unk.ShouldBeSameAs", span="", cluster="Unk.ShouldBeSameAs", file="NameExtensions.cs"];
m0_57 [label="Ninject.Tests.Integration.RequestScopeTests.RequestScopeContext", span="", file="NameExtensions.cs"];
m0_58 [label="Ninject.Tests.Integration.RequestScopeTests.WhenServiceIsBoundWithRequestScope", span="", file="NameExtensions.cs"];
m1_7 [label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", span="16-16", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", file="NameLookupTests.cs"];
m1_6 [label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124", cluster="CSharpx.Maybe.Just<T>(T)", file="NameLookupTests.cs"];
m1_0 [label="Entry CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", span="14-14", cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs"];
m1_1 [label="var expected = Maybe.Just(''.'')", span="17-17", cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs"];
m1_2 [label="var specs = new[] { new OptionSpecification(string.Empty, ''string-seq'',\r\n                false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), '.', null, string.Empty, string.Empty, new List<string>(), typeof(IEnumerable<string>), TargetType.Sequence)}", span="18-19", cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs"];
m1_4 [label="expected.ShouldBeEquivalentTo(result)", span="25-25", cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs"];
m1_3 [label="var result = NameLookup.HavingSeparator(''string-seq'', specs, StringComparer.InvariantCulture)", span="22-22", cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs"];
m1_5 [label="Exit CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", span="14-14", cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs"];
m1_10 [label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="27-27", cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="NameLookupTests.cs"];
m1_11 [label="Entry Unk.ShouldBeEquivalentTo", span="", cluster="Unk.ShouldBeEquivalentTo", file="NameLookupTests.cs"];
m1_9 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="NameLookupTests.cs"];
m3_0 [label="Entry CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", span="15-15", cluster="CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ResultExtensions.cs"];
m3_1 [label="result.Tag == ResultType.Ok", span="17-17", cluster="CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ResultExtensions.cs"];
m3_2 [label="var ok = (Ok<TSuccess, TMessage>)result", span="19-19", cluster="CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ResultExtensions.cs"];
m3_4 [label="return Enumerable.Empty<TMessage>();", span="22-22", cluster="CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ResultExtensions.cs"];
m3_3 [label="return ok.Messages;", span="20-20", cluster="CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", color=green, community=0, file="ResultExtensions.cs"];
m3_5 [label="Exit CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", span="15-15", cluster="CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ResultExtensions.cs"];
m3_13 [label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124", cluster="CSharpx.Maybe.Just<T>(T)", file="ResultExtensions.cs"];
m3_7 [label="Entry CommandLine.Infrastructure.ResultExtensions.ToMaybe<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", span="25-25", cluster="CommandLine.Infrastructure.ResultExtensions.ToMaybe<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ResultExtensions.cs"];
m3_8 [label="result.Tag == ResultType.Ok", span="27-27", cluster="CommandLine.Infrastructure.ResultExtensions.ToMaybe<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ResultExtensions.cs"];
m3_9 [label="var ok = (Ok<TSuccess, TMessage>)result", span="29-29", cluster="CommandLine.Infrastructure.ResultExtensions.ToMaybe<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ResultExtensions.cs"];
m3_11 [label="return Maybe.Nothing<TSuccess>();", span="32-32", cluster="CommandLine.Infrastructure.ResultExtensions.ToMaybe<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ResultExtensions.cs"];
m3_10 [label="return Maybe.Just(ok.Success);", span="30-30", cluster="CommandLine.Infrastructure.ResultExtensions.ToMaybe<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", color=green, community=0, file="ResultExtensions.cs"];
m3_12 [label="Exit CommandLine.Infrastructure.ResultExtensions.ToMaybe<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", span="25-25", cluster="CommandLine.Infrastructure.ResultExtensions.ToMaybe<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ResultExtensions.cs"];
m3_14 [label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116", cluster="CSharpx.Maybe.Nothing<T>()", file="ResultExtensions.cs"];
m4_11 [label="Entry T.ToMaybe<T>()", span="249-249", cluster="T.ToMaybe<T>()", file="TypeDescriptor.cs"];
m4_0 [label="Entry CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", span="13-13", cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", file="TypeDescriptor.cs"];
m4_1 [label="this.targetType = targetType", span="15-15", cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", file="TypeDescriptor.cs"];
m4_2 [label="this.maxItems = maxItems", span="16-16", cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", file="TypeDescriptor.cs"];
m4_3 [label="this.nextValue = nextValue", span="17-17", cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", file="TypeDescriptor.cs"];
m4_4 [label="Exit CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", span="13-13", cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", file="TypeDescriptor.cs"];
m4_16 [label="Entry lambda expression", span="47-47", cluster="lambda expression", file="TypeDescriptor.cs"];
m4_17 [label=n, span="47-47", cluster="lambda expression", color=green, community=0, file="TypeDescriptor.cs"];
m4_18 [label="Exit lambda expression", span="47-47", cluster="lambda expression", file="TypeDescriptor.cs"];
m4_12 [label="Entry CommandLine.Core.TypeDescriptorExtensions.WithNextValue(CommandLine.Core.TypeDescriptor, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", span="45-45", cluster="CommandLine.Core.TypeDescriptorExtensions.WithNextValue(CommandLine.Core.TypeDescriptor, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", file="TypeDescriptor.cs"];
m4_13 [label="return TypeDescriptor.Create(descriptor.TargetType, descriptor.MaxItems, nextValue.MapValueOrDefault(n => n, default(TypeDescriptor)));", span="47-47", cluster="CommandLine.Core.TypeDescriptorExtensions.WithNextValue(CommandLine.Core.TypeDescriptor, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", color=green, community=0, file="TypeDescriptor.cs"];
m4_14 [label="Exit CommandLine.Core.TypeDescriptorExtensions.WithNextValue(CommandLine.Core.TypeDescriptor, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", span="45-45", cluster="CommandLine.Core.TypeDescriptorExtensions.WithNextValue(CommandLine.Core.TypeDescriptor, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", file="TypeDescriptor.cs"];
m4_5 [label="Entry CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CommandLine.Core.TypeDescriptor)", span="35-35", cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CommandLine.Core.TypeDescriptor)", file="TypeDescriptor.cs"];
m4_6 [label="maximumItems == null", span="37-37", cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CommandLine.Core.TypeDescriptor)", file="TypeDescriptor.cs"];
m4_8 [label="return new TypeDescriptor(tag, maximumItems, next.ToMaybe());", span="39-39", cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CommandLine.Core.TypeDescriptor)", file="TypeDescriptor.cs"];
m4_7 [label="throw new ArgumentNullException(''maximumItems'');", span="37-37", cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CommandLine.Core.TypeDescriptor)", file="TypeDescriptor.cs"];
m4_9 [label="Exit CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CommandLine.Core.TypeDescriptor)", span="35-35", cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CommandLine.Core.TypeDescriptor)", file="TypeDescriptor.cs"];
m4_10 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="TypeDescriptor.cs"];
m4_19 [label="out CommandLine.Core.TypeDescriptor", span="", file="TypeDescriptor.cs"];
m5_1 [label="values == null", span="14-14", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="ValueMapper.cs"];
m5_3 [label="conversionType == null", span="15-15", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="ValueMapper.cs"];
m5_5 [label="conversionCulture == null", span="16-16", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="ValueMapper.cs"];
m5_7 [label="return scalar\r\n                ? ChangeType(values.Single(), conversionType, conversionCulture)\r\n                : ChangeType(values, conversionType, conversionCulture);", span="18-20", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="ValueMapper.cs"];
m5_2 [label="throw new ArgumentNullException(''values'');", span="14-14", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="ValueMapper.cs"];
m5_4 [label="throw new ArgumentNullException(''conversionType'');", span="15-15", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="ValueMapper.cs"];
m5_6 [label="throw new ArgumentNullException(''conversionCulture'');", span="16-16", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="ValueMapper.cs"];
m5_8 [label="Exit CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="12-12", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="ValueMapper.cs"];
m5_12 [label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", span="23-23", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", file="ValueMapper.cs"];
m5_13 [label="var type =\r\n                conversionType.GetGenericArguments()\r\n                              .SingleOrDefault()\r\n                              .ToMaybe()\r\n                              .FromJust(\r\n                                  new ApplicationException(''Non scalar properties should be sequence of type IEnumerable<T>.''))", span="25-30", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", file="ValueMapper.cs"];
m5_14 [label="var converted = values.Select(value => ChangeType(value, type, conversionCulture))", span="32-32", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", file="ValueMapper.cs"];
m5_15 [label="return converted.Any(a => a.MatchNothing())\r\n                ? Maybe.Nothing<object>()\r\n                : Maybe.Just(converted.Select(c => ((Just<object>)c).Value).ToArray(type));", span="34-36", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", file="ValueMapper.cs"];
m5_16 [label="Exit CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", span="23-23", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", file="ValueMapper.cs"];
m5_26 [label="Entry Unk.Just", span="", cluster="Unk.Just", file="ValueMapper.cs"];
m5_61 [label="Entry System.Enum.IsDefined(System.Type, object)", span="0-0", cluster="System.Enum.IsDefined(System.Type, object)", file="ValueMapper.cs"];
m5_20 [label="Entry System.ApplicationException.ApplicationException(string)", span="0-0", cluster="System.ApplicationException.ApplicationException(string)", file="ValueMapper.cs"];
m5_23 [label="Entry Unk.Any", span="", cluster="Unk.Any", file="ValueMapper.cs"];
m5_21 [label="Entry CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", span="137-137", cluster="CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", file="ValueMapper.cs"];
m5_60 [label="Entry System.Enum.Parse(System.Type, string)", span="0-0", cluster="System.Enum.Parse(System.Type, string)", file="ValueMapper.cs"];
m5_62 [label="Entry System.FormatException.FormatException()", span="0-0", cluster="System.FormatException.FormatException()", file="ValueMapper.cs"];
m5_46 [label="Entry CommandLine.Core.TypeConverter.ConvertBoolString(string)", span="70-70", cluster="CommandLine.Core.TypeConverter.ConvertBoolString(string)", file="ValueMapper.cs"];
m5_53 [label="return value.Equals(''true'', StringComparison.OrdinalIgnoreCase);", span="72-72", cluster="CommandLine.Core.TypeConverter.ConvertBoolString(string)", file="ValueMapper.cs"];
m5_54 [label="Exit CommandLine.Core.TypeConverter.ConvertBoolString(string)", span="70-70", cluster="CommandLine.Core.TypeConverter.ConvertBoolString(string)", file="ValueMapper.cs"];
m5_47 [label="Entry CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", span="75-75", cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", file="ValueMapper.cs"];
m5_55 [label="var parsedValue = Enum.Parse(conversionType, value)", span="77-77", cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", file="ValueMapper.cs"];
m5_56 [label="Enum.IsDefined(conversionType, parsedValue)", span="78-78", cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", file="ValueMapper.cs"];
m5_57 [label="return parsedValue;", span="80-80", cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", file="ValueMapper.cs"];
m5_58 [label="throw new FormatException();", span="82-82", cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", file="ValueMapper.cs"];
m5_59 [label="Exit CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", span="75-75", cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", file="ValueMapper.cs"];
m5_19 [label="Entry T.ToMaybe<T>()", span="82-82", cluster="T.ToMaybe<T>()", file="ValueMapper.cs"];
m5_34 [label="Entry lambda expression", span="36-36", cluster="lambda expression", file="ValueMapper.cs"];
m5_28 [label="ChangeType(value, type, conversionCulture)", span="32-32", cluster="lambda expression", file="ValueMapper.cs"];
m5_27 [label="Entry lambda expression", span="32-32", cluster="lambda expression", file="ValueMapper.cs"];
m5_30 [label="Entry lambda expression", span="34-34", cluster="lambda expression", file="ValueMapper.cs"];
m5_29 [label="Exit lambda expression", span="32-32", cluster="lambda expression", file="ValueMapper.cs"];
m5_31 [label="a.MatchNothing()", span="34-34", cluster="lambda expression", file="ValueMapper.cs"];
m5_32 [label="Exit lambda expression", span="34-34", cluster="lambda expression", file="ValueMapper.cs"];
m5_35 [label="((Just<object>)c).Value", span="36-36", cluster="lambda expression", file="ValueMapper.cs"];
m5_36 [label="Exit lambda expression", span="36-36", cluster="lambda expression", file="ValueMapper.cs"];
m5_52 [label="Entry string.Equals(string, System.StringComparison)", span="0-0", cluster="string.Equals(string, System.StringComparison)", file="ValueMapper.cs"];
m5_48 [label="Entry System.Convert.ChangeType(object, System.Type, System.IFormatProvider)", span="0-0", cluster="System.Convert.ChangeType(object, System.Type, System.IFormatProvider)", file="ValueMapper.cs"];
m5_10 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", file="ValueMapper.cs"];
m5_11 [label="Entry CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", span="39-39", cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", file="ValueMapper.cs"];
m5_37 [label="return Maybe.Just(\r\n                    MatchBoolString(value)\r\n                        ? ConvertBoolString(value)\r\n                        : conversionType.IsEnum\r\n                            ? ConvertEnumString(value, conversionType)\r\n                            : Convert.ChangeType(value, conversionType, conversionCulture));", span="43-48", cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", file="ValueMapper.cs"];
m5_38 [label=InvalidCastException, span="50-50", cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", file="ValueMapper.cs"];
m5_39 [label="return Maybe.Nothing<object>();", span="52-52", cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", file="ValueMapper.cs"];
m5_40 [label=FormatException, span="54-54", cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", file="ValueMapper.cs"];
m5_41 [label="return Maybe.Nothing<object>();", span="56-56", cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", file="ValueMapper.cs"];
m5_42 [label=OverflowException, span="58-58", cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", file="ValueMapper.cs"];
m5_43 [label="return Maybe.Nothing<object>();", span="60-60", cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", file="ValueMapper.cs"];
m5_44 [label="Exit CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", span="39-39", cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", file="ValueMapper.cs"];
m5_49 [label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="71-71", cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="ValueMapper.cs"];
m5_22 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="ValueMapper.cs"];
m5_17 [label="Entry System.Type.GetGenericArguments()", span="0-0", cluster="System.Type.GetGenericArguments()", file="ValueMapper.cs"];
m5_24 [label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="66-66", cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="ValueMapper.cs"];
m5_33 [label="Entry Unk.MatchNothing", span="", cluster="Unk.MatchNothing", file="ValueMapper.cs"];
m5_25 [label="Entry Unk.ToArray", span="", cluster="Unk.ToArray", file="ValueMapper.cs"];
m5_45 [label="Entry CommandLine.Core.TypeConverter.MatchBoolString(string)", span="64-64", cluster="CommandLine.Core.TypeConverter.MatchBoolString(string)", file="ValueMapper.cs"];
m5_50 [label="return value.Equals(''true'', StringComparison.OrdinalIgnoreCase)\r\n                   || value.Equals(''false'', StringComparison.OrdinalIgnoreCase);", span="66-67", cluster="CommandLine.Core.TypeConverter.MatchBoolString(string)", file="ValueMapper.cs"];
m5_51 [label="Exit CommandLine.Core.TypeConverter.MatchBoolString(string)", span="64-64", cluster="CommandLine.Core.TypeConverter.MatchBoolString(string)", file="ValueMapper.cs"];
m5_9 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="ValueMapper.cs"];
m5_18 [label="Entry System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", file="ValueMapper.cs"];
m5_63 [label="System.Globalization.CultureInfo", span="", file="ValueMapper.cs"];
m5_64 [label=type, span="", file="ValueMapper.cs"];
n151 -> n33  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Func<T>>"];
n151 -> n58  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Func<T>>"];
n151 -> n100  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Func<T>>"];
n152 -> n33  [key=1, style=dashed, color=darkseagreen4, label=specProps];
n152 -> n54  [key=1, style=dashed, color=darkseagreen4, label=specProps];
n152 -> n55  [key=1, style=dashed, color=darkseagreen4, label=specProps];
n152 -> n59  [key=1, style=dashed, color=red, label=specProps];
n152 -> n134  [key=1, style=dashed, color=darkseagreen4, label=specProps];
n153 -> n43  [key=1, style=dashed, color=darkseagreen4, label=makeDefault];
n154 -> n48  [key=1, style=dashed, color=darkseagreen4, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>"];
n155 -> n48  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
n156 -> n48  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
n156 -> n50  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
n156 -> n85  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
n156 -> n56  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
n157 -> n50  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
n157 -> n85  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
n157 -> n54  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
n157 -> n56  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
n157 -> n96  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
n158 -> n54  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
n158 -> n89  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
n158 -> n55  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
n158 -> n93  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
n159 -> n59  [key=1, style=dashed, color=red, label=typeInfo];
n159 -> n134  [key=1, style=dashed, color=darkseagreen4, label=typeInfo];
n159 -> n60  [key=1, style=dashed, color=darkseagreen4, label=typeInfo];
n160 -> n63  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.ErrorType>"];
n161 -> n96  [key=1, style=dashed, color=darkseagreen4, label=token];
n162 -> n101  [key=1, style=dashed, color=darkseagreen4, label=specPropsWithValue];
n162 -> n135  [key=1, style=dashed, color=red, label=specPropsWithValue];
n0 -> n1  [key=0, style=solid];
n0 -> n5  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Func<T>>"];
n0 -> n33  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Func<T>>"];
n0 -> n7  [key=1, style=dashed, color=red, label="CSharpx.Maybe<System.Func<T>>"];
n0 -> n48  [key=1, style=dashed, color=darkseagreen4, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>"];
n0 -> n50  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
n0 -> n85  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
n0 -> n54  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
n0 -> n89  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
n0 -> n55  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
n0 -> n93  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
n0 -> n56  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
n0 -> n96  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
n0 -> n58  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Func<T>>"];
n0 -> n100  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Func<T>>"];
n0 -> n63  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.ErrorType>"];
n0 -> n8  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
n0 -> n9  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
n1 -> n2  [key=0, style=solid];
n1 -> n12  [key=2, style=dotted];
n1 -> n22  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n1 -> n7  [key=1, style=dashed, color=red, label=typeInfo];
n1 -> n59  [key=1, style=dashed, color=red, label=typeInfo];
n1 -> n134  [key=1, style=dashed, color=darkseagreen4, label=typeInfo];
n1 -> n60  [key=1, style=dashed, color=darkseagreen4, label=typeInfo];
n5 -> n6  [key=0, style=solid];
n5 -> n43  [key=1, style=dashed, color=darkseagreen4, label=makeDefault];
n5 -> n5  [key=3, color=darkorchid, style=bold, label="Local variable System.Func<T> makeDefault"];
n33 -> n34  [key=0, style=solid];
n33 -> n35  [key=2, style=dotted];
n33 -> n36  [key=2, style=dotted];
n33 -> n12  [key=2, style=dotted];
n33 -> n37  [key=2, style=dotted];
n33 -> n38  [key=2, style=dotted];
n33 -> n39  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n33 -> n33  [key=1, style=dashed, color=darkseagreen4, label=p];
n7 -> n8  [key=0, style=solid, color=red];
n7 -> n9  [key=1, style=dashed, color=red, label=buildUp];
n7 -> n7  [key=3, color=red, style=bold, label="Local variable System.Func<CommandLine.ParserResult<T>> buildUp"];
n48 -> n49  [key=0, style=solid];
n48 -> n66  [key=2, style=dotted];
n48 -> n62  [key=1, style=dashed, color=darkseagreen4, label=tokenizerResult];
n50 -> n51  [key=0, style=solid];
n50 -> n68  [key=2, style=dotted];
n50 -> n84  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n50 -> n52  [key=1, style=dashed, color=darkseagreen4, label=partitions];
n50 -> n53  [key=1, style=dashed, color=darkseagreen4, label=partitions];
n85 -> n86  [key=0, style=solid];
n85 -> n87  [key=2, style=dotted];
n54 -> n55  [key=0, style=solid];
n54 -> n69  [key=2, style=dotted];
n54 -> n70  [key=2, style=dotted];
n54 -> n54  [key=1, style=dashed, color=darkseagreen4, label=pt];
n54 -> n88  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n54 -> n57  [key=1, style=dashed, color=darkseagreen4, label=optionSpecPropsResult];
n54 -> n62  [key=1, style=dashed, color=darkseagreen4, label=optionSpecPropsResult];
n89 -> n90  [key=0, style=solid];
n89 -> n91  [key=2, style=dotted];
n55 -> n56  [key=0, style=solid];
n55 -> n71  [key=2, style=dotted];
n55 -> n70  [key=2, style=dotted];
n55 -> n55  [key=1, style=dashed, color=darkseagreen4, label=pt];
n55 -> n92  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n55 -> n57  [key=1, style=dashed, color=darkseagreen4, label=valueSpecPropsResult];
n55 -> n62  [key=1, style=dashed, color=darkseagreen4, label=valueSpecPropsResult];
n93 -> n94  [key=0, style=solid];
n93 -> n91  [key=2, style=dotted];
n56 -> n57  [key=0, style=solid];
n56 -> n72  [key=2, style=dotted];
n56 -> n73  [key=2, style=dotted];
n56 -> n74  [key=2, style=dotted];
n56 -> n56  [key=1, style=dashed, color=darkseagreen4, label=token];
n56 -> n95  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n56 -> n96  [key=1, style=dashed, color=darkseagreen4, label=token];
n56 -> n62  [key=1, style=dashed, color=darkseagreen4, label=missingValueErrors];
n96 -> n97  [key=0, style=solid];
n96 -> n98  [key=2, style=dotted];
n58 -> n59  [key=0, style=solid, color=red];
n58 -> n60  [key=1, style=dashed, color=darkseagreen4, label=buildMutable];
n100 -> n101  [key=0, style=solid];
n100 -> n36  [key=2, style=dotted];
n100 -> n12  [key=2, style=dotted];
n100 -> n105  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n63 -> n64  [key=0, style=solid];
n63 -> n81  [key=2, style=dotted];
n63 -> n63  [key=1, style=dashed, color=darkseagreen4, label=e];
n8 -> n9  [key=0, style=solid];
n8 -> n16  [key=2, style=dotted];
n8 -> n17  [key=2, style=dotted];
n8 -> n18  [key=2, style=dotted];
n8 -> n19  [key=2, style=dotted];
n9 -> n10  [key=0, style=solid];
n9 -> n16  [key=2, style=dotted];
n9 -> n20  [key=2, style=dotted];
n9 -> n21  [key=2, style=dotted];
n2 -> n3  [key=0, style=solid];
n2 -> n13  [key=2, style=dotted];
n2 -> n26  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n2 -> n5  [key=1, style=dashed, color=darkseagreen4, label=specProps];
n2 -> n33  [key=1, style=dashed, color=darkseagreen4, label=specProps];
n2 -> n7  [key=1, style=dashed, color=red, label=specProps];
n2 -> n54  [key=1, style=dashed, color=darkseagreen4, label=specProps];
n2 -> n55  [key=1, style=dashed, color=darkseagreen4, label=specProps];
n2 -> n59  [key=1, style=dashed, color=red, label=specProps];
n2 -> n134  [key=1, style=dashed, color=darkseagreen4, label=specProps];
n22 -> n23  [key=0, style=solid];
n59 -> n60  [key=0, style=solid, color=red];
n134 -> n135  [key=0, style=solid, color=red];
n134 -> n37  [key=2, style=dotted];
n134 -> n139  [key=2, style=dotted];
n134 -> n134  [key=1, style=dashed, color=darkseagreen4, label=sp];
n134 -> n136  [key=1, style=dashed, color=darkseagreen4, label=ctor];
n60 -> n61  [key=0, style=solid];
n60 -> n35  [key=2, style=dotted];
n60 -> n21  [key=2, style=dotted];
n60 -> n64  [key=1, style=dashed, color=darkseagreen4, label=instance];
n3 -> n4  [key=0, style=solid];
n3 -> n3  [key=1, style=dashed, color=darkseagreen4, label=pt];
n26 -> n27  [key=0, style=solid];
n4 -> n5  [key=0, style=solid];
n4 -> n14  [key=2, style=dotted];
n4 -> n15  [key=2, style=dotted];
n4 -> n7  [key=1, style=dashed, color=red, label=optionSpecs];
n4 -> n48  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
n4 -> n50  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
n4 -> n85  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
n4 -> n56  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
n6 -> n7  [key=0, style=solid, color=red];
n6 -> n43  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Error>"];
n6 -> n9  [key=1, style=dashed, color=darkseagreen4, label=notParsed];
n6 -> n6  [key=3, color=darkorchid, style=bold, label="Local variable System.Func<System.Collections.Generic.IEnumerable<CommandLine.Error>, CommandLine.ParserResult<T>> notParsed"];
n43 -> n44  [key=0, style=solid];
n43 -> n45  [key=2, style=dotted];
n43 -> n21  [key=2, style=dotted];
n43 -> n25  [key=2, style=dotted];
n43 -> n46  [key=2, style=dotted];
n10 -> n11  [key=0, style=solid];
n11 -> n0  [key=0, style=bold, color=blue];
n23 -> n24  [key=0, style=solid];
n23 -> n21  [key=2, style=dotted];
n23 -> n25  [key=2, style=dotted];
n24 -> n22  [key=0, style=bold, color=blue];
n27 -> n28  [key=0, style=solid];
n27 -> n29  [key=2, style=dotted];
n27 -> n30  [key=2, style=dotted];
n27 -> n31  [key=2, style=dotted];
n28 -> n26  [key=0, style=bold, color=blue];
n32 -> n33  [key=0, style=solid];
n34 -> n32  [key=0, style=bold, color=blue];
n39 -> n40  [key=0, style=solid];
n40 -> n41  [key=0, style=solid];
n40 -> n21  [key=2, style=dotted];
n41 -> n39  [key=0, style=bold, color=blue];
n42 -> n43  [key=0, style=solid];
n44 -> n42  [key=0, style=bold, color=blue];
n47 -> n48  [key=0, style=solid];
n49 -> n50  [key=0, style=solid];
n49 -> n67  [key=2, style=dotted];
n49 -> n61  [key=1, style=dashed, color=darkseagreen4, label=tokens];
n62 -> n63  [key=0, style=solid];
n62 -> n78  [key=2, style=dotted];
n62 -> n79  [key=2, style=dotted];
n62 -> n80  [key=2, style=dotted];
n62 -> n64  [key=1, style=dashed, color=darkseagreen4, label=allErrors];
n61 -> n62  [key=0, style=solid];
n61 -> n76  [key=2, style=dotted];
n61 -> n77  [key=2, style=dotted];
n51 -> n52  [key=0, style=solid];
n51 -> n54  [key=1, style=dashed, color=darkseagreen4, label=optionsPartition];
n84 -> n85  [key=0, style=solid];
n52 -> n53  [key=0, style=solid];
n52 -> n55  [key=1, style=dashed, color=darkseagreen4, label=valuesPartition];
n53 -> n54  [key=0, style=solid];
n53 -> n56  [key=1, style=dashed, color=darkseagreen4, label=errorsPartition];
n88 -> n89  [key=0, style=solid];
n57 -> n58  [key=0, style=solid];
n57 -> n67  [key=2, style=dotted];
n57 -> n75  [key=2, style=dotted];
n57 -> n101  [key=1, style=dashed, color=darkseagreen4, label=specPropsWithValue];
n57 -> n59  [key=1, style=dashed, color=red, label=specPropsWithValue];
n57 -> n135  [key=1, style=dashed, color=red, label=specPropsWithValue];
n57 -> n61  [key=1, style=dashed, color=darkseagreen4, label=specPropsWithValue];
n92 -> n93  [key=0, style=solid];
n95 -> n96  [key=0, style=solid];
n101 -> n102  [key=0, style=solid];
n101 -> n104  [key=2, style=dotted];
n101 -> n101  [key=1, style=dashed, color=darkseagreen4, label=mutable];
n101 -> n108  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n101 -> n112  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n101 -> n116  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n101 -> n120  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n101 -> n123  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n101 -> n127  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n135 -> n136  [key=0, style=solid, color=red];
n135 -> n140  [key=2, style=dotted, color=red];
n135 -> n141  [key=2, style=dotted, color=red];
n135 -> n142  [key=2, style=dotted, color=red];
n135 -> n12  [key=2, style=dotted, color=red];
n135 -> n143  [key=2, style=dotted, color=red];
n135 -> n135  [key=1, style=dashed, color=red, label=prms];
n135 -> n145  [key=1, style=dashed, color=red, label="lambda expression"];
n135 -> n148  [key=1, style=dashed, color=red, label="lambda expression"];
n64 -> n65  [key=0, style=solid];
n64 -> n82  [key=2, style=dotted];
n64 -> n83  [key=2, style=dotted];
n65 -> n47  [key=0, style=bold, color=blue];
n86 -> n84  [key=0, style=bold, color=blue];
n90 -> n88  [key=0, style=bold, color=blue];
n94 -> n92  [key=0, style=bold, color=blue];
n97 -> n95  [key=0, style=bold, color=blue];
n99 -> n100  [key=0, style=solid];
n105 -> n106  [key=0, style=solid];
n102 -> n103  [key=0, style=solid];
n108 -> n109  [key=0, style=solid];
n112 -> n113  [key=0, style=solid];
n116 -> n117  [key=0, style=solid];
n120 -> n121  [key=0, style=solid];
n123 -> n124  [key=0, style=solid];
n127 -> n128  [key=0, style=solid];
n103 -> n99  [key=0, style=bold, color=blue];
n106 -> n107  [key=0, style=solid];
n106 -> n21  [key=2, style=dotted];
n107 -> n105  [key=0, style=bold, color=blue];
n109 -> n110  [key=0, style=solid];
n109 -> n111  [key=2, style=dotted];
n110 -> n108  [key=0, style=bold, color=blue];
n113 -> n114  [key=0, style=solid];
n113 -> n115  [key=2, style=dotted];
n114 -> n112  [key=0, style=bold, color=blue];
n117 -> n118  [key=0, style=solid];
n117 -> n119  [key=2, style=dotted];
n117 -> n111  [key=2, style=dotted];
n118 -> n116  [key=0, style=bold, color=blue];
n121 -> n122  [key=0, style=solid];
n121 -> n115  [key=2, style=dotted];
n122 -> n120  [key=0, style=bold, color=blue];
n124 -> n125  [key=0, style=solid];
n124 -> n119  [key=2, style=dotted];
n124 -> n126  [key=2, style=dotted];
n125 -> n123  [key=0, style=bold, color=blue];
n128 -> n129  [key=0, style=solid];
n128 -> n130  [key=2, style=dotted];
n128 -> n131  [key=2, style=dotted];
n128 -> n132  [key=2, style=dotted];
n129 -> n127  [key=0, style=bold, color=blue];
n133 -> n134  [key=0, style=solid];
n136 -> n137  [key=0, style=solid];
n136 -> n144  [key=2, style=dotted];
n145 -> n146  [key=0, style=solid, color=red];
n148 -> n149  [key=0, style=solid, color=red];
n137 -> n138  [key=0, style=solid];
n138 -> n133  [key=0, style=bold, color=blue];
n146 -> n147  [key=0, style=solid, color=red];
n147 -> n145  [key=0, style=bold, color=blue];
n149 -> n150  [key=0, style=solid, color=red];
n150 -> n148  [key=0, style=bold, color=blue];
m0_18 -> m0_19  [key=0, style=solid];
m0_20 -> m0_6  [key=2, style=dotted];
m0_20 -> m0_21  [key=0, style=solid];
m0_24 -> m0_6  [key=2, style=dotted];
m0_24 -> m0_25  [key=0, style=solid];
m0_19 -> m0_20  [key=0, style=solid];
m0_19 -> m0_31  [key=2, style=dotted];
m0_19 -> m0_32  [key=2, style=dotted];
m0_19 -> m0_33  [key=2, style=dotted];
m0_21 -> m0_22  [key=0, style=solid];
m0_21 -> m0_34  [key=2, style=dotted];
m0_21 -> m0_23  [key=1, style=dashed, color=darkseagreen4, label=weapon1];
m0_21 -> m0_28  [key=1, style=dashed, color=darkseagreen4, label=weapon1];
m0_23 -> m0_24  [key=0, style=solid];
m0_23 -> m0_35  [key=2, style=dotted];
m0_25 -> m0_26  [key=0, style=solid];
m0_25 -> m0_36  [key=2, style=dotted];
m0_22 -> m0_23  [key=0, style=solid];
m0_22 -> m0_34  [key=2, style=dotted];
m0_22 -> m0_29  [key=1, style=dashed, color=darkseagreen4, label=weapon2];
m0_27 -> m0_28  [key=0, style=solid];
m0_27 -> m0_34  [key=2, style=dotted];
m0_27 -> m0_29  [key=1, style=dashed, color=darkseagreen4, label=weapon3];
m0_28 -> m0_29  [key=0, style=solid];
m0_28 -> m0_38  [key=2, style=dotted];
m0_26 -> m0_27  [key=0, style=solid];
m0_26 -> m0_37  [key=2, style=dotted];
m0_29 -> m0_30  [key=0, style=solid];
m0_29 -> m0_38  [key=2, style=dotted];
m0_30 -> m0_18  [key=0, style=bold, color=blue];
m0_6 -> m0_7  [key=0, style=solid];
m0_6 -> m0_4  [key=0, style=bold, color=blue];
m0_7 -> m0_8  [key=0, style=solid];
m0_7 -> m0_9  [key=2, style=dotted];
m0_8 -> m0_6  [key=0, style=bold, color=blue];
m0_8 -> m0_9  [key=0, style=solid];
m0_8 -> m0_11  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m0_8 -> m0_4  [key=3, color=darkorchid, style=bold, label="method methodReturn CommandLine.NameInfo FromSpecification"];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_2  [key=0, style=solid, color=green];
m0_1 -> m0_3  [key=2, style=dotted];
m0_1 -> m0_4  [key=2, style=dotted];
m0_2 -> m0_0  [key=0, style=bold, color=blue];
m0_2 -> m0_3  [key=0, style=solid, color=green];
m0_2 -> m0_5  [key=2, style=dotted, color=green];
m0_5 -> m0_6  [key=0, style=solid, color=red];
m0_5 -> m0_7  [key=2, style=dotted, color=red];
m0_3 -> m0_0  [key=0, style=bold, color=blue];
m0_9 -> m0_10  [key=0, style=solid];
m0_9 -> m0_12  [key=0, style=solid];
m0_11 -> m0_13  [key=0, style=solid];
m0_11 -> m0_4  [key=2, style=dotted];
m0_11 -> m0_12  [key=0, style=solid];
m0_11 -> m0_15  [key=2, style=dotted];
m0_11 -> m0_16  [key=2, style=dotted];
m0_10 -> m0_11  [key=0, style=solid];
m0_10 -> m0_14  [key=2, style=dotted];
m0_10 -> m0_12  [key=1, style=dashed, color=darkseagreen4, label=request];
m0_12 -> m0_13  [key=0, style=solid];
m0_12 -> m0_17  [key=2, style=dotted];
m0_13 -> m0_8  [key=0, style=bold, color=blue];
m0_13 -> m0_9  [key=0, style=bold, color=blue];
m0_39 -> m0_40  [key=0, style=solid];
m0_42 -> m0_6  [key=2, style=dotted];
m0_42 -> m0_43  [key=0, style=solid];
m0_46 -> m0_6  [key=2, style=dotted];
m0_46 -> m0_47  [key=0, style=solid];
m0_41 -> m0_42  [key=0, style=solid];
m0_41 -> m0_52  [key=2, style=dotted];
m0_41 -> m0_49  [key=1, style=dashed, color=darkseagreen4, label=cache];
m0_43 -> m0_44  [key=0, style=solid];
m0_43 -> m0_34  [key=2, style=dotted];
m0_43 -> m0_45  [key=1, style=dashed, color=darkseagreen4, label=instance];
m0_43 -> m0_50  [key=1, style=dashed, color=darkseagreen4, label=instance];
m0_45 -> m0_46  [key=0, style=solid];
m0_45 -> n38  [key=2, style=dotted];
m0_47 -> m0_48  [key=0, style=solid];
m0_47 -> m0_36  [key=2, style=dotted];
m0_40 -> m0_41  [key=0, style=solid];
m0_40 -> m0_31  [key=2, style=dotted];
m0_40 -> m0_32  [key=2, style=dotted];
m0_40 -> m0_33  [key=2, style=dotted];
m0_49 -> m0_50  [key=0, style=solid];
m0_49 -> m0_55  [key=2, style=dotted];
m0_44 -> m0_45  [key=0, style=solid];
m0_44 -> m0_53  [key=2, style=dotted];
m0_50 -> m0_51  [key=0, style=solid];
m0_50 -> m0_56  [key=2, style=dotted];
m0_48 -> m0_49  [key=0, style=solid];
m0_48 -> m0_37  [key=2, style=dotted];
m0_51 -> m0_39  [key=0, style=bold, color=blue];
m0_4 -> m0_5  [key=0, style=solid, color=red];
m0_4 -> m0_8  [key=3, color=darkorchid, style=bold, label="Parameter variable CommandLine.Core.OptionSpecification specification"];
m0_57 -> m0_2  [key=1, style=dashed, color=green, label="Ninject.Tests.Integration.RequestScopeTests.RequestScopeContext"];
m0_57 -> m0_7  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Tests.Integration.RequestScopeTests.RequestScopeContext"];
m0_58 -> m0_20  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Tests.Integration.RequestScopeTests.WhenServiceIsBoundWithRequestScope"];
m0_58 -> m0_24  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Tests.Integration.RequestScopeTests.WhenServiceIsBoundWithRequestScope"];
m0_58 -> m0_42  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Tests.Integration.RequestScopeTests.WhenServiceIsBoundWithRequestScope"];
m0_58 -> m0_46  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Tests.Integration.RequestScopeTests.WhenServiceIsBoundWithRequestScope"];
m0_58 -> m0_19  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Tests.Integration.RequestScopeTests.WhenServiceIsBoundWithRequestScope"];
m0_58 -> m0_21  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Tests.Integration.RequestScopeTests.WhenServiceIsBoundWithRequestScope"];
m0_58 -> m0_22  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Tests.Integration.RequestScopeTests.WhenServiceIsBoundWithRequestScope"];
m0_58 -> m0_27  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Tests.Integration.RequestScopeTests.WhenServiceIsBoundWithRequestScope"];
m0_58 -> m0_40  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Tests.Integration.RequestScopeTests.WhenServiceIsBoundWithRequestScope"];
m0_58 -> m0_41  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Tests.Integration.RequestScopeTests.WhenServiceIsBoundWithRequestScope"];
m0_58 -> m0_43  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Tests.Integration.RequestScopeTests.WhenServiceIsBoundWithRequestScope"];
m1_0 -> m1_1  [key=0, style=solid];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_6  [key=2, style=dotted];
m1_1 -> m1_4  [key=1, style=dashed, color=darkseagreen4, label=expected];
m1_2 -> m1_3  [key=0, style=solid];
m1_2 -> m1_7  [key=2, style=dotted];
m1_2 -> n30  [key=2, style=dotted];
m1_2 -> m1_9  [key=2, style=dotted];
m1_4 -> m1_5  [key=0, style=solid];
m1_4 -> m1_11  [key=2, style=dotted];
m1_3 -> m1_4  [key=0, style=solid];
m1_3 -> m1_10  [key=2, style=dotted];
m1_5 -> m1_0  [key=0, style=bold, color=blue];
m3_0 -> m3_1  [key=0, style=solid];
m3_0 -> m3_2  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>"];
m3_1 -> m3_2  [key=0, style=solid];
m3_1 -> m3_4  [key=0, style=solid];
m3_2 -> m3_3  [key=0, style=solid, color=green];
m3_4 -> m3_5  [key=0, style=solid];
m3_4 -> n19  [key=2, style=dotted];
m3_3 -> m3_5  [key=0, style=solid, color=green];
m3_5 -> m3_0  [key=0, style=bold, color=blue];
m3_7 -> m3_8  [key=0, style=solid];
m3_7 -> m3_9  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>"];
m3_8 -> m3_9  [key=0, style=solid];
m3_8 -> m3_11  [key=0, style=solid];
m3_9 -> m3_10  [key=0, style=solid, color=green];
m3_11 -> m3_12  [key=0, style=solid];
m3_11 -> m3_14  [key=2, style=dotted];
m3_10 -> m3_12  [key=0, style=solid, color=green];
m3_10 -> m3_13  [key=2, style=dotted, color=green];
m3_12 -> m3_7  [key=0, style=bold, color=blue];
m4_0 -> m4_1  [key=0, style=solid];
m4_0 -> m4_2  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<int>"];
m4_0 -> m4_3  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<CommandLine.Core.TypeDescriptor>"];
m4_1 -> m4_2  [key=0, style=solid];
m4_1 -> m4_19  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.TypeDescriptor"];
m4_2 -> m4_3  [key=0, style=solid];
m4_2 -> m4_19  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.TypeDescriptor"];
m4_3 -> m4_4  [key=0, style=solid];
m4_3 -> m4_19  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.TypeDescriptor"];
m4_4 -> m4_0  [key=0, style=bold, color=blue];
m4_16 -> m4_17  [key=0, style=solid, color=green];
m4_17 -> m4_18  [key=0, style=solid, color=green];
m4_18 -> m4_16  [key=0, style=bold, color=blue];
m4_12 -> m4_13  [key=0, style=solid, color=green];
m4_12 -> m4_5  [key=3, color=darkorchid, style=bold, label="method methodReturn CommandLine.Core.TypeDescriptor WithNextValue"];
m4_13 -> m4_14  [key=0, style=solid, color=green];
m4_13 -> n12  [key=2, style=dotted, color=green];
m4_13 -> m4_5  [key=2, style=dotted, color=green];
m4_13 -> m4_13  [key=1, style=dashed, color=green, label="CommandLine.Core.TypeDescriptor"];
m4_13 -> m4_16  [key=1, style=dashed, color=green, label="lambda expression"];
m4_14 -> m4_12  [key=0, style=bold, color=blue];
m4_5 -> m4_6  [key=0, style=solid];
m4_5 -> m4_8  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.TargetType"];
m4_6 -> m4_7  [key=0, style=solid];
m4_6 -> m4_8  [key=0, style=solid];
m4_8 -> m4_9  [key=0, style=solid];
m4_8 -> m4_0  [key=2, style=dotted];
m4_8 -> m4_11  [key=2, style=dotted];
m4_7 -> m4_9  [key=0, style=solid];
m4_7 -> m4_10  [key=2, style=dotted];
m4_9 -> m4_5  [key=0, style=bold, color=blue];
m5_1 -> m5_2  [key=0, style=solid];
m5_1 -> m5_3  [key=0, style=solid];
m5_3 -> m5_4  [key=0, style=solid];
m5_3 -> m5_5  [key=0, style=solid];
m5_5 -> m5_6  [key=0, style=solid];
m5_5 -> m5_7  [key=0, style=solid];
m5_7 -> m5_8  [key=0, style=solid];
m5_7 -> m5_10  [key=2, style=dotted];
m5_7 -> m5_11  [key=2, style=dotted];
m5_7 -> m5_12  [key=2, style=dotted];
m5_7 -> m5_13  [key=3, color=green, style=bold, label="Local variable System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.SpecificationProperty, CSharpx.Maybe<CommandLine.Error>>> propAndErrors"];
m5_2 -> m5_8  [key=0, style=solid];
m5_2 -> m5_9  [key=2, style=dotted];
m5_4 -> m5_8  [key=0, style=solid];
m5_4 -> m5_9  [key=2, style=dotted];
m5_6 -> m5_8  [key=0, style=solid];
m5_6 -> m5_9  [key=2, style=dotted];
m5_8 -> n91  [key=0, style=bold, color=blue];
m5_12 -> m5_13  [key=0, style=solid];
m5_12 -> m5_14  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m5_12 -> m5_28  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m5_12 -> n91  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Globalization.CultureInfo conversionCulture"];
m5_13 -> m5_14  [key=0, style=solid];
m5_13 -> m5_17  [key=2, style=dotted];
m5_13 -> m5_18  [key=2, style=dotted];
m5_13 -> m5_19  [key=2, style=dotted];
m5_13 -> m5_20  [key=2, style=dotted];
m5_13 -> m5_21  [key=2, style=dotted];
m5_13 -> m5_28  [key=1, style=dashed, color=darkseagreen4, label=type];
m5_13 -> m5_15  [key=1, style=dashed, color=darkseagreen4, label=type];
m5_13 -> m5_5  [key=3, color=green, style=bold, label="Parameter variable System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty> specProps"];
m5_14 -> m5_15  [key=0, style=solid];
m5_14 -> m5_22  [key=2, style=dotted];
m5_14 -> m5_27  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_14 -> m5_7  [key=3, color=green, style=bold, label="Parameter variable System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>> converter"];
m5_14 -> m5_14  [key=3, color=green, style=bold, label="Parameter variable System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>> converter"];
m5_15 -> m5_16  [key=0, style=solid];
m5_15 -> m5_23  [key=2, style=dotted];
m5_15 -> m5_24  [key=2, style=dotted];
m5_15 -> m5_22  [key=2, style=dotted];
m5_15 -> m5_25  [key=2, style=dotted];
m5_15 -> m5_26  [key=2, style=dotted];
m5_15 -> m5_30  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_15 -> m5_34  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_16 -> m5_12  [key=0, style=bold, color=blue];
m5_46 -> m5_53  [key=0, style=solid];
m5_46 -> m5_11  [key=3, color=darkorchid, style=bold, label="Parameter variable string value"];
m5_53 -> m5_54  [key=0, style=solid];
m5_53 -> m5_52  [key=2, style=dotted];
m5_54 -> m5_46  [key=0, style=bold, color=blue];
m5_47 -> m5_55  [key=0, style=solid];
m5_47 -> m5_56  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m5_47 -> m5_11  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Type conversionType"];
m5_55 -> m5_56  [key=0, style=solid];
m5_55 -> m5_60  [key=2, style=dotted];
m5_55 -> m5_57  [key=1, style=dashed, color=darkseagreen4, label=parsedValue];
m5_56 -> m5_57  [key=0, style=solid];
m5_56 -> m5_58  [key=0, style=solid];
m5_56 -> m5_61  [key=2, style=dotted];
m5_57 -> m5_59  [key=0, style=solid];
m5_58 -> m5_59  [key=0, style=solid];
m5_58 -> m5_62  [key=2, style=dotted];
m5_59 -> m5_47  [key=0, style=bold, color=blue];
m5_34 -> m5_35  [key=0, style=solid];
m5_28 -> m5_29  [key=0, style=solid];
m5_28 -> m5_11  [key=2, style=dotted];
m5_27 -> m5_28  [key=0, style=solid];
m5_30 -> m5_31  [key=0, style=solid];
m5_29 -> m5_27  [key=0, style=bold, color=blue];
m5_31 -> m5_32  [key=0, style=solid];
m5_31 -> m5_33  [key=2, style=dotted];
m5_32 -> m5_30  [key=0, style=bold, color=blue];
m5_35 -> m5_36  [key=0, style=solid];
m5_36 -> m5_34  [key=0, style=bold, color=blue];
m5_11 -> m5_37  [key=0, style=solid];
m5_11 -> n91  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Globalization.CultureInfo conversionCulture"];
m5_11 -> m5_13  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Type conversionType"];
m5_11 -> m5_12  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Globalization.CultureInfo conversionCulture"];
m5_11 -> m5_14  [key=3, color=darkorchid, style=bold, label="Parameter variable string value"];
m5_37 -> m5_44  [key=0, style=solid];
m5_37 -> m5_45  [key=2, style=dotted];
m5_37 -> m5_46  [key=2, style=dotted];
m5_37 -> m5_47  [key=2, style=dotted];
m5_37 -> m5_48  [key=2, style=dotted];
m5_37 -> m5_49  [key=2, style=dotted];
m5_38 -> m5_39  [key=0, style=solid];
m5_39 -> m5_44  [key=0, style=solid];
m5_39 -> m5_24  [key=2, style=dotted];
m5_40 -> m5_41  [key=0, style=solid];
m5_41 -> m5_44  [key=0, style=solid];
m5_41 -> m5_24  [key=2, style=dotted];
m5_42 -> m5_43  [key=0, style=solid];
m5_43 -> m5_44  [key=0, style=solid];
m5_43 -> m5_24  [key=2, style=dotted];
m5_44 -> m5_11  [key=0, style=bold, color=blue];
m5_45 -> m5_50  [key=0, style=solid];
m5_45 -> m5_11  [key=3, color=darkorchid, style=bold, label="Parameter variable string value"];
m5_50 -> m5_51  [key=0, style=solid];
m5_50 -> m5_52  [key=2, style=dotted];
m5_51 -> m5_45  [key=0, style=bold, color=blue];
m5_63 -> m5_28  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m5_64 -> m5_28  [key=1, style=dashed, color=darkseagreen4, label=type];
}
