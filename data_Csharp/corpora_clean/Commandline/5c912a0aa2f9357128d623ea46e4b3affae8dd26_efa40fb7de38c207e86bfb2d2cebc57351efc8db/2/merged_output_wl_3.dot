digraph  {
n12 [label="CommandLine.Tests.ArgumentParserFixture", span=""];
n0 [cluster="CommandLine.Tests.ArgumentParserFixture.GetNextInputValues()", label="Entry CommandLine.Tests.ArgumentParserFixture.GetNextInputValues()", span="40-40"];
n1 [cluster="CommandLine.Tests.ArgumentParserFixture.GetNextInputValues()", label="var ae = new StringArrayEnumerator(new string[] { ''--optarr'', ''one'', ''two'', ''--plain'', ''3'' })", span="42-42"];
n2 [cluster="CommandLine.Tests.ArgumentParserFixture.GetNextInputValues()", label="ae.MoveNext()", span="44-44"];
n7 [cluster="CommandLine.StringArrayEnumerator.StringArrayEnumerator(string[])", label="Entry CommandLine.StringArrayEnumerator.StringArrayEnumerator(string[])", span="1337-1337"];
n3 [cluster="CommandLine.Tests.ArgumentParserFixture.GetNextInputValues()", label="var items = ArgumentParser.PublicWrapperOfGetNextInputValues(ae)", span="46-46"];
n5 [cluster="CommandLine.Tests.ArgumentParserFixture.GetNextInputValues()", label="Assert.AreEqual(''two'', ae.Current)", span="49-49"];
n8 [cluster="CommandLine.StringArrayEnumerator.MoveNext()", label="Entry CommandLine.StringArrayEnumerator.MoveNext()", span="1392-1392"];
n4 [cluster="CommandLine.Tests.ArgumentParserFixture.GetNextInputValues()", color=red, community=0, label="1: base.AssertArrayItemEqual(new string[] { ''one'', ''two'' }, items)", span="48-48"];
n9 [cluster="Unk.PublicWrapperOfGetNextInputValues", label="Entry Unk.PublicWrapperOfGetNextInputValues", span=""];
n10 [cluster="Unk.AssertArrayItemEqual", label="Entry Unk.AssertArrayItemEqual", span=""];
n6 [cluster="CommandLine.Tests.ArgumentParserFixture.GetNextInputValues()", label="Exit CommandLine.Tests.ArgumentParserFixture.GetNextInputValues()", span="40-40"];
n11 [cluster="Unk.AreEqual", label="Entry Unk.AreEqual", span=""];
d4 [cluster="CommandLine.Tests.ArgumentParserFixture.GetNextInputValues()", color=green, community=0, label="1: base.ElementsShouldBeEqual(new string[] { ''one'', ''two'' }, items)", span="47-47"];
d10 [cluster="Unk.ElementsShouldBeEqual", label="Entry Unk.ElementsShouldBeEqual", span=""];
m1_0 [cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual<T>(T[], T[])", file="BaseFixture.cs", label="Entry CommandLine.Tests.BaseFixture.ElementsShouldBeEqual<T>(T[], T[])", span="39-39"];
m1_1 [cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual<T>(T[], T[])", color=green, community=0, file="BaseFixture.cs", label="1: expected.Length.Should().Equal(actual.Length)", span="41-41"];
m1_3 [cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual<T>(T[], T[])", file="BaseFixture.cs", label="i < expected.Length", span="42-42"];
m1_4 [cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual<T>(T[], T[])", color=green, community=0, file="BaseFixture.cs", label="1: expected[i].Should().Equal(actual[i])", span="44-44"];
m1_2 [cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual<T>(T[], T[])", file="BaseFixture.cs", label="int i = 0", span="42-42"];
m1_5 [cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual<T>(T[], T[])", file="BaseFixture.cs", label="i++", span="42-42"];
m1_6 [cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual<T>(T[], T[])", file="BaseFixture.cs", label="Exit CommandLine.Tests.BaseFixture.ElementsShouldBeEqual<T>(T[], T[])", span="39-39"];
m1_8 [cluster="Unk.Equal", file="BaseFixture.cs", label="Entry Unk.Equal", span=""];
m1_9 [cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual(string[], System.Collections.Generic.IList<string>)", color=red, community=0, file="BaseFixture.cs", label="1: Entry CommandLine.Tests.BaseFixture.ElementsShouldBeEqual(string[], System.Collections.Generic.IList<string>)", span="48-48"];
m1_11 [cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual(string[], System.Collections.Generic.IList<string>)", file="BaseFixture.cs", label="int i = 0", span="51-51"];
m1_12 [cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual(string[], System.Collections.Generic.IList<string>)", color=red, community=0, file="BaseFixture.cs", label="1: i < expected.Length", span="51-51"];
m1_10 [cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual(string[], System.Collections.Generic.IList<string>)", color=green, community=0, file="BaseFixture.cs", label="1: expected.Length.Should().Equal(actual.Count)", span="50-50"];
m1_13 [cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual(string[], System.Collections.Generic.IList<string>)", color=green, community=0, file="BaseFixture.cs", label="1: expected[i].Should().Equal(actual[i])", span="53-53"];
m1_14 [cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual(string[], System.Collections.Generic.IList<string>)", file="BaseFixture.cs", label="i++", span="51-51"];
m1_7 [cluster="Unk.Should", file="BaseFixture.cs", label="Entry Unk.Should", span=""];
m1_15 [cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual(string[], System.Collections.Generic.IList<string>)", file="BaseFixture.cs", label="Exit CommandLine.Tests.BaseFixture.ElementsShouldBeEqual(string[], System.Collections.Generic.IList<string>)", span="48-48"];
m2_3 [cluster="CommandLine.HelpOptionAttribute.HelpOptionAttribute(string, string)", file="CommandLine.cs", label="Entry CommandLine.HelpOptionAttribute.HelpOptionAttribute(string, string)", span="136-136"];
m2_6 [cluster="CommandLine.HelpOptionAttribute.HelpOptionAttribute(string, string)", color=green, community=0, file="CommandLine.cs", label="2: HelpText = DefaultHelpText", span="140-140"];
m2_5 [cluster="CommandLine.HelpOptionAttribute.HelpOptionAttribute(string, string)", file="CommandLine.cs", label="LongName = longName", span="139-139"];
m2_4 [cluster="CommandLine.HelpOptionAttribute.HelpOptionAttribute(string, string)", file="CommandLine.cs", label="ShortName = shortName", span="138-138"];
m2_7 [cluster="CommandLine.HelpOptionAttribute.HelpOptionAttribute(string, string)", file="CommandLine.cs", label="Exit CommandLine.HelpOptionAttribute.HelpOptionAttribute(string, string)", span="136-136"];
m2_0 [cluster="CommandLine.HelpOptionAttribute.HelpOptionAttribute()", file="CommandLine.cs", label="Entry CommandLine.HelpOptionAttribute.HelpOptionAttribute()", span="124-124"];
m2_1 [cluster="CommandLine.HelpOptionAttribute.HelpOptionAttribute()", color=green, community=0, file="CommandLine.cs", label="3: HelpText = DefaultHelpText", span="127-127"];
m2_2 [cluster="CommandLine.HelpOptionAttribute.HelpOptionAttribute()", file="CommandLine.cs", label="Exit CommandLine.HelpOptionAttribute.HelpOptionAttribute()", span="124-124"];
m2_715 [file="CommandLine.cs", label="CommandLine.HelpOptionAttribute", span=""];
m3_13 [cluster="CommandLine.Tests.CommandLineParserBaseFixture.AssertParserFailure(bool)", color=red, community=0, file="CommandLineParserBaseFixture.cs", label="1: Assert.IsFalse(result)", span="65-65"];
m3_14 [cluster="CommandLine.Tests.CommandLineParserBaseFixture.AssertParserFailure(bool)", color=green, community=0, file="CommandLineParserBaseFixture.cs", label="1: Exit CommandLine.Tests.CommandLineParserBaseFixture.AssertParserFailure(bool)", span="63-63"];
m3_15 [cluster="Unk.IsFalse", file="CommandLineParserBaseFixture.cs", label="Entry Unk.IsFalse", span=""];
m3_16 [cluster="Unk.False", file="CommandLineParserBaseFixture.cs", label="Entry Unk.False", span=""];
m3_4 [cluster="CommandLine.Tests.CommandLineParserBaseFixture.CreateCommandLineParser()", file="CommandLineParserBaseFixture.cs", label="Entry CommandLine.Tests.CommandLineParserBaseFixture.CreateCommandLineParser()", span="53-53"];
m3_5 [cluster="CommandLine.Tests.CommandLineParserBaseFixture.CreateCommandLineParser()", color=red, community=0, file="CommandLineParserBaseFixture.cs", label="0: return new CommandLineParser();", span="55-55"];
m3_6 [cluster="CommandLine.Tests.CommandLineParserBaseFixture.CreateCommandLineParser()", file="CommandLineParserBaseFixture.cs", label="Exit CommandLine.Tests.CommandLineParserBaseFixture.CreateCommandLineParser()", span="53-53"];
m3_0 [cluster="CommandLine.Tests.CommandLineParserBaseFixture.CommandLineParserBaseFixture()", file="CommandLineParserBaseFixture.cs", label="Entry CommandLine.Tests.CommandLineParserBaseFixture.CommandLineParserBaseFixture()", span="42-42"];
m3_1 [cluster="CommandLine.Tests.CommandLineParserBaseFixture.CommandLineParserBaseFixture()", file="CommandLineParserBaseFixture.cs", label="Thread.CurrentThread.CurrentCulture = new CultureInfo(''en-US'')", span="48-48"];
m3_2 [cluster="CommandLine.Tests.CommandLineParserBaseFixture.CommandLineParserBaseFixture()", file="CommandLineParserBaseFixture.cs", label="Exit CommandLine.Tests.CommandLineParserBaseFixture.CommandLineParserBaseFixture()", span="42-42"];
m3_7 [cluster="CommandLine.CommandLineParser.CommandLineParser()", file="CommandLineParserBaseFixture.cs", label="Entry CommandLine.CommandLineParser.CommandLineParser()", span="1683-1683"];
m3_12 [cluster="CommandLine.Tests.CommandLineParserBaseFixture.AssertParserFailure(bool)", file="CommandLineParserBaseFixture.cs", label="Entry CommandLine.Tests.CommandLineParserBaseFixture.AssertParserFailure(bool)", span="63-63"];
m3_11 [cluster="Unk.Should", file="CommandLineParserBaseFixture.cs", label="Entry Unk.Should", span=""];
m3_3 [cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="CommandLineParserBaseFixture.cs", label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0"];
m3_8 [cluster="CommandLine.Tests.CommandLineParserBaseFixture.ResultShouldBeTrue()", file="CommandLineParserBaseFixture.cs", label="Entry CommandLine.Tests.CommandLineParserBaseFixture.ResultShouldBeTrue()", span="60-60"];
m3_9 [cluster="CommandLine.Tests.CommandLineParserBaseFixture.ResultShouldBeTrue()", color=green, community=0, file="CommandLineParserBaseFixture.cs", label="0: Result.Should().Be.True()", span="62-62"];
m3_10 [cluster="CommandLine.Tests.CommandLineParserBaseFixture.ResultShouldBeTrue()", file="CommandLineParserBaseFixture.cs", label="Exit CommandLine.Tests.CommandLineParserBaseFixture.ResultShouldBeTrue()", span="60-60"];
m3_17 [file="CommandLineParserBaseFixture.cs", label="CommandLine.Tests.CommandLineParserBaseFixture", span=""];
m4_10 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseStringOption()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.ParseStringOption()", span="63-63"];
m4_11 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseStringOption()", file="CommandLineParserFixture.cs", label="var options = new SimpleOptions()", span="65-65"];
m4_12 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseStringOption()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: Result = base.Parser.ParseArguments(new string[] { ''-s'', ''something'' }, options)", span="66-66"];
m4_14 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseStringOption()", file="CommandLineParserFixture.cs", label="Assert.AreEqual(''something'', options.StringValue)", span="69-69"];
m4_15 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseStringOption()", file="CommandLineParserFixture.cs", label="Console.WriteLine(options)", span="70-70"];
m4_13 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseStringOption()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: ResultShouldBeTrue()", span="68-68"];
m4_16 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseStringOption()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.ParseStringOption()", span="63-63"];
m4_176 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAnIntegerTypeLongOptionFails()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAnIntegerTypeLongOptionFails()", span="302-302"];
m4_177 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAnIntegerTypeLongOptionFails()", file="CommandLineParserFixture.cs", label="var options = new NumberSetOptions()", span="304-304"];
m4_178 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAnIntegerTypeLongOptionFails()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: Result = base.Parser.ParseArguments(new string[] { ''--int'' }, options)", span="305-305"];
m4_179 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAnIntegerTypeLongOptionFails()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: ResultShouldBeFalse()", span="307-307"];
m4_180 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAnIntegerTypeLongOptionFails()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAnIntegerTypeLongOptionFails()", span="302-302"];
m4_260 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingShortValueToByteOptionMustFailGracefully()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.PassingShortValueToByteOptionMustFailGracefully()", span="445-445"];
m4_261 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingShortValueToByteOptionMustFailGracefully()", file="CommandLineParserFixture.cs", label="var options = new NumberSetOptions()", span="447-447"];
m4_262 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingShortValueToByteOptionMustFailGracefully()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: Result = base.Parser.ParseArguments(new string[] { ''-b'', short.MaxValue.ToString(CultureInfo.InvariantCulture) }, options)", span="448-448"];
m4_263 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingShortValueToByteOptionMustFailGracefully()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: ResultShouldBeFalse()", span="450-450"];
m4_264 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingShortValueToByteOptionMustFailGracefully()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.PassingShortValueToByteOptionMustFailGracefully()", span="445-445"];
m4_242 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle2()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle2()", span="413-413"];
m4_243 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle2()", file="CommandLineParserFixture.cs", label="var options = new NumberSetOptions()", span="415-415"];
m4_244 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle2()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: Result = base.Parser.ParseArguments(new string[] { ''-d-4096.1024'' }, options)", span="416-416"];
m4_246 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle2()", file="CommandLineParserFixture.cs", label="Assert.AreEqual(-4096.1024, options.DoubleValue)", span="419-419"];
m4_245 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle2()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: ResultShouldBeTrue()", span="418-418"];
m4_247 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle2()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle2()", span="413-413"];
m4_284 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingDoubleValueToFloatOptionMustFailGracefully()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.PassingDoubleValueToFloatOptionMustFailGracefully()", span="481-481"];
m4_285 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingDoubleValueToFloatOptionMustFailGracefully()", file="CommandLineParserFixture.cs", label="var options = new NumberSetOptions()", span="483-483"];
m4_286 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingDoubleValueToFloatOptionMustFailGracefully()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: Result = base.Parser.ParseArguments(new string[] { ''-f'', double.MaxValue.ToString(CultureInfo.InvariantCulture) }, options)", span="484-484"];
m4_287 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingDoubleValueToFloatOptionMustFailGracefully()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: ResultShouldBeFalse()", span="486-486"];
m4_288 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingDoubleValueToFloatOptionMustFailGracefully()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.PassingDoubleValueToFloatOptionMustFailGracefully()", span="481-481"];
m4_0 [cluster="CommandLine.Tests.CommandLineParserFixture.CommandLineParserFixture()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.CommandLineParserFixture()", span="44-44"];
m4_1 [cluster="CommandLine.Tests.CommandLineParserFixture.CommandLineParserFixture()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.CommandLineParserFixture()", span="44-44"];
m4_123 [cluster="CommandLine.Tests.Mocks.SimpleOptionsWithBadDefaults.SimpleOptionsWithBadDefaults()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.Mocks.SimpleOptionsWithBadDefaults.SimpleOptionsWithBadDefaults()", span="33-33"];
m4_80 [cluster="CommandLine.Tests.Mocks.SimpleOptionsWithEnum.SimpleOptionsWithEnum()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.Mocks.SimpleOptionsWithEnum.SimpleOptionsWithEnum()", span="38-38"];
m4_118 [cluster="CommandLine.Tests.Mocks.SimpleOptionsWithDefaultArray.SimpleOptionsWithDefaultArray()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.Mocks.SimpleOptionsWithDefaultArray.SimpleOptionsWithDefaultArray()", span="35-35"];
m4_254 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle4()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle4()", span="433-433"];
m4_255 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle4()", file="CommandLineParserFixture.cs", label="var options = new NumberSetOptions()", span="435-435"];
m4_256 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle4()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: Result = base.Parser.ParseArguments(new string[] { ''--double=-4096.1024'' }, options)", span="436-436"];
m4_258 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle4()", file="CommandLineParserFixture.cs", label="Assert.AreEqual(-4096.1024, options.DoubleValue)", span="439-439"];
m4_257 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle4()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: ResultShouldBeTrue()", span="438-438"];
m4_259 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle4()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle4()", span="433-433"];
m4_90 [cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="CommandLineParserFixture.cs", label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0"];
m4_283 [cluster="float.ToString(System.IFormatProvider)", file="CommandLineParserFixture.cs", label="Entry float.ToString(System.IFormatProvider)", span="0-0"];
m4_248 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle3()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle3()", span="423-423"];
m4_249 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle3()", file="CommandLineParserFixture.cs", label="var options = new NumberSetOptions()", span="425-425"];
m4_250 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle3()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: Result = base.Parser.ParseArguments(new string[] { ''--double'', ''-4096.1024'' }, options)", span="426-426"];
m4_252 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle3()", file="CommandLineParserFixture.cs", label="Assert.AreEqual(-4096.1024, options.DoubleValue)", span="429-429"];
m4_251 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle3()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: ResultShouldBeTrue()", span="428-428"];
m4_253 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle3()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle3()", span="423-423"];
m4_91 [cluster="CommandLine.Tests.Mocks.NumberSetOptions.NumberSetOptions()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.Mocks.NumberSetOptions.NumberSetOptions()", span="35-35"];
m4_7 [cluster="CommandLine.Tests.CommandLineParserFixture.WillThrowExceptionIfOptionsInstanceIsNull()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.WillThrowExceptionIfOptionsInstanceIsNull()", span="57-57"];
m4_8 [cluster="CommandLine.Tests.CommandLineParserFixture.WillThrowExceptionIfOptionsInstanceIsNull()", file="CommandLineParserFixture.cs", label="base.Parser.ParseArguments(new string[] { }, null)", span="59-59"];
m4_9 [cluster="CommandLine.Tests.CommandLineParserFixture.WillThrowExceptionIfOptionsInstanceIsNull()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.WillThrowExceptionIfOptionsInstanceIsNull()", span="57-57"];
m4_72 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseEnumOptions()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.ParseEnumOptions()", span="145-145"];
m4_73 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseEnumOptions()", file="CommandLineParserFixture.cs", label="var options = new SimpleOptionsWithEnum()", span="147-147"];
m4_74 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseEnumOptions()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: Result = base.Parser.ParseArguments(new string[] { ''-s'', ''data.bin'', ''-a'', ''ReadWrite'' }, options)", span="149-149"];
m4_76 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseEnumOptions()", file="CommandLineParserFixture.cs", label="Assert.AreEqual(''data.bin'', options.StringValue)", span="152-152"];
m4_77 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseEnumOptions()", file="CommandLineParserFixture.cs", label="Assert.AreEqual(FileAccess.ReadWrite, options.FileAccess)", span="153-153"];
m4_78 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseEnumOptions()", file="CommandLineParserFixture.cs", label="Console.WriteLine(options)", span="154-154"];
m4_75 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseEnumOptions()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: ResultShouldBeTrue()", span="151-151"];
m4_79 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseEnumOptions()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.ParseEnumOptions()", span="145-145"];
m4_17 [cluster="CommandLine.Tests.CommandLineParserBaseFixture.AssertParserSuccess(bool)", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserBaseFixture.AssertParserSuccess(bool)", span="58-58"];
m4_129 [cluster="CommandLine.Tests.CommandLineParserBaseFixture.AssertParserFailure(bool)", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserBaseFixture.AssertParserFailure(bool)", span="63-63"];
m4_160 [cluster="CommandLine.CommandLineParserSettings.CommandLineParserSettings(bool)", file="CommandLineParserFixture.cs", label="Entry CommandLine.CommandLineParserSettings.CommandLineParserSettings(bool)", span="1555-1555"];
m4_224 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle3()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle3()", span="383-383"];
m4_225 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle3()", file="CommandLineParserFixture.cs", label="var options = new NumberSetOptions()", span="385-385"];
m4_226 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle3()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: Result = base.Parser.ParseArguments(new string[] { ''--int'', ''-4096'' }, options)", span="386-386"];
m4_228 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle3()", file="CommandLineParserFixture.cs", label="Assert.AreEqual(-4096, options.IntegerValue)", span="389-389"];
m4_227 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle3()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: ResultShouldBeTrue()", span="388-388"];
m4_229 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle3()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle3()", span="383-383"];
m4_161 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAStringTypeLongOptionFails()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAStringTypeLongOptionFails()", span="275-275"];
m4_162 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAStringTypeLongOptionFails()", file="CommandLineParserFixture.cs", label="var options = new SimpleOptions()", span="277-277"];
m4_163 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAStringTypeLongOptionFails()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: Result = base.Parser.ParseArguments(new string[] { ''--string'' }, options)", span="278-278"];
m4_164 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAStringTypeLongOptionFails()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: ResultShouldBeFalse()", span="280-280"];
m4_165 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAStringTypeLongOptionFails()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAStringTypeLongOptionFails()", span="275-275"];
m4_29 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseShortAdjacentOptions()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.ParseShortAdjacentOptions()", span="88-88"];
m4_30 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseShortAdjacentOptions()", file="CommandLineParserFixture.cs", label="var options = new BooleanSetOptions()", span="90-90"];
m4_31 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseShortAdjacentOptions()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: Result = base.Parser.ParseArguments(new string[] { ''-ca'', ''-d65'' }, options)", span="91-91"];
m4_33 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseShortAdjacentOptions()", file="CommandLineParserFixture.cs", label="Assert.IsTrue(options.BooleanThree)", span="94-94"];
m4_34 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseShortAdjacentOptions()", file="CommandLineParserFixture.cs", label="Assert.IsTrue(options.BooleanOne)", span="95-95"];
m4_35 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseShortAdjacentOptions()", file="CommandLineParserFixture.cs", label="Assert.IsFalse(options.BooleanTwo)", span="96-96"];
m4_36 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseShortAdjacentOptions()", file="CommandLineParserFixture.cs", label="Assert.AreEqual(65, options.NonBooleanValue)", span="97-97"];
m4_37 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseShortAdjacentOptions()", file="CommandLineParserFixture.cs", label="Console.WriteLine(options)", span="98-98"];
m4_32 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseShortAdjacentOptions()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: ResultShouldBeTrue()", span="93-93"];
m4_38 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseShortAdjacentOptions()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.ParseShortAdjacentOptions()", span="88-88"];
m4_67 [cluster="CommandLine.Tests.CommandLineParserFixture.ShortOptionRefusesEqualToken()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.ShortOptionRefusesEqualToken()", span="135-135"];
m4_68 [cluster="CommandLine.Tests.CommandLineParserFixture.ShortOptionRefusesEqualToken()", file="CommandLineParserFixture.cs", label="var options = new SimpleOptions()", span="137-137"];
m4_69 [cluster="CommandLine.Tests.CommandLineParserFixture.ShortOptionRefusesEqualToken()", file="CommandLineParserFixture.cs", label="Assert.IsFalse(base.Parser.ParseArguments(new string[] { ''-i=10'' }, options))", span="139-139"];
m4_70 [cluster="CommandLine.Tests.CommandLineParserFixture.ShortOptionRefusesEqualToken()", file="CommandLineParserFixture.cs", label="Console.WriteLine(options)", span="140-140"];
m4_71 [cluster="CommandLine.Tests.CommandLineParserFixture.ShortOptionRefusesEqualToken()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.ShortOptionRefusesEqualToken()", span="135-135"];
m4_278 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingFloatValueToLongOptionMustFailGracefully()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.PassingFloatValueToLongOptionMustFailGracefully()", span="472-472"];
m4_279 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingFloatValueToLongOptionMustFailGracefully()", file="CommandLineParserFixture.cs", label="var options = new NumberSetOptions()", span="474-474"];
m4_280 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingFloatValueToLongOptionMustFailGracefully()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: Result = base.Parser.ParseArguments(new string[] { ''-l'', float.MaxValue.ToString(CultureInfo.InvariantCulture) }, options)", span="475-475"];
m4_281 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingFloatValueToLongOptionMustFailGracefully()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: ResultShouldBeFalse()", span="477-477"];
m4_282 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingFloatValueToLongOptionMustFailGracefully()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.PassingFloatValueToLongOptionMustFailGracefully()", span="472-472"];
m4_52 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionList()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.ParseOptionList()", span="116-116"];
m4_53 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionList()", file="CommandLineParserFixture.cs", label="var options = new SimpleOptionsWithOptionList()", span="118-118"];
m4_54 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionList()", color=green, community=1, file="CommandLineParserFixture.cs", label="1: Result = base.Parser.ParseArguments(new string[] {\r\n                                ''-k'', ''string1:stringTwo:stringIII'', ''-s'', ''test-file.txt'' }, options)", span="119-120"];
m4_56 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionList()", file="CommandLineParserFixture.cs", label="Assert.AreEqual(''string1'', options.SearchKeywords[0])", span="123-123"];
m4_57 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionList()", file="CommandLineParserFixture.cs", label="Console.WriteLine(options.SearchKeywords[0])", span="124-124"];
m4_58 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionList()", file="CommandLineParserFixture.cs", label="Assert.AreEqual(''stringTwo'', options.SearchKeywords[1])", span="125-125"];
m4_59 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionList()", file="CommandLineParserFixture.cs", label="Console.WriteLine(options.SearchKeywords[1])", span="126-126"];
m4_60 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionList()", file="CommandLineParserFixture.cs", label="Assert.AreEqual(''stringIII'', options.SearchKeywords[2])", span="127-127"];
m4_61 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionList()", file="CommandLineParserFixture.cs", label="Console.WriteLine(options.SearchKeywords[2])", span="128-128"];
m4_62 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionList()", file="CommandLineParserFixture.cs", label="Assert.AreEqual(''test-file.txt'', options.StringValue)", span="129-129"];
m4_63 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionList()", file="CommandLineParserFixture.cs", label="Console.WriteLine(options.StringValue)", span="130-130"];
m4_55 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionList()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: ResultShouldBeTrue()", span="122-122"];
m4_64 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionList()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.ParseOptionList()", span="116-116"];
m4_191 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToADoubleTypeLongOptionFails()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.PassingNoValueToADoubleTypeLongOptionFails()", span="329-329"];
m4_192 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToADoubleTypeLongOptionFails()", file="CommandLineParserFixture.cs", label="var options = new NumberSetOptions()", span="331-331"];
m4_193 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToADoubleTypeLongOptionFails()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: Result = base.Parser.ParseArguments(new string[] { ''--double'' }, options)", span="332-332"];
m4_194 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToADoubleTypeLongOptionFails()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: ResultShouldBeFalse()", span="334-334"];
m4_195 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToADoubleTypeLongOptionFails()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.PassingNoValueToADoubleTypeLongOptionFails()", span="329-329"];
m4_6 [cluster="CommandLine.ICommandLineParser.ParseArguments(string[], object)", file="CommandLineParserFixture.cs", label="Entry CommandLine.ICommandLineParser.ParseArguments(string[], object)", span="1473-1473"];
m4_151 [cluster="CommandLine.Tests.CommandLineParserFixture.DisablingCaseSensitive()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.DisablingCaseSensitive()", span="261-261"];
m4_152 [cluster="CommandLine.Tests.CommandLineParserFixture.DisablingCaseSensitive()", file="CommandLineParserFixture.cs", label="ICommandLineParser local = new CommandLineParser(new CommandLineParserSettings(false))", span="263-263"];
m4_153 [cluster="CommandLine.Tests.CommandLineParserFixture.DisablingCaseSensitive()", file="CommandLineParserFixture.cs", label="var options = new MixedCaseOptions()", span="264-264"];
m4_154 [cluster="CommandLine.Tests.CommandLineParserFixture.DisablingCaseSensitive()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: Result = local.ParseArguments(new string[] { ''-A'', ''alfa'', ''--Beta-Option'', ''beta'' }, options)", span="265-265"];
m4_156 [cluster="CommandLine.Tests.CommandLineParserFixture.DisablingCaseSensitive()", file="CommandLineParserFixture.cs", label="Assert.AreEqual(''alfa'', options.AlfaValue)", span="268-268"];
m4_157 [cluster="CommandLine.Tests.CommandLineParserFixture.DisablingCaseSensitive()", file="CommandLineParserFixture.cs", label="Assert.AreEqual(''beta'', options.BetaValue)", span="269-269"];
m4_155 [cluster="CommandLine.Tests.CommandLineParserFixture.DisablingCaseSensitive()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: ResultShouldBeTrue()", span="267-267"];
m4_158 [cluster="CommandLine.Tests.CommandLineParserFixture.DisablingCaseSensitive()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.DisablingCaseSensitive()", span="261-261"];
m4_218 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle2()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle2()", span="374-374"];
m4_219 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle2()", file="CommandLineParserFixture.cs", label="var options = new NumberSetOptions()", span="376-376"];
m4_220 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle2()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: Result = base.Parser.ParseArguments(new string[] { ''-i-4096'' }, options)", span="377-377"];
m4_222 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle2()", file="CommandLineParserFixture.cs", label="Assert.AreEqual(-4096, options.IntegerValue)", span="380-380"];
m4_221 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle2()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: ResultShouldBeTrue()", span="379-379"];
m4_223 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle2()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle2()", span="374-374"];
m4_19 [cluster="System.Console.WriteLine(object)", file="CommandLineParserFixture.cs", label="Entry System.Console.WriteLine(object)", span="0-0"];
m4_39 [cluster="CommandLine.Tests.Mocks.BooleanSetOptions.BooleanSetOptions()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.Mocks.BooleanSetOptions.BooleanSetOptions()", span="35-35"];
m4_65 [cluster="CommandLine.Tests.Mocks.SimpleOptionsWithOptionList.SimpleOptionsWithOptionList()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.Mocks.SimpleOptionsWithOptionList.SimpleOptionsWithOptionList()", span="35-35"];
m4_135 [cluster="CommandLine.Tests.CommandLineParserFixture.DefaultParsingIsCaseSensitive()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.DefaultParsingIsCaseSensitive()", span="239-239"];
m4_136 [cluster="CommandLine.Tests.CommandLineParserFixture.DefaultParsingIsCaseSensitive()", file="CommandLineParserFixture.cs", label="ICommandLineParser local = new CommandLineParser()", span="241-241"];
m4_137 [cluster="CommandLine.Tests.CommandLineParserFixture.DefaultParsingIsCaseSensitive()", file="CommandLineParserFixture.cs", label="var options = new MixedCaseOptions()", span="242-242"];
m4_138 [cluster="CommandLine.Tests.CommandLineParserFixture.DefaultParsingIsCaseSensitive()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: Result = local.ParseArguments(new string[] { ''-a'', ''alfa'', ''--beta-OPTION'', ''beta'' }, options)", span="243-243"];
m4_140 [cluster="CommandLine.Tests.CommandLineParserFixture.DefaultParsingIsCaseSensitive()", file="CommandLineParserFixture.cs", label="Assert.AreEqual(''alfa'', options.AlfaValue)", span="246-246"];
m4_141 [cluster="CommandLine.Tests.CommandLineParserFixture.DefaultParsingIsCaseSensitive()", file="CommandLineParserFixture.cs", label="Assert.AreEqual(''beta'', options.BetaValue)", span="247-247"];
m4_139 [cluster="CommandLine.Tests.CommandLineParserFixture.DefaultParsingIsCaseSensitive()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: ResultShouldBeTrue()", span="245-245"];
m4_142 [cluster="CommandLine.Tests.CommandLineParserFixture.DefaultParsingIsCaseSensitive()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.DefaultParsingIsCaseSensitive()", span="239-239"];
m4_81 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNumber()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNumber()", span="158-158"];
m4_82 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNumber()", file="CommandLineParserFixture.cs", label="var actualCulture = Thread.CurrentThread.CurrentCulture", span="160-160"];
m4_83 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNumber()", file="CommandLineParserFixture.cs", label="Thread.CurrentThread.CurrentCulture = new CultureInfo(''it-IT'')", span="161-161"];
m4_88 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNumber()", file="CommandLineParserFixture.cs", label="Thread.CurrentThread.CurrentCulture = actualCulture", span="168-168"];
m4_84 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNumber()", file="CommandLineParserFixture.cs", label="var options = new NumberSetOptions()", span="162-162"];
m4_85 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNumber()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: Result = base.Parser.ParseArguments(new string[] { ''-d'', ''10,986'' }, options)", span="163-163"];
m4_87 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNumber()", file="CommandLineParserFixture.cs", label="Assert.AreEqual(10.986, options.DoubleValue)", span="166-166"];
m4_86 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNumber()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: ResultShouldBeTrue()", span="165-165"];
m4_89 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNumber()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNumber()", span="158-158"];
m4_130 [cluster="CommandLine.Tests.CommandLineParserFixture.ParsingNonExistentLongOptionFailsWithoutThrowingAnException()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.ParsingNonExistentLongOptionFailsWithoutThrowingAnException()", span="228-228"];
m4_131 [cluster="CommandLine.Tests.CommandLineParserFixture.ParsingNonExistentLongOptionFailsWithoutThrowingAnException()", file="CommandLineParserFixture.cs", label="var options = new SimpleOptions()", span="230-230"];
m4_132 [cluster="CommandLine.Tests.CommandLineParserFixture.ParsingNonExistentLongOptionFailsWithoutThrowingAnException()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: Result = base.Parser.ParseArguments(new string[] { ''--extend'' }, options)", span="231-231"];
m4_133 [cluster="CommandLine.Tests.CommandLineParserFixture.ParsingNonExistentLongOptionFailsWithoutThrowingAnException()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: ResultShouldBeFalse()", span="233-233"];
m4_134 [cluster="CommandLine.Tests.CommandLineParserFixture.ParsingNonExistentLongOptionFailsWithoutThrowingAnException()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.ParsingNonExistentLongOptionFailsWithoutThrowingAnException()", span="228-228"];
m4_20 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseStringIntegerBoolOptions()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.ParseStringIntegerBoolOptions()", span="74-74"];
m4_21 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseStringIntegerBoolOptions()", file="CommandLineParserFixture.cs", label="var options = new SimpleOptions()", span="76-76"];
m4_22 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseStringIntegerBoolOptions()", color=green, community=1, file="CommandLineParserFixture.cs", label="1: Result = base.Parser.ParseArguments(\r\n                    new string[] { ''-s'', ''another string'', ''-i100'', ''--switch'' }, options)", span="77-78"];
m4_24 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseStringIntegerBoolOptions()", file="CommandLineParserFixture.cs", label="Assert.AreEqual(''another string'', options.StringValue)", span="81-81"];
m4_25 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseStringIntegerBoolOptions()", file="CommandLineParserFixture.cs", label="Assert.AreEqual(100, options.IntegerValue)", span="82-82"];
m4_26 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseStringIntegerBoolOptions()", file="CommandLineParserFixture.cs", label="Assert.AreEqual(true, options.BooleanValue)", span="83-83"];
m4_27 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseStringIntegerBoolOptions()", file="CommandLineParserFixture.cs", label="Console.WriteLine(options)", span="84-84"];
m4_23 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseStringIntegerBoolOptions()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: ResultShouldBeTrue()", span="80-80"];
m4_28 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseStringIntegerBoolOptions()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.ParseStringIntegerBoolOptions()", span="74-74"];
m4_202 [cluster="CommandLine.Tests.CommandLineParserFixture.AllowSingleDashAsNonOptionValue()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.AllowSingleDashAsNonOptionValue()", span="350-350"];
m4_203 [cluster="CommandLine.Tests.CommandLineParserFixture.AllowSingleDashAsNonOptionValue()", file="CommandLineParserFixture.cs", label="var options = new SimpleOptionsWithValueList()", span="352-352"];
m4_204 [cluster="CommandLine.Tests.CommandLineParserFixture.AllowSingleDashAsNonOptionValue()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: Result = base.Parser.ParseArguments(new string[] { ''-sparser.xml'', ''-'', ''--switch'' }, options)", span="353-353"];
m4_206 [cluster="CommandLine.Tests.CommandLineParserFixture.AllowSingleDashAsNonOptionValue()", file="CommandLineParserFixture.cs", label="Assert.AreEqual(''parser.xml'', options.StringValue)", span="356-356"];
m4_207 [cluster="CommandLine.Tests.CommandLineParserFixture.AllowSingleDashAsNonOptionValue()", file="CommandLineParserFixture.cs", label="Assert.AreEqual(true, options.BooleanValue)", span="357-357"];
m4_208 [cluster="CommandLine.Tests.CommandLineParserFixture.AllowSingleDashAsNonOptionValue()", file="CommandLineParserFixture.cs", label="Assert.AreEqual(1, options.Items.Count)", span="358-358"];
m4_209 [cluster="CommandLine.Tests.CommandLineParserFixture.AllowSingleDashAsNonOptionValue()", file="CommandLineParserFixture.cs", label="Assert.AreEqual(''-'', options.Items[0])", span="359-359"];
m4_205 [cluster="CommandLine.Tests.CommandLineParserFixture.AllowSingleDashAsNonOptionValue()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: ResultShouldBeTrue()", span="355-355"];
m4_210 [cluster="CommandLine.Tests.CommandLineParserFixture.AllowSingleDashAsNonOptionValue()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.AllowSingleDashAsNonOptionValue()", span="350-350"];
m4_143 [cluster="CommandLine.CommandLineParser.CommandLineParser()", file="CommandLineParserFixture.cs", label="Entry CommandLine.CommandLineParser.CommandLineParser()", span="1683-1683"];
m4_41 [cluster="Unk.IsFalse", file="CommandLineParserFixture.cs", label="Entry Unk.IsFalse", span=""];
m4_145 [cluster="CommandLine.Tests.CommandLineParserFixture.UsingWrongCaseWithDefaultFails()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.UsingWrongCaseWithDefaultFails()", span="251-251"];
m4_146 [cluster="CommandLine.Tests.CommandLineParserFixture.UsingWrongCaseWithDefaultFails()", file="CommandLineParserFixture.cs", label="ICommandLineParser local = new CommandLineParser()", span="253-253"];
m4_147 [cluster="CommandLine.Tests.CommandLineParserFixture.UsingWrongCaseWithDefaultFails()", file="CommandLineParserFixture.cs", label="var options = new MixedCaseOptions()", span="254-254"];
m4_148 [cluster="CommandLine.Tests.CommandLineParserFixture.UsingWrongCaseWithDefaultFails()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: Result = local.ParseArguments(new string[] { ''-A'', ''alfa'', ''--Beta-Option'', ''beta'' }, options)", span="255-255"];
m4_149 [cluster="CommandLine.Tests.CommandLineParserFixture.UsingWrongCaseWithDefaultFails()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: ResultShouldBeFalse()", span="257-257"];
m4_150 [cluster="CommandLine.Tests.CommandLineParserFixture.UsingWrongCaseWithDefaultFails()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.UsingWrongCaseWithDefaultFails()", span="251-251"];
m4_159 [cluster="CommandLine.CommandLineParser.CommandLineParser(CommandLine.CommandLineParserSettings)", file="CommandLineParserFixture.cs", label="Entry CommandLine.CommandLineParser.CommandLineParser(CommandLine.CommandLineParserSettings)", span="1694-1694"];
m4_2 [cluster="CommandLine.Tests.CommandLineParserFixture.WillThrowExceptionIfArgumentsArrayIsNull()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.WillThrowExceptionIfArgumentsArrayIsNull()", span="50-50"];
m4_3 [cluster="CommandLine.Tests.CommandLineParserFixture.WillThrowExceptionIfArgumentsArrayIsNull()", file="CommandLineParserFixture.cs", label="base.Parser.ParseArguments(null, new SimpleOptions())", span="52-52"];
m4_4 [cluster="CommandLine.Tests.CommandLineParserFixture.WillThrowExceptionIfArgumentsArrayIsNull()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.WillThrowExceptionIfArgumentsArrayIsNull()", span="50-50"];
m4_119 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithBadDefaults()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithBadDefaults()", span="211-211"];
m4_120 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithBadDefaults()", file="CommandLineParserFixture.cs", label="var options = new SimpleOptionsWithBadDefaults()", span="213-213"];
m4_121 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithBadDefaults()", file="CommandLineParserFixture.cs", label="base.Parser.ParseArguments(new string[] {}, options)", span="214-214"];
m4_122 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithBadDefaults()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithBadDefaults()", span="211-211"];
m4_211 [cluster="CommandLine.Tests.Mocks.SimpleOptionsWithValueList.SimpleOptionsWithValueList()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.Mocks.SimpleOptionsWithValueList.SimpleOptionsWithValueList()", span="35-35"];
m4_109 [cluster="CommandLine.Tests.Mocks.SimpleOptionsWithDefaults.SimpleOptionsWithDefaults()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.Mocks.SimpleOptionsWithDefaults.SimpleOptionsWithDefaults()", span="33-33"];
m4_196 [cluster="CommandLine.Tests.CommandLineParserFixture.AllowSingleDashAsOptionInputValue()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.AllowSingleDashAsOptionInputValue()", span="340-340"];
m4_197 [cluster="CommandLine.Tests.CommandLineParserFixture.AllowSingleDashAsOptionInputValue()", file="CommandLineParserFixture.cs", label="var options = new SimpleOptions()", span="342-342"];
m4_198 [cluster="CommandLine.Tests.CommandLineParserFixture.AllowSingleDashAsOptionInputValue()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: Result = base.Parser.ParseArguments(new string[] { ''--string'', ''-'' }, options)", span="343-343"];
m4_200 [cluster="CommandLine.Tests.CommandLineParserFixture.AllowSingleDashAsOptionInputValue()", file="CommandLineParserFixture.cs", label="Assert.AreEqual(''-'', options.StringValue)", span="346-346"];
m4_199 [cluster="CommandLine.Tests.CommandLineParserFixture.AllowSingleDashAsOptionInputValue()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: ResultShouldBeTrue()", span="345-345"];
m4_201 [cluster="CommandLine.Tests.CommandLineParserFixture.AllowSingleDashAsOptionInputValue()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.AllowSingleDashAsOptionInputValue()", span="340-340"];
m4_5 [cluster="CommandLine.Tests.Mocks.SimpleOptions.SimpleOptions()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.Mocks.SimpleOptions.SimpleOptions()", span="33-33"];
m4_212 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue()", span="365-365"];
m4_213 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue()", file="CommandLineParserFixture.cs", label="var options = new SimpleOptions()", span="367-367"];
m4_214 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: Result = base.Parser.ParseArguments(new string[] { ''-i'', ''-4096'' }, options)", span="368-368"];
m4_216 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue()", file="CommandLineParserFixture.cs", label="Assert.AreEqual(-4096, options.IntegerValue)", span="371-371"];
m4_215 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: ResultShouldBeTrue()", span="370-370"];
m4_217 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue()", span="365-365"];
m4_266 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingIntegerValueToShortOptionMustFailGracefully()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.PassingIntegerValueToShortOptionMustFailGracefully()", span="454-454"];
m4_267 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingIntegerValueToShortOptionMustFailGracefully()", file="CommandLineParserFixture.cs", label="var options = new NumberSetOptions()", span="456-456"];
m4_268 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingIntegerValueToShortOptionMustFailGracefully()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: Result = base.Parser.ParseArguments(new string[] { ''-s'', int.MaxValue.ToString(CultureInfo.InvariantCulture) }, options)", span="457-457"];
m4_269 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingIntegerValueToShortOptionMustFailGracefully()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: ResultShouldBeFalse()", span="459-459"];
m4_270 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingIntegerValueToShortOptionMustFailGracefully()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.PassingIntegerValueToShortOptionMustFailGracefully()", span="454-454"];
m4_230 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle4()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle4()", span="392-392"];
m4_231 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle4()", file="CommandLineParserFixture.cs", label="var options = new NumberSetOptions()", span="394-394"];
m4_232 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle4()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: Result = base.Parser.ParseArguments(new string[] { ''--int=-4096'' }, options)", span="395-395"];
m4_234 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle4()", file="CommandLineParserFixture.cs", label="Assert.AreEqual(-4096, options.IntegerValue)", span="398-398"];
m4_233 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle4()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: ResultShouldBeTrue()", span="397-397"];
m4_235 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle4()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle4()", span="392-392"];
m4_66 [cluster="System.Console.WriteLine(string)", file="CommandLineParserFixture.cs", label="Entry System.Console.WriteLine(string)", span="0-0"];
m4_42 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseShortLongOptions()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.ParseShortLongOptions()", span="102-102"];
m4_43 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseShortLongOptions()", file="CommandLineParserFixture.cs", label="var options = new BooleanSetOptions()", span="104-104"];
m4_44 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseShortLongOptions()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: Result = base.Parser.ParseArguments(new string[] { ''-b'', ''--double=9'' }, options)", span="105-105"];
m4_46 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseShortLongOptions()", file="CommandLineParserFixture.cs", label="Assert.IsTrue(options.BooleanTwo)", span="108-108"];
m4_47 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseShortLongOptions()", file="CommandLineParserFixture.cs", label="Assert.IsFalse(options.BooleanOne)", span="109-109"];
m4_48 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseShortLongOptions()", file="CommandLineParserFixture.cs", label="Assert.IsFalse(options.BooleanThree)", span="110-110"];
m4_49 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseShortLongOptions()", file="CommandLineParserFixture.cs", label="Assert.AreEqual(9, options.NonBooleanValue)", span="111-111"];
m4_50 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseShortLongOptions()", file="CommandLineParserFixture.cs", label="Console.WriteLine(options)", span="112-112"];
m4_45 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseShortLongOptions()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: ResultShouldBeTrue()", span="107-107"];
m4_51 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseShortLongOptions()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.ParseShortLongOptions()", span="102-102"];
m4_166 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAByteTypeLongOptionFails()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAByteTypeLongOptionFails()", span="284-284"];
m4_167 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAByteTypeLongOptionFails()", file="CommandLineParserFixture.cs", label="var options = new NumberSetOptions()", span="286-286"];
m4_168 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAByteTypeLongOptionFails()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: Result = base.Parser.ParseArguments(new string[] { ''--byte'' }, options)", span="287-287"];
m4_169 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAByteTypeLongOptionFails()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: ResultShouldBeFalse()", span="289-289"];
m4_170 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAByteTypeLongOptionFails()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAByteTypeLongOptionFails()", span="284-284"];
m4_181 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToALongTypeLongOptionFails()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.PassingNoValueToALongTypeLongOptionFails()", span="311-311"];
m4_182 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToALongTypeLongOptionFails()", file="CommandLineParserFixture.cs", label="var options = new NumberSetOptions()", span="313-313"];
m4_183 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToALongTypeLongOptionFails()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: Result = base.Parser.ParseArguments(new string[] { ''--long'' }, options)", span="314-314"];
m4_184 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToALongTypeLongOptionFails()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: ResultShouldBeFalse()", span="316-316"];
m4_185 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToALongTypeLongOptionFails()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.PassingNoValueToALongTypeLongOptionFails()", span="311-311"];
m4_144 [cluster="CommandLine.Tests.Mocks.MixedCaseOptions.MixedCaseOptions()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.Mocks.MixedCaseOptions.MixedCaseOptions()", span="33-33"];
m4_236 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue()", span="403-403"];
m4_237 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue()", file="CommandLineParserFixture.cs", label="var options = new NumberSetOptions()", span="405-405"];
m4_238 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: Result = base.Parser.ParseArguments(new string[] { ''-d'', ''-4096.1024'' }, options)", span="406-406"];
m4_240 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue()", file="CommandLineParserFixture.cs", label="Assert.AreEqual(-4096.1024, options.DoubleValue)", span="409-409"];
m4_239 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: ResultShouldBeTrue()", span="408-408"];
m4_241 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue()", span="403-403"];
m4_289 [cluster="double.ToString(System.IFormatProvider)", file="CommandLineParserFixture.cs", label="Entry double.ToString(System.IFormatProvider)", span="0-0"];
m4_110 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithDefaultArray()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithDefaultArray()", span="198-198"];
m4_111 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithDefaultArray()", file="CommandLineParserFixture.cs", label="var options = new SimpleOptionsWithDefaultArray()", span="200-200"];
m4_112 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithDefaultArray()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: Result = base.Parser.ParseArguments(new string[] { ''-y'', ''4'', ''5'', ''6'' }, options)", span="201-201"];
m4_114 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithDefaultArray()", file="CommandLineParserFixture.cs", label="Assert.AreEqual(new string[] { ''a'', ''b'', ''c'' }, options.StringArrayValue)", span="204-204"];
m4_115 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithDefaultArray()", file="CommandLineParserFixture.cs", label="Assert.AreEqual(new int[] { 4, 5, 6 }, options.IntegerArrayValue)", span="205-205"];
m4_116 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithDefaultArray()", file="CommandLineParserFixture.cs", label="Assert.AreEqual(new double[] { 1.1, 2.2, 3.3 }, options.DoubleArrayValue)", span="206-206"];
m4_113 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithDefaultArray()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: ResultShouldBeTrue()", span="203-203"];
m4_117 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithDefaultArray()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithDefaultArray()", span="198-198"];
m4_272 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingLongValueToIntegerOptionMustFailGracefully()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.PassingLongValueToIntegerOptionMustFailGracefully()", span="463-463"];
m4_273 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingLongValueToIntegerOptionMustFailGracefully()", file="CommandLineParserFixture.cs", label="var options = new NumberSetOptions()", span="465-465"];
m4_274 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingLongValueToIntegerOptionMustFailGracefully()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: Result = base.Parser.ParseArguments(new string[] { ''-i'', long.MaxValue.ToString(CultureInfo.InvariantCulture) }, options)", span="466-466"];
m4_275 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingLongValueToIntegerOptionMustFailGracefully()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: ResultShouldBeFalse()", span="468-468"];
m4_276 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingLongValueToIntegerOptionMustFailGracefully()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.PassingLongValueToIntegerOptionMustFailGracefully()", span="463-463"];
m4_265 [cluster="short.ToString(System.IFormatProvider)", file="CommandLineParserFixture.cs", label="Entry short.ToString(System.IFormatProvider)", span="0-0"];
m4_92 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNullableNumber()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNullableNumber()", span="172-172"];
m4_93 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNullableNumber()", file="CommandLineParserFixture.cs", label="var actualCulture = Thread.CurrentThread.CurrentCulture", span="174-174"];
m4_94 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNullableNumber()", file="CommandLineParserFixture.cs", label="Thread.CurrentThread.CurrentCulture = new CultureInfo(''it-IT'')", span="175-175"];
m4_99 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNullableNumber()", file="CommandLineParserFixture.cs", label="Thread.CurrentThread.CurrentCulture = actualCulture", span="182-182"];
m4_95 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNullableNumber()", file="CommandLineParserFixture.cs", label="var options = new NumberSetOptions()", span="176-176"];
m4_96 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNullableNumber()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: Result = base.Parser.ParseArguments(new string[] { ''--n-double'', ''12,32982'' }, options)", span="177-177"];
m4_98 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNullableNumber()", file="CommandLineParserFixture.cs", label="Assert.AreEqual(12.32982, options.NullableDoubleValue)", span="180-180"];
m4_97 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNullableNumber()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: ResultShouldBeTrue()", span="179-179"];
m4_100 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNullableNumber()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNullableNumber()", span="172-172"];
m4_271 [cluster="int.ToString(System.IFormatProvider)", file="CommandLineParserFixture.cs", label="Entry int.ToString(System.IFormatProvider)", span="0-0"];
m4_186 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAFloatTypeLongOptionFails()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAFloatTypeLongOptionFails()", span="320-320"];
m4_187 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAFloatTypeLongOptionFails()", file="CommandLineParserFixture.cs", label="var options = new NumberSetOptions()", span="322-322"];
m4_188 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAFloatTypeLongOptionFails()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: Result = base.Parser.ParseArguments(new string[] { ''--float'' }, options)", span="323-323"];
m4_189 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAFloatTypeLongOptionFails()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: ResultShouldBeFalse()", span="325-325"];
m4_190 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAFloatTypeLongOptionFails()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAFloatTypeLongOptionFails()", span="320-320"];
m4_101 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithDefaults()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithDefaults()", span="186-186"];
m4_102 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithDefaults()", file="CommandLineParserFixture.cs", label="var options = new SimpleOptionsWithDefaults()", span="188-188"];
m4_103 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithDefaults()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: Result = base.Parser.ParseArguments(new string[] {}, options)", span="189-189"];
m4_105 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithDefaults()", file="CommandLineParserFixture.cs", label="Assert.AreEqual(''str'', options.StringValue)", span="192-192"];
m4_106 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithDefaults()", file="CommandLineParserFixture.cs", label="Assert.AreEqual(9, options.IntegerValue)", span="193-193"];
m4_107 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithDefaults()", file="CommandLineParserFixture.cs", label="Assert.AreEqual(true, options.BooleanValue)", span="194-194"];
m4_104 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithDefaults()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: ResultShouldBeTrue()", span="191-191"];
m4_108 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithDefaults()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithDefaults()", span="186-186"];
m4_277 [cluster="long.ToString(System.IFormatProvider)", file="CommandLineParserFixture.cs", label="Entry long.ToString(System.IFormatProvider)", span="0-0"];
m4_124 [cluster="CommandLine.Tests.CommandLineParserFixture.ParsingNonExistentShortOptionFailsWithoutThrowingAnException()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.ParsingNonExistentShortOptionFailsWithoutThrowingAnException()", span="219-219"];
m4_125 [cluster="CommandLine.Tests.CommandLineParserFixture.ParsingNonExistentShortOptionFailsWithoutThrowingAnException()", file="CommandLineParserFixture.cs", label="var options = new SimpleOptions()", span="221-221"];
m4_126 [cluster="CommandLine.Tests.CommandLineParserFixture.ParsingNonExistentShortOptionFailsWithoutThrowingAnException()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: Result = base.Parser.ParseArguments(new string[] { ''-x'' }, options)", span="222-222"];
m4_127 [cluster="CommandLine.Tests.CommandLineParserFixture.ParsingNonExistentShortOptionFailsWithoutThrowingAnException()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: ResultShouldBeFalse()", span="224-224"];
m4_128 [cluster="CommandLine.Tests.CommandLineParserFixture.ParsingNonExistentShortOptionFailsWithoutThrowingAnException()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.ParsingNonExistentShortOptionFailsWithoutThrowingAnException()", span="219-219"];
m4_171 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAShortTypeLongOptionFails()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAShortTypeLongOptionFails()", span="293-293"];
m4_172 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAShortTypeLongOptionFails()", file="CommandLineParserFixture.cs", label="var options = new NumberSetOptions()", span="295-295"];
m4_173 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAShortTypeLongOptionFails()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: Result = base.Parser.ParseArguments(new string[] { ''--short'' }, options)", span="296-296"];
m4_174 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAShortTypeLongOptionFails()", color=green, community=0, file="CommandLineParserFixture.cs", label="1: ResultShouldBeFalse()", span="298-298"];
m4_175 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAShortTypeLongOptionFails()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAShortTypeLongOptionFails()", span="293-293"];
m4_40 [cluster="Unk.IsTrue", file="CommandLineParserFixture.cs", label="Entry Unk.IsTrue", span=""];
m4_290 [file="CommandLineParserFixture.cs", label="CommandLine.Tests.CommandLineParserFixture", span=""];
m6_13 [cluster="System.Text.StringBuilder.StringBuilder(int)", file="CopyrightInfoFixture.cs", label="Entry System.Text.StringBuilder.StringBuilder(int)", span="0-0"];
m6_2 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.CopyleftInfo.FormatYears(int[])", file="CopyrightInfoFixture.cs", label="Entry CommandLine.Text.Tests.CopyrightInfoFixture.CopyleftInfo.FormatYears(int[])", span="53-53"];
m6_3 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.CopyleftInfo.FormatYears(int[])", file="CopyrightInfoFixture.cs", label="var yearsPart = new StringBuilder(years.Length * 4)", span="55-55"];
m6_4 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.CopyleftInfo.FormatYears(int[])", file="CopyrightInfoFixture.cs", label=years, span="57-57"];
m6_7 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.CopyleftInfo.FormatYears(int[])", file="CopyrightInfoFixture.cs", label="yearsPart.Append(string.Concat(''''', y))", span="61-61"];
m6_8 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.CopyleftInfo.FormatYears(int[])", file="CopyrightInfoFixture.cs", label="yearsPart.Append(y)", span="63-63"];
m6_9 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.CopyleftInfo.FormatYears(int[])", file="CopyrightInfoFixture.cs", label="yearsPart.Append('', '')", span="64-64"];
m6_10 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.CopyleftInfo.FormatYears(int[])", file="CopyrightInfoFixture.cs", label="yearsPart.Remove(yearsPart.Length - 2, 2)", span="66-66"];
m6_11 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.CopyleftInfo.FormatYears(int[])", file="CopyrightInfoFixture.cs", label="return yearsPart.ToString();", span="68-68"];
m6_5 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.CopyleftInfo.FormatYears(int[])", file="CopyrightInfoFixture.cs", label="string y = year.ToString(CultureInfo.InvariantCulture)", span="59-59"];
m6_6 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.CopyleftInfo.FormatYears(int[])", file="CopyrightInfoFixture.cs", label="y.Length == 2", span="60-60"];
m6_12 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.CopyleftInfo.FormatYears(int[])", file="CopyrightInfoFixture.cs", label="Exit CommandLine.Text.Tests.CopyrightInfoFixture.CopyleftInfo.FormatYears(int[])", span="53-53"];
m6_43 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.WillThrowExceptionIfNoYearsAreSupplied()", file="CopyrightInfoFixture.cs", label="Entry CommandLine.Text.Tests.CopyrightInfoFixture.WillThrowExceptionIfNoYearsAreSupplied()", span="114-114"];
m6_44 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.WillThrowExceptionIfNoYearsAreSupplied()", file="CopyrightInfoFixture.cs", label="new CopyrightInfo(''Authors, Inc.'')", span="116-116"];
m6_45 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.WillThrowExceptionIfNoYearsAreSupplied()", file="CopyrightInfoFixture.cs", label="Exit CommandLine.Text.Tests.CopyrightInfoFixture.WillThrowExceptionIfNoYearsAreSupplied()", span="114-114"];
m6_26 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.UpperSymbolTwoConsecutiveYears()", file="CopyrightInfoFixture.cs", label="Entry CommandLine.Text.Tests.CopyrightInfoFixture.UpperSymbolTwoConsecutiveYears()", span="82-82"];
m6_27 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.UpperSymbolTwoConsecutiveYears()", file="CopyrightInfoFixture.cs", label="var copyright = new CopyrightInfo(true, ''X & Y Group'', 2006, 2007)", span="84-84"];
m6_28 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.UpperSymbolTwoConsecutiveYears()", file="CopyrightInfoFixture.cs", label="Assert.AreEqual(''Copyright (C) 2006, 2007 X & Y Group'', copyright.ToString())", span="86-86"];
m6_29 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.UpperSymbolTwoConsecutiveYears()", file="CopyrightInfoFixture.cs", label="Exit CommandLine.Text.Tests.CopyrightInfoFixture.UpperSymbolTwoConsecutiveYears()", span="82-82"];
m6_0 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.CopyleftInfo.CopyleftInfo(bool, string, params int[])", file="CopyrightInfoFixture.cs", label="Entry CommandLine.Text.Tests.CopyrightInfoFixture.CopyleftInfo.CopyleftInfo(bool, string, params int[])", span="43-43"];
m6_1 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.CopyleftInfo.CopyleftInfo(bool, string, params int[])", file="CopyrightInfoFixture.cs", label="Exit CommandLine.Text.Tests.CopyrightInfoFixture.CopyleftInfo.CopyleftInfo(bool, string, params int[])", span="43-43"];
m6_15 [cluster="string.Concat(string, string)", file="CopyrightInfoFixture.cs", label="Entry string.Concat(string, string)", span="0-0"];
m6_46 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.DerivedClass()", file="CopyrightInfoFixture.cs", label="Entry CommandLine.Text.Tests.CopyrightInfoFixture.DerivedClass()", span="120-120"];
m6_47 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.DerivedClass()", file="CopyrightInfoFixture.cs", label="var info = new CopyleftInfo(true, ''Free Company, Inc.'', 96, 97, 98, 2005)", span="122-122"];
m6_48 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.DerivedClass()", file="CopyrightInfoFixture.cs", label="Assert.AreEqual(''Copyleft (C) '96, '97, '98, 2005 Free Company, Inc.'', info.ToString())", span="124-124"];
m6_49 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.DerivedClass()", file="CopyrightInfoFixture.cs", label="Exit CommandLine.Text.Tests.CopyrightInfoFixture.DerivedClass()", span="120-120"];
m6_50 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.ShouldNotGrowWhenConvertedToString()", file="CopyrightInfoFixture.cs", label="Entry CommandLine.Text.Tests.CopyrightInfoFixture.ShouldNotGrowWhenConvertedToString()", span="129-129"];
m6_51 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.ShouldNotGrowWhenConvertedToString()", color=green, community=0, file="CopyrightInfoFixture.cs", label="1: var info = new CopyrightInfo (''ManOnTheMoon, Inc.'', 2019)", span="131-131"];
m6_52 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.ShouldNotGrowWhenConvertedToString()", color=green, community=0, file="CopyrightInfoFixture.cs", label="1: int i=0", span="133-133"];
m6_54 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.ShouldNotGrowWhenConvertedToString()", color=green, community=0, file="CopyrightInfoFixture.cs", label="1: Assert.AreEqual (37, info.ToString ().Length)", span="135-135"];
m6_53 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.ShouldNotGrowWhenConvertedToString()", color=green, community=0, file="CopyrightInfoFixture.cs", label="1: i<10", span="133-133"];
m6_55 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.ShouldNotGrowWhenConvertedToString()", color=green, community=0, file="CopyrightInfoFixture.cs", label="1: i++", span="133-133"];
m6_56 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.ShouldNotGrowWhenConvertedToString()", file="CopyrightInfoFixture.cs", label="Exit CommandLine.Text.Tests.CopyrightInfoFixture.ShouldNotGrowWhenConvertedToString()", span="129-129"];
m6_34 [cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(string, params int[])", file="CopyrightInfoFixture.cs", label="Entry CommandLine.Text.CopyrightInfo.CopyrightInfo(string, params int[])", span="205-205"];
m6_30 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.DefaultSymbolTwoNonConsecutiveYears()", file="CopyrightInfoFixture.cs", label="Entry CommandLine.Text.Tests.CopyrightInfoFixture.DefaultSymbolTwoNonConsecutiveYears()", span="90-90"];
m6_31 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.DefaultSymbolTwoNonConsecutiveYears()", file="CopyrightInfoFixture.cs", label="var copyright = new CopyrightInfo(''W & Z, Inc.'', 2005, 2007)", span="92-92"];
m6_32 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.DefaultSymbolTwoNonConsecutiveYears()", file="CopyrightInfoFixture.cs", label="Assert.AreEqual(''Copyright (C) 2005 - 2007 W & Z, Inc.'', copyright.ToString())", span="94-94"];
m6_33 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.DefaultSymbolTwoNonConsecutiveYears()", file="CopyrightInfoFixture.cs", label="Exit CommandLine.Text.Tests.CopyrightInfoFixture.DefaultSymbolTwoNonConsecutiveYears()", span="90-90"];
m6_17 [cluster="System.Text.StringBuilder.Remove(int, int)", file="CopyrightInfoFixture.cs", label="Entry System.Text.StringBuilder.Remove(int, int)", span="0-0"];
m6_23 [cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])", file="CopyrightInfoFixture.cs", label="Entry CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])", span="219-219"];
m6_42 [cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(string, int)", file="CopyrightInfoFixture.cs", label="Entry CommandLine.Text.CopyrightInfo.CopyrightInfo(string, int)", span="192-192"];
m6_35 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.DefaultSymbolSeveralYears()", file="CopyrightInfoFixture.cs", label="Entry CommandLine.Text.Tests.CopyrightInfoFixture.DefaultSymbolSeveralYears()", span="98-98"];
m6_36 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.DefaultSymbolSeveralYears()", file="CopyrightInfoFixture.cs", label="var copyright = new CopyrightInfo(''CommandLine, Ltd'', 1999, 2003, 2004, 2007)", span="100-100"];
m6_37 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.DefaultSymbolSeveralYears()", file="CopyrightInfoFixture.cs", label="Assert.AreEqual(''Copyright (C) 1999 - 2003, 2004 - 2007 CommandLine, Ltd'', copyright.ToString())", span="102-102"];
m6_38 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.DefaultSymbolSeveralYears()", file="CopyrightInfoFixture.cs", label="Exit CommandLine.Text.Tests.CopyrightInfoFixture.DefaultSymbolSeveralYears()", span="98-98"];
m6_24 [cluster="CommandLine.Text.CopyrightInfo.ToString()", file="CopyrightInfoFixture.cs", label="Entry CommandLine.Text.CopyrightInfo.ToString()", span="236-236"];
m6_18 [cluster="System.Text.StringBuilder.ToString()", file="CopyrightInfoFixture.cs", label="Entry System.Text.StringBuilder.ToString()", span="0-0"];
m6_16 [cluster="System.Text.StringBuilder.Append(string)", file="CopyrightInfoFixture.cs", label="Entry System.Text.StringBuilder.Append(string)", span="0-0"];
m6_14 [cluster="int.ToString(System.IFormatProvider)", file="CopyrightInfoFixture.cs", label="Entry int.ToString(System.IFormatProvider)", span="0-0"];
m6_19 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.LowerSymbolOneYear()", file="CopyrightInfoFixture.cs", label="Entry CommandLine.Text.Tests.CopyrightInfoFixture.LowerSymbolOneYear()", span="74-74"];
m6_20 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.LowerSymbolOneYear()", file="CopyrightInfoFixture.cs", label="var copyright = new CopyrightInfo(false, ''Authors, Inc.'', 2007)", span="76-76"];
m6_21 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.LowerSymbolOneYear()", file="CopyrightInfoFixture.cs", label="Assert.AreEqual(''Copyright (c) 2007 Authors, Inc.'', copyright.ToString())", span="78-78"];
m6_22 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.LowerSymbolOneYear()", file="CopyrightInfoFixture.cs", label="Exit CommandLine.Text.Tests.CopyrightInfoFixture.LowerSymbolOneYear()", span="74-74"];
m6_39 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.WillThrowExceptionIfAuthorIsNull()", file="CopyrightInfoFixture.cs", label="Entry CommandLine.Text.Tests.CopyrightInfoFixture.WillThrowExceptionIfAuthorIsNull()", span="107-107"];
m6_40 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.WillThrowExceptionIfAuthorIsNull()", file="CopyrightInfoFixture.cs", label="new CopyrightInfo(null, 2000)", span="109-109"];
m6_41 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.WillThrowExceptionIfAuthorIsNull()", file="CopyrightInfoFixture.cs", label="Exit CommandLine.Text.Tests.CopyrightInfoFixture.WillThrowExceptionIfAuthorIsNull()", span="107-107"];
m7_38 [cluster="CommandLine.Tests.CommandLineParserBaseFixture.AssertParserFailure(bool)", file="HelpOptionAttributeFixture.cs", label="Entry CommandLine.Tests.CommandLineParserBaseFixture.AssertParserFailure(bool)", span="63-63"];
m7_15 [cluster="CommandLine.Text.HelpText.AddOptions(object)", file="HelpOptionAttributeFixture.cs", label="Entry CommandLine.Text.HelpText.AddOptions(object)", span="956-956"];
m7_27 [cluster="System.IO.StringWriter.ToString()", file="HelpOptionAttributeFixture.cs", label="Entry System.IO.StringWriter.ToString()", span="0-0"];
m7_24 [cluster="System.IO.StringWriter.StringWriter()", file="HelpOptionAttributeFixture.cs", label="Entry System.IO.StringWriter.StringWriter()", span="0-0"];
m7_14 [cluster="CommandLine.Text.HelpText.AddPreOptionsLine(string)", file="HelpOptionAttributeFixture.cs", label="Entry CommandLine.Text.HelpText.AddPreOptionsLine(string)", span="931-931"];
m7_29 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.BadInputActivatesHelp()", file="HelpOptionAttributeFixture.cs", label="Entry CommandLine.Tests.HelpOptionAttributeFixture.BadInputActivatesHelp()", span="86-86"];
m7_30 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.BadInputActivatesHelp()", file="HelpOptionAttributeFixture.cs", label="var options = new MockOptions()", span="88-88"];
m7_31 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.BadInputActivatesHelp()", file="HelpOptionAttributeFixture.cs", label="var writer = new StringWriter()", span="89-89"];
m7_32 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.BadInputActivatesHelp()", color=green, community=1, file="HelpOptionAttributeFixture.cs", label="1: Result = base.Parser.ParseArguments(\r\n                    new string[] { ''math.xml'', ''-oresult.xml'' }, options, writer)", span="91-92"];
m7_34 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.BadInputActivatesHelp()", file="HelpOptionAttributeFixture.cs", label="string helpText = writer.ToString()", span="96-96"];
m7_33 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.BadInputActivatesHelp()", color=green, community=0, file="HelpOptionAttributeFixture.cs", label="1: ResultShouldBeFalse()", span="94-94"];
m7_35 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.BadInputActivatesHelp()", file="HelpOptionAttributeFixture.cs", label="Assert.IsTrue(helpText.Length > 0)", span="97-97"];
m7_36 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.BadInputActivatesHelp()", file="HelpOptionAttributeFixture.cs", label="Console.Write(helpText)", span="99-99"];
m7_37 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.BadInputActivatesHelp()", file="HelpOptionAttributeFixture.cs", label="Exit CommandLine.Tests.HelpOptionAttributeFixture.BadInputActivatesHelp()", span="86-86"];
m7_40 [cluster="System.Console.Write(string)", file="HelpOptionAttributeFixture.cs", label="Entry System.Console.Write(string)", span="0-0"];
m7_12 [cluster="CommandLine.Text.HeadingInfo.HeadingInfo(string, string)", file="HelpOptionAttributeFixture.cs", label="Entry CommandLine.Text.HeadingInfo.HeadingInfo(string, string)", span="324-324"];
m7_13 [cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(string, int)", file="HelpOptionAttributeFixture.cs", label="Entry CommandLine.Text.CopyrightInfo.CopyrightInfo(string, int)", span="192-192"];
m7_25 [cluster="CommandLine.ICommandLineParser.ParseArguments(string[], object, System.IO.TextWriter)", file="HelpOptionAttributeFixture.cs", label="Entry CommandLine.ICommandLineParser.ParseArguments(string[], object, System.IO.TextWriter)", span="1488-1488"];
m7_16 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.CorrectInputNotActivatesHelp()", file="HelpOptionAttributeFixture.cs", label="Entry CommandLine.Tests.HelpOptionAttributeFixture.CorrectInputNotActivatesHelp()", span="73-73"];
m7_17 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.CorrectInputNotActivatesHelp()", file="HelpOptionAttributeFixture.cs", label="var options = new MockOptions()", span="75-75"];
m7_18 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.CorrectInputNotActivatesHelp()", file="HelpOptionAttributeFixture.cs", label="var writer = new StringWriter()", span="76-76"];
m7_19 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.CorrectInputNotActivatesHelp()", color=green, community=1, file="HelpOptionAttributeFixture.cs", label="1: Result = base.Parser.ParseArguments(\r\n                    new string[] { ''-imath.xml'', ''-oresult.xml'' }, options, writer)", span="78-79"];
m7_21 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.CorrectInputNotActivatesHelp()", file="HelpOptionAttributeFixture.cs", label="Assert.AreEqual(0, writer.ToString().Length)", span="82-82"];
m7_20 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.CorrectInputNotActivatesHelp()", color=green, community=0, file="HelpOptionAttributeFixture.cs", label="1: ResultShouldBeTrue()", span="81-81"];
m7_22 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.CorrectInputNotActivatesHelp()", file="HelpOptionAttributeFixture.cs", label="Exit CommandLine.Tests.HelpOptionAttributeFixture.CorrectInputNotActivatesHelp()", span="73-73"];
m7_0 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.MockOptions.GetUsage()", file="HelpOptionAttributeFixture.cs", label="Entry CommandLine.Tests.HelpOptionAttributeFixture.MockOptions.GetUsage()", span="57-57"];
m7_1 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.MockOptions.GetUsage()", file="HelpOptionAttributeFixture.cs", label="var help = new HelpText(new HeadingInfo(''MyProgram'', ''1.0''))", span="59-59"];
m7_2 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.MockOptions.GetUsage()", file="HelpOptionAttributeFixture.cs", label="help.Copyright = new CopyrightInfo(''Authors, Inc.'', 2007)", span="60-60"];
m7_3 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.MockOptions.GetUsage()", file="HelpOptionAttributeFixture.cs", label="help.AddPreOptionsLine(''This software is under the terms of the XYZ License'')", span="61-61"];
m7_4 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.MockOptions.GetUsage()", file="HelpOptionAttributeFixture.cs", label="help.AddPreOptionsLine(''(http://license-text.org/show.cgi?xyz).'')", span="62-62"];
m7_5 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.MockOptions.GetUsage()", file="HelpOptionAttributeFixture.cs", label="help.AddPreOptionsLine(''Usage: myprog --input equations-file.xml -o result-file.xml'')", span="63-63"];
m7_6 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.MockOptions.GetUsage()", file="HelpOptionAttributeFixture.cs", label="help.AddPreOptionsLine(''       myprog -i equations-file.xml --paralell'')", span="64-64"];
m7_7 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.MockOptions.GetUsage()", file="HelpOptionAttributeFixture.cs", label="help.AddPreOptionsLine(''       myprog -i equations-file.xml -vo result-file.xml'')", span="65-65"];
m7_8 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.MockOptions.GetUsage()", file="HelpOptionAttributeFixture.cs", label="help.AddOptions(this)", span="66-66"];
m7_9 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.MockOptions.GetUsage()", file="HelpOptionAttributeFixture.cs", label="return help;", span="67-67"];
m7_10 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.MockOptions.GetUsage()", file="HelpOptionAttributeFixture.cs", label="Exit CommandLine.Tests.HelpOptionAttributeFixture.MockOptions.GetUsage()", span="57-57"];
m7_39 [cluster="Unk.IsTrue", file="HelpOptionAttributeFixture.cs", label="Entry Unk.IsTrue", span=""];
m7_41 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.ExplicitHelpActivation()", file="HelpOptionAttributeFixture.cs", label="Entry CommandLine.Tests.HelpOptionAttributeFixture.ExplicitHelpActivation()", span="103-103"];
m7_42 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.ExplicitHelpActivation()", file="HelpOptionAttributeFixture.cs", label="var options = new MockOptions()", span="105-105"];
m7_43 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.ExplicitHelpActivation()", file="HelpOptionAttributeFixture.cs", label="var writer = new StringWriter()", span="106-106"];
m7_44 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.ExplicitHelpActivation()", color=green, community=1, file="HelpOptionAttributeFixture.cs", label="1: Result = base.Parser.ParseArguments(\r\n                    new string[] { ''--help'' }, options, writer)", span="108-109"];
m7_46 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.ExplicitHelpActivation()", file="HelpOptionAttributeFixture.cs", label="string helpText = writer.ToString()", span="113-113"];
m7_45 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.ExplicitHelpActivation()", color=green, community=0, file="HelpOptionAttributeFixture.cs", label="1: ResultShouldBeFalse()", span="111-111"];
m7_47 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.ExplicitHelpActivation()", file="HelpOptionAttributeFixture.cs", label="Assert.IsTrue(helpText.Length > 0)", span="114-114"];
m7_48 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.ExplicitHelpActivation()", file="HelpOptionAttributeFixture.cs", label="Exit CommandLine.Tests.HelpOptionAttributeFixture.ExplicitHelpActivation()", span="103-103"];
m7_11 [cluster="CommandLine.Text.HelpText.HelpText(string)", file="HelpOptionAttributeFixture.cs", label="Entry CommandLine.Text.HelpText.HelpText(string)", span="700-700"];
m7_23 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.MockOptions.MockOptions()", file="HelpOptionAttributeFixture.cs", label="Entry CommandLine.Tests.HelpOptionAttributeFixture.MockOptions.MockOptions()", span="42-42"];
m7_26 [cluster="CommandLine.Tests.CommandLineParserBaseFixture.ResultShouldBeTrue()", file="HelpOptionAttributeFixture.cs", label="Entry CommandLine.Tests.CommandLineParserBaseFixture.ResultShouldBeTrue()", span="60-60"];
m7_49 [file="HelpOptionAttributeFixture.cs", label="CommandLine.Tests.HelpOptionAttributeFixture.MockOptions", span=""];
m7_50 [file="HelpOptionAttributeFixture.cs", label="CommandLine.Tests.HelpOptionAttributeFixture", span=""];
m8_17 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingTwoMutuallyExclusiveOptionsFails()", file="MutuallyExclusiveParsingFixture.cs", label="Entry CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingTwoMutuallyExclusiveOptionsFails()", span="58-58"];
m8_18 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingTwoMutuallyExclusiveOptionsFails()", file="MutuallyExclusiveParsingFixture.cs", label="var options = new OptionsWithDefaultSet()", span="60-60"];
m8_19 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingTwoMutuallyExclusiveOptionsFails()", color=red, community=0, file="MutuallyExclusiveParsingFixture.cs", label="1: bool result = base.Parser.ParseArguments(new string[] { ''-i'', ''1'', ''--file=mystuff.xml'' }, options)", span="61-61"];
m8_20 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingTwoMutuallyExclusiveOptionsFails()", color=red, community=0, file="MutuallyExclusiveParsingFixture.cs", label="1: CommandLine.Core.TypeDescriptor", span=""];
m8_21 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingTwoMutuallyExclusiveOptionsFails()", file="MutuallyExclusiveParsingFixture.cs", label="Exit CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingTwoMutuallyExclusiveOptionsFails()", span="58-58"];
m8_37 [cluster="CommandLine.Tests.Mocks.OptionsWithMultipleSet.OptionsWithMultipleSet()", file="MutuallyExclusiveParsingFixture.cs", label="Entry CommandLine.Tests.Mocks.OptionsWithMultipleSet.OptionsWithMultipleSet()", span="35-35"];
m8_6 [cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CommandLine.Core.TypeDescriptor)", color=green, community=0, file="MutuallyExclusiveParsingFixture.cs", label="1: maximumItems == null", span="37-37"];
m8_13 [cluster="CommandLine.Tests.Mocks.OptionsWithDefaultSet.OptionsWithDefaultSet()", file="MutuallyExclusiveParsingFixture.cs", label="Entry CommandLine.Tests.Mocks.OptionsWithDefaultSet.OptionsWithDefaultSet()", span="35-35"];
m8_48 [cluster="CommandLine.Tests.Mocks.OptionsWithMultipleSetAndOneOption.OptionsWithMultipleSetAndOneOption()", file="MutuallyExclusiveParsingFixture.cs", label="Entry CommandLine.Tests.Mocks.OptionsWithMultipleSetAndOneOption.OptionsWithMultipleSetAndOneOption()", span="35-35"];
m8_7 [cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CommandLine.Core.TypeDescriptor)", color=green, community=0, file="MutuallyExclusiveParsingFixture.cs", label="1: throw new ArgumentNullException(''maximumItems'');", span="37-37"];
m8_8 [cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CommandLine.Core.TypeDescriptor)", color=green, community=0, file="MutuallyExclusiveParsingFixture.cs", label="1: return new TypeDescriptor(tag, maximumItems, next.ToMaybe());", span="39-39"];
m8_9 [cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CommandLine.Core.TypeDescriptor)", color=red, community=0, file="MutuallyExclusiveParsingFixture.cs", label="1: Exit CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CommandLine.Core.TypeDescriptor)", span="35-35"];
m8_11 [cluster="T.ToMaybe<T>()", file="MutuallyExclusiveParsingFixture.cs", label="Entry T.ToMaybe<T>()", span="249-249"];
m8_10 [cluster="System.ArgumentNullException.ArgumentNullException(string)", color=red, community=0, file="MutuallyExclusiveParsingFixture.cs", label="1: Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m8_12 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingOneMutuallyExclusiveOptionSucceeds()", file="MutuallyExclusiveParsingFixture.cs", label="Exit CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingOneMutuallyExclusiveOptionSucceeds()", span="48-48"];
m8_2 [cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", file="MutuallyExclusiveParsingFixture.cs", label="this.maxItems = maxItems", span="16-16"];
m8_3 [cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", color=red, community=0, file="MutuallyExclusiveParsingFixture.cs", label="1: this.nextValue = nextValue", span="17-17"];
m8_4 [cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", file="MutuallyExclusiveParsingFixture.cs", label="Exit CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", span="13-13"];
m8_23 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingOneMutuallyExclusiveOptionWithAnotherOptionSucceeds()", file="MutuallyExclusiveParsingFixture.cs", label="Entry CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingOneMutuallyExclusiveOptionWithAnotherOptionSucceeds()", span="67-67"];
m8_24 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingOneMutuallyExclusiveOptionWithAnotherOptionSucceeds()", file="MutuallyExclusiveParsingFixture.cs", label="var options = new OptionsWithDefaultSet()", span="69-69"];
m8_25 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingOneMutuallyExclusiveOptionWithAnotherOptionSucceeds()", color=red, community=0, file="MutuallyExclusiveParsingFixture.cs", label="1: bool result = base.Parser.ParseArguments(new string[] { ''--file=mystuff.xml'', ''-v'' }, options)", span="70-70"];
m8_27 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingOneMutuallyExclusiveOptionWithAnotherOptionSucceeds()", file="MutuallyExclusiveParsingFixture.cs", label="Assert.AreEqual(''mystuff.xml'', options.FileName)", span="73-73"];
m8_28 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingOneMutuallyExclusiveOptionWithAnotherOptionSucceeds()", file="MutuallyExclusiveParsingFixture.cs", label="Assert.AreEqual(true, options.Verbose)", span="74-74"];
m8_26 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingOneMutuallyExclusiveOptionWithAnotherOptionSucceeds()", color=red, community=0, file="MutuallyExclusiveParsingFixture.cs", label="1: base.AssertParserSuccess(result)", span="72-72"];
m8_29 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingOneMutuallyExclusiveOptionWithAnotherOptionSucceeds()", file="MutuallyExclusiveParsingFixture.cs", label="Exit CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingOneMutuallyExclusiveOptionWithAnotherOptionSucceeds()", span="67-67"];
m8_38 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingThreeMutuallyExclusiveOptionsInTwoSetFails()", file="MutuallyExclusiveParsingFixture.cs", label="Entry CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingThreeMutuallyExclusiveOptionsInTwoSetFails()", span="89-89"];
m8_39 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingThreeMutuallyExclusiveOptionsInTwoSetFails()", file="MutuallyExclusiveParsingFixture.cs", label="var options = new OptionsWithMultipleSet()", span="91-91"];
m8_40 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingThreeMutuallyExclusiveOptionsInTwoSetFails()", color=red, community=0, file="MutuallyExclusiveParsingFixture.cs", label="1: bool result = base.Parser.ParseArguments(new string[] { ''-g167'', ''--hue'', ''205'', ''--saturation=37'' }, options)", span="92-92"];
m8_41 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingThreeMutuallyExclusiveOptionsInTwoSetFails()", color=red, community=0, file="MutuallyExclusiveParsingFixture.cs", label="1: base.AssertParserFailure(result)", span="94-94"];
m8_42 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingThreeMutuallyExclusiveOptionsInTwoSetFails()", file="MutuallyExclusiveParsingFixture.cs", label="Exit CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingThreeMutuallyExclusiveOptionsInTwoSetFails()", span="89-89"];
m8_15 [cluster="CommandLine.Tests.CommandLineParserBaseFixture.AssertParserSuccess(bool)", file="MutuallyExclusiveParsingFixture.cs", label="Entry CommandLine.Tests.CommandLineParserBaseFixture.AssertParserSuccess(bool)", span="58-58"];
m8_14 [cluster="CommandLine.ICommandLineParser.ParseArguments(string[], object)", file="MutuallyExclusiveParsingFixture.cs", label="Entry CommandLine.ICommandLineParser.ParseArguments(string[], object)", span="1473-1473"];
m8_5 [cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CommandLine.Core.TypeDescriptor)", file="MutuallyExclusiveParsingFixture.cs", label="Entry CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CommandLine.Core.TypeDescriptor)", span="35-35"];
m8_22 [cluster="CommandLine.Tests.CommandLineParserBaseFixture.AssertParserFailure(bool)", file="MutuallyExclusiveParsingFixture.cs", label="Entry CommandLine.Tests.CommandLineParserBaseFixture.AssertParserFailure(bool)", span="63-63"];
m8_43 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingMutuallyExclusiveOptionsAndRequiredOptionFails()", file="MutuallyExclusiveParsingFixture.cs", label="Entry CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingMutuallyExclusiveOptionsAndRequiredOptionFails()", span="98-98"];
m8_44 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingMutuallyExclusiveOptionsAndRequiredOptionFails()", file="MutuallyExclusiveParsingFixture.cs", label="var options = new OptionsWithMultipleSetAndOneOption()", span="100-100"];
m8_45 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingMutuallyExclusiveOptionsAndRequiredOptionFails()", color=red, community=0, file="MutuallyExclusiveParsingFixture.cs", label="1: bool result = base.Parser.ParseArguments(new string[] { ''-g167'', ''--hue'', ''205'' }, options)", span="101-101"];
m8_46 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingMutuallyExclusiveOptionsAndRequiredOptionFails()", color=red, community=0, file="MutuallyExclusiveParsingFixture.cs", label="1: base.AssertParserFailure(result)", span="103-103"];
m8_47 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingMutuallyExclusiveOptionsAndRequiredOptionFails()", file="MutuallyExclusiveParsingFixture.cs", label="Exit CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingMutuallyExclusiveOptionsAndRequiredOptionFails()", span="98-98"];
m8_30 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingTwoMutuallyExclusiveOptionsInTwoSetSucceeds()", file="MutuallyExclusiveParsingFixture.cs", label="Entry CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingTwoMutuallyExclusiveOptionsInTwoSetSucceeds()", span="78-78"];
m8_31 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingTwoMutuallyExclusiveOptionsInTwoSetSucceeds()", file="MutuallyExclusiveParsingFixture.cs", label="var options = new OptionsWithMultipleSet()", span="80-80"];
m8_32 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingTwoMutuallyExclusiveOptionsInTwoSetSucceeds()", color=red, community=0, file="MutuallyExclusiveParsingFixture.cs", label="1: bool result = base.Parser.ParseArguments(new string[] { ''-g167'', ''--hue'', ''205'' }, options)", span="81-81"];
m8_34 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingTwoMutuallyExclusiveOptionsInTwoSetSucceeds()", file="MutuallyExclusiveParsingFixture.cs", label="Assert.AreEqual(167, options.Green)", span="84-84"];
m8_35 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingTwoMutuallyExclusiveOptionsInTwoSetSucceeds()", file="MutuallyExclusiveParsingFixture.cs", label="Assert.AreEqual(205, options.Hue)", span="85-85"];
m8_33 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingTwoMutuallyExclusiveOptionsInTwoSetSucceeds()", color=red, community=0, file="MutuallyExclusiveParsingFixture.cs", label="1: base.AssertParserSuccess(result)", span="83-83"];
m8_36 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingTwoMutuallyExclusiveOptionsInTwoSetSucceeds()", file="MutuallyExclusiveParsingFixture.cs", label="Exit CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingTwoMutuallyExclusiveOptionsInTwoSetSucceeds()", span="78-78"];
m8_0 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.MutuallyExclusiveParsingFixture()", file="MutuallyExclusiveParsingFixture.cs", label="Entry CommandLine.Tests.MutuallyExclusiveParsingFixture.MutuallyExclusiveParsingFixture()", span="38-38"];
m8_1 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.MutuallyExclusiveParsingFixture()", file="MutuallyExclusiveParsingFixture.cs", label="Exit CommandLine.Tests.MutuallyExclusiveParsingFixture.MutuallyExclusiveParsingFixture()", span="38-38"];
m8_49 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingMutuallyExclusiveOptionsAndRequiredOptionSucceeds()", file="MutuallyExclusiveParsingFixture.cs", label="Entry CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingMutuallyExclusiveOptionsAndRequiredOptionSucceeds()", span="107-107"];
m8_50 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingMutuallyExclusiveOptionsAndRequiredOptionSucceeds()", file="MutuallyExclusiveParsingFixture.cs", label="var options = new OptionsWithMultipleSetAndOneOption()", span="109-109"];
m8_51 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingMutuallyExclusiveOptionsAndRequiredOptionSucceeds()", color=red, community=0, file="MutuallyExclusiveParsingFixture.cs", label="1: bool result = base.Parser.ParseArguments(new string[] { ''-g100'', ''-h200'', ''-cRgbColorSet'' }, options)", span="110-110"];
m8_53 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingMutuallyExclusiveOptionsAndRequiredOptionSucceeds()", file="MutuallyExclusiveParsingFixture.cs", label="Assert.AreEqual(100, options.Green)", span="113-113"];
m8_54 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingMutuallyExclusiveOptionsAndRequiredOptionSucceeds()", file="MutuallyExclusiveParsingFixture.cs", label="Assert.AreEqual(200, options.Hue)", span="114-114"];
m8_55 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingMutuallyExclusiveOptionsAndRequiredOptionSucceeds()", file="MutuallyExclusiveParsingFixture.cs", label="Assert.AreEqual(ColorSet.RgbColorSet, options.DefaultColorSet)", span="115-115"];
m8_52 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingMutuallyExclusiveOptionsAndRequiredOptionSucceeds()", color=red, community=0, file="MutuallyExclusiveParsingFixture.cs", label="1: base.AssertParserSuccess(result)", span="112-112"];
m8_56 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingMutuallyExclusiveOptionsAndRequiredOptionSucceeds()", file="MutuallyExclusiveParsingFixture.cs", label="Exit CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingMutuallyExclusiveOptionsAndRequiredOptionSucceeds()", span="107-107"];
m8_57 [file="MutuallyExclusiveParsingFixture.cs", label="CommandLine.Tests.MutuallyExclusiveParsingFixture", span=""];
m9_23 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableIntegerOptionFails()", file="NullableTypesParsingFixture.cs", label="Entry CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableIntegerOptionFails()", span="71-71"];
m9_24 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableIntegerOptionFails()", file="NullableTypesParsingFixture.cs", label="var options = new NullableTypesOptions()", span="73-73"];
m9_25 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableIntegerOptionFails()", color=green, community=0, file="NullableTypesParsingFixture.cs", label="1: Result = base.Parser.ParseArguments(new string[] { ''-int'' }, options)", span="73-73"];
m9_26 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableIntegerOptionFails()", color=green, community=0, file="NullableTypesParsingFixture.cs", label="1: ResultShouldBeFalse()", span="75-75"];
m9_27 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableIntegerOptionFails()", file="NullableTypesParsingFixture.cs", label="Exit CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableIntegerOptionFails()", span="71-71"];
m9_13 [cluster="CommandLine.ICommandLineParser.ParseArguments(string[], object)", file="NullableTypesParsingFixture.cs", label="Entry CommandLine.ICommandLineParser.ParseArguments(string[], object)", span="1473-1473"];
m9_48 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableDoubleOption()", file="NullableTypesParsingFixture.cs", label="Entry CommandLine.Tests.NullableTypesParsingFixture.ParseNullableDoubleOption()", span="114-114"];
m9_49 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableDoubleOption()", file="NullableTypesParsingFixture.cs", label="var options = new NullableTypesOptions()", span="116-116"];
m9_50 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableDoubleOption()", color=green, community=0, file="NullableTypesParsingFixture.cs", label="1: Result = base.Parser.ParseArguments(new string[] { ''-d9.999'' }, options)", span="116-116"];
m9_52 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableDoubleOption()", file="NullableTypesParsingFixture.cs", label="Assert.AreEqual(9.999, options.DoubleValue)", span="120-120"];
m9_51 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableDoubleOption()", color=green, community=0, file="NullableTypesParsingFixture.cs", label="1: ResultShouldBeTrue()", span="118-118"];
m9_53 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableDoubleOption()", file="NullableTypesParsingFixture.cs", label="options = new NullableTypesOptions()", span="122-122"];
m9_54 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableDoubleOption()", color=green, community=0, file="NullableTypesParsingFixture.cs", label="1: Result = base.Parser.ParseArguments(new string[] { }, options)", span="122-122"];
m9_56 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableDoubleOption()", file="NullableTypesParsingFixture.cs", label="Assert.IsNull(options.DoubleValue)", span="126-126"];
m9_55 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableDoubleOption()", color=green, community=0, file="NullableTypesParsingFixture.cs", label="1: ResultShouldBeTrue()", span="124-124"];
m9_57 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableDoubleOption()", file="NullableTypesParsingFixture.cs", label="Exit CommandLine.Tests.NullableTypesParsingFixture.ParseNullableDoubleOption()", span="114-114"];
m9_28 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableEnumerationOption()", file="NullableTypesParsingFixture.cs", label="Entry CommandLine.Tests.NullableTypesParsingFixture.ParseNullableEnumerationOption()", span="80-80"];
m9_29 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableEnumerationOption()", file="NullableTypesParsingFixture.cs", label="var options = new NullableTypesOptions()", span="82-82"];
m9_30 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableEnumerationOption()", color=green, community=0, file="NullableTypesParsingFixture.cs", label="1: Result = base.Parser.ParseArguments(new string[] { ''--enum=ReadWrite'' }, options)", span="82-82"];
m9_32 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableEnumerationOption()", file="NullableTypesParsingFixture.cs", label="Assert.AreEqual(FileAccess.ReadWrite, options.EnumValue)", span="86-86"];
m9_31 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableEnumerationOption()", color=green, community=0, file="NullableTypesParsingFixture.cs", label="1: ResultShouldBeTrue()", span="84-84"];
m9_33 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableEnumerationOption()", file="NullableTypesParsingFixture.cs", label="options = new NullableTypesOptions()", span="88-88"];
m9_34 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableEnumerationOption()", color=green, community=0, file="NullableTypesParsingFixture.cs", label="1: Result = base.Parser.ParseArguments(new string[] { }, options)", span="88-88"];
m9_36 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableEnumerationOption()", file="NullableTypesParsingFixture.cs", label="Assert.IsNull(options.EnumValue)", span="92-92"];
m9_35 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableEnumerationOption()", color=green, community=0, file="NullableTypesParsingFixture.cs", label="1: ResultShouldBeTrue()", span="90-90"];
m9_37 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableEnumerationOption()", file="NullableTypesParsingFixture.cs", label="Exit CommandLine.Tests.NullableTypesParsingFixture.ParseNullableEnumerationOption()", span="80-80"];
m9_38 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableEnumerationOptionFails()", file="NullableTypesParsingFixture.cs", label="Entry CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableEnumerationOptionFails()", span="96-96"];
m9_39 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableEnumerationOptionFails()", file="NullableTypesParsingFixture.cs", label="var options = new NullableTypesOptions()", span="98-98"];
m9_40 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableEnumerationOptionFails()", color=green, community=0, file="NullableTypesParsingFixture.cs", label="1: Result = base.Parser.ParseArguments(new string[] { ''-e'', ''Overwrite'' }, options)", span="98-98"];
m9_41 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableEnumerationOptionFails()", color=green, community=0, file="NullableTypesParsingFixture.cs", label="1: ResultShouldBeFalse()", span="100-100"];
m9_42 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableEnumerationOptionFails()", file="NullableTypesParsingFixture.cs", label="Exit CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableEnumerationOptionFails()", span="96-96"];
m9_22 [cluster="CommandLine.Tests.CommandLineParserBaseFixture.AssertParserFailure(bool)", file="NullableTypesParsingFixture.cs", label="Entry CommandLine.Tests.CommandLineParserBaseFixture.AssertParserFailure(bool)", span="63-63"];
m9_16 [cluster="Unk.IsNull", file="NullableTypesParsingFixture.cs", label="Entry Unk.IsNull", span=""];
m9_2 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableIntegerOption()", file="NullableTypesParsingFixture.cs", label="Entry CommandLine.Tests.NullableTypesParsingFixture.ParseNullableIntegerOption()", span="46-46"];
m9_3 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableIntegerOption()", file="NullableTypesParsingFixture.cs", label="var options = new NullableTypesOptions()", span="48-48"];
m9_4 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableIntegerOption()", color=green, community=0, file="NullableTypesParsingFixture.cs", label="1: Result = base.Parser.ParseArguments(new string[] { ''-i'', ''99'' }, options)", span="48-48"];
m9_6 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableIntegerOption()", file="NullableTypesParsingFixture.cs", label="Assert.AreEqual(99, options.IntegerValue)", span="52-52"];
m9_5 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableIntegerOption()", color=green, community=0, file="NullableTypesParsingFixture.cs", label="1: ResultShouldBeTrue()", span="50-50"];
m9_7 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableIntegerOption()", file="NullableTypesParsingFixture.cs", label="options = new NullableTypesOptions()", span="54-54"];
m9_8 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableIntegerOption()", color=green, community=0, file="NullableTypesParsingFixture.cs", label="1: Result = base.Parser.ParseArguments(new string[] { }, options)", span="54-54"];
m9_10 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableIntegerOption()", file="NullableTypesParsingFixture.cs", label="Assert.IsNull(options.IntegerValue)", span="58-58"];
m9_9 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableIntegerOption()", color=green, community=0, file="NullableTypesParsingFixture.cs", label="1: ResultShouldBeTrue()", span="56-56"];
m9_11 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableIntegerOption()", file="NullableTypesParsingFixture.cs", label="Exit CommandLine.Tests.NullableTypesParsingFixture.ParseNullableIntegerOption()", span="46-46"];
m9_63 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableDoubleOptionFails()", file="NullableTypesParsingFixture.cs", label="Entry CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableDoubleOptionFails()", span="139-139"];
m9_64 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableDoubleOptionFails()", file="NullableTypesParsingFixture.cs", label="var options = new NullableTypesOptions()", span="141-141"];
m9_65 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableDoubleOptionFails()", color=green, community=0, file="NullableTypesParsingFixture.cs", label="1: Result = base.Parser.ParseArguments(new string[] { ''-d'' }, options)", span="141-141"];
m9_66 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableDoubleOptionFails()", color=green, community=0, file="NullableTypesParsingFixture.cs", label="1: ResultShouldBeFalse()", span="143-143"];
m9_67 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableDoubleOptionFails()", file="NullableTypesParsingFixture.cs", label="Exit CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableDoubleOptionFails()", span="139-139"];
m9_12 [cluster="CommandLine.Tests.Mocks.NullableTypesOptions.NullableTypesOptions()", file="NullableTypesParsingFixture.cs", label="Entry CommandLine.Tests.Mocks.NullableTypesOptions.NullableTypesOptions()", span="35-35"];
m9_0 [cluster="CommandLine.Tests.NullableTypesParsingFixture.NullableTypesParsingFixture()", file="NullableTypesParsingFixture.cs", label="Entry CommandLine.Tests.NullableTypesParsingFixture.NullableTypesParsingFixture()", span="41-41"];
m9_1 [cluster="CommandLine.Tests.NullableTypesParsingFixture.NullableTypesParsingFixture()", file="NullableTypesParsingFixture.cs", label="Exit CommandLine.Tests.NullableTypesParsingFixture.NullableTypesParsingFixture()", span="41-41"];
m9_17 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableIntegerOptionFails()", file="NullableTypesParsingFixture.cs", label="Entry CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableIntegerOptionFails()", span="62-62"];
m9_18 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableIntegerOptionFails()", file="NullableTypesParsingFixture.cs", label="var options = new NullableTypesOptions()", span="64-64"];
m9_19 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableIntegerOptionFails()", color=green, community=0, file="NullableTypesParsingFixture.cs", label="1: Result = base.Parser.ParseArguments(new string[] { ''-i'', ''string-value'' }, options)", span="64-64"];
m9_20 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableIntegerOptionFails()", color=green, community=0, file="NullableTypesParsingFixture.cs", label="1: ResultShouldBeFalse()", span="66-66"];
m9_21 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableIntegerOptionFails()", file="NullableTypesParsingFixture.cs", label="Exit CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableIntegerOptionFails()", span="62-62"];
m9_43 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableEnumerationOptionFails()", file="NullableTypesParsingFixture.cs", label="Entry CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableEnumerationOptionFails()", span="105-105"];
m9_44 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableEnumerationOptionFails()", file="NullableTypesParsingFixture.cs", label="var options = new NullableTypesOptions()", span="107-107"];
m9_45 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableEnumerationOptionFails()", color=green, community=0, file="NullableTypesParsingFixture.cs", label="1: Result = base.Parser.ParseArguments(new string[] { ''--enum'' }, options)", span="107-107"];
m9_46 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableEnumerationOptionFails()", color=green, community=0, file="NullableTypesParsingFixture.cs", label="1: ResultShouldBeFalse()", span="109-109"];
m9_47 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableEnumerationOptionFails()", file="NullableTypesParsingFixture.cs", label="Exit CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableEnumerationOptionFails()", span="105-105"];
m9_58 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableDoubleOptionFails()", file="NullableTypesParsingFixture.cs", label="Entry CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableDoubleOptionFails()", span="130-130"];
m9_59 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableDoubleOptionFails()", file="NullableTypesParsingFixture.cs", label="var options = new NullableTypesOptions()", span="132-132"];
m9_60 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableDoubleOptionFails()", color=green, community=0, file="NullableTypesParsingFixture.cs", label="1: Result = base.Parser.ParseArguments(new string[] { ''--double'', ''9,999'' }, options)", span="132-132"];
m9_61 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableDoubleOptionFails()", color=green, community=0, file="NullableTypesParsingFixture.cs", label="1: ResultShouldBeFalse()", span="134-134"];
m9_62 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableDoubleOptionFails()", file="NullableTypesParsingFixture.cs", label="Exit CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableDoubleOptionFails()", span="130-130"];
m9_68 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseStringOptionAndNullableValueTypes()", file="NullableTypesParsingFixture.cs", label="Entry CommandLine.Tests.NullableTypesParsingFixture.ParseStringOptionAndNullableValueTypes()", span="148-148"];
m9_69 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseStringOptionAndNullableValueTypes()", file="NullableTypesParsingFixture.cs", label="var options = new NullableTypesOptions()", span="150-150"];
m9_70 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseStringOptionAndNullableValueTypes()", color=green, community=0, file="NullableTypesParsingFixture.cs", label="1: Result = base.Parser.ParseArguments(new string[] { ''--string'', ''alone'' }, options)", span="150-150"];
m9_72 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseStringOptionAndNullableValueTypes()", file="NullableTypesParsingFixture.cs", label="Assert.AreEqual(''alone'', options.StringValue)", span="154-154"];
m9_71 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseStringOptionAndNullableValueTypes()", color=green, community=0, file="NullableTypesParsingFixture.cs", label="1: ResultShouldBeTrue()", span="152-152"];
m9_73 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseStringOptionAndNullableValueTypes()", file="NullableTypesParsingFixture.cs", label="options = new NullableTypesOptions()", span="156-156"];
m9_74 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseStringOptionAndNullableValueTypes()", color=green, community=1, file="NullableTypesParsingFixture.cs", label="1: Result = base.Parser.ParseArguments(\r\n                new string[] { ''-d1.789'', ''--int'', ''10099'', ''-stogether'', ''--enum'', ''Read'' }, options)", span="156-157"];
m9_76 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseStringOptionAndNullableValueTypes()", file="NullableTypesParsingFixture.cs", label="Assert.AreEqual(1.789, options.DoubleValue)", span="161-161"];
m9_77 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseStringOptionAndNullableValueTypes()", file="NullableTypesParsingFixture.cs", label="Assert.AreEqual(10099, options.IntegerValue)", span="162-162"];
m9_78 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseStringOptionAndNullableValueTypes()", file="NullableTypesParsingFixture.cs", label="Assert.AreEqual(''together'', options.StringValue)", span="163-163"];
m9_79 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseStringOptionAndNullableValueTypes()", file="NullableTypesParsingFixture.cs", label="Assert.AreEqual(FileAccess.Read, options.EnumValue)", span="164-164"];
m9_75 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseStringOptionAndNullableValueTypes()", color=green, community=0, file="NullableTypesParsingFixture.cs", label="1: ResultShouldBeTrue()", span="159-159"];
m9_80 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseStringOptionAndNullableValueTypes()", file="NullableTypesParsingFixture.cs", label="Exit CommandLine.Tests.NullableTypesParsingFixture.ParseStringOptionAndNullableValueTypes()", span="148-148"];
m9_14 [cluster="CommandLine.Tests.CommandLineParserBaseFixture.ResultShouldBeTrue()", file="NullableTypesParsingFixture.cs", label="Entry CommandLine.Tests.CommandLineParserBaseFixture.ResultShouldBeTrue()", span="60-60"];
m9_81 [file="NullableTypesParsingFixture.cs", label="CommandLine.Tests.NullableTypesParsingFixture", span=""];
m10_12 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongName()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongName()", span="57-57"];
m10_13 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongName()", file="OptionArrayAttributeParsingFixture.cs", label="var options = new SimpleOptionsWithArray()", span="59-59"];
m10_14 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongName()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: bool result = base.Parser.ParseArguments(new string[] { ''--strarr'', ''alfa'', ''beta'', ''gamma'' }, options)", span="60-60"];
m10_16 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongName()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="0: base.AssertArrayItemEqual(new string[] { ''alfa'', ''beta'', ''gamma'' }, options.StringArrayValue)", span="63-63"];
m10_15 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongName()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: base.AssertParserSuccess(result)", span="62-62"];
m10_17 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongName()", file="OptionArrayAttributeParsingFixture.cs", label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongName()", span="57-57"];
m10_55 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongNameWithValueList()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongNameWithValueList()", span="123-123"];
m10_56 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongNameWithValueList()", file="OptionArrayAttributeParsingFixture.cs", label="var options = new SimpleOptionsWithArrayAndValueList()", span="125-125"];
m10_57 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongNameWithValueList()", color=red, community=1, file="OptionArrayAttributeParsingFixture.cs", label="1: bool result = base.Parser.ParseArguments(new string[] {\r\n                ''-shere'', ''-i999'', ''--strarr=0'', ''1'', ''2'', ''3'', ''4'', ''5'', ''6'', ''7'', ''8'', ''9'' , ''--switch'', ''f1.xml'', ''f2.xml''}, options)", span="126-127"];
m10_59 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongNameWithValueList()", file="OptionArrayAttributeParsingFixture.cs", label="Assert.AreEqual(''here'', options.StringValue)", span="130-130"];
m10_60 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongNameWithValueList()", file="OptionArrayAttributeParsingFixture.cs", label="Assert.AreEqual(999, options.IntegerValue)", span="131-131"];
m10_61 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongNameWithValueList()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: base.AssertArrayItemEqual(new string[] { ''0'', ''1'', ''2'', ''3'', ''4'', ''5'', ''6'', ''7'', ''8'', ''9'' }, options.StringArrayValue)", span="132-132"];
m10_62 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongNameWithValueList()", file="OptionArrayAttributeParsingFixture.cs", label="Assert.IsTrue(options.BooleanValue)", span="133-133"];
m10_63 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongNameWithValueList()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="0: base.AssertArrayItemEqual(new string[] { ''f1.xml'', ''f2.xml'' }, options.Items)", span="134-134"];
m10_58 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongNameWithValueList()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: base.AssertParserSuccess(result)", span="129-129"];
m10_64 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongNameWithValueList()", file="OptionArrayAttributeParsingFixture.cs", label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongNameWithValueList()", span="123-123"];
m10_65 [cluster="CommandLine.Tests.Mocks.SimpleOptionsWithArrayAndValueList.SimpleOptionsWithArrayAndValueList()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.Mocks.SimpleOptionsWithArrayAndValueList.SimpleOptionsWithArrayAndValueList()", span="35-35"];
m10_82 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingBadValueToAnIntegerArrayOptionFails()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingBadValueToAnIntegerArrayOptionFails()", span="164-164"];
m10_83 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingBadValueToAnIntegerArrayOptionFails()", file="OptionArrayAttributeParsingFixture.cs", label="var options = new SimpleOptionsWithArray()", span="166-166"];
m10_84 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingBadValueToAnIntegerArrayOptionFails()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: bool result = base.Parser.ParseArguments(new string[] { ''-y'', ''one'', ''2'', ''3'' }, options)", span="167-167"];
m10_85 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingBadValueToAnIntegerArrayOptionFails()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: base.AssertParserFailure(result)", span="169-169"];
m10_86 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingBadValueToAnIntegerArrayOptionFails()", file="OptionArrayAttributeParsingFixture.cs", label="options = new SimpleOptionsWithArray()", span="171-171"];
m10_87 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingBadValueToAnIntegerArrayOptionFails()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: result = base.Parser.ParseArguments(new string[] { ''-yone'', ''2'', ''3'' }, options)", span="172-172"];
m10_88 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingBadValueToAnIntegerArrayOptionFails()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: base.AssertParserFailure(result)", span="174-174"];
m10_89 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingBadValueToAnIntegerArrayOptionFails()", file="OptionArrayAttributeParsingFixture.cs", label="options = new SimpleOptionsWithArray()", span="176-176"];
m10_90 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingBadValueToAnIntegerArrayOptionFails()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: result = base.Parser.ParseArguments(new string[] { ''--intarr'', ''1'', ''two'', ''3'' }, options)", span="177-177"];
m10_91 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingBadValueToAnIntegerArrayOptionFails()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: base.AssertParserFailure(result)", span="179-179"];
m10_92 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingBadValueToAnIntegerArrayOptionFails()", file="OptionArrayAttributeParsingFixture.cs", label="options = new SimpleOptionsWithArray()", span="181-181"];
m10_93 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingBadValueToAnIntegerArrayOptionFails()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: result = base.Parser.ParseArguments(new string[] { ''--intarr=1'', ''2'', ''three'' }, options)", span="182-182"];
m10_94 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingBadValueToAnIntegerArrayOptionFails()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: base.AssertParserFailure(result)", span="184-184"];
m10_95 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingBadValueToAnIntegerArrayOptionFails()", file="OptionArrayAttributeParsingFixture.cs", label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingBadValueToAnIntegerArrayOptionFails()", span="164-164"];
m10_18 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameWithValueAdjacent()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameWithValueAdjacent()", span="67-67"];
m10_19 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameWithValueAdjacent()", file="OptionArrayAttributeParsingFixture.cs", label="var options = new SimpleOptionsWithArray()", span="69-69"];
m10_20 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameWithValueAdjacent()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: bool result = base.Parser.ParseArguments(new string[] { ''-zapple'', ''kiwi'' }, options)", span="70-70"];
m10_22 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameWithValueAdjacent()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="0: base.AssertArrayItemEqual(new string[] { ''apple'', ''kiwi'' }, options.StringArrayValue)", span="73-73"];
m10_21 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameWithValueAdjacent()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: base.AssertParserSuccess(result)", span="72-72"];
m10_23 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameWithValueAdjacent()", file="OptionArrayAttributeParsingFixture.cs", label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameWithValueAdjacent()", span="67-67"];
m10_96 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingNoValueToAnIntegerArrayOptionFails()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingNoValueToAnIntegerArrayOptionFails()", span="189-189"];
m10_97 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingNoValueToAnIntegerArrayOptionFails()", file="OptionArrayAttributeParsingFixture.cs", label="var options = new SimpleOptionsWithArray()", span="191-191"];
m10_98 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingNoValueToAnIntegerArrayOptionFails()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: bool result = base.Parser.ParseArguments(new string[] { ''-y'' }, options)", span="192-192"];
m10_99 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingNoValueToAnIntegerArrayOptionFails()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: base.AssertParserFailure(result)", span="194-194"];
m10_100 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingNoValueToAnIntegerArrayOptionFails()", file="OptionArrayAttributeParsingFixture.cs", label="options = new SimpleOptionsWithArray()", span="196-196"];
m10_101 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingNoValueToAnIntegerArrayOptionFails()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: result = base.Parser.ParseArguments(new string[] { ''--intarr'' }, options)", span="197-197"];
m10_102 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingNoValueToAnIntegerArrayOptionFails()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: base.AssertParserFailure(result)", span="199-199"];
m10_103 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingNoValueToAnIntegerArrayOptionFails()", file="OptionArrayAttributeParsingFixture.cs", label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingNoValueToAnIntegerArrayOptionFails()", span="189-189"];
m10_169 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.WillThrowExceptionIfOptionArrayAttributeBoundToIntegerWithShortName()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.WillThrowExceptionIfOptionArrayAttributeBoundToIntegerWithShortName()", span="338-338"];
m10_170 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.WillThrowExceptionIfOptionArrayAttributeBoundToIntegerWithShortName()", file="OptionArrayAttributeParsingFixture.cs", label="base.Parser.ParseArguments(new string[] { ''-w'', ''1'', ''2'', ''3'' }, new SimpleOptionsWithBadOptionArray())", span="340-340"];
m10_171 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.WillThrowExceptionIfOptionArrayAttributeBoundToIntegerWithShortName()", file="OptionArrayAttributeParsingFixture.cs", label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.WillThrowExceptionIfOptionArrayAttributeBoundToIntegerWithShortName()", span="338-338"];
m10_184 [cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="OptionArrayAttributeParsingFixture.cs", label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0"];
m10_45 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameWithOptionsBeforeAndAfter()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameWithOptionsBeforeAndAfter()", span="109-109"];
m10_46 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameWithOptionsBeforeAndAfter()", file="OptionArrayAttributeParsingFixture.cs", label="var options = new SimpleOptionsWithArray()", span="111-111"];
m10_47 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameWithOptionsBeforeAndAfter()", color=red, community=1, file="OptionArrayAttributeParsingFixture.cs", label="1: bool result = base.Parser.ParseArguments(new string[] {\r\n                ''-i'', ''191919'', ''-z'', ''one'', ''two'', ''three'', ''--switch'', ''--string=near'' }, options)", span="112-113"];
m10_49 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameWithOptionsBeforeAndAfter()", file="OptionArrayAttributeParsingFixture.cs", label="Assert.AreEqual(191919, options.IntegerValue)", span="116-116"];
m10_50 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameWithOptionsBeforeAndAfter()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: base.AssertArrayItemEqual(new string[] { ''one'', ''two'', ''three'' }, options.StringArrayValue)", span="117-117"];
m10_51 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameWithOptionsBeforeAndAfter()", file="OptionArrayAttributeParsingFixture.cs", label="Assert.IsTrue(options.BooleanValue)", span="118-118"];
m10_52 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameWithOptionsBeforeAndAfter()", file="OptionArrayAttributeParsingFixture.cs", label="Assert.AreEqual(''near'', options.StringValue)", span="119-119"];
m10_48 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameWithOptionsBeforeAndAfter()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: base.AssertParserSuccess(result)", span="115-115"];
m10_53 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameWithOptionsBeforeAndAfter()", file="OptionArrayAttributeParsingFixture.cs", label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameWithOptionsBeforeAndAfter()", span="109-109"];
m10_162 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.WillThrowExceptionIfOptionArrayAttributeBoundToStringWithShortName()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.WillThrowExceptionIfOptionArrayAttributeBoundToStringWithShortName()", span="324-324"];
m10_163 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.WillThrowExceptionIfOptionArrayAttributeBoundToStringWithShortName()", file="OptionArrayAttributeParsingFixture.cs", label="base.Parser.ParseArguments(new string[] { ''-v'', ''a'', ''b'', ''c'' }, new SimpleOptionsWithBadOptionArray())", span="326-326"];
m10_164 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.WillThrowExceptionIfOptionArrayAttributeBoundToStringWithShortName()", file="OptionArrayAttributeParsingFixture.cs", label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.WillThrowExceptionIfOptionArrayAttributeBoundToStringWithShortName()", span="324-324"];
m10_194 [cluster="CommandLine.Tests.OptionsWithUIntArray.OptionsWithUIntArray()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.OptionsWithUIntArray.OptionsWithUIntArray()", span="34-34"];
m10_24 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongNameWithEqualSign()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongNameWithEqualSign()", span="77-77"];
m10_25 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongNameWithEqualSign()", file="OptionArrayAttributeParsingFixture.cs", label="var options = new SimpleOptionsWithArray()", span="79-79"];
m10_26 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongNameWithEqualSign()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: bool result = base.Parser.ParseArguments(new string[] { ''--strarr=apple'', ''kiwi'' }, options)", span="80-80"];
m10_28 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongNameWithEqualSign()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="0: base.AssertArrayItemEqual(new string[] { ''apple'', ''kiwi'' }, options.StringArrayValue)", span="83-83"];
m10_27 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongNameWithEqualSign()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: base.AssertParserSuccess(result)", span="82-82"];
m10_29 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongNameWithEqualSign()", file="OptionArrayAttributeParsingFixture.cs", label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongNameWithEqualSign()", span="77-77"];
m10_130 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", span="257-257"];
m10_131 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", file="OptionArrayAttributeParsingFixture.cs", label="var options = new SimpleOptionsWithArray()", span="259-259"];
m10_132 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=red, community=1, file="OptionArrayAttributeParsingFixture.cs", label="1: bool result = base.Parser.ParseArguments(new string[] {\r\n                ''-z'', ''one'', ''two'', ''three'', ''four'',\r\n                ''-y'', ''1'', ''2'', ''3'', ''4'',\r\n                ''-q'', ''0.1'', ''0.2'', ''0.3'', ''0.4'',\r\n                ''--string=after''\r\n            }, options)", span="260-265"];
m10_134 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: base.AssertArrayItemEqual(new string[] { ''one'', ''two'', ''three'', ''four'' }, options.StringArrayValue)", span="268-268"];
m10_135 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: base.AssertArrayItemEqual(new int[] { 1, 2, 3, 4 }, options.IntegerArrayValue)", span="269-269"];
m10_136 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: base.AssertArrayItemEqual(new double[] { .1, .2, .3, .4 }, options.DoubleArrayValue)", span="270-270"];
m10_137 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", file="OptionArrayAttributeParsingFixture.cs", label="Assert.AreEqual(''after'', options.StringValue)", span="271-271"];
m10_133 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: base.AssertParserSuccess(result)", span="267-267"];
m10_138 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", file="OptionArrayAttributeParsingFixture.cs", label="options = new SimpleOptionsWithArray()", span="273-273"];
m10_139 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=red, community=1, file="OptionArrayAttributeParsingFixture.cs", label="1: result = base.Parser.ParseArguments(new string[] {\r\n                ''--string'', ''before'',\r\n                ''-y'', ''1'', ''2'', ''3'', ''4'',\r\n                ''-z'', ''one'', ''two'', ''three'', ''four'',\r\n                ''-q'', ''0.1'', ''0.2'', ''0.3'', ''0.4''\r\n            }, options)", span="274-279"];
m10_141 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", file="OptionArrayAttributeParsingFixture.cs", label="Assert.AreEqual(''before'', options.StringValue)", span="282-282"];
m10_142 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: base.AssertArrayItemEqual(new int[] { 1, 2, 3, 4 }, options.IntegerArrayValue)", span="283-283"];
m10_143 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: base.AssertArrayItemEqual(new string[] { ''one'', ''two'', ''three'', ''four'' }, options.StringArrayValue)", span="284-284"];
m10_144 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: base.AssertArrayItemEqual(new double[] { .1, .2, .3, .4 }, options.DoubleArrayValue)", span="285-285"];
m10_140 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: base.AssertParserSuccess(result)", span="281-281"];
m10_145 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", file="OptionArrayAttributeParsingFixture.cs", label="options = new SimpleOptionsWithArray()", span="287-287"];
m10_146 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=red, community=1, file="OptionArrayAttributeParsingFixture.cs", label="1: result = base.Parser.ParseArguments(new string[] {\r\n                ''-q'', ''0.1'', ''0.2'', ''0.3'', ''0.4'',\r\n                ''-y'', ''1'', ''2'', ''3'', ''4'',\r\n                ''-s'', ''near-the-center'',\r\n                ''-z'', ''one'', ''two'', ''three'', ''four''\r\n            }, options)", span="288-293"];
m10_148 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: base.AssertArrayItemEqual(new double[] { .1, .2, .3, .4 }, options.DoubleArrayValue)", span="296-296"];
m10_149 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: base.AssertArrayItemEqual(new int[] { 1, 2, 3, 4 }, options.IntegerArrayValue)", span="297-297"];
m10_150 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", file="OptionArrayAttributeParsingFixture.cs", label="Assert.AreEqual(''near-the-center'', options.StringValue)", span="298-298"];
m10_151 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: base.AssertArrayItemEqual(new string[] { ''one'', ''two'', ''three'', ''four'' }, options.StringArrayValue)", span="299-299"];
m10_147 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: base.AssertParserSuccess(result)", span="295-295"];
m10_152 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", file="OptionArrayAttributeParsingFixture.cs", label="options = new SimpleOptionsWithArray()", span="301-301"];
m10_153 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=red, community=1, file="OptionArrayAttributeParsingFixture.cs", label="1: result = base.Parser.ParseArguments(new string[] {\r\n                ''--switch'',\r\n                ''-z'', ''one'', ''two'', ''three'', ''four'',\r\n                ''-y'', ''1'', ''2'', ''3'', ''4'',\r\n                ''-i'', ''1234'',\r\n                ''-q'', ''0.1'', ''0.2'', ''0.3'', ''0.4'',\r\n                ''--string'', ''I'm really playing with the parser!''\r\n            }, options)", span="302-309"];
m10_155 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", file="OptionArrayAttributeParsingFixture.cs", label="Assert.IsTrue(options.BooleanValue)", span="312-312"];
m10_156 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: base.AssertArrayItemEqual(new string[] { ''one'', ''two'', ''three'', ''four'' }, options.StringArrayValue)", span="313-313"];
m10_157 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: base.AssertArrayItemEqual(new int[] { 1, 2, 3, 4 }, options.IntegerArrayValue)", span="314-314"];
m10_158 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", file="OptionArrayAttributeParsingFixture.cs", label="Assert.AreEqual(1234, options.IntegerValue)", span="315-315"];
m10_159 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: base.AssertArrayItemEqual(new double[] { .1, .2, .3, .4 }, options.DoubleArrayValue)", span="316-316"];
m10_160 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", file="OptionArrayAttributeParsingFixture.cs", label="Assert.AreEqual(''I'm really playing with the parser!'', options.StringValue)", span="317-317"];
m10_154 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: base.AssertParserSuccess(result)", span="311-311"];
m10_161 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", file="OptionArrayAttributeParsingFixture.cs", label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", span="257-257"];
m10_2 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortName()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortName()", span="47-47"];
m10_3 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortName()", file="OptionArrayAttributeParsingFixture.cs", label="var options = new SimpleOptionsWithArray()", span="49-49"];
m10_4 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortName()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="0: bool result = base.Parser.ParseArguments(new string[] { ''-z'', ''alfa'', ''beta'', ''gamma'' }, options)", span="50-50"];
m10_6 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortName()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: base.AssertArrayItemEqual(new string[] { ''alfa'', ''beta'', ''gamma'' }, options.StringArrayValue)", span="53-53"];
m10_5 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortName()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: base.AssertParserSuccess(result)", span="52-52"];
m10_7 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortName()", file="OptionArrayAttributeParsingFixture.cs", label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortName()", span="47-47"];
m10_66 [cluster="CommandLine.Tests.BaseFixture.AssertArrayItemEqual(string[], System.Collections.Generic.IList<string>)", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.BaseFixture.AssertArrayItemEqual(string[], System.Collections.Generic.IList<string>)", span="46-46"];
m10_54 [cluster="Unk.IsTrue", file="OptionArrayAttributeParsingFixture.cs", label="Entry Unk.IsTrue", span=""];
m10_165 [cluster="CommandLine.Tests.Mocks.SimpleOptionsWithBadOptionArray.SimpleOptionsWithBadOptionArray()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.Mocks.SimpleOptionsWithBadOptionArray.SimpleOptionsWithBadOptionArray()", span="37-37"];
m10_195 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArrayUsingShortNames()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArrayUsingShortNames()", span="385-385"];
m10_196 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArrayUsingShortNames()", file="OptionArrayAttributeParsingFixture.cs", label="var options = new OptionsWithUIntArray()", span="387-387"];
m10_197 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArrayUsingShortNames()", color=red, community=1, file="OptionArrayAttributeParsingFixture.cs", label="1: var result = CommandLineParser.Default.ParseArguments(new string[] {\r\n                ''-s'', ''just a string'',\r\n                ''-o'', ''10'', ''20'', ''30'', ''40'',\r\n                ''-t'', ''11'', ''22'', ''33'', ''44'',\r\n                ''-b''\r\n            }, options)", span="388-393"];
m10_199 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArrayUsingShortNames()", file="OptionArrayAttributeParsingFixture.cs", label="Assert.AreEqual(''just a string'', options.SomeStringValue)", span="396-396"];
m10_200 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArrayUsingShortNames()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: base.AssertArrayItemEqual(new uint[] {10, 20, 30, 40}, options.ArrayOne)", span="397-397"];
m10_201 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArrayUsingShortNames()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: base.AssertArrayItemEqual(new uint[] {11, 22, 33, 44}, options.ArrayTwo)", span="398-398"];
m10_202 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArrayUsingShortNames()", file="OptionArrayAttributeParsingFixture.cs", label="Assert.AreEqual(true, options.SomeBooleanValue)", span="399-399"];
m10_198 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArrayUsingShortNames()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: base.AssertParserSuccess(result)", span="395-395"];
m10_203 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArrayUsingShortNames()", file="OptionArrayAttributeParsingFixture.cs", label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArrayUsingShortNames()", span="385-385"];
m10_38 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameAndStringOptionBefore()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameAndStringOptionBefore()", span="98-98"];
m10_39 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameAndStringOptionBefore()", file="OptionArrayAttributeParsingFixture.cs", label="var options = new SimpleOptionsWithArray()", span="100-100"];
m10_40 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameAndStringOptionBefore()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="0: bool result = base.Parser.ParseArguments(new string[] { ''-s'', ''before'', ''-z'', ''one'', ''two'', ''three'' }, options)", span="101-101"];
m10_42 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameAndStringOptionBefore()", file="OptionArrayAttributeParsingFixture.cs", label="Assert.AreEqual(''before'', options.StringValue)", span="104-104"];
m10_43 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameAndStringOptionBefore()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: base.AssertArrayItemEqual(new string[] { ''one'', ''two'', ''three'' }, options.StringArrayValue)", span="105-105"];
m10_41 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameAndStringOptionBefore()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: base.AssertParserSuccess(result)", span="103-103"];
m10_44 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameAndStringOptionBefore()", file="OptionArrayAttributeParsingFixture.cs", label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameAndStringOptionBefore()", span="98-98"];
m10_10 [cluster="CommandLine.Tests.CommandLineParserBaseFixture.AssertParserSuccess(bool)", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.CommandLineParserBaseFixture.AssertParserSuccess(bool)", span="58-58"];
m10_9 [cluster="CommandLine.ICommandLineParser.ParseArguments(string[], object)", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.ICommandLineParser.ParseArguments(string[], object)", span="1473-1473"];
m10_75 [cluster="CommandLine.Tests.CommandLineParserBaseFixture.AssertParserFailure(bool)", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.CommandLineParserBaseFixture.AssertParserFailure(bool)", span="63-63"];
m10_185 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArray()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArray()", span="367-367"];
m10_186 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArray()", file="OptionArrayAttributeParsingFixture.cs", label="var options = new OptionsWithUIntArray()", span="369-369"];
m10_187 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArray()", color=red, community=1, file="OptionArrayAttributeParsingFixture.cs", label="1: var result = CommandLineParser.Default.ParseArguments(new string[] {\r\n                ''--somestr'', ''just a string'',\r\n                ''--arrayone'', ''10'', ''20'', ''30'', ''40'',\r\n                ''--arraytwo'', ''11'', ''22'', ''33'', ''44'',\r\n                ''--somebool''\r\n            }, options)", span="370-375"];
m10_189 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArray()", file="OptionArrayAttributeParsingFixture.cs", label="Assert.AreEqual(''just a string'', options.SomeStringValue)", span="378-378"];
m10_190 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArray()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: base.AssertArrayItemEqual(new uint[] {10, 20, 30, 40}, options.ArrayOne)", span="379-379"];
m10_191 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArray()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: base.AssertArrayItemEqual(new uint[] {11, 22, 33, 44}, options.ArrayTwo)", span="380-380"];
m10_192 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArray()", file="OptionArrayAttributeParsingFixture.cs", label="Assert.AreEqual(true, options.SomeBooleanValue)", span="381-381"];
m10_188 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArray()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: base.AssertParserSuccess(result)", span="377-377"];
m10_193 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArray()", file="OptionArrayAttributeParsingFixture.cs", label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArray()", span="367-367"];
m10_110 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", span="217-217"];
m10_111 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", file="OptionArrayAttributeParsingFixture.cs", label="var options = new SimpleOptionsWithArray()", span="219-219"];
m10_112 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", color=red, community=1, file="OptionArrayAttributeParsingFixture.cs", label="1: bool result = base.Parser.ParseArguments(new string[] {\r\n                ''-z'', ''one'', ''two'', ''three'', ''four'',\r\n                ''-y'', ''1'', ''2'', ''3'', ''4'',\r\n                ''-q'', ''0.1'', ''0.2'', ''0.3'', ''0.4''\r\n            }, options)", span="220-224"];
m10_114 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: base.AssertArrayItemEqual(new string[] { ''one'', ''two'', ''three'', ''four'' }, options.StringArrayValue)", span="227-227"];
m10_115 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: base.AssertArrayItemEqual(new int[] { 1, 2, 3, 4 }, options.IntegerArrayValue)", span="228-228"];
m10_116 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: base.AssertArrayItemEqual(new double[] { .1, .2, .3, .4 }, options.DoubleArrayValue)", span="229-229"];
m10_113 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: base.AssertParserSuccess(result)", span="226-226"];
m10_117 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", file="OptionArrayAttributeParsingFixture.cs", label="options = new SimpleOptionsWithArray()", span="231-231"];
m10_118 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", color=red, community=1, file="OptionArrayAttributeParsingFixture.cs", label="1: result = base.Parser.ParseArguments(new string[] {\r\n                ''-y'', ''1'', ''2'', ''3'', ''4'',\r\n                ''-z'', ''one'', ''two'', ''three'', ''four'',\r\n                ''-q'', ''0.1'', ''0.2'', ''0.3'', ''0.4''\r\n            }, options)", span="232-236"];
m10_120 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: base.AssertArrayItemEqual(new int[] { 1, 2, 3, 4 }, options.IntegerArrayValue)", span="239-239"];
m10_121 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: base.AssertArrayItemEqual(new string[] { ''one'', ''two'', ''three'', ''four'' }, options.StringArrayValue)", span="240-240"];
m10_122 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: base.AssertArrayItemEqual(new double[] { .1, .2, .3, .4 }, options.DoubleArrayValue)", span="241-241"];
m10_119 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: base.AssertParserSuccess(result)", span="238-238"];
m10_123 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", file="OptionArrayAttributeParsingFixture.cs", label="options = new SimpleOptionsWithArray()", span="243-243"];
m10_124 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", color=red, community=1, file="OptionArrayAttributeParsingFixture.cs", label="1: result = base.Parser.ParseArguments(new string[] {\r\n                ''-q'', ''0.1'', ''0.2'', ''0.3'', ''0.4'',\r\n                ''-y'', ''1'', ''2'', ''3'', ''4'',\r\n                ''-z'', ''one'', ''two'', ''three'', ''four''\r\n            }, options)", span="244-248"];
m10_126 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: base.AssertArrayItemEqual(new double[] { .1, .2, .3, .4 }, options.DoubleArrayValue)", span="251-251"];
m10_127 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: base.AssertArrayItemEqual(new int[] { 1, 2, 3, 4 }, options.IntegerArrayValue)", span="252-252"];
m10_128 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: base.AssertArrayItemEqual(new string[] { ''one'', ''two'', ''three'', ''four'' }, options.StringArrayValue)", span="253-253"];
m10_125 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: base.AssertParserSuccess(result)", span="250-250"];
m10_129 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", file="OptionArrayAttributeParsingFixture.cs", label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", span="217-217"];
m10_76 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseIntegerArrayOptionUsingShortName()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseIntegerArrayOptionUsingShortName()", span="154-154"];
m10_77 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseIntegerArrayOptionUsingShortName()", file="OptionArrayAttributeParsingFixture.cs", label="var options = new SimpleOptionsWithArray()", span="156-156"];
m10_78 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseIntegerArrayOptionUsingShortName()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="0: bool result = base.Parser.ParseArguments(new string[] { ''-y'', ''1'', ''2'', ''3'' }, options)", span="157-157"];
m10_80 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseIntegerArrayOptionUsingShortName()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: base.AssertArrayItemEqual(new int[] { 1, 2, 3 }, options.IntegerArrayValue)", span="160-160"];
m10_79 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseIntegerArrayOptionUsingShortName()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: base.AssertParserSuccess(result)", span="159-159"];
m10_81 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseIntegerArrayOptionUsingShortName()", file="OptionArrayAttributeParsingFixture.cs", label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseIntegerArrayOptionUsingShortName()", span="154-154"];
m10_104 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDoubleArrayOptionUsingShortName()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDoubleArrayOptionUsingShortName()", span="205-205"];
m10_105 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDoubleArrayOptionUsingShortName()", file="OptionArrayAttributeParsingFixture.cs", label="var options = new SimpleOptionsWithArray()", span="207-207"];
m10_106 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDoubleArrayOptionUsingShortName()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="0: bool result = base.Parser.ParseArguments(new string[] { ''-q'', ''0.1'', ''2.3'', ''0.9'' }, options)", span="208-208"];
m10_108 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDoubleArrayOptionUsingShortName()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: base.AssertArrayItemEqual(new double[] { .1, 2.3, .9 }, options.DoubleArrayValue)", span="211-211"];
m10_107 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDoubleArrayOptionUsingShortName()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: base.AssertParserSuccess(result)", span="210-210"];
m10_109 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDoubleArrayOptionUsingShortName()", file="OptionArrayAttributeParsingFixture.cs", label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDoubleArrayOptionUsingShortName()", span="205-205"];
m10_8 [cluster="CommandLine.Tests.Mocks.SimpleOptionsWithArray.SimpleOptionsWithArray()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.Mocks.SimpleOptionsWithArray.SimpleOptionsWithArray()", span="35-35"];
m10_175 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseCultureSpecificNumber()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseCultureSpecificNumber()", span="351-351"];
m10_176 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseCultureSpecificNumber()", file="OptionArrayAttributeParsingFixture.cs", label="var actualCulture = Thread.CurrentThread.CurrentCulture", span="353-353"];
m10_177 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseCultureSpecificNumber()", file="OptionArrayAttributeParsingFixture.cs", label="Thread.CurrentThread.CurrentCulture = new CultureInfo(''it-IT'')", span="354-354"];
m10_182 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseCultureSpecificNumber()", file="OptionArrayAttributeParsingFixture.cs", label="Thread.CurrentThread.CurrentCulture = actualCulture", span="361-361"];
m10_178 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseCultureSpecificNumber()", file="OptionArrayAttributeParsingFixture.cs", label="var options = new SimpleOptionsWithArray()", span="355-355"];
m10_179 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseCultureSpecificNumber()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: bool result = base.Parser.ParseArguments(new string[] { ''-q'', ''1,2'', ''1,23'', ''1,234'' }, options)", span="356-356"];
m10_181 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseCultureSpecificNumber()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: base.AssertArrayItemEqual(new double[] { 1.2, 1.23, 1.234 }, options.DoubleArrayValue)", span="359-359"];
m10_180 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseCultureSpecificNumber()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: base.AssertParserSuccess(result)", span="358-358"];
m10_183 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseCultureSpecificNumber()", file="OptionArrayAttributeParsingFixture.cs", label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseCultureSpecificNumber()", span="351-351"];
m10_67 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingNoValueToAStringArrayOptionFails()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingNoValueToAStringArrayOptionFails()", span="138-138"];
m10_68 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingNoValueToAStringArrayOptionFails()", file="OptionArrayAttributeParsingFixture.cs", label="var options = new SimpleOptionsWithArray()", span="140-140"];
m10_69 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingNoValueToAStringArrayOptionFails()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: bool result = base.Parser.ParseArguments(new string[] { ''-z'' }, options)", span="141-141"];
m10_70 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingNoValueToAStringArrayOptionFails()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: base.AssertParserFailure(result)", span="143-143"];
m10_71 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingNoValueToAStringArrayOptionFails()", file="OptionArrayAttributeParsingFixture.cs", label="options = new SimpleOptionsWithArray()", span="145-145"];
m10_72 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingNoValueToAStringArrayOptionFails()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: result = base.Parser.ParseArguments(new string[] { ''--strarr'' }, options)", span="146-146"];
m10_73 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingNoValueToAStringArrayOptionFails()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: base.AssertParserFailure(result)", span="148-148"];
m10_74 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingNoValueToAStringArrayOptionFails()", file="OptionArrayAttributeParsingFixture.cs", label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingNoValueToAStringArrayOptionFails()", span="138-138"];
m10_11 [cluster="CommandLine.Tests.BaseFixture.AssertArrayItemEqual<T>(T[], T[])", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.BaseFixture.AssertArrayItemEqual<T>(T[], T[])", span="37-37"];
m10_166 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.WillThrowExceptionIfOptionArrayAttributeBoundToStringWithLongName()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.WillThrowExceptionIfOptionArrayAttributeBoundToStringWithLongName()", span="331-331"];
m10_167 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.WillThrowExceptionIfOptionArrayAttributeBoundToStringWithLongName()", file="OptionArrayAttributeParsingFixture.cs", label="base.Parser.ParseArguments(new string[] { ''--bstrarr'', ''a'', ''b'', ''c'' }, new SimpleOptionsWithBadOptionArray())", span="333-333"];
m10_168 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.WillThrowExceptionIfOptionArrayAttributeBoundToStringWithLongName()", file="OptionArrayAttributeParsingFixture.cs", label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.WillThrowExceptionIfOptionArrayAttributeBoundToStringWithLongName()", span="331-331"];
m10_172 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.WillThrowExceptionIfOptionArrayAttributeBoundToIntegerWithLongName()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.WillThrowExceptionIfOptionArrayAttributeBoundToIntegerWithLongName()", span="345-345"];
m10_173 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.WillThrowExceptionIfOptionArrayAttributeBoundToIntegerWithLongName()", file="OptionArrayAttributeParsingFixture.cs", label="base.Parser.ParseArguments(new string[] { ''--bintarr'', ''1'', ''2'', ''3'' }, new SimpleOptionsWithBadOptionArray())", span="347-347"];
m10_174 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.WillThrowExceptionIfOptionArrayAttributeBoundToIntegerWithLongName()", file="OptionArrayAttributeParsingFixture.cs", label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.WillThrowExceptionIfOptionArrayAttributeBoundToIntegerWithLongName()", span="345-345"];
m10_0 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.OptionArrayAttributeParsingFixture()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.OptionArrayAttributeParsingFixture()", span="42-42"];
m10_1 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.OptionArrayAttributeParsingFixture()", file="OptionArrayAttributeParsingFixture.cs", label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.OptionArrayAttributeParsingFixture()", span="42-42"];
m10_30 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameAndStringOptionAfter()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameAndStringOptionAfter()", span="87-87"];
m10_31 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameAndStringOptionAfter()", file="OptionArrayAttributeParsingFixture.cs", label="var options = new SimpleOptionsWithArray()", span="89-89"];
m10_32 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameAndStringOptionAfter()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: bool result = base.Parser.ParseArguments(new string[] { ''-z'', ''one'', ''two'', ''three'', ''-s'', ''after'' }, options)", span="90-90"];
m10_34 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameAndStringOptionAfter()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="1: base.AssertArrayItemEqual(new string[] { ''one'', ''two'', ''three'' }, options.StringArrayValue)", span="93-93"];
m10_35 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameAndStringOptionAfter()", file="OptionArrayAttributeParsingFixture.cs", label="Assert.AreEqual(''after'', options.StringValue)", span="94-94"];
m10_33 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameAndStringOptionAfter()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="0: base.AssertParserSuccess(result)", span="92-92"];
m10_36 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameAndStringOptionAfter()", file="OptionArrayAttributeParsingFixture.cs", label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameAndStringOptionAfter()", span="87-87"];
m10_204 [file="OptionArrayAttributeParsingFixture.cs", label="CommandLine.Tests.OptionArrayAttributeParsingFixture", span=""];
m12_15 [cluster="CommandLine.Tests.ValueListAttributeFixture.MockSpecializedList.MockSpecializedList()", file="ValueListAttributeFixture.cs", label="Entry CommandLine.Tests.ValueListAttributeFixture.MockSpecializedList.MockSpecializedList()", span="41-41"];
m12_3 [cluster="CommandLine.ValueListAttribute.ValueListAttribute(System.Type)", file="ValueListAttributeFixture.cs", label="Entry CommandLine.ValueListAttribute.ValueListAttribute(System.Type)", span="304-304"];
m12_12 [cluster="CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfStringSubType()", file="ValueListAttributeFixture.cs", label="Entry CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfStringSubType()", span="73-73"];
m12_13 [cluster="CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfStringSubType()", file="ValueListAttributeFixture.cs", label="new ValueListAttribute(new MockSpecializedList().GetType())", span="75-75"];
m12_14 [cluster="CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfStringSubType()", file="ValueListAttributeFixture.cs", label="Exit CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfStringSubType()", span="73-73"];
m12_24 [cluster="Unk.IsNotNull", file="ValueListAttributeFixture.cs", label="Entry Unk.IsNotNull", span=""];
m12_22 [cluster="CommandLine.Tests.ValueListAttributeFixture.MockOptions.MockOptions()", file="ValueListAttributeFixture.cs", label="Entry CommandLine.Tests.ValueListAttributeFixture.MockOptions.MockOptions()", span="45-45"];
m12_35 [cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual(string[], System.Collections.Generic.IList<string>)", file="ValueListAttributeFixture.cs", label="Entry CommandLine.Tests.BaseFixture.ElementsShouldBeEqual(string[], System.Collections.Generic.IList<string>)", span="48-48"];
m12_26 [cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", file="ValueListAttributeFixture.cs", label="Entry CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", span="89-89"];
m12_27 [cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", file="ValueListAttributeFixture.cs", label="var options = new MockOptions()", span="91-91"];
m12_28 [cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", file="ValueListAttributeFixture.cs", label="var values = ValueListAttribute.GetReference(options)", span="93-93"];
m12_32 [cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", color=green, community=0, file="ValueListAttributeFixture.cs", label="1: base.ElementsShouldBeEqual(new string[] { ''value0'', ''value1'', ''value2'' }, options.Values)", span="100-100"];
m12_29 [cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", file="ValueListAttributeFixture.cs", label="values.Add(''value0'')", span="94-94"];
m12_30 [cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", file="ValueListAttributeFixture.cs", label="values.Add(''value1'')", span="95-95"];
m12_31 [cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", file="ValueListAttributeFixture.cs", label="values.Add(''value2'')", span="96-96"];
m12_33 [cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", file="ValueListAttributeFixture.cs", label="Exit CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", span="89-89"];
m12_16 [cluster="CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", file="ValueListAttributeFixture.cs", label="Entry CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", span="79-79"];
m12_17 [cluster="CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", file="ValueListAttributeFixture.cs", label="var options = new MockOptions()", span="81-81"];
m12_18 [cluster="CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", file="ValueListAttributeFixture.cs", label="IList<string> values = ValueListAttribute.GetReference(options)", span="83-83"];
m12_19 [cluster="CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", file="ValueListAttributeFixture.cs", label="Assert.IsNotNull(values)", span="84-84"];
m12_20 [cluster="CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", file="ValueListAttributeFixture.cs", label="Assert.AreEqual(typeof(List<string>), values.GetType())", span="85-85"];
m12_21 [cluster="CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", file="ValueListAttributeFixture.cs", label="Exit CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", span="79-79"];
m12_4 [cluster="CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsIncompatible()", file="ValueListAttributeFixture.cs", label="Entry CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsIncompatible()", span="61-61"];
m12_5 [cluster="CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsIncompatible()", file="ValueListAttributeFixture.cs", label="new ValueListAttribute(new List<object>().GetType())", span="63-63"];
m12_6 [cluster="CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsIncompatible()", file="ValueListAttributeFixture.cs", label="Exit CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsIncompatible()", span="61-61"];
m12_34 [cluster="System.Collections.Generic.ICollection<T>.Add(T)", file="ValueListAttributeFixture.cs", label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0"];
m12_23 [cluster="CommandLine.ValueListAttribute.GetReference(object)", file="ValueListAttributeFixture.cs", label="Entry CommandLine.ValueListAttribute.GetReference(object)", span="328-328"];
m12_8 [cluster="object.GetType()", file="ValueListAttributeFixture.cs", label="Entry object.GetType()", span="0-0"];
m12_0 [cluster="CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsNull()", file="ValueListAttributeFixture.cs", label="Entry CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsNull()", span="54-54"];
m12_1 [cluster="CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsNull()", file="ValueListAttributeFixture.cs", label="new ValueListAttribute(null)", span="56-56"];
m12_2 [cluster="CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsNull()", file="ValueListAttributeFixture.cs", label="Exit CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsNull()", span="54-54"];
m12_9 [cluster="CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfString()", file="ValueListAttributeFixture.cs", label="Entry CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfString()", span="67-67"];
m12_10 [cluster="CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfString()", file="ValueListAttributeFixture.cs", label="new ValueListAttribute(new List<string>().GetType())", span="69-69"];
m12_11 [cluster="CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfString()", file="ValueListAttributeFixture.cs", label="Exit CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfString()", span="67-67"];
m12_7 [cluster="System.Collections.Generic.List<T>.List()", file="ValueListAttributeFixture.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m12_36 [file="ValueListAttributeFixture.cs", label="CommandLine.Tests.ValueListAttributeFixture", span=""];
m13_14 [cluster="CommandLine.ICommandLineParser.ParseArguments(string[], object)", file="ValueListAttributeParsingFixture.cs", label="Entry CommandLine.ICommandLineParser.ParseArguments(string[], object)", span="1473-1473"];
m13_19 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemInsideBounds()", file="ValueListAttributeParsingFixture.cs", label="Entry CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemInsideBounds()", span="61-61"];
m13_20 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemInsideBounds()", file="ValueListAttributeParsingFixture.cs", label="var options = new OptionsWithValueListMaximumThree()", span="63-63"];
m13_21 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemInsideBounds()", color=green, community=0, file="ValueListAttributeParsingFixture.cs", label="1: Result = base.Parser.ParseArguments(new string[] { ''file.a'', ''file.b'', ''file.c'' }, options)", span="63-63"];
m13_23 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemInsideBounds()", file="ValueListAttributeParsingFixture.cs", label="Assert.AreEqual(''file.a'', options.InputFilenames[0])", span="67-67"];
m13_24 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemInsideBounds()", file="ValueListAttributeParsingFixture.cs", label="Assert.AreEqual(''file.b'', options.InputFilenames[1])", span="68-68"];
m13_25 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemInsideBounds()", file="ValueListAttributeParsingFixture.cs", label="Assert.AreEqual(''file.c'', options.InputFilenames[2])", span="69-69"];
m13_26 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemInsideBounds()", file="ValueListAttributeParsingFixture.cs", label="Assert.IsNull(options.OutputFile)", span="70-70"];
m13_27 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemInsideBounds()", file="ValueListAttributeParsingFixture.cs", label="Assert.IsFalse(options.Overwrite)", span="71-71"];
m13_28 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemInsideBounds()", file="ValueListAttributeParsingFixture.cs", label="Console.WriteLine(options)", span="72-72"];
m13_22 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemInsideBounds()", color=green, community=0, file="ValueListAttributeParsingFixture.cs", label="1: ResultShouldBeTrue()", span="65-65"];
m13_29 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemInsideBounds()", file="ValueListAttributeParsingFixture.cs", label="Exit CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemInsideBounds()", span="61-61"];
m13_38 [cluster="CommandLine.Tests.CommandLineParserBaseFixture.AssertParserFailure(bool)", file="ValueListAttributeParsingFixture.cs", label="Entry CommandLine.Tests.CommandLineParserBaseFixture.AssertParserFailure(bool)", span="63-63"];
m13_18 [cluster="System.Console.WriteLine(object)", file="ValueListAttributeParsingFixture.cs", label="Entry System.Console.WriteLine(object)", span="0-0"];
m13_31 [cluster="Unk.IsNull", file="ValueListAttributeParsingFixture.cs", label="Entry Unk.IsNull", span=""];
m13_33 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemOutsideBounds()", file="ValueListAttributeParsingFixture.cs", label="Entry CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemOutsideBounds()", span="76-76"];
m13_34 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemOutsideBounds()", file="ValueListAttributeParsingFixture.cs", label="var options = new OptionsWithValueListMaximumThree()", span="78-78"];
m13_35 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemOutsideBounds()", color=green, community=1, file="ValueListAttributeParsingFixture.cs", label="1: Result = base.Parser.ParseArguments(\r\n                    new string[] { ''file.a'', ''file.b'', ''file.c'', ''file.d'' }, options)", span="78-79"];
m13_36 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemOutsideBounds()", color=green, community=0, file="ValueListAttributeParsingFixture.cs", label="1: ResultShouldBeFalse()", span="81-81"];
m13_37 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemOutsideBounds()", file="ValueListAttributeParsingFixture.cs", label="Exit CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemOutsideBounds()", span="76-76"];
m13_30 [cluster="CommandLine.Tests.Mocks.OptionsWithValueListMaximumThree.OptionsWithValueListMaximumThree()", file="ValueListAttributeParsingFixture.cs", label="Entry CommandLine.Tests.Mocks.OptionsWithValueListMaximumThree.OptionsWithValueListMaximumThree()", span="35-35"];
m13_32 [cluster="Unk.IsFalse", file="ValueListAttributeParsingFixture.cs", label="Entry Unk.IsFalse", span=""];
m13_17 [cluster="Unk.IsTrue", file="ValueListAttributeParsingFixture.cs", label="Entry Unk.IsTrue", span=""];
m13_13 [cluster="CommandLine.Tests.Mocks.SimpleOptionsWithValueList.SimpleOptionsWithValueList()", file="ValueListAttributeParsingFixture.cs", label="Entry CommandLine.Tests.Mocks.SimpleOptionsWithValueList.SimpleOptionsWithValueList()", span="35-35"];
m13_0 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeParsingFixture()", file="ValueListAttributeParsingFixture.cs", label="Entry CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeParsingFixture()", span="40-40"];
m13_1 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeParsingFixture()", file="ValueListAttributeParsingFixture.cs", label="Exit CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeParsingFixture()", span="40-40"];
m13_46 [cluster="CommandLine.Tests.Mocks.OptionsWithValueListMaximumZero.OptionsWithValueListMaximumZero()", file="ValueListAttributeParsingFixture.cs", label="Entry CommandLine.Tests.Mocks.OptionsWithValueListMaximumZero.OptionsWithValueListMaximumZero()", span="36-36"];
m13_47 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemSetToZeroFailes()", file="ValueListAttributeParsingFixture.cs", label="Entry CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemSetToZeroFailes()", span="97-97"];
m13_48 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemSetToZeroFailes()", file="ValueListAttributeParsingFixture.cs", label="var options = new OptionsWithValueListMaximumZero()", span="99-99"];
m13_49 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemSetToZeroFailes()", file="ValueListAttributeParsingFixture.cs", label="Assert.IsFalse(base.Parser.ParseArguments(new string[] { ''some'', ''value'' }, options))", span="101-101"];
m13_50 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemSetToZeroFailes()", file="ValueListAttributeParsingFixture.cs", label="Exit CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemSetToZeroFailes()", span="97-97"];
m13_2 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeIsolatesNonOptionValues()", file="ValueListAttributeParsingFixture.cs", label="Entry CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeIsolatesNonOptionValues()", span="45-45"];
m13_3 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeIsolatesNonOptionValues()", file="ValueListAttributeParsingFixture.cs", label="var options = new SimpleOptionsWithValueList()", span="47-47"];
m13_4 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeIsolatesNonOptionValues()", color=green, community=1, file="ValueListAttributeParsingFixture.cs", label="1: Result = base.Parser.ParseArguments(\r\n                new string[] { ''--switch'', ''file1.ext'', ''file2.ext'', ''file3.ext'', ''-s'', ''out.ext'' }, options)", span="47-48"];
m13_6 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeIsolatesNonOptionValues()", file="ValueListAttributeParsingFixture.cs", label="Assert.AreEqual(''file1.ext'', options.Items[0])", span="52-52"];
m13_7 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeIsolatesNonOptionValues()", file="ValueListAttributeParsingFixture.cs", label="Assert.AreEqual(''file2.ext'', options.Items[1])", span="53-53"];
m13_8 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeIsolatesNonOptionValues()", file="ValueListAttributeParsingFixture.cs", label="Assert.AreEqual(''file3.ext'', options.Items[2])", span="54-54"];
m13_9 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeIsolatesNonOptionValues()", file="ValueListAttributeParsingFixture.cs", label="Assert.AreEqual(''out.ext'', options.StringValue)", span="55-55"];
m13_10 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeIsolatesNonOptionValues()", file="ValueListAttributeParsingFixture.cs", label="Assert.IsTrue(options.BooleanValue)", span="56-56"];
m13_11 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeIsolatesNonOptionValues()", file="ValueListAttributeParsingFixture.cs", label="Console.WriteLine(options)", span="57-57"];
m13_5 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeIsolatesNonOptionValues()", color=green, community=0, file="ValueListAttributeParsingFixture.cs", label="1: ResultShouldBeTrue()", span="50-50"];
m13_12 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeIsolatesNonOptionValues()", file="ValueListAttributeParsingFixture.cs", label="Exit CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeIsolatesNonOptionValues()", span="45-45"];
m13_39 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemSetToZeroSucceeds()", file="ValueListAttributeParsingFixture.cs", label="Entry CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemSetToZeroSucceeds()", span="86-86"];
m13_40 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemSetToZeroSucceeds()", file="ValueListAttributeParsingFixture.cs", label="var options = new OptionsWithValueListMaximumZero()", span="88-88"];
m13_41 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemSetToZeroSucceeds()", color=green, community=0, file="ValueListAttributeParsingFixture.cs", label="1: Result = base.Parser.ParseArguments(new string[] { }, options)", span="88-88"];
m13_43 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemSetToZeroSucceeds()", file="ValueListAttributeParsingFixture.cs", label="Assert.AreEqual(0, options.Junk.Count)", span="92-92"];
m13_44 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemSetToZeroSucceeds()", file="ValueListAttributeParsingFixture.cs", label="Console.WriteLine(options)", span="93-93"];
m13_42 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemSetToZeroSucceeds()", color=green, community=0, file="ValueListAttributeParsingFixture.cs", label="1: ResultShouldBeTrue()", span="90-90"];
m13_45 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemSetToZeroSucceeds()", file="ValueListAttributeParsingFixture.cs", label="Exit CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemSetToZeroSucceeds()", span="86-86"];
m13_15 [cluster="CommandLine.Tests.CommandLineParserBaseFixture.ResultShouldBeTrue()", file="ValueListAttributeParsingFixture.cs", label="Entry CommandLine.Tests.CommandLineParserBaseFixture.ResultShouldBeTrue()", span="60-60"];
m13_51 [file="ValueListAttributeParsingFixture.cs", label="CommandLine.Tests.ValueListAttributeParsingFixture", span=""];
n12 -> n4  [color=red, key=1, label="CommandLine.Tests.ArgumentParserFixture", style=dashed];
n12 -> d4  [color=green, key=1, label="CommandLine.Tests.ArgumentParserFixture", style=dashed];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n7  [key=2, style=dotted];
n1 -> n3  [color=darkseagreen4, key=1, label=ae, style=dashed];
n1 -> n5  [color=darkseagreen4, key=1, label=ae, style=dashed];
n2 -> n3  [key=0, style=solid];
n2 -> n8  [key=2, style=dotted];
n3 -> n4  [color=red, key=0, style=solid];
n3 -> n9  [key=2, style=dotted];
n3 -> d4  [color=green, key=0, style=solid];
n5 -> n6  [key=0, style=solid];
n5 -> n11  [key=2, style=dotted];
n4 -> n5  [color=red, key=0, style=solid];
n4 -> n10  [color=red, key=2, style=dotted];
n6 -> n0  [color=blue, key=0, style=bold];
d4 -> n5  [color=green, key=0, style=solid];
d4 -> d10  [color=green, key=2, style=dotted];
m1_0 -> m1_1  [color=green, key=0, style=solid];
m1_0 -> m1_3  [color=darkseagreen4, key=1, label="T[]", style=dashed];
m1_0 -> m1_4  [color=green, key=1, label="T[]", style=dashed];
m1_1 -> m1_2  [color=green, key=0, style=solid];
m1_1 -> n11  [color=red, key=2, style=dotted];
m1_1 -> m1_7  [color=green, key=2, style=dotted];
m1_1 -> m1_8  [color=green, key=2, style=dotted];
m1_3 -> m1_4  [color=green, key=0, style=solid];
m1_3 -> m1_6  [key=0, style=solid];
m1_3 -> m1_3  [color=darkorchid, key=3, label="Local variable int i", style=bold];
m1_4 -> m1_5  [color=green, key=0, style=solid];
m1_4 -> n11  [color=red, key=2, style=dotted];
m1_4 -> m1_7  [color=green, key=2, style=dotted];
m1_4 -> m1_8  [color=green, key=2, style=dotted];
m1_2 -> m1_3  [key=0, style=solid];
m1_2 -> m1_4  [color=green, key=1, label=i, style=dashed];
m1_2 -> m1_5  [color=darkseagreen4, key=1, label=i, style=dashed];
m1_5 -> m1_3  [key=0, style=solid];
m1_5 -> m1_5  [color=darkseagreen4, key=1, label=i, style=dashed];
m1_6 -> m1_0  [color=blue, key=0, style=bold];
m1_8 -> m1_9  [color=red, key=0, style=solid];
m1_8 -> m1_11  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m1_8 -> m1_12  [color=red, key=1, label="string[]", style=dashed];
m1_9 -> m1_10  [color=green, key=0, style=solid];
m1_9 -> n11  [color=red, key=2, style=dotted];
m1_9 -> m1_13  [color=green, key=1, label="string[]", style=dashed];
m1_9 -> m1_12  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m1_11 -> m1_12  [color=red, key=0, style=solid];
m1_11 -> m1_14  [key=0, style=solid];
m1_11 -> m1_3  [color=darkorchid, key=3, label="Local variable int i", style=bold];
m1_11 -> m1_13  [color=green, key=1, label=i, style=dashed];
m1_12 -> m1_13  [color=green, key=0, style=solid];
m1_12 -> n11  [color=red, key=2, style=dotted];
m1_12 -> m1_3  [color=darkorchid, key=3, label="Local variable int i", style=bold];
m1_12 -> m1_15  [key=0, style=solid];
m1_10 -> m1_11  [color=green, key=0, style=solid];
m1_10 -> m1_12  [color=red, key=1, label=i, style=dashed];
m1_10 -> m1_13  [color=darkseagreen4, key=1, label=i, style=dashed];
m1_10 -> m1_7  [color=green, key=2, style=dotted];
m1_10 -> m1_8  [color=green, key=2, style=dotted];
m1_13 -> m1_11  [key=0, style=solid];
m1_13 -> m1_13  [color=darkseagreen4, key=1, label=i, style=dashed];
m1_13 -> m1_14  [color=green, key=0, style=solid];
m1_13 -> m1_7  [color=green, key=2, style=dotted];
m1_13 -> m1_8  [color=green, key=2, style=dotted];
m1_14 -> m1_8  [color=blue, key=0, style=bold];
m1_14 -> m1_12  [key=0, style=solid];
m1_14 -> m1_14  [color=darkseagreen4, key=1, label=i, style=dashed];
m1_15 -> m1_9  [color=blue, key=0, style=bold];
m2_3 -> m2_5  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_3 -> m2_4  [key=0, style=solid];
m2_6 -> m2_7  [color=green, key=0, style=solid];
m2_5 -> m2_6  [color=green, key=0, style=solid];
m2_4 -> m2_5  [key=0, style=solid];
m2_7 -> m2_3  [color=blue, key=0, style=bold];
m2_0 -> m2_1  [color=green, key=0, style=solid];
m2_1 -> m2_2  [color=green, key=0, style=solid];
m2_2 -> m2_0  [color=blue, key=0, style=bold];
m2_715 -> m2_1  [color=green, key=1, label="CommandLine.HelpOptionAttribute", style=dashed];
m2_715 -> m2_6  [color=green, key=1, label="CommandLine.HelpOptionAttribute", style=dashed];
m2_715 -> m2_4  [color=darkseagreen4, key=1, label="CommandLine.HelpOptionAttribute", style=dashed];
m2_715 -> m2_5  [color=darkseagreen4, key=1, label="CommandLine.HelpOptionAttribute", style=dashed];
m3_13 -> m3_14  [color=red, key=0, style=solid];
m3_13 -> m3_15  [color=red, key=2, style=dotted];
m3_14 -> m3_15  [color=green, key=0, style=solid];
m3_14 -> m3_11  [color=green, key=2, style=dotted];
m3_14 -> m3_16  [color=green, key=2, style=dotted];
m3_14 -> m3_12  [color=blue, key=0, style=bold];
m3_15 -> m3_13  [color=blue, key=0, style=bold];
m3_4 -> m3_5  [color=red, key=0, style=solid];
m3_5 -> m3_6  [color=red, key=0, style=solid];
m3_5 -> m3_7  [color=red, key=2, style=dotted];
m3_6 -> m3_4  [color=blue, key=0, style=bold];
m3_0 -> m3_1  [key=0, style=solid];
m3_1 -> m3_2  [key=0, style=solid];
m3_1 -> m3_3  [key=2, style=dotted];
m3_2 -> m3_0  [color=blue, key=0, style=bold];
m3_12 -> m3_13  [color=red, key=0, style=solid];
m3_8 -> m3_9  [color=green, key=0, style=solid];
m3_9 -> m3_10  [color=green, key=0, style=solid];
m3_9 -> m3_11  [color=green, key=2, style=dotted];
m3_9 -> m3_12  [color=green, key=2, style=dotted];
m3_10 -> m3_8  [color=blue, key=0, style=bold];
m3_17 -> m3_5  [color=green, key=1, label="CommandLine.Tests.CommandLineParserBaseFixture", style=dashed];
m3_17 -> m3_9  [color=green, key=1, label="CommandLine.Tests.CommandLineParserBaseFixture", style=dashed];
m3_17 -> m3_14  [color=green, key=1, label="CommandLine.Tests.CommandLineParserBaseFixture", style=dashed];
m4_10 -> m4_11  [key=0, style=solid];
m4_11 -> m4_12  [color=green, key=0, style=solid];
m4_11 -> m4_5  [key=2, style=dotted];
m4_11 -> m4_14  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_11 -> m4_15  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_12 -> m4_13  [color=green, key=0, style=solid];
m4_12 -> m4_6  [color=green, key=2, style=dotted];
m4_14 -> m4_15  [key=0, style=solid];
m4_14 -> n11  [key=2, style=dotted];
m4_15 -> m4_16  [key=0, style=solid];
m4_15 -> m4_19  [key=2, style=dotted];
m4_13 -> m4_14  [color=green, key=0, style=solid];
m4_13 -> m4_17  [color=green, key=2, style=dotted];
m4_16 -> m4_10  [color=blue, key=0, style=bold];
m4_176 -> m4_177  [key=0, style=solid];
m4_177 -> m4_178  [color=green, key=0, style=solid];
m4_177 -> m4_91  [key=2, style=dotted];
m4_178 -> m4_179  [color=green, key=0, style=solid];
m4_178 -> m4_6  [color=green, key=2, style=dotted];
m4_179 -> m4_180  [color=green, key=0, style=solid];
m4_179 -> m4_129  [color=green, key=2, style=dotted];
m4_180 -> m4_176  [color=blue, key=0, style=bold];
m4_260 -> m4_261  [key=0, style=solid];
m4_261 -> m4_262  [color=green, key=0, style=solid];
m4_261 -> m4_91  [key=2, style=dotted];
m4_262 -> m4_263  [color=green, key=0, style=solid];
m4_262 -> m4_265  [color=green, key=2, style=dotted];
m4_262 -> m4_6  [color=green, key=2, style=dotted];
m4_263 -> m4_264  [color=green, key=0, style=solid];
m4_263 -> m4_129  [color=green, key=2, style=dotted];
m4_264 -> m4_260  [color=blue, key=0, style=bold];
m4_242 -> m4_243  [key=0, style=solid];
m4_243 -> m4_244  [color=green, key=0, style=solid];
m4_243 -> m4_91  [key=2, style=dotted];
m4_243 -> m4_246  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_244 -> m4_245  [color=green, key=0, style=solid];
m4_244 -> m4_6  [color=green, key=2, style=dotted];
m4_246 -> m4_247  [key=0, style=solid];
m4_246 -> n11  [key=2, style=dotted];
m4_245 -> m4_246  [color=green, key=0, style=solid];
m4_245 -> m4_17  [color=green, key=2, style=dotted];
m4_247 -> m4_242  [color=blue, key=0, style=bold];
m4_284 -> m4_285  [key=0, style=solid];
m4_285 -> m4_286  [color=green, key=0, style=solid];
m4_285 -> m4_91  [key=2, style=dotted];
m4_286 -> m4_287  [color=green, key=0, style=solid];
m4_286 -> m4_289  [color=green, key=2, style=dotted];
m4_286 -> m4_6  [color=green, key=2, style=dotted];
m4_287 -> m4_288  [color=green, key=0, style=solid];
m4_287 -> m4_129  [color=green, key=2, style=dotted];
m4_288 -> m4_284  [color=blue, key=0, style=bold];
m4_0 -> m4_1  [key=0, style=solid];
m4_1 -> m4_0  [color=blue, key=0, style=bold];
m4_254 -> m4_255  [key=0, style=solid];
m4_255 -> m4_256  [color=green, key=0, style=solid];
m4_255 -> m4_91  [key=2, style=dotted];
m4_255 -> m4_258  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_256 -> m4_257  [color=green, key=0, style=solid];
m4_256 -> m4_6  [color=green, key=2, style=dotted];
m4_258 -> m4_259  [key=0, style=solid];
m4_258 -> n11  [key=2, style=dotted];
m4_257 -> m4_258  [color=green, key=0, style=solid];
m4_257 -> m4_17  [color=green, key=2, style=dotted];
m4_259 -> m4_254  [color=blue, key=0, style=bold];
m4_248 -> m4_249  [key=0, style=solid];
m4_249 -> m4_250  [color=green, key=0, style=solid];
m4_249 -> m4_91  [key=2, style=dotted];
m4_249 -> m4_252  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_250 -> m4_251  [color=green, key=0, style=solid];
m4_250 -> m4_6  [color=green, key=2, style=dotted];
m4_252 -> m4_253  [key=0, style=solid];
m4_252 -> n11  [key=2, style=dotted];
m4_251 -> m4_252  [color=green, key=0, style=solid];
m4_251 -> m4_17  [color=green, key=2, style=dotted];
m4_253 -> m4_248  [color=blue, key=0, style=bold];
m4_7 -> m4_8  [key=0, style=solid];
m4_8 -> m4_9  [key=0, style=solid];
m4_8 -> m4_6  [key=2, style=dotted];
m4_9 -> m4_7  [color=blue, key=0, style=bold];
m4_72 -> m4_73  [key=0, style=solid];
m4_73 -> m4_74  [color=green, key=0, style=solid];
m4_73 -> m4_80  [key=2, style=dotted];
m4_73 -> m4_76  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_73 -> m4_77  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_73 -> m4_78  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_74 -> m4_75  [color=green, key=0, style=solid];
m4_74 -> m4_6  [color=green, key=2, style=dotted];
m4_76 -> m4_77  [key=0, style=solid];
m4_76 -> n11  [key=2, style=dotted];
m4_77 -> m4_78  [key=0, style=solid];
m4_77 -> n11  [key=2, style=dotted];
m4_78 -> m4_79  [key=0, style=solid];
m4_78 -> m4_19  [key=2, style=dotted];
m4_75 -> m4_76  [color=green, key=0, style=solid];
m4_75 -> m4_17  [color=green, key=2, style=dotted];
m4_79 -> m4_72  [color=blue, key=0, style=bold];
m4_224 -> m4_225  [key=0, style=solid];
m4_225 -> m4_226  [color=green, key=0, style=solid];
m4_225 -> m4_91  [key=2, style=dotted];
m4_225 -> m4_228  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_226 -> m4_227  [color=green, key=0, style=solid];
m4_226 -> m4_6  [color=green, key=2, style=dotted];
m4_228 -> m4_229  [key=0, style=solid];
m4_228 -> n11  [key=2, style=dotted];
m4_227 -> m4_228  [color=green, key=0, style=solid];
m4_227 -> m4_17  [color=green, key=2, style=dotted];
m4_229 -> m4_224  [color=blue, key=0, style=bold];
m4_161 -> m4_162  [key=0, style=solid];
m4_162 -> m4_163  [color=green, key=0, style=solid];
m4_162 -> m4_5  [key=2, style=dotted];
m4_163 -> m4_164  [color=green, key=0, style=solid];
m4_163 -> m4_6  [color=green, key=2, style=dotted];
m4_164 -> m4_165  [color=green, key=0, style=solid];
m4_164 -> m4_129  [color=green, key=2, style=dotted];
m4_165 -> m4_161  [color=blue, key=0, style=bold];
m4_29 -> m4_30  [key=0, style=solid];
m4_30 -> m4_31  [color=green, key=0, style=solid];
m4_30 -> m4_39  [key=2, style=dotted];
m4_30 -> m4_33  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_30 -> m4_34  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_30 -> m4_35  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_30 -> m4_36  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_30 -> m4_37  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_31 -> m4_32  [color=green, key=0, style=solid];
m4_31 -> m4_6  [color=green, key=2, style=dotted];
m4_33 -> m4_34  [key=0, style=solid];
m4_33 -> m4_40  [key=2, style=dotted];
m4_34 -> m4_35  [key=0, style=solid];
m4_34 -> m4_40  [key=2, style=dotted];
m4_35 -> m4_36  [key=0, style=solid];
m4_35 -> m4_41  [key=2, style=dotted];
m4_36 -> m4_37  [key=0, style=solid];
m4_36 -> n11  [key=2, style=dotted];
m4_37 -> m4_38  [key=0, style=solid];
m4_37 -> m4_19  [key=2, style=dotted];
m4_32 -> m4_33  [color=green, key=0, style=solid];
m4_32 -> m4_17  [color=green, key=2, style=dotted];
m4_38 -> m4_29  [color=blue, key=0, style=bold];
m4_67 -> m4_68  [key=0, style=solid];
m4_68 -> m4_69  [key=0, style=solid];
m4_68 -> m4_5  [key=2, style=dotted];
m4_68 -> m4_70  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_69 -> m4_70  [key=0, style=solid];
m4_69 -> m4_6  [key=2, style=dotted];
m4_69 -> m4_41  [key=2, style=dotted];
m4_70 -> m4_71  [key=0, style=solid];
m4_70 -> m4_19  [key=2, style=dotted];
m4_71 -> m4_67  [color=blue, key=0, style=bold];
m4_278 -> m4_279  [key=0, style=solid];
m4_279 -> m4_280  [color=green, key=0, style=solid];
m4_279 -> m4_91  [key=2, style=dotted];
m4_280 -> m4_281  [color=green, key=0, style=solid];
m4_280 -> m4_283  [color=green, key=2, style=dotted];
m4_280 -> m4_6  [color=green, key=2, style=dotted];
m4_281 -> m4_282  [color=green, key=0, style=solid];
m4_281 -> m4_129  [color=green, key=2, style=dotted];
m4_282 -> m4_278  [color=blue, key=0, style=bold];
m4_52 -> m4_53  [key=0, style=solid];
m4_53 -> m4_54  [color=green, key=0, style=solid];
m4_53 -> m4_65  [key=2, style=dotted];
m4_53 -> m4_56  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_53 -> m4_57  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_53 -> m4_58  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_53 -> m4_59  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_53 -> m4_60  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_53 -> m4_61  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_53 -> m4_62  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_53 -> m4_63  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_54 -> m4_55  [color=green, key=0, style=solid];
m4_54 -> m4_6  [color=green, key=2, style=dotted];
m4_56 -> m4_57  [key=0, style=solid];
m4_56 -> n11  [key=2, style=dotted];
m4_57 -> m4_58  [key=0, style=solid];
m4_57 -> m4_66  [key=2, style=dotted];
m4_58 -> m4_59  [key=0, style=solid];
m4_58 -> n11  [key=2, style=dotted];
m4_59 -> m4_60  [key=0, style=solid];
m4_59 -> m4_66  [key=2, style=dotted];
m4_60 -> m4_61  [key=0, style=solid];
m4_60 -> n11  [key=2, style=dotted];
m4_61 -> m4_62  [key=0, style=solid];
m4_61 -> m4_66  [key=2, style=dotted];
m4_62 -> m4_63  [key=0, style=solid];
m4_62 -> n11  [key=2, style=dotted];
m4_63 -> m4_64  [key=0, style=solid];
m4_63 -> m4_66  [key=2, style=dotted];
m4_55 -> m4_56  [color=green, key=0, style=solid];
m4_55 -> m4_17  [color=green, key=2, style=dotted];
m4_64 -> m4_52  [color=blue, key=0, style=bold];
m4_191 -> m4_192  [key=0, style=solid];
m4_192 -> m4_193  [color=green, key=0, style=solid];
m4_192 -> m4_91  [key=2, style=dotted];
m4_193 -> m4_194  [color=green, key=0, style=solid];
m4_193 -> m4_6  [color=green, key=2, style=dotted];
m4_194 -> m4_195  [color=green, key=0, style=solid];
m4_194 -> m4_129  [color=green, key=2, style=dotted];
m4_195 -> m4_191  [color=blue, key=0, style=bold];
m4_151 -> m4_152  [key=0, style=solid];
m4_152 -> m4_153  [key=0, style=solid];
m4_152 -> m4_159  [key=2, style=dotted];
m4_152 -> m4_160  [key=2, style=dotted];
m4_152 -> m4_154  [color=green, key=1, label=local, style=dashed];
m4_153 -> m4_154  [color=green, key=0, style=solid];
m4_153 -> m4_144  [key=2, style=dotted];
m4_153 -> m4_156  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_153 -> m4_157  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_154 -> m4_155  [color=green, key=0, style=solid];
m4_154 -> m4_6  [color=green, key=2, style=dotted];
m4_156 -> m4_157  [key=0, style=solid];
m4_156 -> n11  [key=2, style=dotted];
m4_157 -> m4_158  [key=0, style=solid];
m4_157 -> n11  [key=2, style=dotted];
m4_155 -> m4_156  [color=green, key=0, style=solid];
m4_155 -> m4_17  [color=green, key=2, style=dotted];
m4_158 -> m4_151  [color=blue, key=0, style=bold];
m4_218 -> m4_219  [key=0, style=solid];
m4_219 -> m4_220  [color=green, key=0, style=solid];
m4_219 -> m4_91  [key=2, style=dotted];
m4_219 -> m4_222  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_220 -> m4_221  [color=green, key=0, style=solid];
m4_220 -> m4_6  [color=green, key=2, style=dotted];
m4_222 -> m4_223  [key=0, style=solid];
m4_222 -> n11  [key=2, style=dotted];
m4_221 -> m4_222  [color=green, key=0, style=solid];
m4_221 -> m4_17  [color=green, key=2, style=dotted];
m4_223 -> m4_218  [color=blue, key=0, style=bold];
m4_135 -> m4_136  [key=0, style=solid];
m4_136 -> m4_137  [key=0, style=solid];
m4_136 -> m4_143  [key=2, style=dotted];
m4_136 -> m4_138  [color=green, key=1, label=local, style=dashed];
m4_137 -> m4_138  [color=green, key=0, style=solid];
m4_137 -> m4_144  [key=2, style=dotted];
m4_137 -> m4_140  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_137 -> m4_141  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_138 -> m4_139  [color=green, key=0, style=solid];
m4_138 -> m4_6  [color=green, key=2, style=dotted];
m4_140 -> m4_141  [key=0, style=solid];
m4_140 -> n11  [key=2, style=dotted];
m4_141 -> m4_142  [key=0, style=solid];
m4_141 -> n11  [key=2, style=dotted];
m4_139 -> m4_140  [color=green, key=0, style=solid];
m4_139 -> m4_17  [color=green, key=2, style=dotted];
m4_142 -> m4_135  [color=blue, key=0, style=bold];
m4_81 -> m4_82  [key=0, style=solid];
m4_82 -> m4_83  [key=0, style=solid];
m4_82 -> m4_88  [color=darkseagreen4, key=1, label=actualCulture, style=dashed];
m4_83 -> m4_84  [key=0, style=solid];
m4_83 -> m4_90  [key=2, style=dotted];
m4_88 -> m4_89  [key=0, style=solid];
m4_84 -> m4_85  [color=green, key=0, style=solid];
m4_84 -> m4_91  [key=2, style=dotted];
m4_84 -> m4_87  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_85 -> m4_86  [color=green, key=0, style=solid];
m4_85 -> m4_6  [color=green, key=2, style=dotted];
m4_87 -> m4_88  [key=0, style=solid];
m4_87 -> n11  [key=2, style=dotted];
m4_86 -> m4_87  [color=green, key=0, style=solid];
m4_86 -> m4_17  [color=green, key=2, style=dotted];
m4_89 -> m4_81  [color=blue, key=0, style=bold];
m4_130 -> m4_131  [key=0, style=solid];
m4_131 -> m4_132  [color=green, key=0, style=solid];
m4_131 -> m4_5  [key=2, style=dotted];
m4_132 -> m4_133  [color=green, key=0, style=solid];
m4_132 -> m4_6  [color=green, key=2, style=dotted];
m4_133 -> m4_134  [color=green, key=0, style=solid];
m4_133 -> m4_129  [color=green, key=2, style=dotted];
m4_134 -> m4_130  [color=blue, key=0, style=bold];
m4_20 -> m4_21  [key=0, style=solid];
m4_21 -> m4_22  [color=green, key=0, style=solid];
m4_21 -> m4_5  [key=2, style=dotted];
m4_21 -> m4_24  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_21 -> m4_25  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_21 -> m4_26  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_21 -> m4_27  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_22 -> m4_23  [color=green, key=0, style=solid];
m4_22 -> m4_6  [color=green, key=2, style=dotted];
m4_24 -> m4_25  [key=0, style=solid];
m4_24 -> n11  [key=2, style=dotted];
m4_25 -> m4_26  [key=0, style=solid];
m4_25 -> n11  [key=2, style=dotted];
m4_26 -> m4_27  [key=0, style=solid];
m4_26 -> n11  [key=2, style=dotted];
m4_27 -> m4_28  [key=0, style=solid];
m4_27 -> m4_19  [key=2, style=dotted];
m4_23 -> m4_24  [color=green, key=0, style=solid];
m4_23 -> m4_17  [color=green, key=2, style=dotted];
m4_28 -> m4_20  [color=blue, key=0, style=bold];
m4_202 -> m4_203  [key=0, style=solid];
m4_203 -> m4_204  [color=green, key=0, style=solid];
m4_203 -> m4_211  [key=2, style=dotted];
m4_203 -> m4_206  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_203 -> m4_207  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_203 -> m4_208  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_203 -> m4_209  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_204 -> m4_205  [color=green, key=0, style=solid];
m4_204 -> m4_6  [color=green, key=2, style=dotted];
m4_206 -> m4_207  [key=0, style=solid];
m4_206 -> n11  [key=2, style=dotted];
m4_207 -> m4_208  [key=0, style=solid];
m4_207 -> n11  [key=2, style=dotted];
m4_208 -> m4_209  [key=0, style=solid];
m4_208 -> n11  [key=2, style=dotted];
m4_209 -> m4_210  [key=0, style=solid];
m4_209 -> n11  [key=2, style=dotted];
m4_205 -> m4_206  [color=green, key=0, style=solid];
m4_205 -> m4_17  [color=green, key=2, style=dotted];
m4_210 -> m4_202  [color=blue, key=0, style=bold];
m4_145 -> m4_146  [key=0, style=solid];
m4_146 -> m4_147  [key=0, style=solid];
m4_146 -> m4_143  [key=2, style=dotted];
m4_146 -> m4_148  [color=green, key=1, label=local, style=dashed];
m4_147 -> m4_148  [color=green, key=0, style=solid];
m4_147 -> m4_144  [key=2, style=dotted];
m4_148 -> m4_149  [color=green, key=0, style=solid];
m4_148 -> m4_6  [color=green, key=2, style=dotted];
m4_149 -> m4_150  [color=green, key=0, style=solid];
m4_149 -> m4_129  [color=green, key=2, style=dotted];
m4_150 -> m4_145  [color=blue, key=0, style=bold];
m4_2 -> m4_3  [key=0, style=solid];
m4_3 -> m4_4  [key=0, style=solid];
m4_3 -> m4_5  [key=2, style=dotted];
m4_3 -> m4_6  [key=2, style=dotted];
m4_4 -> m4_2  [color=blue, key=0, style=bold];
m4_119 -> m4_120  [key=0, style=solid];
m4_120 -> m4_121  [key=0, style=solid];
m4_120 -> m4_123  [key=2, style=dotted];
m4_121 -> m4_122  [key=0, style=solid];
m4_121 -> m4_6  [key=2, style=dotted];
m4_122 -> m4_119  [color=blue, key=0, style=bold];
m4_196 -> m4_197  [key=0, style=solid];
m4_197 -> m4_198  [color=green, key=0, style=solid];
m4_197 -> m4_5  [key=2, style=dotted];
m4_197 -> m4_200  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_198 -> m4_199  [color=green, key=0, style=solid];
m4_198 -> m4_6  [color=green, key=2, style=dotted];
m4_200 -> m4_201  [key=0, style=solid];
m4_200 -> n11  [key=2, style=dotted];
m4_199 -> m4_200  [color=green, key=0, style=solid];
m4_199 -> m4_17  [color=green, key=2, style=dotted];
m4_201 -> m4_196  [color=blue, key=0, style=bold];
m4_212 -> m4_213  [key=0, style=solid];
m4_213 -> m4_214  [color=green, key=0, style=solid];
m4_213 -> m4_5  [key=2, style=dotted];
m4_213 -> m4_216  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_214 -> m4_215  [color=green, key=0, style=solid];
m4_214 -> m4_6  [color=green, key=2, style=dotted];
m4_216 -> m4_217  [key=0, style=solid];
m4_216 -> n11  [key=2, style=dotted];
m4_215 -> m4_216  [color=green, key=0, style=solid];
m4_215 -> m4_17  [color=green, key=2, style=dotted];
m4_217 -> m4_212  [color=blue, key=0, style=bold];
m4_266 -> m4_267  [key=0, style=solid];
m4_267 -> m4_268  [color=green, key=0, style=solid];
m4_267 -> m4_91  [key=2, style=dotted];
m4_268 -> m4_269  [color=green, key=0, style=solid];
m4_268 -> m4_271  [color=green, key=2, style=dotted];
m4_268 -> m4_6  [color=green, key=2, style=dotted];
m4_269 -> m4_270  [color=green, key=0, style=solid];
m4_269 -> m4_129  [color=green, key=2, style=dotted];
m4_270 -> m4_266  [color=blue, key=0, style=bold];
m4_230 -> m4_231  [key=0, style=solid];
m4_231 -> m4_232  [color=green, key=0, style=solid];
m4_231 -> m4_91  [key=2, style=dotted];
m4_231 -> m4_234  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_232 -> m4_233  [color=green, key=0, style=solid];
m4_232 -> m4_6  [color=green, key=2, style=dotted];
m4_234 -> m4_235  [key=0, style=solid];
m4_234 -> n11  [key=2, style=dotted];
m4_233 -> m4_234  [color=green, key=0, style=solid];
m4_233 -> m4_17  [color=green, key=2, style=dotted];
m4_235 -> m4_230  [color=blue, key=0, style=bold];
m4_42 -> m4_43  [key=0, style=solid];
m4_43 -> m4_44  [color=green, key=0, style=solid];
m4_43 -> m4_39  [key=2, style=dotted];
m4_43 -> m4_46  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_43 -> m4_47  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_43 -> m4_48  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_43 -> m4_49  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_43 -> m4_50  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_44 -> m4_45  [color=green, key=0, style=solid];
m4_44 -> m4_6  [color=green, key=2, style=dotted];
m4_46 -> m4_47  [key=0, style=solid];
m4_46 -> m4_40  [key=2, style=dotted];
m4_47 -> m4_48  [key=0, style=solid];
m4_47 -> m4_41  [key=2, style=dotted];
m4_48 -> m4_49  [key=0, style=solid];
m4_48 -> m4_41  [key=2, style=dotted];
m4_49 -> m4_50  [key=0, style=solid];
m4_49 -> n11  [key=2, style=dotted];
m4_50 -> m4_51  [key=0, style=solid];
m4_50 -> m4_19  [key=2, style=dotted];
m4_45 -> m4_46  [color=green, key=0, style=solid];
m4_45 -> m4_17  [color=green, key=2, style=dotted];
m4_51 -> m4_42  [color=blue, key=0, style=bold];
m4_166 -> m4_167  [key=0, style=solid];
m4_167 -> m4_168  [color=green, key=0, style=solid];
m4_167 -> m4_91  [key=2, style=dotted];
m4_168 -> m4_169  [color=green, key=0, style=solid];
m4_168 -> m4_6  [color=green, key=2, style=dotted];
m4_169 -> m4_170  [color=green, key=0, style=solid];
m4_169 -> m4_129  [color=green, key=2, style=dotted];
m4_170 -> m4_166  [color=blue, key=0, style=bold];
m4_181 -> m4_182  [key=0, style=solid];
m4_182 -> m4_183  [color=green, key=0, style=solid];
m4_182 -> m4_91  [key=2, style=dotted];
m4_183 -> m4_184  [color=green, key=0, style=solid];
m4_183 -> m4_6  [color=green, key=2, style=dotted];
m4_184 -> m4_185  [color=green, key=0, style=solid];
m4_184 -> m4_129  [color=green, key=2, style=dotted];
m4_185 -> m4_181  [color=blue, key=0, style=bold];
m4_236 -> m4_237  [key=0, style=solid];
m4_237 -> m4_238  [color=green, key=0, style=solid];
m4_237 -> m4_91  [key=2, style=dotted];
m4_237 -> m4_240  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_238 -> m4_239  [color=green, key=0, style=solid];
m4_238 -> m4_6  [color=green, key=2, style=dotted];
m4_240 -> m4_241  [key=0, style=solid];
m4_240 -> n11  [key=2, style=dotted];
m4_239 -> m4_240  [color=green, key=0, style=solid];
m4_239 -> m4_17  [color=green, key=2, style=dotted];
m4_241 -> m4_236  [color=blue, key=0, style=bold];
m4_110 -> m4_111  [key=0, style=solid];
m4_111 -> m4_112  [color=green, key=0, style=solid];
m4_111 -> m4_118  [key=2, style=dotted];
m4_111 -> m4_114  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_111 -> m4_115  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_111 -> m4_116  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_112 -> m4_113  [color=green, key=0, style=solid];
m4_112 -> m4_6  [color=green, key=2, style=dotted];
m4_114 -> m4_115  [key=0, style=solid];
m4_114 -> n11  [key=2, style=dotted];
m4_115 -> m4_116  [key=0, style=solid];
m4_115 -> n11  [key=2, style=dotted];
m4_116 -> m4_117  [key=0, style=solid];
m4_116 -> n11  [key=2, style=dotted];
m4_113 -> m4_114  [color=green, key=0, style=solid];
m4_113 -> m4_17  [color=green, key=2, style=dotted];
m4_117 -> m4_110  [color=blue, key=0, style=bold];
m4_272 -> m4_273  [key=0, style=solid];
m4_273 -> m4_274  [color=green, key=0, style=solid];
m4_273 -> m4_91  [key=2, style=dotted];
m4_274 -> m4_275  [color=green, key=0, style=solid];
m4_274 -> m4_277  [color=green, key=2, style=dotted];
m4_274 -> m4_6  [color=green, key=2, style=dotted];
m4_275 -> m4_276  [color=green, key=0, style=solid];
m4_275 -> m4_129  [color=green, key=2, style=dotted];
m4_276 -> m4_272  [color=blue, key=0, style=bold];
m4_92 -> m4_93  [key=0, style=solid];
m4_93 -> m4_94  [key=0, style=solid];
m4_93 -> m4_99  [color=darkseagreen4, key=1, label=actualCulture, style=dashed];
m4_94 -> m4_95  [key=0, style=solid];
m4_94 -> m4_90  [key=2, style=dotted];
m4_99 -> m4_100  [key=0, style=solid];
m4_95 -> m4_96  [color=green, key=0, style=solid];
m4_95 -> m4_91  [key=2, style=dotted];
m4_95 -> m4_98  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_96 -> m4_97  [color=green, key=0, style=solid];
m4_96 -> m4_6  [color=green, key=2, style=dotted];
m4_98 -> m4_99  [key=0, style=solid];
m4_98 -> n11  [key=2, style=dotted];
m4_97 -> m4_98  [color=green, key=0, style=solid];
m4_97 -> m4_17  [color=green, key=2, style=dotted];
m4_100 -> m4_92  [color=blue, key=0, style=bold];
m4_186 -> m4_187  [key=0, style=solid];
m4_187 -> m4_188  [color=green, key=0, style=solid];
m4_187 -> m4_91  [key=2, style=dotted];
m4_188 -> m4_189  [color=green, key=0, style=solid];
m4_188 -> m4_6  [color=green, key=2, style=dotted];
m4_189 -> m4_190  [color=green, key=0, style=solid];
m4_189 -> m4_129  [color=green, key=2, style=dotted];
m4_190 -> m4_186  [color=blue, key=0, style=bold];
m4_101 -> m4_102  [key=0, style=solid];
m4_102 -> m4_103  [color=green, key=0, style=solid];
m4_102 -> m4_109  [key=2, style=dotted];
m4_102 -> m4_105  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_102 -> m4_106  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_102 -> m4_107  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_103 -> m4_104  [color=green, key=0, style=solid];
m4_103 -> m4_6  [color=green, key=2, style=dotted];
m4_105 -> m4_106  [key=0, style=solid];
m4_105 -> n11  [key=2, style=dotted];
m4_106 -> m4_107  [key=0, style=solid];
m4_106 -> n11  [key=2, style=dotted];
m4_107 -> m4_108  [key=0, style=solid];
m4_107 -> n11  [key=2, style=dotted];
m4_104 -> m4_105  [color=green, key=0, style=solid];
m4_104 -> m4_17  [color=green, key=2, style=dotted];
m4_108 -> m4_101  [color=blue, key=0, style=bold];
m4_124 -> m4_125  [key=0, style=solid];
m4_125 -> m4_126  [color=green, key=0, style=solid];
m4_125 -> m4_5  [key=2, style=dotted];
m4_126 -> m4_127  [color=green, key=0, style=solid];
m4_126 -> m4_6  [color=green, key=2, style=dotted];
m4_127 -> m4_128  [color=green, key=0, style=solid];
m4_127 -> m4_129  [color=green, key=2, style=dotted];
m4_128 -> m4_124  [color=blue, key=0, style=bold];
m4_171 -> m4_172  [key=0, style=solid];
m4_172 -> m4_173  [color=green, key=0, style=solid];
m4_172 -> m4_91  [key=2, style=dotted];
m4_173 -> m4_174  [color=green, key=0, style=solid];
m4_173 -> m4_6  [color=green, key=2, style=dotted];
m4_174 -> m4_175  [color=green, key=0, style=solid];
m4_174 -> m4_129  [color=green, key=2, style=dotted];
m4_175 -> m4_171  [color=blue, key=0, style=bold];
m4_290 -> m4_3  [color=darkseagreen4, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_8  [color=darkseagreen4, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_12  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_13  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_22  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_23  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_31  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_32  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_44  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_45  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_54  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_55  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_69  [color=darkseagreen4, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_74  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_75  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_85  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_86  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_96  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_97  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_103  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_104  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_112  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_113  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_121  [color=darkseagreen4, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_126  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_127  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_132  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_133  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_139  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_149  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_155  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_163  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_164  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_168  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_169  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_173  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_174  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_178  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_179  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_183  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_184  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_188  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_189  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_193  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_194  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_198  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_199  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_204  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_205  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_214  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_215  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_220  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_221  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_226  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_227  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_232  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_233  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_238  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_239  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_244  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_245  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_250  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_251  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_256  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_257  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_262  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_263  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_268  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_269  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_274  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_275  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_280  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_281  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_286  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_287  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_138  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_148  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m4_290 -> m4_154  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m6_2 -> m6_3  [key=0, style=solid];
m6_2 -> m6_4  [color=darkseagreen4, key=1, label="int[]", style=dashed];
m6_3 -> m6_4  [key=0, style=solid];
m6_3 -> m6_13  [key=2, style=dotted];
m6_3 -> m6_7  [color=darkseagreen4, key=1, label=yearsPart, style=dashed];
m6_3 -> m6_8  [color=darkseagreen4, key=1, label=yearsPart, style=dashed];
m6_3 -> m6_9  [color=darkseagreen4, key=1, label=yearsPart, style=dashed];
m6_3 -> m6_10  [color=darkseagreen4, key=1, label=yearsPart, style=dashed];
m6_3 -> m6_11  [color=darkseagreen4, key=1, label=yearsPart, style=dashed];
m6_4 -> m6_5  [key=0, style=solid];
m6_4 -> m6_10  [key=0, style=solid];
m6_7 -> m6_9  [key=0, style=solid];
m6_7 -> m6_15  [key=2, style=dotted];
m6_7 -> m6_16  [key=2, style=dotted];
m6_8 -> m6_9  [key=0, style=solid];
m6_8 -> m6_16  [key=2, style=dotted];
m6_9 -> m6_4  [key=0, style=solid];
m6_9 -> m6_16  [key=2, style=dotted];
m6_10 -> m6_11  [key=0, style=solid];
m6_10 -> m6_17  [key=2, style=dotted];
m6_11 -> m6_12  [key=0, style=solid];
m6_11 -> m6_18  [key=2, style=dotted];
m6_5 -> m6_6  [key=0, style=solid];
m6_5 -> m6_14  [key=2, style=dotted];
m6_5 -> m6_7  [color=darkseagreen4, key=1, label=y, style=dashed];
m6_5 -> m6_8  [color=darkseagreen4, key=1, label=y, style=dashed];
m6_6 -> m6_7  [key=0, style=solid];
m6_6 -> m6_8  [key=0, style=solid];
m6_12 -> m6_2  [color=blue, key=0, style=bold];
m6_43 -> m6_44  [key=0, style=solid];
m6_44 -> m6_45  [key=0, style=solid];
m6_44 -> m6_34  [key=2, style=dotted];
m6_45 -> m6_43  [color=blue, key=0, style=bold];
m6_26 -> m6_27  [key=0, style=solid];
m6_27 -> m6_28  [key=0, style=solid];
m6_27 -> m6_23  [key=2, style=dotted];
m6_28 -> m6_29  [key=0, style=solid];
m6_28 -> m6_24  [key=2, style=dotted];
m6_28 -> n11  [key=2, style=dotted];
m6_29 -> m6_26  [color=blue, key=0, style=bold];
m6_0 -> m6_1  [key=0, style=solid];
m6_1 -> m6_0  [color=blue, key=0, style=bold];
m6_46 -> m6_47  [key=0, style=solid];
m6_47 -> m6_48  [key=0, style=solid];
m6_47 -> m6_0  [key=2, style=dotted];
m6_48 -> m6_49  [key=0, style=solid];
m6_48 -> m6_24  [key=2, style=dotted];
m6_48 -> n11  [key=2, style=dotted];
m6_49 -> m6_46  [color=blue, key=0, style=bold];
m6_50 -> m6_51  [color=green, key=0, style=solid];
m6_51 -> m6_52  [color=green, key=0, style=solid];
m6_51 -> m6_42  [color=green, key=2, style=dotted];
m6_51 -> m6_54  [color=green, key=1, label=info, style=dashed];
m6_52 -> m6_52  [color=green, key=3, label="Local variable int i", style=bold];
m6_52 -> m6_53  [color=green, key=0, style=solid];
m6_52 -> m6_55  [color=green, key=1, label=i, style=dashed];
m6_54 -> m6_55  [color=green, key=0, style=solid];
m6_54 -> m6_24  [color=green, key=2, style=dotted];
m6_54 -> n11  [color=green, key=2, style=dotted];
m6_53 -> m6_54  [color=green, key=0, style=solid];
m6_53 -> m6_56  [color=green, key=0, style=solid];
m6_55 -> m6_53  [color=green, key=0, style=solid];
m6_55 -> m6_55  [color=green, key=1, label=i, style=dashed];
m6_56 -> m6_50  [color=blue, key=0, style=bold];
m6_30 -> m6_31  [key=0, style=solid];
m6_31 -> m6_32  [key=0, style=solid];
m6_31 -> m6_34  [key=2, style=dotted];
m6_32 -> m6_33  [key=0, style=solid];
m6_32 -> m6_24  [key=2, style=dotted];
m6_32 -> n11  [key=2, style=dotted];
m6_33 -> m6_30  [color=blue, key=0, style=bold];
m6_35 -> m6_36  [key=0, style=solid];
m6_36 -> m6_37  [key=0, style=solid];
m6_36 -> m6_34  [key=2, style=dotted];
m6_37 -> m6_38  [key=0, style=solid];
m6_37 -> m6_24  [key=2, style=dotted];
m6_37 -> n11  [key=2, style=dotted];
m6_38 -> m6_35  [color=blue, key=0, style=bold];
m6_19 -> m6_20  [key=0, style=solid];
m6_20 -> m6_21  [key=0, style=solid];
m6_20 -> m6_23  [key=2, style=dotted];
m6_21 -> m6_22  [key=0, style=solid];
m6_21 -> m6_24  [key=2, style=dotted];
m6_21 -> n11  [key=2, style=dotted];
m6_22 -> m6_19  [color=blue, key=0, style=bold];
m6_39 -> m6_40  [key=0, style=solid];
m6_40 -> m6_41  [key=0, style=solid];
m6_40 -> m6_42  [key=2, style=dotted];
m6_41 -> m6_39  [color=blue, key=0, style=bold];
m7_29 -> m7_30  [key=0, style=solid];
m7_30 -> m7_31  [key=0, style=solid];
m7_30 -> m7_23  [key=2, style=dotted];
m7_30 -> m7_32  [color=green, key=1, label=options, style=dashed];
m7_31 -> m7_32  [color=green, key=0, style=solid];
m7_31 -> m7_24  [key=2, style=dotted];
m7_31 -> m7_34  [color=darkseagreen4, key=1, label=writer, style=dashed];
m7_32 -> m7_33  [color=green, key=0, style=solid];
m7_32 -> m7_25  [color=green, key=2, style=dotted];
m7_34 -> m7_35  [key=0, style=solid];
m7_34 -> m7_27  [key=2, style=dotted];
m7_34 -> m7_36  [color=darkseagreen4, key=1, label=helpText, style=dashed];
m7_33 -> m7_34  [color=green, key=0, style=solid];
m7_33 -> m7_38  [color=green, key=2, style=dotted];
m7_35 -> m7_36  [key=0, style=solid];
m7_35 -> m7_39  [key=2, style=dotted];
m7_36 -> m7_37  [key=0, style=solid];
m7_36 -> m7_40  [key=2, style=dotted];
m7_37 -> m7_29  [color=blue, key=0, style=bold];
m7_16 -> m7_17  [key=0, style=solid];
m7_17 -> m7_18  [key=0, style=solid];
m7_17 -> m7_23  [key=2, style=dotted];
m7_17 -> m7_19  [color=green, key=1, label=options, style=dashed];
m7_18 -> m7_19  [color=green, key=0, style=solid];
m7_18 -> m7_24  [key=2, style=dotted];
m7_18 -> m7_21  [color=darkseagreen4, key=1, label=writer, style=dashed];
m7_19 -> m7_20  [color=green, key=0, style=solid];
m7_19 -> m7_25  [color=green, key=2, style=dotted];
m7_21 -> m7_22  [key=0, style=solid];
m7_21 -> m7_27  [key=2, style=dotted];
m7_21 -> n11  [key=2, style=dotted];
m7_20 -> m7_21  [color=green, key=0, style=solid];
m7_20 -> m7_26  [color=green, key=2, style=dotted];
m7_22 -> m7_16  [color=blue, key=0, style=bold];
m7_0 -> m7_1  [key=0, style=solid];
m7_1 -> m7_2  [key=0, style=solid];
m7_1 -> m7_11  [key=2, style=dotted];
m7_1 -> m7_12  [key=2, style=dotted];
m7_1 -> m7_3  [color=darkseagreen4, key=1, label=help, style=dashed];
m7_1 -> m7_4  [color=darkseagreen4, key=1, label=help, style=dashed];
m7_1 -> m7_5  [color=darkseagreen4, key=1, label=help, style=dashed];
m7_1 -> m7_6  [color=darkseagreen4, key=1, label=help, style=dashed];
m7_1 -> m7_7  [color=darkseagreen4, key=1, label=help, style=dashed];
m7_1 -> m7_8  [color=darkseagreen4, key=1, label=help, style=dashed];
m7_1 -> m7_9  [color=darkseagreen4, key=1, label=help, style=dashed];
m7_2 -> m7_3  [key=0, style=solid];
m7_2 -> m7_13  [key=2, style=dotted];
m7_3 -> m7_4  [key=0, style=solid];
m7_3 -> m7_14  [key=2, style=dotted];
m7_4 -> m7_5  [key=0, style=solid];
m7_4 -> m7_14  [key=2, style=dotted];
m7_5 -> m7_6  [key=0, style=solid];
m7_5 -> m7_14  [key=2, style=dotted];
m7_6 -> m7_7  [key=0, style=solid];
m7_6 -> m7_14  [key=2, style=dotted];
m7_7 -> m7_8  [key=0, style=solid];
m7_7 -> m7_14  [key=2, style=dotted];
m7_8 -> m7_9  [key=0, style=solid];
m7_8 -> m7_15  [key=2, style=dotted];
m7_9 -> m7_10  [key=0, style=solid];
m7_10 -> m7_0  [color=blue, key=0, style=bold];
m7_41 -> m7_42  [key=0, style=solid];
m7_42 -> m7_43  [key=0, style=solid];
m7_42 -> m7_23  [key=2, style=dotted];
m7_42 -> m7_44  [color=green, key=1, label=options, style=dashed];
m7_43 -> m7_44  [color=green, key=0, style=solid];
m7_43 -> m7_24  [key=2, style=dotted];
m7_43 -> m7_46  [color=darkseagreen4, key=1, label=writer, style=dashed];
m7_44 -> m7_45  [color=green, key=0, style=solid];
m7_44 -> m7_25  [color=green, key=2, style=dotted];
m7_46 -> m7_47  [key=0, style=solid];
m7_46 -> m7_27  [key=2, style=dotted];
m7_45 -> m7_46  [color=green, key=0, style=solid];
m7_45 -> m7_38  [color=green, key=2, style=dotted];
m7_47 -> m7_48  [key=0, style=solid];
m7_47 -> m7_39  [key=2, style=dotted];
m7_48 -> m7_41  [color=blue, key=0, style=bold];
m7_49 -> m7_8  [color=darkseagreen4, key=1, label="CommandLine.Tests.HelpOptionAttributeFixture.MockOptions", style=dashed];
m7_50 -> m7_19  [color=green, key=1, label="CommandLine.Tests.HelpOptionAttributeFixture", style=dashed];
m7_50 -> m7_20  [color=green, key=1, label="CommandLine.Tests.HelpOptionAttributeFixture", style=dashed];
m7_50 -> m7_32  [color=green, key=1, label="CommandLine.Tests.HelpOptionAttributeFixture", style=dashed];
m7_50 -> m7_33  [color=green, key=1, label="CommandLine.Tests.HelpOptionAttributeFixture", style=dashed];
m7_50 -> m7_44  [color=green, key=1, label="CommandLine.Tests.HelpOptionAttributeFixture", style=dashed];
m7_50 -> m7_45  [color=green, key=1, label="CommandLine.Tests.HelpOptionAttributeFixture", style=dashed];
m8_17 -> m8_18  [key=0, style=solid];
m8_18 -> m8_19  [color=red, key=0, style=solid];
m8_18 -> m8_13  [key=2, style=dotted];
m8_19 -> m8_20  [color=red, key=0, style=solid];
m8_19 -> m8_14  [color=red, key=2, style=dotted];
m8_20 -> m8_21  [color=red, key=0, style=solid];
m8_20 -> m8_22  [color=red, key=2, style=dotted];
m8_20 -> m8_1  [color=darkseagreen4, key=1, label="CommandLine.Core.TypeDescriptor", style=dashed];
m8_20 -> m8_2  [color=darkseagreen4, key=1, label="CommandLine.Core.TypeDescriptor", style=dashed];
m8_20 -> m8_3  [color=darkseagreen4, key=1, label="CommandLine.Core.TypeDescriptor", style=dashed];
m8_21 -> m8_17  [color=blue, key=0, style=bold];
m8_6 -> m8_7  [color=green, key=0, style=solid];
m8_6 -> m8_8  [color=green, key=0, style=solid];
m8_7 -> m8_8  [key=0, style=solid];
m8_7 -> m8_9  [color=green, key=0, style=solid];
m8_7 -> m8_10  [color=green, key=2, style=dotted];
m8_8 -> m8_9  [color=green, key=0, style=solid];
m8_8 -> m8_13  [key=2, style=dotted];
m8_8 -> m8_11  [color=darkseagreen4, key=1, label=options, style=dashed];
m8_8 -> m8_0  [color=green, key=2, style=dotted];
m8_9 -> m8_10  [color=red, key=0, style=solid];
m8_9 -> m8_14  [color=red, key=2, style=dotted];
m8_9 -> m8_5  [color=blue, key=0, style=bold];
m8_11 -> m8_12  [key=0, style=solid];
m8_11 -> n11  [key=2, style=dotted];
m8_10 -> m8_11  [color=red, key=0, style=solid];
m8_10 -> m8_15  [color=red, key=2, style=dotted];
m8_12 -> m8_7  [color=blue, key=0, style=bold];
m8_2 -> m8_3  [color=red, key=0, style=solid];
m8_3 -> m8_4  [color=red, key=0, style=solid];
m8_3 -> m8_5  [color=red, key=2, style=dotted];
m8_3 -> m8_6  [color=red, key=2, style=dotted];
m8_4 -> m8_2  [color=blue, key=0, style=bold];
m8_4 -> m8_0  [color=blue, key=0, style=bold];
m8_23 -> m8_24  [key=0, style=solid];
m8_24 -> m8_25  [color=red, key=0, style=solid];
m8_24 -> m8_13  [key=2, style=dotted];
m8_24 -> m8_27  [color=darkseagreen4, key=1, label=options, style=dashed];
m8_24 -> m8_28  [color=darkseagreen4, key=1, label=options, style=dashed];
m8_25 -> m8_26  [color=red, key=0, style=solid];
m8_25 -> m8_14  [color=red, key=2, style=dotted];
m8_27 -> m8_28  [key=0, style=solid];
m8_27 -> n11  [key=2, style=dotted];
m8_28 -> m8_29  [key=0, style=solid];
m8_28 -> n11  [key=2, style=dotted];
m8_26 -> m8_27  [color=red, key=0, style=solid];
m8_26 -> m8_15  [color=red, key=2, style=dotted];
m8_29 -> m8_23  [color=blue, key=0, style=bold];
m8_38 -> m8_39  [key=0, style=solid];
m8_39 -> m8_40  [color=red, key=0, style=solid];
m8_39 -> m8_37  [key=2, style=dotted];
m8_40 -> m8_41  [color=red, key=0, style=solid];
m8_40 -> m8_14  [color=red, key=2, style=dotted];
m8_41 -> m8_42  [color=red, key=0, style=solid];
m8_41 -> m8_22  [color=red, key=2, style=dotted];
m8_42 -> m8_38  [color=blue, key=0, style=bold];
m8_5 -> m8_6  [color=green, key=0, style=solid];
m8_5 -> m8_8  [color=green, key=1, label="CommandLine.Core.TargetType", style=dashed];
m8_43 -> m8_44  [key=0, style=solid];
m8_44 -> m8_45  [color=red, key=0, style=solid];
m8_44 -> m8_48  [key=2, style=dotted];
m8_45 -> m8_46  [color=red, key=0, style=solid];
m8_45 -> m8_14  [color=red, key=2, style=dotted];
m8_46 -> m8_47  [color=red, key=0, style=solid];
m8_46 -> m8_22  [color=red, key=2, style=dotted];
m8_47 -> m8_43  [color=blue, key=0, style=bold];
m8_30 -> m8_31  [key=0, style=solid];
m8_31 -> m8_32  [color=red, key=0, style=solid];
m8_31 -> m8_37  [key=2, style=dotted];
m8_31 -> m8_34  [color=darkseagreen4, key=1, label=options, style=dashed];
m8_31 -> m8_35  [color=darkseagreen4, key=1, label=options, style=dashed];
m8_32 -> m8_33  [color=red, key=0, style=solid];
m8_32 -> m8_14  [color=red, key=2, style=dotted];
m8_34 -> m8_35  [key=0, style=solid];
m8_34 -> n11  [key=2, style=dotted];
m8_35 -> m8_36  [key=0, style=solid];
m8_35 -> n11  [key=2, style=dotted];
m8_33 -> m8_34  [color=red, key=0, style=solid];
m8_33 -> m8_15  [color=red, key=2, style=dotted];
m8_36 -> m8_30  [color=blue, key=0, style=bold];
m8_0 -> m8_1  [key=0, style=solid];
m8_0 -> m8_2  [color=darkseagreen4, key=1, label="CSharpx.Maybe<int>", style=dashed];
m8_0 -> m8_3  [color=darkseagreen4, key=1, label="CSharpx.Maybe<CommandLine.Core.TypeDescriptor>", style=dashed];
m8_1 -> m8_2  [key=0, style=solid];
m8_1 -> m8_0  [color=blue, key=0, style=bold];
m8_49 -> m8_50  [key=0, style=solid];
m8_50 -> m8_51  [color=red, key=0, style=solid];
m8_50 -> m8_48  [key=2, style=dotted];
m8_50 -> m8_53  [color=darkseagreen4, key=1, label=options, style=dashed];
m8_50 -> m8_54  [color=darkseagreen4, key=1, label=options, style=dashed];
m8_50 -> m8_55  [color=darkseagreen4, key=1, label=options, style=dashed];
m8_51 -> m8_52  [color=red, key=0, style=solid];
m8_51 -> m8_14  [color=red, key=2, style=dotted];
m8_53 -> m8_54  [key=0, style=solid];
m8_53 -> n11  [key=2, style=dotted];
m8_54 -> m8_55  [key=0, style=solid];
m8_54 -> n11  [key=2, style=dotted];
m8_55 -> m8_56  [key=0, style=solid];
m8_55 -> n11  [key=2, style=dotted];
m8_52 -> m8_53  [color=red, key=0, style=solid];
m8_52 -> m8_15  [color=red, key=2, style=dotted];
m8_56 -> m8_49  [color=blue, key=0, style=bold];
m8_57 -> m8_9  [color=red, key=1, label="CommandLine.Tests.MutuallyExclusiveParsingFixture", style=dashed];
m8_57 -> m8_10  [color=red, key=1, label="CommandLine.Tests.MutuallyExclusiveParsingFixture", style=dashed];
m8_57 -> m8_19  [color=red, key=1, label="CommandLine.Tests.MutuallyExclusiveParsingFixture", style=dashed];
m8_57 -> m8_20  [color=red, key=1, label="CommandLine.Tests.MutuallyExclusiveParsingFixture", style=dashed];
m8_57 -> m8_25  [color=red, key=1, label="CommandLine.Tests.MutuallyExclusiveParsingFixture", style=dashed];
m8_57 -> m8_26  [color=red, key=1, label="CommandLine.Tests.MutuallyExclusiveParsingFixture", style=dashed];
m8_57 -> m8_32  [color=red, key=1, label="CommandLine.Tests.MutuallyExclusiveParsingFixture", style=dashed];
m8_57 -> m8_33  [color=red, key=1, label="CommandLine.Tests.MutuallyExclusiveParsingFixture", style=dashed];
m8_57 -> m8_40  [color=red, key=1, label="CommandLine.Tests.MutuallyExclusiveParsingFixture", style=dashed];
m8_57 -> m8_41  [color=red, key=1, label="CommandLine.Tests.MutuallyExclusiveParsingFixture", style=dashed];
m8_57 -> m8_45  [color=red, key=1, label="CommandLine.Tests.MutuallyExclusiveParsingFixture", style=dashed];
m8_57 -> m8_46  [color=red, key=1, label="CommandLine.Tests.MutuallyExclusiveParsingFixture", style=dashed];
m8_57 -> m8_51  [color=red, key=1, label="CommandLine.Tests.MutuallyExclusiveParsingFixture", style=dashed];
m8_57 -> m8_52  [color=red, key=1, label="CommandLine.Tests.MutuallyExclusiveParsingFixture", style=dashed];
m9_23 -> m9_24  [key=0, style=solid];
m9_24 -> m9_25  [color=green, key=0, style=solid];
m9_24 -> m9_12  [key=2, style=dotted];
m9_25 -> m9_26  [color=green, key=0, style=solid];
m9_25 -> m9_13  [color=green, key=2, style=dotted];
m9_26 -> m9_27  [color=green, key=0, style=solid];
m9_26 -> m9_22  [color=green, key=2, style=dotted];
m9_27 -> m9_23  [color=blue, key=0, style=bold];
m9_48 -> m9_49  [key=0, style=solid];
m9_49 -> m9_50  [color=green, key=0, style=solid];
m9_49 -> m9_12  [key=2, style=dotted];
m9_49 -> m9_52  [color=darkseagreen4, key=1, label=options, style=dashed];
m9_50 -> m9_51  [color=green, key=0, style=solid];
m9_50 -> m9_13  [color=green, key=2, style=dotted];
m9_52 -> m9_53  [key=0, style=solid];
m9_52 -> n11  [key=2, style=dotted];
m9_51 -> m9_52  [color=green, key=0, style=solid];
m9_51 -> m9_14  [color=green, key=2, style=dotted];
m9_53 -> m9_54  [color=green, key=0, style=solid];
m9_53 -> m9_12  [key=2, style=dotted];
m9_53 -> m9_56  [color=darkseagreen4, key=1, label=options, style=dashed];
m9_54 -> m9_55  [color=green, key=0, style=solid];
m9_54 -> m9_13  [color=green, key=2, style=dotted];
m9_56 -> m9_57  [key=0, style=solid];
m9_56 -> m9_16  [key=2, style=dotted];
m9_55 -> m9_56  [color=green, key=0, style=solid];
m9_55 -> m9_14  [color=green, key=2, style=dotted];
m9_57 -> m9_48  [color=blue, key=0, style=bold];
m9_28 -> m9_29  [key=0, style=solid];
m9_29 -> m9_30  [color=green, key=0, style=solid];
m9_29 -> m9_12  [key=2, style=dotted];
m9_29 -> m9_32  [color=darkseagreen4, key=1, label=options, style=dashed];
m9_30 -> m9_31  [color=green, key=0, style=solid];
m9_30 -> m9_13  [color=green, key=2, style=dotted];
m9_32 -> m9_33  [key=0, style=solid];
m9_32 -> n11  [key=2, style=dotted];
m9_31 -> m9_32  [color=green, key=0, style=solid];
m9_31 -> m9_14  [color=green, key=2, style=dotted];
m9_33 -> m9_34  [color=green, key=0, style=solid];
m9_33 -> m9_12  [key=2, style=dotted];
m9_33 -> m9_36  [color=darkseagreen4, key=1, label=options, style=dashed];
m9_34 -> m9_35  [color=green, key=0, style=solid];
m9_34 -> m9_13  [color=green, key=2, style=dotted];
m9_36 -> m9_37  [key=0, style=solid];
m9_36 -> m9_16  [key=2, style=dotted];
m9_35 -> m9_36  [color=green, key=0, style=solid];
m9_35 -> m9_14  [color=green, key=2, style=dotted];
m9_37 -> m9_28  [color=blue, key=0, style=bold];
m9_38 -> m9_39  [key=0, style=solid];
m9_39 -> m9_40  [color=green, key=0, style=solid];
m9_39 -> m9_12  [key=2, style=dotted];
m9_40 -> m9_41  [color=green, key=0, style=solid];
m9_40 -> m9_13  [color=green, key=2, style=dotted];
m9_41 -> m9_42  [color=green, key=0, style=solid];
m9_41 -> m9_22  [color=green, key=2, style=dotted];
m9_42 -> m9_38  [color=blue, key=0, style=bold];
m9_2 -> m9_3  [key=0, style=solid];
m9_3 -> m9_4  [color=green, key=0, style=solid];
m9_3 -> m9_12  [key=2, style=dotted];
m9_3 -> m9_6  [color=darkseagreen4, key=1, label=options, style=dashed];
m9_4 -> m9_5  [color=green, key=0, style=solid];
m9_4 -> m9_13  [color=green, key=2, style=dotted];
m9_6 -> m9_7  [key=0, style=solid];
m9_6 -> n11  [key=2, style=dotted];
m9_5 -> m9_6  [color=green, key=0, style=solid];
m9_5 -> m9_14  [color=green, key=2, style=dotted];
m9_7 -> m9_8  [color=green, key=0, style=solid];
m9_7 -> m9_12  [key=2, style=dotted];
m9_7 -> m9_10  [color=darkseagreen4, key=1, label=options, style=dashed];
m9_8 -> m9_9  [color=green, key=0, style=solid];
m9_8 -> m9_13  [color=green, key=2, style=dotted];
m9_10 -> m9_11  [key=0, style=solid];
m9_10 -> m9_16  [key=2, style=dotted];
m9_9 -> m9_10  [color=green, key=0, style=solid];
m9_9 -> m9_14  [color=green, key=2, style=dotted];
m9_11 -> m9_2  [color=blue, key=0, style=bold];
m9_63 -> m9_64  [key=0, style=solid];
m9_64 -> m9_65  [color=green, key=0, style=solid];
m9_64 -> m9_12  [key=2, style=dotted];
m9_65 -> m9_66  [color=green, key=0, style=solid];
m9_65 -> m9_13  [color=green, key=2, style=dotted];
m9_66 -> m9_67  [color=green, key=0, style=solid];
m9_66 -> m9_22  [color=green, key=2, style=dotted];
m9_67 -> m9_63  [color=blue, key=0, style=bold];
m9_0 -> m9_1  [key=0, style=solid];
m9_1 -> m9_0  [color=blue, key=0, style=bold];
m9_17 -> m9_18  [key=0, style=solid];
m9_18 -> m9_19  [color=green, key=0, style=solid];
m9_18 -> m9_12  [key=2, style=dotted];
m9_19 -> m9_20  [color=green, key=0, style=solid];
m9_19 -> m9_13  [color=green, key=2, style=dotted];
m9_20 -> m9_21  [color=green, key=0, style=solid];
m9_20 -> m9_22  [color=green, key=2, style=dotted];
m9_21 -> m9_17  [color=blue, key=0, style=bold];
m9_43 -> m9_44  [key=0, style=solid];
m9_44 -> m9_45  [color=green, key=0, style=solid];
m9_44 -> m9_12  [key=2, style=dotted];
m9_45 -> m9_46  [color=green, key=0, style=solid];
m9_45 -> m9_13  [color=green, key=2, style=dotted];
m9_46 -> m9_47  [color=green, key=0, style=solid];
m9_46 -> m9_22  [color=green, key=2, style=dotted];
m9_47 -> m9_43  [color=blue, key=0, style=bold];
m9_58 -> m9_59  [key=0, style=solid];
m9_59 -> m9_60  [color=green, key=0, style=solid];
m9_59 -> m9_12  [key=2, style=dotted];
m9_60 -> m9_61  [color=green, key=0, style=solid];
m9_60 -> m9_13  [color=green, key=2, style=dotted];
m9_61 -> m9_62  [color=green, key=0, style=solid];
m9_61 -> m9_22  [color=green, key=2, style=dotted];
m9_62 -> m9_58  [color=blue, key=0, style=bold];
m9_68 -> m9_69  [key=0, style=solid];
m9_69 -> m9_70  [color=green, key=0, style=solid];
m9_69 -> m9_12  [key=2, style=dotted];
m9_69 -> m9_72  [color=darkseagreen4, key=1, label=options, style=dashed];
m9_70 -> m9_71  [color=green, key=0, style=solid];
m9_70 -> m9_13  [color=green, key=2, style=dotted];
m9_72 -> m9_73  [key=0, style=solid];
m9_72 -> n11  [key=2, style=dotted];
m9_71 -> m9_72  [color=green, key=0, style=solid];
m9_71 -> m9_14  [color=green, key=2, style=dotted];
m9_73 -> m9_74  [color=green, key=0, style=solid];
m9_73 -> m9_12  [key=2, style=dotted];
m9_73 -> m9_76  [color=darkseagreen4, key=1, label=options, style=dashed];
m9_73 -> m9_77  [color=darkseagreen4, key=1, label=options, style=dashed];
m9_73 -> m9_78  [color=darkseagreen4, key=1, label=options, style=dashed];
m9_73 -> m9_79  [color=darkseagreen4, key=1, label=options, style=dashed];
m9_74 -> m9_75  [color=green, key=0, style=solid];
m9_74 -> m9_13  [color=green, key=2, style=dotted];
m9_76 -> m9_77  [key=0, style=solid];
m9_76 -> n11  [key=2, style=dotted];
m9_77 -> m9_78  [key=0, style=solid];
m9_77 -> n11  [key=2, style=dotted];
m9_78 -> m9_79  [key=0, style=solid];
m9_78 -> n11  [key=2, style=dotted];
m9_79 -> m9_80  [key=0, style=solid];
m9_79 -> n11  [key=2, style=dotted];
m9_75 -> m9_76  [color=green, key=0, style=solid];
m9_75 -> m9_14  [color=green, key=2, style=dotted];
m9_80 -> m9_68  [color=blue, key=0, style=bold];
m9_81 -> m9_4  [color=green, key=1, label="CommandLine.Tests.NullableTypesParsingFixture", style=dashed];
m9_81 -> m9_5  [color=green, key=1, label="CommandLine.Tests.NullableTypesParsingFixture", style=dashed];
m9_81 -> m9_8  [color=green, key=1, label="CommandLine.Tests.NullableTypesParsingFixture", style=dashed];
m9_81 -> m9_9  [color=green, key=1, label="CommandLine.Tests.NullableTypesParsingFixture", style=dashed];
m9_81 -> m9_19  [color=green, key=1, label="CommandLine.Tests.NullableTypesParsingFixture", style=dashed];
m9_81 -> m9_20  [color=green, key=1, label="CommandLine.Tests.NullableTypesParsingFixture", style=dashed];
m9_81 -> m9_25  [color=green, key=1, label="CommandLine.Tests.NullableTypesParsingFixture", style=dashed];
m9_81 -> m9_26  [color=green, key=1, label="CommandLine.Tests.NullableTypesParsingFixture", style=dashed];
m9_81 -> m9_30  [color=green, key=1, label="CommandLine.Tests.NullableTypesParsingFixture", style=dashed];
m9_81 -> m9_31  [color=green, key=1, label="CommandLine.Tests.NullableTypesParsingFixture", style=dashed];
m9_81 -> m9_34  [color=green, key=1, label="CommandLine.Tests.NullableTypesParsingFixture", style=dashed];
m9_81 -> m9_35  [color=green, key=1, label="CommandLine.Tests.NullableTypesParsingFixture", style=dashed];
m9_81 -> m9_40  [color=green, key=1, label="CommandLine.Tests.NullableTypesParsingFixture", style=dashed];
m9_81 -> m9_41  [color=green, key=1, label="CommandLine.Tests.NullableTypesParsingFixture", style=dashed];
m9_81 -> m9_45  [color=green, key=1, label="CommandLine.Tests.NullableTypesParsingFixture", style=dashed];
m9_81 -> m9_46  [color=green, key=1, label="CommandLine.Tests.NullableTypesParsingFixture", style=dashed];
m9_81 -> m9_50  [color=green, key=1, label="CommandLine.Tests.NullableTypesParsingFixture", style=dashed];
m9_81 -> m9_51  [color=green, key=1, label="CommandLine.Tests.NullableTypesParsingFixture", style=dashed];
m9_81 -> m9_54  [color=green, key=1, label="CommandLine.Tests.NullableTypesParsingFixture", style=dashed];
m9_81 -> m9_55  [color=green, key=1, label="CommandLine.Tests.NullableTypesParsingFixture", style=dashed];
m9_81 -> m9_60  [color=green, key=1, label="CommandLine.Tests.NullableTypesParsingFixture", style=dashed];
m9_81 -> m9_61  [color=green, key=1, label="CommandLine.Tests.NullableTypesParsingFixture", style=dashed];
m9_81 -> m9_65  [color=green, key=1, label="CommandLine.Tests.NullableTypesParsingFixture", style=dashed];
m9_81 -> m9_66  [color=green, key=1, label="CommandLine.Tests.NullableTypesParsingFixture", style=dashed];
m9_81 -> m9_70  [color=green, key=1, label="CommandLine.Tests.NullableTypesParsingFixture", style=dashed];
m9_81 -> m9_71  [color=green, key=1, label="CommandLine.Tests.NullableTypesParsingFixture", style=dashed];
m9_81 -> m9_74  [color=green, key=1, label="CommandLine.Tests.NullableTypesParsingFixture", style=dashed];
m9_81 -> m9_75  [color=green, key=1, label="CommandLine.Tests.NullableTypesParsingFixture", style=dashed];
m10_12 -> m10_13  [key=0, style=solid];
m10_13 -> m10_14  [color=red, key=0, style=solid];
m10_13 -> m10_8  [key=2, style=dotted];
m10_13 -> m10_16  [color=red, key=1, label=options, style=dashed];
m10_14 -> m10_15  [color=red, key=0, style=solid];
m10_14 -> m10_9  [color=red, key=2, style=dotted];
m10_16 -> m10_17  [color=red, key=0, style=solid];
m10_16 -> m10_11  [color=red, key=2, style=dotted];
m10_15 -> m10_16  [color=red, key=0, style=solid];
m10_15 -> m10_10  [color=red, key=2, style=dotted];
m10_17 -> m10_12  [color=blue, key=0, style=bold];
m10_55 -> m10_56  [key=0, style=solid];
m10_56 -> m10_57  [color=red, key=0, style=solid];
m10_56 -> m10_65  [key=2, style=dotted];
m10_56 -> m10_59  [color=darkseagreen4, key=1, label=options, style=dashed];
m10_56 -> m10_60  [color=darkseagreen4, key=1, label=options, style=dashed];
m10_56 -> m10_61  [color=red, key=1, label=options, style=dashed];
m10_56 -> m10_62  [color=darkseagreen4, key=1, label=options, style=dashed];
m10_56 -> m10_63  [color=red, key=1, label=options, style=dashed];
m10_57 -> m10_58  [color=red, key=0, style=solid];
m10_57 -> m10_9  [color=red, key=2, style=dotted];
m10_59 -> m10_60  [key=0, style=solid];
m10_59 -> n11  [key=2, style=dotted];
m10_60 -> m10_61  [color=red, key=0, style=solid];
m10_60 -> n11  [key=2, style=dotted];
m10_61 -> m10_62  [color=red, key=0, style=solid];
m10_61 -> m10_11  [color=red, key=2, style=dotted];
m10_62 -> m10_63  [color=red, key=0, style=solid];
m10_62 -> m10_54  [key=2, style=dotted];
m10_63 -> m10_64  [color=red, key=0, style=solid];
m10_63 -> m10_66  [color=red, key=2, style=dotted];
m10_58 -> m10_59  [color=red, key=0, style=solid];
m10_58 -> m10_10  [color=red, key=2, style=dotted];
m10_64 -> m10_55  [color=blue, key=0, style=bold];
m10_82 -> m10_83  [key=0, style=solid];
m10_83 -> m10_84  [color=red, key=0, style=solid];
m10_83 -> m10_8  [key=2, style=dotted];
m10_84 -> m10_85  [color=red, key=0, style=solid];
m10_84 -> m10_9  [color=red, key=2, style=dotted];
m10_85 -> m10_86  [color=red, key=0, style=solid];
m10_85 -> m10_75  [color=red, key=2, style=dotted];
m10_86 -> m10_87  [color=red, key=0, style=solid];
m10_86 -> m10_8  [key=2, style=dotted];
m10_87 -> m10_88  [color=red, key=0, style=solid];
m10_87 -> m10_9  [color=red, key=2, style=dotted];
m10_88 -> m10_89  [color=red, key=0, style=solid];
m10_88 -> m10_75  [color=red, key=2, style=dotted];
m10_89 -> m10_90  [color=red, key=0, style=solid];
m10_89 -> m10_8  [key=2, style=dotted];
m10_90 -> m10_91  [color=red, key=0, style=solid];
m10_90 -> m10_9  [color=red, key=2, style=dotted];
m10_91 -> m10_92  [color=red, key=0, style=solid];
m10_91 -> m10_75  [color=red, key=2, style=dotted];
m10_92 -> m10_93  [color=red, key=0, style=solid];
m10_92 -> m10_8  [key=2, style=dotted];
m10_93 -> m10_94  [color=red, key=0, style=solid];
m10_93 -> m10_9  [color=red, key=2, style=dotted];
m10_94 -> m10_95  [color=red, key=0, style=solid];
m10_94 -> m10_75  [color=red, key=2, style=dotted];
m10_95 -> m10_82  [color=blue, key=0, style=bold];
m10_18 -> m10_19  [key=0, style=solid];
m10_19 -> m10_20  [color=red, key=0, style=solid];
m10_19 -> m10_8  [key=2, style=dotted];
m10_19 -> m10_22  [color=red, key=1, label=options, style=dashed];
m10_20 -> m10_21  [color=red, key=0, style=solid];
m10_20 -> m10_9  [color=red, key=2, style=dotted];
m10_22 -> m10_23  [color=red, key=0, style=solid];
m10_22 -> m10_11  [color=red, key=2, style=dotted];
m10_21 -> m10_22  [color=red, key=0, style=solid];
m10_21 -> m10_10  [color=red, key=2, style=dotted];
m10_23 -> m10_18  [color=blue, key=0, style=bold];
m10_96 -> m10_97  [key=0, style=solid];
m10_97 -> m10_98  [color=red, key=0, style=solid];
m10_97 -> m10_8  [key=2, style=dotted];
m10_98 -> m10_99  [color=red, key=0, style=solid];
m10_98 -> m10_9  [color=red, key=2, style=dotted];
m10_99 -> m10_100  [color=red, key=0, style=solid];
m10_99 -> m10_75  [color=red, key=2, style=dotted];
m10_100 -> m10_101  [color=red, key=0, style=solid];
m10_100 -> m10_8  [key=2, style=dotted];
m10_101 -> m10_102  [color=red, key=0, style=solid];
m10_101 -> m10_9  [color=red, key=2, style=dotted];
m10_102 -> m10_103  [color=red, key=0, style=solid];
m10_102 -> m10_75  [color=red, key=2, style=dotted];
m10_103 -> m10_96  [color=blue, key=0, style=bold];
m10_169 -> m10_170  [key=0, style=solid];
m10_170 -> m10_171  [key=0, style=solid];
m10_170 -> m10_165  [key=2, style=dotted];
m10_170 -> m10_9  [key=2, style=dotted];
m10_171 -> m10_169  [color=blue, key=0, style=bold];
m10_45 -> m10_46  [key=0, style=solid];
m10_46 -> m10_47  [color=red, key=0, style=solid];
m10_46 -> m10_8  [key=2, style=dotted];
m10_46 -> m10_49  [color=darkseagreen4, key=1, label=options, style=dashed];
m10_46 -> m10_50  [color=red, key=1, label=options, style=dashed];
m10_46 -> m10_51  [color=darkseagreen4, key=1, label=options, style=dashed];
m10_46 -> m10_52  [color=darkseagreen4, key=1, label=options, style=dashed];
m10_47 -> m10_48  [color=red, key=0, style=solid];
m10_47 -> m10_9  [color=red, key=2, style=dotted];
m10_49 -> m10_50  [color=red, key=0, style=solid];
m10_49 -> n11  [key=2, style=dotted];
m10_50 -> m10_51  [color=red, key=0, style=solid];
m10_50 -> m10_11  [color=red, key=2, style=dotted];
m10_51 -> m10_52  [key=0, style=solid];
m10_51 -> m10_54  [key=2, style=dotted];
m10_52 -> m10_53  [key=0, style=solid];
m10_52 -> n11  [key=2, style=dotted];
m10_48 -> m10_49  [color=red, key=0, style=solid];
m10_48 -> m10_10  [color=red, key=2, style=dotted];
m10_53 -> m10_45  [color=blue, key=0, style=bold];
m10_162 -> m10_163  [key=0, style=solid];
m10_163 -> m10_164  [key=0, style=solid];
m10_163 -> m10_165  [key=2, style=dotted];
m10_163 -> m10_9  [key=2, style=dotted];
m10_164 -> m10_162  [color=blue, key=0, style=bold];
m10_24 -> m10_25  [key=0, style=solid];
m10_25 -> m10_26  [color=red, key=0, style=solid];
m10_25 -> m10_8  [key=2, style=dotted];
m10_25 -> m10_28  [color=red, key=1, label=options, style=dashed];
m10_26 -> m10_27  [color=red, key=0, style=solid];
m10_26 -> m10_9  [color=red, key=2, style=dotted];
m10_28 -> m10_29  [color=red, key=0, style=solid];
m10_28 -> m10_11  [color=red, key=2, style=dotted];
m10_27 -> m10_28  [color=red, key=0, style=solid];
m10_27 -> m10_10  [color=red, key=2, style=dotted];
m10_29 -> m10_24  [color=blue, key=0, style=bold];
m10_130 -> m10_131  [key=0, style=solid];
m10_131 -> m10_132  [color=red, key=0, style=solid];
m10_131 -> m10_8  [key=2, style=dotted];
m10_131 -> m10_134  [color=red, key=1, label=options, style=dashed];
m10_131 -> m10_135  [color=red, key=1, label=options, style=dashed];
m10_131 -> m10_136  [color=red, key=1, label=options, style=dashed];
m10_131 -> m10_137  [color=darkseagreen4, key=1, label=options, style=dashed];
m10_132 -> m10_133  [color=red, key=0, style=solid];
m10_132 -> m10_9  [color=red, key=2, style=dotted];
m10_134 -> m10_135  [color=red, key=0, style=solid];
m10_134 -> m10_11  [color=red, key=2, style=dotted];
m10_135 -> m10_136  [color=red, key=0, style=solid];
m10_135 -> m10_11  [color=red, key=2, style=dotted];
m10_136 -> m10_137  [color=red, key=0, style=solid];
m10_136 -> m10_11  [color=red, key=2, style=dotted];
m10_137 -> m10_138  [key=0, style=solid];
m10_137 -> n11  [key=2, style=dotted];
m10_133 -> m10_134  [color=red, key=0, style=solid];
m10_133 -> m10_10  [color=red, key=2, style=dotted];
m10_138 -> m10_139  [color=red, key=0, style=solid];
m10_138 -> m10_8  [key=2, style=dotted];
m10_138 -> m10_141  [color=darkseagreen4, key=1, label=options, style=dashed];
m10_138 -> m10_142  [color=red, key=1, label=options, style=dashed];
m10_138 -> m10_143  [color=red, key=1, label=options, style=dashed];
m10_138 -> m10_144  [color=red, key=1, label=options, style=dashed];
m10_139 -> m10_140  [color=red, key=0, style=solid];
m10_139 -> m10_9  [color=red, key=2, style=dotted];
m10_141 -> m10_142  [color=red, key=0, style=solid];
m10_141 -> n11  [key=2, style=dotted];
m10_142 -> m10_143  [color=red, key=0, style=solid];
m10_142 -> m10_11  [color=red, key=2, style=dotted];
m10_143 -> m10_144  [color=red, key=0, style=solid];
m10_143 -> m10_11  [color=red, key=2, style=dotted];
m10_144 -> m10_145  [color=red, key=0, style=solid];
m10_144 -> m10_11  [color=red, key=2, style=dotted];
m10_140 -> m10_141  [color=red, key=0, style=solid];
m10_140 -> m10_10  [color=red, key=2, style=dotted];
m10_145 -> m10_146  [color=red, key=0, style=solid];
m10_145 -> m10_8  [key=2, style=dotted];
m10_145 -> m10_148  [color=red, key=1, label=options, style=dashed];
m10_145 -> m10_149  [color=red, key=1, label=options, style=dashed];
m10_145 -> m10_150  [color=darkseagreen4, key=1, label=options, style=dashed];
m10_145 -> m10_151  [color=red, key=1, label=options, style=dashed];
m10_146 -> m10_147  [color=red, key=0, style=solid];
m10_146 -> m10_9  [color=red, key=2, style=dotted];
m10_148 -> m10_149  [color=red, key=0, style=solid];
m10_148 -> m10_11  [color=red, key=2, style=dotted];
m10_149 -> m10_150  [color=red, key=0, style=solid];
m10_149 -> m10_11  [color=red, key=2, style=dotted];
m10_150 -> m10_151  [color=red, key=0, style=solid];
m10_150 -> n11  [key=2, style=dotted];
m10_151 -> m10_152  [color=red, key=0, style=solid];
m10_151 -> m10_11  [color=red, key=2, style=dotted];
m10_147 -> m10_148  [color=red, key=0, style=solid];
m10_147 -> m10_10  [color=red, key=2, style=dotted];
m10_152 -> m10_153  [color=red, key=0, style=solid];
m10_152 -> m10_8  [key=2, style=dotted];
m10_152 -> m10_155  [color=darkseagreen4, key=1, label=options, style=dashed];
m10_152 -> m10_156  [color=red, key=1, label=options, style=dashed];
m10_152 -> m10_157  [color=red, key=1, label=options, style=dashed];
m10_152 -> m10_158  [color=darkseagreen4, key=1, label=options, style=dashed];
m10_152 -> m10_159  [color=red, key=1, label=options, style=dashed];
m10_152 -> m10_160  [color=darkseagreen4, key=1, label=options, style=dashed];
m10_153 -> m10_154  [color=red, key=0, style=solid];
m10_153 -> m10_9  [color=red, key=2, style=dotted];
m10_155 -> m10_156  [color=red, key=0, style=solid];
m10_155 -> m10_54  [key=2, style=dotted];
m10_156 -> m10_157  [color=red, key=0, style=solid];
m10_156 -> m10_11  [color=red, key=2, style=dotted];
m10_157 -> m10_158  [color=red, key=0, style=solid];
m10_157 -> m10_11  [color=red, key=2, style=dotted];
m10_158 -> m10_159  [color=red, key=0, style=solid];
m10_158 -> n11  [key=2, style=dotted];
m10_159 -> m10_160  [color=red, key=0, style=solid];
m10_159 -> m10_11  [color=red, key=2, style=dotted];
m10_160 -> m10_161  [key=0, style=solid];
m10_160 -> n11  [key=2, style=dotted];
m10_154 -> m10_155  [color=red, key=0, style=solid];
m10_154 -> m10_10  [color=red, key=2, style=dotted];
m10_161 -> m10_130  [color=blue, key=0, style=bold];
m10_2 -> m10_3  [key=0, style=solid];
m10_3 -> m10_4  [color=red, key=0, style=solid];
m10_3 -> m10_8  [key=2, style=dotted];
m10_3 -> m10_6  [color=red, key=1, label=options, style=dashed];
m10_4 -> m10_5  [color=red, key=0, style=solid];
m10_4 -> m10_9  [color=red, key=2, style=dotted];
m10_6 -> m10_7  [color=red, key=0, style=solid];
m10_6 -> m10_11  [color=red, key=2, style=dotted];
m10_5 -> m10_6  [color=red, key=0, style=solid];
m10_5 -> m10_10  [color=red, key=2, style=dotted];
m10_7 -> m10_2  [color=blue, key=0, style=bold];
m10_195 -> m10_196  [key=0, style=solid];
m10_196 -> m10_197  [color=red, key=0, style=solid];
m10_196 -> m10_194  [key=2, style=dotted];
m10_196 -> m10_199  [color=darkseagreen4, key=1, label=options, style=dashed];
m10_196 -> m10_200  [color=red, key=1, label=options, style=dashed];
m10_196 -> m10_201  [color=red, key=1, label=options, style=dashed];
m10_196 -> m10_202  [color=darkseagreen4, key=1, label=options, style=dashed];
m10_197 -> m10_198  [color=red, key=0, style=solid];
m10_197 -> m10_9  [color=red, key=2, style=dotted];
m10_199 -> m10_200  [color=red, key=0, style=solid];
m10_199 -> n11  [key=2, style=dotted];
m10_200 -> m10_201  [color=red, key=0, style=solid];
m10_200 -> m10_11  [color=red, key=2, style=dotted];
m10_201 -> m10_202  [color=red, key=0, style=solid];
m10_201 -> m10_11  [color=red, key=2, style=dotted];
m10_202 -> m10_203  [key=0, style=solid];
m10_202 -> n11  [key=2, style=dotted];
m10_198 -> m10_199  [color=red, key=0, style=solid];
m10_198 -> m10_10  [color=red, key=2, style=dotted];
m10_203 -> m10_195  [color=blue, key=0, style=bold];
m10_38 -> m10_39  [key=0, style=solid];
m10_39 -> m10_40  [color=red, key=0, style=solid];
m10_39 -> m10_8  [key=2, style=dotted];
m10_39 -> m10_42  [color=darkseagreen4, key=1, label=options, style=dashed];
m10_39 -> m10_43  [color=red, key=1, label=options, style=dashed];
m10_40 -> m10_41  [color=red, key=0, style=solid];
m10_40 -> m10_9  [color=red, key=2, style=dotted];
m10_42 -> m10_43  [color=red, key=0, style=solid];
m10_42 -> n11  [key=2, style=dotted];
m10_43 -> m10_44  [color=red, key=0, style=solid];
m10_43 -> m10_11  [color=red, key=2, style=dotted];
m10_41 -> m10_42  [color=red, key=0, style=solid];
m10_41 -> m10_10  [color=red, key=2, style=dotted];
m10_44 -> m10_38  [color=blue, key=0, style=bold];
m10_185 -> m10_186  [key=0, style=solid];
m10_186 -> m10_187  [color=red, key=0, style=solid];
m10_186 -> m10_194  [key=2, style=dotted];
m10_186 -> m10_189  [color=darkseagreen4, key=1, label=options, style=dashed];
m10_186 -> m10_190  [color=red, key=1, label=options, style=dashed];
m10_186 -> m10_191  [color=red, key=1, label=options, style=dashed];
m10_186 -> m10_192  [color=darkseagreen4, key=1, label=options, style=dashed];
m10_187 -> m10_188  [color=red, key=0, style=solid];
m10_187 -> m10_9  [color=red, key=2, style=dotted];
m10_189 -> m10_190  [color=red, key=0, style=solid];
m10_189 -> n11  [key=2, style=dotted];
m10_190 -> m10_191  [color=red, key=0, style=solid];
m10_190 -> m10_11  [color=red, key=2, style=dotted];
m10_191 -> m10_192  [color=red, key=0, style=solid];
m10_191 -> m10_11  [color=red, key=2, style=dotted];
m10_192 -> m10_193  [key=0, style=solid];
m10_192 -> n11  [key=2, style=dotted];
m10_188 -> m10_189  [color=red, key=0, style=solid];
m10_188 -> m10_10  [color=red, key=2, style=dotted];
m10_193 -> m10_185  [color=blue, key=0, style=bold];
m10_110 -> m10_111  [key=0, style=solid];
m10_111 -> m10_112  [color=red, key=0, style=solid];
m10_111 -> m10_8  [key=2, style=dotted];
m10_111 -> m10_114  [color=red, key=1, label=options, style=dashed];
m10_111 -> m10_115  [color=red, key=1, label=options, style=dashed];
m10_111 -> m10_116  [color=red, key=1, label=options, style=dashed];
m10_112 -> m10_113  [color=red, key=0, style=solid];
m10_112 -> m10_9  [color=red, key=2, style=dotted];
m10_114 -> m10_115  [color=red, key=0, style=solid];
m10_114 -> m10_11  [color=red, key=2, style=dotted];
m10_115 -> m10_116  [color=red, key=0, style=solid];
m10_115 -> m10_11  [color=red, key=2, style=dotted];
m10_116 -> m10_117  [color=red, key=0, style=solid];
m10_116 -> m10_11  [color=red, key=2, style=dotted];
m10_113 -> m10_114  [color=red, key=0, style=solid];
m10_113 -> m10_10  [color=red, key=2, style=dotted];
m10_117 -> m10_118  [color=red, key=0, style=solid];
m10_117 -> m10_8  [key=2, style=dotted];
m10_117 -> m10_120  [color=red, key=1, label=options, style=dashed];
m10_117 -> m10_121  [color=red, key=1, label=options, style=dashed];
m10_117 -> m10_122  [color=red, key=1, label=options, style=dashed];
m10_118 -> m10_119  [color=red, key=0, style=solid];
m10_118 -> m10_9  [color=red, key=2, style=dotted];
m10_120 -> m10_121  [color=red, key=0, style=solid];
m10_120 -> m10_11  [color=red, key=2, style=dotted];
m10_121 -> m10_122  [color=red, key=0, style=solid];
m10_121 -> m10_11  [color=red, key=2, style=dotted];
m10_122 -> m10_123  [color=red, key=0, style=solid];
m10_122 -> m10_11  [color=red, key=2, style=dotted];
m10_119 -> m10_120  [color=red, key=0, style=solid];
m10_119 -> m10_10  [color=red, key=2, style=dotted];
m10_123 -> m10_124  [color=red, key=0, style=solid];
m10_123 -> m10_8  [key=2, style=dotted];
m10_123 -> m10_126  [color=red, key=1, label=options, style=dashed];
m10_123 -> m10_127  [color=red, key=1, label=options, style=dashed];
m10_123 -> m10_128  [color=red, key=1, label=options, style=dashed];
m10_124 -> m10_125  [color=red, key=0, style=solid];
m10_124 -> m10_9  [color=red, key=2, style=dotted];
m10_126 -> m10_127  [color=red, key=0, style=solid];
m10_126 -> m10_11  [color=red, key=2, style=dotted];
m10_127 -> m10_128  [color=red, key=0, style=solid];
m10_127 -> m10_11  [color=red, key=2, style=dotted];
m10_128 -> m10_129  [color=red, key=0, style=solid];
m10_128 -> m10_11  [color=red, key=2, style=dotted];
m10_125 -> m10_126  [color=red, key=0, style=solid];
m10_125 -> m10_10  [color=red, key=2, style=dotted];
m10_129 -> m10_110  [color=blue, key=0, style=bold];
m10_76 -> m10_77  [key=0, style=solid];
m10_77 -> m10_78  [color=red, key=0, style=solid];
m10_77 -> m10_8  [key=2, style=dotted];
m10_77 -> m10_80  [color=red, key=1, label=options, style=dashed];
m10_78 -> m10_79  [color=red, key=0, style=solid];
m10_78 -> m10_9  [color=red, key=2, style=dotted];
m10_80 -> m10_81  [color=red, key=0, style=solid];
m10_80 -> m10_11  [color=red, key=2, style=dotted];
m10_79 -> m10_80  [color=red, key=0, style=solid];
m10_79 -> m10_10  [color=red, key=2, style=dotted];
m10_81 -> m10_76  [color=blue, key=0, style=bold];
m10_104 -> m10_105  [key=0, style=solid];
m10_105 -> m10_106  [color=red, key=0, style=solid];
m10_105 -> m10_8  [key=2, style=dotted];
m10_105 -> m10_108  [color=red, key=1, label=options, style=dashed];
m10_106 -> m10_107  [color=red, key=0, style=solid];
m10_106 -> m10_9  [color=red, key=2, style=dotted];
m10_108 -> m10_109  [color=red, key=0, style=solid];
m10_108 -> m10_11  [color=red, key=2, style=dotted];
m10_107 -> m10_108  [color=red, key=0, style=solid];
m10_107 -> m10_10  [color=red, key=2, style=dotted];
m10_109 -> m10_104  [color=blue, key=0, style=bold];
m10_175 -> m10_176  [key=0, style=solid];
m10_176 -> m10_177  [key=0, style=solid];
m10_176 -> m10_182  [color=darkseagreen4, key=1, label=actualCulture, style=dashed];
m10_177 -> m10_178  [key=0, style=solid];
m10_177 -> m10_184  [key=2, style=dotted];
m10_182 -> m10_183  [key=0, style=solid];
m10_178 -> m10_179  [color=red, key=0, style=solid];
m10_178 -> m10_8  [key=2, style=dotted];
m10_178 -> m10_181  [color=red, key=1, label=options, style=dashed];
m10_179 -> m10_180  [color=red, key=0, style=solid];
m10_179 -> m10_9  [color=red, key=2, style=dotted];
m10_181 -> m10_182  [color=red, key=0, style=solid];
m10_181 -> m10_11  [color=red, key=2, style=dotted];
m10_180 -> m10_181  [color=red, key=0, style=solid];
m10_180 -> m10_10  [color=red, key=2, style=dotted];
m10_183 -> m10_175  [color=blue, key=0, style=bold];
m10_67 -> m10_68  [key=0, style=solid];
m10_68 -> m10_69  [color=red, key=0, style=solid];
m10_68 -> m10_8  [key=2, style=dotted];
m10_69 -> m10_70  [color=red, key=0, style=solid];
m10_69 -> m10_9  [color=red, key=2, style=dotted];
m10_70 -> m10_71  [color=red, key=0, style=solid];
m10_70 -> m10_75  [color=red, key=2, style=dotted];
m10_71 -> m10_72  [color=red, key=0, style=solid];
m10_71 -> m10_8  [key=2, style=dotted];
m10_72 -> m10_73  [color=red, key=0, style=solid];
m10_72 -> m10_9  [color=red, key=2, style=dotted];
m10_73 -> m10_74  [color=red, key=0, style=solid];
m10_73 -> m10_75  [color=red, key=2, style=dotted];
m10_74 -> m10_67  [color=blue, key=0, style=bold];
m10_166 -> m10_167  [key=0, style=solid];
m10_167 -> m10_168  [key=0, style=solid];
m10_167 -> m10_165  [key=2, style=dotted];
m10_167 -> m10_9  [key=2, style=dotted];
m10_168 -> m10_166  [color=blue, key=0, style=bold];
m10_172 -> m10_173  [key=0, style=solid];
m10_173 -> m10_174  [key=0, style=solid];
m10_173 -> m10_165  [key=2, style=dotted];
m10_173 -> m10_9  [key=2, style=dotted];
m10_174 -> m10_172  [color=blue, key=0, style=bold];
m10_0 -> m10_1  [key=0, style=solid];
m10_1 -> m10_0  [color=blue, key=0, style=bold];
m10_30 -> m10_31  [key=0, style=solid];
m10_31 -> m10_32  [color=red, key=0, style=solid];
m10_31 -> m10_8  [key=2, style=dotted];
m10_31 -> m10_34  [color=red, key=1, label=options, style=dashed];
m10_31 -> m10_35  [color=darkseagreen4, key=1, label=options, style=dashed];
m10_32 -> m10_33  [color=red, key=0, style=solid];
m10_32 -> m10_9  [color=red, key=2, style=dotted];
m10_34 -> m10_35  [color=red, key=0, style=solid];
m10_34 -> m10_11  [color=red, key=2, style=dotted];
m10_35 -> m10_36  [key=0, style=solid];
m10_35 -> n11  [key=2, style=dotted];
m10_33 -> m10_34  [color=red, key=0, style=solid];
m10_33 -> m10_10  [color=red, key=2, style=dotted];
m10_36 -> m10_30  [color=blue, key=0, style=bold];
m10_204 -> m10_4  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_5  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_6  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_14  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_15  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_16  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_20  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_21  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_22  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_26  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_27  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_28  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_32  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_33  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_34  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_40  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_41  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_43  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_47  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_48  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_50  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_57  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_58  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_61  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_63  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_69  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_70  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_72  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_73  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_78  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_79  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_80  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_84  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_85  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_87  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_88  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_90  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_91  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_93  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_94  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_98  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_99  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_101  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_102  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_106  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_107  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_108  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_112  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_113  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_114  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_115  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_116  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_118  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_119  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_120  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_121  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_122  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_124  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_125  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_126  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_127  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_128  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_132  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_133  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_134  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_135  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_136  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_139  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_140  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_142  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_143  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_144  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_146  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_147  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_148  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_149  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_151  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_153  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_154  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_156  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_157  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_159  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_163  [color=darkseagreen4, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_167  [color=darkseagreen4, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_170  [color=darkseagreen4, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_173  [color=darkseagreen4, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_179  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_180  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_181  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_188  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_190  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_191  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_198  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_200  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m10_204 -> m10_201  [color=red, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m12_12 -> m12_13  [key=0, style=solid];
m12_13 -> m12_14  [key=0, style=solid];
m12_13 -> m12_3  [key=2, style=dotted];
m12_13 -> m12_15  [key=2, style=dotted];
m12_13 -> m12_8  [key=2, style=dotted];
m12_14 -> m12_12  [color=blue, key=0, style=bold];
m12_26 -> m12_27  [key=0, style=solid];
m12_27 -> m12_28  [key=0, style=solid];
m12_27 -> m12_22  [key=2, style=dotted];
m12_27 -> m12_32  [color=green, key=1, label=options, style=dashed];
m12_28 -> m12_29  [key=0, style=solid];
m12_28 -> m12_23  [key=2, style=dotted];
m12_28 -> m12_30  [color=darkseagreen4, key=1, label=values, style=dashed];
m12_28 -> m12_31  [color=darkseagreen4, key=1, label=values, style=dashed];
m12_32 -> m12_33  [color=green, key=0, style=solid];
m12_32 -> m12_35  [color=green, key=2, style=dotted];
m12_29 -> m12_30  [key=0, style=solid];
m12_29 -> m12_34  [key=2, style=dotted];
m12_30 -> m12_31  [key=0, style=solid];
m12_30 -> m12_34  [key=2, style=dotted];
m12_31 -> m12_32  [color=green, key=0, style=solid];
m12_31 -> m12_34  [key=2, style=dotted];
m12_33 -> m12_26  [color=blue, key=0, style=bold];
m12_16 -> m12_17  [key=0, style=solid];
m12_17 -> m12_18  [key=0, style=solid];
m12_17 -> m12_22  [key=2, style=dotted];
m12_18 -> m12_19  [key=0, style=solid];
m12_18 -> m12_23  [key=2, style=dotted];
m12_18 -> m12_20  [color=darkseagreen4, key=1, label=values, style=dashed];
m12_19 -> m12_20  [key=0, style=solid];
m12_19 -> m12_24  [key=2, style=dotted];
m12_20 -> m12_21  [key=0, style=solid];
m12_20 -> m12_8  [key=2, style=dotted];
m12_20 -> n11  [key=2, style=dotted];
m12_21 -> m12_16  [color=blue, key=0, style=bold];
m12_4 -> m12_5  [key=0, style=solid];
m12_5 -> m12_6  [key=0, style=solid];
m12_5 -> m12_3  [key=2, style=dotted];
m12_5 -> m12_7  [key=2, style=dotted];
m12_5 -> m12_8  [key=2, style=dotted];
m12_6 -> m12_4  [color=blue, key=0, style=bold];
m12_0 -> m12_1  [key=0, style=solid];
m12_1 -> m12_2  [key=0, style=solid];
m12_1 -> m12_3  [key=2, style=dotted];
m12_2 -> m12_0  [color=blue, key=0, style=bold];
m12_9 -> m12_10  [key=0, style=solid];
m12_10 -> m12_11  [key=0, style=solid];
m12_10 -> m12_3  [key=2, style=dotted];
m12_10 -> m12_7  [key=2, style=dotted];
m12_10 -> m12_8  [key=2, style=dotted];
m12_11 -> m12_9  [color=blue, key=0, style=bold];
m12_36 -> m12_32  [color=green, key=1, label="CommandLine.Tests.ValueListAttributeFixture", style=dashed];
m13_19 -> m13_20  [key=0, style=solid];
m13_20 -> m13_21  [color=green, key=0, style=solid];
m13_20 -> m13_30  [key=2, style=dotted];
m13_20 -> m13_23  [color=darkseagreen4, key=1, label=options, style=dashed];
m13_20 -> m13_24  [color=darkseagreen4, key=1, label=options, style=dashed];
m13_20 -> m13_25  [color=darkseagreen4, key=1, label=options, style=dashed];
m13_20 -> m13_26  [color=darkseagreen4, key=1, label=options, style=dashed];
m13_20 -> m13_27  [color=darkseagreen4, key=1, label=options, style=dashed];
m13_20 -> m13_28  [color=darkseagreen4, key=1, label=options, style=dashed];
m13_21 -> m13_22  [color=green, key=0, style=solid];
m13_21 -> m13_14  [color=green, key=2, style=dotted];
m13_23 -> m13_24  [key=0, style=solid];
m13_23 -> n11  [key=2, style=dotted];
m13_24 -> m13_25  [key=0, style=solid];
m13_24 -> n11  [key=2, style=dotted];
m13_25 -> m13_26  [key=0, style=solid];
m13_25 -> n11  [key=2, style=dotted];
m13_26 -> m13_27  [key=0, style=solid];
m13_26 -> m13_31  [key=2, style=dotted];
m13_27 -> m13_28  [key=0, style=solid];
m13_27 -> m13_32  [key=2, style=dotted];
m13_28 -> m13_29  [key=0, style=solid];
m13_28 -> m13_18  [key=2, style=dotted];
m13_22 -> m13_23  [color=green, key=0, style=solid];
m13_22 -> m13_15  [color=green, key=2, style=dotted];
m13_29 -> m13_19  [color=blue, key=0, style=bold];
m13_33 -> m13_34  [key=0, style=solid];
m13_34 -> m13_35  [color=green, key=0, style=solid];
m13_34 -> m13_30  [key=2, style=dotted];
m13_35 -> m13_36  [color=green, key=0, style=solid];
m13_35 -> m13_14  [color=green, key=2, style=dotted];
m13_36 -> m13_37  [color=green, key=0, style=solid];
m13_36 -> m13_38  [color=green, key=2, style=dotted];
m13_37 -> m13_33  [color=blue, key=0, style=bold];
m13_0 -> m13_1  [key=0, style=solid];
m13_1 -> m13_0  [color=blue, key=0, style=bold];
m13_47 -> m13_48  [key=0, style=solid];
m13_48 -> m13_49  [key=0, style=solid];
m13_48 -> m13_46  [key=2, style=dotted];
m13_49 -> m13_50  [key=0, style=solid];
m13_49 -> m13_14  [key=2, style=dotted];
m13_49 -> m13_32  [key=2, style=dotted];
m13_50 -> m13_47  [color=blue, key=0, style=bold];
m13_2 -> m13_3  [key=0, style=solid];
m13_3 -> m13_4  [color=green, key=0, style=solid];
m13_3 -> m13_13  [key=2, style=dotted];
m13_3 -> m13_6  [color=darkseagreen4, key=1, label=options, style=dashed];
m13_3 -> m13_7  [color=darkseagreen4, key=1, label=options, style=dashed];
m13_3 -> m13_8  [color=darkseagreen4, key=1, label=options, style=dashed];
m13_3 -> m13_9  [color=darkseagreen4, key=1, label=options, style=dashed];
m13_3 -> m13_10  [color=darkseagreen4, key=1, label=options, style=dashed];
m13_3 -> m13_11  [color=darkseagreen4, key=1, label=options, style=dashed];
m13_4 -> m13_5  [color=green, key=0, style=solid];
m13_4 -> m13_14  [color=green, key=2, style=dotted];
m13_6 -> m13_7  [key=0, style=solid];
m13_6 -> n11  [key=2, style=dotted];
m13_7 -> m13_8  [key=0, style=solid];
m13_7 -> n11  [key=2, style=dotted];
m13_8 -> m13_9  [key=0, style=solid];
m13_8 -> n11  [key=2, style=dotted];
m13_9 -> m13_10  [key=0, style=solid];
m13_9 -> n11  [key=2, style=dotted];
m13_10 -> m13_11  [key=0, style=solid];
m13_10 -> m13_17  [key=2, style=dotted];
m13_11 -> m13_12  [key=0, style=solid];
m13_11 -> m13_18  [key=2, style=dotted];
m13_5 -> m13_6  [color=green, key=0, style=solid];
m13_5 -> m13_15  [color=green, key=2, style=dotted];
m13_12 -> m13_2  [color=blue, key=0, style=bold];
m13_39 -> m13_40  [key=0, style=solid];
m13_40 -> m13_41  [color=green, key=0, style=solid];
m13_40 -> m13_46  [key=2, style=dotted];
m13_40 -> m13_43  [color=darkseagreen4, key=1, label=options, style=dashed];
m13_40 -> m13_44  [color=darkseagreen4, key=1, label=options, style=dashed];
m13_41 -> m13_42  [color=green, key=0, style=solid];
m13_41 -> m13_14  [color=green, key=2, style=dotted];
m13_43 -> m13_44  [key=0, style=solid];
m13_43 -> n11  [key=2, style=dotted];
m13_44 -> m13_45  [key=0, style=solid];
m13_44 -> m13_18  [key=2, style=dotted];
m13_42 -> m13_43  [color=green, key=0, style=solid];
m13_42 -> m13_15  [color=green, key=2, style=dotted];
m13_45 -> m13_39  [color=blue, key=0, style=bold];
m13_51 -> m13_4  [color=green, key=1, label="CommandLine.Tests.ValueListAttributeParsingFixture", style=dashed];
m13_51 -> m13_5  [color=green, key=1, label="CommandLine.Tests.ValueListAttributeParsingFixture", style=dashed];
m13_51 -> m13_21  [color=green, key=1, label="CommandLine.Tests.ValueListAttributeParsingFixture", style=dashed];
m13_51 -> m13_22  [color=green, key=1, label="CommandLine.Tests.ValueListAttributeParsingFixture", style=dashed];
m13_51 -> m13_35  [color=green, key=1, label="CommandLine.Tests.ValueListAttributeParsingFixture", style=dashed];
m13_51 -> m13_36  [color=green, key=1, label="CommandLine.Tests.ValueListAttributeParsingFixture", style=dashed];
m13_51 -> m13_41  [color=green, key=1, label="CommandLine.Tests.ValueListAttributeParsingFixture", style=dashed];
m13_51 -> m13_42  [color=green, key=1, label="CommandLine.Tests.ValueListAttributeParsingFixture", style=dashed];
m13_51 -> m13_49  [color=darkseagreen4, key=1, label="CommandLine.Tests.ValueListAttributeParsingFixture", style=dashed];
}
