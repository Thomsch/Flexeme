digraph  {
d1 [label="return scalar\r\n                ? ChangeTypeScalar(values.Single(), conversionType, conversionCulture)\r\n                : ChangeTypeSequence(values, conversionType, conversionCulture);", span="15-17", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", color=green, community=0];
d0 [label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="13-13", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)"];
d2 [label="Exit CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="13-13", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)"];
d3 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()"];
d4 [label="Entry CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo)", span="36-36", cluster="CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo)"];
d5 [label="Entry CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", span="20-20", cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)"];
d46 [label="return Either.Protect(\r\n                conversionType.IsPrimitiveEx() || ReflectionHelper.IsFSharpOptionType(conversionType)\r\n                    ? changeType\r\n                    : makeType, value);", span="89-92", cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)", color=green, community=0];
d35 [label="Entry CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)", span="44-44", cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)"];
d44 [label="Func<string, object> changeType = input =>\r\n            {\r\n                Func<object> safeChangeType = () =>\r\n                {\r\n                    var isFsOption = ReflectionHelper.IsFSharpOptionType(conversionType);\r\n\r\n                    Func<Type> getUnderlyingType =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.GetUnderlyingType(conversionType)\r\n                                : Nullable.GetUnderlyingType(conversionType);\r\n\r\n                    var type = getUnderlyingType() ?? conversionType;\r\n\r\n                    Func<object> withValue =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.Some(type, Convert.ChangeType(input, type, conversionCulture))\r\n                                : Convert.ChangeType(input, type, conversionCulture);\r\n\r\n                    Func<object> empty = () => isFsOption ? FSharpOptionHelper.None(type) : null;\r\n\r\n                    return (input == null) ? empty() : withValue();\r\n                };\r\n\r\n                return input.IsBooleanString()\r\n                    ? input.ToBoolean() : conversionType.IsEnum\r\n                        ? input.ToEnum(conversionType) : safeChangeType();\r\n            }", span="46-74", cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)"];
d45 [label="Func<string, object> makeType = input =>\r\n            {\r\n                try\r\n                {\r\n                    var ctor = conversionType.GetConstructor(new[] { typeof(string) });\r\n                    return ctor.Invoke(new object[] { input });\r\n                }\r\n                catch (Exception)\r\n                {\r\n                    throw new FormatException(''Destination conversion type must have a constructor that accepts a string.'');\r\n                }\r\n            }", span="76-87", cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)"];
d47 [label="Exit CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)", span="44-44", cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)"];
d48 [label="Entry System.Type.IsPrimitiveEx()", span="209-209", cluster="System.Type.IsPrimitiveEx()"];
d49 [label="Entry CommandLine.Infrastructure.ReflectionHelper.IsFSharpOptionType(System.Type)", span="35-35", cluster="CommandLine.Infrastructure.ReflectionHelper.IsFSharpOptionType(System.Type)"];
d50 [label="Entry Unk.Protect", span="", cluster="Unk.Protect"];
d91 [label="object parsedValue", span="97-97", cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", color=green, community=0];
d90 [label="Entry CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", span="95-95", cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)"];
d92 [label="parsedValue = Enum.Parse(conversionType, value)", span="100-100", cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", color=green, community=0];
d93 [label=ArgumentException, span="102-102", cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", color=green, community=0];
d95 [label="Enum.IsDefined(conversionType, parsedValue)", span="106-106", cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", color=green, community=0];
d99 [label="Entry System.Enum.Parse(System.Type, string)", span="0-0", cluster="System.Enum.Parse(System.Type, string)"];
d96 [label="return parsedValue;", span="108-108", cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", color=green, community=0];
d97 [label="throw new FormatException();", span="110-110", cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", color=green, community=0];
d101 [label="Entry System.Enum.IsDefined(System.Type, object)", span="0-0", cluster="System.Enum.IsDefined(System.Type, object)"];
d94 [label="throw new FormatException();", span="104-104", cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", color=green, community=0];
d98 [label="Exit CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", span="95-95", cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)"];
d100 [label="Entry System.FormatException.FormatException()", span="0-0", cluster="System.FormatException.FormatException()"];
d34 [label="Exit CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo)", span="36-36", cluster="CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo)"];
d31 [label="var result = ChangeTypeScalarImpl(value, conversionType, conversionCulture)", span="38-38", cluster="CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo)"];
d9 [label="Exit CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", span="20-20", cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)"];
d6 [label="var type =\r\n                conversionType.GetGenericArguments()\r\n                              .SingleOrDefault()\r\n                              .ToMaybe()\r\n                              .FromJust(\r\n                                  new ApplicationException(''Non scalar properties should be sequence of type IEnumerable<T>.''))", span="22-27", cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)"];
d7 [label="var converted = values.Select(value => ChangeTypeScalar(value, type, conversionCulture))", span="29-29", cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)"];
d21 [label="ChangeTypeScalar(value, type, conversionCulture)", span="29-29", cluster="lambda expression"];
d52 [label="Func<object> safeChangeType = () =>\r\n                {\r\n                    var isFsOption = ReflectionHelper.IsFSharpOptionType(conversionType);\r\n\r\n                    Func<Type> getUnderlyingType =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.GetUnderlyingType(conversionType)\r\n                                : Nullable.GetUnderlyingType(conversionType);\r\n\r\n                    var type = getUnderlyingType() ?? conversionType;\r\n\r\n                    Func<object> withValue =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.Some(type, Convert.ChangeType(input, type, conversionCulture))\r\n                                : Convert.ChangeType(input, type, conversionCulture);\r\n\r\n                    Func<object> empty = () => isFsOption ? FSharpOptionHelper.None(type) : null;\r\n\r\n                    return (input == null) ? empty() : withValue();\r\n                }", span="48-69", cluster="lambda expression"];
d60 [label="var isFsOption = ReflectionHelper.IsFSharpOptionType(conversionType)", span="50-50", cluster="lambda expression"];
d61 [label="Func<Type> getUnderlyingType =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.GetUnderlyingType(conversionType)\r\n                                : Nullable.GetUnderlyingType(conversionType)", span="52-56", cluster="lambda expression"];
d68 [label="isFsOption\r\n                                ? FSharpOptionHelper.GetUnderlyingType(conversionType)\r\n                                : Nullable.GetUnderlyingType(conversionType)", span="54-56", cluster="lambda expression"];
d62 [label="var type = getUnderlyingType() ?? conversionType", span="58-58", cluster="lambda expression"];
d63 [label="Func<object> withValue =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.Some(type, Convert.ChangeType(input, type, conversionCulture))\r\n                                : Convert.ChangeType(input, type, conversionCulture)", span="60-64", cluster="lambda expression"];
d73 [label="isFsOption\r\n                                ? FSharpOptionHelper.Some(type, Convert.ChangeType(input, type, conversionCulture))\r\n                                : Convert.ChangeType(input, type, conversionCulture)", span="62-64", cluster="lambda expression"];
d53 [label="return input.IsBooleanString()\r\n                    ? input.ToBoolean() : conversionType.IsEnum\r\n                        ? input.ToEnum(conversionType) : safeChangeType();", span="71-73", cluster="lambda expression"];
d82 [label="var ctor = conversionType.GetConstructor(new[] { typeof(string) })", span="80-80", cluster="lambda expression"];
d65 [label="return (input == null) ? empty() : withValue();", span="68-68", cluster="lambda expression"];
d83 [label="return ctor.Invoke(new object[] { input });", span="81-81", cluster="lambda expression"];
d33 [label="return Maybe.OfEither(result);", span="41-41", cluster="CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo)"];
d32 [label="result.Match(_ => { }, e => e.RethrowWhenAbsentIn(\r\n                new[] { typeof(InvalidCastException), typeof(FormatException), typeof(OverflowException) }))", span="39-40", cluster="CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo)"];
d8 [label="return converted.Any(a => a.MatchNothing())\r\n                ? Maybe.Nothing<object>()\r\n                : Maybe.Just(converted.Select(c => ((Just<object>)c).Value).ToUntypedArray(type));", span="31-33", cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)"];
d10 [label="Entry System.Type.GetGenericArguments()", span="0-0", cluster="System.Type.GetGenericArguments()"];
d11 [label="Entry System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()"];
d12 [label="Entry T.ToMaybe<T>()", span="249-249", cluster="T.ToMaybe<T>()"];
d13 [label="Entry System.ApplicationException.ApplicationException(string)", span="0-0", cluster="System.ApplicationException.ApplicationException(string)"];
d14 [label="Entry Unk.FromJust", span="", cluster="Unk.FromJust"];
d15 [label="Entry Unk.Select", span="", cluster="Unk.Select"];
d20 [label="Entry lambda expression", span="29-29", cluster="lambda expression"];
d102 [label="System.Globalization.CultureInfo", span=""];
d103 [label=type, span=""];
d22 [label="Exit lambda expression", span="29-29", cluster="lambda expression"];
d23 [label="Entry Unk.ChangeTypeScalar", span="", cluster="Unk.ChangeTypeScalar"];
d104 [label="System.Type", span=""];
d105 [label="System.Globalization.CultureInfo", span=""];
d51 [label="Entry lambda expression", span="46-74", cluster="lambda expression"];
d59 [label="Entry lambda expression", span="48-69", cluster="lambda expression"];
d64 [label="Func<object> empty = () => isFsOption ? FSharpOptionHelper.None(type) : null", span="66-66", cluster="lambda expression"];
d78 [label="isFsOption ? FSharpOptionHelper.None(type) : null", span="66-66", cluster="lambda expression"];
d107 [label=isFsOption, span=""];
d67 [label="Entry lambda expression", span="53-56", cluster="lambda expression"];
d69 [label="Exit lambda expression", span="53-56", cluster="lambda expression"];
d70 [label="Entry CommandLine.Infrastructure.FSharpOptionHelper.GetUnderlyingType(System.Type)", span="8-8", cluster="CommandLine.Infrastructure.FSharpOptionHelper.GetUnderlyingType(System.Type)"];
d71 [label="Entry System.Nullable.GetUnderlyingType(System.Type)", span="0-0", cluster="System.Nullable.GetUnderlyingType(System.Type)"];
d58 [label="Entry System.Func<TResult>.Invoke()", span="0-0", cluster="System.Func<TResult>.Invoke()"];
d106 [label=string, span=""];
d108 [label=type, span=""];
d72 [label="Entry lambda expression", span="61-64", cluster="lambda expression"];
d74 [label="Exit lambda expression", span="61-64", cluster="lambda expression"];
d75 [label="Entry System.Convert.ChangeType(object, System.Type, System.IFormatProvider)", span="0-0", cluster="System.Convert.ChangeType(object, System.Type, System.IFormatProvider)"];
d76 [label="Entry CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)", span="14-14", cluster="CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)"];
d54 [label="Exit lambda expression", span="46-74", cluster="lambda expression"];
d55 [label="Entry string.IsBooleanString()", span="60-60", cluster="string.IsBooleanString()"];
d56 [label="Entry string.ToBoolean()", span="66-66", cluster="string.ToBoolean()"];
d57 [label="Entry string.ToEnum(System.Type)", span="95-95", cluster="string.ToEnum(System.Type)"];
d81 [label="Entry lambda expression", span="76-87", cluster="lambda expression"];
d87 [label="Entry System.Type.GetConstructor(System.Type[])", span="0-0", cluster="System.Type.GetConstructor(System.Type[])"];
d66 [label="Exit lambda expression", span="48-69", cluster="lambda expression"];
d86 [label="Exit lambda expression", span="76-87", cluster="lambda expression"];
d88 [label="Entry System.Reflection.ConstructorInfo.Invoke(object[])", span="0-0", cluster="System.Reflection.ConstructorInfo.Invoke(object[])"];
d37 [label="Entry Unk.OfEither", span="", cluster="Unk.OfEither"];
d36 [label="Entry Unk.Match", span="", cluster="Unk.Match"];
d38 [label="Entry lambda expression", span="39-39", cluster="lambda expression"];
d40 [label="Entry lambda expression", span="39-40", cluster="lambda expression"];
d16 [label="Entry Unk.Any", span="", cluster="Unk.Any"];
d17 [label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116", cluster="CSharpx.Maybe.Nothing<T>()"];
d18 [label="Entry Unk.ToUntypedArray", span="", cluster="Unk.ToUntypedArray"];
d19 [label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124", cluster="CSharpx.Maybe.Just<T>(T)"];
d24 [label="Entry lambda expression", span="31-31", cluster="lambda expression"];
d28 [label="Entry lambda expression", span="33-33", cluster="lambda expression"];
d77 [label="Entry lambda expression", span="66-66", cluster="lambda expression"];
d79 [label="Exit lambda expression", span="66-66", cluster="lambda expression"];
d80 [label="Entry CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)", span="22-22", cluster="CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)"];
d85 [label="throw new FormatException(''Destination conversion type must have a constructor that accepts a string.'');", span="85-85", cluster="lambda expression"];
d39 [label="Exit lambda expression", span="39-39", cluster="lambda expression"];
d42 [label="Exit lambda expression", span="39-40", cluster="lambda expression"];
d41 [label="e.RethrowWhenAbsentIn(\r\n                new[] { typeof(InvalidCastException), typeof(FormatException), typeof(OverflowException) })", span="39-40", cluster="lambda expression"];
d26 [label="Exit lambda expression", span="31-31", cluster="lambda expression"];
d25 [label="a.MatchNothing()", span="31-31", cluster="lambda expression"];
d30 [label="Exit lambda expression", span="33-33", cluster="lambda expression"];
d29 [label="((Just<object>)c).Value", span="33-33", cluster="lambda expression"];
d84 [label=Exception, span="83-83", cluster="lambda expression"];
d89 [label="Entry System.FormatException.FormatException(string)", span="0-0", cluster="System.FormatException.FormatException(string)"];
d43 [label="Entry Unk.RethrowWhenAbsentIn", span="", cluster="Unk.RethrowWhenAbsentIn"];
d27 [label="Entry Unk.MatchNothing", span="", cluster="Unk.MatchNothing"];
m0_7 [label="Entry Humanizer.Localisation.NumberToWords.INumberToWordsConverter.Convert(int, Humanizer.GrammaticalGender)", span="20-20", cluster="Humanizer.Localisation.NumberToWords.INumberToWordsConverter.Convert(int, Humanizer.GrammaticalGender)", file="InstanceBuilder.cs"];
m0_4 [label="Entry Humanizer.NumberToWordsExtension.ToWords(int, Humanizer.GrammaticalGender)", span="38-38", cluster="Humanizer.NumberToWordsExtension.ToWords(int, Humanizer.GrammaticalGender)", file="InstanceBuilder.cs"];
m0_5 [label="return Configurator.NumberToWordsConverter.Convert(number, gender);", span="40-40", cluster="Humanizer.NumberToWordsExtension.ToWords(int, Humanizer.GrammaticalGender)", file="InstanceBuilder.cs"];
m0_6 [label="Exit Humanizer.NumberToWordsExtension.ToWords(int, Humanizer.GrammaticalGender)", span="38-38", cluster="Humanizer.NumberToWordsExtension.ToWords(int, Humanizer.GrammaticalGender)", file="InstanceBuilder.cs"];
m0_3 [label="Entry Humanizer.Localisation.NumberToWords.INumberToWordsConverter.Convert(int)", span="12-12", cluster="Humanizer.Localisation.NumberToWords.INumberToWordsConverter.Convert(int)", file="InstanceBuilder.cs"];
m0_15 [label="Entry Humanizer.Localisation.NumberToWords.INumberToWordsConverter.ConvertToOrdinal(int, Humanizer.GrammaticalGender)", span="35-35", cluster="Humanizer.Localisation.NumberToWords.INumberToWordsConverter.ConvertToOrdinal(int, Humanizer.GrammaticalGender)", file="InstanceBuilder.cs"];
m0_8 [label="Entry Humanizer.NumberToWordsExtension.ToOrdinalWords(int)", span="48-48", cluster="Humanizer.NumberToWordsExtension.ToOrdinalWords(int)", file="InstanceBuilder.cs"];
m0_9 [label="return Configurator.NumberToWordsConverter.ConvertToOrdinal(number);", span="50-50", cluster="Humanizer.NumberToWordsExtension.ToOrdinalWords(int)", file="InstanceBuilder.cs"];
m0_10 [label="Exit Humanizer.NumberToWordsExtension.ToOrdinalWords(int)", span="48-48", cluster="Humanizer.NumberToWordsExtension.ToOrdinalWords(int)", file="InstanceBuilder.cs"];
m0_12 [label="Entry Humanizer.NumberToWordsExtension.ToOrdinalWords(int, Humanizer.GrammaticalGender)", span="61-61", cluster="Humanizer.NumberToWordsExtension.ToOrdinalWords(int, Humanizer.GrammaticalGender)", file="InstanceBuilder.cs"];
m0_13 [label="return Configurator.NumberToWordsConverter.ConvertToOrdinal(number, gender);", span="63-63", cluster="Humanizer.NumberToWordsExtension.ToOrdinalWords(int, Humanizer.GrammaticalGender)", file="InstanceBuilder.cs"];
m0_14 [label="Exit Humanizer.NumberToWordsExtension.ToOrdinalWords(int, Humanizer.GrammaticalGender)", span="61-61", cluster="Humanizer.NumberToWordsExtension.ToOrdinalWords(int, Humanizer.GrammaticalGender)", file="InstanceBuilder.cs"];
m0_11 [label="Entry Humanizer.Localisation.NumberToWords.INumberToWordsConverter.ConvertToOrdinal(int)", span="27-27", cluster="Humanizer.Localisation.NumberToWords.INumberToWordsConverter.ConvertToOrdinal(int)", file="InstanceBuilder.cs"];
m0_0 [label="Entry Humanizer.NumberToWordsExtension.ToWords(int)", span="14-14", cluster="Humanizer.NumberToWordsExtension.ToWords(int)", file="InstanceBuilder.cs"];
m0_1 [label="return Configurator.NumberToWordsConverter.Convert(number);", span="16-16", cluster="Humanizer.NumberToWordsExtension.ToWords(int)", file="InstanceBuilder.cs"];
m0_2 [label="Exit Humanizer.NumberToWordsExtension.ToWords(int)", span="14-14", cluster="Humanizer.NumberToWordsExtension.ToWords(int)", file="InstanceBuilder.cs"];
m1_35 [label="Entry Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfWordsTruncatorTruncateFromLeft(string, int, string)", span="148-148", cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfWordsTruncatorTruncateFromLeft(string, int, string)", file="InstanceBuilderTests.cs"];
m1_36 [label="Assert.Equal(expectedOutput, input.Truncate(length, Truncator.FixedNumberOfWords, TruncateFrom.Left))", span="150-150", cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfWordsTruncatorTruncateFromLeft(string, int, string)", file="InstanceBuilderTests.cs"];
m1_37 [label="Exit Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfWordsTruncatorTruncateFromLeft(string, int, string)", span="148-148", cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfWordsTruncatorTruncateFromLeft(string, int, string)", file="InstanceBuilderTests.cs"];
m1_8 [label="Entry string.Truncate(int, Humanizer.ITruncator, Humanizer.TruncateFrom)", span="28-28", cluster="string.Truncate(int, Humanizer.ITruncator, Humanizer.TruncateFrom)", file="InstanceBuilderTests.cs"];
m1_19 [label="Entry Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedLengthTruncator(string, int, string, string)", span="79-79", cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedLengthTruncator(string, int, string, string)", file="InstanceBuilderTests.cs"];
m1_20 [label="Assert.Equal(expectedOutput, input.Truncate(length, truncationString, Truncator.FixedLength))", span="81-81", cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedLengthTruncator(string, int, string, string)", file="InstanceBuilderTests.cs"];
m1_21 [label="Exit Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedLengthTruncator(string, int, string, string)", span="79-79", cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedLengthTruncator(string, int, string, string)", file="InstanceBuilderTests.cs"];
m1_26 [label="Entry Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfWordsTruncator(string, int, string, string)", span="109-109", cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfWordsTruncator(string, int, string, string)", file="InstanceBuilderTests.cs"];
m1_27 [label="Assert.Equal(expectedOutput, input.Truncate(length, truncationString, Truncator.FixedNumberOfWords))", span="111-111", cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfWordsTruncator(string, int, string, string)", file="InstanceBuilderTests.cs"];
m1_28 [label="Exit Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfWordsTruncator(string, int, string, string)", span="109-109", cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfWordsTruncator(string, int, string, string)", file="InstanceBuilderTests.cs"];
m1_44 [label="Entry Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfWordsTruncatorTruncateFromLeft(string, int, string, string)", span="194-194", cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfWordsTruncatorTruncateFromLeft(string, int, string, string)", file="InstanceBuilderTests.cs"];
m1_45 [label="Assert.Equal(expectedOutput, input.Truncate(length, truncationString, Truncator.FixedNumberOfWords, TruncateFrom.Left))", span="196-196", cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfWordsTruncatorTruncateFromLeft(string, int, string, string)", file="InstanceBuilderTests.cs"];
m1_46 [label="Exit Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfWordsTruncatorTruncateFromLeft(string, int, string, string)", span="194-194", cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfWordsTruncatorTruncateFromLeft(string, int, string, string)", file="InstanceBuilderTests.cs"];
m1_5 [label="Entry Humanizer.Tests.TruncatorTests.TruncateWithFixedLengthTruncator(string, int, string)", span="25-25", cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedLengthTruncator(string, int, string)", file="InstanceBuilderTests.cs"];
m1_6 [label="Assert.Equal(expectedOutput, input.Truncate(length, Truncator.FixedLength))", span="27-27", cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedLengthTruncator(string, int, string)", file="InstanceBuilderTests.cs"];
m1_7 [label="Exit Humanizer.Tests.TruncatorTests.TruncateWithFixedLengthTruncator(string, int, string)", span="25-25", cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedLengthTruncator(string, int, string)", file="InstanceBuilderTests.cs"];
m1_23 [label="Entry Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfCharactersTruncator(string, int, string, string)", span="94-94", cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfCharactersTruncator(string, int, string, string)", file="InstanceBuilderTests.cs"];
m1_24 [label="Assert.Equal(expectedOutput, input.Truncate(length, truncationString, Truncator.FixedNumberOfCharacters))", span="96-96", cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfCharactersTruncator(string, int, string, string)", file="InstanceBuilderTests.cs"];
m1_25 [label="Exit Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfCharactersTruncator(string, int, string, string)", span="94-94", cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfCharactersTruncator(string, int, string, string)", file="InstanceBuilderTests.cs"];
m1_29 [label="Entry Humanizer.Tests.TruncatorTests.TruncateWithFixedLengthTruncatorTruncateFromLeft(string, int, string)", span="121-121", cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedLengthTruncatorTruncateFromLeft(string, int, string)", file="InstanceBuilderTests.cs"];
m1_30 [label="Assert.Equal(expectedOutput, input.Truncate(length, Truncator.FixedLength, TruncateFrom.Left))", span="123-123", cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedLengthTruncatorTruncateFromLeft(string, int, string)", file="InstanceBuilderTests.cs"];
m1_31 [label="Exit Humanizer.Tests.TruncatorTests.TruncateWithFixedLengthTruncatorTruncateFromLeft(string, int, string)", span="121-121", cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedLengthTruncatorTruncateFromLeft(string, int, string)", file="InstanceBuilderTests.cs"];
m1_18 [label="Entry string.Truncate(int, string, Humanizer.TruncateFrom)", span="41-41", cluster="string.Truncate(int, string, Humanizer.TruncateFrom)", file="InstanceBuilderTests.cs"];
m1_3 [label="Entry string.Truncate(int)", span="15-15", cluster="string.Truncate(int)", file="InstanceBuilderTests.cs"];
m1_0 [label="Entry Humanizer.Tests.TruncatorTests.Truncate(string, int, string)", span="13-13", cluster="Humanizer.Tests.TruncatorTests.Truncate(string, int, string)", file="InstanceBuilderTests.cs"];
m1_1 [label="Assert.Equal(expectedOutput, input.Truncate(length))", span="15-15", cluster="Humanizer.Tests.TruncatorTests.Truncate(string, int, string)", file="InstanceBuilderTests.cs"];
m1_2 [label="Exit Humanizer.Tests.TruncatorTests.Truncate(string, int, string)", span="13-13", cluster="Humanizer.Tests.TruncatorTests.Truncate(string, int, string)", file="InstanceBuilderTests.cs"];
m1_38 [label="Entry Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedLengthTruncatorTruncateFromLeft(string, int, string, string)", span="163-163", cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedLengthTruncatorTruncateFromLeft(string, int, string, string)", file="InstanceBuilderTests.cs"];
m1_39 [label="Assert.Equal(expectedOutput, input.Truncate(length, truncationString, Truncator.FixedLength, TruncateFrom.Left))", span="165-165", cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedLengthTruncatorTruncateFromLeft(string, int, string, string)", file="InstanceBuilderTests.cs"];
m1_40 [label="Exit Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedLengthTruncatorTruncateFromLeft(string, int, string, string)", span="163-163", cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedLengthTruncatorTruncateFromLeft(string, int, string, string)", file="InstanceBuilderTests.cs"];
m1_41 [label="Entry Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfCharactersTruncatorTruncateFromLeft(string, int, string, string)", span="178-178", cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfCharactersTruncatorTruncateFromLeft(string, int, string, string)", file="InstanceBuilderTests.cs"];
m1_42 [label="Assert.Equal(expectedOutput, input.Truncate(length, truncationString, Truncator.FixedNumberOfCharacters, TruncateFrom.Left))", span="180-180", cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfCharactersTruncatorTruncateFromLeft(string, int, string, string)", file="InstanceBuilderTests.cs"];
m1_43 [label="Exit Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfCharactersTruncatorTruncateFromLeft(string, int, string, string)", span="178-178", cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfCharactersTruncatorTruncateFromLeft(string, int, string, string)", file="InstanceBuilderTests.cs"];
m1_4 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="InstanceBuilderTests.cs"];
m1_32 [label="Entry Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfCharactersTruncatorTruncateFromLeft(string, int, string)", span="134-134", cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfCharactersTruncatorTruncateFromLeft(string, int, string)", file="InstanceBuilderTests.cs"];
m1_33 [label="Assert.Equal(expectedOutput, input.Truncate(length, Truncator.FixedNumberOfCharacters, TruncateFrom.Left))", span="136-136", cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfCharactersTruncatorTruncateFromLeft(string, int, string)", file="InstanceBuilderTests.cs"];
m1_34 [label="Exit Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfCharactersTruncatorTruncateFromLeft(string, int, string)", span="134-134", cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfCharactersTruncatorTruncateFromLeft(string, int, string)", file="InstanceBuilderTests.cs"];
m1_15 [label="Entry Humanizer.Tests.TruncatorTests.TruncateWithTruncationString(string, int, string, string)", span="64-64", cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationString(string, int, string, string)", file="InstanceBuilderTests.cs"];
m1_16 [label="Assert.Equal(expectedOutput, input.Truncate(length, truncationString))", span="66-66", cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationString(string, int, string, string)", file="InstanceBuilderTests.cs"];
m1_17 [label="Exit Humanizer.Tests.TruncatorTests.TruncateWithTruncationString(string, int, string, string)", span="64-64", cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationString(string, int, string, string)", file="InstanceBuilderTests.cs"];
m1_9 [label="Entry Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfCharactersTruncator(string, int, string)", span="37-37", cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfCharactersTruncator(string, int, string)", file="InstanceBuilderTests.cs"];
m1_10 [label="Assert.Equal(expectedOutput, input.Truncate(length, Truncator.FixedNumberOfCharacters))", span="39-39", cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfCharactersTruncator(string, int, string)", file="InstanceBuilderTests.cs"];
m1_11 [label="Exit Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfCharactersTruncator(string, int, string)", span="37-37", cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfCharactersTruncator(string, int, string)", file="InstanceBuilderTests.cs"];
m1_22 [label="Entry string.Truncate(int, string, Humanizer.ITruncator, Humanizer.TruncateFrom)", span="55-55", cluster="string.Truncate(int, string, Humanizer.ITruncator, Humanizer.TruncateFrom)", file="InstanceBuilderTests.cs"];
m1_12 [label="Entry Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfWordsTruncator(string, int, string)", span="50-50", cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfWordsTruncator(string, int, string)", file="InstanceBuilderTests.cs"];
m1_13 [label="Assert.Equal(expectedOutput, input.Truncate(length, Truncator.FixedNumberOfWords))", span="52-52", cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfWordsTruncator(string, int, string)", file="InstanceBuilderTests.cs"];
m1_14 [label="Exit Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfWordsTruncator(string, int, string)", span="50-50", cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfWordsTruncator(string, int, string)", file="InstanceBuilderTests.cs"];
m2_4 [label="return string.Format(''menos {0}'', Convert(Math.Abs(number)));", span="33-33", cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="NameLookup.cs"];
m2_37 [label="Entry System.Collections.Generic.List<T>.ToArray()", span="0-0", cluster="System.Collections.Generic.List<T>.ToArray()", file="NameLookup.cs"];
m2_35 [label="Entry string.Format(string, params object[])", span="0-0", cluster="string.Format(string, params object[])", file="NameLookup.cs"];
m2_3 [label="number < 0", span="32-32", cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="NameLookup.cs"];
m2_12 [label="(number / 1000) > 0", span="55-55", cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="NameLookup.cs"];
m2_13 [label="parts.Add(number / 1000 == 1\r\n                    ? string.Format(''mil'')\r\n                    : string.Format(''{0} mil'', Convert(number / 1000)))", span="57-59", cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="NameLookup.cs"];
m2_14 [label="number %= 1000", span="61-61", cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="NameLookup.cs"];
m2_49 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.TryGetValue(TKey, out TValue)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.TryGetValue(TKey, out TValue)", file="NameLookup.cs"];
m2_9 [label="(number / 1000000) > 0", span="46-46", cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="NameLookup.cs"];
m2_10 [label="parts.Add(number / 1000000 == 1\r\n                    ? string.Format(''un millón'')\r\n                    : string.Format(''{0} millones'', Convert(number / 1000000)))", span="48-50", cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="NameLookup.cs"];
m2_11 [label="number %= 1000000", span="52-52", cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="NameLookup.cs"];
m2_36 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)", file="NameLookup.cs"];
m2_6 [label="(number / 1000000000) > 0", span="37-37", cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="NameLookup.cs"];
m2_7 [label="parts.Add(number / 1000000000 == 1\r\n                    ? string.Format(''mil millones'')\r\n                    : string.Format(''{0} mil millones'', Convert(number / 1000000000)))", span="39-41", cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="NameLookup.cs"];
m2_8 [label="number %= 1000000000", span="43-43", cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="NameLookup.cs"];
m2_39 [label="Entry Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.ConvertToOrdinal(int, Humanizer.GrammaticalGender)", span="94-94", cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.ConvertToOrdinal(int, Humanizer.GrammaticalGender)", file="NameLookup.cs"];
m2_40 [label="string towords", span="96-96", cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.ConvertToOrdinal(int, Humanizer.GrammaticalGender)", file="NameLookup.cs"];
m2_42 [label="towords = Convert(number)", span="98-98", cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.ConvertToOrdinal(int, Humanizer.GrammaticalGender)", file="NameLookup.cs"];
m2_41 [label="!Ordinals.TryGetValue(number, out towords)", span="97-97", cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.ConvertToOrdinal(int, Humanizer.GrammaticalGender)", file="NameLookup.cs"];
m2_43 [label="gender == GrammaticalGender.Feminine", span="100-100", cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.ConvertToOrdinal(int, Humanizer.GrammaticalGender)", file="NameLookup.cs"];
m2_44 [label="towords = towords.TrimEnd('o') + ''a''", span="101-101", cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.ConvertToOrdinal(int, Humanizer.GrammaticalGender)", file="NameLookup.cs"];
m2_46 [label="towords = towords.TrimEnd('o')", span="103-103", cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.ConvertToOrdinal(int, Humanizer.GrammaticalGender)", file="NameLookup.cs"];
m2_47 [label="return towords;", span="105-105", cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.ConvertToOrdinal(int, Humanizer.GrammaticalGender)", file="NameLookup.cs"];
m2_45 [label="number % 10 == 1 || number % 10 == 3", span="102-102", cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.ConvertToOrdinal(int, Humanizer.GrammaticalGender)", file="NameLookup.cs"];
m2_48 [label="Exit Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.ConvertToOrdinal(int, Humanizer.GrammaticalGender)", span="94-94", cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.ConvertToOrdinal(int, Humanizer.GrammaticalGender)", file="NameLookup.cs"];
m2_32 [label="Entry System.Math.Abs(int)", span="0-0", cluster="System.Math.Abs(int)", file="NameLookup.cs"];
m2_33 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="NameLookup.cs"];
m2_38 [label="Entry string.Join(string, params string[])", span="0-0", cluster="string.Join(string, params string[])", file="NameLookup.cs"];
m2_0 [label="Entry CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line(CommandLine.Tests.Fakes.FakeOptions, string)", span="21-21", cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line(CommandLine.Tests.Fakes.FakeOptions, string)", file="NameLookup.cs"];
m2_1 [label="new Parser()\r                .FormatCommandLine(options)\r                .ShouldBeEquivalentTo(result)", span="23-25", cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line(CommandLine.Tests.Fakes.FakeOptions, string)", color=green, community=0, file="NameLookup.cs"];
m2_2 [label="Exit CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line(CommandLine.Tests.Fakes.FakeOptions, string)", span="21-21", cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line(CommandLine.Tests.Fakes.FakeOptions, string)", file="NameLookup.cs"];
m2_15 [label="(number / 100) > 0", span="64-64", cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="NameLookup.cs"];
m2_16 [label="parts.Add(number == 100 ? string.Format(''cien'') : HundredsMap[(number / 100)])", span="66-66", cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="NameLookup.cs"];
m2_17 [label="number %= 100", span="67-67", cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="NameLookup.cs"];
m2_18 [label="number > 0", span="70-70", cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="NameLookup.cs"];
m2_19 [label="number < 30", span="72-72", cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="NameLookup.cs"];
m2_20 [label="parts.Add(UnitsMap[number])", span="73-73", cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="NameLookup.cs"];
m2_21 [label="number > 20 && number < 30", span="74-74", cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="NameLookup.cs"];
m2_22 [label="var lastPart = TensMap[number / 10]", span="75-75", cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="NameLookup.cs"];
m2_23 [label="(number % 10) > 0", span="76-76", cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="NameLookup.cs"];
m2_24 [label="lastPart += string.Format('' {0}'', UnitsMap[number % 10])", span="77-77", cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="NameLookup.cs"];
m2_26 [label="var lastPart = TensMap[number / 10]", span="83-83", cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="NameLookup.cs"];
m2_27 [label="(number % 10) > 0", span="84-84", cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="NameLookup.cs"];
m2_28 [label="lastPart += string.Format('' y {0}'', UnitsMap[number % 10])", span="85-85", cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="NameLookup.cs"];
m2_5 [label="Entry Unk.ShouldBeEquivalentTo", span="", cluster="Unk.ShouldBeEquivalentTo", file="NameLookup.cs"];
m2_30 [label="return string.Join('' '', parts.ToArray());", span="91-91", cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="NameLookup.cs"];
m2_25 [label="parts.Add(lastPart)", span="79-79", cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="NameLookup.cs"];
m2_29 [label="parts.Add(lastPart)", span="87-87", cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="NameLookup.cs"];
m2_31 [label="Exit Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", span="27-27", cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="NameLookup.cs"];
m2_50 [label="Entry string.TrimEnd(params char[])", span="0-0", cluster="string.TrimEnd(params char[])", file="NameLookup.cs"];
m2_34 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="NameLookup.cs"];
m2_51 [label="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter", span="", file="NameLookup.cs"];
m4_79 [label="Entry System.Text.RegularExpressions.Regex.Replace(string, string)", span="0-0", cluster="System.Text.RegularExpressions.Regex.Replace(string, string)", file="Tokenizer.cs"];
m4_153 [label="Entry Humanizer.InflectorExtensions.Underscore(string)", span="297-297", cluster="Humanizer.InflectorExtensions.Underscore(string)", file="Tokenizer.cs"];
m4_154 [label="return Regex.Replace(\r\n                Regex.Replace(\r\n                    Regex.Replace(input, @''([A-Z]+)([A-Z][a-z])'', ''$1_$2''), @''([a-z\d])([A-Z])'', ''$1_$2''), @''[-\s]'', ''_'').ToLower();", span="299-301", cluster="Humanizer.InflectorExtensions.Underscore(string)", file="Tokenizer.cs"];
m4_155 [label="Exit Humanizer.InflectorExtensions.Underscore(string)", span="297-297", cluster="Humanizer.InflectorExtensions.Underscore(string)", file="Tokenizer.cs"];
m4_96 [label="Entry Humanizer.InflectorExtensions.Pluralize(string, bool)", span="187-187", cluster="Humanizer.InflectorExtensions.Pluralize(string, bool)", file="Tokenizer.cs"];
m4_97 [label="var result = ApplyRules(Plurals, word)", span="189-189", cluster="Humanizer.InflectorExtensions.Pluralize(string, bool)", file="Tokenizer.cs"];
m4_100 [label="var asSingular = ApplyRules(Singulars, word)", span="194-194", cluster="Humanizer.InflectorExtensions.Pluralize(string, bool)", file="Tokenizer.cs"];
m4_101 [label="var asSingularAsPlural = ApplyRules(Plurals, asSingular)", span="195-195", cluster="Humanizer.InflectorExtensions.Pluralize(string, bool)", file="Tokenizer.cs"];
m4_98 [label=inputIsKnownToBeSingular, span="191-191", cluster="Humanizer.InflectorExtensions.Pluralize(string, bool)", file="Tokenizer.cs"];
m4_99 [label="return result;", span="192-192", cluster="Humanizer.InflectorExtensions.Pluralize(string, bool)", file="Tokenizer.cs"];
m4_102 [label="asSingular != null && asSingular != word && asSingular + ''s'' != word && asSingularAsPlural == word && result != word", span="196-196", cluster="Humanizer.InflectorExtensions.Pluralize(string, bool)", file="Tokenizer.cs"];
m4_104 [label="return result;", span="199-199", cluster="Humanizer.InflectorExtensions.Pluralize(string, bool)", file="Tokenizer.cs"];
m4_103 [label="return word;", span="197-197", cluster="Humanizer.InflectorExtensions.Pluralize(string, bool)", file="Tokenizer.cs"];
m4_105 [label="Exit Humanizer.InflectorExtensions.Pluralize(string, bool)", span="187-187", cluster="Humanizer.InflectorExtensions.Pluralize(string, bool)", file="Tokenizer.cs"];
m4_143 [label="Entry System.Text.RegularExpressions.Regex.Replace(string, string, System.Text.RegularExpressions.MatchEvaluator)", span="0-0", cluster="System.Text.RegularExpressions.Regex.Replace(string, string, System.Text.RegularExpressions.MatchEvaluator)", file="Tokenizer.cs"];
m4_73 [label="Entry Humanizer.InflectorExtensions.Rule.Apply(string)", span="133-133", cluster="Humanizer.InflectorExtensions.Rule.Apply(string)", file="Tokenizer.cs"];
m4_74 [label="!_regex.IsMatch(word)", span="135-135", cluster="Humanizer.InflectorExtensions.Rule.Apply(string)", file="Tokenizer.cs"];
m4_76 [label="return _regex.Replace(word, _replacement);", span="140-140", cluster="Humanizer.InflectorExtensions.Rule.Apply(string)", file="Tokenizer.cs"];
m4_75 [label="return null;", span="137-137", cluster="Humanizer.InflectorExtensions.Rule.Apply(string)", file="Tokenizer.cs"];
m4_77 [label="Exit Humanizer.InflectorExtensions.Rule.Apply(string)", span="133-133", cluster="Humanizer.InflectorExtensions.Rule.Apply(string)", file="Tokenizer.cs"];
m4_0 [label="Entry Humanizer.InflectorExtensions.InflectorExtensions()", span="53-53", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", file="Tokenizer.cs"];
m4_5 [label="AddPlural(''(alias|status)$'', ''$1es'')", span="59-59", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs"];
m4_4 [label="AddPlural(''(octop|vir|alumn|fung)us$'', ''$1i'')", span="58-58", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", file="Tokenizer.cs"];
m4_6 [label="AddPlural(''(bu)s$'', ''$1ses'')", span="60-60", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs"];
m4_7 [label="AddPlural(''(buffal|tomat|volcan)o$'', ''$1oes'')", span="61-61", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs"];
m4_8 [label="AddPlural(''([ti])um$'', ''$1a'')", span="62-62", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs"];
m4_9 [label="AddPlural(''sis$'', ''ses'')", span="63-63", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs"];
m4_10 [label="AddPlural(''(?:([^f])fe|([lr])f)$'', ''$1$2ves'')", span="64-64", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs"];
m4_11 [label="AddPlural(''(hive)$'', ''$1s'')", span="65-65", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs"];
m4_12 [label="AddPlural(''([^aeiouy]|qu)y$'', ''$1ies'')", span="66-66", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs"];
m4_13 [label="AddPlural(''(x|ch|ss|sh)$'', ''$1es'')", span="67-67", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs"];
m4_14 [label="AddPlural(''(matr|vert|ind)ix|ex$'', ''$1ices'')", span="68-68", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs"];
m4_15 [label="AddPlural(''([m|l])ouse$'', ''$1ice'')", span="69-69", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs"];
m4_16 [label="AddPlural(''^(ox)$'', ''$1en'')", span="70-70", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs"];
m4_17 [label="AddPlural(''(quiz)$'', ''$1zes'')", span="71-71", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs"];
m4_18 [label="AddPlural(''(campus)$'', ''$1es'')", span="72-72", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs"];
m4_19 [label="AddSingular(''s$'', '''')", span="74-74", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs"];
m4_20 [label="AddSingular(''(n)ews$'', ''$1ews'')", span="75-75", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs"];
m4_21 [label="AddSingular(''([ti])a$'', ''$1um'')", span="76-76", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs"];
m4_22 [label="AddSingular(''((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$'', ''$1$2sis'')", span="77-77", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs"];
m4_23 [label="AddSingular(''(^analy)ses$'', ''$1sis'')", span="78-78", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs"];
m4_24 [label="AddSingular(''([^f])ves$'', ''$1fe'')", span="79-79", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs"];
m4_25 [label="AddSingular(''(hive)s$'', ''$1'')", span="80-80", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs"];
m4_26 [label="AddSingular(''(tive)s$'', ''$1'')", span="81-81", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs"];
m4_27 [label="AddSingular(''([lr])ves$'', ''$1f'')", span="82-82", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs"];
m4_28 [label="AddSingular(''([^aeiouy]|qu)ies$'', ''$1y'')", span="83-83", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs"];
m4_29 [label="AddSingular(''(s)eries$'', ''$1eries'')", span="84-84", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs"];
m4_30 [label="AddSingular(''(m)ovies$'', ''$1ovie'')", span="85-85", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs"];
m4_31 [label="AddSingular(''(x|ch|ss|sh)es$'', ''$1'')", span="86-86", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs"];
m4_32 [label="AddSingular(''([m|l])ice$'', ''$1ouse'')", span="87-87", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs"];
m4_33 [label="AddSingular(''(bus)es$'', ''$1'')", span="88-88", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs"];
m4_34 [label="AddSingular(''(o)es$'', ''$1'')", span="89-89", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs"];
m4_35 [label="AddSingular(''(shoe)s$'', ''$1'')", span="90-90", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs"];
m4_36 [label="AddSingular(''(cris|ax|test)es$'', ''$1is'')", span="91-91", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs"];
m4_37 [label="AddSingular(''(octop|vir|alumn|fung)i$'', ''$1us'')", span="92-92", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs"];
m4_38 [label="AddSingular(''(alias|status)es$'', ''$1'')", span="93-93", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs"];
m4_39 [label="AddSingular(''^(ox)en'', ''$1'')", span="94-94", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", file="Tokenizer.cs"];
m4_40 [label="AddSingular(''(vert|ind)ices$'', ''$1ex'')", span="95-95", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs"];
m4_41 [label="AddSingular(''(matr)ices$'', ''$1ix'')", span="96-96", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs"];
m4_42 [label="AddSingular(''(quiz)zes$'', ''$1'')", span="97-97", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs"];
m4_43 [label="AddSingular(''(campus)es$'', ''$1'')", span="98-98", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs"];
m4_44 [label="AddIrregular(''person'', ''people'')", span="100-100", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs"];
m4_45 [label="AddIrregular(''man'', ''men'')", span="101-101", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs"];
m4_46 [label="AddIrregular(''child'', ''children'')", span="102-102", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs"];
m4_47 [label="AddIrregular(''sex'', ''sexes'')", span="103-103", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs"];
m4_48 [label="AddIrregular(''move'', ''moves'')", span="104-104", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs"];
m4_49 [label="AddIrregular(''goose'', ''geese'')", span="105-105", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs"];
m4_50 [label="AddIrregular(''alumna'', ''alumnae'')", span="106-106", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs"];
m4_51 [label="AddIrregular(''criterion'', ''criteria'')", span="107-107", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", file="Tokenizer.cs"];
m4_3 [label="AddPlural(''(ax|test)is$'', ''$1es'')", span="57-57", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", file="Tokenizer.cs"];
m4_1 [label="AddPlural(''$'', ''s'')", span="55-55", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", file="Tokenizer.cs"];
m4_2 [label="AddPlural(''s$'', ''s'')", span="56-56", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", file="Tokenizer.cs"];
m4_52 [label="AddIrregular(''wave'',''waves'')", span="108-108", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", file="Tokenizer.cs"];
m4_53 [label="AddUncountable(''equipment'')", span="110-110", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", file="Tokenizer.cs"];
m4_54 [label="AddUncountable(''information'')", span="111-111", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", file="Tokenizer.cs"];
m4_62 [label="AddUncountable(''aircraft'')", span="119-119", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", file="Tokenizer.cs"];
m4_55 [label="AddUncountable(''rice'')", span="112-112", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", file="Tokenizer.cs"];
m4_56 [label="AddUncountable(''money'')", span="113-113", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", file="Tokenizer.cs"];
m4_57 [label="AddUncountable(''species'')", span="114-114", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", file="Tokenizer.cs"];
m4_58 [label="AddUncountable(''series'')", span="115-115", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", file="Tokenizer.cs"];
m4_59 [label="AddUncountable(''fish'')", span="116-116", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", file="Tokenizer.cs"];
m4_60 [label="AddUncountable(''sheep'')", span="117-117", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", file="Tokenizer.cs"];
m4_61 [label="AddUncountable(''deer'')", span="118-118", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", file="Tokenizer.cs"];
m4_63 [label="Exit Humanizer.InflectorExtensions.InflectorExtensions()", span="53-53", cluster="Humanizer.InflectorExtensions.InflectorExtensions()", file="Tokenizer.cs"];
m4_106 [label="Entry Humanizer.InflectorExtensions.ApplyRules(System.Collections.Generic.IList<Humanizer.InflectorExtensions.Rule>, string)", span="237-237", cluster="Humanizer.InflectorExtensions.ApplyRules(System.Collections.Generic.IList<Humanizer.InflectorExtensions.Rule>, string)", file="Tokenizer.cs"];
m4_123 [label="IsUncountable(word)", span="242-242", cluster="Humanizer.InflectorExtensions.ApplyRules(System.Collections.Generic.IList<Humanizer.InflectorExtensions.Rule>, string)", file="Tokenizer.cs"];
m4_128 [label="(result = rules[i].Apply(word)) != null", span="248-248", cluster="Humanizer.InflectorExtensions.ApplyRules(System.Collections.Generic.IList<Humanizer.InflectorExtensions.Rule>, string)", file="Tokenizer.cs"];
m4_121 [label="word == null", span="239-239", cluster="Humanizer.InflectorExtensions.ApplyRules(System.Collections.Generic.IList<Humanizer.InflectorExtensions.Rule>, string)", file="Tokenizer.cs"];
m4_124 [label="return word;", span="243-243", cluster="Humanizer.InflectorExtensions.ApplyRules(System.Collections.Generic.IList<Humanizer.InflectorExtensions.Rule>, string)", file="Tokenizer.cs"];
m4_125 [label="var result = word", span="245-245", cluster="Humanizer.InflectorExtensions.ApplyRules(System.Collections.Generic.IList<Humanizer.InflectorExtensions.Rule>, string)", file="Tokenizer.cs"];
m4_126 [label="int i = rules.Count - 1", span="246-246", cluster="Humanizer.InflectorExtensions.ApplyRules(System.Collections.Generic.IList<Humanizer.InflectorExtensions.Rule>, string)", file="Tokenizer.cs"];
m4_127 [label="i >= 0", span="246-246", cluster="Humanizer.InflectorExtensions.ApplyRules(System.Collections.Generic.IList<Humanizer.InflectorExtensions.Rule>, string)", file="Tokenizer.cs"];
m4_129 [label="i--", span="246-246", cluster="Humanizer.InflectorExtensions.ApplyRules(System.Collections.Generic.IList<Humanizer.InflectorExtensions.Rule>, string)", file="Tokenizer.cs"];
m4_130 [label="return result;", span="253-253", cluster="Humanizer.InflectorExtensions.ApplyRules(System.Collections.Generic.IList<Humanizer.InflectorExtensions.Rule>, string)", file="Tokenizer.cs"];
m4_122 [label="return null;", span="240-240", cluster="Humanizer.InflectorExtensions.ApplyRules(System.Collections.Generic.IList<Humanizer.InflectorExtensions.Rule>, string)", file="Tokenizer.cs"];
m4_131 [label="Exit Humanizer.InflectorExtensions.ApplyRules(System.Collections.Generic.IList<Humanizer.InflectorExtensions.Rule>, string)", span="237-237", cluster="Humanizer.InflectorExtensions.ApplyRules(System.Collections.Generic.IList<Humanizer.InflectorExtensions.Rule>, string)", file="Tokenizer.cs"];
m4_152 [label="Entry string.Substring(int, int)", span="0-0", cluster="string.Substring(int, int)", file="Tokenizer.cs"];
m4_68 [label="Entry Humanizer.InflectorExtensions.Rule.Rule(string, string)", span="127-127", cluster="Humanizer.InflectorExtensions.Rule.Rule(string, string)", file="Tokenizer.cs"];
m4_69 [label="_regex = new Regex(pattern, RegexOptions.IgnoreCase | RegexOptionsUtil.Compiled)", span="129-129", cluster="Humanizer.InflectorExtensions.Rule.Rule(string, string)", file="Tokenizer.cs"];
m4_70 [label="_replacement = replacement", span="130-130", cluster="Humanizer.InflectorExtensions.Rule.Rule(string, string)", file="Tokenizer.cs"];
m4_71 [label="Exit Humanizer.InflectorExtensions.Rule.Rule(string, string)", span="127-127", cluster="Humanizer.InflectorExtensions.Rule.Rule(string, string)", file="Tokenizer.cs"];
m4_78 [label="Entry System.Text.RegularExpressions.Regex.IsMatch(string)", span="0-0", cluster="System.Text.RegularExpressions.Regex.IsMatch(string)", file="Tokenizer.cs"];
m4_64 [label="Entry Humanizer.InflectorExtensions.AddPlural(string, string)", span="155-155", cluster="Humanizer.InflectorExtensions.AddPlural(string, string)", file="Tokenizer.cs"];
m4_88 [label="Plurals.Add(new Rule(rule, replacement))", span="157-157", cluster="Humanizer.InflectorExtensions.AddPlural(string, string)", file="Tokenizer.cs"];
m4_89 [label="Exit Humanizer.InflectorExtensions.AddPlural(string, string)", span="155-155", cluster="Humanizer.InflectorExtensions.AddPlural(string, string)", file="Tokenizer.cs"];
m4_65 [label="Entry Humanizer.InflectorExtensions.AddSingular(string, string)", span="160-160", cluster="Humanizer.InflectorExtensions.AddSingular(string, string)", file="Tokenizer.cs"];
m4_90 [label="Singulars.Add(new Rule(rule, replacement))", span="162-162", cluster="Humanizer.InflectorExtensions.AddSingular(string, string)", file="Tokenizer.cs"];
m4_91 [label="Exit Humanizer.InflectorExtensions.AddSingular(string, string)", span="160-160", cluster="Humanizer.InflectorExtensions.AddSingular(string, string)", file="Tokenizer.cs"];
m4_144 [label="Entry lambda expression", span="278-278", cluster="lambda expression", file="Tokenizer.cs"];
m4_145 [label="match.Groups[1].Value.ToUpper()", span="278-278", cluster="lambda expression", file="Tokenizer.cs"];
m4_146 [label="Exit lambda expression", span="278-278", cluster="lambda expression", file="Tokenizer.cs"];
m4_156 [label="Entry System.Text.RegularExpressions.Regex.Replace(string, string, string)", span="0-0", cluster="System.Text.RegularExpressions.Regex.Replace(string, string, string)", file="Tokenizer.cs"];
m4_148 [label="Entry Humanizer.InflectorExtensions.Camelize(string)", span="286-286", cluster="Humanizer.InflectorExtensions.Camelize(string)", file="Tokenizer.cs"];
m4_150 [label="return word.Substring(0, 1).ToLower() + word.Substring(1);", span="289-289", cluster="Humanizer.InflectorExtensions.Camelize(string)", file="Tokenizer.cs"];
m4_149 [label="string word = Pascalize(input)", span="288-288", cluster="Humanizer.InflectorExtensions.Camelize(string)", file="Tokenizer.cs"];
m4_151 [label="Exit Humanizer.InflectorExtensions.Camelize(string)", span="286-286", cluster="Humanizer.InflectorExtensions.Camelize(string)", file="Tokenizer.cs"];
m4_66 [label="Entry Humanizer.InflectorExtensions.AddIrregular(string, string)", span="144-144", cluster="Humanizer.InflectorExtensions.AddIrregular(string, string)", file="Tokenizer.cs"];
m4_80 [label="AddPlural(''('' + singular[0] + '')'' + singular.Substring(1) + ''$'', ''$1'' + plural.Substring(1))", span="146-146", cluster="Humanizer.InflectorExtensions.AddIrregular(string, string)", file="Tokenizer.cs"];
m4_81 [label="AddSingular(''('' + plural[0] + '')'' + plural.Substring(1) + ''$'', ''$1'' + singular.Substring(1))", span="147-147", cluster="Humanizer.InflectorExtensions.AddIrregular(string, string)", file="Tokenizer.cs"];
m4_82 [label="Exit Humanizer.InflectorExtensions.AddIrregular(string, string)", span="144-144", cluster="Humanizer.InflectorExtensions.AddIrregular(string, string)", file="Tokenizer.cs"];
m4_140 [label="Entry Humanizer.InflectorExtensions.Pascalize(string)", span="276-276", cluster="Humanizer.InflectorExtensions.Pascalize(string)", file="Tokenizer.cs"];
m4_141 [label="return Regex.Replace(input, ''(?:^|_)(.)'', match => match.Groups[1].Value.ToUpper());", span="278-278", cluster="Humanizer.InflectorExtensions.Pascalize(string)", file="Tokenizer.cs"];
m4_142 [label="Exit Humanizer.InflectorExtensions.Pascalize(string)", span="276-276", cluster="Humanizer.InflectorExtensions.Pascalize(string)", file="Tokenizer.cs"];
m4_67 [label="Entry Humanizer.InflectorExtensions.AddUncountable(string)", span="150-150", cluster="Humanizer.InflectorExtensions.AddUncountable(string)", file="Tokenizer.cs"];
m4_84 [label="Uncountables.Add(word.ToLower())", span="152-152", cluster="Humanizer.InflectorExtensions.AddUncountable(string)", file="Tokenizer.cs"];
m4_85 [label="Exit Humanizer.InflectorExtensions.AddUncountable(string)", span="150-150", cluster="Humanizer.InflectorExtensions.AddUncountable(string)", file="Tokenizer.cs"];
m4_86 [label="Entry string.ToLower()", span="0-0", cluster="string.ToLower()", file="Tokenizer.cs"];
m4_111 [label="Entry Humanizer.InflectorExtensions.Singularize(string, bool)", span="220-220", cluster="Humanizer.InflectorExtensions.Singularize(string, bool)", file="Tokenizer.cs"];
m4_112 [label="var result = ApplyRules(Singulars, word)", span="223-223", cluster="Humanizer.InflectorExtensions.Singularize(string, bool)", file="Tokenizer.cs"];
m4_115 [label="var asPlural = ApplyRules(Plurals, word)", span="229-229", cluster="Humanizer.InflectorExtensions.Singularize(string, bool)", file="Tokenizer.cs"];
m4_116 [label="var asPluralAsSingular = ApplyRules(Singulars, asPlural)", span="230-230", cluster="Humanizer.InflectorExtensions.Singularize(string, bool)", file="Tokenizer.cs"];
m4_113 [label=inputIsKnownToBePlural, span="225-225", cluster="Humanizer.InflectorExtensions.Singularize(string, bool)", file="Tokenizer.cs"];
m4_114 [label="return result;", span="226-226", cluster="Humanizer.InflectorExtensions.Singularize(string, bool)", file="Tokenizer.cs"];
m4_117 [label="asPlural != word && word + ''s'' != asPlural && asPluralAsSingular == word && result != word", span="231-231", cluster="Humanizer.InflectorExtensions.Singularize(string, bool)", file="Tokenizer.cs"];
m4_119 [label="return result ?? word;", span="234-234", cluster="Humanizer.InflectorExtensions.Singularize(string, bool)", file="Tokenizer.cs"];
m4_118 [label="return word;", span="232-232", cluster="Humanizer.InflectorExtensions.Singularize(string, bool)", file="Tokenizer.cs"];
m4_120 [label="Exit Humanizer.InflectorExtensions.Singularize(string, bool)", span="220-220", cluster="Humanizer.InflectorExtensions.Singularize(string, bool)", file="Tokenizer.cs"];
m4_87 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)", file="Tokenizer.cs"];
m4_132 [label="Entry Humanizer.InflectorExtensions.IsUncountable(string)", span="256-256", cluster="Humanizer.InflectorExtensions.IsUncountable(string)", file="Tokenizer.cs"];
m4_133 [label="return Uncountables.Contains(word.ToLower());", span="258-258", cluster="Humanizer.InflectorExtensions.IsUncountable(string)", file="Tokenizer.cs"];
m4_134 [label="Exit Humanizer.InflectorExtensions.IsUncountable(string)", span="256-256", cluster="Humanizer.InflectorExtensions.IsUncountable(string)", file="Tokenizer.cs"];
m4_147 [label="Entry string.ToUpper()", span="0-0", cluster="string.ToUpper()", file="Tokenizer.cs"];
m4_72 [label="Entry System.Text.RegularExpressions.Regex.Regex(string, System.Text.RegularExpressions.RegexOptions)", span="0-0", cluster="System.Text.RegularExpressions.Regex.Regex(string, System.Text.RegularExpressions.RegexOptions)", file="Tokenizer.cs"];
m4_135 [label="Entry System.Collections.Generic.List<T>.Contains(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Contains(T)", file="Tokenizer.cs"];
m4_83 [label="Entry string.Substring(int)", span="0-0", cluster="string.Substring(int)", file="Tokenizer.cs"];
m4_164 [label="Humanizer.InflectorExtensions.Rule", span="", file="Tokenizer.cs"];
d1 -> d2  [key=0, style=solid, color=green];
d1 -> d3  [key=2, style=dotted, color=green];
d1 -> d4  [key=2, style=dotted, color=green];
d1 -> d5  [key=2, style=dotted, color=green];
d0 -> d1  [key=0, style=solid, color=green];
d2 -> d0  [key=0, style=bold, color=blue];
d4 -> d31  [key=0, style=solid];
d5 -> d6  [key=0, style=solid];
d5 -> d7  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
d5 -> d21  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
d46 -> d47  [key=0, style=solid, color=green];
d46 -> d48  [key=2, style=dotted, color=green];
d46 -> d49  [key=2, style=dotted, color=green];
d46 -> d50  [key=2, style=dotted, color=green];
d35 -> d46  [key=1, style=dashed, color=green, label=string];
d35 -> d44  [key=0, style=solid];
d35 -> d52  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d35 -> d60  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d35 -> d61  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d35 -> d68  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d35 -> d62  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d35 -> d63  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
d35 -> d73  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
d35 -> d53  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d35 -> d45  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d35 -> d82  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d44 -> d46  [key=1, style=dashed, color=green, label=changeType];
d44 -> d45  [key=0, style=solid];
d44 -> d52  [key=1, style=dashed, color=darkseagreen4, label=string];
d44 -> d63  [key=1, style=dashed, color=darkseagreen4, label=string];
d44 -> d73  [key=1, style=dashed, color=darkseagreen4, label=string];
d44 -> d65  [key=1, style=dashed, color=darkseagreen4, label=string];
d44 -> d53  [key=1, style=dashed, color=darkseagreen4, label=string];
d45 -> d46  [key=0, style=solid, color=green];
d45 -> d83  [key=1, style=dashed, color=darkseagreen4, label=string];
d47 -> d35  [key=0, style=bold, color=blue];
d91 -> d92  [key=0, style=solid, color=green];
d90 -> d91  [key=0, style=solid, color=green];
d90 -> d92  [key=1, style=dashed, color=green, label=string];
d90 -> d95  [key=1, style=dashed, color=green, label="System.Type"];
d92 -> d93  [key=0, style=solid, color=green];
d92 -> d95  [key=0, style=solid, color=green];
d92 -> d99  [key=2, style=dotted, color=green];
d92 -> d96  [key=1, style=dashed, color=green, label=parsedValue];
d93 -> d94  [key=0, style=solid, color=green];
d95 -> d96  [key=0, style=solid, color=green];
d95 -> d97  [key=0, style=solid, color=green];
d95 -> d101  [key=2, style=dotted, color=green];
d96 -> d98  [key=0, style=solid, color=green];
d97 -> d98  [key=0, style=solid, color=green];
d97 -> d100  [key=2, style=dotted, color=green];
d94 -> d98  [key=0, style=solid, color=green];
d94 -> d100  [key=2, style=dotted, color=green];
d98 -> d90  [key=0, style=bold, color=blue];
d34 -> d4  [key=0, style=bold, color=blue];
d31 -> d35  [key=2, style=dotted];
d31 -> d32  [key=0, style=solid];
d31 -> d33  [key=1, style=dashed, color=darkseagreen4, label=result];
d9 -> d5  [key=0, style=bold, color=blue];
d6 -> d7  [key=0, style=solid];
d6 -> d10  [key=2, style=dotted];
d6 -> d11  [key=2, style=dotted];
d6 -> d12  [key=2, style=dotted];
d6 -> d13  [key=2, style=dotted];
d6 -> d14  [key=2, style=dotted];
d6 -> d21  [key=1, style=dashed, color=darkseagreen4, label=type];
d6 -> d8  [key=1, style=dashed, color=darkseagreen4, label=type];
d7 -> d8  [key=0, style=solid];
d7 -> d15  [key=2, style=dotted];
d7 -> d20  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d21 -> d22  [key=0, style=solid];
d21 -> d23  [key=2, style=dotted];
d52 -> d53  [key=0, style=solid];
d60 -> d49  [key=2, style=dotted];
d60 -> d61  [key=0, style=solid];
d60 -> d68  [key=1, style=dashed, color=darkseagreen4, label=isFsOption];
d60 -> d63  [key=1, style=dashed, color=darkseagreen4, label=isFsOption];
d60 -> d73  [key=1, style=dashed, color=darkseagreen4, label=isFsOption];
d60 -> d64  [key=1, style=dashed, color=darkseagreen4, label=isFsOption];
d60 -> d78  [key=1, style=dashed, color=darkseagreen4, label=isFsOption];
d61 -> d62  [key=0, style=solid];
d68 -> d69  [key=0, style=solid];
d68 -> d70  [key=2, style=dotted];
d68 -> d71  [key=2, style=dotted];
d62 -> d63  [key=0, style=solid];
d62 -> d58  [key=2, style=dotted];
d62 -> d73  [key=1, style=dashed, color=darkseagreen4, label=type];
d62 -> d64  [key=1, style=dashed, color=darkseagreen4, label=type];
d62 -> d78  [key=1, style=dashed, color=darkseagreen4, label=type];
d63 -> d64  [key=0, style=solid];
d63 -> d65  [key=1, style=dashed, color=darkseagreen4, label=withValue];
d73 -> d74  [key=0, style=solid];
d73 -> d75  [key=2, style=dotted];
d73 -> d76  [key=2, style=dotted];
d53 -> d54  [key=0, style=solid];
d53 -> d55  [key=2, style=dotted];
d53 -> d56  [key=2, style=dotted];
d53 -> d57  [key=2, style=dotted];
d53 -> d58  [key=2, style=dotted];
d82 -> d83  [key=0, style=solid];
d82 -> d87  [key=2, style=dotted];
d65 -> d66  [key=0, style=solid];
d65 -> d58  [key=2, style=dotted];
d83 -> d86  [key=0, style=solid];
d83 -> d88  [key=2, style=dotted];
d33 -> d34  [key=0, style=solid];
d33 -> d37  [key=2, style=dotted];
d32 -> d33  [key=0, style=solid];
d32 -> d36  [key=2, style=dotted];
d32 -> d38  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d32 -> d40  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d8 -> d9  [key=0, style=solid];
d8 -> d16  [key=2, style=dotted];
d8 -> d17  [key=2, style=dotted];
d8 -> d15  [key=2, style=dotted];
d8 -> d18  [key=2, style=dotted];
d8 -> d19  [key=2, style=dotted];
d8 -> d24  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d8 -> d28  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d20 -> d21  [key=0, style=solid];
d102 -> d21  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
d103 -> d21  [key=1, style=dashed, color=darkseagreen4, label=type];
d22 -> d20  [key=0, style=bold, color=blue];
d104 -> d52  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d104 -> d60  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d104 -> d61  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d104 -> d68  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d104 -> d62  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d104 -> d53  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d104 -> d82  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d105 -> d52  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
d105 -> d63  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
d105 -> d73  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
d51 -> d52  [key=0, style=solid];
d51 -> d63  [key=1, style=dashed, color=darkseagreen4, label=string];
d51 -> d73  [key=1, style=dashed, color=darkseagreen4, label=string];
d51 -> d53  [key=1, style=dashed, color=darkseagreen4, label=string];
d51 -> d65  [key=1, style=dashed, color=darkseagreen4, label=string];
d59 -> d60  [key=0, style=solid];
d64 -> d65  [key=0, style=solid];
d78 -> d79  [key=0, style=solid];
d78 -> d80  [key=2, style=dotted];
d107 -> d68  [key=1, style=dashed, color=darkseagreen4, label=isFsOption];
d107 -> d73  [key=1, style=dashed, color=darkseagreen4, label=isFsOption];
d107 -> d78  [key=1, style=dashed, color=darkseagreen4, label=isFsOption];
d67 -> d68  [key=0, style=solid];
d69 -> d67  [key=0, style=bold, color=blue];
d106 -> d63  [key=1, style=dashed, color=darkseagreen4, label=string];
d106 -> d73  [key=1, style=dashed, color=darkseagreen4, label=string];
d106 -> d65  [key=1, style=dashed, color=darkseagreen4, label=string];
d108 -> d73  [key=1, style=dashed, color=darkseagreen4, label=type];
d108 -> d78  [key=1, style=dashed, color=darkseagreen4, label=type];
d72 -> d73  [key=0, style=solid];
d74 -> d72  [key=0, style=bold, color=blue];
d54 -> d51  [key=0, style=bold, color=blue];
d81 -> d82  [key=0, style=solid];
d81 -> d83  [key=1, style=dashed, color=darkseagreen4, label=string];
d66 -> d59  [key=0, style=bold, color=blue];
d86 -> d81  [key=0, style=bold, color=blue];
d38 -> d39  [key=0, style=solid];
d40 -> d41  [key=0, style=solid];
d24 -> d25  [key=0, style=solid];
d28 -> d29  [key=0, style=solid];
d77 -> d78  [key=0, style=solid];
d79 -> d77  [key=0, style=bold, color=blue];
d85 -> d86  [key=0, style=solid];
d85 -> d89  [key=2, style=dotted];
d39 -> d38  [key=0, style=bold, color=blue];
d42 -> d40  [key=0, style=bold, color=blue];
d41 -> d42  [key=0, style=solid];
d41 -> d43  [key=2, style=dotted];
d26 -> d24  [key=0, style=bold, color=blue];
d25 -> d26  [key=0, style=solid];
d25 -> d27  [key=2, style=dotted];
d30 -> d28  [key=0, style=bold, color=blue];
d29 -> d30  [key=0, style=solid];
d84 -> d85  [key=0, style=solid];
m0_4 -> m0_5  [key=0, style=solid];
m0_5 -> m0_6  [key=0, style=solid];
m0_5 -> m0_7  [key=2, style=dotted];
m0_6 -> m0_4  [key=0, style=bold, color=blue];
m0_8 -> m0_9  [key=0, style=solid];
m0_9 -> m0_10  [key=0, style=solid];
m0_9 -> m0_11  [key=2, style=dotted];
m0_10 -> m0_8  [key=0, style=bold, color=blue];
m0_12 -> m0_13  [key=0, style=solid];
m0_13 -> m0_14  [key=0, style=solid];
m0_13 -> m0_15  [key=2, style=dotted];
m0_14 -> m0_12  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_3  [key=2, style=dotted];
m0_2 -> m0_0  [key=0, style=bold, color=blue];
m1_35 -> m1_36  [key=0, style=solid];
m1_36 -> m1_37  [key=0, style=solid];
m1_36 -> m1_8  [key=2, style=dotted];
m1_36 -> m1_4  [key=2, style=dotted];
m1_37 -> m1_35  [key=0, style=bold, color=blue];
m1_19 -> m1_20  [key=0, style=solid];
m1_20 -> m1_21  [key=0, style=solid];
m1_20 -> m1_22  [key=2, style=dotted];
m1_20 -> m1_4  [key=2, style=dotted];
m1_21 -> m1_19  [key=0, style=bold, color=blue];
m1_26 -> m1_27  [key=0, style=solid];
m1_27 -> m1_28  [key=0, style=solid];
m1_27 -> m1_22  [key=2, style=dotted];
m1_27 -> m1_4  [key=2, style=dotted];
m1_28 -> m1_26  [key=0, style=bold, color=blue];
m1_44 -> m1_45  [key=0, style=solid];
m1_45 -> m1_46  [key=0, style=solid];
m1_45 -> m1_22  [key=2, style=dotted];
m1_45 -> m1_4  [key=2, style=dotted];
m1_46 -> m1_44  [key=0, style=bold, color=blue];
m1_5 -> m1_6  [key=0, style=solid];
m1_6 -> m1_7  [key=0, style=solid];
m1_6 -> m1_8  [key=2, style=dotted];
m1_6 -> m1_4  [key=2, style=dotted];
m1_7 -> m1_5  [key=0, style=bold, color=blue];
m1_23 -> m1_24  [key=0, style=solid];
m1_24 -> m1_25  [key=0, style=solid];
m1_24 -> m1_22  [key=2, style=dotted];
m1_24 -> m1_4  [key=2, style=dotted];
m1_25 -> m1_23  [key=0, style=bold, color=blue];
m1_29 -> m1_30  [key=0, style=solid];
m1_30 -> m1_31  [key=0, style=solid];
m1_30 -> m1_8  [key=2, style=dotted];
m1_30 -> m1_4  [key=2, style=dotted];
m1_31 -> m1_29  [key=0, style=bold, color=blue];
m1_18 -> m1_18  [key=3, color=darkorchid, style=bold, label="Field variable string BitSymbol"];
m1_0 -> m1_1  [key=0, style=solid];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_3  [key=2, style=dotted];
m1_1 -> m1_4  [key=2, style=dotted];
m1_2 -> m1_0  [key=0, style=bold, color=blue];
m1_38 -> m1_39  [key=0, style=solid];
m1_39 -> m1_40  [key=0, style=solid];
m1_39 -> m1_22  [key=2, style=dotted];
m1_39 -> m1_4  [key=2, style=dotted];
m1_40 -> m1_38  [key=0, style=bold, color=blue];
m1_41 -> m1_42  [key=0, style=solid];
m1_42 -> m1_43  [key=0, style=solid];
m1_42 -> m1_22  [key=2, style=dotted];
m1_42 -> m1_4  [key=2, style=dotted];
m1_43 -> m1_41  [key=0, style=bold, color=blue];
m1_32 -> m1_33  [key=0, style=solid];
m1_33 -> m1_34  [key=0, style=solid];
m1_33 -> m1_8  [key=2, style=dotted];
m1_33 -> m1_4  [key=2, style=dotted];
m1_34 -> m1_32  [key=0, style=bold, color=blue];
m1_15 -> m1_16  [key=0, style=solid];
m1_16 -> m1_17  [key=0, style=solid];
m1_16 -> m1_18  [key=2, style=dotted];
m1_16 -> m1_4  [key=2, style=dotted];
m1_17 -> m1_15  [key=0, style=bold, color=blue];
m1_9 -> m1_10  [key=0, style=solid];
m1_9 -> m1_9  [key=3, color=darkorchid, style=bold, label="Field variable long BytesInMegabyte"];
m1_10 -> m1_11  [key=0, style=solid];
m1_10 -> m1_8  [key=2, style=dotted];
m1_10 -> m1_4  [key=2, style=dotted];
m1_10 -> m1_10  [key=3, color=darkorchid, style=bold, label="Field variable long BytesInTerabyte"];
m1_11 -> m1_9  [key=0, style=bold, color=blue];
m1_22 -> m1_18  [key=3, color=darkorchid, style=bold, label="Property variable string LargestWholeNumberSymbol"];
m1_12 -> m1_13  [key=0, style=solid];
m1_13 -> m1_14  [key=0, style=solid];
m1_13 -> m1_8  [key=2, style=dotted];
m1_13 -> m1_4  [key=2, style=dotted];
m1_14 -> m1_12  [key=0, style=bold, color=blue];
m2_4 -> m2_0  [key=2, style=dotted];
m2_4 -> m2_31  [key=0, style=solid];
m2_4 -> m2_32  [key=2, style=dotted];
m2_4 -> m2_33  [key=2, style=dotted];
m2_3 -> m2_4  [key=0, style=solid];
m2_3 -> m2_5  [key=0, style=solid];
m2_12 -> m2_13  [key=0, style=solid];
m2_12 -> m2_15  [key=0, style=solid];
m2_13 -> m2_14  [key=0, style=solid];
m2_13 -> m2_3  [key=2, style=dotted];
m2_13 -> m2_4  [key=2, style=dotted];
m2_13 -> m2_5  [key=2, style=dotted];
m2_13 -> m2_0  [key=2, style=dotted];
m2_13 -> m2_35  [key=2, style=dotted];
m2_13 -> m2_33  [key=2, style=dotted];
m2_13 -> m2_36  [key=2, style=dotted];
m2_14 -> m2_12  [key=0, style=bold, color=blue];
m2_14 -> m2_14  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_14 -> m2_15  [key=0, style=solid];
m2_14 -> m2_16  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_14 -> m2_17  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_14 -> m2_18  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_14 -> m2_19  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_14 -> m2_20  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_14 -> m2_21  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_14 -> m2_22  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_14 -> m2_23  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_14 -> m2_24  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_14 -> m2_26  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_14 -> m2_27  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_14 -> m2_28  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_9 -> m2_10  [key=0, style=solid];
m2_9 -> m2_12  [key=0, style=solid];
m2_10 -> m2_11  [key=0, style=solid];
m2_10 -> m2_3  [key=2, style=dotted];
m2_10 -> m2_4  [key=2, style=dotted];
m2_10 -> m2_5  [key=2, style=dotted];
m2_10 -> m2_0  [key=2, style=dotted];
m2_10 -> m2_35  [key=2, style=dotted];
m2_10 -> m2_33  [key=2, style=dotted];
m2_10 -> m2_36  [key=2, style=dotted];
m2_11 -> m2_9  [key=0, style=bold, color=blue];
m2_11 -> m2_13  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_11 -> m2_11  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_11 -> m2_12  [key=0, style=solid];
m2_11 -> m2_14  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_11 -> m2_15  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_11 -> m2_16  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_11 -> m2_17  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_11 -> m2_18  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_11 -> m2_19  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_11 -> m2_20  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_11 -> m2_21  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_11 -> m2_22  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_11 -> m2_23  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_11 -> m2_24  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_11 -> m2_26  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_11 -> m2_27  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_11 -> m2_28  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_6 -> m2_7  [key=0, style=solid];
m2_6 -> m2_9  [key=0, style=solid];
m2_7 -> m2_8  [key=0, style=solid];
m2_7 -> m2_3  [key=2, style=dotted];
m2_7 -> m2_4  [key=2, style=dotted];
m2_7 -> m2_5  [key=2, style=dotted];
m2_7 -> m2_0  [key=2, style=dotted];
m2_7 -> m2_35  [key=2, style=dotted];
m2_7 -> m2_33  [key=2, style=dotted];
m2_7 -> m2_36  [key=2, style=dotted];
m2_8 -> m2_6  [key=0, style=bold, color=blue];
m2_8 -> m2_10  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_8 -> m2_13  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_8 -> m2_8  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_8 -> m2_9  [key=0, style=solid];
m2_8 -> m2_11  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_8 -> m2_12  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_8 -> m2_14  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_8 -> m2_15  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_8 -> m2_16  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_8 -> m2_17  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_8 -> m2_18  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_8 -> m2_19  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_8 -> m2_20  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_8 -> m2_21  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_8 -> m2_22  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_8 -> m2_23  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_8 -> m2_24  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_8 -> m2_26  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_8 -> m2_27  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_8 -> m2_28  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_39 -> m2_40  [key=0, style=solid];
m2_39 -> m2_42  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_39 -> m2_41  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_39 -> m2_43  [key=1, style=dashed, color=darkseagreen4, label="Humanizer.GrammaticalGender"];
m2_39 -> m2_45  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_40 -> m2_0  [key=3, color=darkorchid, style=bold, label="Local variable string towords"];
m2_40 -> m2_41  [key=0, style=solid];
m2_42 -> m2_0  [key=2, style=dotted];
m2_42 -> m2_43  [key=0, style=solid];
m2_42 -> m2_44  [key=1, style=dashed, color=darkseagreen4, label=towords];
m2_42 -> m2_46  [key=1, style=dashed, color=darkseagreen4, label=towords];
m2_42 -> m2_47  [key=1, style=dashed, color=darkseagreen4, label=towords];
m2_41 -> m2_42  [key=0, style=solid];
m2_41 -> m2_43  [key=0, style=solid];
m2_41 -> m2_49  [key=2, style=dotted];
m2_41 -> m2_44  [key=1, style=dashed, color=darkseagreen4, label=towords];
m2_41 -> m2_46  [key=1, style=dashed, color=darkseagreen4, label=towords];
m2_41 -> m2_47  [key=1, style=dashed, color=darkseagreen4, label=towords];
m2_43 -> m2_44  [key=0, style=solid];
m2_43 -> m2_45  [key=0, style=solid];
m2_44 -> m2_44  [key=1, style=dashed, color=darkseagreen4, label=towords];
m2_44 -> m2_47  [key=0, style=solid];
m2_44 -> m2_50  [key=2, style=dotted];
m2_46 -> m2_46  [key=1, style=dashed, color=darkseagreen4, label=towords];
m2_46 -> m2_47  [key=0, style=solid];
m2_46 -> m2_50  [key=2, style=dotted];
m2_47 -> m2_48  [key=0, style=solid];
m2_45 -> m2_46  [key=0, style=solid];
m2_45 -> m2_47  [key=0, style=solid];
m2_48 -> m2_39  [key=0, style=bold, color=blue];
m2_0 -> m2_1  [key=0, style=solid, color=green];
m2_0 -> m2_3  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_0 -> m2_4  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_0 -> m2_6  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_0 -> m2_7  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_0 -> m2_8  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_0 -> m2_9  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_0 -> m2_10  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_0 -> m2_11  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_0 -> m2_12  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_0 -> m2_13  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_0 -> m2_14  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_0 -> m2_15  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_0 -> m2_16  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_0 -> m2_17  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_0 -> m2_18  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_0 -> m2_19  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_0 -> m2_20  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_0 -> m2_21  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_0 -> m2_22  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_0 -> m2_23  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_0 -> m2_24  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_0 -> m2_26  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_0 -> m2_27  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_0 -> m2_28  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_0 -> m2_39  [key=3, color=darkorchid, style=bold, label="Parameter variable int number"];
m2_0 -> m2_2  [key=3, color=darkorchid, style=bold, label="method methodReturn string Convert"];
m2_1 -> m2_2  [key=0, style=solid, color=green];
m2_1 -> m2_3  [key=0, style=solid, color=green];
m2_1 -> m2_4  [key=2, style=dotted];
m2_1 -> m2_5  [key=2, style=dotted];
m2_2 -> m2_31  [key=0, style=solid];
m2_2 -> m2_0  [key=0, style=bold, color=blue];
m2_15 -> m2_16  [key=0, style=solid];
m2_15 -> m2_18  [key=0, style=solid];
m2_16 -> m2_17  [key=0, style=solid];
m2_16 -> m2_35  [key=2, style=dotted];
m2_16 -> m2_36  [key=2, style=dotted];
m2_17 -> m2_17  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_17 -> m2_18  [key=0, style=solid];
m2_17 -> m2_19  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_17 -> m2_20  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_17 -> m2_21  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_17 -> m2_22  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_17 -> m2_23  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_17 -> m2_24  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_17 -> m2_26  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_17 -> m2_27  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_17 -> m2_28  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_18 -> m2_19  [key=0, style=solid];
m2_18 -> m2_30  [key=0, style=solid];
m2_19 -> m2_20  [key=0, style=solid];
m2_19 -> m2_21  [key=0, style=solid];
m2_20 -> m2_30  [key=0, style=solid];
m2_20 -> m2_36  [key=2, style=dotted];
m2_21 -> m2_22  [key=0, style=solid];
m2_21 -> m2_26  [key=0, style=solid];
m2_22 -> m2_23  [key=0, style=solid];
m2_22 -> m2_24  [key=1, style=dashed, color=darkseagreen4, label=lastPart];
m2_22 -> m2_25  [key=1, style=dashed, color=darkseagreen4, label=lastPart];
m2_23 -> m2_24  [key=0, style=solid];
m2_23 -> m2_25  [key=0, style=solid];
m2_24 -> m2_24  [key=1, style=dashed, color=darkseagreen4, label=lastPart];
m2_24 -> m2_25  [key=0, style=solid];
m2_24 -> m2_33  [key=2, style=dotted];
m2_26 -> m2_27  [key=0, style=solid];
m2_26 -> m2_28  [key=1, style=dashed, color=darkseagreen4, label=lastPart];
m2_26 -> m2_29  [key=1, style=dashed, color=darkseagreen4, label=lastPart];
m2_27 -> m2_28  [key=0, style=solid];
m2_27 -> m2_29  [key=0, style=solid];
m2_28 -> m2_28  [key=1, style=dashed, color=darkseagreen4, label=lastPart];
m2_28 -> m2_29  [key=0, style=solid];
m2_28 -> m2_33  [key=2, style=dotted];
m2_5 -> m2_7  [key=1, style=dashed, color=darkseagreen4, label=parts];
m2_5 -> m2_10  [key=1, style=dashed, color=darkseagreen4, label=parts];
m2_5 -> m2_13  [key=1, style=dashed, color=darkseagreen4, label=parts];
m2_5 -> m2_6  [key=0, style=solid];
m2_5 -> m2_16  [key=1, style=dashed, color=darkseagreen4, label=parts];
m2_5 -> m2_20  [key=1, style=dashed, color=darkseagreen4, label=parts];
m2_5 -> m2_34  [key=2, style=dotted];
m2_5 -> m2_25  [key=1, style=dashed, color=darkseagreen4, label=parts];
m2_5 -> m2_29  [key=1, style=dashed, color=darkseagreen4, label=parts];
m2_5 -> m2_30  [key=1, style=dashed, color=darkseagreen4, label=parts];
m2_30 -> m2_31  [key=0, style=solid];
m2_30 -> m2_37  [key=2, style=dotted];
m2_30 -> m2_38  [key=2, style=dotted];
m2_25 -> m2_36  [key=2, style=dotted];
m2_25 -> m2_30  [key=0, style=solid];
m2_29 -> m2_36  [key=2, style=dotted];
m2_29 -> m2_30  [key=0, style=solid];
m2_31 -> m2_0  [key=0, style=bold, color=blue];
m2_51 -> m2_4  [key=1, style=dashed, color=darkseagreen4, label="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter"];
m2_51 -> m2_7  [key=1, style=dashed, color=darkseagreen4, label="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter"];
m2_51 -> m2_10  [key=1, style=dashed, color=darkseagreen4, label="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter"];
m2_51 -> m2_13  [key=1, style=dashed, color=darkseagreen4, label="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter"];
m2_51 -> m2_42  [key=1, style=dashed, color=darkseagreen4, label="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter"];
m4_153 -> m4_154  [key=0, style=solid];
m4_154 -> m4_86  [key=2, style=dotted];
m4_154 -> m4_155  [key=0, style=solid];
m4_154 -> m4_156  [key=2, style=dotted];
m4_155 -> m4_153  [key=0, style=bold, color=blue];
m4_96 -> m4_97  [key=0, style=solid];
m4_96 -> m4_100  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_96 -> m4_98  [key=1, style=dashed, color=darkseagreen4, label=bool];
m4_96 -> m4_102  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_96 -> m4_103  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_97 -> m4_106  [key=2, style=dotted];
m4_97 -> m4_98  [key=0, style=solid];
m4_97 -> m4_99  [key=1, style=dashed, color=darkseagreen4, label=result];
m4_97 -> m4_102  [key=1, style=dashed, color=darkseagreen4, label=result];
m4_97 -> m4_104  [key=1, style=dashed, color=darkseagreen4, label=result];
m4_100 -> m4_106  [key=2, style=dotted];
m4_100 -> m4_101  [key=0, style=solid];
m4_100 -> m4_102  [key=1, style=dashed, color=darkseagreen4, label=asSingular];
m4_101 -> m4_106  [key=2, style=dotted];
m4_101 -> m4_102  [key=0, style=solid];
m4_98 -> m4_100  [key=0, style=solid];
m4_98 -> m4_99  [key=0, style=solid];
m4_99 -> m4_105  [key=0, style=solid];
m4_102 -> m4_103  [key=0, style=solid];
m4_102 -> m4_104  [key=0, style=solid];
m4_104 -> m4_105  [key=0, style=solid];
m4_103 -> m4_105  [key=0, style=solid];
m4_105 -> m4_96  [key=0, style=bold, color=blue];
m4_73 -> m4_74  [key=0, style=solid];
m4_73 -> m4_76  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_74 -> m4_75  [key=0, style=solid];
m4_74 -> m4_76  [key=0, style=solid];
m4_74 -> m4_78  [key=2, style=dotted];
m4_76 -> m4_77  [key=0, style=solid];
m4_76 -> m4_79  [key=2, style=dotted];
m4_75 -> m4_77  [key=0, style=solid];
m4_77 -> m4_73  [key=0, style=bold, color=blue];
m4_0 -> m4_1  [key=0, style=solid];
m4_5 -> m4_6  [key=0, style=solid, color=green];
m4_5 -> m4_64  [key=2, style=dotted, color=green];
m4_4 -> m4_5  [key=0, style=solid, color=green];
m4_4 -> m4_64  [key=2, style=dotted];
m4_6 -> m4_7  [key=0, style=solid, color=green];
m4_6 -> m4_64  [key=2, style=dotted, color=green];
m4_7 -> m4_8  [key=0, style=solid, color=green];
m4_7 -> m4_64  [key=2, style=dotted, color=green];
m4_8 -> m4_9  [key=0, style=solid, color=green];
m4_8 -> m4_64  [key=2, style=dotted, color=green];
m4_9 -> m4_10  [key=0, style=solid, color=green];
m4_9 -> m4_64  [key=2, style=dotted, color=green];
m4_10 -> m4_11  [key=0, style=solid, color=green];
m4_10 -> m4_64  [key=2, style=dotted, color=green];
m4_11 -> m4_12  [key=0, style=solid, color=green];
m4_11 -> m4_64  [key=2, style=dotted, color=green];
m4_12 -> m4_13  [key=0, style=solid, color=green];
m4_12 -> m4_64  [key=2, style=dotted, color=green];
m4_13 -> m4_14  [key=0, style=solid, color=green];
m4_13 -> m4_64  [key=2, style=dotted, color=green];
m4_14 -> m4_15  [key=0, style=solid, color=green];
m4_14 -> m4_64  [key=2, style=dotted, color=green];
m4_15 -> m4_16  [key=0, style=solid, color=green];
m4_15 -> m4_64  [key=2, style=dotted, color=green];
m4_16 -> m4_17  [key=0, style=solid, color=green];
m4_16 -> m4_64  [key=2, style=dotted, color=green];
m4_17 -> m4_18  [key=0, style=solid, color=green];
m4_17 -> m4_64  [key=2, style=dotted, color=green];
m4_18 -> m4_19  [key=0, style=solid, color=green];
m4_18 -> m4_64  [key=2, style=dotted, color=green];
m4_19 -> m4_20  [key=0, style=solid, color=green];
m4_19 -> m4_65  [key=2, style=dotted, color=green];
m4_20 -> m4_21  [key=0, style=solid, color=green];
m4_20 -> m4_65  [key=2, style=dotted, color=green];
m4_21 -> m4_22  [key=0, style=solid, color=green];
m4_21 -> m4_65  [key=2, style=dotted, color=green];
m4_22 -> m4_23  [key=0, style=solid, color=green];
m4_22 -> m4_65  [key=2, style=dotted, color=green];
m4_23 -> m4_24  [key=0, style=solid, color=green];
m4_23 -> m4_65  [key=2, style=dotted, color=green];
m4_24 -> m4_25  [key=0, style=solid, color=green];
m4_24 -> m4_65  [key=2, style=dotted, color=green];
m4_25 -> m4_26  [key=0, style=solid, color=green];
m4_25 -> m4_65  [key=2, style=dotted, color=green];
m4_26 -> m4_27  [key=0, style=solid, color=green];
m4_26 -> m4_65  [key=2, style=dotted, color=green];
m4_27 -> m4_28  [key=0, style=solid, color=green];
m4_27 -> m4_65  [key=2, style=dotted, color=green];
m4_28 -> m4_29  [key=0, style=solid, color=green];
m4_28 -> m4_65  [key=2, style=dotted, color=green];
m4_29 -> m4_30  [key=0, style=solid, color=green];
m4_29 -> m4_65  [key=2, style=dotted, color=green];
m4_30 -> m4_31  [key=0, style=solid, color=green];
m4_30 -> m4_65  [key=2, style=dotted, color=green];
m4_31 -> m4_32  [key=0, style=solid, color=green];
m4_31 -> m4_65  [key=2, style=dotted, color=green];
m4_32 -> m4_33  [key=0, style=solid, color=green];
m4_32 -> m4_65  [key=2, style=dotted, color=green];
m4_33 -> m4_34  [key=0, style=solid, color=green];
m4_33 -> m4_65  [key=2, style=dotted, color=green];
m4_34 -> m4_35  [key=0, style=solid, color=green];
m4_34 -> m4_65  [key=2, style=dotted, color=green];
m4_35 -> m4_36  [key=0, style=solid, color=green];
m4_35 -> m4_65  [key=2, style=dotted, color=green];
m4_36 -> m4_37  [key=0, style=solid, color=green];
m4_36 -> m4_65  [key=2, style=dotted, color=green];
m4_37 -> m4_38  [key=0, style=solid, color=green];
m4_37 -> m4_65  [key=2, style=dotted, color=green];
m4_38 -> m4_39  [key=0, style=solid, color=green];
m4_38 -> m4_65  [key=2, style=dotted, color=green];
m4_39 -> m4_40  [key=0, style=solid, color=green];
m4_39 -> m4_65  [key=2, style=dotted];
m4_40 -> m4_41  [key=0, style=solid, color=green];
m4_40 -> m4_65  [key=2, style=dotted, color=green];
m4_41 -> m4_42  [key=0, style=solid, color=green];
m4_41 -> m4_65  [key=2, style=dotted, color=green];
m4_42 -> m4_43  [key=0, style=solid, color=green];
m4_42 -> m4_65  [key=2, style=dotted, color=green];
m4_43 -> m4_44  [key=0, style=solid, color=green];
m4_43 -> m4_65  [key=2, style=dotted, color=green];
m4_44 -> m4_45  [key=0, style=solid, color=green];
m4_44 -> m4_66  [key=2, style=dotted, color=green];
m4_45 -> m4_46  [key=0, style=solid, color=green];
m4_45 -> m4_66  [key=2, style=dotted, color=green];
m4_46 -> m4_47  [key=0, style=solid, color=green];
m4_46 -> m4_66  [key=2, style=dotted, color=green];
m4_47 -> m4_48  [key=0, style=solid, color=green];
m4_47 -> m4_66  [key=2, style=dotted, color=green];
m4_48 -> m4_49  [key=0, style=solid, color=green];
m4_48 -> m4_66  [key=2, style=dotted, color=green];
m4_49 -> m4_50  [key=0, style=solid, color=green];
m4_49 -> m4_66  [key=2, style=dotted, color=green];
m4_50 -> m4_51  [key=0, style=solid, color=green];
m4_50 -> m4_66  [key=2, style=dotted, color=green];
m4_51 -> m4_66  [key=2, style=dotted];
m4_51 -> m4_52  [key=0, style=solid];
m4_3 -> m4_4  [key=0, style=solid];
m4_3 -> m4_64  [key=2, style=dotted];
m4_1 -> m4_64  [key=2, style=dotted];
m4_1 -> m4_2  [key=0, style=solid];
m4_2 -> m4_64  [key=2, style=dotted];
m4_2 -> m4_3  [key=0, style=solid];
m4_52 -> m4_66  [key=2, style=dotted];
m4_52 -> m4_53  [key=0, style=solid];
m4_53 -> m4_54  [key=0, style=solid];
m4_53 -> m4_67  [key=2, style=dotted];
m4_54 -> m4_55  [key=0, style=solid];
m4_54 -> m4_67  [key=2, style=dotted];
m4_62 -> m4_63  [key=0, style=solid];
m4_62 -> m4_67  [key=2, style=dotted];
m4_55 -> m4_67  [key=2, style=dotted];
m4_55 -> m4_56  [key=0, style=solid];
m4_56 -> m4_67  [key=2, style=dotted];
m4_56 -> m4_57  [key=0, style=solid];
m4_57 -> m4_67  [key=2, style=dotted];
m4_57 -> m4_58  [key=0, style=solid];
m4_58 -> m4_67  [key=2, style=dotted];
m4_58 -> m4_59  [key=0, style=solid];
m4_59 -> m4_67  [key=2, style=dotted];
m4_59 -> m4_60  [key=0, style=solid];
m4_60 -> m4_67  [key=2, style=dotted];
m4_60 -> m4_61  [key=0, style=solid];
m4_61 -> m4_67  [key=2, style=dotted];
m4_61 -> m4_62  [key=0, style=solid];
m4_63 -> m4_0  [key=0, style=bold, color=blue];
m4_106 -> m4_123  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_106 -> m4_128  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IList<Humanizer.InflectorExtensions.Rule>"];
m4_106 -> m4_121  [key=0, style=solid];
m4_106 -> m4_124  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_106 -> m4_125  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_106 -> m4_126  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IList<Humanizer.InflectorExtensions.Rule>"];
m4_123 -> m4_132  [key=2, style=dotted];
m4_123 -> m4_124  [key=0, style=solid];
m4_123 -> m4_125  [key=0, style=solid];
m4_128 -> m4_73  [key=2, style=dotted];
m4_128 -> m4_129  [key=0, style=solid];
m4_128 -> m4_130  [key=0, style=solid];
m4_121 -> m4_123  [key=0, style=solid];
m4_121 -> m4_122  [key=0, style=solid];
m4_124 -> m4_131  [key=0, style=solid];
m4_125 -> m4_126  [key=0, style=solid];
m4_125 -> m4_130  [key=1, style=dashed, color=darkseagreen4, label=result];
m4_126 -> m4_128  [key=1, style=dashed, color=darkseagreen4, label=i];
m4_126 -> m4_127  [key=0, style=solid];
m4_126 -> m4_129  [key=1, style=dashed, color=darkseagreen4, label=i];
m4_127 -> m4_128  [key=0, style=solid];
m4_127 -> m4_130  [key=0, style=solid];
m4_129 -> m4_127  [key=0, style=solid];
m4_129 -> m4_129  [key=1, style=dashed, color=darkseagreen4, label=i];
m4_130 -> m4_131  [key=0, style=solid];
m4_122 -> m4_131  [key=0, style=solid];
m4_131 -> m4_106  [key=0, style=bold, color=blue];
m4_68 -> m4_69  [key=0, style=solid];
m4_68 -> m4_70  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_69 -> m4_70  [key=0, style=solid];
m4_69 -> m4_72  [key=2, style=dotted];
m4_70 -> m4_71  [key=0, style=solid];
m4_71 -> m4_68  [key=0, style=bold, color=blue];
m4_64 -> m4_88  [key=0, style=solid];
m4_88 -> m4_89  [key=0, style=solid];
m4_88 -> m4_68  [key=2, style=dotted];
m4_88 -> m4_87  [key=2, style=dotted];
m4_89 -> m4_64  [key=0, style=bold, color=blue];
m4_65 -> m4_90  [key=0, style=solid];
m4_90 -> m4_91  [key=0, style=solid];
m4_90 -> m4_68  [key=2, style=dotted];
m4_90 -> m4_87  [key=2, style=dotted];
m4_91 -> m4_65  [key=0, style=bold, color=blue];
m4_144 -> m4_145  [key=0, style=solid];
m4_145 -> m4_146  [key=0, style=solid];
m4_145 -> m4_147  [key=2, style=dotted];
m4_146 -> m4_144  [key=0, style=bold, color=blue];
m4_148 -> m4_149  [key=0, style=solid];
m4_150 -> m4_83  [key=2, style=dotted];
m4_150 -> m4_151  [key=0, style=solid];
m4_150 -> m4_152  [key=2, style=dotted];
m4_150 -> m4_86  [key=2, style=dotted];
m4_149 -> m4_150  [key=0, style=solid];
m4_149 -> m4_140  [key=2, style=dotted];
m4_151 -> m4_148  [key=0, style=bold, color=blue];
m4_66 -> m4_80  [key=0, style=solid];
m4_66 -> m4_81  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_80 -> m4_64  [key=2, style=dotted];
m4_80 -> m4_81  [key=0, style=solid];
m4_80 -> m4_83  [key=2, style=dotted];
m4_81 -> m4_65  [key=2, style=dotted];
m4_81 -> m4_82  [key=0, style=solid];
m4_81 -> m4_83  [key=2, style=dotted];
m4_82 -> m4_66  [key=0, style=bold, color=blue];
m4_140 -> m4_141  [key=0, style=solid];
m4_141 -> m4_142  [key=0, style=solid];
m4_141 -> m4_143  [key=2, style=dotted];
m4_141 -> m4_144  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_142 -> m4_140  [key=0, style=bold, color=blue];
m4_67 -> m4_84  [key=0, style=solid];
m4_84 -> m4_87  [key=2, style=dotted];
m4_84 -> m4_85  [key=0, style=solid];
m4_84 -> m4_86  [key=2, style=dotted];
m4_85 -> m4_67  [key=0, style=bold, color=blue];
m4_111 -> m4_112  [key=0, style=solid];
m4_111 -> m4_115  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_111 -> m4_113  [key=1, style=dashed, color=darkseagreen4, label=bool];
m4_111 -> m4_117  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_111 -> m4_118  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_111 -> m4_119  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_112 -> m4_106  [key=2, style=dotted];
m4_112 -> m4_113  [key=0, style=solid];
m4_112 -> m4_114  [key=1, style=dashed, color=darkseagreen4, label=result];
m4_112 -> m4_117  [key=1, style=dashed, color=darkseagreen4, label=result];
m4_112 -> m4_119  [key=1, style=dashed, color=darkseagreen4, label=result];
m4_115 -> m4_106  [key=2, style=dotted];
m4_115 -> m4_116  [key=0, style=solid];
m4_115 -> m4_117  [key=1, style=dashed, color=darkseagreen4, label=asPlural];
m4_116 -> m4_106  [key=2, style=dotted];
m4_116 -> m4_117  [key=0, style=solid];
m4_113 -> m4_115  [key=0, style=solid];
m4_113 -> m4_114  [key=0, style=solid];
m4_114 -> m4_120  [key=0, style=solid];
m4_117 -> m4_118  [key=0, style=solid];
m4_117 -> m4_119  [key=0, style=solid];
m4_119 -> m4_120  [key=0, style=solid];
m4_118 -> m4_120  [key=0, style=solid];
m4_120 -> m4_111  [key=0, style=bold, color=blue];
m4_132 -> m4_133  [key=0, style=solid];
m4_133 -> m4_86  [key=2, style=dotted];
m4_133 -> m4_134  [key=0, style=solid];
m4_133 -> m4_135  [key=2, style=dotted];
m4_134 -> m4_132  [key=0, style=bold, color=blue];
m4_164 -> m4_69  [key=1, style=dashed, color=darkseagreen4, label="Humanizer.InflectorExtensions.Rule"];
m4_164 -> m4_70  [key=1, style=dashed, color=darkseagreen4, label="Humanizer.InflectorExtensions.Rule"];
m4_164 -> m4_74  [key=1, style=dashed, color=darkseagreen4, label="Humanizer.InflectorExtensions.Rule"];
m4_164 -> m4_76  [key=1, style=dashed, color=darkseagreen4, label="Humanizer.InflectorExtensions.Rule"];
}
