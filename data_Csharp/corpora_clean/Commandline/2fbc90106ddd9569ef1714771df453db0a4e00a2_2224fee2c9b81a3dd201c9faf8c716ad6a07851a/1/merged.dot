digraph  {
n6 [label="CommandLine.Text.Example<T>", span=""];
n0 [label="Entry CommandLine.Text.Example<T>.Example(string, string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, T)", span="14-14", cluster="CommandLine.Text.Example<T>.Example(string, string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, T)"];
n1 [label="this.group = group", span="16-16", cluster="CommandLine.Text.Example<T>.Example(string, string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, T)"];
n2 [label="this.helpText = helpText", span="17-17", cluster="CommandLine.Text.Example<T>.Example(string, string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, T)"];
n3 [label="this.settings = settings", span="18-18", cluster="CommandLine.Text.Example<T>.Example(string, string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, T)", color=red, community=0];
n4 [label="this.sample = sample", span="19-19", cluster="CommandLine.Text.Example<T>.Example(string, string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, T)"];
n5 [label="Exit CommandLine.Text.Example<T>.Example(string, string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, T)", span="14-14", cluster="CommandLine.Text.Example<T>.Example(string, string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, T)"];
d4 [label="this.sample = sample", span="19-19", cluster="CommandLine.Text.Example<T>.Example(string, string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, T)", color=green, community=0];
d12 [label="CommandLine.Text.Example<T>", span=""];
d0 [label="Entry CommandLine.Text.Example<T>.Example(string, string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, T)", span="14-14", cluster="CommandLine.Text.Example<T>.Example(string, string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, T)"];
d3 [label="this.formatStyles = formatStyles", span="18-18", cluster="CommandLine.Text.Example<T>.Example(string, string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, T)"];
m1_149 [label="Exit lambda expression", span="367-367", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_150 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", file="ReflectionExtensions.cs"];
m1_152 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="388-392", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="ReflectionExtensions.cs"];
m1_151 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="383-383", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="ReflectionExtensions.cs"];
m1_153 [label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="395-395", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="ReflectionExtensions.cs"];
m1_40 [label="success == null", span="244-244", cluster="RailwaySharp.ErrorHandling.OkPair.Create<TSuccess, TMessage>(TSuccess, System.Collections.Generic.IEnumerable<TMessage>)", file="ReflectionExtensions.cs"];
m1_41 [label="throw new ArgumentNullException(''success'');", span="244-244", cluster="RailwaySharp.ErrorHandling.OkPair.Create<TSuccess, TMessage>(TSuccess, System.Collections.Generic.IEnumerable<TMessage>)", file="ReflectionExtensions.cs"];
m1_42 [label="messages == null", span="245-245", cluster="RailwaySharp.ErrorHandling.OkPair.Create<TSuccess, TMessage>(TSuccess, System.Collections.Generic.IEnumerable<TMessage>)", file="ReflectionExtensions.cs"];
m1_43 [label="throw new ArgumentNullException(''messages'');", span="245-245", cluster="RailwaySharp.ErrorHandling.OkPair.Create<TSuccess, TMessage>(TSuccess, System.Collections.Generic.IEnumerable<TMessage>)", file="ReflectionExtensions.cs"];
m1_106 [label="new FakeOptionsWithEnum()", span="262-262", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_107 [label="Exit lambda expression", span="262-262", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_108 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="11-11", cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", file="ReflectionExtensions.cs"];
m1_71 [label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="180-180", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_97 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="238-238", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_98 [label="Exit lambda expression", span="238-238", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_99 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", file="ReflectionExtensions.cs"];
m1_100 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="256-256", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="ReflectionExtensions.cs"];
m1_101 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="261-265", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="ReflectionExtensions.cs"];
m1_154 [label="Entry lambda expression", span="556-556", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_62 [label="return string.Format(\r\n                        ''Error: {0}'',\r\n                        string.Join(Environment.NewLine, bad.Messages.Select(v => v.ToString())));", span="305-307", cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.ToString()", file="ReflectionExtensions.cs"];
m1_54 [label="this.tag = tag", span="285-285", cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.Result(RailwaySharp.ErrorHandling.ResultType)", file="ReflectionExtensions.cs"];
m1_266 [label="Entry lambda expression", span="839-839", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_267 [label="m.ToString()", span="839-839", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_268 [label="Exit lambda expression", span="839-839", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_269 [label="Entry RailwaySharp.ErrorHandling.ResultExtensions.SucceededWith<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", span="851-851", cluster="RailwaySharp.ErrorHandling.ResultExtensions.SucceededWith<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ReflectionExtensions.cs"];
m1_188 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="455-455", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="ReflectionExtensions.cs"];
m1_18 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="41-41", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="ReflectionExtensions.cs"];
m1_19 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="ReflectionExtensions.cs"];
m1_20 [label="Entry lambda expression", span="47-47", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_21 [label="new FakeOptions()", span="47-47", cluster="lambda expression", file="ReflectionExtensions.cs", color=green, community=0];
m1_78 [label="Entry RailwaySharp.ErrorHandling.Bad<TSuccess, TMessage>.Bad(System.Collections.Generic.IEnumerable<TMessage>)", span="348-348", cluster="RailwaySharp.ErrorHandling.Bad<TSuccess, TMessage>.Bad(System.Collections.Generic.IEnumerable<TMessage>)", file="ReflectionExtensions.cs"];
m1_166 [label="Entry RailwaySharp.ErrorHandling.Trial.Apply<TValue, TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<System.Func<TValue, TSuccess>, TMessage>, RailwaySharp.ErrorHandling.Result<TValue, TMessage>)", span="583-583", cluster="RailwaySharp.ErrorHandling.Trial.Apply<TValue, TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<System.Func<TValue, TSuccess>, TMessage>, RailwaySharp.ErrorHandling.Result<TValue, TMessage>)", file="ReflectionExtensions.cs"];
m1_170 [label="return new Ok<TSuccess, TMessage>(new OkPair<TSuccess, TMessage>(\r\n                    ok1.Value.Success(ok2.Value.Success), ok1.Value.Messages.Concat(ok2.Value.Messages)));", span="592-593", cluster="RailwaySharp.ErrorHandling.Trial.Apply<TValue, TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<System.Func<TValue, TSuccess>, TMessage>, RailwaySharp.ErrorHandling.Result<TValue, TMessage>)", file="ReflectionExtensions.cs"];
m1_167 [label="wrappedFunction.Tag == ResultType.Ok && result.Tag == ResultType.Ok", span="587-587", cluster="RailwaySharp.ErrorHandling.Trial.Apply<TValue, TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<System.Func<TValue, TSuccess>, TMessage>, RailwaySharp.ErrorHandling.Result<TValue, TMessage>)", file="ReflectionExtensions.cs"];
m1_169 [label="var ok2 = (Ok<TValue, TMessage>)result", span="590-590", cluster="RailwaySharp.ErrorHandling.Trial.Apply<TValue, TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<System.Func<TValue, TSuccess>, TMessage>, RailwaySharp.ErrorHandling.Result<TValue, TMessage>)", file="ReflectionExtensions.cs"];
m1_168 [label="var ok1 = (Ok<Func<TValue, TSuccess>, TMessage>)wrappedFunction", span="589-589", cluster="RailwaySharp.ErrorHandling.Trial.Apply<TValue, TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<System.Func<TValue, TSuccess>, TMessage>, RailwaySharp.ErrorHandling.Result<TValue, TMessage>)", file="ReflectionExtensions.cs"];
m1_171 [label="wrappedFunction.Tag == ResultType.Bad && result.Tag == ResultType.Ok", span="595-595", cluster="RailwaySharp.ErrorHandling.Trial.Apply<TValue, TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<System.Func<TValue, TSuccess>, TMessage>, RailwaySharp.ErrorHandling.Result<TValue, TMessage>)", file="ReflectionExtensions.cs"];
m1_258 [label="Exit RailwaySharp.ErrorHandling.ResultExtensions.Select<TSuccess, TMessage, TResult>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>, System.Func<TSuccess, TResult>)", span="819-819", cluster="RailwaySharp.ErrorHandling.ResultExtensions.Select<TSuccess, TMessage, TResult>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>, System.Func<TSuccess, TResult>)", file="ReflectionExtensions.cs"];
m1_260 [label="result.Tag == ResultType.Ok", span="833-833", cluster="RailwaySharp.ErrorHandling.ResultExtensions.FailedWith<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ReflectionExtensions.cs"];
m1_259 [label="Entry RailwaySharp.ErrorHandling.ResultExtensions.FailedWith<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", span="831-831", cluster="RailwaySharp.ErrorHandling.ResultExtensions.FailedWith<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ReflectionExtensions.cs"];
m1_261 [label="var ok = (Ok<TSuccess, TMessage>)result", span="835-835", cluster="RailwaySharp.ErrorHandling.ResultExtensions.FailedWith<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ReflectionExtensions.cs"];
m1_262 [label="throw new Exception(\r\n                    string.Format(''Result was a success: {0} - {1}'',\r\n                    ok.Value.Success,\r\n                    string.Join(Environment.NewLine, ok.Value.Messages.Select(m => m.ToString()))));", span="836-839", cluster="RailwaySharp.ErrorHandling.ResultExtensions.FailedWith<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ReflectionExtensions.cs"];
m1_203 [label="var ok = result as Ok<TSuccess, TMessage>", span="697-697", cluster="RailwaySharp.ErrorHandling.ResultExtensions.Match<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>, System.Action<TSuccess, System.Collections.Generic.IEnumerable<TMessage>>, System.Action<System.Collections.Generic.IEnumerable<TMessage>>)", file="ReflectionExtensions.cs"];
m1_73 [label="v.ToString()", span="307-307", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_75 [label="Entry RailwaySharp.ErrorHandling.Ok<TSuccess, TMessage>.Ok(RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>)", span="324-324", cluster="RailwaySharp.ErrorHandling.Ok<TSuccess, TMessage>.Ok(RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>)", file="ReflectionExtensions.cs"];
m1_74 [label="Exit lambda expression", span="307-307", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_76 [label="this.value = value", span="327-327", cluster="RailwaySharp.ErrorHandling.Ok<TSuccess, TMessage>.Ok(RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>)", file="ReflectionExtensions.cs"];
m1_77 [label="Exit RailwaySharp.ErrorHandling.Ok<TSuccess, TMessage>.Ok(RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>)", span="324-324", cluster="RailwaySharp.ErrorHandling.Ok<TSuccess, TMessage>.Ok(RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>)", file="ReflectionExtensions.cs"];
m1_246 [label="return liftedMapper(result, v);", span="810-810", cluster="RailwaySharp.ErrorHandling.ResultExtensions.SelectMany<TSuccess, TMessage, TValue, TResult>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>, System.Func<TSuccess, RailwaySharp.ErrorHandling.Result<TValue, TMessage>>, System.Func<TSuccess, TValue, TResult>)", file="ReflectionExtensions.cs"];
m1_91 [label="Entry RailwaySharp.ErrorHandling.Result.Succeed<TSuccess, TMessage>(TSuccess, TMessage)", span="392-392", cluster="RailwaySharp.ErrorHandling.Result.Succeed<TSuccess, TMessage>(TSuccess, TMessage)", file="ReflectionExtensions.cs"];
m1_93 [label="Exit RailwaySharp.ErrorHandling.Result.Succeed<TSuccess, TMessage>(TSuccess, TMessage)", span="392-392", cluster="RailwaySharp.ErrorHandling.Result.Succeed<TSuccess, TMessage>(TSuccess, TMessage)", file="ReflectionExtensions.cs"];
m1_92 [label="return new Ok<TSuccess, TMessage>(new OkPair<TSuccess, TMessage>(value, new[] { message }));", span="394-394", cluster="RailwaySharp.ErrorHandling.Result.Succeed<TSuccess, TMessage>(TSuccess, TMessage)", file="ReflectionExtensions.cs"];
m1_94 [label="Entry RailwaySharp.ErrorHandling.Result.Succeed<TSuccess, TMessage>(TSuccess, System.Collections.Generic.IEnumerable<TMessage>)", span="400-400", cluster="RailwaySharp.ErrorHandling.Result.Succeed<TSuccess, TMessage>(TSuccess, System.Collections.Generic.IEnumerable<TMessage>)", file="ReflectionExtensions.cs"];
m1_95 [label="return new Ok<TSuccess, TMessage>(new OkPair<TSuccess, TMessage>(value, messages));", span="402-402", cluster="RailwaySharp.ErrorHandling.Result.Succeed<TSuccess, TMessage>(TSuccess, System.Collections.Generic.IEnumerable<TMessage>)", file="ReflectionExtensions.cs"];
m1_183 [label="return Apply(Lift(func, a), b);", span="635-635", cluster="RailwaySharp.ErrorHandling.Trial.Lift2<TSuccess, TMessage, TSuccess1, TMessage1>(System.Func<TSuccess, System.Func<TMessage, TSuccess1>>, RailwaySharp.ErrorHandling.Result<TSuccess, TMessage1>, RailwaySharp.ErrorHandling.Result<TMessage, TMessage1>)", file="ReflectionExtensions.cs"];
m1_84 [label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="215-215", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="ReflectionExtensions.cs"];
m1_85 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="218-222", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="ReflectionExtensions.cs"];
m1_86 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="225-225", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="ReflectionExtensions.cs"];
m1_3 [label="var result = InstanceBuilder.Build(\r\n                () => fakeOptions,\r\n                new[] { ''--help'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="25-29", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="ReflectionExtensions.cs"];
m1_4 [label="Assert.True(expectedResult.Equals(result))", span="32-32", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="ReflectionExtensions.cs"];
m1_5 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="16-16", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="ReflectionExtensions.cs"];
m1_298 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", file="ReflectionExtensions.cs"];
m1_22 [label="Exit lambda expression", span="47-47", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_23 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="64-64", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="ReflectionExtensions.cs"];
m1_26 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="64-64", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="ReflectionExtensions.cs"];
m1_24 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithDouble(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="69-73", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="ReflectionExtensions.cs"];
m1_25 [label="Assert.Equal(expected, result.Value.DoubleValue)", span="76-76", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="ReflectionExtensions.cs"];
m1_27 [label="Entry lambda expression", span="70-70", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_270 [label="Entry string.Equals(string)", span="0-0", cluster="string.Equals(string)", file="ReflectionExtensions.cs"];
m1_271 [label="Entry lambda expression", span="640-640", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_273 [label="Exit lambda expression", span="640-640", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_272 [label="new FakeOptions()", span="640-640", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_274 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="652-652", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="ReflectionExtensions.cs"];
m1_275 [label="var expectedResult = new[] { new MissingRequiredOptionError(NameInfo.EmptyName) }", span="655-655", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="ReflectionExtensions.cs"];
m1_96 [label="Entry lambda expression", span="238-238", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_179 [label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="31-31", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="ReflectionExtensions.cs"];
m1_180 [label="Entry lambda expression", span="443-443", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_181 [label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="443-443", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_182 [label="Exit lambda expression", span="443-443", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_184 [label="Entry lambda expression", span="443-443", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_321 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", file="ReflectionExtensions.cs"];
m1_126 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="312-312", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="ReflectionExtensions.cs"];
m1_127 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="315-315", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="ReflectionExtensions.cs"];
m1_128 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''RED'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="318-322", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="ReflectionExtensions.cs"];
m1_129 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="325-325", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="ReflectionExtensions.cs"];
m1_6 [label="Entry RailwaySharp.ErrorHandling.Unit.GetHashCode()", span="143-143", cluster="RailwaySharp.ErrorHandling.Unit.GetHashCode()", file="ReflectionExtensions.cs"];
m1_250 [label="Entry lambda expression", span="803-803", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_252 [label="Exit lambda expression", span="803-803", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_251 [label="mapperFunc(suc, val)", span="803-803", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_253 [label="Entry lambda expression", span="808-808", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_254 [label="Trial.Lift2(curriedMapper, a, b)", span="808-808", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_29 [label="Exit lambda expression", span="70-70", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_109 [label="Entry RailwaySharp.ErrorHandling.Trial.Warn<TSuccess, TMessage>(TMessage, TSuccess)", span="457-457", cluster="RailwaySharp.ErrorHandling.Trial.Warn<TSuccess, TMessage>(TMessage, TSuccess)", file="ReflectionExtensions.cs"];
m1_111 [label="Exit RailwaySharp.ErrorHandling.Trial.Warn<TSuccess, TMessage>(TMessage, TSuccess)", span="457-457", cluster="RailwaySharp.ErrorHandling.Trial.Warn<TSuccess, TMessage>(TMessage, TSuccess)", file="ReflectionExtensions.cs"];
m1_110 [label="return new Ok<TSuccess, TMessage>(new OkPair<TSuccess, TMessage>(value, new[] { message }));", span="459-459", cluster="RailwaySharp.ErrorHandling.Trial.Warn<TSuccess, TMessage>(TMessage, TSuccess)", file="ReflectionExtensions.cs"];
m1_112 [label="Entry RailwaySharp.ErrorHandling.Trial.Fail<TSuccess, TMessage>(TMessage)", span="468-468", cluster="RailwaySharp.ErrorHandling.Trial.Fail<TSuccess, TMessage>(TMessage)", file="ReflectionExtensions.cs"];
m1_113 [label="return new Bad<TSuccess, TMessage>(new[] { message });", span="470-470", cluster="RailwaySharp.ErrorHandling.Trial.Fail<TSuccess, TMessage>(TMessage)", file="ReflectionExtensions.cs"];
m1_0 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="16-16", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="ReflectionExtensions.cs"];
m1_1 [label="var fakeOptions = new FakeOptions()", span="19-19", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="ReflectionExtensions.cs"];
m1_2 [label="var expectedResult = ParserResult.Create(\r\n                ParserResultType.Options,\r\n                fakeOptions, new Error[] { new HelpRequestedError() })", span="20-22", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="ReflectionExtensions.cs"];
m1_7 [label="return 0;", span="145-145", cluster="RailwaySharp.ErrorHandling.Unit.GetHashCode()", file="ReflectionExtensions.cs"];
m1_46 [label="Exit lambda expression", span="116-116", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_103 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="256-256", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="ReflectionExtensions.cs"];
m1_104 [label="Entry Unk.ShouldBeEquivalentTo", span="", cluster="Unk.ShouldBeEquivalentTo", file="ReflectionExtensions.cs"];
m1_105 [label="Entry lambda expression", span="262-262", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_223 [label="Exit lambda expression", span="526-526", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_224 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="537-537", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="ReflectionExtensions.cs"];
m1_225 [label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="540-540", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="ReflectionExtensions.cs"];
m1_306 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="732-732", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="ReflectionExtensions.cs"];
m1_307 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithScalarValueAndSequenceStringAdjacent(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="737-741", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="ReflectionExtensions.cs"];
m1_308 [label="expected.ShouldBeEquivalentTo(result.Value)", span="744-744", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="ReflectionExtensions.cs"];
m1_309 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="732-732", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="ReflectionExtensions.cs"];
m1_172 [label="return new Bad<TSuccess, TMessage>(((Bad<TValue, TMessage>)result).Messages);", span="597-597", cluster="RailwaySharp.ErrorHandling.Trial.Apply<TValue, TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<System.Func<TValue, TSuccess>, TMessage>, RailwaySharp.ErrorHandling.Result<TValue, TMessage>)", file="ReflectionExtensions.cs"];
m1_82 [label="return new Bad<TSuccess, TMessage>(messages);", span="370-370", cluster="RailwaySharp.ErrorHandling.Result.FailWith<TSuccess, TMessage>(System.Collections.Generic.IEnumerable<TMessage>)", file="ReflectionExtensions.cs"];
m1_143 [label="new Ok<TSuccess, TMessage>(\r\n                        new OkPair<TSuccess, TMessage>(pair.Success, messages.Concat(pair.Messages)))", span="535-536", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_144 [label="Exit lambda expression", span="534-536", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_145 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="ReflectionExtensions.cs"];
m1_146 [label="Entry lambda expression", span="539-539", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_55 [label="Exit RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.Result(RailwaySharp.ErrorHandling.ResultType)", span="283-283", cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.Result(RailwaySharp.ErrorHandling.ResultType)", file="ReflectionExtensions.cs"];
m1_56 [label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.ToString()", span="293-293", cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.ToString()", file="ReflectionExtensions.cs"];
m1_57 [label=Tag, span="295-295", cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.ToString()", file="ReflectionExtensions.cs"];
m1_58 [label="ResultType.Ok", span="297-297", cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.ToString()", file="ReflectionExtensions.cs"];
m1_79 [label="Entry lambda expression", span="199-199", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_80 [label="new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="199-199", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_226 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequired(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="543-547", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="ReflectionExtensions.cs"];
m1_227 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="550-550", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="ReflectionExtensions.cs"];
m1_228 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="537-537", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="ReflectionExtensions.cs"];
m1_236 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="569-569", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="ReflectionExtensions.cs"];
m1_229 [label="Entry lambda expression", span="544-544", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_230 [label="new FakeOptionWithRequired()", span="544-544", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_231 [label="Exit lambda expression", span="544-544", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_232 [label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", file="ReflectionExtensions.cs"];
m1_234 [label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="559-559", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="ReflectionExtensions.cs"];
m1_233 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="556-556", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="ReflectionExtensions.cs"];
m1_235 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="562-566", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="ReflectionExtensions.cs"];
m1_237 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="556-556", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="ReflectionExtensions.cs"];
m1_238 [label="Entry lambda expression", span="563-563", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_31 [label="return new { Success, Messages }.GetHashCode();", span="218-218", cluster="RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>.GetHashCode()", file="ReflectionExtensions.cs"];
m1_32 [label="Exit RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>.GetHashCode()", span="216-216", cluster="RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>.GetHashCode()", file="ReflectionExtensions.cs"];
m1_33 [label="Entry object.GetHashCode()", span="0-0", cluster="object.GetHashCode()", file="ReflectionExtensions.cs"];
m1_34 [label="other == null", span="228-228", cluster="RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>.Equals(RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>)", file="ReflectionExtensions.cs"];
m1_72 [label="Exit lambda expression", span="180-180", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_68 [label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="261-261", cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="ReflectionExtensions.cs"];
m1_69 [label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20", cluster="CommandLine.NameInfo.NameInfo(string, string)", file="ReflectionExtensions.cs"];
m1_70 [label="Entry lambda expression", span="180-180", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_131 [label="Entry lambda expression", span="319-319", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_130 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="312-312", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="ReflectionExtensions.cs"];
m1_132 [label="new FakeOptionsWithEnum()", span="319-319", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_134 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="331-331", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="ReflectionExtensions.cs"];
m1_135 [label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="334-340", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="ReflectionExtensions.cs"];
m1_136 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="343-347", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="ReflectionExtensions.cs"];
m1_147 [label="Entry lambda expression", span="367-367", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_142 [label="Exit lambda expression", span="344-344", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_148 [label="new FakeOptionsWithSequenceWithoutRange()", span="367-367", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_155 [label="Entry lambda expression", span="389-389", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_158 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", file="ReflectionExtensions.cs"];
m1_156 [label="new FakeOptionsWithSequenceAndSeparator()", span="389-389", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_157 [label="Exit lambda expression", span="389-389", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_159 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="405-405", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="ReflectionExtensions.cs"];
m1_163 [label="Entry lambda expression", span="411-411", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_164 [label="new FakeOptionsWithSequenceAndSeparator()", span="411-411", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_165 [label="Exit lambda expression", span="411-411", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_189 [label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl'')),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''))\r\n                }", span="458-462", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="ReflectionExtensions.cs"];
m1_190 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSets(),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="465-469", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="ReflectionExtensions.cs"];
m1_191 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="472-472", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="ReflectionExtensions.cs"];
m1_192 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="455-455", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="ReflectionExtensions.cs"];
m1_194 [label="Entry lambda expression", span="466-466", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_195 [label="new FakeOptionsWithSets()", span="466-466", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_196 [label="Exit lambda expression", span="466-466", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_198 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="478-478", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="ReflectionExtensions.cs"];
m1_199 [label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = null\r\n            }", span="480-483", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="ReflectionExtensions.cs"];
m1_193 [label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294", cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="ReflectionExtensions.cs"];
m1_197 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", file="ReflectionExtensions.cs"];
m1_200 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="485-489", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="ReflectionExtensions.cs"];
m1_201 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="492-492", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="ReflectionExtensions.cs"];
m1_248 [label="new FakeOptions()", span="582-582", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_249 [label="Exit lambda expression", span="582-582", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_255 [label="Entry lambda expression", span="601-601", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_276 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithRequiredValue(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="658-662", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="ReflectionExtensions.cs"];
m1_277 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="665-665", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="ReflectionExtensions.cs"];
m1_278 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="652-652", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="ReflectionExtensions.cs"];
m1_45 [label="Exit RailwaySharp.ErrorHandling.OkPair.Create<TSuccess, TMessage>(TSuccess, System.Collections.Generic.IEnumerable<TMessage>)", span="242-242", cluster="RailwaySharp.ErrorHandling.OkPair.Create<TSuccess, TMessage>(TSuccess, System.Collections.Generic.IEnumerable<TMessage>)", file="ReflectionExtensions.cs"];
m1_239 [label="Entry RailwaySharp.ErrorHandling.ResultExtensions.SelectMany<TSuccess, TMessage, TResult>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>, System.Func<TSuccess, RailwaySharp.ErrorHandling.Result<TResult, TMessage>>)", span="784-784", cluster="RailwaySharp.ErrorHandling.ResultExtensions.SelectMany<TSuccess, TMessage, TResult>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>, System.Func<TSuccess, RailwaySharp.ErrorHandling.Result<TResult, TMessage>>)", file="ReflectionExtensions.cs"];
m1_256 [label="Entry RailwaySharp.ErrorHandling.ResultExtensions.Select<TSuccess, TMessage, TResult>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>, System.Func<TSuccess, TResult>)", span="819-819", cluster="RailwaySharp.ErrorHandling.ResultExtensions.Select<TSuccess, TMessage, TResult>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>, System.Func<TSuccess, TResult>)", file="ReflectionExtensions.cs"];
m1_264 [label="return bad.Messages;", span="842-842", cluster="RailwaySharp.ErrorHandling.ResultExtensions.FailedWith<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ReflectionExtensions.cs"];
m1_288 [label="RailwaySharp.ErrorHandling.Ok<TSuccess, TMessage>", span="", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_36 [label="return Success.Equals(other.Success) && Messages.SequenceEqual(other.Messages);", span="233-233", cluster="RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>.Equals(RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>)", file="ReflectionExtensions.cs"];
m1_44 [label="return new OkPair<TSuccess, TMessage>(success, messages);", span="247-247", cluster="RailwaySharp.ErrorHandling.OkPair.Create<TSuccess, TMessage>(TSuccess, System.Collections.Generic.IEnumerable<TMessage>)", file="ReflectionExtensions.cs"];
m1_51 [label="return okPair.Messages;", span="257-257", cluster="RailwaySharp.ErrorHandling.OkPair.Second<TSuccess, TMessage>(RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>)", file="ReflectionExtensions.cs"];
m1_59 [label="var ok = (Ok<TSuccess, TMessage>)this", span="298-298", cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.ToString()", file="ReflectionExtensions.cs"];
m1_88 [label="return new Ok<TSuccess, TMessage>(new OkPair<TSuccess, TMessage>(value, Enumerable.Empty<TMessage>()));", span="386-386", cluster="RailwaySharp.ErrorHandling.Result.Succeed<TSuccess, TMessage>(TSuccess)", file="ReflectionExtensions.cs"];
m1_115 [label="Entry RailwaySharp.ErrorHandling.Trial.Failed<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", span="479-479", cluster="RailwaySharp.ErrorHandling.Trial.Failed<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ReflectionExtensions.cs"];
m1_123 [label="return failureFunc(bad.Messages);", span="501-501", cluster="RailwaySharp.ErrorHandling.Trial.Either<TSuccess, TMessage, TResult>(System.Func<RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>, TResult>, System.Func<System.Collections.Generic.IEnumerable<TMessage>, TResult>, RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ReflectionExtensions.cs"];
m1_140 [label="return Either(successFunc, failureFunc, result);", span="541-541", cluster="RailwaySharp.ErrorHandling.Trial.MergeMessages<TSuccess, TMessage>(System.Collections.Generic.IEnumerable<TMessage>, RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ReflectionExtensions.cs"];
m1_204 [label="ok != null", span="698-698", cluster="RailwaySharp.ErrorHandling.ResultExtensions.Match<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>, System.Action<TSuccess, System.Collections.Generic.IEnumerable<TMessage>>, System.Action<System.Collections.Generic.IEnumerable<TMessage>>)", file="ReflectionExtensions.cs"];
m1_212 [label="Entry RailwaySharp.ErrorHandling.ResultExtensions.Either<TSuccess, TMessage, TResult>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>, System.Func<TSuccess, System.Collections.Generic.IEnumerable<TMessage>, TResult>, System.Func<System.Collections.Generic.IEnumerable<TMessage>, TResult>)", span="713-713", cluster="RailwaySharp.ErrorHandling.ResultExtensions.Either<TSuccess, TMessage, TResult>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>, System.Func<TSuccess, System.Collections.Generic.IEnumerable<TMessage>, TResult>, System.Func<System.Collections.Generic.IEnumerable<TMessage>, TResult>)", file="ReflectionExtensions.cs"];
m1_221 [label="return Trial.Lift(func, result);", span="735-735", cluster="RailwaySharp.ErrorHandling.ResultExtensions.Map<TSuccess, TMessage, TResult>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>, System.Func<TSuccess, TResult>)", file="ReflectionExtensions.cs"];
m1_247 [label="Exit RailwaySharp.ErrorHandling.ResultExtensions.SelectMany<TSuccess, TMessage, TValue, TResult>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>, System.Func<TSuccess, RailwaySharp.ErrorHandling.Result<TValue, TMessage>>, System.Func<TSuccess, TValue, TResult>)", span="798-798", cluster="RailwaySharp.ErrorHandling.ResultExtensions.SelectMany<TSuccess, TMessage, TValue, TResult>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>, System.Func<TSuccess, RailwaySharp.ErrorHandling.Result<TValue, TMessage>>, System.Func<TSuccess, TValue, TResult>)", file="ReflectionExtensions.cs"];
m1_263 [label="var bad = (Bad<TSuccess, TMessage>)result", span="841-841", cluster="RailwaySharp.ErrorHandling.ResultExtensions.FailedWith<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ReflectionExtensions.cs"];
m1_279 [label="Entry RailwaySharp.ErrorHandling.ResultExtensions.Messages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", span="870-870", cluster="RailwaySharp.ErrorHandling.ResultExtensions.Messages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ReflectionExtensions.cs"];
m1_287 [label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>", span="", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_295 [label="Entry lambda expression", span="700-700", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_303 [label="Entry lambda expression", span="719-719", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_310 [label="Entry lambda expression", span="738-738", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_318 [label="Entry lambda expression", span="757-757", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_13 [label="return true;", span="155-155", cluster="RailwaySharp.ErrorHandling.Unit.operator ==(RailwaySharp.ErrorHandling.Unit, RailwaySharp.ErrorHandling.Unit)", file="ReflectionExtensions.cs"];
m1_240 [label="return Trial.Bind(func, result);", span="787-787", cluster="RailwaySharp.ErrorHandling.ResultExtensions.SelectMany<TSuccess, TMessage, TResult>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>, System.Func<TSuccess, RailwaySharp.ErrorHandling.Result<TResult, TMessage>>)", file="ReflectionExtensions.cs"];
m1_257 [label="return Trial.Lift(func, result);", span="822-822", cluster="RailwaySharp.ErrorHandling.ResultExtensions.Select<TSuccess, TMessage, TResult>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>, System.Func<TSuccess, TResult>)", file="ReflectionExtensions.cs"];
m1_265 [label="Exit RailwaySharp.ErrorHandling.ResultExtensions.FailedWith<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", span="831-831", cluster="RailwaySharp.ErrorHandling.ResultExtensions.FailedWith<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ReflectionExtensions.cs"];
m1_289 [label="RailwaySharp.ErrorHandling.Bad<TSuccess, TMessage>", span="", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_28 [label="Entry RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>.Equals(RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>)", span="226-226", cluster="RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>.Equals(RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>)", file="ReflectionExtensions.cs"];
m1_38 [label="Entry Unk.SequenceEqual", span="", cluster="Unk.SequenceEqual", file="ReflectionExtensions.cs"];
m1_37 [label="Exit RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>.Equals(RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>)", span="226-226", cluster="RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>.Equals(RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>)", file="ReflectionExtensions.cs"];
m1_53 [label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.Result(RailwaySharp.ErrorHandling.ResultType)", span="283-283", cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.Result(RailwaySharp.ErrorHandling.ResultType)", file="ReflectionExtensions.cs"];
m1_52 [label="Exit RailwaySharp.ErrorHandling.OkPair.Second<TSuccess, TMessage>(RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>)", span="255-255", cluster="RailwaySharp.ErrorHandling.OkPair.Second<TSuccess, TMessage>(RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>)", file="ReflectionExtensions.cs"];
m1_61 [label="var bad = (Bad<TSuccess, TMessage>)this", span="304-304", cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.ToString()", file="ReflectionExtensions.cs"];
m1_60 [label="return string.Format(\r\n                        ''OK: {0} - {1}'',\r\n                        ok.Value.Success,\r\n                        string.Join(Environment.NewLine, ok.Value.Messages.Select(v => v.ToString())));", span="299-302", cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.ToString()", file="ReflectionExtensions.cs"];
m1_81 [label="Entry RailwaySharp.ErrorHandling.Result.FailWith<TSuccess, TMessage>(System.Collections.Generic.IEnumerable<TMessage>)", span="368-368", cluster="RailwaySharp.ErrorHandling.Result.FailWith<TSuccess, TMessage>(System.Collections.Generic.IEnumerable<TMessage>)", file="ReflectionExtensions.cs"];
m1_90 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()", file="ReflectionExtensions.cs"];
m1_89 [label="Exit RailwaySharp.ErrorHandling.Result.Succeed<TSuccess, TMessage>(TSuccess)", span="384-384", cluster="RailwaySharp.ErrorHandling.Result.Succeed<TSuccess, TMessage>(TSuccess)", file="ReflectionExtensions.cs"];
m1_117 [label="Exit RailwaySharp.ErrorHandling.Trial.Failed<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", span="479-479", cluster="RailwaySharp.ErrorHandling.Trial.Failed<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ReflectionExtensions.cs"];
m1_116 [label="return result.Tag == ResultType.Bad;", span="481-481", cluster="RailwaySharp.ErrorHandling.Trial.Failed<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ReflectionExtensions.cs"];
m1_125 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)", file="ReflectionExtensions.cs"];
m1_124 [label="Exit RailwaySharp.ErrorHandling.Trial.Either<TSuccess, TMessage, TResult>(System.Func<RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>, TResult>, System.Func<System.Collections.Generic.IEnumerable<TMessage>, TResult>, RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", span="490-490", cluster="RailwaySharp.ErrorHandling.Trial.Either<TSuccess, TMessage, TResult>(System.Func<RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>, TResult>, System.Func<System.Collections.Generic.IEnumerable<TMessage>, TResult>, RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ReflectionExtensions.cs"];
m1_133 [label="Entry System.Exception.Exception(string)", span="0-0", cluster="System.Exception.Exception(string)", file="ReflectionExtensions.cs"];
m1_141 [label="Exit RailwaySharp.ErrorHandling.Trial.MergeMessages<TSuccess, TMessage>(System.Collections.Generic.IEnumerable<TMessage>, RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", span="529-529", cluster="RailwaySharp.ErrorHandling.Trial.MergeMessages<TSuccess, TMessage>(System.Collections.Generic.IEnumerable<TMessage>, RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ReflectionExtensions.cs"];
m1_206 [label="return;", span="701-701", cluster="RailwaySharp.ErrorHandling.ResultExtensions.Match<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>, System.Action<TSuccess, System.Collections.Generic.IEnumerable<TMessage>>, System.Action<System.Collections.Generic.IEnumerable<TMessage>>)", file="ReflectionExtensions.cs"];
m1_205 [label="ifSuccess(ok.Value.Success, ok.Value.Messages)", span="700-700", cluster="RailwaySharp.ErrorHandling.ResultExtensions.Match<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>, System.Action<TSuccess, System.Collections.Generic.IEnumerable<TMessage>>, System.Action<System.Collections.Generic.IEnumerable<TMessage>>)", file="ReflectionExtensions.cs"];
m1_214 [label="ok != null", span="718-718", cluster="RailwaySharp.ErrorHandling.ResultExtensions.Either<TSuccess, TMessage, TResult>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>, System.Func<TSuccess, System.Collections.Generic.IEnumerable<TMessage>, TResult>, System.Func<System.Collections.Generic.IEnumerable<TMessage>, TResult>)", file="ReflectionExtensions.cs"];
m1_213 [label="var ok = result as Ok<TSuccess, TMessage>", span="717-717", cluster="RailwaySharp.ErrorHandling.ResultExtensions.Either<TSuccess, TMessage, TResult>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>, System.Func<TSuccess, System.Collections.Generic.IEnumerable<TMessage>, TResult>, System.Func<System.Collections.Generic.IEnumerable<TMessage>, TResult>)", file="ReflectionExtensions.cs"];
m1_222 [label="Exit RailwaySharp.ErrorHandling.ResultExtensions.Map<TSuccess, TMessage, TResult>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>, System.Func<TSuccess, TResult>)", span="732-732", cluster="RailwaySharp.ErrorHandling.ResultExtensions.Map<TSuccess, TMessage, TResult>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>, System.Func<TSuccess, TResult>)", file="ReflectionExtensions.cs"];
m1_281 [label="var ok = (Ok<TSuccess, TMessage>)result", span="874-874", cluster="RailwaySharp.ErrorHandling.ResultExtensions.Messages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ReflectionExtensions.cs"];
m1_280 [label="result.Tag == ResultType.Ok", span="872-872", cluster="RailwaySharp.ErrorHandling.ResultExtensions.Messages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ReflectionExtensions.cs"];
m1_297 [label="Exit lambda expression", span="700-700", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_296 [label="new FakeOptionsWithSequenceMinMaxEqual()", span="700-700", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_305 [label="Exit lambda expression", span="719-719", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_304 [label="new FakeOptionsWithRequiredValue()", span="719-719", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_312 [label="Exit lambda expression", span="738-738", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_311 [label="new FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="738-738", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_320 [label="Exit lambda expression", span="757-757", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_319 [label="new FakeOptionsWithNullables()", span="757-757", cluster="lambda expression", file="ReflectionExtensions.cs"];
m1_174 [label="return new Bad<TSuccess, TMessage>(\r\n                    ((Bad<TValue, TMessage>)result).Messages);", span="601-602", cluster="RailwaySharp.ErrorHandling.Trial.Apply<TValue, TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<System.Func<TValue, TSuccess>, TMessage>, RailwaySharp.ErrorHandling.Result<TValue, TMessage>)", file="ReflectionExtensions.cs"];
m1_173 [label="wrappedFunction.Tag == ResultType.Ok && result.Tag == ResultType.Bad", span="599-599", cluster="RailwaySharp.ErrorHandling.Trial.Apply<TValue, TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<System.Func<TValue, TSuccess>, TMessage>, RailwaySharp.ErrorHandling.Result<TValue, TMessage>)", file="ReflectionExtensions.cs"];
m1_175 [label="var bad1 = (Bad<Func<TValue, TSuccess>, TMessage>)wrappedFunction", span="605-605", cluster="RailwaySharp.ErrorHandling.Trial.Apply<TValue, TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<System.Func<TValue, TSuccess>, TMessage>, RailwaySharp.ErrorHandling.Result<TValue, TMessage>)", file="ReflectionExtensions.cs"];
m1_176 [label="var bad2 = (Bad<TValue, TMessage>)result", span="606-606", cluster="RailwaySharp.ErrorHandling.Trial.Apply<TValue, TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<System.Func<TValue, TSuccess>, TMessage>, RailwaySharp.ErrorHandling.Result<TValue, TMessage>)", file="ReflectionExtensions.cs"];
m1_178 [label="Exit RailwaySharp.ErrorHandling.Trial.Apply<TValue, TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<System.Func<TValue, TSuccess>, TMessage>, RailwaySharp.ErrorHandling.Result<TValue, TMessage>)", span="583-583", cluster="RailwaySharp.ErrorHandling.Trial.Apply<TValue, TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<System.Func<TValue, TSuccess>, TMessage>, RailwaySharp.ErrorHandling.Result<TValue, TMessage>)", file="ReflectionExtensions.cs"];
m1_177 [label="return new Bad<TSuccess, TMessage>(bad1.Messages.Concat(bad2.Messages));", span="608-608", cluster="RailwaySharp.ErrorHandling.Trial.Apply<TValue, TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<System.Func<TValue, TSuccess>, TMessage>, RailwaySharp.ErrorHandling.Result<TValue, TMessage>)", file="ReflectionExtensions.cs"];
m1_185 [label="Entry RailwaySharp.ErrorHandling.Trial.Collect<TSuccess, TMessage>(System.Collections.Generic.IEnumerable<RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>>)", span="645-645", cluster="RailwaySharp.ErrorHandling.Trial.Collect<TSuccess, TMessage>(System.Collections.Generic.IEnumerable<RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>>)", file="ReflectionExtensions.cs"];
m1_186 [label="return Lift(Enumerable.Reverse, xs.Fold<Result<TSuccess, TMessage>, Result<IEnumerable<TSuccess>, TMessage>>(\r\n                (result, next) =>\r\n                {\r\n                    if (result.Tag == ResultType.Ok && next.Tag == ResultType.Ok)\r\n                    {\r\n                        var ok1 = (Ok<TSuccess, TMessage>)result;\r\n                        var ok2 = (Ok<TSuccess, TMessage>)next;\r\n                        return\r\n                            new Ok<IEnumerable<TSuccess>, TMessage>(\r\n                                new OkPair<IEnumerable<TSuccess>, TMessage>(\r\n                                    new[] { ok2.Value.Success, ok1.Value.Success },\r\n                                    ok1.Value.Messages.Concat(ok2.Value.Messages)));\r\n                    }\r\n                    if ((result.Tag == ResultType.Ok && next.Tag == ResultType.Bad)\r\n                        || (result.Tag == ResultType.Bad && next.Tag == ResultType.Ok))\r\n                    {\r\n                        var m1 = result.Tag == ResultType.Ok\r\n                            ? ((Ok<TSuccess, TMessage>)result).Value.Messages\r\n                            : ((Bad<TSuccess, TMessage>)next).Messages;\r\n                        var m2 = result.Tag == ResultType.Bad\r\n                            ? ((Bad<TSuccess, TMessage>)result).Messages\r\n                            : ((Ok<TSuccess, TMessage>)next).Value.Messages;\r\n                        return new Bad<IEnumerable<TSuccess>, TMessage>(m1.Concat(m2));\r\n                    }\r\n                    var bad1 = (Bad<TSuccess, TMessage>)result;\r\n                    var bad2 = (Bad<TSuccess, TMessage>)next;\r\n                    return new Bad<IEnumerable<TSuccess>, TMessage>(bad1.Messages.Concat(bad2.Messages));\r\n                }));", span="648-675", cluster="RailwaySharp.ErrorHandling.Trial.Collect<TSuccess, TMessage>(System.Collections.Generic.IEnumerable<RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>>)", file="ReflectionExtensions.cs"];
m1_35 [label="Entry Unk.SequenceEqual", span="", cluster="Unk.SequenceEqual", file="ReflectionExtensions.cs"];
m1_202 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="478-478", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="ReflectionExtensions.cs"];
m1_207 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="498-498", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="ReflectionExtensions.cs"];
m1_208 [label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="500-503", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="ReflectionExtensions.cs"];
m1_209 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="505-509", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="ReflectionExtensions.cs"];
m1_10 [label="return ''()'';", span="150-150", cluster="RailwaySharp.ErrorHandling.Unit.ToString()", file="ReflectionExtensions.cs"];
m1_30 [label="Entry RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>.GetHashCode()", span="216-216", cluster="RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>.GetHashCode()", file="ReflectionExtensions.cs"];
m1_220 [label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283", cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="ReflectionExtensions.cs"];
m1_187 [label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11", cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="ReflectionExtensions.cs"];
m1_160 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="410-414", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="ReflectionExtensions.cs"];
m1_161 [label="expected.ShouldBeEquivalentTo(result.Value.StringSequence)", span="417-417", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="ReflectionExtensions.cs"];
m1_162 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="405-405", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="ReflectionExtensions.cs"];
m1_47 [label="Entry RailwaySharp.ErrorHandling.OkPair.First<TSuccess, TMessage>(RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>)", span="250-250", cluster="RailwaySharp.ErrorHandling.OkPair.First<TSuccess, TMessage>(RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>)", file="ReflectionExtensions.cs"];
m1_48 [label="return okPair.Success;", span="252-252", cluster="RailwaySharp.ErrorHandling.OkPair.First<TSuccess, TMessage>(RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>)", file="ReflectionExtensions.cs"];
m1_49 [label="Exit RailwaySharp.ErrorHandling.OkPair.First<TSuccess, TMessage>(RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>)", span="250-250", cluster="RailwaySharp.ErrorHandling.OkPair.First<TSuccess, TMessage>(RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>)", file="ReflectionExtensions.cs"];
m1_50 [label="Entry RailwaySharp.ErrorHandling.OkPair.Second<TSuccess, TMessage>(RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>)", span="255-255", cluster="RailwaySharp.ErrorHandling.OkPair.Second<TSuccess, TMessage>(RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>)", file="ReflectionExtensions.cs"];
m1_215 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="517-517", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="ReflectionExtensions.cs"];
m1_216 [label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="519-523", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="ReflectionExtensions.cs"];
m1_217 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="525-529", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="ReflectionExtensions.cs"];
m1_218 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="532-532", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="ReflectionExtensions.cs"];
m1_118 [label="Entry RailwaySharp.ErrorHandling.Trial.Either<TSuccess, TMessage, TResult>(System.Func<RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>, TResult>, System.Func<System.Collections.Generic.IEnumerable<TMessage>, TResult>, RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", span="490-490", cluster="RailwaySharp.ErrorHandling.Trial.Either<TSuccess, TMessage, TResult>(System.Func<RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>, TResult>, System.Func<System.Collections.Generic.IEnumerable<TMessage>, TResult>, RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ReflectionExtensions.cs"];
m1_120 [label="ok != null", span="496-496", cluster="RailwaySharp.ErrorHandling.Trial.Either<TSuccess, TMessage, TResult>(System.Func<RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>, TResult>, System.Func<System.Collections.Generic.IEnumerable<TMessage>, TResult>, RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ReflectionExtensions.cs"];
m1_119 [label="var ok = trialResult as Ok<TSuccess, TMessage>", span="495-495", cluster="RailwaySharp.ErrorHandling.Trial.Either<TSuccess, TMessage, TResult>(System.Func<RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>, TResult>, System.Func<System.Collections.Generic.IEnumerable<TMessage>, TResult>, RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ReflectionExtensions.cs"];
m1_121 [label="return successFunc(ok.Value);", span="498-498", cluster="RailwaySharp.ErrorHandling.Trial.Either<TSuccess, TMessage, TResult>(System.Func<RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>, TResult>, System.Func<System.Collections.Generic.IEnumerable<TMessage>, TResult>, RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ReflectionExtensions.cs"];
m1_122 [label="var bad = (Bad<TSuccess, TMessage>)trialResult", span="500-500", cluster="RailwaySharp.ErrorHandling.Trial.Either<TSuccess, TMessage, TResult>(System.Func<RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>, TResult>, System.Func<System.Collections.Generic.IEnumerable<TMessage>, TResult>, RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ReflectionExtensions.cs"];
m1_139 [label="Func<IEnumerable<TMessage>, Result<TSuccess, TMessage>> failureFunc =\r\n                errors => new Bad<TSuccess, TMessage>(errors.Concat(messages))", span="538-539", cluster="RailwaySharp.ErrorHandling.Trial.MergeMessages<TSuccess, TMessage>(System.Collections.Generic.IEnumerable<TMessage>, RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ReflectionExtensions.cs"];
m1_282 [label="return ok.Value.Messages;", span="875-875", cluster="RailwaySharp.ErrorHandling.ResultExtensions.Messages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ReflectionExtensions.cs"];
m1_87 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="212-212", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="ReflectionExtensions.cs"];
m1_39 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", file="ReflectionExtensions.cs"];
m1_11 [label="Exit RailwaySharp.ErrorHandling.Unit.ToString()", span="148-148", cluster="RailwaySharp.ErrorHandling.Unit.ToString()", file="ReflectionExtensions.cs"];
m1_9 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ReflectionExtensions.cs"];
m1_219 [label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0", cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", file="ReflectionExtensions.cs"];
m1_63 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="173-173", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="ReflectionExtensions.cs"];
m1_241 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="575-575", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="ReflectionExtensions.cs"];
m1_299 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="713-713", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="ReflectionExtensions.cs"];
m1_300 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithRequiredValue(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="718-722", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="ReflectionExtensions.cs"];
m1_301 [label="expected.ShouldBeEquivalentTo(result.Value)", span="725-725", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="ReflectionExtensions.cs"];
m1_302 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="713-713", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="ReflectionExtensions.cs"];
m1_83 [label="Exit RailwaySharp.ErrorHandling.Result.FailWith<TSuccess, TMessage>(System.Collections.Generic.IEnumerable<TMessage>)", span="368-368", cluster="RailwaySharp.ErrorHandling.Result.FailWith<TSuccess, TMessage>(System.Collections.Generic.IEnumerable<TMessage>)", file="ReflectionExtensions.cs"];
m1_65 [label="Entry Unk.Join", span="", cluster="Unk.Join", file="ReflectionExtensions.cs"];
m1_64 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="ReflectionExtensions.cs"];
m1_66 [label="Entry string.Format(string, object, object)", span="0-0", cluster="string.Format(string, object, object)", file="ReflectionExtensions.cs"];
m1_67 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="ReflectionExtensions.cs"];
m1_137 [label="Entry RailwaySharp.ErrorHandling.Trial.MergeMessages<TSuccess, TMessage>(System.Collections.Generic.IEnumerable<TMessage>, RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", span="529-529", cluster="RailwaySharp.ErrorHandling.Trial.MergeMessages<TSuccess, TMessage>(System.Collections.Generic.IEnumerable<TMessage>, RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ReflectionExtensions.cs"];
m1_138 [label="Func<OkPair<TSuccess, TMessage>, Result<TSuccess, TMessage>> successFunc =\r\n                pair =>\r\n                    new Ok<TSuccess, TMessage>(\r\n                        new OkPair<TSuccess, TMessage>(pair.Success, messages.Concat(pair.Messages)))", span="533-536", cluster="RailwaySharp.ErrorHandling.Trial.MergeMessages<TSuccess, TMessage>(System.Collections.Generic.IEnumerable<TMessage>, RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ReflectionExtensions.cs"];
m1_313 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", file="ReflectionExtensions.cs"];
m1_114 [label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="305-305", cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="ReflectionExtensions.cs"];
m1_15 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="41-41", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="ReflectionExtensions.cs"];
m1_16 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="46-50", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="ReflectionExtensions.cs", color=green, community=0];
m1_17 [label="Assert.Equal(expected, result.Value.LongValue)", span="53-53", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="ReflectionExtensions.cs"];
m1_211 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="498-498", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="ReflectionExtensions.cs"];
m1_314 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="751-751", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="ReflectionExtensions.cs"];
m1_315 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithNullables(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="756-760", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="ReflectionExtensions.cs"];
m1_316 [label="expected.ShouldBeEquivalentTo(result.Value.NullableInt)", span="763-763", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="ReflectionExtensions.cs"];
m1_317 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="751-751", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="ReflectionExtensions.cs"];
m1_243 [label="Func<TSuccess, Func<TValue, TResult>> curriedMapper = suc => val => mapperFunc(suc, val)", span="803-803", cluster="RailwaySharp.ErrorHandling.ResultExtensions.SelectMany<TSuccess, TMessage, TValue, TResult>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>, System.Func<TSuccess, RailwaySharp.ErrorHandling.Result<TValue, TMessage>>, System.Func<TSuccess, TValue, TResult>)", file="ReflectionExtensions.cs"];
m1_242 [label="Entry RailwaySharp.ErrorHandling.ResultExtensions.SelectMany<TSuccess, TMessage, TValue, TResult>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>, System.Func<TSuccess, RailwaySharp.ErrorHandling.Result<TValue, TMessage>>, System.Func<TSuccess, TValue, TResult>)", span="798-798", cluster="RailwaySharp.ErrorHandling.ResultExtensions.SelectMany<TSuccess, TMessage, TValue, TResult>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>, System.Func<TSuccess, RailwaySharp.ErrorHandling.Result<TValue, TMessage>>, System.Func<TSuccess, TValue, TResult>)", file="ReflectionExtensions.cs"];
m1_244 [label="Func<\r\n                Result<TSuccess, TMessage>,\r\n                Result<TValue, TMessage>,\r\n                Result<TResult, TMessage>\r\n            > liftedMapper = (a, b) => Trial.Lift2(curriedMapper, a, b)", span="804-808", cluster="RailwaySharp.ErrorHandling.ResultExtensions.SelectMany<TSuccess, TMessage, TValue, TResult>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>, System.Func<TSuccess, RailwaySharp.ErrorHandling.Result<TValue, TMessage>>, System.Func<TSuccess, TValue, TResult>)", file="ReflectionExtensions.cs"];
m1_245 [label="var v = Trial.Bind(func, result)", span="809-809", cluster="RailwaySharp.ErrorHandling.ResultExtensions.SelectMany<TSuccess, TMessage, TValue, TResult>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>, System.Func<TSuccess, RailwaySharp.ErrorHandling.Result<TValue, TMessage>>, System.Func<TSuccess, TValue, TResult>)", file="ReflectionExtensions.cs"];
m1_210 [label="Entry System.Action<T1, T2>.Invoke(T1, T2)", span="0-0", cluster="System.Action<T1, T2>.Invoke(T1, T2)", file="ReflectionExtensions.cs"];
m1_12 [label="Entry RailwaySharp.ErrorHandling.Unit.operator ==(RailwaySharp.ErrorHandling.Unit, RailwaySharp.ErrorHandling.Unit)", span="153-153", cluster="RailwaySharp.ErrorHandling.Unit.operator ==(RailwaySharp.ErrorHandling.Unit, RailwaySharp.ErrorHandling.Unit)", file="ReflectionExtensions.cs"];
m1_14 [label="Exit RailwaySharp.ErrorHandling.Unit.operator ==(RailwaySharp.ErrorHandling.Unit, RailwaySharp.ErrorHandling.Unit)", span="153-153", cluster="RailwaySharp.ErrorHandling.Unit.operator ==(RailwaySharp.ErrorHandling.Unit, RailwaySharp.ErrorHandling.Unit)", file="ReflectionExtensions.cs"];
m1_290 [label="System.Collections.Generic.IEnumerable<TMessage>", span="", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ReflectionExtensions.cs"];
m1_292 [label="System.Func<TSuccess, TValue, TResult>", span="", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ReflectionExtensions.cs"];
m1_291 [label="System.Func<TValue, RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>>", span="", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ReflectionExtensions.cs"];
m1_293 [label=TSuccess, span="", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ReflectionExtensions.cs"];
m1_294 [label=curriedMapper, span="", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ReflectionExtensions.cs"];
m1_8 [label="Exit RailwaySharp.ErrorHandling.Unit.GetHashCode()", span="143-143", cluster="RailwaySharp.ErrorHandling.Unit.GetHashCode()", file="ReflectionExtensions.cs"];
m1_102 [label="expected.ShouldBeEquivalentTo(result.Value.Colors)", span="268-268", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="ReflectionExtensions.cs"];
m1_283 [label="var bad = (Bad<TSuccess, TMessage>)result", span="877-877", cluster="RailwaySharp.ErrorHandling.ResultExtensions.Messages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ReflectionExtensions.cs"];
m1_284 [label="return bad.Messages;", span="878-878", cluster="RailwaySharp.ErrorHandling.ResultExtensions.Messages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ReflectionExtensions.cs"];
m1_285 [label="Exit RailwaySharp.ErrorHandling.ResultExtensions.Messages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", span="870-870", cluster="RailwaySharp.ErrorHandling.ResultExtensions.Messages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ReflectionExtensions.cs"];
m1_286 [label="RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>", span="", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="ReflectionExtensions.cs"];
m1_322 [label=fakeOptions, span="", file="ReflectionExtensions.cs"];
m1_323 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span="", file="ReflectionExtensions.cs"];
n6 -> n1  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.Example<T>"];
n6 -> n2  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.Example<T>"];
n6 -> n3  [key=1, style=dashed, color=red, label="CommandLine.Text.Example<T>"];
n6 -> n4  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.Example<T>"];
n0 -> n1  [key=0, style=solid];
n0 -> n2  [key=1, style=dashed, color=darkseagreen4, label=string];
n0 -> n3  [key=1, style=dashed, color=red, label="System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>"];
n0 -> n4  [key=1, style=dashed, color=darkseagreen4, label=T];
n1 -> n2  [key=0, style=solid];
n2 -> n3  [key=0, style=solid, color=red];
n2 -> d3  [key=0, style=solid];
n3 -> n4  [key=0, style=solid, color=red];
n4 -> n5  [key=0, style=solid];
n5 -> n0  [key=0, style=bold, color=blue];
n5 -> d0  [key=0, style=bold, color=blue];
d4 -> n5  [key=0, style=solid, color=green];
d12 -> d4  [key=1, style=dashed, color=green, label="CommandLine.Text.Example<T>"];
d12 -> n1  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.Example<T>"];
d12 -> n2  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.Example<T>"];
d12 -> d3  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.Example<T>"];
d0 -> d4  [key=1, style=dashed, color=green, label=T];
d0 -> n1  [key=0, style=solid];
d0 -> n2  [key=1, style=dashed, color=darkseagreen4, label=string];
d0 -> d3  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>"];
d3 -> d4  [key=0, style=solid, color=green];
m1_149 -> m1_150  [key=0, style=solid];
m1_149 -> m1_155  [key=1, style=dashed, color=darkseagreen4, label="System.Func<TValue, RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>>"];
m1_149 -> m1_152  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TValue, TMessage>"];
m1_149 -> m1_147  [key=0, style=bold, color=blue];
m1_150 -> m1_151  [key=0, style=solid];
m1_150 -> m1_155  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.OkPair<TValue, TMessage>"];
m1_150 -> m1_152  [key=1, style=dashed, color=darkseagreen4, label=successFunc];
m1_152 -> m1_153  [key=0, style=solid];
m1_152 -> m1_118  [key=2, style=dotted];
m1_152 -> m1_9  [key=2, style=dotted];
m1_152 -> m1_155  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_151 -> m1_152  [key=0, style=solid];
m1_151 -> m1_158  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<TMessage>"];
m1_151 -> m1_153  [key=1, style=dashed, color=darkseagreen4, label="long[]"];
m1_153 -> m1_149  [key=0, style=bold, color=blue];
m1_153 -> m1_154  [key=0, style=solid];
m1_153 -> m1_104  [key=2, style=dotted];
m1_40 -> m1_41  [key=0, style=solid];
m1_40 -> m1_42  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
m1_41 -> m1_9  [key=2, style=dotted];
m1_41 -> m1_42  [key=0, style=solid];
m1_41 -> m1_44  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_41 -> m1_45  [key=0, style=solid];
m1_41 -> m1_46  [key=2, style=dotted];
m1_42 -> m1_43  [key=0, style=solid];
m1_42 -> m1_35  [key=2, style=dotted];
m1_42 -> m1_11  [key=2, style=dotted];
m1_42 -> m1_44  [key=0, style=solid];
m1_43 -> m1_40  [key=0, style=bold, color=blue];
m1_43 -> m1_45  [key=0, style=solid];
m1_43 -> m1_46  [key=2, style=dotted];
m1_106 -> m1_107  [key=0, style=solid];
m1_106 -> m1_108  [key=2, style=dotted];
m1_107 -> m1_108  [key=0, style=solid];
m1_107 -> m1_75  [key=2, style=dotted];
m1_107 -> m1_18  [key=2, style=dotted];
m1_107 -> m1_90  [key=2, style=dotted];
m1_107 -> m1_105  [key=0, style=bold, color=blue];
m1_108 -> m1_106  [key=0, style=bold, color=blue];
m1_71 -> m1_72  [key=0, style=solid];
m1_71 -> m1_54  [key=2, style=dotted];
m1_97 -> m1_98  [key=0, style=solid];
m1_97 -> m1_99  [key=2, style=dotted];
m1_98 -> m1_101  [key=0, style=solid];
m1_98 -> m1_75  [key=2, style=dotted];
m1_98 -> m1_18  [key=2, style=dotted];
m1_98 -> m1_102  [key=2, style=dotted];
m1_98 -> m1_90  [key=2, style=dotted];
m1_98 -> m1_96  [key=0, style=bold, color=blue];
m1_99 -> m1_100  [key=0, style=solid];
m1_100 -> m1_101  [key=0, style=solid];
m1_100 -> m1_78  [key=2, style=dotted];
m1_100 -> m1_102  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Colors"];
m1_101 -> m1_97  [key=0, style=bold, color=blue];
m1_101 -> m1_9  [key=2, style=dotted];
m1_101 -> m1_102  [key=0, style=solid];
m1_101 -> m1_105  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_154 -> m1_151  [key=0, style=bold, color=blue];
m1_154 -> m1_155  [key=0, style=solid];
m1_62 -> m1_63  [key=0, style=solid];
m1_62 -> m1_64  [key=2, style=dotted];
m1_62 -> m1_65  [key=2, style=dotted];
m1_62 -> m1_67  [key=2, style=dotted];
m1_62 -> m1_72  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_54 -> m1_55  [key=0, style=solid];
m1_266 -> m1_267  [key=0, style=solid];
m1_266 -> m1_268  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_267 -> m1_9  [key=2, style=dotted];
m1_267 -> m1_268  [key=0, style=solid];
m1_267 -> m1_271  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_267 -> m1_71  [key=2, style=dotted];
m1_268 -> m1_269  [key=0, style=solid];
m1_268 -> m1_270  [key=2, style=dotted];
m1_268 -> m1_11  [key=2, style=dotted];
m1_268 -> m1_266  [key=0, style=bold, color=blue];
m1_269 -> m1_266  [key=0, style=bold, color=blue];
m1_269 -> m1_270  [key=0, style=solid];
m1_269 -> m1_271  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>"];
m1_269 -> m1_273  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>"];
m1_188 -> m1_189  [key=0, style=solid];
m1_18 -> m1_19  [key=0, style=solid];
m1_18 -> m1_20  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<TMessage>"];
m1_18 -> m1_15  [key=0, style=bold, color=blue];
m1_19 -> m1_20  [key=0, style=solid];
m1_20 -> m1_21  [key=0, style=solid, color=green];
m1_21 -> m1_18  [key=0, style=bold, color=blue];
m1_21 -> m1_22  [key=0, style=solid, color=green];
m1_21 -> m1_6  [key=2, style=dotted, color=green];
m1_78 -> m1_79  [key=0, style=solid];
m1_166 -> m1_167  [key=0, style=solid];
m1_166 -> m1_168  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<System.Func<TValue, TSuccess>, TMessage>"];
m1_166 -> m1_169  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TValue, TMessage>"];
m1_166 -> m1_171  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<System.Func<TValue, TSuccess>, TMessage>"];
m1_166 -> m1_172  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TValue, TMessage>"];
m1_166 -> m1_173  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<System.Func<TValue, TSuccess>, TMessage>"];
m1_166 -> m1_174  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TValue, TMessage>"];
m1_166 -> m1_175  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<System.Func<TValue, TSuccess>, TMessage>"];
m1_166 -> m1_176  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TValue, TMessage>"];
m1_170 -> m1_104  [key=2, style=dotted];
m1_170 -> m1_171  [key=0, style=solid];
m1_170 -> m1_178  [key=0, style=solid];
m1_170 -> m1_75  [key=2, style=dotted];
m1_170 -> m1_18  [key=2, style=dotted];
m1_170 -> m1_125  [key=2, style=dotted];
m1_170 -> m1_145  [key=2, style=dotted];
m1_167 -> m1_139  [key=2, style=dotted];
m1_167 -> m1_170  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_167 -> m1_168  [key=0, style=solid];
m1_167 -> m1_171  [key=0, style=solid];
m1_169 -> m1_170  [key=0, style=solid];
m1_169 -> m1_172  [key=2, style=dotted];
m1_169 -> m1_173  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_169 -> m1_176  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_168 -> m1_169  [key=0, style=solid];
m1_168 -> m1_170  [key=1, style=dashed, color=darkseagreen4, label=ok1];
m1_171 -> m1_166  [key=0, style=bold, color=blue];
m1_171 -> m1_172  [key=0, style=solid];
m1_171 -> m1_173  [key=0, style=solid];
m1_258 -> m1_259  [key=0, style=solid];
m1_258 -> m1_256  [key=0, style=bold, color=blue];
m1_260 -> m1_9  [key=2, style=dotted];
m1_260 -> m1_261  [key=0, style=solid];
m1_260 -> m1_263  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_259 -> m1_260  [key=0, style=solid];
m1_259 -> m1_246  [key=2, style=dotted];
m1_259 -> m1_261  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>"];
m1_259 -> m1_263  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>"];
m1_261 -> m1_262  [key=0, style=solid];
m1_261 -> m1_35  [key=2, style=dotted];
m1_261 -> m1_11  [key=2, style=dotted];
m1_262 -> m1_258  [key=0, style=bold, color=blue];
m1_262 -> m1_265  [key=0, style=solid];
m1_262 -> m1_133  [key=2, style=dotted];
m1_262 -> m1_64  [key=2, style=dotted];
m1_262 -> m1_65  [key=2, style=dotted];
m1_262 -> m1_66  [key=2, style=dotted];
m1_262 -> m1_266  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_203 -> m1_204  [key=0, style=solid];
m1_203 -> m1_205  [key=1, style=dashed, color=darkseagreen4, label=ok];
m1_73 -> m1_74  [key=0, style=solid];
m1_73 -> m1_71  [key=2, style=dotted];
m1_75 -> m1_9  [key=2, style=dotted];
m1_75 -> m1_76  [key=0, style=solid];
m1_75 -> m1_79  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_74 -> m1_75  [key=0, style=solid];
m1_74 -> m1_78  [key=2, style=dotted];
m1_74 -> m1_76  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_74 -> m1_72  [key=0, style=bold, color=blue];
m1_76 -> m1_77  [key=0, style=solid];
m1_76 -> m1_35  [key=2, style=dotted];
m1_76 -> m1_11  [key=2, style=dotted];
m1_77 -> m1_73  [key=0, style=bold, color=blue];
m1_77 -> m1_75  [key=0, style=bold, color=blue];
m1_246 -> m1_247  [key=0, style=solid];
m1_246 -> m1_219  [key=2, style=dotted];
m1_91 -> m1_92  [key=0, style=solid];
m1_93 -> m1_9  [key=2, style=dotted];
m1_93 -> m1_94  [key=0, style=solid];
m1_93 -> m1_96  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_93 -> m1_91  [key=0, style=bold, color=blue];
m1_92 -> m1_93  [key=0, style=solid];
m1_92 -> m1_78  [key=2, style=dotted];
m1_92 -> m1_94  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_92 -> m1_75  [key=2, style=dotted];
m1_92 -> m1_18  [key=2, style=dotted];
m1_94 -> m1_95  [key=0, style=solid];
m1_94 -> m1_35  [key=2, style=dotted];
m1_94 -> m1_11  [key=2, style=dotted];
m1_95 -> m1_91  [key=0, style=bold, color=blue];
m1_95 -> m1_96  [key=0, style=solid];
m1_95 -> m1_75  [key=2, style=dotted];
m1_95 -> m1_18  [key=2, style=dotted];
m1_183 -> m1_184  [key=0, style=solid];
m1_183 -> m1_179  [key=2, style=dotted];
m1_183 -> m1_166  [key=2, style=dotted];
m1_84 -> m1_85  [key=0, style=solid];
m1_84 -> m1_78  [key=2, style=dotted];
m1_84 -> m1_69  [key=2, style=dotted];
m1_84 -> m1_86  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_85 -> m1_86  [key=0, style=solid];
m1_85 -> m1_78  [key=2, style=dotted];
m1_85 -> m1_9  [key=2, style=dotted];
m1_85 -> m1_88  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_86 -> m1_84  [key=0, style=bold, color=blue];
m1_86 -> m1_87  [key=0, style=solid];
m1_86 -> m1_35  [key=2, style=dotted];
m1_86 -> m1_11  [key=2, style=dotted];
m1_3 -> m1_4  [key=0, style=solid];
m1_3 -> m1_9  [key=2, style=dotted];
m1_3 -> m1_248  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_4 -> m1_5  [key=0, style=solid];
m1_4 -> m1_10  [key=2, style=dotted];
m1_4 -> m1_11  [key=2, style=dotted];
m1_5 -> m1_3  [key=0, style=bold, color=blue];
m1_5 -> m1_0  [key=0, style=bold, color=blue];
m1_22 -> m1_23  [key=0, style=solid];
m1_22 -> m1_26  [key=1, style=dashed, color=darkseagreen4, label=object];
m1_22 -> m1_20  [key=0, style=bold, color=blue];
m1_23 -> m1_24  [key=0, style=solid];
m1_23 -> m1_25  [key=1, style=dashed, color=darkseagreen4, label=double];
m1_26 -> m1_27  [key=0, style=solid];
m1_26 -> m1_29  [key=2, style=dotted];
m1_26 -> m1_23  [key=0, style=bold, color=blue];
m1_24 -> m1_25  [key=0, style=solid];
m1_24 -> m1_26  [key=0, style=solid];
m1_24 -> m1_9  [key=2, style=dotted];
m1_24 -> m1_27  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_25 -> m1_27  [key=0, style=solid];
m1_25 -> m1_28  [key=2, style=dotted];
m1_25 -> m1_19  [key=2, style=dotted];
m1_25 -> m1_26  [key=0, style=solid];
m1_27 -> m1_22  [key=0, style=bold, color=blue];
m1_27 -> m1_28  [key=0, style=solid];
m1_270 -> m1_271  [key=0, style=solid];
m1_270 -> m1_273  [key=0, style=solid];
m1_271 -> m1_272  [key=0, style=solid];
m1_273 -> m1_274  [key=0, style=solid];
m1_273 -> m1_271  [key=0, style=bold, color=blue];
m1_272 -> m1_275  [key=0, style=solid];
m1_272 -> m1_6  [key=2, style=dotted];
m1_272 -> m1_273  [key=0, style=solid];
m1_274 -> m1_275  [key=0, style=solid];
m1_274 -> m1_133  [key=2, style=dotted];
m1_274 -> m1_64  [key=2, style=dotted];
m1_274 -> m1_65  [key=2, style=dotted];
m1_274 -> m1_67  [key=2, style=dotted];
m1_274 -> m1_276  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_275 -> m1_269  [key=0, style=bold, color=blue];
m1_275 -> m1_276  [key=0, style=solid];
m1_275 -> m1_220  [key=2, style=dotted];
m1_275 -> m1_277  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_96 -> m1_94  [key=0, style=bold, color=blue];
m1_96 -> m1_97  [key=0, style=solid];
m1_179 -> m1_180  [key=0, style=solid];
m1_180 -> m1_181  [key=0, style=solid];
m1_180 -> m1_103  [key=2, style=dotted];
m1_180 -> m1_166  [key=2, style=dotted];
m1_181 -> m1_179  [key=0, style=bold, color=blue];
m1_181 -> m1_182  [key=0, style=solid];
m1_181 -> m1_183  [key=2, style=dotted];
m1_181 -> m1_184  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_182 -> m1_183  [key=0, style=solid];
m1_182 -> m1_180  [key=0, style=bold, color=blue];
m1_184 -> m1_182  [key=0, style=bold, color=blue];
m1_184 -> m1_185  [key=0, style=solid];
m1_126 -> m1_127  [key=0, style=solid];
m1_126 -> m1_128  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>"];
m1_127 -> m1_128  [key=0, style=solid];
m1_127 -> m1_131  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<TMessage>"];
m1_127 -> m1_114  [key=2, style=dotted];
m1_127 -> m1_69  [key=2, style=dotted];
m1_127 -> m1_129  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_128 -> m1_129  [key=0, style=solid];
m1_128 -> m1_118  [key=2, style=dotted];
m1_128 -> m1_9  [key=2, style=dotted];
m1_128 -> m1_131  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_129 -> m1_126  [key=0, style=bold, color=blue];
m1_129 -> m1_130  [key=0, style=solid];
m1_129 -> m1_35  [key=2, style=dotted];
m1_129 -> m1_11  [key=2, style=dotted];
m1_6 -> m1_7  [key=0, style=solid];
m1_250 -> m1_251  [key=0, style=solid];
m1_252 -> m1_9  [key=2, style=dotted];
m1_252 -> m1_253  [key=0, style=solid];
m1_252 -> m1_255  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_252 -> m1_250  [key=0, style=bold, color=blue];
m1_251 -> m1_252  [key=0, style=solid];
m1_251 -> m1_246  [key=2, style=dotted];
m1_251 -> m1_253  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_251 -> m1_219  [key=2, style=dotted];
m1_253 -> m1_254  [key=0, style=solid];
m1_253 -> m1_35  [key=2, style=dotted];
m1_253 -> m1_11  [key=2, style=dotted];
m1_254 -> m1_250  [key=0, style=bold, color=blue];
m1_254 -> m1_255  [key=0, style=solid];
m1_254 -> m1_182  [key=2, style=dotted];
m1_29 -> m1_27  [key=0, style=bold, color=blue];
m1_109 -> m1_110  [key=0, style=solid];
m1_111 -> m1_9  [key=2, style=dotted];
m1_111 -> m1_112  [key=0, style=solid];
m1_111 -> m1_115  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_111 -> m1_109  [key=0, style=bold, color=blue];
m1_110 -> m1_111  [key=0, style=solid];
m1_110 -> m1_114  [key=2, style=dotted];
m1_110 -> m1_69  [key=2, style=dotted];
m1_110 -> m1_112  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_110 -> m1_75  [key=2, style=dotted];
m1_110 -> m1_18  [key=2, style=dotted];
m1_112 -> m1_113  [key=0, style=solid];
m1_112 -> m1_35  [key=2, style=dotted];
m1_112 -> m1_11  [key=2, style=dotted];
m1_113 -> m1_109  [key=0, style=bold, color=blue];
m1_113 -> m1_114  [key=0, style=solid];
m1_113 -> m1_78  [key=2, style=dotted];
m1_0 -> m1_1  [key=0, style=solid];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_6  [key=2, style=dotted];
m1_1 -> m1_3  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
m1_1 -> m1_13  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
m1_2 -> m1_0  [key=0, style=bold, color=blue];
m1_2 -> m1_3  [key=0, style=solid];
m1_2 -> m1_7  [key=2, style=dotted];
m1_2 -> m1_8  [key=2, style=dotted];
m1_2 -> m1_4  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_7 -> m1_8  [key=0, style=solid];
m1_46 -> m1_44  [key=0, style=bold, color=blue];
m1_103 -> m1_104  [key=0, style=solid];
m1_103 -> m1_100  [key=0, style=bold, color=blue];
m1_104 -> m1_105  [key=0, style=solid];
m1_104 -> m1_75  [key=2, style=dotted];
m1_104 -> m1_18  [key=2, style=dotted];
m1_104 -> m1_90  [key=2, style=dotted];
m1_105 -> m1_103  [key=0, style=bold, color=blue];
m1_105 -> m1_106  [key=0, style=solid];
m1_223 -> m1_224  [key=0, style=solid];
m1_223 -> m1_221  [key=0, style=bold, color=blue];
m1_224 -> m1_225  [key=0, style=solid];
m1_224 -> m1_185  [key=2, style=dotted];
m1_225 -> m1_223  [key=0, style=bold, color=blue];
m1_225 -> m1_226  [key=0, style=solid];
m1_225 -> m1_220  [key=2, style=dotted];
m1_225 -> m1_69  [key=2, style=dotted];
m1_225 -> m1_227  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_306 -> m1_307  [key=0, style=solid];
m1_306 -> m1_308  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent"];
m1_307 -> m1_9  [key=2, style=dotted];
m1_307 -> m1_308  [key=0, style=solid];
m1_307 -> m1_310  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_308 -> m1_309  [key=0, style=solid];
m1_308 -> m1_104  [key=2, style=dotted];
m1_309 -> m1_306  [key=0, style=bold, color=blue];
m1_172 -> m1_178  [key=0, style=solid];
m1_172 -> m1_78  [key=2, style=dotted];
m1_82 -> m1_83  [key=0, style=solid];
m1_82 -> m1_78  [key=2, style=dotted];
m1_143 -> m1_144  [key=0, style=solid];
m1_143 -> m1_145  [key=1, style=dashed, color=darkseagreen4, label="long[]"];
m1_143 -> m1_75  [key=2, style=dotted];
m1_143 -> m1_18  [key=2, style=dotted];
m1_144 -> m1_9  [key=2, style=dotted];
m1_144 -> m1_145  [key=0, style=solid];
m1_144 -> m1_147  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_144 -> m1_142  [key=0, style=bold, color=blue];
m1_145 -> m1_146  [key=0, style=solid];
m1_145 -> m1_104  [key=2, style=dotted];
m1_146 -> m1_143  [key=0, style=bold, color=blue];
m1_146 -> m1_147  [key=0, style=solid];
m1_55 -> m1_56  [key=0, style=solid];
m1_55 -> m1_57  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m1_55 -> m1_53  [key=0, style=bold, color=blue];
m1_56 -> m1_9  [key=2, style=dotted];
m1_56 -> m1_57  [key=0, style=solid];
m1_56 -> m1_59  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_57 -> m1_58  [key=0, style=solid];
m1_57 -> m1_35  [key=2, style=dotted];
m1_57 -> m1_11  [key=2, style=dotted];
m1_57 -> m1_61  [key=0, style=solid];
m1_58 -> m1_55  [key=0, style=bold, color=blue];
m1_58 -> m1_59  [key=0, style=solid];
m1_79 -> m1_80  [key=0, style=solid];
m1_80 -> m1_78  [key=0, style=bold, color=blue];
m1_80 -> m1_81  [key=0, style=solid];
m1_80 -> m1_82  [key=2, style=dotted];
m1_226 -> m1_227  [key=0, style=solid];
m1_226 -> m1_228  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>>, TMessage>"];
m1_226 -> m1_236  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>>, TMessage>"];
m1_226 -> m1_9  [key=2, style=dotted];
m1_226 -> m1_229  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_227 -> m1_228  [key=0, style=solid];
m1_227 -> m1_236  [key=0, style=solid];
m1_227 -> m1_35  [key=2, style=dotted];
m1_227 -> m1_11  [key=2, style=dotted];
m1_228 -> m1_229  [key=0, style=solid];
m1_228 -> m1_224  [key=0, style=bold, color=blue];
m1_236 -> m1_237  [key=0, style=solid];
m1_236 -> m1_35  [key=2, style=dotted];
m1_236 -> m1_11  [key=2, style=dotted];
m1_229 -> m1_230  [key=0, style=solid];
m1_230 -> m1_231  [key=0, style=solid];
m1_230 -> m1_223  [key=2, style=dotted];
m1_230 -> m1_232  [key=1, style=dashed, color=darkseagreen4, label=result1];
m1_230 -> m1_234  [key=1, style=dashed, color=darkseagreen4, label=result1];
m1_231 -> m1_232  [key=0, style=solid];
m1_231 -> m1_234  [key=0, style=solid];
m1_231 -> m1_229  [key=0, style=bold, color=blue];
m1_232 -> m1_233  [key=0, style=solid];
m1_234 -> m1_235  [key=0, style=solid];
m1_234 -> m1_78  [key=2, style=dotted];
m1_234 -> m1_69  [key=2, style=dotted];
m1_234 -> m1_236  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_233 -> m1_238  [key=0, style=solid];
m1_233 -> m1_75  [key=2, style=dotted];
m1_233 -> m1_18  [key=2, style=dotted];
m1_233 -> m1_234  [key=0, style=solid];
m1_235 -> m1_238  [key=0, style=solid];
m1_235 -> m1_78  [key=2, style=dotted];
m1_235 -> m1_9  [key=2, style=dotted];
m1_235 -> m1_236  [key=0, style=solid];
m1_237 -> m1_238  [key=0, style=solid];
m1_237 -> m1_78  [key=2, style=dotted];
m1_237 -> m1_233  [key=0, style=bold, color=blue];
m1_238 -> m1_226  [key=0, style=bold, color=blue];
m1_238 -> m1_239  [key=0, style=solid];
m1_31 -> m1_32  [key=0, style=solid];
m1_31 -> m1_33  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
m1_32 -> m1_9  [key=2, style=dotted];
m1_32 -> m1_33  [key=0, style=solid];
m1_32 -> m1_36  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_32 -> m1_30  [key=0, style=bold, color=blue];
m1_33 -> m1_34  [key=0, style=solid];
m1_33 -> m1_35  [key=2, style=dotted];
m1_33 -> m1_11  [key=2, style=dotted];
m1_34 -> m1_31  [key=0, style=bold, color=blue];
m1_34 -> m1_35  [key=0, style=solid];
m1_34 -> m1_36  [key=0, style=solid];
m1_72 -> m1_73  [key=0, style=solid];
m1_72 -> m1_70  [key=0, style=bold, color=blue];
m1_68 -> m1_69  [key=0, style=solid];
m1_69 -> m1_70  [key=0, style=solid];
m1_69 -> m1_71  [key=2, style=dotted];
m1_70 -> m1_68  [key=0, style=bold, color=blue];
m1_70 -> m1_71  [key=0, style=solid];
m1_131 -> m1_132  [key=0, style=solid];
m1_131 -> m1_133  [key=2, style=dotted];
m1_131 -> m1_64  [key=2, style=dotted];
m1_131 -> m1_65  [key=2, style=dotted];
m1_131 -> m1_134  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_130 -> m1_131  [key=0, style=solid];
m1_130 -> m1_126  [key=0, style=bold, color=blue];
m1_132 -> m1_130  [key=0, style=bold, color=blue];
m1_132 -> m1_133  [key=0, style=solid];
m1_132 -> m1_108  [key=2, style=dotted];
m1_134 -> m1_135  [key=0, style=solid];
m1_135 -> m1_136  [key=0, style=solid];
m1_135 -> m1_71  [key=2, style=dotted];
m1_135 -> m1_139  [key=2, style=dotted];
m1_135 -> m1_137  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_136 -> m1_134  [key=0, style=bold, color=blue];
m1_136 -> m1_9  [key=2, style=dotted];
m1_136 -> m1_137  [key=0, style=solid];
m1_136 -> m1_140  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_147 -> m1_148  [key=0, style=solid];
m1_147 -> m1_78  [key=2, style=dotted];
m1_147 -> m1_145  [key=2, style=dotted];
m1_142 -> m1_143  [key=0, style=solid];
m1_142 -> m1_140  [key=0, style=bold, color=blue];
m1_148 -> m1_146  [key=0, style=bold, color=blue];
m1_148 -> m1_149  [key=0, style=solid];
m1_148 -> m1_150  [key=2, style=dotted];
m1_155 -> m1_156  [key=0, style=solid];
m1_155 -> m1_125  [key=2, style=dotted];
m1_155 -> m1_137  [key=2, style=dotted];
m1_158 -> m1_159  [key=0, style=solid];
m1_158 -> m1_78  [key=2, style=dotted];
m1_156 -> m1_154  [key=0, style=bold, color=blue];
m1_156 -> m1_157  [key=0, style=solid];
m1_156 -> m1_158  [key=2, style=dotted];
m1_157 -> m1_158  [key=0, style=solid];
m1_157 -> m1_155  [key=0, style=bold, color=blue];
m1_159 -> m1_157  [key=0, style=bold, color=blue];
m1_159 -> m1_160  [key=0, style=solid];
m1_159 -> m1_161  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m1_163 -> m1_164  [key=0, style=solid];
m1_164 -> m1_165  [key=0, style=solid];
m1_164 -> m1_158  [key=2, style=dotted];
m1_165 -> m1_163  [key=0, style=bold, color=blue];
m1_189 -> m1_190  [key=0, style=solid];
m1_189 -> m1_191  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_189 -> m1_192  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>"];
m1_189 -> m1_194  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>"];
m1_189 -> m1_195  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>"];
m1_189 -> m1_196  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>"];
m1_189 -> m1_198  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>"];
m1_189 -> m1_199  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>"];
m1_189 -> m1_193  [key=2, style=dotted];
m1_189 -> m1_69  [key=2, style=dotted];
m1_190 -> m1_191  [key=0, style=solid];
m1_190 -> m1_194  [key=0, style=solid];
m1_190 -> m1_9  [key=2, style=dotted];
m1_191 -> m1_192  [key=0, style=solid];
m1_191 -> m1_193  [key=1, style=dashed, color=darkseagreen4, label=ok1];
m1_191 -> m1_35  [key=2, style=dotted];
m1_191 -> m1_11  [key=2, style=dotted];
m1_192 -> m1_193  [key=0, style=solid];
m1_192 -> m1_188  [key=0, style=bold, color=blue];
m1_194 -> m1_195  [key=0, style=solid];
m1_194 -> m1_198  [key=0, style=solid];
m1_195 -> m1_196  [key=0, style=solid];
m1_195 -> m1_197  [key=1, style=dashed, color=darkseagreen4, label=m1];
m1_196 -> m1_197  [key=0, style=solid];
m1_196 -> m1_194  [key=0, style=bold, color=blue];
m1_198 -> m1_199  [key=0, style=solid];
m1_198 -> m1_200  [key=1, style=dashed, color=darkseagreen4, label=bad1];
m1_199 -> m1_200  [key=0, style=solid];
m1_199 -> m1_203  [key=2, style=dotted];
m1_199 -> m1_201  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_193 -> m1_201  [key=0, style=solid];
m1_193 -> m1_75  [key=2, style=dotted];
m1_193 -> m1_18  [key=2, style=dotted];
m1_193 -> m1_145  [key=2, style=dotted];
m1_197 -> m1_201  [key=0, style=solid];
m1_197 -> m1_78  [key=2, style=dotted];
m1_197 -> m1_145  [key=2, style=dotted];
m1_200 -> m1_201  [key=0, style=solid];
m1_200 -> m1_78  [key=2, style=dotted];
m1_200 -> m1_145  [key=2, style=dotted];
m1_200 -> m1_9  [key=2, style=dotted];
m1_200 -> m1_204  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_201 -> m1_189  [key=0, style=bold, color=blue];
m1_201 -> m1_202  [key=0, style=solid];
m1_201 -> m1_104  [key=2, style=dotted];
m1_248 -> m1_249  [key=0, style=solid, color=red];
m1_248 -> m1_13  [key=0, style=solid];
m1_248 -> m1_6  [key=2, style=dotted];
m1_249 -> m1_248  [key=0, style=bold, color=blue];
m1_249 -> m1_247  [key=0, style=bold, color=blue];
m1_255 -> m1_253  [key=0, style=bold, color=blue];
m1_255 -> m1_256  [key=0, style=solid];
m1_276 -> m1_277  [key=0, style=solid];
m1_276 -> m1_9  [key=2, style=dotted];
m1_276 -> m1_279  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_277 -> m1_278  [key=0, style=solid];
m1_277 -> m1_71  [key=2, style=dotted];
m1_277 -> m1_35  [key=2, style=dotted];
m1_277 -> m1_11  [key=2, style=dotted];
m1_278 -> m1_276  [key=0, style=bold, color=blue];
m1_278 -> m1_274  [key=0, style=bold, color=blue];
m1_45 -> m1_6  [key=2, style=dotted];
m1_45 -> m1_46  [key=0, style=solid];
m1_45 -> m1_39  [key=0, style=bold, color=blue];
m1_239 -> m1_6  [key=2, style=dotted];
m1_239 -> m1_240  [key=0, style=solid];
m1_256 -> m1_6  [key=2, style=dotted];
m1_256 -> m1_257  [key=0, style=solid];
m1_264 -> m1_6  [key=2, style=dotted];
m1_264 -> m1_265  [key=0, style=solid];
m1_288 -> m1_6  [key=2, style=dotted];
m1_288 -> m1_289  [key=0, style=solid];
m1_288 -> m1_76  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Ok<TSuccess, TMessage>"];
m1_36 -> m1_37  [key=0, style=solid];
m1_36 -> m1_29  [key=2, style=dotted];
m1_36 -> m1_38  [key=2, style=dotted];
m1_44 -> m1_45  [key=0, style=solid];
m1_44 -> m1_18  [key=2, style=dotted];
m1_51 -> m1_52  [key=0, style=solid];
m1_59 -> m1_60  [key=0, style=solid];
m1_88 -> m1_89  [key=0, style=solid];
m1_88 -> m1_75  [key=2, style=dotted];
m1_88 -> m1_18  [key=2, style=dotted];
m1_88 -> m1_90  [key=2, style=dotted];
m1_115 -> m1_116  [key=0, style=solid];
m1_123 -> m1_124  [key=0, style=solid];
m1_123 -> m1_125  [key=2, style=dotted];
m1_140 -> m1_141  [key=0, style=solid];
m1_140 -> m1_118  [key=2, style=dotted];
m1_204 -> m1_205  [key=0, style=solid];
m1_204 -> m1_207  [key=0, style=solid];
m1_212 -> m1_213  [key=0, style=solid];
m1_212 -> m1_215  [key=1, style=dashed, color=darkseagreen4, label="System.Func<TSuccess, System.Collections.Generic.IEnumerable<TMessage>, TResult>"];
m1_212 -> m1_216  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>"];
m1_212 -> m1_217  [key=1, style=dashed, color=darkseagreen4, label="System.Func<System.Collections.Generic.IEnumerable<TMessage>, TResult>"];
m1_221 -> m1_222  [key=0, style=solid];
m1_221 -> m1_179  [key=2, style=dotted];
m1_247 -> m1_248  [key=0, style=solid];
m1_247 -> m1_242  [key=0, style=bold, color=blue];
m1_263 -> m1_264  [key=0, style=solid];
m1_279 -> m1_280  [key=0, style=solid];
m1_279 -> m1_281  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>"];
m1_279 -> m1_283  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>"];
m1_287 -> m1_288  [key=0, style=solid];
m1_287 -> m1_54  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>"];
m1_287 -> m1_57  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>"];
m1_287 -> m1_59  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>"];
m1_287 -> m1_61  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>"];
m1_295 -> m1_296  [key=0, style=solid];
m1_303 -> m1_304  [key=0, style=solid];
m1_310 -> m1_311  [key=0, style=solid];
m1_318 -> m1_319  [key=0, style=solid];
m1_13 -> m1_249  [key=0, style=solid];
m1_13 -> m1_14  [key=0, style=solid];
m1_240 -> m1_238  [key=0, style=bold, color=blue];
m1_240 -> m1_241  [key=0, style=solid];
m1_240 -> m1_149  [key=2, style=dotted];
m1_257 -> m1_255  [key=0, style=bold, color=blue];
m1_257 -> m1_258  [key=0, style=solid];
m1_257 -> m1_179  [key=2, style=dotted];
m1_265 -> m1_263  [key=0, style=bold, color=blue];
m1_265 -> m1_259  [key=0, style=bold, color=blue];
m1_289 -> m1_287  [key=0, style=bold, color=blue];
m1_289 -> m1_79  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Bad<TSuccess, TMessage>"];
m1_28 -> m1_29  [key=0, style=solid];
m1_28 -> m1_30  [key=2, style=dotted];
m1_28 -> m1_34  [key=0, style=solid];
m1_28 -> m1_36  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>"];
m1_38 -> m1_36  [key=0, style=bold, color=blue];
m1_37 -> m1_38  [key=0, style=solid];
m1_37 -> m1_39  [key=2, style=dotted];
m1_37 -> m1_28  [key=0, style=bold, color=blue];
m1_53 -> m1_51  [key=0, style=bold, color=blue];
m1_53 -> m1_54  [key=0, style=solid];
m1_52 -> m1_53  [key=0, style=solid];
m1_52 -> m1_54  [key=2, style=dotted];
m1_52 -> m1_50  [key=0, style=bold, color=blue];
m1_61 -> m1_59  [key=0, style=bold, color=blue];
m1_61 -> m1_62  [key=0, style=solid];
m1_60 -> m1_61  [key=0, style=solid];
m1_60 -> m1_62  [key=2, style=dotted];
m1_60 -> m1_63  [key=0, style=solid];
m1_60 -> m1_64  [key=2, style=dotted];
m1_60 -> m1_65  [key=2, style=dotted];
m1_60 -> m1_66  [key=2, style=dotted];
m1_60 -> m1_68  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_81 -> m1_79  [key=0, style=bold, color=blue];
m1_81 -> m1_82  [key=0, style=solid];
m1_90 -> m1_88  [key=0, style=bold, color=blue];
m1_89 -> m1_90  [key=0, style=solid];
m1_89 -> m1_62  [key=2, style=dotted];
m1_89 -> m1_87  [key=0, style=bold, color=blue];
m1_117 -> m1_115  [key=0, style=bold, color=blue];
m1_116 -> m1_117  [key=0, style=solid];
m1_116 -> m1_108  [key=2, style=dotted];
m1_125 -> m1_123  [key=0, style=bold, color=blue];
m1_124 -> m1_125  [key=0, style=solid];
m1_124 -> m1_108  [key=2, style=dotted];
m1_124 -> m1_118  [key=0, style=bold, color=blue];
m1_133 -> m1_131  [key=0, style=bold, color=blue];
m1_141 -> m1_139  [key=2, style=dotted];
m1_141 -> m1_142  [key=0, style=solid];
m1_141 -> m1_137  [key=0, style=bold, color=blue];
m1_206 -> m1_204  [key=0, style=bold, color=blue];
m1_206 -> m1_209  [key=0, style=solid];
m1_205 -> m1_203  [key=2, style=dotted];
m1_205 -> m1_206  [key=0, style=solid];
m1_205 -> m1_210  [key=2, style=dotted];
m1_214 -> m1_212  [key=0, style=bold, color=blue];
m1_214 -> m1_215  [key=0, style=solid];
m1_214 -> m1_216  [key=0, style=solid];
m1_213 -> m1_203  [key=2, style=dotted];
m1_213 -> m1_214  [key=0, style=solid];
m1_213 -> m1_215  [key=1, style=dashed, color=darkseagreen4, label=ok];
m1_222 -> m1_203  [key=2, style=dotted];
m1_222 -> m1_223  [key=0, style=solid];
m1_222 -> m1_220  [key=0, style=bold, color=blue];
m1_281 -> m1_279  [key=0, style=bold, color=blue];
m1_281 -> m1_282  [key=0, style=solid];
m1_280 -> m1_281  [key=0, style=solid];
m1_280 -> m1_282  [key=2, style=dotted];
m1_280 -> m1_283  [key=0, style=solid];
m1_297 -> m1_295  [key=0, style=bold, color=blue];
m1_296 -> m1_297  [key=0, style=solid];
m1_296 -> m1_298  [key=2, style=dotted];
m1_305 -> m1_303  [key=0, style=bold, color=blue];
m1_304 -> m1_305  [key=0, style=solid];
m1_304 -> m1_282  [key=2, style=dotted];
m1_312 -> m1_310  [key=0, style=bold, color=blue];
m1_311 -> m1_312  [key=0, style=solid];
m1_311 -> m1_313  [key=2, style=dotted];
m1_320 -> m1_318  [key=0, style=bold, color=blue];
m1_319 -> m1_320  [key=0, style=solid];
m1_319 -> m1_321  [key=2, style=dotted];
m1_174 -> m1_139  [key=2, style=dotted];
m1_174 -> m1_175  [key=0, style=solid];
m1_174 -> m1_178  [key=0, style=solid];
m1_174 -> m1_78  [key=2, style=dotted];
m1_173 -> m1_174  [key=0, style=solid];
m1_173 -> m1_175  [key=0, style=solid];
m1_175 -> m1_173  [key=0, style=bold, color=blue];
m1_175 -> m1_176  [key=0, style=solid];
m1_175 -> m1_177  [key=1, style=dashed, color=darkseagreen4, label=bad1];
m1_176 -> m1_177  [key=0, style=solid];
m1_176 -> m1_181  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_176 -> m1_185  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_178 -> m1_176  [key=0, style=bold, color=blue];
m1_178 -> m1_166  [key=0, style=bold, color=blue];
m1_177 -> m1_178  [key=0, style=solid];
m1_177 -> m1_179  [key=2, style=dotted];
m1_177 -> m1_180  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_177 -> m1_78  [key=2, style=dotted];
m1_177 -> m1_145  [key=2, style=dotted];
m1_185 -> m1_186  [key=0, style=solid];
m1_185 -> m1_187  [key=2, style=dotted];
m1_186 -> m1_184  [key=0, style=bold, color=blue];
m1_186 -> m1_187  [key=0, style=solid];
m1_186 -> m1_188  [key=2, style=dotted];
m1_186 -> m1_179  [key=2, style=dotted];
m1_186 -> m1_189  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_35 -> m1_37  [key=0, style=solid];
m1_202 -> m1_203  [key=0, style=solid];
m1_202 -> m1_205  [key=1, style=dashed, color=darkseagreen4, label="System.Action<TSuccess, System.Collections.Generic.IEnumerable<TMessage>>"];
m1_202 -> m1_207  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>"];
m1_202 -> m1_208  [key=1, style=dashed, color=darkseagreen4, label="System.Action<System.Collections.Generic.IEnumerable<TMessage>>"];
m1_202 -> m1_198  [key=0, style=bold, color=blue];
m1_207 -> m1_208  [key=0, style=solid];
m1_208 -> m1_209  [key=0, style=solid];
m1_208 -> m1_211  [key=2, style=dotted];
m1_208 -> m1_203  [key=2, style=dotted];
m1_208 -> m1_210  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_209 -> m1_202  [key=0, style=bold, color=blue];
m1_209 -> m1_9  [key=2, style=dotted];
m1_209 -> m1_210  [key=0, style=solid];
m1_209 -> m1_212  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_10 -> m1_11  [key=0, style=solid];
m1_30 -> m1_31  [key=0, style=solid];
m1_220 -> m1_221  [key=0, style=solid];
m1_187 -> m1_185  [key=0, style=bold, color=blue];
m1_160 -> m1_161  [key=0, style=solid];
m1_160 -> m1_9  [key=2, style=dotted];
m1_160 -> m1_163  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_161 -> m1_162  [key=0, style=solid];
m1_161 -> m1_149  [key=2, style=dotted];
m1_161 -> m1_163  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_161 -> m1_104  [key=2, style=dotted];
m1_162 -> m1_160  [key=0, style=bold, color=blue];
m1_162 -> m1_159  [key=0, style=bold, color=blue];
m1_47 -> m1_48  [key=0, style=solid];
m1_47 -> m1_49  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m1_48 -> m1_9  [key=2, style=dotted];
m1_48 -> m1_49  [key=0, style=solid];
m1_48 -> m1_51  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_49 -> m1_50  [key=0, style=solid];
m1_49 -> m1_35  [key=2, style=dotted];
m1_49 -> m1_11  [key=2, style=dotted];
m1_49 -> m1_47  [key=0, style=bold, color=blue];
m1_50 -> m1_47  [key=0, style=bold, color=blue];
m1_50 -> m1_51  [key=0, style=solid];
m1_215 -> m1_218  [key=0, style=solid];
m1_215 -> m1_219  [key=2, style=dotted];
m1_215 -> m1_216  [key=0, style=solid];
m1_216 -> m1_217  [key=0, style=solid];
m1_216 -> m1_220  [key=2, style=dotted];
m1_216 -> m1_69  [key=2, style=dotted];
m1_216 -> m1_218  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_217 -> m1_218  [key=0, style=solid];
m1_217 -> m1_125  [key=2, style=dotted];
m1_217 -> m1_9  [key=2, style=dotted];
m1_217 -> m1_221  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_218 -> m1_212  [key=0, style=bold, color=blue];
m1_218 -> m1_219  [key=0, style=solid];
m1_218 -> m1_35  [key=2, style=dotted];
m1_218 -> m1_11  [key=2, style=dotted];
m1_118 -> m1_119  [key=0, style=solid];
m1_118 -> m1_121  [key=1, style=dashed, color=darkseagreen4, label="System.Func<RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>, TResult>"];
m1_118 -> m1_122  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>"];
m1_118 -> m1_123  [key=1, style=dashed, color=darkseagreen4, label="System.Func<System.Collections.Generic.IEnumerable<TMessage>, TResult>"];
m1_120 -> m1_9  [key=2, style=dotted];
m1_120 -> m1_121  [key=0, style=solid];
m1_120 -> m1_123  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_120 -> m1_122  [key=0, style=solid];
m1_119 -> m1_120  [key=0, style=solid];
m1_119 -> m1_114  [key=2, style=dotted];
m1_119 -> m1_69  [key=2, style=dotted];
m1_119 -> m1_121  [key=1, style=dashed, color=darkseagreen4, label=ok];
m1_121 -> m1_122  [key=0, style=solid];
m1_121 -> m1_35  [key=2, style=dotted];
m1_121 -> m1_11  [key=2, style=dotted];
m1_121 -> m1_124  [key=0, style=solid];
m1_121 -> m1_125  [key=2, style=dotted];
m1_122 -> m1_118  [key=0, style=bold, color=blue];
m1_122 -> m1_123  [key=0, style=solid];
m1_139 -> m1_140  [key=0, style=solid];
m1_139 -> m1_147  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<TMessage>"];
m1_282 -> m1_285  [key=0, style=solid];
m1_87 -> m1_88  [key=0, style=solid];
m1_87 -> m1_83  [key=0, style=bold, color=blue];
m1_39 -> m1_40  [key=0, style=solid];
m1_39 -> m1_42  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<TMessage>"];
m1_39 -> m1_44  [key=1, style=dashed, color=darkseagreen4, label=TSuccess];
m1_11 -> m1_9  [key=0, style=bold, color=blue];
m1_9 -> m1_10  [key=0, style=solid];
m1_219 -> m1_215  [key=0, style=bold, color=blue];
m1_63 -> m1_56  [key=0, style=bold, color=blue];
m1_63 -> m1_64  [key=0, style=solid];
m1_241 -> m1_239  [key=0, style=bold, color=blue];
m1_241 -> m1_242  [key=0, style=solid];
m1_299 -> m1_300  [key=0, style=solid];
m1_299 -> m1_301  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue"];
m1_300 -> m1_9  [key=2, style=dotted];
m1_300 -> m1_301  [key=0, style=solid];
m1_300 -> m1_303  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_301 -> m1_302  [key=0, style=solid];
m1_301 -> m1_104  [key=2, style=dotted];
m1_302 -> m1_299  [key=0, style=bold, color=blue];
m1_83 -> m1_84  [key=0, style=solid];
m1_83 -> m1_81  [key=0, style=bold, color=blue];
m1_65 -> m1_9  [key=2, style=dotted];
m1_65 -> m1_66  [key=0, style=solid];
m1_65 -> m1_70  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_64 -> m1_65  [key=0, style=solid];
m1_64 -> m1_68  [key=2, style=dotted];
m1_64 -> m1_69  [key=2, style=dotted];
m1_64 -> m1_66  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_66 -> m1_67  [key=0, style=solid];
m1_66 -> m1_35  [key=2, style=dotted];
m1_66 -> m1_11  [key=2, style=dotted];
m1_67 -> m1_63  [key=0, style=bold, color=blue];
m1_137 -> m1_138  [key=0, style=solid];
m1_137 -> m1_104  [key=2, style=dotted];
m1_137 -> m1_143  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<TMessage>"];
m1_137 -> m1_139  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<TMessage>"];
m1_137 -> m1_147  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<TMessage>"];
m1_137 -> m1_140  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>"];
m1_138 -> m1_134  [key=0, style=bold, color=blue];
m1_138 -> m1_139  [key=0, style=solid];
m1_138 -> m1_143  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>"];
m1_138 -> m1_140  [key=1, style=dashed, color=darkseagreen4, label=successFunc];
m1_114 -> m1_112  [key=0, style=bold, color=blue];
m1_15 -> m1_16  [key=0, style=solid, color=green];
m1_15 -> m1_17  [key=1, style=dashed, color=darkseagreen4, label=long];
m1_16 -> m1_17  [key=0, style=solid, color=green];
m1_16 -> m1_9  [key=2, style=dotted, color=green];
m1_16 -> m1_20  [key=1, style=dashed, color=green, label="lambda expression"];
m1_17 -> m1_15  [key=0, style=bold, color=blue];
m1_17 -> m1_18  [key=0, style=solid];
m1_17 -> m1_19  [key=2, style=dotted];
m1_211 -> m1_207  [key=0, style=bold, color=blue];
m1_314 -> m1_315  [key=0, style=solid];
m1_314 -> m1_316  [key=1, style=dashed, color=darkseagreen4, label="int?"];
m1_315 -> m1_9  [key=2, style=dotted];
m1_315 -> m1_316  [key=0, style=solid];
m1_315 -> m1_318  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_316 -> m1_317  [key=0, style=solid];
m1_316 -> m1_104  [key=2, style=dotted];
m1_317 -> m1_314  [key=0, style=bold, color=blue];
m1_243 -> m1_9  [key=2, style=dotted];
m1_243 -> m1_244  [key=0, style=solid];
m1_243 -> m1_247  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_243 -> m1_243  [key=1, style=dashed, color=darkseagreen4, label=TSuccess];
m1_243 -> m1_251  [key=1, style=dashed, color=darkseagreen4, label=TSuccess];
m1_243 -> m1_254  [key=1, style=dashed, color=darkseagreen4, label=curriedMapper];
m1_242 -> m1_243  [key=0, style=solid];
m1_242 -> m1_246  [key=2, style=dotted];
m1_242 -> m1_244  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_242 -> m1_251  [key=1, style=dashed, color=darkseagreen4, label="System.Func<TSuccess, TValue, TResult>"];
m1_242 -> m1_245  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>"];
m1_244 -> m1_245  [key=0, style=solid];
m1_244 -> m1_35  [key=2, style=dotted];
m1_244 -> m1_11  [key=2, style=dotted];
m1_244 -> m1_254  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>"];
m1_244 -> m1_246  [key=1, style=dashed, color=darkseagreen4, label=liftedMapper];
m1_245 -> m1_241  [key=0, style=bold, color=blue];
m1_245 -> m1_246  [key=0, style=solid];
m1_245 -> m1_149  [key=2, style=dotted];
m1_210 -> m1_211  [key=0, style=solid];
m1_210 -> m1_104  [key=2, style=dotted];
m1_12 -> m1_13  [key=0, style=solid];
m1_14 -> m1_12  [key=0, style=bold, color=blue];
m1_290 -> m1_291  [key=0, style=solid];
m1_290 -> m1_143  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<TMessage>"];
m1_290 -> m1_147  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<TMessage>"];
m1_292 -> m1_9  [key=2, style=dotted];
m1_292 -> m1_293  [key=0, style=solid];
m1_292 -> m1_295  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_292 -> m1_251  [key=1, style=dashed, color=darkseagreen4, label="System.Func<TSuccess, TValue, TResult>"];
m1_291 -> m1_292  [key=0, style=solid];
m1_291 -> m1_78  [key=2, style=dotted];
m1_291 -> m1_293  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_291 -> m1_155  [key=1, style=dashed, color=darkseagreen4, label="System.Func<TValue, RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>>"];
m1_293 -> m1_294  [key=0, style=solid];
m1_293 -> m1_35  [key=2, style=dotted];
m1_293 -> m1_11  [key=2, style=dotted];
m1_293 -> m1_251  [key=1, style=dashed, color=darkseagreen4, label=TSuccess];
m1_294 -> m1_290  [key=0, style=bold, color=blue];
m1_294 -> m1_254  [key=1, style=dashed, color=darkseagreen4, label=curriedMapper];
m1_8 -> m1_6  [key=0, style=bold, color=blue];
m1_102 -> m1_102  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Colors"];
m1_102 -> m1_103  [key=0, style=solid];
m1_102 -> m1_104  [key=2, style=dotted];
m1_283 -> m1_284  [key=0, style=solid];
m1_283 -> m1_285  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_284 -> m1_9  [key=2, style=dotted];
m1_284 -> m1_285  [key=0, style=solid];
m1_284 -> m1_287  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_285 -> m1_286  [key=0, style=solid];
m1_285 -> m1_104  [key=2, style=dotted];
m1_285 -> m1_279  [key=0, style=bold, color=blue];
m1_286 -> m1_283  [key=0, style=bold, color=blue];
m1_286 -> m1_19  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>"];
m1_286 -> m1_20  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>"];
m1_286 -> m1_25  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>"];
m1_286 -> m1_26  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>"];
m1_286 -> m1_31  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>"];
m1_286 -> m1_36  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>"];
m1_322 -> m1_13  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
m1_323 -> m1_181  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_323 -> m1_185  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
}
