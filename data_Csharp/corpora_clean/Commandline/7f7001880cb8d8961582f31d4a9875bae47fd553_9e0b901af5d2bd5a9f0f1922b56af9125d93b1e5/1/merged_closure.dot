digraph  {
m0_8 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="ArgumentParserFixture.cs", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="66-66"];
m0_12 [cluster="Unk.Create", file="ArgumentParserFixture.cs", label="Entry Unk.Create", span=""];
m0_13 [cluster="Unk.Where", file="ArgumentParserFixture.cs", label="Entry Unk.Where", span=""];
m0_6 [cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", file="ArgumentParserFixture.cs", label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0"];
m0_11 [cluster="Unk.Single", file="ArgumentParserFixture.cs", label="Entry Unk.Single", span=""];
m0_15 [cluster="Unk.NotNull", file="ArgumentParserFixture.cs", label="Entry Unk.NotNull", span=""];
m0_27 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="ArgumentParserFixture.cs", label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="12-12"];
m0_0 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="ArgumentParserFixture.cs", label="Entry CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", span="16-16"];
m0_1 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="ArgumentParserFixture.cs", label="var tokenPartitions = new[]\r\n                {\r\n                    new KeyValuePair<string, IEnumerable<string>>(''x'', new [] { ''true'' })\r\n                }", span="19-22"];
m0_2 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="ArgumentParserFixture.cs", label="var specProps = new[]\r\n                {\r\n                    SpecificationProperty.Create(\r\n                        new OptionSpecification(''x'', string.Empty, false, string.Empty, -1, -1, '\0', Maybe.Nothing<object>(), typeof(bool), string.Empty, string.Empty, new List<string>()), \r\n                        typeof(FakeOptions).GetProperties().Single(p => p.Name.Equals(''BoolValue'', StringComparison.Ordinal)),\r\n                        Maybe.Nothing<object>())\r\n                }", span="23-29"];
m0_3 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="ArgumentParserFixture.cs", label="var result = OptionMapper.MapValues(\r\n                specProps.Where(pt => pt.Specification.IsOption()),\r\n                tokenPartitions,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, CultureInfo.InvariantCulture),\r\n                StringComparer.InvariantCulture)", span="32-36"];
m0_4 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="ArgumentParserFixture.cs", label="Assert.NotNull(result.Value.Single(\r\n                a => a.Specification.IsOption()\r\n                && ((OptionSpecification)a.Specification).ShortName.Equals(''x'')\r\n                && (bool)((Just<object>)a.Value).Value == true))", span="39-42"];
m0_5 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="ArgumentParserFixture.cs", label="Exit CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", span="16-16"];
m0_28 [cluster="lambda expression", file="ArgumentParserFixture.cs", label="Entry lambda expression", span="40-42"];
m0_16 [cluster="lambda expression", file="ArgumentParserFixture.cs", label="Entry lambda expression", span="27-27"];
m0_20 [cluster="lambda expression", file="ArgumentParserFixture.cs", label="Entry lambda expression", span="33-33"];
m0_24 [cluster="lambda expression", file="ArgumentParserFixture.cs", label="Entry lambda expression", span="35-35"];
m0_17 [cluster="lambda expression", file="ArgumentParserFixture.cs", label="p.Name.Equals(''BoolValue'', StringComparison.Ordinal)", span="27-27"];
m0_18 [cluster="lambda expression", file="ArgumentParserFixture.cs", label="Exit lambda expression", span="27-27"];
m0_21 [cluster="lambda expression", file="ArgumentParserFixture.cs", label="pt.Specification.IsOption()", span="33-33"];
m0_22 [cluster="lambda expression", file="ArgumentParserFixture.cs", label="Exit lambda expression", span="33-33"];
m0_25 [cluster="lambda expression", file="ArgumentParserFixture.cs", label="TypeConverter.ChangeType(vals, type, isScalar, CultureInfo.InvariantCulture)", span="35-35"];
m0_26 [cluster="lambda expression", file="ArgumentParserFixture.cs", label="Exit lambda expression", span="35-35"];
m0_29 [cluster="lambda expression", file="ArgumentParserFixture.cs", label="a.Specification.IsOption()\r\n                && ((OptionSpecification)a.Specification).ShortName.Equals(''x'')\r\n                && (bool)((Just<object>)a.Value).Value == true", span="40-42"];
m0_30 [cluster="lambda expression", file="ArgumentParserFixture.cs", label="Exit lambda expression", span="40-42"];
m0_31 [cluster="string.Equals(string)", file="ArgumentParserFixture.cs", label="Entry string.Equals(string)", span="0-0"];
m0_7 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="ArgumentParserFixture.cs", label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", span="17-17"];
m0_19 [cluster="string.Equals(string, System.StringComparison)", file="ArgumentParserFixture.cs", label="Entry string.Equals(string, System.StringComparison)", span="0-0"];
m0_23 [cluster="CommandLine.Core.Specification.IsOption()", file="ArgumentParserFixture.cs", label="Entry CommandLine.Core.Specification.IsOption()", span="11-11"];
m0_14 [cluster="Unk.MapValues", file="ArgumentParserFixture.cs", label="Entry Unk.MapValues", span=""];
m0_10 [cluster="System.Type.GetProperties()", file="ArgumentParserFixture.cs", label="Entry System.Type.GetProperties()", span="0-0"];
m0_9 [cluster="System.Collections.Generic.List<T>.List()", file="ArgumentParserFixture.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m5_0 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.Convert(int)", file="AttributesFixture.cs", label="Entry Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.Convert(int)", span="14-14"];
m5_1 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.Convert(int)", file="AttributesFixture.cs", label="number == 0", span="16-16"];
m5_2 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.Convert(int)", file="AttributesFixture.cs", label="return ''null'';", span="17-17"];
m5_4 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.Convert(int)", file="AttributesFixture.cs", label="return string.Format(''minus {0}'', Convert(-number));", span="20-20"];
m5_3 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.Convert(int)", file="AttributesFixture.cs", label="number < 0", span="19-19"];
m5_5 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.Convert(int)", file="AttributesFixture.cs", label="var parts = new List<string>()", span="22-22"];
m5_6 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.Convert(int)", file="AttributesFixture.cs", label="var billions = number / 1000000000", span="24-24"];
m5_102 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="AttributesFixture.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", span="184-184"];
m5_103 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="AttributesFixture.cs", label="var expectedError = new HelpRequestedError()", span="187-187"];
m5_104 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="AttributesFixture.cs", label="var sut = new Parser()", span="188-188"];
m5_107 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="AttributesFixture.cs", label="((NotParsed<FakeImmutableOptions>)result).Errors.Should().ContainSingle(e => e.Equals(expectedError))", span="195-195"];
m5_105 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="AttributesFixture.cs", label="var result = sut.ParseArguments<FakeImmutableOptions>(new[] { ''--help'' })", span="191-191"];
m5_106 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="AttributesFixture.cs", label="((NotParsed<FakeImmutableOptions>)result).Errors.Should().HaveCount(x => x == 1)", span="194-194"];
m5_108 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="AttributesFixture.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", span="184-184"];
m5_163 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="AttributesFixture.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", span="251-251"];
m5_164 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="AttributesFixture.cs", label="var help = new StringWriter()", span="254-254"];
m5_165 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="AttributesFixture.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="255-255"];
m5_167 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="AttributesFixture.cs", label="var result = help.ToString()", span="259-259"];
m5_166 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="AttributesFixture.cs", label="sut.ParseArguments<AddOptions, CommitOptions, CloneOptions>(new string [] { })", span="258-258"];
m5_168 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="AttributesFixture.cs", label="result.Length.Should().BeGreaterThan(0)", span="262-262"];
m5_169 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="AttributesFixture.cs", label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="263-263"];
m5_170 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="AttributesFixture.cs", label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="264-264"];
m5_171 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="AttributesFixture.cs", label="lines[1].ShouldBeEquivalentTo(''Copyright (c) 2005 - 2015 Giacomo Stelluti Scala'')", span="265-265"];
m5_172 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="AttributesFixture.cs", label="lines[2].ShouldBeEquivalentTo(''ERROR(S):'')", span="266-266"];
m5_173 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="AttributesFixture.cs", label="lines[3].ShouldBeEquivalentTo(''No verb selected.'')", span="267-267"];
m5_174 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="AttributesFixture.cs", label="lines[4].ShouldBeEquivalentTo(''add        Add file contents to the index.'')", span="268-268"];
m5_175 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="AttributesFixture.cs", label="lines[5].ShouldBeEquivalentTo(''commit     Record changes to the repository.'')", span="269-269"];
m5_176 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="AttributesFixture.cs", label="lines[6].ShouldBeEquivalentTo(''clone      Clone a repository into a new directory.'')", span="270-270"];
m5_177 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="AttributesFixture.cs", label="lines[7].ShouldBeEquivalentTo(''help       Display more information on a specific command.'')", span="271-271"];
m5_178 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="AttributesFixture.cs", label="lines[8].ShouldBeEquivalentTo(''version    Display version information.'')", span="272-272"];
m5_179 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="AttributesFixture.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", span="251-251"];
m5_246 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="AttributesFixture.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", span="364-364"];
m5_247 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="AttributesFixture.cs", label="var help = new StringWriter()", span="367-367"];
m5_248 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="AttributesFixture.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="368-368"];
m5_250 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="AttributesFixture.cs", label="var result = help.ToString()", span="373-373"];
m5_249 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="AttributesFixture.cs", label="sut.ParseArguments<AddOptionsWithUsage, CommitOptionsWithUsage, CloneOptionsWithUsage>(\r\n                new [] { ''clone'', ''--badoption=@bad?value'' })", span="371-372"];
m5_251 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="AttributesFixture.cs", label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="376-376"];
m5_252 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="AttributesFixture.cs", label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="377-377"];
m5_253 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="AttributesFixture.cs", label="lines[1].ShouldBeEquivalentTo(''Copyright (c) 2005 - 2015 Giacomo Stelluti Scala'')", span="378-378"];
m5_254 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="AttributesFixture.cs", label="lines[2].ShouldBeEquivalentTo(''ERROR(S):'')", span="379-379"];
m5_255 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="AttributesFixture.cs", label="lines[3].ShouldBeEquivalentTo(''Option 'badoption' is unknown.'')", span="380-380"];
m5_256 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="AttributesFixture.cs", label="lines[4].ShouldBeEquivalentTo(''USAGE:'')", span="381-381"];
m5_257 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="AttributesFixture.cs", label="lines[5].ShouldBeEquivalentTo(''Cloning quietly:'')", span="382-382"];
m5_258 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="AttributesFixture.cs", label="lines[6].ShouldBeEquivalentTo(''git clone --quiet https://github.com/gsscoder/railwaysharp'')", span="383-383"];
m5_259 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="AttributesFixture.cs", label="lines[7].ShouldBeEquivalentTo(''Cloning without hard links:'')", span="384-384"];
m5_260 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="AttributesFixture.cs", label="lines[8].ShouldBeEquivalentTo(''git clone --no-hardlinks https://github.com/gsscoder/csharpx'')", span="385-385"];
m5_261 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="AttributesFixture.cs", label="lines[9].ShouldBeEquivalentTo(''--no-hardlinks    Optimize the cloning process from a repository on a local'')", span="386-386"];
m5_262 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="AttributesFixture.cs", label="lines[10].ShouldBeEquivalentTo(''filesystem by copying files.'')", span="387-387"];
m5_263 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="AttributesFixture.cs", label="lines[11].ShouldBeEquivalentTo(''-q, --quiet       Suppress summary message.'')", span="388-388"];
m5_264 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="AttributesFixture.cs", label="lines[12].ShouldBeEquivalentTo(''--help            Display this help screen.'')", span="389-389"];
m5_265 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="AttributesFixture.cs", label="lines[13].ShouldBeEquivalentTo(''--version         Display version information.'')", span="390-390"];
m5_266 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="AttributesFixture.cs", label="lines[14].ShouldBeEquivalentTo(''URLS (pos. 0)     A list of url(s) to clone.'')", span="391-391"];
m5_267 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="AttributesFixture.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", span="364-364"];
m5_8 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.Convert(int)", file="AttributesFixture.cs", label="parts.Add(Part(''{0} Milliarden'', ''eine Milliarde'', billions))", span="27-27"];
m5_81 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.Part(string, string, int)", file="AttributesFixture.cs", label="Exit Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.Part(string, string, int)", span="142-142"];
m5_11 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.Convert(int)", file="AttributesFixture.cs", label="parts.Add('' '')", span="30-30"];
m5_119 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="AttributesFixture.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", span="200-200"];
m5_120 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="AttributesFixture.cs", label="var help = new StringWriter()", span="203-203"];
m5_121 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="AttributesFixture.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="204-204"];
m5_123 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="AttributesFixture.cs", label="var result = help.ToString()", span="208-208"];
m5_122 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="AttributesFixture.cs", label="sut.ParseArguments<FakeImmutableOptions>(new[] { ''--help'' })", span="207-207"];
m5_124 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="AttributesFixture.cs", label="result.Length.Should().BeGreaterThan(0)", span="211-211"];
m5_125 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="AttributesFixture.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", span="200-200"];
m5_48 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.ConvertToOrdinal(int)", file="AttributesFixture.cs", label="number = -number", span="87-87"];
m5_49 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.ConvertToOrdinal(int)", color=green, community=0, file="AttributesFixture.cs", label="var billions = number / 1000000000", prediction=0, span="90-90"];
m5_50 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.ConvertToOrdinal(int)", color=green, community=0, file="AttributesFixture.cs", label="billions > 0", prediction=1, span="91-91"];
m5_52 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.ConvertToOrdinal(int)", file="AttributesFixture.cs", label="var noRest = number == 0 ? 0 : 1", span="94-94"];
m5_51 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.ConvertToOrdinal(int)", color=green, community=0, file="AttributesFixture.cs", label="number %= 1000000000", prediction=2, span="93-93"];
m5_53 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.ConvertToOrdinal(int)", file="AttributesFixture.cs", label="parts.Add(Part(BillionOrdinalPlural[noRest], BillionOrdinalSingular[noRest], billions))", span="95-95"];
m5_111 [cluster="Unk.ContainSingle", file="AttributesFixture.cs", label="Entry Unk.ContainSingle", span=""];
m5_236 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", file="AttributesFixture.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", span="348-348"];
m5_237 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", file="AttributesFixture.cs", label="var help = new StringWriter()", span="351-351"];
m5_238 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", file="AttributesFixture.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="352-352"];
m5_240 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", file="AttributesFixture.cs", label="var result = help.ToString()", span="356-356"];
m5_239 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", file="AttributesFixture.cs", label="sut.ParseArguments<AddOptions, CommitOptions, CloneOptions>(new[] { ''commit'', ''--help'' })", span="355-355"];
m5_241 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", file="AttributesFixture.cs", label="result.Length.Should().BeGreaterThan(0)", span="359-359"];
m5_242 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", file="AttributesFixture.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", span="348-348"];
m5_66 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.ConvertToOrdinal(int)", color=green, community=0, file="AttributesFixture.cs", label="number %= 100", prediction=2, span="117-117"];
m5_22 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.Convert(int)", color=green, community=0, file="AttributesFixture.cs", label="var hundreds = number / 100", prediction=4, span="49-49"];
m5_35 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.Convert(int)", color=green, community=0, file="AttributesFixture.cs", label="return string.Join('''', parts);", prediction=2, span="75-75"];
m5_85 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="AttributesFixture.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", span="147-147"];
m5_86 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="AttributesFixture.cs", label="var expectedOptions = new CloneOptions\r\n            {\r\n                Quiet = true,\r\n                Urls = new[] { ''http://gsscoder.github.com/'', ''http://yes-to-nooo.github.com/'' }\r\n            }", span="150-154"];
m5_87 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="AttributesFixture.cs", label="var sut = new Parser()", span="155-155"];
m5_90 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="AttributesFixture.cs", label="((Parsed<object>)result).Value.ShouldBeEquivalentTo(expectedOptions, o => o.RespectingRuntimeTypes())", span="163-163"];
m5_88 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="AttributesFixture.cs", label="var result = sut.ParseArguments<AddOptions, CommitOptions, CloneOptions>(\r\n                new[] { ''clone'', ''-q'', ''http://gsscoder.github.com/'', ''http://yes-to-nooo.github.com/'' })", span="158-159"];
m5_89 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="AttributesFixture.cs", label="Assert.IsType<CloneOptions>(((Parsed<object>)result).Value)", span="162-162"];
m5_91 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="AttributesFixture.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", span="147-147"];
m5_155 [cluster="System.Collections.Generic.IEnumerable<string>.TrimStringArray()", file="AttributesFixture.cs", label="Entry System.Collections.Generic.IEnumerable<string>.TrimStringArray()", span="15-15"];
m5_58 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.ConvertToOrdinal(int)", file="AttributesFixture.cs", label="parts.Add(Part(MillionOrdinalPlural[noRest], MillionOrdinalSingular[noRest], millions))", span="103-103"];
m5_59 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.ConvertToOrdinal(int)", file="AttributesFixture.cs", label="var thousands = number / 1000", span="106-106"];
m5_60 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.ConvertToOrdinal(int)", color=green, community=0, file="AttributesFixture.cs", label="thousands > 0", prediction=6, span="107-107"];
m5_63 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.ConvertToOrdinal(int)", file="AttributesFixture.cs", label="var hundreds = number / 100", span="113-113"];
m5_61 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.ConvertToOrdinal(int)", file="AttributesFixture.cs", label="parts.Add(Part(''{0}tausend'', ''eintausend'', thousands))", span="109-109"];
m5_62 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.ConvertToOrdinal(int)", file="AttributesFixture.cs", label="number %= 1000", span="110-110"];
m5_64 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.ConvertToOrdinal(int)", color=green, community=0, file="AttributesFixture.cs", label="hundreds > 0", prediction=7, span="114-114"];
m5_7 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.Convert(int)", file="AttributesFixture.cs", label="billions > 0", span="25-25"];
m5_73 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.ConvertToOrdinal(int)", file="AttributesFixture.cs", label="parts.Add(TensMap[number/10])", span="132-132"];
m5_126 [cluster="Unk.BeGreaterThan", file="AttributesFixture.cs", label="Entry Unk.BeGreaterThan", span=""];
m5_130 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="AttributesFixture.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", span="216-216"];
m5_131 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="AttributesFixture.cs", label="var expectedError = new VersionRequestedError()", span="219-219"];
m5_132 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="AttributesFixture.cs", label="var sut = new Parser()", span="220-220"];
m5_135 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="AttributesFixture.cs", label="((NotParsed<FakeOptions>)result).Errors.Should().ContainSingle(e => e.Equals(expectedError))", span="227-227"];
m5_133 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="AttributesFixture.cs", label="var result = sut.ParseArguments<FakeOptions>(new[] { ''--version'' })", span="223-223"];
m5_134 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="AttributesFixture.cs", label="((NotParsed<FakeOptions>)result).Errors.Should().HaveCount(x => x == 1)", span="226-226"];
m5_136 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="AttributesFixture.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", span="216-216"];
m5_137 [cluster="CommandLine.VersionRequestedError.VersionRequestedError()", file="AttributesFixture.cs", label="Entry CommandLine.VersionRequestedError.VersionRequestedError()", span="432-432"];
m5_46 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.ConvertToOrdinal(int)", color=green, community=0, file="AttributesFixture.cs", label="number < 0", prediction=8, span="84-84"];
m5_183 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="AttributesFixture.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", span="277-277"];
m5_184 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="AttributesFixture.cs", label="var help = new StringWriter()", span="280-280"];
m5_185 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="AttributesFixture.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="281-281"];
m5_187 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="AttributesFixture.cs", label="var result = help.ToString()", span="285-285"];
m5_186 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="AttributesFixture.cs", label="sut.ParseArguments<AddOptions, CommitOptions, CloneOptions>(new [] { ''--help'' })", span="284-284"];
m5_188 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="AttributesFixture.cs", label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="288-288"];
m5_189 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="AttributesFixture.cs", label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="289-289"];
m5_190 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="AttributesFixture.cs", label="lines[1].ShouldBeEquivalentTo(''Copyright (c) 2005 - 2015 Giacomo Stelluti Scala'')", span="290-290"];
m5_191 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="AttributesFixture.cs", label="lines[2].ShouldBeEquivalentTo(''add        Add file contents to the index.'')", span="291-291"];
m5_192 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="AttributesFixture.cs", label="lines[3].ShouldBeEquivalentTo(''commit     Record changes to the repository.'')", span="292-292"];
m5_193 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="AttributesFixture.cs", label="lines[4].ShouldBeEquivalentTo(''clone      Clone a repository into a new directory.'')", span="293-293"];
m5_194 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="AttributesFixture.cs", label="lines[5].ShouldBeEquivalentTo(''help       Display more information on a specific command.'')", span="294-294"];
m5_195 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="AttributesFixture.cs", label="lines[6].ShouldBeEquivalentTo(''version    Display version information.'')", span="295-295"];
m5_196 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="AttributesFixture.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", span="277-277"];
m5_268 [cluster="lambda expression", file="AttributesFixture.cs", label="Entry lambda expression", span="368-368"];
m5_13 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.Convert(int)", file="AttributesFixture.cs", label="millions > 0", span="34-34"];
m5_12 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.Convert(int)", file="AttributesFixture.cs", label="var millions = number / 1000000", span="33-33"];
m5_14 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.Convert(int)", file="AttributesFixture.cs", label="parts.Add(Part(''{0} Millionen'', ''eine Million'', millions))", span="36-36"];
m5_26 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.Convert(int)", color=green, community=0, file="AttributesFixture.cs", label="number > 0", prediction=2, span="56-56"];
m5_25 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.Convert(int)", file="AttributesFixture.cs", label="number %= 100", span="53-53"];
m5_27 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.Convert(int)", color=green, community=0, file="AttributesFixture.cs", label="number < 20", prediction=2, span="58-58"];
m5_37 [cluster="string.Format(string, object)", file="AttributesFixture.cs", label="Entry string.Format(string, object)", span="0-0"];
m5_36 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.Convert(int)", file="AttributesFixture.cs", label="Exit Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.Convert(int)", span="14-14"];
m5_38 [cluster="System.Collections.Generic.List<T>.List()", file="AttributesFixture.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m5_55 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.ConvertToOrdinal(int)", file="AttributesFixture.cs", label="millions > 0", span="99-99"];
m5_57 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.ConvertToOrdinal(int)", file="AttributesFixture.cs", label="var noRest = number == 0 ? 0 : 1", span="102-102"];
m5_68 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.ConvertToOrdinal(int)", file="AttributesFixture.cs", label="number < 20", span="122-122"];
m5_70 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.ConvertToOrdinal(int)", file="AttributesFixture.cs", label="var units = number%10", span="128-128"];
m5_67 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.ConvertToOrdinal(int)", file="AttributesFixture.cs", label="number > 0", span="120-120"];
m5_69 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.ConvertToOrdinal(int)", color=green, community=0, file="AttributesFixture.cs", label="parts.Add(UnitsOrdinal[number])", prediction=2, span="124-124"];
m5_71 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.ConvertToOrdinal(int)", file="AttributesFixture.cs", label="units > 0", span="129-129"];
m5_72 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.ConvertToOrdinal(int)", file="AttributesFixture.cs", label="parts.Add(string.Format(''{0}und'', UnitsMap[units]))", span="130-130"];
m5_82 [cluster="lambda expression", file="AttributesFixture.cs", label="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter", span=""];
m5_83 [cluster="lambda expression", file="AttributesFixture.cs", label="o.RespectingRuntimeTypes()", span="142-142"];
m5_84 [cluster="lambda expression", file="AttributesFixture.cs", label="Exit lambda expression", span="142-142"];
m5_92 [cluster="lambda expression", file="AttributesFixture.cs", label="Entry lambda expression", span="163-163"];
m5_93 [cluster="lambda expression", file="AttributesFixture.cs", label="o.RespectingRuntimeTypes()", span="163-163"];
m5_94 [cluster="lambda expression", file="AttributesFixture.cs", label="Exit lambda expression", span="163-163"];
m5_116 [cluster="lambda expression", file="AttributesFixture.cs", label="e.Equals(expectedError)", span="195-195"];
m5_112 [cluster="lambda expression", file="AttributesFixture.cs", label="Entry lambda expression", span="194-194"];
m5_115 [cluster="lambda expression", file="AttributesFixture.cs", label="Entry lambda expression", span="195-195"];
m5_113 [cluster="lambda expression", file="AttributesFixture.cs", label="x == 1", span="194-194"];
m5_114 [cluster="lambda expression", file="AttributesFixture.cs", label="Exit lambda expression", span="194-194"];
m5_117 [cluster="lambda expression", file="AttributesFixture.cs", label="Exit lambda expression", span="195-195"];
m5_128 [cluster="lambda expression", file="AttributesFixture.cs", label="config.HelpWriter = help", span="204-204"];
m5_127 [cluster="lambda expression", file="AttributesFixture.cs", label="Entry lambda expression", span="204-204"];
m5_129 [cluster="lambda expression", file="AttributesFixture.cs", label="Exit lambda expression", span="204-204"];
m5_142 [cluster="lambda expression", file="AttributesFixture.cs", label="e.Equals(expectedError)", span="227-227"];
m5_138 [cluster="lambda expression", file="AttributesFixture.cs", label="Entry lambda expression", span="226-226"];
m5_141 [cluster="lambda expression", file="AttributesFixture.cs", label="Entry lambda expression", span="227-227"];
m5_139 [cluster="lambda expression", file="AttributesFixture.cs", label="x == 1", span="226-226"];
m5_140 [cluster="lambda expression", file="AttributesFixture.cs", label="Exit lambda expression", span="226-226"];
m5_143 [cluster="lambda expression", file="AttributesFixture.cs", label="Exit lambda expression", span="227-227"];
m5_158 [cluster="lambda expression", file="AttributesFixture.cs", label="config.HelpWriter = help", span="236-236"];
m5_160 [cluster="lambda expression", file="AttributesFixture.cs", label="Entry lambda expression", span="245-245"];
m5_157 [cluster="lambda expression", file="AttributesFixture.cs", label="Entry lambda expression", span="236-236"];
m5_159 [cluster="lambda expression", file="AttributesFixture.cs", label="Exit lambda expression", span="236-236"];
m5_161 [cluster="lambda expression", file="AttributesFixture.cs", label="x == 1", span="245-245"];
m5_162 [cluster="lambda expression", file="AttributesFixture.cs", label="Exit lambda expression", span="245-245"];
m5_181 [cluster="lambda expression", file="AttributesFixture.cs", label="config.HelpWriter = help", span="255-255"];
m5_180 [cluster="lambda expression", file="AttributesFixture.cs", label="Entry lambda expression", span="255-255"];
m5_182 [cluster="lambda expression", file="AttributesFixture.cs", label="Exit lambda expression", span="255-255"];
m5_198 [cluster="lambda expression", file="AttributesFixture.cs", label="config.HelpWriter = help", span="281-281"];
m5_197 [cluster="lambda expression", file="AttributesFixture.cs", label="Entry lambda expression", span="281-281"];
m5_199 [cluster="lambda expression", file="AttributesFixture.cs", label="Exit lambda expression", span="281-281"];
m5_211 [cluster="lambda expression", file="AttributesFixture.cs", label="config.HelpWriter = help", span="306-306"];
m5_213 [cluster="lambda expression", file="AttributesFixture.cs", label="Entry lambda expression", span="315-315"];
m5_210 [cluster="lambda expression", file="AttributesFixture.cs", label="Entry lambda expression", span="306-306"];
m5_212 [cluster="lambda expression", file="AttributesFixture.cs", label="Exit lambda expression", span="306-306"];
m5_214 [cluster="lambda expression", file="AttributesFixture.cs", label="x == 1", span="315-315"];
m5_215 [cluster="lambda expression", file="AttributesFixture.cs", label="Exit lambda expression", span="315-315"];
m5_234 [cluster="lambda expression", file="AttributesFixture.cs", label="config.HelpWriter = help", span="325-325"];
m5_233 [cluster="lambda expression", file="AttributesFixture.cs", label="Entry lambda expression", span="325-325"];
m5_235 [cluster="lambda expression", file="AttributesFixture.cs", label="Exit lambda expression", span="325-325"];
m5_244 [cluster="lambda expression", file="AttributesFixture.cs", label="config.HelpWriter = help", span="352-352"];
m5_243 [cluster="lambda expression", file="AttributesFixture.cs", label="Entry lambda expression", span="352-352"];
m5_245 [cluster="lambda expression", file="AttributesFixture.cs", label="Exit lambda expression", span="352-352"];
m5_269 [cluster="lambda expression", file="AttributesFixture.cs", label="config.HelpWriter = help", span="368-368"];
m5_270 [cluster="lambda expression", file="AttributesFixture.cs", label="Exit lambda expression", span="368-368"];
m5_216 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="AttributesFixture.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", span="321-321"];
m5_217 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="AttributesFixture.cs", label="var help = new StringWriter()", span="324-324"];
m5_218 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="AttributesFixture.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="325-325"];
m5_220 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="AttributesFixture.cs", label="var result = help.ToString()", span="330-330"];
m5_219 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="AttributesFixture.cs", label="sut.ParseArguments<FakeOptionsWithTwoRequiredAndSets>(\r\n                new[] { ''--weburl=value.com'', ''--ftpurl=value.org'' })", span="328-329"];
m5_221 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="AttributesFixture.cs", label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="333-333"];
m5_222 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="AttributesFixture.cs", label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="334-334"];
m5_223 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="AttributesFixture.cs", label="lines[1].ShouldBeEquivalentTo(''Copyright (c) 2005 - 2015 Giacomo Stelluti Scala'')", span="335-335"];
m5_224 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="AttributesFixture.cs", label="lines[2].ShouldBeEquivalentTo(''ERROR(S):'')", span="336-336"];
m5_225 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="AttributesFixture.cs", label="lines[3].ShouldBeEquivalentTo(''Option: 'weburl' is not compatible with: 'ftpurl'.'')", span="337-337"];
m5_226 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="AttributesFixture.cs", label="lines[4].ShouldBeEquivalentTo(''Option: 'ftpurl' is not compatible with: 'weburl'.'')", span="338-338"];
m5_227 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="AttributesFixture.cs", label="lines[5].ShouldBeEquivalentTo(''--weburl     Required.'')", span="339-339"];
m5_228 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="AttributesFixture.cs", label="lines[6].ShouldBeEquivalentTo(''--ftpurl     Required.'')", span="340-340"];
m5_229 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="AttributesFixture.cs", label="lines[7].ShouldBeEquivalentTo(''-a'')", span="341-341"];
m5_230 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="AttributesFixture.cs", label="lines[8].ShouldBeEquivalentTo(''--help       Display this help screen.'')", span="342-342"];
m5_231 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="AttributesFixture.cs", label="lines[9].ShouldBeEquivalentTo(''--version    Display version information.'')", span="343-343"];
m5_232 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="AttributesFixture.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", span="321-321"];
m5_28 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.Convert(int)", color=green, community=0, file="AttributesFixture.cs", label="number > 1", prediction=2, span="60-60"];
m5_29 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.Convert(int)", color=green, community=0, file="AttributesFixture.cs", label="parts.Add(UnitsMap[number])", prediction=2, span="61-61"];
m5_30 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.Convert(int)", color=green, community=0, file="AttributesFixture.cs", label="parts.Add(''eins'')", prediction=2, span="63-63"];
m5_32 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.Convert(int)", color=green, community=0, file="AttributesFixture.cs", label="units > 0", prediction=15, span="68-68"];
m5_31 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.Convert(int)", color=green, community=0, file="AttributesFixture.cs", label="var units = number % 10", prediction=2, span="67-67"];
m5_33 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.Convert(int)", color=green, community=0, file="AttributesFixture.cs", label="parts.Add(string.Format(''{0}und'', UnitsMap[units]))", prediction=2, span="69-69"];
m5_34 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.Convert(int)", color=green, community=0, file="AttributesFixture.cs", label="parts.Add(TensMap[number / 10])", prediction=2, span="71-71"];
m5_23 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.Convert(int)", file="AttributesFixture.cs", label="hundreds > 0", span="50-50"];
m5_118 [cluster="Unk.Equals", file="AttributesFixture.cs", label="Entry Unk.Equals", span=""];
m5_24 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.Convert(int)", file="AttributesFixture.cs", label="parts.Add(Part(''{0}hundert'', ''einhundert'', hundreds))", span="52-52"];
m5_10 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.Convert(int)", file="AttributesFixture.cs", label="number > 0", span="29-29"];
m5_156 [cluster="Unk.StartWithEquivalent", file="AttributesFixture.cs", label="Entry Unk.StartWithEquivalent", span=""];
m5_110 [cluster="Unk.HaveCount", file="AttributesFixture.cs", label="Entry Unk.HaveCount", span=""];
m5_101 [cluster="CommandLine.Tests.Fakes.FakeImmutableOptions.FakeImmutableOptions(string, System.Collections.Generic.IEnumerable<int>, bool, long)", file="AttributesFixture.cs", label="Entry CommandLine.Tests.Fakes.FakeImmutableOptions.FakeImmutableOptions(string, System.Collections.Generic.IEnumerable<int>, bool, long)", span="13-13"];
m5_65 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.ConvertToOrdinal(int)", color=green, community=0, file="AttributesFixture.cs", label="parts.Add(Part(''{0}hundert'', ''einhundert'', hundreds))", prediction=2, span="116-116"];
m5_39 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.Part(string, string, int)", file="AttributesFixture.cs", label="Entry Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.Part(string, string, int)", span="142-142"];
m5_43 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.ConvertToOrdinal(int)", color=green, community=0, file="AttributesFixture.cs", label="number == 0", prediction=20, span="80-80"];
m5_44 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.ConvertToOrdinal(int)", color=green, community=0, file="AttributesFixture.cs", label="return ''nullter'';", prediction=21, span="81-81"];
m5_45 [cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", color=green, community=0, file="AttributesFixture.cs", label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", prediction=2, span="6-6"];
m5_47 [cluster="Unk.ShouldBeEquivalentTo", color=green, community=0, file="AttributesFixture.cs", label="Entry Unk.ShouldBeEquivalentTo", prediction=2, span=""];
m5_54 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", color=green, community=0, file="AttributesFixture.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", prediction=2, span="6-6"];
m5_74 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="AttributesFixture.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_verbs()", span="125-125"];
m5_75 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="AttributesFixture.cs", label="var expectedOptions = new CloneOptions\r\n                {\r\n                    Quiet = true,\r\n                    Urls = new[] { ''http://gsscoder.github.com/'', ''http://yes-to-nooo.github.com/'' }\r\n                }", span="128-132"];
m5_76 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="AttributesFixture.cs", label="var sut = new Parser()", span="133-133"];
m5_77 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="AttributesFixture.cs", label="var result = sut.ParseArguments(\r\n                new[] { ''clone'', ''-q'', ''http://gsscoder.github.com/'', ''http://yes-to-nooo.github.com/'' },\r\n                typeof(AddOptions), typeof(CommitOptions), typeof(CloneOptions))", span="136-138"];
m5_144 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="AttributesFixture.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", span="232-232"];
m5_145 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="AttributesFixture.cs", label="var help = new StringWriter()", span="235-235"];
m5_146 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="AttributesFixture.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="236-236"];
m5_148 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="AttributesFixture.cs", label="var result = help.ToString()", span="240-240"];
m5_147 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="AttributesFixture.cs", label="sut.ParseArguments<FakeOptions>(new[] { ''--version'' })", span="239-239"];
m5_149 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="AttributesFixture.cs", label="result.Length.Should().BeGreaterThan(0)", span="243-243"];
m5_150 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="AttributesFixture.cs", label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="244-244"];
m5_151 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="AttributesFixture.cs", label="lines.Should().HaveCount(x => x == 1)", span="245-245"];
m5_152 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="AttributesFixture.cs", label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="246-246"];
m5_153 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="AttributesFixture.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", span="232-232"];
m5_95 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", file="AttributesFixture.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", span="168-168"];
m5_96 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", file="AttributesFixture.cs", label="var expectedOptions = new FakeImmutableOptions(\r\n                ''strvalue'', new[] { 1, 2, 3 }, default(bool), default(long))", span="171-172"];
m5_97 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", file="AttributesFixture.cs", label="var sut = new Parser()", span="173-173"];
m5_99 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", file="AttributesFixture.cs", label="((Parsed<FakeImmutableOptions>)result).Value.ShouldBeEquivalentTo(expectedOptions)", span="179-179"];
m5_98 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", file="AttributesFixture.cs", label="var result = sut.ParseArguments<FakeImmutableOptions>(new[] { ''--stringvalue=strvalue'', ''-i1'', ''2'', ''3'' })", span="176-176"];
m5_100 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", file="AttributesFixture.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", span="168-168"];
m5_15 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.Convert(int)", file="AttributesFixture.cs", label="number %= 1000000", span="37-37"];
m5_16 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.Convert(int)", file="AttributesFixture.cs", label="number > 0", span="38-38"];
m5_17 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.Convert(int)", file="AttributesFixture.cs", label="parts.Add('' '')", span="39-39"];
m5_19 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.Convert(int)", color=green, community=0, file="AttributesFixture.cs", label="thousands > 0", prediction=2, span="43-43"];
m5_18 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.Convert(int)", color=green, community=0, file="AttributesFixture.cs", label="var thousands = number / 1000", prediction=2, span="42-42"];
m5_20 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.Convert(int)", color=green, community=0, file="AttributesFixture.cs", label="parts.Add(Part(''{0}tausend'', ''eintausend'', thousands))", prediction=2, span="45-45"];
m5_21 [cluster="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter.Convert(int)", color=green, community=0, file="AttributesFixture.cs", label="number %= 1000", prediction=2, span="46-46"];
m5_154 [cluster="string.ToNotEmptyLines()", file="AttributesFixture.cs", label="Entry string.ToNotEmptyLines()", span="10-10"];
m5_80 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="AttributesFixture.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_verbs()", span="125-125"];
m5_78 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="AttributesFixture.cs", label="Assert.IsType<CloneOptions>(((Parsed<object>)result).Value)", span="141-141"];
m5_79 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="AttributesFixture.cs", label="((Parsed<object>)result).Value.ShouldBeEquivalentTo(expectedOptions, o => o.RespectingRuntimeTypes())", span="142-142"];
m5_9 [cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", file="AttributesFixture.cs", label="Entry CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", span="85-85"];
m5_200 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="AttributesFixture.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", span="302-302"];
m5_201 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="AttributesFixture.cs", label="var help = new StringWriter()", span="305-305"];
m5_203 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="AttributesFixture.cs", label="sut.ParseArguments<AddOptions, CommitOptions, CloneOptions>(new[] { command })", span="309-309"];
m5_202 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="AttributesFixture.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="306-306"];
m5_204 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="AttributesFixture.cs", label="var result = help.ToString()", span="310-310"];
m5_205 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="AttributesFixture.cs", label="result.Length.Should().BeGreaterThan(0)", span="313-313"];
m5_206 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="AttributesFixture.cs", label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="314-314"];
m5_207 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="AttributesFixture.cs", label="lines.Should().HaveCount(x => x == 1)", span="315-315"];
m5_208 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="AttributesFixture.cs", label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="316-316"];
m5_209 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="AttributesFixture.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", span="302-302"];
m5_109 [cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="AttributesFixture.cs", label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="368-368"];
m5_271 [file="AttributesFixture.cs", label=writer, span=""];
m5_272 [file="AttributesFixture.cs", label=writer, span=""];
m5_273 [file="AttributesFixture.cs", label=writer, span=""];
m5_274 [file="AttributesFixture.cs", label=expectedError, span=""];
m5_275 [file="AttributesFixture.cs", label=help, span=""];
m5_276 [file="AttributesFixture.cs", label=expectedError, span=""];
m5_277 [file="AttributesFixture.cs", label=help, span=""];
m5_278 [file="AttributesFixture.cs", label=help, span=""];
m5_279 [file="AttributesFixture.cs", label=help, span=""];
m5_280 [file="AttributesFixture.cs", label=help, span=""];
m5_281 [file="AttributesFixture.cs", label=help, span=""];
m5_282 [file="AttributesFixture.cs", label=help, span=""];
m5_283 [file="AttributesFixture.cs", label=help, span=""];
m10_0 [cluster="CommandLine.Tests.Mocks.BooleanSetOptions.BooleanSetOptions()", file="BooleanSetOptions.cs", label="Entry CommandLine.Tests.Mocks.BooleanSetOptions.BooleanSetOptions()", span="35-35"];
m10_1 [cluster="CommandLine.Tests.Mocks.BooleanSetOptions.BooleanSetOptions()", file="BooleanSetOptions.cs", label="NonBooleanValue = 0", span="37-37"];
m10_2 [cluster="CommandLine.Tests.Mocks.BooleanSetOptions.BooleanSetOptions()", file="BooleanSetOptions.cs", label="Exit CommandLine.Tests.Mocks.BooleanSetOptions.BooleanSetOptions()", span="35-35"];
m10_3 [file="BooleanSetOptions.cs", label="CommandLine.Tests.Mocks.BooleanSetOptions", span=""];
m19_11 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="ComplexOptions.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m19_20 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="ComplexOptions.cs", label="Entry CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", span="44-44"];
m19_24 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="ComplexOptions.cs", label="((Ok<IEnumerable<Token>, Error>)result).Success.ShouldBeEquivalentTo(expectedTokens)", span="62-62"];
m19_23 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="ComplexOptions.cs", label="var result =\r\n                Tokenizer.ExplodeOptionList(\r\n                    Result.Succeed(\r\n                        Enumerable.Empty<Token>().Concat(new[] { Token.Name(''x''),\r\n                            Token.Name(''string-seq''), Token.Value(''aaa,bb,cccc''), Token.Name(''switch'') }),\r\n                        Enumerable.Empty<Error>()),\r\n                        optionName => NameLookup.HavingSeparator(optionName, specs, StringComparer.InvariantCulture))", span="53-59"];
m19_25 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="ComplexOptions.cs", label="Exit CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", span="44-44"];
m19_35 [cluster="CommandLine.Core.Token.Value(string, bool)", file="ComplexOptions.cs", label="Entry CommandLine.Core.Token.Value(string, bool)", span="29-29"];
m19_29 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", file="ComplexOptions.cs", label="Entry CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", span="68-68"];
m19_30 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", file="ComplexOptions.cs", label="var expectedTokens = new[] {\r\n                Token.Name(''x''), Token.Name(''string-seq''), Token.Value(''aaa''), Token.Value(''bb''),\r\n                Token.Name(''unknown''), Token.Name(''switch'') }", span="71-73"];
m19_31 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", file="ComplexOptions.cs", label="Func<string, bool> nameLookup =\r\n                name => name.Equals(''x'') || name.Equals(''string-seq'') || name.Equals(''switch'')", span="74-75"];
m19_33 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", file="ComplexOptions.cs", label="result.ShouldBeEquivalentTo(expectedTokens)", span="90-90"];
m19_32 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", file="ComplexOptions.cs", label="var result =\r\n                Tokenizer.Normalize(\r\n                    //Result.Succeed(\r\n                        Enumerable.Empty<Token>()\r\n                            .Concat(\r\n                                new[] {\r\n                                    Token.Name(''x''), Token.Name(''string-seq''), Token.Value(''aaa''), Token.Value(''bb''),\r\n                                    Token.Name(''unknown''), Token.Value(''value0'', true), Token.Name(''switch'') })\r\n                        //,Enumerable.Empty<Error>()),\r\n                    ,nameLookup)", span="78-87"];
m19_34 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", file="ComplexOptions.cs", label="Exit CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", span="68-68"];
m19_19 [cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="ComplexOptions.cs", label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="27-27"];
m19_36 [cluster="CommandLine.Core.Tokenizer.Normalize(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, bool>)", file="ComplexOptions.cs", label="Entry CommandLine.Core.Tokenizer.Normalize(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, bool>)", span="78-78"];
m19_8 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", file="ComplexOptions.cs", label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", span="16-16"];
m19_0 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="ComplexOptions.cs", label="Entry CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", span="20-20"];
m19_1 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="ComplexOptions.cs", label="var expectedTokens = new[] { Token.Name(''i''), Token.Value(''10''), Token.Name(''string-seq''),\r\n                Token.Value(''aaa''), Token.Value(''bb''),  Token.Value(''cccc''), Token.Name(''switch'') }", span="23-24"];
m19_2 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="ComplexOptions.cs", label="var specs = new[] { new OptionSpecification(string.Empty, ''string-seq'',\r\n                false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), ',', null, string.Empty, string.Empty, new List<string>(), typeof(IEnumerable<string>), TargetType.Sequence)}", span="25-26"];
m19_4 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="ComplexOptions.cs", label="((Ok<IEnumerable<Token>, Error>)result).Success.ShouldBeEquivalentTo(expectedTokens)", span="38-38"];
m19_3 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="ComplexOptions.cs", label="var result =\r\n                Tokenizer.ExplodeOptionList(\r\n                    Result.Succeed(\r\n                        Enumerable.Empty<Token>().Concat(new[] { Token.Name(''i''), Token.Value(''10''),\r\n                            Token.Name(''string-seq''), Token.Value(''aaa,bb,cccc''), Token.Name(''switch'') }),\r\n                        Enumerable.Empty<Error>()),\r\n                        optionName => NameLookup.HavingSeparator(optionName, specs, StringComparer.InvariantCulture))", span="29-35"];
m19_5 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="ComplexOptions.cs", label="Exit CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", span="20-20"];
m19_37 [cluster="lambda expression", file="ComplexOptions.cs", label="Entry lambda expression", span="75-75"];
m19_17 [cluster="lambda expression", file="ComplexOptions.cs", label="NameLookup.HavingSeparator(optionName, specs, StringComparer.InvariantCulture)", span="35-35"];
m19_16 [cluster="lambda expression", file="ComplexOptions.cs", label="Entry lambda expression", span="35-35"];
m19_18 [cluster="lambda expression", file="ComplexOptions.cs", label="Exit lambda expression", span="35-35"];
m19_27 [cluster="lambda expression", file="ComplexOptions.cs", label="NameLookup.HavingSeparator(optionName, specs, StringComparer.InvariantCulture)", span="59-59"];
m19_26 [cluster="lambda expression", file="ComplexOptions.cs", label="Entry lambda expression", span="59-59"];
m19_28 [cluster="lambda expression", file="ComplexOptions.cs", label="Exit lambda expression", span="59-59"];
m19_38 [cluster="lambda expression", file="ComplexOptions.cs", label="name.Equals(''x'') || name.Equals(''string-seq'') || name.Equals(''switch'')", span="75-75"];
m19_39 [cluster="lambda expression", file="ComplexOptions.cs", label="Exit lambda expression", span="75-75"];
m19_40 [cluster="string.Equals(string)", file="ComplexOptions.cs", label="Entry string.Equals(string)", span="0-0"];
m19_14 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="ComplexOptions.cs", label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", span="57-57"];
m19_6 [cluster="CommandLine.Core.Token.Name(string)", file="ComplexOptions.cs", label="Entry CommandLine.Core.Token.Name(string)", span="19-19"];
m19_9 [cluster="CSharpx.Maybe.Nothing<T>()", file="ComplexOptions.cs", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
m19_12 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="ComplexOptions.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
m19_7 [cluster="CommandLine.Core.Token.Value(string)", file="ComplexOptions.cs", label="Entry CommandLine.Core.Token.Value(string)", span="24-24"];
m19_15 [cluster="Unk.ShouldBeEquivalentTo", file="ComplexOptions.cs", label="Entry Unk.ShouldBeEquivalentTo", span=""];
m19_13 [cluster="RailwaySharp.ErrorHandling.Result.Succeed<TSuccess, TMessage>(TSuccess, System.Collections.Generic.IEnumerable<TMessage>)", file="ComplexOptions.cs", label="Entry RailwaySharp.ErrorHandling.Result.Succeed<TSuccess, TMessage>(TSuccess, System.Collections.Generic.IEnumerable<TMessage>)", span="202-202"];
m19_10 [cluster="System.Collections.Generic.List<T>.List()", file="ComplexOptions.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m19_41 [file="ComplexOptions.cs", label=specs, span=""];
m19_42 [file="ComplexOptions.cs", label=specs, span=""];
m21_23 [cluster="Humanizer.Localisation.NumberToWords.BrazilianPortugueseNumberToWordsConverter.BrazilianPortugueseNumberToWordsConverter()", file="CopyrightInfoFixture.cs", label="Entry Humanizer.Localisation.NumberToWords.BrazilianPortugueseNumberToWordsConverter.BrazilianPortugueseNumberToWordsConverter()", span="5-5"];
m21_31 [cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.FrenchNumberToWordsConverter()", file="CopyrightInfoFixture.cs", label="Entry Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.FrenchNumberToWordsConverter()", span="5-5"];
m21_11 [cluster="Humanizer.Localisation.NumberToWords.FarsiNumberToWordsConverter.FarsiNumberToWordsConverter()", file="CopyrightInfoFixture.cs", label="Entry Humanizer.Localisation.NumberToWords.FarsiNumberToWordsConverter.FarsiNumberToWordsConverter()", span="5-5"];
m21_39 [cluster="Humanizer.Localisation.NumberToWords.HebrewNumberToWordsConverter.HebrewNumberToWordsConverter()", file="CopyrightInfoFixture.cs", label="Entry Humanizer.Localisation.NumberToWords.HebrewNumberToWordsConverter.HebrewNumberToWordsConverter()", span="5-5"];
m21_44 [cluster="Humanizer.NumberToWordsExtension.ToWords(int, Humanizer.GrammaticalGender)", file="CopyrightInfoFixture.cs", label="Entry Humanizer.NumberToWordsExtension.ToWords(int, Humanizer.GrammaticalGender)", span="56-56"];
m21_45 [cluster="Humanizer.NumberToWordsExtension.ToWords(int, Humanizer.GrammaticalGender)", file="CopyrightInfoFixture.cs", label="return Converter.Convert(number, gender);", span="58-58"];
m21_46 [cluster="Humanizer.NumberToWordsExtension.ToWords(int, Humanizer.GrammaticalGender)", file="CopyrightInfoFixture.cs", label="Exit Humanizer.NumberToWordsExtension.ToWords(int, Humanizer.GrammaticalGender)", span="56-56"];
m21_51 [cluster="Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter.ConvertToOrdinal(int)", file="CopyrightInfoFixture.cs", label="Entry Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter.ConvertToOrdinal(int)", span="45-45"];
m21_15 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.SpanishNumberToWordsConverter()", file="CopyrightInfoFixture.cs", label="Entry Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.SpanishNumberToWordsConverter()", span="5-5"];
m21_19 [cluster="Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.PolishNumberToWordsConverter()", file="CopyrightInfoFixture.cs", label="Entry Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.PolishNumberToWordsConverter()", span="4-4"];
m21_27 [cluster="Humanizer.Localisation.NumberToWords.RussianNumberToWordsConverter.RussianNumberToWordsConverter()", file="CopyrightInfoFixture.cs", label="Entry Humanizer.Localisation.NumberToWords.RussianNumberToWordsConverter.RussianNumberToWordsConverter()", span="6-6"];
m21_36 [cluster="lambda expression", file="CopyrightInfoFixture.cs", label="Entry lambda expression", span="24-24"];
m21_0 [cluster="lambda expression", file="CopyrightInfoFixture.cs", label="Entry lambda expression", span="15-15"];
m21_1 [cluster="lambda expression", file="CopyrightInfoFixture.cs", label="new EnglishNumberToWordsConverter()", span="15-15"];
m21_2 [cluster="lambda expression", file="CopyrightInfoFixture.cs", label="Exit lambda expression", span="15-15"];
m21_4 [cluster="lambda expression", file="CopyrightInfoFixture.cs", label="Entry lambda expression", span="16-16"];
m21_5 [cluster="lambda expression", file="CopyrightInfoFixture.cs", label="new ArabicNumberToWordsConverter()", span="16-16"];
m21_6 [cluster="lambda expression", file="CopyrightInfoFixture.cs", label="Exit lambda expression", span="16-16"];
m21_8 [cluster="lambda expression", file="CopyrightInfoFixture.cs", label="Entry lambda expression", span="17-17"];
m21_9 [cluster="lambda expression", file="CopyrightInfoFixture.cs", label="new FarsiNumberToWordsConverter()", span="17-17"];
m21_10 [cluster="lambda expression", file="CopyrightInfoFixture.cs", label="Exit lambda expression", span="17-17"];
m21_12 [cluster="lambda expression", file="CopyrightInfoFixture.cs", label="Entry lambda expression", span="18-18"];
m21_13 [cluster="lambda expression", file="CopyrightInfoFixture.cs", label="new SpanishNumberToWordsConverter()", span="18-18"];
m21_14 [cluster="lambda expression", file="CopyrightInfoFixture.cs", label="Exit lambda expression", span="18-18"];
m21_16 [cluster="lambda expression", file="CopyrightInfoFixture.cs", label="Entry lambda expression", span="19-19"];
m21_17 [cluster="lambda expression", file="CopyrightInfoFixture.cs", label="new PolishNumberToWordsConverter()", span="19-19"];
m21_18 [cluster="lambda expression", file="CopyrightInfoFixture.cs", label="Exit lambda expression", span="19-19"];
m21_20 [cluster="lambda expression", file="CopyrightInfoFixture.cs", label="Entry lambda expression", span="20-20"];
m21_21 [cluster="lambda expression", file="CopyrightInfoFixture.cs", label="new BrazilianPortugueseNumberToWordsConverter()", span="20-20"];
m21_22 [cluster="lambda expression", file="CopyrightInfoFixture.cs", label="Exit lambda expression", span="20-20"];
m21_24 [cluster="lambda expression", file="CopyrightInfoFixture.cs", label="Entry lambda expression", span="21-21"];
m21_25 [cluster="lambda expression", file="CopyrightInfoFixture.cs", label="new RussianNumberToWordsConverter()", span="21-21"];
m21_26 [cluster="lambda expression", file="CopyrightInfoFixture.cs", label="Exit lambda expression", span="21-21"];
m21_28 [cluster="lambda expression", file="CopyrightInfoFixture.cs", label="Entry lambda expression", span="22-22"];
m21_29 [cluster="lambda expression", file="CopyrightInfoFixture.cs", label="new FrenchNumberToWordsConverter()", span="22-22"];
m21_30 [cluster="lambda expression", file="CopyrightInfoFixture.cs", label="Exit lambda expression", span="22-22"];
m21_32 [cluster="lambda expression", file="CopyrightInfoFixture.cs", label="Entry lambda expression", span="23-23"];
m21_33 [cluster="lambda expression", file="CopyrightInfoFixture.cs", label="new DutchNumberToWordsConverter()", span="23-23"];
m21_34 [cluster="lambda expression", file="CopyrightInfoFixture.cs", label="Exit lambda expression", span="23-23"];
m21_37 [cluster="lambda expression", file="CopyrightInfoFixture.cs", label="new HebrewNumberToWordsConverter()", span="24-24"];
m21_38 [cluster="lambda expression", file="CopyrightInfoFixture.cs", label="Exit lambda expression", span="24-24"];
m21_48 [cluster="Humanizer.NumberToWordsExtension.ToOrdinalWords(int)", file="CopyrightInfoFixture.cs", label="Entry Humanizer.NumberToWordsExtension.ToOrdinalWords(int)", span="66-66"];
m21_49 [cluster="Humanizer.NumberToWordsExtension.ToOrdinalWords(int)", file="CopyrightInfoFixture.cs", label="return Converter.ConvertToOrdinal(number);", span="68-68"];
m21_50 [cluster="Humanizer.NumberToWordsExtension.ToOrdinalWords(int)", file="CopyrightInfoFixture.cs", label="Exit Humanizer.NumberToWordsExtension.ToOrdinalWords(int)", span="66-66"];
m21_7 [cluster="Humanizer.Localisation.NumberToWords.ArabicNumberToWordsConverter.ArabicNumberToWordsConverter()", file="CopyrightInfoFixture.cs", label="Entry Humanizer.Localisation.NumberToWords.ArabicNumberToWordsConverter.ArabicNumberToWordsConverter()", span="6-6"];
m21_35 [cluster="Humanizer.Localisation.NumberToWords.DutchNumberToWordsConverter.DutchNumberToWordsConverter()", file="CopyrightInfoFixture.cs", label="Entry Humanizer.Localisation.NumberToWords.DutchNumberToWordsConverter.DutchNumberToWordsConverter()", span="11-11"];
m21_52 [cluster="Humanizer.NumberToWordsExtension.ToOrdinalWords(int, Humanizer.GrammaticalGender)", file="CopyrightInfoFixture.cs", label="Entry Humanizer.NumberToWordsExtension.ToOrdinalWords(int, Humanizer.GrammaticalGender)", span="79-79"];
m21_53 [cluster="Humanizer.NumberToWordsExtension.ToOrdinalWords(int, Humanizer.GrammaticalGender)", file="CopyrightInfoFixture.cs", label="return Converter.ConvertToOrdinal(number, gender);", span="81-81"];
m21_54 [cluster="Humanizer.NumberToWordsExtension.ToOrdinalWords(int, Humanizer.GrammaticalGender)", file="CopyrightInfoFixture.cs", label="Exit Humanizer.NumberToWordsExtension.ToOrdinalWords(int, Humanizer.GrammaticalGender)", span="79-79"];
m21_43 [cluster="Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter.Convert(int)", file="CopyrightInfoFixture.cs", label="Entry Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter.Convert(int)", span="22-22"];
m21_47 [cluster="Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter.Convert(int, Humanizer.GrammaticalGender)", file="CopyrightInfoFixture.cs", label="Entry Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter.Convert(int, Humanizer.GrammaticalGender)", span="12-12"];
m21_55 [cluster="Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter.ConvertToOrdinal(int, Humanizer.GrammaticalGender)", file="CopyrightInfoFixture.cs", label="Entry Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter.ConvertToOrdinal(int, Humanizer.GrammaticalGender)", span="35-35"];
m21_40 [cluster="Humanizer.NumberToWordsExtension.ToWords(int)", file="CopyrightInfoFixture.cs", label="Entry Humanizer.NumberToWordsExtension.ToWords(int)", span="32-32"];
m21_41 [cluster="Humanizer.NumberToWordsExtension.ToWords(int)", file="CopyrightInfoFixture.cs", label="return Converter.Convert(number);", span="34-34"];
m21_42 [cluster="Humanizer.NumberToWordsExtension.ToWords(int)", file="CopyrightInfoFixture.cs", label="Exit Humanizer.NumberToWordsExtension.ToWords(int)", span="32-32"];
m21_3 [cluster="Humanizer.Localisation.NumberToWords.EnglishNumberToWordsConverter.EnglishNumberToWordsConverter()", file="CopyrightInfoFixture.cs", label="Entry Humanizer.Localisation.NumberToWords.EnglishNumberToWordsConverter.EnglishNumberToWordsConverter()", span="5-5"];
m22_22 [cluster="System.Collections.Generic.IEnumerable<TSource>.IndexOf<TSource>(System.Func<TSource, bool>)", file="DebugStringUtil.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.IndexOf<TSource>(System.Func<TSource, bool>)", span="36-36"];
m22_24 [cluster="System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", file="DebugStringUtil.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", span="0-0"];
m22_35 [cluster="Unk.Take", file="DebugStringUtil.cs", label="Entry Unk.Take", span=""];
m22_3 [cluster="System.Collections.Generic.IEnumerable<TSource>.Pairwise<TSource, TResult>(System.Func<TSource, TSource, TResult>)", file="DebugStringUtil.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Pairwise<TSource, TResult>(System.Func<TSource, TSource, TResult>)", span="10-10"];
m22_15 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="DebugStringUtil.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
m22_36 [cluster="lambda expression", file="DebugStringUtil.cs", label="Entry lambda expression", span="35-35"];
m22_5 [cluster="lambda expression", file="DebugStringUtil.cs", label="f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).Return(info =>\r\n                                   info.TargetType == TargetType.Sequence\r\n                                        ? new[] { f }.Concat(tokens.OfSequence(f, info))\r\n                                        : new Token[] { }, new Token[] { })\r\n                            : new Token[] { }", span="17-22"];
m22_12 [cluster="lambda expression", file="DebugStringUtil.cs", label="info.TargetType == TargetType.Sequence\r\n                                        ? new[] { f }.Concat(tokens.OfSequence(f, info))\r\n                                        : new Token[] { }", span="19-21"];
m22_4 [cluster="lambda expression", file="DebugStringUtil.cs", label="Entry lambda expression", span="16-22"];
m22_6 [cluster="lambda expression", file="DebugStringUtil.cs", label="Exit lambda expression", span="16-22"];
m22_11 [cluster="lambda expression", file="DebugStringUtil.cs", label="Entry lambda expression", span="18-21"];
m22_13 [cluster="lambda expression", file="DebugStringUtil.cs", label="Exit lambda expression", span="18-21"];
m22_26 [cluster="lambda expression", file="DebugStringUtil.cs", label="t.Equals(nameToken)", span="29-29"];
m22_30 [cluster="lambda expression", file="DebugStringUtil.cs", label="info.MaxItems.Return(\r\n                            n => tokens.Skip(nameIndex + 1).Take(n),\r\n                                 tokens.Skip(nameIndex + 1).TakeWhile(v => v.IsValue()))", span="33-35"];
m22_33 [cluster="lambda expression", file="DebugStringUtil.cs", label="tokens.Skip(nameIndex + 1).Take(n)", span="34-34"];
m22_25 [cluster="lambda expression", file="DebugStringUtil.cs", label="Entry lambda expression", span="29-29"];
m22_29 [cluster="lambda expression", file="DebugStringUtil.cs", label="Entry lambda expression", span="33-35"];
m22_39 [cluster="lambda expression", file="DebugStringUtil.cs", label="Entry lambda expression", span="36-36"];
m22_27 [cluster="lambda expression", file="DebugStringUtil.cs", label="Exit lambda expression", span="29-29"];
m22_31 [cluster="lambda expression", file="DebugStringUtil.cs", label="Exit lambda expression", span="33-35"];
m22_32 [cluster="lambda expression", file="DebugStringUtil.cs", label="Entry lambda expression", span="34-34"];
m22_34 [cluster="lambda expression", file="DebugStringUtil.cs", label="Exit lambda expression", span="34-34"];
m22_37 [cluster="lambda expression", file="DebugStringUtil.cs", label="v.IsValue()", span="35-35"];
m22_38 [cluster="lambda expression", file="DebugStringUtil.cs", label="Exit lambda expression", span="35-35"];
m22_40 [cluster="lambda expression", file="DebugStringUtil.cs", label="v.IsValue()", span="36-36"];
m22_41 [cluster="lambda expression", file="DebugStringUtil.cs", label="Exit lambda expression", span="36-36"];
m22_10 [cluster="Unk.Return", file="DebugStringUtil.cs", label="Entry Unk.Return", span=""];
m22_28 [cluster="CommandLine.Core.Token.Equals(CommandLine.Core.Token)", file="DebugStringUtil.cs", label="Entry CommandLine.Core.Token.Equals(CommandLine.Core.Token)", span="55-55"];
m22_23 [cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="DebugStringUtil.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0"];
m22_16 [cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", file="DebugStringUtil.cs", label="Entry CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", span="27-27"];
m22_17 [cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", file="DebugStringUtil.cs", label="var nameIndex = tokens.IndexOf(t => t.Equals(nameToken))", span="29-29"];
m22_19 [cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", file="DebugStringUtil.cs", label="return info.NextValue.Return(\r\n                    _ => info.MaxItems.Return(\r\n                            n => tokens.Skip(nameIndex + 1).Take(n),\r\n                                 tokens.Skip(nameIndex + 1).TakeWhile(v => v.IsValue())),\r\n                    tokens.Skip(nameIndex + 1).TakeWhile(v => v.IsValue()));", span="32-36"];
m22_18 [cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", file="DebugStringUtil.cs", label="nameIndex >= 0", span="30-30"];
m22_20 [cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", file="DebugStringUtil.cs", label="return new Token[] { };", span="38-38"];
m22_21 [cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", file="DebugStringUtil.cs", label="Exit CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", span="27-27"];
m22_7 [cluster="CommandLine.Core.Token.IsName()", file="DebugStringUtil.cs", label="Entry CommandLine.Core.Token.IsName()", span="68-68"];
m22_8 [cluster="CommandLine.Core.Token.IsValue()", file="DebugStringUtil.cs", label="Entry CommandLine.Core.Token.IsValue()", span="73-73"];
m22_9 [cluster="System.Func<T, TResult>.Invoke(T)", file="DebugStringUtil.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m22_14 [cluster="Unk.OfSequence", file="DebugStringUtil.cs", label="Entry Unk.OfSequence", span=""];
m22_0 [cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, Maybe<CommandLine.Core.TypeDescriptor>>)", file="DebugStringUtil.cs", label="Entry CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11"];
m22_1 [cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, Maybe<CommandLine.Core.TypeDescriptor>>)", file="DebugStringUtil.cs", label="return from tseq in tokens.Pairwise(\r\n                (f, s) =>\r\n                        f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).Return(info =>\r\n                                   info.TargetType == TargetType.Sequence\r\n                                        ? new[] { f }.Concat(tokens.OfSequence(f, info))\r\n                                        : new Token[] { }, new Token[] { })\r\n                            : new Token[] { })\r\n                   from t in tseq\r\n                   select t;", span="15-24"];
m22_2 [cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, Maybe<CommandLine.Core.TypeDescriptor>>)", file="DebugStringUtil.cs", label="Exit CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11"];
m22_42 [file="DebugStringUtil.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", span=""];
m22_43 [file="DebugStringUtil.cs", label="System.Func<string, Maybe<CommandLine.Core.TypeDescriptor>>", span=""];
m22_44 [file="DebugStringUtil.cs", label="CommandLine.Core.Token", span=""];
m22_45 [file="DebugStringUtil.cs", label="CommandLine.Core.Token", span=""];
m22_46 [file="DebugStringUtil.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", span=""];
m22_47 [file="DebugStringUtil.cs", label="CommandLine.Core.TypeDescriptor", span=""];
m22_48 [file="DebugStringUtil.cs", label=nameIndex, span=""];
m27_0 [cluster="CommandLine.OptionListAttribute.OptionListAttribute(char)", file="HeadingInfoFixture.cs", label="Entry CommandLine.OptionListAttribute.OptionListAttribute(char)", span="42-42"];
m27_1 [cluster="CommandLine.OptionListAttribute.OptionListAttribute(char)", file="HeadingInfoFixture.cs", label="Exit CommandLine.OptionListAttribute.OptionListAttribute(char)", span="42-42"];
m27_7 [cluster="CommandLine.OptionListAttribute.OptionListAttribute(char, string, char)", file="HeadingInfoFixture.cs", label="Entry CommandLine.OptionListAttribute.OptionListAttribute(char, string, char)", span="73-73"];
m27_8 [cluster="CommandLine.OptionListAttribute.OptionListAttribute(char, string, char)", file="HeadingInfoFixture.cs", label="Separator = separator", span="76-76"];
m27_9 [cluster="CommandLine.OptionListAttribute.OptionListAttribute(char, string, char)", file="HeadingInfoFixture.cs", label="Exit CommandLine.OptionListAttribute.OptionListAttribute(char, string, char)", span="73-73"];
m27_2 [cluster="CommandLine.OptionListAttribute.OptionListAttribute(string)", file="HeadingInfoFixture.cs", label="Entry CommandLine.OptionListAttribute.OptionListAttribute(string)", span="51-51"];
m27_3 [cluster="CommandLine.OptionListAttribute.OptionListAttribute(string)", file="HeadingInfoFixture.cs", label="Exit CommandLine.OptionListAttribute.OptionListAttribute(string)", span="51-51"];
m27_4 [cluster="CommandLine.OptionListAttribute.OptionListAttribute(char, string)", file="HeadingInfoFixture.cs", label="Entry CommandLine.OptionListAttribute.OptionListAttribute(char, string)", span="61-61"];
m27_5 [cluster="CommandLine.OptionListAttribute.OptionListAttribute(char, string)", file="HeadingInfoFixture.cs", label="Separator = ':'", span="64-64"];
m27_6 [cluster="CommandLine.OptionListAttribute.OptionListAttribute(char, string)", file="HeadingInfoFixture.cs", label="Exit CommandLine.OptionListAttribute.OptionListAttribute(char, string)", span="61-61"];
m27_10 [file="HeadingInfoFixture.cs", label="CommandLine.OptionListAttribute", span=""];
m29_100 [cluster="CommandLine.Infrastructure.OptionMap.MutuallyExclusiveInfo.IncrementOccurrence()", file="HelpOptionAttributeFixture.cs", label="Entry CommandLine.Infrastructure.OptionMap.MutuallyExclusiveInfo.IncrementOccurrence()", span="289-289"];
m29_103 [cluster="CommandLine.Infrastructure.OptionMap.MutuallyExclusiveInfo.IncrementOccurrence()", file="HelpOptionAttributeFixture.cs", label="++count", span="291-291"];
m29_104 [cluster="CommandLine.Infrastructure.OptionMap.MutuallyExclusiveInfo.IncrementOccurrence()", file="HelpOptionAttributeFixture.cs", label="Exit CommandLine.Infrastructure.OptionMap.MutuallyExclusiveInfo.IncrementOccurrence()", span="289-289"];
m29_46 [cluster="CommandLine.Infrastructure.OptionMap.EnforceRequiredRule()", file="HelpOptionAttributeFixture.cs", label="Entry CommandLine.Infrastructure.OptionMap.EnforceRequiredRule()", span="219-219"];
m29_73 [cluster="CommandLine.Infrastructure.OptionMap.EnforceRequiredRule()", file="HelpOptionAttributeFixture.cs", label="var requiredRulesAllMet = true", span="221-221"];
m29_74 [cluster="CommandLine.Infrastructure.OptionMap.EnforceRequiredRule()", file="HelpOptionAttributeFixture.cs", label="_map.Values", span="223-223"];
m29_78 [cluster="CommandLine.Infrastructure.OptionMap.EnforceRequiredRule()", file="HelpOptionAttributeFixture.cs", label="return requiredRulesAllMet;", span="232-232"];
m29_75 [cluster="CommandLine.Infrastructure.OptionMap.EnforceRequiredRule()", file="HelpOptionAttributeFixture.cs", label="option.Required && !(option.IsDefined && option.ReceivedValue)", span="225-225"];
m29_76 [cluster="CommandLine.Infrastructure.OptionMap.EnforceRequiredRule()", file="HelpOptionAttributeFixture.cs", label="SetParserStateIfNeeded(RawOptions, option, true, null)", span="227-227"];
m29_77 [cluster="CommandLine.Infrastructure.OptionMap.EnforceRequiredRule()", file="HelpOptionAttributeFixture.cs", label="requiredRulesAllMet = false", span="228-228"];
m29_79 [cluster="CommandLine.Infrastructure.OptionMap.EnforceRequiredRule()", file="HelpOptionAttributeFixture.cs", label="Exit CommandLine.Infrastructure.OptionMap.EnforceRequiredRule()", span="219-219"];
m29_0 [cluster="CommandLine.Infrastructure.OptionMap.OptionMap(int, CommandLine.ParserSettings)", file="HelpOptionAttributeFixture.cs", label="Entry CommandLine.Infrastructure.OptionMap.OptionMap(int, CommandLine.ParserSettings)", span="47-47"];
m29_1 [cluster="CommandLine.Infrastructure.OptionMap.OptionMap(int, CommandLine.ParserSettings)", file="HelpOptionAttributeFixture.cs", label="_settings = settings", span="49-49"];
m29_3 [cluster="CommandLine.Infrastructure.OptionMap.OptionMap(int, CommandLine.ParserSettings)", file="HelpOptionAttributeFixture.cs", label="_names = new Dictionary<string, string>(capacity, comparer)", span="53-53"];
m29_6 [cluster="CommandLine.Infrastructure.OptionMap.OptionMap(int, CommandLine.ParserSettings)", file="HelpOptionAttributeFixture.cs", label="_mutuallyExclusiveSetMap = new Dictionary<string, MutuallyExclusiveInfo>(capacity, StringComparer.OrdinalIgnoreCase)", span="58-58"];
m29_5 [cluster="CommandLine.Infrastructure.OptionMap.OptionMap(int, CommandLine.ParserSettings)", file="HelpOptionAttributeFixture.cs", label="_settings.MutuallyExclusive", span="56-56"];
m29_7 [cluster="CommandLine.Infrastructure.OptionMap.OptionMap(int, CommandLine.ParserSettings)", file="HelpOptionAttributeFixture.cs", label="Exit CommandLine.Infrastructure.OptionMap.OptionMap(int, CommandLine.ParserSettings)", span="47-47"];
m29_9 [cluster="CommandLine.Infrastructure.OptionMap.Create(object, CommandLine.ParserSettings)", file="HelpOptionAttributeFixture.cs", label="Entry CommandLine.Infrastructure.OptionMap.Create(object, CommandLine.ParserSettings)", span="102-102"];
m29_10 [cluster="CommandLine.Infrastructure.OptionMap.Create(object, CommandLine.ParserSettings)", file="HelpOptionAttributeFixture.cs", label="var list = ReflectionUtil.RetrievePropertyList<BaseOptionAttribute>(target)", span="104-104"];
m29_13 [cluster="CommandLine.Infrastructure.OptionMap.Create(object, CommandLine.ParserSettings)", file="HelpOptionAttributeFixture.cs", label="var map = new OptionMap(list.Count, settings)", span="110-110"];
m29_21 [cluster="CommandLine.Infrastructure.OptionMap.Create(object, CommandLine.ParserSettings)", file="HelpOptionAttributeFixture.cs", label="map[uniqueName] = new OptionInfo(pair.Right, pair.Left, settings.ParsingCulture)", span="127-127"];
m29_22 [cluster="CommandLine.Infrastructure.OptionMap.Create(object, CommandLine.ParserSettings)", file="HelpOptionAttributeFixture.cs", label="map.RawOptions = target", span="131-131"];
m29_11 [cluster="CommandLine.Infrastructure.OptionMap.Create(object, CommandLine.ParserSettings)", file="HelpOptionAttributeFixture.cs", label="list == null", span="105-105"];
m29_14 [cluster="CommandLine.Infrastructure.OptionMap.Create(object, CommandLine.ParserSettings)", file="HelpOptionAttributeFixture.cs", label=list, span="112-112"];
m29_12 [cluster="CommandLine.Infrastructure.OptionMap.Create(object, CommandLine.ParserSettings)", file="HelpOptionAttributeFixture.cs", label="return null;", span="107-107"];
m29_23 [cluster="CommandLine.Infrastructure.OptionMap.Create(object, CommandLine.ParserSettings)", file="HelpOptionAttributeFixture.cs", label="return map;", span="132-132"];
m29_15 [cluster="CommandLine.Infrastructure.OptionMap.Create(object, CommandLine.ParserSettings)", file="HelpOptionAttributeFixture.cs", label="pair.Left != null && pair.Right != null", span="114-114"];
m29_17 [cluster="CommandLine.Infrastructure.OptionMap.Create(object, CommandLine.ParserSettings)", file="HelpOptionAttributeFixture.cs", label="pair.Right.AutoLongName", span="117-117"];
m29_18 [cluster="CommandLine.Infrastructure.OptionMap.Create(object, CommandLine.ParserSettings)", file="HelpOptionAttributeFixture.cs", label="uniqueName = pair.Left.Name.ToLowerInvariant()", span="119-119"];
m29_19 [cluster="CommandLine.Infrastructure.OptionMap.Create(object, CommandLine.ParserSettings)", file="HelpOptionAttributeFixture.cs", label="pair.Right.LongName = uniqueName", span="120-120"];
m29_20 [cluster="CommandLine.Infrastructure.OptionMap.Create(object, CommandLine.ParserSettings)", file="HelpOptionAttributeFixture.cs", label="uniqueName = pair.Right.UniqueName", span="124-124"];
m29_16 [cluster="CommandLine.Infrastructure.OptionMap.Create(object, CommandLine.ParserSettings)", file="HelpOptionAttributeFixture.cs", label="string uniqueName", span="116-116"];
m29_24 [cluster="CommandLine.Infrastructure.OptionMap.Create(object, CommandLine.ParserSettings)", file="HelpOptionAttributeFixture.cs", label="Exit CommandLine.Infrastructure.OptionMap.Create(object, CommandLine.ParserSettings)", span="102-102"];
m29_42 [cluster="CommandLine.Infrastructure.OptionMap.EnforceRules()", file="HelpOptionAttributeFixture.cs", label="Entry CommandLine.Infrastructure.OptionMap.EnforceRules()", span="162-162"];
m29_43 [cluster="CommandLine.Infrastructure.OptionMap.EnforceRules()", file="HelpOptionAttributeFixture.cs", label="return EnforceMutuallyExclusiveMap() && EnforceRequiredRule();", span="164-164"];
m29_44 [cluster="CommandLine.Infrastructure.OptionMap.EnforceRules()", file="HelpOptionAttributeFixture.cs", label="Exit CommandLine.Infrastructure.OptionMap.EnforceRules()", span="162-162"];
m29_99 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", file="HelpOptionAttributeFixture.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0"];
m29_28 [cluster="CommandLine.Infrastructure.OptionMap.Create(object, System.Collections.Generic.IList<CommandLine.Helpers.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.ParserSettings)", file="HelpOptionAttributeFixture.cs", label="Entry CommandLine.Infrastructure.OptionMap.Create(object, System.Collections.Generic.IList<CommandLine.Helpers.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.ParserSettings)", span="135-135"];
m29_29 [cluster="CommandLine.Infrastructure.OptionMap.Create(object, System.Collections.Generic.IList<CommandLine.Helpers.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.ParserSettings)", file="HelpOptionAttributeFixture.cs", label="var map = new OptionMap(verbs.Count, settings)", span="140-140"];
m29_30 [cluster="CommandLine.Infrastructure.OptionMap.Create(object, System.Collections.Generic.IList<CommandLine.Helpers.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.ParserSettings)", file="HelpOptionAttributeFixture.cs", label=verbs, span="142-142"];
m29_31 [cluster="CommandLine.Infrastructure.OptionMap.Create(object, System.Collections.Generic.IList<CommandLine.Helpers.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.ParserSettings)", file="HelpOptionAttributeFixture.cs", label="var optionInfo = new OptionInfo(verb.Right, verb.Left, settings.ParsingCulture)\r\n                {\r\n                    HasParameterLessCtor = verb.Left.PropertyType.GetConstructor(Type.EmptyTypes) != null\r\n                }", span="144-147"];
m29_32 [cluster="CommandLine.Infrastructure.OptionMap.Create(object, System.Collections.Generic.IList<CommandLine.Helpers.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.ParserSettings)", file="HelpOptionAttributeFixture.cs", label="!optionInfo.HasParameterLessCtor && verb.Left.GetValue(target, null) == null", span="149-149"];
m29_35 [cluster="CommandLine.Infrastructure.OptionMap.Create(object, System.Collections.Generic.IList<CommandLine.Helpers.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.ParserSettings)", file="HelpOptionAttributeFixture.cs", label="map.RawOptions = target", span="158-158"];
m29_34 [cluster="CommandLine.Infrastructure.OptionMap.Create(object, System.Collections.Generic.IList<CommandLine.Helpers.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.ParserSettings)", file="HelpOptionAttributeFixture.cs", label="map[verb.Right.UniqueName] = optionInfo", span="155-155"];
m29_36 [cluster="CommandLine.Infrastructure.OptionMap.Create(object, System.Collections.Generic.IList<CommandLine.Helpers.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.ParserSettings)", file="HelpOptionAttributeFixture.cs", label="return map;", span="159-159"];
m29_33 [cluster="CommandLine.Infrastructure.OptionMap.Create(object, System.Collections.Generic.IList<CommandLine.Helpers.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.ParserSettings)", file="HelpOptionAttributeFixture.cs", label="throw new ParserException(''Type {0} must have a parameterless constructor or'' +\r\n                        '' be already initialized to be used as a verb command.''.FormatInvariant(verb.Left.PropertyType));", span="151-152"];
m29_37 [cluster="CommandLine.Infrastructure.OptionMap.Create(object, System.Collections.Generic.IList<CommandLine.Helpers.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.ParserSettings)", file="HelpOptionAttributeFixture.cs", label="Exit CommandLine.Infrastructure.OptionMap.Create(object, System.Collections.Generic.IList<CommandLine.Helpers.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.ParserSettings)", span="135-135"];
m29_70 [cluster="System.Reflection.PropertyInfo.SetValue(object, object, object[])", file="HelpOptionAttributeFixture.cs", label="Entry System.Reflection.PropertyInfo.SetValue(object, object, object[])", span="0-0"];
m29_98 [cluster="CommandLine.Infrastructure.OptionMap.MutuallyExclusiveInfo.MutuallyExclusiveInfo(CommandLine.Infrastructure.OptionInfo)", file="HelpOptionAttributeFixture.cs", label="Entry CommandLine.Infrastructure.OptionMap.MutuallyExclusiveInfo.MutuallyExclusiveInfo(CommandLine.Infrastructure.OptionInfo)", span="277-277"];
m29_101 [cluster="CommandLine.Infrastructure.OptionMap.MutuallyExclusiveInfo.MutuallyExclusiveInfo(CommandLine.Infrastructure.OptionInfo)", file="HelpOptionAttributeFixture.cs", label="BadOption = option", span="279-279"];
m29_102 [cluster="CommandLine.Infrastructure.OptionMap.MutuallyExclusiveInfo.MutuallyExclusiveInfo(CommandLine.Infrastructure.OptionInfo)", file="HelpOptionAttributeFixture.cs", label="Exit CommandLine.Infrastructure.OptionMap.MutuallyExclusiveInfo.MutuallyExclusiveInfo(CommandLine.Infrastructure.OptionInfo)", span="277-277"];
m29_27 [cluster="CommandLine.Infrastructure.OptionInfo.OptionInfo(CommandLine.BaseOptionAttribute, System.Reflection.PropertyInfo, System.Globalization.CultureInfo)", file="HelpOptionAttributeFixture.cs", label="Entry CommandLine.Infrastructure.OptionInfo.OptionInfo(CommandLine.BaseOptionAttribute, System.Reflection.PropertyInfo, System.Globalization.CultureInfo)", span="48-48"];
m29_47 [cluster="CommandLine.Infrastructure.OptionMap.SetDefaults()", file="HelpOptionAttributeFixture.cs", label="Entry CommandLine.Infrastructure.OptionMap.SetDefaults()", span="167-167"];
m29_48 [cluster="CommandLine.Infrastructure.OptionMap.SetDefaults()", file="HelpOptionAttributeFixture.cs", label="_map.Values", span="169-169"];
m29_49 [cluster="CommandLine.Infrastructure.OptionMap.SetDefaults()", file="HelpOptionAttributeFixture.cs", label="option.SetDefault(RawOptions)", span="171-171"];
m29_50 [cluster="CommandLine.Infrastructure.OptionMap.SetDefaults()", file="HelpOptionAttributeFixture.cs", label="Exit CommandLine.Infrastructure.OptionMap.SetDefaults()", span="167-167"];
m29_97 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", file="HelpOptionAttributeFixture.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0"];
m29_40 [cluster="CommandLine.ParserException.ParserException(string)", file="HelpOptionAttributeFixture.cs", label="Entry CommandLine.ParserException.ParserException(string)", span="49-49"];
m29_72 [cluster="System.Collections.Generic.ICollection<T>.Add(T)", file="HelpOptionAttributeFixture.cs", label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0"];
m29_38 [cluster="System.Type.GetConstructor(System.Type[])", file="HelpOptionAttributeFixture.cs", label="Entry System.Type.GetConstructor(System.Type[])", span="0-0"];
m29_26 [cluster="string.ToLowerInvariant()", file="HelpOptionAttributeFixture.cs", label="Entry string.ToLowerInvariant()", span="0-0"];
m29_51 [cluster="CommandLine.Infrastructure.OptionInfo.SetDefault(object)", file="HelpOptionAttributeFixture.cs", label="Entry CommandLine.Infrastructure.OptionInfo.SetDefault(object)", span="206-206"];
m29_52 [cluster="CommandLine.Infrastructure.OptionMap.SetParserStateIfNeeded(object, CommandLine.Infrastructure.OptionInfo, bool?, bool?)", file="HelpOptionAttributeFixture.cs", label="Entry CommandLine.Infrastructure.OptionMap.SetParserStateIfNeeded(object, CommandLine.Infrastructure.OptionInfo, bool?, bool?)", span="175-175"];
m29_53 [cluster="CommandLine.Infrastructure.OptionMap.SetParserStateIfNeeded(object, CommandLine.Infrastructure.OptionInfo, bool?, bool?)", file="HelpOptionAttributeFixture.cs", label="var list = ReflectionUtil.RetrievePropertyList<ParserStateAttribute>(options)", span="177-177"];
m29_57 [cluster="CommandLine.Infrastructure.OptionMap.SetParserStateIfNeeded(object, CommandLine.Infrastructure.OptionInfo, bool?, bool?)", file="HelpOptionAttributeFixture.cs", label="property.GetValue(options, null) == null", span="186-186"];
m29_58 [cluster="CommandLine.Infrastructure.OptionMap.SetParserStateIfNeeded(object, CommandLine.Infrastructure.OptionInfo, bool?, bool?)", file="HelpOptionAttributeFixture.cs", label="property.SetValue(options, new CommandLine.ParserState(), null)", span="188-188"];
m29_59 [cluster="CommandLine.Infrastructure.OptionMap.SetParserStateIfNeeded(object, CommandLine.Infrastructure.OptionInfo, bool?, bool?)", file="HelpOptionAttributeFixture.cs", label="var parserState = (IParserState)property.GetValue(options, null)", span="191-191"];
m29_62 [cluster="CommandLine.Infrastructure.OptionMap.SetParserStateIfNeeded(object, CommandLine.Infrastructure.OptionInfo, bool?, bool?)", file="HelpOptionAttributeFixture.cs", label="var error = new ParsingError\r\n            {\r\n                BadOption =\r\n                {\r\n                    ShortName = option.ShortName,\r\n                    LongName = option.LongName\r\n                }\r\n            }", span="197-204"];
m29_63 [cluster="CommandLine.Infrastructure.OptionMap.SetParserStateIfNeeded(object, CommandLine.Infrastructure.OptionInfo, bool?, bool?)", file="HelpOptionAttributeFixture.cs", label="required != null", span="206-206"];
m29_64 [cluster="CommandLine.Infrastructure.OptionMap.SetParserStateIfNeeded(object, CommandLine.Infrastructure.OptionInfo, bool?, bool?)", file="HelpOptionAttributeFixture.cs", label="error.ViolatesRequired = required.Value", span="208-208"];
m29_65 [cluster="CommandLine.Infrastructure.OptionMap.SetParserStateIfNeeded(object, CommandLine.Infrastructure.OptionInfo, bool?, bool?)", file="HelpOptionAttributeFixture.cs", label="mutualExclusiveness != null", span="211-211"];
m29_66 [cluster="CommandLine.Infrastructure.OptionMap.SetParserStateIfNeeded(object, CommandLine.Infrastructure.OptionInfo, bool?, bool?)", file="HelpOptionAttributeFixture.cs", label="error.ViolatesMutualExclusiveness = mutualExclusiveness.Value", span="213-213"];
m29_54 [cluster="CommandLine.Infrastructure.OptionMap.SetParserStateIfNeeded(object, CommandLine.Infrastructure.OptionInfo, bool?, bool?)", file="HelpOptionAttributeFixture.cs", label="list.Count == 0", span="178-178"];
m29_56 [cluster="CommandLine.Infrastructure.OptionMap.SetParserStateIfNeeded(object, CommandLine.Infrastructure.OptionInfo, bool?, bool?)", file="HelpOptionAttributeFixture.cs", label="var property = list[0].Left", span="183-183"];
m29_55 [cluster="CommandLine.Infrastructure.OptionMap.SetParserStateIfNeeded(object, CommandLine.Infrastructure.OptionInfo, bool?, bool?)", file="HelpOptionAttributeFixture.cs", label="return;", span="180-180"];
m29_60 [cluster="CommandLine.Infrastructure.OptionMap.SetParserStateIfNeeded(object, CommandLine.Infrastructure.OptionInfo, bool?, bool?)", file="HelpOptionAttributeFixture.cs", label="parserState == null", span="192-192"];
m29_67 [cluster="CommandLine.Infrastructure.OptionMap.SetParserStateIfNeeded(object, CommandLine.Infrastructure.OptionInfo, bool?, bool?)", file="HelpOptionAttributeFixture.cs", label="parserState.Errors.Add(error)", span="216-216"];
m29_61 [cluster="CommandLine.Infrastructure.OptionMap.SetParserStateIfNeeded(object, CommandLine.Infrastructure.OptionInfo, bool?, bool?)", file="HelpOptionAttributeFixture.cs", label="return;", span="194-194"];
m29_68 [cluster="CommandLine.Infrastructure.OptionMap.SetParserStateIfNeeded(object, CommandLine.Infrastructure.OptionInfo, bool?, bool?)", file="HelpOptionAttributeFixture.cs", label="Exit CommandLine.Infrastructure.OptionMap.SetParserStateIfNeeded(object, CommandLine.Infrastructure.OptionInfo, bool?, bool?)", span="175-175"];
m29_69 [cluster="CommandLine.ParserState.ParserState()", file="HelpOptionAttributeFixture.cs", label="Entry CommandLine.ParserState.ParserState()", span="34-34"];
m29_45 [cluster="CommandLine.Infrastructure.OptionMap.EnforceMutuallyExclusiveMap()", file="HelpOptionAttributeFixture.cs", label="Entry CommandLine.Infrastructure.OptionMap.EnforceMutuallyExclusiveMap()", span="235-235"];
m29_80 [cluster="CommandLine.Infrastructure.OptionMap.EnforceMutuallyExclusiveMap()", file="HelpOptionAttributeFixture.cs", label="!_settings.MutuallyExclusive", span="237-237"];
m29_81 [cluster="CommandLine.Infrastructure.OptionMap.EnforceMutuallyExclusiveMap()", file="HelpOptionAttributeFixture.cs", label="return true;", span="239-239"];
m29_82 [cluster="CommandLine.Infrastructure.OptionMap.EnforceMutuallyExclusiveMap()", file="HelpOptionAttributeFixture.cs", label="_map.Values", span="242-242"];
m29_83 [cluster="CommandLine.Infrastructure.OptionMap.EnforceMutuallyExclusiveMap()", file="HelpOptionAttributeFixture.cs", label="option.IsDefined && option.MutuallyExclusiveSet != null", span="244-244"];
m29_85 [cluster="CommandLine.Infrastructure.OptionMap.EnforceMutuallyExclusiveMap()", file="HelpOptionAttributeFixture.cs", label="_mutuallyExclusiveSetMap.Values", span="250-250"];
m29_84 [cluster="CommandLine.Infrastructure.OptionMap.EnforceMutuallyExclusiveMap()", file="HelpOptionAttributeFixture.cs", label="BuildMutuallyExclusiveMap(option)", span="246-246"];
m29_86 [cluster="CommandLine.Infrastructure.OptionMap.EnforceMutuallyExclusiveMap()", file="HelpOptionAttributeFixture.cs", label="info.Occurrence > 1", span="252-252"];
m29_89 [cluster="CommandLine.Infrastructure.OptionMap.EnforceMutuallyExclusiveMap()", file="HelpOptionAttributeFixture.cs", label="return true;", span="259-259"];
m29_87 [cluster="CommandLine.Infrastructure.OptionMap.EnforceMutuallyExclusiveMap()", file="HelpOptionAttributeFixture.cs", label="SetParserStateIfNeeded(RawOptions, info.BadOption, null, true)", span="254-254"];
m29_88 [cluster="CommandLine.Infrastructure.OptionMap.EnforceMutuallyExclusiveMap()", file="HelpOptionAttributeFixture.cs", label="return false;", span="255-255"];
m29_90 [cluster="CommandLine.Infrastructure.OptionMap.EnforceMutuallyExclusiveMap()", file="HelpOptionAttributeFixture.cs", label="Exit CommandLine.Infrastructure.OptionMap.EnforceMutuallyExclusiveMap()", span="235-235"];
m29_91 [cluster="CommandLine.Infrastructure.OptionMap.BuildMutuallyExclusiveMap(CommandLine.Infrastructure.OptionInfo)", file="HelpOptionAttributeFixture.cs", label="Entry CommandLine.Infrastructure.OptionMap.BuildMutuallyExclusiveMap(CommandLine.Infrastructure.OptionInfo)", span="262-262"];
m29_92 [cluster="CommandLine.Infrastructure.OptionMap.BuildMutuallyExclusiveMap(CommandLine.Infrastructure.OptionInfo)", file="HelpOptionAttributeFixture.cs", label="var setName = option.MutuallyExclusiveSet", span="264-264"];
m29_94 [cluster="CommandLine.Infrastructure.OptionMap.BuildMutuallyExclusiveMap(CommandLine.Infrastructure.OptionInfo)", file="HelpOptionAttributeFixture.cs", label="_mutuallyExclusiveSetMap.Add(setName, new MutuallyExclusiveInfo(option))", span="267-267"];
m29_93 [cluster="CommandLine.Infrastructure.OptionMap.BuildMutuallyExclusiveMap(CommandLine.Infrastructure.OptionInfo)", file="HelpOptionAttributeFixture.cs", label="!_mutuallyExclusiveSetMap.ContainsKey(setName)", span="265-265"];
m29_95 [cluster="CommandLine.Infrastructure.OptionMap.BuildMutuallyExclusiveMap(CommandLine.Infrastructure.OptionInfo)", file="HelpOptionAttributeFixture.cs", label="_mutuallyExclusiveSetMap[setName].IncrementOccurrence()", span="270-270"];
m29_96 [cluster="CommandLine.Infrastructure.OptionMap.BuildMutuallyExclusiveMap(CommandLine.Infrastructure.OptionInfo)", file="HelpOptionAttributeFixture.cs", label="Exit CommandLine.Infrastructure.OptionMap.BuildMutuallyExclusiveMap(CommandLine.Infrastructure.OptionInfo)", span="262-262"];
m29_71 [cluster="CommandLine.ParsingError.ParsingError()", file="HelpOptionAttributeFixture.cs", label="Entry CommandLine.ParsingError.ParsingError()", span="31-31"];
m29_41 [cluster="string.FormatInvariant(params object[])", file="HelpOptionAttributeFixture.cs", label="Entry string.FormatInvariant(params object[])", span="46-46"];
m29_39 [cluster="System.Reflection.PropertyInfo.GetValue(object, object[])", file="HelpOptionAttributeFixture.cs", label="Entry System.Reflection.PropertyInfo.GetValue(object, object[])", span="0-0"];
m29_25 [cluster="CommandLine.Helpers.ReflectionUtil.RetrievePropertyList<TAttribute>(object)", file="HelpOptionAttributeFixture.cs", label="Entry CommandLine.Helpers.ReflectionUtil.RetrievePropertyList<TAttribute>(object)", span="46-46"];
m29_8 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(int, System.Collections.Generic.IEqualityComparer<TKey>)", file="HelpOptionAttributeFixture.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(int, System.Collections.Generic.IEqualityComparer<TKey>)", span="0-0"];
m29_105 [file="HelpOptionAttributeFixture.cs", label="CommandLine.Infrastructure.OptionMap", span=""];
m29_106 [file="HelpOptionAttributeFixture.cs", label="CommandLine.Infrastructure.OptionMap.MutuallyExclusiveInfo", span=""];
m31_12 [cluster="CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", file="HelpTextFixture.cs", label="Entry CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", span="87-87"];
m31_18 [cluster="CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", file="HelpTextFixture.cs", label="other == null", span="89-89"];
m31_21 [cluster="CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", file="HelpTextFixture.cs", label="Exit CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", span="87-87"];
m31_26 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="HelpTextFixture.cs", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="66-66"];
m31_37 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="HelpTextFixture.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m31_38 [cluster="CommandLine.ParserResult.MapErrors<T>(CommandLine.ParserResult<T>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.Error>, System.Collections.Generic.IEnumerable<CommandLine.Error>>)", file="HelpTextFixture.cs", label="Entry CommandLine.ParserResult.MapErrors<T>(CommandLine.ParserResult<T>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.Error>, System.Collections.Generic.IEnumerable<CommandLine.Error>>)", span="114-114"];
m31_39 [cluster="CommandLine.ParserResult.MapErrors<T>(CommandLine.ParserResult<T>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.Error>, System.Collections.Generic.IEnumerable<CommandLine.Error>>)", file="HelpTextFixture.cs", label="return new ParserResult<T>(parserResult.Tag, parserResult.Value, func(parserResult.Errors), parserResult.VerbTypes);", span="118-118"];
m31_40 [cluster="CommandLine.ParserResult.MapErrors<T>(CommandLine.ParserResult<T>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.Error>, System.Collections.Generic.IEnumerable<CommandLine.Error>>)", file="HelpTextFixture.cs", label="Exit CommandLine.ParserResult.MapErrors<T>(CommandLine.ParserResult<T>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.Error>, System.Collections.Generic.IEnumerable<CommandLine.Error>>)", span="114-114"];
m31_27 [cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>, CommandLine.Infrastructure.Maybe<System.Collections.Generic.IEnumerable<System.Type>>)", file="HelpTextFixture.cs", label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>, CommandLine.Infrastructure.Maybe<System.Collections.Generic.IEnumerable<System.Type>>)", span="105-105"];
m31_28 [cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>, CommandLine.Infrastructure.Maybe<System.Collections.Generic.IEnumerable<System.Type>>)", file="HelpTextFixture.cs", label="object.Equals(instance, default(T))", span="107-107"];
m31_34 [cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>, CommandLine.Infrastructure.Maybe<System.Collections.Generic.IEnumerable<System.Type>>)", file="HelpTextFixture.cs", label="return new ParserResult<T>(tag, instance, errors, verbTypes);", span="111-111"];
m31_29 [cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>, CommandLine.Infrastructure.Maybe<System.Collections.Generic.IEnumerable<System.Type>>)", file="HelpTextFixture.cs", label="throw new ArgumentNullException(''instance'');", span="107-107"];
m31_35 [cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>, CommandLine.Infrastructure.Maybe<System.Collections.Generic.IEnumerable<System.Type>>)", file="HelpTextFixture.cs", label="Exit CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>, CommandLine.Infrastructure.Maybe<System.Collections.Generic.IEnumerable<System.Type>>)", span="105-105"];
m31_0 [cluster="CommandLine.ParserResult<T>.ParserResult(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>, CommandLine.Infrastructure.Maybe<System.Collections.Generic.IEnumerable<System.Type>>)", file="HelpTextFixture.cs", label="Entry CommandLine.ParserResult<T>.ParserResult(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>, CommandLine.Infrastructure.Maybe<System.Collections.Generic.IEnumerable<System.Type>>)", span="23-23"];
m31_1 [cluster="CommandLine.ParserResult<T>.ParserResult(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>, CommandLine.Infrastructure.Maybe<System.Collections.Generic.IEnumerable<System.Type>>)", file="HelpTextFixture.cs", label="this.tag = tag", span="25-25"];
m31_2 [cluster="CommandLine.ParserResult<T>.ParserResult(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>, CommandLine.Infrastructure.Maybe<System.Collections.Generic.IEnumerable<System.Type>>)", file="HelpTextFixture.cs", label="this.value = value", span="26-26"];
m31_3 [cluster="CommandLine.ParserResult<T>.ParserResult(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>, CommandLine.Infrastructure.Maybe<System.Collections.Generic.IEnumerable<System.Type>>)", file="HelpTextFixture.cs", label="this.errors = errors", span="27-27"];
m31_4 [cluster="CommandLine.ParserResult<T>.ParserResult(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>, CommandLine.Infrastructure.Maybe<System.Collections.Generic.IEnumerable<System.Type>>)", file="HelpTextFixture.cs", label="this.verbTypes = verbTypes", span="28-28"];
m31_5 [cluster="CommandLine.ParserResult<T>.ParserResult(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>, CommandLine.Infrastructure.Maybe<System.Collections.Generic.IEnumerable<System.Type>>)", file="HelpTextFixture.cs", label="Exit CommandLine.ParserResult<T>.ParserResult(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>, CommandLine.Infrastructure.Maybe<System.Collections.Generic.IEnumerable<System.Type>>)", span="23-23"];
m31_13 [cluster="object.Equals(object)", file="HelpTextFixture.cs", label="Entry object.Equals(object)", span="0-0"];
m31_23 [cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="HelpTextFixture.cs", label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="100-100"];
m31_24 [cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="HelpTextFixture.cs", label="return ParserResult.Create(tag, instance, errors, Maybe.Nothing<IEnumerable<Type>>());", span="102-102"];
m31_25 [cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="HelpTextFixture.cs", label="Exit CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="100-100"];
m31_6 [cluster="CommandLine.ParserResult<T>.Equals(object)", file="HelpTextFixture.cs", label="Entry CommandLine.ParserResult<T>.Equals(object)", span="62-62"];
m31_7 [cluster="CommandLine.ParserResult<T>.Equals(object)", file="HelpTextFixture.cs", label="var other = obj as ParserResult<T>", span="64-64"];
m31_8 [cluster="CommandLine.ParserResult<T>.Equals(object)", file="HelpTextFixture.cs", label="other != null", span="65-65"];
m31_11 [cluster="CommandLine.ParserResult<T>.Equals(object)", file="HelpTextFixture.cs", label="Exit CommandLine.ParserResult<T>.Equals(object)", span="62-62"];
m31_22 [cluster="Unk.SequenceEqual", file="HelpTextFixture.cs", label="Entry Unk.SequenceEqual", span=""];
m31_36 [cluster="object.Equals(object, object)", file="HelpTextFixture.cs", label="Entry object.Equals(object, object)", span="0-0"];
m31_41 [cluster="System.Func<T, TResult>.Invoke(T)", file="HelpTextFixture.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m31_14 [cluster="CommandLine.ParserResult<T>.GetHashCode()", file="HelpTextFixture.cs", label="Entry CommandLine.ParserResult<T>.GetHashCode()", span="77-77"];
m31_16 [cluster="CommandLine.ParserResult<T>.GetHashCode()", file="HelpTextFixture.cs", label="Exit CommandLine.ParserResult<T>.GetHashCode()", span="77-77"];
m31_17 [cluster="object.GetHashCode()", file="HelpTextFixture.cs", label="Entry object.GetHashCode()", span="0-0"];
m31_42 [file="HelpTextFixture.cs", label="CommandLine.ParserResult<T>", span=""];
m34_23 [cluster="Humanizer.Tests.Bytes.ToStringTests.ReturnsKilobytes()", file="LongOptionParser.cs", label="Entry Humanizer.Tests.Bytes.ToStringTests.ReturnsKilobytes()", span="40-40"];
m34_24 [cluster="Humanizer.Tests.Bytes.ToStringTests.ReturnsKilobytes()", file="LongOptionParser.cs", label="Assert.Equal(''10 KB'', ByteSize.FromKilobytes(10).ToString(''##.#### KB''))", span="42-42"];
m34_25 [cluster="Humanizer.Tests.Bytes.ToStringTests.ReturnsKilobytes()", file="LongOptionParser.cs", label="Exit Humanizer.Tests.Bytes.ToStringTests.ReturnsKilobytes()", span="40-40"];
m34_15 [cluster="Humanizer.Tests.Bytes.ToStringTests.ReturnsBits()", file="LongOptionParser.cs", label="Entry Humanizer.Tests.Bytes.ToStringTests.ReturnsBits()", span="28-28"];
m34_16 [cluster="Humanizer.Tests.Bytes.ToStringTests.ReturnsBits()", file="LongOptionParser.cs", label="Assert.Equal(''10 b'', ByteSize.FromBits(10).ToString(''##.#### b''))", span="30-30"];
m34_17 [cluster="Humanizer.Tests.Bytes.ToStringTests.ReturnsBits()", file="LongOptionParser.cs", label="Exit Humanizer.Tests.Bytes.ToStringTests.ReturnsBits()", span="28-28"];
m34_2 [cluster="Humanizer.Tests.Bytes.ToStringTests.ReturnsLargestMetricSuffix()", file="LongOptionParser.cs", label="Entry Humanizer.Tests.Bytes.ToStringTests.ReturnsLargestMetricSuffix()", span="10-10"];
m34_3 [cluster="Humanizer.Tests.Bytes.ToStringTests.ReturnsLargestMetricSuffix()", file="LongOptionParser.cs", label="Assert.Equal(''10.5 KB'', ByteSize.FromKilobytes(10.5).ToString())", span="12-12"];
m34_4 [cluster="Humanizer.Tests.Bytes.ToStringTests.ReturnsLargestMetricSuffix()", file="LongOptionParser.cs", label="Exit Humanizer.Tests.Bytes.ToStringTests.ReturnsLargestMetricSuffix()", span="10-10"];
m34_7 [cluster="Unk.Equal", file="LongOptionParser.cs", label="Entry Unk.Equal", span=""];
m34_44 [cluster="Humanizer.Tests.Bytes.ToStringTests.ReturnsLargestMetricPrefixLargerThanZeroForNegativeValues()", file="LongOptionParser.cs", label="Entry Humanizer.Tests.Bytes.ToStringTests.ReturnsLargestMetricPrefixLargerThanZeroForNegativeValues()", span="76-76"];
m34_45 [cluster="Humanizer.Tests.Bytes.ToStringTests.ReturnsLargestMetricPrefixLargerThanZeroForNegativeValues()", file="LongOptionParser.cs", label="Assert.Equal(''-512 KB'', ByteSize.FromMegabytes(-.5).ToString(''#.#''))", span="78-78"];
m34_46 [cluster="Humanizer.Tests.Bytes.ToStringTests.ReturnsLargestMetricPrefixLargerThanZeroForNegativeValues()", file="LongOptionParser.cs", label="Exit Humanizer.Tests.Bytes.ToStringTests.ReturnsLargestMetricPrefixLargerThanZeroForNegativeValues()", span="76-76"];
m34_0 [cluster="Humanizer.Tests.Bytes.ToStringTests.ToStringTests()", file="LongOptionParser.cs", label="Entry Humanizer.Tests.Bytes.ToStringTests.ToStringTests()", span="7-7"];
m34_1 [cluster="Humanizer.Tests.Bytes.ToStringTests.ToStringTests()", file="LongOptionParser.cs", label="Exit Humanizer.Tests.Bytes.ToStringTests.ToStringTests()", span="7-7"];
m34_29 [cluster="Humanizer.Bytes.ByteSize.FromMegabytes(double)", file="LongOptionParser.cs", label="Entry Humanizer.Bytes.ByteSize.FromMegabytes(double)", span="108-108"];
m34_26 [cluster="Humanizer.Tests.Bytes.ToStringTests.ReturnsMegabytes()", file="LongOptionParser.cs", label="Entry Humanizer.Tests.Bytes.ToStringTests.ReturnsMegabytes()", span="46-46"];
m34_27 [cluster="Humanizer.Tests.Bytes.ToStringTests.ReturnsMegabytes()", file="LongOptionParser.cs", label="Assert.Equal(''10 MB'', ByteSize.FromMegabytes(10).ToString(''##.#### MB''))", span="48-48"];
m34_28 [cluster="Humanizer.Tests.Bytes.ToStringTests.ReturnsMegabytes()", file="LongOptionParser.cs", label="Exit Humanizer.Tests.Bytes.ToStringTests.ReturnsMegabytes()", span="46-46"];
m34_5 [cluster="Humanizer.Bytes.ByteSize.FromKilobytes(double)", file="LongOptionParser.cs", label="Entry Humanizer.Bytes.ByteSize.FromKilobytes(double)", span="103-103"];
m34_30 [cluster="Humanizer.Tests.Bytes.ToStringTests.ReturnsGigabytes()", file="LongOptionParser.cs", label="Entry Humanizer.Tests.Bytes.ToStringTests.ReturnsGigabytes()", span="52-52"];
m34_31 [cluster="Humanizer.Tests.Bytes.ToStringTests.ReturnsGigabytes()", file="LongOptionParser.cs", label="Assert.Equal(''10 GB'', ByteSize.FromGigabytes(10).ToString(''##.#### GB''))", span="54-54"];
m34_32 [cluster="Humanizer.Tests.Bytes.ToStringTests.ReturnsGigabytes()", file="LongOptionParser.cs", label="Exit Humanizer.Tests.Bytes.ToStringTests.ReturnsGigabytes()", span="52-52"];
m34_34 [cluster="Humanizer.Tests.Bytes.ToStringTests.ReturnsTerabytes()", file="LongOptionParser.cs", label="Entry Humanizer.Tests.Bytes.ToStringTests.ReturnsTerabytes()", span="58-58"];
m34_35 [cluster="Humanizer.Tests.Bytes.ToStringTests.ReturnsTerabytes()", file="LongOptionParser.cs", label="Assert.Equal(''10 TB'', ByteSize.FromTerabytes(10).ToString(''##.#### TB''))", span="60-60"];
m34_36 [cluster="Humanizer.Tests.Bytes.ToStringTests.ReturnsTerabytes()", file="LongOptionParser.cs", label="Exit Humanizer.Tests.Bytes.ToStringTests.ReturnsTerabytes()", span="58-58"];
m34_12 [cluster="Humanizer.Tests.Bytes.ToStringTests.ReturnsProvidedNumberFormat()", file="LongOptionParser.cs", label="Entry Humanizer.Tests.Bytes.ToStringTests.ReturnsProvidedNumberFormat()", span="22-22"];
m34_13 [cluster="Humanizer.Tests.Bytes.ToStringTests.ReturnsProvidedNumberFormat()", file="LongOptionParser.cs", label="Assert.Equal(''10.1234 KB'', ByteSize.FromKilobytes(10.1234).ToString(''#.#### KB''))", span="24-24"];
m34_14 [cluster="Humanizer.Tests.Bytes.ToStringTests.ReturnsProvidedNumberFormat()", file="LongOptionParser.cs", label="Exit Humanizer.Tests.Bytes.ToStringTests.ReturnsProvidedNumberFormat()", span="22-22"];
m34_41 [cluster="Humanizer.Tests.Bytes.ToStringTests.ReturnsLargestMetricPrefixLargerThanZero()", file="LongOptionParser.cs", label="Entry Humanizer.Tests.Bytes.ToStringTests.ReturnsLargestMetricPrefixLargerThanZero()", span="70-70"];
m34_42 [cluster="Humanizer.Tests.Bytes.ToStringTests.ReturnsLargestMetricPrefixLargerThanZero()", file="LongOptionParser.cs", label="Assert.Equal(''512 KB'', ByteSize.FromMegabytes(.5).ToString(''#.#''))", span="72-72"];
m34_43 [cluster="Humanizer.Tests.Bytes.ToStringTests.ReturnsLargestMetricPrefixLargerThanZero()", file="LongOptionParser.cs", label="Exit Humanizer.Tests.Bytes.ToStringTests.ReturnsLargestMetricPrefixLargerThanZero()", span="70-70"];
m34_33 [cluster="Humanizer.Bytes.ByteSize.FromGigabytes(double)", file="LongOptionParser.cs", label="Entry Humanizer.Bytes.ByteSize.FromGigabytes(double)", span="113-113"];
m34_19 [cluster="Humanizer.Tests.Bytes.ToStringTests.ReturnsBytes()", file="LongOptionParser.cs", label="Entry Humanizer.Tests.Bytes.ToStringTests.ReturnsBytes()", span="34-34"];
m34_20 [cluster="Humanizer.Tests.Bytes.ToStringTests.ReturnsBytes()", file="LongOptionParser.cs", label="Assert.Equal(''10 B'', ByteSize.FromBytes(10).ToString(''##.#### B''))", span="36-36"];
m34_21 [cluster="Humanizer.Tests.Bytes.ToStringTests.ReturnsBytes()", file="LongOptionParser.cs", label="Exit Humanizer.Tests.Bytes.ToStringTests.ReturnsBytes()", span="34-34"];
m34_11 [cluster="Humanizer.Bytes.ByteSize.ToString(string)", file="LongOptionParser.cs", label="Entry Humanizer.Bytes.ByteSize.ToString(string)", span="134-134"];
m34_8 [cluster="Humanizer.Tests.Bytes.ToStringTests.ReturnsDefaultNumberFormat()", file="LongOptionParser.cs", label="Entry Humanizer.Tests.Bytes.ToStringTests.ReturnsDefaultNumberFormat()", span="16-16"];
m34_9 [cluster="Humanizer.Tests.Bytes.ToStringTests.ReturnsDefaultNumberFormat()", file="LongOptionParser.cs", label="Assert.Equal(''10.5 KB'', ByteSize.FromKilobytes(10.5).ToString(''KB''))", span="18-18"];
m34_10 [cluster="Humanizer.Tests.Bytes.ToStringTests.ReturnsDefaultNumberFormat()", file="LongOptionParser.cs", label="Exit Humanizer.Tests.Bytes.ToStringTests.ReturnsDefaultNumberFormat()", span="16-16"];
m34_18 [cluster="Humanizer.Bytes.ByteSize.FromBits(long)", file="LongOptionParser.cs", label="Entry Humanizer.Bytes.ByteSize.FromBits(long)", span="93-93"];
m34_37 [cluster="Humanizer.Bytes.ByteSize.FromTerabytes(double)", file="LongOptionParser.cs", label="Entry Humanizer.Bytes.ByteSize.FromTerabytes(double)", span="118-118"];
m34_22 [cluster="Humanizer.Bytes.ByteSize.FromBytes(double)", file="LongOptionParser.cs", label="Entry Humanizer.Bytes.ByteSize.FromBytes(double)", span="98-98"];
m34_38 [cluster="Humanizer.Tests.Bytes.ToStringTests.ReturnsSelectedFormat()", file="LongOptionParser.cs", label="Entry Humanizer.Tests.Bytes.ToStringTests.ReturnsSelectedFormat()", span="64-64"];
m34_39 [cluster="Humanizer.Tests.Bytes.ToStringTests.ReturnsSelectedFormat()", file="LongOptionParser.cs", label="Assert.Equal(''10.0 TB'', ByteSize.FromTerabytes(10).ToString(''0.0 TB''))", span="66-66"];
m34_40 [cluster="Humanizer.Tests.Bytes.ToStringTests.ReturnsSelectedFormat()", file="LongOptionParser.cs", label="Exit Humanizer.Tests.Bytes.ToStringTests.ReturnsSelectedFormat()", span="64-64"];
m34_6 [cluster="Humanizer.Bytes.ByteSize.ToString()", file="LongOptionParser.cs", label="Entry Humanizer.Bytes.ByteSize.ToString()", span="129-129"];
m37_8 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="MutuallyExclusiveParsingFixture.cs", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63"];
m37_6 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="MutuallyExclusiveParsingFixture.cs", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68"];
m37_7 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType, string, string, System.Collections.Generic.IEnumerable<string>)", file="MutuallyExclusiveParsingFixture.cs", label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType, string, string, System.Collections.Generic.IEnumerable<string>)", span="18-18"];
m37_0 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="MutuallyExclusiveParsingFixture.cs", label="Entry CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", span="14-14"];
m37_1 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="MutuallyExclusiveParsingFixture.cs", label="var expected = Maybe.Just(''.'')", span="17-17"];
m37_2 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="MutuallyExclusiveParsingFixture.cs", label="var specs = new[] { new OptionSpecification(string.Empty, ''string-seq'',\r\n                false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), '.', null, typeof(IEnumerable<string>), TargetType.Sequence, string.Empty, string.Empty, new List<string>())}", span="18-19"];
m37_4 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="MutuallyExclusiveParsingFixture.cs", label="expected.ShouldBeEquivalentTo(result)", span="25-25"];
m37_3 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="MutuallyExclusiveParsingFixture.cs", label="var result = NameLookup.HavingSeparator(''string-seq'', specs, StringComparer.InvariantCulture)", span="22-22"];
m37_5 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="MutuallyExclusiveParsingFixture.cs", label="Exit CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", span="14-14"];
m37_10 [cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="MutuallyExclusiveParsingFixture.cs", label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16"];
m37_11 [cluster="Unk.ShouldBeEquivalentTo", file="MutuallyExclusiveParsingFixture.cs", label="Entry Unk.ShouldBeEquivalentTo", span=""];
m37_9 [cluster="System.Collections.Generic.List<T>.List()", file="MutuallyExclusiveParsingFixture.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m39_24 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableIntegerOptionFails()", file="NullableTypesParsingFixture.cs", label="Entry CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableIntegerOptionFails()", span="71-71"];
m39_25 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableIntegerOptionFails()", file="NullableTypesParsingFixture.cs", label="var options = new NullableTypesOptions()", span="73-73"];
m39_26 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableIntegerOptionFails()", file="NullableTypesParsingFixture.cs", label="Result = base.Parser.ParseArguments(new string[] { ''-int'' }, options)", span="74-74"];
m39_27 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableIntegerOptionFails()", file="NullableTypesParsingFixture.cs", label="ResultShouldBeFalse()", span="76-76"];
m39_28 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableIntegerOptionFails()", file="NullableTypesParsingFixture.cs", label="Exit CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableIntegerOptionFails()", span="71-71"];
m39_13 [cluster="CommandLine.ICommandLineParser.ParseArguments(string[], object)", file="NullableTypesParsingFixture.cs", label="Entry CommandLine.ICommandLineParser.ParseArguments(string[], object)", span="1471-1471"];
m39_23 [cluster="CommandLine.Tests.CommandLineParserBaseFixture.ResultShouldBeFalse()", file="NullableTypesParsingFixture.cs", label="Entry CommandLine.Tests.CommandLineParserBaseFixture.ResultShouldBeFalse()", span="64-64"];
m39_29 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableEnumerationOption()", file="NullableTypesParsingFixture.cs", label="Entry CommandLine.Tests.NullableTypesParsingFixture.ParseNullableEnumerationOption()", span="80-80"];
m39_30 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableEnumerationOption()", file="NullableTypesParsingFixture.cs", label="var options = new NullableTypesOptions()", span="82-82"];
m39_31 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableEnumerationOption()", file="NullableTypesParsingFixture.cs", label="Result = base.Parser.ParseArguments(new string[] { ''--enum=ReadWrite'' }, options)", span="83-83"];
m39_33 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableEnumerationOption()", file="NullableTypesParsingFixture.cs", label="options.EnumValue.Should().Equal(FileAccess.ReadWrite)", span="86-86"];
m39_32 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableEnumerationOption()", file="NullableTypesParsingFixture.cs", label="ResultShouldBeTrue()", span="85-85"];
m39_34 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableEnumerationOption()", file="NullableTypesParsingFixture.cs", label="options = new NullableTypesOptions()", span="88-88"];
m39_35 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableEnumerationOption()", file="NullableTypesParsingFixture.cs", label="Result = base.Parser.ParseArguments(new string[] { }, options)", span="89-89"];
m39_37 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableEnumerationOption()", file="NullableTypesParsingFixture.cs", label="options.EnumValue.Should().Be.Null()", span="92-92"];
m39_36 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableEnumerationOption()", file="NullableTypesParsingFixture.cs", label="ResultShouldBeTrue()", span="91-91"];
m39_38 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableEnumerationOption()", file="NullableTypesParsingFixture.cs", label="Exit CommandLine.Tests.NullableTypesParsingFixture.ParseNullableEnumerationOption()", span="80-80"];
m39_39 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableEnumerationOptionFails()", file="NullableTypesParsingFixture.cs", label="Entry CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableEnumerationOptionFails()", span="96-96"];
m39_40 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableEnumerationOptionFails()", file="NullableTypesParsingFixture.cs", label="var options = new NullableTypesOptions()", span="98-98"];
m39_41 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableEnumerationOptionFails()", file="NullableTypesParsingFixture.cs", label="Result = base.Parser.ParseArguments(new string[] { ''-e'', ''Overwrite'' }, options)", span="99-99"];
m39_42 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableEnumerationOptionFails()", file="NullableTypesParsingFixture.cs", label="ResultShouldBeFalse()", span="101-101"];
m39_43 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableEnumerationOptionFails()", file="NullableTypesParsingFixture.cs", label="Exit CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableEnumerationOptionFails()", span="96-96"];
m39_49 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableDoubleOption()", file="NullableTypesParsingFixture.cs", label="Entry CommandLine.Tests.NullableTypesParsingFixture.ParseNullableDoubleOption()", span="114-114"];
m39_50 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableDoubleOption()", file="NullableTypesParsingFixture.cs", label="var options = new NullableTypesOptions()", span="116-116"];
m39_51 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableDoubleOption()", file="NullableTypesParsingFixture.cs", label="Result = base.Parser.ParseArguments(new string[] { ''-d9.999'' }, options)", span="117-117"];
m39_53 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableDoubleOption()", file="NullableTypesParsingFixture.cs", label="options.DoubleValue.Should().Equal(9.999)", span="120-120"];
m39_52 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableDoubleOption()", file="NullableTypesParsingFixture.cs", label="ResultShouldBeTrue()", span="119-119"];
m39_54 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableDoubleOption()", file="NullableTypesParsingFixture.cs", label="options = new NullableTypesOptions()", span="122-122"];
m39_55 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableDoubleOption()", file="NullableTypesParsingFixture.cs", label="Result = base.Parser.ParseArguments(new string[] { }, options)", span="123-123"];
m39_57 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableDoubleOption()", file="NullableTypesParsingFixture.cs", label="options.DoubleValue.Should().Be.Null()", span="126-126"];
m39_56 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableDoubleOption()", file="NullableTypesParsingFixture.cs", label="ResultShouldBeTrue()", span="125-125"];
m39_58 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableDoubleOption()", file="NullableTypesParsingFixture.cs", label="Exit CommandLine.Tests.NullableTypesParsingFixture.ParseNullableDoubleOption()", span="114-114"];
m39_64 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableDoubleOptionFails()", file="NullableTypesParsingFixture.cs", label="Entry CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableDoubleOptionFails()", span="139-139"];
m39_65 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableDoubleOptionFails()", file="NullableTypesParsingFixture.cs", label="var options = new NullableTypesOptions()", span="141-141"];
m39_66 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableDoubleOptionFails()", file="NullableTypesParsingFixture.cs", label="Result = base.Parser.ParseArguments(new string[] { ''-d'' }, options)", span="142-142"];
m39_67 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableDoubleOptionFails()", file="NullableTypesParsingFixture.cs", label="ResultShouldBeFalse()", span="144-144"];
m39_68 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableDoubleOptionFails()", file="NullableTypesParsingFixture.cs", label="Exit CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableDoubleOptionFails()", span="139-139"];
m39_2 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableIntegerOption()", file="NullableTypesParsingFixture.cs", label="Entry CommandLine.Tests.NullableTypesParsingFixture.ParseNullableIntegerOption()", span="46-46"];
m39_3 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableIntegerOption()", file="NullableTypesParsingFixture.cs", label="var options = new NullableTypesOptions()", span="48-48"];
m39_4 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableIntegerOption()", file="NullableTypesParsingFixture.cs", label="Result = base.Parser.ParseArguments(new string[] { ''-i'', ''99'' }, options)", span="49-49"];
m39_6 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableIntegerOption()", file="NullableTypesParsingFixture.cs", label="options.IntegerValue.Should().Equal(99)", span="52-52"];
m39_5 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableIntegerOption()", file="NullableTypesParsingFixture.cs", label="ResultShouldBeTrue()", span="51-51"];
m39_7 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableIntegerOption()", file="NullableTypesParsingFixture.cs", label="options = new NullableTypesOptions()", span="54-54"];
m39_8 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableIntegerOption()", file="NullableTypesParsingFixture.cs", label="Result = base.Parser.ParseArguments(new string[] { }, options)", span="55-55"];
m39_10 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableIntegerOption()", file="NullableTypesParsingFixture.cs", label="options.IntegerValue.Should().Be.Null()", span="58-58"];
m39_9 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableIntegerOption()", file="NullableTypesParsingFixture.cs", label="ResultShouldBeTrue()", span="57-57"];
m39_11 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableIntegerOption()", file="NullableTypesParsingFixture.cs", label="Exit CommandLine.Tests.NullableTypesParsingFixture.ParseNullableIntegerOption()", span="46-46"];
m39_12 [cluster="CommandLine.Tests.Mocks.NullableTypesOptions.NullableTypesOptions()", file="NullableTypesParsingFixture.cs", label="Entry CommandLine.Tests.Mocks.NullableTypesOptions.NullableTypesOptions()", span="35-35"];
m39_18 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableIntegerOptionFails()", file="NullableTypesParsingFixture.cs", label="Entry CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableIntegerOptionFails()", span="62-62"];
m39_19 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableIntegerOptionFails()", file="NullableTypesParsingFixture.cs", label="var options = new NullableTypesOptions()", span="64-64"];
m39_20 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableIntegerOptionFails()", file="NullableTypesParsingFixture.cs", label="Result = base.Parser.ParseArguments(new string[] { ''-i'', ''string-value'' }, options)", span="65-65"];
m39_21 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableIntegerOptionFails()", file="NullableTypesParsingFixture.cs", label="ResultShouldBeFalse()", span="67-67"];
m39_22 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableIntegerOptionFails()", file="NullableTypesParsingFixture.cs", label="Exit CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableIntegerOptionFails()", span="62-62"];
m39_0 [cluster="CommandLine.Tests.NullableTypesParsingFixture.NullableTypesParsingFixture()", file="NullableTypesParsingFixture.cs", label="Entry CommandLine.Tests.NullableTypesParsingFixture.NullableTypesParsingFixture()", span="41-41"];
m39_1 [cluster="CommandLine.Tests.NullableTypesParsingFixture.NullableTypesParsingFixture()", file="NullableTypesParsingFixture.cs", label="Exit CommandLine.Tests.NullableTypesParsingFixture.NullableTypesParsingFixture()", span="41-41"];
m39_44 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableEnumerationOptionFails()", file="NullableTypesParsingFixture.cs", label="Entry CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableEnumerationOptionFails()", span="105-105"];
m39_45 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableEnumerationOptionFails()", file="NullableTypesParsingFixture.cs", label="var options = new NullableTypesOptions()", span="107-107"];
m39_46 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableEnumerationOptionFails()", file="NullableTypesParsingFixture.cs", label="Result = base.Parser.ParseArguments(new string[] { ''--enum'' }, options)", span="108-108"];
m39_47 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableEnumerationOptionFails()", file="NullableTypesParsingFixture.cs", label="ResultShouldBeFalse()", span="110-110"];
m39_48 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableEnumerationOptionFails()", file="NullableTypesParsingFixture.cs", label="Exit CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableEnumerationOptionFails()", span="105-105"];
m39_17 [cluster="Unk.Null", file="NullableTypesParsingFixture.cs", label="Entry Unk.Null", span=""];
m39_16 [cluster="Unk.Equal", file="NullableTypesParsingFixture.cs", label="Entry Unk.Equal", span=""];
m39_15 [cluster="Unk.Should", file="NullableTypesParsingFixture.cs", label="Entry Unk.Should", span=""];
m39_69 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseStringOptionAndNullableValueTypes()", file="NullableTypesParsingFixture.cs", label="Entry CommandLine.Tests.NullableTypesParsingFixture.ParseStringOptionAndNullableValueTypes()", span="148-148"];
m39_70 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseStringOptionAndNullableValueTypes()", file="NullableTypesParsingFixture.cs", label="var options = new NullableTypesOptions()", span="150-150"];
m39_71 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseStringOptionAndNullableValueTypes()", file="NullableTypesParsingFixture.cs", label="Result = base.Parser.ParseArguments(new string[] { ''--string'', ''alone'' }, options)", span="151-151"];
m39_73 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseStringOptionAndNullableValueTypes()", file="NullableTypesParsingFixture.cs", label="options.StringValue.Should().Equal(''alone'')", span="154-154"];
m39_72 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseStringOptionAndNullableValueTypes()", file="NullableTypesParsingFixture.cs", label="ResultShouldBeTrue()", span="153-153"];
m39_74 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseStringOptionAndNullableValueTypes()", file="NullableTypesParsingFixture.cs", label="options = new NullableTypesOptions()", span="156-156"];
m39_75 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseStringOptionAndNullableValueTypes()", file="NullableTypesParsingFixture.cs", label="Result = base.Parser.ParseArguments(\r\n                new string[] { ''-d1.789'', ''--int'', ''10099'', ''-stogether'', ''--enum'', ''Read'' }, options)", span="157-158"];
m39_77 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseStringOptionAndNullableValueTypes()", file="NullableTypesParsingFixture.cs", label="options.DoubleValue.Should().Equal(1.789D)", span="161-161"];
m39_78 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseStringOptionAndNullableValueTypes()", file="NullableTypesParsingFixture.cs", label="options.IntegerValue.Should().Equal(10099)", span="162-162"];
m39_79 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseStringOptionAndNullableValueTypes()", file="NullableTypesParsingFixture.cs", label="options.StringValue.Should().Equal(''together'')", span="163-163"];
m39_80 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseStringOptionAndNullableValueTypes()", file="NullableTypesParsingFixture.cs", label="options.EnumValue.Should().Equal(FileAccess.Read)", span="164-164"];
m39_76 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseStringOptionAndNullableValueTypes()", file="NullableTypesParsingFixture.cs", label="ResultShouldBeTrue()", span="160-160"];
m39_81 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseStringOptionAndNullableValueTypes()", file="NullableTypesParsingFixture.cs", label="Exit CommandLine.Tests.NullableTypesParsingFixture.ParseStringOptionAndNullableValueTypes()", span="148-148"];
m39_59 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableDoubleOptionFails()", file="NullableTypesParsingFixture.cs", label="Entry CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableDoubleOptionFails()", span="130-130"];
m39_60 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableDoubleOptionFails()", file="NullableTypesParsingFixture.cs", label="var options = new NullableTypesOptions()", span="132-132"];
m39_61 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableDoubleOptionFails()", file="NullableTypesParsingFixture.cs", label="Result = base.Parser.ParseArguments(new string[] { ''--double'', ''9,999'' }, options)", span="133-133"];
m39_62 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableDoubleOptionFails()", file="NullableTypesParsingFixture.cs", label="ResultShouldBeFalse()", span="135-135"];
m39_63 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableDoubleOptionFails()", file="NullableTypesParsingFixture.cs", label="Exit CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableDoubleOptionFails()", span="130-130"];
m39_14 [cluster="CommandLine.Tests.CommandLineParserBaseFixture.ResultShouldBeTrue()", file="NullableTypesParsingFixture.cs", label="Entry CommandLine.Tests.CommandLineParserBaseFixture.ResultShouldBeTrue()", span="58-58"];
m39_82 [file="NullableTypesParsingFixture.cs", label="CommandLine.Tests.NullableTypesParsingFixture", span=""];
m46_5 [cluster="Humanizer.Localisation.GrammaticalNumber.RussianGrammaticalNumberDetector.Detect(int)", file="OptionListAttribute.cs", label="Entry Humanizer.Localisation.GrammaticalNumber.RussianGrammaticalNumberDetector.Detect(int)", span="4-4"];
m46_0 [cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", file="OptionListAttribute.cs", label="Entry Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", span="8-8"];
m46_1 [cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", file="OptionListAttribute.cs", label="var grammaticalNumber = RussianGrammaticalNumberDetector.Detect(number)", span="10-10"];
m46_3 [cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", file="OptionListAttribute.cs", label="return resourceKey + suffix;", span="12-12"];
m46_2 [cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", file="OptionListAttribute.cs", label="var suffix = _map[(int) grammaticalNumber]", span="11-11"];
m46_4 [cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", file="OptionListAttribute.cs", label="Exit Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", span="8-8"];
m46_6 [file="OptionListAttribute.cs", label="Humanizer.Localisation.Formatters.RussianFormatter", span=""];
m47_6 [cluster="Unk.Equal", file="OptionMap.cs", label="Entry Unk.Equal", span=""];
m47_5 [cluster="string.Ordinalize()", file="OptionMap.cs", label="Entry string.Ordinalize()", span="26-26"];
m47_2 [cluster="Humanizer.Tests.Localisation.de.OrdinalizeTests.OrdinalizeString(string, string)", file="OptionMap.cs", label="Entry Humanizer.Tests.Localisation.de.OrdinalizeTests.OrdinalizeString(string, string)", span="23-23"];
m47_3 [cluster="Humanizer.Tests.Localisation.de.OrdinalizeTests.OrdinalizeString(string, string)", color=green, community=0, file="OptionMap.cs", label="Assert.Equal(number.Ordinalize(), ordinalized)", prediction=29, span="25-25"];
m47_4 [cluster="Humanizer.Tests.Localisation.de.OrdinalizeTests.OrdinalizeString(string, string)", file="OptionMap.cs", label="Exit Humanizer.Tests.Localisation.de.OrdinalizeTests.OrdinalizeString(string, string)", span="23-23"];
m48_22 [cluster="System.Collections.Generic.IEnumerable<TSource>.IndexOf<TSource>(System.Func<TSource, bool>)", file="OptionMapFixture.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.IndexOf<TSource>(System.Func<TSource, bool>)", span="10-10"];
m48_24 [cluster="System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", file="OptionMapFixture.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", span="0-0"];
m48_0 [cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="OptionMapFixture.cs", label="Entry CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12"];
m48_1 [cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="OptionMapFixture.cs", label="return from tseq in tokens.Pairwise(\r\n                (f, s) =>\r\n                        f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).MapMaybe(info =>\r\n                                   info.TargetType == TargetType.Sequence\r\n                                        ? new[] { f }.Concat(tokens.OfSequence(f, info))\r\n                                        : new Token[] { }, new Token[] { })\r\n                            : new Token[] { })\r\n                   from t in tseq\r\n                   select t;", span="16-25"];
m48_2 [cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="OptionMapFixture.cs", label="Exit CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12"];
m48_35 [cluster="Unk.Take", file="OptionMapFixture.cs", label="Entry Unk.Take", span=""];
m48_15 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="OptionMapFixture.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
m48_28 [cluster="object.Equals(object)", file="OptionMapFixture.cs", label="Entry object.Equals(object)", span="0-0"];
m48_36 [cluster="lambda expression", file="OptionMapFixture.cs", label="Entry lambda expression", span="36-36"];
m48_5 [cluster="lambda expression", file="OptionMapFixture.cs", label="f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).MapMaybe(info =>\r\n                                   info.TargetType == TargetType.Sequence\r\n                                        ? new[] { f }.Concat(tokens.OfSequence(f, info))\r\n                                        : new Token[] { }, new Token[] { })\r\n                            : new Token[] { }", span="18-23"];
m48_12 [cluster="lambda expression", file="OptionMapFixture.cs", label="info.TargetType == TargetType.Sequence\r\n                                        ? new[] { f }.Concat(tokens.OfSequence(f, info))\r\n                                        : new Token[] { }", span="20-22"];
m48_4 [cluster="lambda expression", file="OptionMapFixture.cs", label="Entry lambda expression", span="17-23"];
m48_6 [cluster="lambda expression", file="OptionMapFixture.cs", label="Exit lambda expression", span="17-23"];
m48_11 [cluster="lambda expression", file="OptionMapFixture.cs", label="Entry lambda expression", span="19-22"];
m48_13 [cluster="lambda expression", file="OptionMapFixture.cs", label="Exit lambda expression", span="19-22"];
m48_26 [cluster="lambda expression", file="OptionMapFixture.cs", label="t.Equals(nameToken)", span="30-30"];
m48_30 [cluster="lambda expression", file="OptionMapFixture.cs", label="info.MaxItems.MapMaybe(\r\n                            n => tokens.Skip(nameIndex + 1).Take(n),\r\n                                 tokens.Skip(nameIndex + 1).TakeWhile(v => v.IsValue()))", span="34-36"];
m48_33 [cluster="lambda expression", file="OptionMapFixture.cs", label="tokens.Skip(nameIndex + 1).Take(n)", span="35-35"];
m48_25 [cluster="lambda expression", file="OptionMapFixture.cs", label="Entry lambda expression", span="30-30"];
m48_29 [cluster="lambda expression", file="OptionMapFixture.cs", label="Entry lambda expression", span="34-36"];
m48_39 [cluster="lambda expression", file="OptionMapFixture.cs", label="Entry lambda expression", span="37-37"];
m48_27 [cluster="lambda expression", file="OptionMapFixture.cs", label="Exit lambda expression", span="30-30"];
m48_31 [cluster="lambda expression", file="OptionMapFixture.cs", label="Exit lambda expression", span="34-36"];
m48_32 [cluster="lambda expression", file="OptionMapFixture.cs", label="Entry lambda expression", span="35-35"];
m48_34 [cluster="lambda expression", file="OptionMapFixture.cs", label="Exit lambda expression", span="35-35"];
m48_37 [cluster="lambda expression", file="OptionMapFixture.cs", label="v.IsValue()", span="36-36"];
m48_38 [cluster="lambda expression", file="OptionMapFixture.cs", label="Exit lambda expression", span="36-36"];
m48_40 [cluster="lambda expression", file="OptionMapFixture.cs", label="v.IsValue()", span="37-37"];
m48_41 [cluster="lambda expression", file="OptionMapFixture.cs", label="Exit lambda expression", span="37-37"];
m48_10 [cluster="Unk.MapMaybe", file="OptionMapFixture.cs", label="Entry Unk.MapMaybe", span=""];
m48_23 [cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="OptionMapFixture.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0"];
m48_16 [cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", file="OptionMapFixture.cs", label="Entry CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", span="28-28"];
m48_17 [cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", file="OptionMapFixture.cs", label="var nameIndex = tokens.IndexOf(t => t.Equals(nameToken))", span="30-30"];
m48_19 [cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", file="OptionMapFixture.cs", label="return info.NextValue.MapMaybe(\r\n                    _ => info.MaxItems.MapMaybe(\r\n                            n => tokens.Skip(nameIndex + 1).Take(n),\r\n                                 tokens.Skip(nameIndex + 1).TakeWhile(v => v.IsValue())),\r\n                    tokens.Skip(nameIndex + 1).TakeWhile(v => v.IsValue()));", span="33-37"];
m48_18 [cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", file="OptionMapFixture.cs", label="nameIndex >= 0", span="31-31"];
m48_20 [cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", file="OptionMapFixture.cs", label="return new Token[] { };", span="39-39"];
m48_21 [cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", file="OptionMapFixture.cs", label="Exit CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", span="28-28"];
m48_7 [cluster="CommandLine.Core.Token.IsName()", file="OptionMapFixture.cs", label="Entry CommandLine.Core.Token.IsName()", span="128-128"];
m48_14 [cluster="Unk.OfSequence", file="OptionMapFixture.cs", label="Entry Unk.OfSequence", span=""];
m48_8 [cluster="CommandLine.Core.Token.IsValue()", file="OptionMapFixture.cs", label="Entry CommandLine.Core.Token.IsValue()", span="133-133"];
m48_9 [cluster="System.Func<T, TResult>.Invoke(T)", file="OptionMapFixture.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m48_3 [cluster="Unk.Pairwise", file="OptionMapFixture.cs", label="Entry Unk.Pairwise", span=""];
m48_42 [file="OptionMapFixture.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", span=""];
m48_43 [file="OptionMapFixture.cs", label="System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>", span=""];
m48_44 [file="OptionMapFixture.cs", label="CommandLine.Core.Token", span=""];
m48_45 [file="OptionMapFixture.cs", label="CommandLine.Core.Token", span=""];
m48_46 [file="OptionMapFixture.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", span=""];
m48_47 [file="OptionMapFixture.cs", label="CommandLine.Core.TypeDescriptor", span=""];
m48_48 [file="OptionMapFixture.cs", label=nameIndex, span=""];
m51_0 [cluster="CommandLine.Tests.Mocks.OptionsWithDefaultSet.OptionsWithDefaultSet()", file="OptionsWithDefaultSet.cs", label="Entry CommandLine.Tests.Mocks.OptionsWithDefaultSet.OptionsWithDefaultSet()", span="35-35"];
m51_1 [cluster="CommandLine.Tests.Mocks.OptionsWithDefaultSet.OptionsWithDefaultSet()", file="OptionsWithDefaultSet.cs", label="FileId = int.MinValue", span="37-37"];
m51_2 [cluster="CommandLine.Tests.Mocks.OptionsWithDefaultSet.OptionsWithDefaultSet()", file="OptionsWithDefaultSet.cs", label="Exit CommandLine.Tests.Mocks.OptionsWithDefaultSet.OptionsWithDefaultSet()", span="35-35"];
m51_3 [file="OptionsWithDefaultSet.cs", label="CommandLine.Tests.Mocks.OptionsWithDefaultSet", span=""];
m62_40 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="111-111"];
m62_42 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", color=green, community=0, file="Program.cs", label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", prediction=30, span="123-123"];
m62_41 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="116-120"];
m62_43 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="111-111"];
m62_150 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", file="Program.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="9-9"];
m62_172 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="Program.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33"];
m62_11 [cluster="Unk.True", file="Program.cs", label="Entry Unk.True", span=""];
m62_159 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="406-406"];
m62_160 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="411-415"];
m62_161 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="Program.cs", label="expected.ShouldBeEquivalentTo(result.Value.StringSequence)", span="418-418"];
m62_162 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="406-406"];
m62_233 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="557-557"];
m62_235 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="563-567"];
m62_236 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="Program.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="570-570"];
m62_234 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="Program.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="560-560"];
m62_237 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="557-557"];
m62_274 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="653-653"];
m62_276 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredValue(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="659-663"];
m62_277 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="Program.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="666-666"];
m62_275 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="Program.cs", label="var expectedResult = new[] { new MissingRequiredOptionError(NameInfo.EmptyName) }", span="656-656"];
m62_278 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="653-653"];
m62_220 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="Program.cs", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283"];
m62_82 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", file="Program.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="9-9"];
m62_151 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="384-384"];
m62_152 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="389-393"];
m62_153 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="Program.cs", label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="396-396"];
m62_154 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="384-384"];
m62_3 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => fakeOptions,\r\n                new[] { ''--help'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="26-30"];
m62_143 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="362-362"];
m62_144 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceWithoutRange(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="367-371"];
m62_145 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="Program.cs", label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="374-374"];
m62_146 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="362-362"];
m62_241 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="576-576"];
m62_243 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="582-586"];
m62_244 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="Program.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="589-589"];
m62_242 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="Program.cs", label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="579-579"];
m62_245 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="576-576"];
m62_55 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="156-156"];
m62_56 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="161-165"];
m62_57 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="Program.cs", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="168-168"];
m62_58 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="156-156"];
m62_0 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="17-17"];
m62_1 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="Program.cs", label="var fakeOptions = new FakeOptions()", span="20-20"];
m62_2 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="Program.cs", label="var expectedResult = ParserResult.Create(\r\n                ParserResultType.Options,\r\n                fakeOptions, new Error[] { new HelpRequestedError() })", span="21-23"];
m62_266 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="635-635"];
m62_267 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="640-644"];
m62_268 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="Program.cs", label="Assert.True(expected.Equals(result.Value.StringValue))", span="647-647"];
m62_269 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="635-635"];
m62_54 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", file="Program.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", span="9-9"];
m62_207 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="499-499"];
m62_209 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="506-510"];
m62_208 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="Program.cs", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="501-504"];
m62_210 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="Program.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="513-513"];
m62_211 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="499-499"];
m62_62 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", file="Program.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="9-9"];
m62_187 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="Program.cs", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="12-12"];
m62_31 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="89-89"];
m62_32 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequence(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="94-98"];
m62_33 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="Program.cs", label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="101-101"];
m62_34 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="89-89"];
m62_4 [cluster="Unk.Equal", file="Program.cs", label="Entry Unk.Equal", span=""];
m62_5 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="17-17"];
m62_224 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="538-538"];
m62_226 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequired(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="544-548"];
m62_227 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="Program.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="551-551"];
m62_225 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="Program.cs", label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="541-541"];
m62_228 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="538-538"];
m62_8 [cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="Program.cs", label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="103-103"];
m62_78 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="Program.cs", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316"];
m62_184 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="444-444"];
m62_27 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="71-71"];
m62_29 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="71-71"];
m62_28 [cluster="lambda expression", file="Program.cs", label="new FakeOptionsWithDouble()", span="71-71"];
m62_44 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="117-117"];
m62_12 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="27-27"];
m62_20 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="48-48"];
m62_36 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="95-95"];
m62_51 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="140-140"];
m62_59 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="162-162"];
m62_70 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="181-181"];
m62_79 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="200-200"];
m62_88 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="220-220"];
m62_96 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="239-239"];
m62_105 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="263-263"];
m62_115 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="282-282"];
m62_123 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="301-301"];
m62_131 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="320-320"];
m62_140 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="345-345"];
m62_147 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="368-368"];
m62_155 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="390-390"];
m62_163 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="412-412"];
m62_194 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="467-467"];
m62_204 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="487-487"];
m62_212 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="507-507"];
m62_221 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="527-527"];
m62_229 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="545-545"];
m62_238 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="564-564"];
m62_247 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="583-583"];
m62_255 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="602-602"];
m62_263 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="621-621"];
m62_271 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="641-641"];
m62_279 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="660-660"];
m62_287 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="679-679"];
m62_46 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="117-117"];
m62_45 [cluster="lambda expression", file="Program.cs", label="new FakeOptions()", span="117-117"];
m62_13 [cluster="lambda expression", file="Program.cs", label=fakeOptions, span="27-27"];
m62_14 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="27-27"];
m62_22 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="48-48"];
m62_21 [cluster="lambda expression", file="Program.cs", label="new FakeOptions()", span="48-48"];
m62_38 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="95-95"];
m62_37 [cluster="lambda expression", file="Program.cs", label="new FakeOptionsWithSequence()", span="95-95"];
m62_53 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="140-140"];
m62_52 [cluster="lambda expression", file="Program.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="140-140"];
m62_61 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="162-162"];
m62_60 [cluster="lambda expression", file="Program.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="162-162"];
m62_72 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="181-181"];
m62_71 [cluster="lambda expression", file="Program.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="181-181"];
m62_81 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="200-200"];
m62_80 [cluster="lambda expression", file="Program.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="200-200"];
m62_90 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="220-220"];
m62_89 [cluster="lambda expression", file="Program.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="220-220"];
m62_98 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="239-239"];
m62_97 [cluster="lambda expression", file="Program.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="239-239"];
m62_107 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="263-263"];
m62_106 [cluster="lambda expression", file="Program.cs", label="new FakeOptionsWithEnum()", span="263-263"];
m62_117 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="282-282"];
m62_116 [cluster="lambda expression", file="Program.cs", label="new FakeOptionsWithEnum()", span="282-282"];
m62_125 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="301-301"];
m62_124 [cluster="lambda expression", file="Program.cs", label="new FakeOptionsWithEnum()", span="301-301"];
m62_133 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="320-320"];
m62_132 [cluster="lambda expression", file="Program.cs", label="new FakeOptionsWithEnum()", span="320-320"];
m62_142 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="345-345"];
m62_141 [cluster="lambda expression", file="Program.cs", label="new FakeOptionsWithValues()", span="345-345"];
m62_149 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="368-368"];
m62_148 [cluster="lambda expression", file="Program.cs", label="new FakeOptionsWithSequenceWithoutRange()", span="368-368"];
m62_157 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="390-390"];
m62_156 [cluster="lambda expression", file="Program.cs", label="new FakeOptionsWithSequenceAndSeparator()", span="390-390"];
m62_165 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="412-412"];
m62_164 [cluster="lambda expression", file="Program.cs", label="new FakeOptionsWithSequenceAndSeparator()", span="412-412"];
m62_196 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="467-467"];
m62_195 [cluster="lambda expression", file="Program.cs", label="new FakeOptionsWithSets()", span="467-467"];
m62_206 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="487-487"];
m62_205 [cluster="lambda expression", file="Program.cs", label="new FakeOptionWithRequiredAndSet()", span="487-487"];
m62_214 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="507-507"];
m62_213 [cluster="lambda expression", file="Program.cs", label="new FakeOptionWithRequiredAndSet()", span="507-507"];
m62_223 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="527-527"];
m62_222 [cluster="lambda expression", file="Program.cs", label="new FakeOptionWithRequiredAndSet()", span="527-527"];
m62_231 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="545-545"];
m62_230 [cluster="lambda expression", file="Program.cs", label="new FakeOptionWithRequired()", span="545-545"];
m62_240 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="564-564"];
m62_239 [cluster="lambda expression", file="Program.cs", label="new FakeOptions()", span="564-564"];
m62_249 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="583-583"];
m62_248 [cluster="lambda expression", file="Program.cs", label="new FakeOptions()", span="583-583"];
m62_257 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="602-602"];
m62_256 [cluster="lambda expression", file="Program.cs", label="new FakeOptions()", span="602-602"];
m62_265 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="621-621"];
m62_264 [cluster="lambda expression", file="Program.cs", label="new FakeOptions()", span="621-621"];
m62_273 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="641-641"];
m62_272 [cluster="lambda expression", file="Program.cs", label="new FakeOptions()", span="641-641"];
m62_281 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="660-660"];
m62_280 [cluster="lambda expression", file="Program.cs", label="new FakeOptionWithRequiredValue()", span="660-660"];
m62_289 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="679-679"];
m62_288 [cluster="lambda expression", file="Program.cs", label="new FakeOptionWithRequiredValue()", span="679-679"];
m62_174 [cluster="lambda expression", file="Program.cs", label="new FakeOptionsWithValues()", span="441-441"];
m62_173 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="441-441"];
m62_175 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="441-441"];
m62_176 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="442-444"];
m62_178 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="442-444"];
m62_177 [cluster="lambda expression", file="Program.cs", label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="443-444"];
m62_181 [cluster="lambda expression", file="Program.cs", label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="444-444"];
m62_185 [cluster="lambda expression", file="Program.cs", label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="444-444"];
m62_180 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="444-444"];
m62_182 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="444-444"];
m62_186 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="444-444"];
m62_215 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="518-518"];
m62_217 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="526-530"];
m62_218 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="Program.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="533-533"];
m62_216 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="Program.cs", label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="520-524"];
m62_219 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="518-518"];
m62_100 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="257-257"];
m62_101 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="262-266"];
m62_102 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="Program.cs", label="expected.ShouldBeEquivalentTo(result.Value.Colors)", span="269-269"];
m62_103 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="257-257"];
m62_35 [cluster="Unk.SequenceEqual", file="Program.cs", label="Entry Unk.SequenceEqual", span=""];
m62_126 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="313-313"];
m62_128 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''RED'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="319-323"];
m62_129 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="Program.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="326-326"];
m62_127 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="Program.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="316-316"];
m62_130 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="313-313"];
m62_68 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="Program.cs", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="261-261"];
m62_283 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionWithRequiredValue)", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionWithRequiredValue)", span="673-673"];
m62_284 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionWithRequiredValue)", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredValue(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="678-682"];
m62_285 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionWithRequiredValue)", file="Program.cs", label="expected.ShouldBeEquivalentTo(result.Value)", span="685-685"];
m62_286 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionWithRequiredValue)", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionWithRequiredValue)", span="673-673"];
m62_99 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", file="Program.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="9-9"];
m62_83 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="213-213"];
m62_85 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="219-223"];
m62_86 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="Program.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="226-226"];
m62_84 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="Program.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="216-216"];
m62_87 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="213-213"];
m62_166 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="427-427"];
m62_170 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="Program.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="450-450"];
m62_167 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="Program.cs", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="430-436"];
m62_169 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="440-447"];
m62_168 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="Program.cs", label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="437-437"];
m62_171 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="427-427"];
m62_258 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="614-614"];
m62_260 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="620-624"];
m62_261 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="Program.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="627-627"];
m62_259 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="Program.cs", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="617-617"];
m62_262 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="614-614"];
m62_10 [cluster="CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", file="Program.cs", label="Entry CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", span="90-90"];
m62_63 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="174-174"];
m62_65 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                new[] { ''-s'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="180-184"];
m62_66 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="Program.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="187-187"];
m62_64 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="Program.cs", label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="177-177"];
m62_67 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="174-174"];
m62_134 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="332-332"];
m62_136 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="344-348"];
m62_135 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="Program.cs", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="335-341"];
m62_137 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="Program.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="351-351"];
m62_138 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="332-332"];
m62_30 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", file="Program.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", span="9-9"];
m62_108 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", file="Program.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="16-16"];
m62_203 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", file="Program.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", span="4-4"];
m62_73 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="193-193"];
m62_75 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="199-203"];
m62_76 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="Program.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="206-206"];
m62_74 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="Program.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="196-196"];
m62_77 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="193-193"];
m62_246 [cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", file="Program.cs", label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="272-272"];
m62_91 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="232-232"];
m62_93 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue(),\r\n                new[] { ''one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="238-242"];
m62_94 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="Program.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="245-245"];
m62_92 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="Program.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="235-235"];
m62_95 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="232-232"];
m62_198 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="479-479"];
m62_200 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="486-490"];
m62_199 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="Program.cs", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = null\r\n            }", span="481-484"];
m62_201 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="Program.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="493-493"];
m62_202 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="479-479"];
m62_114 [cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="Program.cs", label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="305-305"];
m62_158 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", file="Program.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="9-9"];
m62_179 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="Program.cs", label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="37-37"];
m62_183 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="Program.cs", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11"];
m62_270 [cluster="string.Equals(string)", file="Program.cs", label="Entry string.Equals(string)", span="0-0"];
m62_197 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", file="Program.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4"];
m62_193 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="Program.cs", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294"];
m62_232 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", file="Program.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4"];
m62_69 [cluster="CommandLine.NameInfo.NameInfo(string, string)", file="Program.cs", label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20"];
m62_47 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="134-134"];
m62_48 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="139-143"];
m62_49 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="Program.cs", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="146-146"];
m62_50 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="134-134"];
m62_15 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="42-42"];
m62_16 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="47-51"];
m62_17 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="Program.cs", label="Assert.Equal(expected, result.Value.LongValue)", span="54-54"];
m62_18 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="42-42"];
m62_39 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", file="Program.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", span="9-9"];
m62_6 [cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", file="Program.cs", label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6"];
m62_250 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="595-595"];
m62_252 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="601-605"];
m62_253 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="Program.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="608-608"];
m62_251 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="Program.cs", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="598-598"];
m62_254 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="595-595"];
m62_118 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="294-294"];
m62_120 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''Yellow'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="300-304"];
m62_121 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="Program.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="307-307"];
m62_119 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="Program.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="297-297"];
m62_122 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="294-294"];
m62_282 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredValue.FakeOptionWithRequiredValue()", file="Program.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredValue.FakeOptionWithRequiredValue()", span="4-4"];
m62_109 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="275-275"];
m62_111 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''3'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="281-285"];
m62_112 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="Program.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="288-288"];
m62_110 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="Program.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="278-278"];
m62_113 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="275-275"];
m62_23 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="65-65"];
m62_24 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", color=green, community=0, file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithDouble(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", prediction=31, span="70-74"];
m62_25 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="Program.cs", label="Assert.Equal(expected, result.Value.DoubleValue)", span="77-77"];
m62_26 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="65-65"];
m62_139 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", file="Program.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6"];
m62_7 [cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="Program.cs", label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="338-338"];
m62_19 [cluster="Unk.Equal", file="Program.cs", label="Entry Unk.Equal", span=""];
m62_188 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="456-456"];
m62_190 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSets(),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="466-470"];
m62_191 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="Program.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="473-473"];
m62_189 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="Program.cs", label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl'')),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''))\r\n                }", span="459-463"];
m62_192 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="456-456"];
m62_104 [cluster="Unk.ShouldBeEquivalentTo", file="Program.cs", label="Entry Unk.ShouldBeEquivalentTo", span=""];
m62_9 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="Program.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12"];
m62_290 [file="Program.cs", label=fakeOptions, span=""];
m62_291 [file="Program.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
m64_10 [cluster="CommandLine.Tests.ReflectionUtilFixture.CreateInstance()", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.ReflectionUtilFixture.CreateInstance()", span="102-102"];
m64_11 [cluster="CommandLine.Tests.ReflectionUtilFixture.CreateInstance()", file="ReflectionUtilFixture.cs", label="_target = new MockObject()", span="104-104"];
m64_12 [cluster="CommandLine.Tests.ReflectionUtilFixture.CreateInstance()", file="ReflectionUtilFixture.cs", label="Exit CommandLine.Tests.ReflectionUtilFixture.CreateInstance()", span="102-102"];
m64_32 [cluster="CommandLine.Tests.ReflectionUtilFixture.GetMethodByAttribute()", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.ReflectionUtilFixture.GetMethodByAttribute()", span="133-133"];
m64_33 [cluster="CommandLine.Tests.ReflectionUtilFixture.GetMethodByAttribute()", file="ReflectionUtilFixture.cs", label="var pair = ReflectionUtil.RetrieveMethod<MockAttribute>(_target)", span="135-135"];
m64_34 [cluster="CommandLine.Tests.ReflectionUtilFixture.GetMethodByAttribute()", file="ReflectionUtilFixture.cs", label="pair.Should().Not.Be.Null()", span="137-137"];
m64_35 [cluster="CommandLine.Tests.ReflectionUtilFixture.GetMethodByAttribute()", file="ReflectionUtilFixture.cs", label="pair.Left.Name.Should().Equal(''DoNothing'')", span="138-138"];
m64_36 [cluster="CommandLine.Tests.ReflectionUtilFixture.GetMethodByAttribute()", file="ReflectionUtilFixture.cs", label="Exit CommandLine.Tests.ReflectionUtilFixture.GetMethodByAttribute()", span="133-133"];
m64_16 [cluster="CommandLine.Tests.ReflectionUtilFixture.GetFieldsByAttribute()", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.ReflectionUtilFixture.GetFieldsByAttribute()", span="114-114"];
m64_17 [cluster="CommandLine.Tests.ReflectionUtilFixture.GetFieldsByAttribute()", file="ReflectionUtilFixture.cs", label="var list = ReflectionUtil.RetrievePropertyList<MockAttribute>(_target)", span="116-116"];
m64_18 [cluster="CommandLine.Tests.ReflectionUtilFixture.GetFieldsByAttribute()", file="ReflectionUtilFixture.cs", label="list.Should().Count.Exactly(2)", span="118-118"];
m64_19 [cluster="CommandLine.Tests.ReflectionUtilFixture.GetFieldsByAttribute()", file="ReflectionUtilFixture.cs", label="list[0].Left.Name.Should().Equal(''StringField'')", span="119-119"];
m64_20 [cluster="CommandLine.Tests.ReflectionUtilFixture.GetFieldsByAttribute()", file="ReflectionUtilFixture.cs", label="list[1].Left.Name.Should().Equal(''BooleanField'')", span="120-120"];
m64_21 [cluster="CommandLine.Tests.ReflectionUtilFixture.GetFieldsByAttribute()", file="ReflectionUtilFixture.cs", label="PrintFieldList<MockAttribute>(list)", span="122-122"];
m64_22 [cluster="CommandLine.Tests.ReflectionUtilFixture.GetFieldsByAttribute()", file="ReflectionUtilFixture.cs", label="var anotherList = ReflectionUtil.RetrievePropertyList<AnotherMockAttribute>(_target)", span="124-124"];
m64_23 [cluster="CommandLine.Tests.ReflectionUtilFixture.GetFieldsByAttribute()", file="ReflectionUtilFixture.cs", label="anotherList.Should().Count.Exactly(1)", span="126-126"];
m64_24 [cluster="CommandLine.Tests.ReflectionUtilFixture.GetFieldsByAttribute()", file="ReflectionUtilFixture.cs", label="anotherList[0].Left.Name.Should().Equal(''IntField'')", span="127-127"];
m64_25 [cluster="CommandLine.Tests.ReflectionUtilFixture.GetFieldsByAttribute()", file="ReflectionUtilFixture.cs", label="PrintFieldList<AnotherMockAttribute>(anotherList)", span="129-129"];
m64_26 [cluster="CommandLine.Tests.ReflectionUtilFixture.GetFieldsByAttribute()", file="ReflectionUtilFixture.cs", label="Exit CommandLine.Tests.ReflectionUtilFixture.GetFieldsByAttribute()", span="114-114"];
m64_31 [cluster="CommandLine.Tests.ReflectionUtilFixture.PrintFieldList<TAttribute>(System.Collections.Generic.IList<CommandLine.Pair<System.Reflection.PropertyInfo, TAttribute>>)", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.ReflectionUtilFixture.PrintFieldList<TAttribute>(System.Collections.Generic.IList<CommandLine.Pair<System.Reflection.PropertyInfo, TAttribute>>)", span="182-182"];
m64_48 [cluster="CommandLine.Tests.ReflectionUtilFixture.PrintFieldList<TAttribute>(System.Collections.Generic.IList<CommandLine.Pair<System.Reflection.PropertyInfo, TAttribute>>)", file="ReflectionUtilFixture.cs", label="Console.WriteLine(''Attribute: {0}'', list[0].Right.GetType())", span="185-185"];
m64_49 [cluster="CommandLine.Tests.ReflectionUtilFixture.PrintFieldList<TAttribute>(System.Collections.Generic.IList<CommandLine.Pair<System.Reflection.PropertyInfo, TAttribute>>)", file="ReflectionUtilFixture.cs", label=list, span="186-186"];
m64_50 [cluster="CommandLine.Tests.ReflectionUtilFixture.PrintFieldList<TAttribute>(System.Collections.Generic.IList<CommandLine.Pair<System.Reflection.PropertyInfo, TAttribute>>)", file="ReflectionUtilFixture.cs", label="Console.WriteLine(''\tField: {0}'', pair.Left.Name)", span="188-188"];
m64_51 [cluster="CommandLine.Tests.ReflectionUtilFixture.PrintFieldList<TAttribute>(System.Collections.Generic.IList<CommandLine.Pair<System.Reflection.PropertyInfo, TAttribute>>)", file="ReflectionUtilFixture.cs", label="Exit CommandLine.Tests.ReflectionUtilFixture.PrintFieldList<TAttribute>(System.Collections.Generic.IList<CommandLine.Pair<System.Reflection.PropertyInfo, TAttribute>>)", span="182-182"];
m64_0 [cluster="CommandLine.Tests.ReflectionUtilFixture.MockObject.MockObject()", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.ReflectionUtilFixture.MockObject.MockObject()", span="59-59"];
m64_1 [cluster="CommandLine.Tests.ReflectionUtilFixture.MockObject.MockObject()", file="ReflectionUtilFixture.cs", label="IntField = 0", span="61-61"];
m64_2 [cluster="CommandLine.Tests.ReflectionUtilFixture.MockObject.MockObject()", file="ReflectionUtilFixture.cs", label="Exit CommandLine.Tests.ReflectionUtilFixture.MockObject.MockObject()", span="59-59"];
m64_39 [cluster="CommandLine.Tests.ReflectionUtilFixture.GetFieldsAttributeList()", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.ReflectionUtilFixture.GetFieldsAttributeList()", span="142-142"];
m64_40 [cluster="CommandLine.Tests.ReflectionUtilFixture.GetFieldsAttributeList()", file="ReflectionUtilFixture.cs", label="var list = ReflectionUtil.RetrievePropertyAttributeList<MockWithValueAttribute>(new AnotherMockObject())", span="144-144"];
m64_41 [cluster="CommandLine.Tests.ReflectionUtilFixture.GetFieldsAttributeList()", file="ReflectionUtilFixture.cs", label="list.Should().Not.Be.Null()", span="146-146"];
m64_42 [cluster="CommandLine.Tests.ReflectionUtilFixture.GetFieldsAttributeList()", file="ReflectionUtilFixture.cs", label="list.Should().Count.Exactly(3)", span="147-147"];
m64_43 [cluster="CommandLine.Tests.ReflectionUtilFixture.GetFieldsAttributeList()", file="ReflectionUtilFixture.cs", label="list[0].StringValue.Should().Equal(''applied to X'')", span="148-148"];
m64_44 [cluster="CommandLine.Tests.ReflectionUtilFixture.GetFieldsAttributeList()", file="ReflectionUtilFixture.cs", label="list[1].StringValue.Should().Equal(''applied to Y'')", span="149-149"];
m64_45 [cluster="CommandLine.Tests.ReflectionUtilFixture.GetFieldsAttributeList()", file="ReflectionUtilFixture.cs", label="list[2].StringValue.Should().Equal(''applied to Z'')", span="150-150"];
m64_46 [cluster="CommandLine.Tests.ReflectionUtilFixture.GetFieldsAttributeList()", file="ReflectionUtilFixture.cs", label="Exit CommandLine.Tests.ReflectionUtilFixture.GetFieldsAttributeList()", span="142-142"];
m64_47 [cluster="CommandLine.ReflectionUtil.RetrievePropertyAttributeList<TAttribute>(object)", file="ReflectionUtilFixture.cs", label="Entry CommandLine.ReflectionUtil.RetrievePropertyAttributeList<TAttribute>(object)", span="1920-1920"];
m64_37 [cluster="CommandLine.ReflectionUtil.RetrieveMethod<TAttribute>(object)", file="ReflectionUtilFixture.cs", label="Entry CommandLine.ReflectionUtil.RetrieveMethod<TAttribute>(object)", span="1882-1882"];
m64_29 [cluster="Unk.Exactly", file="ReflectionUtilFixture.cs", label="Entry Unk.Exactly", span=""];
m64_52 [cluster="object.GetType()", file="ReflectionUtilFixture.cs", label="Entry object.GetType()", span="0-0"];
m64_5 [cluster="CommandLine.Tests.ReflectionUtilFixture.AnotherMockObject.AnotherMockObject()", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.ReflectionUtilFixture.AnotherMockObject.AnotherMockObject()", span="81-81"];
m64_6 [cluster="CommandLine.Tests.ReflectionUtilFixture.AnotherMockObject.AnotherMockObject()", file="ReflectionUtilFixture.cs", label="X = 0", span="83-83"];
m64_7 [cluster="CommandLine.Tests.ReflectionUtilFixture.AnotherMockObject.AnotherMockObject()", file="ReflectionUtilFixture.cs", label="Y = 0", span="84-84"];
m64_8 [cluster="CommandLine.Tests.ReflectionUtilFixture.AnotherMockObject.AnotherMockObject()", file="ReflectionUtilFixture.cs", label="Z = 0", span="85-85"];
m64_9 [cluster="CommandLine.Tests.ReflectionUtilFixture.AnotherMockObject.AnotherMockObject()", file="ReflectionUtilFixture.cs", label="Exit CommandLine.Tests.ReflectionUtilFixture.AnotherMockObject.AnotherMockObject()", span="81-81"];
m64_27 [cluster="CommandLine.ReflectionUtil.RetrievePropertyList<TAttribute>(object)", file="ReflectionUtilFixture.cs", label="Entry CommandLine.ReflectionUtil.RetrievePropertyList<TAttribute>(object)", span="1856-1856"];
m64_38 [cluster="Unk.Null", file="ReflectionUtilFixture.cs", label="Entry Unk.Null", span=""];
m64_53 [cluster="System.Console.WriteLine(string, object)", file="ReflectionUtilFixture.cs", label="Entry System.Console.WriteLine(string, object)", span="0-0"];
m64_30 [cluster="Unk.Equal", file="ReflectionUtilFixture.cs", label="Entry Unk.Equal", span=""];
m64_13 [cluster="CommandLine.Tests.ReflectionUtilFixture.ShutdownInstance()", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.ReflectionUtilFixture.ShutdownInstance()", span="108-108"];
m64_14 [cluster="CommandLine.Tests.ReflectionUtilFixture.ShutdownInstance()", file="ReflectionUtilFixture.cs", label="_target = null", span="110-110"];
m64_15 [cluster="CommandLine.Tests.ReflectionUtilFixture.ShutdownInstance()", file="ReflectionUtilFixture.cs", label="Exit CommandLine.Tests.ReflectionUtilFixture.ShutdownInstance()", span="108-108"];
m64_28 [cluster="Unk.Should", file="ReflectionUtilFixture.cs", label="Entry Unk.Should", span=""];
m64_3 [cluster="CommandLine.Tests.ReflectionUtilFixture.MockObject.DoNothing()", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.ReflectionUtilFixture.MockObject.DoNothing()", span="74-74"];
m64_4 [cluster="CommandLine.Tests.ReflectionUtilFixture.MockObject.DoNothing()", file="ReflectionUtilFixture.cs", label="Exit CommandLine.Tests.ReflectionUtilFixture.MockObject.DoNothing()", span="74-74"];
m64_54 [file="ReflectionUtilFixture.cs", label="CommandLine.Tests.ReflectionUtilFixture.MockObject", span=""];
m64_55 [file="ReflectionUtilFixture.cs", label="CommandLine.Tests.ReflectionUtilFixture.AnotherMockObject", span=""];
m67_3 [cluster="CommandLine.Text.HelpText.AutoBuild(object)", file="SimpleOptionsForAutoBuid.cs", label="Entry CommandLine.Text.HelpText.AutoBuild(object)", span="780-780"];
m67_0 [cluster="CommandLine.Tests.Mocks.SimpleOptionsForAutoBuid.GetUsage()", file="SimpleOptionsForAutoBuid.cs", label="Entry CommandLine.Tests.Mocks.SimpleOptionsForAutoBuid.GetUsage()", span="12-12"];
m67_1 [cluster="CommandLine.Tests.Mocks.SimpleOptionsForAutoBuid.GetUsage()", file="SimpleOptionsForAutoBuid.cs", label="return HelpText.AutoBuild(this);", span="14-14"];
m67_2 [cluster="CommandLine.Tests.Mocks.SimpleOptionsForAutoBuid.GetUsage()", file="SimpleOptionsForAutoBuid.cs", label="Exit CommandLine.Tests.Mocks.SimpleOptionsForAutoBuid.GetUsage()", span="12-12"];
m67_4 [file="SimpleOptionsForAutoBuid.cs", label="CommandLine.Tests.Mocks.SimpleOptionsForAutoBuid", span=""];
m71_10 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="SimpleOptionsWithBadOptionArray.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m71_12 [cluster="CommandLine.Core.StatePair.Create<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="SimpleOptionsWithBadOptionArray.cs", label="Entry CommandLine.Core.StatePair.Create<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="61-61"];
m71_20 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="SimpleOptionsWithBadOptionArray.cs", label="Entry CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", span="40-40"];
m71_21 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="SimpleOptionsWithBadOptionArray.cs", label="var expectedTokens = new[] { Token.Name(''x''), Token.Name(''string-seq''),\r\n                Token.Value(''aaa''), Token.Value(''bb''),  Token.Value(''cccc''), Token.Name(''switch''), }", span="43-44"];
m71_24 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="SimpleOptionsWithBadOptionArray.cs", label="Assert.True(expectedTokens.SequenceEqual(result.Value))", span="58-58"];
m71_23 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="SimpleOptionsWithBadOptionArray.cs", label="var result =\r\n                Tokenizer.ExplodeOptionList(\r\n                    StatePair.Create(\r\n                        Enumerable.Empty<Token>().Concat(new[] { Token.Name(''x''),\r\n                            Token.Name(''string-seq''), Token.Value(''aaa,bb,cccc''), Token.Name(''switch'') }),\r\n                        Enumerable.Empty<Error>()),\r\n                        optionName => NameLookup.WithSeparator(optionName, specs, StringComparer.InvariantCulture))", span="49-55"];
m71_25 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="SimpleOptionsWithBadOptionArray.cs", label="Exit CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", span="40-40"];
m71_19 [cluster="CommandLine.Core.NameLookup.WithSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="SimpleOptionsWithBadOptionArray.cs", label="Entry CommandLine.Core.NameLookup.WithSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="19-19"];
m71_15 [cluster="Unk.True", file="SimpleOptionsWithBadOptionArray.cs", label="Entry Unk.True", span=""];
m71_0 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="SimpleOptionsWithBadOptionArray.cs", label="Entry CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", span="16-16"];
m71_1 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="SimpleOptionsWithBadOptionArray.cs", label="var expectedTokens = new[] { Token.Name(''i''), Token.Value(''10''), Token.Name(''string-seq''),\r\n                Token.Value(''aaa''), Token.Value(''bb''),  Token.Value(''cccc''), Token.Name(''switch''), }", span="19-20"];
m71_2 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="SimpleOptionsWithBadOptionArray.cs", label="var specs = new[] { new OptionSpecification(string.Empty, ''string-seq'',\r\n                false, string.Empty, -1, -1, ',', null, typeof(IEnumerable<string>), string.Empty, string.Empty, new List<string>())}", span="21-22"];
m71_4 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="SimpleOptionsWithBadOptionArray.cs", label="Assert.True(expectedTokens.SequenceEqual(result.Value))", span="34-34"];
m71_3 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="SimpleOptionsWithBadOptionArray.cs", label="var result =\r\n                Tokenizer.ExplodeOptionList(\r\n                    StatePair.Create(\r\n                        Enumerable.Empty<Token>().Concat(new[] { Token.Name(''i''), Token.Value(''10''),\r\n                            Token.Name(''string-seq''), Token.Value(''aaa,bb,cccc''), Token.Name(''switch'') }),\r\n                        Enumerable.Empty<Error>()),\r\n                        optionName => NameLookup.WithSeparator(optionName, specs, StringComparer.InvariantCulture))", span="25-31"];
m71_5 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="SimpleOptionsWithBadOptionArray.cs", label="Exit CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", span="16-16"];
m71_26 [cluster="lambda expression", file="SimpleOptionsWithBadOptionArray.cs", label="Entry lambda expression", span="55-55"];
m71_17 [cluster="lambda expression", file="SimpleOptionsWithBadOptionArray.cs", label="NameLookup.WithSeparator(optionName, specs, StringComparer.InvariantCulture)", span="31-31"];
m71_16 [cluster="lambda expression", file="SimpleOptionsWithBadOptionArray.cs", label="Entry lambda expression", span="31-31"];
m71_18 [cluster="lambda expression", file="SimpleOptionsWithBadOptionArray.cs", label="Exit lambda expression", span="31-31"];
m71_27 [cluster="lambda expression", file="SimpleOptionsWithBadOptionArray.cs", label="NameLookup.WithSeparator(optionName, specs, StringComparer.InvariantCulture)", span="55-55"];
m71_28 [cluster="lambda expression", file="SimpleOptionsWithBadOptionArray.cs", label="Exit lambda expression", span="55-55"];
m71_6 [cluster="CommandLine.Core.Token.Name(string)", file="SimpleOptionsWithBadOptionArray.cs", label="Entry CommandLine.Core.Token.Name(string)", span="19-19"];
m71_8 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="SimpleOptionsWithBadOptionArray.cs", label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", span="17-17"];
m71_13 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<char>>)", file="SimpleOptionsWithBadOptionArray.cs", label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<char>>)", span="48-48"];
m71_11 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="SimpleOptionsWithBadOptionArray.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
m71_7 [cluster="CommandLine.Core.Token.Value(string)", file="SimpleOptionsWithBadOptionArray.cs", label="Entry CommandLine.Core.Token.Value(string)", span="26-26"];
m71_14 [cluster="Unk.SequenceEqual", file="SimpleOptionsWithBadOptionArray.cs", label="Entry Unk.SequenceEqual", span=""];
m71_9 [cluster="System.Collections.Generic.List<T>.List()", file="SimpleOptionsWithBadOptionArray.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m71_29 [file="SimpleOptionsWithBadOptionArray.cs", label=specs, span=""];
m71_30 [file="SimpleOptionsWithBadOptionArray.cs", label=specs, span=""];
m72_0 [cluster="Humanizer.DateTimeHumanizeStrategy.IDateTimeHumanizeStrategy.Humanize(System.DateTime, System.DateTime)", file="SimpleOptionsWithDefaultArray.cs", label="Entry Humanizer.DateTimeHumanizeStrategy.IDateTimeHumanizeStrategy.Humanize(System.DateTime, System.DateTime)", span="6-6"];
m72_1 [cluster="Humanizer.DateTimeHumanizeStrategy.IDateTimeHumanizeStrategy.Humanize(System.DateTime, System.DateTime)", file="SimpleOptionsWithDefaultArray.cs", label="Exit Humanizer.DateTimeHumanizeStrategy.IDateTimeHumanizeStrategy.Humanize(System.DateTime, System.DateTime)", span="6-6"];
m74_0 [cluster="CommandLine.Tests.Mocks.SimpleOptionsWithEnum.SimpleOptionsWithEnum()", file="SimpleOptionsWithEnum.cs", label="Entry CommandLine.Tests.Mocks.SimpleOptionsWithEnum.SimpleOptionsWithEnum()", span="38-38"];
m74_1 [cluster="CommandLine.Tests.Mocks.SimpleOptionsWithEnum.SimpleOptionsWithEnum()", file="SimpleOptionsWithEnum.cs", label="FileAccess = FileAccess.Read", span="40-40"];
m74_2 [cluster="CommandLine.Tests.Mocks.SimpleOptionsWithEnum.SimpleOptionsWithEnum()", file="SimpleOptionsWithEnum.cs", label="Exit CommandLine.Tests.Mocks.SimpleOptionsWithEnum.SimpleOptionsWithEnum()", span="38-38"];
m74_3 [file="SimpleOptionsWithEnum.cs", label="CommandLine.Tests.Mocks.SimpleOptionsWithEnum", span=""];
m75_0 [cluster="CommandLine.Tests.Mocks.SimpleOptionsWithHelpOption.GetUsage()", file="SimpleOptionsWithHelpOption.cs", label="Entry CommandLine.Tests.Mocks.SimpleOptionsWithHelpOption.GetUsage()", span="42-42"];
m75_1 [cluster="CommandLine.Tests.Mocks.SimpleOptionsWithHelpOption.GetUsage()", file="SimpleOptionsWithHelpOption.cs", label="return ''MockOptions::GetUsage()'';", span="44-44"];
m75_2 [cluster="CommandLine.Tests.Mocks.SimpleOptionsWithHelpOption.GetUsage()", file="SimpleOptionsWithHelpOption.cs", label="Exit CommandLine.Tests.Mocks.SimpleOptionsWithHelpOption.GetUsage()", span="42-42"];
m78_10 [cluster="CommandLine.ICommandLineParser.ParseArguments(string[], object)", file="Singleton.cs", label="Entry CommandLine.ICommandLineParser.ParseArguments(string[], object)", span="1471-1471"];
m78_14 [cluster="System.Console.WriteLine(object)", file="Singleton.cs", label="Entry System.Console.WriteLine(object)", span="0-0"];
m78_20 [cluster="CommandLine.Tests.Mocks.OptionsWithMultipleSet.OptionsWithMultipleSet()", file="Singleton.cs", label="Entry CommandLine.Tests.Mocks.OptionsWithMultipleSet.OptionsWithMultipleSet()", span="35-35"];
m78_0 [cluster="CommandLine.Tests.Singleton.ParseStringIntegerBoolOptions()", file="Singleton.cs", label="Entry CommandLine.Tests.Singleton.ParseStringIntegerBoolOptions()", span="41-41"];
m78_1 [cluster="CommandLine.Tests.Singleton.ParseStringIntegerBoolOptions()", file="Singleton.cs", label="var options = new SimpleOptions()", span="43-43"];
m78_2 [cluster="CommandLine.Tests.Singleton.ParseStringIntegerBoolOptions()", file="Singleton.cs", label="bool result = CommandLineParser.Default.ParseArguments(\r\n                    new string[] { ''-s'', ''another string'', ''-i100'', ''--switch'' }, options)", span="44-45"];
m78_4 [cluster="CommandLine.Tests.Singleton.ParseStringIntegerBoolOptions()", file="Singleton.cs", label="options.StringValue.Should().Equal(''another string'')", span="48-48"];
m78_5 [cluster="CommandLine.Tests.Singleton.ParseStringIntegerBoolOptions()", file="Singleton.cs", label="options.IntegerValue.Should().Equal(100)", span="49-49"];
m78_6 [cluster="CommandLine.Tests.Singleton.ParseStringIntegerBoolOptions()", file="Singleton.cs", label="options.BooleanValue.Should().Be.True()", span="50-50"];
m78_7 [cluster="CommandLine.Tests.Singleton.ParseStringIntegerBoolOptions()", file="Singleton.cs", label="Console.WriteLine(options)", span="51-51"];
m78_3 [cluster="CommandLine.Tests.Singleton.ParseStringIntegerBoolOptions()", file="Singleton.cs", label="result.Should().Be.True()", span="47-47"];
m78_8 [cluster="CommandLine.Tests.Singleton.ParseStringIntegerBoolOptions()", file="Singleton.cs", label="Exit CommandLine.Tests.Singleton.ParseStringIntegerBoolOptions()", span="41-41"];
m78_12 [cluster="Unk.True", file="Singleton.cs", label="Entry Unk.True", span=""];
m78_13 [cluster="Unk.Equal", file="Singleton.cs", label="Entry Unk.Equal", span=""];
m78_9 [cluster="CommandLine.Tests.Mocks.SimpleOptions.SimpleOptions()", file="Singleton.cs", label="Entry CommandLine.Tests.Mocks.SimpleOptions.SimpleOptions()", span="33-33"];
m78_11 [cluster="Unk.Should", file="Singleton.cs", label="Entry Unk.Should", span=""];
m78_15 [cluster="CommandLine.Tests.Singleton.DefaultDoesntSupportMutuallyExclusiveOptions()", file="Singleton.cs", label="Entry CommandLine.Tests.Singleton.DefaultDoesntSupportMutuallyExclusiveOptions()", span="55-55"];
m78_16 [cluster="CommandLine.Tests.Singleton.DefaultDoesntSupportMutuallyExclusiveOptions()", file="Singleton.cs", label="var options = new OptionsWithMultipleSet()", span="57-57"];
m78_17 [cluster="CommandLine.Tests.Singleton.DefaultDoesntSupportMutuallyExclusiveOptions()", file="Singleton.cs", label="bool result = CommandLineParser.Default.ParseArguments(\r\n                new string[] { ''-r1'', ''-g2'', ''-b3'', ''-h4'', ''-s5'', ''-v6'' }, options)", span="58-59"];
m78_18 [cluster="CommandLine.Tests.Singleton.DefaultDoesntSupportMutuallyExclusiveOptions()", file="Singleton.cs", label="result.Should().Be.True()", span="61-61"];
m78_19 [cluster="CommandLine.Tests.Singleton.DefaultDoesntSupportMutuallyExclusiveOptions()", file="Singleton.cs", label="Exit CommandLine.Tests.Singleton.DefaultDoesntSupportMutuallyExclusiveOptions()", span="55-55"];
m84_20 [cluster="CommandLine.Tests.Mocks.OptionsOfPlugInX.OptionsOfPlugInX()", file="UnknownArgumentsFixture.cs", label="Entry CommandLine.Tests.Mocks.OptionsOfPlugInX.OptionsOfPlugInX()", span="41-41"];
m84_18 [cluster="Unk.True", file="UnknownArgumentsFixture.cs", label="Entry Unk.True", span=""];
m84_15 [cluster="CommandLine.CommandLineParserSettings.CommandLineParserSettings()", file="UnknownArgumentsFixture.cs", label="Entry CommandLine.CommandLineParserSettings.CommandLineParserSettings()", span="1543-1543"];
m84_14 [cluster="CommandLine.CommandLineParser.CommandLineParser(CommandLine.CommandLineParserSettings)", file="UnknownArgumentsFixture.cs", label="Entry CommandLine.CommandLineParser.CommandLineParser(CommandLine.CommandLineParserSettings)", span="1692-1692"];
m84_0 [cluster="CommandLine.Tests.UnknownArgumentsFixture.ParseValidUnknownArguments()", file="UnknownArgumentsFixture.cs", label="Entry CommandLine.Tests.UnknownArgumentsFixture.ParseValidUnknownArguments()", span="42-42"];
m84_1 [cluster="CommandLine.Tests.UnknownArgumentsFixture.ParseValidUnknownArguments()", file="UnknownArgumentsFixture.cs", label="string[] args = { ''--plugin'', ''addonX'', ''--filename'', ''input.dat'' }", span="44-44"];
m84_2 [cluster="CommandLine.Tests.UnknownArgumentsFixture.ParseValidUnknownArguments()", file="UnknownArgumentsFixture.cs", label="var appOptions = new OptionsForAppWithPlugIns()", span="45-45"];
m84_4 [cluster="CommandLine.Tests.UnknownArgumentsFixture.ParseValidUnknownArguments()", file="UnknownArgumentsFixture.cs", label="var result1 = parser.ParseArguments(args, appOptions)", span="48-48"];
m84_8 [cluster="CommandLine.Tests.UnknownArgumentsFixture.ParseValidUnknownArguments()", file="UnknownArgumentsFixture.cs", label="var result2 = parser.ParseArguments(args, plugInXOptions)", span="54-54"];
m84_3 [cluster="CommandLine.Tests.UnknownArgumentsFixture.ParseValidUnknownArguments()", file="UnknownArgumentsFixture.cs", label="var parser = new CommandLineParser(new CommandLineParserSettings {\r\n                IgnoreUnknownArguments = true, CaseSensitive = true })", span="46-47"];
m84_6 [cluster="CommandLine.Tests.UnknownArgumentsFixture.ParseValidUnknownArguments()", file="UnknownArgumentsFixture.cs", label="appOptions.PlugInName.Should().Equal(''addonX'')", span="51-51"];
m84_5 [cluster="CommandLine.Tests.UnknownArgumentsFixture.ParseValidUnknownArguments()", file="UnknownArgumentsFixture.cs", label="result1.Should().Be.True()", span="50-50"];
m84_7 [cluster="CommandLine.Tests.UnknownArgumentsFixture.ParseValidUnknownArguments()", file="UnknownArgumentsFixture.cs", label="var plugInXOptions = new OptionsOfPlugInX()", span="53-53"];
m84_10 [cluster="CommandLine.Tests.UnknownArgumentsFixture.ParseValidUnknownArguments()", file="UnknownArgumentsFixture.cs", label="plugInXOptions.InputFileName.Should().Equal(''input.dat'')", span="57-57"];
m84_11 [cluster="CommandLine.Tests.UnknownArgumentsFixture.ParseValidUnknownArguments()", file="UnknownArgumentsFixture.cs", label="plugInXOptions.ReadOffset.Should().Equal(10L)", span="58-58"];
m84_9 [cluster="CommandLine.Tests.UnknownArgumentsFixture.ParseValidUnknownArguments()", file="UnknownArgumentsFixture.cs", label="result2.Should().Be.True()", span="56-56"];
m84_12 [cluster="CommandLine.Tests.UnknownArgumentsFixture.ParseValidUnknownArguments()", file="UnknownArgumentsFixture.cs", label="Exit CommandLine.Tests.UnknownArgumentsFixture.ParseValidUnknownArguments()", span="42-42"];
m84_19 [cluster="Unk.Equal", file="UnknownArgumentsFixture.cs", label="Entry Unk.Equal", span=""];
m84_17 [cluster="Unk.Should", file="UnknownArgumentsFixture.cs", label="Entry Unk.Should", span=""];
m84_13 [cluster="CommandLine.Tests.Mocks.OptionsForAppWithPlugIns.OptionsForAppWithPlugIns()", file="UnknownArgumentsFixture.cs", label="Entry CommandLine.Tests.Mocks.OptionsForAppWithPlugIns.OptionsForAppWithPlugIns()", span="35-35"];
m84_16 [cluster="CommandLine.CommandLineParser.ParseArguments(string[], object)", file="UnknownArgumentsFixture.cs", label="Entry CommandLine.CommandLineParser.ParseArguments(string[], object)", span="1717-1717"];
m86_7 [cluster="Humanizer.Localisation.Formatters.RussianFormatter.RussianFormatter()", file="ValueListAttributeFixture.cs", label="Entry Humanizer.Localisation.Formatters.RussianFormatter.RussianFormatter()", span="4-4"];
m86_11 [cluster="Humanizer.Localisation.Formatters.ArabicFormatter.ArabicFormatter()", file="ValueListAttributeFixture.cs", label="Entry Humanizer.Localisation.Formatters.ArabicFormatter.ArabicFormatter()", span="2-2"];
m86_19 [cluster="lambda expression", file="ValueListAttributeFixture.cs", label="Entry lambda expression", span="21-21"];
m86_0 [cluster="lambda expression", file="ValueListAttributeFixture.cs", label="Entry lambda expression", span="16-16"];
m86_1 [cluster="lambda expression", file="ValueListAttributeFixture.cs", label="new RomanianFormatter()", span="16-16"];
m86_2 [cluster="lambda expression", file="ValueListAttributeFixture.cs", label="Exit lambda expression", span="16-16"];
m86_4 [cluster="lambda expression", file="ValueListAttributeFixture.cs", label="Entry lambda expression", span="17-17"];
m86_5 [cluster="lambda expression", file="ValueListAttributeFixture.cs", label="new RussianFormatter()", span="17-17"];
m86_6 [cluster="lambda expression", file="ValueListAttributeFixture.cs", label="Exit lambda expression", span="17-17"];
m86_8 [cluster="lambda expression", file="ValueListAttributeFixture.cs", label="Entry lambda expression", span="18-18"];
m86_9 [cluster="lambda expression", file="ValueListAttributeFixture.cs", label="new ArabicFormatter()", span="18-18"];
m86_10 [cluster="lambda expression", file="ValueListAttributeFixture.cs", label="Exit lambda expression", span="18-18"];
m86_12 [cluster="lambda expression", file="ValueListAttributeFixture.cs", label="Entry lambda expression", span="19-19"];
m86_13 [cluster="lambda expression", file="ValueListAttributeFixture.cs", label="new CzechSlovakPolishFormatter()", span="19-19"];
m86_14 [cluster="lambda expression", file="ValueListAttributeFixture.cs", label="Exit lambda expression", span="19-19"];
m86_16 [cluster="lambda expression", file="ValueListAttributeFixture.cs", label="Entry lambda expression", span="20-20"];
m86_17 [cluster="lambda expression", file="ValueListAttributeFixture.cs", label="new CzechSlovakPolishFormatter()", span="20-20"];
m86_18 [cluster="lambda expression", file="ValueListAttributeFixture.cs", label="Exit lambda expression", span="20-20"];
m86_20 [cluster="lambda expression", file="ValueListAttributeFixture.cs", label="new CzechSlovakPolishFormatter()", span="21-21"];
m86_21 [cluster="lambda expression", file="ValueListAttributeFixture.cs", label="Exit lambda expression", span="21-21"];
m86_15 [cluster="Humanizer.Localisation.Formatters.CzechSlovakPolishFormatter.CzechSlovakPolishFormatter()", file="ValueListAttributeFixture.cs", label="Entry Humanizer.Localisation.Formatters.CzechSlovakPolishFormatter.CzechSlovakPolishFormatter()", span="2-2"];
m86_3 [cluster="Humanizer.Localisation.Formatters.RomanianFormatter.RomanianFormatter()", file="ValueListAttributeFixture.cs", label="Entry Humanizer.Localisation.Formatters.RomanianFormatter.RomanianFormatter()", span="2-2"];
m87_14 [cluster="CommandLine.ICommandLineParser.ParseArguments(string[], object)", file="ValueListAttributeParsingFixture.cs", label="Entry CommandLine.ICommandLineParser.ParseArguments(string[], object)", span="1471-1471"];
m87_20 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemInsideBounds()", file="ValueListAttributeParsingFixture.cs", label="Entry CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemInsideBounds()", span="61-61"];
m87_21 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemInsideBounds()", file="ValueListAttributeParsingFixture.cs", label="var options = new OptionsWithValueListMaximumThree()", span="63-63"];
m87_22 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemInsideBounds()", file="ValueListAttributeParsingFixture.cs", label="Result = base.Parser.ParseArguments(new string[] { ''file.a'', ''file.b'', ''file.c'' }, options)", span="64-64"];
m87_24 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemInsideBounds()", file="ValueListAttributeParsingFixture.cs", label="options.InputFilenames[0].Should().Equal(''file.a'')", span="67-67"];
m87_25 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemInsideBounds()", file="ValueListAttributeParsingFixture.cs", label="options.InputFilenames[1].Should().Equal(''file.b'')", span="68-68"];
m87_26 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemInsideBounds()", file="ValueListAttributeParsingFixture.cs", label="options.InputFilenames[2].Should().Equal(''file.c'')", span="69-69"];
m87_27 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemInsideBounds()", file="ValueListAttributeParsingFixture.cs", label="options.OutputFile.Should().Be.Null()", span="70-70"];
m87_28 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemInsideBounds()", file="ValueListAttributeParsingFixture.cs", label="options.Overwrite.Should().Be.False()", span="71-71"];
m87_29 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemInsideBounds()", file="ValueListAttributeParsingFixture.cs", label="Console.WriteLine(options)", span="72-72"];
m87_23 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemInsideBounds()", file="ValueListAttributeParsingFixture.cs", label="ResultShouldBeTrue()", span="66-66"];
m87_30 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemInsideBounds()", file="ValueListAttributeParsingFixture.cs", label="Exit CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemInsideBounds()", span="61-61"];
m87_39 [cluster="CommandLine.Tests.CommandLineParserBaseFixture.ResultShouldBeFalse()", file="ValueListAttributeParsingFixture.cs", label="Entry CommandLine.Tests.CommandLineParserBaseFixture.ResultShouldBeFalse()", span="64-64"];
m87_19 [cluster="System.Console.WriteLine(object)", file="ValueListAttributeParsingFixture.cs", label="Entry System.Console.WriteLine(object)", span="0-0"];
m87_33 [cluster="Unk.False", file="ValueListAttributeParsingFixture.cs", label="Entry Unk.False", span=""];
m87_34 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemOutsideBounds()", file="ValueListAttributeParsingFixture.cs", label="Entry CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemOutsideBounds()", span="76-76"];
m87_35 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemOutsideBounds()", file="ValueListAttributeParsingFixture.cs", label="var options = new OptionsWithValueListMaximumThree()", span="78-78"];
m87_36 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemOutsideBounds()", file="ValueListAttributeParsingFixture.cs", label="Result = base.Parser.ParseArguments(\r\n                    new string[] { ''file.a'', ''file.b'', ''file.c'', ''file.d'' }, options)", span="79-80"];
m87_37 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemOutsideBounds()", file="ValueListAttributeParsingFixture.cs", label="ResultShouldBeFalse()", span="82-82"];
m87_38 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemOutsideBounds()", file="ValueListAttributeParsingFixture.cs", label="Exit CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemOutsideBounds()", span="76-76"];
m87_31 [cluster="CommandLine.Tests.Mocks.OptionsWithValueListMaximumThree.OptionsWithValueListMaximumThree()", file="ValueListAttributeParsingFixture.cs", label="Entry CommandLine.Tests.Mocks.OptionsWithValueListMaximumThree.OptionsWithValueListMaximumThree()", span="35-35"];
m87_18 [cluster="Unk.True", file="ValueListAttributeParsingFixture.cs", label="Entry Unk.True", span=""];
m87_48 [cluster="Unk.Zero", file="ValueListAttributeParsingFixture.cs", label="Entry Unk.Zero", span=""];
m87_13 [cluster="CommandLine.Tests.Mocks.SimpleOptionsWithValueList.SimpleOptionsWithValueList()", file="ValueListAttributeParsingFixture.cs", label="Entry CommandLine.Tests.Mocks.SimpleOptionsWithValueList.SimpleOptionsWithValueList()", span="35-35"];
m87_0 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeParsingFixture()", file="ValueListAttributeParsingFixture.cs", label="Entry CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeParsingFixture()", span="40-40"];
m87_1 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeParsingFixture()", file="ValueListAttributeParsingFixture.cs", label="Exit CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeParsingFixture()", span="40-40"];
m87_32 [cluster="Unk.Null", file="ValueListAttributeParsingFixture.cs", label="Entry Unk.Null", span=""];
m87_47 [cluster="CommandLine.Tests.Mocks.OptionsWithValueListMaximumZero.OptionsWithValueListMaximumZero()", file="ValueListAttributeParsingFixture.cs", label="Entry CommandLine.Tests.Mocks.OptionsWithValueListMaximumZero.OptionsWithValueListMaximumZero()", span="36-36"];
m87_17 [cluster="Unk.Equal", file="ValueListAttributeParsingFixture.cs", label="Entry Unk.Equal", span=""];
m87_2 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeIsolatesNonOptionValues()", file="ValueListAttributeParsingFixture.cs", label="Entry CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeIsolatesNonOptionValues()", span="45-45"];
m87_3 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeIsolatesNonOptionValues()", file="ValueListAttributeParsingFixture.cs", label="var options = new SimpleOptionsWithValueList()", span="47-47"];
m87_4 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeIsolatesNonOptionValues()", file="ValueListAttributeParsingFixture.cs", label="Result = base.Parser.ParseArguments(\r\n                new string[] { ''--switch'', ''file1.ext'', ''file2.ext'', ''file3.ext'', ''-s'', ''out.ext'' }, options)", span="48-49"];
m87_6 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeIsolatesNonOptionValues()", file="ValueListAttributeParsingFixture.cs", label="options.Items[0].Should().Equal(''file1.ext'')", span="52-52"];
m87_7 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeIsolatesNonOptionValues()", file="ValueListAttributeParsingFixture.cs", label="options.Items[1].Should().Equal(''file2.ext'')", span="53-53"];
m87_8 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeIsolatesNonOptionValues()", file="ValueListAttributeParsingFixture.cs", label="options.Items[2].Should().Equal(''file3.ext'')", span="54-54"];
m87_9 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeIsolatesNonOptionValues()", file="ValueListAttributeParsingFixture.cs", label="options.StringValue.Should().Equal(''out.ext'')", span="55-55"];
m87_10 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeIsolatesNonOptionValues()", file="ValueListAttributeParsingFixture.cs", label="options.BooleanValue.Should().Be.True()", span="56-56"];
m87_11 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeIsolatesNonOptionValues()", file="ValueListAttributeParsingFixture.cs", label="Console.WriteLine(options)", span="57-57"];
m87_5 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeIsolatesNonOptionValues()", file="ValueListAttributeParsingFixture.cs", label="ResultShouldBeTrue()", span="51-51"];
m87_12 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeIsolatesNonOptionValues()", file="ValueListAttributeParsingFixture.cs", label="Exit CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeIsolatesNonOptionValues()", span="45-45"];
m87_16 [cluster="Unk.Should", file="ValueListAttributeParsingFixture.cs", label="Entry Unk.Should", span=""];
m87_49 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemSetToZeroFailes()", file="ValueListAttributeParsingFixture.cs", label="Entry CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemSetToZeroFailes()", span="97-97"];
m87_50 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemSetToZeroFailes()", file="ValueListAttributeParsingFixture.cs", label="var options = new OptionsWithValueListMaximumZero()", span="99-99"];
m87_51 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemSetToZeroFailes()", file="ValueListAttributeParsingFixture.cs", label="Result = base.Parser.ParseArguments(new string[] { ''some'', ''value'' }, options)", span="101-101"];
m87_52 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemSetToZeroFailes()", file="ValueListAttributeParsingFixture.cs", label="ResultShouldBeFalse()", span="102-102"];
m87_53 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemSetToZeroFailes()", file="ValueListAttributeParsingFixture.cs", label="Exit CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemSetToZeroFailes()", span="97-97"];
m87_40 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemSetToZeroSucceeds()", file="ValueListAttributeParsingFixture.cs", label="Entry CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemSetToZeroSucceeds()", span="86-86"];
m87_41 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemSetToZeroSucceeds()", file="ValueListAttributeParsingFixture.cs", label="var options = new OptionsWithValueListMaximumZero()", span="88-88"];
m87_42 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemSetToZeroSucceeds()", file="ValueListAttributeParsingFixture.cs", label="Result = base.Parser.ParseArguments(new string[] { }, options)", span="89-89"];
m87_44 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemSetToZeroSucceeds()", file="ValueListAttributeParsingFixture.cs", label="options.Junk.Should().Count.Zero()", span="92-92"];
m87_45 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemSetToZeroSucceeds()", file="ValueListAttributeParsingFixture.cs", label="Console.WriteLine(options)", span="93-93"];
m87_43 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemSetToZeroSucceeds()", file="ValueListAttributeParsingFixture.cs", label="ResultShouldBeTrue()", span="91-91"];
m87_46 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemSetToZeroSucceeds()", file="ValueListAttributeParsingFixture.cs", label="Exit CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemSetToZeroSucceeds()", span="86-86"];
m87_15 [cluster="CommandLine.Tests.CommandLineParserBaseFixture.ResultShouldBeTrue()", file="ValueListAttributeParsingFixture.cs", label="Entry CommandLine.Tests.CommandLineParserBaseFixture.ResultShouldBeTrue()", span="58-58"];
m87_54 [file="ValueListAttributeParsingFixture.cs", label="CommandLine.Tests.ValueListAttributeParsingFixture", span=""];
m0_2 -> m0_16  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_3 -> m0_20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_3 -> m0_24  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_4 -> m0_28  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_0 -> m5_26  [color=green, key=1, label=int, style=dashed];
m5_0 -> m5_27  [color=green, key=1, label=int, style=dashed];
m5_0 -> m5_28  [color=green, key=1, label=int, style=dashed];
m5_0 -> m5_29  [color=green, key=1, label=int, style=dashed];
m5_0 -> m5_34  [color=green, key=1, label=int, style=dashed];
m5_0 -> m5_3  [color=darkseagreen4, key=1, label=int, style=dashed];
m5_0 -> m5_4  [color=darkseagreen4, key=1, label=int, style=dashed];
m5_0 -> m5_9  [color=darkseagreen4, key=1, label=int, style=dashed];
m5_1 -> m5_13  [color=darkseagreen4, key=1, label=writer, style=dashed];
m5_1 -> m5_4  [color=darkseagreen4, key=1, label=writer, style=dashed];
m5_2 -> m5_13  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m5_5 -> m5_29  [color=green, key=1, label=parts, style=dashed];
m5_5 -> m5_34  [color=green, key=1, label=parts, style=dashed];
m5_5 -> m5_20  [color=green, key=1, label=parts, style=dashed];
m5_5 -> m5_30  [color=green, key=1, label=parts, style=dashed];
m5_5 -> m5_33  [color=green, key=1, label=parts, style=dashed];
m5_5 -> m5_35  [color=green, key=1, label=parts, style=dashed];
m5_5 -> m5_17  [color=darkseagreen4, key=1, label=parts, style=dashed];
m5_5 -> m5_24  [color=darkseagreen4, key=1, label=parts, style=dashed];
m5_5 -> m5_8  [color=darkseagreen4, key=1, label=parts, style=dashed];
m5_5 -> m5_14  [color=darkseagreen4, key=1, label=parts, style=dashed];
m5_6 -> m5_8  [color=darkseagreen4, key=1, label=billions, style=dashed];
m5_103 -> m5_107  [color=darkseagreen4, key=1, label=expectedError, style=dashed];
m5_103 -> m5_116  [color=darkseagreen4, key=1, label=expectedError, style=dashed];
m5_107 -> m5_115  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_105 -> m5_107  [color=darkseagreen4, key=1, label=result, style=dashed];
m5_106 -> m5_112  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_169 -> m5_171  [color=darkseagreen4, key=1, label=lines, style=dashed];
m5_169 -> m5_172  [color=darkseagreen4, key=1, label=lines, style=dashed];
m5_169 -> m5_173  [color=darkseagreen4, key=1, label=lines, style=dashed];
m5_169 -> m5_174  [color=darkseagreen4, key=1, label=lines, style=dashed];
m5_169 -> m5_175  [color=darkseagreen4, key=1, label=lines, style=dashed];
m5_169 -> m5_176  [color=darkseagreen4, key=1, label=lines, style=dashed];
m5_169 -> m5_177  [color=darkseagreen4, key=1, label=lines, style=dashed];
m5_169 -> m5_178  [color=darkseagreen4, key=1, label=lines, style=dashed];
m5_251 -> m5_253  [color=darkseagreen4, key=1, label=lines, style=dashed];
m5_251 -> m5_254  [color=darkseagreen4, key=1, label=lines, style=dashed];
m5_251 -> m5_255  [color=darkseagreen4, key=1, label=lines, style=dashed];
m5_251 -> m5_256  [color=darkseagreen4, key=1, label=lines, style=dashed];
m5_251 -> m5_257  [color=darkseagreen4, key=1, label=lines, style=dashed];
m5_251 -> m5_258  [color=darkseagreen4, key=1, label=lines, style=dashed];
m5_251 -> m5_259  [color=darkseagreen4, key=1, label=lines, style=dashed];
m5_251 -> m5_260  [color=darkseagreen4, key=1, label=lines, style=dashed];
m5_251 -> m5_261  [color=darkseagreen4, key=1, label=lines, style=dashed];
m5_251 -> m5_262  [color=darkseagreen4, key=1, label=lines, style=dashed];
m5_251 -> m5_263  [color=darkseagreen4, key=1, label=lines, style=dashed];
m5_251 -> m5_264  [color=darkseagreen4, key=1, label=lines, style=dashed];
m5_251 -> m5_265  [color=darkseagreen4, key=1, label=lines, style=dashed];
m5_251 -> m5_266  [color=darkseagreen4, key=1, label=lines, style=dashed];
m5_48 -> m5_54  [color=green, key=1, label=int, style=dashed];
m5_48 -> m5_69  [color=green, key=1, label=int, style=dashed];
m5_48 -> m5_67  [color=darkseagreen4, key=1, label=int, style=dashed];
m5_48 -> m5_68  [color=darkseagreen4, key=1, label=int, style=dashed];
m5_48 -> m5_73  [color=darkseagreen4, key=1, label=int, style=dashed];
m5_48 -> m5_74  [color=darkseagreen4, key=1, label=int, style=dashed];
m5_49 -> m5_53  [color=green, key=1, label=billions, style=dashed];
m5_51 -> m5_54  [color=green, key=1, label=int, style=dashed];
m5_51 -> m5_67  [color=green, key=1, label=int, style=dashed];
m5_51 -> m5_68  [color=green, key=1, label=int, style=dashed];
m5_51 -> m5_69  [color=green, key=1, label=int, style=dashed];
m5_51 -> m5_73  [color=green, key=1, label=int, style=dashed];
m5_51 -> m5_74  [color=green, key=1, label=int, style=dashed];
m5_66 -> m5_68  [color=green, key=1, label=int, style=dashed];
m5_66 -> m5_69  [color=green, key=1, label=int, style=dashed];
m5_66 -> m5_73  [color=green, key=1, label=int, style=dashed];
m5_66 -> m5_74  [color=green, key=1, label=int, style=dashed];
m5_22 -> m5_24  [color=green, key=1, label=hundreds, style=dashed];
m5_86 -> m5_90  [color=darkseagreen4, key=1, label=expectedOptions, style=dashed];
m5_90 -> m5_92  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_88 -> m5_90  [color=darkseagreen4, key=1, label=result, style=dashed];
m5_59 -> m5_61  [color=darkseagreen4, key=1, label=thousands, style=dashed];
m5_60 -> m5_68  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m5_63 -> m5_65  [color=green, key=1, label=hundreds, style=dashed];
m5_62 -> m5_69  [color=green, key=1, label=int, style=dashed];
m5_62 -> m5_67  [color=darkseagreen4, key=1, label=int, style=dashed];
m5_62 -> m5_68  [color=darkseagreen4, key=1, label=int, style=dashed];
m5_62 -> m5_73  [color=darkseagreen4, key=1, label=int, style=dashed];
m5_62 -> m5_74  [color=darkseagreen4, key=1, label=int, style=dashed];
m5_131 -> m5_135  [color=darkseagreen4, key=1, label=expectedError, style=dashed];
m5_131 -> m5_142  [color=darkseagreen4, key=1, label=expectedError, style=dashed];
m5_135 -> m5_141  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_133 -> m5_135  [color=darkseagreen4, key=1, label=result, style=dashed];
m5_134 -> m5_138  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_188 -> m5_190  [color=darkseagreen4, key=1, label=lines, style=dashed];
m5_188 -> m5_191  [color=darkseagreen4, key=1, label=lines, style=dashed];
m5_188 -> m5_192  [color=darkseagreen4, key=1, label=lines, style=dashed];
m5_188 -> m5_193  [color=darkseagreen4, key=1, label=lines, style=dashed];
m5_188 -> m5_194  [color=darkseagreen4, key=1, label=lines, style=dashed];
m5_188 -> m5_195  [color=darkseagreen4, key=1, label=lines, style=dashed];
m5_12 -> m5_14  [color=darkseagreen4, key=1, label=millions, style=dashed];
m5_25 -> m5_27  [color=green, key=1, label=int, style=dashed];
m5_25 -> m5_28  [color=green, key=1, label=int, style=dashed];
m5_25 -> m5_29  [color=green, key=1, label=int, style=dashed];
m5_25 -> m5_34  [color=green, key=1, label=int, style=dashed];
m5_70 -> m5_72  [color=darkseagreen4, key=1, label=units, style=dashed];
m5_82 -> m5_20  [color=green, key=1, label="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter", style=dashed];
m5_82 -> m5_65  [color=green, key=1, label="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter", style=dashed];
m5_82 -> m5_24  [color=darkseagreen4, key=1, label="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter", style=dashed];
m5_82 -> m5_4  [color=darkseagreen4, key=1, label="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter", style=dashed];
m5_82 -> m5_8  [color=darkseagreen4, key=1, label="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter", style=dashed];
m5_82 -> m5_14  [color=darkseagreen4, key=1, label="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter", style=dashed];
m5_82 -> m5_53  [color=darkseagreen4, key=1, label="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter", style=dashed];
m5_82 -> m5_58  [color=darkseagreen4, key=1, label="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter", style=dashed];
m5_82 -> m5_61  [color=darkseagreen4, key=1, label="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter", style=dashed];
m5_82 -> m5_80  [color=darkseagreen4, key=1, label="Humanizer.Localisation.NumberToWords.GermanNumberToWordsConverter", style=dashed];
m5_221 -> m5_223  [color=darkseagreen4, key=1, label=lines, style=dashed];
m5_221 -> m5_224  [color=darkseagreen4, key=1, label=lines, style=dashed];
m5_221 -> m5_225  [color=darkseagreen4, key=1, label=lines, style=dashed];
m5_221 -> m5_226  [color=darkseagreen4, key=1, label=lines, style=dashed];
m5_221 -> m5_227  [color=darkseagreen4, key=1, label=lines, style=dashed];
m5_221 -> m5_228  [color=darkseagreen4, key=1, label=lines, style=dashed];
m5_221 -> m5_229  [color=darkseagreen4, key=1, label=lines, style=dashed];
m5_221 -> m5_230  [color=darkseagreen4, key=1, label=lines, style=dashed];
m5_221 -> m5_231  [color=darkseagreen4, key=1, label=lines, style=dashed];
m5_30 -> m5_37  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m5_31 -> m5_33  [color=green, key=1, label=units, style=dashed];
m5_39 -> m5_79  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_39 -> m5_80  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_45 -> m5_69  [color=green, key=1, label=parts, style=dashed];
m5_45 -> m5_47  [color=green, key=1, label=parts, style=dashed];
m5_45 -> m5_53  [color=green, key=1, label=parts, style=dashed];
m5_45 -> m5_58  [color=green, key=1, label=parts, style=dashed];
m5_45 -> m5_61  [color=green, key=1, label=parts, style=dashed];
m5_45 -> m5_65  [color=green, key=1, label=parts, style=dashed];
m5_45 -> m5_72  [color=green, key=1, label=parts, style=dashed];
m5_45 -> m5_73  [color=green, key=1, label=parts, style=dashed];
m5_54 -> m5_58  [color=green, key=1, label=millions, style=dashed];
m5_75 -> m5_79  [color=darkseagreen4, key=1, label=expectedOptions, style=dashed];
m5_77 -> m5_79  [color=darkseagreen4, key=1, label=result, style=dashed];
m5_150 -> m5_152  [color=darkseagreen4, key=1, label=lines, style=dashed];
m5_151 -> m5_160  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_96 -> m5_99  [color=darkseagreen4, key=1, label=expectedOptions, style=dashed];
m5_15 -> m5_26  [color=green, key=1, label=int, style=dashed];
m5_15 -> m5_27  [color=green, key=1, label=int, style=dashed];
m5_15 -> m5_28  [color=green, key=1, label=int, style=dashed];
m5_15 -> m5_29  [color=green, key=1, label=int, style=dashed];
m5_15 -> m5_34  [color=green, key=1, label=int, style=dashed];
m5_16 -> m5_26  [color=darkseagreen4, key=1, label=writer, style=dashed];
m5_16 -> m5_19  [color=darkseagreen4, key=1, label=writer, style=dashed];
m5_17 -> m5_26  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m5_18 -> m5_20  [color=green, key=1, label=thousands, style=dashed];
m5_21 -> m5_26  [color=green, key=1, label=int, style=dashed];
m5_21 -> m5_27  [color=green, key=1, label=int, style=dashed];
m5_21 -> m5_28  [color=green, key=1, label=int, style=dashed];
m5_21 -> m5_29  [color=green, key=1, label=int, style=dashed];
m5_21 -> m5_34  [color=green, key=1, label=int, style=dashed];
m5_79 -> m5_82  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_9 -> m5_26  [color=green, key=1, label=int, style=dashed];
m5_9 -> m5_27  [color=green, key=1, label=int, style=dashed];
m5_9 -> m5_28  [color=green, key=1, label=int, style=dashed];
m5_9 -> m5_29  [color=green, key=1, label=int, style=dashed];
m5_9 -> m5_34  [color=green, key=1, label=int, style=dashed];
m5_9 -> m5_9  [color=darkseagreen4, key=1, label=int, style=dashed];
m5_200 -> m5_203  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_206 -> m5_208  [color=darkseagreen4, key=1, label=lines, style=dashed];
m5_207 -> m5_213  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_271 -> m5_13  [color=darkseagreen4, key=1, label=writer, style=dashed];
m5_272 -> m5_26  [color=darkseagreen4, key=1, label=writer, style=dashed];
m5_273 -> m5_37  [color=darkseagreen4, key=1, label=writer, style=dashed];
m5_274 -> m5_116  [color=darkseagreen4, key=1, label=expectedError, style=dashed];
m5_276 -> m5_142  [color=darkseagreen4, key=1, label=expectedError, style=dashed];
m19_23 -> m19_26  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m19_30 -> m19_33  [color=darkseagreen4, key=1, label=expectedTokens, style=dashed];
m19_31 -> m19_38  [color=darkseagreen4, key=1, label=string, style=dashed];
m19_1 -> m19_4  [color=darkseagreen4, key=1, label=expectedTokens, style=dashed];
m19_2 -> m19_17  [color=darkseagreen4, key=1, label=specs, style=dashed];
m19_3 -> m19_16  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m19_41 -> m19_17  [color=darkseagreen4, key=1, label=specs, style=dashed];
m19_42 -> m19_27  [color=darkseagreen4, key=1, label=specs, style=dashed];
m22_5 -> m22_11  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m22_4 -> m22_12  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m22_30 -> m22_32  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m22_30 -> m22_36  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m22_16 -> m22_26  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m22_16 -> m22_19  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m22_16 -> m22_30  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m22_16 -> m22_33  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m22_17 -> m22_25  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m22_17 -> m22_19  [color=darkseagreen4, key=1, label=nameIndex, style=dashed];
m22_17 -> m22_30  [color=darkseagreen4, key=1, label=nameIndex, style=dashed];
m22_17 -> m22_33  [color=darkseagreen4, key=1, label=nameIndex, style=dashed];
m22_19 -> m22_29  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m22_19 -> m22_39  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m22_0 -> m22_5  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m22_0 -> m22_12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m22_1 -> m22_4  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m22_1 -> m22_1  [color=darkseagreen4, key=1, label=tseq, style=dashed];
m22_42 -> m22_5  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m22_42 -> m22_12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m22_43 -> m22_5  [color=darkseagreen4, key=1, label="System.Func<string, Maybe<CommandLine.Core.TypeDescriptor>>", style=dashed];
m22_44 -> m22_12  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m22_45 -> m22_26  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m22_46 -> m22_30  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m22_46 -> m22_33  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m22_47 -> m22_30  [color=darkseagreen4, key=1, label="CommandLine.Core.TypeDescriptor", style=dashed];
m22_48 -> m22_30  [color=darkseagreen4, key=1, label=nameIndex, style=dashed];
m22_48 -> m22_33  [color=darkseagreen4, key=1, label=nameIndex, style=dashed];
m29_73 -> m29_78  [color=darkseagreen4, key=1, label=requiredRulesAllMet, style=dashed];
m29_74 -> m29_76  [color=darkseagreen4, key=1, label=option, style=dashed];
m29_77 -> m29_78  [color=darkseagreen4, key=1, label=requiredRulesAllMet, style=dashed];
m29_10 -> m29_14  [color=darkseagreen4, key=1, label=list, style=dashed];
m29_13 -> m29_23  [color=darkseagreen4, key=1, label=map, style=dashed];
m29_14 -> m29_17  [color=darkseagreen4, key=1, label=pair, style=dashed];
m29_28 -> m29_30  [color=darkseagreen4, key=1, label="System.Collections.Generic.IList<CommandLine.Helpers.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>", style=dashed];
m29_28 -> m29_32  [color=darkseagreen4, key=1, label=object, style=dashed];
m29_29 -> m29_36  [color=darkseagreen4, key=1, label=map, style=dashed];
m29_30 -> m29_32  [color=darkseagreen4, key=1, label=verb, style=dashed];
m29_30 -> m29_33  [color=darkseagreen4, key=1, label=verb, style=dashed];
m29_52 -> m29_57  [color=darkseagreen4, key=1, label=object, style=dashed];
m29_52 -> m29_58  [color=darkseagreen4, key=1, label=object, style=dashed];
m29_52 -> m29_63  [color=darkseagreen4, key=1, label="bool?", style=dashed];
m29_52 -> m29_65  [color=darkseagreen4, key=1, label="bool?", style=dashed];
m29_59 -> m29_67  [color=darkseagreen4, key=1, label=parserState, style=dashed];
m29_62 -> m29_67  [color=darkseagreen4, key=1, label=error, style=dashed];
m29_56 -> m29_58  [color=darkseagreen4, key=1, label=property, style=dashed];
m29_82 -> m29_84  [color=darkseagreen4, key=1, label=option, style=dashed];
m29_85 -> m29_87  [color=darkseagreen4, key=1, label=info, style=dashed];
m29_91 -> m29_94  [color=darkseagreen4, key=1, label="CommandLine.Infrastructure.OptionInfo", style=dashed];
m29_92 -> m29_94  [color=darkseagreen4, key=1, label=setName, style=dashed];
m29_92 -> m29_95  [color=darkseagreen4, key=1, label=setName, style=dashed];
m29_105 -> m29_5  [color=darkseagreen4, key=1, label="CommandLine.Infrastructure.OptionMap", style=dashed];
m29_105 -> m29_43  [color=darkseagreen4, key=1, label="CommandLine.Infrastructure.OptionMap", style=dashed];
m29_105 -> m29_48  [color=darkseagreen4, key=1, label="CommandLine.Infrastructure.OptionMap", style=dashed];
m29_105 -> m29_49  [color=darkseagreen4, key=1, label="CommandLine.Infrastructure.OptionMap", style=dashed];
m29_105 -> m29_74  [color=darkseagreen4, key=1, label="CommandLine.Infrastructure.OptionMap", style=dashed];
m29_105 -> m29_76  [color=darkseagreen4, key=1, label="CommandLine.Infrastructure.OptionMap", style=dashed];
m29_105 -> m29_80  [color=darkseagreen4, key=1, label="CommandLine.Infrastructure.OptionMap", style=dashed];
m29_105 -> m29_82  [color=darkseagreen4, key=1, label="CommandLine.Infrastructure.OptionMap", style=dashed];
m29_105 -> m29_84  [color=darkseagreen4, key=1, label="CommandLine.Infrastructure.OptionMap", style=dashed];
m29_105 -> m29_85  [color=darkseagreen4, key=1, label="CommandLine.Infrastructure.OptionMap", style=dashed];
m29_105 -> m29_87  [color=darkseagreen4, key=1, label="CommandLine.Infrastructure.OptionMap", style=dashed];
m29_105 -> m29_93  [color=darkseagreen4, key=1, label="CommandLine.Infrastructure.OptionMap", style=dashed];
m29_105 -> m29_94  [color=darkseagreen4, key=1, label="CommandLine.Infrastructure.OptionMap", style=dashed];
m29_105 -> m29_95  [color=darkseagreen4, key=1, label="CommandLine.Infrastructure.OptionMap", style=dashed];
m29_106 -> m29_103  [color=darkseagreen4, key=1, label="CommandLine.Infrastructure.OptionMap.MutuallyExclusiveInfo", style=dashed];
m31_27 -> m31_34  [color=darkseagreen4, key=1, label="CommandLine.ParserResultType", style=dashed];
m37_1 -> m37_4  [color=darkseagreen4, key=1, label=expected, style=dashed];
m39_30 -> m39_33  [color=darkseagreen4, key=1, label=options, style=dashed];
m39_34 -> m39_37  [color=darkseagreen4, key=1, label=options, style=dashed];
m39_50 -> m39_53  [color=darkseagreen4, key=1, label=options, style=dashed];
m39_54 -> m39_57  [color=darkseagreen4, key=1, label=options, style=dashed];
m39_3 -> m39_6  [color=darkseagreen4, key=1, label=options, style=dashed];
m39_7 -> m39_10  [color=darkseagreen4, key=1, label=options, style=dashed];
m39_70 -> m39_73  [color=darkseagreen4, key=1, label=options, style=dashed];
m39_74 -> m39_77  [color=darkseagreen4, key=1, label=options, style=dashed];
m39_74 -> m39_78  [color=darkseagreen4, key=1, label=options, style=dashed];
m39_74 -> m39_79  [color=darkseagreen4, key=1, label=options, style=dashed];
m39_74 -> m39_80  [color=darkseagreen4, key=1, label=options, style=dashed];
m39_82 -> m39_5  [color=darkseagreen4, key=1, label="CommandLine.Tests.NullableTypesParsingFixture", style=dashed];
m39_82 -> m39_9  [color=darkseagreen4, key=1, label="CommandLine.Tests.NullableTypesParsingFixture", style=dashed];
m39_82 -> m39_21  [color=darkseagreen4, key=1, label="CommandLine.Tests.NullableTypesParsingFixture", style=dashed];
m39_82 -> m39_27  [color=darkseagreen4, key=1, label="CommandLine.Tests.NullableTypesParsingFixture", style=dashed];
m39_82 -> m39_32  [color=darkseagreen4, key=1, label="CommandLine.Tests.NullableTypesParsingFixture", style=dashed];
m39_82 -> m39_36  [color=darkseagreen4, key=1, label="CommandLine.Tests.NullableTypesParsingFixture", style=dashed];
m39_82 -> m39_42  [color=darkseagreen4, key=1, label="CommandLine.Tests.NullableTypesParsingFixture", style=dashed];
m39_82 -> m39_47  [color=darkseagreen4, key=1, label="CommandLine.Tests.NullableTypesParsingFixture", style=dashed];
m39_82 -> m39_52  [color=darkseagreen4, key=1, label="CommandLine.Tests.NullableTypesParsingFixture", style=dashed];
m39_82 -> m39_56  [color=darkseagreen4, key=1, label="CommandLine.Tests.NullableTypesParsingFixture", style=dashed];
m39_82 -> m39_62  [color=darkseagreen4, key=1, label="CommandLine.Tests.NullableTypesParsingFixture", style=dashed];
m39_82 -> m39_67  [color=darkseagreen4, key=1, label="CommandLine.Tests.NullableTypesParsingFixture", style=dashed];
m39_82 -> m39_72  [color=darkseagreen4, key=1, label="CommandLine.Tests.NullableTypesParsingFixture", style=dashed];
m39_82 -> m39_76  [color=darkseagreen4, key=1, label="CommandLine.Tests.NullableTypesParsingFixture", style=dashed];
m46_0 -> m46_3  [color=darkseagreen4, key=1, label=string, style=dashed];
m48_0 -> m48_5  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m48_0 -> m48_12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m48_1 -> m48_4  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m48_1 -> m48_1  [color=darkseagreen4, key=1, label=tseq, style=dashed];
m48_5 -> m48_11  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m48_4 -> m48_12  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m48_30 -> m48_30  [color=darkseagreen4, key=1, label="CommandLine.Core.TypeDescriptor", style=dashed];
m48_30 -> m48_32  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m48_30 -> m48_36  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m48_16 -> m48_26  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m48_16 -> m48_19  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m48_16 -> m48_30  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m48_16 -> m48_33  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m48_17 -> m48_25  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m48_17 -> m48_19  [color=darkseagreen4, key=1, label=nameIndex, style=dashed];
m48_17 -> m48_30  [color=darkseagreen4, key=1, label=nameIndex, style=dashed];
m48_17 -> m48_33  [color=darkseagreen4, key=1, label=nameIndex, style=dashed];
m48_19 -> m48_19  [color=darkseagreen4, key=1, label="CommandLine.Core.TypeDescriptor", style=dashed];
m48_19 -> m48_29  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m48_19 -> m48_30  [color=darkseagreen4, key=1, label="CommandLine.Core.TypeDescriptor", style=dashed];
m48_19 -> m48_39  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m48_42 -> m48_5  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m48_42 -> m48_12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m48_43 -> m48_5  [color=darkseagreen4, key=1, label="System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>", style=dashed];
m48_44 -> m48_12  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m48_45 -> m48_26  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m48_46 -> m48_30  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m48_46 -> m48_33  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m48_47 -> m48_30  [color=darkseagreen4, key=1, label="CommandLine.Core.TypeDescriptor", style=dashed];
m48_48 -> m48_30  [color=darkseagreen4, key=1, label=nameIndex, style=dashed];
m48_48 -> m48_33  [color=darkseagreen4, key=1, label=nameIndex, style=dashed];
m62_40 -> m62_42  [color=green, key=1, label="int[]", style=dashed];
m62_41 -> m62_44  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m62_159 -> m62_161  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m62_160 -> m62_163  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m62_235 -> m62_238  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m62_234 -> m62_236  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m62_276 -> m62_279  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m62_275 -> m62_277  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m62_151 -> m62_153  [color=darkseagreen4, key=1, label="long[]", style=dashed];
m62_152 -> m62_155  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m62_3 -> m62_12  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m62_143 -> m62_145  [color=darkseagreen4, key=1, label="long[]", style=dashed];
m62_144 -> m62_147  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m62_243 -> m62_247  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m62_242 -> m62_244  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m62_55 -> m62_57  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m62_56 -> m62_59  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m62_1 -> m62_13  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m62_2 -> m62_4  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m62_266 -> m62_268  [color=darkseagreen4, key=1, label=string, style=dashed];
m62_267 -> m62_271  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m62_209 -> m62_212  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m62_208 -> m62_210  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m62_31 -> m62_33  [color=darkseagreen4, key=1, label="int[]", style=dashed];
m62_32 -> m62_36  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m62_226 -> m62_229  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m62_225 -> m62_227  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m62_176 -> m62_181  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m62_176 -> m62_185  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m62_177 -> m62_180  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m62_181 -> m62_184  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m62_217 -> m62_221  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m62_216 -> m62_218  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m62_100 -> m62_102  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
m62_101 -> m62_105  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m62_102 -> m62_102  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
m62_128 -> m62_131  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m62_127 -> m62_129  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m62_283 -> m62_285  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeOptionWithRequiredValue", style=dashed];
m62_284 -> m62_287  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m62_85 -> m62_88  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m62_84 -> m62_86  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m62_167 -> m62_170  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m62_169 -> m62_173  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m62_169 -> m62_176  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m62_260 -> m62_263  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m62_259 -> m62_261  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m62_65 -> m62_70  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m62_64 -> m62_66  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m62_136 -> m62_140  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m62_135 -> m62_137  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m62_75 -> m62_79  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m62_74 -> m62_76  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m62_93 -> m62_96  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m62_92 -> m62_94  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m62_200 -> m62_204  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m62_199 -> m62_201  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m62_47 -> m62_49  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m62_48 -> m62_51  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m62_15 -> m62_17  [color=darkseagreen4, key=1, label=long, style=dashed];
m62_16 -> m62_20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m62_252 -> m62_255  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m62_251 -> m62_253  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m62_120 -> m62_123  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m62_119 -> m62_121  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m62_111 -> m62_115  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m62_110 -> m62_112  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m62_23 -> m62_25  [color=darkseagreen4, key=1, label=double, style=dashed];
m62_24 -> m62_27  [color=green, key=1, label="lambda expression", style=dashed];
m62_190 -> m62_194  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m62_189 -> m62_191  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m62_290 -> m62_13  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m62_291 -> m62_181  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m62_291 -> m62_185  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m64_33 -> m64_35  [color=darkseagreen4, key=1, label=pair, style=dashed];
m64_17 -> m64_19  [color=darkseagreen4, key=1, label=list, style=dashed];
m64_17 -> m64_20  [color=darkseagreen4, key=1, label=list, style=dashed];
m64_17 -> m64_21  [color=darkseagreen4, key=1, label=list, style=dashed];
m64_22 -> m64_24  [color=darkseagreen4, key=1, label=anotherList, style=dashed];
m64_22 -> m64_25  [color=darkseagreen4, key=1, label=anotherList, style=dashed];
m64_31 -> m64_49  [color=darkseagreen4, key=1, label="System.Collections.Generic.IList<CommandLine.Pair<System.Reflection.PropertyInfo, TAttribute>>", style=dashed];
m64_40 -> m64_42  [color=darkseagreen4, key=1, label=list, style=dashed];
m64_40 -> m64_43  [color=darkseagreen4, key=1, label=list, style=dashed];
m64_40 -> m64_44  [color=darkseagreen4, key=1, label=list, style=dashed];
m64_40 -> m64_45  [color=darkseagreen4, key=1, label=list, style=dashed];
m67_4 -> m67_1  [color=darkseagreen4, key=1, label="CommandLine.Tests.Mocks.SimpleOptionsForAutoBuid", style=dashed];
m71_21 -> m71_24  [color=darkseagreen4, key=1, label=expectedTokens, style=dashed];
m71_23 -> m71_26  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m71_1 -> m71_4  [color=darkseagreen4, key=1, label=expectedTokens, style=dashed];
m71_2 -> m71_17  [color=darkseagreen4, key=1, label=specs, style=dashed];
m71_3 -> m71_16  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m71_29 -> m71_17  [color=darkseagreen4, key=1, label=specs, style=dashed];
m71_30 -> m71_27  [color=darkseagreen4, key=1, label=specs, style=dashed];
m78_1 -> m78_4  [color=darkseagreen4, key=1, label=options, style=dashed];
m78_1 -> m78_5  [color=darkseagreen4, key=1, label=options, style=dashed];
m78_1 -> m78_6  [color=darkseagreen4, key=1, label=options, style=dashed];
m78_1 -> m78_7  [color=darkseagreen4, key=1, label=options, style=dashed];
m84_2 -> m84_6  [color=darkseagreen4, key=1, label=appOptions, style=dashed];
m84_7 -> m84_10  [color=darkseagreen4, key=1, label=plugInXOptions, style=dashed];
m84_7 -> m84_11  [color=darkseagreen4, key=1, label=plugInXOptions, style=dashed];
m87_21 -> m87_24  [color=darkseagreen4, key=1, label=options, style=dashed];
m87_21 -> m87_25  [color=darkseagreen4, key=1, label=options, style=dashed];
m87_21 -> m87_26  [color=darkseagreen4, key=1, label=options, style=dashed];
m87_21 -> m87_27  [color=darkseagreen4, key=1, label=options, style=dashed];
m87_21 -> m87_28  [color=darkseagreen4, key=1, label=options, style=dashed];
m87_21 -> m87_29  [color=darkseagreen4, key=1, label=options, style=dashed];
m87_3 -> m87_6  [color=darkseagreen4, key=1, label=options, style=dashed];
m87_3 -> m87_7  [color=darkseagreen4, key=1, label=options, style=dashed];
m87_3 -> m87_8  [color=darkseagreen4, key=1, label=options, style=dashed];
m87_3 -> m87_9  [color=darkseagreen4, key=1, label=options, style=dashed];
m87_3 -> m87_10  [color=darkseagreen4, key=1, label=options, style=dashed];
m87_3 -> m87_11  [color=darkseagreen4, key=1, label=options, style=dashed];
m87_41 -> m87_44  [color=darkseagreen4, key=1, label=options, style=dashed];
m87_41 -> m87_45  [color=darkseagreen4, key=1, label=options, style=dashed];
m87_54 -> m87_5  [color=darkseagreen4, key=1, label="CommandLine.Tests.ValueListAttributeParsingFixture", style=dashed];
m87_54 -> m87_23  [color=darkseagreen4, key=1, label="CommandLine.Tests.ValueListAttributeParsingFixture", style=dashed];
m87_54 -> m87_37  [color=darkseagreen4, key=1, label="CommandLine.Tests.ValueListAttributeParsingFixture", style=dashed];
m87_54 -> m87_43  [color=darkseagreen4, key=1, label="CommandLine.Tests.ValueListAttributeParsingFixture", style=dashed];
m87_54 -> m87_52  [color=darkseagreen4, key=1, label="CommandLine.Tests.ValueListAttributeParsingFixture", style=dashed];
}
