digraph  {
n10 [label="CommandLine.Core.TypeDescriptor", span=""];
n0 [label="Entry CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", span="20-20", cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)"];
n1 [label="this.tag = tag", span="22-22", cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)"];
n2 [label="this.maximumItems = maximumItems", span="23-23", cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)"];
n3 [label="Exit CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", span="20-20", cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)"];
n4 [label="Entry CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", span="36-36", cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)"];
n5 [label="maximumItems == null", span="38-38", cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)"];
n7 [label="return new TypeDescriptor(tag, maximumItems);", span="40-40", cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", color=red, community=0];
n6 [label="throw new ArgumentNullException(''maximumItems'');", span="38-38", cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)"];
n8 [label="Exit CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", span="36-36", cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)"];
n9 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)"];
d1 [label="return Build(\r\n                factory,\r\n                (args, optionSpecs) =>\r\n                    {\r\n                        var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer));\r\n                        var explodedTokens = Tokenizer.ExplodeOptionList(\r\n                            tokens,\r\n                            name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer));\r\n                        return explodedTokens;\r\n                    },\r\n                arguments,\r\n                nameComparer,\r\n                parsingCulture,\r\n                nonFatalErrors);", span="21-34", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", color=green, community=0];
d0 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="14-14", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d2 [label="Exit CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="14-14", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d3 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="37-37", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d4 [label="Entry lambda expression", span="23-30", cluster="lambda expression"];
d44 [label="return allErrors\r\n                .Where(e => !nonFatalErrors.Contains(e.Tag))\r\n                .ToParserResult(instance);", span="135-137", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", color=green, community=1];
d43 [label="var allErrors =\r\n                tokenizerResult.SuccessfulMessages()\r\n                    .Concat(missingValueErrors)\r\n                    .Concat(optionSpecPropsResult.SuccessfulMessages())\r\n                    .Concat(valueSpecPropsResult.SuccessfulMessages())\r\n                    .Concat(validationErrors)", span="128-133", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", color=green, community=1];
d38 [label="instance = instance\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsJust(),\r\n                        sp => sp.Value.FromJust())\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust(),\r\n                        sp => sp.Specification.DefaultValue.FromJust())\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsNothing()\r\n                            && sp.Specification.TargetType == TargetType.Sequence\r\n                            && sp.Specification.DefaultValue.MatchNothing(),\r\n                        sp => sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray())", span="101-112", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d41 [label="instance = (T)ctor.Invoke(values)", span="122-122", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d45 [label="Exit CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="37-37", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d81 [label="Entry Unk.Where", span="", cluster="Unk.Where"];
d82 [label="Entry Unk.ToParserResult", span="", cluster="Unk.ToParserResult"];
d151 [label="Entry lambda expression", span="136-136", cluster="lambda expression"];
d152 [label="!nonFatalErrors.Contains(e.Tag)", span="136-136", cluster="lambda expression", color=green, community=0];
d163 [label="System.Collections.Generic.IEnumerable<CommandLine.ErrorType>", span=""];
d153 [label="Exit lambda expression", span="136-136", cluster="lambda expression"];
d154 [label="Entry Unk.Contains", span="", cluster="Unk.Contains"];
d28 [label="var tokenizerResult = tokenizer(arguments, optionSpecs)", span="71-71", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d31 [label="var optionSpecPropsResult = OptionMapper.MapValues(\r\n                (from pt in specProps where pt.Specification.IsOption() select pt),\r\n                partitions.Options,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture),\r\n                nameComparer)", span="79-83", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d32 [label="var valueSpecPropsResult = ValueMapper.MapValues(\r\n                (from pt in specProps where pt.Specification.IsValue() select pt),\r\n                    partitions.Values,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture))", span="85-88", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d33 [label="var missingValueErrors = from token in partitions.Errors\r\n                                     select new MissingValueOptionError(\r\n                                         optionSpecs.Single(o => token.Text.MatchName(o.ShortName, o.LongName, nameComparer)).FromOptionSpecification())", span="90-92", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d42 [label="var validationErrors = specPropsWithValue.Validate(\r\n                SpecificationPropertyRules.Lookup(tokens))", span="125-126", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d79 [label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SuccessfulMessages<TSuccess, TMessage>()", span="12-12", cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SuccessfulMessages<TSuccess, TMessage>()"];
d80 [label="Entry Unk.Concat", span="", cluster="Unk.Concat"];
d5 [label="var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer))", span="25-25", cluster="lambda expression"];
d12 [label="NameLookup.Contains(name, optionSpecs, nameComparer)", span="25-25", cluster="lambda expression"];
d6 [label="var explodedTokens = Tokenizer.ExplodeOptionList(\r\n                            tokens,\r\n                            name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer))", span="26-28", cluster="lambda expression"];
d16 [label="NameLookup.HavingSeparator(name, optionSpecs, nameComparer)", span="28-28", cluster="lambda expression"];
d19 [label="var typeInfo = factory.Return(f => f().GetType(), typeof(T))", span="45-45", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d23 [label="Func<T> makeDefault = () =>\r\n                typeof(T).IsMutable()\r\n                    ? factory.Return(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="56-60", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d95 [label="typeof(T).IsMutable()\r\n                    ? factory.Return(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="57-60", cluster="lambda expression"];
d24 [label="arguments.Any()", span="62-62", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d25 [label="var preprocessorErrors = arguments.Preprocess(PreprocessorGuards.Lookup(nameComparer))", span="64-64", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d30 [label="var partitions = TokenPartitioner.Partition(\r\n                tokens,\r\n                name => TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer))", span="75-77", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d103 [label="TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer)", span="77-77", cluster="lambda expression"];
d107 [label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="82-82", cluster="lambda expression"];
d111 [label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="88-88", cluster="lambda expression"];
d114 [label="token.Text.MatchName(o.ShortName, o.LongName, nameComparer)", span="92-92", cluster="lambda expression"];
d37 [label="instance = factory.Return(f => f(), Activator.CreateInstance<T>())", span="100-100", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d8 [label="Exit lambda expression", span="23-30", cluster="lambda expression"];
d34 [label="var specPropsWithValue = optionSpecPropsResult.SucceededWith()\r\n                .Concat(valueSpecPropsResult.SucceededWith())", span="94-95", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d69 [label="Entry T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="82-82", cluster="T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)"];
d120 [label="Entry lambda expression", span="103-103", cluster="lambda expression"];
d124 [label="Entry lambda expression", span="104-104", cluster="lambda expression"];
d128 [label="Entry lambda expression", span="106-106", cluster="lambda expression"];
d132 [label="Entry lambda expression", span="107-107", cluster="lambda expression"];
d135 [label="Entry lambda expression", span="109-111", cluster="lambda expression"];
d139 [label="Entry lambda expression", span="112-112", cluster="lambda expression"];
d39 [label="var ctor = typeInfo.GetConstructor((from sp in specProps select sp.Property.PropertyType).ToArray())", span="116-116", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d40 [label="var values = (from prms in ctor.GetParameters()\r\n                              join sp in specPropsWithValue on prms.Name.ToLower() equals sp.Property.Name.ToLower()\r\n                              select sp.Value.Return(v => v,\r\n                                    sp.Specification.DefaultValue.Return(d => d,\r\n                                        sp.Specification.ConversionType.CreateDefaultForImmutable()))).ToArray()", span="117-121", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d76 [label="Entry Unk.Invoke", span="", cluster="Unk.Invoke"];
d27 [label="return new NotParsed<T>(makeDefault().GetType().ToTypeInfo(), preprocessorErrors);", span="67-67", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d22 [label="var optionSpecs = specs\r\n                .ThrowingValidate(SpecificationGuards.Lookup)\r\n                .OfType<OptionSpecification>()", span="52-54", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d26 [label="preprocessorErrors.Any()", span="65-65", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d29 [label="var tokens = tokenizerResult.SucceededWith()", span="73-73", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d57 [label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0", cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)"];
d20 [label="var specProps = typeInfo.GetSpecifications(pi => SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>()))", span="47-48", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d60 [label="Entry CommandLine.Core.Specification.IsOption()", span="10-10", cluster="CommandLine.Core.Specification.IsOption()"];
d61 [label="Entry Unk.MapValues", span="", cluster="Unk.MapValues"];
d106 [label="Entry lambda expression", span="82-82", cluster="lambda expression"];
d62 [label="Entry CommandLine.Core.Specification.IsValue()", span="15-15", cluster="CommandLine.Core.Specification.IsValue()"];
d110 [label="Entry lambda expression", span="88-88", cluster="lambda expression"];
d63 [label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="269-269", cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)"];
d64 [label="Entry Unk.Single", span="", cluster="Unk.Single"];
d65 [label="Entry Unk.FromOptionSpecification", span="", cluster="Unk.FromOptionSpecification"];
d113 [label="Entry lambda expression", span="92-92", cluster="lambda expression"];
d77 [label="Entry CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12", cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)"];
d78 [label="Entry System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="40-40", cluster="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)"];
d155 [label="System.StringComparer", span=""];
d9 [label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="13-13", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)"];
d11 [label="Entry lambda expression", span="25-25", cluster="lambda expression"];
d156 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
d13 [label="Exit lambda expression", span="25-25", cluster="lambda expression"];
d14 [label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11", cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)"];
d7 [label="return explodedTokens;", span="29-29", cluster="lambda expression"];
d10 [label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", span="46-46", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)"];
d15 [label="Entry lambda expression", span="28-28", cluster="lambda expression"];
d17 [label="Exit lambda expression", span="28-28", cluster="lambda expression"];
d18 [label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16", cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)"];
d46 [label="Entry Unk.Return", span="", cluster="Unk.Return"];
d83 [label="Entry lambda expression", span="45-45", cluster="lambda expression"];
d36 [label="typeInfo.IsMutable()", span="98-98", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d157 [label="CSharpx.Maybe<System.Func<T>>", span=""];
d158 [label=specProps, span=""];
d94 [label="Entry lambda expression", span="56-60", cluster="lambda expression"];
d96 [label="Exit lambda expression", span="56-60", cluster="lambda expression"];
d97 [label="Entry System.Type.IsMutable()", span="139-139", cluster="System.Type.IsMutable()"];
d68 [label="Entry System.Activator.CreateInstance<T>()", span="0-0", cluster="System.Activator.CreateInstance<T>()"];
d70 [label="Entry Unk.ToArray", span="", cluster="Unk.ToArray"];
d98 [label="Entry Unk.>", span="", cluster="Unk.>"];
d99 [label="Entry lambda expression", span="58-58", cluster="lambda expression"];
d50 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()"];
d51 [label="Entry CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)", span="11-11", cluster="CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)"];
d52 [label="Entry System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="11-11", cluster="System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)"];
d59 [label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)"];
d102 [label="Entry lambda expression", span="77-77", cluster="lambda expression"];
d159 [label="System.StringComparer", span=""];
d160 [label=optionSpecs, span=""];
d104 [label="Exit lambda expression", span="77-77", cluster="lambda expression"];
d105 [label="Entry CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="23-23", cluster="CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)"];
d161 [label="System.Globalization.CultureInfo", span=""];
d108 [label="Exit lambda expression", span="82-82", cluster="lambda expression"];
d109 [label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="13-13", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)"];
d112 [label="Exit lambda expression", span="88-88", cluster="lambda expression"];
d162 [label=token, span=""];
d115 [label="Exit lambda expression", span="92-92", cluster="lambda expression"];
d116 [label="Entry string.MatchName(string, string, System.StringComparer)", span="8-8", cluster="string.MatchName(string, string, System.StringComparer)"];
d117 [label="Entry lambda expression", span="100-100", cluster="lambda expression"];
d35 [label="T instance", span="97-97", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d58 [label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()", span="653-653", cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()"];
d66 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)"];
d122 [label="Exit lambda expression", span="103-103", cluster="lambda expression"];
d121 [label="sp.Value.IsJust()", span="103-103", cluster="lambda expression"];
d126 [label="Exit lambda expression", span="104-104", cluster="lambda expression"];
d125 [label="sp.Value.FromJust()", span="104-104", cluster="lambda expression"];
d130 [label="Exit lambda expression", span="106-106", cluster="lambda expression"];
d129 [label="sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust()", span="106-106", cluster="lambda expression"];
d134 [label="Exit lambda expression", span="107-107", cluster="lambda expression"];
d133 [label="sp.Specification.DefaultValue.FromJust()", span="107-107", cluster="lambda expression"];
d137 [label="Exit lambda expression", span="109-111", cluster="lambda expression"];
d136 [label="sp.Value.IsNothing()\r\n                            && sp.Specification.TargetType == TargetType.Sequence\r\n                            && sp.Specification.DefaultValue.MatchNothing()", span="109-111", cluster="lambda expression"];
d141 [label="Exit lambda expression", span="112-112", cluster="lambda expression"];
d140 [label="sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray()", span="112-112", cluster="lambda expression"];
d71 [label="Entry Unk.GetConstructor", span="", cluster="Unk.GetConstructor"];
d72 [label="Entry Unk.GetParameters", span="", cluster="Unk.GetParameters"];
d73 [label="Entry Unk.ToLower", span="", cluster="Unk.ToLower"];
d74 [label="Entry string.ToLower()", span="0-0", cluster="string.ToLower()"];
d75 [label="Entry Unk.CreateDefaultForImmutable", span="", cluster="Unk.CreateDefaultForImmutable"];
d145 [label="Entry lambda expression", span="119-119", cluster="lambda expression"];
d148 [label="Entry lambda expression", span="120-120", cluster="lambda expression"];
d53 [label="Entry CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="163-163", cluster="CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)"];
d54 [label="Entry System.Func<TResult>.Invoke()", span="0-0", cluster="System.Func<TResult>.Invoke()"];
d55 [label="Entry object.GetType()", span="0-0", cluster="object.GetType()"];
d56 [label="Entry System.Type.ToTypeInfo()", span="174-174", cluster="System.Type.ToTypeInfo()"];
d21 [label="var specs = from pt in specProps select pt.Specification", span="50-50", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d48 [label="Entry Unk.ThrowingValidate", span="", cluster="Unk.ThrowingValidate"];
d49 [label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0", cluster="System.Collections.IEnumerable.OfType<TResult>()"];
d47 [label="Entry Unk.GetSpecifications", span="", cluster="Unk.GetSpecifications"];
d88 [label="Entry lambda expression", span="47-48", cluster="lambda expression"];
d85 [label="Exit lambda expression", span="45-45", cluster="lambda expression"];
d84 [label="f().GetType()", span="45-45", cluster="lambda expression"];
d67 [label="Entry Unk.IsMutable", span="", cluster="Unk.IsMutable"];
d101 [label="Exit lambda expression", span="58-58", cluster="lambda expression"];
d100 [label="f()", span="58-58", cluster="lambda expression"];
d119 [label="Exit lambda expression", span="100-100", cluster="lambda expression"];
d118 [label="f()", span="100-100", cluster="lambda expression"];
d123 [label="Entry CSharpx.Maybe<T>.IsJust<T>()", span="326-326", cluster="CSharpx.Maybe<T>.IsJust<T>()"];
d127 [label="Entry CSharpx.Maybe<T>.FromJust<T>()", span="342-342", cluster="CSharpx.Maybe<T>.FromJust<T>()"];
d131 [label="Entry CSharpx.Maybe<T>.IsNothing<T>()", span="334-334", cluster="CSharpx.Maybe<T>.IsNothing<T>()"];
d138 [label="Entry CSharpx.Maybe<T>.MatchNothing()", span="57-57", cluster="CSharpx.Maybe<T>.MatchNothing()"];
d142 [label="Entry System.Type.GetGenericArguments()", span="0-0", cluster="System.Type.GetGenericArguments()"];
d143 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()"];
d144 [label="Entry System.Type.CreateEmptyArray()", span="125-125", cluster="System.Type.CreateEmptyArray()"];
d147 [label="Exit lambda expression", span="119-119", cluster="lambda expression"];
d146 [label=v, span="119-119", cluster="lambda expression"];
d150 [label="Exit lambda expression", span="120-120", cluster="lambda expression"];
d149 [label=d, span="120-120", cluster="lambda expression"];
d90 [label="Exit lambda expression", span="47-48", cluster="lambda expression"];
d89 [label="SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>())", span="47-48", cluster="lambda expression"];
d86 [label="Entry Unk.f", span="", cluster="Unk.f"];
d87 [label="Entry Unk.GetType", span="", cluster="Unk.GetType"];
d91 [label="Entry CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="105-105", cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)"];
d92 [label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116", cluster="CSharpx.Maybe.Nothing<T>()"];
d93 [label="Entry CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)", span="21-21", cluster="CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)"];
m0_66 [label="Entry Unk.SingleOrDefault", span="", cluster="Unk.SingleOrDefault", file="InstanceChooser.cs"];
m0_28 [label="Entry CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", span="95-95", cluster="CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", file="InstanceChooser.cs"];
m0_77 [label="return new NotParsed<object>(TypeInfo.Create(typeof(NullInstance), types), errors);", span="97-97", cluster="CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", file="InstanceChooser.cs"];
m0_78 [label="Exit CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", span="95-95", cluster="CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", file="InstanceChooser.cs"];
m0_26 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", span="31-31", cluster="System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", file="InstanceChooser.cs"];
m0_45 [label="Entry Unk.>", span="", cluster="Unk.>", file="InstanceChooser.cs"];
m0_49 [label="Entry Unk.MakeNotParsed", span="", cluster="Unk.MakeNotParsed", file="InstanceChooser.cs"];
m0_44 [label="Entry Unk.Any", span="", cluster="Unk.Any", file="InstanceChooser.cs"];
m0_18 [label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16", cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="InstanceChooser.cs"];
m0_31 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)", file="InstanceChooser.cs"];
m0_36 [label="Entry CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="62-62", cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceChooser.cs"];
m0_42 [label="return verbs.Any(a => nameComparer.Equals(a.Item1.Name, arguments.First()))\r\n                ? InstanceBuilder.Build(\r\n                    Maybe.Just<Func<object>>(\r\n                        () =>\r\n                            verbs.Single(v => nameComparer.Equals(v.Item1.Name, arguments.First())).Item2.AutoDefault()),\r\n                    tokenizer,\r\n                    arguments.Skip(1),\r\n                    nameComparer,\r\n                    parsingCulture)\r\n                : MakeNotParsed(verbs.Select(v => v.Item2), new BadVerbSelectedError(arguments.First()));", span="69-78", cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, file="InstanceChooser.cs"];
m0_43 [label="Exit CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="62-62", cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceChooser.cs"];
m0_79 [label="Entry CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="163-163", cluster="CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="InstanceChooser.cs"];
m0_48 [label="Entry CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", span="357-357", cluster="CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", file="InstanceChooser.cs"];
m0_68 [label="Entry CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", span="383-383", cluster="CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", file="InstanceChooser.cs"];
m0_14 [label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11", cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="InstanceChooser.cs"];
m0_35 [label="Entry CommandLine.VersionRequestedError.VersionRequestedError()", span="432-432", cluster="CommandLine.VersionRequestedError.VersionRequestedError()", file="InstanceChooser.cs"];
m0_40 [label="Entry System.StringComparer.Equals(string, string)", span="0-0", cluster="System.StringComparer.Equals(string, string)", file="InstanceChooser.cs"];
m0_56 [label="Entry Unk.Single", span="", cluster="Unk.Single", file="InstanceChooser.cs"];
m0_67 [label="Entry Unk.ToMaybe", span="", cluster="Unk.ToMaybe", file="InstanceChooser.cs"];
m0_41 [label="Entry string.Concat(string, string)", span="0-0", cluster="string.Concat(string, string)", file="InstanceChooser.cs"];
m0_73 [label="Entry lambda expression", span="90-90", cluster="lambda expression", file="InstanceChooser.cs"];
m0_5 [label="var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer))", span="23-23", cluster="lambda expression", file="InstanceChooser.cs"];
m0_12 [label="NameLookup.Contains(name, optionSpecs, nameComparer)", span="23-23", cluster="lambda expression", file="InstanceChooser.cs"];
m0_6 [label="var explodedTokens = Tokenizer.ExplodeOptionList(tokens, name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer))", span="24-24", cluster="lambda expression", file="InstanceChooser.cs"];
m0_16 [label="NameLookup.HavingSeparator(name, optionSpecs, nameComparer)", span="24-24", cluster="lambda expression", file="InstanceChooser.cs"];
m0_4 [label="Entry lambda expression", span="21-26", cluster="lambda expression", file="InstanceChooser.cs"];
m0_11 [label="Entry lambda expression", span="23-23", cluster="lambda expression", file="InstanceChooser.cs"];
m0_7 [label="return explodedTokens;", span="25-25", cluster="lambda expression", file="InstanceChooser.cs"];
m0_15 [label="Entry lambda expression", span="24-24", cluster="lambda expression", file="InstanceChooser.cs"];
m0_8 [label="Exit lambda expression", span="21-26", cluster="lambda expression", file="InstanceChooser.cs"];
m0_13 [label="Exit lambda expression", span="23-23", cluster="lambda expression", file="InstanceChooser.cs"];
m0_17 [label="Exit lambda expression", span="24-24", cluster="lambda expression", file="InstanceChooser.cs"];
m0_38 [label="nameComparer.Equals(command, firstArg) ||\r\n                    nameComparer.Equals(string.Concat(''--'', command), firstArg)", span="48-49", cluster="lambda expression", file="InstanceChooser.cs"];
m0_37 [label="Entry lambda expression", span="47-49", cluster="lambda expression", file="InstanceChooser.cs"];
m0_39 [label="Exit lambda expression", span="47-49", cluster="lambda expression", file="InstanceChooser.cs"];
m0_51 [label="nameComparer.Equals(a.Item1.Name, arguments.First())", span="69-69", cluster="lambda expression", file="InstanceChooser.cs"];
m0_54 [label="verbs.Single(v => nameComparer.Equals(v.Item1.Name, arguments.First())).Item2.AutoDefault()", span="73-73", cluster="lambda expression", file="InstanceChooser.cs"];
m0_59 [label="nameComparer.Equals(v.Item1.Name, arguments.First())", span="73-73", cluster="lambda expression", file="InstanceChooser.cs"];
m0_50 [label="Entry lambda expression", span="69-69", cluster="lambda expression", file="InstanceChooser.cs"];
m0_53 [label="Entry lambda expression", span="72-73", cluster="lambda expression", file="InstanceChooser.cs"];
m0_61 [label="Entry lambda expression", span="78-78", cluster="lambda expression", file="InstanceChooser.cs"];
m0_52 [label="Exit lambda expression", span="69-69", cluster="lambda expression", file="InstanceChooser.cs"];
m0_55 [label="Exit lambda expression", span="72-73", cluster="lambda expression", file="InstanceChooser.cs"];
m0_58 [label="Entry lambda expression", span="73-73", cluster="lambda expression", file="InstanceChooser.cs"];
m0_60 [label="Exit lambda expression", span="73-73", cluster="lambda expression", file="InstanceChooser.cs"];
m0_62 [label="v.Item2", span="78-78", cluster="lambda expression", file="InstanceChooser.cs"];
m0_63 [label="Exit lambda expression", span="78-78", cluster="lambda expression", file="InstanceChooser.cs"];
m0_71 [label="nameComparer.Equals(v.Item1.Name, verb)", span="87-87", cluster="lambda expression", file="InstanceChooser.cs"];
m0_70 [label="Entry lambda expression", span="87-87", cluster="lambda expression", file="InstanceChooser.cs"];
m0_72 [label="Exit lambda expression", span="87-87", cluster="lambda expression", file="InstanceChooser.cs"];
m0_74 [label="new HelpVerbRequestedError(v.Item1.Name, v.Item2, true)", span="90-90", cluster="lambda expression", file="InstanceChooser.cs"];
m0_75 [label="Exit lambda expression", span="90-90", cluster="lambda expression", file="InstanceChooser.cs"];
m0_29 [label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="InstanceChooser.cs"];
m0_80 [label="Entry CommandLine.TypeInfo.Create(System.Type, System.Collections.Generic.IEnumerable<System.Type>)", span="34-34", cluster="CommandLine.TypeInfo.Create(System.Type, System.Collections.Generic.IEnumerable<System.Type>)", file="InstanceChooser.cs"];
m0_32 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="InstanceChooser.cs"];
m0_34 [label="Entry CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", span="81-81", cluster="CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", file="InstanceChooser.cs"];
m0_64 [label="return verb.Length > 0\r\n                ? verbs.SingleOrDefault(v => nameComparer.Equals(v.Item1.Name, verb))\r\n                        .ToMaybe()\r\n                        .Return(\r\n                            v => new HelpVerbRequestedError(v.Item1.Name, v.Item2, true),\r\n                            new HelpVerbRequestedError(null, null, false))\r\n                : new HelpVerbRequestedError(null, null, false);", span="86-92", cluster="CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", file="InstanceChooser.cs"];
m0_65 [label="Exit CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", span="81-81", cluster="CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", file="InstanceChooser.cs"];
m0_47 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="InstanceChooser.cs"];
m0_27 [label="Entry CommandLine.NoVerbSelectedError.NoVerbSelectedError()", span="421-421", cluster="CommandLine.NoVerbSelectedError.NoVerbSelectedError()", file="InstanceChooser.cs"];
m0_0 [label="Entry CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="14-14", cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceChooser.cs"];
m0_1 [label="return Choose(\r\n                (args, optionSpecs) =>\r\n                    {\r\n                        var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer));\r\n                        var explodedTokens = Tokenizer.ExplodeOptionList(tokens, name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer));\r\n                        return explodedTokens;\r\n                    },\r\n                types,\r\n                arguments,\r\n                nameComparer,\r\n                parsingCulture);", span="20-30", cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=red, community=0, file="InstanceChooser.cs"];
m0_2 [label="Exit CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="14-14", cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceChooser.cs"];
m0_9 [label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="13-13", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="InstanceChooser.cs"];
m0_3 [label="Entry CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33", cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceChooser.cs"];
m0_19 [label="arguments.Empty()", span="40-40", cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceChooser.cs", color=green, community=0];
m0_20 [label="return MakeNotParsed(types, new NoVerbSelectedError());", span="42-42", cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceChooser.cs"];
m0_21 [label="var firstArg = arguments.First()", span="45-45", cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceChooser.cs"];
m0_22 [label="Func<string, bool> preprocCompare = command =>\r\n                    nameComparer.Equals(command, firstArg) ||\r\n                    nameComparer.Equals(string.Concat(''--'', command), firstArg)", span="47-49", cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceChooser.cs"];
m0_23 [label="var verbs = Verb.SelectFromTypes(types)", span="51-51", cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceChooser.cs"];
m0_24 [label="return preprocCompare(''help'')\r\n                ? MakeNotParsed(types,\r\n                    MakeHelpVerbRequestedError(verbs,\r\n                        arguments.Skip(1).SingleOrDefault() ?? string.Empty, nameComparer))\r\n                : preprocCompare(''version'')\r\n                    ? MakeNotParsed(types, new VersionRequestedError())\r\n                    : MatchVerb(tokenizer, verbs, arguments, nameComparer, parsingCulture);", span="53-59", cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=red, community=0, file="InstanceChooser.cs"];
m0_25 [label="Exit CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33", cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceChooser.cs"];
m0_69 [label="Entry Unk.Return", span="", cluster="Unk.Return", file="InstanceChooser.cs"];
m0_57 [label="Entry Unk.AutoDefault", span="", cluster="Unk.AutoDefault", file="InstanceChooser.cs"];
m0_30 [label="Entry CommandLine.Core.Verb.SelectFromTypes(System.Collections.Generic.IEnumerable<System.Type>)", span="40-40", cluster="CommandLine.Core.Verb.SelectFromTypes(System.Collections.Generic.IEnumerable<System.Type>)", file="InstanceChooser.cs"];
m0_46 [label="Entry Unk.Build", span="", cluster="Unk.Build", file="InstanceChooser.cs"];
m0_33 [label="Entry System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", file="InstanceChooser.cs"];
m0_76 [label="Entry HelpVerbRequestedError.cstr", span="", cluster="HelpVerbRequestedError.cstr", file="InstanceChooser.cs"];
m0_81 [label="System.StringComparer", span="", file="InstanceChooser.cs"];
m0_82 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span="", file="InstanceChooser.cs"];
m0_83 [label="System.StringComparer", span="", file="InstanceChooser.cs"];
m0_84 [label=firstArg, span="", file="InstanceChooser.cs"];
m0_85 [label="System.Collections.Generic.IEnumerable<string>", span="", file="InstanceChooser.cs"];
m0_86 [label="System.StringComparer", span="", file="InstanceChooser.cs"];
m0_87 [label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>", span="", file="InstanceChooser.cs"];
m0_88 [label=string, span="", file="InstanceChooser.cs"];
m0_89 [label="System.StringComparer", span="", file="InstanceChooser.cs"];
m1_34 [label="Entry CommandLine.Text.HeadingInfo.WriteMessage(string, System.IO.TextWriter)", span="105-105", cluster="CommandLine.Text.HeadingInfo.WriteMessage(string, System.IO.TextWriter)", file="Parser.cs"];
m1_35 [label="string.IsNullOrWhiteSpace(''message'')", span="107-107", cluster="CommandLine.Text.HeadingInfo.WriteMessage(string, System.IO.TextWriter)", file="Parser.cs"];
m1_37 [label="writer == null", span="108-108", cluster="CommandLine.Text.HeadingInfo.WriteMessage(string, System.IO.TextWriter)", file="Parser.cs"];
m1_39 [label="var builder = new StringBuilder(this.programName.Length + message.Length + 2)", span="110-110", cluster="CommandLine.Text.HeadingInfo.WriteMessage(string, System.IO.TextWriter)", file="Parser.cs"];
m1_42 [label="builder.Append(message)", span="113-113", cluster="CommandLine.Text.HeadingInfo.WriteMessage(string, System.IO.TextWriter)", file="Parser.cs"];
m1_43 [label="writer.WriteLine(builder.ToString())", span="114-114", cluster="CommandLine.Text.HeadingInfo.WriteMessage(string, System.IO.TextWriter)", file="Parser.cs"];
m1_36 [label="throw new ArgumentException(''message'');", span="107-107", cluster="CommandLine.Text.HeadingInfo.WriteMessage(string, System.IO.TextWriter)", file="Parser.cs"];
m1_38 [label="throw new ArgumentNullException(''writer'');", span="108-108", cluster="CommandLine.Text.HeadingInfo.WriteMessage(string, System.IO.TextWriter)", file="Parser.cs"];
m1_40 [label="builder.Append(this.programName)", span="111-111", cluster="CommandLine.Text.HeadingInfo.WriteMessage(string, System.IO.TextWriter)", file="Parser.cs"];
m1_41 [label="builder.Append('': '')", span="112-112", cluster="CommandLine.Text.HeadingInfo.WriteMessage(string, System.IO.TextWriter)", file="Parser.cs"];
m1_44 [label="Exit CommandLine.Text.HeadingInfo.WriteMessage(string, System.IO.TextWriter)", span="105-105", cluster="CommandLine.Text.HeadingInfo.WriteMessage(string, System.IO.TextWriter)", file="Parser.cs"];
m1_32 [label="Entry System.Text.StringBuilder.Append(char)", span="0-0", cluster="System.Text.StringBuilder.Append(char)", file="Parser.cs"];
m1_46 [label="Entry System.IO.TextWriter.WriteLine(string)", span="0-0", cluster="System.IO.TextWriter.WriteLine(string)", file="Parser.cs"];
m1_47 [label="Entry CommandLine.Text.HeadingInfo.WriteMessage(string)", span="123-123", cluster="CommandLine.Text.HeadingInfo.WriteMessage(string)", file="Parser.cs"];
m1_48 [label="WriteMessage(message, Console.Out)", span="125-125", cluster="CommandLine.Text.HeadingInfo.WriteMessage(string)", file="Parser.cs"];
m1_49 [label="Exit CommandLine.Text.HeadingInfo.WriteMessage(string)", span="123-123", cluster="CommandLine.Text.HeadingInfo.WriteMessage(string)", file="Parser.cs"];
m1_2 [label="Entry CommandLine.Text.HeadingInfo.HeadingInfo(string, string)", span="37-37", cluster="CommandLine.Text.HeadingInfo.HeadingInfo(string, string)", file="Parser.cs"];
m1_3 [label="string.IsNullOrWhiteSpace(''programName'')", span="39-39", cluster="CommandLine.Text.HeadingInfo.HeadingInfo(string, string)", file="Parser.cs"];
m1_5 [label="this.programName = programName", span="41-41", cluster="CommandLine.Text.HeadingInfo.HeadingInfo(string, string)", file="Parser.cs"];
m1_6 [label="this.version = version", span="42-42", cluster="CommandLine.Text.HeadingInfo.HeadingInfo(string, string)", file="Parser.cs"];
m1_4 [label="throw new ArgumentException(''programName'');", span="39-39", cluster="CommandLine.Text.HeadingInfo.HeadingInfo(string, string)", file="Parser.cs"];
m1_7 [label="Exit CommandLine.Text.HeadingInfo.HeadingInfo(string, string)", span="37-37", cluster="CommandLine.Text.HeadingInfo.HeadingInfo(string, string)", file="Parser.cs"];
m1_30 [label="Entry System.Text.StringBuilder.StringBuilder(int)", span="0-0", cluster="System.Text.StringBuilder.StringBuilder(int)", file="Parser.cs"];
m1_17 [label="Entry CommandLine.Text.HeadingInfo.implicit operator string(CommandLine.Text.HeadingInfo)", span="73-73", cluster="CommandLine.Text.HeadingInfo.implicit operator string(CommandLine.Text.HeadingInfo)", file="Parser.cs"];
m1_18 [label="return info.ToString();", span="75-75", cluster="CommandLine.Text.HeadingInfo.implicit operator string(CommandLine.Text.HeadingInfo)", file="Parser.cs"];
m1_19 [label="Exit CommandLine.Text.HeadingInfo.implicit operator string(CommandLine.Text.HeadingInfo)", span="73-73", cluster="CommandLine.Text.HeadingInfo.implicit operator string(CommandLine.Text.HeadingInfo)", file="Parser.cs"];
m1_0 [label="Entry CommandLine.Text.HeadingInfo.HeadingInfo(string)", span="25-25", cluster="CommandLine.Text.HeadingInfo.HeadingInfo(string)", file="Parser.cs"];
m1_1 [label="Exit CommandLine.Text.HeadingInfo.HeadingInfo(string)", span="25-25", cluster="CommandLine.Text.HeadingInfo.HeadingInfo(string)", file="Parser.cs"];
m1_20 [label="Entry CommandLine.Text.HeadingInfo.ToString()", span="82-82", cluster="CommandLine.Text.HeadingInfo.ToString()", file="Parser.cs"];
m1_21 [label="bool isVersionNull = string.IsNullOrEmpty(this.version)", span="84-84", cluster="CommandLine.Text.HeadingInfo.ToString()", file="Parser.cs"];
m1_22 [label="var builder = new StringBuilder(this.programName.Length +\r\n                (!isVersionNull ? this.version.Length + 1 : 0))", span="85-86", cluster="CommandLine.Text.HeadingInfo.ToString()", file="Parser.cs"];
m1_24 [label="!isVersionNull", span="88-88", cluster="CommandLine.Text.HeadingInfo.ToString()", file="Parser.cs"];
m1_23 [label="builder.Append(this.programName)", span="87-87", cluster="CommandLine.Text.HeadingInfo.ToString()", file="Parser.cs"];
m1_25 [label="builder.Append(' ')", span="90-90", cluster="CommandLine.Text.HeadingInfo.ToString()", file="Parser.cs"];
m1_26 [label="builder.Append(this.version)", span="91-91", cluster="CommandLine.Text.HeadingInfo.ToString()", file="Parser.cs"];
m1_27 [label="return builder.ToString();", span="94-94", cluster="CommandLine.Text.HeadingInfo.ToString()", file="Parser.cs"];
m1_28 [label="Exit CommandLine.Text.HeadingInfo.ToString()", span="82-82", cluster="CommandLine.Text.HeadingInfo.ToString()", file="Parser.cs"];
m1_14 [label="Entry lambda expression", span="62-62", cluster="lambda expression", file="Parser.cs"];
m1_10 [label="Entry lambda expression", span="58-58", cluster="lambda expression", file="Parser.cs"];
m1_11 [label="Path.GetFileNameWithoutExtension(titleAttribute.Title)", span="58-58", cluster="lambda expression", file="Parser.cs"];
m1_12 [label="Exit lambda expression", span="58-58", cluster="lambda expression", file="Parser.cs"];
m1_15 [label="versionAttribute.InformationalVersion", span="62-62", cluster="lambda expression", file="Parser.cs"];
m1_16 [label="Exit lambda expression", span="62-62", cluster="lambda expression", file="Parser.cs"];
m1_29 [label="Entry string.IsNullOrEmpty(string)", span="0-0", cluster="string.IsNullOrEmpty(string)", file="Parser.cs"];
m1_13 [label="Entry System.IO.Path.GetFileNameWithoutExtension(string)", span="0-0", cluster="System.IO.Path.GetFileNameWithoutExtension(string)", file="Parser.cs"];
m1_33 [label="Entry System.Text.StringBuilder.ToString()", span="0-0", cluster="System.Text.StringBuilder.ToString()", file="Parser.cs"];
m1_31 [label="Entry System.Text.StringBuilder.Append(string)", span="0-0", cluster="System.Text.StringBuilder.Append(string)", file="Parser.cs"];
m1_50 [label="Entry CommandLine.Text.HeadingInfo.WriteError(string)", span="134-134", cluster="CommandLine.Text.HeadingInfo.WriteError(string)", file="Parser.cs"];
m1_51 [label="WriteMessage(message, Console.Error)", span="136-136", cluster="CommandLine.Text.HeadingInfo.WriteError(string)", file="Parser.cs"];
m1_52 [label="Exit CommandLine.Text.HeadingInfo.WriteError(string)", span="134-134", cluster="CommandLine.Text.HeadingInfo.WriteError(string)", file="Parser.cs"];
m1_9 [label="Entry System.ArgumentException.ArgumentException(string)", span="0-0", cluster="System.ArgumentException.ArgumentException(string)", file="Parser.cs"];
m1_8 [label="Entry string.IsNullOrWhiteSpace(string)", span="0-0", cluster="string.IsNullOrWhiteSpace(string)", file="Parser.cs"];
m1_53 [label="CommandLine.Text.HeadingInfo", span="", file="Parser.cs"];
n10 -> n1  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.TypeDescriptor"];
n10 -> n2  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.TypeDescriptor"];
n0 -> n1  [key=0, style=solid];
n0 -> n2  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.Maybe<int>"];
n1 -> n2  [key=0, style=solid];
n2 -> n3  [key=0, style=solid];
n3 -> n0  [key=0, style=bold, color=blue];
n4 -> n5  [key=0, style=solid];
n4 -> n7  [key=1, style=dashed, color=red, label="CommandLine.Core.TypeDescriptorKind"];
n5 -> n6  [key=0, style=solid];
n5 -> n7  [key=0, style=solid, color=red];
n7 -> n8  [key=0, style=solid, color=red];
n7 -> n0  [key=2, style=dotted, color=red];
n6 -> n8  [key=0, style=solid];
n6 -> n9  [key=2, style=dotted];
n8 -> n4  [key=0, style=bold, color=blue];
d1 -> d1  [key=3, color=green, style=bold, label="method methodReturn RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error> "];
d1 -> d2  [key=0, style=solid, color=green];
d1 -> d3  [key=2, style=dotted, color=green];
d1 -> d4  [key=1, style=dashed, color=green, label="lambda expression"];
d0 -> d1  [key=0, style=solid, color=green];
d0 -> d5  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
d0 -> d12  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
d0 -> d6  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
d0 -> d16  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
d0 -> d3  [key=3, color=darkorchid, style=bold, label="method methodReturn CommandLine.ParserResult<T> Build"];
d2 -> d0  [key=0, style=bold, color=blue];
d3 -> d44  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<CommandLine.ErrorType>"];
d3 -> d152  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<CommandLine.ErrorType>"];
d3 -> d19  [key=0, style=solid];
d3 -> d23  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Func<T>>"];
d3 -> d95  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Func<T>>"];
d3 -> d24  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
d3 -> d25  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
d3 -> d28  [key=1, style=dashed, color=darkseagreen4, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>"];
d3 -> d30  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
d3 -> d103  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
d3 -> d31  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
d3 -> d107  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
d3 -> d32  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
d3 -> d111  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
d3 -> d33  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
d3 -> d114  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
d3 -> d37  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Func<T>>"];
d4 -> d5  [key=0, style=solid];
d4 -> d12  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
d4 -> d6  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
d4 -> d16  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
d44 -> d45  [key=0, style=solid, color=green];
d44 -> d81  [key=2, style=dotted, color=green];
d44 -> d82  [key=2, style=dotted, color=green];
d44 -> d151  [key=1, style=dashed, color=green, label="lambda expression"];
d43 -> d44  [key=0, style=solid, color=green];
d43 -> d79  [key=2, style=dotted, color=green];
d43 -> d80  [key=2, style=dotted, color=green];
d38 -> d44  [key=1, style=dashed, color=green, label=instance];
d38 -> d38  [key=1, style=dashed, color=darkseagreen4, label=instance];
d38 -> d42  [key=0, style=solid];
d38 -> d69  [key=2, style=dotted];
d38 -> d120  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d38 -> d124  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d38 -> d128  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d38 -> d132  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d38 -> d135  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d38 -> d139  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d41 -> d44  [key=1, style=dashed, color=green, label=instance];
d41 -> d42  [key=0, style=solid];
d41 -> d76  [key=2, style=dotted];
d45 -> d3  [key=0, style=bold, color=blue];
d151 -> d152  [key=0, style=solid, color=green];
d152 -> d153  [key=0, style=solid, color=green];
d152 -> d154  [key=2, style=dotted, color=green];
d163 -> d152  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<CommandLine.ErrorType>"];
d153 -> d151  [key=0, style=bold, color=blue];
d28 -> d43  [key=1, style=dashed, color=green, label=tokenizerResult];
d28 -> d29  [key=0, style=solid];
d28 -> d57  [key=2, style=dotted];
d31 -> d43  [key=1, style=dashed, color=green, label=optionSpecPropsResult];
d31 -> d31  [key=1, style=dashed, color=darkseagreen4, label=pt];
d31 -> d32  [key=0, style=solid];
d31 -> d60  [key=2, style=dotted];
d31 -> d61  [key=2, style=dotted];
d31 -> d106  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d31 -> d34  [key=1, style=dashed, color=darkseagreen4, label=optionSpecPropsResult];
d32 -> d43  [key=1, style=dashed, color=green, label=valueSpecPropsResult];
d32 -> d32  [key=1, style=dashed, color=darkseagreen4, label=pt];
d32 -> d33  [key=0, style=solid];
d32 -> d62  [key=2, style=dotted];
d32 -> d61  [key=2, style=dotted];
d32 -> d110  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d32 -> d34  [key=1, style=dashed, color=darkseagreen4, label=valueSpecPropsResult];
d33 -> d43  [key=1, style=dashed, color=green, label=missingValueErrors];
d33 -> d33  [key=1, style=dashed, color=darkseagreen4, label=token];
d33 -> d34  [key=0, style=solid];
d33 -> d63  [key=2, style=dotted];
d33 -> d64  [key=2, style=dotted];
d33 -> d65  [key=2, style=dotted];
d33 -> d113  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d33 -> d114  [key=1, style=dashed, color=darkseagreen4, label=token];
d42 -> d43  [key=0, style=solid, color=green];
d42 -> d77  [key=2, style=dotted];
d42 -> d78  [key=2, style=dotted];
d5 -> d6  [key=0, style=solid];
d5 -> d9  [key=2, style=dotted];
d5 -> d11  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d12 -> d13  [key=0, style=solid];
d12 -> d14  [key=2, style=dotted];
d6 -> d7  [key=0, style=solid];
d6 -> d10  [key=2, style=dotted];
d6 -> d15  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d16 -> d17  [key=0, style=solid];
d16 -> d18  [key=2, style=dotted];
d19 -> d20  [key=0, style=solid];
d19 -> d46  [key=2, style=dotted];
d19 -> d83  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d19 -> d36  [key=1, style=dashed, color=darkseagreen4, label=typeInfo];
d19 -> d39  [key=1, style=dashed, color=darkseagreen4, label=typeInfo];
d23 -> d23  [key=3, color=darkorchid, style=bold, label="Local variable System.Func<T> makeDefault"];
d23 -> d24  [key=0, style=solid];
d23 -> d27  [key=1, style=dashed, color=darkseagreen4, label=makeDefault];
d95 -> d95  [key=1, style=dashed, color=darkseagreen4, label=p];
d95 -> d96  [key=0, style=solid];
d95 -> d97  [key=2, style=dotted];
d95 -> d68  [key=2, style=dotted];
d95 -> d46  [key=2, style=dotted];
d95 -> d70  [key=2, style=dotted];
d95 -> d98  [key=2, style=dotted];
d95 -> d99  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d24 -> d28  [key=0, style=solid];
d24 -> d25  [key=0, style=solid];
d24 -> d50  [key=2, style=dotted];
d25 -> d26  [key=0, style=solid];
d25 -> d51  [key=2, style=dotted];
d25 -> d52  [key=2, style=dotted];
d25 -> d27  [key=1, style=dashed, color=darkseagreen4, label=preprocessorErrors];
d30 -> d31  [key=0, style=solid];
d30 -> d32  [key=1, style=dashed, color=darkseagreen4, label=partitions];
d30 -> d33  [key=1, style=dashed, color=darkseagreen4, label=partitions];
d30 -> d59  [key=2, style=dotted];
d30 -> d102  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d103 -> d104  [key=0, style=solid];
d103 -> d105  [key=2, style=dotted];
d107 -> d108  [key=0, style=solid];
d107 -> d109  [key=2, style=dotted];
d111 -> d112  [key=0, style=solid];
d111 -> d109  [key=2, style=dotted];
d114 -> d115  [key=0, style=solid];
d114 -> d116  [key=2, style=dotted];
d37 -> d38  [key=0, style=solid];
d37 -> d68  [key=2, style=dotted];
d37 -> d46  [key=2, style=dotted];
d37 -> d117  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d8 -> d4  [key=0, style=bold, color=blue];
d34 -> d38  [key=1, style=dashed, color=darkseagreen4, label=specPropsWithValue];
d34 -> d42  [key=1, style=dashed, color=darkseagreen4, label=specPropsWithValue];
d34 -> d35  [key=0, style=solid];
d34 -> d58  [key=2, style=dotted];
d34 -> d66  [key=2, style=dotted];
d34 -> d40  [key=1, style=dashed, color=darkseagreen4, label=specPropsWithValue];
d120 -> d121  [key=0, style=solid];
d124 -> d125  [key=0, style=solid];
d128 -> d129  [key=0, style=solid];
d132 -> d133  [key=0, style=solid];
d135 -> d136  [key=0, style=solid];
d139 -> d140  [key=0, style=solid];
d39 -> d41  [key=1, style=dashed, color=darkseagreen4, label=ctor];
d39 -> d39  [key=1, style=dashed, color=darkseagreen4, label=sp];
d39 -> d40  [key=0, style=solid];
d39 -> d70  [key=2, style=dotted];
d39 -> d71  [key=2, style=dotted];
d40 -> d41  [key=0, style=solid];
d40 -> d40  [key=1, style=dashed, color=darkseagreen4, label=prms];
d40 -> d72  [key=2, style=dotted];
d40 -> d73  [key=2, style=dotted];
d40 -> d74  [key=2, style=dotted];
d40 -> d75  [key=2, style=dotted];
d40 -> d46  [key=2, style=dotted];
d40 -> d70  [key=2, style=dotted];
d40 -> d145  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d40 -> d148  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d27 -> d45  [key=0, style=solid];
d27 -> d53  [key=2, style=dotted];
d27 -> d54  [key=2, style=dotted];
d27 -> d55  [key=2, style=dotted];
d27 -> d56  [key=2, style=dotted];
d22 -> d28  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
d22 -> d33  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
d22 -> d23  [key=0, style=solid];
d22 -> d30  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
d22 -> d103  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
d22 -> d48  [key=2, style=dotted];
d22 -> d49  [key=2, style=dotted];
d26 -> d28  [key=0, style=solid];
d26 -> d27  [key=0, style=solid];
d26 -> d50  [key=2, style=dotted];
d29 -> d42  [key=1, style=dashed, color=darkseagreen4, label=tokens];
d29 -> d30  [key=0, style=solid];
d29 -> d58  [key=2, style=dotted];
d20 -> d31  [key=1, style=dashed, color=darkseagreen4, label=specProps];
d20 -> d32  [key=1, style=dashed, color=darkseagreen4, label=specProps];
d20 -> d23  [key=1, style=dashed, color=darkseagreen4, label=specProps];
d20 -> d95  [key=1, style=dashed, color=darkseagreen4, label=specProps];
d20 -> d39  [key=1, style=dashed, color=darkseagreen4, label=specProps];
d20 -> d21  [key=0, style=solid];
d20 -> d47  [key=2, style=dotted];
d20 -> d88  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d106 -> d107  [key=0, style=solid];
d110 -> d111  [key=0, style=solid];
d113 -> d114  [key=0, style=solid];
d78 -> d18  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Collections.Generic.IEnumerable<string> arguments"];
d155 -> d5  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
d155 -> d12  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
d155 -> d6  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
d155 -> d16  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
d11 -> d12  [key=0, style=solid];
d156 -> d12  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
d156 -> d16  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
d13 -> d11  [key=0, style=bold, color=blue];
d7 -> d8  [key=0, style=solid];
d15 -> d16  [key=0, style=solid];
d17 -> d15  [key=0, style=bold, color=blue];
d83 -> d84  [key=0, style=solid];
d36 -> d37  [key=0, style=solid];
d36 -> d39  [key=0, style=solid];
d36 -> d67  [key=2, style=dotted];
d157 -> d95  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Func<T>>"];
d158 -> d95  [key=1, style=dashed, color=darkseagreen4, label=specProps];
d94 -> d95  [key=0, style=solid];
d96 -> d94  [key=0, style=bold, color=blue];
d99 -> d100  [key=0, style=solid];
d102 -> d103  [key=0, style=solid];
d159 -> d103  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
d159 -> d114  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
d160 -> d103  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
d104 -> d102  [key=0, style=bold, color=blue];
d161 -> d107  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
d161 -> d111  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
d108 -> d106  [key=0, style=bold, color=blue];
d112 -> d110  [key=0, style=bold, color=blue];
d162 -> d114  [key=1, style=dashed, color=darkseagreen4, label=token];
d115 -> d113  [key=0, style=bold, color=blue];
d117 -> d118  [key=0, style=solid];
d35 -> d36  [key=0, style=solid];
d122 -> d120  [key=0, style=bold, color=blue];
d121 -> d122  [key=0, style=solid];
d121 -> d123  [key=2, style=dotted];
d126 -> d124  [key=0, style=bold, color=blue];
d125 -> d126  [key=0, style=solid];
d125 -> d127  [key=2, style=dotted];
d130 -> d128  [key=0, style=bold, color=blue];
d129 -> d130  [key=0, style=solid];
d129 -> d131  [key=2, style=dotted];
d129 -> d123  [key=2, style=dotted];
d134 -> d132  [key=0, style=bold, color=blue];
d133 -> d134  [key=0, style=solid];
d133 -> d127  [key=2, style=dotted];
d137 -> d135  [key=0, style=bold, color=blue];
d136 -> d137  [key=0, style=solid];
d136 -> d131  [key=2, style=dotted];
d136 -> d138  [key=2, style=dotted];
d141 -> d139  [key=0, style=bold, color=blue];
d140 -> d141  [key=0, style=solid];
d140 -> d142  [key=2, style=dotted];
d140 -> d143  [key=2, style=dotted];
d140 -> d144  [key=2, style=dotted];
d145 -> d146  [key=0, style=solid];
d148 -> d149  [key=0, style=solid];
d21 -> d22  [key=0, style=solid];
d21 -> d21  [key=1, style=dashed, color=darkseagreen4, label=pt];
d88 -> d89  [key=0, style=solid];
d85 -> d83  [key=0, style=bold, color=blue];
d84 -> d85  [key=0, style=solid];
d84 -> d86  [key=2, style=dotted];
d84 -> d87  [key=2, style=dotted];
d101 -> d99  [key=0, style=bold, color=blue];
d100 -> d101  [key=0, style=solid];
d100 -> d86  [key=2, style=dotted];
d119 -> d117  [key=0, style=bold, color=blue];
d118 -> d119  [key=0, style=solid];
d118 -> d86  [key=2, style=dotted];
d147 -> d145  [key=0, style=bold, color=blue];
d146 -> d147  [key=0, style=solid];
d150 -> d148  [key=0, style=bold, color=blue];
d149 -> d150  [key=0, style=solid];
d90 -> d88  [key=0, style=bold, color=blue];
d89 -> d90  [key=0, style=solid];
d89 -> d91  [key=2, style=dotted];
d89 -> d92  [key=2, style=dotted];
d89 -> d93  [key=2, style=dotted];
m0_28 -> m0_77  [key=0, style=solid];
m0_28 -> m0_34  [key=3, color=green, style=bold, label="Parameter variable CommandLine.Error[] errors"];
m0_77 -> m0_78  [key=0, style=solid];
m0_77 -> m0_79  [key=2, style=dotted];
m0_77 -> m0_80  [key=2, style=dotted];
m0_78 -> m0_28  [key=0, style=bold, color=blue];
m0_36 -> m0_42  [key=0, style=solid, color=green];
m0_36 -> m0_51  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m0_36 -> m0_54  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>"];
m0_36 -> m0_59  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m0_42 -> m0_43  [key=0, style=solid, color=green];
m0_42 -> m0_44  [key=2, style=dotted, color=green];
m0_42 -> m0_45  [key=2, style=dotted, color=green];
m0_42 -> m0_32  [key=2, style=dotted, color=green];
m0_42 -> m0_46  [key=2, style=dotted, color=green];
m0_42 -> m0_47  [key=2, style=dotted, color=green];
m0_42 -> m0_48  [key=2, style=dotted, color=green];
m0_42 -> m0_29  [key=2, style=dotted, color=green];
m0_42 -> m0_49  [key=2, style=dotted, color=green];
m0_42 -> m0_50  [key=1, style=dashed, color=green, label="lambda expression"];
m0_42 -> m0_53  [key=1, style=dashed, color=green, label="lambda expression"];
m0_42 -> m0_61  [key=1, style=dashed, color=green, label="lambda expression"];
m0_43 -> m0_36  [key=0, style=bold, color=blue];
m0_73 -> m0_74  [key=0, style=solid];
m0_5 -> m0_6  [key=0, style=solid];
m0_5 -> m0_9  [key=2, style=dotted];
m0_5 -> m0_11  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_12 -> m0_13  [key=0, style=solid];
m0_12 -> m0_14  [key=2, style=dotted];
m0_6 -> m0_7  [key=0, style=solid];
m0_6 -> d10  [key=2, style=dotted];
m0_6 -> m0_15  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_16 -> m0_17  [key=0, style=solid];
m0_16 -> m0_18  [key=2, style=dotted];
m0_4 -> m0_5  [key=0, style=solid];
m0_4 -> m0_12  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m0_4 -> m0_6  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m0_4 -> m0_16  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m0_11 -> m0_12  [key=0, style=solid];
m0_7 -> m0_8  [key=0, style=solid];
m0_15 -> m0_16  [key=0, style=solid];
m0_8 -> m0_4  [key=0, style=bold, color=blue];
m0_13 -> m0_11  [key=0, style=bold, color=blue];
m0_17 -> m0_15  [key=0, style=bold, color=blue];
m0_38 -> m0_39  [key=0, style=solid];
m0_38 -> m0_40  [key=2, style=dotted];
m0_38 -> m0_41  [key=2, style=dotted];
m0_37 -> m0_38  [key=0, style=solid];
m0_39 -> m0_37  [key=0, style=bold, color=blue];
m0_51 -> m0_52  [key=0, style=solid];
m0_51 -> m0_29  [key=2, style=dotted];
m0_51 -> m0_40  [key=2, style=dotted];
m0_54 -> m0_55  [key=0, style=solid];
m0_54 -> m0_56  [key=2, style=dotted];
m0_54 -> m0_57  [key=2, style=dotted];
m0_54 -> m0_58  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_59 -> m0_60  [key=0, style=solid];
m0_59 -> m0_29  [key=2, style=dotted];
m0_59 -> m0_40  [key=2, style=dotted];
m0_50 -> m0_51  [key=0, style=solid];
m0_53 -> m0_54  [key=0, style=solid];
m0_61 -> m0_62  [key=0, style=solid];
m0_52 -> m0_50  [key=0, style=bold, color=blue];
m0_55 -> m0_53  [key=0, style=bold, color=blue];
m0_58 -> m0_59  [key=0, style=solid];
m0_60 -> m0_58  [key=0, style=bold, color=blue];
m0_62 -> m0_63  [key=0, style=solid];
m0_63 -> m0_61  [key=0, style=bold, color=blue];
m0_71 -> m0_72  [key=0, style=solid];
m0_71 -> m0_40  [key=2, style=dotted];
m0_70 -> m0_71  [key=0, style=solid];
m0_72 -> m0_70  [key=0, style=bold, color=blue];
m0_74 -> m0_75  [key=0, style=solid];
m0_74 -> m0_76  [key=2, style=dotted];
m0_75 -> m0_73  [key=0, style=bold, color=blue];
m0_80 -> m0_1  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>> tokenizer"];
m0_34 -> m0_64  [key=0, style=solid];
m0_34 -> m0_71  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_64 -> m0_65  [key=0, style=solid];
m0_64 -> m0_66  [key=2, style=dotted];
m0_64 -> m0_67  [key=2, style=dotted];
m0_64 -> m0_68  [key=2, style=dotted];
m0_64 -> m0_69  [key=2, style=dotted];
m0_64 -> m0_70  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_64 -> m0_73  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_65 -> m0_34  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid, color=red];
m0_0 -> m0_5  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_0 -> m0_12  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_0 -> m0_6  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_0 -> m0_16  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_0 -> m0_3  [key=3, color=darkorchid, style=bold, label="method methodReturn CommandLine.ParserResult<object> Choose"];
m0_1 -> m0_2  [key=0, style=solid, color=red];
m0_1 -> m0_3  [key=2, style=dotted, color=red];
m0_1 -> m0_4  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_1 -> m0_1  [key=3, color=darkorchid, style=bold, label="method methodReturn RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error> "];
m0_2 -> m0_0  [key=0, style=bold, color=blue];
m0_3 -> m0_19  [key=0, style=solid, color=green];
m0_3 -> m0_20  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<System.Type>"];
m0_3 -> m0_21  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m0_3 -> m0_22  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_3 -> m0_38  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_3 -> m0_23  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<System.Type>"];
m0_3 -> m0_24  [key=1, style=dashed, color=red, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>"];
m0_3 -> m0_28  [key=3, color=darkorchid, style=bold, label="method methodReturn CommandLine.ParserResult<object> Choose"];
m0_19 -> m0_20  [key=0, style=solid, color=green];
m0_19 -> m0_21  [key=0, style=solid, color=green];
m0_19 -> m0_26  [key=2, style=dotted, color=green];
m0_20 -> m0_25  [key=0, style=solid];
m0_20 -> m0_27  [key=2, style=dotted];
m0_20 -> m0_28  [key=2, style=dotted];
m0_21 -> m0_22  [key=0, style=solid];
m0_21 -> m0_29  [key=2, style=dotted];
m0_21 -> m0_38  [key=1, style=dashed, color=darkseagreen4, label=firstArg];
m0_22 -> m0_23  [key=0, style=solid];
m0_22 -> m0_38  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_22 -> m0_24  [key=1, style=dashed, color=darkseagreen4, label=preprocCompare];
m0_22 -> m0_22  [key=3, color=green, style=bold, label="Local variable System.Func<string, bool> preprocCompare"];
m0_23 -> m0_24  [key=0, style=solid, color=red];
m0_23 -> m0_30  [key=2, style=dotted];
m0_24 -> m0_25  [key=0, style=solid, color=red];
m0_24 -> m0_31  [key=2, style=dotted, color=red];
m0_24 -> m0_32  [key=2, style=dotted, color=red];
m0_24 -> m0_33  [key=2, style=dotted, color=red];
m0_24 -> m0_34  [key=2, style=dotted, color=red];
m0_24 -> m0_28  [key=2, style=dotted, color=red];
m0_24 -> m0_35  [key=2, style=dotted, color=red];
m0_24 -> m0_36  [key=2, style=dotted, color=red];
m0_25 -> m0_3  [key=0, style=bold, color=blue];
m0_81 -> m0_5  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_81 -> m0_12  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_81 -> m0_6  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_81 -> m0_16  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_82 -> m0_12  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m0_82 -> m0_16  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m0_83 -> m0_38  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_84 -> m0_38  [key=1, style=dashed, color=darkseagreen4, label=firstArg];
m0_85 -> m0_51  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m0_85 -> m0_54  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m0_85 -> m0_59  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m0_86 -> m0_51  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_86 -> m0_54  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_86 -> m0_59  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_87 -> m0_54  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>"];
m0_88 -> m0_71  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_89 -> m0_71  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_34 -> m1_35  [key=0, style=solid];
m1_34 -> m1_37  [key=1, style=dashed, color=darkseagreen4, label="System.IO.TextWriter"];
m1_34 -> m1_39  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_34 -> m1_42  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_34 -> m1_43  [key=1, style=dashed, color=darkseagreen4, label="System.IO.TextWriter"];
m1_34 -> m1_47  [key=3, color=darkorchid, style=bold, label="Parameter variable string message"];
m1_34 -> m1_50  [key=3, color=darkorchid, style=bold, label="Parameter variable string message"];
m1_35 -> m1_36  [key=0, style=solid];
m1_35 -> m1_37  [key=0, style=solid];
m1_35 -> m1_8  [key=2, style=dotted];
m1_37 -> m1_38  [key=0, style=solid];
m1_37 -> m1_39  [key=0, style=solid];
m1_39 -> m1_40  [key=0, style=solid];
m1_39 -> m1_30  [key=2, style=dotted];
m1_39 -> m1_41  [key=1, style=dashed, color=darkseagreen4, label=builder];
m1_39 -> m1_42  [key=1, style=dashed, color=darkseagreen4, label=builder];
m1_39 -> m1_43  [key=1, style=dashed, color=darkseagreen4, label=builder];
m1_42 -> m1_43  [key=0, style=solid];
m1_42 -> m1_31  [key=2, style=dotted];
m1_43 -> m1_44  [key=0, style=solid];
m1_43 -> m1_33  [key=2, style=dotted];
m1_43 -> m1_46  [key=2, style=dotted];
m1_36 -> m1_44  [key=0, style=solid];
m1_36 -> m1_9  [key=2, style=dotted];
m1_38 -> m1_44  [key=0, style=solid];
m1_38 -> n9  [key=2, style=dotted];
m1_40 -> m1_41  [key=0, style=solid];
m1_40 -> m1_31  [key=2, style=dotted];
m1_41 -> m1_42  [key=0, style=solid];
m1_41 -> m1_31  [key=2, style=dotted];
m1_44 -> m1_34  [key=0, style=bold, color=blue];
m1_47 -> m1_48  [key=0, style=solid];
m1_48 -> m1_49  [key=0, style=solid];
m1_48 -> m1_34  [key=2, style=dotted];
m1_49 -> m1_47  [key=0, style=bold, color=blue];
m1_2 -> m1_3  [key=0, style=solid];
m1_2 -> m1_5  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_2 -> m1_6  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_3 -> m1_4  [key=0, style=solid];
m1_3 -> m1_5  [key=0, style=solid];
m1_3 -> m1_8  [key=2, style=dotted];
m1_5 -> m1_6  [key=0, style=solid];
m1_6 -> m1_7  [key=0, style=solid];
m1_4 -> m1_7  [key=0, style=solid];
m1_4 -> m1_9  [key=2, style=dotted];
m1_7 -> m1_2  [key=0, style=bold, color=blue];
m1_17 -> m1_18  [key=0, style=solid];
m1_17 -> m1_20  [key=3, color=darkorchid, style=bold, label="method methodReturn string op_Implicit"];
m1_18 -> m1_19  [key=0, style=solid];
m1_18 -> m1_20  [key=2, style=dotted];
m1_19 -> m1_17  [key=0, style=bold, color=blue];
m1_0 -> m1_1  [key=0, style=solid];
m1_1 -> m1_0  [key=0, style=bold, color=blue];
m1_20 -> m1_21  [key=0, style=solid];
m1_21 -> m1_22  [key=0, style=solid];
m1_21 -> m1_29  [key=2, style=dotted];
m1_21 -> m1_24  [key=1, style=dashed, color=darkseagreen4, label=isVersionNull];
m1_22 -> m1_23  [key=0, style=solid];
m1_22 -> m1_30  [key=2, style=dotted];
m1_22 -> m1_25  [key=1, style=dashed, color=darkseagreen4, label=builder];
m1_22 -> m1_26  [key=1, style=dashed, color=darkseagreen4, label=builder];
m1_22 -> m1_27  [key=1, style=dashed, color=darkseagreen4, label=builder];
m1_24 -> m1_25  [key=0, style=solid];
m1_24 -> m1_27  [key=0, style=solid];
m1_23 -> m1_24  [key=0, style=solid];
m1_23 -> m1_31  [key=2, style=dotted];
m1_25 -> m1_26  [key=0, style=solid];
m1_25 -> m1_32  [key=2, style=dotted];
m1_26 -> m1_27  [key=0, style=solid];
m1_26 -> m1_31  [key=2, style=dotted];
m1_27 -> m1_28  [key=0, style=solid];
m1_27 -> m1_33  [key=2, style=dotted];
m1_28 -> m1_20  [key=0, style=bold, color=blue];
m1_14 -> m1_15  [key=0, style=solid];
m1_10 -> m1_11  [key=0, style=solid];
m1_11 -> m1_12  [key=0, style=solid];
m1_11 -> m1_13  [key=2, style=dotted];
m1_12 -> m1_10  [key=0, style=bold, color=blue];
m1_15 -> m1_16  [key=0, style=solid];
m1_16 -> m1_14  [key=0, style=bold, color=blue];
m1_50 -> m1_51  [key=0, style=solid];
m1_51 -> m1_52  [key=0, style=solid];
m1_51 -> m1_34  [key=2, style=dotted];
m1_52 -> m1_50  [key=0, style=bold, color=blue];
m1_53 -> m1_5  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HeadingInfo"];
m1_53 -> m1_6  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HeadingInfo"];
m1_53 -> m1_21  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HeadingInfo"];
m1_53 -> m1_22  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HeadingInfo"];
m1_53 -> m1_23  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HeadingInfo"];
m1_53 -> m1_26  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HeadingInfo"];
m1_53 -> m1_39  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HeadingInfo"];
m1_53 -> m1_40  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HeadingInfo"];
m1_53 -> m1_48  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HeadingInfo"];
m1_53 -> m1_51  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HeadingInfo"];
}
