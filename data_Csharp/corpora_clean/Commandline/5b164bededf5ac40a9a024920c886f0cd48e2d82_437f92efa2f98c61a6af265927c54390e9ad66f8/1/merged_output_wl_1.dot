digraph  {
m1_11 [cluster="Humanizer.PrepositionsExtensions.In(System.DateTime, int)", file="ReflectionExtensions.cs", label="Entry Humanizer.PrepositionsExtensions.In(System.DateTime, int)", span="36-36"];
m1_12 [cluster="Humanizer.PrepositionsExtensions.In(System.DateTime, int)", file="ReflectionExtensions.cs", label="return new DateTime(year, date.Month, date.Day, date.Hour, date.Minute, date.Second, date.Millisecond);", span="38-38"];
m1_13 [cluster="Humanizer.PrepositionsExtensions.In(System.DateTime, int)", file="ReflectionExtensions.cs", label="Exit Humanizer.PrepositionsExtensions.In(System.DateTime, int)", span="36-36"];
m1_7 [cluster="System.DateTime.At(int, int, int, int)", file="ReflectionExtensions.cs", label="Entry System.DateTime.At(int, int, int, int)", span="5-5"];
m1_8 [cluster="Humanizer.PrepositionsExtensions.AtNoon(System.DateTime)", file="ReflectionExtensions.cs", label="Entry Humanizer.PrepositionsExtensions.AtNoon(System.DateTime)", span="25-25"];
m1_9 [cluster="Humanizer.PrepositionsExtensions.AtNoon(System.DateTime)", color=green, community=0, file="ReflectionExtensions.cs", label="0: return date.At(12);", span="27-27"];
m1_10 [cluster="Humanizer.PrepositionsExtensions.AtNoon(System.DateTime)", file="ReflectionExtensions.cs", label="Exit Humanizer.PrepositionsExtensions.AtNoon(System.DateTime)", span="25-25"];
m1_3 [cluster="System.DateTime.DateTime(int, int, int, int, int, int, int)", file="ReflectionExtensions.cs", label="Entry System.DateTime.DateTime(int, int, int, int, int, int, int)", span="0-0"];
m1_0 [cluster="Humanizer.PrepositionsExtensions.At(System.DateTime, int, int, int, int)", file="ReflectionExtensions.cs", label="Entry Humanizer.PrepositionsExtensions.At(System.DateTime, int, int, int, int)", span="5-5"];
m1_1 [cluster="Humanizer.PrepositionsExtensions.At(System.DateTime, int, int, int, int)", file="ReflectionExtensions.cs", label="return new DateTime(date.Year, date.Month, date.Day, hour, min, second, millisecond);", span="7-7"];
m1_2 [cluster="Humanizer.PrepositionsExtensions.At(System.DateTime, int, int, int, int)", file="ReflectionExtensions.cs", label="Exit Humanizer.PrepositionsExtensions.At(System.DateTime, int, int, int, int)", span="5-5"];
m1_4 [cluster="Humanizer.PrepositionsExtensions.AtMidnight(System.DateTime)", file="ReflectionExtensions.cs", label="Entry Humanizer.PrepositionsExtensions.AtMidnight(System.DateTime)", span="15-15"];
m1_5 [cluster="Humanizer.PrepositionsExtensions.AtMidnight(System.DateTime)", file="ReflectionExtensions.cs", label="return date.At(0);", span="17-17"];
m1_6 [cluster="Humanizer.PrepositionsExtensions.AtMidnight(System.DateTime)", file="ReflectionExtensions.cs", label="Exit Humanizer.PrepositionsExtensions.AtMidnight(System.DateTime)", span="15-15"];
m2_3 [cluster="System.Collections.Generic.IEnumerable<TSource>.Pairwise<TSource, TResult>(System.Func<TSource, TSource, TResult>)", file="Scalar.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Pairwise<TSource, TResult>(System.Func<TSource, TSource, TResult>)", span="24-24"];
m2_0 [cluster="CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>>>>)", file="Scalar.cs", label="Entry CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>>>>)", span="11-11"];
m2_1 [cluster="CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>>>>)", color=green, community=0, file="Scalar.cs", label="0: return from tseq in tokens.Pairwise(\r\n                (f, s) =>\r\n                        f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).Return(info =>\r\n                                    info.Item1 == TypeDescriptorKind.Scalar ? new[] { f, s } : new Token[] { }, new Token[] { })\r\n                                    : new Token[] { })\r\n                   from t in tseq\r\n                   select t;", span="15-22"];
m2_2 [cluster="CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>>>>)", file="Scalar.cs", label="Exit CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>>>>)", span="11-11"];
m2_11 [cluster="lambda expression", file="Scalar.cs", label="Entry lambda expression", span="18-19"];
m2_4 [cluster="lambda expression", file="Scalar.cs", label="Entry lambda expression", span="16-20"];
m2_5 [cluster="lambda expression", color=green, community=0, file="Scalar.cs", label="0: f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).Return(info =>\r\n                                    info.Item1 == TypeDescriptorKind.Scalar ? new[] { f, s } : new Token[] { }, new Token[] { })\r\n                                    : new Token[] { }", span="17-20"];
m2_6 [cluster="lambda expression", file="Scalar.cs", label="Exit lambda expression", span="16-20"];
m2_12 [cluster="lambda expression", color=green, community=0, file="Scalar.cs", label="0: info.Item1 == TypeDescriptorKind.Scalar ? new[] { f, s } : new Token[] { }", span="19-19"];
m2_13 [cluster="lambda expression", file="Scalar.cs", label="Exit lambda expression", span="18-19"];
m2_10 [cluster="CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", file="Scalar.cs", label="Entry CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", span="103-103"];
m2_7 [cluster="CommandLine.Core.Token.IsName()", file="Scalar.cs", label="Entry CommandLine.Core.Token.IsName()", span="72-72"];
m2_8 [cluster="CommandLine.Core.Token.IsValue()", file="Scalar.cs", label="Entry CommandLine.Core.Token.IsValue()", span="77-77"];
m2_9 [cluster="System.Func<T, TResult>.Invoke(T)", file="Scalar.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m2_14 [file="Scalar.cs", label="System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>>>>", span=""];
m2_15 [file="Scalar.cs", label="CommandLine.Core.Token", span=""];
m2_16 [file="Scalar.cs", label="CommandLine.Core.Token", span=""];
m4_42 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="SpecificationExtensions.cs", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="66-66"];
m4_52 [cluster="CommandLine.Core.Specification.IsOption()", file="SpecificationExtensions.cs", label="Entry CommandLine.Core.Specification.IsOption()", span="11-11"];
m4_15 [cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", file="SpecificationExtensions.cs", label="Entry CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", span="42-42"];
m4_16 [cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", file="SpecificationExtensions.cs", label=guardsLookup, span="44-44"];
m4_17 [cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", file="SpecificationExtensions.cs", label="specifications.Any(spec => guard.Item1(spec))", span="46-46"];
m4_19 [cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", file="SpecificationExtensions.cs", label="return specifications;", span="52-52"];
m4_18 [cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", file="SpecificationExtensions.cs", label="throw new ApplicationException(guard.Item2);", span="48-48"];
m4_20 [cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", file="SpecificationExtensions.cs", label="Exit CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", span="42-42"];
m4_41 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="SpecificationExtensions.cs", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="71-71"];
m4_0 [cluster="CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="Entry CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)", span="11-11"];
m4_1 [cluster="CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="specification == null", span="13-13"];
m4_3 [cluster="CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="return specification.Tag == SpecificationType.Option;", span="15-15"];
m4_2 [cluster="CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="throw new ArgumentNullException(''specification'');", span="13-13"];
m4_4 [cluster="CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="Exit CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)", span="11-11"];
m4_6 [cluster="CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="Entry CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", span="18-18"];
m4_7 [cluster="CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="specification == null", span="20-20"];
m4_9 [cluster="CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="return specification.Tag == SpecificationType.Value;", span="22-22"];
m4_8 [cluster="CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="throw new ArgumentNullException(''specification'');", span="20-20"];
m4_10 [cluster="CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="Exit CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", span="18-18"];
m4_23 [cluster="lambda expression", file="SpecificationExtensions.cs", label="Entry lambda expression", span="46-46"];
m4_24 [cluster="lambda expression", file="SpecificationExtensions.cs", label="guard.Item1(spec)", span="46-46"];
m4_25 [cluster="lambda expression", file="SpecificationExtensions.cs", label="Exit lambda expression", span="46-46"];
m4_27 [cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="Entry CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", span="55-55"];
m4_28 [cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="specification == null", span="57-57"];
m4_30 [cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", color=red, community=0, file="SpecificationExtensions.cs", label="0: specification.ConversionType.ToDescriptor()", span="59-59"];
m4_34 [cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="var min = specification.Min", span="64-64"];
m4_35 [cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="var max = specification.Max", span="65-65"];
m4_29 [cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="throw new ArgumentNullException(''specification'');", span="57-57"];
m4_31 [cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", color=red, community=0, file="SpecificationExtensions.cs", label="0: DescriptorType.Scalar", span="61-61"];
m4_33 [cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", color=red, community=0, file="SpecificationExtensions.cs", label="0: DescriptorType.Sequence", span="63-63"];
m4_32 [cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="return  Maybe.Just(1);", span="62-62"];
m4_36 [cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="min >= 0 && max >= 0", span="66-66"];
m4_37 [cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="return Maybe.Just(max);", span="68-68"];
m4_38 [cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="return Maybe.Nothing<int>();", span="73-73"];
m4_39 [cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="Exit CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", span="55-55"];
m4_22 [cluster="System.ApplicationException.ApplicationException(string)", file="SpecificationExtensions.cs", label="Entry System.ApplicationException.ApplicationException(string)", span="0-0"];
m4_26 [cluster="System.Func<T, TResult>.Invoke(T)", file="SpecificationExtensions.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m4_14 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="SpecificationExtensions.cs", label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", span="17-17"];
m4_5 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="SpecificationExtensions.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m4_40 [cluster="System.Type.ToDescriptor()", file="SpecificationExtensions.cs", label="Entry System.Type.ToDescriptor()", span="22-22"];
m4_21 [cluster="Unk.Any", file="SpecificationExtensions.cs", label="Entry Unk.Any", span=""];
m4_43 [cluster="CommandLine.Core.SpecificationExtensions.IsMinNotSpecified(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="Entry CommandLine.Core.SpecificationExtensions.IsMinNotSpecified(CommandLine.Core.Specification)", span="76-76"];
m4_44 [cluster="CommandLine.Core.SpecificationExtensions.IsMinNotSpecified(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="return specification.Min == -1;", span="78-78"];
m4_45 [cluster="CommandLine.Core.SpecificationExtensions.IsMinNotSpecified(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="Exit CommandLine.Core.SpecificationExtensions.IsMinNotSpecified(CommandLine.Core.Specification)", span="76-76"];
m4_49 [cluster="CommandLine.Core.SpecificationExtensions.GetSetName(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="Entry CommandLine.Core.SpecificationExtensions.GetSetName(CommandLine.Core.Specification)", span="86-86"];
m4_50 [cluster="CommandLine.Core.SpecificationExtensions.GetSetName(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="return specification.IsOption()\r\n                ? ((OptionSpecification)specification).SetName\r\n                : string.Empty;", span="88-90"];
m4_51 [cluster="CommandLine.Core.SpecificationExtensions.GetSetName(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="Exit CommandLine.Core.SpecificationExtensions.GetSetName(CommandLine.Core.Specification)", span="86-86"];
m4_11 [cluster="CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string, System.Collections.Generic.IEnumerable<string>)", file="SpecificationExtensions.cs", label="Entry CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string, System.Collections.Generic.IEnumerable<string>)", span="25-25"];
m4_12 [cluster="CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string, System.Collections.Generic.IEnumerable<string>)", file="SpecificationExtensions.cs", label="return new OptionSpecification(\r\n                specification.ShortName,\r\n                newLongName,\r\n                specification.Required,\r\n                specification.SetName,\r\n                specification.Min,\r\n                specification.Max,\r\n                specification.Separator,\r\n                specification.DefaultValue,\r\n                specification.ConversionType,\r\n                specification.HelpText,\r\n                specification.MetaValue,\r\n                enumValues);", span="27-39"];
m4_13 [cluster="CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string, System.Collections.Generic.IEnumerable<string>)", file="SpecificationExtensions.cs", label="Exit CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string, System.Collections.Generic.IEnumerable<string>)", span="25-25"];
m4_46 [cluster="CommandLine.Core.SpecificationExtensions.IsMaxNotSpecified(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="Entry CommandLine.Core.SpecificationExtensions.IsMaxNotSpecified(CommandLine.Core.Specification)", span="81-81"];
m4_47 [cluster="CommandLine.Core.SpecificationExtensions.IsMaxNotSpecified(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="return specification.Max == -1;", span="83-83"];
m4_48 [cluster="CommandLine.Core.SpecificationExtensions.IsMaxNotSpecified(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="Exit CommandLine.Core.SpecificationExtensions.IsMaxNotSpecified(CommandLine.Core.Specification)", span="81-81"];
m4_53 [file="SpecificationExtensions.cs", label=guard, span=""];
m7_5 [cluster="lambda expression", file="Switch.cs", label="Entry lambda expression", span="16-16"];
m7_6 [cluster="lambda expression", color=green, community=0, file="Switch.cs", label="0: t.IsName() && info.Item1 == TypeDescriptorKind.Boolean", span="16-16"];
m7_7 [cluster="lambda expression", file="Switch.cs", label="Exit lambda expression", span="16-16"];
m7_4 [cluster="CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", file="Switch.cs", label="Entry CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", span="103-103"];
m7_8 [cluster="CommandLine.Core.Token.IsName()", file="Switch.cs", label="Entry CommandLine.Core.Token.IsName()", span="72-72"];
m7_0 [cluster="CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>>>>)", file="Switch.cs", label="Entry CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>>>>)", span="11-11"];
m7_1 [cluster="CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>>>>)", color=green, community=0, file="Switch.cs", label="0: return from t in tokens\r\n                   where typeLookup(t.Text).Return(info => t.IsName() && info.Item1 == TypeDescriptorKind.Boolean, false)\r\n                   select t;", span="15-17"];
m7_2 [cluster="CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>>>>)", file="Switch.cs", label="Exit CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>>>>)", span="11-11"];
m7_3 [cluster="System.Func<T, TResult>.Invoke(T)", file="Switch.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m7_9 [file="Switch.cs", label=t, span=""];
m8_0 [cluster="Humanizer.Tests.Localisation.nl.NumberToOrdinalWordsTests.NumberToOrdinalWordsTests()", file="TokenPartitioner.cs", label="Entry Humanizer.Tests.Localisation.nl.NumberToOrdinalWordsTests.NumberToOrdinalWordsTests()", span="7-7"];
m8_2 [cluster="Humanizer.Tests.Localisation.nl.NumberToOrdinalWordsTests.ToOrdinalWords(int, string)", color=green, community=0, file="TokenPartitioner.cs", label="0: Entry Humanizer.Tests.Localisation.nl.NumberToOrdinalWordsTests.ToOrdinalWords(int, string)", span="61-61"];
m8_1 [cluster="Humanizer.Tests.Localisation.nl.NumberToOrdinalWordsTests.NumberToOrdinalWordsTests()", file="TokenPartitioner.cs", label="Exit Humanizer.Tests.Localisation.nl.NumberToOrdinalWordsTests.NumberToOrdinalWordsTests()", span="7-7"];
m8_3 [cluster="Humanizer.Tests.Localisation.nl.NumberToOrdinalWordsTests.ToOrdinalWords(int, string)", color=red, community=0, file="TokenPartitioner.cs", label="0: Assert.Equal(words, number.ToOrdinalWords())", span="63-63"];
m8_4 [cluster="Humanizer.Tests.Localisation.nl.NumberToOrdinalWordsTests.ToOrdinalWords(int, string)", file="TokenPartitioner.cs", label="Exit Humanizer.Tests.Localisation.nl.NumberToOrdinalWordsTests.ToOrdinalWords(int, string)", span="61-61"];
m8_5 [cluster="int.ToOrdinalWords()", file="TokenPartitioner.cs", label="Entry int.ToOrdinalWords()", span="54-54"];
m8_6 [cluster="Unk.Equal", file="TokenPartitioner.cs", label="Entry Unk.Equal", span=""];
m8_100 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="TokenPartitioner.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", span="182-182"];
m8_103 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="TokenPartitioner.cs", label="var result = sut.ParseArguments<FakeImmutableOptions>(new[] { ''--help'' })", span="189-189"];
m8_102 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="TokenPartitioner.cs", label="var sut = new Parser()", span="186-186"];
m8_104 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="TokenPartitioner.cs", label="((NotParsed<FakeImmutableOptions>)result).Errors.Should().HaveCount(x => x == 1)", span="192-192"];
m8_105 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="TokenPartitioner.cs", label="((NotParsed<FakeImmutableOptions>)result).Errors.Should().ContainSingle(e => e.Equals(expectedError))", span="193-193"];
m8_101 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="TokenPartitioner.cs", label="var expectedError = new HelpRequestedError()", span="185-185"];
m8_106 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="TokenPartitioner.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", span="182-182"];
m8_8 [cluster="CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)", file="TokenPartitioner.cs", label="Entry CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)", span="36-36"];
m8_79 [cluster="CommandLine.Tests.Fakes.CloneOptions.CloneOptions()", file="TokenPartitioner.cs", label="Entry CommandLine.Tests.Fakes.CloneOptions.CloneOptions()", span="33-33"];
m8_118 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="TokenPartitioner.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", span="198-198"];
m8_120 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="TokenPartitioner.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="202-202"];
m8_119 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="TokenPartitioner.cs", label="var help = new StringWriter()", span="201-201"];
m8_121 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="TokenPartitioner.cs", label="sut.ParseArguments<FakeImmutableOptions>(new[] { ''--help'' })", span="205-205"];
m8_122 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="TokenPartitioner.cs", label="var result = help.ToString()", span="206-206"];
m8_123 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="TokenPartitioner.cs", label="result.Length.Should().BeGreaterThan(0)", span="209-209"];
m8_124 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="TokenPartitioner.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", span="198-198"];
m8_11 [cluster="Unk.True", file="TokenPartitioner.cs", label="Entry Unk.True", span=""];
m8_46 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", file="TokenPartitioner.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", span="79-79"];
m8_48 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", file="TokenPartitioner.cs", label="var sut = new Parser(with => with.EnableDashDash = true)", span="89-89"];
m8_49 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", file="TokenPartitioner.cs", label="var result = sut.ParseArguments<FakeOptionsWithValues>(\r\n                new[] { ''--stringvalue'', ''astring'', ''--'', ''20'', ''--aaa'', ''-b'', ''--ccc'', ''30'' })", span="92-93"];
m8_47 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", file="TokenPartitioner.cs", label="var expectedOptions = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''astring'',\r\n                    LongValue = 20L,\r\n                    StringSequence = new[] { ''--aaa'', ''-b'', ''--ccc'' },\r\n                    IntValue = 30\r\n                }", span="82-88"];
m8_50 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", file="TokenPartitioner.cs", label="result.Value.ShouldBeEquivalentTo(expectedOptions)", span="96-96"];
m8_51 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", file="TokenPartitioner.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", span="79-79"];
m8_110 [cluster="Unk.ContainSingle", file="TokenPartitioner.cs", label="Entry Unk.ContainSingle", span=""];
m8_64 [cluster="Unk.>", file="TokenPartitioner.cs", label="Entry Unk.>", span=""];
m8_22 [cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="TokenPartitioner.cs", label="Entry CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", span="141-141"];
m8_33 [cluster="CommandLine.Parser.ParseArguments<T1, T2, T3>(System.Collections.Generic.IEnumerable<string>)", file="TokenPartitioner.cs", label="Entry CommandLine.Parser.ParseArguments<T1, T2, T3>(System.Collections.Generic.IEnumerable<string>)", span="46-46"];
m8_83 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="TokenPartitioner.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", span="145-145"];
m8_86 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="TokenPartitioner.cs", label="var result = sut.ParseArguments<AddOptions, CommitOptions, CloneOptions>(\r\n                new[] { ''clone'', ''-q'', ''http://gsscoder.github.com/'', ''http://yes-to-nooo.github.com/'' })", span="156-157"];
m8_85 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="TokenPartitioner.cs", label="var sut = new Parser()", span="153-153"];
m8_88 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="TokenPartitioner.cs", label="result.Value.ShouldBeEquivalentTo(expectedOptions, o => o.RespectingRuntimeTypes())", span="161-161"];
m8_87 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="TokenPartitioner.cs", label="Assert.IsType<CloneOptions>(result.Value)", span="160-160"];
m8_84 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="TokenPartitioner.cs", label="var expectedOptions = new CloneOptions\r\n            {\r\n                Quiet = true,\r\n                Urls = new[] { ''http://gsscoder.github.com/'', ''http://yes-to-nooo.github.com/'' }\r\n            }", span="148-152"];
m8_89 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="TokenPartitioner.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", span="145-145"];
m8_56 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", file="TokenPartitioner.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", span="101-101"];
m8_58 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", file="TokenPartitioner.cs", label="var sut = new Parser(with => with.EnableDashDash = true)", span="109-109"];
m8_57 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", file="TokenPartitioner.cs", label="var expectedOptions = new AddOptions\r\n                {\r\n                    Patch = true,\r\n                    FileName = ''--strange-fn''\r\n                }", span="104-108"];
m8_59 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", file="TokenPartitioner.cs", label="var result = sut.ParseArguments(\r\n                new[] { ''add'', ''-p'', ''--'', ''--strange-fn'' },\r\n                typeof(AddOptions), typeof(CommitOptions), typeof(CloneOptions))", span="112-114"];
m8_61 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", file="TokenPartitioner.cs", label="result.Value.ShouldBeEquivalentTo(expectedOptions, o => o.RespectingRuntimeTypes())", span="118-118"];
m8_60 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", file="TokenPartitioner.cs", label="Assert.IsType<AddOptions>(result.Value)", span="117-117"];
m8_62 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", file="TokenPartitioner.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", span="101-101"];
m8_7 [cluster="System.IO.StringWriter.StringWriter()", file="TokenPartitioner.cs", label="Entry System.IO.StringWriter.StringWriter()", span="0-0"];
m8_125 [cluster="Unk.BeGreaterThan", file="TokenPartitioner.cs", label="Entry Unk.BeGreaterThan", span=""];
m8_129 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="TokenPartitioner.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", span="214-214"];
m8_132 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="TokenPartitioner.cs", label="var result = sut.ParseArguments<FakeOptions>(new[] { ''--version'' })", span="221-221"];
m8_131 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="TokenPartitioner.cs", label="var sut = new Parser()", span="218-218"];
m8_133 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="TokenPartitioner.cs", label="((NotParsed<FakeOptions>)result).Errors.Should().HaveCount(x => x == 1)", span="224-224"];
m8_134 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="TokenPartitioner.cs", label="((NotParsed<FakeOptions>)result).Errors.Should().ContainSingle(e => e.Equals(expectedError))", span="225-225"];
m8_130 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="TokenPartitioner.cs", label="var expectedError = new VersionRequestedError()", span="217-217"];
m8_135 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="TokenPartitioner.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", span="214-214"];
m8_71 [cluster="Unk.RespectingRuntimeTypes", file="TokenPartitioner.cs", label="Entry Unk.RespectingRuntimeTypes", span=""];
m8_136 [cluster="CommandLine.VersionRequestedError.VersionRequestedError()", file="TokenPartitioner.cs", label="Entry CommandLine.VersionRequestedError.VersionRequestedError()", span="421-421"];
m8_44 [cluster="CommandLine.Parser.Parser()", file="TokenPartitioner.cs", label="Entry CommandLine.Parser.Parser()", span="25-25"];
m8_90 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="161-161"];
m8_13 [cluster="lambda expression", color=green, community=0, file="TokenPartitioner.cs", label="0: with.HelpWriter = writer", span="17-17"];
m8_12 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="17-17"];
m8_14 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="17-17"];
m8_24 [cluster="lambda expression", file="TokenPartitioner.cs", label="with.HelpWriter = writer", span="33-33"];
m8_35 [cluster="lambda expression", file="TokenPartitioner.cs", label="with.HelpWriter = writer", span="49-49"];
m8_54 [cluster="lambda expression", file="TokenPartitioner.cs", label="with.EnableDashDash = true", span="89-89"];
m8_66 [cluster="lambda expression", file="TokenPartitioner.cs", label="with.EnableDashDash = true", span="109-109"];
m8_127 [cluster="lambda expression", file="TokenPartitioner.cs", label="config.HelpWriter = help", span="202-202"];
m8_158 [cluster="lambda expression", file="TokenPartitioner.cs", label="config.HelpWriter = help", span="237-237"];
m8_155 [cluster="lambda expression", file="TokenPartitioner.cs", label="config.HelpWriter = version", span="235-235"];
m8_23 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="33-33"];
m8_25 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="33-33"];
m8_34 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="49-49"];
m8_36 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="49-49"];
m8_53 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="89-89"];
m8_55 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="89-89"];
m8_65 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="109-109"];
m8_67 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="109-109"];
m8_126 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="202-202"];
m8_128 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="202-202"];
m8_157 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="237-237"];
m8_159 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="237-237"];
m8_154 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="235-235"];
m8_156 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="235-235"];
m8_111 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="192-192"];
m8_114 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="193-193"];
m8_137 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="224-224"];
m8_140 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="225-225"];
m8_68 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="118-118"];
m8_115 [cluster="lambda expression", file="TokenPartitioner.cs", label="e.Equals(expectedError)", span="193-193"];
m8_113 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="192-192"];
m8_112 [cluster="lambda expression", file="TokenPartitioner.cs", label="x == 1", span="192-192"];
m8_116 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="193-193"];
m8_141 [cluster="lambda expression", file="TokenPartitioner.cs", label="e.Equals(expectedError)", span="225-225"];
m8_139 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="224-224"];
m8_138 [cluster="lambda expression", file="TokenPartitioner.cs", label="x == 1", span="224-224"];
m8_142 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="225-225"];
m8_70 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="118-118"];
m8_69 [cluster="lambda expression", file="TokenPartitioner.cs", label="o.RespectingRuntimeTypes()", span="118-118"];
m8_80 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="140-140"];
m8_82 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="140-140"];
m8_81 [cluster="lambda expression", file="TokenPartitioner.cs", label="o.RespectingRuntimeTypes()", span="140-140"];
m8_91 [cluster="lambda expression", file="TokenPartitioner.cs", label="o.RespectingRuntimeTypes()", span="161-161"];
m8_92 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="161-161"];
m8_26 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", file="TokenPartitioner.cs", label="Entry CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", span="45-45"];
m8_28 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", file="TokenPartitioner.cs", label="var sut = new Parser(with => with.HelpWriter = writer)", span="49-49"];
m8_27 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", file="TokenPartitioner.cs", label="var writer = new StringWriter()", span="48-48"];
m8_29 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", file="TokenPartitioner.cs", label="sut.ParseArguments<AddOptions, CommitOptions, CloneOptions>(new string[] { })", span="52-52"];
m8_30 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", file="TokenPartitioner.cs", label="var text = writer.ToString()", span="55-55"];
m8_31 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", file="TokenPartitioner.cs", label="Assert.True(text.Length > 0)", span="56-56"];
m8_32 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", file="TokenPartitioner.cs", label="Exit CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", span="45-45"];
m8_108 [cluster="Unk.Should", file="TokenPartitioner.cs", label="Entry Unk.Should", span=""];
m8_117 [cluster="Unk.Equals", file="TokenPartitioner.cs", label="Entry Unk.Equals", span=""];
m8_10 [cluster="System.IO.StringWriter.ToString()", file="TokenPartitioner.cs", label="Entry System.IO.StringWriter.ToString()", span="0-0"];
m8_109 [cluster="Unk.HaveCount", file="TokenPartitioner.cs", label="Entry Unk.HaveCount", span=""];
m8_99 [cluster="CommandLine.Tests.Fakes.FakeImmutableOptions.FakeImmutableOptions(string, System.Collections.Generic.IEnumerable<int>, bool, long)", file="TokenPartitioner.cs", label="Entry CommandLine.Tests.Fakes.FakeImmutableOptions.FakeImmutableOptions(string, System.Collections.Generic.IEnumerable<int>, bool, long)", span="13-13"];
m8_37 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options()", file="TokenPartitioner.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_options()", span="61-61"];
m8_40 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options()", file="TokenPartitioner.cs", label="var result = sut.ParseArguments<FakeOptions>(new[] { ''--stringvalue=strvalue'', ''-i1'', ''2'', ''3'' })", span="71-71"];
m8_39 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options()", file="TokenPartitioner.cs", label="var sut = new Parser()", span="68-68"];
m8_41 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options()", file="TokenPartitioner.cs", label="result.Value.ShouldBeEquivalentTo(expectedOptions)", span="74-74"];
m8_38 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options()", file="TokenPartitioner.cs", label="var expectedOptions = new FakeOptions\r\n                {\r\n                    StringValue = ''strvalue'', IntSequence = new[] { 1, 2, 3 }\r\n                }", span="64-67"];
m8_42 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options()", file="TokenPartitioner.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_options()", span="61-61"];
m8_63 [cluster="CommandLine.Tests.Fakes.AddOptions.AddOptions()", file="TokenPartitioner.cs", label="Entry CommandLine.Tests.Fakes.AddOptions.AddOptions()", span="7-7"];
m8_143 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_help_screen()", file="TokenPartitioner.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_help_screen()", span="230-230"];
m8_147 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_help_screen()", file="TokenPartitioner.cs", label="new Parser(config => config.HelpWriter = help).ParseArguments<FakeOptions>(new[] { ''--help'' })", span="237-237"];
m8_146 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_help_screen()", file="TokenPartitioner.cs", label="var sut = new Parser(config => config.HelpWriter = version)", span="235-235"];
m8_144 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_help_screen()", file="TokenPartitioner.cs", label="var help = new StringWriter()", span="233-233"];
m8_145 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_help_screen()", file="TokenPartitioner.cs", label="var version = new StringWriter()", span="234-234"];
m8_149 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_help_screen()", file="TokenPartitioner.cs", label="sut.ParseArguments<FakeOptions>(new[] { ''--version'' })", span="241-241"];
m8_148 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_help_screen()", file="TokenPartitioner.cs", label="var helpText = help.ToString()", span="238-238"];
m8_150 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_help_screen()", file="TokenPartitioner.cs", label="var result = version.ToString()", span="242-242"];
m8_151 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_help_screen()", file="TokenPartitioner.cs", label="result.Length.Should().BeLessThan(helpText.Length)", span="245-245"];
m8_152 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_help_screen()", file="TokenPartitioner.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_help_screen()", span="230-230"];
m8_93 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", file="TokenPartitioner.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", span="166-166"];
m8_96 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", file="TokenPartitioner.cs", label="var result = sut.ParseArguments<FakeImmutableOptions>(new[] { ''--stringvalue=strvalue'', ''-i1'', ''2'', ''3'' })", span="174-174"];
m8_95 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", file="TokenPartitioner.cs", label="var sut = new Parser()", span="171-171"];
m8_97 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", file="TokenPartitioner.cs", label="result.Value.ShouldBeEquivalentTo(expectedOptions)", span="177-177"];
m8_94 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", file="TokenPartitioner.cs", label="var expectedOptions = new FakeImmutableOptions(\r\n                ''strvalue'', new[] { 1, 2, 3 }, default(bool), default(long))", span="169-170"];
m8_98 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", file="TokenPartitioner.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", span="166-166"];
m8_15 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", file="TokenPartitioner.cs", label="Entry CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", span="29-29"];
m8_17 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", file="TokenPartitioner.cs", label="var sut = new Parser(with => with.HelpWriter = writer)", span="33-33"];
m8_16 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", file="TokenPartitioner.cs", label="var writer = new StringWriter()", span="32-32"];
m8_18 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", file="TokenPartitioner.cs", label="sut.ParseArguments(new string[] { }, typeof(AddOptions), typeof(CommitOptions), typeof(CloneOptions))", span="36-36"];
m8_19 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", file="TokenPartitioner.cs", label="var text = writer.ToString()", span="39-39"];
m8_20 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", file="TokenPartitioner.cs", label="Assert.True(text.Length > 0)", span="40-40"];
m8_21 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", file="TokenPartitioner.cs", label="Exit CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", span="29-29"];
m8_9 [cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", file="TokenPartitioner.cs", label="Entry CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", span="84-84"];
m8_72 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="TokenPartitioner.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_verbs()", span="123-123"];
m8_75 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="TokenPartitioner.cs", label="var result = sut.ParseArguments(\r\n                new[] { ''clone'', ''-q'', ''http://gsscoder.github.com/'', ''http://yes-to-nooo.github.com/'' },\r\n                typeof(AddOptions), typeof(CommitOptions), typeof(CloneOptions))", span="134-136"];
m8_74 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="TokenPartitioner.cs", label="var sut = new Parser()", span="131-131"];
m8_77 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="TokenPartitioner.cs", label="result.Value.ShouldBeEquivalentTo(expectedOptions, o => o.RespectingRuntimeTypes())", span="140-140"];
m8_76 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="TokenPartitioner.cs", label="Assert.IsType<CloneOptions>(result.Value)", span="139-139"];
m8_73 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="TokenPartitioner.cs", label="var expectedOptions = new CloneOptions\r\n                {\r\n                    Quiet = true,\r\n                    Urls = new[] { ''http://gsscoder.github.com/'', ''http://yes-to-nooo.github.com/'' }\r\n                }", span="126-130"];
m8_78 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="TokenPartitioner.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_verbs()", span="123-123"];
m8_43 [cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", file="TokenPartitioner.cs", label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6"];
m8_153 [cluster="Unk.BeLessThan", file="TokenPartitioner.cs", label="Entry Unk.BeLessThan", span=""];
m8_52 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", file="TokenPartitioner.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6"];
m8_107 [cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="TokenPartitioner.cs", label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="357-357"];
m8_45 [cluster="Unk.ShouldBeEquivalentTo", file="TokenPartitioner.cs", label="Entry Unk.ShouldBeEquivalentTo", span=""];
m8_160 [file="TokenPartitioner.cs", label=writer, span=""];
m8_161 [file="TokenPartitioner.cs", label=writer, span=""];
m8_162 [file="TokenPartitioner.cs", label=writer, span=""];
m8_164 [file="TokenPartitioner.cs", label=help, span=""];
m8_167 [file="TokenPartitioner.cs", label=help, span=""];
m8_166 [file="TokenPartitioner.cs", label=version, span=""];
m8_163 [file="TokenPartitioner.cs", label=expectedError, span=""];
m8_165 [file="TokenPartitioner.cs", label=expectedError, span=""];
m1_11 -> m1_12  [key=0, style=solid];
m1_12 -> m1_3  [key=2, style=dotted];
m1_12 -> m1_13  [key=0, style=solid];
m1_13 -> m1_11  [color=blue, key=0, style=bold];
m1_8 -> m1_9  [color=green, key=0, style=solid];
m1_8 -> m1_0  [color=darkorchid, key=3, label="method methodReturn System.DateTime AtNoon", style=bold];
m1_9 -> m1_10  [color=green, key=0, style=solid];
m1_9 -> m1_7  [color=green, key=2, style=dotted];
m1_10 -> m1_8  [color=blue, key=0, style=bold];
m1_0 -> m1_9  [color=green, key=3, label="Parameter variable int hour", style=bold];
m1_0 -> m1_1  [key=0, style=solid];
m1_0 -> m1_5  [color=darkorchid, key=3, label="Parameter variable int hour", style=bold];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_3  [key=2, style=dotted];
m1_2 -> m1_0  [color=blue, key=0, style=bold];
m1_4 -> m1_0  [color=darkorchid, key=3, label="method methodReturn System.DateTime AtMidnight", style=bold];
m1_4 -> m1_5  [key=0, style=solid];
m1_5 -> m1_7  [key=2, style=dotted];
m1_5 -> m1_6  [key=0, style=solid];
m1_6 -> m1_4  [color=blue, key=0, style=bold];
m2_0 -> m2_1  [color=green, key=0, style=solid];
m2_0 -> m2_5  [color=green, key=1, label="System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>>>>", style=dashed];
m2_1 -> m2_1  [color=green, key=1, label=tseq, style=dashed];
m2_1 -> m2_2  [color=green, key=0, style=solid];
m2_1 -> m2_3  [color=green, key=2, style=dotted];
m2_1 -> m2_4  [color=green, key=1, label="lambda expression", style=dashed];
m2_2 -> m2_0  [color=blue, key=0, style=bold];
m2_11 -> m2_12  [color=green, key=0, style=solid];
m2_4 -> m2_5  [color=green, key=0, style=solid];
m2_4 -> m2_12  [color=green, key=1, label="CommandLine.Core.Token", style=dashed];
m2_5 -> m2_6  [color=green, key=0, style=solid];
m2_5 -> m2_7  [color=green, key=2, style=dotted];
m2_5 -> m2_8  [color=green, key=2, style=dotted];
m2_5 -> m2_9  [color=green, key=2, style=dotted];
m2_5 -> m2_10  [color=green, key=2, style=dotted];
m2_5 -> m2_11  [color=green, key=1, label="lambda expression", style=dashed];
m2_6 -> m2_4  [color=blue, key=0, style=bold];
m2_12 -> m2_13  [color=green, key=0, style=solid];
m2_13 -> m2_11  [color=blue, key=0, style=bold];
m2_14 -> m2_5  [color=green, key=1, label="System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>>>>", style=dashed];
m2_15 -> m2_12  [color=green, key=1, label="CommandLine.Core.Token", style=dashed];
m2_16 -> m2_12  [color=green, key=1, label="CommandLine.Core.Token", style=dashed];
m4_15 -> m4_16  [key=0, style=solid];
m4_15 -> m4_17  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>", style=dashed];
m4_15 -> m4_19  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>", style=dashed];
m4_15 -> m4_15  [color=darkorchid, key=3, label="method methodReturn System.Collections.Generic.IEnumerable<CommandLine.Core.Specification> ThrowingValidate", style=bold];
m4_16 -> m4_17  [key=0, style=solid];
m4_16 -> m4_19  [key=0, style=solid];
m4_16 -> m4_24  [color=darkseagreen4, key=1, label=guard, style=dashed];
m4_16 -> m4_18  [color=darkseagreen4, key=1, label=guard, style=dashed];
m4_17 -> m4_18  [key=0, style=solid];
m4_17 -> m4_16  [key=0, style=solid];
m4_17 -> m4_21  [key=2, style=dotted];
m4_17 -> m4_23  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_19 -> m4_20  [key=0, style=solid];
m4_18 -> m4_20  [key=0, style=solid];
m4_18 -> m4_22  [key=2, style=dotted];
m4_20 -> m4_15  [color=blue, key=0, style=bold];
m4_0 -> m4_1  [key=0, style=solid];
m4_0 -> m4_3  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m4_1 -> m4_2  [key=0, style=solid];
m4_1 -> m4_3  [key=0, style=solid];
m4_3 -> m4_4  [key=0, style=solid];
m4_2 -> m4_4  [key=0, style=solid];
m4_2 -> m4_5  [key=2, style=dotted];
m4_4 -> m4_0  [color=blue, key=0, style=bold];
m4_6 -> m4_7  [key=0, style=solid];
m4_6 -> m4_9  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m4_7 -> m4_8  [key=0, style=solid];
m4_7 -> m4_9  [key=0, style=solid];
m4_9 -> m4_10  [key=0, style=solid];
m4_8 -> m4_10  [key=0, style=solid];
m4_8 -> m4_5  [key=2, style=dotted];
m4_10 -> m4_6  [color=blue, key=0, style=bold];
m4_23 -> m4_24  [key=0, style=solid];
m4_24 -> m4_25  [key=0, style=solid];
m4_24 -> m4_26  [key=2, style=dotted];
m4_25 -> m4_23  [color=blue, key=0, style=bold];
m4_27 -> m4_28  [key=0, style=solid];
m4_27 -> m4_30  [color=red, key=1, label="CommandLine.Core.Specification", style=dashed];
m4_27 -> m4_34  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m4_27 -> m4_35  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m4_28 -> m4_29  [key=0, style=solid];
m4_28 -> m4_30  [color=red, key=0, style=solid];
m4_30 -> m4_31  [color=red, key=0, style=solid];
m4_30 -> m4_33  [color=red, key=0, style=solid];
m4_30 -> m4_40  [color=red, key=2, style=dotted];
m4_34 -> m4_35  [key=0, style=solid];
m4_34 -> m4_36  [color=darkseagreen4, key=1, label=min, style=dashed];
m4_35 -> m4_36  [key=0, style=solid];
m4_35 -> m4_37  [color=darkseagreen4, key=1, label=max, style=dashed];
m4_29 -> m4_39  [key=0, style=solid];
m4_29 -> m4_5  [key=2, style=dotted];
m4_31 -> m4_32  [color=red, key=0, style=solid];
m4_33 -> m4_34  [color=red, key=0, style=solid];
m4_32 -> m4_39  [key=0, style=solid];
m4_32 -> m4_41  [key=2, style=dotted];
m4_36 -> m4_37  [key=0, style=solid];
m4_36 -> m4_38  [key=0, style=solid];
m4_37 -> m4_39  [key=0, style=solid];
m4_37 -> m4_41  [key=2, style=dotted];
m4_38 -> m4_39  [key=0, style=solid];
m4_38 -> m4_42  [key=2, style=dotted];
m4_39 -> m4_27  [color=blue, key=0, style=bold];
m4_43 -> m4_44  [key=0, style=solid];
m4_44 -> m4_45  [key=0, style=solid];
m4_45 -> m4_43  [color=blue, key=0, style=bold];
m4_49 -> m4_50  [key=0, style=solid];
m4_50 -> m4_51  [key=0, style=solid];
m4_50 -> m4_52  [key=2, style=dotted];
m4_51 -> m4_49  [color=blue, key=0, style=bold];
m4_11 -> m4_12  [key=0, style=solid];
m4_12 -> m4_13  [key=0, style=solid];
m4_12 -> m4_14  [key=2, style=dotted];
m4_13 -> m4_11  [color=blue, key=0, style=bold];
m4_46 -> m4_47  [key=0, style=solid];
m4_47 -> m4_48  [key=0, style=solid];
m4_48 -> m4_46  [color=blue, key=0, style=bold];
m4_53 -> m4_24  [color=darkseagreen4, key=1, label=guard, style=dashed];
m7_5 -> m7_6  [color=green, key=0, style=solid];
m7_6 -> m7_7  [color=green, key=0, style=solid];
m7_6 -> m7_8  [color=green, key=2, style=dotted];
m7_7 -> m7_5  [color=blue, key=0, style=bold];
m7_0 -> m7_1  [color=green, key=0, style=solid];
m7_1 -> m7_1  [color=green, key=1, label=t, style=dashed];
m7_1 -> m7_2  [color=green, key=0, style=solid];
m7_1 -> m7_3  [color=green, key=2, style=dotted];
m7_1 -> m7_4  [color=green, key=2, style=dotted];
m7_1 -> m7_5  [color=green, key=1, label="lambda expression", style=dashed];
m7_1 -> m7_6  [color=green, key=1, label=t, style=dashed];
m7_2 -> m7_0  [color=blue, key=0, style=bold];
m7_9 -> m7_6  [color=green, key=1, label=t, style=dashed];
m8_0 -> m8_1  [key=0, style=solid];
m8_2 -> m8_3  [color=red, key=0, style=solid];
m8_2 -> m8_8  [color=green, key=2, style=dotted];
m8_2 -> m8_13  [color=green, key=1, label="CommandLine.ParserSettings", style=dashed];
m8_1 -> m8_2  [color=green, key=0, style=solid];
m8_1 -> m8_13  [color=green, key=1, label=writer, style=dashed];
m8_1 -> m8_7  [key=2, style=dotted];
m8_1 -> m8_4  [color=darkseagreen4, key=1, label=writer, style=dashed];
m8_1 -> m8_0  [color=blue, key=0, style=bold];
m8_3 -> m8_4  [color=red, key=0, style=solid];
m8_3 -> m8_9  [key=2, style=dotted];
m8_3 -> m8_5  [color=red, key=2, style=dotted];
m8_3 -> m8_6  [color=red, key=2, style=dotted];
m8_4 -> m8_5  [key=0, style=solid];
m8_4 -> m8_10  [key=2, style=dotted];
m8_4 -> m8_2  [color=blue, key=0, style=bold];
m8_5 -> m8_6  [key=0, style=solid];
m8_5 -> m8_11  [key=2, style=dotted];
m8_6 -> m8_0  [color=blue, key=0, style=bold];
m8_100 -> m8_101  [key=0, style=solid];
m8_103 -> m8_9  [key=2, style=dotted];
m8_103 -> m8_104  [key=0, style=solid];
m8_103 -> m8_105  [color=darkseagreen4, key=1, label=result, style=dashed];
m8_102 -> m8_103  [key=0, style=solid];
m8_102 -> m8_44  [key=2, style=dotted];
m8_104 -> m8_105  [key=0, style=solid];
m8_104 -> m8_108  [key=2, style=dotted];
m8_104 -> m8_109  [key=2, style=dotted];
m8_104 -> m8_111  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_105 -> m8_106  [key=0, style=solid];
m8_105 -> m8_108  [key=2, style=dotted];
m8_105 -> m8_110  [key=2, style=dotted];
m8_105 -> m8_114  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_101 -> m8_102  [key=0, style=solid];
m8_101 -> m8_105  [color=darkseagreen4, key=1, label=expectedError, style=dashed];
m8_101 -> m8_107  [key=2, style=dotted];
m8_101 -> m8_115  [color=darkseagreen4, key=1, label=expectedError, style=dashed];
m8_106 -> m8_100  [color=blue, key=0, style=bold];
m8_118 -> m8_119  [key=0, style=solid];
m8_120 -> m8_8  [key=2, style=dotted];
m8_120 -> m8_121  [key=0, style=solid];
m8_120 -> m8_127  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m8_119 -> m8_7  [key=2, style=dotted];
m8_119 -> m8_120  [key=0, style=solid];
m8_119 -> m8_127  [color=darkseagreen4, key=1, label=help, style=dashed];
m8_119 -> m8_122  [color=darkseagreen4, key=1, label=help, style=dashed];
m8_121 -> m8_9  [key=2, style=dotted];
m8_121 -> m8_122  [key=0, style=solid];
m8_122 -> m8_10  [key=2, style=dotted];
m8_122 -> m8_123  [key=0, style=solid];
m8_123 -> m8_124  [key=0, style=solid];
m8_123 -> m8_108  [key=2, style=dotted];
m8_123 -> m8_125  [key=2, style=dotted];
m8_124 -> m8_118  [color=blue, key=0, style=bold];
m8_46 -> m8_47  [key=0, style=solid];
m8_48 -> m8_8  [key=2, style=dotted];
m8_48 -> m8_49  [key=0, style=solid];
m8_48 -> m8_54  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m8_49 -> m8_9  [key=2, style=dotted];
m8_49 -> m8_50  [key=0, style=solid];
m8_47 -> m8_48  [key=0, style=solid];
m8_47 -> m8_52  [key=2, style=dotted];
m8_47 -> m8_50  [color=darkseagreen4, key=1, label=expectedOptions, style=dashed];
m8_50 -> m8_51  [key=0, style=solid];
m8_50 -> m8_45  [key=2, style=dotted];
m8_51 -> m8_46  [color=blue, key=0, style=bold];
m8_83 -> m8_84  [key=0, style=solid];
m8_86 -> m8_33  [key=2, style=dotted];
m8_86 -> m8_87  [key=0, style=solid];
m8_86 -> m8_88  [color=darkseagreen4, key=1, label=result, style=dashed];
m8_85 -> m8_44  [key=2, style=dotted];
m8_85 -> m8_86  [key=0, style=solid];
m8_88 -> m8_45  [key=2, style=dotted];
m8_88 -> m8_89  [key=0, style=solid];
m8_88 -> m8_90  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_87 -> m8_64  [key=2, style=dotted];
m8_87 -> m8_88  [key=0, style=solid];
m8_84 -> m8_85  [key=0, style=solid];
m8_84 -> m8_88  [color=darkseagreen4, key=1, label=expectedOptions, style=dashed];
m8_84 -> m8_79  [key=2, style=dotted];
m8_89 -> m8_83  [color=blue, key=0, style=bold];
m8_56 -> m8_57  [key=0, style=solid];
m8_58 -> m8_8  [key=2, style=dotted];
m8_58 -> m8_59  [key=0, style=solid];
m8_58 -> m8_66  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m8_57 -> m8_58  [key=0, style=solid];
m8_57 -> m8_63  [key=2, style=dotted];
m8_57 -> m8_61  [color=darkseagreen4, key=1, label=expectedOptions, style=dashed];
m8_59 -> m8_60  [key=0, style=solid];
m8_59 -> m8_22  [key=2, style=dotted];
m8_59 -> m8_61  [color=darkseagreen4, key=1, label=result, style=dashed];
m8_61 -> m8_62  [key=0, style=solid];
m8_61 -> m8_45  [key=2, style=dotted];
m8_61 -> m8_68  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_60 -> m8_61  [key=0, style=solid];
m8_60 -> m8_64  [key=2, style=dotted];
m8_62 -> m8_56  [color=blue, key=0, style=bold];
m8_129 -> m8_130  [key=0, style=solid];
m8_132 -> m8_9  [key=2, style=dotted];
m8_132 -> m8_133  [key=0, style=solid];
m8_132 -> m8_134  [color=darkseagreen4, key=1, label=result, style=dashed];
m8_131 -> m8_132  [key=0, style=solid];
m8_131 -> m8_44  [key=2, style=dotted];
m8_133 -> m8_134  [key=0, style=solid];
m8_133 -> m8_108  [key=2, style=dotted];
m8_133 -> m8_109  [key=2, style=dotted];
m8_133 -> m8_137  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_134 -> m8_135  [key=0, style=solid];
m8_134 -> m8_108  [key=2, style=dotted];
m8_134 -> m8_110  [key=2, style=dotted];
m8_134 -> m8_140  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_130 -> m8_131  [key=0, style=solid];
m8_130 -> m8_134  [color=darkseagreen4, key=1, label=expectedError, style=dashed];
m8_130 -> m8_136  [key=2, style=dotted];
m8_130 -> m8_141  [color=darkseagreen4, key=1, label=expectedError, style=dashed];
m8_135 -> m8_129  [color=blue, key=0, style=bold];
m8_90 -> m8_91  [key=0, style=solid];
m8_13 -> m8_14  [color=green, key=0, style=solid];
m8_12 -> m8_13  [color=green, key=0, style=solid];
m8_14 -> m8_12  [color=blue, key=0, style=bold];
m8_24 -> m8_25  [key=0, style=solid];
m8_35 -> m8_36  [key=0, style=solid];
m8_54 -> m8_55  [key=0, style=solid];
m8_66 -> m8_67  [key=0, style=solid];
m8_127 -> m8_128  [key=0, style=solid];
m8_158 -> m8_159  [key=0, style=solid];
m8_155 -> m8_156  [key=0, style=solid];
m8_23 -> m8_24  [key=0, style=solid];
m8_25 -> m8_23  [color=blue, key=0, style=bold];
m8_34 -> m8_35  [key=0, style=solid];
m8_36 -> m8_34  [color=blue, key=0, style=bold];
m8_53 -> m8_54  [key=0, style=solid];
m8_55 -> m8_53  [color=blue, key=0, style=bold];
m8_65 -> m8_66  [key=0, style=solid];
m8_67 -> m8_65  [color=blue, key=0, style=bold];
m8_126 -> m8_127  [key=0, style=solid];
m8_128 -> m8_126  [color=blue, key=0, style=bold];
m8_157 -> m8_158  [key=0, style=solid];
m8_159 -> m8_157  [color=blue, key=0, style=bold];
m8_154 -> m8_155  [key=0, style=solid];
m8_156 -> m8_154  [color=blue, key=0, style=bold];
m8_111 -> m8_112  [key=0, style=solid];
m8_114 -> m8_115  [key=0, style=solid];
m8_137 -> m8_138  [key=0, style=solid];
m8_140 -> m8_141  [key=0, style=solid];
m8_68 -> m8_69  [key=0, style=solid];
m8_115 -> m8_116  [key=0, style=solid];
m8_115 -> m8_117  [key=2, style=dotted];
m8_113 -> m8_111  [color=blue, key=0, style=bold];
m8_112 -> m8_113  [key=0, style=solid];
m8_116 -> m8_114  [color=blue, key=0, style=bold];
m8_141 -> m8_142  [key=0, style=solid];
m8_141 -> m8_117  [key=2, style=dotted];
m8_139 -> m8_137  [color=blue, key=0, style=bold];
m8_138 -> m8_139  [key=0, style=solid];
m8_142 -> m8_140  [color=blue, key=0, style=bold];
m8_70 -> m8_68  [color=blue, key=0, style=bold];
m8_69 -> m8_70  [key=0, style=solid];
m8_69 -> m8_71  [key=2, style=dotted];
m8_80 -> m8_81  [key=0, style=solid];
m8_82 -> m8_80  [color=blue, key=0, style=bold];
m8_81 -> m8_71  [key=2, style=dotted];
m8_81 -> m8_82  [key=0, style=solid];
m8_91 -> m8_71  [key=2, style=dotted];
m8_91 -> m8_92  [key=0, style=solid];
m8_92 -> m8_90  [color=blue, key=0, style=bold];
m8_26 -> m8_27  [key=0, style=solid];
m8_28 -> m8_8  [key=2, style=dotted];
m8_28 -> m8_29  [key=0, style=solid];
m8_28 -> m8_35  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m8_27 -> m8_7  [key=2, style=dotted];
m8_27 -> m8_28  [key=0, style=solid];
m8_27 -> m8_35  [color=darkseagreen4, key=1, label=writer, style=dashed];
m8_27 -> m8_30  [color=darkseagreen4, key=1, label=writer, style=dashed];
m8_29 -> m8_30  [key=0, style=solid];
m8_29 -> m8_33  [key=2, style=dotted];
m8_30 -> m8_10  [key=2, style=dotted];
m8_30 -> m8_31  [key=0, style=solid];
m8_31 -> m8_11  [key=2, style=dotted];
m8_31 -> m8_32  [key=0, style=solid];
m8_32 -> m8_26  [color=blue, key=0, style=bold];
m8_37 -> m8_38  [key=0, style=solid];
m8_40 -> m8_9  [key=2, style=dotted];
m8_40 -> m8_41  [key=0, style=solid];
m8_39 -> m8_40  [key=0, style=solid];
m8_39 -> m8_44  [key=2, style=dotted];
m8_41 -> m8_42  [key=0, style=solid];
m8_41 -> m8_45  [key=2, style=dotted];
m8_38 -> m8_39  [key=0, style=solid];
m8_38 -> m8_41  [color=darkseagreen4, key=1, label=expectedOptions, style=dashed];
m8_38 -> m8_43  [key=2, style=dotted];
m8_42 -> m8_37  [color=blue, key=0, style=bold];
m8_143 -> m8_144  [key=0, style=solid];
m8_147 -> m8_8  [key=2, style=dotted];
m8_147 -> m8_9  [key=2, style=dotted];
m8_147 -> m8_148  [key=0, style=solid];
m8_147 -> m8_158  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m8_146 -> m8_8  [key=2, style=dotted];
m8_146 -> m8_147  [key=0, style=solid];
m8_146 -> m8_155  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m8_146 -> m8_149  [color=darkseagreen4, key=1, label=sut, style=dashed];
m8_144 -> m8_7  [key=2, style=dotted];
m8_144 -> m8_147  [color=darkseagreen4, key=1, label=help, style=dashed];
m8_144 -> m8_145  [key=0, style=solid];
m8_144 -> m8_158  [color=darkseagreen4, key=1, label=help, style=dashed];
m8_144 -> m8_148  [color=darkseagreen4, key=1, label=help, style=dashed];
m8_145 -> m8_7  [key=2, style=dotted];
m8_145 -> m8_146  [key=0, style=solid];
m8_145 -> m8_155  [color=darkseagreen4, key=1, label=version, style=dashed];
m8_145 -> m8_150  [color=darkseagreen4, key=1, label=version, style=dashed];
m8_149 -> m8_9  [key=2, style=dotted];
m8_149 -> m8_150  [key=0, style=solid];
m8_148 -> m8_10  [key=2, style=dotted];
m8_148 -> m8_149  [key=0, style=solid];
m8_148 -> m8_151  [color=darkseagreen4, key=1, label=helpText, style=dashed];
m8_150 -> m8_10  [key=2, style=dotted];
m8_150 -> m8_151  [key=0, style=solid];
m8_151 -> m8_152  [key=0, style=solid];
m8_151 -> m8_108  [key=2, style=dotted];
m8_151 -> m8_153  [key=2, style=dotted];
m8_152 -> m8_143  [color=blue, key=0, style=bold];
m8_93 -> m8_94  [key=0, style=solid];
m8_96 -> m8_9  [key=2, style=dotted];
m8_96 -> m8_97  [key=0, style=solid];
m8_95 -> m8_96  [key=0, style=solid];
m8_95 -> m8_44  [key=2, style=dotted];
m8_97 -> m8_98  [key=0, style=solid];
m8_97 -> m8_45  [key=2, style=dotted];
m8_94 -> m8_95  [key=0, style=solid];
m8_94 -> m8_97  [color=darkseagreen4, key=1, label=expectedOptions, style=dashed];
m8_94 -> m8_99  [key=2, style=dotted];
m8_98 -> m8_93  [color=blue, key=0, style=bold];
m8_15 -> m8_16  [key=0, style=solid];
m8_17 -> m8_8  [key=2, style=dotted];
m8_17 -> m8_18  [key=0, style=solid];
m8_17 -> m8_24  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m8_16 -> m8_7  [key=2, style=dotted];
m8_16 -> m8_17  [key=0, style=solid];
m8_16 -> m8_24  [color=darkseagreen4, key=1, label=writer, style=dashed];
m8_16 -> m8_19  [color=darkseagreen4, key=1, label=writer, style=dashed];
m8_18 -> m8_19  [key=0, style=solid];
m8_18 -> m8_22  [key=2, style=dotted];
m8_19 -> m8_10  [key=2, style=dotted];
m8_19 -> m8_20  [key=0, style=solid];
m8_20 -> m8_11  [key=2, style=dotted];
m8_20 -> m8_21  [key=0, style=solid];
m8_21 -> m8_15  [color=blue, key=0, style=bold];
m8_72 -> m8_73  [key=0, style=solid];
m8_75 -> m8_22  [key=2, style=dotted];
m8_75 -> m8_76  [key=0, style=solid];
m8_75 -> m8_77  [color=darkseagreen4, key=1, label=result, style=dashed];
m8_74 -> m8_44  [key=2, style=dotted];
m8_74 -> m8_75  [key=0, style=solid];
m8_77 -> m8_45  [key=2, style=dotted];
m8_77 -> m8_78  [key=0, style=solid];
m8_77 -> m8_80  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_76 -> m8_64  [key=2, style=dotted];
m8_76 -> m8_77  [key=0, style=solid];
m8_73 -> m8_74  [key=0, style=solid];
m8_73 -> m8_77  [color=darkseagreen4, key=1, label=expectedOptions, style=dashed];
m8_73 -> m8_79  [key=2, style=dotted];
m8_78 -> m8_72  [color=blue, key=0, style=bold];
m8_160 -> m8_13  [color=green, key=1, label=writer, style=dashed];
m8_161 -> m8_24  [color=darkseagreen4, key=1, label=writer, style=dashed];
m8_162 -> m8_35  [color=darkseagreen4, key=1, label=writer, style=dashed];
m8_164 -> m8_127  [color=darkseagreen4, key=1, label=help, style=dashed];
m8_167 -> m8_158  [color=darkseagreen4, key=1, label=help, style=dashed];
m8_166 -> m8_155  [color=darkseagreen4, key=1, label=version, style=dashed];
m8_163 -> m8_115  [color=darkseagreen4, key=1, label=expectedError, style=dashed];
m8_165 -> m8_141  [color=darkseagreen4, key=1, label=expectedError, style=dashed];
}
