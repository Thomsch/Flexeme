digraph  {
m1_11 [label="Entry Humanizer.PrepositionsExtensions.In(System.DateTime, int)", span="36-36", cluster="Humanizer.PrepositionsExtensions.In(System.DateTime, int)", file="ReflectionExtensions.cs"];
m1_12 [label="return new DateTime(year, date.Month, date.Day, date.Hour, date.Minute, date.Second, date.Millisecond);", span="38-38", cluster="Humanizer.PrepositionsExtensions.In(System.DateTime, int)", file="ReflectionExtensions.cs"];
m1_13 [label="Exit Humanizer.PrepositionsExtensions.In(System.DateTime, int)", span="36-36", cluster="Humanizer.PrepositionsExtensions.In(System.DateTime, int)", file="ReflectionExtensions.cs"];
m1_7 [label="Entry System.DateTime.At(int, int, int, int)", span="5-5", cluster="System.DateTime.At(int, int, int, int)", file="ReflectionExtensions.cs"];
m1_8 [label="Entry Humanizer.PrepositionsExtensions.AtNoon(System.DateTime)", span="25-25", cluster="Humanizer.PrepositionsExtensions.AtNoon(System.DateTime)", file="ReflectionExtensions.cs"];
m1_9 [label="return date.At(12);", span="27-27", cluster="Humanizer.PrepositionsExtensions.AtNoon(System.DateTime)", color=green, community=0, file="ReflectionExtensions.cs"];
m1_10 [label="Exit Humanizer.PrepositionsExtensions.AtNoon(System.DateTime)", span="25-25", cluster="Humanizer.PrepositionsExtensions.AtNoon(System.DateTime)", file="ReflectionExtensions.cs"];
m1_3 [label="Entry System.DateTime.DateTime(int, int, int, int, int, int, int)", span="0-0", cluster="System.DateTime.DateTime(int, int, int, int, int, int, int)", file="ReflectionExtensions.cs"];
m1_0 [label="Entry Humanizer.PrepositionsExtensions.At(System.DateTime, int, int, int, int)", span="5-5", cluster="Humanizer.PrepositionsExtensions.At(System.DateTime, int, int, int, int)", file="ReflectionExtensions.cs"];
m1_1 [label="return new DateTime(date.Year, date.Month, date.Day, hour, min, second, millisecond);", span="7-7", cluster="Humanizer.PrepositionsExtensions.At(System.DateTime, int, int, int, int)", file="ReflectionExtensions.cs"];
m1_2 [label="Exit Humanizer.PrepositionsExtensions.At(System.DateTime, int, int, int, int)", span="5-5", cluster="Humanizer.PrepositionsExtensions.At(System.DateTime, int, int, int, int)", file="ReflectionExtensions.cs"];
m1_4 [label="Entry Humanizer.PrepositionsExtensions.AtMidnight(System.DateTime)", span="15-15", cluster="Humanizer.PrepositionsExtensions.AtMidnight(System.DateTime)", file="ReflectionExtensions.cs"];
m1_5 [label="return date.At(0);", span="17-17", cluster="Humanizer.PrepositionsExtensions.AtMidnight(System.DateTime)", file="ReflectionExtensions.cs"];
m1_6 [label="Exit Humanizer.PrepositionsExtensions.AtMidnight(System.DateTime)", span="15-15", cluster="Humanizer.PrepositionsExtensions.AtMidnight(System.DateTime)", file="ReflectionExtensions.cs"];
m2_3 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Pairwise<TSource, TResult>(System.Func<TSource, TSource, TResult>)", span="24-24", cluster="System.Collections.Generic.IEnumerable<TSource>.Pairwise<TSource, TResult>(System.Func<TSource, TSource, TResult>)", file="Scalar.cs"];
m2_0 [label="Entry CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>>>>)", span="11-11", cluster="CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>>>>)", file="Scalar.cs"];
m2_1 [label="return from tseq in tokens.Pairwise(\r\n                (f, s) =>\r\n                        f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).Return(info =>\r\n                                    info.Item1 == TypeDescriptorKind.Scalar ? new[] { f, s } : new Token[] { }, new Token[] { })\r\n                                    : new Token[] { })\r\n                   from t in tseq\r\n                   select t;", span="15-22", cluster="CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>>>>)", color=green, community=0, file="Scalar.cs"];
m2_2 [label="Exit CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>>>>)", span="11-11", cluster="CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>>>>)", file="Scalar.cs"];
m2_11 [label="Entry lambda expression", span="18-19", cluster="lambda expression", file="Scalar.cs"];
m2_4 [label="Entry lambda expression", span="16-20", cluster="lambda expression", file="Scalar.cs"];
m2_5 [label="f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).Return(info =>\r\n                                    info.Item1 == TypeDescriptorKind.Scalar ? new[] { f, s } : new Token[] { }, new Token[] { })\r\n                                    : new Token[] { }", span="17-20", cluster="lambda expression", color=green, community=0, file="Scalar.cs"];
m2_6 [label="Exit lambda expression", span="16-20", cluster="lambda expression", file="Scalar.cs"];
m2_12 [label="info.Item1 == TypeDescriptorKind.Scalar ? new[] { f, s } : new Token[] { }", span="19-19", cluster="lambda expression", color=green, community=0, file="Scalar.cs"];
m2_13 [label="Exit lambda expression", span="18-19", cluster="lambda expression", file="Scalar.cs"];
m2_10 [label="Entry CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", span="103-103", cluster="CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", file="Scalar.cs"];
m2_7 [label="Entry CommandLine.Core.Token.IsName()", span="72-72", cluster="CommandLine.Core.Token.IsName()", file="Scalar.cs"];
m2_8 [label="Entry CommandLine.Core.Token.IsValue()", span="77-77", cluster="CommandLine.Core.Token.IsValue()", file="Scalar.cs"];
m2_9 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)", file="Scalar.cs"];
m2_14 [label="System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>>>>", span="", file="Scalar.cs"];
m2_15 [label="CommandLine.Core.Token", span="", file="Scalar.cs"];
m2_16 [label="CommandLine.Core.Token", span="", file="Scalar.cs"];
m4_42 [label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="66-66", cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="SpecificationExtensions.cs"];
m4_52 [label="Entry CommandLine.Core.Specification.IsOption()", span="11-11", cluster="CommandLine.Core.Specification.IsOption()", file="SpecificationExtensions.cs"];
m4_15 [label="Entry CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", span="42-42", cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", file="SpecificationExtensions.cs"];
m4_16 [label=guardsLookup, span="44-44", cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", file="SpecificationExtensions.cs"];
m4_17 [label="specifications.Any(spec => guard.Item1(spec))", span="46-46", cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", file="SpecificationExtensions.cs"];
m4_19 [label="return specifications;", span="52-52", cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", file="SpecificationExtensions.cs"];
m4_18 [label="throw new ApplicationException(guard.Item2);", span="48-48", cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", file="SpecificationExtensions.cs"];
m4_20 [label="Exit CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", span="42-42", cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", file="SpecificationExtensions.cs"];
m4_41 [label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="71-71", cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="SpecificationExtensions.cs"];
m4_0 [label="Entry CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)", span="11-11", cluster="CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)", file="SpecificationExtensions.cs"];
m4_1 [label="specification == null", span="13-13", cluster="CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)", file="SpecificationExtensions.cs"];
m4_3 [label="return specification.Tag == SpecificationType.Option;", span="15-15", cluster="CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)", file="SpecificationExtensions.cs"];
m4_2 [label="throw new ArgumentNullException(''specification'');", span="13-13", cluster="CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)", file="SpecificationExtensions.cs"];
m4_4 [label="Exit CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)", span="11-11", cluster="CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)", file="SpecificationExtensions.cs"];
m4_6 [label="Entry CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", span="18-18", cluster="CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", file="SpecificationExtensions.cs"];
m4_7 [label="specification == null", span="20-20", cluster="CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", file="SpecificationExtensions.cs"];
m4_9 [label="return specification.Tag == SpecificationType.Value;", span="22-22", cluster="CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", file="SpecificationExtensions.cs"];
m4_8 [label="throw new ArgumentNullException(''specification'');", span="20-20", cluster="CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", file="SpecificationExtensions.cs"];
m4_10 [label="Exit CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", span="18-18", cluster="CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", file="SpecificationExtensions.cs"];
m4_23 [label="Entry lambda expression", span="46-46", cluster="lambda expression", file="SpecificationExtensions.cs"];
m4_24 [label="guard.Item1(spec)", span="46-46", cluster="lambda expression", file="SpecificationExtensions.cs"];
m4_25 [label="Exit lambda expression", span="46-46", cluster="lambda expression", file="SpecificationExtensions.cs"];
m4_27 [label="Entry CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", span="55-55", cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", file="SpecificationExtensions.cs"];
m4_28 [label="specification == null", span="57-57", cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", file="SpecificationExtensions.cs"];
m4_30 [label="specification.ConversionType.ToDescriptor()", span="59-59", cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", color=red, community=0, file="SpecificationExtensions.cs"];
m4_34 [label="var min = specification.Min", span="64-64", cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", file="SpecificationExtensions.cs"];
m4_35 [label="var max = specification.Max", span="65-65", cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", file="SpecificationExtensions.cs"];
m4_29 [label="throw new ArgumentNullException(''specification'');", span="57-57", cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", file="SpecificationExtensions.cs"];
m4_31 [label="DescriptorType.Scalar", span="61-61", cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", color=red, community=0, file="SpecificationExtensions.cs"];
m4_33 [label="DescriptorType.Sequence", span="63-63", cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", color=red, community=0, file="SpecificationExtensions.cs"];
m4_32 [label="return  Maybe.Just(1);", span="62-62", cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", file="SpecificationExtensions.cs"];
m4_36 [label="min >= 0 && max >= 0", span="66-66", cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", file="SpecificationExtensions.cs"];
m4_37 [label="return Maybe.Just(max);", span="68-68", cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", file="SpecificationExtensions.cs"];
m4_38 [label="return Maybe.Nothing<int>();", span="73-73", cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", file="SpecificationExtensions.cs"];
m4_39 [label="Exit CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", span="55-55", cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", file="SpecificationExtensions.cs"];
m4_22 [label="Entry System.ApplicationException.ApplicationException(string)", span="0-0", cluster="System.ApplicationException.ApplicationException(string)", file="SpecificationExtensions.cs"];
m4_26 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)", file="SpecificationExtensions.cs"];
m4_14 [label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", span="17-17", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="SpecificationExtensions.cs"];
m4_5 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="SpecificationExtensions.cs"];
m4_40 [label="Entry System.Type.ToDescriptor()", span="22-22", cluster="System.Type.ToDescriptor()", file="SpecificationExtensions.cs"];
m4_21 [label="Entry Unk.Any", span="", cluster="Unk.Any", file="SpecificationExtensions.cs"];
m4_43 [label="Entry CommandLine.Core.SpecificationExtensions.IsMinNotSpecified(CommandLine.Core.Specification)", span="76-76", cluster="CommandLine.Core.SpecificationExtensions.IsMinNotSpecified(CommandLine.Core.Specification)", file="SpecificationExtensions.cs"];
m4_44 [label="return specification.Min == -1;", span="78-78", cluster="CommandLine.Core.SpecificationExtensions.IsMinNotSpecified(CommandLine.Core.Specification)", file="SpecificationExtensions.cs"];
m4_45 [label="Exit CommandLine.Core.SpecificationExtensions.IsMinNotSpecified(CommandLine.Core.Specification)", span="76-76", cluster="CommandLine.Core.SpecificationExtensions.IsMinNotSpecified(CommandLine.Core.Specification)", file="SpecificationExtensions.cs"];
m4_49 [label="Entry CommandLine.Core.SpecificationExtensions.GetSetName(CommandLine.Core.Specification)", span="86-86", cluster="CommandLine.Core.SpecificationExtensions.GetSetName(CommandLine.Core.Specification)", file="SpecificationExtensions.cs"];
m4_50 [label="return specification.IsOption()\r\n                ? ((OptionSpecification)specification).SetName\r\n                : string.Empty;", span="88-90", cluster="CommandLine.Core.SpecificationExtensions.GetSetName(CommandLine.Core.Specification)", file="SpecificationExtensions.cs"];
m4_51 [label="Exit CommandLine.Core.SpecificationExtensions.GetSetName(CommandLine.Core.Specification)", span="86-86", cluster="CommandLine.Core.SpecificationExtensions.GetSetName(CommandLine.Core.Specification)", file="SpecificationExtensions.cs"];
m4_11 [label="Entry CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string, System.Collections.Generic.IEnumerable<string>)", span="25-25", cluster="CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string, System.Collections.Generic.IEnumerable<string>)", file="SpecificationExtensions.cs"];
m4_12 [label="return new OptionSpecification(\r\n                specification.ShortName,\r\n                newLongName,\r\n                specification.Required,\r\n                specification.SetName,\r\n                specification.Min,\r\n                specification.Max,\r\n                specification.Separator,\r\n                specification.DefaultValue,\r\n                specification.ConversionType,\r\n                specification.HelpText,\r\n                specification.MetaValue,\r\n                enumValues);", span="27-39", cluster="CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string, System.Collections.Generic.IEnumerable<string>)", file="SpecificationExtensions.cs"];
m4_13 [label="Exit CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string, System.Collections.Generic.IEnumerable<string>)", span="25-25", cluster="CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string, System.Collections.Generic.IEnumerable<string>)", file="SpecificationExtensions.cs"];
m4_46 [label="Entry CommandLine.Core.SpecificationExtensions.IsMaxNotSpecified(CommandLine.Core.Specification)", span="81-81", cluster="CommandLine.Core.SpecificationExtensions.IsMaxNotSpecified(CommandLine.Core.Specification)", file="SpecificationExtensions.cs"];
m4_47 [label="return specification.Max == -1;", span="83-83", cluster="CommandLine.Core.SpecificationExtensions.IsMaxNotSpecified(CommandLine.Core.Specification)", file="SpecificationExtensions.cs"];
m4_48 [label="Exit CommandLine.Core.SpecificationExtensions.IsMaxNotSpecified(CommandLine.Core.Specification)", span="81-81", cluster="CommandLine.Core.SpecificationExtensions.IsMaxNotSpecified(CommandLine.Core.Specification)", file="SpecificationExtensions.cs"];
m4_53 [label=guard, span="", file="SpecificationExtensions.cs"];
m7_5 [label="Entry lambda expression", span="16-16", cluster="lambda expression", file="Switch.cs"];
m7_6 [label="t.IsName() && info.Item1 == TypeDescriptorKind.Boolean", span="16-16", cluster="lambda expression", color=green, community=0, file="Switch.cs"];
m7_7 [label="Exit lambda expression", span="16-16", cluster="lambda expression", file="Switch.cs"];
m7_4 [label="Entry CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", span="103-103", cluster="CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", file="Switch.cs"];
m7_8 [label="Entry CommandLine.Core.Token.IsName()", span="72-72", cluster="CommandLine.Core.Token.IsName()", file="Switch.cs"];
m7_0 [label="Entry CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>>>>)", span="11-11", cluster="CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>>>>)", file="Switch.cs"];
m7_1 [label="return from t in tokens\r\n                   where typeLookup(t.Text).Return(info => t.IsName() && info.Item1 == TypeDescriptorKind.Boolean, false)\r\n                   select t;", span="15-17", cluster="CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>>>>)", color=green, community=0, file="Switch.cs"];
m7_2 [label="Exit CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>>>>)", span="11-11", cluster="CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>>>>)", file="Switch.cs"];
m7_3 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)", file="Switch.cs"];
m7_9 [label=t, span="", file="Switch.cs"];
m8_0 [label="Entry Humanizer.Tests.Localisation.nl.NumberToOrdinalWordsTests.NumberToOrdinalWordsTests()", span="7-7", cluster="Humanizer.Tests.Localisation.nl.NumberToOrdinalWordsTests.NumberToOrdinalWordsTests()", file="TokenPartitioner.cs"];
m8_2 [label="Entry Humanizer.Tests.Localisation.nl.NumberToOrdinalWordsTests.ToOrdinalWords(int, string)", span="61-61", cluster="Humanizer.Tests.Localisation.nl.NumberToOrdinalWordsTests.ToOrdinalWords(int, string)", color=green, community=0, file="TokenPartitioner.cs"];
m8_1 [label="Exit Humanizer.Tests.Localisation.nl.NumberToOrdinalWordsTests.NumberToOrdinalWordsTests()", span="7-7", cluster="Humanizer.Tests.Localisation.nl.NumberToOrdinalWordsTests.NumberToOrdinalWordsTests()", file="TokenPartitioner.cs"];
m8_3 [label="Assert.Equal(words, number.ToOrdinalWords())", span="63-63", cluster="Humanizer.Tests.Localisation.nl.NumberToOrdinalWordsTests.ToOrdinalWords(int, string)", file="TokenPartitioner.cs", color=red, community=0];
m8_4 [label="Exit Humanizer.Tests.Localisation.nl.NumberToOrdinalWordsTests.ToOrdinalWords(int, string)", span="61-61", cluster="Humanizer.Tests.Localisation.nl.NumberToOrdinalWordsTests.ToOrdinalWords(int, string)", file="TokenPartitioner.cs"];
m8_5 [label="Entry int.ToOrdinalWords()", span="54-54", cluster="int.ToOrdinalWords()", file="TokenPartitioner.cs"];
m8_6 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="TokenPartitioner.cs"];
m8_100 [label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", span="182-182", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="TokenPartitioner.cs"];
m8_103 [label="var result = sut.ParseArguments<FakeImmutableOptions>(new[] { ''--help'' })", span="189-189", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="TokenPartitioner.cs"];
m8_102 [label="var sut = new Parser()", span="186-186", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="TokenPartitioner.cs"];
m8_104 [label="((NotParsed<FakeImmutableOptions>)result).Errors.Should().HaveCount(x => x == 1)", span="192-192", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="TokenPartitioner.cs"];
m8_105 [label="((NotParsed<FakeImmutableOptions>)result).Errors.Should().ContainSingle(e => e.Equals(expectedError))", span="193-193", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="TokenPartitioner.cs"];
m8_101 [label="var expectedError = new HelpRequestedError()", span="185-185", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="TokenPartitioner.cs"];
m8_106 [label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", span="182-182", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="TokenPartitioner.cs"];
m8_8 [label="Entry CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)", span="36-36", cluster="CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)", file="TokenPartitioner.cs"];
m8_79 [label="Entry CommandLine.Tests.Fakes.CloneOptions.CloneOptions()", span="33-33", cluster="CommandLine.Tests.Fakes.CloneOptions.CloneOptions()", file="TokenPartitioner.cs"];
m8_118 [label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", span="198-198", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="TokenPartitioner.cs"];
m8_120 [label="var sut = new Parser(config => config.HelpWriter = help)", span="202-202", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="TokenPartitioner.cs"];
m8_119 [label="var help = new StringWriter()", span="201-201", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="TokenPartitioner.cs"];
m8_121 [label="sut.ParseArguments<FakeImmutableOptions>(new[] { ''--help'' })", span="205-205", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="TokenPartitioner.cs"];
m8_122 [label="var result = help.ToString()", span="206-206", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="TokenPartitioner.cs"];
m8_123 [label="result.Length.Should().BeGreaterThan(0)", span="209-209", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="TokenPartitioner.cs"];
m8_124 [label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", span="198-198", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="TokenPartitioner.cs"];
m8_11 [label="Entry Unk.True", span="", cluster="Unk.True", file="TokenPartitioner.cs"];
m8_46 [label="Entry CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", span="79-79", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", file="TokenPartitioner.cs"];
m8_48 [label="var sut = new Parser(with => with.EnableDashDash = true)", span="89-89", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", file="TokenPartitioner.cs"];
m8_49 [label="var result = sut.ParseArguments<FakeOptionsWithValues>(\r\n                new[] { ''--stringvalue'', ''astring'', ''--'', ''20'', ''--aaa'', ''-b'', ''--ccc'', ''30'' })", span="92-93", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", file="TokenPartitioner.cs"];
m8_47 [label="var expectedOptions = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''astring'',\r\n                    LongValue = 20L,\r\n                    StringSequence = new[] { ''--aaa'', ''-b'', ''--ccc'' },\r\n                    IntValue = 30\r\n                }", span="82-88", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", file="TokenPartitioner.cs"];
m8_50 [label="result.Value.ShouldBeEquivalentTo(expectedOptions)", span="96-96", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", file="TokenPartitioner.cs"];
m8_51 [label="Exit CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", span="79-79", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", file="TokenPartitioner.cs"];
m8_110 [label="Entry Unk.ContainSingle", span="", cluster="Unk.ContainSingle", file="TokenPartitioner.cs"];
m8_64 [label="Entry Unk.>", span="", cluster="Unk.>", file="TokenPartitioner.cs"];
m8_22 [label="Entry CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", span="141-141", cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="TokenPartitioner.cs"];
m8_33 [label="Entry CommandLine.Parser.ParseArguments<T1, T2, T3>(System.Collections.Generic.IEnumerable<string>)", span="46-46", cluster="CommandLine.Parser.ParseArguments<T1, T2, T3>(System.Collections.Generic.IEnumerable<string>)", file="TokenPartitioner.cs"];
m8_83 [label="Entry CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", span="145-145", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="TokenPartitioner.cs"];
m8_86 [label="var result = sut.ParseArguments<AddOptions, CommitOptions, CloneOptions>(\r\n                new[] { ''clone'', ''-q'', ''http://gsscoder.github.com/'', ''http://yes-to-nooo.github.com/'' })", span="156-157", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="TokenPartitioner.cs"];
m8_85 [label="var sut = new Parser()", span="153-153", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="TokenPartitioner.cs"];
m8_88 [label="result.Value.ShouldBeEquivalentTo(expectedOptions, o => o.RespectingRuntimeTypes())", span="161-161", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="TokenPartitioner.cs"];
m8_87 [label="Assert.IsType<CloneOptions>(result.Value)", span="160-160", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="TokenPartitioner.cs"];
m8_84 [label="var expectedOptions = new CloneOptions\r\n            {\r\n                Quiet = true,\r\n                Urls = new[] { ''http://gsscoder.github.com/'', ''http://yes-to-nooo.github.com/'' }\r\n            }", span="148-152", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="TokenPartitioner.cs"];
m8_89 [label="Exit CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", span="145-145", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="TokenPartitioner.cs"];
m8_56 [label="Entry CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", span="101-101", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", file="TokenPartitioner.cs"];
m8_58 [label="var sut = new Parser(with => with.EnableDashDash = true)", span="109-109", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", file="TokenPartitioner.cs"];
m8_57 [label="var expectedOptions = new AddOptions\r\n                {\r\n                    Patch = true,\r\n                    FileName = ''--strange-fn''\r\n                }", span="104-108", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", file="TokenPartitioner.cs"];
m8_59 [label="var result = sut.ParseArguments(\r\n                new[] { ''add'', ''-p'', ''--'', ''--strange-fn'' },\r\n                typeof(AddOptions), typeof(CommitOptions), typeof(CloneOptions))", span="112-114", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", file="TokenPartitioner.cs"];
m8_61 [label="result.Value.ShouldBeEquivalentTo(expectedOptions, o => o.RespectingRuntimeTypes())", span="118-118", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", file="TokenPartitioner.cs"];
m8_60 [label="Assert.IsType<AddOptions>(result.Value)", span="117-117", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", file="TokenPartitioner.cs"];
m8_62 [label="Exit CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", span="101-101", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", file="TokenPartitioner.cs"];
m8_7 [label="Entry System.IO.StringWriter.StringWriter()", span="0-0", cluster="System.IO.StringWriter.StringWriter()", file="TokenPartitioner.cs"];
m8_125 [label="Entry Unk.BeGreaterThan", span="", cluster="Unk.BeGreaterThan", file="TokenPartitioner.cs"];
m8_129 [label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", span="214-214", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="TokenPartitioner.cs"];
m8_132 [label="var result = sut.ParseArguments<FakeOptions>(new[] { ''--version'' })", span="221-221", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="TokenPartitioner.cs"];
m8_131 [label="var sut = new Parser()", span="218-218", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="TokenPartitioner.cs"];
m8_133 [label="((NotParsed<FakeOptions>)result).Errors.Should().HaveCount(x => x == 1)", span="224-224", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="TokenPartitioner.cs"];
m8_134 [label="((NotParsed<FakeOptions>)result).Errors.Should().ContainSingle(e => e.Equals(expectedError))", span="225-225", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="TokenPartitioner.cs"];
m8_130 [label="var expectedError = new VersionRequestedError()", span="217-217", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="TokenPartitioner.cs"];
m8_135 [label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", span="214-214", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="TokenPartitioner.cs"];
m8_71 [label="Entry Unk.RespectingRuntimeTypes", span="", cluster="Unk.RespectingRuntimeTypes", file="TokenPartitioner.cs"];
m8_136 [label="Entry CommandLine.VersionRequestedError.VersionRequestedError()", span="421-421", cluster="CommandLine.VersionRequestedError.VersionRequestedError()", file="TokenPartitioner.cs"];
m8_44 [label="Entry CommandLine.Parser.Parser()", span="25-25", cluster="CommandLine.Parser.Parser()", file="TokenPartitioner.cs"];
m8_90 [label="Entry lambda expression", span="161-161", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_13 [label="with.HelpWriter = writer", span="17-17", cluster="lambda expression", color=green, community=0, file="TokenPartitioner.cs"];
m8_12 [label="Entry lambda expression", span="17-17", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_14 [label="Exit lambda expression", span="17-17", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_24 [label="with.HelpWriter = writer", span="33-33", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_35 [label="with.HelpWriter = writer", span="49-49", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_54 [label="with.EnableDashDash = true", span="89-89", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_66 [label="with.EnableDashDash = true", span="109-109", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_127 [label="config.HelpWriter = help", span="202-202", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_158 [label="config.HelpWriter = help", span="237-237", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_155 [label="config.HelpWriter = version", span="235-235", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_23 [label="Entry lambda expression", span="33-33", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_25 [label="Exit lambda expression", span="33-33", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_34 [label="Entry lambda expression", span="49-49", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_36 [label="Exit lambda expression", span="49-49", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_53 [label="Entry lambda expression", span="89-89", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_55 [label="Exit lambda expression", span="89-89", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_65 [label="Entry lambda expression", span="109-109", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_67 [label="Exit lambda expression", span="109-109", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_126 [label="Entry lambda expression", span="202-202", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_128 [label="Exit lambda expression", span="202-202", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_157 [label="Entry lambda expression", span="237-237", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_159 [label="Exit lambda expression", span="237-237", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_154 [label="Entry lambda expression", span="235-235", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_156 [label="Exit lambda expression", span="235-235", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_111 [label="Entry lambda expression", span="192-192", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_114 [label="Entry lambda expression", span="193-193", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_137 [label="Entry lambda expression", span="224-224", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_140 [label="Entry lambda expression", span="225-225", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_68 [label="Entry lambda expression", span="118-118", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_115 [label="e.Equals(expectedError)", span="193-193", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_113 [label="Exit lambda expression", span="192-192", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_112 [label="x == 1", span="192-192", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_116 [label="Exit lambda expression", span="193-193", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_141 [label="e.Equals(expectedError)", span="225-225", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_139 [label="Exit lambda expression", span="224-224", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_138 [label="x == 1", span="224-224", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_142 [label="Exit lambda expression", span="225-225", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_70 [label="Exit lambda expression", span="118-118", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_69 [label="o.RespectingRuntimeTypes()", span="118-118", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_80 [label="Entry lambda expression", span="140-140", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_82 [label="Exit lambda expression", span="140-140", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_81 [label="o.RespectingRuntimeTypes()", span="140-140", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_91 [label="o.RespectingRuntimeTypes()", span="161-161", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_92 [label="Exit lambda expression", span="161-161", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_26 [label="Entry CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", span="45-45", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", file="TokenPartitioner.cs"];
m8_28 [label="var sut = new Parser(with => with.HelpWriter = writer)", span="49-49", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", file="TokenPartitioner.cs"];
m8_27 [label="var writer = new StringWriter()", span="48-48", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", file="TokenPartitioner.cs"];
m8_29 [label="sut.ParseArguments<AddOptions, CommitOptions, CloneOptions>(new string[] { })", span="52-52", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", file="TokenPartitioner.cs"];
m8_30 [label="var text = writer.ToString()", span="55-55", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", file="TokenPartitioner.cs"];
m8_31 [label="Assert.True(text.Length > 0)", span="56-56", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", file="TokenPartitioner.cs"];
m8_32 [label="Exit CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", span="45-45", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", file="TokenPartitioner.cs"];
m8_108 [label="Entry Unk.Should", span="", cluster="Unk.Should", file="TokenPartitioner.cs"];
m8_117 [label="Entry Unk.Equals", span="", cluster="Unk.Equals", file="TokenPartitioner.cs"];
m8_10 [label="Entry System.IO.StringWriter.ToString()", span="0-0", cluster="System.IO.StringWriter.ToString()", file="TokenPartitioner.cs"];
m8_109 [label="Entry Unk.HaveCount", span="", cluster="Unk.HaveCount", file="TokenPartitioner.cs"];
m8_99 [label="Entry CommandLine.Tests.Fakes.FakeImmutableOptions.FakeImmutableOptions(string, System.Collections.Generic.IEnumerable<int>, bool, long)", span="13-13", cluster="CommandLine.Tests.Fakes.FakeImmutableOptions.FakeImmutableOptions(string, System.Collections.Generic.IEnumerable<int>, bool, long)", file="TokenPartitioner.cs"];
m8_37 [label="Entry CommandLine.Tests.Unit.ParserTests.Parse_options()", span="61-61", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options()", file="TokenPartitioner.cs"];
m8_40 [label="var result = sut.ParseArguments<FakeOptions>(new[] { ''--stringvalue=strvalue'', ''-i1'', ''2'', ''3'' })", span="71-71", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options()", file="TokenPartitioner.cs"];
m8_39 [label="var sut = new Parser()", span="68-68", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options()", file="TokenPartitioner.cs"];
m8_41 [label="result.Value.ShouldBeEquivalentTo(expectedOptions)", span="74-74", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options()", file="TokenPartitioner.cs"];
m8_38 [label="var expectedOptions = new FakeOptions\r\n                {\r\n                    StringValue = ''strvalue'', IntSequence = new[] { 1, 2, 3 }\r\n                }", span="64-67", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options()", file="TokenPartitioner.cs"];
m8_42 [label="Exit CommandLine.Tests.Unit.ParserTests.Parse_options()", span="61-61", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options()", file="TokenPartitioner.cs"];
m8_63 [label="Entry CommandLine.Tests.Fakes.AddOptions.AddOptions()", span="7-7", cluster="CommandLine.Tests.Fakes.AddOptions.AddOptions()", file="TokenPartitioner.cs"];
m8_143 [label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_help_screen()", span="230-230", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_help_screen()", file="TokenPartitioner.cs"];
m8_147 [label="new Parser(config => config.HelpWriter = help).ParseArguments<FakeOptions>(new[] { ''--help'' })", span="237-237", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_help_screen()", file="TokenPartitioner.cs"];
m8_146 [label="var sut = new Parser(config => config.HelpWriter = version)", span="235-235", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_help_screen()", file="TokenPartitioner.cs"];
m8_144 [label="var help = new StringWriter()", span="233-233", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_help_screen()", file="TokenPartitioner.cs"];
m8_145 [label="var version = new StringWriter()", span="234-234", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_help_screen()", file="TokenPartitioner.cs"];
m8_149 [label="sut.ParseArguments<FakeOptions>(new[] { ''--version'' })", span="241-241", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_help_screen()", file="TokenPartitioner.cs"];
m8_148 [label="var helpText = help.ToString()", span="238-238", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_help_screen()", file="TokenPartitioner.cs"];
m8_150 [label="var result = version.ToString()", span="242-242", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_help_screen()", file="TokenPartitioner.cs"];
m8_151 [label="result.Length.Should().BeLessThan(helpText.Length)", span="245-245", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_help_screen()", file="TokenPartitioner.cs"];
m8_152 [label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_help_screen()", span="230-230", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_help_screen()", file="TokenPartitioner.cs"];
m8_93 [label="Entry CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", span="166-166", cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", file="TokenPartitioner.cs"];
m8_96 [label="var result = sut.ParseArguments<FakeImmutableOptions>(new[] { ''--stringvalue=strvalue'', ''-i1'', ''2'', ''3'' })", span="174-174", cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", file="TokenPartitioner.cs"];
m8_95 [label="var sut = new Parser()", span="171-171", cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", file="TokenPartitioner.cs"];
m8_97 [label="result.Value.ShouldBeEquivalentTo(expectedOptions)", span="177-177", cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", file="TokenPartitioner.cs"];
m8_94 [label="var expectedOptions = new FakeImmutableOptions(\r\n                ''strvalue'', new[] { 1, 2, 3 }, default(bool), default(long))", span="169-170", cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", file="TokenPartitioner.cs"];
m8_98 [label="Exit CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", span="166-166", cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", file="TokenPartitioner.cs"];
m8_15 [label="Entry CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", span="29-29", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", file="TokenPartitioner.cs"];
m8_17 [label="var sut = new Parser(with => with.HelpWriter = writer)", span="33-33", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", file="TokenPartitioner.cs"];
m8_16 [label="var writer = new StringWriter()", span="32-32", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", file="TokenPartitioner.cs"];
m8_18 [label="sut.ParseArguments(new string[] { }, typeof(AddOptions), typeof(CommitOptions), typeof(CloneOptions))", span="36-36", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", file="TokenPartitioner.cs"];
m8_19 [label="var text = writer.ToString()", span="39-39", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", file="TokenPartitioner.cs"];
m8_20 [label="Assert.True(text.Length > 0)", span="40-40", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", file="TokenPartitioner.cs"];
m8_21 [label="Exit CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", span="29-29", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", file="TokenPartitioner.cs"];
m8_9 [label="Entry CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", span="84-84", cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", file="TokenPartitioner.cs"];
m8_72 [label="Entry CommandLine.Tests.Unit.ParserTests.Parse_verbs()", span="123-123", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="TokenPartitioner.cs"];
m8_75 [label="var result = sut.ParseArguments(\r\n                new[] { ''clone'', ''-q'', ''http://gsscoder.github.com/'', ''http://yes-to-nooo.github.com/'' },\r\n                typeof(AddOptions), typeof(CommitOptions), typeof(CloneOptions))", span="134-136", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="TokenPartitioner.cs"];
m8_74 [label="var sut = new Parser()", span="131-131", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="TokenPartitioner.cs"];
m8_77 [label="result.Value.ShouldBeEquivalentTo(expectedOptions, o => o.RespectingRuntimeTypes())", span="140-140", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="TokenPartitioner.cs"];
m8_76 [label="Assert.IsType<CloneOptions>(result.Value)", span="139-139", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="TokenPartitioner.cs"];
m8_73 [label="var expectedOptions = new CloneOptions\r\n                {\r\n                    Quiet = true,\r\n                    Urls = new[] { ''http://gsscoder.github.com/'', ''http://yes-to-nooo.github.com/'' }\r\n                }", span="126-130", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="TokenPartitioner.cs"];
m8_78 [label="Exit CommandLine.Tests.Unit.ParserTests.Parse_verbs()", span="123-123", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="TokenPartitioner.cs"];
m8_43 [label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", file="TokenPartitioner.cs"];
m8_153 [label="Entry Unk.BeLessThan", span="", cluster="Unk.BeLessThan", file="TokenPartitioner.cs"];
m8_52 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", file="TokenPartitioner.cs"];
m8_107 [label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="357-357", cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="TokenPartitioner.cs"];
m8_45 [label="Entry Unk.ShouldBeEquivalentTo", span="", cluster="Unk.ShouldBeEquivalentTo", file="TokenPartitioner.cs"];
m8_160 [label=writer, span="", file="TokenPartitioner.cs"];
m8_161 [label=writer, span="", file="TokenPartitioner.cs"];
m8_162 [label=writer, span="", file="TokenPartitioner.cs"];
m8_164 [label=help, span="", file="TokenPartitioner.cs"];
m8_167 [label=help, span="", file="TokenPartitioner.cs"];
m8_166 [label=version, span="", file="TokenPartitioner.cs"];
m8_163 [label=expectedError, span="", file="TokenPartitioner.cs"];
m8_165 [label=expectedError, span="", file="TokenPartitioner.cs"];
m1_11 -> m1_12  [key=0, style=solid];
m1_12 -> m1_3  [key=2, style=dotted];
m1_12 -> m1_13  [key=0, style=solid];
m1_13 -> m1_11  [key=0, style=bold, color=blue];
m1_8 -> m1_9  [key=0, style=solid, color=green];
m1_8 -> m1_0  [key=3, color=darkorchid, style=bold, label="method methodReturn System.DateTime AtNoon"];
m1_9 -> m1_10  [key=0, style=solid, color=green];
m1_9 -> m1_7  [key=2, style=dotted, color=green];
m1_10 -> m1_8  [key=0, style=bold, color=blue];
m1_0 -> m1_9  [key=3, color=green, style=bold, label="Parameter variable int hour"];
m1_0 -> m1_1  [key=0, style=solid];
m1_0 -> m1_5  [key=3, color=darkorchid, style=bold, label="Parameter variable int hour"];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_3  [key=2, style=dotted];
m1_2 -> m1_0  [key=0, style=bold, color=blue];
m1_4 -> m1_0  [key=3, color=darkorchid, style=bold, label="method methodReturn System.DateTime AtMidnight"];
m1_4 -> m1_5  [key=0, style=solid];
m1_5 -> m1_7  [key=2, style=dotted];
m1_5 -> m1_6  [key=0, style=solid];
m1_6 -> m1_4  [key=0, style=bold, color=blue];
m2_0 -> m2_1  [key=0, style=solid, color=green];
m2_0 -> m2_5  [key=1, style=dashed, color=green, label="System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>>>>"];
m2_1 -> m2_1  [key=1, style=dashed, color=green, label=tseq];
m2_1 -> m2_2  [key=0, style=solid, color=green];
m2_1 -> m2_3  [key=2, style=dotted, color=green];
m2_1 -> m2_4  [key=1, style=dashed, color=green, label="lambda expression"];
m2_2 -> m2_0  [key=0, style=bold, color=blue];
m2_11 -> m2_12  [key=0, style=solid, color=green];
m2_4 -> m2_5  [key=0, style=solid, color=green];
m2_4 -> m2_12  [key=1, style=dashed, color=green, label="CommandLine.Core.Token"];
m2_5 -> m2_6  [key=0, style=solid, color=green];
m2_5 -> m2_7  [key=2, style=dotted, color=green];
m2_5 -> m2_8  [key=2, style=dotted, color=green];
m2_5 -> m2_9  [key=2, style=dotted, color=green];
m2_5 -> m2_10  [key=2, style=dotted, color=green];
m2_5 -> m2_11  [key=1, style=dashed, color=green, label="lambda expression"];
m2_6 -> m2_4  [key=0, style=bold, color=blue];
m2_12 -> m2_13  [key=0, style=solid, color=green];
m2_13 -> m2_11  [key=0, style=bold, color=blue];
m2_14 -> m2_5  [key=1, style=dashed, color=green, label="System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>>>>"];
m2_15 -> m2_12  [key=1, style=dashed, color=green, label="CommandLine.Core.Token"];
m2_16 -> m2_12  [key=1, style=dashed, color=green, label="CommandLine.Core.Token"];
m4_15 -> m4_16  [key=0, style=solid];
m4_15 -> m4_17  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>"];
m4_15 -> m4_19  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>"];
m4_15 -> m4_15  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Collections.Generic.IEnumerable<CommandLine.Core.Specification> ThrowingValidate"];
m4_16 -> m4_17  [key=0, style=solid];
m4_16 -> m4_19  [key=0, style=solid];
m4_16 -> m4_24  [key=1, style=dashed, color=darkseagreen4, label=guard];
m4_16 -> m4_18  [key=1, style=dashed, color=darkseagreen4, label=guard];
m4_17 -> m4_18  [key=0, style=solid];
m4_17 -> m4_16  [key=0, style=solid];
m4_17 -> m4_21  [key=2, style=dotted];
m4_17 -> m4_23  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_19 -> m4_20  [key=0, style=solid];
m4_18 -> m4_20  [key=0, style=solid];
m4_18 -> m4_22  [key=2, style=dotted];
m4_20 -> m4_15  [key=0, style=bold, color=blue];
m4_0 -> m4_1  [key=0, style=solid];
m4_0 -> m4_3  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m4_1 -> m4_2  [key=0, style=solid];
m4_1 -> m4_3  [key=0, style=solid];
m4_3 -> m4_4  [key=0, style=solid];
m4_2 -> m4_4  [key=0, style=solid];
m4_2 -> m4_5  [key=2, style=dotted];
m4_4 -> m4_0  [key=0, style=bold, color=blue];
m4_6 -> m4_7  [key=0, style=solid];
m4_6 -> m4_9  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m4_7 -> m4_8  [key=0, style=solid];
m4_7 -> m4_9  [key=0, style=solid];
m4_9 -> m4_10  [key=0, style=solid];
m4_8 -> m4_10  [key=0, style=solid];
m4_8 -> m4_5  [key=2, style=dotted];
m4_10 -> m4_6  [key=0, style=bold, color=blue];
m4_23 -> m4_24  [key=0, style=solid];
m4_24 -> m4_25  [key=0, style=solid];
m4_24 -> m4_26  [key=2, style=dotted];
m4_25 -> m4_23  [key=0, style=bold, color=blue];
m4_27 -> m4_28  [key=0, style=solid];
m4_27 -> m4_30  [key=1, style=dashed, color=red, label="CommandLine.Core.Specification"];
m4_27 -> m4_34  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m4_27 -> m4_35  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m4_28 -> m4_29  [key=0, style=solid];
m4_28 -> m4_30  [key=0, style=solid, color=red];
m4_30 -> m4_31  [key=0, style=solid, color=red];
m4_30 -> m4_33  [key=0, style=solid, color=red];
m4_30 -> m4_40  [key=2, style=dotted, color=red];
m4_34 -> m4_35  [key=0, style=solid];
m4_34 -> m4_36  [key=1, style=dashed, color=darkseagreen4, label=min];
m4_35 -> m4_36  [key=0, style=solid];
m4_35 -> m4_37  [key=1, style=dashed, color=darkseagreen4, label=max];
m4_29 -> m4_39  [key=0, style=solid];
m4_29 -> m4_5  [key=2, style=dotted];
m4_31 -> m4_32  [key=0, style=solid, color=red];
m4_33 -> m4_34  [key=0, style=solid, color=red];
m4_32 -> m4_39  [key=0, style=solid];
m4_32 -> m4_41  [key=2, style=dotted];
m4_36 -> m4_37  [key=0, style=solid];
m4_36 -> m4_38  [key=0, style=solid];
m4_37 -> m4_39  [key=0, style=solid];
m4_37 -> m4_41  [key=2, style=dotted];
m4_38 -> m4_39  [key=0, style=solid];
m4_38 -> m4_42  [key=2, style=dotted];
m4_39 -> m4_27  [key=0, style=bold, color=blue];
m4_43 -> m4_44  [key=0, style=solid];
m4_44 -> m4_45  [key=0, style=solid];
m4_45 -> m4_43  [key=0, style=bold, color=blue];
m4_49 -> m4_50  [key=0, style=solid];
m4_50 -> m4_51  [key=0, style=solid];
m4_50 -> m4_52  [key=2, style=dotted];
m4_51 -> m4_49  [key=0, style=bold, color=blue];
m4_11 -> m4_12  [key=0, style=solid];
m4_12 -> m4_13  [key=0, style=solid];
m4_12 -> m4_14  [key=2, style=dotted];
m4_13 -> m4_11  [key=0, style=bold, color=blue];
m4_46 -> m4_47  [key=0, style=solid];
m4_47 -> m4_48  [key=0, style=solid];
m4_48 -> m4_46  [key=0, style=bold, color=blue];
m4_53 -> m4_24  [key=1, style=dashed, color=darkseagreen4, label=guard];
m7_5 -> m7_6  [key=0, style=solid, color=green];
m7_6 -> m7_7  [key=0, style=solid, color=green];
m7_6 -> m7_8  [key=2, style=dotted, color=green];
m7_7 -> m7_5  [key=0, style=bold, color=blue];
m7_0 -> m7_1  [key=0, style=solid, color=green];
m7_1 -> m7_1  [key=1, style=dashed, color=green, label=t];
m7_1 -> m7_2  [key=0, style=solid, color=green];
m7_1 -> m7_3  [key=2, style=dotted, color=green];
m7_1 -> m7_4  [key=2, style=dotted, color=green];
m7_1 -> m7_5  [key=1, style=dashed, color=green, label="lambda expression"];
m7_1 -> m7_6  [key=1, style=dashed, color=green, label=t];
m7_2 -> m7_0  [key=0, style=bold, color=blue];
m7_9 -> m7_6  [key=1, style=dashed, color=green, label=t];
m8_0 -> m8_1  [key=0, style=solid];
m8_2 -> m8_3  [key=0, style=solid, color=red];
m8_2 -> m8_8  [key=2, style=dotted, color=green];
m8_2 -> m8_13  [key=1, style=dashed, color=green, label="CommandLine.ParserSettings"];
m8_1 -> m8_2  [key=0, style=solid, color=green];
m8_1 -> m8_13  [key=1, style=dashed, color=green, label=writer];
m8_1 -> m8_7  [key=2, style=dotted];
m8_1 -> m8_4  [key=1, style=dashed, color=darkseagreen4, label=writer];
m8_1 -> m8_0  [key=0, style=bold, color=blue];
m8_3 -> m8_4  [key=0, style=solid, color=red];
m8_3 -> m8_9  [key=2, style=dotted];
m8_3 -> m8_5  [key=2, style=dotted, color=red];
m8_3 -> m8_6  [key=2, style=dotted, color=red];
m8_4 -> m8_5  [key=0, style=solid];
m8_4 -> m8_10  [key=2, style=dotted];
m8_4 -> m8_2  [key=0, style=bold, color=blue];
m8_5 -> m8_6  [key=0, style=solid];
m8_5 -> m8_11  [key=2, style=dotted];
m8_6 -> m8_0  [key=0, style=bold, color=blue];
m8_100 -> m8_101  [key=0, style=solid];
m8_103 -> m8_9  [key=2, style=dotted];
m8_103 -> m8_104  [key=0, style=solid];
m8_103 -> m8_105  [key=1, style=dashed, color=darkseagreen4, label=result];
m8_102 -> m8_103  [key=0, style=solid];
m8_102 -> m8_44  [key=2, style=dotted];
m8_104 -> m8_105  [key=0, style=solid];
m8_104 -> m8_108  [key=2, style=dotted];
m8_104 -> m8_109  [key=2, style=dotted];
m8_104 -> m8_111  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_105 -> m8_106  [key=0, style=solid];
m8_105 -> m8_108  [key=2, style=dotted];
m8_105 -> m8_110  [key=2, style=dotted];
m8_105 -> m8_114  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_101 -> m8_102  [key=0, style=solid];
m8_101 -> m8_105  [key=1, style=dashed, color=darkseagreen4, label=expectedError];
m8_101 -> m8_107  [key=2, style=dotted];
m8_101 -> m8_115  [key=1, style=dashed, color=darkseagreen4, label=expectedError];
m8_106 -> m8_100  [key=0, style=bold, color=blue];
m8_118 -> m8_119  [key=0, style=solid];
m8_120 -> m8_8  [key=2, style=dotted];
m8_120 -> m8_121  [key=0, style=solid];
m8_120 -> m8_127  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m8_119 -> m8_7  [key=2, style=dotted];
m8_119 -> m8_120  [key=0, style=solid];
m8_119 -> m8_127  [key=1, style=dashed, color=darkseagreen4, label=help];
m8_119 -> m8_122  [key=1, style=dashed, color=darkseagreen4, label=help];
m8_121 -> m8_9  [key=2, style=dotted];
m8_121 -> m8_122  [key=0, style=solid];
m8_122 -> m8_10  [key=2, style=dotted];
m8_122 -> m8_123  [key=0, style=solid];
m8_123 -> m8_124  [key=0, style=solid];
m8_123 -> m8_108  [key=2, style=dotted];
m8_123 -> m8_125  [key=2, style=dotted];
m8_124 -> m8_118  [key=0, style=bold, color=blue];
m8_46 -> m8_47  [key=0, style=solid];
m8_48 -> m8_8  [key=2, style=dotted];
m8_48 -> m8_49  [key=0, style=solid];
m8_48 -> m8_54  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m8_49 -> m8_9  [key=2, style=dotted];
m8_49 -> m8_50  [key=0, style=solid];
m8_47 -> m8_48  [key=0, style=solid];
m8_47 -> m8_52  [key=2, style=dotted];
m8_47 -> m8_50  [key=1, style=dashed, color=darkseagreen4, label=expectedOptions];
m8_50 -> m8_51  [key=0, style=solid];
m8_50 -> m8_45  [key=2, style=dotted];
m8_51 -> m8_46  [key=0, style=bold, color=blue];
m8_83 -> m8_84  [key=0, style=solid];
m8_86 -> m8_33  [key=2, style=dotted];
m8_86 -> m8_87  [key=0, style=solid];
m8_86 -> m8_88  [key=1, style=dashed, color=darkseagreen4, label=result];
m8_85 -> m8_44  [key=2, style=dotted];
m8_85 -> m8_86  [key=0, style=solid];
m8_88 -> m8_45  [key=2, style=dotted];
m8_88 -> m8_89  [key=0, style=solid];
m8_88 -> m8_90  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_87 -> m8_64  [key=2, style=dotted];
m8_87 -> m8_88  [key=0, style=solid];
m8_84 -> m8_85  [key=0, style=solid];
m8_84 -> m8_88  [key=1, style=dashed, color=darkseagreen4, label=expectedOptions];
m8_84 -> m8_79  [key=2, style=dotted];
m8_89 -> m8_83  [key=0, style=bold, color=blue];
m8_56 -> m8_57  [key=0, style=solid];
m8_58 -> m8_8  [key=2, style=dotted];
m8_58 -> m8_59  [key=0, style=solid];
m8_58 -> m8_66  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m8_57 -> m8_58  [key=0, style=solid];
m8_57 -> m8_63  [key=2, style=dotted];
m8_57 -> m8_61  [key=1, style=dashed, color=darkseagreen4, label=expectedOptions];
m8_59 -> m8_60  [key=0, style=solid];
m8_59 -> m8_22  [key=2, style=dotted];
m8_59 -> m8_61  [key=1, style=dashed, color=darkseagreen4, label=result];
m8_61 -> m8_62  [key=0, style=solid];
m8_61 -> m8_45  [key=2, style=dotted];
m8_61 -> m8_68  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_60 -> m8_61  [key=0, style=solid];
m8_60 -> m8_64  [key=2, style=dotted];
m8_62 -> m8_56  [key=0, style=bold, color=blue];
m8_129 -> m8_130  [key=0, style=solid];
m8_132 -> m8_9  [key=2, style=dotted];
m8_132 -> m8_133  [key=0, style=solid];
m8_132 -> m8_134  [key=1, style=dashed, color=darkseagreen4, label=result];
m8_131 -> m8_132  [key=0, style=solid];
m8_131 -> m8_44  [key=2, style=dotted];
m8_133 -> m8_134  [key=0, style=solid];
m8_133 -> m8_108  [key=2, style=dotted];
m8_133 -> m8_109  [key=2, style=dotted];
m8_133 -> m8_137  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_134 -> m8_135  [key=0, style=solid];
m8_134 -> m8_108  [key=2, style=dotted];
m8_134 -> m8_110  [key=2, style=dotted];
m8_134 -> m8_140  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_130 -> m8_131  [key=0, style=solid];
m8_130 -> m8_134  [key=1, style=dashed, color=darkseagreen4, label=expectedError];
m8_130 -> m8_136  [key=2, style=dotted];
m8_130 -> m8_141  [key=1, style=dashed, color=darkseagreen4, label=expectedError];
m8_135 -> m8_129  [key=0, style=bold, color=blue];
m8_90 -> m8_91  [key=0, style=solid];
m8_13 -> m8_14  [key=0, style=solid, color=green];
m8_12 -> m8_13  [key=0, style=solid, color=green];
m8_14 -> m8_12  [key=0, style=bold, color=blue];
m8_24 -> m8_25  [key=0, style=solid];
m8_35 -> m8_36  [key=0, style=solid];
m8_54 -> m8_55  [key=0, style=solid];
m8_66 -> m8_67  [key=0, style=solid];
m8_127 -> m8_128  [key=0, style=solid];
m8_158 -> m8_159  [key=0, style=solid];
m8_155 -> m8_156  [key=0, style=solid];
m8_23 -> m8_24  [key=0, style=solid];
m8_25 -> m8_23  [key=0, style=bold, color=blue];
m8_34 -> m8_35  [key=0, style=solid];
m8_36 -> m8_34  [key=0, style=bold, color=blue];
m8_53 -> m8_54  [key=0, style=solid];
m8_55 -> m8_53  [key=0, style=bold, color=blue];
m8_65 -> m8_66  [key=0, style=solid];
m8_67 -> m8_65  [key=0, style=bold, color=blue];
m8_126 -> m8_127  [key=0, style=solid];
m8_128 -> m8_126  [key=0, style=bold, color=blue];
m8_157 -> m8_158  [key=0, style=solid];
m8_159 -> m8_157  [key=0, style=bold, color=blue];
m8_154 -> m8_155  [key=0, style=solid];
m8_156 -> m8_154  [key=0, style=bold, color=blue];
m8_111 -> m8_112  [key=0, style=solid];
m8_114 -> m8_115  [key=0, style=solid];
m8_137 -> m8_138  [key=0, style=solid];
m8_140 -> m8_141  [key=0, style=solid];
m8_68 -> m8_69  [key=0, style=solid];
m8_115 -> m8_116  [key=0, style=solid];
m8_115 -> m8_117  [key=2, style=dotted];
m8_113 -> m8_111  [key=0, style=bold, color=blue];
m8_112 -> m8_113  [key=0, style=solid];
m8_116 -> m8_114  [key=0, style=bold, color=blue];
m8_141 -> m8_142  [key=0, style=solid];
m8_141 -> m8_117  [key=2, style=dotted];
m8_139 -> m8_137  [key=0, style=bold, color=blue];
m8_138 -> m8_139  [key=0, style=solid];
m8_142 -> m8_140  [key=0, style=bold, color=blue];
m8_70 -> m8_68  [key=0, style=bold, color=blue];
m8_69 -> m8_70  [key=0, style=solid];
m8_69 -> m8_71  [key=2, style=dotted];
m8_80 -> m8_81  [key=0, style=solid];
m8_82 -> m8_80  [key=0, style=bold, color=blue];
m8_81 -> m8_71  [key=2, style=dotted];
m8_81 -> m8_82  [key=0, style=solid];
m8_91 -> m8_71  [key=2, style=dotted];
m8_91 -> m8_92  [key=0, style=solid];
m8_92 -> m8_90  [key=0, style=bold, color=blue];
m8_26 -> m8_27  [key=0, style=solid];
m8_28 -> m8_8  [key=2, style=dotted];
m8_28 -> m8_29  [key=0, style=solid];
m8_28 -> m8_35  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m8_27 -> m8_7  [key=2, style=dotted];
m8_27 -> m8_28  [key=0, style=solid];
m8_27 -> m8_35  [key=1, style=dashed, color=darkseagreen4, label=writer];
m8_27 -> m8_30  [key=1, style=dashed, color=darkseagreen4, label=writer];
m8_29 -> m8_30  [key=0, style=solid];
m8_29 -> m8_33  [key=2, style=dotted];
m8_30 -> m8_10  [key=2, style=dotted];
m8_30 -> m8_31  [key=0, style=solid];
m8_31 -> m8_11  [key=2, style=dotted];
m8_31 -> m8_32  [key=0, style=solid];
m8_32 -> m8_26  [key=0, style=bold, color=blue];
m8_37 -> m8_38  [key=0, style=solid];
m8_40 -> m8_9  [key=2, style=dotted];
m8_40 -> m8_41  [key=0, style=solid];
m8_39 -> m8_40  [key=0, style=solid];
m8_39 -> m8_44  [key=2, style=dotted];
m8_41 -> m8_42  [key=0, style=solid];
m8_41 -> m8_45  [key=2, style=dotted];
m8_38 -> m8_39  [key=0, style=solid];
m8_38 -> m8_41  [key=1, style=dashed, color=darkseagreen4, label=expectedOptions];
m8_38 -> m8_43  [key=2, style=dotted];
m8_42 -> m8_37  [key=0, style=bold, color=blue];
m8_143 -> m8_144  [key=0, style=solid];
m8_147 -> m8_8  [key=2, style=dotted];
m8_147 -> m8_9  [key=2, style=dotted];
m8_147 -> m8_148  [key=0, style=solid];
m8_147 -> m8_158  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m8_146 -> m8_8  [key=2, style=dotted];
m8_146 -> m8_147  [key=0, style=solid];
m8_146 -> m8_155  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m8_146 -> m8_149  [key=1, style=dashed, color=darkseagreen4, label=sut];
m8_144 -> m8_7  [key=2, style=dotted];
m8_144 -> m8_147  [key=1, style=dashed, color=darkseagreen4, label=help];
m8_144 -> m8_145  [key=0, style=solid];
m8_144 -> m8_158  [key=1, style=dashed, color=darkseagreen4, label=help];
m8_144 -> m8_148  [key=1, style=dashed, color=darkseagreen4, label=help];
m8_145 -> m8_7  [key=2, style=dotted];
m8_145 -> m8_146  [key=0, style=solid];
m8_145 -> m8_155  [key=1, style=dashed, color=darkseagreen4, label=version];
m8_145 -> m8_150  [key=1, style=dashed, color=darkseagreen4, label=version];
m8_149 -> m8_9  [key=2, style=dotted];
m8_149 -> m8_150  [key=0, style=solid];
m8_148 -> m8_10  [key=2, style=dotted];
m8_148 -> m8_149  [key=0, style=solid];
m8_148 -> m8_151  [key=1, style=dashed, color=darkseagreen4, label=helpText];
m8_150 -> m8_10  [key=2, style=dotted];
m8_150 -> m8_151  [key=0, style=solid];
m8_151 -> m8_152  [key=0, style=solid];
m8_151 -> m8_108  [key=2, style=dotted];
m8_151 -> m8_153  [key=2, style=dotted];
m8_152 -> m8_143  [key=0, style=bold, color=blue];
m8_93 -> m8_94  [key=0, style=solid];
m8_96 -> m8_9  [key=2, style=dotted];
m8_96 -> m8_97  [key=0, style=solid];
m8_95 -> m8_96  [key=0, style=solid];
m8_95 -> m8_44  [key=2, style=dotted];
m8_97 -> m8_98  [key=0, style=solid];
m8_97 -> m8_45  [key=2, style=dotted];
m8_94 -> m8_95  [key=0, style=solid];
m8_94 -> m8_97  [key=1, style=dashed, color=darkseagreen4, label=expectedOptions];
m8_94 -> m8_99  [key=2, style=dotted];
m8_98 -> m8_93  [key=0, style=bold, color=blue];
m8_15 -> m8_16  [key=0, style=solid];
m8_17 -> m8_8  [key=2, style=dotted];
m8_17 -> m8_18  [key=0, style=solid];
m8_17 -> m8_24  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m8_16 -> m8_7  [key=2, style=dotted];
m8_16 -> m8_17  [key=0, style=solid];
m8_16 -> m8_24  [key=1, style=dashed, color=darkseagreen4, label=writer];
m8_16 -> m8_19  [key=1, style=dashed, color=darkseagreen4, label=writer];
m8_18 -> m8_19  [key=0, style=solid];
m8_18 -> m8_22  [key=2, style=dotted];
m8_19 -> m8_10  [key=2, style=dotted];
m8_19 -> m8_20  [key=0, style=solid];
m8_20 -> m8_11  [key=2, style=dotted];
m8_20 -> m8_21  [key=0, style=solid];
m8_21 -> m8_15  [key=0, style=bold, color=blue];
m8_72 -> m8_73  [key=0, style=solid];
m8_75 -> m8_22  [key=2, style=dotted];
m8_75 -> m8_76  [key=0, style=solid];
m8_75 -> m8_77  [key=1, style=dashed, color=darkseagreen4, label=result];
m8_74 -> m8_44  [key=2, style=dotted];
m8_74 -> m8_75  [key=0, style=solid];
m8_77 -> m8_45  [key=2, style=dotted];
m8_77 -> m8_78  [key=0, style=solid];
m8_77 -> m8_80  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_76 -> m8_64  [key=2, style=dotted];
m8_76 -> m8_77  [key=0, style=solid];
m8_73 -> m8_74  [key=0, style=solid];
m8_73 -> m8_77  [key=1, style=dashed, color=darkseagreen4, label=expectedOptions];
m8_73 -> m8_79  [key=2, style=dotted];
m8_78 -> m8_72  [key=0, style=bold, color=blue];
m8_160 -> m8_13  [key=1, style=dashed, color=green, label=writer];
m8_161 -> m8_24  [key=1, style=dashed, color=darkseagreen4, label=writer];
m8_162 -> m8_35  [key=1, style=dashed, color=darkseagreen4, label=writer];
m8_164 -> m8_127  [key=1, style=dashed, color=darkseagreen4, label=help];
m8_167 -> m8_158  [key=1, style=dashed, color=darkseagreen4, label=help];
m8_166 -> m8_155  [key=1, style=dashed, color=darkseagreen4, label=version];
m8_163 -> m8_115  [key=1, style=dashed, color=darkseagreen4, label=expectedError];
m8_165 -> m8_141  [key=1, style=dashed, color=darkseagreen4, label=expectedError];
}
