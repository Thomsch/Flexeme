digraph  {
n55 [label="System.Func<CommandLine.Core.SpecificationProperty, object>", span=""];
n56 [label=T, span=""];
n0 [cluster="CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", label="Entry CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", span="12-12"];
n1 [cluster="CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", label="return from pi in type.GetProperties()\r\n                   let attrs = pi.GetCustomAttributes(true)\r\n                   where\r\n                        attrs.OfType<OptionAttribute>().Any() ||\r\n                        attrs.OfType<ValueAttribute>().Any()\r\n                   select selector(pi);", span="14-19"];
n2 [cluster="CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", label="Exit CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", span="12-12"];
n3 [cluster="System.Type.GetProperties()", label="Entry System.Type.GetProperties()", span="0-0"];
n4 [cluster="System.Reflection.MemberInfo.GetCustomAttributes(bool)", label="Entry System.Reflection.MemberInfo.GetCustomAttributes(bool)", span="0-0"];
n5 [cluster="Unk.>", label="Entry Unk.>", span=""];
n6 [cluster="Unk.Any", label="Entry Unk.Any", span=""];
n7 [cluster="Unk.selector", label="Entry Unk.selector", span=""];
n8 [cluster="CommandLine.Core.ReflectionExtensions.ToDescriptorKind(System.Type)", label="Entry CommandLine.Core.ReflectionExtensions.ToDescriptorKind(System.Type)", span="22-22"];
n9 [cluster="CommandLine.Core.ReflectionExtensions.ToDescriptorKind(System.Type)", label="type == null", span="24-24"];
n11 [cluster="CommandLine.Core.ReflectionExtensions.ToDescriptorKind(System.Type)", label="return type == typeof(bool)\r\n                       ? TypeDescriptorKind.Boolean\r\n                       : type == typeof(string)\r\n                             ? TypeDescriptorKind.Scalar\r\n                             : type.IsArray || typeof(IEnumerable).IsAssignableFrom(type)\r\n                                   ? TypeDescriptorKind.Sequence\r\n                                   : TypeDescriptorKind.Scalar;", span="26-32"];
n10 [cluster="CommandLine.Core.ReflectionExtensions.ToDescriptorKind(System.Type)", label="throw new ArgumentNullException(''type'');", span="24-24"];
n12 [cluster="CommandLine.Core.ReflectionExtensions.ToDescriptorKind(System.Type)", label="Exit CommandLine.Core.ReflectionExtensions.ToDescriptorKind(System.Type)", span="22-22"];
n13 [cluster="System.ArgumentNullException.ArgumentNullException(string)", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
n14 [cluster="System.Type.IsAssignableFrom(System.Type)", label="Entry System.Type.IsAssignableFrom(System.Type)", span="0-0"];
n15 [cluster="CommandLine.Core.ReflectionExtensions.IsScalar(System.Type)", label="Entry CommandLine.Core.ReflectionExtensions.IsScalar(System.Type)", span="35-35"];
n16 [cluster="CommandLine.Core.ReflectionExtensions.IsScalar(System.Type)", label="type == null", span="37-37"];
n18 [cluster="CommandLine.Core.ReflectionExtensions.IsScalar(System.Type)", label="return type == typeof(string) || !type.IsArray && !typeof(IEnumerable).IsAssignableFrom(type);", span="39-39"];
n17 [cluster="CommandLine.Core.ReflectionExtensions.IsScalar(System.Type)", label="throw new ArgumentNullException(''type'');", span="37-37"];
n19 [cluster="CommandLine.Core.ReflectionExtensions.IsScalar(System.Type)", label="Exit CommandLine.Core.ReflectionExtensions.IsScalar(System.Type)", span="35-35"];
n20 [cluster="CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", label="Entry CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="42-42"];
n21 [cluster="CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", label="return specProps.Where(predicate).Aggregate(\r\n                instance,\r\n                (current, specProp) =>\r\n                    {\r\n                        specProp.Property.SetValue(current, selector(specProp));\r\n                        return instance;\r\n                    });", span="48-54"];
n26 [cluster="lambda expression", label="specProp.Property.SetValue(current, selector(specProp))", span="52-52"];
n27 [cluster="lambda expression", label="return instance;", span="53-53"];
n22 [cluster="CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", label="Exit CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="42-42"];
n23 [cluster="Unk.Where", label="Entry Unk.Where", span=""];
n24 [cluster="Unk.Aggregate", label="Entry Unk.Aggregate", span=""];
n25 [cluster="lambda expression", label="Entry lambda expression", span="50-54"];
n29 [cluster="Unk.SetValue", label="Entry Unk.SetValue", span=""];
n28 [cluster="lambda expression", label="Exit lambda expression", span="50-54"];
n30 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", label="Entry CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", span="57-57"];
n31 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", label="Action<Exception> fail = inner => { throw new ApplicationException(''Cannot set value to target instance.'', inner); }", span="59-59"];
n32 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", label="property.SetValue(instance, value, null)", span="63-63"];
n41 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", label="return instance;", span="82-82"];
n46 [cluster="lambda expression", label="throw new ApplicationException(''Cannot set value to target instance.'', inner);", span="59-59"];
n34 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", label="fail(e)", span="67-67"];
n36 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", label="fail(e)", span="71-71"];
n38 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", label="fail(e)", span="75-75"];
n40 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", label="fail(e)", span="79-79"];
n33 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", label=TargetException, span="65-65"];
n35 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", label=TargetParameterCountException, span="69-69"];
n37 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", label=MethodAccessException, span="73-73"];
n39 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", label=TargetInvocationException, span="77-77"];
n43 [cluster="System.Reflection.PropertyInfo.SetValue(object, object, object[])", label="Entry System.Reflection.PropertyInfo.SetValue(object, object, object[])", span="0-0"];
n44 [cluster="System.Action<T>.Invoke(T)", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
n42 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", label="Exit CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", span="57-57"];
n45 [cluster="lambda expression", label="Entry lambda expression", span="59-59"];
n47 [cluster="lambda expression", label="Exit lambda expression", span="59-59"];
n48 [cluster="System.ApplicationException.ApplicationException(string, System.Exception)", label="Entry System.ApplicationException.ApplicationException(string, System.Exception)", span="0-0"];
n49 [cluster="CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", label="Entry CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", span="85-85"];
n50 [cluster="CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", label="type == null", span="87-87"];
n52 [cluster="CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", label="return Array.CreateInstance(type, 0);", span="89-89"];
n51 [cluster="CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", label="throw new ArgumentNullException(''type'');", span="87-87"];
n53 [cluster="CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", label="Exit CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", span="85-85"];
n54 [cluster="System.Array.CreateInstance(System.Type, int)", label="Entry System.Array.CreateInstance(System.Type, int)", span="0-0"];
d76 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs()", color=green, community=0, label="1: invokedVerb.Should().Be(''bad'')", span="122-122"];
d67 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs()", label="var result = parser.ParseArgumentsStrict(new string[] { ''bad'', ''input'' }, options,\r\n                (verb, subOptions) =>\r\n                {\r\n                    invokedVerb = verb;\r\n                    invokedVerbInstance = subOptions;\r\n                },\r\n                () => Console.WriteLine(''fake fail''))", span="102-108"];
d75 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs()", label="lines[7].Trim().Should().Be(''clone     Clone a repository into a new directory.'')", span="120-120"];
d77 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs()", color=green, community=0, label="17: invokedVerbInstance.Should().BeNull()", span="123-123"];
d20 [cluster="Unk.Should", label="Entry Unk.Should", span=""];
d27 [cluster="Unk.Be", label="Entry Unk.Be", span=""];
d78 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs()", label="Exit CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs()", span="92-92"];
d81 [cluster="Unk.BeNull", label="Entry Unk.BeNull", span=""];
d63 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs()", label="var options = new OptionsWithVerbsNoHelp()", span="97-97"];
d66 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs()", label="var parser = new Parser(with => with.HelpWriter = testWriter)", span="101-101"];
d68 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs()", label="result.Should().BeFalse()", span="110-110"];
d80 [cluster="CommandLine.Parser.ParseArgumentsStrict(string[], object, System.Action<string, object>, System.Action)", label="Entry CommandLine.Parser.ParseArgumentsStrict(string[], object, System.Action<string, object>, System.Action)", span="221-221"];
d85 [cluster="lambda expression", label="Entry lambda expression", span="103-107"];
d89 [cluster="lambda expression", label="Entry lambda expression", span="108-108"];
d71 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs()", label="var lines = helpText.Split(new string[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries)", span="114-114"];
d74 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs()", label="lines[6].Trim().Should().Be(''commit    Record changes to the repository.'')", span="119-119"];
d26 [cluster="string.Trim()", label="Entry string.Trim()", span="0-0"];
d6 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits()", label="result.Should().BeFalse()", span="56-56"];
d10 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits()", label="lines.Should().HaveCount(n => n == 8)", span="62-62"];
d11 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits()", label="lines[5].Trim().Should().Be(''-s, --string'')", span="64-64"];
d12 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits()", label="lines[6].Trim().Should().Be(''-i'')", span="65-65"];
d13 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits()", label="lines[7].Trim().Should().Be(''--switch'')", span="66-66"];
d43 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits_when_get_usage_is_defined()", label="result.Should().BeFalse()", span="80-80"];
d47 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits_when_get_usage_is_defined()", label="lines.Should().HaveCount(n => n == 1)", span="86-86"];
d48 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits_when_get_usage_is_defined()", label="lines[0].Trim().Should().Be(''SimpleOptionsForStrict (user defined)'')", span="88-88"];
d72 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs()", label="lines.Should().HaveCount(n => n == 8)", span="116-116"];
d73 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs()", label="lines[5].Trim().Should().Be(''add       Add file contents to the index.'')", span="118-118"];
d103 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs_when_get_usage_is_defined()", label="result.Should().BeFalse()", span="145-145"];
d109 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs_when_get_usage_is_defined()", label="invokedVerb.Should().Be(''bad'')", span="155-155"];
d110 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs_when_get_usage_is_defined()", label="invokedVerbInstance.Should().BeNull()", span="156-156"];
d107 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs_when_get_usage_is_defined()", label="lines.Should().HaveCount(n => n == 1)", span="151-151"];
d108 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs_when_get_usage_is_defined()", label="lines[0].Trim().Should().Be(''verbs help index'')", span="153-153"];
d60 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs()", label="Entry CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs()", span="92-92"];
d62 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs()", label="object invokedVerbInstance = null", span="95-95"];
d64 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs()", label="var testWriter = new StringWriter()", span="98-98"];
d79 [cluster="CommandLine.Tests.Fakes.OptionsWithVerbsNoHelp.OptionsWithVerbsNoHelp()", label="Entry CommandLine.Tests.Fakes.OptionsWithVerbsNoHelp.OptionsWithVerbsNoHelp()", span="108-108"];
d65 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs()", label="ReflectionUtil.AssemblyFromWhichToPullInformation = Assembly.GetExecutingAssembly()", span="100-100"];
d18 [cluster="CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)", label="Entry CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)", span="80-80"];
d83 [cluster="lambda expression", label="with.HelpWriter = testWriter", span="101-101"];
d69 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs()", label="var helpText = testWriter.ToString()", span="112-112"];
d21 [cluster="Unk.BeFalse", label="Entry Unk.BeFalse", span=""];
d102 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs_when_get_usage_is_defined()", label="var result = parser.ParseArgumentsStrict(new string[] { ''bad'', ''input'' }, options,\r\n                (verb, subOptions) =>\r\n                {\r\n                    invokedVerb = verb;\r\n                    invokedVerbInstance = subOptions;\r\n                },\r\n                () => Console.WriteLine(''fake fail''))", span="137-143"];
d88 [cluster="lambda expression", label="Exit lambda expression", span="103-107"];
d86 [cluster="lambda expression", label="invokedVerb = verb", span="105-105"];
d87 [cluster="lambda expression", label="invokedVerbInstance = subOptions", span="106-106"];
d91 [cluster="lambda expression", label="Exit lambda expression", span="108-108"];
d90 [cluster="lambda expression", label="Console.WriteLine(''fake fail'')", span="108-108"];
d70 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs()", label="Console.WriteLine(helpText)", span="113-113"];
d24 [cluster="string.Split(string[], System.StringSplitOptions)", label="Entry string.Split(string[], System.StringSplitOptions)", span="0-0"];
d99 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs_when_get_usage_is_defined()", label="var testWriter = new StringWriter()", span="133-133"];
d5 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits()", label="var result = parser.ParseArgumentsStrict(new string[] {''--bad'', ''--input''}, options,\r\n                () => Console.WriteLine(''fake fail''))", span="53-54"];
d7 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits()", label="var helpText = testWriter.ToString()", span="58-58"];
d9 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits()", label="var lines = helpText.Split(new string[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries)", span="60-60"];
d25 [cluster="Unk.HaveCount", label="Entry Unk.HaveCount", span=""];
d34 [cluster="lambda expression", label="Entry lambda expression", span="62-62"];
d14 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits()", label="Exit CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits()", span="46-46"];
d42 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits_when_get_usage_is_defined()", label="var result = parser.ParseArgumentsStrict(new string[] { ''--bad'', ''--input'' }, options,\r\n                () => Console.WriteLine(''fake fail''))", span="77-78"];
d44 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits_when_get_usage_is_defined()", label="var helpText = testWriter.ToString()", span="82-82"];
d46 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits_when_get_usage_is_defined()", label="var lines = helpText.Split(new string[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries)", span="84-84"];
d57 [cluster="lambda expression", label="Entry lambda expression", span="86-86"];
d49 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits_when_get_usage_is_defined()", label="Exit CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits_when_get_usage_is_defined()", span="70-70"];
d92 [cluster="lambda expression", label="Entry lambda expression", span="116-116"];
d104 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs_when_get_usage_is_defined()", label="var helpText = testWriter.ToString()", span="147-147"];
d111 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs_when_get_usage_is_defined()", label="Exit CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs_when_get_usage_is_defined()", span="127-127"];
d106 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs_when_get_usage_is_defined()", label="var lines = helpText.Split(new string[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries)", span="149-149"];
d123 [cluster="lambda expression", label="Entry lambda expression", span="151-151"];
d61 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs()", label="string invokedVerb = null", span="94-94"];
d16 [cluster="System.IO.StringWriter.StringWriter()", label="Entry System.IO.StringWriter.StringWriter()", span="0-0"];
d17 [cluster="System.Reflection.Assembly.GetExecutingAssembly()", label="Entry System.Reflection.Assembly.GetExecutingAssembly()", span="0-0"];
d4 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits()", label="var parser = new Parser(with => with.HelpWriter = testWriter)", span="52-52"];
d41 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits_when_get_usage_is_defined()", label="var parser = new Parser(with => with.HelpWriter = testWriter)", span="76-76"];
d101 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs_when_get_usage_is_defined()", label="var parser = new Parser(with => with.HelpWriter = testWriter)", span="136-136"];
d128 [label=testWriter, span=""];
d82 [cluster="lambda expression", label="Entry lambda expression", span="101-101"];
d84 [cluster="lambda expression", label="Exit lambda expression", span="101-101"];
d22 [cluster="System.IO.StringWriter.ToString()", label="Entry System.IO.StringWriter.ToString()", span="0-0"];
d98 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs_when_get_usage_is_defined()", label="var options = new OptionsWithVerbs()", span="132-132"];
d116 [cluster="lambda expression", label="Entry lambda expression", span="138-142"];
d120 [cluster="lambda expression", label="Entry lambda expression", span="143-143"];
d23 [cluster="System.Console.WriteLine(string)", label="Entry System.Console.WriteLine(string)", span="0-0"];
d100 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs_when_get_usage_is_defined()", label="ReflectionUtil.AssemblyFromWhichToPullInformation = Assembly.GetExecutingAssembly()", span="135-135"];
d114 [cluster="lambda expression", label="with.HelpWriter = testWriter", span="136-136"];
d1 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits()", label="var options = new SimpleOptions()", span="48-48"];
d19 [cluster="CommandLine.Parser.ParseArgumentsStrict(string[], object, System.Action)", label="Entry CommandLine.Parser.ParseArgumentsStrict(string[], object, System.Action)", span="182-182"];
d31 [cluster="lambda expression", label="Entry lambda expression", span="54-54"];
d2 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits()", label="var testWriter = new StringWriter()", span="49-49"];
d8 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits()", label="Console.WriteLine(helpText)", span="59-59"];
d36 [cluster="lambda expression", label="Exit lambda expression", span="62-62"];
d35 [cluster="lambda expression", label="n == 8", span="62-62"];
d0 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits()", label="Entry CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits()", span="46-46"];
d38 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits_when_get_usage_is_defined()", label="var options = new SimpleOptionsForStrict()", span="72-72"];
d54 [cluster="lambda expression", label="Entry lambda expression", span="78-78"];
d39 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits_when_get_usage_is_defined()", label="var testWriter = new StringWriter()", span="73-73"];
d45 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits_when_get_usage_is_defined()", label="Console.WriteLine(helpText)", span="83-83"];
d59 [cluster="lambda expression", label="Exit lambda expression", span="86-86"];
d58 [cluster="lambda expression", label="n == 1", span="86-86"];
d37 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits_when_get_usage_is_defined()", label="Entry CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits_when_get_usage_is_defined()", span="70-70"];
d94 [cluster="lambda expression", label="Exit lambda expression", span="116-116"];
d93 [cluster="lambda expression", label="n == 8", span="116-116"];
d105 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs_when_get_usage_is_defined()", label="Console.WriteLine(helpText)", span="148-148"];
d95 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs_when_get_usage_is_defined()", label="Entry CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs_when_get_usage_is_defined()", span="127-127"];
d125 [cluster="lambda expression", label="Exit lambda expression", span="151-151"];
d124 [cluster="lambda expression", label="n == 1", span="151-151"];
d3 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits()", label="ReflectionUtil.AssemblyFromWhichToPullInformation = Assembly.GetExecutingAssembly()", span="51-51"];
d40 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits_when_get_usage_is_defined()", label="ReflectionUtil.AssemblyFromWhichToPullInformation = Assembly.GetExecutingAssembly()", span="75-75"];
d29 [cluster="lambda expression", label="with.HelpWriter = testWriter", span="52-52"];
d52 [cluster="lambda expression", label="with.HelpWriter = testWriter", span="76-76"];
d97 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs_when_get_usage_is_defined()", label="object invokedVerbInstance = null", span="130-130"];
d112 [cluster="CommandLine.Tests.Fakes.OptionsWithVerbs.OptionsWithVerbs()", label="Entry CommandLine.Tests.Fakes.OptionsWithVerbs.OptionsWithVerbs()", span="79-79"];
d119 [cluster="lambda expression", label="Exit lambda expression", span="138-142"];
d117 [cluster="lambda expression", label="invokedVerb = verb", span="140-140"];
d118 [cluster="lambda expression", label="invokedVerbInstance = subOptions", span="141-141"];
d122 [cluster="lambda expression", label="Exit lambda expression", span="143-143"];
d121 [cluster="lambda expression", label="Console.WriteLine(''fake fail'')", span="143-143"];
d32 [cluster="lambda expression", label="Console.WriteLine(''fake fail'')", span="54-54"];
d55 [cluster="lambda expression", label="Console.WriteLine(''fake fail'')", span="78-78"];
d129 [label=testWriter, span=""];
d113 [cluster="lambda expression", label="Entry lambda expression", span="136-136"];
d115 [cluster="lambda expression", label="Exit lambda expression", span="136-136"];
d15 [cluster="CommandLine.Tests.Fakes.SimpleOptions.SimpleOptions()", label="Entry CommandLine.Tests.Fakes.SimpleOptions.SimpleOptions()", span="33-33"];
d33 [cluster="lambda expression", label="Exit lambda expression", span="54-54"];
d50 [cluster="CommandLine.Tests.Fakes.SimpleOptionsForStrict.SimpleOptionsForStrict()", label="Entry CommandLine.Tests.Fakes.SimpleOptionsForStrict.SimpleOptionsForStrict()", span="31-31"];
d56 [cluster="lambda expression", label="Exit lambda expression", span="78-78"];
d96 [cluster="CommandLine.Tests.Unit.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs_when_get_usage_is_defined()", label="string invokedVerb = null", span="129-129"];
d126 [label=testWriter, span=""];
d28 [cluster="lambda expression", label="Entry lambda expression", span="52-52"];
d30 [cluster="lambda expression", label="Exit lambda expression", span="52-52"];
d127 [label=testWriter, span=""];
d51 [cluster="lambda expression", label="Entry lambda expression", span="76-76"];
d53 [cluster="lambda expression", label="Exit lambda expression", span="76-76"];
n55 -> n26  [color=darkseagreen4, key=1, label="System.Func<CommandLine.Core.SpecificationProperty, object>", style=dashed];
n56 -> n27  [color=darkseagreen4, key=1, label=T, style=dashed];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=2, style=dotted];
n1 -> n4  [key=2, style=dotted];
n1 -> n5  [key=2, style=dotted];
n1 -> n6  [key=2, style=dotted];
n1 -> n7  [key=2, style=dotted];
n1 -> n1  [color=darkseagreen4, key=1, label=pi, style=dashed];
n2 -> n0  [color=blue, key=0, style=bold];
n8 -> n9  [key=0, style=solid];
n8 -> n11  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
n9 -> n10  [key=0, style=solid];
n9 -> n11  [key=0, style=solid];
n11 -> n12  [key=0, style=solid];
n11 -> n14  [key=2, style=dotted];
n10 -> n12  [key=0, style=solid];
n10 -> n13  [key=2, style=dotted];
n12 -> n8  [color=blue, key=0, style=bold];
n15 -> n16  [key=0, style=solid];
n15 -> n18  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
n16 -> n17  [key=0, style=solid];
n16 -> n18  [key=0, style=solid];
n18 -> n19  [key=0, style=solid];
n18 -> n14  [key=2, style=dotted];
n17 -> n19  [key=0, style=solid];
n17 -> n13  [key=2, style=dotted];
n19 -> n15  [color=blue, key=0, style=bold];
n20 -> n21  [key=0, style=solid];
n20 -> n26  [color=darkseagreen4, key=1, label="System.Func<CommandLine.Core.SpecificationProperty, object>", style=dashed];
n20 -> n27  [color=darkseagreen4, key=1, label=T, style=dashed];
n21 -> n22  [key=0, style=solid];
n21 -> n23  [key=2, style=dotted];
n21 -> n24  [key=2, style=dotted];
n21 -> n25  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n26 -> n27  [key=0, style=solid];
n26 -> n7  [key=2, style=dotted];
n26 -> n29  [key=2, style=dotted];
n27 -> n28  [key=0, style=solid];
n22 -> n20  [color=blue, key=0, style=bold];
n25 -> n26  [key=0, style=solid];
n28 -> n25  [color=blue, key=0, style=bold];
n30 -> n31  [key=0, style=solid];
n30 -> n32  [color=darkseagreen4, key=1, label="System.Reflection.PropertyInfo", style=dashed];
n30 -> n41  [color=darkseagreen4, key=1, label=T, style=dashed];
n31 -> n32  [key=0, style=solid];
n31 -> n46  [color=darkseagreen4, key=1, label="System.Exception", style=dashed];
n31 -> n34  [color=darkseagreen4, key=1, label=fail, style=dashed];
n31 -> n36  [color=darkseagreen4, key=1, label=fail, style=dashed];
n31 -> n38  [color=darkseagreen4, key=1, label=fail, style=dashed];
n31 -> n40  [color=darkseagreen4, key=1, label=fail, style=dashed];
n32 -> n33  [key=0, style=solid];
n32 -> n35  [key=0, style=solid];
n32 -> n37  [key=0, style=solid];
n32 -> n39  [key=0, style=solid];
n32 -> n41  [key=0, style=solid];
n32 -> n43  [key=2, style=dotted];
n41 -> n42  [key=0, style=solid];
n46 -> n47  [key=0, style=solid];
n46 -> n48  [key=2, style=dotted];
n34 -> n41  [key=0, style=solid];
n34 -> n44  [key=2, style=dotted];
n36 -> n41  [key=0, style=solid];
n36 -> n44  [key=2, style=dotted];
n38 -> n41  [key=0, style=solid];
n38 -> n44  [key=2, style=dotted];
n40 -> n41  [key=0, style=solid];
n40 -> n44  [key=2, style=dotted];
n33 -> n34  [key=0, style=solid];
n35 -> n36  [key=0, style=solid];
n37 -> n38  [key=0, style=solid];
n39 -> n40  [key=0, style=solid];
n42 -> n30  [color=blue, key=0, style=bold];
n45 -> n46  [key=0, style=solid];
n47 -> n45  [color=blue, key=0, style=bold];
n49 -> n50  [key=0, style=solid];
n49 -> n52  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
n50 -> n51  [key=0, style=solid];
n50 -> n52  [key=0, style=solid];
n52 -> n53  [key=0, style=solid];
n52 -> n54  [key=2, style=dotted];
n51 -> n53  [key=0, style=solid];
n51 -> n13  [key=2, style=dotted];
n53 -> n49  [color=blue, key=0, style=bold];
d76 -> d77  [color=green, key=0, style=solid];
d76 -> d20  [color=green, key=2, style=dotted];
d76 -> d27  [color=green, key=2, style=dotted];
d67 -> d76  [color=green, key=1, label=invokedVerb, style=dashed];
d67 -> d77  [color=green, key=1, label=invokedVerbInstance, style=dashed];
d67 -> d68  [key=0, style=solid];
d67 -> d80  [key=2, style=dotted];
d67 -> d85  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d67 -> d89  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d75 -> d76  [color=green, key=0, style=solid];
d75 -> d26  [key=2, style=dotted];
d75 -> d20  [key=2, style=dotted];
d75 -> d27  [key=2, style=dotted];
d77 -> d78  [color=green, key=0, style=solid];
d77 -> d20  [color=green, key=2, style=dotted];
d77 -> d81  [color=green, key=2, style=dotted];
d78 -> d60  [color=blue, key=0, style=bold];
d63 -> d67  [color=darkseagreen4, key=1, label=options, style=dashed];
d63 -> d64  [key=0, style=solid];
d63 -> d79  [key=2, style=dotted];
d66 -> d67  [key=0, style=solid];
d66 -> d18  [key=2, style=dotted];
d66 -> d83  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
d68 -> d20  [key=2, style=dotted];
d68 -> d69  [key=0, style=solid];
d68 -> d21  [key=2, style=dotted];
d85 -> d86  [key=0, style=solid];
d85 -> d87  [color=darkseagreen4, key=1, label=object, style=dashed];
d89 -> d90  [key=0, style=solid];
d71 -> d75  [color=darkseagreen4, key=1, label=lines, style=dashed];
d71 -> d72  [key=0, style=solid];
d71 -> d24  [key=2, style=dotted];
d71 -> d73  [color=darkseagreen4, key=1, label=lines, style=dashed];
d71 -> d74  [color=darkseagreen4, key=1, label=lines, style=dashed];
d74 -> d75  [key=0, style=solid];
d74 -> d20  [key=2, style=dotted];
d74 -> d27  [key=2, style=dotted];
d74 -> d26  [key=2, style=dotted];
d74 -> d99  [color=darkorchid, key=3, label="method methodReturn System.Collections.Generic.IEnumerable<CommandLine.Error> ", style=bold];
d6 -> d20  [key=2, style=dotted];
d6 -> d7  [key=0, style=solid];
d6 -> d21  [key=2, style=dotted];
d10 -> d20  [key=2, style=dotted];
d10 -> d11  [key=0, style=solid];
d10 -> d25  [key=2, style=dotted];
d10 -> d34  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d11 -> d20  [key=2, style=dotted];
d11 -> d27  [key=2, style=dotted];
d11 -> d26  [key=2, style=dotted];
d11 -> d12  [key=0, style=solid];
d12 -> d20  [key=2, style=dotted];
d12 -> d27  [key=2, style=dotted];
d12 -> d26  [key=2, style=dotted];
d12 -> d13  [key=0, style=solid];
d13 -> d20  [key=2, style=dotted];
d13 -> d27  [key=2, style=dotted];
d13 -> d26  [key=2, style=dotted];
d13 -> d14  [key=0, style=solid];
d43 -> d20  [key=2, style=dotted];
d43 -> d44  [key=0, style=solid];
d43 -> d21  [key=2, style=dotted];
d47 -> d20  [key=2, style=dotted];
d47 -> d48  [key=0, style=solid];
d47 -> d25  [key=2, style=dotted];
d47 -> d57  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d48 -> d20  [key=2, style=dotted];
d48 -> d27  [key=2, style=dotted];
d48 -> d26  [key=2, style=dotted];
d48 -> d49  [key=0, style=solid];
d72 -> d20  [key=2, style=dotted];
d72 -> d73  [key=0, style=solid];
d72 -> d25  [key=2, style=dotted];
d72 -> d92  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d73 -> d20  [key=2, style=dotted];
d73 -> d27  [key=2, style=dotted];
d73 -> d74  [key=0, style=solid];
d73 -> d26  [key=2, style=dotted];
d103 -> d20  [key=2, style=dotted];
d103 -> d104  [key=0, style=solid];
d103 -> d21  [key=2, style=dotted];
d109 -> d20  [key=2, style=dotted];
d109 -> d27  [key=2, style=dotted];
d109 -> d110  [key=0, style=solid];
d110 -> d20  [key=2, style=dotted];
d110 -> d81  [key=2, style=dotted];
d110 -> d111  [key=0, style=solid];
d107 -> d20  [key=2, style=dotted];
d107 -> d108  [key=0, style=solid];
d107 -> d25  [key=2, style=dotted];
d107 -> d123  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d108 -> d20  [key=2, style=dotted];
d108 -> d27  [key=2, style=dotted];
d108 -> d26  [key=2, style=dotted];
d108 -> d109  [key=0, style=solid];
d60 -> d61  [key=0, style=solid];
d62 -> d63  [key=0, style=solid];
d64 -> d66  [color=darkseagreen4, key=1, label=testWriter, style=dashed];
d64 -> d65  [key=0, style=solid];
d64 -> d16  [key=2, style=dotted];
d64 -> d83  [color=darkseagreen4, key=1, label=testWriter, style=dashed];
d64 -> d69  [color=darkseagreen4, key=1, label=testWriter, style=dashed];
d65 -> d66  [key=0, style=solid];
d65 -> d17  [key=2, style=dotted];
d83 -> d84  [key=0, style=solid];
d69 -> d71  [color=darkseagreen4, key=1, label=helpText, style=dashed];
d69 -> d70  [key=0, style=solid];
d69 -> d22  [key=2, style=dotted];
d102 -> d80  [key=2, style=dotted];
d102 -> d103  [key=0, style=solid];
d102 -> d109  [color=darkseagreen4, key=1, label=invokedVerb, style=dashed];
d102 -> d110  [color=darkseagreen4, key=1, label=invokedVerbInstance, style=dashed];
d102 -> d116  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d102 -> d120  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d88 -> d85  [color=blue, key=0, style=bold];
d86 -> d88  [color=darkseagreen4, key=1, label=invokedVerb, style=dashed];
d86 -> d87  [key=0, style=solid];
d87 -> d88  [key=0, style=solid];
d91 -> d89  [color=blue, key=0, style=bold];
d90 -> d91  [key=0, style=solid];
d90 -> d23  [key=2, style=dotted];
d70 -> d71  [key=0, style=solid];
d70 -> d23  [key=2, style=dotted];
d99 -> d100  [key=0, style=solid];
d99 -> d16  [key=2, style=dotted];
d99 -> d101  [color=darkseagreen4, key=1, label=testWriter, style=dashed];
d99 -> d114  [color=darkseagreen4, key=1, label=testWriter, style=dashed];
d99 -> d104  [color=darkseagreen4, key=1, label=testWriter, style=dashed];
d5 -> d6  [key=0, style=solid];
d5 -> d19  [key=2, style=dotted];
d5 -> d31  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d7 -> d8  [key=0, style=solid];
d7 -> d22  [key=2, style=dotted];
d7 -> d9  [color=darkseagreen4, key=1, label=helpText, style=dashed];
d9 -> d10  [key=0, style=solid];
d9 -> d11  [color=darkseagreen4, key=1, label=lines, style=dashed];
d9 -> d12  [color=darkseagreen4, key=1, label=lines, style=dashed];
d9 -> d13  [color=darkseagreen4, key=1, label=lines, style=dashed];
d9 -> d24  [key=2, style=dotted];
d34 -> d35  [key=0, style=solid];
d14 -> d0  [color=blue, key=0, style=bold];
d42 -> d43  [key=0, style=solid];
d42 -> d19  [key=2, style=dotted];
d42 -> d54  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d44 -> d45  [key=0, style=solid];
d44 -> d22  [key=2, style=dotted];
d44 -> d46  [color=darkseagreen4, key=1, label=helpText, style=dashed];
d46 -> d47  [key=0, style=solid];
d46 -> d48  [color=darkseagreen4, key=1, label=lines, style=dashed];
d46 -> d24  [key=2, style=dotted];
d57 -> d58  [key=0, style=solid];
d49 -> d37  [color=blue, key=0, style=bold];
d92 -> d93  [key=0, style=solid];
d104 -> d105  [key=0, style=solid];
d104 -> d22  [key=2, style=dotted];
d104 -> d106  [color=darkseagreen4, key=1, label=helpText, style=dashed];
d111 -> d95  [color=blue, key=0, style=bold];
d106 -> d107  [key=0, style=solid];
d106 -> d108  [color=darkseagreen4, key=1, label=lines, style=dashed];
d106 -> d24  [key=2, style=dotted];
d123 -> d124  [key=0, style=solid];
d61 -> d62  [key=0, style=solid];
d4 -> d18  [key=2, style=dotted];
d4 -> d5  [key=0, style=solid];
d4 -> d29  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
d41 -> d18  [key=2, style=dotted];
d41 -> d42  [key=0, style=solid];
d41 -> d52  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
d101 -> d18  [key=2, style=dotted];
d101 -> d102  [key=0, style=solid];
d101 -> d114  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
d128 -> d83  [color=darkseagreen4, key=1, label=testWriter, style=dashed];
d82 -> d83  [key=0, style=solid];
d84 -> d82  [color=blue, key=0, style=bold];
d98 -> d102  [color=darkseagreen4, key=1, label=options, style=dashed];
d98 -> d99  [key=0, style=solid];
d98 -> d112  [key=2, style=dotted];
d116 -> d117  [key=0, style=solid];
d116 -> d118  [color=darkseagreen4, key=1, label=object, style=dashed];
d120 -> d121  [key=0, style=solid];
d100 -> d17  [key=2, style=dotted];
d100 -> d101  [key=0, style=solid];
d114 -> d115  [key=0, style=solid];
d1 -> d5  [color=darkseagreen4, key=1, label=options, style=dashed];
d1 -> d2  [key=0, style=solid];
d1 -> d15  [key=2, style=dotted];
d31 -> d32  [key=0, style=solid];
d2 -> d7  [color=darkseagreen4, key=1, label=testWriter, style=dashed];
d2 -> d16  [key=2, style=dotted];
d2 -> d4  [color=darkseagreen4, key=1, label=testWriter, style=dashed];
d2 -> d3  [key=0, style=solid];
d2 -> d29  [color=darkseagreen4, key=1, label=testWriter, style=dashed];
d8 -> d9  [key=0, style=solid];
d8 -> d23  [key=2, style=dotted];
d36 -> d34  [color=blue, key=0, style=bold];
d35 -> d36  [key=0, style=solid];
d0 -> d1  [key=0, style=solid];
d38 -> d42  [color=darkseagreen4, key=1, label=options, style=dashed];
d38 -> d39  [key=0, style=solid];
d38 -> d50  [key=2, style=dotted];
d54 -> d55  [key=0, style=solid];
d39 -> d44  [color=darkseagreen4, key=1, label=testWriter, style=dashed];
d39 -> d16  [key=2, style=dotted];
d39 -> d41  [color=darkseagreen4, key=1, label=testWriter, style=dashed];
d39 -> d40  [key=0, style=solid];
d39 -> d52  [color=darkseagreen4, key=1, label=testWriter, style=dashed];
d45 -> d46  [key=0, style=solid];
d45 -> d23  [key=2, style=dotted];
d59 -> d57  [color=blue, key=0, style=bold];
d58 -> d59  [key=0, style=solid];
d37 -> d38  [key=0, style=solid];
d94 -> d92  [color=blue, key=0, style=bold];
d93 -> d94  [key=0, style=solid];
d105 -> d106  [key=0, style=solid];
d105 -> d23  [key=2, style=dotted];
d95 -> d96  [key=0, style=solid];
d125 -> d123  [color=blue, key=0, style=bold];
d124 -> d125  [key=0, style=solid];
d3 -> d17  [key=2, style=dotted];
d3 -> d4  [key=0, style=solid];
d40 -> d17  [key=2, style=dotted];
d40 -> d41  [key=0, style=solid];
d29 -> d30  [key=0, style=solid];
d52 -> d53  [key=0, style=solid];
d97 -> d98  [key=0, style=solid];
d119 -> d116  [color=blue, key=0, style=bold];
d117 -> d119  [color=darkseagreen4, key=1, label=invokedVerb, style=dashed];
d117 -> d118  [key=0, style=solid];
d118 -> d119  [key=0, style=solid];
d122 -> d120  [color=blue, key=0, style=bold];
d121 -> d23  [key=2, style=dotted];
d121 -> d122  [key=0, style=solid];
d32 -> d23  [key=2, style=dotted];
d32 -> d33  [key=0, style=solid];
d55 -> d23  [key=2, style=dotted];
d55 -> d56  [key=0, style=solid];
d129 -> d114  [color=darkseagreen4, key=1, label=testWriter, style=dashed];
d113 -> d114  [key=0, style=solid];
d115 -> d113  [color=blue, key=0, style=bold];
d33 -> d31  [color=blue, key=0, style=bold];
d56 -> d54  [color=blue, key=0, style=bold];
d96 -> d97  [key=0, style=solid];
d126 -> d29  [color=darkseagreen4, key=1, label=testWriter, style=dashed];
d28 -> d29  [key=0, style=solid];
d30 -> d28  [color=blue, key=0, style=bold];
d127 -> d52  [color=darkseagreen4, key=1, label=testWriter, style=dashed];
d51 -> d52  [key=0, style=solid];
d53 -> d51  [color=blue, key=0, style=bold];
}
