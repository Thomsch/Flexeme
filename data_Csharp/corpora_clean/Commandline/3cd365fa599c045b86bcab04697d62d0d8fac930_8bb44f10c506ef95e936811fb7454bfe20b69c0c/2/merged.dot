digraph  {
n77 [label=setsWithTrue, span=""];
n0 [label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="18-18", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()"];
n1 [label="return specProps =>\r\n                {\r\n                    var options = specProps.Where(sp => sp.Specification.IsOption() && sp.Value.IsJust());\r\n                    var groups = options.GroupBy(g => ((OptionSpecification)g.Specification).SetName);\r\n                    if (groups.Count() > 1)\r\n                    {\r\n                        return options.Select(s => Maybe.Just<Error>(new MutuallyExclusiveSetError(NameInfo.FromOptionSpecification((OptionSpecification)s.Specification))));\r\n                    }\r\n                    return Enumerable.Empty<Nothing<Error>>();\r\n                };", span="20-29", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", color=red, community=0];
n2 [label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="18-18", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()"];
n4 [label="var options = specProps.Where(sp => sp.Specification.IsOption() && sp.Value.IsJust())", span="22-22", cluster="lambda expression", color=red, community=0];
n3 [label="Entry lambda expression", span="20-29", cluster="lambda expression"];
n5 [label="var groups = options.GroupBy(g => ((OptionSpecification)g.Specification).SetName)", span="23-23", cluster="lambda expression", color=red, community=0];
n10 [label="Entry Unk.Where", span="", cluster="Unk.Where"];
n15 [label="Entry lambda expression", span="22-22", cluster="lambda expression"];
n7 [label="return options.Select(s => Maybe.Just<Error>(new MutuallyExclusiveSetError(NameInfo.FromOptionSpecification((OptionSpecification)s.Specification))));", span="26-26", cluster="lambda expression", color=red, community=0];
n6 [label="groups.Count() > 1", span="24-24", cluster="lambda expression", color=red, community=0];
n11 [label="Entry Unk.GroupBy", span="", cluster="Unk.GroupBy"];
n20 [label="Entry lambda expression", span="23-23", cluster="lambda expression"];
n8 [label="return Enumerable.Empty<Nothing<Error>>();", span="28-28", cluster="lambda expression", color=red, community=0];
n12 [label="Entry Unk.Count", span="", cluster="Unk.Count"];
n9 [label="Exit lambda expression", span="20-29", cluster="lambda expression"];
n13 [label="Entry Unk.Select", span="", cluster="Unk.Select"];
n23 [label="Entry lambda expression", span="26-26", cluster="lambda expression"];
n14 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()"];
n16 [label="sp.Specification.IsOption() && sp.Value.IsJust()", span="22-22", cluster="lambda expression", color=red, community=0];
n17 [label="Exit lambda expression", span="22-22", cluster="lambda expression"];
n18 [label="Entry CommandLine.Core.Specification.IsOption()", span="11-11", cluster="CommandLine.Core.Specification.IsOption()"];
n19 [label="Entry CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", span="152-152", cluster="CommandLine.Infrastructure.Maybe<T>.IsJust<T>()"];
n21 [label="((OptionSpecification)g.Specification).SetName", span="23-23", cluster="lambda expression", color=red, community=0];
n22 [label="Exit lambda expression", span="23-23", cluster="lambda expression"];
n24 [label="Maybe.Just<Error>(new MutuallyExclusiveSetError(NameInfo.FromOptionSpecification((OptionSpecification)s.Specification)))", span="26-26", cluster="lambda expression", color=red, community=0];
n25 [label="Exit lambda expression", span="26-26", cluster="lambda expression"];
n26 [label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294", cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)"];
n27 [label="Entry CommandLine.NameInfo.FromOptionSpecification(CommandLine.Core.OptionSpecification)", span="60-60", cluster="CommandLine.NameInfo.FromOptionSpecification(CommandLine.Core.OptionSpecification)"];
n28 [label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="71-71", cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)"];
n29 [label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="32-32", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()"];
n30 [label="return specProps =>\r\n            {\r\n                List<string> setsWithTrue =\r\n                    specProps.Where(sp => sp.Specification.IsOption() && sp.Value.IsJust() && sp.Specification.Required)\r\n                        .Select(x => ((OptionSpecification)x.Specification).SetName).ToList();\r\n                \r\n                var requiredButEmpty =\r\n                    specProps.Where(sp => sp.Value.IsNothing() && \r\n                                          sp.Specification.Required &&\r\n                                          !setsWithTrue.Contains(((OptionSpecification)sp.Specification).SetName)).ToList();\r\n                    if (requiredButEmpty.Any()) {\r\n                        return requiredButEmpty.Select(s => Maybe.Just<Error>(new MissingRequiredOptionError(\r\n                            NameInfo.FromSpecification(s.Specification))));\r\n                    }\r\n                    return Enumerable.Empty<Nothing<Error>>();\r\n                };", span="34-49", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", color=red, community=0];
n31 [label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="32-32", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()"];
n33 [label="List<string> setsWithTrue =\r\n                    specProps.Where(sp => sp.Specification.IsOption() && sp.Value.IsJust() && sp.Specification.Required)\r\n                        .Select(x => ((OptionSpecification)x.Specification).SetName).ToList()", span="36-38", cluster="lambda expression"];
n34 [label="var requiredButEmpty =\r\n                    specProps.Where(sp => sp.Value.IsNothing() && \r\n                                          sp.Specification.Required &&\r\n                                          !setsWithTrue.Contains(((OptionSpecification)sp.Specification).SetName)).ToList()", span="40-43", cluster="lambda expression", color=red, community=0];
n32 [label="Entry lambda expression", span="34-49", cluster="lambda expression"];
n39 [label="Entry Unk.ToList", span="", cluster="Unk.ToList"];
n41 [label="Entry lambda expression", span="37-37", cluster="lambda expression"];
n44 [label="Entry lambda expression", span="38-38", cluster="lambda expression"];
n48 [label="sp.Value.IsNothing() && \r\n                                          sp.Specification.Required &&\r\n                                          !setsWithTrue.Contains(((OptionSpecification)sp.Specification).SetName)", span="41-43", cluster="lambda expression", color=red, community=0];
n35 [label="requiredButEmpty.Any()", span="44-44", cluster="lambda expression"];
n47 [label="Entry lambda expression", span="41-43", cluster="lambda expression"];
n36 [label="return requiredButEmpty.Select(s => Maybe.Just<Error>(new MissingRequiredOptionError(\r\n                            NameInfo.FromSpecification(s.Specification))));", span="45-46", cluster="lambda expression"];
n37 [label="return Enumerable.Empty<Nothing<Error>>();", span="48-48", cluster="lambda expression"];
n40 [label="Entry Unk.Any", span="", cluster="Unk.Any"];
n38 [label="Exit lambda expression", span="34-49", cluster="lambda expression"];
n52 [label="Entry lambda expression", span="45-46", cluster="lambda expression"];
n42 [label="sp.Specification.IsOption() && sp.Value.IsJust() && sp.Specification.Required", span="37-37", cluster="lambda expression"];
n43 [label="Exit lambda expression", span="37-37", cluster="lambda expression"];
n45 [label="((OptionSpecification)x.Specification).SetName", span="38-38", cluster="lambda expression"];
n46 [label="Exit lambda expression", span="38-38", cluster="lambda expression"];
n49 [label="Exit lambda expression", span="41-43", cluster="lambda expression"];
n50 [label="Entry CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", span="147-147", cluster="CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()"];
n51 [label="Entry System.Collections.Generic.List<T>.Contains(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Contains(T)"];
n53 [label="Maybe.Just<Error>(new MissingRequiredOptionError(\r\n                            NameInfo.FromSpecification(s.Specification)))", span="45-46", cluster="lambda expression"];
n54 [label="Exit lambda expression", span="45-46", cluster="lambda expression"];
n55 [label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283", cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)"];
n56 [label="Entry Unk.FromSpecification", span="", cluster="Unk.FromSpecification"];
n57 [label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="52-52", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()"];
n58 [label="return specProps =>\r\n                {\r\n                    var options = specProps.Where(\r\n                        sp => sp.Specification.ConversionType.ToDescriptor() == DescriptorType.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (!sp.Specification.IsMinNotSpecified() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min)\r\n                            || (!sp.Specification.IsMaxNotSpecified() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max)\r\n                        )\r\n                    );\r\n                    if (options.Any())\r\n                    {\r\n                        return options.Select(s => Maybe.Just<Error>(new SequenceOutOfRangeError(\r\n                            NameInfo.FromSpecification(s.Specification))));\r\n                    }\r\n                    return Enumerable.Empty<Nothing<Error>>();\r\n                };", span="54-70", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()"];
n59 [label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="52-52", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()"];
n61 [label="var options = specProps.Where(\r\n                        sp => sp.Specification.ConversionType.ToDescriptor() == DescriptorType.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (!sp.Specification.IsMinNotSpecified() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min)\r\n                            || (!sp.Specification.IsMaxNotSpecified() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max)\r\n                        )\r\n                    )", span="56-63", cluster="lambda expression"];
n60 [label="Entry lambda expression", span="54-70", cluster="lambda expression"];
n62 [label="options.Any()", span="64-64", cluster="lambda expression"];
n66 [label="Entry lambda expression", span="57-62", cluster="lambda expression"];
n63 [label="return options.Select(s => Maybe.Just<Error>(new SequenceOutOfRangeError(\r\n                            NameInfo.FromSpecification(s.Specification))));", span="66-67", cluster="lambda expression"];
n64 [label="return Enumerable.Empty<Nothing<Error>>();", span="69-69", cluster="lambda expression"];
n65 [label="Exit lambda expression", span="54-70", cluster="lambda expression"];
n73 [label="Entry lambda expression", span="66-67", cluster="lambda expression"];
n67 [label="sp.Specification.ConversionType.ToDescriptor() == DescriptorType.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (!sp.Specification.IsMinNotSpecified() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min)\r\n                            || (!sp.Specification.IsMaxNotSpecified() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max)\r\n                        )", span="57-62", cluster="lambda expression"];
n68 [label="Exit lambda expression", span="57-62", cluster="lambda expression"];
n69 [label="Entry System.Type.ToDescriptor()", span="22-22", cluster="System.Type.ToDescriptor()"];
n70 [label="Entry CommandLine.Core.Specification.IsMinNotSpecified()", span="76-76", cluster="CommandLine.Core.Specification.IsMinNotSpecified()"];
n71 [label="Entry CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", span="137-137", cluster="CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)"];
n72 [label="Entry CommandLine.Core.Specification.IsMaxNotSpecified()", span="81-81", cluster="CommandLine.Core.Specification.IsMaxNotSpecified()"];
n74 [label="Maybe.Just<Error>(new SequenceOutOfRangeError(\r\n                            NameInfo.FromSpecification(s.Specification)))", span="66-67", cluster="lambda expression"];
n75 [label="Exit lambda expression", span="66-67", cluster="lambda expression"];
n76 [label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316", cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)"];
d1 [label="var sequencesAndErrors = propertyTuples\r\n                .Select(\r\n                    pt =>\r\n                    {\r\n                        var matched = options.FirstOrDefault(s =>\r\n                            s.Key.MatchName(((OptionSpecification)pt.Specification).ShortName, ((OptionSpecification)pt.Specification).LongName, comparer)).ToMaybe();\r\n                        return matched.IsJust()\r\n                            ? (\r\n                                from sequence in matched\r\n                                from converted in\r\n                                    converter(\r\n                                        sequence.Value,\r\n                                        pt.Property.PropertyType,\r\n                                        pt.Specification.TargetType != TargetType.Sequence)\r\n                                select Tuple.Create(\r\n                                    pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>())\r\n                               )\r\n                                .GetValueOrDefault(\r\n                                    Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                                        pt,\r\n                                        Maybe.Just<Error>(\r\n                                            new BadFormatConversionError(\r\n                                                ((OptionSpecification)pt.Specification).FromOptionSpecification()))))\r\n                            : Tuple.Create(pt, Maybe.Nothing<Error>());\r\n                    }\r\n                )", span="20-45", cluster="CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>, System.StringComparer)", color=green, community=0];
d0 [label="Entry CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>, System.StringComparer)", span="14-14", cluster="CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>, System.StringComparer)"];
d2 [label="return Result.Succeed(\r\n                sequencesAndErrors.Select(se => se.Item1),\r\n                sequencesAndErrors.Select(se => se.Item2).OfType<Just<Error>>().Select(se => se.Value));", span="46-48", cluster="CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>, System.StringComparer)"];
d4 [label="Entry Unk.Select", span="", cluster="Unk.Select"];
d8 [label="var matched = options.FirstOrDefault(s =>\r\n                            s.Key.MatchName(((OptionSpecification)pt.Specification).ShortName, ((OptionSpecification)pt.Specification).LongName, comparer)).ToMaybe()", span="24-25", cluster="lambda expression", color=green, community=1];
d36 [label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>", span=""];
d37 [label="System.StringComparer", span=""];
d9 [label="return matched.IsJust()\r\n                            ? (\r\n                                from sequence in matched\r\n                                from converted in\r\n                                    converter(\r\n                                        sequence.Value,\r\n                                        pt.Property.PropertyType,\r\n                                        pt.Specification.TargetType != TargetType.Sequence)\r\n                                select Tuple.Create(\r\n                                    pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>())\r\n                               )\r\n                                .GetValueOrDefault(\r\n                                    Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                                        pt,\r\n                                        Maybe.Just<Error>(\r\n                                            new BadFormatConversionError(\r\n                                                ((OptionSpecification)pt.Specification).FromOptionSpecification()))))\r\n                            : Tuple.Create(pt, Maybe.Nothing<Error>());", span="26-43", cluster="lambda expression", color=green, community=1];
d11 [label="Entry Unk.FirstOrDefault", span="", cluster="Unk.FirstOrDefault"];
d12 [label="Entry Unk.ToMaybe", span="", cluster="Unk.ToMaybe"];
d24 [label="s.Key.MatchName(((OptionSpecification)pt.Specification).ShortName, ((OptionSpecification)pt.Specification).LongName, comparer)", span="25-25", cluster="lambda expression", color=green, community=0];
d39 [label="CommandLine.Core.SpecificationProperty", span=""];
d26 [label="Entry string.MatchName(string, string, System.StringComparer)", span="8-8", cluster="string.MatchName(string, string, System.StringComparer)"];
d38 [label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>", span=""];
d13 [label="Entry Unk.IsJust", span="", cluster="Unk.IsJust"];
d14 [label="Entry Unk.converter", span="", cluster="Unk.converter"];
d15 [label="Entry Unk.Just", span="", cluster="Unk.Just"];
d16 [label="Entry Unk.WithValue", span="", cluster="Unk.WithValue"];
d17 [label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116", cluster="CSharpx.Maybe.Nothing<T>()"];
d18 [label="Entry System.Tuple.Create<T1, T2>(T1, T2)", span="0-0", cluster="System.Tuple.Create<T1, T2>(T1, T2)"];
d19 [label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="349-349", cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)"];
d20 [label="Entry CommandLine.Core.OptionSpecification.FromOptionSpecification()", span="15-15", cluster="CommandLine.Core.OptionSpecification.FromOptionSpecification()"];
d21 [label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124", cluster="CSharpx.Maybe.Just<T>(T)"];
d22 [label="Entry Unk.GetValueOrDefault", span="", cluster="Unk.GetValueOrDefault"];
d3 [label="Exit CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>, System.StringComparer)", span="14-14", cluster="CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>, System.StringComparer)"];
d5 [label="Entry Unk.>", span="", cluster="Unk.>"];
d6 [label="Entry Unk.Succeed", span="", cluster="Unk.Succeed"];
m0_12 [label="Entry Unk.Create", span="", cluster="Unk.Create", file="OptionMapperTests.cs"];
m0_6 [label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", file="OptionMapperTests.cs"];
m0_11 [label="Entry Unk.Single", span="", cluster="Unk.Single", file="OptionMapperTests.cs"];
m0_15 [label="Entry Unk.NotNull", span="", cluster="Unk.NotNull", file="OptionMapperTests.cs"];
m0_7 [label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", span="16-16", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", file="OptionMapperTests.cs"];
m0_27 [label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="14-14", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="OptionMapperTests.cs"];
m0_0 [label="Entry CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", span="17-17", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="OptionMapperTests.cs"];
m0_1 [label="var tokenPartitions = new[]\r\n                {\r\n                    new KeyValuePair<string, IEnumerable<string>>(''x'', new [] { ''true'' })\r\n                }", span="20-23", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="OptionMapperTests.cs"];
m0_2 [label="var specProps = new[]\r\n                {\r\n                    SpecificationProperty.Create(\r\n                        new OptionSpecification(''x'', string.Empty, false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), '\0', Maybe.Nothing<object>(), string.Empty, string.Empty, new List<string>(), typeof(bool), TargetType.Switch), \r\n                        typeof(Simple_Options).GetProperties().Single(p => p.Name.Equals(''BoolValue'', StringComparison.Ordinal)),\r\n                        Maybe.Nothing<object>())\r\n                }", span="24-30", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="OptionMapperTests.cs"];
m0_3 [label="var result = OptionMapper.MapValues(\r\n                specProps.Where(pt => pt.Specification.IsOption()),\r\n                tokenPartitions,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, CultureInfo.InvariantCulture),\r\n                StringComparer.InvariantCulture)", span="33-37", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="OptionMapperTests.cs"];
m0_4 [label="Assert.NotNull(((Ok<IEnumerable<SpecificationProperty>, Error>)result).Value.Success.Single(\r\n                a => a.Specification.IsOption()\r\n                && ((OptionSpecification)a.Specification).ShortName.Equals(''x'')\r\n                && (bool)((Just<object>)a.Value).Value))", span="40-43", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", color=green, community=0, file="OptionMapperTests.cs"];
m0_5 [label="Exit CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", span="17-17", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="OptionMapperTests.cs"];
m0_28 [label="Entry lambda expression", span="41-43", cluster="lambda expression", file="OptionMapperTests.cs"];
m0_16 [label="Entry lambda expression", span="28-28", cluster="lambda expression", file="OptionMapperTests.cs"];
m0_20 [label="Entry lambda expression", span="34-34", cluster="lambda expression", file="OptionMapperTests.cs"];
m0_24 [label="Entry lambda expression", span="36-36", cluster="lambda expression", file="OptionMapperTests.cs"];
m0_17 [label="p.Name.Equals(''BoolValue'', StringComparison.Ordinal)", span="28-28", cluster="lambda expression", file="OptionMapperTests.cs"];
m0_18 [label="Exit lambda expression", span="28-28", cluster="lambda expression", file="OptionMapperTests.cs"];
m0_21 [label="pt.Specification.IsOption()", span="34-34", cluster="lambda expression", file="OptionMapperTests.cs"];
m0_22 [label="Exit lambda expression", span="34-34", cluster="lambda expression", file="OptionMapperTests.cs"];
m0_25 [label="TypeConverter.ChangeType(vals, type, isScalar, CultureInfo.InvariantCulture)", span="36-36", cluster="lambda expression", file="OptionMapperTests.cs"];
m0_26 [label="Exit lambda expression", span="36-36", cluster="lambda expression", file="OptionMapperTests.cs"];
m0_29 [label="a.Specification.IsOption()\r\n                && ((OptionSpecification)a.Specification).ShortName.Equals(''x'')\r\n                && (bool)((Just<object>)a.Value).Value", span="41-43", cluster="lambda expression", file="OptionMapperTests.cs"];
m0_30 [label="Exit lambda expression", span="41-43", cluster="lambda expression", file="OptionMapperTests.cs"];
m0_31 [label="Entry Unk.IsOption", span="", cluster="Unk.IsOption", file="OptionMapperTests.cs"];
m0_32 [label="Entry string.Equals(string)", span="0-0", cluster="string.Equals(string)", file="OptionMapperTests.cs"];
m0_8 [label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116", cluster="CSharpx.Maybe.Nothing<T>()", file="OptionMapperTests.cs"];
m0_19 [label="Entry string.Equals(string, System.StringComparison)", span="0-0", cluster="string.Equals(string, System.StringComparison)", file="OptionMapperTests.cs"];
m0_23 [label="Entry CommandLine.Core.Specification.IsOption()", span="10-10", cluster="CommandLine.Core.Specification.IsOption()", file="OptionMapperTests.cs"];
m0_14 [label="Entry Unk.MapValues", span="", cluster="Unk.MapValues", file="OptionMapperTests.cs"];
m0_10 [label="Entry System.Type.GetProperties()", span="0-0", cluster="System.Type.GetProperties()", file="OptionMapperTests.cs"];
m0_9 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="OptionMapperTests.cs"];
m1_15 [label="Entry CommandLine.Tests.ValueListAttributeFixture.MockSpecializedList.MockSpecializedList()", span="41-41", cluster="CommandLine.Tests.ValueListAttributeFixture.MockSpecializedList.MockSpecializedList()", file="ResultExtensions.cs"];
m1_0 [label="Entry CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsNull()", span="54-54", cluster="CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsNull()", file="ResultExtensions.cs"];
m1_3 [label="Entry CommandLine.ValueListAttribute.ValueListAttribute(System.Type)", span="304-304", cluster="CommandLine.ValueListAttribute.ValueListAttribute(System.Type)", color=green, community=0, file="ResultExtensions.cs"];
m1_2 [label="Exit CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsNull()", span="54-54", cluster="CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsNull()", file="ResultExtensions.cs"];
m1_1 [label="new ValueListAttribute(null)", span="56-56", cluster="CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsNull()", file="ResultExtensions.cs"];
m1_4 [label="Entry CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsIncompatible()", span="61-61", cluster="CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsIncompatible()", file="ResultExtensions.cs"];
m1_5 [label="new ValueListAttribute(new List<object>().GetType())", span="63-63", cluster="CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsIncompatible()", file="ResultExtensions.cs"];
m1_6 [label="Exit CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsIncompatible()", span="61-61", cluster="CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsIncompatible()", file="ResultExtensions.cs"];
m1_22 [label="Entry CommandLine.Tests.ValueListAttributeFixture.MockOptions.MockOptions()", span="45-45", cluster="CommandLine.Tests.ValueListAttributeFixture.MockOptions.MockOptions()", file="ResultExtensions.cs"];
m1_27 [label="Entry CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", span="89-89", cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", file="ResultExtensions.cs"];
m1_28 [label="var options = new MockOptions()", span="91-91", cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", file="ResultExtensions.cs"];
m1_29 [label="var values = ValueListAttribute.GetReference(options)", span="93-93", cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", file="ResultExtensions.cs"];
m1_33 [label="base.ElementsShouldBeEqual(new string[] { ''value0'', ''value1'', ''value2'' }, options.Values)", span="98-98", cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", file="ResultExtensions.cs"];
m1_30 [label="values.Add(''value0'')", span="94-94", cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", file="ResultExtensions.cs"];
m1_31 [label="values.Add(''value1'')", span="95-95", cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", file="ResultExtensions.cs"];
m1_32 [label="values.Add(''value2'')", span="96-96", cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", file="ResultExtensions.cs"];
m1_34 [label="Exit CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", span="89-89", cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", file="ResultExtensions.cs"];
m1_13 [label="new ValueListAttribute(new MockSpecializedList().GetType())", span="75-75", cluster="CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfStringSubType()", file="ResultExtensions.cs"];
m1_8 [label="result.Tag == ResultType.Ok", span="27-27", cluster="CommandLine.Infrastructure.ResultExtensions.ToMaybe<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ResultExtensions.cs"];
m1_25 [label="Entry Unk.Null", span="", cluster="Unk.Null", file="ResultExtensions.cs"];
m1_24 [label="Entry Unk.Should", span="", cluster="Unk.Should", file="ResultExtensions.cs"];
m1_16 [label="Entry CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", span="79-79", cluster="CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", file="ResultExtensions.cs"];
m1_17 [label="var options = new MockOptions()", span="81-81", cluster="CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", file="ResultExtensions.cs"];
m1_18 [label="IList<string> values = ValueListAttribute.GetReference(options)", span="83-83", cluster="CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", file="ResultExtensions.cs"];
m1_19 [label="values.Should().Not.Be.Null()", span="84-84", cluster="CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", file="ResultExtensions.cs"];
m1_20 [label="values.GetType().Should().Equal(typeof(List<string>))", span="85-85", cluster="CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", file="ResultExtensions.cs"];
m1_21 [label="Exit CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", span="79-79", cluster="CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", file="ResultExtensions.cs"];
m1_35 [label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.ICollection<T>.Add(T)", file="ResultExtensions.cs"];
m1_7 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="ResultExtensions.cs"];
m1_10 [label="new ValueListAttribute(new List<string>().GetType())", span="69-69", cluster="CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfString()", color=green, community=0, file="ResultExtensions.cs"];
m1_9 [label="Entry CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfString()", span="67-67", cluster="CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfString()", file="ResultExtensions.cs"];
m1_11 [label="Exit CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfString()", span="67-67", cluster="CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfString()", file="ResultExtensions.cs"];
m1_12 [label="Entry CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfStringSubType()", span="73-73", cluster="CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfStringSubType()", file="ResultExtensions.cs"];
m1_14 [label="Exit CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfStringSubType()", span="73-73", cluster="CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfStringSubType()", file="ResultExtensions.cs"];
m1_23 [label="Entry CommandLine.ValueListAttribute.GetReference(object)", span="328-328", cluster="CommandLine.ValueListAttribute.GetReference(object)", file="ResultExtensions.cs"];
m1_26 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="ResultExtensions.cs"];
m1_36 [label="Entry CommandLine.Tests.BaseFixture.ElementsShouldBeEqual(string[], System.Collections.Generic.IList<string>)", span="48-48", cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual(string[], System.Collections.Generic.IList<string>)", file="ResultExtensions.cs"];
m1_37 [label="CommandLine.Tests.ValueListAttributeFixture", span="", file="ResultExtensions.cs"];
n77 -> n48  [key=1, style=dashed, color=red, label=setsWithTrue];
n0 -> n1  [key=0, style=solid, color=red];
n1 -> n2  [key=0, style=solid, color=red];
n1 -> n4  [key=1, style=dashed, color=red, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
n2 -> n0  [key=0, style=bold, color=blue];
n4 -> n5  [key=0, style=solid, color=red];
n4 -> n10  [key=2, style=dotted, color=red];
n4 -> n15  [key=1, style=dashed, color=red, label="lambda expression"];
n4 -> n7  [key=1, style=dashed, color=red, label=options];
n3 -> n4  [key=0, style=solid, color=red];
n3 -> d8  [key=0, style=solid, color=green];
n3 -> d24  [key=1, style=dashed, color=green, label="CommandLine.Core.SpecificationProperty"];
n3 -> d9  [key=1, style=dashed, color=green, label="CommandLine.Core.SpecificationProperty"];
n5 -> n6  [key=0, style=solid, color=red];
n5 -> n11  [key=2, style=dotted, color=red];
n5 -> n20  [key=1, style=dashed, color=red, label="lambda expression"];
n15 -> n16  [key=0, style=solid, color=red];
n7 -> n9  [key=0, style=solid, color=red];
n7 -> n13  [key=2, style=dotted, color=red];
n7 -> n23  [key=1, style=dashed, color=red, label="lambda expression"];
n6 -> n7  [key=0, style=solid, color=red];
n6 -> n8  [key=0, style=solid, color=red];
n6 -> n12  [key=2, style=dotted, color=red];
n20 -> n21  [key=0, style=solid, color=red];
n8 -> n9  [key=0, style=solid, color=red];
n8 -> n14  [key=2, style=dotted, color=red];
n9 -> n3  [key=0, style=bold, color=blue];
n23 -> n24  [key=0, style=solid, color=red];
n16 -> n17  [key=0, style=solid, color=red];
n16 -> n18  [key=2, style=dotted, color=red];
n16 -> n19  [key=2, style=dotted, color=red];
n17 -> n15  [key=0, style=bold, color=blue];
n17 -> n47  [key=0, style=bold, color=green];
n21 -> n22  [key=0, style=solid, color=red];
n22 -> n20  [key=0, style=bold, color=blue];
n22 -> n15  [key=0, style=bold, color=green];
n24 -> n25  [key=0, style=solid, color=red];
n24 -> n26  [key=2, style=dotted, color=red];
n24 -> n27  [key=2, style=dotted, color=red];
n24 -> n28  [key=2, style=dotted, color=red];
n25 -> n23  [key=0, style=bold, color=blue];
n25 -> n20  [key=0, style=bold, color=green];
n29 -> n30  [key=0, style=solid, color=red];
n30 -> n31  [key=0, style=solid, color=red];
n30 -> n33  [key=1, style=dashed, color=red, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
n30 -> n34  [key=1, style=dashed, color=red, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
n31 -> n29  [key=0, style=bold, color=blue];
n33 -> n34  [key=0, style=solid, color=red];
n33 -> n10  [key=2, style=dotted];
n33 -> n13  [key=2, style=dotted];
n33 -> n39  [key=2, style=dotted];
n33 -> n41  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n33 -> n44  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n33 -> n48  [key=1, style=dashed, color=red, label=setsWithTrue];
n34 -> n35  [key=0, style=solid, color=red];
n34 -> n10  [key=2, style=dotted, color=red];
n34 -> n39  [key=2, style=dotted, color=red];
n34 -> n47  [key=1, style=dashed, color=red, label="lambda expression"];
n34 -> n36  [key=1, style=dashed, color=red, label=requiredButEmpty];
n32 -> n33  [key=0, style=solid];
n32 -> n34  [key=1, style=dashed, color=red, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
n41 -> n42  [key=0, style=solid];
n44 -> n45  [key=0, style=solid];
n48 -> n49  [key=0, style=solid, color=red];
n48 -> n50  [key=2, style=dotted, color=red];
n48 -> n51  [key=2, style=dotted, color=red];
n35 -> n36  [key=0, style=solid];
n35 -> n37  [key=0, style=solid];
n35 -> n40  [key=2, style=dotted];
n47 -> n48  [key=0, style=solid, color=red];
n47 -> d24  [key=0, style=solid, color=green];
n36 -> n38  [key=0, style=solid];
n36 -> n13  [key=2, style=dotted];
n36 -> n52  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n37 -> n38  [key=0, style=solid];
n37 -> n14  [key=2, style=dotted];
n38 -> n32  [key=0, style=bold, color=blue];
n52 -> n53  [key=0, style=solid];
n42 -> n43  [key=0, style=solid];
n42 -> n18  [key=2, style=dotted];
n42 -> n19  [key=2, style=dotted];
n43 -> n41  [key=0, style=bold, color=blue];
n45 -> n46  [key=0, style=solid];
n46 -> n44  [key=0, style=bold, color=blue];
n49 -> n47  [key=0, style=bold, color=blue];
n49 -> n23  [key=0, style=bold, color=green];
n53 -> n54  [key=0, style=solid];
n53 -> n55  [key=2, style=dotted];
n53 -> n56  [key=2, style=dotted];
n53 -> n28  [key=2, style=dotted];
n54 -> n52  [key=0, style=bold, color=blue];
n57 -> n58  [key=0, style=solid];
n58 -> n59  [key=0, style=solid];
n58 -> n61  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
n59 -> n57  [key=0, style=bold, color=blue];
n61 -> n62  [key=0, style=solid];
n61 -> n10  [key=2, style=dotted];
n61 -> n66  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n61 -> n63  [key=1, style=dashed, color=darkseagreen4, label=options];
n60 -> n61  [key=0, style=solid];
n62 -> n63  [key=0, style=solid];
n62 -> n64  [key=0, style=solid];
n62 -> n40  [key=2, style=dotted];
n66 -> n67  [key=0, style=solid];
n63 -> n65  [key=0, style=solid];
n63 -> n13  [key=2, style=dotted];
n63 -> n73  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n64 -> n65  [key=0, style=solid];
n64 -> n14  [key=2, style=dotted];
n65 -> n60  [key=0, style=bold, color=blue];
n73 -> n74  [key=0, style=solid];
n67 -> n68  [key=0, style=solid];
n67 -> n69  [key=2, style=dotted];
n67 -> n19  [key=2, style=dotted];
n67 -> n70  [key=2, style=dotted];
n67 -> n71  [key=2, style=dotted];
n67 -> n72  [key=2, style=dotted];
n68 -> n66  [key=0, style=bold, color=blue];
n74 -> n75  [key=0, style=solid];
n74 -> n76  [key=2, style=dotted];
n74 -> n56  [key=2, style=dotted];
n74 -> n28  [key=2, style=dotted];
n75 -> n73  [key=0, style=bold, color=blue];
d1 -> d2  [key=0, style=solid, color=green];
d1 -> d4  [key=2, style=dotted, color=green];
d1 -> n3  [key=1, style=dashed, color=green, label="lambda expression"];
d0 -> d1  [key=0, style=solid, color=green];
d0 -> d8  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>"];
d0 -> d24  [key=1, style=dashed, color=green, label="System.StringComparer"];
d0 -> d9  [key=1, style=dashed, color=green, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>"];
d2 -> d3  [key=0, style=solid];
d2 -> d4  [key=2, style=dotted];
d2 -> d5  [key=2, style=dotted];
d2 -> d6  [key=2, style=dotted];
d2 -> n15  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d2 -> n20  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d2 -> n23  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d8 -> d9  [key=0, style=solid, color=green];
d8 -> d11  [key=2, style=dotted, color=green];
d8 -> d12  [key=2, style=dotted, color=green];
d8 -> n47  [key=1, style=dashed, color=green, label="lambda expression"];
d36 -> d8  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>"];
d37 -> d8  [key=1, style=dashed, color=green, label="System.StringComparer"];
d37 -> d24  [key=1, style=dashed, color=green, label="System.StringComparer"];
d9 -> d9  [key=1, style=dashed, color=green, label=sequence];
d9 -> n9  [key=0, style=solid, color=green];
d9 -> d13  [key=2, style=dotted, color=green];
d9 -> d14  [key=2, style=dotted, color=green];
d9 -> d15  [key=2, style=dotted, color=green];
d9 -> d16  [key=2, style=dotted, color=green];
d9 -> d17  [key=2, style=dotted, color=green];
d9 -> d18  [key=2, style=dotted, color=green];
d9 -> d19  [key=2, style=dotted, color=green];
d9 -> d20  [key=2, style=dotted, color=green];
d9 -> d21  [key=2, style=dotted, color=green];
d9 -> d22  [key=2, style=dotted, color=green];
d24 -> d24  [key=1, style=dashed, color=green, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>"];
d24 -> n17  [key=0, style=solid, color=green];
d24 -> d26  [key=2, style=dotted, color=green];
d39 -> d24  [key=1, style=dashed, color=green, label="CommandLine.Core.SpecificationProperty"];
d38 -> d9  [key=1, style=dashed, color=green, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>"];
d3 -> d0  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_6  [key=2, style=dotted];
m0_1 -> m0_3  [key=1, style=dashed, color=darkseagreen4, label=tokenPartitions];
m0_2 -> m0_3  [key=0, style=solid];
m0_2 -> m0_7  [key=2, style=dotted];
m0_2 -> m0_8  [key=2, style=dotted];
m0_2 -> m0_9  [key=2, style=dotted];
m0_2 -> m0_10  [key=2, style=dotted];
m0_2 -> m0_11  [key=2, style=dotted];
m0_2 -> m0_12  [key=2, style=dotted];
m0_2 -> m0_16  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_3 -> m0_4  [key=0, style=solid, color=green];
m0_3 -> n10  [key=2, style=dotted];
m0_3 -> m0_14  [key=2, style=dotted];
m0_3 -> m0_20  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_3 -> m0_24  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_4 -> m0_5  [key=0, style=solid, color=green];
m0_4 -> m0_11  [key=2, style=dotted, color=green];
m0_4 -> m0_15  [key=2, style=dotted, color=green];
m0_4 -> m0_28  [key=1, style=dashed, color=green, label="lambda expression"];
m0_5 -> m0_0  [key=0, style=bold, color=blue];
m0_28 -> m0_29  [key=0, style=solid];
m0_16 -> m0_17  [key=0, style=solid];
m0_20 -> m0_21  [key=0, style=solid];
m0_24 -> m0_25  [key=0, style=solid];
m0_17 -> m0_18  [key=0, style=solid];
m0_17 -> m0_19  [key=2, style=dotted];
m0_18 -> m0_16  [key=0, style=bold, color=blue];
m0_21 -> m0_22  [key=0, style=solid];
m0_21 -> m0_23  [key=2, style=dotted];
m0_22 -> m0_20  [key=0, style=bold, color=blue];
m0_25 -> m0_26  [key=0, style=solid];
m0_25 -> m0_27  [key=2, style=dotted];
m0_26 -> m0_24  [key=0, style=bold, color=blue];
m0_29 -> m0_30  [key=0, style=solid];
m0_29 -> m0_31  [key=2, style=dotted];
m0_29 -> m0_32  [key=2, style=dotted];
m0_30 -> m0_28  [key=0, style=bold, color=blue];
m1_0 -> m1_2  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>"];
m1_0 -> m1_1  [key=0, style=solid];
m1_3 -> m1_5  [key=0, style=solid, color=green];
m1_2 -> m1_3  [key=0, style=solid, color=green];
m1_2 -> m1_0  [key=0, style=bold, color=blue];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_4  [key=0, style=solid];
m1_1 -> m1_3  [key=2, style=dotted];
m1_4 -> m1_5  [key=0, style=solid];
m1_4 -> n14  [key=2, style=dotted];
m1_5 -> m1_0  [key=0, style=bold, color=blue];
m1_5 -> m1_6  [key=0, style=solid];
m1_5 -> m1_3  [key=2, style=dotted];
m1_5 -> m1_7  [key=2, style=dotted];
m1_5 -> m1_8  [key=2, style=dotted];
m1_6 -> m1_4  [key=0, style=bold, color=blue];
m1_27 -> m1_28  [key=0, style=solid];
m1_28 -> m1_29  [key=0, style=solid];
m1_28 -> m1_22  [key=2, style=dotted];
m1_28 -> m1_33  [key=1, style=dashed, color=darkseagreen4, label=options];
m1_29 -> m1_30  [key=0, style=solid];
m1_29 -> m1_23  [key=2, style=dotted];
m1_29 -> m1_31  [key=1, style=dashed, color=darkseagreen4, label=values];
m1_29 -> m1_32  [key=1, style=dashed, color=darkseagreen4, label=values];
m1_33 -> m1_34  [key=0, style=solid];
m1_33 -> m1_36  [key=2, style=dotted];
m1_30 -> m1_31  [key=0, style=solid];
m1_30 -> m1_35  [key=2, style=dotted];
m1_31 -> m1_32  [key=0, style=solid];
m1_31 -> m1_35  [key=2, style=dotted];
m1_32 -> m1_33  [key=0, style=solid];
m1_32 -> m1_35  [key=2, style=dotted];
m1_34 -> m1_27  [key=0, style=bold, color=blue];
m1_13 -> m1_14  [key=0, style=solid];
m1_13 -> m1_3  [key=2, style=dotted];
m1_13 -> m1_15  [key=2, style=dotted];
m1_13 -> m1_8  [key=2, style=dotted];
m1_8 -> m1_9  [key=0, style=solid];
m1_8 -> m1_11  [key=0, style=solid];
m1_16 -> m1_17  [key=0, style=solid];
m1_17 -> m1_18  [key=0, style=solid];
m1_17 -> m1_22  [key=2, style=dotted];
m1_18 -> m1_19  [key=0, style=solid];
m1_18 -> m1_23  [key=2, style=dotted];
m1_18 -> m1_20  [key=1, style=dashed, color=darkseagreen4, label=values];
m1_19 -> m1_20  [key=0, style=solid];
m1_19 -> m1_24  [key=2, style=dotted];
m1_19 -> m1_25  [key=2, style=dotted];
m1_20 -> m1_21  [key=0, style=solid];
m1_20 -> m1_8  [key=2, style=dotted];
m1_20 -> m1_24  [key=2, style=dotted];
m1_20 -> m1_26  [key=2, style=dotted];
m1_21 -> m1_16  [key=0, style=bold, color=blue];
m1_7 -> m1_9  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>"];
m1_7 -> m1_8  [key=0, style=solid];
m1_10 -> m1_12  [key=0, style=solid, color=green];
m1_10 -> m1_13  [key=2, style=dotted, color=green];
m1_10 -> m1_11  [key=0, style=solid];
m1_10 -> m1_3  [key=2, style=dotted];
m1_10 -> m1_7  [key=2, style=dotted];
m1_10 -> m1_8  [key=2, style=dotted];
m1_9 -> m1_10  [key=0, style=solid, color=green];
m1_11 -> m1_12  [key=0, style=solid];
m1_11 -> m1_14  [key=2, style=dotted];
m1_11 -> m1_9  [key=0, style=bold, color=blue];
m1_12 -> m1_7  [key=0, style=bold, color=blue];
m1_12 -> m1_13  [key=0, style=solid];
m1_14 -> m1_12  [key=0, style=bold, color=blue];
m1_37 -> m1_33  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.ValueListAttributeFixture"];
}
