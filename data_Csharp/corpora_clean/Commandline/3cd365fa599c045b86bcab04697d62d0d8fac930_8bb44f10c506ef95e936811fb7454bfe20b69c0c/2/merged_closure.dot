digraph  {
n77 [label=setsWithTrue, span=""];
n0 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="18-18"];
n2 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="18-18"];
n3 [cluster="lambda expression", label="Entry lambda expression", span="20-29"];
n10 [cluster="Unk.Where", label="Entry Unk.Where", span=""];
n15 [cluster="lambda expression", label="Entry lambda expression", span="22-22"];
n11 [cluster="Unk.GroupBy", label="Entry Unk.GroupBy", span=""];
n20 [cluster="lambda expression", label="Entry lambda expression", span="23-23"];
n12 [cluster="Unk.Count", label="Entry Unk.Count", span=""];
n9 [cluster="lambda expression", label="Exit lambda expression", span="20-29"];
n13 [cluster="Unk.Select", label="Entry Unk.Select", span=""];
n23 [cluster="lambda expression", label="Entry lambda expression", span="26-26"];
n14 [cluster="System.Linq.Enumerable.Empty<TResult>()", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
n17 [cluster="lambda expression", label="Exit lambda expression", span="22-22"];
n18 [cluster="CommandLine.Core.Specification.IsOption()", label="Entry CommandLine.Core.Specification.IsOption()", span="11-11"];
n19 [cluster="CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", label="Entry CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", span="152-152"];
n22 [cluster="lambda expression", label="Exit lambda expression", span="23-23"];
n25 [cluster="lambda expression", label="Exit lambda expression", span="26-26"];
n26 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294"];
n27 [cluster="CommandLine.NameInfo.FromOptionSpecification(CommandLine.Core.OptionSpecification)", label="Entry CommandLine.NameInfo.FromOptionSpecification(CommandLine.Core.OptionSpecification)", span="60-60"];
n28 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="71-71"];
n29 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="32-32"];
n31 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="32-32"];
n33 [cluster="lambda expression", label="List<string> setsWithTrue =\r\n                    specProps.Where(sp => sp.Specification.IsOption() && sp.Value.IsJust() && sp.Specification.Required)\r\n                        .Select(x => ((OptionSpecification)x.Specification).SetName).ToList()", span="36-38"];
n32 [cluster="lambda expression", label="Entry lambda expression", span="34-49"];
n39 [cluster="Unk.ToList", label="Entry Unk.ToList", span=""];
n41 [cluster="lambda expression", label="Entry lambda expression", span="37-37"];
n44 [cluster="lambda expression", label="Entry lambda expression", span="38-38"];
n35 [cluster="lambda expression", label="requiredButEmpty.Any()", span="44-44"];
n47 [cluster="lambda expression", label="Entry lambda expression", span="41-43"];
n36 [cluster="lambda expression", label="return requiredButEmpty.Select(s => Maybe.Just<Error>(new MissingRequiredOptionError(\r\n                            NameInfo.FromSpecification(s.Specification))));", span="45-46"];
n37 [cluster="lambda expression", label="return Enumerable.Empty<Nothing<Error>>();", span="48-48"];
n40 [cluster="Unk.Any", label="Entry Unk.Any", span=""];
n38 [cluster="lambda expression", label="Exit lambda expression", span="34-49"];
n52 [cluster="lambda expression", label="Entry lambda expression", span="45-46"];
n42 [cluster="lambda expression", label="sp.Specification.IsOption() && sp.Value.IsJust() && sp.Specification.Required", span="37-37"];
n43 [cluster="lambda expression", label="Exit lambda expression", span="37-37"];
n45 [cluster="lambda expression", label="((OptionSpecification)x.Specification).SetName", span="38-38"];
n46 [cluster="lambda expression", label="Exit lambda expression", span="38-38"];
n49 [cluster="lambda expression", label="Exit lambda expression", span="41-43"];
n50 [cluster="CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", label="Entry CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", span="147-147"];
n51 [cluster="System.Collections.Generic.List<T>.Contains(T)", label="Entry System.Collections.Generic.List<T>.Contains(T)", span="0-0"];
n53 [cluster="lambda expression", label="Maybe.Just<Error>(new MissingRequiredOptionError(\r\n                            NameInfo.FromSpecification(s.Specification)))", span="45-46"];
n54 [cluster="lambda expression", label="Exit lambda expression", span="45-46"];
n55 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283"];
n56 [cluster="Unk.FromSpecification", label="Entry Unk.FromSpecification", span=""];
n57 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="52-52"];
n58 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", label="return specProps =>\r\n                {\r\n                    var options = specProps.Where(\r\n                        sp => sp.Specification.ConversionType.ToDescriptor() == DescriptorType.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (!sp.Specification.IsMinNotSpecified() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min)\r\n                            || (!sp.Specification.IsMaxNotSpecified() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max)\r\n                        )\r\n                    );\r\n                    if (options.Any())\r\n                    {\r\n                        return options.Select(s => Maybe.Just<Error>(new SequenceOutOfRangeError(\r\n                            NameInfo.FromSpecification(s.Specification))));\r\n                    }\r\n                    return Enumerable.Empty<Nothing<Error>>();\r\n                };", span="54-70"];
n59 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="52-52"];
n61 [cluster="lambda expression", label="var options = specProps.Where(\r\n                        sp => sp.Specification.ConversionType.ToDescriptor() == DescriptorType.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (!sp.Specification.IsMinNotSpecified() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min)\r\n                            || (!sp.Specification.IsMaxNotSpecified() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max)\r\n                        )\r\n                    )", span="56-63"];
n60 [cluster="lambda expression", label="Entry lambda expression", span="54-70"];
n62 [cluster="lambda expression", label="options.Any()", span="64-64"];
n66 [cluster="lambda expression", label="Entry lambda expression", span="57-62"];
n63 [cluster="lambda expression", label="return options.Select(s => Maybe.Just<Error>(new SequenceOutOfRangeError(\r\n                            NameInfo.FromSpecification(s.Specification))));", span="66-67"];
n64 [cluster="lambda expression", label="return Enumerable.Empty<Nothing<Error>>();", span="69-69"];
n65 [cluster="lambda expression", label="Exit lambda expression", span="54-70"];
n73 [cluster="lambda expression", label="Entry lambda expression", span="66-67"];
n67 [cluster="lambda expression", label="sp.Specification.ConversionType.ToDescriptor() == DescriptorType.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (!sp.Specification.IsMinNotSpecified() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min)\r\n                            || (!sp.Specification.IsMaxNotSpecified() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max)\r\n                        )", span="57-62"];
n68 [cluster="lambda expression", label="Exit lambda expression", span="57-62"];
n69 [cluster="System.Type.ToDescriptor()", label="Entry System.Type.ToDescriptor()", span="22-22"];
n70 [cluster="CommandLine.Core.Specification.IsMinNotSpecified()", label="Entry CommandLine.Core.Specification.IsMinNotSpecified()", span="76-76"];
n71 [cluster="CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", label="Entry CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", span="137-137"];
n72 [cluster="CommandLine.Core.Specification.IsMaxNotSpecified()", label="Entry CommandLine.Core.Specification.IsMaxNotSpecified()", span="81-81"];
n74 [cluster="lambda expression", label="Maybe.Just<Error>(new SequenceOutOfRangeError(\r\n                            NameInfo.FromSpecification(s.Specification)))", span="66-67"];
n75 [cluster="lambda expression", label="Exit lambda expression", span="66-67"];
n76 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316"];
d1 [cluster="CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>, System.StringComparer)", color=green, community=0, label="var sequencesAndErrors = propertyTuples\r\n                .Select(\r\n                    pt =>\r\n                    {\r\n                        var matched = options.FirstOrDefault(s =>\r\n                            s.Key.MatchName(((OptionSpecification)pt.Specification).ShortName, ((OptionSpecification)pt.Specification).LongName, comparer)).ToMaybe();\r\n                        return matched.IsJust()\r\n                            ? (\r\n                                from sequence in matched\r\n                                from converted in\r\n                                    converter(\r\n                                        sequence.Value,\r\n                                        pt.Property.PropertyType,\r\n                                        pt.Specification.TargetType != TargetType.Sequence)\r\n                                select Tuple.Create(\r\n                                    pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>())\r\n                               )\r\n                                .GetValueOrDefault(\r\n                                    Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                                        pt,\r\n                                        Maybe.Just<Error>(\r\n                                            new BadFormatConversionError(\r\n                                                ((OptionSpecification)pt.Specification).FromOptionSpecification()))))\r\n                            : Tuple.Create(pt, Maybe.Nothing<Error>());\r\n                    }\r\n                )", prediction=0, span="20-45"];
d0 [cluster="CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>, System.StringComparer)", label="Entry CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>, System.StringComparer)", span="14-14"];
d2 [cluster="CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>, System.StringComparer)", label="return Result.Succeed(\r\n                sequencesAndErrors.Select(se => se.Item1),\r\n                sequencesAndErrors.Select(se => se.Item2).OfType<Just<Error>>().Select(se => se.Value));", span="46-48"];
d4 [cluster="Unk.Select", label="Entry Unk.Select", span=""];
d8 [cluster="lambda expression", color=green, community=1, label="var matched = options.FirstOrDefault(s =>\r\n                            s.Key.MatchName(((OptionSpecification)pt.Specification).ShortName, ((OptionSpecification)pt.Specification).LongName, comparer)).ToMaybe()", prediction=1, span="24-25"];
d36 [label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>", span=""];
d37 [label="System.StringComparer", span=""];
d9 [cluster="lambda expression", color=green, community=1, label="return matched.IsJust()\r\n                            ? (\r\n                                from sequence in matched\r\n                                from converted in\r\n                                    converter(\r\n                                        sequence.Value,\r\n                                        pt.Property.PropertyType,\r\n                                        pt.Specification.TargetType != TargetType.Sequence)\r\n                                select Tuple.Create(\r\n                                    pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>())\r\n                               )\r\n                                .GetValueOrDefault(\r\n                                    Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                                        pt,\r\n                                        Maybe.Just<Error>(\r\n                                            new BadFormatConversionError(\r\n                                                ((OptionSpecification)pt.Specification).FromOptionSpecification()))))\r\n                            : Tuple.Create(pt, Maybe.Nothing<Error>());", prediction=2, span="26-43"];
d11 [cluster="Unk.FirstOrDefault", label="Entry Unk.FirstOrDefault", span=""];
d12 [cluster="Unk.ToMaybe", label="Entry Unk.ToMaybe", span=""];
d24 [cluster="lambda expression", color=green, community=0, label="s.Key.MatchName(((OptionSpecification)pt.Specification).ShortName, ((OptionSpecification)pt.Specification).LongName, comparer)", prediction=2, span="25-25"];
d39 [label="CommandLine.Core.SpecificationProperty", span=""];
d26 [cluster="string.MatchName(string, string, System.StringComparer)", label="Entry string.MatchName(string, string, System.StringComparer)", span="8-8"];
d38 [label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>", span=""];
d13 [cluster="Unk.IsJust", label="Entry Unk.IsJust", span=""];
d14 [cluster="Unk.converter", label="Entry Unk.converter", span=""];
d15 [cluster="Unk.Just", label="Entry Unk.Just", span=""];
d16 [cluster="Unk.WithValue", label="Entry Unk.WithValue", span=""];
d17 [cluster="CSharpx.Maybe.Nothing<T>()", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
d18 [cluster="System.Tuple.Create<T1, T2>(T1, T2)", label="Entry System.Tuple.Create<T1, T2>(T1, T2)", span="0-0"];
d19 [cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="349-349"];
d20 [cluster="CommandLine.Core.OptionSpecification.FromOptionSpecification()", label="Entry CommandLine.Core.OptionSpecification.FromOptionSpecification()", span="15-15"];
d21 [cluster="CSharpx.Maybe.Just<T>(T)", label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124"];
d22 [cluster="Unk.GetValueOrDefault", label="Entry Unk.GetValueOrDefault", span=""];
d3 [cluster="CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>, System.StringComparer)", label="Exit CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>, System.StringComparer)", span="14-14"];
d5 [cluster="Unk.>", label="Entry Unk.>", span=""];
d6 [cluster="Unk.Succeed", label="Entry Unk.Succeed", span=""];
m0_12 [cluster="Unk.Create", file="OptionMapperTests.cs", label="Entry Unk.Create", span=""];
m0_6 [cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", file="OptionMapperTests.cs", label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0"];
m0_11 [cluster="Unk.Single", file="OptionMapperTests.cs", label="Entry Unk.Single", span=""];
m0_15 [cluster="Unk.NotNull", file="OptionMapperTests.cs", label="Entry Unk.NotNull", span=""];
m0_7 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", file="OptionMapperTests.cs", label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", span="16-16"];
m0_27 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="OptionMapperTests.cs", label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="14-14"];
m0_0 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="OptionMapperTests.cs", label="Entry CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", span="17-17"];
m0_1 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="OptionMapperTests.cs", label="var tokenPartitions = new[]\r\n                {\r\n                    new KeyValuePair<string, IEnumerable<string>>(''x'', new [] { ''true'' })\r\n                }", span="20-23"];
m0_2 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="OptionMapperTests.cs", label="var specProps = new[]\r\n                {\r\n                    SpecificationProperty.Create(\r\n                        new OptionSpecification(''x'', string.Empty, false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), '\0', Maybe.Nothing<object>(), string.Empty, string.Empty, new List<string>(), typeof(bool), TargetType.Switch), \r\n                        typeof(Simple_Options).GetProperties().Single(p => p.Name.Equals(''BoolValue'', StringComparison.Ordinal)),\r\n                        Maybe.Nothing<object>())\r\n                }", span="24-30"];
m0_3 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="OptionMapperTests.cs", label="var result = OptionMapper.MapValues(\r\n                specProps.Where(pt => pt.Specification.IsOption()),\r\n                tokenPartitions,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, CultureInfo.InvariantCulture),\r\n                StringComparer.InvariantCulture)", span="33-37"];
m0_4 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", color=green, community=0, file="OptionMapperTests.cs", label="Assert.NotNull(((Ok<IEnumerable<SpecificationProperty>, Error>)result).Value.Success.Single(\r\n                a => a.Specification.IsOption()\r\n                && ((OptionSpecification)a.Specification).ShortName.Equals(''x'')\r\n                && (bool)((Just<object>)a.Value).Value))", prediction=4, span="40-43"];
m0_5 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="OptionMapperTests.cs", label="Exit CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", span="17-17"];
m0_28 [cluster="lambda expression", file="OptionMapperTests.cs", label="Entry lambda expression", span="41-43"];
m0_16 [cluster="lambda expression", file="OptionMapperTests.cs", label="Entry lambda expression", span="28-28"];
m0_20 [cluster="lambda expression", file="OptionMapperTests.cs", label="Entry lambda expression", span="34-34"];
m0_24 [cluster="lambda expression", file="OptionMapperTests.cs", label="Entry lambda expression", span="36-36"];
m0_17 [cluster="lambda expression", file="OptionMapperTests.cs", label="p.Name.Equals(''BoolValue'', StringComparison.Ordinal)", span="28-28"];
m0_18 [cluster="lambda expression", file="OptionMapperTests.cs", label="Exit lambda expression", span="28-28"];
m0_21 [cluster="lambda expression", file="OptionMapperTests.cs", label="pt.Specification.IsOption()", span="34-34"];
m0_22 [cluster="lambda expression", file="OptionMapperTests.cs", label="Exit lambda expression", span="34-34"];
m0_25 [cluster="lambda expression", file="OptionMapperTests.cs", label="TypeConverter.ChangeType(vals, type, isScalar, CultureInfo.InvariantCulture)", span="36-36"];
m0_26 [cluster="lambda expression", file="OptionMapperTests.cs", label="Exit lambda expression", span="36-36"];
m0_29 [cluster="lambda expression", file="OptionMapperTests.cs", label="a.Specification.IsOption()\r\n                && ((OptionSpecification)a.Specification).ShortName.Equals(''x'')\r\n                && (bool)((Just<object>)a.Value).Value", span="41-43"];
m0_30 [cluster="lambda expression", file="OptionMapperTests.cs", label="Exit lambda expression", span="41-43"];
m0_31 [cluster="Unk.IsOption", file="OptionMapperTests.cs", label="Entry Unk.IsOption", span=""];
m0_32 [cluster="string.Equals(string)", file="OptionMapperTests.cs", label="Entry string.Equals(string)", span="0-0"];
m0_8 [cluster="CSharpx.Maybe.Nothing<T>()", file="OptionMapperTests.cs", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
m0_19 [cluster="string.Equals(string, System.StringComparison)", file="OptionMapperTests.cs", label="Entry string.Equals(string, System.StringComparison)", span="0-0"];
m0_23 [cluster="CommandLine.Core.Specification.IsOption()", file="OptionMapperTests.cs", label="Entry CommandLine.Core.Specification.IsOption()", span="10-10"];
m0_14 [cluster="Unk.MapValues", file="OptionMapperTests.cs", label="Entry Unk.MapValues", span=""];
m0_10 [cluster="System.Type.GetProperties()", file="OptionMapperTests.cs", label="Entry System.Type.GetProperties()", span="0-0"];
m0_9 [cluster="System.Collections.Generic.List<T>.List()", file="OptionMapperTests.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m1_15 [cluster="CommandLine.Tests.ValueListAttributeFixture.MockSpecializedList.MockSpecializedList()", file="ResultExtensions.cs", label="Entry CommandLine.Tests.ValueListAttributeFixture.MockSpecializedList.MockSpecializedList()", span="41-41"];
m1_0 [cluster="CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsNull()", file="ResultExtensions.cs", label="Entry CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsNull()", span="54-54"];
m1_3 [cluster="CommandLine.ValueListAttribute.ValueListAttribute(System.Type)", color=green, community=0, file="ResultExtensions.cs", label="Entry CommandLine.ValueListAttribute.ValueListAttribute(System.Type)", prediction=5, span="304-304"];
m1_2 [cluster="CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsNull()", file="ResultExtensions.cs", label="Exit CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsNull()", span="54-54"];
m1_1 [cluster="CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsNull()", file="ResultExtensions.cs", label="new ValueListAttribute(null)", span="56-56"];
m1_4 [cluster="CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsIncompatible()", file="ResultExtensions.cs", label="Entry CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsIncompatible()", span="61-61"];
m1_5 [cluster="CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsIncompatible()", file="ResultExtensions.cs", label="new ValueListAttribute(new List<object>().GetType())", span="63-63"];
m1_6 [cluster="CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsIncompatible()", file="ResultExtensions.cs", label="Exit CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsIncompatible()", span="61-61"];
m1_22 [cluster="CommandLine.Tests.ValueListAttributeFixture.MockOptions.MockOptions()", file="ResultExtensions.cs", label="Entry CommandLine.Tests.ValueListAttributeFixture.MockOptions.MockOptions()", span="45-45"];
m1_27 [cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", file="ResultExtensions.cs", label="Entry CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", span="89-89"];
m1_28 [cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", file="ResultExtensions.cs", label="var options = new MockOptions()", span="91-91"];
m1_29 [cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", file="ResultExtensions.cs", label="var values = ValueListAttribute.GetReference(options)", span="93-93"];
m1_33 [cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", file="ResultExtensions.cs", label="base.ElementsShouldBeEqual(new string[] { ''value0'', ''value1'', ''value2'' }, options.Values)", span="98-98"];
m1_30 [cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", file="ResultExtensions.cs", label="values.Add(''value0'')", span="94-94"];
m1_31 [cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", file="ResultExtensions.cs", label="values.Add(''value1'')", span="95-95"];
m1_32 [cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", file="ResultExtensions.cs", label="values.Add(''value2'')", span="96-96"];
m1_34 [cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", file="ResultExtensions.cs", label="Exit CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", span="89-89"];
m1_13 [cluster="CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfStringSubType()", file="ResultExtensions.cs", label="new ValueListAttribute(new MockSpecializedList().GetType())", span="75-75"];
m1_8 [cluster="CommandLine.Infrastructure.ResultExtensions.ToMaybe<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ResultExtensions.cs", label="result.Tag == ResultType.Ok", span="27-27"];
m1_25 [cluster="Unk.Null", file="ResultExtensions.cs", label="Entry Unk.Null", span=""];
m1_24 [cluster="Unk.Should", file="ResultExtensions.cs", label="Entry Unk.Should", span=""];
m1_16 [cluster="CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", file="ResultExtensions.cs", label="Entry CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", span="79-79"];
m1_17 [cluster="CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", file="ResultExtensions.cs", label="var options = new MockOptions()", span="81-81"];
m1_18 [cluster="CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", file="ResultExtensions.cs", label="IList<string> values = ValueListAttribute.GetReference(options)", span="83-83"];
m1_19 [cluster="CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", file="ResultExtensions.cs", label="values.Should().Not.Be.Null()", span="84-84"];
m1_20 [cluster="CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", file="ResultExtensions.cs", label="values.GetType().Should().Equal(typeof(List<string>))", span="85-85"];
m1_21 [cluster="CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", file="ResultExtensions.cs", label="Exit CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", span="79-79"];
m1_35 [cluster="System.Collections.Generic.ICollection<T>.Add(T)", file="ResultExtensions.cs", label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0"];
m1_7 [cluster="System.Collections.Generic.List<T>.List()", file="ResultExtensions.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m1_10 [cluster="CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfString()", color=green, community=0, file="ResultExtensions.cs", label="new ValueListAttribute(new List<string>().GetType())", prediction=6, span="69-69"];
m1_9 [cluster="CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfString()", file="ResultExtensions.cs", label="Entry CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfString()", span="67-67"];
m1_11 [cluster="CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfString()", file="ResultExtensions.cs", label="Exit CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfString()", span="67-67"];
m1_12 [cluster="CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfStringSubType()", file="ResultExtensions.cs", label="Entry CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfStringSubType()", span="73-73"];
m1_14 [cluster="CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfStringSubType()", file="ResultExtensions.cs", label="Exit CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfStringSubType()", span="73-73"];
m1_23 [cluster="CommandLine.ValueListAttribute.GetReference(object)", file="ResultExtensions.cs", label="Entry CommandLine.ValueListAttribute.GetReference(object)", span="328-328"];
m1_26 [cluster="Unk.Equal", file="ResultExtensions.cs", label="Entry Unk.Equal", span=""];
m1_36 [cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual(string[], System.Collections.Generic.IList<string>)", file="ResultExtensions.cs", label="Entry CommandLine.Tests.BaseFixture.ElementsShouldBeEqual(string[], System.Collections.Generic.IList<string>)", span="48-48"];
m1_37 [file="ResultExtensions.cs", label="CommandLine.Tests.ValueListAttributeFixture", span=""];
n3 -> d24  [color=green, key=1, label="CommandLine.Core.SpecificationProperty", style=dashed];
n3 -> d9  [color=green, key=1, label="CommandLine.Core.SpecificationProperty", style=dashed];
n33 -> n41  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n33 -> n44  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n36 -> n52  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n61 -> n66  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n61 -> n63  [color=darkseagreen4, key=1, label=options, style=dashed];
n63 -> n73  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d1 -> n3  [color=green, key=1, label="lambda expression", style=dashed];
d0 -> d24  [color=green, key=1, label="System.StringComparer", style=dashed];
d0 -> d9  [color=green, key=1, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>", style=dashed];
d2 -> n15  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d2 -> n20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d2 -> n23  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d8 -> n47  [color=green, key=1, label="lambda expression", style=dashed];
d37 -> d24  [color=green, key=1, label="System.StringComparer", style=dashed];
d9 -> d9  [color=green, key=1, label=sequence, style=dashed];
d24 -> d24  [color=green, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
d39 -> d24  [color=green, key=1, label="CommandLine.Core.SpecificationProperty", style=dashed];
d38 -> d9  [color=green, key=1, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>", style=dashed];
m0_2 -> m0_16  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_3 -> m0_20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_3 -> m0_24  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_4 -> m0_28  [color=green, key=1, label="lambda expression", style=dashed];
m1_0 -> m1_2  [color=darkseagreen4, key=1, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>", style=dashed];
m1_28 -> m1_33  [color=darkseagreen4, key=1, label=options, style=dashed];
m1_29 -> m1_31  [color=darkseagreen4, key=1, label=values, style=dashed];
m1_29 -> m1_32  [color=darkseagreen4, key=1, label=values, style=dashed];
m1_18 -> m1_20  [color=darkseagreen4, key=1, label=values, style=dashed];
m1_7 -> m1_9  [color=darkseagreen4, key=1, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>", style=dashed];
m1_37 -> m1_33  [color=darkseagreen4, key=1, label="CommandLine.Tests.ValueListAttributeFixture", style=dashed];
}
