digraph  {
m0_14 [cluster="Unk.MapValueOrDefault", file="OptionMapper.cs", label="Entry Unk.MapValueOrDefault", span=""];
m0_18 [cluster="string.MatchName(string, string, System.StringComparer)", file="OptionMapper.cs", label="Entry string.MatchName(string, string, System.StringComparer)", span="8-8"];
m0_24 [cluster="lambda expression", color=green, community=0, file="OptionMapper.cs", label="s.Key.MatchName(((OptionSpecification)pt.Specification).ShortName, ((OptionSpecification)pt.Specification).LongName, comparer)", prediction=0, span="25-25"];
m0_15 [cluster="lambda expression", file="OptionMapper.cs", label="Entry lambda expression", span="23-24"];
m0_22 [cluster="Unk.GetValueOrDefault", file="OptionMapper.cs", label="Entry Unk.GetValueOrDefault", span=""];
m0_5 [cluster="Unk.>", file="OptionMapper.cs", label="Entry Unk.>", span=""];
m0_11 [cluster="Unk.ToMaybe", file="OptionMapper.cs", label="Entry Unk.ToMaybe", span=""];
m0_25 [cluster="CSharpx.Maybe.Just<T>(T)", file="OptionMapper.cs", label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124"];
m0_13 [cluster="Unk.IsJust", file="OptionMapper.cs", label="Entry Unk.IsJust", span=""];
m0_27 [cluster="lambda expression", file="OptionMapper.cs", label="Entry lambda expression", span="28-31"];
m0_8 [cluster="lambda expression", color=green, community=0, file="OptionMapper.cs", label="var matched = options.FirstOrDefault(s =>\r\n                            s.Key.MatchName(((OptionSpecification)pt.Specification).ShortName, ((OptionSpecification)pt.Specification).LongName, comparer)).ToMaybe()", prediction=1, span="24-25"];
m0_7 [cluster="lambda expression", file="OptionMapper.cs", label="Entry lambda expression", span="21-35"];
m0_31 [cluster="lambda expression", file="OptionMapper.cs", label="Entry lambda expression", span="38-38"];
m0_34 [cluster="lambda expression", file="OptionMapper.cs", label="Entry lambda expression", span="39-39"];
m0_37 [cluster="lambda expression", file="OptionMapper.cs", label="Entry lambda expression", span="39-39"];
m0_9 [cluster="lambda expression", color=green, community=0, file="OptionMapper.cs", label="return matched.IsJust()\r\n                            ? (\r\n                                from sequence in matched\r\n                                from converted in\r\n                                    converter(\r\n                                        sequence.Value,\r\n                                        pt.Property.PropertyType,\r\n                                        pt.Specification.TargetType != TargetType.Sequence)\r\n                                select Tuple.Create(\r\n                                    pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>())\r\n                               )\r\n                                .GetValueOrDefault(\r\n                                    Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                                        pt,\r\n                                        Maybe.Just<Error>(\r\n                                            new BadFormatConversionError(\r\n                                                ((OptionSpecification)pt.Specification).FromOptionSpecification()))))\r\n                            : Tuple.Create(pt, Maybe.Nothing<Error>());", prediction=0, span="26-43"];
m0_19 [cluster="lambda expression", file="OptionMapper.cs", label="Entry lambda expression", span="26-34"];
m0_17 [cluster="lambda expression", file="OptionMapper.cs", label="Exit lambda expression", span="23-24"];
m0_21 [cluster="lambda expression", file="OptionMapper.cs", label="Exit lambda expression", span="26-34"];
m0_29 [cluster="lambda expression", file="OptionMapper.cs", label="Exit lambda expression", span="28-31"];
m0_32 [cluster="lambda expression", file="OptionMapper.cs", label="se.Item1", span="38-38"];
m0_33 [cluster="lambda expression", file="OptionMapper.cs", label="Exit lambda expression", span="38-38"];
m0_35 [cluster="lambda expression", file="OptionMapper.cs", label="se.Item2", span="39-39"];
m0_36 [cluster="lambda expression", file="OptionMapper.cs", label="Exit lambda expression", span="39-39"];
m0_38 [cluster="lambda expression", file="OptionMapper.cs", label="se.Value", span="39-39"];
m0_39 [cluster="lambda expression", file="OptionMapper.cs", label="Exit lambda expression", span="39-39"];
m0_30 [cluster="CommandLine.Core.SpecificationProperty.WithValue(CSharpx.Maybe<object>)", file="OptionMapper.cs", label="Entry CommandLine.Core.SpecificationProperty.WithValue(CSharpx.Maybe<object>)", span="18-18"];
m0_4 [cluster="Unk.Select", file="OptionMapper.cs", label="Entry Unk.Select", span=""];
m0_23 [cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="OptionMapper.cs", label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="349-349"];
m0_12 [cluster="CSharpx.Maybe.Nothing<T>()", file="OptionMapper.cs", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
m0_26 [cluster="CSharpx.Maybe<T1>.MapValueOrDefault<T1, T2>(System.Func<T1, T2>, T2)", file="OptionMapper.cs", label="Entry CSharpx.Maybe<T1>.MapValueOrDefault<T1, T2>(System.Func<T1, T2>, T2)", span="377-377"];
m0_0 [cluster="CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>, System.StringComparer)", file="OptionMapper.cs", label="Entry CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>, System.StringComparer)", span="14-14"];
m0_1 [cluster="CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>, System.StringComparer)", color=green, community=0, file="OptionMapper.cs", label="var sequencesAndErrors = propertyTuples\r\n                .Select(\r\n                    pt =>\r\n                    {\r\n                        var matched = options.FirstOrDefault(s =>\r\n                            s.Key.MatchName(((OptionSpecification)pt.Specification).ShortName, ((OptionSpecification)pt.Specification).LongName, comparer)).ToMaybe();\r\n                        return matched.IsJust()\r\n                            ? (\r\n                                from sequence in matched\r\n                                from converted in\r\n                                    converter(\r\n                                        sequence.Value,\r\n                                        pt.Property.PropertyType,\r\n                                        pt.Specification.TargetType != TargetType.Sequence)\r\n                                select Tuple.Create(\r\n                                    pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>())\r\n                               )\r\n                                .GetValueOrDefault(\r\n                                    Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                                        pt,\r\n                                        Maybe.Just<Error>(\r\n                                            new BadFormatConversionError(\r\n                                                ((OptionSpecification)pt.Specification).FromOptionSpecification()))))\r\n                            : Tuple.Create(pt, Maybe.Nothing<Error>());\r\n                    }\r\n                )", prediction=3, span="20-45"];
m0_2 [cluster="CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>, System.StringComparer)", file="OptionMapper.cs", label="return Result.Succeed(\r\n                sequencesAndErrors.Select(se => se.Item1),\r\n                sequencesAndErrors.Select(se => se.Item2).OfType<Just<Error>>().Select(se => se.Value));", span="37-39"];
m0_3 [cluster="CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>, System.StringComparer)", file="OptionMapper.cs", label="Exit CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>, System.StringComparer)", span="14-14"];
m0_10 [cluster="Unk.FirstOrDefault", file="OptionMapper.cs", label="Entry Unk.FirstOrDefault", span=""];
m0_6 [cluster="Unk.Succeed", file="OptionMapper.cs", label="Entry Unk.Succeed", span=""];
m0_40 [file="OptionMapper.cs", label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>", span=""];
m0_41 [file="OptionMapper.cs", label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>", span=""];
m0_42 [file="OptionMapper.cs", label="System.StringComparer", span=""];
m0_43 [file="OptionMapper.cs", label="CommandLine.Core.SpecificationProperty", span=""];
m0_24 -> m0_24  [color=green, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
m0_8 -> m0_15  [color=green, key=1, label="lambda expression", style=dashed];
m0_7 -> m0_24  [color=green, key=1, label="CommandLine.Core.SpecificationProperty", style=dashed];
m0_7 -> m0_9  [color=green, key=1, label="CommandLine.Core.SpecificationProperty", style=dashed];
m0_9 -> m0_9  [color=green, key=1, label=sequence, style=dashed];
m0_0 -> m0_24  [color=green, key=1, label="System.StringComparer", style=dashed];
m0_0 -> m0_9  [color=green, key=1, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>", style=dashed];
m0_1 -> m0_7  [color=green, key=1, label="lambda expression", style=dashed];
m0_2 -> m0_31  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_2 -> m0_34  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_2 -> m0_37  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_41 -> m0_9  [color=green, key=1, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>", style=dashed];
m0_42 -> m0_24  [color=green, key=1, label="System.StringComparer", style=dashed];
m0_43 -> m0_24  [color=green, key=1, label="CommandLine.Core.SpecificationProperty", style=dashed];
}
