digraph  {
m4_22 [cluster="System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", file="Tokenizer.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", span="0-0"];
m4_133 [cluster="string.Split(params char[])", file="Tokenizer.cs", label="Entry string.Split(params char[])", span="0-0"];
m4_23 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", file="Tokenizer.cs", label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", span="33-33"];
m4_26 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", file="Tokenizer.cs", label="var values = arguments.SkipWhile(arg => !arg.EqualsOrdinal(''--'')).Skip(1).Select(Token.Value)", span="40-40"];
m4_25 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", file="Tokenizer.cs", label="var tokenizerResult = tokenizer(arguments.TakeWhile(arg => !arg.EqualsOrdinal(''--'')))", span="39-39"];
m4_28 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", file="Tokenizer.cs", label="return tokenizer(arguments);", span="43-43"];
m4_27 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", file="Tokenizer.cs", label="return tokenizerResult.Map(tokens => tokens.Concat(values));", span="41-41"];
m4_24 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", file="Tokenizer.cs", label="arguments.Any(arg => arg.EqualsOrdinal(''--''))", span="37-37"];
m4_29 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", file="Tokenizer.cs", label="Exit CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", span="33-33"];
m4_79 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="Tokenizer.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
m4_14 [cluster="Unk.nameLookup", file="Tokenizer.cs", label="Entry Unk.nameLookup", span=""];
m4_131 [cluster="CommandLine.BadFormatTokenError.BadFormatTokenError(string)", file="Tokenizer.cs", label="Entry CommandLine.BadFormatTokenError.BadFormatTokenError(string)", span="196-196"];
m4_50 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="Tokenizer.cs", label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", span="46-46"];
m4_55 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", color=green, community=0, file="Tokenizer.cs", label="return Result.Succeed(flattened, tokenizerResult.SuccessfulMessages());", prediction=0, span="64-64"];
m4_54 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="Tokenizer.cs", label="var flattened = exploded.SelectMany(x => x)", span="62-62"];
m4_51 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="Tokenizer.cs", label="var tokens = tokenizerResult.SucceededWith()", span="50-50"];
m4_52 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="Tokenizer.cs", label="var replaces = tokens.Select((t,i) =>\r\n                optionSequenceWithSeparatorLookup(t.Text)\r\n                    .Return(sep => Tuple.Create(i + 1, sep),\r\n                        Tuple.Create(-1, '\0'))).SkipWhile(x => x.Item1 < 0)", span="52-55"];
m4_53 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="Tokenizer.cs", label="var exploded = tokens.Select((t, i) =>\r\n                        replaces.FirstOrDefault(x => x.Item1 == i).ToMaybe()\r\n                            .Return(r => t.Text.Split(r.Item2).Select(Token.Value),\r\n                                Enumerable.Empty<Token>().Concat(new[]{ t })))", span="57-60"];
m4_56 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="Tokenizer.cs", label="Exit CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", span="46-46"];
m4_58 [cluster="Unk.SkipWhile", file="Tokenizer.cs", label="Entry Unk.SkipWhile", span=""];
m4_8 [cluster="string.StartsWith(string, System.StringComparison)", file="Tokenizer.cs", label="Entry string.StartsWith(string, System.StringComparison)", span="0-0"];
m4_111 [cluster="CommandLine.Core.Token.Name(string)", file="Tokenizer.cs", label="Entry CommandLine.Core.Token.Name(string)", span="19-19"];
m4_132 [cluster="System.Action<T>.Invoke(T)", file="Tokenizer.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m4_30 [cluster="Unk.Any", file="Tokenizer.cs", label="Entry Unk.Any", span=""];
m4_9 [cluster="CommandLine.Core.Token.Value(string)", file="Tokenizer.cs", label="Entry CommandLine.Core.Token.Value(string)", span="24-24"];
m4_13 [cluster="Unk.IsName", file="Tokenizer.cs", label="Entry Unk.IsName", span=""];
m4_32 [cluster="System.Func<T, TResult>.Invoke(T)", file="Tokenizer.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m4_15 [cluster="Unk.Where", file="Tokenizer.cs", label="Entry Unk.Where", span=""];
m4_78 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="Tokenizer.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m4_69 [cluster="Unk.Create", file="Tokenizer.cs", label="Entry Unk.Create", span=""];
m4_112 [cluster="string.Substring(int, int)", file="Tokenizer.cs", label="Entry string.Substring(int, int)", span="0-0"];
m4_113 [cluster="string.String(char, int)", file="Tokenizer.cs", label="Entry string.String(char, int)", span="0-0"];
m4_77 [cluster="Unk.ToMaybe", file="Tokenizer.cs", label="Entry Unk.ToMaybe", span=""];
m4_64 [cluster="System.Tuple.Create<T1, T2>(T1, T2)", file="Tokenizer.cs", label="Entry System.Tuple.Create<T1, T2>(T1, T2)", span="0-0"];
m4_37 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="37-37"];
m4_62 [cluster="lambda expression", file="Tokenizer.cs", label="optionSequenceWithSeparatorLookup(t.Text)\r\n                    .Return(sep => Tuple.Create(i + 1, sep),\r\n                        Tuple.Create(-1, '\0'))", span="53-55"];
m4_87 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="62-62"];
m4_61 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="52-55"];
m4_70 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="55-55"];
m4_74 [cluster="lambda expression", file="Tokenizer.cs", label="replaces.FirstOrDefault(x => x.Item1 == i).ToMaybe()\r\n                            .Return(r => t.Text.Split(r.Item2).Select(Token.Value),\r\n                                Enumerable.Empty<Token>().Concat(new[]{ t }))", span="58-60"];
m4_63 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="52-55"];
m4_66 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="54-54"];
m4_73 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="57-60"];
m4_89 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="62-62"];
m4_88 [cluster="lambda expression", file="Tokenizer.cs", label=x, span="62-62"];
m4_19 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="30-30"];
m4_84 [cluster="lambda expression", file="Tokenizer.cs", label="t.Text.Split(r.Item2).Select(Token.Value)", span="59-59"];
m4_67 [cluster="lambda expression", file="Tokenizer.cs", label="Tuple.Create(i + 1, sep)", span="54-54"];
m4_72 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="55-55"];
m4_71 [cluster="lambda expression", file="Tokenizer.cs", label="x.Item1 < 0", span="55-55"];
m4_75 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="57-60"];
m4_80 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="58-58"];
m4_83 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="59-59"];
m4_68 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="54-54"];
m4_81 [cluster="lambda expression", file="Tokenizer.cs", label="x.Item1 == i", span="58-58"];
m4_20 [cluster="lambda expression", file="Tokenizer.cs", label="!unkTokens.Contains(x)", span="30-30"];
m4_48 [cluster="lambda expression", file="Tokenizer.cs", label="tokens.Concat(values)", span="41-41"];
m4_21 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="30-30"];
m4_44 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="40-40"];
m4_85 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="59-59"];
m4_82 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="58-58"];
m4_41 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="39-39"];
m4_47 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="41-41"];
m4_49 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="41-41"];
m4_46 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="40-40"];
m4_45 [cluster="lambda expression", file="Tokenizer.cs", label="!arg.EqualsOrdinal(''--'')", span="40-40"];
m4_43 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="39-39"];
m4_42 [cluster="lambda expression", file="Tokenizer.cs", label="!arg.EqualsOrdinal(''--'')", span="39-39"];
m4_38 [cluster="lambda expression", file="Tokenizer.cs", label="arg.EqualsOrdinal(''--'')", span="37-37"];
m4_39 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="37-37"];
m4_34 [cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="Tokenizer.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0"];
m4_10 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="Entry CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", span="112-112"];
m4_117 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="value.Length > 2 && value.StartsWith(''--'', StringComparison.Ordinal)", span="116-116"];
m4_128 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="yield return Token.Value(parts[1]);", span="132-132"];
m4_121 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="yield return Token.Name(text);", span="122-122"];
m4_122 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="yield break;", span="123-123"];
m4_125 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="yield break;", span="128-128"];
m4_127 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="yield return Token.Name(parts[0]);", span="131-131"];
m4_118 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="var text = value.Substring(2)", span="118-118"];
m4_124 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="onError(new BadFormatTokenError(value))", span="127-127"];
m4_126 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="var parts = text.Split('=')", span="130-130"];
m4_120 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="equalIndex <= 0", span="120-120"];
m4_123 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="equalIndex == 1", span="125-125"];
m4_119 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="var equalIndex = text.IndexOf('=')", span="119-119"];
m4_129 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="Exit CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", span="112-112"];
m4_60 [cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SuccessfulMessages<TSuccess, TMessage>()", file="Tokenizer.cs", label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SuccessfulMessages<TSuccess, TMessage>()", span="12-12"];
m4_33 [cluster="System.Collections.Generic.IEnumerable<TSource>.SkipWhile<TSource>(System.Func<TSource, bool>)", file="Tokenizer.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.SkipWhile<TSource>(System.Func<TSource, bool>)", span="0-0"];
m4_17 [cluster="Unk.Concat", file="Tokenizer.cs", label="Entry Unk.Concat", span=""];
m4_36 [cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.Map<TSuccess, TMessage, TResult>(System.Func<TSuccess, TResult>)", file="Tokenizer.cs", label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.Map<TSuccess, TMessage, TResult>(System.Func<TSuccess, TResult>)", span="534-534"];
m4_40 [cluster="string.EqualsOrdinal(string)", file="Tokenizer.cs", label="Entry string.EqualsOrdinal(string)", span="35-35"];
m4_31 [cluster="System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", file="Tokenizer.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", span="0-0"];
m4_130 [cluster="string.IndexOf(char)", file="Tokenizer.cs", label="Entry string.IndexOf(char)", span="0-0"];
m4_35 [cluster="Unk.Select", file="Tokenizer.cs", label="Entry Unk.Select", span=""];
m4_12 [cluster="Unk.Memorize", file="Tokenizer.cs", label="Entry Unk.Memorize", span=""];
m4_0 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="Tokenizer.cs", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="13-13"];
m4_5 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="Tokenizer.cs", label="return Result.Succeed(tokens.Where(x => !unkTokens.Contains(x)), errors.Concat(from t in unkTokens select new UnknownOptionError(t.Text)));", span="30-30"];
m4_1 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="Tokenizer.cs", label="var errors = new List<Error>()", span="17-17"];
m4_3 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="Tokenizer.cs", label="var tokens = (from arg in arguments\r\n                          from token in !arg.StartsWith(''-'', StringComparison.Ordinal)\r\n                               ? new[] { Token.Value(arg) }\r\n                               : arg.StartsWith(''--'', StringComparison.Ordinal)\r\n                                     ? TokenizeLongName(arg, onError)\r\n                                     : TokenizeShortName(arg, nameLookup)\r\n                          select token).Memorize()", span="20-26"];
m4_4 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="Tokenizer.cs", label="var unkTokens = (from t in tokens where t.IsName() && !nameLookup(t.Text) select t).Memorize()", span="28-28"];
m4_2 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="Tokenizer.cs", label="Action<Error> onError = errors.Add", span="18-18"];
m4_6 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="Tokenizer.cs", label="Exit CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="13-13"];
m4_65 [cluster="Unk.Return", file="Tokenizer.cs", label="Entry Unk.Return", span=""];
m4_115 [cluster="System.Collections.Generic.List<T>.Add(T)", file="Tokenizer.cs", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
m4_57 [cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()", file="Tokenizer.cs", label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()", span="653-653"];
m4_110 [cluster="char.IsDigit(char)", file="Tokenizer.cs", label="Entry char.IsDigit(char)", span="0-0"];
m4_7 [cluster="System.Collections.Generic.List<T>.List()", file="Tokenizer.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m4_16 [cluster="UnknownOptionError.cstr", file="Tokenizer.cs", label="Entry UnknownOptionError.cstr", span=""];
m4_116 [cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="Tokenizer.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0"];
m4_59 [cluster="Unk.SelectMany", file="Tokenizer.cs", label="Entry Unk.SelectMany", span=""];
m4_76 [cluster="Unk.FirstOrDefault", file="Tokenizer.cs", label="Entry Unk.FirstOrDefault", span=""];
m4_86 [cluster="Unk.Split", file="Tokenizer.cs", label="Entry Unk.Split", span=""];
m4_11 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="Entry CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", span="67-67"];
m4_103 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="!seen.Contains(c) && nameLookup(n)", span="95-95"];
m4_101 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="text.Substring(1)", span="92-92"];
m4_100 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="var seen = new List<char> { first[0] }", span="90-90"];
m4_102 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="var n = new string(c, 1)", span="94-94"];
m4_104 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="seen.Add(c)", span="97-97"];
m4_106 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="seen.Count() < text.Length", span="105-105"];
m4_93 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="yield return Token.Value(value);", span="77-77"];
m4_107 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="yield return Token.Value(text.Substring(seen.Count()));", span="107-107"];
m4_90 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="value.Length > 1 || value[0] == '-' || value[1] != '-'", span="71-71"];
m4_94 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="yield break;", span="78-78"];
m4_96 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="yield return Token.Name(text);", span="83-83"];
m4_97 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="yield break;", span="84-84"];
m4_99 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="yield return Token.Name(first);", span="88-88"];
m4_105 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="yield return Token.Name(n);", span="98-98"];
m4_91 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="var text = value.Substring(1)", span="73-73"];
m4_95 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="value.Length == 2", span="81-81"];
m4_98 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="var first = text.Substring(0, 1)", span="87-87"];
m4_92 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="char.IsDigit(text[0])", span="75-75"];
m4_108 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="Exit CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", span="67-67"];
m4_18 [cluster="Unk.Succeed", file="Tokenizer.cs", label="Entry Unk.Succeed", span=""];
m4_114 [cluster="System.Collections.Generic.List<T>.Contains(T)", file="Tokenizer.cs", label="Entry System.Collections.Generic.List<T>.Contains(T)", span="0-0"];
m4_109 [cluster="string.Substring(int)", file="Tokenizer.cs", label="Entry string.Substring(int)", span="0-0"];
m4_136 [file="Tokenizer.cs", label="System.Func<string, CSharpx.Maybe<char>>", span=""];
m4_138 [file="Tokenizer.cs", label=replaces, span=""];
m4_140 [file="Tokenizer.cs", label="CommandLine.Core.Token", span=""];
m4_137 [file="Tokenizer.cs", label=int, span=""];
m4_139 [file="Tokenizer.cs", label=int, span=""];
m4_134 [file="Tokenizer.cs", label=unkTokens, span=""];
m4_135 [file="Tokenizer.cs", label=values, span=""];
m5_62 [cluster="Unk.Just", file="ValueMapper.cs", label="Entry Unk.Just", span=""];
m5_38 [cluster="Unk.Empty", file="ValueMapper.cs", label="Entry Unk.Empty", span=""];
m5_32 [cluster="System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", file="ValueMapper.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", span="31-31"];
m5_0 [cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="Entry CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="14-14"];
m5_1 [cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="var propAndErrors = MapValuesImpl(specProps, values, converter)", span="19-19"];
m5_2 [cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="return Result.Succeed(\r\n                propAndErrors.Select(pe => pe.Item1),\r\n                propAndErrors.Select(pe => pe.Item2)\r\n                    .OfType<Just<Error>>().Select(e => e.Value)\r\n                );", span="21-25"];
m5_3 [cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="Exit CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="14-14"];
m5_50 [cluster="Unk.converter", file="ValueMapper.cs", label="Entry Unk.converter", span=""];
m5_6 [cluster="Unk.>", file="ValueMapper.cs", label="Entry Unk.>", span=""];
m5_4 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="Entry CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="28-28"];
m5_17 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="specProps.Empty()", span="33-33"];
m5_18 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="yield break;", span="35-35"];
m5_22 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="yield return\r\n                    Tuple.Create(pt, pt.Specification.MakeErrorInCaseOfMinConstraint());", span="41-42"];
m5_23 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="yield break;", span="43-43"];
m5_26 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="yield return\r\n                    Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                        pt, Maybe.Just<Error>(new SequenceOutOfRangeError(NameInfo.EmptyName)));", span="51-53"];
m5_27 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="yield break;", span="54-54"];
m5_28 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="yield return\r\n                converter(taken, pt.Property.PropertyType, pt.Specification.TargetType != TargetType.Sequence)\r\n                    .Return(\r\n                        converted => Tuple.Create(pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>()),\r\n                        Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                            pt, Maybe.Just<Error>(new BadFormatConversionError(NameInfo.EmptyName))));", span="57-62"];
m5_30 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="yield return value;", span="66-66"];
m5_19 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="var pt = specProps.First()", span="37-37"];
m5_20 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="var taken = values.Take(pt.Specification.CountOfMaxNumberOfValues().Return(n => n, values.Count()))", span="38-38"];
m5_24 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="var next = specProps.Skip(1).FirstOrDefault(s => s.Specification.IsValue()).ToMaybe()", span="46-46"];
m5_25 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="pt.Specification.Max.IsJust()\r\n                && next.IsNothing()\r\n                && values.Skip(taken.Count()).Any()", span="47-49"];
m5_29 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="MapValuesImpl(specProps.Skip(1), values.Skip(taken.Count()), converter)", span="64-64"];
m5_21 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="taken.Empty()", span="39-39"];
m5_31 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="Exit CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="28-28"];
m5_34 [cluster="CommandLine.Core.Specification.CountOfMaxNumberOfValues()", file="ValueMapper.cs", label="Entry CommandLine.Core.Specification.CountOfMaxNumberOfValues()", span="70-70"];
m5_58 [cluster="CommandLine.Core.Specification.IsValue()", file="ValueMapper.cs", label="Entry CommandLine.Core.Specification.IsValue()", span="15-15"];
m5_45 [cluster="Unk.IsNothing", file="ValueMapper.cs", label="Entry Unk.IsNothing", span=""];
m5_37 [cluster="Unk.Take", file="ValueMapper.cs", label="Entry Unk.Take", span=""];
m5_43 [cluster="Unk.ToMaybe", file="ValueMapper.cs", label="Entry Unk.ToMaybe", span=""];
m5_47 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="ValueMapper.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
m5_40 [cluster="System.Tuple.Create<T1, T2>(T1, T2)", file="ValueMapper.cs", label="Entry System.Tuple.Create<T1, T2>(T1, T2)", span="0-0"];
m5_48 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="ValueMapper.cs", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="335-335"];
m5_59 [cluster="lambda expression", file="ValueMapper.cs", label="Entry lambda expression", span="60-60"];
m5_8 [cluster="lambda expression", file="ValueMapper.cs", label="Entry lambda expression", span="22-22"];
m5_11 [cluster="lambda expression", file="ValueMapper.cs", label="Entry lambda expression", span="23-23"];
m5_14 [cluster="lambda expression", file="ValueMapper.cs", label="Entry lambda expression", span="24-24"];
m5_9 [cluster="lambda expression", file="ValueMapper.cs", label="pe.Item1", span="22-22"];
m5_10 [cluster="lambda expression", file="ValueMapper.cs", label="Exit lambda expression", span="22-22"];
m5_12 [cluster="lambda expression", file="ValueMapper.cs", label="pe.Item2", span="23-23"];
m5_13 [cluster="lambda expression", file="ValueMapper.cs", label="Exit lambda expression", span="23-23"];
m5_15 [cluster="lambda expression", file="ValueMapper.cs", label="e.Value", span="24-24"];
m5_16 [cluster="lambda expression", file="ValueMapper.cs", label="Exit lambda expression", span="24-24"];
m5_60 [cluster="lambda expression", file="ValueMapper.cs", label="Tuple.Create(pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>())", span="60-60"];
m5_52 [cluster="lambda expression", file="ValueMapper.cs", label="Entry lambda expression", span="38-38"];
m5_55 [cluster="lambda expression", file="ValueMapper.cs", label="Entry lambda expression", span="46-46"];
m5_53 [cluster="lambda expression", file="ValueMapper.cs", label=n, span="38-38"];
m5_54 [cluster="lambda expression", file="ValueMapper.cs", label="Exit lambda expression", span="38-38"];
m5_56 [cluster="lambda expression", file="ValueMapper.cs", label="s.Specification.IsValue()", span="46-46"];
m5_57 [cluster="lambda expression", file="ValueMapper.cs", label="Exit lambda expression", span="46-46"];
m5_61 [cluster="lambda expression", file="ValueMapper.cs", label="Exit lambda expression", span="60-60"];
m5_33 [cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="ValueMapper.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0"];
m5_49 [cluster="CSharpx.Maybe.Just<T>(T)", file="ValueMapper.cs", label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124"];
m5_41 [cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="ValueMapper.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0"];
m5_75 [cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", file="ValueMapper.cs", label="Entry CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", span="86-86"];
m5_76 [cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", file="ValueMapper.cs", label="return specification.Min.IsJust()\r\n                ? Maybe.Just<Error>(new SequenceOutOfRangeError(NameInfo.EmptyName))\r\n                : Maybe.Nothing<Error>();", span="88-90"];
m5_77 [cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", file="ValueMapper.cs", label="Exit CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", span="86-86"];
m5_5 [cluster="Unk.Select", file="ValueMapper.cs", label="Entry Unk.Select", span=""];
m5_51 [cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="ValueMapper.cs", label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="324-324"];
m5_39 [cluster="CommandLine.Core.Specification.MakeErrorInCaseOfMinConstraint()", file="ValueMapper.cs", label="Entry CommandLine.Core.Specification.MakeErrorInCaseOfMinConstraint()", span="86-86"];
m5_36 [cluster="Unk.Return", file="ValueMapper.cs", label="Entry Unk.Return", span=""];
m5_74 [cluster="CSharpx.Maybe<T>.FromJust<T>()", file="ValueMapper.cs", label="Entry CSharpx.Maybe<T>.FromJust<T>()", span="342-342"];
m5_64 [cluster="CSharpx.Maybe.Nothing<T>()", file="ValueMapper.cs", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
m5_63 [cluster="Unk.WithValue", file="ValueMapper.cs", label="Entry Unk.WithValue", span=""];
m5_35 [cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="ValueMapper.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0"];
m5_65 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs", label="Entry CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", span="70-70"];
m5_66 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs", label="specification.TargetType", span="72-72"];
m5_70 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs", label="specification.Max.IsJust()", span="77-77"];
m5_71 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs", label="return Maybe.Just(specification.Max.FromJust());", span="79-79"];
m5_67 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs", label="TargetType.Scalar", span="74-74"];
m5_69 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs", label="TargetType.Sequence", span="76-76"];
m5_68 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs", label="return Maybe.Just(1);", span="75-75"];
m5_72 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs", label="return Maybe.Nothing<int>();", span="83-83"];
m5_73 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs", label="Exit CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", span="70-70"];
m5_42 [cluster="Unk.FirstOrDefault", file="ValueMapper.cs", label="Entry Unk.FirstOrDefault", span=""];
m5_44 [cluster="CSharpx.Maybe<T>.IsJust<T>()", file="ValueMapper.cs", label="Entry CSharpx.Maybe<T>.IsJust<T>()", span="326-326"];
m5_46 [cluster="Unk.Count", file="ValueMapper.cs", label="Entry Unk.Count", span=""];
m5_7 [cluster="Unk.Succeed", file="ValueMapper.cs", label="Entry Unk.Succeed", span=""];
m5_78 [file="ValueMapper.cs", label=pt, span=""];
m4_23 -> m4_28  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m4_26 -> m4_44  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_26 -> m4_48  [color=darkseagreen4, key=1, label=values, style=dashed];
m4_25 -> m4_41  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_25 -> m4_27  [color=darkseagreen4, key=1, label=tokenizerResult, style=dashed];
m4_27 -> m4_47  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_24 -> m4_37  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_50 -> m4_55  [color=green, key=1, label="RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>", style=dashed];
m4_50 -> m4_62  [color=darkseagreen4, key=1, label="System.Func<string, CSharpx.Maybe<char>>", style=dashed];
m4_54 -> m4_87  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_52 -> m4_61  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_52 -> m4_70  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_52 -> m4_74  [color=darkseagreen4, key=1, label=replaces, style=dashed];
m4_53 -> m4_73  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_62 -> m4_66  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_61 -> m4_67  [color=darkseagreen4, key=1, label=int, style=dashed];
m4_74 -> m4_80  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_74 -> m4_83  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_73 -> m4_81  [color=darkseagreen4, key=1, label=int, style=dashed];
m4_73 -> m4_84  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m4_10 -> m4_124  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_118 -> m4_121  [color=darkseagreen4, key=1, label=text, style=dashed];
m4_126 -> m4_128  [color=darkseagreen4, key=1, label=parts, style=dashed];
m4_119 -> m4_123  [color=darkseagreen4, key=1, label=equalIndex, style=dashed];
m4_5 -> m4_5  [color=darkseagreen4, key=1, label=t, style=dashed];
m4_5 -> m4_19  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_1 -> m4_5  [color=darkseagreen4, key=1, label=errors, style=dashed];
m4_3 -> m4_5  [color=darkseagreen4, key=1, label=tokens, style=dashed];
m4_4 -> m4_20  [color=darkseagreen4, key=1, label=unkTokens, style=dashed];
m4_11 -> m4_103  [color=darkseagreen4, key=1, label="System.Func<string, bool>", style=dashed];
m4_11 -> m4_95  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_101 -> m4_103  [color=darkseagreen4, key=1, label=c, style=dashed];
m4_101 -> m4_104  [color=darkseagreen4, key=1, label=c, style=dashed];
m4_100 -> m4_103  [color=darkseagreen4, key=1, label=seen, style=dashed];
m4_100 -> m4_104  [color=darkseagreen4, key=1, label=seen, style=dashed];
m4_100 -> m4_106  [color=darkseagreen4, key=1, label=seen, style=dashed];
m4_100 -> m4_107  [color=darkseagreen4, key=1, label=seen, style=dashed];
m4_102 -> m4_105  [color=darkseagreen4, key=1, label=n, style=dashed];
m4_91 -> m4_101  [color=darkseagreen4, key=1, label=text, style=dashed];
m4_91 -> m4_106  [color=darkseagreen4, key=1, label=text, style=dashed];
m4_91 -> m4_107  [color=darkseagreen4, key=1, label=text, style=dashed];
m4_91 -> m4_96  [color=darkseagreen4, key=1, label=text, style=dashed];
m4_136 -> m4_62  [color=darkseagreen4, key=1, label="System.Func<string, CSharpx.Maybe<char>>", style=dashed];
m4_138 -> m4_74  [color=darkseagreen4, key=1, label=replaces, style=dashed];
m4_140 -> m4_84  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m4_137 -> m4_67  [color=darkseagreen4, key=1, label=int, style=dashed];
m4_139 -> m4_81  [color=darkseagreen4, key=1, label=int, style=dashed];
m4_134 -> m4_20  [color=darkseagreen4, key=1, label=unkTokens, style=dashed];
m4_135 -> m4_48  [color=darkseagreen4, key=1, label=values, style=dashed];
m5_2 -> m5_8  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_2 -> m5_11  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_2 -> m5_14  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_4 -> m5_25  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m5_4 -> m5_29  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m5_28 -> m5_59  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_19 -> m5_22  [color=darkseagreen4, key=1, label=pt, style=dashed];
m5_19 -> m5_25  [color=darkseagreen4, key=1, label=pt, style=dashed];
m5_19 -> m5_26  [color=darkseagreen4, key=1, label=pt, style=dashed];
m5_19 -> m5_28  [color=darkseagreen4, key=1, label=pt, style=dashed];
m5_19 -> m5_60  [color=darkseagreen4, key=1, label=pt, style=dashed];
m5_20 -> m5_52  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_20 -> m5_25  [color=darkseagreen4, key=1, label=taken, style=dashed];
m5_20 -> m5_28  [color=darkseagreen4, key=1, label=taken, style=dashed];
m5_20 -> m5_29  [color=darkseagreen4, key=1, label=taken, style=dashed];
m5_24 -> m5_55  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_65 -> m5_70  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m5_65 -> m5_71  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m5_78 -> m5_60  [color=darkseagreen4, key=1, label=pt, style=dashed];
}
