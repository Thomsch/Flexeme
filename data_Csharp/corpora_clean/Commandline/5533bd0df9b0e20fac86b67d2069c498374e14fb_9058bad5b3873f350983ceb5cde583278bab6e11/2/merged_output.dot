digraph  {
d29 [cluster="CommandLine.Text.CopyrightInfo.ToString()", color=green, community=1, label="0: return new StringBuilder(builderSize)\r\n                .Append(CopyrightWord)\r\n                .Append(' ')\r\n                .Append(isSymbolUpper ? SymbolUpper : SymbolLower)\r\n                .Append(' ')\r\n                .Append(FormatYears(copyrightYears))\r\n                .Append(' ')\r\n                .Append(author)\r\n                .ToString();", span="144-152"];
d49 [label="CommandLine.Text.CopyrightInfo", span=""];
d27 [cluster="CommandLine.Text.CopyrightInfo.ToString()", label="attribute != null", span="139-139"];
d30 [cluster="CommandLine.Text.CopyrightInfo.ToString()", label="Exit CommandLine.Text.CopyrightInfo.ToString()", span="137-137"];
d31 [cluster="System.Text.StringBuilder.StringBuilder(int)", label="Entry System.Text.StringBuilder.StringBuilder(int)", span="0-0"];
d32 [cluster="System.Text.StringBuilder.Append(string)", label="Entry System.Text.StringBuilder.Append(string)", span="0-0"];
d33 [cluster="System.Text.StringBuilder.Append(char)", label="Entry System.Text.StringBuilder.Append(char)", span="0-0"];
d34 [cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])", label="Entry CommandLine.Text.CopyrightInfo.FormatYears(int[])", span="161-161"];
d35 [cluster="System.Text.StringBuilder.ToString()", label="Entry System.Text.StringBuilder.ToString()", span="0-0"];
d40 [cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])", color=green, community=0, label="1: i < years.Length", span="169-169"];
d39 [cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])", color=green, community=0, label="1: int i = 0", span="169-169"];
d45 [cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])", color=green, community=0, label="0: i++", span="169-169"];
d41 [cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])", label="yearsPart.Append(years[i].ToString(CultureInfo.InvariantCulture))", span="171-171"];
d46 [cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])", label="return yearsPart.ToString();", span="179-179"];
d38 [cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])", label="var yearsPart = new StringBuilder(years.Length * 6)", span="168-168"];
d42 [cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])", color=green, community=0, label="0: int next = i + 1", span="172-172"];
d44 [cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])", label="yearsPart.Append(years[next] - years[i] > 1 ? '' - '' : '', '')", span="175-175"];
d43 [cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])", label="next < years.Length", span="173-173"];
d10 [cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])", label="this.isSymbolUpper = isSymbolUpper", span="65-65"];
d11 [cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])", label="this.author = author", span="66-66"];
d12 [cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])", label="this.copyrightYears = copyrightYears", span="67-67"];
d13 [cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])", label="builderSize = 12 + author.Length + (4 * copyrightYears.Length) + ExtraLength", span="68-68"];
d21 [cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(System.Reflection.AssemblyCopyrightAttribute)", label="this.attribute = attribute", span="85-85"];
d28 [cluster="CommandLine.Text.CopyrightInfo.ToString()", label="return attribute.Copyright;", span="141-141"];
d26 [cluster="CommandLine.Text.CopyrightInfo.ToString()", label="Entry CommandLine.Text.CopyrightInfo.ToString()", span="137-137"];
d47 [cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])", label="Exit CommandLine.Text.CopyrightInfo.FormatYears(int[])", span="161-161"];
d36 [cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])", label="years.Length == 1", span="163-163"];
d37 [cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])", label="return years[0].ToString(CultureInfo.InvariantCulture);", span="165-165"];
d48 [cluster="int.ToString(System.IFormatProvider)", label="Entry int.ToString(System.IFormatProvider)", span="0-0"];
d4 [cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])", label="Entry CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])", span="59-59"];
d9 [cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])", label="int ExtraLength = 10", span="64-64"];
d14 [cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])", label="Exit CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])", span="59-59"];
d20 [cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(System.Reflection.AssemblyCopyrightAttribute)", label="Entry CommandLine.Text.CopyrightInfo.CopyrightInfo(System.Reflection.AssemblyCopyrightAttribute)", span="83-83"];
d22 [cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(System.Reflection.AssemblyCopyrightAttribute)", label="Exit CommandLine.Text.CopyrightInfo.CopyrightInfo(System.Reflection.AssemblyCopyrightAttribute)", span="83-83"];
d23 [cluster="CommandLine.Text.CopyrightInfo.implicit operator string(CommandLine.Text.CopyrightInfo)", label="Entry CommandLine.Text.CopyrightInfo.implicit operator string(CommandLine.Text.CopyrightInfo)", span="128-128"];
d24 [cluster="CommandLine.Text.CopyrightInfo.implicit operator string(CommandLine.Text.CopyrightInfo)", label="return info.ToString();", span="130-130"];
d5 [cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])", label="string.IsNullOrWhiteSpace(author)", span="61-61"];
d7 [cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])", label="copyrightYears.Length == 0", span="62-62"];
d6 [cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])", label="throw new ArgumentException(''author'');", span="61-61"];
d8 [cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])", label="throw new ArgumentOutOfRangeException(''copyrightYears'');", span="62-62"];
d25 [cluster="CommandLine.Text.CopyrightInfo.implicit operator string(CommandLine.Text.CopyrightInfo)", label="Exit CommandLine.Text.CopyrightInfo.implicit operator string(CommandLine.Text.CopyrightInfo)", span="128-128"];
d15 [cluster="string.IsNullOrWhiteSpace(string)", label="Entry string.IsNullOrWhiteSpace(string)", span="0-0"];
d16 [cluster="System.ArgumentException.ArgumentException(string)", label="Entry System.ArgumentException.ArgumentException(string)", span="0-0"];
d17 [cluster="System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", label="Entry System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", span="0-0"];
m0_15 [cluster="CommandLine.Tests.ValueListAttributeFixture.MockSpecializedList.MockSpecializedList()", file="HeadingInfo.cs", label="Entry CommandLine.Tests.ValueListAttributeFixture.MockSpecializedList.MockSpecializedList()", span="41-41"];
m0_12 [cluster="CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfStringSubType()", file="HeadingInfo.cs", label="Entry CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfStringSubType()", span="73-73"];
m0_13 [cluster="CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfStringSubType()", color=green, community=0, file="HeadingInfo.cs", label="0: new ValueListAttribute(new MockSpecializedList().GetType())", span="75-75"];
m0_14 [cluster="CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfStringSubType()", file="HeadingInfo.cs", label="Exit CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfStringSubType()", span="73-73"];
m0_3 [cluster="CommandLine.ValueListAttribute.ValueListAttribute(System.Type)", file="HeadingInfo.cs", label="Entry CommandLine.ValueListAttribute.ValueListAttribute(System.Type)", span="304-304"];
m0_22 [cluster="CommandLine.Tests.ValueListAttributeFixture.MockOptions.MockOptions()", file="HeadingInfo.cs", label="Entry CommandLine.Tests.ValueListAttributeFixture.MockOptions.MockOptions()", span="45-45"];
m0_27 [cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", file="HeadingInfo.cs", label="Entry CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", span="89-89"];
m0_29 [cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", file="HeadingInfo.cs", label="var values = ValueListAttribute.GetReference(options)", span="93-93"];
m0_28 [cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", file="HeadingInfo.cs", label="var options = new MockOptions()", span="91-91"];
m0_30 [cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", file="HeadingInfo.cs", label="values.Add(''value0'')", span="94-94"];
m0_31 [cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", file="HeadingInfo.cs", label="values.Add(''value1'')", span="95-95"];
m0_32 [cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", file="HeadingInfo.cs", label="values.Add(''value2'')", span="96-96"];
m0_33 [cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", file="HeadingInfo.cs", label="base.ElementsShouldBeEqual(new string[] { ''value0'', ''value1'', ''value2'' }, options.Values)", span="98-98"];
m0_34 [cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", file="HeadingInfo.cs", label="Exit CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", span="89-89"];
m0_16 [cluster="CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", file="HeadingInfo.cs", label="Entry CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", span="79-79"];
m0_20 [cluster="CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", file="HeadingInfo.cs", label="values.GetType().Should().Equal(typeof(List<string>))", span="85-85"];
m0_18 [cluster="CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", file="HeadingInfo.cs", label="IList<string> values = ValueListAttribute.GetReference(options)", span="83-83"];
m0_19 [cluster="CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", file="HeadingInfo.cs", label="values.Should().Not.Be.Null()", span="84-84"];
m0_17 [cluster="CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", file="HeadingInfo.cs", label="var options = new MockOptions()", span="81-81"];
m0_21 [cluster="CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", file="HeadingInfo.cs", label="Exit CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", span="79-79"];
m0_4 [cluster="CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsIncompatible()", file="HeadingInfo.cs", label="Entry CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsIncompatible()", span="61-61"];
m0_5 [cluster="CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsIncompatible()", file="HeadingInfo.cs", label="new ValueListAttribute(new List<object>().GetType())", span="63-63"];
m0_6 [cluster="CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsIncompatible()", file="HeadingInfo.cs", label="Exit CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsIncompatible()", span="61-61"];
m0_35 [cluster="System.Collections.Generic.ICollection<T>.Add(T)", file="HeadingInfo.cs", label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0"];
m0_23 [cluster="CommandLine.ValueListAttribute.GetReference(object)", file="HeadingInfo.cs", label="Entry CommandLine.ValueListAttribute.GetReference(object)", span="328-328"];
m0_8 [cluster="object.GetType()", file="HeadingInfo.cs", label="Entry object.GetType()", span="0-0"];
m0_25 [cluster="Unk.Null", file="HeadingInfo.cs", label="Entry Unk.Null", span=""];
m0_36 [cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual(string[], System.Collections.Generic.IList<string>)", file="HeadingInfo.cs", label="Entry CommandLine.Tests.BaseFixture.ElementsShouldBeEqual(string[], System.Collections.Generic.IList<string>)", span="48-48"];
m0_0 [cluster="CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsNull()", file="HeadingInfo.cs", label="Entry CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsNull()", span="54-54"];
m0_1 [cluster="CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsNull()", file="HeadingInfo.cs", label="new ValueListAttribute(null)", span="56-56"];
m0_2 [cluster="CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsNull()", file="HeadingInfo.cs", label="Exit CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsNull()", span="54-54"];
m0_26 [cluster="Unk.Equal", file="HeadingInfo.cs", label="Entry Unk.Equal", span=""];
m0_24 [cluster="Unk.Should", file="HeadingInfo.cs", label="Entry Unk.Should", span=""];
m0_9 [cluster="CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfString()", file="HeadingInfo.cs", label="Entry CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfString()", span="67-67"];
m0_10 [cluster="CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfString()", file="HeadingInfo.cs", label="new ValueListAttribute(new List<string>().GetType())", span="69-69"];
m0_11 [cluster="CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfString()", file="HeadingInfo.cs", label="Exit CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfString()", span="67-67"];
m0_7 [cluster="System.Collections.Generic.List<T>.List()", file="HeadingInfo.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m0_37 [file="HeadingInfo.cs", label="CommandLine.Tests.ValueListAttributeFixture", span=""];
d29 -> d30  [color=green, key=0, style=solid];
d29 -> d31  [color=green, key=2, style=dotted];
d29 -> d32  [color=green, key=2, style=dotted];
d29 -> d33  [color=green, key=2, style=dotted];
d29 -> d34  [color=green, key=2, style=dotted];
d29 -> d35  [color=green, key=2, style=dotted];
d49 -> d29  [color=green, key=1, label="CommandLine.Text.CopyrightInfo", style=dashed];
d49 -> d10  [color=darkseagreen4, key=1, label="CommandLine.Text.CopyrightInfo", style=dashed];
d49 -> d11  [color=darkseagreen4, key=1, label="CommandLine.Text.CopyrightInfo", style=dashed];
d49 -> d12  [color=darkseagreen4, key=1, label="CommandLine.Text.CopyrightInfo", style=dashed];
d49 -> d13  [color=darkseagreen4, key=1, label="CommandLine.Text.CopyrightInfo", style=dashed];
d49 -> d21  [color=darkseagreen4, key=1, label="CommandLine.Text.CopyrightInfo", style=dashed];
d49 -> d27  [color=darkseagreen4, key=1, label="CommandLine.Text.CopyrightInfo", style=dashed];
d49 -> d28  [color=darkseagreen4, key=1, label="CommandLine.Text.CopyrightInfo", style=dashed];
d27 -> d29  [color=green, key=0, style=solid];
d27 -> d28  [key=0, style=solid];
d30 -> d26  [color=blue, key=0, style=bold];
d34 -> d40  [color=green, key=1, label="int[]", style=dashed];
d34 -> d36  [key=0, style=solid];
d34 -> d37  [color=darkseagreen4, key=1, label="int[]", style=dashed];
d34 -> d38  [color=darkseagreen4, key=1, label="int[]", style=dashed];
d34 -> d41  [color=darkseagreen4, key=1, label="int[]", style=dashed];
d34 -> d43  [color=darkseagreen4, key=1, label="int[]", style=dashed];
d34 -> d44  [color=darkseagreen4, key=1, label="int[]", style=dashed];
d40 -> d40  [color=green, key=3, label="Local variable int i", style=bold];
d40 -> d41  [color=green, key=0, style=solid];
d40 -> d46  [color=green, key=0, style=solid];
d39 -> d40  [color=green, key=0, style=solid];
d39 -> d41  [color=green, key=1, label=i, style=dashed];
d39 -> d42  [color=green, key=1, label=i, style=dashed];
d39 -> d44  [color=green, key=1, label=i, style=dashed];
d39 -> d45  [color=green, key=1, label=i, style=dashed];
d45 -> d40  [color=green, key=0, style=solid];
d45 -> d45  [color=green, key=1, label=i, style=dashed];
d41 -> d42  [color=green, key=0, style=solid];
d41 -> d32  [key=2, style=dotted];
d41 -> d48  [key=2, style=dotted];
d46 -> d35  [key=2, style=dotted];
d46 -> d47  [key=0, style=solid];
d38 -> d39  [color=green, key=0, style=solid];
d38 -> d31  [key=2, style=dotted];
d38 -> d41  [color=darkseagreen4, key=1, label=yearsPart, style=dashed];
d38 -> d46  [color=darkseagreen4, key=1, label=yearsPart, style=dashed];
d38 -> d44  [color=darkseagreen4, key=1, label=yearsPart, style=dashed];
d42 -> d43  [color=green, key=0, style=solid];
d42 -> d44  [color=green, key=1, label=next, style=dashed];
d44 -> d45  [color=green, key=0, style=solid];
d44 -> d32  [key=2, style=dotted];
d43 -> d45  [color=green, key=0, style=solid];
d43 -> d44  [key=0, style=solid];
d10 -> d11  [key=0, style=solid];
d11 -> d12  [key=0, style=solid];
d12 -> d13  [key=0, style=solid];
d13 -> d14  [key=0, style=solid];
d21 -> d22  [key=0, style=solid];
d28 -> d30  [key=0, style=solid];
d26 -> d27  [key=0, style=solid];
d47 -> d34  [color=blue, key=0, style=bold];
d36 -> d38  [key=0, style=solid];
d36 -> d37  [key=0, style=solid];
d37 -> d47  [key=0, style=solid];
d37 -> d48  [key=2, style=dotted];
d4 -> d10  [color=darkseagreen4, key=1, label=bool, style=dashed];
d4 -> d11  [color=darkseagreen4, key=1, label=string, style=dashed];
d4 -> d12  [color=darkseagreen4, key=1, label="params int[]", style=dashed];
d4 -> d13  [color=darkseagreen4, key=1, label=string, style=dashed];
d4 -> d5  [key=0, style=solid];
d4 -> d7  [color=darkseagreen4, key=1, label="params int[]", style=dashed];
d9 -> d10  [key=0, style=solid];
d9 -> d13  [color=darkseagreen4, key=1, label=ExtraLength, style=dashed];
d9 -> d9  [color=darkorchid, key=3, label="Local variable int ExtraLength", style=bold];
d14 -> d4  [color=blue, key=0, style=bold];
d20 -> d21  [key=0, style=solid];
d22 -> d20  [color=blue, key=0, style=bold];
d23 -> d26  [color=darkorchid, key=3, label="method methodReturn string op_Implicit", style=bold];
d23 -> d24  [key=0, style=solid];
d24 -> d26  [key=2, style=dotted];
d24 -> d25  [key=0, style=solid];
d5 -> d6  [key=0, style=solid];
d5 -> d7  [key=0, style=solid];
d5 -> d15  [key=2, style=dotted];
d7 -> d9  [key=0, style=solid];
d7 -> d8  [key=0, style=solid];
d6 -> d14  [key=0, style=solid];
d6 -> d16  [key=2, style=dotted];
d8 -> d14  [key=0, style=solid];
d8 -> d17  [key=2, style=dotted];
d25 -> d23  [color=blue, key=0, style=bold];
m0_12 -> m0_13  [color=green, key=0, style=solid];
m0_13 -> m0_14  [color=green, key=0, style=solid];
m0_13 -> m0_3  [color=green, key=2, style=dotted];
m0_13 -> m0_15  [color=green, key=2, style=dotted];
m0_13 -> m0_8  [color=green, key=2, style=dotted];
m0_14 -> m0_12  [color=blue, key=0, style=bold];
m0_27 -> m0_28  [key=0, style=solid];
m0_29 -> m0_23  [key=2, style=dotted];
m0_29 -> m0_30  [key=0, style=solid];
m0_29 -> m0_31  [color=darkseagreen4, key=1, label=values, style=dashed];
m0_29 -> m0_32  [color=darkseagreen4, key=1, label=values, style=dashed];
m0_28 -> m0_22  [key=2, style=dotted];
m0_28 -> m0_29  [key=0, style=solid];
m0_28 -> m0_33  [color=darkseagreen4, key=1, label=options, style=dashed];
m0_30 -> m0_31  [key=0, style=solid];
m0_30 -> m0_35  [key=2, style=dotted];
m0_31 -> m0_32  [key=0, style=solid];
m0_31 -> m0_35  [key=2, style=dotted];
m0_32 -> m0_33  [key=0, style=solid];
m0_32 -> m0_35  [key=2, style=dotted];
m0_33 -> m0_34  [key=0, style=solid];
m0_33 -> m0_36  [key=2, style=dotted];
m0_34 -> m0_27  [color=blue, key=0, style=bold];
m0_16 -> m0_17  [key=0, style=solid];
m0_20 -> m0_8  [key=2, style=dotted];
m0_20 -> m0_21  [key=0, style=solid];
m0_20 -> m0_24  [key=2, style=dotted];
m0_20 -> m0_26  [key=2, style=dotted];
m0_18 -> m0_20  [color=darkseagreen4, key=1, label=values, style=dashed];
m0_18 -> m0_19  [key=0, style=solid];
m0_18 -> m0_23  [key=2, style=dotted];
m0_19 -> m0_20  [key=0, style=solid];
m0_19 -> m0_24  [key=2, style=dotted];
m0_19 -> m0_25  [key=2, style=dotted];
m0_17 -> m0_18  [key=0, style=solid];
m0_17 -> m0_22  [key=2, style=dotted];
m0_21 -> m0_16  [color=blue, key=0, style=bold];
m0_4 -> m0_5  [key=0, style=solid];
m0_5 -> m0_3  [key=2, style=dotted];
m0_5 -> m0_8  [key=2, style=dotted];
m0_5 -> m0_6  [key=0, style=solid];
m0_5 -> m0_7  [key=2, style=dotted];
m0_6 -> m0_4  [color=blue, key=0, style=bold];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_3  [key=2, style=dotted];
m0_1 -> m0_2  [key=0, style=solid];
m0_2 -> m0_0  [color=blue, key=0, style=bold];
m0_9 -> m0_10  [key=0, style=solid];
m0_10 -> m0_3  [key=2, style=dotted];
m0_10 -> m0_8  [key=2, style=dotted];
m0_10 -> m0_11  [key=0, style=solid];
m0_10 -> m0_7  [key=2, style=dotted];
m0_11 -> m0_9  [color=blue, key=0, style=bold];
m0_37 -> m0_33  [color=darkseagreen4, key=1, label="CommandLine.Tests.ValueListAttributeFixture", style=dashed];
}
