digraph  {
n0 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_empty_instance()", label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Create_empty_instance()", span="16-16"];
n1 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_empty_instance()", color=red, community=0, label="0: Assert.Equal(string.Empty, new HelpText().ToString())", span="18-18"];
n2 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_empty_instance()", label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Create_empty_instance()", span="16-16"];
n3 [cluster="CommandLine.Text.HelpText.HelpText()", label="Entry CommandLine.Text.HelpText.HelpText()", span="34-34"];
n4 [cluster="CommandLine.Text.HelpText.ToString()", label="Entry CommandLine.Text.HelpText.ToString()", span="453-453"];
n5 [cluster="Unk.Equal", label="Entry Unk.Equal", span=""];
n6 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", span="22-22"];
n7 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", label="var sut =\r\n                new HelpText(new HeadingInfo(''Unit-tests'', ''2.0''), new CopyrightInfo(true, ''Author'', 2005, 2013))\r\n                    .AddPreOptionsLine(''pre-options line 1'')\r\n                    .AddPreOptionsLine(''pre-options line 2'')\r\n                    .AddPostOptionsLine(''post-options line 1'')\r\n                    .AddPostOptionsLine(''post-options line 2'')", span="26-31"];
n8 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", label="var lines = sut.ToString().ToNotEmptyLines()", span="34-34"];
n16 [cluster="CommandLine.Text.HelpText.HelpText(string, string)", label="Entry CommandLine.Text.HelpText.HelpText(string, string)", span="80-80"];
n17 [cluster="CommandLine.Text.HeadingInfo.HeadingInfo(string, string)", label="Entry CommandLine.Text.HeadingInfo.HeadingInfo(string, string)", span="27-27"];
n18 [cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])", label="Entry CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])", span="60-60"];
n19 [cluster="CommandLine.Text.HelpText.AddPreOptionsLine(string)", label="Entry CommandLine.Text.HelpText.AddPreOptionsLine(string)", span="330-330"];
n20 [cluster="CommandLine.Text.HelpText.AddPostOptionsLine(string)", label="Entry CommandLine.Text.HelpText.AddPostOptionsLine(string)", span="340-340"];
n9 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", color=red, community=0, label="0: Assert.Equal(''Unit-tests 2.0'', lines[0])", span="36-36"];
n21 [cluster="string.ToNotEmptyLines()", label="Entry string.ToNotEmptyLines()", span="10-10"];
n10 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", color=red, community=0, label="0: Assert.Equal(''Copyright (C) 2005 - 2013 Author'', lines[1])", span="37-37"];
n11 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", color=red, community=0, label="0: Assert.Equal(''pre-options line 1'', lines[2])", span="38-38"];
n12 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", color=red, community=0, label="0: Assert.Equal(''pre-options line 2'', lines[3])", span="39-39"];
n13 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", color=red, community=0, label="0: Assert.Equal(''post-options line 1'', lines[4])", span="40-40"];
n14 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", color=red, community=0, label="0: Assert.Equal(''post-options line 2'', lines[5])", span="41-41"];
n15 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", span="22-22"];
n22 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", span="46-46"];
n23 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", label="var sut = new HelpText { AddDashesToOption = true }\r\n                .AddPreOptionsLine(''pre-options'')\r\n                .AddOptions(new FakeOptions())\r\n                .AddPostOptionsLine(''post-options'')", span="50-53"];
n24 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", label="var lines = sut.ToString().ToNotEmptyLines().TrimStringArray()", span="57-57"];
n34 [cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6"];
n35 [cluster="CommandLine.Text.HelpText.AddOptions<T>(T)", label="Entry CommandLine.Text.HelpText.AddOptions<T>(T)", span="350-350"];
n25 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", label="Assert.Equal(''pre-options'', lines[0])", span="58-58"];
n36 [cluster="System.Collections.Generic.IEnumerable<string>.TrimStringArray()", label="Entry System.Collections.Generic.IEnumerable<string>.TrimStringArray()", span="15-15"];
n26 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", label="Assert.Equal(''--stringvalue    Define a string value here.'', lines[1])", span="59-59"];
n27 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", label="Assert.Equal(''-i               Define a int sequence here.'', lines[2])", span="60-60"];
n28 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", label="Assert.Equal(''-x               Define a boolean or switch value here.'', lines[3])", span="61-61"];
n29 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", label="Assert.Equal(''--help           Display this help screen.'', lines[4])", span="62-62"];
n30 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", label="Assert.Equal(''--version        Display version information.'', lines[5])", span="63-63"];
n31 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", label="Assert.Equal(''value pos. 0     Define a long value here.'', lines[6])", span="64-64"];
n32 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", label="Assert.Equal(''post-options'', lines[7])", span="65-65"];
n33 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", span="46-46"];
n37 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", span="70-70"];
n38 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", label="var sut = new HelpText { AddDashesToOption = true, AddEnumValuesToHelpText = true }\r\n                .AddPreOptionsLine(''pre-options'')\r\n                .AddOptions(new FakeOptionsWithHelpTextEnum())\r\n                .AddPostOptionsLine(''post-options'')", span="74-77"];
n39 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", label="var lines = sut.ToString().ToNotEmptyLines().TrimStringArray()", span="81-81"];
n48 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithHelpTextEnum.FakeOptionsWithHelpTextEnum()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithHelpTextEnum.FakeOptionsWithHelpTextEnum()", span="11-11"];
n40 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", color=red, community=0, label="0: Assert.Equal(''pre-options'', lines[0])", span="82-82"];
n41 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", color=red, community=0, label="0: Assert.Equal(''--stringvalue    Define a string value here.'', lines[1])", span="83-83"];
n42 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", color=red, community=0, label="0: Assert.Equal(''--shape          Define a enum value here. Valid values: Circle, Square,'', lines[2])", span="84-84"];
n43 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", color=red, community=0, label="0: Assert.Equal(''Triangle'', lines[3])", span="85-85"];
n44 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", color=red, community=0, label="0: Assert.Equal(''--help           Display this help screen.'', lines[4])", span="86-86"];
n45 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", color=red, community=0, label="0: Assert.Equal(''--version        Display version information.'', lines[5])", span="87-87"];
n46 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", color=red, community=0, label="0: Assert.Equal(''post-options'', lines[6])", span="88-88"];
n47 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", span="70-70"];
n49 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", span="93-93"];
n50 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", label="var sut = new HelpText { AddDashesToOption = true }\r\n                .AddPreOptionsLine(''pre-options'')\r\n                .AddOptions(new FakeOptionsWithHelpTextEnum())\r\n                .AddPostOptionsLine(''post-options'')", span="97-100"];
n51 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", label="var lines = sut.ToString().ToNotEmptyLines().TrimStringArray()", span="104-104"];
n52 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", color=red, community=0, label="0: Assert.Equal(''pre-options'', lines[0])", span="105-105"];
n53 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", color=red, community=0, label="0: Assert.Equal(''--stringvalue    Define a string value here.'', lines[1])", span="106-106"];
n54 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", color=red, community=0, label="0: Assert.Equal(''--shape          Define a enum value here.'', lines[2])", span="107-107"];
n55 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", color=red, community=0, label="0: Assert.Equal(''--help           Display this help screen.'', lines[3])", span="108-108"];
n56 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", color=red, community=0, label="0: Assert.Equal(''--version        Display version information.'', lines[4])", span="109-109"];
n57 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", color=red, community=0, label="0: Assert.Equal(''post-options'', lines[5])", span="110-110"];
n58 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", span="93-93"];
n59 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_defined_MetaValue_should_be_rendered()", label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.When_defined_MetaValue_should_be_rendered()", span="115-115"];
n60 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_defined_MetaValue_should_be_rendered()", label="var sut = new HelpText(''Meta Value.'')\r\n                .AddOptions(new FakeOptionsWithMetaValue())", span="119-120"];
n61 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_defined_MetaValue_should_be_rendered()", label="var lines = sut.ToString().ToNotEmptyLines().TrimStringArray()", span="123-123"];
n64 [cluster="CommandLine.Text.HelpText.HelpText(string)", label="Entry CommandLine.Text.HelpText.HelpText(string)", span="57-57"];
n65 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithMetaValue.FakeOptionsWithMetaValue()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMetaValue.FakeOptionsWithMetaValue()", span="4-4"];
n62 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_defined_MetaValue_should_be_rendered()", color=red, community=0, label="0: Assert.Equal(''i FILE, input-file=FILE    Required. Specify input FILE to be processed.'', lines[2])", span="125-125"];
n63 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_defined_MetaValue_should_be_rendered()", label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.When_defined_MetaValue_should_be_rendered()", span="115-115"];
n66 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()", label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()", span="130-130"];
n67 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()", label="var sut = new HelpText(new HeadingInfo(''CommandLine.Tests.dll'', ''1.9.4.131''))", span="134-134"];
n68 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()", label="sut.MaximumDisplayWidth = 40", span="135-135"];
n69 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()", label="sut.AddOptions(new FakeOptionsWithLongDescription())", span="136-136"];
n70 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()", label="var lines = sut.ToString().Split(new[] { Environment.NewLine }, StringSplitOptions.None)", span="139-139"];
n77 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithLongDescription.FakeOptionsWithLongDescription()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithLongDescription.FakeOptionsWithLongDescription()", span="22-22"];
n71 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()", label="lines[2].Should().Be(''  v, verbose    This is the description'')", span="140-140"];
n78 [cluster="string.Split(string[], System.StringSplitOptions)", label="Entry string.Split(string[], System.StringSplitOptions)", span="0-0"];
n72 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()", label="lines[3].Should().Be(''                of the verbosity to '')", span="142-142"];
n73 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()", label="lines[4].Should().Be(''                test out the wrapping '')", span="143-143"];
n74 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()", label="lines[5].Should().Be(''                capabilities of the '')", span="144-144"];
n75 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()", label="lines[6].Should().Be(''                Help Text.'')", span="145-145"];
n79 [cluster="Unk.Should", label="Entry Unk.Should", span=""];
n80 [cluster="Unk.Be", label="Entry Unk.Be", span=""];
n76 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()", label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()", span="130-130"];
n81 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", span="150-150"];
n82 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", label="var sut = new HelpText(new HeadingInfo(''CommandLine.Tests.dll'', ''1.9.4.131''))", span="154-154"];
n83 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", label="sut.MaximumDisplayWidth = 40", span="155-155"];
n84 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", label="sut.AddOptions(new FakeOptionsWithLongDescriptionAndNoSpaces())", span="156-156"];
n85 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", color=red, community=0, label="0: var lines = sut.ToString().Split(new[] { Environment.NewLine }, StringSplitOptions.None)", span="159-159"];
n93 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithLongDescriptionAndNoSpaces.FakeOptionsWithLongDescriptionAndNoSpaces()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithLongDescriptionAndNoSpaces.FakeOptionsWithLongDescriptionAndNoSpaces()", span="31-31"];
n86 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", color=red, community=0, label="0: lines[2].Should().Be(''  v, verbose    Before '')", span="160-160"];
n87 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", color=red, community=0, label="0: lines[3].Should().Be(''                012345678901234567890123'')", span="161-161"];
n88 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", color=red, community=0, label="0: lines[4].Should().Be(''                After'')", span="162-162"];
n89 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", color=red, community=0, label="0: lines[5].Should().Be(''  input-file    Before '')", span="163-163"];
n90 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", color=red, community=0, label="0: lines[6].Should().Be(''                012345678901234567890123'')", span="164-164"];
n91 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", color=red, community=0, label="0: lines[7].Should().Be(''                456789 After'')", span="165-165"];
n92 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", span="150-150"];
n94 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", span="170-170"];
n95 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", label="var sut = new HelpText(''Heading Info.'')", span="174-174"];
n96 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", label="sut.MaximumDisplayWidth = 40", span="175-175"];
n97 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", label="sut.AddPreOptionsLine(''Before 0123456789012345678901234567890123456789012 After'')\r\n                .AddOptions(new FakeOptionsForHelp())\r\n                .AddPostOptionsLine(''Before 0123456789012345678901234567890123456789 After'')", span="176-178"];
n98 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", color=red, community=0, label="0: var lines = sut.ToString().Split(new[] { Environment.NewLine }, StringSplitOptions.None)", span="181-181"];
n106 [cluster="CommandLine.Tests.Fakes.FakeOptionsForHelp.FakeOptionsForHelp()", label="Entry CommandLine.Tests.Fakes.FakeOptionsForHelp.FakeOptionsForHelp()", span="4-4"];
n99 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", label="lines[1].Should().Be(''Before '')", span="182-182"];
n100 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", label="lines[2].Should().Be(''0123456789012345678901234567890123456789'')", span="183-183"];
n101 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", label="lines[3].Should().Be(''012 After'')", span="184-184"];
n102 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", label="lines[lines.Length - 3].Should().Be(''Before '')", span="185-185"];
n103 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", label="lines[lines.Length - 2].Should().Be(''0123456789012345678901234567890123456789'')", span="186-186"];
n104 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", label="lines[lines.Length - 1].Should().Be('' After'')", span="187-187"];
n105 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", span="170-170"];
n107 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", span="193-193"];
n108 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", label="var fakeResult = new NotParsed<object>(\r\n                new NullInstance(),\r\n                new Error[]\r\n                    {\r\n                        new BadFormatTokenError(''badtoken''),\r\n                        new MissingValueOptionError(new NameInfo(''x'', ''switch'')),\r\n                        new UnknownOptionError(''unknown''),\r\n                        new MissingRequiredOptionError(new NameInfo('''', ''missing'')),\r\n                        //new MutuallyExclusiveSetError(new NameInfo(''z'', ''''), string.Empty),\r\n                        new SequenceOutOfRangeError(new NameInfo(''s'', ''sequence'')),\r\n                        new NoVerbSelectedError(),\r\n                        new BadVerbSelectedError(''badverb''),\r\n                        new HelpRequestedError(), // should be ignored\r\n                        new HelpVerbRequestedError(null, null, false) // should be ignored \r\n                    })", span="196-210"];
n109 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", color=red, community=0, label="1: Func<Error, string> fakeRenderer = err =>\r\n                {\r\n                    switch (err.Tag)\r\n                    {\r\n                        case ErrorType.BadFormatTokenError:\r\n                            return ''ERR '' + ((BadFormatTokenError)err).Token;\r\n                        case ErrorType.MissingValueOptionError:\r\n                            return ''ERR '' + ((MissingValueOptionError)err).NameInfo.NameText;\r\n                        case ErrorType.UnknownOptionError:\r\n                            return ''ERR '' + ((UnknownOptionError)err).Token;\r\n                        case ErrorType.MissingRequiredOptionError:\r\n                            return ''ERR '' + ((MissingRequiredOptionError)err).NameInfo.NameText;\r\n                        //case ErrorType.MutuallyExclusiveSetError:\r\n                        //    return ''ERR '' + ((MutuallyExclusiveSetError)err).NameInfo.NameText;\r\n                        case ErrorType.SequenceOutOfRangeError:\r\n                            return ''ERR '' + ((SequenceOutOfRangeError)err).NameInfo.NameText;\r\n                        case ErrorType.NoVerbSelectedError:\r\n                            return ''ERR no-verb-selected'';\r\n                        case ErrorType.BadVerbSelectedError:\r\n                            return ''ERR '' + ((BadVerbSelectedError)err).Token;\r\n                        default:\r\n                            throw new InvalidOperationException();\r\n                    }\r\n                }", span="211-234"];
n121 [cluster="CommandLine.NotParsed<T>.NotParsed(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", label="Entry CommandLine.NotParsed<T>.NotParsed(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="142-142"];
n122 [cluster="CommandLine.NullInstance.NullInstance()", label="Entry CommandLine.NullInstance.NullInstance()", span="9-9"];
n123 [cluster="CommandLine.BadFormatTokenError.BadFormatTokenError(string)", label="Entry CommandLine.BadFormatTokenError.BadFormatTokenError(string)", span="196-196"];
n124 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="269-269"];
n125 [cluster="CommandLine.NameInfo.NameInfo(string, string)", label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20"];
n126 [cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="280-280"];
n127 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="291-291"];
n128 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="335-335"];
n129 [cluster="CommandLine.NoVerbSelectedError.NoVerbSelectedError()", label="Entry CommandLine.NoVerbSelectedError.NoVerbSelectedError()", span="421-421"];
n130 [cluster="CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", label="Entry CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", span="357-357"];
n131 [cluster="CommandLine.HelpRequestedError.HelpRequestedError()", label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="368-368"];
n132 [cluster="CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", label="Entry CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", span="383-383"];
n111 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", label="var errorsText = HelpText.RenderParsingErrorsText(fakeResult, fakeRenderer, fakeMutExclRenderer, 2)", span="239-239"];
n110 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", label="Func<IEnumerable<MutuallyExclusiveSetError>, string> fakeMutExclRenderer =\r\n                _ => string.Empty", span="235-236"];
n135 [cluster="lambda expression", label="err.Tag", span="213-213"];
n137 [cluster="lambda expression", label="return ''ERR '' + ((BadFormatTokenError)err).Token;", span="216-216"];
n139 [cluster="lambda expression", label="return ''ERR '' + ((MissingValueOptionError)err).NameInfo.NameText;", span="218-218"];
n141 [cluster="lambda expression", label="return ''ERR '' + ((UnknownOptionError)err).Token;", span="220-220"];
n143 [cluster="lambda expression", label="return ''ERR '' + ((MissingRequiredOptionError)err).NameInfo.NameText;", span="222-222"];
n145 [cluster="lambda expression", label="return ''ERR '' + ((SequenceOutOfRangeError)err).NameInfo.NameText;", span="226-226"];
n149 [cluster="lambda expression", label="return ''ERR '' + ((BadVerbSelectedError)err).Token;", span="230-230"];
n112 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", label="var lines = errorsText.ToNotEmptyLines()", span="242-242"];
n133 [cluster="CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)", label="Entry CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)", span="416-416"];
n113 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", label="Assert.Equal(''  ERR badtoken'', lines[0])", span="244-244"];
n114 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", label="Assert.Equal(''  ERR x, switch'', lines[1])", span="245-245"];
n115 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", label="Assert.Equal(''  ERR unknown'', lines[2])", span="246-246"];
n116 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", label="Assert.Equal(''  ERR missing'', lines[3])", span="247-247"];
n117 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", label="Assert.Equal(''  ERR s, sequence'', lines[4])", span="249-249"];
n118 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", label="Assert.Equal(''  ERR no-verb-selected'', lines[5])", span="250-250"];
n119 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", label="Assert.Equal(''  ERR badverb'', lines[6])", span="251-251"];
n120 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", span="193-193"];
n134 [cluster="lambda expression", label="Entry lambda expression", span="211-234"];
n136 [cluster="lambda expression", label="ErrorType.BadFormatTokenError", span="215-215"];
n138 [cluster="lambda expression", label="ErrorType.MissingValueOptionError", span="217-217"];
n140 [cluster="lambda expression", label="ErrorType.UnknownOptionError", span="219-219"];
n142 [cluster="lambda expression", label="ErrorType.MissingRequiredOptionError", span="221-221"];
n144 [cluster="lambda expression", label="ErrorType.SequenceOutOfRangeError", span="225-225"];
n146 [cluster="lambda expression", label="ErrorType.NoVerbSelectedError", span="227-227"];
n148 [cluster="lambda expression", label="ErrorType.BadVerbSelectedError", span="229-229"];
n150 [cluster="lambda expression", label="throw new InvalidOperationException();", span="232-232"];
n147 [cluster="lambda expression", label="return ''ERR no-verb-selected'';", span="228-228"];
n151 [cluster="lambda expression", label="Exit lambda expression", span="211-234"];
n152 [cluster="System.InvalidOperationException.InvalidOperationException()", label="Entry System.InvalidOperationException.InvalidOperationException()", span="0-0"];
n153 [cluster="lambda expression", label="Entry lambda expression", span="236-236"];
n154 [cluster="lambda expression", label="string.Empty", span="236-236"];
n155 [cluster="lambda expression", label="Exit lambda expression", span="236-236"];
n156 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", span="256-256"];
n157 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", label="var fakeResult = new NotParsed<FakeOptions>(\r\n                new FakeOptions(),\r\n                new Error[]\r\n                    {\r\n                        new BadFormatTokenError(''badtoken''),\r\n                        new SequenceOutOfRangeError(new NameInfo(''i'', ''''))\r\n                    })", span="259-265"];
n158 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", label="var helpText = HelpText.AutoBuild(fakeResult)", span="268-268"];
n159 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", label="var lines = helpText.ToString().ToNotEmptyLines().TrimStringArray()", span="271-271"];
n170 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", label="Entry CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", span="252-252"];
n160 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", color=red, community=0, label="0: Assert.True(lines[0].StartsWith(''CommandLine'', StringComparison.Ordinal))", span="273-273"];
n161 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", color=red, community=0, label="0: Assert.True(lines[1].StartsWith(''Copyright (c)'', StringComparison.Ordinal))", span="274-274"];
n162 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", color=red, community=0, label="0: Assert.Equal(''ERROR(S):'', lines[2])", span="275-275"];
n163 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", color=red, community=0, label="0: Assert.Equal(''Token 'badtoken' is not recognized.'', lines[3])", span="276-276"];
n164 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", color=red, community=0, label="0: Assert.Equal(''A sequence option 'i' is defined with few items than required.'', lines[4])", span="277-277"];
n165 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", color=red, community=0, label="0: Assert.Equal(''--stringvalue    Define a string value here.'', lines[5])", span="278-278"];
n166 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", color=red, community=0, label="0: Assert.Equal(''-i               Define a int sequence here.'', lines[6])", span="279-279"];
n167 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", color=red, community=0, label="0: Assert.Equal(''-x               Define a boolean or switch value here.'', lines[7])", span="280-280"];
n168 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", color=red, community=0, label="0: Assert.Equal(''--help           Display this help screen.'', lines[8])", span="281-281"];
n171 [cluster="string.StartsWith(string, System.StringComparison)", label="Entry string.StartsWith(string, System.StringComparison)", span="0-0"];
n172 [cluster="Unk.True", label="Entry Unk.True", span=""];
n169 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", span="256-256"];
n173 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", span="286-286"];
n174 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", label="var fakeResult = new NotParsed<object>(\r\n                new NullInstance(),\r\n                new Error[]\r\n                    {\r\n                        new HelpVerbRequestedError(''commit'', typeof(CommitOptions), true)\r\n                    })", span="289-294"];
n175 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", label="var helpText = HelpText.AutoBuild(fakeResult)", span="297-297"];
n176 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", label="var lines = helpText.ToString().ToNotEmptyLines().TrimStringArray()", span="300-300"];
n177 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", color=red, community=0, label="0: Assert.True(lines[0].StartsWith(''CommandLine'', StringComparison.Ordinal))", span="302-302"];
n178 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", color=red, community=0, label="0: Assert.True(lines[1].StartsWith(''Copyright (c)'', StringComparison.Ordinal))", span="303-303"];
n179 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", color=red, community=0, label="0: Assert.Equal(''-p, --patch    Use the interactive patch selection interface to chose which'', lines[2])", span="304-304"];
n180 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", color=red, community=0, label="0: Assert.Equal(''changes to commit.'', lines[3])", span="305-305"];
n181 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", color=red, community=0, label="0: Assert.Equal(''--amend        Used to amend the tip of the current branch.'', lines[4])", span="306-306"];
n182 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", color=red, community=0, label="0: Assert.Equal(''--help         Display this help screen.'', lines[5])", span="307-307"];
n183 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", span="286-286"];
n184 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", span="312-312"];
n185 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", label="var verbTypes = Enumerable.Empty<Type>().Concat(\r\n                new[] { typeof(AddOptions), typeof(CommitOptions), typeof(CloneOptions) })", span="315-316"];
n186 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", label="var fakeResult = new NotParsed<object>(\r\n                new NullInstance(),\r\n                verbTypes,\r\n                new Error[] { new HelpVerbRequestedError(null, null, false) })", span="317-320"];
n197 [cluster="System.Linq.Enumerable.Empty<TResult>()", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
n198 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
n187 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", label="var helpText = HelpText.AutoBuild(fakeResult)", span="323-323"];
n199 [cluster="CommandLine.NotParsed<T>.NotParsed(T, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<CommandLine.Error>)", label="Entry CommandLine.NotParsed<T>.NotParsed(T, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="136-136"];
n188 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", label="var lines = helpText.ToString().ToNotEmptyLines().TrimStringArray()", span="326-326"];
n189 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", color=red, community=0, label="0: Assert.True(lines[0].StartsWith(''CommandLine'', StringComparison.Ordinal))", span="328-328"];
n190 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", color=red, community=0, label="0: Assert.True(lines[1].StartsWith(''Copyright (c)'', StringComparison.Ordinal))", span="329-329"];
n191 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", color=red, community=0, label="0: Assert.Equal(''add        Add file contents to the index.'', lines[2])", span="330-330"];
n192 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", color=red, community=0, label="0: Assert.Equal(''commit     Record changes to the repository.'', lines[3])", span="331-331"];
n193 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", color=red, community=0, label="0: Assert.Equal(''clone      Clone a repository into a new directory.'', lines[4])", span="332-332"];
n194 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", color=red, community=0, label="0: Assert.Equal(''help       Display more information on a specific command.'', lines[5])", span="333-333"];
n195 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", color=red, community=0, label="0: Assert.Equal(''version    Display version information.'', lines[6])", span="334-334"];
n196 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", span="312-312"];
n200 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", span="339-339"];
n201 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", label="var sut = new HelpText { AddDashesToOption = true }\r\n                .AddPreOptionsLine(''pre-options'')\r\n                .AddOptions(new FakeOptionsWithHelpTextValue())\r\n                .AddPostOptionsLine(''post-options'')", span="343-346"];
n202 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", label="var lines = sut.ToString().ToNotEmptyLines().TrimStringArray()", span="350-350"];
n213 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithHelpTextValue.FakeOptionsWithHelpTextValue()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithHelpTextValue.FakeOptionsWithHelpTextValue()", span="6-6"];
n203 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", color=red, community=0, label="0: Assert.Equal(''pre-options'', lines[0])", span="351-351"];
n204 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", color=red, community=0, label="0: Assert.Equal(''--stringvalue=STR            Define a string value here.'', lines[1])", span="352-352"];
n205 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", color=red, community=0, label="0: Assert.Equal(''-i INTSEQ                    Define a int sequence here.'', lines[2])", span="353-353"];
n206 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", color=red, community=0, label="0: Assert.Equal(''-x                           Define a boolean or switch value here.'', lines[3])", span="354-354"];
n207 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", color=red, community=0, label="0: Assert.Equal(''--help                       Display this help screen.'', lines[4])", span="355-355"];
n208 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", color=red, community=0, label="0: Assert.Equal(''--version                    Display version information.'', lines[5])", span="356-356"];
n209 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", color=red, community=0, label="0: Assert.Equal(''number (pos. 0) NUM          Define a long value here.'', lines[6])", span="357-357"];
n210 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", color=red, community=0, label="0: Assert.Equal(''paintcolor (pos. 1) COLOR    Define a color value here.'', lines[7])", span="358-358"];
n211 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", color=red, community=0, label="0: Assert.Equal(''post-options'', lines[8])", span="359-359"];
n212 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", span="339-339"];
m0_0 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="13-13"];
m0_1 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", color=green, community=0, file="TokenPartitioner.cs", label="0: var tokenList = tokens.Memorize()", span="16-16"];
m0_2 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", color=green, community=0, file="TokenPartitioner.cs", label="0: var switches = Switch.Partition(tokenList, typeLookup).Memorize()", span="17-17"];
m0_3 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", color=green, community=0, file="TokenPartitioner.cs", label="0: var scalars = Scalar.Partition(tokenList, typeLookup).Memorize()", span="18-18"];
m0_4 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", color=green, community=0, file="TokenPartitioner.cs", label="0: var sequences = Sequence.Partition(tokenList, typeLookup).Memorize()", span="19-19"];
m0_5 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", color=green, community=0, file="TokenPartitioner.cs", label="0: var nonOptions = tokenList\r\n                .Where(t => !switches.Contains(t))\r\n                .Where(t => !scalars.Contains(t))\r\n                .Where(t => !sequences.Contains(t)).Memorize()", span="20-23"];
m0_8 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs", label="return TokenPartitions.Create(\r\n                    KeyValuePairHelper.ForSwitch(switches)\r\n                        .Concat(KeyValuePairHelper.ForScalar(scalars))\r\n                        .Concat(KeyValuePairHelper.ForSequence(sequences)),\r\n                values.Select(t => t.Text),\r\n                errors);", span="28-33"];
m0_6 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", color=green, community=0, file="TokenPartitioner.cs", label="0: var values = nonOptions.Where(v => v.IsValue()).Memorize()", span="24-24"];
m0_7 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", color=green, community=0, file="TokenPartitioner.cs", label="0: var errors = nonOptions.Except(values).Memorize()", span="25-25"];
m0_9 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs", label="Exit CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="13-13"];
m0_26 [cluster="System.Collections.Generic.List<T>.Contains(T)", file="TokenPartitioner.cs", label="Entry System.Collections.Generic.List<T>.Contains(T)", span="0-0"];
m0_12 [cluster="CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12"];
m0_18 [cluster="CommandLine.Core.KeyValuePairHelper.ForScalar(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.KeyValuePairHelper.ForScalar(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="16-16"];
m0_37 [cluster="Unk.IsValue", file="TokenPartitioner.cs", label="Entry Unk.IsValue", span=""];
m0_14 [cluster="Unk.Where", file="TokenPartitioner.cs", label="Entry Unk.Where", span=""];
m0_22 [cluster="Unk.Create", file="TokenPartitioner.cs", label="Entry Unk.Create", span=""];
m0_30 [cluster="Unk.Contains", file="TokenPartitioner.cs", label="Entry Unk.Contains", span=""];
m0_16 [cluster="Unk.Except", file="TokenPartitioner.cs", label="Entry Unk.Except", span=""];
m0_38 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="32-32"];
m0_24 [cluster="lambda expression", file="TokenPartitioner.cs", label="!switches.Contains(t)", span="21-21"];
m0_28 [cluster="lambda expression", file="TokenPartitioner.cs", label="!scalars.Contains(t)", span="23-23"];
m0_32 [cluster="lambda expression", color=green, community=0, file="TokenPartitioner.cs", label="1: !sequences.Contains(t)", span="23-23"];
m0_23 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="22-22"];
m0_27 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="23-23"];
m0_31 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="24-24"];
m0_34 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="25-25"];
m0_25 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="22-22"];
m0_29 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="23-23"];
m0_33 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="24-24"];
m0_35 [cluster="lambda expression", color=green, community=0, file="TokenPartitioner.cs", label="1: v.IsValue()", span="24-24"];
m0_36 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="25-25"];
m0_39 [cluster="lambda expression", file="TokenPartitioner.cs", label="t.Text", span="32-32"];
m0_40 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="32-32"];
m0_13 [cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12"];
m0_21 [cluster="Unk.Select", file="TokenPartitioner.cs", label="Entry Unk.Select", span=""];
m0_15 [cluster="Unk.ToList", file="TokenPartitioner.cs", label="Entry Unk.ToList", span=""];
m0_17 [cluster="CommandLine.Core.KeyValuePairHelper.ForSwitch(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.KeyValuePairHelper.ForSwitch(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="10-10"];
m0_10 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", file="TokenPartitioner.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", span="0-0"];
m0_20 [cluster="CommandLine.Core.KeyValuePairHelper.ForSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.KeyValuePairHelper.ForSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="22-22"];
m0_11 [cluster="CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11"];
m0_41 [file="TokenPartitioner.cs", label=switches, span=""];
m0_42 [file="TokenPartitioner.cs", label=scalars, span=""];
m0_43 [file="TokenPartitioner.cs", label=sequences, span=""];
n0 -> n1  [color=red, key=0, style=solid];
n1 -> n2  [color=red, key=0, style=solid];
n1 -> n3  [color=red, key=2, style=dotted];
n1 -> n4  [color=red, key=2, style=dotted];
n1 -> n5  [color=red, key=2, style=dotted];
n2 -> n0  [color=blue, key=0, style=bold];
n6 -> n7  [key=0, style=solid];
n7 -> n8  [key=0, style=solid];
n7 -> n16  [key=2, style=dotted];
n7 -> n17  [key=2, style=dotted];
n7 -> n18  [key=2, style=dotted];
n7 -> n19  [key=2, style=dotted];
n7 -> n20  [key=2, style=dotted];
n8 -> n9  [color=red, key=0, style=solid];
n8 -> n4  [key=2, style=dotted];
n8 -> n21  [key=2, style=dotted];
n8 -> n10  [color=red, key=1, label=lines, style=dashed];
n8 -> n11  [color=red, key=1, label=lines, style=dashed];
n8 -> n12  [color=red, key=1, label=lines, style=dashed];
n8 -> n13  [color=red, key=1, label=lines, style=dashed];
n8 -> n14  [color=red, key=1, label=lines, style=dashed];
n9 -> n10  [color=red, key=0, style=solid];
n9 -> n5  [color=red, key=2, style=dotted];
n10 -> n11  [color=red, key=0, style=solid];
n10 -> n5  [color=red, key=2, style=dotted];
n11 -> n12  [color=red, key=0, style=solid];
n11 -> n5  [color=red, key=2, style=dotted];
n12 -> n13  [color=red, key=0, style=solid];
n12 -> n5  [color=red, key=2, style=dotted];
n13 -> n14  [color=red, key=0, style=solid];
n13 -> n5  [color=red, key=2, style=dotted];
n14 -> n15  [color=red, key=0, style=solid];
n14 -> n5  [color=red, key=2, style=dotted];
n15 -> n6  [color=blue, key=0, style=bold];
n22 -> n23  [key=0, style=solid];
n23 -> n24  [key=0, style=solid];
n23 -> n3  [key=2, style=dotted];
n23 -> n19  [key=2, style=dotted];
n23 -> n34  [key=2, style=dotted];
n23 -> n35  [key=2, style=dotted];
n23 -> n20  [key=2, style=dotted];
n24 -> n25  [key=0, style=solid];
n24 -> n4  [key=2, style=dotted];
n24 -> n21  [key=2, style=dotted];
n24 -> n36  [key=2, style=dotted];
n24 -> n26  [color=darkseagreen4, key=1, label=lines, style=dashed];
n24 -> n27  [color=darkseagreen4, key=1, label=lines, style=dashed];
n24 -> n28  [color=darkseagreen4, key=1, label=lines, style=dashed];
n24 -> n29  [color=darkseagreen4, key=1, label=lines, style=dashed];
n24 -> n30  [color=darkseagreen4, key=1, label=lines, style=dashed];
n24 -> n31  [color=darkseagreen4, key=1, label=lines, style=dashed];
n24 -> n32  [color=darkseagreen4, key=1, label=lines, style=dashed];
n25 -> n26  [key=0, style=solid];
n25 -> n5  [key=2, style=dotted];
n26 -> n27  [key=0, style=solid];
n26 -> n5  [key=2, style=dotted];
n27 -> n28  [key=0, style=solid];
n27 -> n5  [key=2, style=dotted];
n28 -> n29  [key=0, style=solid];
n28 -> n5  [key=2, style=dotted];
n29 -> n30  [key=0, style=solid];
n29 -> n5  [key=2, style=dotted];
n30 -> n31  [key=0, style=solid];
n30 -> n5  [key=2, style=dotted];
n31 -> n32  [key=0, style=solid];
n31 -> n5  [key=2, style=dotted];
n32 -> n33  [key=0, style=solid];
n32 -> n5  [key=2, style=dotted];
n33 -> n22  [color=blue, key=0, style=bold];
n37 -> n38  [key=0, style=solid];
n38 -> n39  [key=0, style=solid];
n38 -> n3  [key=2, style=dotted];
n38 -> n19  [key=2, style=dotted];
n38 -> n48  [key=2, style=dotted];
n38 -> n35  [key=2, style=dotted];
n38 -> n20  [key=2, style=dotted];
n39 -> n40  [color=red, key=0, style=solid];
n39 -> n4  [key=2, style=dotted];
n39 -> n21  [key=2, style=dotted];
n39 -> n36  [key=2, style=dotted];
n39 -> n41  [color=red, key=1, label=lines, style=dashed];
n39 -> n42  [color=red, key=1, label=lines, style=dashed];
n39 -> n43  [color=red, key=1, label=lines, style=dashed];
n39 -> n44  [color=red, key=1, label=lines, style=dashed];
n39 -> n45  [color=red, key=1, label=lines, style=dashed];
n39 -> n46  [color=red, key=1, label=lines, style=dashed];
n40 -> n41  [color=red, key=0, style=solid];
n40 -> n5  [color=red, key=2, style=dotted];
n41 -> n42  [color=red, key=0, style=solid];
n41 -> n5  [color=red, key=2, style=dotted];
n42 -> n43  [color=red, key=0, style=solid];
n42 -> n5  [color=red, key=2, style=dotted];
n43 -> n44  [color=red, key=0, style=solid];
n43 -> n5  [color=red, key=2, style=dotted];
n44 -> n45  [color=red, key=0, style=solid];
n44 -> n5  [color=red, key=2, style=dotted];
n45 -> n46  [color=red, key=0, style=solid];
n45 -> n5  [color=red, key=2, style=dotted];
n46 -> n47  [color=red, key=0, style=solid];
n46 -> n5  [color=red, key=2, style=dotted];
n47 -> n37  [color=blue, key=0, style=bold];
n49 -> n50  [key=0, style=solid];
n50 -> n51  [key=0, style=solid];
n50 -> n3  [key=2, style=dotted];
n50 -> n19  [key=2, style=dotted];
n50 -> n48  [key=2, style=dotted];
n50 -> n35  [key=2, style=dotted];
n50 -> n20  [key=2, style=dotted];
n51 -> n52  [color=red, key=0, style=solid];
n51 -> n4  [key=2, style=dotted];
n51 -> n21  [key=2, style=dotted];
n51 -> n36  [key=2, style=dotted];
n51 -> n53  [color=red, key=1, label=lines, style=dashed];
n51 -> n54  [color=red, key=1, label=lines, style=dashed];
n51 -> n55  [color=red, key=1, label=lines, style=dashed];
n51 -> n56  [color=red, key=1, label=lines, style=dashed];
n51 -> n57  [color=red, key=1, label=lines, style=dashed];
n52 -> n53  [color=red, key=0, style=solid];
n52 -> n5  [color=red, key=2, style=dotted];
n53 -> n54  [color=red, key=0, style=solid];
n53 -> n5  [color=red, key=2, style=dotted];
n54 -> n55  [color=red, key=0, style=solid];
n54 -> n5  [color=red, key=2, style=dotted];
n55 -> n56  [color=red, key=0, style=solid];
n55 -> n5  [color=red, key=2, style=dotted];
n56 -> n57  [color=red, key=0, style=solid];
n56 -> n5  [color=red, key=2, style=dotted];
n57 -> n58  [color=red, key=0, style=solid];
n57 -> n5  [color=red, key=2, style=dotted];
n58 -> n49  [color=blue, key=0, style=bold];
n59 -> n60  [key=0, style=solid];
n60 -> n61  [key=0, style=solid];
n60 -> n64  [key=2, style=dotted];
n60 -> n65  [key=2, style=dotted];
n60 -> n35  [key=2, style=dotted];
n61 -> n62  [color=red, key=0, style=solid];
n61 -> n4  [key=2, style=dotted];
n61 -> n21  [key=2, style=dotted];
n61 -> n36  [key=2, style=dotted];
n62 -> n63  [color=red, key=0, style=solid];
n62 -> n5  [color=red, key=2, style=dotted];
n63 -> n59  [color=blue, key=0, style=bold];
n66 -> n67  [key=0, style=solid];
n67 -> n68  [key=0, style=solid];
n67 -> n64  [key=2, style=dotted];
n67 -> n17  [key=2, style=dotted];
n67 -> n69  [color=darkseagreen4, key=1, label=sut, style=dashed];
n67 -> n70  [color=darkseagreen4, key=1, label=sut, style=dashed];
n68 -> n69  [key=0, style=solid];
n69 -> n70  [key=0, style=solid];
n69 -> n77  [key=2, style=dotted];
n69 -> n35  [key=2, style=dotted];
n70 -> n71  [key=0, style=solid];
n70 -> n4  [key=2, style=dotted];
n70 -> n78  [key=2, style=dotted];
n70 -> n72  [color=darkseagreen4, key=1, label=lines, style=dashed];
n70 -> n73  [color=darkseagreen4, key=1, label=lines, style=dashed];
n70 -> n74  [color=darkseagreen4, key=1, label=lines, style=dashed];
n70 -> n75  [color=darkseagreen4, key=1, label=lines, style=dashed];
n71 -> n72  [key=0, style=solid];
n71 -> n79  [key=2, style=dotted];
n71 -> n80  [key=2, style=dotted];
n72 -> n73  [key=0, style=solid];
n72 -> n79  [key=2, style=dotted];
n72 -> n80  [key=2, style=dotted];
n73 -> n74  [key=0, style=solid];
n73 -> n79  [key=2, style=dotted];
n73 -> n80  [key=2, style=dotted];
n74 -> n75  [key=0, style=solid];
n74 -> n79  [key=2, style=dotted];
n74 -> n80  [key=2, style=dotted];
n75 -> n76  [key=0, style=solid];
n75 -> n79  [key=2, style=dotted];
n75 -> n80  [key=2, style=dotted];
n76 -> n66  [color=blue, key=0, style=bold];
n81 -> n82  [key=0, style=solid];
n82 -> n83  [key=0, style=solid];
n82 -> n64  [key=2, style=dotted];
n82 -> n17  [key=2, style=dotted];
n82 -> n84  [color=darkseagreen4, key=1, label=sut, style=dashed];
n82 -> n85  [color=red, key=1, label=sut, style=dashed];
n83 -> n84  [key=0, style=solid];
n84 -> n85  [color=red, key=0, style=solid];
n84 -> n93  [key=2, style=dotted];
n84 -> n35  [key=2, style=dotted];
n85 -> n86  [color=red, key=0, style=solid];
n85 -> n4  [color=red, key=2, style=dotted];
n85 -> n78  [color=red, key=2, style=dotted];
n85 -> n87  [color=red, key=1, label=lines, style=dashed];
n85 -> n88  [color=red, key=1, label=lines, style=dashed];
n85 -> n89  [color=red, key=1, label=lines, style=dashed];
n85 -> n90  [color=red, key=1, label=lines, style=dashed];
n85 -> n91  [color=red, key=1, label=lines, style=dashed];
n86 -> n87  [color=red, key=0, style=solid];
n86 -> n79  [color=red, key=2, style=dotted];
n86 -> n80  [color=red, key=2, style=dotted];
n87 -> n88  [color=red, key=0, style=solid];
n87 -> n79  [color=red, key=2, style=dotted];
n87 -> n80  [color=red, key=2, style=dotted];
n88 -> n89  [color=red, key=0, style=solid];
n88 -> n79  [color=red, key=2, style=dotted];
n88 -> n80  [color=red, key=2, style=dotted];
n89 -> n90  [color=red, key=0, style=solid];
n89 -> n79  [color=red, key=2, style=dotted];
n89 -> n80  [color=red, key=2, style=dotted];
n90 -> n91  [color=red, key=0, style=solid];
n90 -> n79  [color=red, key=2, style=dotted];
n90 -> n80  [color=red, key=2, style=dotted];
n91 -> n92  [color=red, key=0, style=solid];
n91 -> n79  [color=red, key=2, style=dotted];
n91 -> n80  [color=red, key=2, style=dotted];
n92 -> n81  [color=blue, key=0, style=bold];
n94 -> n95  [key=0, style=solid];
n95 -> n96  [key=0, style=solid];
n95 -> n64  [key=2, style=dotted];
n95 -> n97  [color=darkseagreen4, key=1, label=sut, style=dashed];
n95 -> n98  [color=red, key=1, label=sut, style=dashed];
n96 -> n97  [key=0, style=solid];
n97 -> n98  [color=red, key=0, style=solid];
n97 -> n19  [key=2, style=dotted];
n97 -> n106  [key=2, style=dotted];
n97 -> n35  [key=2, style=dotted];
n97 -> n20  [key=2, style=dotted];
n98 -> n99  [color=red, key=0, style=solid];
n98 -> n4  [color=red, key=2, style=dotted];
n98 -> n78  [color=red, key=2, style=dotted];
n98 -> n100  [color=red, key=1, label=lines, style=dashed];
n98 -> n101  [color=red, key=1, label=lines, style=dashed];
n98 -> n102  [color=red, key=1, label=lines, style=dashed];
n98 -> n103  [color=red, key=1, label=lines, style=dashed];
n98 -> n104  [color=red, key=1, label=lines, style=dashed];
n99 -> n100  [key=0, style=solid];
n99 -> n79  [key=2, style=dotted];
n99 -> n80  [key=2, style=dotted];
n100 -> n101  [key=0, style=solid];
n100 -> n79  [key=2, style=dotted];
n100 -> n80  [key=2, style=dotted];
n101 -> n102  [key=0, style=solid];
n101 -> n79  [key=2, style=dotted];
n101 -> n80  [key=2, style=dotted];
n102 -> n103  [key=0, style=solid];
n102 -> n79  [key=2, style=dotted];
n102 -> n80  [key=2, style=dotted];
n103 -> n104  [key=0, style=solid];
n103 -> n79  [key=2, style=dotted];
n103 -> n80  [key=2, style=dotted];
n104 -> n105  [key=0, style=solid];
n104 -> n79  [key=2, style=dotted];
n104 -> n80  [key=2, style=dotted];
n105 -> n94  [color=blue, key=0, style=bold];
n107 -> n108  [key=0, style=solid];
n108 -> n109  [color=red, key=0, style=solid];
n108 -> n121  [key=2, style=dotted];
n108 -> n122  [key=2, style=dotted];
n108 -> n123  [key=2, style=dotted];
n108 -> n124  [key=2, style=dotted];
n108 -> n125  [key=2, style=dotted];
n108 -> n126  [key=2, style=dotted];
n108 -> n127  [key=2, style=dotted];
n108 -> n128  [key=2, style=dotted];
n108 -> n129  [key=2, style=dotted];
n108 -> n130  [key=2, style=dotted];
n108 -> n131  [key=2, style=dotted];
n108 -> n132  [key=2, style=dotted];
n108 -> n111  [color=darkseagreen4, key=1, label=fakeResult, style=dashed];
n109 -> n110  [color=red, key=0, style=solid];
n109 -> n135  [color=red, key=1, label="CommandLine.Error", style=dashed];
n109 -> n137  [color=red, key=1, label="CommandLine.Error", style=dashed];
n109 -> n139  [color=red, key=1, label="CommandLine.Error", style=dashed];
n109 -> n141  [color=red, key=1, label="CommandLine.Error", style=dashed];
n109 -> n143  [color=red, key=1, label="CommandLine.Error", style=dashed];
n109 -> n145  [color=red, key=1, label="CommandLine.Error", style=dashed];
n109 -> n149  [color=red, key=1, label="CommandLine.Error", style=dashed];
n109 -> n111  [color=red, key=1, label=fakeRenderer, style=dashed];
n109 -> n109  [color=red, key=3, label="Local variable System.Func<CommandLine.Error, string> fakeRenderer", style=bold];
n111 -> n112  [key=0, style=solid];
n111 -> n133  [key=2, style=dotted];
n110 -> n111  [key=0, style=solid];
n110 -> n110  [color=darkorchid, key=3, label="Local variable System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string> fakeMutExclRenderer", style=bold];
n135 -> n136  [key=0, style=solid];
n135 -> n138  [key=0, style=solid];
n135 -> n140  [key=0, style=solid];
n135 -> n142  [key=0, style=solid];
n135 -> n144  [key=0, style=solid];
n135 -> n146  [key=0, style=solid];
n135 -> n148  [key=0, style=solid];
n135 -> n150  [key=0, style=solid];
n137 -> n151  [key=0, style=solid];
n139 -> n151  [key=0, style=solid];
n141 -> n151  [key=0, style=solid];
n143 -> n151  [key=0, style=solid];
n145 -> n151  [key=0, style=solid];
n149 -> n151  [key=0, style=solid];
n112 -> n113  [key=0, style=solid];
n112 -> n21  [key=2, style=dotted];
n112 -> n114  [color=darkseagreen4, key=1, label=lines, style=dashed];
n112 -> n115  [color=darkseagreen4, key=1, label=lines, style=dashed];
n112 -> n116  [color=darkseagreen4, key=1, label=lines, style=dashed];
n112 -> n117  [color=darkseagreen4, key=1, label=lines, style=dashed];
n112 -> n118  [color=darkseagreen4, key=1, label=lines, style=dashed];
n112 -> n119  [color=darkseagreen4, key=1, label=lines, style=dashed];
n113 -> n114  [key=0, style=solid];
n113 -> n5  [key=2, style=dotted];
n114 -> n115  [key=0, style=solid];
n114 -> n5  [key=2, style=dotted];
n115 -> n116  [key=0, style=solid];
n115 -> n5  [key=2, style=dotted];
n116 -> n117  [key=0, style=solid];
n116 -> n5  [key=2, style=dotted];
n117 -> n118  [key=0, style=solid];
n117 -> n5  [key=2, style=dotted];
n118 -> n119  [key=0, style=solid];
n118 -> n5  [key=2, style=dotted];
n119 -> n120  [key=0, style=solid];
n119 -> n5  [key=2, style=dotted];
n120 -> n107  [color=blue, key=0, style=bold];
n134 -> n135  [key=0, style=solid];
n134 -> n137  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
n134 -> n139  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
n134 -> n141  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
n134 -> n143  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
n134 -> n145  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
n134 -> n149  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
n136 -> n137  [key=0, style=solid];
n138 -> n139  [key=0, style=solid];
n140 -> n141  [key=0, style=solid];
n142 -> n143  [key=0, style=solid];
n144 -> n145  [key=0, style=solid];
n146 -> n147  [key=0, style=solid];
n148 -> n149  [key=0, style=solid];
n150 -> n151  [key=0, style=solid];
n150 -> n152  [key=2, style=dotted];
n147 -> n151  [key=0, style=solid];
n151 -> n134  [color=blue, key=0, style=bold];
n153 -> n154  [key=0, style=solid];
n154 -> n155  [key=0, style=solid];
n155 -> n153  [color=blue, key=0, style=bold];
n156 -> n157  [key=0, style=solid];
n157 -> n158  [key=0, style=solid];
n157 -> n121  [key=2, style=dotted];
n157 -> n34  [key=2, style=dotted];
n157 -> n123  [key=2, style=dotted];
n157 -> n128  [key=2, style=dotted];
n157 -> n125  [key=2, style=dotted];
n158 -> n159  [key=0, style=solid];
n158 -> n170  [key=2, style=dotted];
n159 -> n160  [color=red, key=0, style=solid];
n159 -> n4  [key=2, style=dotted];
n159 -> n21  [key=2, style=dotted];
n159 -> n36  [key=2, style=dotted];
n159 -> n161  [color=red, key=1, label=lines, style=dashed];
n159 -> n162  [color=red, key=1, label=lines, style=dashed];
n159 -> n163  [color=red, key=1, label=lines, style=dashed];
n159 -> n164  [color=red, key=1, label=lines, style=dashed];
n159 -> n165  [color=red, key=1, label=lines, style=dashed];
n159 -> n166  [color=red, key=1, label=lines, style=dashed];
n159 -> n167  [color=red, key=1, label=lines, style=dashed];
n159 -> n168  [color=red, key=1, label=lines, style=dashed];
n160 -> n161  [color=red, key=0, style=solid];
n160 -> n171  [color=red, key=2, style=dotted];
n160 -> n172  [color=red, key=2, style=dotted];
n161 -> n162  [color=red, key=0, style=solid];
n161 -> n171  [color=red, key=2, style=dotted];
n161 -> n172  [color=red, key=2, style=dotted];
n162 -> n163  [color=red, key=0, style=solid];
n162 -> n5  [color=red, key=2, style=dotted];
n163 -> n164  [color=red, key=0, style=solid];
n163 -> n5  [color=red, key=2, style=dotted];
n164 -> n165  [color=red, key=0, style=solid];
n164 -> n5  [color=red, key=2, style=dotted];
n165 -> n166  [color=red, key=0, style=solid];
n165 -> n5  [color=red, key=2, style=dotted];
n166 -> n167  [color=red, key=0, style=solid];
n166 -> n5  [color=red, key=2, style=dotted];
n167 -> n168  [color=red, key=0, style=solid];
n167 -> n5  [color=red, key=2, style=dotted];
n168 -> n169  [color=red, key=0, style=solid];
n168 -> n5  [color=red, key=2, style=dotted];
n169 -> n156  [color=blue, key=0, style=bold];
n173 -> n174  [key=0, style=solid];
n174 -> n175  [key=0, style=solid];
n174 -> n121  [key=2, style=dotted];
n174 -> n122  [key=2, style=dotted];
n174 -> n132  [key=2, style=dotted];
n175 -> n176  [key=0, style=solid];
n175 -> n170  [key=2, style=dotted];
n176 -> n177  [color=red, key=0, style=solid];
n176 -> n4  [key=2, style=dotted];
n176 -> n21  [key=2, style=dotted];
n176 -> n36  [key=2, style=dotted];
n176 -> n178  [color=red, key=1, label=lines, style=dashed];
n176 -> n179  [color=red, key=1, label=lines, style=dashed];
n176 -> n180  [color=red, key=1, label=lines, style=dashed];
n176 -> n181  [color=red, key=1, label=lines, style=dashed];
n176 -> n182  [color=red, key=1, label=lines, style=dashed];
n177 -> n178  [color=red, key=0, style=solid];
n177 -> n171  [color=red, key=2, style=dotted];
n177 -> n172  [color=red, key=2, style=dotted];
n178 -> n179  [color=red, key=0, style=solid];
n178 -> n171  [color=red, key=2, style=dotted];
n178 -> n172  [color=red, key=2, style=dotted];
n179 -> n180  [color=red, key=0, style=solid];
n179 -> n5  [color=red, key=2, style=dotted];
n180 -> n181  [color=red, key=0, style=solid];
n180 -> n5  [color=red, key=2, style=dotted];
n181 -> n182  [color=red, key=0, style=solid];
n181 -> n5  [color=red, key=2, style=dotted];
n182 -> n183  [color=red, key=0, style=solid];
n182 -> n5  [color=red, key=2, style=dotted];
n183 -> n173  [color=blue, key=0, style=bold];
n184 -> n185  [key=0, style=solid];
n185 -> n186  [key=0, style=solid];
n185 -> n197  [key=2, style=dotted];
n185 -> n198  [key=2, style=dotted];
n186 -> n187  [key=0, style=solid];
n186 -> n199  [key=2, style=dotted];
n186 -> n122  [key=2, style=dotted];
n186 -> n132  [key=2, style=dotted];
n187 -> n188  [key=0, style=solid];
n187 -> n170  [key=2, style=dotted];
n188 -> n189  [color=red, key=0, style=solid];
n188 -> n4  [key=2, style=dotted];
n188 -> n21  [key=2, style=dotted];
n188 -> n36  [key=2, style=dotted];
n188 -> n190  [color=red, key=1, label=lines, style=dashed];
n188 -> n191  [color=red, key=1, label=lines, style=dashed];
n188 -> n192  [color=red, key=1, label=lines, style=dashed];
n188 -> n193  [color=red, key=1, label=lines, style=dashed];
n188 -> n194  [color=red, key=1, label=lines, style=dashed];
n188 -> n195  [color=red, key=1, label=lines, style=dashed];
n189 -> n190  [color=red, key=0, style=solid];
n189 -> n171  [color=red, key=2, style=dotted];
n189 -> n172  [color=red, key=2, style=dotted];
n190 -> n191  [color=red, key=0, style=solid];
n190 -> n171  [color=red, key=2, style=dotted];
n190 -> n172  [color=red, key=2, style=dotted];
n191 -> n192  [color=red, key=0, style=solid];
n191 -> n5  [color=red, key=2, style=dotted];
n192 -> n193  [color=red, key=0, style=solid];
n192 -> n5  [color=red, key=2, style=dotted];
n193 -> n194  [color=red, key=0, style=solid];
n193 -> n5  [color=red, key=2, style=dotted];
n194 -> n195  [color=red, key=0, style=solid];
n194 -> n5  [color=red, key=2, style=dotted];
n195 -> n196  [color=red, key=0, style=solid];
n195 -> n5  [color=red, key=2, style=dotted];
n196 -> n184  [color=blue, key=0, style=bold];
n200 -> n201  [key=0, style=solid];
n201 -> n202  [key=0, style=solid];
n201 -> n3  [key=2, style=dotted];
n201 -> n19  [key=2, style=dotted];
n201 -> n213  [key=2, style=dotted];
n201 -> n35  [key=2, style=dotted];
n201 -> n20  [key=2, style=dotted];
n202 -> n203  [color=red, key=0, style=solid];
n202 -> n4  [key=2, style=dotted];
n202 -> n21  [key=2, style=dotted];
n202 -> n36  [key=2, style=dotted];
n202 -> n204  [color=red, key=1, label=lines, style=dashed];
n202 -> n205  [color=red, key=1, label=lines, style=dashed];
n202 -> n206  [color=red, key=1, label=lines, style=dashed];
n202 -> n207  [color=red, key=1, label=lines, style=dashed];
n202 -> n208  [color=red, key=1, label=lines, style=dashed];
n202 -> n209  [color=red, key=1, label=lines, style=dashed];
n202 -> n210  [color=red, key=1, label=lines, style=dashed];
n202 -> n211  [color=red, key=1, label=lines, style=dashed];
n203 -> n204  [color=red, key=0, style=solid];
n203 -> n5  [color=red, key=2, style=dotted];
n204 -> n205  [color=red, key=0, style=solid];
n204 -> n5  [color=red, key=2, style=dotted];
n205 -> n206  [color=red, key=0, style=solid];
n205 -> n5  [color=red, key=2, style=dotted];
n206 -> n207  [color=red, key=0, style=solid];
n206 -> n5  [color=red, key=2, style=dotted];
n207 -> n208  [color=red, key=0, style=solid];
n207 -> n5  [color=red, key=2, style=dotted];
n208 -> n209  [color=red, key=0, style=solid];
n208 -> n5  [color=red, key=2, style=dotted];
n209 -> n210  [color=red, key=0, style=solid];
n209 -> n5  [color=red, key=2, style=dotted];
n210 -> n211  [color=red, key=0, style=solid];
n210 -> n5  [color=red, key=2, style=dotted];
n211 -> n212  [color=red, key=0, style=solid];
n211 -> n5  [color=red, key=2, style=dotted];
n212 -> n200  [color=blue, key=0, style=bold];
m0_0 -> m0_1  [color=green, key=0, style=solid];
m0_0 -> m0_2  [color=green, key=1, label="System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>", style=dashed];
m0_0 -> m0_3  [color=green, key=1, label="System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>", style=dashed];
m0_0 -> m0_4  [color=green, key=1, label="System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>", style=dashed];
m0_1 -> m0_2  [color=green, key=0, style=solid];
m0_1 -> m0_10  [color=green, key=2, style=dotted];
m0_1 -> m0_3  [color=green, key=1, label=tokenList, style=dashed];
m0_1 -> m0_4  [color=green, key=1, label=tokenList, style=dashed];
m0_1 -> m0_5  [color=green, key=1, label=tokenList, style=dashed];
m0_2 -> m0_3  [color=green, key=0, style=solid];
m0_2 -> m0_11  [color=green, key=2, style=dotted];
m0_2 -> m0_10  [color=green, key=2, style=dotted];
m0_2 -> m0_5  [color=green, key=1, label=switches, style=dashed];
m0_2 -> m0_24  [color=green, key=1, label=switches, style=dashed];
m0_2 -> m0_8  [color=green, key=1, label=switches, style=dashed];
m0_3 -> m0_4  [color=green, key=0, style=solid];
m0_3 -> m0_12  [color=green, key=2, style=dotted];
m0_3 -> m0_10  [color=green, key=2, style=dotted];
m0_3 -> m0_5  [color=green, key=1, label=scalars, style=dashed];
m0_3 -> m0_28  [color=green, key=1, label=scalars, style=dashed];
m0_3 -> m0_8  [color=green, key=1, label=scalars, style=dashed];
m0_4 -> m0_5  [color=green, key=0, style=solid];
m0_4 -> m0_13  [color=green, key=2, style=dotted];
m0_4 -> m0_10  [color=green, key=2, style=dotted];
m0_4 -> m0_32  [color=green, key=1, label=sequences, style=dashed];
m0_4 -> m0_8  [color=green, key=1, label=sequences, style=dashed];
m0_5 -> m0_6  [color=green, key=0, style=solid];
m0_5 -> m0_14  [color=green, key=2, style=dotted];
m0_5 -> m0_15  [color=green, key=2, style=dotted];
m0_5 -> m0_23  [color=green, key=1, label="lambda expression", style=dashed];
m0_5 -> m0_27  [color=green, key=1, label="lambda expression", style=dashed];
m0_5 -> m0_31  [color=green, key=1, label="lambda expression", style=dashed];
m0_5 -> m0_7  [color=green, key=1, label=nonOptions, style=dashed];
m0_8 -> m0_9  [key=0, style=solid];
m0_8 -> m0_17  [key=2, style=dotted];
m0_8 -> m0_18  [key=2, style=dotted];
m0_8 -> n198  [key=2, style=dotted];
m0_8 -> m0_20  [key=2, style=dotted];
m0_8 -> m0_21  [key=2, style=dotted];
m0_8 -> m0_22  [key=2, style=dotted];
m0_8 -> m0_38  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_6 -> m0_7  [color=green, key=0, style=solid];
m0_6 -> m0_14  [color=green, key=2, style=dotted];
m0_6 -> m0_15  [color=green, key=2, style=dotted];
m0_6 -> m0_34  [color=green, key=1, label="lambda expression", style=dashed];
m0_6 -> m0_8  [color=green, key=1, label=values, style=dashed];
m0_7 -> m0_8  [color=green, key=0, style=solid];
m0_7 -> m0_16  [color=green, key=2, style=dotted];
m0_7 -> m0_15  [color=red, key=2, style=dotted];
m0_7 -> m0_10  [color=green, key=2, style=dotted];
m0_9 -> m0_0  [color=blue, key=0, style=bold];
m0_38 -> m0_39  [key=0, style=solid];
m0_24 -> m0_25  [key=0, style=solid];
m0_24 -> m0_26  [key=2, style=dotted];
m0_28 -> m0_29  [key=0, style=solid];
m0_28 -> m0_30  [key=2, style=dotted];
m0_32 -> m0_33  [color=green, key=0, style=solid];
m0_32 -> m0_30  [color=green, key=2, style=dotted];
m0_23 -> m0_24  [key=0, style=solid];
m0_27 -> m0_28  [key=0, style=solid];
m0_31 -> m0_32  [color=green, key=0, style=solid];
m0_34 -> m0_35  [color=green, key=0, style=solid];
m0_25 -> m0_23  [color=blue, key=0, style=bold];
m0_29 -> m0_27  [color=blue, key=0, style=bold];
m0_33 -> m0_31  [color=blue, key=0, style=bold];
m0_35 -> m0_36  [color=green, key=0, style=solid];
m0_35 -> m0_37  [color=green, key=2, style=dotted];
m0_36 -> m0_34  [color=blue, key=0, style=bold];
m0_39 -> m0_40  [key=0, style=solid];
m0_40 -> m0_38  [color=blue, key=0, style=bold];
m0_41 -> m0_24  [color=darkseagreen4, key=1, label=switches, style=dashed];
m0_42 -> m0_28  [color=darkseagreen4, key=1, label=scalars, style=dashed];
m0_43 -> m0_32  [color=green, key=1, label=sequences, style=dashed];
}
