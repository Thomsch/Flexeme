digraph  {
n0 [label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Create_empty_instance()", span="16-16", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_empty_instance()"];
n1 [label="Assert.Equal(string.Empty, new HelpText().ToString())", span="18-18", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_empty_instance()", color=red, community=0];
n2 [label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Create_empty_instance()", span="16-16", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_empty_instance()"];
n3 [label="Entry CommandLine.Text.HelpText.HelpText()", span="34-34", cluster="CommandLine.Text.HelpText.HelpText()"];
n4 [label="Entry CommandLine.Text.HelpText.ToString()", span="453-453", cluster="CommandLine.Text.HelpText.ToString()"];
n5 [label="Entry Unk.Equal", span="", cluster="Unk.Equal"];
n6 [label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", span="22-22", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()"];
n7 [label="var sut =\r\n                new HelpText(new HeadingInfo(''Unit-tests'', ''2.0''), new CopyrightInfo(true, ''Author'', 2005, 2013))\r\n                    .AddPreOptionsLine(''pre-options line 1'')\r\n                    .AddPreOptionsLine(''pre-options line 2'')\r\n                    .AddPostOptionsLine(''post-options line 1'')\r\n                    .AddPostOptionsLine(''post-options line 2'')", span="26-31", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()"];
n8 [label="var lines = sut.ToString().ToNotEmptyLines()", span="34-34", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()"];
n16 [label="Entry CommandLine.Text.HelpText.HelpText(string, string)", span="80-80", cluster="CommandLine.Text.HelpText.HelpText(string, string)"];
n17 [label="Entry CommandLine.Text.HeadingInfo.HeadingInfo(string, string)", span="27-27", cluster="CommandLine.Text.HeadingInfo.HeadingInfo(string, string)"];
n18 [label="Entry CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])", span="60-60", cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])"];
n19 [label="Entry CommandLine.Text.HelpText.AddPreOptionsLine(string)", span="330-330", cluster="CommandLine.Text.HelpText.AddPreOptionsLine(string)"];
n20 [label="Entry CommandLine.Text.HelpText.AddPostOptionsLine(string)", span="340-340", cluster="CommandLine.Text.HelpText.AddPostOptionsLine(string)"];
n9 [label="Assert.Equal(''Unit-tests 2.0'', lines[0])", span="36-36", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", color=red, community=0];
n21 [label="Entry string.ToNotEmptyLines()", span="10-10", cluster="string.ToNotEmptyLines()"];
n10 [label="Assert.Equal(''Copyright (C) 2005 - 2013 Author'', lines[1])", span="37-37", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", color=red, community=0];
n11 [label="Assert.Equal(''pre-options line 1'', lines[2])", span="38-38", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", color=red, community=0];
n12 [label="Assert.Equal(''pre-options line 2'', lines[3])", span="39-39", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", color=red, community=0];
n13 [label="Assert.Equal(''post-options line 1'', lines[4])", span="40-40", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", color=red, community=0];
n14 [label="Assert.Equal(''post-options line 2'', lines[5])", span="41-41", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", color=red, community=0];
n15 [label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", span="22-22", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()"];
n22 [label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", span="46-46", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()"];
n23 [label="var sut = new HelpText { AddDashesToOption = true }\r\n                .AddPreOptionsLine(''pre-options'')\r\n                .AddOptions(new FakeOptions())\r\n                .AddPostOptionsLine(''post-options'')", span="50-53", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()"];
n24 [label="var lines = sut.ToString().ToNotEmptyLines().TrimStringArray()", span="57-57", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()"];
n34 [label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()"];
n35 [label="Entry CommandLine.Text.HelpText.AddOptions<T>(T)", span="350-350", cluster="CommandLine.Text.HelpText.AddOptions<T>(T)"];
n25 [label="Assert.Equal(''pre-options'', lines[0])", span="58-58", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()"];
n36 [label="Entry System.Collections.Generic.IEnumerable<string>.TrimStringArray()", span="15-15", cluster="System.Collections.Generic.IEnumerable<string>.TrimStringArray()"];
n26 [label="Assert.Equal(''--stringvalue    Define a string value here.'', lines[1])", span="59-59", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()"];
n27 [label="Assert.Equal(''-i               Define a int sequence here.'', lines[2])", span="60-60", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()"];
n28 [label="Assert.Equal(''-x               Define a boolean or switch value here.'', lines[3])", span="61-61", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()"];
n29 [label="Assert.Equal(''--help           Display this help screen.'', lines[4])", span="62-62", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()"];
n30 [label="Assert.Equal(''--version        Display version information.'', lines[5])", span="63-63", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()"];
n31 [label="Assert.Equal(''value pos. 0     Define a long value here.'', lines[6])", span="64-64", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()"];
n32 [label="Assert.Equal(''post-options'', lines[7])", span="65-65", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()"];
n33 [label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", span="46-46", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()"];
n37 [label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", span="70-70", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()"];
n38 [label="var sut = new HelpText { AddDashesToOption = true, AddEnumValuesToHelpText = true }\r\n                .AddPreOptionsLine(''pre-options'')\r\n                .AddOptions(new FakeOptionsWithHelpTextEnum())\r\n                .AddPostOptionsLine(''post-options'')", span="74-77", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()"];
n39 [label="var lines = sut.ToString().ToNotEmptyLines().TrimStringArray()", span="81-81", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()"];
n48 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithHelpTextEnum.FakeOptionsWithHelpTextEnum()", span="11-11", cluster="CommandLine.Tests.Fakes.FakeOptionsWithHelpTextEnum.FakeOptionsWithHelpTextEnum()"];
n40 [label="Assert.Equal(''pre-options'', lines[0])", span="82-82", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", color=red, community=0];
n41 [label="Assert.Equal(''--stringvalue    Define a string value here.'', lines[1])", span="83-83", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", color=red, community=0];
n42 [label="Assert.Equal(''--shape          Define a enum value here. Valid values: Circle, Square,'', lines[2])", span="84-84", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", color=red, community=0];
n43 [label="Assert.Equal(''Triangle'', lines[3])", span="85-85", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", color=red, community=0];
n44 [label="Assert.Equal(''--help           Display this help screen.'', lines[4])", span="86-86", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", color=red, community=0];
n45 [label="Assert.Equal(''--version        Display version information.'', lines[5])", span="87-87", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", color=red, community=0];
n46 [label="Assert.Equal(''post-options'', lines[6])", span="88-88", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", color=red, community=0];
n47 [label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", span="70-70", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()"];
n49 [label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", span="93-93", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()"];
n50 [label="var sut = new HelpText { AddDashesToOption = true }\r\n                .AddPreOptionsLine(''pre-options'')\r\n                .AddOptions(new FakeOptionsWithHelpTextEnum())\r\n                .AddPostOptionsLine(''post-options'')", span="97-100", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()"];
n51 [label="var lines = sut.ToString().ToNotEmptyLines().TrimStringArray()", span="104-104", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()"];
n52 [label="Assert.Equal(''pre-options'', lines[0])", span="105-105", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", color=red, community=0];
n53 [label="Assert.Equal(''--stringvalue    Define a string value here.'', lines[1])", span="106-106", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", color=red, community=0];
n54 [label="Assert.Equal(''--shape          Define a enum value here.'', lines[2])", span="107-107", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", color=red, community=0];
n55 [label="Assert.Equal(''--help           Display this help screen.'', lines[3])", span="108-108", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", color=red, community=0];
n56 [label="Assert.Equal(''--version        Display version information.'', lines[4])", span="109-109", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", color=red, community=0];
n57 [label="Assert.Equal(''post-options'', lines[5])", span="110-110", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", color=red, community=0];
n58 [label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", span="93-93", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()"];
n59 [label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.When_defined_MetaValue_should_be_rendered()", span="115-115", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_defined_MetaValue_should_be_rendered()"];
n60 [label="var sut = new HelpText(''Meta Value.'')\r\n                .AddOptions(new FakeOptionsWithMetaValue())", span="119-120", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_defined_MetaValue_should_be_rendered()"];
n61 [label="var lines = sut.ToString().ToNotEmptyLines().TrimStringArray()", span="123-123", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_defined_MetaValue_should_be_rendered()"];
n64 [label="Entry CommandLine.Text.HelpText.HelpText(string)", span="57-57", cluster="CommandLine.Text.HelpText.HelpText(string)"];
n65 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMetaValue.FakeOptionsWithMetaValue()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithMetaValue.FakeOptionsWithMetaValue()"];
n62 [label="Assert.Equal(''i FILE, input-file=FILE    Required. Specify input FILE to be processed.'', lines[2])", span="125-125", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_defined_MetaValue_should_be_rendered()", color=red, community=0];
n63 [label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.When_defined_MetaValue_should_be_rendered()", span="115-115", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_defined_MetaValue_should_be_rendered()"];
n66 [label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()", span="130-130", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()"];
n67 [label="var sut = new HelpText(new HeadingInfo(''CommandLine.Tests.dll'', ''1.9.4.131''))", span="134-134", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()"];
n68 [label="sut.MaximumDisplayWidth = 40", span="135-135", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()"];
n69 [label="sut.AddOptions(new FakeOptionsWithLongDescription())", span="136-136", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()"];
n70 [label="var lines = sut.ToString().Split(new[] { Environment.NewLine }, StringSplitOptions.None)", span="139-139", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()"];
n77 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithLongDescription.FakeOptionsWithLongDescription()", span="22-22", cluster="CommandLine.Tests.Fakes.FakeOptionsWithLongDescription.FakeOptionsWithLongDescription()"];
n71 [label="lines[2].Should().Be(''  v, verbose    This is the description'')", span="140-140", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()"];
n78 [label="Entry string.Split(string[], System.StringSplitOptions)", span="0-0", cluster="string.Split(string[], System.StringSplitOptions)"];
n72 [label="lines[3].Should().Be(''                of the verbosity to '')", span="142-142", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()"];
n73 [label="lines[4].Should().Be(''                test out the wrapping '')", span="143-143", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()"];
n74 [label="lines[5].Should().Be(''                capabilities of the '')", span="144-144", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()"];
n75 [label="lines[6].Should().Be(''                Help Text.'')", span="145-145", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()"];
n79 [label="Entry Unk.Should", span="", cluster="Unk.Should"];
n80 [label="Entry Unk.Be", span="", cluster="Unk.Be"];
n76 [label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()", span="130-130", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()"];
n81 [label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", span="150-150", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()"];
n82 [label="var sut = new HelpText(new HeadingInfo(''CommandLine.Tests.dll'', ''1.9.4.131''))", span="154-154", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()"];
n83 [label="sut.MaximumDisplayWidth = 40", span="155-155", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()"];
n84 [label="sut.AddOptions(new FakeOptionsWithLongDescriptionAndNoSpaces())", span="156-156", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()"];
n85 [label="var lines = sut.ToString().Split(new[] { Environment.NewLine }, StringSplitOptions.None)", span="159-159", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", color=red, community=0];
n93 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithLongDescriptionAndNoSpaces.FakeOptionsWithLongDescriptionAndNoSpaces()", span="31-31", cluster="CommandLine.Tests.Fakes.FakeOptionsWithLongDescriptionAndNoSpaces.FakeOptionsWithLongDescriptionAndNoSpaces()"];
n86 [label="lines[2].Should().Be(''  v, verbose    Before '')", span="160-160", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", color=red, community=0];
n87 [label="lines[3].Should().Be(''                012345678901234567890123'')", span="161-161", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", color=red, community=0];
n88 [label="lines[4].Should().Be(''                After'')", span="162-162", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", color=red, community=0];
n89 [label="lines[5].Should().Be(''  input-file    Before '')", span="163-163", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", color=red, community=0];
n90 [label="lines[6].Should().Be(''                012345678901234567890123'')", span="164-164", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", color=red, community=0];
n91 [label="lines[7].Should().Be(''                456789 After'')", span="165-165", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", color=red, community=0];
n92 [label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", span="150-150", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()"];
n94 [label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", span="170-170", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()"];
n95 [label="var sut = new HelpText(''Heading Info.'')", span="174-174", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()"];
n96 [label="sut.MaximumDisplayWidth = 40", span="175-175", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()"];
n97 [label="sut.AddPreOptionsLine(''Before 0123456789012345678901234567890123456789012 After'')\r\n                .AddOptions(new FakeOptionsForHelp())\r\n                .AddPostOptionsLine(''Before 0123456789012345678901234567890123456789 After'')", span="176-178", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()"];
n98 [label="var lines = sut.ToString().Split(new[] { Environment.NewLine }, StringSplitOptions.None)", span="181-181", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", color=red, community=0];
n106 [label="Entry CommandLine.Tests.Fakes.FakeOptionsForHelp.FakeOptionsForHelp()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsForHelp.FakeOptionsForHelp()"];
n99 [label="lines[1].Should().Be(''Before '')", span="182-182", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()"];
n100 [label="lines[2].Should().Be(''0123456789012345678901234567890123456789'')", span="183-183", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()"];
n101 [label="lines[3].Should().Be(''012 After'')", span="184-184", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()"];
n102 [label="lines[lines.Length - 3].Should().Be(''Before '')", span="185-185", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()"];
n103 [label="lines[lines.Length - 2].Should().Be(''0123456789012345678901234567890123456789'')", span="186-186", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()"];
n104 [label="lines[lines.Length - 1].Should().Be('' After'')", span="187-187", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()"];
n105 [label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", span="170-170", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()"];
n107 [label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", span="193-193", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()"];
n108 [label="var fakeResult = new NotParsed<object>(\r\n                new NullInstance(),\r\n                new Error[]\r\n                    {\r\n                        new BadFormatTokenError(''badtoken''),\r\n                        new MissingValueOptionError(new NameInfo(''x'', ''switch'')),\r\n                        new UnknownOptionError(''unknown''),\r\n                        new MissingRequiredOptionError(new NameInfo('''', ''missing'')),\r\n                        //new MutuallyExclusiveSetError(new NameInfo(''z'', ''''), string.Empty),\r\n                        new SequenceOutOfRangeError(new NameInfo(''s'', ''sequence'')),\r\n                        new NoVerbSelectedError(),\r\n                        new BadVerbSelectedError(''badverb''),\r\n                        new HelpRequestedError(), // should be ignored\r\n                        new HelpVerbRequestedError(null, null, false) // should be ignored \r\n                    })", span="196-210", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()"];
n109 [label="Func<Error, string> fakeRenderer = err =>\r\n                {\r\n                    switch (err.Tag)\r\n                    {\r\n                        case ErrorType.BadFormatTokenError:\r\n                            return ''ERR '' + ((BadFormatTokenError)err).Token;\r\n                        case ErrorType.MissingValueOptionError:\r\n                            return ''ERR '' + ((MissingValueOptionError)err).NameInfo.NameText;\r\n                        case ErrorType.UnknownOptionError:\r\n                            return ''ERR '' + ((UnknownOptionError)err).Token;\r\n                        case ErrorType.MissingRequiredOptionError:\r\n                            return ''ERR '' + ((MissingRequiredOptionError)err).NameInfo.NameText;\r\n                        //case ErrorType.MutuallyExclusiveSetError:\r\n                        //    return ''ERR '' + ((MutuallyExclusiveSetError)err).NameInfo.NameText;\r\n                        case ErrorType.SequenceOutOfRangeError:\r\n                            return ''ERR '' + ((SequenceOutOfRangeError)err).NameInfo.NameText;\r\n                        case ErrorType.NoVerbSelectedError:\r\n                            return ''ERR no-verb-selected'';\r\n                        case ErrorType.BadVerbSelectedError:\r\n                            return ''ERR '' + ((BadVerbSelectedError)err).Token;\r\n                        default:\r\n                            throw new InvalidOperationException();\r\n                    }\r\n                }", span="211-234", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", color=red, community=0];
n121 [label="Entry CommandLine.NotParsed<T>.NotParsed(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="142-142", cluster="CommandLine.NotParsed<T>.NotParsed(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)"];
n122 [label="Entry CommandLine.NullInstance.NullInstance()", span="9-9", cluster="CommandLine.NullInstance.NullInstance()"];
n123 [label="Entry CommandLine.BadFormatTokenError.BadFormatTokenError(string)", span="196-196", cluster="CommandLine.BadFormatTokenError.BadFormatTokenError(string)"];
n124 [label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="269-269", cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)"];
n125 [label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20", cluster="CommandLine.NameInfo.NameInfo(string, string)"];
n126 [label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="280-280", cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)"];
n127 [label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="291-291", cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)"];
n128 [label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="335-335", cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)"];
n129 [label="Entry CommandLine.NoVerbSelectedError.NoVerbSelectedError()", span="421-421", cluster="CommandLine.NoVerbSelectedError.NoVerbSelectedError()"];
n130 [label="Entry CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", span="357-357", cluster="CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)"];
n131 [label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="368-368", cluster="CommandLine.HelpRequestedError.HelpRequestedError()"];
n132 [label="Entry CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", span="383-383", cluster="CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)"];
n111 [label="var errorsText = HelpText.RenderParsingErrorsText(fakeResult, fakeRenderer, fakeMutExclRenderer, 2)", span="239-239", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()"];
n110 [label="Func<IEnumerable<MutuallyExclusiveSetError>, string> fakeMutExclRenderer =\r\n                _ => string.Empty", span="235-236", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()"];
n135 [label="err.Tag", span="213-213", cluster="lambda expression"];
n137 [label="return ''ERR '' + ((BadFormatTokenError)err).Token;", span="216-216", cluster="lambda expression"];
n139 [label="return ''ERR '' + ((MissingValueOptionError)err).NameInfo.NameText;", span="218-218", cluster="lambda expression"];
n141 [label="return ''ERR '' + ((UnknownOptionError)err).Token;", span="220-220", cluster="lambda expression"];
n143 [label="return ''ERR '' + ((MissingRequiredOptionError)err).NameInfo.NameText;", span="222-222", cluster="lambda expression"];
n145 [label="return ''ERR '' + ((SequenceOutOfRangeError)err).NameInfo.NameText;", span="226-226", cluster="lambda expression"];
n149 [label="return ''ERR '' + ((BadVerbSelectedError)err).Token;", span="230-230", cluster="lambda expression"];
n112 [label="var lines = errorsText.ToNotEmptyLines()", span="242-242", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()"];
n133 [label="Entry CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)", span="416-416", cluster="CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)"];
n113 [label="Assert.Equal(''  ERR badtoken'', lines[0])", span="244-244", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()"];
n114 [label="Assert.Equal(''  ERR x, switch'', lines[1])", span="245-245", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()"];
n115 [label="Assert.Equal(''  ERR unknown'', lines[2])", span="246-246", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()"];
n116 [label="Assert.Equal(''  ERR missing'', lines[3])", span="247-247", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()"];
n117 [label="Assert.Equal(''  ERR s, sequence'', lines[4])", span="249-249", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()"];
n118 [label="Assert.Equal(''  ERR no-verb-selected'', lines[5])", span="250-250", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()"];
n119 [label="Assert.Equal(''  ERR badverb'', lines[6])", span="251-251", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()"];
n120 [label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", span="193-193", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()"];
n134 [label="Entry lambda expression", span="211-234", cluster="lambda expression"];
n136 [label="ErrorType.BadFormatTokenError", span="215-215", cluster="lambda expression"];
n138 [label="ErrorType.MissingValueOptionError", span="217-217", cluster="lambda expression"];
n140 [label="ErrorType.UnknownOptionError", span="219-219", cluster="lambda expression"];
n142 [label="ErrorType.MissingRequiredOptionError", span="221-221", cluster="lambda expression"];
n144 [label="ErrorType.SequenceOutOfRangeError", span="225-225", cluster="lambda expression"];
n146 [label="ErrorType.NoVerbSelectedError", span="227-227", cluster="lambda expression"];
n148 [label="ErrorType.BadVerbSelectedError", span="229-229", cluster="lambda expression"];
n150 [label="throw new InvalidOperationException();", span="232-232", cluster="lambda expression"];
n147 [label="return ''ERR no-verb-selected'';", span="228-228", cluster="lambda expression"];
n151 [label="Exit lambda expression", span="211-234", cluster="lambda expression"];
n152 [label="Entry System.InvalidOperationException.InvalidOperationException()", span="0-0", cluster="System.InvalidOperationException.InvalidOperationException()"];
n153 [label="Entry lambda expression", span="236-236", cluster="lambda expression"];
n154 [label="string.Empty", span="236-236", cluster="lambda expression"];
n155 [label="Exit lambda expression", span="236-236", cluster="lambda expression"];
n156 [label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", span="256-256", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()"];
n157 [label="var fakeResult = new NotParsed<FakeOptions>(\r\n                new FakeOptions(),\r\n                new Error[]\r\n                    {\r\n                        new BadFormatTokenError(''badtoken''),\r\n                        new SequenceOutOfRangeError(new NameInfo(''i'', ''''))\r\n                    })", span="259-265", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()"];
n158 [label="var helpText = HelpText.AutoBuild(fakeResult)", span="268-268", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()"];
n159 [label="var lines = helpText.ToString().ToNotEmptyLines().TrimStringArray()", span="271-271", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()"];
n170 [label="Entry CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", span="252-252", cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)"];
n160 [label="Assert.True(lines[0].StartsWith(''CommandLine'', StringComparison.Ordinal))", span="273-273", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", color=red, community=0];
n161 [label="Assert.True(lines[1].StartsWith(''Copyright (c)'', StringComparison.Ordinal))", span="274-274", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", color=red, community=0];
n162 [label="Assert.Equal(''ERROR(S):'', lines[2])", span="275-275", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", color=red, community=0];
n163 [label="Assert.Equal(''Token 'badtoken' is not recognized.'', lines[3])", span="276-276", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", color=red, community=0];
n164 [label="Assert.Equal(''A sequence option 'i' is defined with few items than required.'', lines[4])", span="277-277", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", color=red, community=0];
n165 [label="Assert.Equal(''--stringvalue    Define a string value here.'', lines[5])", span="278-278", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", color=red, community=0];
n166 [label="Assert.Equal(''-i               Define a int sequence here.'', lines[6])", span="279-279", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", color=red, community=0];
n167 [label="Assert.Equal(''-x               Define a boolean or switch value here.'', lines[7])", span="280-280", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", color=red, community=0];
n168 [label="Assert.Equal(''--help           Display this help screen.'', lines[8])", span="281-281", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", color=red, community=0];
n171 [label="Entry string.StartsWith(string, System.StringComparison)", span="0-0", cluster="string.StartsWith(string, System.StringComparison)"];
n172 [label="Entry Unk.True", span="", cluster="Unk.True"];
n169 [label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", span="256-256", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()"];
n173 [label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", span="286-286", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()"];
n174 [label="var fakeResult = new NotParsed<object>(\r\n                new NullInstance(),\r\n                new Error[]\r\n                    {\r\n                        new HelpVerbRequestedError(''commit'', typeof(CommitOptions), true)\r\n                    })", span="289-294", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()"];
n175 [label="var helpText = HelpText.AutoBuild(fakeResult)", span="297-297", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()"];
n176 [label="var lines = helpText.ToString().ToNotEmptyLines().TrimStringArray()", span="300-300", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()"];
n177 [label="Assert.True(lines[0].StartsWith(''CommandLine'', StringComparison.Ordinal))", span="302-302", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", color=red, community=0];
n178 [label="Assert.True(lines[1].StartsWith(''Copyright (c)'', StringComparison.Ordinal))", span="303-303", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", color=red, community=0];
n179 [label="Assert.Equal(''-p, --patch    Use the interactive patch selection interface to chose which'', lines[2])", span="304-304", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", color=red, community=0];
n180 [label="Assert.Equal(''changes to commit.'', lines[3])", span="305-305", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", color=red, community=0];
n181 [label="Assert.Equal(''--amend        Used to amend the tip of the current branch.'', lines[4])", span="306-306", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", color=red, community=0];
n182 [label="Assert.Equal(''--help         Display this help screen.'', lines[5])", span="307-307", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", color=red, community=0];
n183 [label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", span="286-286", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()"];
n184 [label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", span="312-312", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()"];
n185 [label="var verbTypes = Enumerable.Empty<Type>().Concat(\r\n                new[] { typeof(AddOptions), typeof(CommitOptions), typeof(CloneOptions) })", span="315-316", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()"];
n186 [label="var fakeResult = new NotParsed<object>(\r\n                new NullInstance(),\r\n                verbTypes,\r\n                new Error[] { new HelpVerbRequestedError(null, null, false) })", span="317-320", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()"];
n197 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()"];
n198 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)"];
n187 [label="var helpText = HelpText.AutoBuild(fakeResult)", span="323-323", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()"];
n199 [label="Entry CommandLine.NotParsed<T>.NotParsed(T, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="136-136", cluster="CommandLine.NotParsed<T>.NotParsed(T, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<CommandLine.Error>)"];
n188 [label="var lines = helpText.ToString().ToNotEmptyLines().TrimStringArray()", span="326-326", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()"];
n189 [label="Assert.True(lines[0].StartsWith(''CommandLine'', StringComparison.Ordinal))", span="328-328", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", color=red, community=0];
n190 [label="Assert.True(lines[1].StartsWith(''Copyright (c)'', StringComparison.Ordinal))", span="329-329", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", color=red, community=0];
n191 [label="Assert.Equal(''add        Add file contents to the index.'', lines[2])", span="330-330", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", color=red, community=0];
n192 [label="Assert.Equal(''commit     Record changes to the repository.'', lines[3])", span="331-331", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", color=red, community=0];
n193 [label="Assert.Equal(''clone      Clone a repository into a new directory.'', lines[4])", span="332-332", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", color=red, community=0];
n194 [label="Assert.Equal(''help       Display more information on a specific command.'', lines[5])", span="333-333", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", color=red, community=0];
n195 [label="Assert.Equal(''version    Display version information.'', lines[6])", span="334-334", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", color=red, community=0];
n196 [label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", span="312-312", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()"];
n200 [label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", span="339-339", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()"];
n201 [label="var sut = new HelpText { AddDashesToOption = true }\r\n                .AddPreOptionsLine(''pre-options'')\r\n                .AddOptions(new FakeOptionsWithHelpTextValue())\r\n                .AddPostOptionsLine(''post-options'')", span="343-346", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()"];
n202 [label="var lines = sut.ToString().ToNotEmptyLines().TrimStringArray()", span="350-350", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()"];
n213 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithHelpTextValue.FakeOptionsWithHelpTextValue()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithHelpTextValue.FakeOptionsWithHelpTextValue()"];
n203 [label="Assert.Equal(''pre-options'', lines[0])", span="351-351", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", color=red, community=0];
n204 [label="Assert.Equal(''--stringvalue=STR            Define a string value here.'', lines[1])", span="352-352", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", color=red, community=0];
n205 [label="Assert.Equal(''-i INTSEQ                    Define a int sequence here.'', lines[2])", span="353-353", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", color=red, community=0];
n206 [label="Assert.Equal(''-x                           Define a boolean or switch value here.'', lines[3])", span="354-354", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", color=red, community=0];
n207 [label="Assert.Equal(''--help                       Display this help screen.'', lines[4])", span="355-355", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", color=red, community=0];
n208 [label="Assert.Equal(''--version                    Display version information.'', lines[5])", span="356-356", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", color=red, community=0];
n209 [label="Assert.Equal(''number (pos. 0) NUM          Define a long value here.'', lines[6])", span="357-357", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", color=red, community=0];
n210 [label="Assert.Equal(''paintcolor (pos. 1) COLOR    Define a color value here.'', lines[7])", span="358-358", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", color=red, community=0];
n211 [label="Assert.Equal(''post-options'', lines[8])", span="359-359", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", color=red, community=0];
n212 [label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", span="339-339", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()"];
m0_0 [label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="13-13", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs"];
m0_1 [label="var tokenList = tokens.Memorize()", span="16-16", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", color=green, community=0, file="TokenPartitioner.cs"];
m0_2 [label="var switches = Switch.Partition(tokenList, typeLookup).Memorize()", span="17-17", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", color=green, community=0, file="TokenPartitioner.cs"];
m0_3 [label="var scalars = Scalar.Partition(tokenList, typeLookup).Memorize()", span="18-18", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", color=green, community=0, file="TokenPartitioner.cs"];
m0_4 [label="var sequences = Sequence.Partition(tokenList, typeLookup).Memorize()", span="19-19", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", color=green, community=0, file="TokenPartitioner.cs"];
m0_5 [label="var nonOptions = tokenList\r\n                .Where(t => !switches.Contains(t))\r\n                .Where(t => !scalars.Contains(t))\r\n                .Where(t => !sequences.Contains(t)).Memorize()", span="20-23", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", color=green, community=0, file="TokenPartitioner.cs"];
m0_8 [label="return TokenPartitions.Create(\r\n                    KeyValuePairHelper.ForSwitch(switches)\r\n                        .Concat(KeyValuePairHelper.ForScalar(scalars))\r\n                        .Concat(KeyValuePairHelper.ForSequence(sequences)),\r\n                values.Select(t => t.Text),\r\n                errors);", span="28-33", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs"];
m0_6 [label="var values = nonOptions.Where(v => v.IsValue()).Memorize()", span="24-24", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", color=green, community=0, file="TokenPartitioner.cs"];
m0_7 [label="var errors = nonOptions.Except(values).Memorize()", span="25-25", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", color=green, community=0, file="TokenPartitioner.cs"];
m0_9 [label="Exit CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="13-13", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs"];
m0_26 [label="Entry System.Collections.Generic.List<T>.Contains(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Contains(T)", file="TokenPartitioner.cs"];
m0_12 [label="Entry CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12", cluster="CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs"];
m0_18 [label="Entry CommandLine.Core.KeyValuePairHelper.ForScalar(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="16-16", cluster="CommandLine.Core.KeyValuePairHelper.ForScalar(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="TokenPartitioner.cs"];
m0_37 [label="Entry Unk.IsValue", span="", cluster="Unk.IsValue", file="TokenPartitioner.cs"];
m0_14 [label="Entry Unk.Where", span="", cluster="Unk.Where", file="TokenPartitioner.cs"];
m0_22 [label="Entry Unk.Create", span="", cluster="Unk.Create", file="TokenPartitioner.cs"];
m0_30 [label="Entry Unk.Contains", span="", cluster="Unk.Contains", file="TokenPartitioner.cs"];
m0_16 [label="Entry Unk.Except", span="", cluster="Unk.Except", file="TokenPartitioner.cs"];
m0_38 [label="Entry lambda expression", span="32-32", cluster="lambda expression", file="TokenPartitioner.cs"];
m0_24 [label="!switches.Contains(t)", span="21-21", cluster="lambda expression", file="TokenPartitioner.cs"];
m0_28 [label="!scalars.Contains(t)", span="23-23", cluster="lambda expression", file="TokenPartitioner.cs"];
m0_32 [label="!sequences.Contains(t)", span="23-23", cluster="lambda expression", color=green, community=0, file="TokenPartitioner.cs"];
m0_23 [label="Entry lambda expression", span="22-22", cluster="lambda expression", file="TokenPartitioner.cs"];
m0_27 [label="Entry lambda expression", span="23-23", cluster="lambda expression", file="TokenPartitioner.cs"];
m0_31 [label="Entry lambda expression", span="24-24", cluster="lambda expression", file="TokenPartitioner.cs"];
m0_34 [label="Entry lambda expression", span="25-25", cluster="lambda expression", file="TokenPartitioner.cs"];
m0_25 [label="Exit lambda expression", span="22-22", cluster="lambda expression", file="TokenPartitioner.cs"];
m0_29 [label="Exit lambda expression", span="23-23", cluster="lambda expression", file="TokenPartitioner.cs"];
m0_33 [label="Exit lambda expression", span="24-24", cluster="lambda expression", file="TokenPartitioner.cs"];
m0_35 [label="v.IsValue()", span="24-24", cluster="lambda expression", color=green, community=0, file="TokenPartitioner.cs"];
m0_36 [label="Exit lambda expression", span="25-25", cluster="lambda expression", file="TokenPartitioner.cs"];
m0_39 [label="t.Text", span="32-32", cluster="lambda expression", file="TokenPartitioner.cs"];
m0_40 [label="Exit lambda expression", span="32-32", cluster="lambda expression", file="TokenPartitioner.cs"];
m0_13 [label="Entry CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12", cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs"];
m0_21 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="TokenPartitioner.cs"];
m0_15 [label="Entry Unk.ToList", span="", cluster="Unk.ToList", file="TokenPartitioner.cs"];
m0_17 [label="Entry CommandLine.Core.KeyValuePairHelper.ForSwitch(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="10-10", cluster="CommandLine.Core.KeyValuePairHelper.ForSwitch(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="TokenPartitioner.cs"];
m0_10 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", file="TokenPartitioner.cs"];
m0_20 [label="Entry CommandLine.Core.KeyValuePairHelper.ForSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="22-22", cluster="CommandLine.Core.KeyValuePairHelper.ForSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="TokenPartitioner.cs"];
m0_11 [label="Entry CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11", cluster="CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs"];
m0_41 [label=switches, span="", file="TokenPartitioner.cs"];
m0_42 [label=scalars, span="", file="TokenPartitioner.cs"];
m0_43 [label=sequences, span="", file="TokenPartitioner.cs"];
n0 -> n1  [key=0, style=solid, color=red];
n1 -> n2  [key=0, style=solid, color=red];
n1 -> n3  [key=2, style=dotted, color=red];
n1 -> n4  [key=2, style=dotted, color=red];
n1 -> n5  [key=2, style=dotted, color=red];
n2 -> n0  [key=0, style=bold, color=blue];
n6 -> n7  [key=0, style=solid];
n7 -> n8  [key=0, style=solid];
n7 -> n16  [key=2, style=dotted];
n7 -> n17  [key=2, style=dotted];
n7 -> n18  [key=2, style=dotted];
n7 -> n19  [key=2, style=dotted];
n7 -> n20  [key=2, style=dotted];
n8 -> n9  [key=0, style=solid, color=red];
n8 -> n4  [key=2, style=dotted];
n8 -> n21  [key=2, style=dotted];
n8 -> n10  [key=1, style=dashed, color=red, label=lines];
n8 -> n11  [key=1, style=dashed, color=red, label=lines];
n8 -> n12  [key=1, style=dashed, color=red, label=lines];
n8 -> n13  [key=1, style=dashed, color=red, label=lines];
n8 -> n14  [key=1, style=dashed, color=red, label=lines];
n9 -> n10  [key=0, style=solid, color=red];
n9 -> n5  [key=2, style=dotted, color=red];
n10 -> n11  [key=0, style=solid, color=red];
n10 -> n5  [key=2, style=dotted, color=red];
n11 -> n12  [key=0, style=solid, color=red];
n11 -> n5  [key=2, style=dotted, color=red];
n12 -> n13  [key=0, style=solid, color=red];
n12 -> n5  [key=2, style=dotted, color=red];
n13 -> n14  [key=0, style=solid, color=red];
n13 -> n5  [key=2, style=dotted, color=red];
n14 -> n15  [key=0, style=solid, color=red];
n14 -> n5  [key=2, style=dotted, color=red];
n15 -> n6  [key=0, style=bold, color=blue];
n22 -> n23  [key=0, style=solid];
n23 -> n24  [key=0, style=solid];
n23 -> n3  [key=2, style=dotted];
n23 -> n19  [key=2, style=dotted];
n23 -> n34  [key=2, style=dotted];
n23 -> n35  [key=2, style=dotted];
n23 -> n20  [key=2, style=dotted];
n24 -> n25  [key=0, style=solid];
n24 -> n4  [key=2, style=dotted];
n24 -> n21  [key=2, style=dotted];
n24 -> n36  [key=2, style=dotted];
n24 -> n26  [key=1, style=dashed, color=darkseagreen4, label=lines];
n24 -> n27  [key=1, style=dashed, color=darkseagreen4, label=lines];
n24 -> n28  [key=1, style=dashed, color=darkseagreen4, label=lines];
n24 -> n29  [key=1, style=dashed, color=darkseagreen4, label=lines];
n24 -> n30  [key=1, style=dashed, color=darkseagreen4, label=lines];
n24 -> n31  [key=1, style=dashed, color=darkseagreen4, label=lines];
n24 -> n32  [key=1, style=dashed, color=darkseagreen4, label=lines];
n25 -> n26  [key=0, style=solid];
n25 -> n5  [key=2, style=dotted];
n26 -> n27  [key=0, style=solid];
n26 -> n5  [key=2, style=dotted];
n27 -> n28  [key=0, style=solid];
n27 -> n5  [key=2, style=dotted];
n28 -> n29  [key=0, style=solid];
n28 -> n5  [key=2, style=dotted];
n29 -> n30  [key=0, style=solid];
n29 -> n5  [key=2, style=dotted];
n30 -> n31  [key=0, style=solid];
n30 -> n5  [key=2, style=dotted];
n31 -> n32  [key=0, style=solid];
n31 -> n5  [key=2, style=dotted];
n32 -> n33  [key=0, style=solid];
n32 -> n5  [key=2, style=dotted];
n33 -> n22  [key=0, style=bold, color=blue];
n37 -> n38  [key=0, style=solid];
n38 -> n39  [key=0, style=solid];
n38 -> n3  [key=2, style=dotted];
n38 -> n19  [key=2, style=dotted];
n38 -> n48  [key=2, style=dotted];
n38 -> n35  [key=2, style=dotted];
n38 -> n20  [key=2, style=dotted];
n39 -> n40  [key=0, style=solid, color=red];
n39 -> n4  [key=2, style=dotted];
n39 -> n21  [key=2, style=dotted];
n39 -> n36  [key=2, style=dotted];
n39 -> n41  [key=1, style=dashed, color=red, label=lines];
n39 -> n42  [key=1, style=dashed, color=red, label=lines];
n39 -> n43  [key=1, style=dashed, color=red, label=lines];
n39 -> n44  [key=1, style=dashed, color=red, label=lines];
n39 -> n45  [key=1, style=dashed, color=red, label=lines];
n39 -> n46  [key=1, style=dashed, color=red, label=lines];
n40 -> n41  [key=0, style=solid, color=red];
n40 -> n5  [key=2, style=dotted, color=red];
n41 -> n42  [key=0, style=solid, color=red];
n41 -> n5  [key=2, style=dotted, color=red];
n42 -> n43  [key=0, style=solid, color=red];
n42 -> n5  [key=2, style=dotted, color=red];
n43 -> n44  [key=0, style=solid, color=red];
n43 -> n5  [key=2, style=dotted, color=red];
n44 -> n45  [key=0, style=solid, color=red];
n44 -> n5  [key=2, style=dotted, color=red];
n45 -> n46  [key=0, style=solid, color=red];
n45 -> n5  [key=2, style=dotted, color=red];
n46 -> n47  [key=0, style=solid, color=red];
n46 -> n5  [key=2, style=dotted, color=red];
n47 -> n37  [key=0, style=bold, color=blue];
n49 -> n50  [key=0, style=solid];
n50 -> n51  [key=0, style=solid];
n50 -> n3  [key=2, style=dotted];
n50 -> n19  [key=2, style=dotted];
n50 -> n48  [key=2, style=dotted];
n50 -> n35  [key=2, style=dotted];
n50 -> n20  [key=2, style=dotted];
n51 -> n52  [key=0, style=solid, color=red];
n51 -> n4  [key=2, style=dotted];
n51 -> n21  [key=2, style=dotted];
n51 -> n36  [key=2, style=dotted];
n51 -> n53  [key=1, style=dashed, color=red, label=lines];
n51 -> n54  [key=1, style=dashed, color=red, label=lines];
n51 -> n55  [key=1, style=dashed, color=red, label=lines];
n51 -> n56  [key=1, style=dashed, color=red, label=lines];
n51 -> n57  [key=1, style=dashed, color=red, label=lines];
n52 -> n53  [key=0, style=solid, color=red];
n52 -> n5  [key=2, style=dotted, color=red];
n53 -> n54  [key=0, style=solid, color=red];
n53 -> n5  [key=2, style=dotted, color=red];
n54 -> n55  [key=0, style=solid, color=red];
n54 -> n5  [key=2, style=dotted, color=red];
n55 -> n56  [key=0, style=solid, color=red];
n55 -> n5  [key=2, style=dotted, color=red];
n56 -> n57  [key=0, style=solid, color=red];
n56 -> n5  [key=2, style=dotted, color=red];
n57 -> n58  [key=0, style=solid, color=red];
n57 -> n5  [key=2, style=dotted, color=red];
n58 -> n49  [key=0, style=bold, color=blue];
n59 -> n60  [key=0, style=solid];
n60 -> n61  [key=0, style=solid];
n60 -> n64  [key=2, style=dotted];
n60 -> n65  [key=2, style=dotted];
n60 -> n35  [key=2, style=dotted];
n61 -> n62  [key=0, style=solid, color=red];
n61 -> n4  [key=2, style=dotted];
n61 -> n21  [key=2, style=dotted];
n61 -> n36  [key=2, style=dotted];
n62 -> n63  [key=0, style=solid, color=red];
n62 -> n5  [key=2, style=dotted, color=red];
n63 -> n59  [key=0, style=bold, color=blue];
n66 -> n67  [key=0, style=solid];
n67 -> n68  [key=0, style=solid];
n67 -> n64  [key=2, style=dotted];
n67 -> n17  [key=2, style=dotted];
n67 -> n69  [key=1, style=dashed, color=darkseagreen4, label=sut];
n67 -> n70  [key=1, style=dashed, color=darkseagreen4, label=sut];
n68 -> n69  [key=0, style=solid];
n69 -> n70  [key=0, style=solid];
n69 -> n77  [key=2, style=dotted];
n69 -> n35  [key=2, style=dotted];
n70 -> n71  [key=0, style=solid];
n70 -> n4  [key=2, style=dotted];
n70 -> n78  [key=2, style=dotted];
n70 -> n72  [key=1, style=dashed, color=darkseagreen4, label=lines];
n70 -> n73  [key=1, style=dashed, color=darkseagreen4, label=lines];
n70 -> n74  [key=1, style=dashed, color=darkseagreen4, label=lines];
n70 -> n75  [key=1, style=dashed, color=darkseagreen4, label=lines];
n71 -> n72  [key=0, style=solid];
n71 -> n79  [key=2, style=dotted];
n71 -> n80  [key=2, style=dotted];
n72 -> n73  [key=0, style=solid];
n72 -> n79  [key=2, style=dotted];
n72 -> n80  [key=2, style=dotted];
n73 -> n74  [key=0, style=solid];
n73 -> n79  [key=2, style=dotted];
n73 -> n80  [key=2, style=dotted];
n74 -> n75  [key=0, style=solid];
n74 -> n79  [key=2, style=dotted];
n74 -> n80  [key=2, style=dotted];
n75 -> n76  [key=0, style=solid];
n75 -> n79  [key=2, style=dotted];
n75 -> n80  [key=2, style=dotted];
n76 -> n66  [key=0, style=bold, color=blue];
n81 -> n82  [key=0, style=solid];
n82 -> n83  [key=0, style=solid];
n82 -> n64  [key=2, style=dotted];
n82 -> n17  [key=2, style=dotted];
n82 -> n84  [key=1, style=dashed, color=darkseagreen4, label=sut];
n82 -> n85  [key=1, style=dashed, color=red, label=sut];
n83 -> n84  [key=0, style=solid];
n84 -> n85  [key=0, style=solid, color=red];
n84 -> n93  [key=2, style=dotted];
n84 -> n35  [key=2, style=dotted];
n85 -> n86  [key=0, style=solid, color=red];
n85 -> n4  [key=2, style=dotted, color=red];
n85 -> n78  [key=2, style=dotted, color=red];
n85 -> n87  [key=1, style=dashed, color=red, label=lines];
n85 -> n88  [key=1, style=dashed, color=red, label=lines];
n85 -> n89  [key=1, style=dashed, color=red, label=lines];
n85 -> n90  [key=1, style=dashed, color=red, label=lines];
n85 -> n91  [key=1, style=dashed, color=red, label=lines];
n86 -> n87  [key=0, style=solid, color=red];
n86 -> n79  [key=2, style=dotted, color=red];
n86 -> n80  [key=2, style=dotted, color=red];
n87 -> n88  [key=0, style=solid, color=red];
n87 -> n79  [key=2, style=dotted, color=red];
n87 -> n80  [key=2, style=dotted, color=red];
n88 -> n89  [key=0, style=solid, color=red];
n88 -> n79  [key=2, style=dotted, color=red];
n88 -> n80  [key=2, style=dotted, color=red];
n89 -> n90  [key=0, style=solid, color=red];
n89 -> n79  [key=2, style=dotted, color=red];
n89 -> n80  [key=2, style=dotted, color=red];
n90 -> n91  [key=0, style=solid, color=red];
n90 -> n79  [key=2, style=dotted, color=red];
n90 -> n80  [key=2, style=dotted, color=red];
n91 -> n92  [key=0, style=solid, color=red];
n91 -> n79  [key=2, style=dotted, color=red];
n91 -> n80  [key=2, style=dotted, color=red];
n92 -> n81  [key=0, style=bold, color=blue];
n94 -> n95  [key=0, style=solid];
n95 -> n96  [key=0, style=solid];
n95 -> n64  [key=2, style=dotted];
n95 -> n97  [key=1, style=dashed, color=darkseagreen4, label=sut];
n95 -> n98  [key=1, style=dashed, color=red, label=sut];
n96 -> n97  [key=0, style=solid];
n97 -> n98  [key=0, style=solid, color=red];
n97 -> n19  [key=2, style=dotted];
n97 -> n106  [key=2, style=dotted];
n97 -> n35  [key=2, style=dotted];
n97 -> n20  [key=2, style=dotted];
n98 -> n99  [key=0, style=solid, color=red];
n98 -> n4  [key=2, style=dotted, color=red];
n98 -> n78  [key=2, style=dotted, color=red];
n98 -> n100  [key=1, style=dashed, color=red, label=lines];
n98 -> n101  [key=1, style=dashed, color=red, label=lines];
n98 -> n102  [key=1, style=dashed, color=red, label=lines];
n98 -> n103  [key=1, style=dashed, color=red, label=lines];
n98 -> n104  [key=1, style=dashed, color=red, label=lines];
n99 -> n100  [key=0, style=solid];
n99 -> n79  [key=2, style=dotted];
n99 -> n80  [key=2, style=dotted];
n100 -> n101  [key=0, style=solid];
n100 -> n79  [key=2, style=dotted];
n100 -> n80  [key=2, style=dotted];
n101 -> n102  [key=0, style=solid];
n101 -> n79  [key=2, style=dotted];
n101 -> n80  [key=2, style=dotted];
n102 -> n103  [key=0, style=solid];
n102 -> n79  [key=2, style=dotted];
n102 -> n80  [key=2, style=dotted];
n103 -> n104  [key=0, style=solid];
n103 -> n79  [key=2, style=dotted];
n103 -> n80  [key=2, style=dotted];
n104 -> n105  [key=0, style=solid];
n104 -> n79  [key=2, style=dotted];
n104 -> n80  [key=2, style=dotted];
n105 -> n94  [key=0, style=bold, color=blue];
n107 -> n108  [key=0, style=solid];
n108 -> n109  [key=0, style=solid, color=red];
n108 -> n121  [key=2, style=dotted];
n108 -> n122  [key=2, style=dotted];
n108 -> n123  [key=2, style=dotted];
n108 -> n124  [key=2, style=dotted];
n108 -> n125  [key=2, style=dotted];
n108 -> n126  [key=2, style=dotted];
n108 -> n127  [key=2, style=dotted];
n108 -> n128  [key=2, style=dotted];
n108 -> n129  [key=2, style=dotted];
n108 -> n130  [key=2, style=dotted];
n108 -> n131  [key=2, style=dotted];
n108 -> n132  [key=2, style=dotted];
n108 -> n111  [key=1, style=dashed, color=darkseagreen4, label=fakeResult];
n109 -> n110  [key=0, style=solid, color=red];
n109 -> n135  [key=1, style=dashed, color=red, label="CommandLine.Error"];
n109 -> n137  [key=1, style=dashed, color=red, label="CommandLine.Error"];
n109 -> n139  [key=1, style=dashed, color=red, label="CommandLine.Error"];
n109 -> n141  [key=1, style=dashed, color=red, label="CommandLine.Error"];
n109 -> n143  [key=1, style=dashed, color=red, label="CommandLine.Error"];
n109 -> n145  [key=1, style=dashed, color=red, label="CommandLine.Error"];
n109 -> n149  [key=1, style=dashed, color=red, label="CommandLine.Error"];
n109 -> n111  [key=1, style=dashed, color=red, label=fakeRenderer];
n109 -> n109  [key=3, color=red, style=bold, label="Local variable System.Func<CommandLine.Error, string> fakeRenderer"];
n111 -> n112  [key=0, style=solid];
n111 -> n133  [key=2, style=dotted];
n110 -> n111  [key=0, style=solid];
n110 -> n110  [key=3, color=darkorchid, style=bold, label="Local variable System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string> fakeMutExclRenderer"];
n135 -> n136  [key=0, style=solid];
n135 -> n138  [key=0, style=solid];
n135 -> n140  [key=0, style=solid];
n135 -> n142  [key=0, style=solid];
n135 -> n144  [key=0, style=solid];
n135 -> n146  [key=0, style=solid];
n135 -> n148  [key=0, style=solid];
n135 -> n150  [key=0, style=solid];
n137 -> n151  [key=0, style=solid];
n139 -> n151  [key=0, style=solid];
n141 -> n151  [key=0, style=solid];
n143 -> n151  [key=0, style=solid];
n145 -> n151  [key=0, style=solid];
n149 -> n151  [key=0, style=solid];
n112 -> n113  [key=0, style=solid];
n112 -> n21  [key=2, style=dotted];
n112 -> n114  [key=1, style=dashed, color=darkseagreen4, label=lines];
n112 -> n115  [key=1, style=dashed, color=darkseagreen4, label=lines];
n112 -> n116  [key=1, style=dashed, color=darkseagreen4, label=lines];
n112 -> n117  [key=1, style=dashed, color=darkseagreen4, label=lines];
n112 -> n118  [key=1, style=dashed, color=darkseagreen4, label=lines];
n112 -> n119  [key=1, style=dashed, color=darkseagreen4, label=lines];
n113 -> n114  [key=0, style=solid];
n113 -> n5  [key=2, style=dotted];
n114 -> n115  [key=0, style=solid];
n114 -> n5  [key=2, style=dotted];
n115 -> n116  [key=0, style=solid];
n115 -> n5  [key=2, style=dotted];
n116 -> n117  [key=0, style=solid];
n116 -> n5  [key=2, style=dotted];
n117 -> n118  [key=0, style=solid];
n117 -> n5  [key=2, style=dotted];
n118 -> n119  [key=0, style=solid];
n118 -> n5  [key=2, style=dotted];
n119 -> n120  [key=0, style=solid];
n119 -> n5  [key=2, style=dotted];
n120 -> n107  [key=0, style=bold, color=blue];
n134 -> n135  [key=0, style=solid];
n134 -> n137  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
n134 -> n139  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
n134 -> n141  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
n134 -> n143  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
n134 -> n145  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
n134 -> n149  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
n136 -> n137  [key=0, style=solid];
n138 -> n139  [key=0, style=solid];
n140 -> n141  [key=0, style=solid];
n142 -> n143  [key=0, style=solid];
n144 -> n145  [key=0, style=solid];
n146 -> n147  [key=0, style=solid];
n148 -> n149  [key=0, style=solid];
n150 -> n151  [key=0, style=solid];
n150 -> n152  [key=2, style=dotted];
n147 -> n151  [key=0, style=solid];
n151 -> n134  [key=0, style=bold, color=blue];
n153 -> n154  [key=0, style=solid];
n154 -> n155  [key=0, style=solid];
n155 -> n153  [key=0, style=bold, color=blue];
n156 -> n157  [key=0, style=solid];
n157 -> n158  [key=0, style=solid];
n157 -> n121  [key=2, style=dotted];
n157 -> n34  [key=2, style=dotted];
n157 -> n123  [key=2, style=dotted];
n157 -> n128  [key=2, style=dotted];
n157 -> n125  [key=2, style=dotted];
n158 -> n159  [key=0, style=solid];
n158 -> n170  [key=2, style=dotted];
n159 -> n160  [key=0, style=solid, color=red];
n159 -> n4  [key=2, style=dotted];
n159 -> n21  [key=2, style=dotted];
n159 -> n36  [key=2, style=dotted];
n159 -> n161  [key=1, style=dashed, color=red, label=lines];
n159 -> n162  [key=1, style=dashed, color=red, label=lines];
n159 -> n163  [key=1, style=dashed, color=red, label=lines];
n159 -> n164  [key=1, style=dashed, color=red, label=lines];
n159 -> n165  [key=1, style=dashed, color=red, label=lines];
n159 -> n166  [key=1, style=dashed, color=red, label=lines];
n159 -> n167  [key=1, style=dashed, color=red, label=lines];
n159 -> n168  [key=1, style=dashed, color=red, label=lines];
n160 -> n161  [key=0, style=solid, color=red];
n160 -> n171  [key=2, style=dotted, color=red];
n160 -> n172  [key=2, style=dotted, color=red];
n161 -> n162  [key=0, style=solid, color=red];
n161 -> n171  [key=2, style=dotted, color=red];
n161 -> n172  [key=2, style=dotted, color=red];
n162 -> n163  [key=0, style=solid, color=red];
n162 -> n5  [key=2, style=dotted, color=red];
n163 -> n164  [key=0, style=solid, color=red];
n163 -> n5  [key=2, style=dotted, color=red];
n164 -> n165  [key=0, style=solid, color=red];
n164 -> n5  [key=2, style=dotted, color=red];
n165 -> n166  [key=0, style=solid, color=red];
n165 -> n5  [key=2, style=dotted, color=red];
n166 -> n167  [key=0, style=solid, color=red];
n166 -> n5  [key=2, style=dotted, color=red];
n167 -> n168  [key=0, style=solid, color=red];
n167 -> n5  [key=2, style=dotted, color=red];
n168 -> n169  [key=0, style=solid, color=red];
n168 -> n5  [key=2, style=dotted, color=red];
n169 -> n156  [key=0, style=bold, color=blue];
n173 -> n174  [key=0, style=solid];
n174 -> n175  [key=0, style=solid];
n174 -> n121  [key=2, style=dotted];
n174 -> n122  [key=2, style=dotted];
n174 -> n132  [key=2, style=dotted];
n175 -> n176  [key=0, style=solid];
n175 -> n170  [key=2, style=dotted];
n176 -> n177  [key=0, style=solid, color=red];
n176 -> n4  [key=2, style=dotted];
n176 -> n21  [key=2, style=dotted];
n176 -> n36  [key=2, style=dotted];
n176 -> n178  [key=1, style=dashed, color=red, label=lines];
n176 -> n179  [key=1, style=dashed, color=red, label=lines];
n176 -> n180  [key=1, style=dashed, color=red, label=lines];
n176 -> n181  [key=1, style=dashed, color=red, label=lines];
n176 -> n182  [key=1, style=dashed, color=red, label=lines];
n177 -> n178  [key=0, style=solid, color=red];
n177 -> n171  [key=2, style=dotted, color=red];
n177 -> n172  [key=2, style=dotted, color=red];
n178 -> n179  [key=0, style=solid, color=red];
n178 -> n171  [key=2, style=dotted, color=red];
n178 -> n172  [key=2, style=dotted, color=red];
n179 -> n180  [key=0, style=solid, color=red];
n179 -> n5  [key=2, style=dotted, color=red];
n180 -> n181  [key=0, style=solid, color=red];
n180 -> n5  [key=2, style=dotted, color=red];
n181 -> n182  [key=0, style=solid, color=red];
n181 -> n5  [key=2, style=dotted, color=red];
n182 -> n183  [key=0, style=solid, color=red];
n182 -> n5  [key=2, style=dotted, color=red];
n183 -> n173  [key=0, style=bold, color=blue];
n184 -> n185  [key=0, style=solid];
n185 -> n186  [key=0, style=solid];
n185 -> n197  [key=2, style=dotted];
n185 -> n198  [key=2, style=dotted];
n186 -> n187  [key=0, style=solid];
n186 -> n199  [key=2, style=dotted];
n186 -> n122  [key=2, style=dotted];
n186 -> n132  [key=2, style=dotted];
n187 -> n188  [key=0, style=solid];
n187 -> n170  [key=2, style=dotted];
n188 -> n189  [key=0, style=solid, color=red];
n188 -> n4  [key=2, style=dotted];
n188 -> n21  [key=2, style=dotted];
n188 -> n36  [key=2, style=dotted];
n188 -> n190  [key=1, style=dashed, color=red, label=lines];
n188 -> n191  [key=1, style=dashed, color=red, label=lines];
n188 -> n192  [key=1, style=dashed, color=red, label=lines];
n188 -> n193  [key=1, style=dashed, color=red, label=lines];
n188 -> n194  [key=1, style=dashed, color=red, label=lines];
n188 -> n195  [key=1, style=dashed, color=red, label=lines];
n189 -> n190  [key=0, style=solid, color=red];
n189 -> n171  [key=2, style=dotted, color=red];
n189 -> n172  [key=2, style=dotted, color=red];
n190 -> n191  [key=0, style=solid, color=red];
n190 -> n171  [key=2, style=dotted, color=red];
n190 -> n172  [key=2, style=dotted, color=red];
n191 -> n192  [key=0, style=solid, color=red];
n191 -> n5  [key=2, style=dotted, color=red];
n192 -> n193  [key=0, style=solid, color=red];
n192 -> n5  [key=2, style=dotted, color=red];
n193 -> n194  [key=0, style=solid, color=red];
n193 -> n5  [key=2, style=dotted, color=red];
n194 -> n195  [key=0, style=solid, color=red];
n194 -> n5  [key=2, style=dotted, color=red];
n195 -> n196  [key=0, style=solid, color=red];
n195 -> n5  [key=2, style=dotted, color=red];
n196 -> n184  [key=0, style=bold, color=blue];
n200 -> n201  [key=0, style=solid];
n201 -> n202  [key=0, style=solid];
n201 -> n3  [key=2, style=dotted];
n201 -> n19  [key=2, style=dotted];
n201 -> n213  [key=2, style=dotted];
n201 -> n35  [key=2, style=dotted];
n201 -> n20  [key=2, style=dotted];
n202 -> n203  [key=0, style=solid, color=red];
n202 -> n4  [key=2, style=dotted];
n202 -> n21  [key=2, style=dotted];
n202 -> n36  [key=2, style=dotted];
n202 -> n204  [key=1, style=dashed, color=red, label=lines];
n202 -> n205  [key=1, style=dashed, color=red, label=lines];
n202 -> n206  [key=1, style=dashed, color=red, label=lines];
n202 -> n207  [key=1, style=dashed, color=red, label=lines];
n202 -> n208  [key=1, style=dashed, color=red, label=lines];
n202 -> n209  [key=1, style=dashed, color=red, label=lines];
n202 -> n210  [key=1, style=dashed, color=red, label=lines];
n202 -> n211  [key=1, style=dashed, color=red, label=lines];
n203 -> n204  [key=0, style=solid, color=red];
n203 -> n5  [key=2, style=dotted, color=red];
n204 -> n205  [key=0, style=solid, color=red];
n204 -> n5  [key=2, style=dotted, color=red];
n205 -> n206  [key=0, style=solid, color=red];
n205 -> n5  [key=2, style=dotted, color=red];
n206 -> n207  [key=0, style=solid, color=red];
n206 -> n5  [key=2, style=dotted, color=red];
n207 -> n208  [key=0, style=solid, color=red];
n207 -> n5  [key=2, style=dotted, color=red];
n208 -> n209  [key=0, style=solid, color=red];
n208 -> n5  [key=2, style=dotted, color=red];
n209 -> n210  [key=0, style=solid, color=red];
n209 -> n5  [key=2, style=dotted, color=red];
n210 -> n211  [key=0, style=solid, color=red];
n210 -> n5  [key=2, style=dotted, color=red];
n211 -> n212  [key=0, style=solid, color=red];
n211 -> n5  [key=2, style=dotted, color=red];
n212 -> n200  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid, color=green];
m0_0 -> m0_2  [key=1, style=dashed, color=green, label="System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>"];
m0_0 -> m0_3  [key=1, style=dashed, color=green, label="System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>"];
m0_0 -> m0_4  [key=1, style=dashed, color=green, label="System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>"];
m0_1 -> m0_2  [key=0, style=solid, color=green];
m0_1 -> m0_10  [key=2, style=dotted, color=green];
m0_1 -> m0_3  [key=1, style=dashed, color=green, label=tokenList];
m0_1 -> m0_4  [key=1, style=dashed, color=green, label=tokenList];
m0_1 -> m0_5  [key=1, style=dashed, color=green, label=tokenList];
m0_2 -> m0_3  [key=0, style=solid, color=green];
m0_2 -> m0_11  [key=2, style=dotted, color=green];
m0_2 -> m0_10  [key=2, style=dotted, color=green];
m0_2 -> m0_5  [key=1, style=dashed, color=green, label=switches];
m0_2 -> m0_24  [key=1, style=dashed, color=green, label=switches];
m0_2 -> m0_8  [key=1, style=dashed, color=green, label=switches];
m0_3 -> m0_4  [key=0, style=solid, color=green];
m0_3 -> m0_12  [key=2, style=dotted, color=green];
m0_3 -> m0_10  [key=2, style=dotted, color=green];
m0_3 -> m0_5  [key=1, style=dashed, color=green, label=scalars];
m0_3 -> m0_28  [key=1, style=dashed, color=green, label=scalars];
m0_3 -> m0_8  [key=1, style=dashed, color=green, label=scalars];
m0_4 -> m0_5  [key=0, style=solid, color=green];
m0_4 -> m0_13  [key=2, style=dotted, color=green];
m0_4 -> m0_10  [key=2, style=dotted, color=green];
m0_4 -> m0_32  [key=1, style=dashed, color=green, label=sequences];
m0_4 -> m0_8  [key=1, style=dashed, color=green, label=sequences];
m0_5 -> m0_6  [key=0, style=solid, color=green];
m0_5 -> m0_14  [key=2, style=dotted, color=green];
m0_5 -> m0_15  [key=2, style=dotted, color=green];
m0_5 -> m0_23  [key=1, style=dashed, color=green, label="lambda expression"];
m0_5 -> m0_27  [key=1, style=dashed, color=green, label="lambda expression"];
m0_5 -> m0_31  [key=1, style=dashed, color=green, label="lambda expression"];
m0_5 -> m0_7  [key=1, style=dashed, color=green, label=nonOptions];
m0_8 -> m0_9  [key=0, style=solid];
m0_8 -> m0_17  [key=2, style=dotted];
m0_8 -> m0_18  [key=2, style=dotted];
m0_8 -> n198  [key=2, style=dotted];
m0_8 -> m0_20  [key=2, style=dotted];
m0_8 -> m0_21  [key=2, style=dotted];
m0_8 -> m0_22  [key=2, style=dotted];
m0_8 -> m0_38  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_6 -> m0_7  [key=0, style=solid, color=green];
m0_6 -> m0_14  [key=2, style=dotted, color=green];
m0_6 -> m0_15  [key=2, style=dotted, color=green];
m0_6 -> m0_34  [key=1, style=dashed, color=green, label="lambda expression"];
m0_6 -> m0_8  [key=1, style=dashed, color=green, label=values];
m0_7 -> m0_8  [key=0, style=solid, color=green];
m0_7 -> m0_16  [key=2, style=dotted, color=green];
m0_7 -> m0_15  [key=2, style=dotted, color=red];
m0_7 -> m0_10  [key=2, style=dotted, color=green];
m0_9 -> m0_0  [key=0, style=bold, color=blue];
m0_38 -> m0_39  [key=0, style=solid];
m0_24 -> m0_25  [key=0, style=solid];
m0_24 -> m0_26  [key=2, style=dotted];
m0_28 -> m0_29  [key=0, style=solid];
m0_28 -> m0_30  [key=2, style=dotted];
m0_32 -> m0_33  [key=0, style=solid, color=green];
m0_32 -> m0_30  [key=2, style=dotted, color=green];
m0_23 -> m0_24  [key=0, style=solid];
m0_27 -> m0_28  [key=0, style=solid];
m0_31 -> m0_32  [key=0, style=solid, color=green];
m0_34 -> m0_35  [key=0, style=solid, color=green];
m0_25 -> m0_23  [key=0, style=bold, color=blue];
m0_29 -> m0_27  [key=0, style=bold, color=blue];
m0_33 -> m0_31  [key=0, style=bold, color=blue];
m0_35 -> m0_36  [key=0, style=solid, color=green];
m0_35 -> m0_37  [key=2, style=dotted, color=green];
m0_36 -> m0_34  [key=0, style=bold, color=blue];
m0_39 -> m0_40  [key=0, style=solid];
m0_40 -> m0_38  [key=0, style=bold, color=blue];
m0_41 -> m0_24  [key=1, style=dashed, color=darkseagreen4, label=switches];
m0_42 -> m0_28  [key=1, style=dashed, color=darkseagreen4, label=scalars];
m0_43 -> m0_32  [key=1, style=dashed, color=green, label=sequences];
}
