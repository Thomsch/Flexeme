digraph  {
n0 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_empty_instance()", label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Create_empty_instance()", span="16-16"];
n2 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_empty_instance()", label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Create_empty_instance()", span="16-16"];
n3 [cluster="CommandLine.Text.HelpText.HelpText()", label="Entry CommandLine.Text.HelpText.HelpText()", span="34-34"];
n4 [cluster="CommandLine.Text.HelpText.ToString()", label="Entry CommandLine.Text.HelpText.ToString()", span="453-453"];
n5 [cluster="Unk.Equal", label="Entry Unk.Equal", span=""];
n6 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", span="22-22"];
n7 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", label="var sut =\r\n                new HelpText(new HeadingInfo(''Unit-tests'', ''2.0''), new CopyrightInfo(true, ''Author'', 2005, 2013))\r\n                    .AddPreOptionsLine(''pre-options line 1'')\r\n                    .AddPreOptionsLine(''pre-options line 2'')\r\n                    .AddPostOptionsLine(''post-options line 1'')\r\n                    .AddPostOptionsLine(''post-options line 2'')", span="26-31"];
n8 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", label="var lines = sut.ToString().ToNotEmptyLines()", span="34-34"];
n16 [cluster="CommandLine.Text.HelpText.HelpText(string, string)", label="Entry CommandLine.Text.HelpText.HelpText(string, string)", span="80-80"];
n17 [cluster="CommandLine.Text.HeadingInfo.HeadingInfo(string, string)", label="Entry CommandLine.Text.HeadingInfo.HeadingInfo(string, string)", span="27-27"];
n18 [cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])", label="Entry CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])", span="60-60"];
n19 [cluster="CommandLine.Text.HelpText.AddPreOptionsLine(string)", label="Entry CommandLine.Text.HelpText.AddPreOptionsLine(string)", span="330-330"];
n20 [cluster="CommandLine.Text.HelpText.AddPostOptionsLine(string)", label="Entry CommandLine.Text.HelpText.AddPostOptionsLine(string)", span="340-340"];
n21 [cluster="string.ToNotEmptyLines()", label="Entry string.ToNotEmptyLines()", span="10-10"];
n15 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", span="22-22"];
n22 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", span="46-46"];
n23 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", label="var sut = new HelpText { AddDashesToOption = true }\r\n                .AddPreOptionsLine(''pre-options'')\r\n                .AddOptions(new FakeOptions())\r\n                .AddPostOptionsLine(''post-options'')", span="50-53"];
n24 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", label="var lines = sut.ToString().ToNotEmptyLines().TrimStringArray()", span="57-57"];
n34 [cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6"];
n35 [cluster="CommandLine.Text.HelpText.AddOptions<T>(T)", label="Entry CommandLine.Text.HelpText.AddOptions<T>(T)", span="350-350"];
n25 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", label="Assert.Equal(''pre-options'', lines[0])", span="58-58"];
n36 [cluster="System.Collections.Generic.IEnumerable<string>.TrimStringArray()", label="Entry System.Collections.Generic.IEnumerable<string>.TrimStringArray()", span="15-15"];
n26 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", label="Assert.Equal(''--stringvalue    Define a string value here.'', lines[1])", span="59-59"];
n27 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", label="Assert.Equal(''-i               Define a int sequence here.'', lines[2])", span="60-60"];
n28 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", label="Assert.Equal(''-x               Define a boolean or switch value here.'', lines[3])", span="61-61"];
n29 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", label="Assert.Equal(''--help           Display this help screen.'', lines[4])", span="62-62"];
n30 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", label="Assert.Equal(''--version        Display version information.'', lines[5])", span="63-63"];
n31 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", label="Assert.Equal(''value pos. 0     Define a long value here.'', lines[6])", span="64-64"];
n32 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", label="Assert.Equal(''post-options'', lines[7])", span="65-65"];
n33 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", span="46-46"];
n37 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", span="70-70"];
n38 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", label="var sut = new HelpText { AddDashesToOption = true, AddEnumValuesToHelpText = true }\r\n                .AddPreOptionsLine(''pre-options'')\r\n                .AddOptions(new FakeOptionsWithHelpTextEnum())\r\n                .AddPostOptionsLine(''post-options'')", span="74-77"];
n39 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", label="var lines = sut.ToString().ToNotEmptyLines().TrimStringArray()", span="81-81"];
n48 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithHelpTextEnum.FakeOptionsWithHelpTextEnum()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithHelpTextEnum.FakeOptionsWithHelpTextEnum()", span="11-11"];
n47 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", span="70-70"];
n49 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", span="93-93"];
n50 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", label="var sut = new HelpText { AddDashesToOption = true }\r\n                .AddPreOptionsLine(''pre-options'')\r\n                .AddOptions(new FakeOptionsWithHelpTextEnum())\r\n                .AddPostOptionsLine(''post-options'')", span="97-100"];
n51 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", label="var lines = sut.ToString().ToNotEmptyLines().TrimStringArray()", span="104-104"];
n58 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", span="93-93"];
n59 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_defined_MetaValue_should_be_rendered()", label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.When_defined_MetaValue_should_be_rendered()", span="115-115"];
n60 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_defined_MetaValue_should_be_rendered()", label="var sut = new HelpText(''Meta Value.'')\r\n                .AddOptions(new FakeOptionsWithMetaValue())", span="119-120"];
n61 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_defined_MetaValue_should_be_rendered()", label="var lines = sut.ToString().ToNotEmptyLines().TrimStringArray()", span="123-123"];
n64 [cluster="CommandLine.Text.HelpText.HelpText(string)", label="Entry CommandLine.Text.HelpText.HelpText(string)", span="57-57"];
n65 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithMetaValue.FakeOptionsWithMetaValue()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMetaValue.FakeOptionsWithMetaValue()", span="4-4"];
n63 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_defined_MetaValue_should_be_rendered()", label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.When_defined_MetaValue_should_be_rendered()", span="115-115"];
n66 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()", label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()", span="130-130"];
n67 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()", label="var sut = new HelpText(new HeadingInfo(''CommandLine.Tests.dll'', ''1.9.4.131''))", span="134-134"];
n68 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()", label="sut.MaximumDisplayWidth = 40", span="135-135"];
n69 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()", label="sut.AddOptions(new FakeOptionsWithLongDescription())", span="136-136"];
n70 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()", label="var lines = sut.ToString().Split(new[] { Environment.NewLine }, StringSplitOptions.None)", span="139-139"];
n77 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithLongDescription.FakeOptionsWithLongDescription()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithLongDescription.FakeOptionsWithLongDescription()", span="22-22"];
n71 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()", label="lines[2].Should().Be(''  v, verbose    This is the description'')", span="140-140"];
n78 [cluster="string.Split(string[], System.StringSplitOptions)", label="Entry string.Split(string[], System.StringSplitOptions)", span="0-0"];
n72 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()", label="lines[3].Should().Be(''                of the verbosity to '')", span="142-142"];
n73 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()", label="lines[4].Should().Be(''                test out the wrapping '')", span="143-143"];
n74 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()", label="lines[5].Should().Be(''                capabilities of the '')", span="144-144"];
n75 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()", label="lines[6].Should().Be(''                Help Text.'')", span="145-145"];
n79 [cluster="Unk.Should", label="Entry Unk.Should", span=""];
n80 [cluster="Unk.Be", label="Entry Unk.Be", span=""];
n76 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()", label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()", span="130-130"];
n81 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", span="150-150"];
n82 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", label="var sut = new HelpText(new HeadingInfo(''CommandLine.Tests.dll'', ''1.9.4.131''))", span="154-154"];
n83 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", label="sut.MaximumDisplayWidth = 40", span="155-155"];
n84 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", label="sut.AddOptions(new FakeOptionsWithLongDescriptionAndNoSpaces())", span="156-156"];
n93 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithLongDescriptionAndNoSpaces.FakeOptionsWithLongDescriptionAndNoSpaces()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithLongDescriptionAndNoSpaces.FakeOptionsWithLongDescriptionAndNoSpaces()", span="31-31"];
n92 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", span="150-150"];
n94 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", span="170-170"];
n95 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", label="var sut = new HelpText(''Heading Info.'')", span="174-174"];
n96 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", label="sut.MaximumDisplayWidth = 40", span="175-175"];
n97 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", label="sut.AddPreOptionsLine(''Before 0123456789012345678901234567890123456789012 After'')\r\n                .AddOptions(new FakeOptionsForHelp())\r\n                .AddPostOptionsLine(''Before 0123456789012345678901234567890123456789 After'')", span="176-178"];
n106 [cluster="CommandLine.Tests.Fakes.FakeOptionsForHelp.FakeOptionsForHelp()", label="Entry CommandLine.Tests.Fakes.FakeOptionsForHelp.FakeOptionsForHelp()", span="4-4"];
n99 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", label="lines[1].Should().Be(''Before '')", span="182-182"];
n100 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", label="lines[2].Should().Be(''0123456789012345678901234567890123456789'')", span="183-183"];
n101 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", label="lines[3].Should().Be(''012 After'')", span="184-184"];
n102 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", label="lines[lines.Length - 3].Should().Be(''Before '')", span="185-185"];
n103 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", label="lines[lines.Length - 2].Should().Be(''0123456789012345678901234567890123456789'')", span="186-186"];
n104 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", label="lines[lines.Length - 1].Should().Be('' After'')", span="187-187"];
n105 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", span="170-170"];
n107 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", span="193-193"];
n108 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", label="var fakeResult = new NotParsed<object>(\r\n                new NullInstance(),\r\n                new Error[]\r\n                    {\r\n                        new BadFormatTokenError(''badtoken''),\r\n                        new MissingValueOptionError(new NameInfo(''x'', ''switch'')),\r\n                        new UnknownOptionError(''unknown''),\r\n                        new MissingRequiredOptionError(new NameInfo('''', ''missing'')),\r\n                        //new MutuallyExclusiveSetError(new NameInfo(''z'', ''''), string.Empty),\r\n                        new SequenceOutOfRangeError(new NameInfo(''s'', ''sequence'')),\r\n                        new NoVerbSelectedError(),\r\n                        new BadVerbSelectedError(''badverb''),\r\n                        new HelpRequestedError(), // should be ignored\r\n                        new HelpVerbRequestedError(null, null, false) // should be ignored \r\n                    })", span="196-210"];
n121 [cluster="CommandLine.NotParsed<T>.NotParsed(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", label="Entry CommandLine.NotParsed<T>.NotParsed(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="142-142"];
n122 [cluster="CommandLine.NullInstance.NullInstance()", label="Entry CommandLine.NullInstance.NullInstance()", span="9-9"];
n123 [cluster="CommandLine.BadFormatTokenError.BadFormatTokenError(string)", label="Entry CommandLine.BadFormatTokenError.BadFormatTokenError(string)", span="196-196"];
n124 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="269-269"];
n125 [cluster="CommandLine.NameInfo.NameInfo(string, string)", label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20"];
n126 [cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="280-280"];
n127 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="291-291"];
n128 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="335-335"];
n129 [cluster="CommandLine.NoVerbSelectedError.NoVerbSelectedError()", label="Entry CommandLine.NoVerbSelectedError.NoVerbSelectedError()", span="421-421"];
n130 [cluster="CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", label="Entry CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", span="357-357"];
n131 [cluster="CommandLine.HelpRequestedError.HelpRequestedError()", label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="368-368"];
n132 [cluster="CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", label="Entry CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", span="383-383"];
n111 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", label="var errorsText = HelpText.RenderParsingErrorsText(fakeResult, fakeRenderer, fakeMutExclRenderer, 2)", span="239-239"];
n110 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", label="Func<IEnumerable<MutuallyExclusiveSetError>, string> fakeMutExclRenderer =\r\n                _ => string.Empty", span="235-236"];
n135 [cluster="lambda expression", label="err.Tag", span="213-213"];
n137 [cluster="lambda expression", label="return ''ERR '' + ((BadFormatTokenError)err).Token;", span="216-216"];
n139 [cluster="lambda expression", label="return ''ERR '' + ((MissingValueOptionError)err).NameInfo.NameText;", span="218-218"];
n141 [cluster="lambda expression", label="return ''ERR '' + ((UnknownOptionError)err).Token;", span="220-220"];
n143 [cluster="lambda expression", label="return ''ERR '' + ((MissingRequiredOptionError)err).NameInfo.NameText;", span="222-222"];
n145 [cluster="lambda expression", label="return ''ERR '' + ((SequenceOutOfRangeError)err).NameInfo.NameText;", span="226-226"];
n149 [cluster="lambda expression", label="return ''ERR '' + ((BadVerbSelectedError)err).Token;", span="230-230"];
n112 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", label="var lines = errorsText.ToNotEmptyLines()", span="242-242"];
n133 [cluster="CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)", label="Entry CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)", span="416-416"];
n113 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", label="Assert.Equal(''  ERR badtoken'', lines[0])", span="244-244"];
n114 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", label="Assert.Equal(''  ERR x, switch'', lines[1])", span="245-245"];
n115 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", label="Assert.Equal(''  ERR unknown'', lines[2])", span="246-246"];
n116 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", label="Assert.Equal(''  ERR missing'', lines[3])", span="247-247"];
n117 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", label="Assert.Equal(''  ERR s, sequence'', lines[4])", span="249-249"];
n118 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", label="Assert.Equal(''  ERR no-verb-selected'', lines[5])", span="250-250"];
n119 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", label="Assert.Equal(''  ERR badverb'', lines[6])", span="251-251"];
n120 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", span="193-193"];
n134 [cluster="lambda expression", label="Entry lambda expression", span="211-234"];
n136 [cluster="lambda expression", label="ErrorType.BadFormatTokenError", span="215-215"];
n138 [cluster="lambda expression", label="ErrorType.MissingValueOptionError", span="217-217"];
n140 [cluster="lambda expression", label="ErrorType.UnknownOptionError", span="219-219"];
n142 [cluster="lambda expression", label="ErrorType.MissingRequiredOptionError", span="221-221"];
n144 [cluster="lambda expression", label="ErrorType.SequenceOutOfRangeError", span="225-225"];
n146 [cluster="lambda expression", label="ErrorType.NoVerbSelectedError", span="227-227"];
n148 [cluster="lambda expression", label="ErrorType.BadVerbSelectedError", span="229-229"];
n150 [cluster="lambda expression", label="throw new InvalidOperationException();", span="232-232"];
n147 [cluster="lambda expression", label="return ''ERR no-verb-selected'';", span="228-228"];
n151 [cluster="lambda expression", label="Exit lambda expression", span="211-234"];
n152 [cluster="System.InvalidOperationException.InvalidOperationException()", label="Entry System.InvalidOperationException.InvalidOperationException()", span="0-0"];
n153 [cluster="lambda expression", label="Entry lambda expression", span="236-236"];
n154 [cluster="lambda expression", label="string.Empty", span="236-236"];
n155 [cluster="lambda expression", label="Exit lambda expression", span="236-236"];
n156 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", span="256-256"];
n157 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", label="var fakeResult = new NotParsed<FakeOptions>(\r\n                new FakeOptions(),\r\n                new Error[]\r\n                    {\r\n                        new BadFormatTokenError(''badtoken''),\r\n                        new SequenceOutOfRangeError(new NameInfo(''i'', ''''))\r\n                    })", span="259-265"];
n158 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", label="var helpText = HelpText.AutoBuild(fakeResult)", span="268-268"];
n159 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", label="var lines = helpText.ToString().ToNotEmptyLines().TrimStringArray()", span="271-271"];
n170 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", label="Entry CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", span="252-252"];
n171 [cluster="string.StartsWith(string, System.StringComparison)", label="Entry string.StartsWith(string, System.StringComparison)", span="0-0"];
n172 [cluster="Unk.True", label="Entry Unk.True", span=""];
n169 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", span="256-256"];
n173 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", span="286-286"];
n174 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", label="var fakeResult = new NotParsed<object>(\r\n                new NullInstance(),\r\n                new Error[]\r\n                    {\r\n                        new HelpVerbRequestedError(''commit'', typeof(CommitOptions), true)\r\n                    })", span="289-294"];
n175 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", label="var helpText = HelpText.AutoBuild(fakeResult)", span="297-297"];
n176 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", label="var lines = helpText.ToString().ToNotEmptyLines().TrimStringArray()", span="300-300"];
n183 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", span="286-286"];
n184 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", span="312-312"];
n185 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", label="var verbTypes = Enumerable.Empty<Type>().Concat(\r\n                new[] { typeof(AddOptions), typeof(CommitOptions), typeof(CloneOptions) })", span="315-316"];
n186 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", label="var fakeResult = new NotParsed<object>(\r\n                new NullInstance(),\r\n                verbTypes,\r\n                new Error[] { new HelpVerbRequestedError(null, null, false) })", span="317-320"];
n197 [cluster="System.Linq.Enumerable.Empty<TResult>()", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
n198 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
n187 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", label="var helpText = HelpText.AutoBuild(fakeResult)", span="323-323"];
n199 [cluster="CommandLine.NotParsed<T>.NotParsed(T, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<CommandLine.Error>)", label="Entry CommandLine.NotParsed<T>.NotParsed(T, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="136-136"];
n188 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", label="var lines = helpText.ToString().ToNotEmptyLines().TrimStringArray()", span="326-326"];
n196 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", span="312-312"];
n200 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", span="339-339"];
n201 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", label="var sut = new HelpText { AddDashesToOption = true }\r\n                .AddPreOptionsLine(''pre-options'')\r\n                .AddOptions(new FakeOptionsWithHelpTextValue())\r\n                .AddPostOptionsLine(''post-options'')", span="343-346"];
n202 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", label="var lines = sut.ToString().ToNotEmptyLines().TrimStringArray()", span="350-350"];
n213 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithHelpTextValue.FakeOptionsWithHelpTextValue()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithHelpTextValue.FakeOptionsWithHelpTextValue()", span="6-6"];
n212 [cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", span="339-339"];
m0_0 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="13-13"];
m0_1 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", color=green, community=0, file="TokenPartitioner.cs", label="var tokenList = tokens.Memorize()", prediction=0, span="16-16"];
m0_2 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", color=green, community=0, file="TokenPartitioner.cs", label="var switches = Switch.Partition(tokenList, typeLookup).Memorize()", prediction=1, span="17-17"];
m0_3 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", color=green, community=0, file="TokenPartitioner.cs", label="var scalars = Scalar.Partition(tokenList, typeLookup).Memorize()", prediction=2, span="18-18"];
m0_4 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", color=green, community=0, file="TokenPartitioner.cs", label="var sequences = Sequence.Partition(tokenList, typeLookup).Memorize()", prediction=3, span="19-19"];
m0_5 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", color=green, community=0, file="TokenPartitioner.cs", label="var nonOptions = tokenList\r\n                .Where(t => !switches.Contains(t))\r\n                .Where(t => !scalars.Contains(t))\r\n                .Where(t => !sequences.Contains(t)).Memorize()", prediction=4, span="20-23"];
m0_8 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs", label="return TokenPartitions.Create(\r\n                    KeyValuePairHelper.ForSwitch(switches)\r\n                        .Concat(KeyValuePairHelper.ForScalar(scalars))\r\n                        .Concat(KeyValuePairHelper.ForSequence(sequences)),\r\n                values.Select(t => t.Text),\r\n                errors);", span="28-33"];
m0_6 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", color=green, community=0, file="TokenPartitioner.cs", label="var values = nonOptions.Where(v => v.IsValue()).Memorize()", prediction=5, span="24-24"];
m0_7 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", color=green, community=0, file="TokenPartitioner.cs", label="var errors = nonOptions.Except(values).Memorize()", prediction=6, span="25-25"];
m0_9 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs", label="Exit CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="13-13"];
m0_26 [cluster="System.Collections.Generic.List<T>.Contains(T)", file="TokenPartitioner.cs", label="Entry System.Collections.Generic.List<T>.Contains(T)", span="0-0"];
m0_12 [cluster="CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12"];
m0_18 [cluster="CommandLine.Core.KeyValuePairHelper.ForScalar(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.KeyValuePairHelper.ForScalar(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="16-16"];
m0_37 [cluster="Unk.IsValue", file="TokenPartitioner.cs", label="Entry Unk.IsValue", span=""];
m0_14 [cluster="Unk.Where", file="TokenPartitioner.cs", label="Entry Unk.Where", span=""];
m0_22 [cluster="Unk.Create", file="TokenPartitioner.cs", label="Entry Unk.Create", span=""];
m0_30 [cluster="Unk.Contains", file="TokenPartitioner.cs", label="Entry Unk.Contains", span=""];
m0_16 [cluster="Unk.Except", file="TokenPartitioner.cs", label="Entry Unk.Except", span=""];
m0_38 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="32-32"];
m0_24 [cluster="lambda expression", file="TokenPartitioner.cs", label="!switches.Contains(t)", span="21-21"];
m0_28 [cluster="lambda expression", file="TokenPartitioner.cs", label="!scalars.Contains(t)", span="23-23"];
m0_32 [cluster="lambda expression", color=green, community=0, file="TokenPartitioner.cs", label="!sequences.Contains(t)", prediction=3, span="23-23"];
m0_23 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="22-22"];
m0_27 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="23-23"];
m0_31 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="24-24"];
m0_34 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="25-25"];
m0_25 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="22-22"];
m0_29 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="23-23"];
m0_33 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="24-24"];
m0_35 [cluster="lambda expression", color=green, community=0, file="TokenPartitioner.cs", label="v.IsValue()", prediction=8, span="24-24"];
m0_36 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="25-25"];
m0_39 [cluster="lambda expression", file="TokenPartitioner.cs", label="t.Text", span="32-32"];
m0_40 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="32-32"];
m0_13 [cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12"];
m0_21 [cluster="Unk.Select", file="TokenPartitioner.cs", label="Entry Unk.Select", span=""];
m0_15 [cluster="Unk.ToList", file="TokenPartitioner.cs", label="Entry Unk.ToList", span=""];
m0_17 [cluster="CommandLine.Core.KeyValuePairHelper.ForSwitch(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.KeyValuePairHelper.ForSwitch(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="10-10"];
m0_10 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", file="TokenPartitioner.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", span="0-0"];
m0_20 [cluster="CommandLine.Core.KeyValuePairHelper.ForSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.KeyValuePairHelper.ForSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="22-22"];
m0_11 [cluster="CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11"];
m0_41 [file="TokenPartitioner.cs", label=switches, span=""];
m0_42 [file="TokenPartitioner.cs", label=scalars, span=""];
m0_43 [file="TokenPartitioner.cs", label=sequences, span=""];
n24 -> n26  [color=darkseagreen4, key=1, label=lines, style=dashed];
n24 -> n27  [color=darkseagreen4, key=1, label=lines, style=dashed];
n24 -> n28  [color=darkseagreen4, key=1, label=lines, style=dashed];
n24 -> n29  [color=darkseagreen4, key=1, label=lines, style=dashed];
n24 -> n30  [color=darkseagreen4, key=1, label=lines, style=dashed];
n24 -> n31  [color=darkseagreen4, key=1, label=lines, style=dashed];
n24 -> n32  [color=darkseagreen4, key=1, label=lines, style=dashed];
n67 -> n69  [color=darkseagreen4, key=1, label=sut, style=dashed];
n70 -> n72  [color=darkseagreen4, key=1, label=lines, style=dashed];
n70 -> n73  [color=darkseagreen4, key=1, label=lines, style=dashed];
n70 -> n74  [color=darkseagreen4, key=1, label=lines, style=dashed];
n70 -> n75  [color=darkseagreen4, key=1, label=lines, style=dashed];
n82 -> n84  [color=darkseagreen4, key=1, label=sut, style=dashed];
n95 -> n97  [color=darkseagreen4, key=1, label=sut, style=dashed];
n112 -> n114  [color=darkseagreen4, key=1, label=lines, style=dashed];
n112 -> n115  [color=darkseagreen4, key=1, label=lines, style=dashed];
n112 -> n116  [color=darkseagreen4, key=1, label=lines, style=dashed];
n112 -> n117  [color=darkseagreen4, key=1, label=lines, style=dashed];
n112 -> n118  [color=darkseagreen4, key=1, label=lines, style=dashed];
n112 -> n119  [color=darkseagreen4, key=1, label=lines, style=dashed];
n134 -> n137  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
n134 -> n139  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
n134 -> n141  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
n134 -> n143  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
n134 -> n145  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
n134 -> n149  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
m0_2 -> m0_24  [color=green, key=1, label=switches, style=dashed];
m0_2 -> m0_8  [color=green, key=1, label=switches, style=dashed];
m0_3 -> m0_28  [color=green, key=1, label=scalars, style=dashed];
m0_3 -> m0_8  [color=green, key=1, label=scalars, style=dashed];
m0_4 -> m0_32  [color=green, key=1, label=sequences, style=dashed];
m0_4 -> m0_8  [color=green, key=1, label=sequences, style=dashed];
m0_5 -> m0_23  [color=green, key=1, label="lambda expression", style=dashed];
m0_5 -> m0_27  [color=green, key=1, label="lambda expression", style=dashed];
m0_5 -> m0_31  [color=green, key=1, label="lambda expression", style=dashed];
m0_8 -> m0_38  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_6 -> m0_34  [color=green, key=1, label="lambda expression", style=dashed];
m0_6 -> m0_8  [color=green, key=1, label=values, style=dashed];
m0_41 -> m0_24  [color=darkseagreen4, key=1, label=switches, style=dashed];
m0_42 -> m0_28  [color=darkseagreen4, key=1, label=scalars, style=dashed];
m0_43 -> m0_32  [color=green, key=1, label=sequences, style=dashed];
}
