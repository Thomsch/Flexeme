digraph  {
m1_9 [cluster="CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", file="HelpTextTests.cs", label="Entry CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", span="29-29"];
m1_10 [cluster="CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", file="HelpTextTests.cs", label="return new OptionSpecification(\r\n                attribute.ShortName,\r\n                attribute.LongName,\r\n                attribute.Required,\r\n                attribute.SetName,\r\n                attribute.Min,\r\n                attribute.Max,\r\n                attribute.Separator,\r\n                attribute.DefaultValue.ToMaybe(),\r\n                conversionType,\r\n                attribute.HelpText,\r\n                attribute.MetaValue,\r\n                enumValues);", span="31-43"];
m1_11 [cluster="CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", file="HelpTextTests.cs", label="Exit CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", span="29-29"];
m1_12 [cluster="T.ToMaybe<T>()", file="HelpTextTests.cs", label="Entry T.ToMaybe<T>()", span="79-79"];
m1_0 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="HelpTextTests.cs", label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", span="17-17"];
m1_1 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="HelpTextTests.cs", label="this.shortName = shortName", span="20-20"];
m1_2 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="HelpTextTests.cs", label="this.longName = longName", span="21-21"];
m1_3 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="HelpTextTests.cs", label="this.separator = separator", span="22-22"];
m1_4 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="HelpTextTests.cs", label="this.setName = setName", span="23-23"];
m1_5 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="HelpTextTests.cs", label="this.helpText = helpText", span="24-24"];
m1_6 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="HelpTextTests.cs", label="this.metaValue = metaValue", span="25-25"];
m1_7 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="HelpTextTests.cs", label="this.enumValues = enumValues", span="26-26"];
m1_8 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="HelpTextTests.cs", label="Exit CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", span="17-17"];
m1_13 [file="HelpTextTests.cs", label="CommandLine.Core.OptionSpecification", span=""];
m2_37 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="InstanceBuilder.cs", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63"];
m2_10 [cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", span="38-38"];
m2_11 [cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", file="InstanceBuilder.cs", label=guardsLookup, span="40-40"];
m2_12 [cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", file="InstanceBuilder.cs", label="specifications.Any(spec => guard.Item1(spec))", span="42-42"];
m2_14 [cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", file="InstanceBuilder.cs", label="return specifications;", span="48-48"];
m2_13 [cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", file="InstanceBuilder.cs", label="throw new ApplicationException(guard.Item2);", span="44-44"];
m2_15 [cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", file="InstanceBuilder.cs", label="Exit CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", span="38-38"];
m2_35 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="InstanceBuilder.cs", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68"];
m2_34 [cluster="System.Type.ToDescriptorKind()", file="InstanceBuilder.cs", label="Entry System.Type.ToDescriptorKind()", span="22-22"];
m2_0 [cluster="CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)", span="11-11"];
m2_1 [cluster="CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)", file="InstanceBuilder.cs", label="return specification.Tag == SpecificationType.Option;", span="13-13"];
m2_2 [cluster="CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)", file="InstanceBuilder.cs", label="Exit CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)", span="11-11"];
m2_9 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", span="17-17"];
m2_36 [cluster="CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)", file="InstanceBuilder.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)", span="31-31"];
m2_3 [cluster="CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", span="16-16"];
m2_4 [cluster="CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", file="InstanceBuilder.cs", label="return specification.Tag == SpecificationType.Value;", span="18-18"];
m2_5 [cluster="CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", file="InstanceBuilder.cs", label="Exit CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", span="16-16"];
m2_18 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="42-42"];
m2_19 [cluster="lambda expression", file="InstanceBuilder.cs", label="guard.Item1(spec)", span="42-42"];
m2_20 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="42-42"];
m2_22 [cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", span="51-51"];
m2_23 [cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", file="InstanceBuilder.cs", label="specification.ConversionType.ToDescriptorKind()", span="53-53"];
m2_29 [cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", color=red, community=0, file="InstanceBuilder.cs", label="0: specification.Min.MatchJust(out min)\r\n                        && specification.Max.MatchJust(out max)", span="60-61"];
m2_24 [cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", file="InstanceBuilder.cs", label="TypeDescriptorKind.Scalar", span="55-55"];
m2_26 [cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", file="InstanceBuilder.cs", label="TypeDescriptorKind.Sequence", span="57-57"];
m2_25 [cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", file="InstanceBuilder.cs", label="return Maybe.Just(1);", span="56-56"];
m2_27 [cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", file="InstanceBuilder.cs", label="int min", span="58-58"];
m2_28 [cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", file="InstanceBuilder.cs", label="int max", span="59-59"];
m2_30 [cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", file="InstanceBuilder.cs", label="min >= 0 && max >= 0", span="63-63"];
m2_32 [cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", file="InstanceBuilder.cs", label="return Maybe.Nothing<int>();", span="71-71"];
m2_31 [cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", file="InstanceBuilder.cs", label="return Maybe.Just(max);", span="65-65"];
m2_33 [cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", file="InstanceBuilder.cs", label="Exit CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", span="51-51"];
m2_17 [cluster="System.ApplicationException.ApplicationException(string)", file="InstanceBuilder.cs", label="Entry System.ApplicationException.ApplicationException(string)", span="0-0"];
m2_16 [cluster="Unk.Any", file="InstanceBuilder.cs", label="Entry Unk.Any", span=""];
m2_6 [cluster="CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)", span="21-21"];
m2_7 [cluster="CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)", file="InstanceBuilder.cs", label="return new OptionSpecification(\r\n                specification.ShortName,\r\n                newLongName,\r\n                specification.Required,\r\n                specification.SetName,\r\n                specification.Min,\r\n                specification.Max,\r\n                specification.Separator,\r\n                specification.DefaultValue,\r\n                specification.ConversionType,\r\n                specification.HelpText,\r\n                specification.MetaValue,\r\n                specification.EnumValues);", span="23-35"];
m2_8 [cluster="CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)", file="InstanceBuilder.cs", label="Exit CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)", span="21-21"];
m2_21 [cluster="System.Func<T, TResult>.Invoke(T)", file="InstanceBuilder.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m2_38 [file="InstanceBuilder.cs", label=guard, span=""];
m3_41 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="112-112"];
m3_42 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="117-121"];
m3_43 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="InstanceBuilderTests.cs", label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="124-124"];
m3_44 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="112-112"];
m3_358 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", span="834-834"];
m3_359 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="InstanceBuilderTests.cs", label="Action test = () => InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinMaxZero>>(() => new FakeOptionsWithMinMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="837-841"];
m3_360 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="InstanceBuilderTests.cs", label="Assert.Throws<ApplicationException>(test)", span="844-844"];
m3_361 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", span="834-834"];
m3_339 [cluster="Unk.>", file="InstanceBuilderTests.cs", label="Entry Unk.>", span=""];
m3_63 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="6-6"];
m3_152 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="384-384"];
m3_153 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndSeparator>>(() => new FakeOptionsWithSequenceAndSeparator()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="389-393"];
m3_154 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="InstanceBuilderTests.cs", label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="396-396"];
m3_155 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="384-384"];
m3_55 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", span="6-6"];
m3_267 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="635-635"];
m3_268 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="640-644"];
m3_269 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="InstanceBuilderTests.cs", label="Assert.True(expected.Equals(result.Value.StringValue))", span="647-647"];
m3_270 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="635-635"];
m3_335 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", span="806-806"];
m3_336 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="InstanceBuilderTests.cs", label="Action test = () => InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinZero>>(() => new FakeOptionsWithMinZero()),\r\n                new string[] {},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="809-813"];
m3_337 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="InstanceBuilderTests.cs", label="Assert.Throws<ApplicationException>(test)", span="816-816"];
m3_338 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", span="806-806"];
m3_308 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="739-739"];
m3_309 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNullables>>(() => new FakeOptionsWithNullables()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="744-748"];
m3_310 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="InstanceBuilderTests.cs", label="expected.ShouldBeEquivalentTo(result.Value.NullableLong)", span="751-751"];
m3_311 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="739-739"];
m3_79 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="320-320"];
m3_167 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="427-427"];
m3_168 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="430-436"];
m3_169 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs", label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="437-437"];
m3_171 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="450-450"];
m3_170 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithValues>>(() => new FakeOptionsWithValues()),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="440-447"];
m3_172 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="427-427"];
m3_259 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="614-614"];
m3_260 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="617-617"];
m3_261 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="620-624"];
m3_262 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", color=red, community=0, file="InstanceBuilderTests.cs", label="0: Assert.True(expectedResult.SequenceEqual(result.Errors))", span="627-627"];
m3_263 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="614-614"];
m3_392 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", span="884-884"];
m3_393 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeInterfaceOptions>>(() => new FakeInterfaceOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="887-891"];
m3_394 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", file="InstanceBuilderTests.cs", label="expected.ShouldBeEquivalentTo(result.Value.InputFile)", span="894-894"];
m3_395 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", span="884-884"];
m3_109 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="11-11"];
m3_9 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68"];
m3_204 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", span="4-4"];
m3_74 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="194-194"];
m3_75 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="197-197"];
m3_76 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraintAsValue>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="200-204"];
m3_77 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", color=red, community=0, file="InstanceBuilderTests.cs", label="0: Assert.True(expectedResult.SequenceEqual(result.Errors))", span="207-207"];
m3_78 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="194-194"];
m3_247 [cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", file="InstanceBuilderTests.cs", label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="276-276"];
m3_92 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="232-232"];
m3_93 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="235-235"];
m3_94 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()),\r\n                new[] { ''one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="238-242"];
m3_95 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", color=red, community=0, file="InstanceBuilderTests.cs", label="0: Assert.True(expectedResult.SequenceEqual(result.Errors))", span="245-245"];
m3_96 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="232-232"];
m3_184 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11"];
m3_315 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="759-759"];
m3_316 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithFSharpOption>>(() => new FakeOptionsWithFSharpOption()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="764-768"];
m3_318 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="InstanceBuilderTests.cs", label="expectedValue.ShouldBeEquivalentTo(result.Value.FileName.Value)", span="773-773"];
m3_319 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="InstanceBuilderTests.cs", label="expectedSome.ShouldBeEquivalentTo(FSharpOption<string>.get_IsSome(result.Value.FileName))", span="775-775"];
m3_317 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="InstanceBuilderTests.cs", label="result.Value.FileName != null", span="771-771"];
m3_320 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="759-759"];
m3_299 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", span="9-9"];
m3_307 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", span="4-4"];
m3_6 [cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6"];
m3_251 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="595-595"];
m3_252 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="598-598"];
m3_253 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="601-605"];
m3_254 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", color=red, community=0, file="InstanceBuilderTests.cs", label="0: Assert.True(expectedResult.SequenceEqual(result.Errors))", span="608-608"];
m3_255 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="595-595"];
m3_110 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="275-275"];
m3_111 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="278-278"];
m3_112 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''3'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="281-285"];
m3_113 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", color=red, community=0, file="InstanceBuilderTests.cs", label="0: Assert.True(expectedResult.SequenceEqual(result.Errors))", span="288-288"];
m3_114 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="275-275"];
m3_369 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", span="853-853"];
m3_370 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNamedAndEmptySets>>(() => new FakeOptionsWithNamedAndEmptySets()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="856-860"];
m3_371 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", color=red, community=0, file="InstanceBuilderTests.cs", label="0: result.Errors.Should().HaveCount(x => x == expected)", span="863-863"];
m3_372 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", span="853-853"];
m3_7 [cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="353-353"];
m3_378 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithNamedAndEmptySets.FakeOptionsWithNamedAndEmptySets()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithNamedAndEmptySets.FakeOptionsWithNamedAndEmptySets()", span="4-4"];
m3_105 [cluster="Unk.ShouldBeEquivalentTo", file="InstanceBuilderTests.cs", label="Entry Unk.ShouldBeEquivalentTo", span=""];
m3_407 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="918-918"];
m3_408 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithScalarValueAndSequenceStringAdjacent>>(() => new FakeOptionsWithScalarValueAndSequenceStringAdjacent()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="923-927"];
m3_409 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="InstanceBuilderTests.cs", label="expected.ShouldBeEquivalentTo(result.Value)", span="930-930"];
m3_410 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="918-918"];
m3_83 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="6-6"];
m3_144 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="362-362"];
m3_145 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceWithoutRange>>(() => new FakeOptionsWithSequenceWithoutRange()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="367-371"];
m3_146 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="InstanceBuilderTests.cs", label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="374-374"];
m3_147 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="362-362"];
m3_56 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="157-157"];
m3_57 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraint()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="162-166"];
m3_58 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="InstanceBuilderTests.cs", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="169-169"];
m3_59 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="157-157"];
m3_32 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="90-90"];
m3_33 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequence>>(() => new FakeOptionsWithSequence()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="95-99"];
m3_34 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="InstanceBuilderTests.cs", label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="102-102"];
m3_35 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="90-90"];
m3_420 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="943-943"];
m3_14 [cluster="lambda expression", file="InstanceBuilderTests.cs", label=fakeOptions, span="28-28"];
m3_13 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="28-28"];
m3_15 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="28-28"];
m3_21 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="49-49"];
m3_22 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptions()", span="49-49"];
m3_23 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="49-49"];
m3_28 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="72-72"];
m3_29 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithDouble()", span="72-72"];
m3_30 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="72-72"];
m3_37 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="96-96"];
m3_38 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSequence()", span="96-96"];
m3_39 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="96-96"];
m3_45 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="118-118"];
m3_46 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptions()", span="118-118"];
m3_47 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="118-118"];
m3_52 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="141-141"];
m3_53 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="141-141"];
m3_54 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="141-141"];
m3_60 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="163-163"];
m3_61 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="163-163"];
m3_62 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="163-163"];
m3_71 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="182-182"];
m3_72 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="182-182"];
m3_73 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="182-182"];
m3_80 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="201-201"];
m3_81 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="201-201"];
m3_82 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="201-201"];
m3_89 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="220-220"];
m3_90 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="220-220"];
m3_91 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="220-220"];
m3_97 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="239-239"];
m3_98 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="239-239"];
m3_99 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="239-239"];
m3_106 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="263-263"];
m3_107 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithEnum()", span="263-263"];
m3_108 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="263-263"];
m3_116 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="282-282"];
m3_117 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithEnum()", span="282-282"];
m3_118 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="282-282"];
m3_124 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="301-301"];
m3_125 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithEnum()", span="301-301"];
m3_126 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="301-301"];
m3_132 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="320-320"];
m3_133 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithEnum()", span="320-320"];
m3_134 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="320-320"];
m3_141 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="345-345"];
m3_142 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithValues()", span="345-345"];
m3_143 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="345-345"];
m3_148 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="368-368"];
m3_149 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSequenceWithoutRange()", span="368-368"];
m3_150 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="368-368"];
m3_156 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="390-390"];
m3_157 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSequenceAndSeparator()", span="390-390"];
m3_158 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="390-390"];
m3_164 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="412-412"];
m3_165 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSequenceAndSeparator()", span="412-412"];
m3_166 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="412-412"];
m3_174 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="441-441"];
m3_177 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="442-444"];
m3_175 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithValues()", span="441-441"];
m3_176 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="441-441"];
m3_178 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="443-444"];
m3_182 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="444-444"];
m3_186 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="444-444"];
m3_179 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="442-444"];
m3_181 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="444-444"];
m3_183 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="444-444"];
m3_185 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="444-444"];
m3_187 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="444-444"];
m3_195 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="467-467"];
m3_196 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSets()", span="467-467"];
m3_197 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="467-467"];
m3_205 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="487-487"];
m3_206 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionWithRequiredAndSet()", span="487-487"];
m3_207 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="487-487"];
m3_213 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="507-507"];
m3_214 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionWithRequiredAndSet()", span="507-507"];
m3_215 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="507-507"];
m3_222 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="527-527"];
m3_223 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionWithRequiredAndSet()", span="527-527"];
m3_224 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="527-527"];
m3_230 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="545-545"];
m3_231 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionWithRequired()", span="545-545"];
m3_232 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="545-545"];
m3_239 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="564-564"];
m3_240 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptions()", span="564-564"];
m3_241 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="564-564"];
m3_248 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="583-583"];
m3_249 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptions()", span="583-583"];
m3_250 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="583-583"];
m3_256 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="602-602"];
m3_257 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptions()", span="602-602"];
m3_258 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="602-602"];
m3_264 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="621-621"];
m3_265 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptions()", span="621-621"];
m3_266 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="621-621"];
m3_272 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="641-641"];
m3_273 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptions()", span="641-641"];
m3_274 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="641-641"];
m3_280 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="660-660"];
m3_281 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithRequiredValue()", span="660-660"];
m3_282 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="660-660"];
m3_288 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="682-682"];
m3_289 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptions()", span="682-682"];
m3_290 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="682-682"];
m3_296 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="701-701"];
m3_297 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSequenceMinMaxEqual()", span="701-701"];
m3_298 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="701-701"];
m3_304 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="723-723"];
m3_305 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithNullables()", span="723-723"];
m3_306 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="723-723"];
m3_312 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="745-745"];
m3_313 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithNullables()", span="745-745"];
m3_314 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="745-745"];
m3_322 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="765-765"];
m3_323 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithFSharpOption()", span="765-765"];
m3_324 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="765-765"];
m3_332 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="789-789"];
m3_333 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithFSharpOption()", span="789-789"];
m3_334 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="789-789"];
m3_340 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="809-813"];
m3_341 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinZero>>(() => new FakeOptionsWithMinZero()),\r\n                new string[] {},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="809-813"];
m3_342 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="809-813"];
m3_343 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="810-810"];
m3_344 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithMinZero()", span="810-810"];
m3_345 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="810-810"];
m3_351 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="823-827"];
m3_352 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMaxZero>>(() => new FakeOptionsWithMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="823-827"];
m3_353 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="823-827"];
m3_354 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="824-824"];
m3_355 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithMaxZero()", span="824-824"];
m3_356 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="824-824"];
m3_362 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="837-841"];
m3_363 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinMaxZero>>(() => new FakeOptionsWithMinMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="837-841"];
m3_364 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="837-841"];
m3_365 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="838-838"];
m3_366 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithMinMaxZero()", span="838-838"];
m3_367 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="838-838"];
m3_380 [cluster="lambda expression", color=red, community=0, file="InstanceBuilderTests.cs", label="1: x == expected", span="863-863"];
m3_375 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="857-857"];
m3_379 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="863-863"];
m3_376 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithNamedAndEmptySets()", span="857-857"];
m3_377 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="857-857"];
m3_381 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="863-863"];
m3_390 [cluster="lambda expression", color=red, community=0, file="InstanceBuilderTests.cs", label="1: x == expected", span="878-878"];
m3_386 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="872-872"];
m3_389 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="878-878"];
m3_387 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptions()", span="872-872"];
m3_388 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="872-872"];
m3_391 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="878-878"];
m3_396 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="888-888"];
m3_397 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeInterfaceOptions()", span="888-888"];
m3_398 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="888-888"];
m3_404 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="905-905"];
m3_405 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithRequiredValue()", span="905-905"];
m3_406 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="905-905"];
m3_411 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="924-924"];
m3_412 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="924-924"];
m3_413 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="924-924"];
m3_421 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptions()", span="943-943"];
m3_422 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="943-943"];
m3_11 [cluster="CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", file="InstanceBuilderTests.cs", label="Entry CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", span="87-87"];
m3_31 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", span="4-4"];
m3_159 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="6-6"];
m3_180 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="31-31"];
m3_382 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", span="868-868"];
m3_383 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="871-875"];
m3_384 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", color=red, community=0, file="InstanceBuilderTests.cs", label="0: result.Errors.Should().HaveCount(x => x == expected)", span="878-878"];
m3_385 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", span="868-868"];
m3_194 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="298-298"];
m3_233 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4"];
m3_427 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63"];
m3_48 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="135-135"];
m3_49 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraint()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="140-144"];
m3_50 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="InstanceBuilderTests.cs", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="147-147"];
m3_51 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="135-135"];
m3_10 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="13-13"];
m3_119 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="294-294"];
m3_120 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="297-297"];
m3_121 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''Yellow'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="300-304"];
m3_122 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", color=red, community=0, file="InstanceBuilderTests.cs", label="0: Assert.True(expectedResult.SequenceEqual(result.Errors))", span="307-307"];
m3_123 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="294-294"];
m3_140 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6"];
m3_24 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="66-66"];
m3_25 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithDouble>>(() => new FakeOptionsWithDouble()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="71-75"];
m3_26 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="InstanceBuilderTests.cs", label="Assert.Equal(expected, result.Value.DoubleValue)", span="78-78"];
m3_27 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="66-66"];
m3_283 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", span="4-4"];
m3_368 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithMinMaxZero.FakeOptionsWithMinMaxZero()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMinMaxZero.FakeOptionsWithMinMaxZero()", span="6-6"];
m3_12 [cluster="Unk.True", file="InstanceBuilderTests.cs", label="Entry Unk.True", span=""];
m3_275 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="653-653"];
m3_276 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new MissingRequiredOptionError(NameInfo.EmptyName) }", span="656-656"];
m3_277 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithRequiredValue>>(() => new FakeOptionsWithRequiredValue()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="659-663"];
m3_278 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", color=red, community=0, file="InstanceBuilderTests.cs", label="0: Assert.True(expectedResult.SequenceEqual(result.Errors))", span="666-666"];
m3_279 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="653-653"];
m3_234 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="557-557"];
m3_235 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="560-560"];
m3_236 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="563-567"];
m3_237 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", color=red, community=0, file="InstanceBuilderTests.cs", label="0: Assert.True(expectedResult.SequenceEqual(result.Errors))", span="570-570"];
m3_238 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="557-557"];
m3_325 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()", span="6-6"];
m3_321 [cluster="Unk.get_IsSome", file="InstanceBuilderTests.cs", label="Entry Unk.get_IsSome", span=""];
m3_188 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
m3_0 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="18-18"];
m3_1 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs", label="var fakeOptions = new FakeOptions()", span="21-21"];
m3_2 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", color=red, community=1, file="InstanceBuilderTests.cs", label="0: var expectedResult = ParserResult.Create(\r\n                ParserResultType.Options,\r\n                fakeOptions, new Error[] { new HelpRequestedError() })", span="22-24"];
m3_3 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => fakeOptions),\r\n                new[] { ''--help'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="27-31"];
m3_4 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.Equals(result))", span="34-34"];
m3_5 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="18-18"];
m3_225 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="538-538"];
m3_226 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="541-541"];
m3_227 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequired>>(() => new FakeOptionWithRequired()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="544-548"];
m3_228 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", color=red, community=0, file="InstanceBuilderTests.cs", label="0: Assert.True(expectedResult.SequenceEqual(result.Errors))", span="551-551"];
m3_229 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="538-538"];
m3_216 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="518-518"];
m3_217 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs", label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="520-524"];
m3_218 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="526-530"];
m3_219 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", color=red, community=0, file="InstanceBuilderTests.cs", label="0: Assert.True(expectedResult.SequenceEqual(result.Errors))", span="533-533"];
m3_220 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="518-518"];
m3_36 [cluster="Unk.SequenceEqual", file="InstanceBuilderTests.cs", label="Entry Unk.SequenceEqual", span=""];
m3_127 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="313-313"];
m3_128 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="316-316"];
m3_129 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''RED'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="319-323"];
m3_130 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", color=red, community=0, file="InstanceBuilderTests.cs", label="0: Assert.True(expectedResult.SequenceEqual(result.Errors))", span="326-326"];
m3_131 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="313-313"];
m3_69 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="265-265"];
m3_400 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="899-899"];
m3_401 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithRequiredValue>>(() => new FakeOptionsWithRequiredValue()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="904-908"];
m3_402 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="InstanceBuilderTests.cs", label="expected.ShouldBeEquivalentTo(result.Value)", span="911-911"];
m3_403 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="899-899"];
m3_84 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="213-213"];
m3_85 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="216-216"];
m3_86 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraint()),\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="219-223"];
m3_87 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", color=red, community=0, file="InstanceBuilderTests.cs", label="0: Assert.True(expectedResult.SequenceEqual(result.Errors))", span="226-226"];
m3_88 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="213-213"];
m3_64 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="175-175"];
m3_65 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="178-178"];
m3_66 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraint()),\r\n                new[] { ''-s'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="181-185"];
m3_67 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", color=red, community=0, file="InstanceBuilderTests.cs", label="0: Assert.True(expectedResult.SequenceEqual(result.Errors))", span="188-188"];
m3_68 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="175-175"];
m3_135 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="332-332"];
m3_136 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="335-341"];
m3_137 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithValues>>(() => new FakeOptionsWithValues()),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="344-348"];
m3_138 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="351-351"];
m3_139 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="332-332"];
m3_414 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="6-6"];
m3_357 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithMaxZero.FakeOptionsWithMaxZero()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMaxZero.FakeOptionsWithMaxZero()", span="6-6"];
m3_374 [cluster="Unk.HaveCount", file="InstanceBuilderTests.cs", label="Entry Unk.HaveCount", span=""];
m3_198 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4"];
m3_271 [cluster="string.Equals(string)", file="InstanceBuilderTests.cs", label="Entry string.Equals(string)", span="0-0"];
m3_70 [cluster="CommandLine.NameInfo.NameInfo(string, string)", file="InstanceBuilderTests.cs", label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20"];
m3_16 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="43-43"];
m3_17 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="48-52"];
m3_18 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="InstanceBuilderTests.cs", label="Assert.Equal(expected, result.Value.LongValue)", span="55-55"];
m3_19 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="43-43"];
m3_399 [cluster="CommandLine.Tests.Fakes.FakeInterfaceOptions.FakeInterfaceOptions()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeInterfaceOptions.FakeInterfaceOptions()", span="2-2"];
m3_20 [cluster="Unk.Equal", file="InstanceBuilderTests.cs", label="Entry Unk.Equal", span=""];
m3_326 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="783-783"];
m3_327 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithFSharpOption>>(() => new FakeOptionsWithFSharpOption()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="788-792"];
m3_329 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="InstanceBuilderTests.cs", label="expectedValue.ShouldBeEquivalentTo(result.Value.Offset.Value)", span="797-797"];
m3_330 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="InstanceBuilderTests.cs", label="expectedSome.ShouldBeEquivalentTo(FSharpOption<int>.get_IsSome(result.Value.Offset))", span="799-799"];
m3_328 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="InstanceBuilderTests.cs", label="result.Value.Offset != null", span="795-795"];
m3_331 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="783-783"];
m3_415 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", span="936-936"];
m3_416 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="InstanceBuilderTests.cs", label="var expectedResult = new FakeOptions { StringValue=''strval0'', IntSequence=new[] { 9, 7, 8 }, BoolValue = true,  LongValue = 9876543210L }", span="939-939"];
m3_417 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''--stringvalue=strval0'', ''-i'', ''9'', ''7'', ''8'', ''-x'', ''9876543210'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="942-946"];
m3_418 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="InstanceBuilderTests.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="949-949"];
m3_419 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", span="936-936"];
m3_151 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="6-6"];
m3_160 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="406-406"];
m3_161 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndSeparator>>(() => new FakeOptionsWithSequenceAndSeparator()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="411-415"];
m3_162 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="InstanceBuilderTests.cs", label="expected.ShouldBeEquivalentTo(result.Value.StringSequence)", span="418-418"];
m3_163 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="406-406"];
m3_221 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="287-287"];
m3_300 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="717-717"];
m3_301 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNullables>>(() => new FakeOptionsWithNullables()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="722-726"];
m3_302 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="InstanceBuilderTests.cs", label="expected.ShouldBeEquivalentTo(result.Value.NullableInt)", span="729-729"];
m3_303 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="717-717"];
m3_242 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="576-576"];
m3_243 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="579-579"];
m3_244 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="582-586"];
m3_245 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", color=red, community=0, file="InstanceBuilderTests.cs", label="0: Assert.True(expectedResult.SequenceEqual(result.Errors))", span="589-589"];
m3_246 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="576-576"];
m3_208 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="499-499"];
m3_209 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="501-504"];
m3_210 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="506-510"];
m3_211 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="513-513"];
m3_212 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="499-499"];
m3_291 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="694-694"];
m3_292 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="697-697"];
m3_293 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceMinMaxEqual>>(() => new FakeOptionsWithSequenceMinMaxEqual()),\r\n                new[] { ''one'', ''two'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="700-704"];
m3_294 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", color=red, community=0, file="InstanceBuilderTests.cs", label="0: Assert.True(expectedResult.SequenceEqual(result.Errors))", span="707-707"];
m3_295 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="694-694"];
m3_8 [cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="InstanceBuilderTests.cs", label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="100-100"];
m3_101 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="257-257"];
m3_102 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="262-266"];
m3_103 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="InstanceBuilderTests.cs", label="expected.ShouldBeEquivalentTo(result.Value.Colors)", span="269-269"];
m3_104 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="257-257"];
m3_423 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", span="956-956"];
m3_424 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Nothing<Func<FakeImmutableOptions>>(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="961-965"];
m3_425 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="InstanceBuilderTests.cs", label="expected.ShouldBeEquivalentTo(result.Value)", span="968-968"];
m3_426 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", span="956-956"];
m3_100 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="6-6"];
m3_373 [cluster="Unk.Should", file="InstanceBuilderTests.cs", label="Entry Unk.Should", span=""];
m3_284 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="676-676"];
m3_285 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="681-685"];
m3_286 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="InstanceBuilderTests.cs", label="expected.ShouldBeEquivalentTo(result.Value.StringValue)", span="688-688"];
m3_287 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="676-676"];
m3_115 [cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs", label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="309-309"];
m3_199 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="479-479"];
m3_200 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceBuilderTests.cs", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = null\r\n            }", span="481-484"];
m3_201 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] { ''--ftpurl'', ''str1''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="486-490"];
m3_202 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceBuilderTests.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="493-493"];
m3_203 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="479-479"];
m3_40 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", span="6-6"];
m3_346 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithMinZero.FakeOptionsWithMinZero()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMinZero.FakeOptionsWithMinZero()", span="6-6"];
m3_173 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="34-34"];
m3_347 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", span="820-820"];
m3_348 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="InstanceBuilderTests.cs", label="Action test = () => InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMaxZero>>(() => new FakeOptionsWithMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="823-827"];
m3_349 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="InstanceBuilderTests.cs", label="Assert.Throws<ApplicationException>(test)", span="830-830"];
m3_350 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", span="820-820"];
m3_189 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="456-456"];
m3_190 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl'')),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''))\r\n                }", span="459-463"];
m3_191 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSets>>(() => new FakeOptionsWithSets()),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="466-470"];
m3_192 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", color=red, community=0, file="InstanceBuilderTests.cs", label="0: Assert.True(expectedResult.SequenceEqual(result.Errors))", span="473-473"];
m3_193 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="456-456"];
m3_428 [file="InstanceBuilderTests.cs", label=fakeOptions, span=""];
m3_429 [file="InstanceBuilderTests.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
m3_430 [file="InstanceBuilderTests.cs", label=int, span=""];
m3_431 [file="InstanceBuilderTests.cs", label=int, span=""];
m5_3 [cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", file="InstanceChooserTests.cs", label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0"];
m5_0 [cluster="CommandLine.Core.KeyValuePairHelper.Create(string, params string[])", file="InstanceChooserTests.cs", label="Entry CommandLine.Core.KeyValuePairHelper.Create(string, params string[])", span="9-9"];
m5_1 [cluster="CommandLine.Core.KeyValuePairHelper.Create(string, params string[])", file="InstanceChooserTests.cs", label="return new KeyValuePair<string, IEnumerable<string>>(value, values);", span="11-11"];
m5_2 [cluster="CommandLine.Core.KeyValuePairHelper.Create(string, params string[])", file="InstanceChooserTests.cs", label="Exit CommandLine.Core.KeyValuePairHelper.Create(string, params string[])", span="9-9"];
m7_68 [cluster="Unk.SingleOrDefault", file="OptionSpecification.cs", label="Entry Unk.SingleOrDefault", span=""];
m7_30 [cluster="CommandLine.Core.InstanceChooser.MakeNotParsed(System.Type, System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", file="OptionSpecification.cs", label="Entry CommandLine.Core.InstanceChooser.MakeNotParsed(System.Type, System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", span="95-95"];
m7_79 [cluster="CommandLine.Core.InstanceChooser.MakeNotParsed(System.Type, System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", file="OptionSpecification.cs", label="return new NotParsed<object>(typeInfo, types, errors);", span="98-98"];
m7_80 [cluster="CommandLine.Core.InstanceChooser.MakeNotParsed(System.Type, System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", file="OptionSpecification.cs", label="Exit CommandLine.Core.InstanceChooser.MakeNotParsed(System.Type, System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", span="95-95"];
m7_48 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="OptionSpecification.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="35-35"];
m7_26 [cluster="System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", file="OptionSpecification.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", span="31-31"];
m7_10 [cluster="CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", color=green, community=0, file="OptionSpecification.cs", label="0: return new OptionSpecification(\r\n                attribute.ShortName,\r\n                attribute.LongName,\r\n                attribute.Required,\r\n                attribute.SetName,\r\n                attribute.Min == -1 ? Maybe.Nothing<int>() : Maybe.Just(attribute.Min),\r\n                attribute.Max == -1 ? Maybe.Nothing<int>() : Maybe.Just(attribute.Max),\r\n                attribute.Separator,\r\n                attribute.DefaultValue.ToMaybe(),\r\n                conversionType,\r\n                conversionType.ToTargetType(),\r\n                attribute.HelpText,\r\n                attribute.MetaValue,\r\n                enumValues);", span="34-47"];
m7_47 [cluster="Unk.>", file="OptionSpecification.cs", label="Entry Unk.>", span=""];
m7_51 [cluster="Unk.MakeNotParsed", file="OptionSpecification.cs", label="Entry Unk.MakeNotParsed", span=""];
m7_46 [cluster="Unk.Any", file="OptionSpecification.cs", label="Entry Unk.Any", span=""];
m7_18 [cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="OptionSpecification.cs", label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16"];
m7_33 [cluster="System.Func<T, TResult>.Invoke(T)", file="OptionSpecification.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m7_38 [cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="OptionSpecification.cs", label="Entry CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="62-62"];
m7_44 [cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="OptionSpecification.cs", label="return verbs.Any(a => nameComparer.Equals(a.Item1.Name, arguments.First()))\r\n                ? InstanceBuilder.Build(\r\n                    Maybe.Just<Func<object>>(\r\n                        () =>\r\n                            verbs.Single(v => nameComparer.Equals(v.Item1.Name, arguments.First())).Item2.AutoDefault()),\r\n                    tokenizer,\r\n                    arguments.Skip(1),\r\n                    nameComparer,\r\n                    parsingCulture)\r\n                : MakeNotParsed(new NullInstance().GetType(), verbs.Select(v => v.Item2), new BadVerbSelectedError(arguments.First()));", span="69-78"];
m7_45 [cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="OptionSpecification.cs", label="Exit CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="62-62"];
m7_50 [cluster="CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", file="OptionSpecification.cs", label="Entry CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", span="357-357"];
m7_70 [cluster="CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", file="OptionSpecification.cs", label="Entry CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", span="383-383"];
m7_14 [cluster="T.ToMaybe<T>()", file="OptionSpecification.cs", label="Entry T.ToMaybe<T>()", span="79-79"];
m7_37 [cluster="CommandLine.VersionRequestedError.VersionRequestedError()", file="OptionSpecification.cs", label="Entry CommandLine.VersionRequestedError.VersionRequestedError()", span="432-432"];
m7_42 [cluster="System.StringComparer.Equals(string, string)", file="OptionSpecification.cs", label="Entry System.StringComparer.Equals(string, string)", span="0-0"];
m7_58 [cluster="Unk.Single", file="OptionSpecification.cs", label="Entry Unk.Single", span=""];
m7_69 [cluster="Unk.ToMaybe", file="OptionSpecification.cs", label="Entry Unk.ToMaybe", span=""];
m7_43 [cluster="string.Concat(string, string)", file="OptionSpecification.cs", label="Entry string.Concat(string, string)", span="0-0"];
m7_28 [cluster="object.GetType()", file="OptionSpecification.cs", label="Entry object.GetType()", span="0-0"];
m7_75 [cluster="lambda expression", file="OptionSpecification.cs", label="Entry lambda expression", span="90-90"];
m7_5 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType, string, string, System.Collections.Generic.IEnumerable<string>)", file="OptionSpecification.cs", label="this.helpText = helpText", span="27-27"];
m7_12 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="OptionSpecification.cs", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63"];
m7_6 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType, string, string, System.Collections.Generic.IEnumerable<string>)", file="OptionSpecification.cs", label="this.metaValue = metaValue", span="28-28"];
m7_16 [cluster="lambda expression", file="OptionSpecification.cs", label="CommandLine.Core.OptionSpecification", span=""];
m7_4 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType, string, string, System.Collections.Generic.IEnumerable<string>)", file="OptionSpecification.cs", label="this.setName = setName", span="26-26"];
m7_11 [cluster="CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", file="OptionSpecification.cs", label="Exit CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", span="32-32"];
m7_7 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType, string, string, System.Collections.Generic.IEnumerable<string>)", file="OptionSpecification.cs", label="this.enumValues = enumValues", span="29-29"];
m7_15 [cluster="System.Type.ToTargetType()", file="OptionSpecification.cs", label="Entry System.Type.ToTargetType()", span="47-47"];
m7_8 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType, string, string, System.Collections.Generic.IEnumerable<string>)", file="OptionSpecification.cs", label="Exit CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType, string, string, System.Collections.Generic.IEnumerable<string>)", span="18-18"];
m7_13 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="OptionSpecification.cs", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68"];
m7_17 [cluster="lambda expression", file="OptionSpecification.cs", label="Exit lambda expression", span="24-24"];
m7_40 [cluster="lambda expression", file="OptionSpecification.cs", label="nameComparer.Equals(command, firstArg) ||\r\n                    nameComparer.Equals(string.Concat(''--'', command), firstArg)", span="48-49"];
m7_39 [cluster="lambda expression", file="OptionSpecification.cs", label="Entry lambda expression", span="47-49"];
m7_41 [cluster="lambda expression", file="OptionSpecification.cs", label="Exit lambda expression", span="47-49"];
m7_53 [cluster="lambda expression", file="OptionSpecification.cs", label="nameComparer.Equals(a.Item1.Name, arguments.First())", span="69-69"];
m7_56 [cluster="lambda expression", file="OptionSpecification.cs", label="verbs.Single(v => nameComparer.Equals(v.Item1.Name, arguments.First())).Item2.AutoDefault()", span="73-73"];
m7_61 [cluster="lambda expression", file="OptionSpecification.cs", label="nameComparer.Equals(v.Item1.Name, arguments.First())", span="73-73"];
m7_52 [cluster="lambda expression", file="OptionSpecification.cs", label="Entry lambda expression", span="69-69"];
m7_55 [cluster="lambda expression", file="OptionSpecification.cs", label="Entry lambda expression", span="72-73"];
m7_63 [cluster="lambda expression", file="OptionSpecification.cs", label="Entry lambda expression", span="78-78"];
m7_54 [cluster="lambda expression", file="OptionSpecification.cs", label="Exit lambda expression", span="69-69"];
m7_57 [cluster="lambda expression", file="OptionSpecification.cs", label="Exit lambda expression", span="72-73"];
m7_60 [cluster="lambda expression", file="OptionSpecification.cs", label="Entry lambda expression", span="73-73"];
m7_62 [cluster="lambda expression", file="OptionSpecification.cs", label="Exit lambda expression", span="73-73"];
m7_64 [cluster="lambda expression", file="OptionSpecification.cs", label="v.Item2", span="78-78"];
m7_65 [cluster="lambda expression", file="OptionSpecification.cs", label="Exit lambda expression", span="78-78"];
m7_73 [cluster="lambda expression", file="OptionSpecification.cs", label="nameComparer.Equals(v.Item1.Name, verb)", span="87-87"];
m7_72 [cluster="lambda expression", file="OptionSpecification.cs", label="Entry lambda expression", span="87-87"];
m7_74 [cluster="lambda expression", file="OptionSpecification.cs", label="Exit lambda expression", span="87-87"];
m7_76 [cluster="lambda expression", file="OptionSpecification.cs", label="new HelpVerbRequestedError(v.Item1.Name, v.Item2, true)", span="90-90"];
m7_77 [cluster="lambda expression", file="OptionSpecification.cs", label="Exit lambda expression", span="90-90"];
m7_31 [cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="OptionSpecification.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0"];
m7_34 [cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="OptionSpecification.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0"];
m7_9 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="OptionSpecification.cs", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="13-13"];
m7_81 [cluster="CommandLine.NotParsed<T>.NotParsed(System.Type, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="OptionSpecification.cs", label="Entry CommandLine.NotParsed<T>.NotParsed(System.Type, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="152-152"];
m7_36 [cluster="CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", file="OptionSpecification.cs", label="Entry CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", span="81-81"];
m7_66 [cluster="CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", file="OptionSpecification.cs", label="return verb.Length > 0\r\n                ? verbs.SingleOrDefault(v => nameComparer.Equals(v.Item1.Name, verb))\r\n                        .ToMaybe()\r\n                        .Return(\r\n                            v => new HelpVerbRequestedError(v.Item1.Name, v.Item2, true),\r\n                            new HelpVerbRequestedError(null, null, false))\r\n                : new HelpVerbRequestedError(null, null, false);", span="86-92"];
m7_67 [cluster="CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", file="OptionSpecification.cs", label="Exit CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", span="81-81"];
m7_49 [cluster="Unk.Select", file="OptionSpecification.cs", label="Entry Unk.Select", span=""];
m7_0 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="OptionSpecification.cs", label="Entry CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="14-14"];
m7_1 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="OptionSpecification.cs", label="return Choose(\r\n                (args, optionSpecs) =>\r\n                    {\r\n                        var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer));\r\n                        var explodedTokens = Tokenizer.ExplodeOptionList(tokens, name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer));\r\n                        return explodedTokens;\r\n                    },\r\n                types,\r\n                arguments,\r\n                nameComparer,\r\n                parsingCulture);", span="20-30"];
m7_2 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="OptionSpecification.cs", label="Exit CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="14-14"];
m7_3 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="OptionSpecification.cs", label="Entry CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33"];
m7_29 [cluster="CommandLine.NoVerbSelectedError.NoVerbSelectedError()", file="OptionSpecification.cs", label="Entry CommandLine.NoVerbSelectedError.NoVerbSelectedError()", span="421-421"];
m7_19 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="OptionSpecification.cs", label="arguments.Empty()", span="40-40"];
m7_20 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=red, community=0, file="OptionSpecification.cs", label="0: return MakeNotParsed(new NullInstance().GetType(), types, new NoVerbSelectedError());", span="42-42"];
m7_21 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="OptionSpecification.cs", label="var firstArg = arguments.First()", span="45-45"];
m7_22 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="OptionSpecification.cs", label="Func<string, bool> preprocCompare = command =>\r\n                    nameComparer.Equals(command, firstArg) ||\r\n                    nameComparer.Equals(string.Concat(''--'', command), firstArg)", span="47-49"];
m7_23 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="OptionSpecification.cs", label="var verbs = Verb.SelectFromTypes(types)", span="51-51"];
m7_24 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="OptionSpecification.cs", label="return preprocCompare(''help'')\r\n                ? MakeNotParsed(new NullInstance().GetType(), types,\r\n                    MakeHelpVerbRequestedError(verbs,\r\n                        arguments.Skip(1).SingleOrDefault() ?? string.Empty, nameComparer))\r\n                : preprocCompare(''version'')\r\n                    ? MakeNotParsed(new NullInstance().GetType(), types, new VersionRequestedError())\r\n                    : MatchVerb(tokenizer, verbs, arguments, nameComparer, parsingCulture);", span="53-59"];
m7_25 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="OptionSpecification.cs", label="Exit CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33"];
m7_71 [cluster="Unk.Return", file="OptionSpecification.cs", label="Entry Unk.Return", span=""];
m7_59 [cluster="Unk.AutoDefault", file="OptionSpecification.cs", label="Entry Unk.AutoDefault", span=""];
m7_27 [cluster="CommandLine.NullInstance.NullInstance()", file="OptionSpecification.cs", label="Entry CommandLine.NullInstance.NullInstance()", span="9-9"];
m7_32 [cluster="CommandLine.Core.Verb.SelectFromTypes(System.Collections.Generic.IEnumerable<System.Type>)", file="OptionSpecification.cs", label="Entry CommandLine.Core.Verb.SelectFromTypes(System.Collections.Generic.IEnumerable<System.Type>)", span="40-40"];
m7_35 [cluster="System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", file="OptionSpecification.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", span="0-0"];
m7_78 [cluster="HelpVerbRequestedError.cstr", file="OptionSpecification.cs", label="Entry HelpVerbRequestedError.cstr", span=""];
m7_82 [file="OptionSpecification.cs", label="System.StringComparer", span=""];
m7_83 [file="OptionSpecification.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
m7_84 [file="OptionSpecification.cs", label="System.StringComparer", span=""];
m7_85 [file="OptionSpecification.cs", label=firstArg, span=""];
m7_86 [file="OptionSpecification.cs", label="System.Collections.Generic.IEnumerable<string>", span=""];
m7_87 [file="OptionSpecification.cs", label="System.StringComparer", span=""];
m7_88 [file="OptionSpecification.cs", label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>", span=""];
m7_89 [file="OptionSpecification.cs", label=string, span=""];
m7_90 [file="OptionSpecification.cs", label="System.StringComparer", span=""];
m8_19 [cluster="CommandLine.ParserSettings.~ParserSettings()", file="Parser.cs", label="Entry CommandLine.ParserSettings.~ParserSettings()", span="127-127"];
m8_20 [cluster="CommandLine.ParserSettings.~ParserSettings()", file="Parser.cs", label="Dispose(false)", span="129-129"];
m8_21 [cluster="CommandLine.ParserSettings.~ParserSettings()", file="Parser.cs", label="Exit CommandLine.ParserSettings.~ParserSettings()", span="127-127"];
m8_6 [cluster="CommandLine.ParserSettings.ParserSettings(bool, System.IO.TextWriter)", file="Parser.cs", label="Entry CommandLine.ParserSettings.ParserSettings(bool, System.IO.TextWriter)", span="77-77"];
m8_7 [cluster="CommandLine.ParserSettings.ParserSettings(bool, System.IO.TextWriter)", file="Parser.cs", label="Exit CommandLine.ParserSettings.ParserSettings(bool, System.IO.TextWriter)", span="77-77"];
m8_0 [cluster="CommandLine.ParserSettings.ParserSettings()", file="Parser.cs", label="Entry CommandLine.ParserSettings.ParserSettings()", span="44-44"];
m8_1 [cluster="CommandLine.ParserSettings.ParserSettings()", file="Parser.cs", label="Exit CommandLine.ParserSettings.ParserSettings()", span="44-44"];
m8_22 [cluster="CommandLine.ParserSettings.Dispose(bool)", file="Parser.cs", label="Entry CommandLine.ParserSettings.Dispose(bool)", span="180-180"];
m8_28 [cluster="CommandLine.ParserSettings.Dispose(bool)", file="Parser.cs", label=_disposed, span="182-182"];
m8_30 [cluster="CommandLine.ParserSettings.Dispose(bool)", file="Parser.cs", label=disposing, span="187-187"];
m8_29 [cluster="CommandLine.ParserSettings.Dispose(bool)", file="Parser.cs", label="return;", span="184-184"];
m8_31 [cluster="CommandLine.ParserSettings.Dispose(bool)", file="Parser.cs", label="HelpWriter != null", span="189-189"];
m8_32 [cluster="CommandLine.ParserSettings.Dispose(bool)", file="Parser.cs", label="HelpWriter.Dispose()", span="191-191"];
m8_34 [cluster="CommandLine.ParserSettings.Dispose(bool)", file="Parser.cs", label="_disposed = true", span="195-195"];
m8_33 [cluster="CommandLine.ParserSettings.Dispose(bool)", color=red, community=0, file="Parser.cs", label="0: HelpWriter = null", span="192-192"];
m8_35 [cluster="CommandLine.ParserSettings.Dispose(bool)", file="Parser.cs", label="Exit CommandLine.ParserSettings.Dispose(bool)", span="180-180"];
m8_2 [cluster="CommandLine.ParserSettings.ParserSettings(bool)", file="Parser.cs", label="Entry CommandLine.ParserSettings.ParserSettings(bool)", span="54-54"];
m8_3 [cluster="CommandLine.ParserSettings.ParserSettings(bool)", file="Parser.cs", label="Exit CommandLine.ParserSettings.ParserSettings(bool)", span="54-54"];
m8_27 [cluster="System.GC.SuppressFinalize(object)", file="Parser.cs", label="Entry System.GC.SuppressFinalize(object)", span="0-0"];
m8_36 [cluster="System.IO.TextWriter.Dispose()", file="Parser.cs", label="Entry System.IO.TextWriter.Dispose()", span="0-0"];
m8_12 [cluster="CommandLine.ParserSettings.ParserSettings(bool, bool, bool, System.IO.TextWriter)", file="Parser.cs", label="Entry CommandLine.ParserSettings.ParserSettings(bool, bool, bool, System.IO.TextWriter)", span="115-115"];
m8_13 [cluster="CommandLine.ParserSettings.ParserSettings(bool, bool, bool, System.IO.TextWriter)", file="Parser.cs", label="CaseSensitive = caseSensitive", span="117-117"];
m8_14 [cluster="CommandLine.ParserSettings.ParserSettings(bool, bool, bool, System.IO.TextWriter)", file="Parser.cs", label="MutuallyExclusive = mutuallyExclusive", span="118-118"];
m8_15 [cluster="CommandLine.ParserSettings.ParserSettings(bool, bool, bool, System.IO.TextWriter)", file="Parser.cs", label="HelpWriter = helpWriter", span="119-119"];
m8_16 [cluster="CommandLine.ParserSettings.ParserSettings(bool, bool, bool, System.IO.TextWriter)", file="Parser.cs", label="IgnoreUnknownArguments = ignoreUnknownArguments", span="120-120"];
m8_17 [cluster="CommandLine.ParserSettings.ParserSettings(bool, bool, bool, System.IO.TextWriter)", file="Parser.cs", label="ParsingCulture = Thread.CurrentThread.CurrentCulture", span="121-121"];
m8_18 [cluster="CommandLine.ParserSettings.ParserSettings(bool, bool, bool, System.IO.TextWriter)", file="Parser.cs", label="Exit CommandLine.ParserSettings.ParserSettings(bool, bool, bool, System.IO.TextWriter)", span="115-115"];
m8_8 [cluster="CommandLine.ParserSettings.ParserSettings(bool, bool)", file="Parser.cs", label="Entry CommandLine.ParserSettings.ParserSettings(bool, bool)", span="88-88"];
m8_9 [cluster="CommandLine.ParserSettings.ParserSettings(bool, bool)", file="Parser.cs", label="Exit CommandLine.ParserSettings.ParserSettings(bool, bool)", span="88-88"];
m8_23 [cluster="CommandLine.ParserSettings.Dispose()", file="Parser.cs", label="Entry CommandLine.ParserSettings.Dispose()", span="173-173"];
m8_24 [cluster="CommandLine.ParserSettings.Dispose()", file="Parser.cs", label="Dispose(true)", span="175-175"];
m8_25 [cluster="CommandLine.ParserSettings.Dispose()", file="Parser.cs", label="GC.SuppressFinalize(this)", span="177-177"];
m8_26 [cluster="CommandLine.ParserSettings.Dispose()", file="Parser.cs", label="Exit CommandLine.ParserSettings.Dispose()", span="173-173"];
m8_4 [cluster="CommandLine.ParserSettings.ParserSettings(System.IO.TextWriter)", file="Parser.cs", label="Entry CommandLine.ParserSettings.ParserSettings(System.IO.TextWriter)", span="65-65"];
m8_5 [cluster="CommandLine.ParserSettings.ParserSettings(System.IO.TextWriter)", file="Parser.cs", label="Exit CommandLine.ParserSettings.ParserSettings(System.IO.TextWriter)", span="65-65"];
m8_10 [cluster="CommandLine.ParserSettings.ParserSettings(bool, bool, System.IO.TextWriter)", file="Parser.cs", label="Entry CommandLine.ParserSettings.ParserSettings(bool, bool, System.IO.TextWriter)", span="101-101"];
m8_11 [cluster="CommandLine.ParserSettings.ParserSettings(bool, bool, System.IO.TextWriter)", file="Parser.cs", label="Exit CommandLine.ParserSettings.ParserSettings(bool, bool, System.IO.TextWriter)", span="101-101"];
m8_37 [file="Parser.cs", label="CommandLine.ParserSettings", span=""];
m9_70 [cluster="Unk.SingleOrDefault", file="ParserResult.cs", label="Entry Unk.SingleOrDefault", span=""];
m9_32 [cluster="CommandLine.Text.Example.Equals(CommandLine.Text.Example)", file="ParserResult.cs", label="return HelpText.Equals(other.HelpText)\r\n                && FormatStyles.SequenceEqual(other.FormatStyles)\r\n                && Sample.Equals(other.Sample);", span="91-93"];
m9_81 [cluster="CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", file="ParserResult.cs", label="return new NotParsed<object>(new NullInstance(), types, errors);", span="102-102"];
m9_82 [cluster="CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", file="ParserResult.cs", label="Exit CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", span="100-100"];
m9_30 [cluster="CommandLine.Text.Example.Equals(CommandLine.Text.Example)", color=red, community=0, file="ParserResult.cs", label="0: other == null", span="86-86"];
m9_49 [cluster="Unk.>", file="ParserResult.cs", label="Entry Unk.>", span=""];
m9_53 [cluster="Unk.MakeNotParsed", file="ParserResult.cs", label="Entry Unk.MakeNotParsed", span=""];
m9_48 [cluster="Unk.Any", file="ParserResult.cs", label="Entry Unk.Any", span=""];
m9_18 [cluster="CommandLine.Text.Example.Equals(object)", file="ParserResult.cs", label="Entry CommandLine.Text.Example.Equals(object)", span="59-59"];
m9_19 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResult.cs", label="arguments.Empty()", span="38-38"];
m9_22 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, file="ParserResult.cs", label="0: Func<string, bool> preprocCompare = command =>\r\n                    nameComparer.Equals(command, firstArg) ||\r\n                    nameComparer.Equals(string.Concat(''--'', command), firstArg)", span="45-47"];
m9_20 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResult.cs", label="return MakeNotParsed(types, new NoVerbSelectedError());", span="40-40"];
m9_21 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=red, community=0, file="ParserResult.cs", label="0: var firstArg = arguments.First()", span="43-43"];
m9_23 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, file="ParserResult.cs", label="0: var verbs = Verb.SelectFromTypes(types)", span="49-49"];
m9_35 [cluster="Unk.SequenceEqual", file="ParserResult.cs", label="Entry Unk.SequenceEqual", span=""];
m9_83 [cluster="CommandLine.NotParsed<T>.NotParsed(T, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="ParserResult.cs", label="Entry CommandLine.NotParsed<T>.NotParsed(T, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="136-136"];
m9_0 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResult.cs", label="Entry CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12"];
m9_1 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, file="ParserResult.cs", label="0: return Choose(\r\n                (args, optionSpecs) =>\r\n                    {\r\n                        var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer));\r\n                        var explodedTokens = Tokenizer.ExplodeOptionList(tokens, name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer));\r\n                        return explodedTokens;\r\n                    },\r\n                types,\r\n                arguments,\r\n                nameComparer,\r\n                parsingCulture);", span="18-28"];
m9_3 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=red, community=0, file="ParserResult.cs", label="0: Entry CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="31-31"];
m9_5 [cluster="lambda expression", file="ParserResult.cs", label="var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer))", span="21-21"];
m9_7 [cluster="lambda expression", file="ParserResult.cs", label="return explodedTokens;", span="23-23"];
m9_8 [cluster="lambda expression", color=red, community=0, file="ParserResult.cs", label="0: Exit lambda expression", span="19-24"];
m9_9 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="ParserResult.cs", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11"];
m9_2 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=red, community=0, file="ParserResult.cs", label="0: Exit CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12"];
m9_4 [cluster="lambda expression", color=red, community=0, file="ParserResult.cs", label="0: Entry lambda expression", span="19-24"];
m9_6 [cluster="lambda expression", color=green, community=0, file="ParserResult.cs", label="0: var explodedTokens = Tokenizer.ExplodeOptionList(tokens, name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer))", span="22-22"];
m9_10 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<char>>)", file="ParserResult.cs", label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<char>>)", span="44-44"];
m9_16 [cluster="lambda expression", color=green, community=0, file="ParserResult.cs", label="0: NameLookup.HavingSeparator(name, optionSpecs, nameComparer)", span="22-22"];
m9_17 [cluster="lambda expression", file="ParserResult.cs", label="Exit lambda expression", span="22-22"];
m9_24 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, file="ParserResult.cs", label="0: preprocCompare(''help'')", span="51-51"];
m9_31 [cluster="CommandLine.NoVerbSelectedError.NoVerbSelectedError()", file="ParserResult.cs", label="Entry CommandLine.NoVerbSelectedError.NoVerbSelectedError()", span="410-410"];
m9_33 [cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="ParserResult.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0"];
m9_26 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, file="ParserResult.cs", label="0: preprocCompare(''version'')", span="58-58"];
m9_27 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, file="ParserResult.cs", label="0: return MakeNotParsed(types, new VersionRequestedError());", span="60-60"];
m9_28 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, file="ParserResult.cs", label="0: return MatchVerb(tokenizer, verbs, arguments, nameComparer, parsingCulture);", span="63-63"];
m9_52 [cluster="CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", file="ParserResult.cs", label="Entry CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", span="346-346"];
m9_72 [cluster="CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", file="ParserResult.cs", label="Entry CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", span="372-372"];
m9_25 [cluster="object.Equals(object)", color=green, community=0, file="ParserResult.cs", label="0: Entry object.Equals(object)", span="0-0"];
m9_29 [cluster="object.GetHashCode()", file="ParserResult.cs", label="Entry object.GetHashCode()", span="0-0"];
m9_14 [cluster="CommandLine.Text.Example.Example(string, CommandLine.UnParserSettings, object)", file="ParserResult.cs", label="Entry CommandLine.Text.Example.Example(string, CommandLine.UnParserSettings, object)", span="29-29"];
m9_39 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="ParserResult.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
m9_44 [cluster="System.StringComparer.Equals(string, string)", file="ParserResult.cs", label="Entry System.StringComparer.Equals(string, string)", span="0-0"];
m9_71 [cluster="Unk.ToMaybe", file="ParserResult.cs", label="Entry Unk.ToMaybe", span=""];
m9_60 [cluster="Unk.Single", file="ParserResult.cs", label="Entry Unk.Single", span=""];
m9_45 [cluster="string.Concat(string, string)", file="ParserResult.cs", label="Entry string.Concat(string, string)", span="0-0"];
m9_36 [cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="ParserResult.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0"];
m9_37 [cluster="System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", color=red, community=0, file="ParserResult.cs", label="0: Entry System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", span="0-0"];
m9_38 [cluster="CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", file="ParserResult.cs", label="Entry CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", span="86-86"];
m9_62 [cluster="lambda expression", file="ParserResult.cs", label="Entry lambda expression", span="77-77"];
m9_15 [cluster="CommandLine.Text.Example.Example(string, CommandLine.UnParserSettings, object)", file="ParserResult.cs", label="Exit CommandLine.Text.Example.Example(string, CommandLine.UnParserSettings, object)", span="29-29"];
m9_42 [cluster="lambda expression", color=green, community=0, file="ParserResult.cs", label="0: nameComparer.Equals(command, firstArg) ||\r\n                    nameComparer.Equals(string.Concat(''--'', command), firstArg)", span="46-47"];
m9_41 [cluster="lambda expression", file="ParserResult.cs", label="CommandLine.Text.Example", span=""];
m9_43 [cluster="lambda expression", file="ParserResult.cs", label="Exit lambda expression", span="45-47"];
m9_54 [cluster="lambda expression", file="ParserResult.cs", label="Entry lambda expression", span="73-73"];
m9_57 [cluster="lambda expression", file="ParserResult.cs", label="Entry lambda expression", span="76-78"];
m9_65 [cluster="lambda expression", file="ParserResult.cs", label="Entry lambda expression", span="83-83"];
m9_55 [cluster="lambda expression", color=green, community=0, file="ParserResult.cs", label="0: nameComparer.Equals(a.Item1.Name, arguments.First())", span="73-73"];
m9_56 [cluster="lambda expression", file="ParserResult.cs", label="Exit lambda expression", span="73-73"];
m9_74 [cluster="lambda expression", file="ParserResult.cs", label="Entry lambda expression", span="92-92"];
m9_77 [cluster="lambda expression", file="ParserResult.cs", label="Entry lambda expression", span="95-95"];
m9_75 [cluster="lambda expression", color=green, community=0, file="ParserResult.cs", label="0: nameComparer.Equals(v.Item1.Name, verb)", span="92-92"];
m9_76 [cluster="lambda expression", file="ParserResult.cs", label="Exit lambda expression", span="92-92"];
m9_78 [cluster="lambda expression", color=green, community=0, file="ParserResult.cs", label="0: new HelpVerbRequestedError(v.Item1.Name, v.Item2, true)", span="95-95"];
m9_79 [cluster="lambda expression", file="ParserResult.cs", label="Exit lambda expression", span="95-95"];
m9_12 [cluster="System.ArgumentException.ArgumentException(string, string)", file="ParserResult.cs", label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0"];
m9_11 [cluster="string.IsNullOrEmpty(string)", file="ParserResult.cs", label="Entry string.IsNullOrEmpty(string)", span="0-0"];
m9_63 [cluster="lambda expression", file="ParserResult.cs", label="nameComparer.Equals(v.Item1.Name, arguments.First())", span="77-77"];
m9_58 [cluster="lambda expression", file="ParserResult.cs", label="verbs.Single(v => nameComparer.Equals(v.Item1.Name, arguments.First()))\r\n                                .Item2.AutoDefault()", span="77-78"];
m9_59 [cluster="lambda expression", file="ParserResult.cs", label="Exit lambda expression", span="76-78"];
m9_67 [cluster="lambda expression", file="ParserResult.cs", label="Exit lambda expression", span="83-83"];
m9_66 [cluster="lambda expression", file="ParserResult.cs", label="v.Item2", span="83-83"];
m9_13 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="ParserResult.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m9_64 [cluster="lambda expression", file="ParserResult.cs", label="Exit lambda expression", span="77-77"];
m9_68 [cluster="CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", color=green, community=0, file="ParserResult.cs", label="0: return verb.Length > 0\r\n                      ? verbs.SingleOrDefault(v => nameComparer.Equals(v.Item1.Name, verb))\r\n                             .ToMaybe()\r\n                             .Return(\r\n                                 v => new HelpVerbRequestedError(v.Item1.Name, v.Item2, true),\r\n                                 new HelpVerbRequestedError(null, null, false))\r\n                      : new HelpVerbRequestedError(null, null, false);", span="91-97"];
m9_69 [cluster="CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", file="ParserResult.cs", label="Exit CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", span="86-86"];
m9_51 [cluster="Unk.Select", file="ParserResult.cs", label="Entry Unk.Select", span=""];
m9_34 [cluster="CommandLine.Core.Verb.SelectFromTypes(System.Collections.Generic.IEnumerable<System.Type>)", file="ParserResult.cs", label="Entry CommandLine.Core.Verb.SelectFromTypes(System.Collections.Generic.IEnumerable<System.Type>)", span="40-40"];
m9_40 [cluster="CommandLine.UnParserSettings.UnParserSettings()", file="ParserResult.cs", label="Entry CommandLine.UnParserSettings.UnParserSettings()", span="15-15"];
m9_46 [cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, file="ParserResult.cs", label="0: return verbs.Any(a => nameComparer.Equals(a.Item1.Name, arguments.First()))\r\n                ? InstanceBuilder.Build(\r\n                    Maybe.Just<Func<object>>(\r\n                        () =>\r\n                            verbs.Single(v => nameComparer.Equals(v.Item1.Name, arguments.First()))\r\n                                .Item2.AutoDefault()),\r\n                    tokenizer,\r\n                    arguments.Skip(1),\r\n                    nameComparer,\r\n                    parsingCulture)\r\n                : MakeNotParsed(verbs.Select(v => v.Item2), new BadVerbSelectedError(arguments.First()));", span="73-83"];
m9_47 [cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResult.cs", label="Exit CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="66-66"];
m9_73 [cluster="Unk.Return", file="ParserResult.cs", label="Entry Unk.Return", span=""];
m9_61 [cluster="Unk.AutoDefault", file="ParserResult.cs", label="Entry Unk.AutoDefault", span=""];
m9_84 [cluster="CommandLine.NullInstance.NullInstance()", file="ParserResult.cs", label="Entry CommandLine.NullInstance.NullInstance()", span="9-9"];
m9_50 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResult.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="34-34"];
m9_80 [cluster="HelpVerbRequestedError.cstr", file="ParserResult.cs", label="Entry HelpVerbRequestedError.cstr", span=""];
m9_85 [file="ParserResult.cs", label="System.StringComparer", span=""];
m9_86 [file="ParserResult.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
m9_87 [file="ParserResult.cs", label="System.StringComparer", span=""];
m9_88 [file="ParserResult.cs", label=firstArg, span=""];
m9_89 [file="ParserResult.cs", label="System.Collections.Generic.IEnumerable<string>", span=""];
m9_90 [file="ParserResult.cs", label="System.StringComparer", span=""];
m9_92 [file="ParserResult.cs", label=string, span=""];
m9_93 [file="ParserResult.cs", label="System.StringComparer", span=""];
m9_91 [file="ParserResult.cs", label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>", span=""];
m10_66 [cluster="Unk.SingleOrDefault", file="ParserTests.cs", label="Entry Unk.SingleOrDefault", span=""];
m10_28 [cluster="CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", file="ParserTests.cs", label="Entry CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", span="95-95"];
m10_77 [cluster="CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", file="ParserTests.cs", label="return new NotParsed<object>(typeof(NullInstance), types, errors);", span="97-97"];
m10_78 [cluster="CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", file="ParserTests.cs", label="Exit CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", span="95-95"];
m10_46 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserTests.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="35-35"];
m10_26 [cluster="System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", file="ParserTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", span="31-31"];
m10_10 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="ParserTests.cs", label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", span="46-46"];
m10_45 [cluster="Unk.>", file="ParserTests.cs", label="Entry Unk.>", span=""];
m10_49 [cluster="Unk.MakeNotParsed", file="ParserTests.cs", label="Entry Unk.MakeNotParsed", span=""];
m10_44 [cluster="Unk.Any", file="ParserTests.cs", label="Entry Unk.Any", span=""];
m10_18 [cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="ParserTests.cs", label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16"];
m10_31 [cluster="System.Func<T, TResult>.Invoke(T)", file="ParserTests.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m10_36 [cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserTests.cs", label="Entry CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="62-62"];
m10_42 [cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=red, community=0, file="ParserTests.cs", label="0: return verbs.Any(a => nameComparer.Equals(a.Item1.Name, arguments.First()))\r\n                ? InstanceBuilder.Build(\r\n                    Maybe.Just<Func<object>>(\r\n                        () =>\r\n                            verbs.Single(v => nameComparer.Equals(v.Item1.Name, arguments.First())).Item2.AutoDefault()),\r\n                    tokenizer,\r\n                    arguments.Skip(1),\r\n                    nameComparer,\r\n                    parsingCulture)\r\n                : MakeNotParsed(verbs.Select(v => v.Item2), new BadVerbSelectedError(arguments.First()));", span="69-78"];
m10_43 [cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserTests.cs", label="Exit CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="62-62"];
m10_48 [cluster="CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", file="ParserTests.cs", label="Entry CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", span="357-357"];
m10_68 [cluster="CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", file="ParserTests.cs", label="Entry CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", span="383-383"];
m10_14 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="ParserTests.cs", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
m10_35 [cluster="CommandLine.VersionRequestedError.VersionRequestedError()", file="ParserTests.cs", label="Entry CommandLine.VersionRequestedError.VersionRequestedError()", span="432-432"];
m10_40 [cluster="System.StringComparer.Equals(string, string)", file="ParserTests.cs", label="Entry System.StringComparer.Equals(string, string)", span="0-0"];
m10_56 [cluster="Unk.Single", file="ParserTests.cs", label="Entry Unk.Single", span=""];
m10_67 [cluster="Unk.ToMaybe", file="ParserTests.cs", label="Entry Unk.ToMaybe", span=""];
m10_41 [cluster="string.Concat(string, string)", file="ParserTests.cs", label="Entry string.Concat(string, string)", span="0-0"];
m10_73 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="90-90"];
m10_5 [cluster="lambda expression", file="ParserTests.cs", label="var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer))", span="23-23"];
m10_12 [cluster="lambda expression", file="ParserTests.cs", label="NameLookup.Contains(name, optionSpecs, nameComparer)", span="23-23"];
m10_6 [cluster="lambda expression", file="ParserTests.cs", label="var explodedTokens = Tokenizer.ExplodeOptionList(tokens, name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer))", span="24-24"];
m10_16 [cluster="lambda expression", file="ParserTests.cs", label="NameLookup.HavingSeparator(name, optionSpecs, nameComparer)", span="24-24"];
m10_4 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="21-26"];
m10_11 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="23-23"];
m10_7 [cluster="lambda expression", file="ParserTests.cs", label="return explodedTokens;", span="25-25"];
m10_15 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="24-24"];
m10_8 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="21-26"];
m10_13 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="23-23"];
m10_17 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="24-24"];
m10_38 [cluster="lambda expression", file="ParserTests.cs", label="nameComparer.Equals(command, firstArg) ||\r\n                    nameComparer.Equals(string.Concat(''--'', command), firstArg)", span="48-49"];
m10_37 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="47-49"];
m10_39 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="47-49"];
m10_51 [cluster="lambda expression", file="ParserTests.cs", label="nameComparer.Equals(a.Item1.Name, arguments.First())", span="69-69"];
m10_54 [cluster="lambda expression", file="ParserTests.cs", label="verbs.Single(v => nameComparer.Equals(v.Item1.Name, arguments.First())).Item2.AutoDefault()", span="73-73"];
m10_59 [cluster="lambda expression", file="ParserTests.cs", label="nameComparer.Equals(v.Item1.Name, arguments.First())", span="73-73"];
m10_50 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="69-69"];
m10_53 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="72-73"];
m10_61 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="78-78"];
m10_52 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="69-69"];
m10_55 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="72-73"];
m10_58 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="73-73"];
m10_60 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="73-73"];
m10_62 [cluster="lambda expression", file="ParserTests.cs", label="v.Item2", span="78-78"];
m10_63 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="78-78"];
m10_71 [cluster="lambda expression", file="ParserTests.cs", label="nameComparer.Equals(v.Item1.Name, verb)", span="87-87"];
m10_70 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="87-87"];
m10_72 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="87-87"];
m10_74 [cluster="lambda expression", file="ParserTests.cs", label="new HelpVerbRequestedError(v.Item1.Name, v.Item2, true)", span="90-90"];
m10_75 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="90-90"];
m10_29 [cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="ParserTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0"];
m10_32 [cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="ParserTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0"];
m10_79 [cluster="CommandLine.NotParsed<T>.NotParsed(System.Type, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="ParserTests.cs", label="Entry CommandLine.NotParsed<T>.NotParsed(System.Type, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="184-184"];
m10_34 [cluster="CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", file="ParserTests.cs", label="Entry CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", span="81-81"];
m10_64 [cluster="CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", file="ParserTests.cs", label="return verb.Length > 0\r\n                ? verbs.SingleOrDefault(v => nameComparer.Equals(v.Item1.Name, verb))\r\n                        .ToMaybe()\r\n                        .Return(\r\n                            v => new HelpVerbRequestedError(v.Item1.Name, v.Item2, true),\r\n                            new HelpVerbRequestedError(null, null, false))\r\n                : new HelpVerbRequestedError(null, null, false);", span="86-92"];
m10_65 [cluster="CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", file="ParserTests.cs", label="Exit CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", span="81-81"];
m10_47 [cluster="Unk.Select", file="ParserTests.cs", label="Entry Unk.Select", span=""];
m10_27 [cluster="CommandLine.NoVerbSelectedError.NoVerbSelectedError()", file="ParserTests.cs", label="Entry CommandLine.NoVerbSelectedError.NoVerbSelectedError()", span="421-421"];
m10_0 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserTests.cs", label="Entry CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="14-14"];
m10_1 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserTests.cs", label="return Choose(\r\n                (args, optionSpecs) =>\r\n                    {\r\n                        var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer));\r\n                        var explodedTokens = Tokenizer.ExplodeOptionList(tokens, name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer));\r\n                        return explodedTokens;\r\n                    },\r\n                types,\r\n                arguments,\r\n                nameComparer,\r\n                parsingCulture);", span="20-30"];
m10_2 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserTests.cs", label="Exit CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="14-14"];
m10_9 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="ParserTests.cs", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="13-13"];
m10_3 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserTests.cs", label="Entry CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33"];
m10_19 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserTests.cs", label="arguments.Empty()", span="40-40"];
m10_20 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserTests.cs", label="return MakeNotParsed(types, new NoVerbSelectedError());", span="42-42"];
m10_21 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserTests.cs", label="var firstArg = arguments.First()", span="45-45"];
m10_22 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserTests.cs", label="Func<string, bool> preprocCompare = command =>\r\n                    nameComparer.Equals(command, firstArg) ||\r\n                    nameComparer.Equals(string.Concat(''--'', command), firstArg)", span="47-49"];
m10_23 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserTests.cs", label="var verbs = Verb.SelectFromTypes(types)", span="51-51"];
m10_24 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserTests.cs", label="return preprocCompare(''help'')\r\n                ? MakeNotParsed(types,\r\n                    MakeHelpVerbRequestedError(verbs,\r\n                        arguments.Skip(1).SingleOrDefault() ?? string.Empty, nameComparer))\r\n                : preprocCompare(''version'')\r\n                    ? MakeNotParsed(types, new VersionRequestedError())\r\n                    : MatchVerb(tokenizer, verbs, arguments, nameComparer, parsingCulture);", span="53-59"];
m10_25 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserTests.cs", label="Exit CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33"];
m10_69 [cluster="Unk.Return", file="ParserTests.cs", label="Entry Unk.Return", span=""];
m10_57 [cluster="Unk.AutoDefault", file="ParserTests.cs", label="Entry Unk.AutoDefault", span=""];
m10_30 [cluster="CommandLine.Core.Verb.SelectFromTypes(System.Collections.Generic.IEnumerable<System.Type>)", file="ParserTests.cs", label="Entry CommandLine.Core.Verb.SelectFromTypes(System.Collections.Generic.IEnumerable<System.Type>)", span="40-40"];
m10_33 [cluster="System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", file="ParserTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", span="0-0"];
m10_76 [cluster="HelpVerbRequestedError.cstr", file="ParserTests.cs", label="Entry HelpVerbRequestedError.cstr", span=""];
m10_80 [file="ParserTests.cs", label="System.StringComparer", span=""];
m10_81 [file="ParserTests.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
m10_82 [file="ParserTests.cs", label="System.StringComparer", span=""];
m10_83 [file="ParserTests.cs", label=firstArg, span=""];
m10_84 [file="ParserTests.cs", label="System.Collections.Generic.IEnumerable<string>", span=""];
m10_85 [file="ParserTests.cs", label="System.StringComparer", span=""];
m10_86 [file="ParserTests.cs", label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>", span=""];
m10_87 [file="ParserTests.cs", label=string, span=""];
m10_88 [file="ParserTests.cs", label="System.StringComparer", span=""];
m13_14 [cluster="CommandLine.HelpVerbOptionAttribute.CheckMethodSignature(System.Reflection.MethodInfo)", file="ValueAttribute.cs", label="Entry CommandLine.HelpVerbOptionAttribute.CheckMethodSignature(System.Reflection.MethodInfo)", span="97-97"];
m13_18 [cluster="CommandLine.HelpVerbOptionAttribute.CheckMethodSignature(System.Reflection.MethodInfo)", file="ValueAttribute.cs", label="value.ReturnType == typeof(string) && value.GetParameters().Length == 1", span="99-99"];
m13_19 [cluster="CommandLine.HelpVerbOptionAttribute.CheckMethodSignature(System.Reflection.MethodInfo)", file="ValueAttribute.cs", label="return value.GetParameters()[0].ParameterType == typeof(string);", span="101-101"];
m13_20 [cluster="CommandLine.HelpVerbOptionAttribute.CheckMethodSignature(System.Reflection.MethodInfo)", file="ValueAttribute.cs", label="return false;", span="103-103"];
m13_21 [cluster="CommandLine.HelpVerbOptionAttribute.CheckMethodSignature(System.Reflection.MethodInfo)", file="ValueAttribute.cs", label="Exit CommandLine.HelpVerbOptionAttribute.CheckMethodSignature(System.Reflection.MethodInfo)", span="97-97"];
m13_0 [cluster="CommandLine.ValueAttribute.ValueAttribute(int)", file="ValueAttribute.cs", label="Entry CommandLine.ValueAttribute.ValueAttribute(int)", span="20-20"];
m13_1 [cluster="CommandLine.ValueAttribute.ValueAttribute(int)", file="ValueAttribute.cs", label="this.index = index", span="22-22"];
m13_2 [cluster="CommandLine.ValueAttribute.ValueAttribute(int)", file="ValueAttribute.cs", label="min = -1", span="23-23"];
m13_3 [cluster="CommandLine.ValueAttribute.ValueAttribute(int)", file="ValueAttribute.cs", label="max = -1", span="24-24"];
m13_4 [cluster="CommandLine.ValueAttribute.ValueAttribute(int)", file="ValueAttribute.cs", label="Exit CommandLine.ValueAttribute.ValueAttribute(int)", span="20-20"];
m13_17 [cluster="System.Reflection.MethodBase.Invoke(object, object[])", file="ValueAttribute.cs", label="Entry System.Reflection.MethodBase.Invoke(object, object[])", span="0-0"];
m13_15 [cluster="System.MemberAccessException.MemberAccessException(string)", file="ValueAttribute.cs", label="Entry System.MemberAccessException.MemberAccessException(string)", span="0-0"];
m13_16 [cluster="string.FormatInvariant(params object[])", file="ValueAttribute.cs", label="Entry string.FormatInvariant(params object[])", span="58-58"];
m13_7 [cluster="CommandLine.HelpVerbOptionAttribute.InvokeMethod(object, CommandLine.Internal.Pair<System.Reflection.MethodInfo, CommandLine.HelpVerbOptionAttribute>, string, out string)", file="ValueAttribute.cs", label="Entry CommandLine.HelpVerbOptionAttribute.InvokeMethod(object, CommandLine.Internal.Pair<System.Reflection.MethodInfo, CommandLine.HelpVerbOptionAttribute>, string, out string)", span="83-83"];
m13_8 [cluster="CommandLine.HelpVerbOptionAttribute.InvokeMethod(object, CommandLine.Internal.Pair<System.Reflection.MethodInfo, CommandLine.HelpVerbOptionAttribute>, string, out string)", color=green, community=0, file="ValueAttribute.cs", label="0: text = null", span="86-86"];
m13_9 [cluster="CommandLine.HelpVerbOptionAttribute.InvokeMethod(object, CommandLine.Internal.Pair<System.Reflection.MethodInfo, CommandLine.HelpVerbOptionAttribute>, string, out string)", file="ValueAttribute.cs", label="var method = helpInfo.Left", span="87-87"];
m13_12 [cluster="CommandLine.HelpVerbOptionAttribute.InvokeMethod(object, CommandLine.Internal.Pair<System.Reflection.MethodInfo, CommandLine.HelpVerbOptionAttribute>, string, out string)", color=green, community=0, file="ValueAttribute.cs", label="0: text = (string) method.Invoke(target, new object[] {verb})", span="94-94"];
m13_10 [cluster="CommandLine.HelpVerbOptionAttribute.InvokeMethod(object, CommandLine.Internal.Pair<System.Reflection.MethodInfo, CommandLine.HelpVerbOptionAttribute>, string, out string)", file="ValueAttribute.cs", label="!CheckMethodSignature(method)", span="88-88"];
m13_11 [cluster="CommandLine.HelpVerbOptionAttribute.InvokeMethod(object, CommandLine.Internal.Pair<System.Reflection.MethodInfo, CommandLine.HelpVerbOptionAttribute>, string, out string)", file="ValueAttribute.cs", label="throw new MemberAccessException(\r\n                    ''{0} has an incorrect signature. '' +\r\n                    ''Help verb command requires a method that accepts and returns a string.''.FormatInvariant(method.Name));", span="90-92"];
m13_13 [cluster="CommandLine.HelpVerbOptionAttribute.InvokeMethod(object, CommandLine.Internal.Pair<System.Reflection.MethodInfo, CommandLine.HelpVerbOptionAttribute>, string, out string)", file="ValueAttribute.cs", label="Exit CommandLine.HelpVerbOptionAttribute.InvokeMethod(object, CommandLine.Internal.Pair<System.Reflection.MethodInfo, CommandLine.HelpVerbOptionAttribute>, string, out string)", span="83-83"];
m13_22 [cluster="System.Reflection.MethodBase.GetParameters()", file="ValueAttribute.cs", label="Entry System.Reflection.MethodBase.GetParameters()", span="0-0"];
m13_5 [file="ValueAttribute.cs", label="CommandLine.ValueAttribute", span=""];
m14_6 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="ValueSpecification.cs", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63"];
m14_9 [cluster="System.Type.ToTargetType()", file="ValueSpecification.cs", label="Entry System.Type.ToTargetType()", span="47-47"];
m14_7 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="ValueSpecification.cs", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68"];
m14_8 [cluster="T.ToMaybe<T>()", file="ValueSpecification.cs", label="Entry T.ToMaybe<T>()", span="79-79"];
m14_0 [cluster="CommandLine.Core.ValueSpecification.ValueSpecification(int, bool, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType)", file="ValueSpecification.cs", label="Entry CommandLine.Core.ValueSpecification.ValueSpecification(int, bool, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType)", span="11-11"];
m14_1 [cluster="CommandLine.Core.ValueSpecification.ValueSpecification(int, bool, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType)", file="ValueSpecification.cs", label="this.index = index", span="15-15"];
m14_2 [cluster="CommandLine.Core.ValueSpecification.ValueSpecification(int, bool, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType)", file="ValueSpecification.cs", label="Exit CommandLine.Core.ValueSpecification.ValueSpecification(int, bool, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType)", span="11-11"];
m14_3 [cluster="CommandLine.Core.ValueSpecification.FromAttribute(CommandLine.ValueAttribute, System.Type)", file="ValueSpecification.cs", label="Entry CommandLine.Core.ValueSpecification.FromAttribute(CommandLine.ValueAttribute, System.Type)", span="18-18"];
m14_4 [cluster="CommandLine.Core.ValueSpecification.FromAttribute(CommandLine.ValueAttribute, System.Type)", color=red, community=0, file="ValueSpecification.cs", label="0: return new ValueSpecification(\r\n                attribute.Index,\r\n                attribute.Required,\r\n                attribute.Min == -1 ? Maybe.Nothing<int>() : Maybe.Just(attribute.Min),\r\n                attribute.Max == -1 ? Maybe.Nothing<int>() : Maybe.Just(attribute.Max),\r\n                attribute.DefaultValue.ToMaybe(),\r\n                conversionType,\r\n                conversionType.ToTargetType());", span="20-27"];
m14_5 [cluster="CommandLine.Core.ValueSpecification.FromAttribute(CommandLine.ValueAttribute, System.Type)", file="ValueSpecification.cs", label="Exit CommandLine.Core.ValueSpecification.FromAttribute(CommandLine.ValueAttribute, System.Type)", span="18-18"];
m14_10 [file="ValueSpecification.cs", label="CommandLine.Core.ValueSpecification", span=""];
m1_9 -> m1_10  [key=0, style=solid];
m1_10 -> m1_11  [key=0, style=solid];
m1_10 -> m1_0  [key=2, style=dotted];
m1_10 -> m1_12  [key=2, style=dotted];
m1_11 -> m1_9  [color=blue, key=0, style=bold];
m1_0 -> m1_1  [key=0, style=solid];
m1_0 -> m1_2  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_0 -> m1_3  [color=darkseagreen4, key=1, label=char, style=dashed];
m1_0 -> m1_4  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_0 -> m1_5  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_0 -> m1_6  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_0 -> m1_7  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m1_1 -> m1_2  [key=0, style=solid];
m1_2 -> m1_3  [key=0, style=solid];
m1_3 -> m1_4  [key=0, style=solid];
m1_4 -> m1_5  [key=0, style=solid];
m1_5 -> m1_6  [key=0, style=solid];
m1_6 -> m1_7  [key=0, style=solid];
m1_7 -> m1_8  [key=0, style=solid];
m1_8 -> m1_0  [color=blue, key=0, style=bold];
m1_13 -> m1_1  [color=darkseagreen4, key=1, label="CommandLine.Core.OptionSpecification", style=dashed];
m1_13 -> m1_2  [color=darkseagreen4, key=1, label="CommandLine.Core.OptionSpecification", style=dashed];
m1_13 -> m1_3  [color=darkseagreen4, key=1, label="CommandLine.Core.OptionSpecification", style=dashed];
m1_13 -> m1_4  [color=darkseagreen4, key=1, label="CommandLine.Core.OptionSpecification", style=dashed];
m1_13 -> m1_5  [color=darkseagreen4, key=1, label="CommandLine.Core.OptionSpecification", style=dashed];
m1_13 -> m1_6  [color=darkseagreen4, key=1, label="CommandLine.Core.OptionSpecification", style=dashed];
m1_13 -> m1_7  [color=darkseagreen4, key=1, label="CommandLine.Core.OptionSpecification", style=dashed];
m2_10 -> m2_11  [key=0, style=solid];
m2_10 -> m2_12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>", style=dashed];
m2_10 -> m2_14  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>", style=dashed];
m2_10 -> m2_3  [color=darkorchid, key=3, label="Parameter variable System.StringComparer nameComparer", style=bold];
m2_11 -> m2_12  [key=0, style=solid];
m2_11 -> m2_14  [key=0, style=solid];
m2_11 -> m2_19  [color=darkseagreen4, key=1, label=guard, style=dashed];
m2_11 -> m2_13  [color=darkseagreen4, key=1, label=guard, style=dashed];
m2_12 -> m2_13  [key=0, style=solid];
m2_12 -> m2_11  [key=0, style=solid];
m2_12 -> m2_16  [key=2, style=dotted];
m2_12 -> m2_18  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_14 -> m2_15  [key=0, style=solid];
m2_13 -> m2_15  [key=0, style=solid];
m2_13 -> m2_17  [key=2, style=dotted];
m2_15 -> m2_10  [color=blue, key=0, style=bold];
m2_0 -> m2_1  [key=0, style=solid];
m2_1 -> m2_2  [key=0, style=solid];
m2_1 -> m2_7  [color=darkorchid, key=3, label="method methodReturn CommandLine.ParserResult<T> Build", style=bold];
m2_2 -> m2_0  [color=blue, key=0, style=bold];
m2_3 -> m2_4  [key=0, style=solid];
m2_4 -> m2_5  [key=0, style=solid];
m2_5 -> m2_3  [color=blue, key=0, style=bold];
m2_18 -> m2_19  [key=0, style=solid];
m2_19 -> m2_20  [key=0, style=solid];
m2_19 -> m2_21  [key=2, style=dotted];
m2_20 -> m2_18  [color=blue, key=0, style=bold];
m2_22 -> m2_23  [key=0, style=solid];
m2_22 -> m2_29  [color=red, key=1, label="CommandLine.Core.Specification", style=dashed];
m2_23 -> m2_24  [key=0, style=solid];
m2_23 -> m2_26  [key=0, style=solid];
m2_23 -> m2_34  [key=2, style=dotted];
m2_29 -> m2_30  [color=red, key=0, style=solid];
m2_29 -> m2_32  [color=red, key=0, style=solid];
m2_29 -> m2_36  [color=red, key=2, style=dotted];
m2_29 -> m2_31  [color=red, key=1, label=max, style=dashed];
m2_24 -> m2_25  [key=0, style=solid];
m2_26 -> m2_27  [key=0, style=solid];
m2_25 -> m2_33  [key=0, style=solid];
m2_25 -> m2_35  [key=2, style=dotted];
m2_27 -> m2_28  [key=0, style=solid];
m2_28 -> m2_29  [color=red, key=0, style=solid];
m2_30 -> m2_31  [key=0, style=solid];
m2_30 -> m2_32  [key=0, style=solid];
m2_32 -> m2_33  [key=0, style=solid];
m2_32 -> m2_37  [key=2, style=dotted];
m2_31 -> m2_33  [key=0, style=solid];
m2_31 -> m2_35  [key=2, style=dotted];
m2_33 -> m2_22  [color=blue, key=0, style=bold];
m2_6 -> m2_7  [key=0, style=solid];
m2_7 -> m2_8  [key=0, style=solid];
m2_7 -> m2_9  [key=2, style=dotted];
m2_8 -> m2_6  [color=blue, key=0, style=bold];
m2_38 -> m2_19  [color=darkseagreen4, key=1, label=guard, style=dashed];
m3_41 -> m3_42  [key=0, style=solid];
m3_41 -> m3_43  [color=darkseagreen4, key=1, label="int[]", style=dashed];
m3_42 -> m3_43  [key=0, style=solid];
m3_42 -> m3_9  [key=2, style=dotted];
m3_42 -> m3_10  [key=2, style=dotted];
m3_42 -> m3_45  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_43 -> m3_44  [key=0, style=solid];
m3_43 -> m3_36  [key=2, style=dotted];
m3_43 -> m3_12  [key=2, style=dotted];
m3_44 -> m3_41  [color=blue, key=0, style=bold];
m3_358 -> m3_359  [key=0, style=solid];
m3_359 -> m3_360  [key=0, style=solid];
m3_359 -> m3_359  [color=darkorchid, key=3, label="Local variable System.Action test", style=bold];
m3_360 -> m3_361  [key=0, style=solid];
m3_360 -> m3_339  [key=2, style=dotted];
m3_361 -> m3_358  [color=blue, key=0, style=bold];
m3_152 -> m3_153  [key=0, style=solid];
m3_152 -> m3_154  [color=darkseagreen4, key=1, label="long[]", style=dashed];
m3_153 -> m3_154  [key=0, style=solid];
m3_153 -> m3_9  [key=2, style=dotted];
m3_153 -> m3_10  [key=2, style=dotted];
m3_153 -> m3_156  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_154 -> m3_155  [key=0, style=solid];
m3_154 -> m3_105  [key=2, style=dotted];
m3_155 -> m3_152  [color=blue, key=0, style=bold];
m3_267 -> m3_268  [key=0, style=solid];
m3_267 -> m3_269  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_268 -> m3_269  [key=0, style=solid];
m3_268 -> m3_9  [key=2, style=dotted];
m3_268 -> m3_10  [key=2, style=dotted];
m3_268 -> m3_272  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_269 -> m3_270  [key=0, style=solid];
m3_269 -> m3_271  [key=2, style=dotted];
m3_269 -> m3_12  [key=2, style=dotted];
m3_270 -> m3_267  [color=blue, key=0, style=bold];
m3_335 -> m3_336  [key=0, style=solid];
m3_336 -> m3_337  [key=0, style=solid];
m3_336 -> m3_336  [color=darkorchid, key=3, label="Local variable System.Action test", style=bold];
m3_337 -> m3_338  [key=0, style=solid];
m3_337 -> m3_339  [key=2, style=dotted];
m3_338 -> m3_335  [color=blue, key=0, style=bold];
m3_308 -> m3_309  [key=0, style=solid];
m3_308 -> m3_310  [color=darkseagreen4, key=1, label="long?", style=dashed];
m3_309 -> m3_310  [key=0, style=solid];
m3_309 -> m3_9  [key=2, style=dotted];
m3_309 -> m3_10  [key=2, style=dotted];
m3_309 -> m3_312  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_310 -> m3_311  [key=0, style=solid];
m3_310 -> m3_105  [key=2, style=dotted];
m3_311 -> m3_308  [color=blue, key=0, style=bold];
m3_167 -> m3_168  [key=0, style=solid];
m3_168 -> m3_169  [key=0, style=solid];
m3_168 -> m3_140  [key=2, style=dotted];
m3_168 -> m3_171  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m3_169 -> m3_170  [key=0, style=solid];
m3_171 -> m3_172  [key=0, style=solid];
m3_171 -> m3_105  [key=2, style=dotted];
m3_170 -> m3_171  [key=0, style=solid];
m3_170 -> m3_9  [key=2, style=dotted];
m3_170 -> m3_173  [key=2, style=dotted];
m3_170 -> m3_174  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_170 -> m3_177  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_172 -> m3_167  [color=blue, key=0, style=bold];
m3_259 -> m3_260  [key=0, style=solid];
m3_260 -> m3_261  [key=0, style=solid];
m3_260 -> m3_247  [key=2, style=dotted];
m3_260 -> m3_262  [color=red, key=1, label=expectedResult, style=dashed];
m3_261 -> m3_262  [color=red, key=0, style=solid];
m3_261 -> m3_9  [key=2, style=dotted];
m3_261 -> m3_10  [key=2, style=dotted];
m3_261 -> m3_264  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_262 -> m3_263  [color=red, key=0, style=solid];
m3_262 -> m3_36  [color=red, key=2, style=dotted];
m3_262 -> m3_12  [color=red, key=2, style=dotted];
m3_263 -> m3_259  [color=blue, key=0, style=bold];
m3_392 -> m3_393  [key=0, style=solid];
m3_392 -> m3_394  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_393 -> m3_394  [key=0, style=solid];
m3_393 -> m3_9  [key=2, style=dotted];
m3_393 -> m3_10  [key=2, style=dotted];
m3_393 -> m3_396  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_394 -> m3_395  [key=0, style=solid];
m3_394 -> m3_105  [key=2, style=dotted];
m3_395 -> m3_392  [color=blue, key=0, style=bold];
m3_74 -> m3_75  [key=0, style=solid];
m3_75 -> m3_76  [key=0, style=solid];
m3_75 -> m3_79  [key=2, style=dotted];
m3_75 -> m3_77  [color=red, key=1, label=expectedResult, style=dashed];
m3_76 -> m3_77  [color=red, key=0, style=solid];
m3_76 -> m3_9  [key=2, style=dotted];
m3_76 -> m3_10  [key=2, style=dotted];
m3_76 -> m3_80  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_77 -> m3_78  [color=red, key=0, style=solid];
m3_77 -> m3_36  [color=red, key=2, style=dotted];
m3_77 -> m3_12  [color=red, key=2, style=dotted];
m3_78 -> m3_74  [color=blue, key=0, style=bold];
m3_92 -> m3_93  [key=0, style=solid];
m3_93 -> m3_94  [key=0, style=solid];
m3_93 -> m3_79  [key=2, style=dotted];
m3_93 -> m3_95  [color=red, key=1, label=expectedResult, style=dashed];
m3_94 -> m3_95  [color=red, key=0, style=solid];
m3_94 -> m3_9  [key=2, style=dotted];
m3_94 -> m3_10  [key=2, style=dotted];
m3_94 -> m3_97  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_95 -> m3_96  [color=red, key=0, style=solid];
m3_95 -> m3_36  [color=red, key=2, style=dotted];
m3_95 -> m3_12  [color=red, key=2, style=dotted];
m3_96 -> m3_92  [color=blue, key=0, style=bold];
m3_315 -> m3_316  [key=0, style=solid];
m3_315 -> m3_318  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_315 -> m3_319  [color=darkseagreen4, key=1, label=bool, style=dashed];
m3_316 -> m3_317  [key=0, style=solid];
m3_316 -> m3_9  [key=2, style=dotted];
m3_316 -> m3_10  [key=2, style=dotted];
m3_316 -> m3_322  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_316 -> m3_318  [color=darkseagreen4, key=1, label=result, style=dashed];
m3_316 -> m3_319  [color=darkseagreen4, key=1, label=result, style=dashed];
m3_318 -> m3_319  [key=0, style=solid];
m3_318 -> m3_105  [key=2, style=dotted];
m3_319 -> m3_320  [key=0, style=solid];
m3_319 -> m3_321  [key=2, style=dotted];
m3_319 -> m3_105  [key=2, style=dotted];
m3_317 -> m3_318  [key=0, style=solid];
m3_317 -> m3_319  [key=0, style=solid];
m3_320 -> m3_315  [color=blue, key=0, style=bold];
m3_251 -> m3_252  [key=0, style=solid];
m3_252 -> m3_253  [key=0, style=solid];
m3_252 -> m3_247  [key=2, style=dotted];
m3_252 -> m3_254  [color=red, key=1, label=expectedResult, style=dashed];
m3_253 -> m3_254  [color=red, key=0, style=solid];
m3_253 -> m3_9  [key=2, style=dotted];
m3_253 -> m3_10  [key=2, style=dotted];
m3_253 -> m3_256  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_254 -> m3_255  [color=red, key=0, style=solid];
m3_254 -> m3_36  [color=red, key=2, style=dotted];
m3_254 -> m3_12  [color=red, key=2, style=dotted];
m3_255 -> m3_251  [color=blue, key=0, style=bold];
m3_110 -> m3_111  [key=0, style=solid];
m3_111 -> m3_112  [key=0, style=solid];
m3_111 -> m3_115  [key=2, style=dotted];
m3_111 -> m3_70  [key=2, style=dotted];
m3_111 -> m3_113  [color=red, key=1, label=expectedResult, style=dashed];
m3_112 -> m3_113  [color=red, key=0, style=solid];
m3_112 -> m3_9  [key=2, style=dotted];
m3_112 -> m3_10  [key=2, style=dotted];
m3_112 -> m3_116  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_113 -> m3_114  [color=red, key=0, style=solid];
m3_113 -> m3_36  [color=red, key=2, style=dotted];
m3_113 -> m3_12  [color=red, key=2, style=dotted];
m3_114 -> m3_110  [color=blue, key=0, style=bold];
m3_369 -> m3_370  [key=0, style=solid];
m3_369 -> m3_371  [color=red, key=1, label=int, style=dashed];
m3_369 -> m3_380  [color=red, key=1, label=int, style=dashed];
m3_370 -> m3_371  [color=red, key=0, style=solid];
m3_370 -> m3_9  [key=2, style=dotted];
m3_370 -> m3_10  [key=2, style=dotted];
m3_370 -> m3_375  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_371 -> m3_372  [color=red, key=0, style=solid];
m3_371 -> m3_373  [color=red, key=2, style=dotted];
m3_371 -> m3_374  [color=red, key=2, style=dotted];
m3_371 -> m3_379  [color=red, key=1, label="lambda expression", style=dashed];
m3_372 -> m3_369  [color=blue, key=0, style=bold];
m3_407 -> m3_408  [key=0, style=solid];
m3_407 -> m3_409  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent", style=dashed];
m3_408 -> m3_409  [key=0, style=solid];
m3_408 -> m3_9  [key=2, style=dotted];
m3_408 -> m3_10  [key=2, style=dotted];
m3_408 -> m3_411  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_409 -> m3_410  [key=0, style=solid];
m3_409 -> m3_105  [key=2, style=dotted];
m3_410 -> m3_407  [color=blue, key=0, style=bold];
m3_144 -> m3_145  [key=0, style=solid];
m3_144 -> m3_146  [color=darkseagreen4, key=1, label="long[]", style=dashed];
m3_145 -> m3_146  [key=0, style=solid];
m3_145 -> m3_9  [key=2, style=dotted];
m3_145 -> m3_10  [key=2, style=dotted];
m3_145 -> m3_148  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_146 -> m3_147  [key=0, style=solid];
m3_146 -> m3_105  [key=2, style=dotted];
m3_147 -> m3_144  [color=blue, key=0, style=bold];
m3_56 -> m3_57  [key=0, style=solid];
m3_56 -> m3_58  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m3_57 -> m3_58  [key=0, style=solid];
m3_57 -> m3_9  [key=2, style=dotted];
m3_57 -> m3_10  [key=2, style=dotted];
m3_57 -> m3_60  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_58 -> m3_59  [key=0, style=solid];
m3_58 -> m3_36  [key=2, style=dotted];
m3_58 -> m3_12  [key=2, style=dotted];
m3_59 -> m3_56  [color=blue, key=0, style=bold];
m3_32 -> m3_33  [key=0, style=solid];
m3_32 -> m3_34  [color=darkseagreen4, key=1, label="int[]", style=dashed];
m3_33 -> m3_34  [key=0, style=solid];
m3_33 -> m3_9  [key=2, style=dotted];
m3_33 -> m3_10  [key=2, style=dotted];
m3_33 -> m3_37  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_34 -> m3_35  [key=0, style=solid];
m3_34 -> m3_36  [key=2, style=dotted];
m3_34 -> m3_12  [key=2, style=dotted];
m3_35 -> m3_32  [color=blue, key=0, style=bold];
m3_420 -> m3_421  [key=0, style=solid];
m3_14 -> m3_15  [key=0, style=solid];
m3_13 -> m3_14  [key=0, style=solid];
m3_15 -> m3_13  [color=blue, key=0, style=bold];
m3_21 -> m3_22  [key=0, style=solid];
m3_22 -> m3_23  [key=0, style=solid];
m3_22 -> m3_6  [key=2, style=dotted];
m3_23 -> m3_21  [color=blue, key=0, style=bold];
m3_28 -> m3_29  [key=0, style=solid];
m3_29 -> m3_30  [key=0, style=solid];
m3_29 -> m3_31  [key=2, style=dotted];
m3_30 -> m3_28  [color=blue, key=0, style=bold];
m3_37 -> m3_38  [key=0, style=solid];
m3_38 -> m3_39  [key=0, style=solid];
m3_38 -> m3_40  [key=2, style=dotted];
m3_39 -> m3_37  [color=blue, key=0, style=bold];
m3_45 -> m3_46  [key=0, style=solid];
m3_46 -> m3_47  [key=0, style=solid];
m3_46 -> m3_6  [key=2, style=dotted];
m3_47 -> m3_45  [color=blue, key=0, style=bold];
m3_52 -> m3_53  [key=0, style=solid];
m3_53 -> m3_54  [key=0, style=solid];
m3_53 -> m3_55  [key=2, style=dotted];
m3_54 -> m3_52  [color=blue, key=0, style=bold];
m3_60 -> m3_61  [key=0, style=solid];
m3_61 -> m3_62  [key=0, style=solid];
m3_61 -> m3_63  [key=2, style=dotted];
m3_62 -> m3_60  [color=blue, key=0, style=bold];
m3_71 -> m3_72  [key=0, style=solid];
m3_72 -> m3_73  [key=0, style=solid];
m3_72 -> m3_55  [key=2, style=dotted];
m3_73 -> m3_71  [color=blue, key=0, style=bold];
m3_80 -> m3_81  [key=0, style=solid];
m3_81 -> m3_82  [key=0, style=solid];
m3_81 -> m3_83  [key=2, style=dotted];
m3_82 -> m3_80  [color=blue, key=0, style=bold];
m3_89 -> m3_90  [key=0, style=solid];
m3_90 -> m3_91  [key=0, style=solid];
m3_90 -> m3_63  [key=2, style=dotted];
m3_91 -> m3_89  [color=blue, key=0, style=bold];
m3_97 -> m3_98  [key=0, style=solid];
m3_98 -> m3_99  [key=0, style=solid];
m3_98 -> m3_100  [key=2, style=dotted];
m3_99 -> m3_97  [color=blue, key=0, style=bold];
m3_106 -> m3_107  [key=0, style=solid];
m3_107 -> m3_108  [key=0, style=solid];
m3_107 -> m3_109  [key=2, style=dotted];
m3_108 -> m3_106  [color=blue, key=0, style=bold];
m3_116 -> m3_117  [key=0, style=solid];
m3_117 -> m3_118  [key=0, style=solid];
m3_117 -> m3_109  [key=2, style=dotted];
m3_118 -> m3_116  [color=blue, key=0, style=bold];
m3_124 -> m3_125  [key=0, style=solid];
m3_125 -> m3_126  [key=0, style=solid];
m3_125 -> m3_109  [key=2, style=dotted];
m3_126 -> m3_124  [color=blue, key=0, style=bold];
m3_132 -> m3_133  [key=0, style=solid];
m3_133 -> m3_134  [key=0, style=solid];
m3_133 -> m3_109  [key=2, style=dotted];
m3_134 -> m3_132  [color=blue, key=0, style=bold];
m3_141 -> m3_142  [key=0, style=solid];
m3_142 -> m3_143  [key=0, style=solid];
m3_142 -> m3_140  [key=2, style=dotted];
m3_143 -> m3_141  [color=blue, key=0, style=bold];
m3_148 -> m3_149  [key=0, style=solid];
m3_149 -> m3_150  [key=0, style=solid];
m3_149 -> m3_151  [key=2, style=dotted];
m3_150 -> m3_148  [color=blue, key=0, style=bold];
m3_156 -> m3_157  [key=0, style=solid];
m3_157 -> m3_158  [key=0, style=solid];
m3_157 -> m3_159  [key=2, style=dotted];
m3_158 -> m3_156  [color=blue, key=0, style=bold];
m3_164 -> m3_165  [key=0, style=solid];
m3_165 -> m3_166  [key=0, style=solid];
m3_165 -> m3_159  [key=2, style=dotted];
m3_166 -> m3_164  [color=blue, key=0, style=bold];
m3_174 -> m3_175  [key=0, style=solid];
m3_177 -> m3_178  [key=0, style=solid];
m3_177 -> m3_182  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m3_177 -> m3_186  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m3_175 -> m3_176  [key=0, style=solid];
m3_175 -> m3_140  [key=2, style=dotted];
m3_176 -> m3_174  [color=blue, key=0, style=bold];
m3_178 -> m3_179  [key=0, style=solid];
m3_178 -> m3_180  [key=2, style=dotted];
m3_178 -> m3_181  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_182 -> m3_183  [key=0, style=solid];
m3_182 -> m3_184  [key=2, style=dotted];
m3_182 -> m3_185  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_186 -> m3_187  [key=0, style=solid];
m3_186 -> m3_188  [key=2, style=dotted];
m3_179 -> m3_177  [color=blue, key=0, style=bold];
m3_181 -> m3_182  [key=0, style=solid];
m3_183 -> m3_181  [color=blue, key=0, style=bold];
m3_185 -> m3_186  [key=0, style=solid];
m3_187 -> m3_185  [color=blue, key=0, style=bold];
m3_195 -> m3_196  [key=0, style=solid];
m3_196 -> m3_197  [key=0, style=solid];
m3_196 -> m3_198  [key=2, style=dotted];
m3_197 -> m3_195  [color=blue, key=0, style=bold];
m3_205 -> m3_206  [key=0, style=solid];
m3_206 -> m3_207  [key=0, style=solid];
m3_206 -> m3_204  [key=2, style=dotted];
m3_207 -> m3_205  [color=blue, key=0, style=bold];
m3_213 -> m3_214  [key=0, style=solid];
m3_214 -> m3_215  [key=0, style=solid];
m3_214 -> m3_204  [key=2, style=dotted];
m3_215 -> m3_213  [color=blue, key=0, style=bold];
m3_222 -> m3_223  [key=0, style=solid];
m3_223 -> m3_224  [key=0, style=solid];
m3_223 -> m3_204  [key=2, style=dotted];
m3_224 -> m3_222  [color=blue, key=0, style=bold];
m3_230 -> m3_231  [key=0, style=solid];
m3_231 -> m3_232  [key=0, style=solid];
m3_231 -> m3_233  [key=2, style=dotted];
m3_232 -> m3_230  [color=blue, key=0, style=bold];
m3_239 -> m3_240  [key=0, style=solid];
m3_240 -> m3_241  [key=0, style=solid];
m3_240 -> m3_6  [key=2, style=dotted];
m3_241 -> m3_239  [color=blue, key=0, style=bold];
m3_248 -> m3_249  [key=0, style=solid];
m3_249 -> m3_250  [key=0, style=solid];
m3_249 -> m3_6  [key=2, style=dotted];
m3_250 -> m3_248  [color=blue, key=0, style=bold];
m3_256 -> m3_257  [key=0, style=solid];
m3_257 -> m3_258  [key=0, style=solid];
m3_257 -> m3_6  [key=2, style=dotted];
m3_258 -> m3_256  [color=blue, key=0, style=bold];
m3_264 -> m3_265  [key=0, style=solid];
m3_265 -> m3_266  [key=0, style=solid];
m3_265 -> m3_6  [key=2, style=dotted];
m3_266 -> m3_264  [color=blue, key=0, style=bold];
m3_272 -> m3_273  [key=0, style=solid];
m3_273 -> m3_274  [key=0, style=solid];
m3_273 -> m3_6  [key=2, style=dotted];
m3_274 -> m3_272  [color=blue, key=0, style=bold];
m3_280 -> m3_281  [key=0, style=solid];
m3_281 -> m3_282  [key=0, style=solid];
m3_281 -> m3_283  [key=2, style=dotted];
m3_282 -> m3_280  [color=blue, key=0, style=bold];
m3_288 -> m3_289  [key=0, style=solid];
m3_289 -> m3_290  [key=0, style=solid];
m3_289 -> m3_6  [key=2, style=dotted];
m3_290 -> m3_288  [color=blue, key=0, style=bold];
m3_296 -> m3_297  [key=0, style=solid];
m3_297 -> m3_298  [key=0, style=solid];
m3_297 -> m3_299  [key=2, style=dotted];
m3_298 -> m3_296  [color=blue, key=0, style=bold];
m3_304 -> m3_305  [key=0, style=solid];
m3_305 -> m3_306  [key=0, style=solid];
m3_305 -> m3_307  [key=2, style=dotted];
m3_306 -> m3_304  [color=blue, key=0, style=bold];
m3_312 -> m3_313  [key=0, style=solid];
m3_313 -> m3_314  [key=0, style=solid];
m3_313 -> m3_307  [key=2, style=dotted];
m3_314 -> m3_312  [color=blue, key=0, style=bold];
m3_322 -> m3_323  [key=0, style=solid];
m3_323 -> m3_324  [key=0, style=solid];
m3_323 -> m3_325  [key=2, style=dotted];
m3_324 -> m3_322  [color=blue, key=0, style=bold];
m3_332 -> m3_333  [key=0, style=solid];
m3_333 -> m3_334  [key=0, style=solid];
m3_333 -> m3_325  [key=2, style=dotted];
m3_334 -> m3_332  [color=blue, key=0, style=bold];
m3_340 -> m3_341  [key=0, style=solid];
m3_341 -> m3_342  [key=0, style=solid];
m3_341 -> m3_9  [key=2, style=dotted];
m3_341 -> m3_10  [key=2, style=dotted];
m3_341 -> m3_343  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_342 -> m3_340  [color=blue, key=0, style=bold];
m3_343 -> m3_344  [key=0, style=solid];
m3_344 -> m3_345  [key=0, style=solid];
m3_344 -> m3_346  [key=2, style=dotted];
m3_345 -> m3_343  [color=blue, key=0, style=bold];
m3_351 -> m3_352  [key=0, style=solid];
m3_352 -> m3_353  [key=0, style=solid];
m3_352 -> m3_9  [key=2, style=dotted];
m3_352 -> m3_10  [key=2, style=dotted];
m3_352 -> m3_354  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_353 -> m3_351  [color=blue, key=0, style=bold];
m3_354 -> m3_355  [key=0, style=solid];
m3_355 -> m3_356  [key=0, style=solid];
m3_355 -> m3_357  [key=2, style=dotted];
m3_356 -> m3_354  [color=blue, key=0, style=bold];
m3_362 -> m3_363  [key=0, style=solid];
m3_363 -> m3_364  [key=0, style=solid];
m3_363 -> m3_9  [key=2, style=dotted];
m3_363 -> m3_10  [key=2, style=dotted];
m3_363 -> m3_365  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_364 -> m3_362  [color=blue, key=0, style=bold];
m3_365 -> m3_366  [key=0, style=solid];
m3_366 -> m3_367  [key=0, style=solid];
m3_366 -> m3_368  [key=2, style=dotted];
m3_367 -> m3_365  [color=blue, key=0, style=bold];
m3_380 -> m3_381  [color=red, key=0, style=solid];
m3_375 -> m3_376  [key=0, style=solid];
m3_379 -> m3_380  [color=red, key=0, style=solid];
m3_376 -> m3_377  [key=0, style=solid];
m3_376 -> m3_378  [key=2, style=dotted];
m3_377 -> m3_375  [color=blue, key=0, style=bold];
m3_381 -> m3_379  [color=blue, key=0, style=bold];
m3_390 -> m3_391  [color=red, key=0, style=solid];
m3_386 -> m3_387  [key=0, style=solid];
m3_389 -> m3_390  [color=red, key=0, style=solid];
m3_387 -> m3_388  [key=0, style=solid];
m3_387 -> m3_6  [key=2, style=dotted];
m3_388 -> m3_386  [color=blue, key=0, style=bold];
m3_391 -> m3_389  [color=blue, key=0, style=bold];
m3_396 -> m3_397  [key=0, style=solid];
m3_397 -> m3_398  [key=0, style=solid];
m3_397 -> m3_399  [key=2, style=dotted];
m3_398 -> m3_396  [color=blue, key=0, style=bold];
m3_404 -> m3_405  [key=0, style=solid];
m3_405 -> m3_406  [key=0, style=solid];
m3_405 -> m3_283  [key=2, style=dotted];
m3_406 -> m3_404  [color=blue, key=0, style=bold];
m3_411 -> m3_412  [key=0, style=solid];
m3_412 -> m3_413  [key=0, style=solid];
m3_412 -> m3_414  [key=2, style=dotted];
m3_413 -> m3_411  [color=blue, key=0, style=bold];
m3_421 -> m3_422  [key=0, style=solid];
m3_421 -> m3_6  [key=2, style=dotted];
m3_422 -> m3_420  [color=blue, key=0, style=bold];
m3_382 -> m3_383  [key=0, style=solid];
m3_382 -> m3_384  [color=red, key=1, label=int, style=dashed];
m3_382 -> m3_390  [color=red, key=1, label=int, style=dashed];
m3_383 -> m3_384  [color=red, key=0, style=solid];
m3_383 -> m3_9  [key=2, style=dotted];
m3_383 -> m3_10  [key=2, style=dotted];
m3_383 -> m3_386  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_384 -> m3_385  [color=red, key=0, style=solid];
m3_384 -> m3_373  [color=red, key=2, style=dotted];
m3_384 -> m3_374  [color=red, key=2, style=dotted];
m3_384 -> m3_389  [color=red, key=1, label="lambda expression", style=dashed];
m3_385 -> m3_382  [color=blue, key=0, style=bold];
m3_48 -> m3_49  [key=0, style=solid];
m3_48 -> m3_50  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m3_49 -> m3_50  [key=0, style=solid];
m3_49 -> m3_9  [key=2, style=dotted];
m3_49 -> m3_10  [key=2, style=dotted];
m3_49 -> m3_52  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_50 -> m3_51  [key=0, style=solid];
m3_50 -> m3_36  [key=2, style=dotted];
m3_50 -> m3_12  [key=2, style=dotted];
m3_51 -> m3_48  [color=blue, key=0, style=bold];
m3_119 -> m3_120  [key=0, style=solid];
m3_120 -> m3_121  [key=0, style=solid];
m3_120 -> m3_115  [key=2, style=dotted];
m3_120 -> m3_70  [key=2, style=dotted];
m3_120 -> m3_122  [color=red, key=1, label=expectedResult, style=dashed];
m3_121 -> m3_122  [color=red, key=0, style=solid];
m3_121 -> m3_9  [key=2, style=dotted];
m3_121 -> m3_10  [key=2, style=dotted];
m3_121 -> m3_124  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_122 -> m3_123  [color=red, key=0, style=solid];
m3_122 -> m3_36  [color=red, key=2, style=dotted];
m3_122 -> m3_12  [color=red, key=2, style=dotted];
m3_123 -> m3_119  [color=blue, key=0, style=bold];
m3_24 -> m3_25  [key=0, style=solid];
m3_24 -> m3_26  [color=darkseagreen4, key=1, label=double, style=dashed];
m3_25 -> m3_26  [key=0, style=solid];
m3_25 -> m3_9  [key=2, style=dotted];
m3_25 -> m3_10  [key=2, style=dotted];
m3_25 -> m3_28  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_26 -> m3_27  [key=0, style=solid];
m3_26 -> m3_20  [key=2, style=dotted];
m3_27 -> m3_24  [color=blue, key=0, style=bold];
m3_275 -> m3_276  [key=0, style=solid];
m3_276 -> m3_277  [key=0, style=solid];
m3_276 -> m3_221  [key=2, style=dotted];
m3_276 -> m3_278  [color=red, key=1, label=expectedResult, style=dashed];
m3_277 -> m3_278  [color=red, key=0, style=solid];
m3_277 -> m3_9  [key=2, style=dotted];
m3_277 -> m3_10  [key=2, style=dotted];
m3_277 -> m3_280  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_278 -> m3_279  [color=red, key=0, style=solid];
m3_278 -> m3_36  [color=red, key=2, style=dotted];
m3_278 -> m3_12  [color=red, key=2, style=dotted];
m3_279 -> m3_275  [color=blue, key=0, style=bold];
m3_234 -> m3_235  [key=0, style=solid];
m3_235 -> m3_236  [key=0, style=solid];
m3_235 -> m3_79  [key=2, style=dotted];
m3_235 -> m3_70  [key=2, style=dotted];
m3_235 -> m3_237  [color=red, key=1, label=expectedResult, style=dashed];
m3_236 -> m3_237  [color=red, key=0, style=solid];
m3_236 -> m3_9  [key=2, style=dotted];
m3_236 -> m3_10  [key=2, style=dotted];
m3_236 -> m3_239  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_237 -> m3_238  [color=red, key=0, style=solid];
m3_237 -> m3_36  [color=red, key=2, style=dotted];
m3_237 -> m3_12  [color=red, key=2, style=dotted];
m3_238 -> m3_234  [color=blue, key=0, style=bold];
m3_0 -> m3_1  [key=0, style=solid];
m3_1 -> m3_2  [color=red, key=0, style=solid];
m3_1 -> m3_6  [key=2, style=dotted];
m3_1 -> m3_3  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m3_1 -> m3_14  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m3_2 -> m3_3  [color=red, key=0, style=solid];
m3_2 -> m3_7  [color=red, key=2, style=dotted];
m3_2 -> m3_8  [color=red, key=2, style=dotted];
m3_2 -> m3_4  [color=red, key=1, label=expectedResult, style=dashed];
m3_3 -> m3_4  [key=0, style=solid];
m3_3 -> m3_9  [key=2, style=dotted];
m3_3 -> m3_10  [key=2, style=dotted];
m3_3 -> m3_13  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_4 -> m3_5  [key=0, style=solid];
m3_4 -> m3_11  [key=2, style=dotted];
m3_4 -> m3_12  [key=2, style=dotted];
m3_5 -> m3_0  [color=blue, key=0, style=bold];
m3_225 -> m3_226  [key=0, style=solid];
m3_226 -> m3_227  [key=0, style=solid];
m3_226 -> m3_221  [key=2, style=dotted];
m3_226 -> m3_70  [key=2, style=dotted];
m3_226 -> m3_228  [color=red, key=1, label=expectedResult, style=dashed];
m3_227 -> m3_228  [color=red, key=0, style=solid];
m3_227 -> m3_9  [key=2, style=dotted];
m3_227 -> m3_10  [key=2, style=dotted];
m3_227 -> m3_230  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_228 -> m3_229  [color=red, key=0, style=solid];
m3_228 -> m3_36  [color=red, key=2, style=dotted];
m3_228 -> m3_12  [color=red, key=2, style=dotted];
m3_229 -> m3_225  [color=blue, key=0, style=bold];
m3_216 -> m3_217  [key=0, style=solid];
m3_217 -> m3_218  [key=0, style=solid];
m3_217 -> m3_221  [key=2, style=dotted];
m3_217 -> m3_70  [key=2, style=dotted];
m3_217 -> m3_219  [color=red, key=1, label=expectedResult, style=dashed];
m3_218 -> m3_219  [color=red, key=0, style=solid];
m3_218 -> m3_9  [key=2, style=dotted];
m3_218 -> m3_10  [key=2, style=dotted];
m3_218 -> m3_222  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_219 -> m3_220  [color=red, key=0, style=solid];
m3_219 -> m3_36  [color=red, key=2, style=dotted];
m3_219 -> m3_12  [color=red, key=2, style=dotted];
m3_220 -> m3_216  [color=blue, key=0, style=bold];
m3_127 -> m3_128  [key=0, style=solid];
m3_128 -> m3_129  [key=0, style=solid];
m3_128 -> m3_115  [key=2, style=dotted];
m3_128 -> m3_70  [key=2, style=dotted];
m3_128 -> m3_130  [color=red, key=1, label=expectedResult, style=dashed];
m3_129 -> m3_130  [color=red, key=0, style=solid];
m3_129 -> m3_9  [key=2, style=dotted];
m3_129 -> m3_10  [key=2, style=dotted];
m3_129 -> m3_132  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_130 -> m3_131  [color=red, key=0, style=solid];
m3_130 -> m3_36  [color=red, key=2, style=dotted];
m3_130 -> m3_12  [color=red, key=2, style=dotted];
m3_131 -> m3_127  [color=blue, key=0, style=bold];
m3_400 -> m3_401  [key=0, style=solid];
m3_400 -> m3_402  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue", style=dashed];
m3_401 -> m3_402  [key=0, style=solid];
m3_401 -> m3_9  [key=2, style=dotted];
m3_401 -> m3_10  [key=2, style=dotted];
m3_401 -> m3_404  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_402 -> m3_403  [key=0, style=solid];
m3_402 -> m3_105  [key=2, style=dotted];
m3_403 -> m3_400  [color=blue, key=0, style=bold];
m3_84 -> m3_85  [key=0, style=solid];
m3_85 -> m3_86  [key=0, style=solid];
m3_85 -> m3_79  [key=2, style=dotted];
m3_85 -> m3_70  [key=2, style=dotted];
m3_85 -> m3_87  [color=red, key=1, label=expectedResult, style=dashed];
m3_86 -> m3_87  [color=red, key=0, style=solid];
m3_86 -> m3_9  [key=2, style=dotted];
m3_86 -> m3_10  [key=2, style=dotted];
m3_86 -> m3_89  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_87 -> m3_88  [color=red, key=0, style=solid];
m3_87 -> m3_36  [color=red, key=2, style=dotted];
m3_87 -> m3_12  [color=red, key=2, style=dotted];
m3_88 -> m3_84  [color=blue, key=0, style=bold];
m3_64 -> m3_65  [key=0, style=solid];
m3_65 -> m3_66  [key=0, style=solid];
m3_65 -> m3_69  [key=2, style=dotted];
m3_65 -> m3_70  [key=2, style=dotted];
m3_65 -> m3_67  [color=red, key=1, label=expectedResult, style=dashed];
m3_66 -> m3_67  [color=red, key=0, style=solid];
m3_66 -> m3_9  [key=2, style=dotted];
m3_66 -> m3_10  [key=2, style=dotted];
m3_66 -> m3_71  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_67 -> m3_68  [color=red, key=0, style=solid];
m3_67 -> m3_36  [color=red, key=2, style=dotted];
m3_67 -> m3_12  [color=red, key=2, style=dotted];
m3_68 -> m3_64  [color=blue, key=0, style=bold];
m3_135 -> m3_136  [key=0, style=solid];
m3_136 -> m3_137  [key=0, style=solid];
m3_136 -> m3_140  [key=2, style=dotted];
m3_136 -> m3_138  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m3_137 -> m3_138  [key=0, style=solid];
m3_137 -> m3_9  [key=2, style=dotted];
m3_137 -> m3_10  [key=2, style=dotted];
m3_137 -> m3_141  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_138 -> m3_139  [key=0, style=solid];
m3_138 -> m3_105  [key=2, style=dotted];
m3_139 -> m3_135  [color=blue, key=0, style=bold];
m3_16 -> m3_17  [key=0, style=solid];
m3_16 -> m3_18  [color=darkseagreen4, key=1, label=long, style=dashed];
m3_17 -> m3_18  [key=0, style=solid];
m3_17 -> m3_9  [key=2, style=dotted];
m3_17 -> m3_10  [key=2, style=dotted];
m3_17 -> m3_21  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_18 -> m3_19  [key=0, style=solid];
m3_18 -> m3_20  [key=2, style=dotted];
m3_19 -> m3_16  [color=blue, key=0, style=bold];
m3_326 -> m3_327  [key=0, style=solid];
m3_326 -> m3_329  [color=darkseagreen4, key=1, label=int, style=dashed];
m3_326 -> m3_330  [color=darkseagreen4, key=1, label=bool, style=dashed];
m3_327 -> m3_328  [key=0, style=solid];
m3_327 -> m3_9  [key=2, style=dotted];
m3_327 -> m3_10  [key=2, style=dotted];
m3_327 -> m3_332  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_327 -> m3_329  [color=darkseagreen4, key=1, label=result, style=dashed];
m3_327 -> m3_330  [color=darkseagreen4, key=1, label=result, style=dashed];
m3_329 -> m3_330  [key=0, style=solid];
m3_329 -> m3_105  [key=2, style=dotted];
m3_330 -> m3_331  [key=0, style=solid];
m3_330 -> m3_321  [key=2, style=dotted];
m3_330 -> m3_105  [key=2, style=dotted];
m3_328 -> m3_329  [key=0, style=solid];
m3_328 -> m3_330  [key=0, style=solid];
m3_331 -> m3_326  [color=blue, key=0, style=bold];
m3_415 -> m3_416  [key=0, style=solid];
m3_416 -> m3_417  [key=0, style=solid];
m3_416 -> m3_6  [key=2, style=dotted];
m3_416 -> m3_418  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m3_417 -> m3_418  [key=0, style=solid];
m3_417 -> m3_9  [key=2, style=dotted];
m3_417 -> m3_10  [key=2, style=dotted];
m3_417 -> m3_420  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_418 -> m3_419  [key=0, style=solid];
m3_418 -> m3_105  [key=2, style=dotted];
m3_419 -> m3_415  [color=blue, key=0, style=bold];
m3_160 -> m3_161  [key=0, style=solid];
m3_160 -> m3_162  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m3_161 -> m3_162  [key=0, style=solid];
m3_161 -> m3_9  [key=2, style=dotted];
m3_161 -> m3_10  [key=2, style=dotted];
m3_161 -> m3_164  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_162 -> m3_163  [key=0, style=solid];
m3_162 -> m3_105  [key=2, style=dotted];
m3_163 -> m3_160  [color=blue, key=0, style=bold];
m3_300 -> m3_301  [key=0, style=solid];
m3_300 -> m3_302  [color=darkseagreen4, key=1, label="int?", style=dashed];
m3_301 -> m3_302  [key=0, style=solid];
m3_301 -> m3_9  [key=2, style=dotted];
m3_301 -> m3_10  [key=2, style=dotted];
m3_301 -> m3_304  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_302 -> m3_303  [key=0, style=solid];
m3_302 -> m3_105  [key=2, style=dotted];
m3_303 -> m3_300  [color=blue, key=0, style=bold];
m3_242 -> m3_243  [key=0, style=solid];
m3_243 -> m3_244  [key=0, style=solid];
m3_243 -> m3_247  [key=2, style=dotted];
m3_243 -> m3_245  [color=red, key=1, label=expectedResult, style=dashed];
m3_244 -> m3_245  [color=red, key=0, style=solid];
m3_244 -> m3_9  [key=2, style=dotted];
m3_244 -> m3_10  [key=2, style=dotted];
m3_244 -> m3_248  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_245 -> m3_246  [color=red, key=0, style=solid];
m3_245 -> m3_36  [color=red, key=2, style=dotted];
m3_245 -> m3_12  [color=red, key=2, style=dotted];
m3_246 -> m3_242  [color=blue, key=0, style=bold];
m3_208 -> m3_209  [key=0, style=solid];
m3_209 -> m3_210  [key=0, style=solid];
m3_209 -> m3_204  [key=2, style=dotted];
m3_209 -> m3_211  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m3_210 -> m3_211  [key=0, style=solid];
m3_210 -> m3_9  [key=2, style=dotted];
m3_210 -> m3_10  [key=2, style=dotted];
m3_210 -> m3_213  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_211 -> m3_212  [key=0, style=solid];
m3_211 -> m3_105  [key=2, style=dotted];
m3_212 -> m3_208  [color=blue, key=0, style=bold];
m3_291 -> m3_292  [key=0, style=solid];
m3_292 -> m3_293  [key=0, style=solid];
m3_292 -> m3_79  [key=2, style=dotted];
m3_292 -> m3_294  [color=red, key=1, label=expectedResult, style=dashed];
m3_293 -> m3_294  [color=red, key=0, style=solid];
m3_293 -> m3_9  [key=2, style=dotted];
m3_293 -> m3_10  [key=2, style=dotted];
m3_293 -> m3_296  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_294 -> m3_295  [color=red, key=0, style=solid];
m3_294 -> m3_36  [color=red, key=2, style=dotted];
m3_294 -> m3_12  [color=red, key=2, style=dotted];
m3_295 -> m3_291  [color=blue, key=0, style=bold];
m3_101 -> m3_102  [key=0, style=solid];
m3_101 -> m3_103  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
m3_102 -> m3_103  [key=0, style=solid];
m3_102 -> m3_9  [key=2, style=dotted];
m3_102 -> m3_10  [key=2, style=dotted];
m3_102 -> m3_106  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_103 -> m3_104  [key=0, style=solid];
m3_103 -> m3_105  [key=2, style=dotted];
m3_103 -> m3_103  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
m3_104 -> m3_101  [color=blue, key=0, style=bold];
m3_423 -> m3_424  [key=0, style=solid];
m3_423 -> m3_425  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeImmutableOptions", style=dashed];
m3_424 -> m3_425  [key=0, style=solid];
m3_424 -> m3_427  [key=2, style=dotted];
m3_424 -> m3_10  [key=2, style=dotted];
m3_425 -> m3_426  [key=0, style=solid];
m3_425 -> m3_105  [key=2, style=dotted];
m3_426 -> m3_423  [color=blue, key=0, style=bold];
m3_284 -> m3_285  [key=0, style=solid];
m3_284 -> m3_286  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_285 -> m3_286  [key=0, style=solid];
m3_285 -> m3_9  [key=2, style=dotted];
m3_285 -> m3_10  [key=2, style=dotted];
m3_285 -> m3_288  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_286 -> m3_287  [key=0, style=solid];
m3_286 -> m3_105  [key=2, style=dotted];
m3_287 -> m3_284  [color=blue, key=0, style=bold];
m3_199 -> m3_200  [key=0, style=solid];
m3_200 -> m3_201  [key=0, style=solid];
m3_200 -> m3_204  [key=2, style=dotted];
m3_200 -> m3_202  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m3_201 -> m3_202  [key=0, style=solid];
m3_201 -> m3_9  [key=2, style=dotted];
m3_201 -> m3_10  [key=2, style=dotted];
m3_201 -> m3_205  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_202 -> m3_203  [key=0, style=solid];
m3_202 -> m3_105  [key=2, style=dotted];
m3_203 -> m3_199  [color=blue, key=0, style=bold];
m3_347 -> m3_348  [key=0, style=solid];
m3_348 -> m3_349  [key=0, style=solid];
m3_348 -> m3_348  [color=darkorchid, key=3, label="Local variable System.Action test", style=bold];
m3_349 -> m3_350  [key=0, style=solid];
m3_349 -> m3_339  [key=2, style=dotted];
m3_350 -> m3_347  [color=blue, key=0, style=bold];
m3_189 -> m3_190  [key=0, style=solid];
m3_190 -> m3_191  [key=0, style=solid];
m3_190 -> m3_194  [key=2, style=dotted];
m3_190 -> m3_70  [key=2, style=dotted];
m3_190 -> m3_192  [color=red, key=1, label=expectedResult, style=dashed];
m3_191 -> m3_192  [color=red, key=0, style=solid];
m3_191 -> m3_9  [key=2, style=dotted];
m3_191 -> m3_10  [key=2, style=dotted];
m3_191 -> m3_195  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_192 -> m3_193  [color=red, key=0, style=solid];
m3_192 -> m3_36  [color=red, key=2, style=dotted];
m3_192 -> m3_12  [color=red, key=2, style=dotted];
m3_193 -> m3_189  [color=blue, key=0, style=bold];
m3_428 -> m3_14  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m3_429 -> m3_182  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m3_429 -> m3_186  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m3_430 -> m3_380  [color=red, key=1, label=int, style=dashed];
m3_431 -> m3_390  [color=red, key=1, label=int, style=dashed];
m5_0 -> m5_1  [key=0, style=solid];
m5_1 -> m5_2  [key=0, style=solid];
m5_1 -> m5_3  [key=2, style=dotted];
m5_2 -> m5_0  [color=blue, key=0, style=bold];
m7_10 -> m7_11  [color=green, key=0, style=solid];
m7_10 -> m7_0  [color=green, key=2, style=dotted];
m7_10 -> m7_12  [color=green, key=2, style=dotted];
m7_10 -> m7_13  [color=green, key=2, style=dotted];
m7_10 -> m7_14  [color=green, key=2, style=dotted];
m7_10 -> m7_15  [color=green, key=2, style=dotted];
m7_5 -> m7_6  [key=0, style=solid];
m7_6 -> m7_7  [key=0, style=solid];
m7_16 -> m7_1  [color=darkseagreen4, key=1, label="CommandLine.Core.OptionSpecification", style=dashed];
m7_16 -> m7_2  [color=darkseagreen4, key=1, label="CommandLine.Core.OptionSpecification", style=dashed];
m7_16 -> m7_3  [color=darkseagreen4, key=1, label="CommandLine.Core.OptionSpecification", style=dashed];
m7_16 -> m7_4  [color=darkseagreen4, key=1, label="CommandLine.Core.OptionSpecification", style=dashed];
m7_16 -> m7_5  [color=darkseagreen4, key=1, label="CommandLine.Core.OptionSpecification", style=dashed];
m7_16 -> m7_6  [color=darkseagreen4, key=1, label="CommandLine.Core.OptionSpecification", style=dashed];
m7_16 -> m7_7  [color=darkseagreen4, key=1, label="CommandLine.Core.OptionSpecification", style=dashed];
m7_4 -> m7_5  [key=0, style=solid];
m7_11 -> m7_9  [color=blue, key=0, style=bold];
m7_7 -> m7_8  [key=0, style=solid];
m7_8 -> m7_0  [color=blue, key=0, style=bold];
m7_9 -> m7_10  [color=green, key=0, style=solid];
m7_0 -> m7_1  [key=0, style=solid];
m7_0 -> m7_2  [color=darkseagreen4, key=1, label=string, style=dashed];
m7_0 -> m7_3  [color=darkseagreen4, key=1, label=char, style=dashed];
m7_0 -> m7_4  [color=darkseagreen4, key=1, label=string, style=dashed];
m7_0 -> m7_5  [color=darkseagreen4, key=1, label=string, style=dashed];
m7_0 -> m7_6  [color=darkseagreen4, key=1, label=string, style=dashed];
m7_0 -> m7_7  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m7_1 -> m7_2  [key=0, style=solid];
m7_2 -> m7_3  [key=0, style=solid];
m7_3 -> m7_4  [key=0, style=solid];
m7_82 -> m7_5  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m7_82 -> m7_12  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m7_82 -> m7_6  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m7_82 -> m7_16  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m7_83 -> m7_12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m7_83 -> m7_16  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m7_84 -> m7_40  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m7_85 -> m7_40  [color=darkseagreen4, key=1, label=firstArg, style=dashed];
m7_86 -> m7_53  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m7_86 -> m7_56  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m7_86 -> m7_61  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m7_87 -> m7_53  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m7_87 -> m7_56  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m7_87 -> m7_61  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m7_88 -> m7_56  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>", style=dashed];
m7_89 -> m7_73  [color=darkseagreen4, key=1, label=string, style=dashed];
m7_90 -> m7_73  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m8_19 -> m8_20  [key=0, style=solid];
m8_20 -> m8_21  [key=0, style=solid];
m8_20 -> m8_22  [key=2, style=dotted];
m8_21 -> m8_19  [color=blue, key=0, style=bold];
m8_6 -> m8_7  [key=0, style=solid];
m8_7 -> m8_6  [color=blue, key=0, style=bold];
m8_0 -> m8_1  [key=0, style=solid];
m8_1 -> m8_0  [color=blue, key=0, style=bold];
m8_22 -> m8_28  [key=0, style=solid];
m8_22 -> m8_30  [color=darkseagreen4, key=1, label=bool, style=dashed];
m8_28 -> m8_29  [key=0, style=solid];
m8_28 -> m8_30  [key=0, style=solid];
m8_30 -> m8_31  [key=0, style=solid];
m8_30 -> m8_35  [key=0, style=solid];
m8_29 -> m8_35  [key=0, style=solid];
m8_31 -> m8_32  [key=0, style=solid];
m8_31 -> m8_34  [key=0, style=solid];
m8_32 -> m8_33  [color=red, key=0, style=solid];
m8_32 -> m8_36  [key=2, style=dotted];
m8_34 -> m8_35  [key=0, style=solid];
m8_33 -> m8_34  [color=red, key=0, style=solid];
m8_35 -> m8_22  [color=blue, key=0, style=bold];
m8_2 -> m8_3  [key=0, style=solid];
m8_3 -> m8_2  [color=blue, key=0, style=bold];
m8_12 -> m8_13  [key=0, style=solid];
m8_12 -> m8_14  [color=darkseagreen4, key=1, label=bool, style=dashed];
m8_12 -> m8_15  [color=darkseagreen4, key=1, label="System.IO.TextWriter", style=dashed];
m8_12 -> m8_16  [color=darkseagreen4, key=1, label=bool, style=dashed];
m8_13 -> m8_14  [key=0, style=solid];
m8_14 -> m8_15  [key=0, style=solid];
m8_15 -> m8_16  [key=0, style=solid];
m8_16 -> m8_17  [key=0, style=solid];
m8_17 -> m8_18  [key=0, style=solid];
m8_18 -> m8_12  [color=blue, key=0, style=bold];
m8_8 -> m8_9  [key=0, style=solid];
m8_9 -> m8_8  [color=blue, key=0, style=bold];
m8_23 -> m8_24  [key=0, style=solid];
m8_24 -> m8_25  [key=0, style=solid];
m8_24 -> m8_22  [key=2, style=dotted];
m8_25 -> m8_26  [key=0, style=solid];
m8_25 -> m8_27  [key=2, style=dotted];
m8_26 -> m8_23  [color=blue, key=0, style=bold];
m8_4 -> m8_5  [key=0, style=solid];
m8_5 -> m8_4  [color=blue, key=0, style=bold];
m8_10 -> m8_11  [key=0, style=solid];
m8_11 -> m8_10  [color=blue, key=0, style=bold];
m8_37 -> m8_13  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m8_37 -> m8_14  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m8_37 -> m8_15  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m8_37 -> m8_16  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m8_37 -> m8_17  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m8_37 -> m8_20  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m8_37 -> m8_24  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m8_37 -> m8_25  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m8_37 -> m8_28  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m8_37 -> m8_31  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m8_37 -> m8_32  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m8_37 -> m8_33  [color=red, key=1, label="CommandLine.ParserSettings", style=dashed];
m8_37 -> m8_34  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m9_32 -> m9_81  [key=0, style=solid];
m9_32 -> m9_33  [key=0, style=solid];
m9_32 -> m9_34  [key=2, style=dotted];
m9_32 -> m9_35  [key=2, style=dotted];
m9_32 -> m9_25  [key=2, style=dotted];
m9_81 -> m9_82  [key=0, style=solid];
m9_81 -> m9_83  [key=2, style=dotted];
m9_81 -> m9_84  [key=2, style=dotted];
m9_82 -> m9_32  [color=blue, key=0, style=bold];
m9_30 -> m9_31  [color=red, key=0, style=solid];
m9_30 -> m9_32  [color=red, key=0, style=solid];
m9_18 -> m9_19  [key=0, style=solid];
m9_18 -> m9_22  [color=darkseagreen4, key=1, label=object, style=dashed];
m9_19 -> m9_20  [key=0, style=solid];
m9_19 -> m9_21  [color=red, key=1, label=other, style=dashed];
m9_19 -> m9_30  [key=2, style=dotted];
m9_22 -> m9_23  [color=green, key=0, style=solid];
m9_22 -> m9_25  [key=2, style=dotted];
m9_22 -> m9_42  [color=green, key=1, label=string, style=dashed];
m9_22 -> m9_24  [color=green, key=1, label=preprocCompare, style=dashed];
m9_22 -> m9_26  [color=green, key=1, label=preprocCompare, style=dashed];
m9_20 -> m9_21  [color=red, key=0, style=solid];
m9_20 -> m9_22  [key=0, style=solid];
m9_20 -> m9_29  [key=0, style=solid];
m9_20 -> m9_32  [key=2, style=dotted];
m9_20 -> m9_31  [key=2, style=dotted];
m9_21 -> m9_23  [color=red, key=0, style=solid];
m9_21 -> m9_24  [color=red, key=2, style=dotted];
m9_21 -> m9_22  [color=green, key=0, style=solid];
m9_21 -> m9_42  [color=green, key=1, label=firstArg, style=dashed];
m9_21 -> m9_33  [key=2, style=dotted];
m9_23 -> m9_18  [color=blue, key=0, style=bold];
m9_23 -> m9_24  [color=green, key=0, style=solid];
m9_23 -> m9_34  [color=green, key=2, style=dotted];
m9_23 -> m9_25  [color=green, key=1, label=verbs, style=dashed];
m9_23 -> m9_28  [color=green, key=1, label=verbs, style=dashed];
m9_0 -> m9_1  [color=green, key=0, style=solid];
m9_0 -> m9_3  [color=red, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>", style=dashed];
m9_0 -> m9_5  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m9_0 -> m9_7  [color=darkseagreen4, key=1, label=string, style=dashed];
m9_0 -> m9_8  [color=red, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>", style=dashed];
m9_0 -> m9_9  [color=darkseagreen4, key=1, label=object, style=dashed];
m9_0 -> m9_6  [color=green, key=1, label="System.StringComparer", style=dashed];
m9_0 -> m9_16  [color=green, key=1, label="System.StringComparer", style=dashed];
m9_0 -> m9_12  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m9_1 -> m9_2  [color=green, key=0, style=solid];
m9_1 -> m9_3  [color=red, key=0, style=solid];
m9_1 -> m9_11  [color=red, key=2, style=dotted];
m9_1 -> m9_4  [color=green, key=1, label="lambda expression", style=dashed];
m9_3 -> m9_4  [color=red, key=0, style=solid];
m9_3 -> m9_5  [color=red, key=0, style=solid];
m9_3 -> m9_22  [color=green, key=1, label="System.StringComparer", style=dashed];
m9_3 -> m9_42  [color=green, key=1, label="System.StringComparer", style=dashed];
m9_3 -> m9_23  [color=green, key=1, label="System.Collections.Generic.IEnumerable<System.Type>", style=dashed];
m9_3 -> m9_25  [color=green, key=1, label="System.Collections.Generic.IEnumerable<System.Type>", style=dashed];
m9_3 -> m9_27  [color=green, key=1, label="System.Collections.Generic.IEnumerable<System.Type>", style=dashed];
m9_3 -> m9_28  [color=green, key=1, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>", style=dashed];
m9_3 -> m9_19  [key=0, style=solid];
m9_3 -> m9_20  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Type>", style=dashed];
m9_3 -> m9_21  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m9_5 -> m9_6  [color=green, key=0, style=solid];
m9_5 -> m9_7  [key=0, style=solid];
m9_5 -> m9_9  [key=2, style=dotted];
m9_5 -> m9_11  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_7 -> m9_8  [color=red, key=0, style=solid];
m9_8 -> m9_9  [color=red, key=0, style=solid];
m9_8 -> m9_4  [color=blue, key=0, style=bold];
m9_9 -> m9_10  [key=0, style=solid];
m9_2 -> m9_10  [color=red, key=0, style=solid];
m9_2 -> m9_12  [color=red, key=2, style=dotted];
m9_2 -> m9_0  [color=blue, key=0, style=bold];
m9_4 -> m9_10  [color=red, key=0, style=solid];
m9_4 -> m9_13  [color=red, key=2, style=dotted];
m9_4 -> m9_6  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m9_4 -> m9_16  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m9_4 -> m9_5  [key=0, style=solid];
m9_4 -> m9_12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m9_6 -> m9_10  [key=0, style=solid];
m9_6 -> m9_13  [key=2, style=dotted];
m9_6 -> m9_7  [color=green, key=0, style=solid];
m9_6 -> m9_15  [color=green, key=1, label="lambda expression", style=dashed];
m9_10 -> m9_0  [color=blue, key=0, style=bold];
m9_16 -> m9_17  [color=green, key=0, style=solid];
m9_16 -> m9_18  [color=green, key=2, style=dotted];
m9_17 -> m9_16  [color=blue, key=0, style=bold];
m9_17 -> m9_15  [color=blue, key=0, style=bold];
m9_24 -> m9_30  [color=red, key=0, style=solid];
m9_24 -> m9_32  [color=darkseagreen4, key=1, label="CommandLine.Text.Example", style=dashed];
m9_24 -> m9_25  [color=green, key=0, style=solid];
m9_24 -> m9_26  [color=green, key=0, style=solid];
m9_24 -> m9_35  [color=green, key=2, style=dotted];
m9_31 -> m9_33  [key=0, style=solid];
m9_33 -> m9_24  [color=blue, key=0, style=bold];
m9_26 -> m9_27  [color=green, key=0, style=solid];
m9_26 -> m9_28  [color=green, key=0, style=solid];
m9_26 -> m9_35  [color=green, key=2, style=dotted];
m9_27 -> m9_28  [key=0, style=solid];
m9_27 -> m9_29  [key=2, style=dotted];
m9_27 -> m9_39  [color=green, key=2, style=dotted];
m9_27 -> m9_32  [color=green, key=2, style=dotted];
m9_28 -> m9_26  [color=blue, key=0, style=bold];
m9_28 -> m9_29  [color=green, key=0, style=solid];
m9_28 -> m9_40  [color=green, key=2, style=dotted];
m9_25 -> m9_29  [color=green, key=0, style=solid];
m9_25 -> m9_36  [color=green, key=2, style=dotted];
m9_25 -> m9_37  [color=green, key=2, style=dotted];
m9_25 -> m9_38  [color=green, key=2, style=dotted];
m9_25 -> m9_32  [color=green, key=2, style=dotted];
m9_29 -> m9_3  [color=blue, key=0, style=bold];
m9_14 -> m9_15  [key=0, style=solid];
m9_36 -> m9_37  [color=red, key=0, style=solid];
m9_37 -> m9_38  [color=red, key=0, style=solid];
m9_37 -> m9_39  [color=red, key=2, style=dotted];
m9_37 -> m9_40  [color=red, key=2, style=dotted];
m9_38 -> m9_36  [color=blue, key=0, style=bold];
m9_38 -> m9_68  [color=green, key=0, style=solid];
m9_38 -> m9_75  [color=green, key=1, label=string, style=dashed];
m9_62 -> m9_63  [key=0, style=solid];
m9_15 -> m9_16  [color=green, key=0, style=solid];
m9_15 -> m9_14  [color=blue, key=0, style=bold];
m9_42 -> m9_43  [color=green, key=0, style=solid];
m9_42 -> m9_44  [color=green, key=2, style=dotted];
m9_42 -> m9_45  [color=green, key=2, style=dotted];
m9_41 -> m9_42  [color=green, key=0, style=solid];
m9_41 -> m9_7  [color=darkseagreen4, key=1, label="CommandLine.Text.Example", style=dashed];
m9_41 -> m9_8  [color=red, key=1, label="CommandLine.Text.Example", style=dashed];
m9_41 -> m9_9  [color=darkseagreen4, key=1, label="CommandLine.Text.Example", style=dashed];
m9_41 -> m9_21  [color=red, key=1, label="CommandLine.Text.Example", style=dashed];
m9_41 -> m9_22  [color=darkseagreen4, key=1, label="CommandLine.Text.Example", style=dashed];
m9_41 -> m9_27  [color=darkseagreen4, key=1, label="CommandLine.Text.Example", style=dashed];
m9_41 -> m9_32  [color=darkseagreen4, key=1, label="CommandLine.Text.Example", style=dashed];
m9_43 -> m9_41  [color=blue, key=0, style=bold];
m9_54 -> m9_55  [color=green, key=0, style=solid];
m9_57 -> m9_58  [key=0, style=solid];
m9_65 -> m9_66  [key=0, style=solid];
m9_55 -> m9_56  [color=green, key=0, style=solid];
m9_55 -> m9_33  [color=green, key=2, style=dotted];
m9_55 -> m9_44  [color=green, key=2, style=dotted];
m9_56 -> m9_54  [color=blue, key=0, style=bold];
m9_74 -> m9_75  [color=green, key=0, style=solid];
m9_77 -> m9_78  [color=green, key=0, style=solid];
m9_75 -> m9_76  [color=green, key=0, style=solid];
m9_75 -> m9_44  [color=green, key=2, style=dotted];
m9_76 -> m9_74  [color=blue, key=0, style=bold];
m9_78 -> m9_79  [color=green, key=0, style=solid];
m9_78 -> m9_80  [color=green, key=2, style=dotted];
m9_79 -> m9_77  [color=blue, key=0, style=bold];
m9_12 -> m9_13  [key=0, style=solid];
m9_12 -> m9_14  [key=2, style=dotted];
m9_11 -> m9_12  [key=0, style=solid];
m9_63 -> m9_44  [key=2, style=dotted];
m9_63 -> m9_33  [key=2, style=dotted];
m9_63 -> m9_64  [key=0, style=solid];
m9_58 -> m9_59  [key=0, style=solid];
m9_58 -> m9_60  [key=2, style=dotted];
m9_58 -> m9_61  [key=2, style=dotted];
m9_58 -> m9_62  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_59 -> m9_57  [color=blue, key=0, style=bold];
m9_67 -> m9_65  [color=blue, key=0, style=bold];
m9_66 -> m9_67  [key=0, style=solid];
m9_13 -> m9_11  [color=blue, key=0, style=bold];
m9_64 -> m9_62  [color=blue, key=0, style=bold];
m9_68 -> m9_69  [color=green, key=0, style=solid];
m9_68 -> m9_70  [color=green, key=2, style=dotted];
m9_68 -> m9_71  [color=green, key=2, style=dotted];
m9_68 -> m9_72  [color=green, key=2, style=dotted];
m9_68 -> m9_73  [color=green, key=2, style=dotted];
m9_68 -> m9_74  [color=green, key=1, label="lambda expression", style=dashed];
m9_68 -> m9_77  [color=green, key=1, label="lambda expression", style=dashed];
m9_69 -> m9_38  [color=blue, key=0, style=bold];
m9_40 -> m9_46  [color=green, key=0, style=solid];
m9_40 -> m9_55  [color=green, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m9_40 -> m9_58  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>", style=dashed];
m9_40 -> m9_63  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m9_46 -> m9_47  [color=green, key=0, style=solid];
m9_46 -> m9_48  [color=green, key=2, style=dotted];
m9_46 -> m9_49  [color=green, key=2, style=dotted];
m9_46 -> m9_36  [color=green, key=2, style=dotted];
m9_46 -> m9_50  [color=green, key=2, style=dotted];
m9_46 -> m9_51  [color=green, key=2, style=dotted];
m9_46 -> m9_52  [color=green, key=2, style=dotted];
m9_46 -> m9_33  [color=green, key=2, style=dotted];
m9_46 -> m9_53  [color=green, key=2, style=dotted];
m9_46 -> m9_54  [color=green, key=1, label="lambda expression", style=dashed];
m9_46 -> m9_57  [color=green, key=1, label="lambda expression", style=dashed];
m9_46 -> m9_65  [color=green, key=1, label="lambda expression", style=dashed];
m9_47 -> m9_40  [color=blue, key=0, style=bold];
m9_85 -> m9_6  [color=green, key=1, label="System.StringComparer", style=dashed];
m9_85 -> m9_16  [color=green, key=1, label="System.StringComparer", style=dashed];
m9_85 -> m9_5  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m9_85 -> m9_12  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m9_86 -> m9_16  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m9_86 -> m9_12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m9_87 -> m9_42  [color=green, key=1, label="System.StringComparer", style=dashed];
m9_88 -> m9_42  [color=green, key=1, label=firstArg, style=dashed];
m9_89 -> m9_55  [color=green, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m9_89 -> m9_58  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m9_89 -> m9_63  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m9_90 -> m9_55  [color=green, key=1, label="System.StringComparer", style=dashed];
m9_90 -> m9_58  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m9_90 -> m9_63  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m9_92 -> m9_75  [color=green, key=1, label=string, style=dashed];
m9_93 -> m9_75  [color=green, key=1, label="System.StringComparer", style=dashed];
m9_91 -> m9_58  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>", style=dashed];
m10_28 -> m10_77  [key=0, style=solid];
m10_28 -> m10_46  [color=darkorchid, key=3, label="Parameter variable System.Collections.Generic.IEnumerable<System.Type> types", style=bold];
m10_28 -> m10_34  [color=darkorchid, key=3, label="Parameter variable CommandLine.Error[] errors", style=bold];
m10_77 -> m10_78  [key=0, style=solid];
m10_77 -> m10_79  [key=2, style=dotted];
m10_78 -> m10_28  [color=blue, key=0, style=bold];
m10_36 -> m10_42  [color=red, key=0, style=solid];
m10_36 -> m10_51  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m10_36 -> m10_54  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>", style=dashed];
m10_36 -> m10_59  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m10_42 -> m10_43  [color=red, key=0, style=solid];
m10_42 -> m10_44  [color=red, key=2, style=dotted];
m10_42 -> m10_45  [color=red, key=2, style=dotted];
m10_42 -> m10_32  [color=red, key=2, style=dotted];
m10_42 -> m10_46  [color=red, key=2, style=dotted];
m10_42 -> m10_47  [color=red, key=2, style=dotted];
m10_42 -> m10_48  [color=red, key=2, style=dotted];
m10_42 -> m10_29  [color=red, key=2, style=dotted];
m10_42 -> m10_49  [color=red, key=2, style=dotted];
m10_42 -> m10_50  [color=red, key=1, label="lambda expression", style=dashed];
m10_42 -> m10_53  [color=red, key=1, label="lambda expression", style=dashed];
m10_42 -> m10_61  [color=red, key=1, label="lambda expression", style=dashed];
m10_43 -> m10_36  [color=blue, key=0, style=bold];
m10_73 -> m10_74  [key=0, style=solid];
m10_5 -> m10_6  [key=0, style=solid];
m10_5 -> m10_9  [key=2, style=dotted];
m10_5 -> m10_11  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_12 -> m10_13  [key=0, style=solid];
m10_12 -> m10_14  [key=2, style=dotted];
m10_6 -> m10_7  [key=0, style=solid];
m10_6 -> m10_10  [key=2, style=dotted];
m10_6 -> m10_15  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_16 -> m10_17  [key=0, style=solid];
m10_16 -> m10_18  [key=2, style=dotted];
m10_4 -> m10_5  [key=0, style=solid];
m10_4 -> m10_12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m10_4 -> m10_6  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m10_4 -> m10_16  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m10_11 -> m10_12  [key=0, style=solid];
m10_7 -> m10_8  [key=0, style=solid];
m10_15 -> m10_16  [key=0, style=solid];
m10_8 -> m10_4  [color=blue, key=0, style=bold];
m10_13 -> m10_11  [color=blue, key=0, style=bold];
m10_17 -> m10_15  [color=blue, key=0, style=bold];
m10_38 -> m10_39  [key=0, style=solid];
m10_38 -> m10_40  [key=2, style=dotted];
m10_38 -> m10_41  [key=2, style=dotted];
m10_37 -> m10_38  [key=0, style=solid];
m10_39 -> m10_37  [color=blue, key=0, style=bold];
m10_51 -> m10_52  [key=0, style=solid];
m10_51 -> m10_29  [key=2, style=dotted];
m10_51 -> m10_40  [key=2, style=dotted];
m10_54 -> m10_55  [key=0, style=solid];
m10_54 -> m10_56  [key=2, style=dotted];
m10_54 -> m10_57  [key=2, style=dotted];
m10_54 -> m10_58  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_59 -> m10_60  [key=0, style=solid];
m10_59 -> m10_29  [key=2, style=dotted];
m10_59 -> m10_40  [key=2, style=dotted];
m10_50 -> m10_51  [key=0, style=solid];
m10_53 -> m10_54  [key=0, style=solid];
m10_61 -> m10_62  [key=0, style=solid];
m10_52 -> m10_50  [color=blue, key=0, style=bold];
m10_55 -> m10_53  [color=blue, key=0, style=bold];
m10_58 -> m10_59  [key=0, style=solid];
m10_60 -> m10_58  [color=blue, key=0, style=bold];
m10_62 -> m10_63  [key=0, style=solid];
m10_63 -> m10_61  [color=blue, key=0, style=bold];
m10_71 -> m10_72  [key=0, style=solid];
m10_71 -> m10_40  [key=2, style=dotted];
m10_70 -> m10_71  [key=0, style=solid];
m10_72 -> m10_70  [color=blue, key=0, style=bold];
m10_74 -> m10_75  [key=0, style=solid];
m10_74 -> m10_76  [key=2, style=dotted];
m10_75 -> m10_73  [color=blue, key=0, style=bold];
m10_34 -> m10_64  [key=0, style=solid];
m10_34 -> m10_71  [color=darkseagreen4, key=1, label=string, style=dashed];
m10_64 -> m10_65  [key=0, style=solid];
m10_64 -> m10_66  [key=2, style=dotted];
m10_64 -> m10_67  [key=2, style=dotted];
m10_64 -> m10_68  [key=2, style=dotted];
m10_64 -> m10_69  [key=2, style=dotted];
m10_64 -> m10_70  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_64 -> m10_73  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_65 -> m10_34  [color=blue, key=0, style=bold];
m10_0 -> m10_1  [key=0, style=solid];
m10_0 -> m10_5  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m10_0 -> m10_12  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m10_0 -> m10_6  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m10_0 -> m10_16  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m10_0 -> m10_3  [color=darkorchid, key=3, label="method methodReturn CommandLine.ParserResult<object> Choose", style=bold];
m10_1 -> m10_2  [key=0, style=solid];
m10_1 -> m10_3  [key=2, style=dotted];
m10_1 -> m10_4  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_1 -> m10_1  [color=darkorchid, key=3, label="method methodReturn RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error> ", style=bold];
m10_2 -> m10_0  [color=blue, key=0, style=bold];
m10_3 -> m10_19  [key=0, style=solid];
m10_3 -> m10_20  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Type>", style=dashed];
m10_3 -> m10_21  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m10_3 -> m10_22  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m10_3 -> m10_38  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m10_3 -> m10_23  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Type>", style=dashed];
m10_3 -> m10_24  [color=darkseagreen4, key=1, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>", style=dashed];
m10_3 -> m10_28  [color=darkorchid, key=3, label="method methodReturn CommandLine.ParserResult<object> Choose", style=bold];
m10_19 -> m10_20  [key=0, style=solid];
m10_19 -> m10_21  [key=0, style=solid];
m10_19 -> m10_26  [key=2, style=dotted];
m10_20 -> m10_25  [key=0, style=solid];
m10_20 -> m10_27  [key=2, style=dotted];
m10_20 -> m10_28  [key=2, style=dotted];
m10_21 -> m10_22  [key=0, style=solid];
m10_21 -> m10_29  [key=2, style=dotted];
m10_21 -> m10_38  [color=darkseagreen4, key=1, label=firstArg, style=dashed];
m10_22 -> m10_23  [key=0, style=solid];
m10_22 -> m10_38  [color=darkseagreen4, key=1, label=string, style=dashed];
m10_22 -> m10_24  [color=darkseagreen4, key=1, label=preprocCompare, style=dashed];
m10_22 -> m10_22  [color=darkorchid, key=3, label="Local variable System.Func<string, bool> preprocCompare", style=bold];
m10_23 -> m10_24  [key=0, style=solid];
m10_23 -> m10_30  [key=2, style=dotted];
m10_24 -> m10_25  [key=0, style=solid];
m10_24 -> m10_31  [key=2, style=dotted];
m10_24 -> m10_32  [key=2, style=dotted];
m10_24 -> m10_33  [key=2, style=dotted];
m10_24 -> m10_34  [key=2, style=dotted];
m10_24 -> m10_28  [key=2, style=dotted];
m10_24 -> m10_35  [key=2, style=dotted];
m10_24 -> m10_36  [key=2, style=dotted];
m10_25 -> m10_3  [color=blue, key=0, style=bold];
m10_80 -> m10_5  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m10_80 -> m10_12  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m10_80 -> m10_6  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m10_80 -> m10_16  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m10_81 -> m10_12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m10_81 -> m10_16  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m10_82 -> m10_38  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m10_83 -> m10_38  [color=darkseagreen4, key=1, label=firstArg, style=dashed];
m10_84 -> m10_51  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m10_84 -> m10_54  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m10_84 -> m10_59  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m10_85 -> m10_51  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m10_85 -> m10_54  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m10_85 -> m10_59  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m10_86 -> m10_54  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>", style=dashed];
m10_87 -> m10_71  [color=darkseagreen4, key=1, label=string, style=dashed];
m10_88 -> m10_71  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m13_14 -> m13_18  [key=0, style=solid];
m13_14 -> m13_19  [color=darkseagreen4, key=1, label="System.Reflection.MethodInfo", style=dashed];
m13_18 -> m13_19  [key=0, style=solid];
m13_18 -> m13_20  [key=0, style=solid];
m13_18 -> m13_22  [key=2, style=dotted];
m13_19 -> m13_21  [key=0, style=solid];
m13_19 -> m13_22  [key=2, style=dotted];
m13_20 -> m13_21  [key=0, style=solid];
m13_21 -> m13_14  [color=blue, key=0, style=bold];
m13_0 -> m13_1  [key=0, style=solid];
m13_1 -> m13_2  [key=0, style=solid];
m13_2 -> m13_3  [key=0, style=solid];
m13_3 -> m13_4  [key=0, style=solid];
m13_4 -> m13_0  [color=blue, key=0, style=bold];
m13_7 -> m13_8  [color=green, key=0, style=solid];
m13_7 -> m13_12  [color=green, key=1, label=object, style=dashed];
m13_7 -> m13_9  [color=darkseagreen4, key=1, label="CommandLine.Internal.Pair<System.Reflection.MethodInfo, CommandLine.HelpVerbOptionAttribute>", style=dashed];
m13_8 -> m13_9  [color=green, key=0, style=solid];
m13_9 -> m13_12  [color=green, key=1, label=method, style=dashed];
m13_9 -> m13_10  [key=0, style=solid];
m13_9 -> m13_11  [color=darkseagreen4, key=1, label=method, style=dashed];
m13_12 -> m13_13  [color=green, key=0, style=solid];
m13_12 -> m13_17  [color=green, key=2, style=dotted];
m13_10 -> m13_12  [color=green, key=0, style=solid];
m13_10 -> m13_11  [key=0, style=solid];
m13_10 -> m13_14  [key=2, style=dotted];
m13_11 -> m13_13  [key=0, style=solid];
m13_11 -> m13_15  [key=2, style=dotted];
m13_11 -> m13_16  [key=2, style=dotted];
m13_13 -> m13_7  [color=blue, key=0, style=bold];
m13_5 -> m13_1  [color=darkseagreen4, key=1, label="CommandLine.ValueAttribute", style=dashed];
m13_5 -> m13_2  [color=darkseagreen4, key=1, label="CommandLine.ValueAttribute", style=dashed];
m13_5 -> m13_3  [color=darkseagreen4, key=1, label="CommandLine.ValueAttribute", style=dashed];
m14_0 -> m14_1  [key=0, style=solid];
m14_1 -> m14_2  [key=0, style=solid];
m14_2 -> m14_0  [color=blue, key=0, style=bold];
m14_3 -> m14_4  [color=red, key=0, style=solid];
m14_4 -> m14_5  [color=red, key=0, style=solid];
m14_4 -> m14_0  [color=red, key=2, style=dotted];
m14_4 -> m14_6  [color=red, key=2, style=dotted];
m14_4 -> m14_7  [color=red, key=2, style=dotted];
m14_4 -> m14_8  [color=red, key=2, style=dotted];
m14_4 -> m14_9  [color=red, key=2, style=dotted];
m14_5 -> m14_3  [color=blue, key=0, style=bold];
m14_10 -> m14_1  [color=darkseagreen4, key=1, label="CommandLine.Core.ValueSpecification", style=dashed];
}
