digraph  {
n0 [cluster="Humanizer.OrdinalizeExtensions.Ordinalize(string)", label="Entry Humanizer.OrdinalizeExtensions.Ordinalize(string)", span="15-15"];
n1 [cluster="Humanizer.OrdinalizeExtensions.Ordinalize(string)", label="return Ordinalize(int.Parse(numberString), numberString);", span="17-17"];
n2 [cluster="Humanizer.OrdinalizeExtensions.Ordinalize(string)", label="Exit Humanizer.OrdinalizeExtensions.Ordinalize(string)", span="15-15"];
n3 [cluster="int.Parse(string)", label="Entry int.Parse(string)", span="0-0"];
n4 [cluster="Humanizer.OrdinalizeExtensions.Ordinalize(int, string)", label="Entry Humanizer.OrdinalizeExtensions.Ordinalize(int, string)", span="30-30"];
n5 [cluster="Humanizer.OrdinalizeExtensions.Ordinalize(int)", label="Entry Humanizer.OrdinalizeExtensions.Ordinalize(int)", span="25-25"];
n6 [cluster="Humanizer.OrdinalizeExtensions.Ordinalize(int)", label="return Ordinalize(number, number.ToString(CultureInfo.InvariantCulture));", span="27-27"];
n7 [cluster="Humanizer.OrdinalizeExtensions.Ordinalize(int)", label="Exit Humanizer.OrdinalizeExtensions.Ordinalize(int)", span="25-25"];
n8 [cluster="int.ToString(System.IFormatProvider)", label="Entry int.ToString(System.IFormatProvider)", span="0-0"];
n9 [cluster="Humanizer.OrdinalizeExtensions.Ordinalize(int, string)", label="int nMod100 = number % 100", span="32-32"];
n11 [cluster="Humanizer.OrdinalizeExtensions.Ordinalize(int, string)", label="return numberString + ''th'';", span="36-36"];
n12 [cluster="Humanizer.OrdinalizeExtensions.Ordinalize(int, string)", label="number % 10", span="39-39"];
n14 [cluster="Humanizer.OrdinalizeExtensions.Ordinalize(int, string)", label="return numberString + ''st'';", span="42-42"];
n16 [cluster="Humanizer.OrdinalizeExtensions.Ordinalize(int, string)", label="return numberString + ''nd'';", span="44-44"];
n18 [cluster="Humanizer.OrdinalizeExtensions.Ordinalize(int, string)", label="return numberString + ''rd'';", span="46-46"];
n19 [cluster="Humanizer.OrdinalizeExtensions.Ordinalize(int, string)", label="return numberString + ''th'';", span="48-48"];
n10 [cluster="Humanizer.OrdinalizeExtensions.Ordinalize(int, string)", label="nMod100 >= 11 && nMod100 <= 13", span="34-34"];
n13 [cluster="Humanizer.OrdinalizeExtensions.Ordinalize(int, string)", label=1, span="41-41"];
n15 [cluster="Humanizer.OrdinalizeExtensions.Ordinalize(int, string)", label=2, span="43-43"];
n17 [cluster="Humanizer.OrdinalizeExtensions.Ordinalize(int, string)", label=3, span="45-45"];
n20 [cluster="Humanizer.OrdinalizeExtensions.Ordinalize(int, string)", label="Exit Humanizer.OrdinalizeExtensions.Ordinalize(int, string)", span="30-30"];
d5 [cluster="CommandLine.Core.KeyValuePairHelper.CreateSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", color=green, community=0, label="return from t in tokens.Pairwise(\r\n                (f, s) =>\r\n                        f.IsName()\r\n                            ? KeyValuePairHelper.Create(f.Text, tokens.SkipWhile(t => t.Equals(f)).TakeWhile(v => v.IsValue()).Select(x => x.Text).ToArray())\r\n                            : KeyValuePairHelper.Create(string.Empty))\r\n                   where t.Key.Length > 0 && t.Value.Any()\r\n                   select t;", prediction=0, span="18-24"];
d4 [cluster="CommandLine.Core.KeyValuePairHelper.CreateSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", label="Entry CommandLine.Core.KeyValuePairHelper.CreateSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="15-15"];
d6 [cluster="CommandLine.Core.KeyValuePairHelper.CreateSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", label="Exit CommandLine.Core.KeyValuePairHelper.CreateSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="15-15"];
d7 [cluster="Unk.Pairwise", label="Entry Unk.Pairwise", span=""];
d8 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
d9 [cluster="lambda expression", label="Entry lambda expression", span="19-22"];
d10 [cluster="lambda expression", color=green, community=0, label="f.IsName()\r\n                            ? KeyValuePairHelper.Create(f.Text, tokens.SkipWhile(t => t.Equals(f)).TakeWhile(v => v.IsValue()).Select(x => x.Text).ToArray())\r\n                            : KeyValuePairHelper.Create(string.Empty)", prediction=1, span="20-22"];
d29 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", span=""];
d11 [cluster="lambda expression", label="Exit lambda expression", span="19-22"];
d12 [cluster="CommandLine.Core.Token.IsName()", label="Entry CommandLine.Core.Token.IsName()", span="72-72"];
d13 [cluster="System.Collections.Generic.IEnumerable<TSource>.SkipWhile<TSource>(System.Func<TSource, bool>)", label="Entry System.Collections.Generic.IEnumerable<TSource>.SkipWhile<TSource>(System.Func<TSource, bool>)", span="0-0"];
d14 [cluster="System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", label="Entry System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", span="0-0"];
d15 [cluster="Unk.Select", label="Entry Unk.Select", span=""];
d16 [cluster="Unk.ToArray", label="Entry Unk.ToArray", span=""];
d17 [cluster="Unk.Create", label="Entry Unk.Create", span=""];
d0 [cluster="CommandLine.Core.KeyValuePairHelper.Create(string, params string[])", label="Entry CommandLine.Core.KeyValuePairHelper.Create(string, params string[])", span="10-10"];
d18 [cluster="lambda expression", label="Entry lambda expression", span="21-21"];
d22 [cluster="lambda expression", label="Entry lambda expression", span="21-21"];
d26 [cluster="lambda expression", label="Entry lambda expression", span="21-21"];
d19 [cluster="lambda expression", color=green, community=0, label="t.Equals(f)", prediction=2, span="21-21"];
d30 [label="CommandLine.Core.Token", span=""];
d20 [cluster="lambda expression", label="Exit lambda expression", span="21-21"];
d21 [cluster="CommandLine.Core.Token.Equals(CommandLine.Core.Token)", label="Entry CommandLine.Core.Token.Equals(CommandLine.Core.Token)", span="59-59"];
d23 [cluster="lambda expression", color=green, community=0, label="v.IsValue()", prediction=3, span="21-21"];
d24 [cluster="lambda expression", label="Exit lambda expression", span="21-21"];
d25 [cluster="CommandLine.Core.Token.IsValue()", label="Entry CommandLine.Core.Token.IsValue()", span="77-77"];
d27 [cluster="lambda expression", color=green, community=0, label="x.Text", prediction=4, span="21-21"];
d28 [cluster="lambda expression", label="Exit lambda expression", span="21-21"];
d2 [cluster="CommandLine.Core.KeyValuePairHelper.Create(string, params string[])", label="Exit CommandLine.Core.KeyValuePairHelper.Create(string, params string[])", span="10-10"];
d1 [cluster="CommandLine.Core.KeyValuePairHelper.Create(string, params string[])", label="return new KeyValuePair<string, IEnumerable<string>>(value, values);", span="12-12"];
d3 [cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0"];
n4 -> n11  [color=darkseagreen4, key=1, label=string, style=dashed];
n4 -> n12  [color=darkseagreen4, key=1, label=int, style=dashed];
n4 -> n14  [color=darkseagreen4, key=1, label=string, style=dashed];
n4 -> n16  [color=darkseagreen4, key=1, label=string, style=dashed];
n4 -> n18  [color=darkseagreen4, key=1, label=string, style=dashed];
n4 -> n19  [color=darkseagreen4, key=1, label=string, style=dashed];
d5 -> d5  [color=green, key=1, label=t, style=dashed];
d5 -> d9  [color=green, key=1, label="lambda expression", style=dashed];
d4 -> d10  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
d9 -> d19  [color=green, key=1, label="CommandLine.Core.Token", style=dashed];
d10 -> d18  [color=green, key=1, label="lambda expression", style=dashed];
d10 -> d22  [color=green, key=1, label="lambda expression", style=dashed];
d10 -> d26  [color=green, key=1, label="lambda expression", style=dashed];
d29 -> d10  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
d30 -> d19  [color=green, key=1, label="CommandLine.Core.Token", style=dashed];
}
