digraph  {
n167 [label=unkTokens, span=""];
n168 [label=values, span=""];
n169 [label="System.Func<string, CSharpx.Maybe<char>>", span=""];
n170 [label=int, span=""];
n171 [label=replaces, span=""];
n172 [label=int, span=""];
n173 [label="CommandLine.Core.Token", span=""];
n174 [label=tokens, span=""];
n175 [label="System.Func<string, bool>", span=""];
n176 [label=indexes, span=""];
n0 [label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="13-13", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)"];
n1 [label="var errors = new List<Error>()", span="17-17", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)"];
n3 [label="var tokens = (from arg in arguments\r\n                          from token in !arg.StartsWith(''-'', StringComparison.Ordinal)\r\n                               ? new[] { Token.Value(arg) }\r\n                               : arg.StartsWith(''--'', StringComparison.Ordinal)\r\n                                     ? TokenizeLongName(arg, onError)\r\n                                     : TokenizeShortName(arg, nameLookup)\r\n                          select token).Memorize()", span="20-26", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", color=red, community=0];
n4 [label="var unkTokens = (from t in tokens where t.IsName() && !nameLookup(t.Text) select t).Memorize()", span="28-28", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", color=red, community=0];
n2 [label="Action<Error> onError = errors.Add", span="18-18", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)"];
n7 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()"];
n5 [label="return Result.Succeed(tokens.Where(x => !unkTokens.Contains(x)), errors.Concat(from t in unkTokens select new UnknownOptionError(t.Text)));", span="30-30", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", color=red, community=0];
n8 [label="Entry string.StartsWith(string, System.StringComparison)", span="0-0", cluster="string.StartsWith(string, System.StringComparison)"];
n9 [label="Entry CommandLine.Core.Token.Value(string)", span="24-24", cluster="CommandLine.Core.Token.Value(string)"];
n10 [label="Entry CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", span="141-141", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)"];
n11 [label="Entry CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", span="96-96", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)"];
n12 [label="Entry Unk.Memorize", span="", cluster="Unk.Memorize"];
n13 [label="Entry Unk.IsName", span="", cluster="Unk.IsName"];
n14 [label="Entry Unk.nameLookup", span="", cluster="Unk.nameLookup"];
n20 [label="!unkTokens.Contains(x)", span="30-30", cluster="lambda expression", color=red, community=0];
n6 [label="Exit CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="13-13", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)"];
n15 [label="Entry Unk.Where", span="", cluster="Unk.Where"];
n16 [label="Entry UnknownOptionError.cstr", span="", cluster="UnknownOptionError.cstr"];
n17 [label="Entry Unk.Concat", span="", cluster="Unk.Concat"];
n18 [label="Entry Unk.Succeed", span="", cluster="Unk.Succeed"];
n19 [label="Entry lambda expression", span="30-30", cluster="lambda expression"];
n21 [label="Exit lambda expression", span="30-30", cluster="lambda expression"];
n22 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)"];
n23 [label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", span="33-33", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)"];
n24 [label="arguments.Any(arg => arg.EqualsOrdinal(''--''))", span="37-37", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)"];
n25 [label="var tokenizerResult = tokenizer(arguments.TakeWhile(arg => !arg.EqualsOrdinal(''--'')))", span="39-39", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)"];
n26 [label="var values = arguments.SkipWhile(arg => !arg.EqualsOrdinal(''--'')).Skip(1).Select(Token.Value)", span="40-40", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)"];
n28 [label="return tokenizer(arguments);", span="43-43", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)"];
n30 [label="Entry Unk.Any", span="", cluster="Unk.Any"];
n37 [label="Entry lambda expression", span="37-37", cluster="lambda expression"];
n31 [label="Entry System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)"];
n32 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)"];
n41 [label="Entry lambda expression", span="39-39", cluster="lambda expression"];
n27 [label="return tokenizerResult.Map(tokens => tokens.Concat(values));", span="41-41", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)"];
n33 [label="Entry System.Collections.Generic.IEnumerable<TSource>.SkipWhile<TSource>(System.Func<TSource, bool>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.SkipWhile<TSource>(System.Func<TSource, bool>)"];
n34 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)"];
n35 [label="Entry Unk.Select", span="", cluster="Unk.Select"];
n44 [label="Entry lambda expression", span="40-40", cluster="lambda expression"];
n48 [label="tokens.Concat(values)", span="41-41", cluster="lambda expression"];
n29 [label="Exit CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", span="33-33", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)"];
n36 [label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.Map<TSuccess, TMessage, TResult>(System.Func<TSuccess, TResult>)", span="534-534", cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.Map<TSuccess, TMessage, TResult>(System.Func<TSuccess, TResult>)"];
n47 [label="Entry lambda expression", span="41-41", cluster="lambda expression"];
n38 [label="arg.EqualsOrdinal(''--'')", span="37-37", cluster="lambda expression"];
n39 [label="Exit lambda expression", span="37-37", cluster="lambda expression"];
n40 [label="Entry string.EqualsOrdinal(string)", span="40-40", cluster="string.EqualsOrdinal(string)"];
n42 [label="!arg.EqualsOrdinal(''--'')", span="39-39", cluster="lambda expression"];
n43 [label="Exit lambda expression", span="39-39", cluster="lambda expression"];
n45 [label="!arg.EqualsOrdinal(''--'')", span="40-40", cluster="lambda expression"];
n46 [label="Exit lambda expression", span="40-40", cluster="lambda expression"];
n49 [label="Exit lambda expression", span="41-41", cluster="lambda expression"];
n50 [label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", span="46-46", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)"];
n51 [label="var tokens = tokenizerResult.SucceededWith()", span="50-50", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)"];
n52 [label="var replaces = tokens.Select((t,i) =>\r\n                optionSequenceWithSeparatorLookup(t.Text)\r\n                    .Return(sep => Tuple.Create(i + 1, sep),\r\n                        Tuple.Create(-1, '\0'))).SkipWhile(x => x.Item1 < 0)", span="52-55", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)"];
n62 [label="optionSequenceWithSeparatorLookup(t.Text)\r\n                    .Return(sep => Tuple.Create(i + 1, sep),\r\n                        Tuple.Create(-1, '\0'))", span="53-55", cluster="lambda expression"];
n55 [label="return Result.Succeed(flattened, tokenizerResult.SuccessfulMessages());", span="64-64", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)"];
n57 [label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()", span="653-653", cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()"];
n53 [label="var exploded = tokens.Select((t, i) =>\r\n                        replaces.FirstOrDefault(x => x.Item1 == i).ToMaybe()\r\n                            .Return(r => t.Text.Split(r.Item2).Select(Token.Value),\r\n                                Enumerable.Empty<Token>().Concat(new[]{ t })))", span="57-60", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)"];
n58 [label="Entry Unk.SkipWhile", span="", cluster="Unk.SkipWhile"];
n61 [label="Entry lambda expression", span="52-55", cluster="lambda expression"];
n70 [label="Entry lambda expression", span="55-55", cluster="lambda expression"];
n74 [label="replaces.FirstOrDefault(x => x.Item1 == i).ToMaybe()\r\n                            .Return(r => t.Text.Split(r.Item2).Select(Token.Value),\r\n                                Enumerable.Empty<Token>().Concat(new[]{ t }))", span="58-60", cluster="lambda expression"];
n54 [label="var flattened = exploded.SelectMany(x => x)", span="62-62", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)"];
n73 [label="Entry lambda expression", span="57-60", cluster="lambda expression"];
n59 [label="Entry Unk.SelectMany", span="", cluster="Unk.SelectMany"];
n87 [label="Entry lambda expression", span="62-62", cluster="lambda expression"];
n56 [label="Exit CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", span="46-46", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)"];
n60 [label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SuccessfulMessages<TSuccess, TMessage>()", span="12-12", cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SuccessfulMessages<TSuccess, TMessage>()"];
n67 [label="Tuple.Create(i + 1, sep)", span="54-54", cluster="lambda expression"];
n63 [label="Exit lambda expression", span="52-55", cluster="lambda expression"];
n64 [label="Entry System.Tuple.Create<T1, T2>(T1, T2)", span="0-0", cluster="System.Tuple.Create<T1, T2>(T1, T2)"];
n65 [label="Entry Unk.Return", span="", cluster="Unk.Return"];
n66 [label="Entry lambda expression", span="54-54", cluster="lambda expression"];
n68 [label="Exit lambda expression", span="54-54", cluster="lambda expression"];
n69 [label="Entry Unk.Create", span="", cluster="Unk.Create"];
n71 [label="x.Item1 < 0", span="55-55", cluster="lambda expression"];
n72 [label="Exit lambda expression", span="55-55", cluster="lambda expression"];
n81 [label="x.Item1 == i", span="58-58", cluster="lambda expression"];
n84 [label="t.Text.Split(r.Item2).Select(Token.Value)", span="59-59", cluster="lambda expression"];
n75 [label="Exit lambda expression", span="57-60", cluster="lambda expression"];
n76 [label="Entry Unk.FirstOrDefault", span="", cluster="Unk.FirstOrDefault"];
n77 [label="Entry Unk.ToMaybe", span="", cluster="Unk.ToMaybe"];
n78 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()"];
n79 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)"];
n80 [label="Entry lambda expression", span="58-58", cluster="lambda expression"];
n83 [label="Entry lambda expression", span="59-59", cluster="lambda expression"];
n82 [label="Exit lambda expression", span="58-58", cluster="lambda expression"];
n85 [label="Exit lambda expression", span="59-59", cluster="lambda expression"];
n86 [label="Entry Unk.Split", span="", cluster="Unk.Split"];
n88 [label=x, span="62-62", cluster="lambda expression"];
n89 [label="Exit lambda expression", span="62-62", cluster="lambda expression"];
n90 [label="Entry CommandLine.Core.Tokenizer.Normalize(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, bool>)", span="67-67", cluster="CommandLine.Core.Tokenizer.Normalize(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, bool>)"];
n91 [label="var tokens = tokenizerResult.SucceededWith()", span="70-70", cluster="CommandLine.Core.Tokenizer.Normalize(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, bool>)", color=red, community=0];
n92 [label="var indexes =\r\n                from i in\r\n                    tokens.Select(\r\n                        (t, i) =>\r\n                        {\r\n                            var prev = tokens.ElementAtOrDefault(i - 1).ToMaybe();\r\n                            return t.IsValue() && ((Value)t).ExplicitlyAssigned\r\n                                   && prev.Return(p => p.IsName() && !nameLookup(p.Text), false)\r\n                                ? Maybe.Just(i)\r\n                                : Maybe.Nothing<int>();\r\n                        }).Where(i => i.IsJust())\r\n                select i.FromJust()", span="72-83", cluster="CommandLine.Core.Tokenizer.Normalize(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, bool>)"];
n101 [label="return t.IsValue() && ((Value)t).ExplicitlyAssigned\r\n                                   && prev.Return(p => p.IsName() && !nameLookup(p.Text), false)\r\n                                ? Maybe.Just(i)\r\n                                : Maybe.Nothing<int>();", span="78-81", cluster="lambda expression"];
n109 [label="p.IsName() && !nameLookup(p.Text)", span="79-79", cluster="lambda expression"];
n95 [label="return Result.Succeed(normalized, tokenizerResult.SuccessfulMessages());", span="93-93", cluster="CommandLine.Core.Tokenizer.Normalize(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, bool>)", color=red, community=0];
n100 [label="var prev = tokens.ElementAtOrDefault(i - 1).ToMaybe()", span="77-77", cluster="lambda expression"];
n93 [label="var toExclude =\r\n                from t in\r\n                    tokens.Select((t, i) => indexes.Contains(i) ? Maybe.Just(t) : Maybe.Nothing<Token>())\r\n                        .Where(t => t.IsJust())\r\n                select t.FromJust()", span="85-89", cluster="CommandLine.Core.Tokenizer.Normalize(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, bool>)"];
n94 [label="var normalized = tokens.Except(toExclude)", span="91-91", cluster="CommandLine.Core.Tokenizer.Normalize(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, bool>)"];
n97 [label="Entry Unk.FromJust", span="", cluster="Unk.FromJust"];
n99 [label="Entry lambda expression", span="75-82", cluster="lambda expression"];
n111 [label="Entry lambda expression", span="82-82", cluster="lambda expression"];
n116 [label="indexes.Contains(i) ? Maybe.Just(t) : Maybe.Nothing<Token>()", span="87-87", cluster="lambda expression"];
n115 [label="Entry lambda expression", span="87-87", cluster="lambda expression"];
n119 [label="Entry lambda expression", span="88-88", cluster="lambda expression"];
n98 [label="Entry Unk.Except", span="", cluster="Unk.Except"];
n96 [label="Exit CommandLine.Core.Tokenizer.Normalize(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, bool>)", span="67-67", cluster="CommandLine.Core.Tokenizer.Normalize(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, bool>)"];
n103 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ElementAtOrDefault<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ElementAtOrDefault<TSource>(int)"];
n104 [label="Entry T.ToMaybe<T>()", span="249-249", cluster="T.ToMaybe<T>()"];
n102 [label="Exit lambda expression", span="75-82", cluster="lambda expression"];
n105 [label="Entry CommandLine.Core.Token.IsValue()", span="133-133", cluster="CommandLine.Core.Token.IsValue()"];
n106 [label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124", cluster="CSharpx.Maybe.Just<T>(T)"];
n107 [label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116", cluster="CSharpx.Maybe.Nothing<T>()"];
n108 [label="Entry lambda expression", span="79-79", cluster="lambda expression"];
n110 [label="Exit lambda expression", span="79-79", cluster="lambda expression"];
n112 [label="i.IsJust()", span="82-82", cluster="lambda expression"];
n113 [label="Exit lambda expression", span="82-82", cluster="lambda expression"];
n114 [label="Entry Unk.IsJust", span="", cluster="Unk.IsJust"];
n117 [label="Exit lambda expression", span="87-87", cluster="lambda expression"];
n118 [label="Entry Unk.Contains", span="", cluster="Unk.Contains"];
n120 [label="t.IsJust()", span="88-88", cluster="lambda expression"];
n121 [label="Exit lambda expression", span="88-88", cluster="lambda expression"];
n122 [label="value.Length > 1 || value[0] == '-' || value[1] != '-'", span="100-100", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)"];
n125 [label="yield return Token.Value(value);", span="106-106", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)"];
n126 [label="yield break;", span="107-107", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)"];
n128 [label="yield return Token.Name(text);", span="112-112", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)"];
n129 [label="yield break;", span="113-113", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)"];
n131 [label="yield return Token.Name(first);", span="117-117", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)"];
n137 [label="yield return Token.Name(n);", span="127-127", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)"];
n139 [label="yield return Token.Value(text.Substring(seen.Count()));", span="136-136", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)"];
n123 [label="var text = value.Substring(1)", span="102-102", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)"];
n127 [label="value.Length == 2", span="110-110", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)"];
n135 [label="!seen.Contains(c) && nameLookup(n)", span="124-124", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)"];
n140 [label="Exit CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", span="96-96", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)"];
n124 [label="char.IsDigit(text[0])", span="104-104", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)"];
n141 [label="Entry string.Substring(int)", span="0-0", cluster="string.Substring(int)"];
n130 [label="var first = text.Substring(0, 1)", span="116-116", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)"];
n133 [label="text.Substring(1)", span="121-121", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)"];
n138 [label="seen.Count() < text.Length", span="134-134", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)"];
n142 [label="Entry char.IsDigit(char)", span="0-0", cluster="char.IsDigit(char)"];
n143 [label="Entry CommandLine.Core.Token.Name(string)", span="19-19", cluster="CommandLine.Core.Token.Name(string)"];
n144 [label="Entry string.Substring(int, int)", span="0-0", cluster="string.Substring(int, int)"];
n132 [label="var seen = new List<char> { first[0] }", span="119-119", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)"];
n136 [label="seen.Add(c)", span="126-126", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)"];
n134 [label="var n = new string(c, 1)", span="123-123", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)"];
n145 [label="Entry string.String(char, int)", span="0-0", cluster="string.String(char, int)"];
n146 [label="Entry System.Collections.Generic.List<T>.Contains(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Contains(T)"];
n147 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)"];
n148 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()"];
n149 [label="value.Length > 2 && value.StartsWith(''--'', StringComparison.Ordinal)", span="145-145", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)"];
n153 [label="yield return Token.Name(text);", span="151-151", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)"];
n154 [label="yield break;", span="152-152", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)"];
n157 [label="yield break;", span="157-157", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)"];
n159 [label="yield return Token.Name(parts[0]);", span="160-160", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)"];
n160 [label="yield return Token.Value(parts[1], true);", span="161-161", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)"];
n150 [label="var text = value.Substring(2)", span="147-147", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)"];
n156 [label="onError(new BadFormatTokenError(value))", span="156-156", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)"];
n161 [label="Exit CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", span="141-141", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)"];
n151 [label="var equalIndex = text.IndexOf('=')", span="148-148", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)"];
n158 [label="var parts = text.Split('=')", span="159-159", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)"];
n152 [label="equalIndex <= 0", span="149-149", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)"];
n162 [label="Entry string.IndexOf(char)", span="0-0", cluster="string.IndexOf(char)"];
n155 [label="equalIndex == 1", span="154-154", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)"];
n163 [label="Entry CommandLine.BadFormatTokenError.BadFormatTokenError(string)", span="196-196", cluster="CommandLine.BadFormatTokenError.BadFormatTokenError(string)"];
n164 [label="Entry System.Action<T>.Invoke(T)", span="0-0", cluster="System.Action<T>.Invoke(T)"];
n165 [label="Entry string.Split(params char[])", span="0-0", cluster="string.Split(params char[])"];
n166 [label="Entry CommandLine.Core.Token.Value(string, bool)", span="29-29", cluster="CommandLine.Core.Token.Value(string, bool)"];
m0_20 [label="Exit lambda expression", span="29-29", cluster="lambda expression", file="TokenizerTests.cs"];
m0_24 [label="((Ok<IEnumerable<Token>, Error>)result).Value.Success.ShouldBeEquivalentTo(expectedTokens)", span="62-62", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TokenizerTests.cs"];
m0_23 [label="var result =\r\n                Tokenizer.ExplodeOptionList(\r\n                    Result.Succeed(\r\n                        Enumerable.Empty<Token>().Concat(new[] { Token.Name(''x''),\r\n                            Token.Name(''string-seq''), Token.Value(''aaa,bb,cccc''), Token.Name(''switch'') }),\r\n                        Enumerable.Empty<Error>()),\r\n                        optionName => NameLookup.HavingSeparator(optionName, specs, StringComparer.InvariantCulture))", span="53-59", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TokenizerTests.cs"];
m0_21 [label="Entry CommandLine.Core.Specification.IsOption()", span="11-11", cluster="CommandLine.Core.Specification.IsOption()", file="TokenizerTests.cs"];
m0_22 [label="var specs = new[] { new OptionSpecification(string.Empty, ''string-seq'',\r\n                false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), ',', null, string.Empty, string.Empty, new List<string>(), typeof(IEnumerable<string>), TargetType.Sequence)}", span="49-50", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TokenizerTests.cs"];
m0_25 [label="Exit CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", span="44-44", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TokenizerTests.cs"];
m0_8 [label="return spec => spec.ConversionType.ToDescriptorKind() == TypeDescriptorKind.Sequence\r\n                && !spec.IsMinNotSpecified() && !spec.IsMaxNotSpecified() && spec.Min > spec.Max;", span="23-24", cluster="CommandLine.Core.SpecificationGuards.GuardAgainstSequenceWithWrongRange()", file="TokenizerTests.cs"];
m0_0 [label="Entry CommandLine.Core.SpecificationGuards.GuardAgainstScalarWithRange()", span="16-16", cluster="CommandLine.Core.SpecificationGuards.GuardAgainstScalarWithRange()", file="TokenizerTests.cs"];
m0_4 [label="spec.ConversionType.ToDescriptorKind() == TypeDescriptorKind.Scalar && (spec.Min > 0 || spec.Max > 0)", span="18-18", cluster="lambda expression", file="TokenizerTests.cs"];
m0_3 [label="Entry lambda expression", span="18-18", cluster="lambda expression", file="TokenizerTests.cs"];
m0_1 [label="return spec => spec.ConversionType.ToDescriptorKind() == TypeDescriptorKind.Scalar && (spec.Min > 0 || spec.Max > 0);", span="18-18", cluster="CommandLine.Core.SpecificationGuards.GuardAgainstScalarWithRange()", file="TokenizerTests.cs"];
m0_2 [label="Exit CommandLine.Core.SpecificationGuards.GuardAgainstScalarWithRange()", span="16-16", cluster="CommandLine.Core.SpecificationGuards.GuardAgainstScalarWithRange()", file="TokenizerTests.cs"];
m0_5 [label="Exit lambda expression", span="18-18", cluster="lambda expression", file="TokenizerTests.cs"];
m0_6 [label="Entry System.Type.ToDescriptorKind()", span="22-22", cluster="System.Type.ToDescriptorKind()", file="TokenizerTests.cs"];
m0_7 [label="Entry CommandLine.Core.SpecificationGuards.GuardAgainstSequenceWithWrongRange()", span="21-21", cluster="CommandLine.Core.SpecificationGuards.GuardAgainstSequenceWithWrongRange()", file="TokenizerTests.cs"];
m0_19 [label="spec.IsOption() && ((OptionSpecification)spec).LongName.Length == 1", span="29-29", cluster="lambda expression", file="TokenizerTests.cs"];
m0_11 [label="spec.ConversionType.ToDescriptorKind() == TypeDescriptorKind.Sequence\r\n                && !spec.IsMinNotSpecified() && !spec.IsMaxNotSpecified() && spec.Min > spec.Max", span="23-24", cluster="lambda expression", file="TokenizerTests.cs"];
m0_26 [label="Entry lambda expression", span="59-59", cluster="lambda expression", file="TokenizerTests.cs"];
m0_10 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="TokenizerTests.cs"];
m0_12 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="TokenizerTests.cs"];
m0_18 [label="Exit lambda expression", span="35-35", cluster="lambda expression", file="TokenizerTests.cs"];
m0_38 [label="name.Equals(''x'') || name.Equals(''string-seq'') || name.Equals(''switch'')", span="75-75", cluster="lambda expression", file="TokenizerTests.cs"];
m0_37 [label="Entry lambda expression", span="75-75", cluster="lambda expression", file="TokenizerTests.cs"];
m0_39 [label="Exit lambda expression", span="75-75", cluster="lambda expression", file="TokenizerTests.cs"];
m0_16 [label="return spec => spec.IsOption() && ((OptionSpecification)spec).LongName.Length == 1;", span="29-29", cluster="CommandLine.Core.SpecificationGuards.GuardAgainstOneCharLongName()", file="TokenizerTests.cs"];
m0_17 [label="Exit CommandLine.Core.SpecificationGuards.GuardAgainstOneCharLongName()", span="27-27", cluster="CommandLine.Core.SpecificationGuards.GuardAgainstOneCharLongName()", file="TokenizerTests.cs"];
m0_27 [label="NameLookup.HavingSeparator(optionName, specs, StringComparer.InvariantCulture)", span="59-59", cluster="lambda expression", file="TokenizerTests.cs"];
m0_28 [label="Exit lambda expression", span="59-59", cluster="lambda expression", file="TokenizerTests.cs"];
m0_13 [label="Entry RailwaySharp.ErrorHandling.Result.Succeed<TSuccess, TMessage>(TSuccess, System.Collections.Generic.IEnumerable<TMessage>)", span="202-202", cluster="RailwaySharp.ErrorHandling.Result.Succeed<TSuccess, TMessage>(TSuccess, System.Collections.Generic.IEnumerable<TMessage>)", file="TokenizerTests.cs"];
m0_29 [label="Entry CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", span="68-68", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", file="TokenizerTests.cs"];
m0_33 [label="result.ShouldBeEquivalentTo(expectedTokens)", span="90-90", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", color=green, community=0, file="TokenizerTests.cs"];
m0_30 [label="var expectedTokens = new[] {\r\n                Token.Name(''x''), Token.Name(''string-seq''), Token.Value(''aaa''), Token.Value(''bb''),\r\n                Token.Name(''unknown''), Token.Name(''switch'') }", span="71-73", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", file="TokenizerTests.cs"];
m0_32 [label="var result =\r\n                Tokenizer.Normalize(\r\n                    Result.Succeed(\r\n                        Enumerable.Empty<Token>()\r\n                            .Concat(\r\n                                new[] {\r\n                                    Token.Name(''x''), Token.Name(''string-seq''), Token.Value(''aaa''), Token.Value(''bb''),\r\n                                    Token.Name(''unknown''), Token.Value(''value0'', true), Token.Name(''switch'') }),\r\n                        Enumerable.Empty<Error>()),\r\n                    nameLookup)", span="78-87", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", color=green, community=0, file="TokenizerTests.cs"];
m0_31 [label="Func<string, bool> nameLookup =\r\n                name => name.Equals(''x'') || name.Equals(''string-seq'') || name.Equals(''switch'')", span="74-75", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", file="TokenizerTests.cs"];
m0_34 [label="Exit CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", span="68-68", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", file="TokenizerTests.cs"];
m0_15 [label="Entry CommandLine.Core.SpecificationGuards.GuardAgainstOneCharLongName()", span="27-27", cluster="CommandLine.Core.SpecificationGuards.GuardAgainstOneCharLongName()", file="TokenizerTests.cs"];
m0_40 [label="Entry string.Equals(string)", span="0-0", cluster="string.Equals(string)", file="TokenizerTests.cs"];
m0_9 [label="Exit CommandLine.Core.SpecificationGuards.GuardAgainstSequenceWithWrongRange()", span="21-21", cluster="CommandLine.Core.SpecificationGuards.GuardAgainstSequenceWithWrongRange()", file="TokenizerTests.cs"];
m0_36 [label="Entry Unk.Normalize", span="", cluster="Unk.Normalize", file="TokenizerTests.cs"];
m0_35 [label="Entry CommandLine.Core.Token.Value(string, bool)", span="29-29", cluster="CommandLine.Core.Token.Value(string, bool)", file="TokenizerTests.cs"];
m0_14 [label="Entry CommandLine.Core.Specification.IsMaxNotSpecified()", span="75-75", cluster="CommandLine.Core.Specification.IsMaxNotSpecified()", file="TokenizerTests.cs"];
m0_41 [label=specs, span="", file="TokenizerTests.cs"];
m0_42 [label=specs, span="", file="TokenizerTests.cs"];
n167 -> n20  [key=1, style=dashed, color=red, label=unkTokens];
n168 -> n48  [key=1, style=dashed, color=darkseagreen4, label=values];
n169 -> n62  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, CSharpx.Maybe<char>>"];
n170 -> n67  [key=1, style=dashed, color=darkseagreen4, label=int];
n171 -> n74  [key=1, style=dashed, color=darkseagreen4, label=replaces];
n172 -> n81  [key=1, style=dashed, color=darkseagreen4, label=int];
n173 -> n84  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Token"];
n174 -> n100  [key=1, style=dashed, color=darkseagreen4, label=tokens];
n175 -> n101  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, bool>"];
n175 -> n109  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, bool>"];
n176 -> n116  [key=1, style=dashed, color=darkseagreen4, label=indexes];
n0 -> n1  [key=0, style=solid];
n0 -> n3  [key=1, style=dashed, color=red, label="System.Collections.Generic.IEnumerable<string>"];
n0 -> n4  [key=1, style=dashed, color=red, label="System.Func<string, bool>"];
n1 -> n2  [key=0, style=solid];
n1 -> n7  [key=2, style=dotted];
n1 -> n5  [key=1, style=dashed, color=red, label=errors];
n3 -> n4  [key=0, style=solid, color=red];
n3 -> n8  [key=2, style=dotted, color=red];
n3 -> n9  [key=2, style=dotted, color=red];
n3 -> n10  [key=2, style=dotted, color=red];
n3 -> n11  [key=2, style=dotted, color=red];
n3 -> n12  [key=2, style=dotted, color=red];
n3 -> n3  [key=1, style=dashed, color=red, label=arg];
n3 -> n5  [key=1, style=dashed, color=red, label=tokens];
n4 -> n5  [key=0, style=solid, color=red];
n4 -> n13  [key=2, style=dotted, color=red];
n4 -> n14  [key=2, style=dotted, color=red];
n4 -> n12  [key=2, style=dotted, color=red];
n4 -> n4  [key=1, style=dashed, color=red, label=t];
n4 -> n20  [key=1, style=dashed, color=red, label=unkTokens];
n2 -> n3  [key=0, style=solid, color=red];
n5 -> n6  [key=0, style=solid, color=red];
n5 -> n15  [key=2, style=dotted, color=red];
n5 -> n16  [key=2, style=dotted, color=red];
n5 -> n17  [key=2, style=dotted, color=red];
n5 -> n18  [key=2, style=dotted, color=red];
n5 -> n19  [key=1, style=dashed, color=red, label="lambda expression"];
n5 -> n5  [key=1, style=dashed, color=red, label=t];
n10 -> n149  [key=0, style=solid];
n10 -> n153  [key=0, style=bold, color=crimson];
n10 -> n154  [key=0, style=bold, color=crimson];
n10 -> n157  [key=0, style=bold, color=crimson];
n10 -> n159  [key=0, style=bold, color=crimson];
n10 -> n160  [key=0, style=bold, color=crimson];
n10 -> n150  [key=1, style=dashed, color=darkseagreen4, label=string];
n10 -> n156  [key=1, style=dashed, color=darkseagreen4, label=string];
n11 -> n122  [key=0, style=solid];
n11 -> n125  [key=0, style=bold, color=crimson];
n11 -> n126  [key=0, style=bold, color=crimson];
n11 -> n128  [key=0, style=bold, color=crimson];
n11 -> n129  [key=0, style=bold, color=crimson];
n11 -> n131  [key=0, style=bold, color=crimson];
n11 -> n137  [key=0, style=bold, color=crimson];
n11 -> n139  [key=0, style=bold, color=crimson];
n11 -> n123  [key=1, style=dashed, color=darkseagreen4, label=string];
n11 -> n127  [key=1, style=dashed, color=darkseagreen4, label=string];
n11 -> n135  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, bool>"];
n20 -> n21  [key=0, style=solid, color=red];
n20 -> n22  [key=2, style=dotted, color=red];
n6 -> n0  [key=0, style=bold, color=blue];
n19 -> n20  [key=0, style=solid, color=red];
n21 -> n19  [key=0, style=bold, color=blue];
n23 -> n24  [key=0, style=solid];
n23 -> n25  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
n23 -> n26  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
n23 -> n28  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
n24 -> n25  [key=0, style=solid];
n24 -> n28  [key=0, style=solid];
n24 -> n30  [key=2, style=dotted];
n24 -> n37  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n25 -> n26  [key=0, style=solid];
n25 -> n31  [key=2, style=dotted];
n25 -> n32  [key=2, style=dotted];
n25 -> n41  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n25 -> n27  [key=1, style=dashed, color=darkseagreen4, label=tokenizerResult];
n26 -> n27  [key=0, style=solid];
n26 -> n33  [key=2, style=dotted];
n26 -> n34  [key=2, style=dotted];
n26 -> n35  [key=2, style=dotted];
n26 -> n44  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n26 -> n48  [key=1, style=dashed, color=darkseagreen4, label=values];
n28 -> n29  [key=0, style=solid];
n28 -> n32  [key=2, style=dotted];
n37 -> n38  [key=0, style=solid];
n41 -> n42  [key=0, style=solid];
n27 -> n29  [key=0, style=solid];
n27 -> n36  [key=2, style=dotted];
n27 -> n47  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n44 -> n45  [key=0, style=solid];
n48 -> n49  [key=0, style=solid];
n48 -> n17  [key=2, style=dotted];
n29 -> n23  [key=0, style=bold, color=blue];
n47 -> n48  [key=0, style=solid];
n38 -> n39  [key=0, style=solid];
n38 -> n40  [key=2, style=dotted];
n39 -> n37  [key=0, style=bold, color=blue];
n42 -> n43  [key=0, style=solid];
n42 -> n40  [key=2, style=dotted];
n43 -> n41  [key=0, style=bold, color=blue];
n45 -> n46  [key=0, style=solid];
n45 -> n40  [key=2, style=dotted];
n46 -> n44  [key=0, style=bold, color=blue];
n49 -> n47  [key=0, style=bold, color=blue];
n50 -> n51  [key=0, style=solid];
n50 -> n52  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, CSharpx.Maybe<char>>"];
n50 -> n62  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, CSharpx.Maybe<char>>"];
n50 -> n55  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>"];
n51 -> n52  [key=0, style=solid];
n51 -> n57  [key=2, style=dotted];
n51 -> n53  [key=1, style=dashed, color=darkseagreen4, label=tokens];
n52 -> n53  [key=0, style=solid];
n52 -> n35  [key=2, style=dotted];
n52 -> n58  [key=2, style=dotted];
n52 -> n61  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n52 -> n70  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n52 -> n74  [key=1, style=dashed, color=darkseagreen4, label=replaces];
n62 -> n63  [key=0, style=solid];
n62 -> n32  [key=2, style=dotted];
n62 -> n64  [key=2, style=dotted];
n62 -> n65  [key=2, style=dotted];
n62 -> n66  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n55 -> n56  [key=0, style=solid];
n55 -> n60  [key=2, style=dotted];
n55 -> n18  [key=2, style=dotted];
n53 -> n54  [key=0, style=solid];
n53 -> n35  [key=2, style=dotted];
n53 -> n73  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n61 -> n62  [key=0, style=solid];
n61 -> n67  [key=1, style=dashed, color=darkseagreen4, label=int];
n70 -> n71  [key=0, style=solid];
n74 -> n75  [key=0, style=solid];
n74 -> n76  [key=2, style=dotted];
n74 -> n77  [key=2, style=dotted];
n74 -> n78  [key=2, style=dotted];
n74 -> n79  [key=2, style=dotted];
n74 -> n65  [key=2, style=dotted];
n74 -> n80  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n74 -> n83  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n54 -> n55  [key=0, style=solid];
n54 -> n59  [key=2, style=dotted];
n54 -> n87  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n73 -> n74  [key=0, style=solid];
n73 -> n81  [key=1, style=dashed, color=darkseagreen4, label=int];
n73 -> n84  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Token"];
n87 -> n88  [key=0, style=solid];
n56 -> n50  [key=0, style=bold, color=blue];
n67 -> n68  [key=0, style=solid];
n67 -> n69  [key=2, style=dotted];
n63 -> n61  [key=0, style=bold, color=blue];
n66 -> n67  [key=0, style=solid];
n68 -> n66  [key=0, style=bold, color=blue];
n71 -> n72  [key=0, style=solid];
n72 -> n70  [key=0, style=bold, color=blue];
n81 -> n82  [key=0, style=solid];
n84 -> n85  [key=0, style=solid];
n84 -> n86  [key=2, style=dotted];
n84 -> n35  [key=2, style=dotted];
n75 -> n73  [key=0, style=bold, color=blue];
n80 -> n81  [key=0, style=solid];
n83 -> n84  [key=0, style=solid];
n82 -> n80  [key=0, style=bold, color=blue];
n85 -> n83  [key=0, style=bold, color=blue];
n88 -> n89  [key=0, style=solid];
n89 -> n87  [key=0, style=bold, color=blue];
n90 -> n91  [key=0, style=solid, color=red];
n90 -> n92  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, bool>"];
n90 -> n101  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, bool>"];
n90 -> n109  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, bool>"];
n90 -> n95  [key=1, style=dashed, color=red, label="RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>"];
n91 -> n92  [key=0, style=solid, color=red];
n91 -> n57  [key=2, style=dotted, color=red];
n91 -> n100  [key=1, style=dashed, color=red, label=tokens];
n91 -> n93  [key=1, style=dashed, color=red, label=tokens];
n91 -> n94  [key=1, style=dashed, color=red, label=tokens];
n92 -> n93  [key=0, style=solid];
n92 -> n35  [key=2, style=dotted];
n92 -> n15  [key=2, style=dotted];
n92 -> n97  [key=2, style=dotted];
n92 -> n99  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n92 -> n111  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n92 -> n92  [key=1, style=dashed, color=darkseagreen4, label=i];
n92 -> n116  [key=1, style=dashed, color=darkseagreen4, label=indexes];
n101 -> n102  [key=0, style=solid];
n101 -> n105  [key=2, style=dotted];
n101 -> n65  [key=2, style=dotted];
n101 -> n106  [key=2, style=dotted];
n101 -> n107  [key=2, style=dotted];
n101 -> n108  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n109 -> n110  [key=0, style=solid];
n109 -> n13  [key=2, style=dotted];
n109 -> n14  [key=2, style=dotted];
n95 -> n96  [key=0, style=solid, color=red];
n95 -> n60  [key=2, style=dotted, color=red];
n95 -> n18  [key=2, style=dotted, color=red];
n100 -> n101  [key=0, style=solid];
n100 -> n103  [key=2, style=dotted];
n100 -> n104  [key=2, style=dotted];
n93 -> n94  [key=0, style=solid];
n93 -> n35  [key=2, style=dotted];
n93 -> n15  [key=2, style=dotted];
n93 -> n97  [key=2, style=dotted];
n93 -> n115  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n93 -> n119  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n93 -> n93  [key=1, style=dashed, color=darkseagreen4, label=t];
n94 -> n95  [key=0, style=solid, color=red];
n94 -> n98  [key=2, style=dotted];
n99 -> n100  [key=0, style=solid];
n99 -> n101  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Token"];
n111 -> n112  [key=0, style=solid];
n116 -> n117  [key=0, style=solid];
n116 -> n118  [key=2, style=dotted];
n116 -> n106  [key=2, style=dotted];
n116 -> n107  [key=2, style=dotted];
n115 -> n116  [key=0, style=solid];
n119 -> n120  [key=0, style=solid];
n96 -> n90  [key=0, style=bold, color=blue];
n102 -> n99  [key=0, style=bold, color=blue];
n108 -> n109  [key=0, style=solid];
n110 -> n108  [key=0, style=bold, color=blue];
n112 -> n113  [key=0, style=solid];
n112 -> n114  [key=2, style=dotted];
n113 -> n111  [key=0, style=bold, color=blue];
n117 -> n115  [key=0, style=bold, color=blue];
n120 -> n121  [key=0, style=solid];
n120 -> n114  [key=2, style=dotted];
n121 -> n119  [key=0, style=bold, color=blue];
n122 -> n123  [key=0, style=solid];
n122 -> n140  [key=0, style=solid];
n125 -> n126  [key=0, style=solid];
n125 -> n9  [key=2, style=dotted];
n126 -> n127  [key=0, style=solid];
n128 -> n129  [key=0, style=solid];
n128 -> n143  [key=2, style=dotted];
n129 -> n130  [key=0, style=solid];
n131 -> n132  [key=0, style=solid];
n131 -> n143  [key=2, style=dotted];
n137 -> n133  [key=0, style=solid];
n137 -> n143  [key=2, style=dotted];
n139 -> n140  [key=0, style=solid];
n139 -> n148  [key=2, style=dotted];
n139 -> n141  [key=2, style=dotted];
n139 -> n9  [key=2, style=dotted];
n123 -> n124  [key=0, style=solid];
n123 -> n141  [key=2, style=dotted];
n123 -> n128  [key=1, style=dashed, color=darkseagreen4, label=text];
n123 -> n130  [key=1, style=dashed, color=darkseagreen4, label=text];
n123 -> n133  [key=1, style=dashed, color=darkseagreen4, label=text];
n123 -> n138  [key=1, style=dashed, color=darkseagreen4, label=text];
n123 -> n139  [key=1, style=dashed, color=darkseagreen4, label=text];
n127 -> n128  [key=0, style=solid];
n127 -> n130  [key=0, style=solid];
n135 -> n136  [key=0, style=solid];
n135 -> n138  [key=0, style=solid];
n135 -> n146  [key=2, style=dotted];
n135 -> n32  [key=2, style=dotted];
n140 -> n11  [key=0, style=bold, color=blue];
n124 -> n125  [key=0, style=solid];
n124 -> n127  [key=0, style=solid];
n124 -> n142  [key=2, style=dotted];
n130 -> n131  [key=0, style=solid];
n130 -> n144  [key=2, style=dotted];
n130 -> n132  [key=1, style=dashed, color=darkseagreen4, label=first];
n133 -> n134  [key=0, style=solid];
n133 -> n138  [key=0, style=solid];
n133 -> n141  [key=2, style=dotted];
n133 -> n135  [key=1, style=dashed, color=darkseagreen4, label=c];
n133 -> n136  [key=1, style=dashed, color=darkseagreen4, label=c];
n138 -> n139  [key=0, style=solid];
n138 -> n140  [key=0, style=solid];
n138 -> n148  [key=2, style=dotted];
n132 -> n133  [key=0, style=solid];
n132 -> n7  [key=2, style=dotted];
n132 -> n135  [key=1, style=dashed, color=darkseagreen4, label=seen];
n132 -> n136  [key=1, style=dashed, color=darkseagreen4, label=seen];
n132 -> n138  [key=1, style=dashed, color=darkseagreen4, label=seen];
n132 -> n139  [key=1, style=dashed, color=darkseagreen4, label=seen];
n136 -> n137  [key=0, style=solid];
n136 -> n147  [key=2, style=dotted];
n134 -> n135  [key=0, style=solid];
n134 -> n145  [key=2, style=dotted];
n134 -> n137  [key=1, style=dashed, color=darkseagreen4, label=n];
n149 -> n150  [key=0, style=solid];
n149 -> n161  [key=0, style=solid];
n149 -> n8  [key=2, style=dotted];
n153 -> n154  [key=0, style=solid];
n153 -> n143  [key=2, style=dotted];
n154 -> n155  [key=0, style=solid];
n157 -> n158  [key=0, style=solid];
n159 -> n160  [key=0, style=solid];
n159 -> n143  [key=2, style=dotted];
n160 -> n161  [key=0, style=solid];
n160 -> n166  [key=2, style=dotted];
n150 -> n151  [key=0, style=solid];
n150 -> n141  [key=2, style=dotted];
n150 -> n153  [key=1, style=dashed, color=darkseagreen4, label=text];
n150 -> n158  [key=1, style=dashed, color=darkseagreen4, label=text];
n156 -> n157  [key=0, style=solid];
n156 -> n163  [key=2, style=dotted];
n156 -> n164  [key=2, style=dotted];
n161 -> n10  [key=0, style=bold, color=blue];
n151 -> n152  [key=0, style=solid];
n151 -> n162  [key=2, style=dotted];
n151 -> n155  [key=1, style=dashed, color=darkseagreen4, label=equalIndex];
n158 -> n159  [key=0, style=solid];
n158 -> n165  [key=2, style=dotted];
n158 -> n160  [key=1, style=dashed, color=darkseagreen4, label=parts];
n152 -> n153  [key=0, style=solid];
n152 -> n155  [key=0, style=solid];
n155 -> n156  [key=0, style=solid];
n155 -> n158  [key=0, style=solid];
m0_20 -> m0_21  [key=0, style=solid];
m0_20 -> m0_18  [key=0, style=bold, color=blue];
m0_24 -> m0_15  [key=2, style=dotted];
m0_24 -> m0_25  [key=0, style=solid];
m0_23 -> m0_11  [key=2, style=dotted];
m0_23 -> m0_6  [key=2, style=dotted];
m0_23 -> m0_7  [key=2, style=dotted];
m0_23 -> m0_12  [key=2, style=dotted];
m0_23 -> m0_13  [key=2, style=dotted];
m0_23 -> m0_24  [key=0, style=solid];
m0_23 -> n50  [key=2, style=dotted];
m0_23 -> m0_26  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_21 -> m0_6  [key=2, style=dotted];
m0_21 -> m0_7  [key=2, style=dotted];
m0_21 -> m0_24  [key=1, style=dashed, color=darkseagreen4, label=expectedTokens];
m0_21 -> m0_22  [key=0, style=solid];
m0_22 -> m0_23  [key=0, style=solid];
m0_22 -> m0_8  [key=2, style=dotted];
m0_22 -> m0_9  [key=2, style=dotted];
m0_22 -> m0_10  [key=2, style=dotted];
m0_22 -> m0_27  [key=1, style=dashed, color=darkseagreen4, label=specs];
m0_25 -> m0_20  [key=0, style=bold, color=blue];
m0_8 -> m0_9  [key=0, style=solid];
m0_8 -> m0_11  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m0_0 -> m0_1  [key=0, style=solid];
m0_4 -> m0_15  [key=2, style=dotted];
m0_4 -> m0_5  [key=0, style=solid];
m0_4 -> m0_6  [key=2, style=dotted];
m0_3 -> m0_11  [key=2, style=dotted];
m0_3 -> m0_6  [key=2, style=dotted];
m0_3 -> m0_7  [key=2, style=dotted];
m0_3 -> m0_12  [key=2, style=dotted];
m0_3 -> m0_13  [key=2, style=dotted];
m0_3 -> m0_4  [key=0, style=solid];
m0_3 -> n50  [key=2, style=dotted];
m0_3 -> m0_16  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_1 -> m0_6  [key=2, style=dotted];
m0_1 -> m0_7  [key=2, style=dotted];
m0_1 -> m0_4  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m0_1 -> m0_2  [key=0, style=solid];
m0_2 -> m0_3  [key=0, style=solid];
m0_2 -> m0_8  [key=2, style=dotted];
m0_2 -> m0_9  [key=2, style=dotted];
m0_2 -> m0_10  [key=2, style=dotted];
m0_2 -> m0_17  [key=1, style=dashed, color=darkseagreen4, label=specs];
m0_2 -> m0_0  [key=0, style=bold, color=blue];
m0_5 -> m0_0  [key=0, style=bold, color=blue];
m0_5 -> m0_3  [key=0, style=bold, color=blue];
m0_7 -> m0_8  [key=0, style=solid];
m0_19 -> m0_20  [key=0, style=solid];
m0_19 -> m0_21  [key=2, style=dotted];
m0_11 -> m0_12  [key=0, style=solid];
m0_11 -> m0_6  [key=2, style=dotted];
m0_11 -> m0_13  [key=2, style=dotted];
m0_11 -> m0_14  [key=2, style=dotted];
m0_26 -> m0_27  [key=0, style=solid];
m0_10 -> m0_11  [key=0, style=solid];
m0_12 -> m0_10  [key=0, style=bold, color=blue];
m0_18 -> m0_19  [key=0, style=solid];
m0_18 -> m0_16  [key=0, style=bold, color=blue];
m0_38 -> m0_39  [key=0, style=solid];
m0_38 -> m0_40  [key=2, style=dotted];
m0_37 -> m0_38  [key=0, style=solid];
m0_39 -> m0_37  [key=0, style=bold, color=blue];
m0_16 -> m0_17  [key=0, style=solid];
m0_16 -> m0_19  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m0_17 -> m0_18  [key=0, style=solid];
m0_17 -> m0_19  [key=2, style=dotted];
m0_17 -> m0_15  [key=0, style=bold, color=blue];
m0_27 -> m0_28  [key=0, style=solid];
m0_27 -> m0_19  [key=2, style=dotted];
m0_28 -> m0_26  [key=0, style=bold, color=blue];
m0_29 -> m0_30  [key=0, style=solid];
m0_33 -> m0_34  [key=0, style=solid, color=green];
m0_33 -> m0_15  [key=2, style=dotted, color=green];
m0_30 -> m0_33  [key=1, style=dashed, color=green, label=expectedTokens];
m0_30 -> m0_31  [key=0, style=solid];
m0_30 -> m0_6  [key=2, style=dotted];
m0_30 -> m0_7  [key=2, style=dotted];
m0_32 -> m0_33  [key=0, style=solid, color=green];
m0_32 -> m0_11  [key=2, style=dotted, color=green];
m0_32 -> m0_6  [key=2, style=dotted, color=green];
m0_32 -> m0_7  [key=2, style=dotted, color=green];
m0_32 -> m0_35  [key=2, style=dotted, color=green];
m0_32 -> m0_12  [key=2, style=dotted, color=green];
m0_32 -> m0_13  [key=2, style=dotted, color=green];
m0_32 -> m0_36  [key=2, style=dotted, color=green];
m0_31 -> m0_32  [key=0, style=solid, color=green];
m0_31 -> m0_31  [key=3, color=darkorchid, style=bold, label="Local variable System.Func<string, bool> nameLookup"];
m0_31 -> m0_38  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_34 -> m0_29  [key=0, style=bold, color=blue];
m0_15 -> m0_16  [key=0, style=solid];
m0_9 -> m0_7  [key=0, style=bold, color=blue];
m0_41 -> m0_17  [key=1, style=dashed, color=darkseagreen4, label=specs];
m0_42 -> m0_27  [key=1, style=dashed, color=darkseagreen4, label=specs];
}
