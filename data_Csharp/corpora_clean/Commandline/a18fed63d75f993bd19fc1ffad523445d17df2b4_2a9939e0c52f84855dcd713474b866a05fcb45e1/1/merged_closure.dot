digraph  {
n167 [label=unkTokens, span=""];
n168 [label=values, span=""];
n169 [label="System.Func<string, CSharpx.Maybe<char>>", span=""];
n170 [label=int, span=""];
n171 [label=replaces, span=""];
n172 [label=int, span=""];
n173 [label="CommandLine.Core.Token", span=""];
n174 [label=tokens, span=""];
n175 [label="System.Func<string, bool>", span=""];
n176 [label=indexes, span=""];
n0 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="13-13"];
n1 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", label="var errors = new List<Error>()", span="17-17"];
n2 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", label="Action<Error> onError = errors.Add", span="18-18"];
n7 [cluster="System.Collections.Generic.List<T>.List()", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
n8 [cluster="string.StartsWith(string, System.StringComparison)", label="Entry string.StartsWith(string, System.StringComparison)", span="0-0"];
n9 [cluster="CommandLine.Core.Token.Value(string)", label="Entry CommandLine.Core.Token.Value(string)", span="24-24"];
n10 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", label="Entry CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", span="141-141"];
n11 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", label="Entry CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", span="96-96"];
n12 [cluster="Unk.Memorize", label="Entry Unk.Memorize", span=""];
n13 [cluster="Unk.IsName", label="Entry Unk.IsName", span=""];
n14 [cluster="Unk.nameLookup", label="Entry Unk.nameLookup", span=""];
n6 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", label="Exit CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="13-13"];
n15 [cluster="Unk.Where", label="Entry Unk.Where", span=""];
n16 [cluster="UnknownOptionError.cstr", label="Entry UnknownOptionError.cstr", span=""];
n17 [cluster="Unk.Concat", label="Entry Unk.Concat", span=""];
n18 [cluster="Unk.Succeed", label="Entry Unk.Succeed", span=""];
n19 [cluster="lambda expression", label="Entry lambda expression", span="30-30"];
n21 [cluster="lambda expression", label="Exit lambda expression", span="30-30"];
n22 [cluster="System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", label="Entry System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", span="0-0"];
n23 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", span="33-33"];
n24 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", label="arguments.Any(arg => arg.EqualsOrdinal(''--''))", span="37-37"];
n25 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", label="var tokenizerResult = tokenizer(arguments.TakeWhile(arg => !arg.EqualsOrdinal(''--'')))", span="39-39"];
n26 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", label="var values = arguments.SkipWhile(arg => !arg.EqualsOrdinal(''--'')).Skip(1).Select(Token.Value)", span="40-40"];
n28 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", label="return tokenizer(arguments);", span="43-43"];
n30 [cluster="Unk.Any", label="Entry Unk.Any", span=""];
n37 [cluster="lambda expression", label="Entry lambda expression", span="37-37"];
n31 [cluster="System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", label="Entry System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", span="0-0"];
n32 [cluster="System.Func<T, TResult>.Invoke(T)", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
n41 [cluster="lambda expression", label="Entry lambda expression", span="39-39"];
n27 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", label="return tokenizerResult.Map(tokens => tokens.Concat(values));", span="41-41"];
n33 [cluster="System.Collections.Generic.IEnumerable<TSource>.SkipWhile<TSource>(System.Func<TSource, bool>)", label="Entry System.Collections.Generic.IEnumerable<TSource>.SkipWhile<TSource>(System.Func<TSource, bool>)", span="0-0"];
n34 [cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0"];
n35 [cluster="Unk.Select", label="Entry Unk.Select", span=""];
n44 [cluster="lambda expression", label="Entry lambda expression", span="40-40"];
n48 [cluster="lambda expression", label="tokens.Concat(values)", span="41-41"];
n29 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", label="Exit CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", span="33-33"];
n36 [cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.Map<TSuccess, TMessage, TResult>(System.Func<TSuccess, TResult>)", label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.Map<TSuccess, TMessage, TResult>(System.Func<TSuccess, TResult>)", span="534-534"];
n47 [cluster="lambda expression", label="Entry lambda expression", span="41-41"];
n38 [cluster="lambda expression", label="arg.EqualsOrdinal(''--'')", span="37-37"];
n39 [cluster="lambda expression", label="Exit lambda expression", span="37-37"];
n40 [cluster="string.EqualsOrdinal(string)", label="Entry string.EqualsOrdinal(string)", span="40-40"];
n42 [cluster="lambda expression", label="!arg.EqualsOrdinal(''--'')", span="39-39"];
n43 [cluster="lambda expression", label="Exit lambda expression", span="39-39"];
n45 [cluster="lambda expression", label="!arg.EqualsOrdinal(''--'')", span="40-40"];
n46 [cluster="lambda expression", label="Exit lambda expression", span="40-40"];
n49 [cluster="lambda expression", label="Exit lambda expression", span="41-41"];
n50 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", span="46-46"];
n51 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", label="var tokens = tokenizerResult.SucceededWith()", span="50-50"];
n52 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", label="var replaces = tokens.Select((t,i) =>\r\n                optionSequenceWithSeparatorLookup(t.Text)\r\n                    .Return(sep => Tuple.Create(i + 1, sep),\r\n                        Tuple.Create(-1, '\0'))).SkipWhile(x => x.Item1 < 0)", span="52-55"];
n62 [cluster="lambda expression", label="optionSequenceWithSeparatorLookup(t.Text)\r\n                    .Return(sep => Tuple.Create(i + 1, sep),\r\n                        Tuple.Create(-1, '\0'))", span="53-55"];
n55 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", label="return Result.Succeed(flattened, tokenizerResult.SuccessfulMessages());", span="64-64"];
n57 [cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()", label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()", span="653-653"];
n53 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", label="var exploded = tokens.Select((t, i) =>\r\n                        replaces.FirstOrDefault(x => x.Item1 == i).ToMaybe()\r\n                            .Return(r => t.Text.Split(r.Item2).Select(Token.Value),\r\n                                Enumerable.Empty<Token>().Concat(new[]{ t })))", span="57-60"];
n58 [cluster="Unk.SkipWhile", label="Entry Unk.SkipWhile", span=""];
n61 [cluster="lambda expression", label="Entry lambda expression", span="52-55"];
n70 [cluster="lambda expression", label="Entry lambda expression", span="55-55"];
n74 [cluster="lambda expression", label="replaces.FirstOrDefault(x => x.Item1 == i).ToMaybe()\r\n                            .Return(r => t.Text.Split(r.Item2).Select(Token.Value),\r\n                                Enumerable.Empty<Token>().Concat(new[]{ t }))", span="58-60"];
n54 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", label="var flattened = exploded.SelectMany(x => x)", span="62-62"];
n73 [cluster="lambda expression", label="Entry lambda expression", span="57-60"];
n59 [cluster="Unk.SelectMany", label="Entry Unk.SelectMany", span=""];
n87 [cluster="lambda expression", label="Entry lambda expression", span="62-62"];
n56 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", label="Exit CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", span="46-46"];
n60 [cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SuccessfulMessages<TSuccess, TMessage>()", label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SuccessfulMessages<TSuccess, TMessage>()", span="12-12"];
n67 [cluster="lambda expression", label="Tuple.Create(i + 1, sep)", span="54-54"];
n63 [cluster="lambda expression", label="Exit lambda expression", span="52-55"];
n64 [cluster="System.Tuple.Create<T1, T2>(T1, T2)", label="Entry System.Tuple.Create<T1, T2>(T1, T2)", span="0-0"];
n65 [cluster="Unk.Return", label="Entry Unk.Return", span=""];
n66 [cluster="lambda expression", label="Entry lambda expression", span="54-54"];
n68 [cluster="lambda expression", label="Exit lambda expression", span="54-54"];
n69 [cluster="Unk.Create", label="Entry Unk.Create", span=""];
n71 [cluster="lambda expression", label="x.Item1 < 0", span="55-55"];
n72 [cluster="lambda expression", label="Exit lambda expression", span="55-55"];
n81 [cluster="lambda expression", label="x.Item1 == i", span="58-58"];
n84 [cluster="lambda expression", label="t.Text.Split(r.Item2).Select(Token.Value)", span="59-59"];
n75 [cluster="lambda expression", label="Exit lambda expression", span="57-60"];
n76 [cluster="Unk.FirstOrDefault", label="Entry Unk.FirstOrDefault", span=""];
n77 [cluster="Unk.ToMaybe", label="Entry Unk.ToMaybe", span=""];
n78 [cluster="System.Linq.Enumerable.Empty<TResult>()", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
n79 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
n80 [cluster="lambda expression", label="Entry lambda expression", span="58-58"];
n83 [cluster="lambda expression", label="Entry lambda expression", span="59-59"];
n82 [cluster="lambda expression", label="Exit lambda expression", span="58-58"];
n85 [cluster="lambda expression", label="Exit lambda expression", span="59-59"];
n86 [cluster="Unk.Split", label="Entry Unk.Split", span=""];
n88 [cluster="lambda expression", label=x, span="62-62"];
n89 [cluster="lambda expression", label="Exit lambda expression", span="62-62"];
n90 [cluster="CommandLine.Core.Tokenizer.Normalize(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, bool>)", label="Entry CommandLine.Core.Tokenizer.Normalize(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, bool>)", span="67-67"];
n92 [cluster="CommandLine.Core.Tokenizer.Normalize(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, bool>)", label="var indexes =\r\n                from i in\r\n                    tokens.Select(\r\n                        (t, i) =>\r\n                        {\r\n                            var prev = tokens.ElementAtOrDefault(i - 1).ToMaybe();\r\n                            return t.IsValue() && ((Value)t).ExplicitlyAssigned\r\n                                   && prev.Return(p => p.IsName() && !nameLookup(p.Text), false)\r\n                                ? Maybe.Just(i)\r\n                                : Maybe.Nothing<int>();\r\n                        }).Where(i => i.IsJust())\r\n                select i.FromJust()", span="72-83"];
n101 [cluster="lambda expression", label="return t.IsValue() && ((Value)t).ExplicitlyAssigned\r\n                                   && prev.Return(p => p.IsName() && !nameLookup(p.Text), false)\r\n                                ? Maybe.Just(i)\r\n                                : Maybe.Nothing<int>();", span="78-81"];
n109 [cluster="lambda expression", label="p.IsName() && !nameLookup(p.Text)", span="79-79"];
n100 [cluster="lambda expression", label="var prev = tokens.ElementAtOrDefault(i - 1).ToMaybe()", span="77-77"];
n93 [cluster="CommandLine.Core.Tokenizer.Normalize(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, bool>)", label="var toExclude =\r\n                from t in\r\n                    tokens.Select((t, i) => indexes.Contains(i) ? Maybe.Just(t) : Maybe.Nothing<Token>())\r\n                        .Where(t => t.IsJust())\r\n                select t.FromJust()", span="85-89"];
n94 [cluster="CommandLine.Core.Tokenizer.Normalize(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, bool>)", label="var normalized = tokens.Except(toExclude)", span="91-91"];
n97 [cluster="Unk.FromJust", label="Entry Unk.FromJust", span=""];
n99 [cluster="lambda expression", label="Entry lambda expression", span="75-82"];
n111 [cluster="lambda expression", label="Entry lambda expression", span="82-82"];
n116 [cluster="lambda expression", label="indexes.Contains(i) ? Maybe.Just(t) : Maybe.Nothing<Token>()", span="87-87"];
n115 [cluster="lambda expression", label="Entry lambda expression", span="87-87"];
n119 [cluster="lambda expression", label="Entry lambda expression", span="88-88"];
n98 [cluster="Unk.Except", label="Entry Unk.Except", span=""];
n96 [cluster="CommandLine.Core.Tokenizer.Normalize(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, bool>)", label="Exit CommandLine.Core.Tokenizer.Normalize(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, bool>)", span="67-67"];
n103 [cluster="System.Collections.Generic.IEnumerable<TSource>.ElementAtOrDefault<TSource>(int)", label="Entry System.Collections.Generic.IEnumerable<TSource>.ElementAtOrDefault<TSource>(int)", span="0-0"];
n104 [cluster="T.ToMaybe<T>()", label="Entry T.ToMaybe<T>()", span="249-249"];
n102 [cluster="lambda expression", label="Exit lambda expression", span="75-82"];
n105 [cluster="CommandLine.Core.Token.IsValue()", label="Entry CommandLine.Core.Token.IsValue()", span="133-133"];
n106 [cluster="CSharpx.Maybe.Just<T>(T)", label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124"];
n107 [cluster="CSharpx.Maybe.Nothing<T>()", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
n108 [cluster="lambda expression", label="Entry lambda expression", span="79-79"];
n110 [cluster="lambda expression", label="Exit lambda expression", span="79-79"];
n112 [cluster="lambda expression", label="i.IsJust()", span="82-82"];
n113 [cluster="lambda expression", label="Exit lambda expression", span="82-82"];
n114 [cluster="Unk.IsJust", label="Entry Unk.IsJust", span=""];
n117 [cluster="lambda expression", label="Exit lambda expression", span="87-87"];
n118 [cluster="Unk.Contains", label="Entry Unk.Contains", span=""];
n120 [cluster="lambda expression", label="t.IsJust()", span="88-88"];
n121 [cluster="lambda expression", label="Exit lambda expression", span="88-88"];
n122 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", label="value.Length > 1 || value[0] == '-' || value[1] != '-'", span="100-100"];
n125 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", label="yield return Token.Value(value);", span="106-106"];
n126 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", label="yield break;", span="107-107"];
n128 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", label="yield return Token.Name(text);", span="112-112"];
n129 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", label="yield break;", span="113-113"];
n131 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", label="yield return Token.Name(first);", span="117-117"];
n137 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", label="yield return Token.Name(n);", span="127-127"];
n139 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", label="yield return Token.Value(text.Substring(seen.Count()));", span="136-136"];
n123 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", label="var text = value.Substring(1)", span="102-102"];
n127 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", label="value.Length == 2", span="110-110"];
n135 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", label="!seen.Contains(c) && nameLookup(n)", span="124-124"];
n140 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", label="Exit CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", span="96-96"];
n124 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", label="char.IsDigit(text[0])", span="104-104"];
n141 [cluster="string.Substring(int)", label="Entry string.Substring(int)", span="0-0"];
n130 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", label="var first = text.Substring(0, 1)", span="116-116"];
n133 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", label="text.Substring(1)", span="121-121"];
n138 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", label="seen.Count() < text.Length", span="134-134"];
n142 [cluster="char.IsDigit(char)", label="Entry char.IsDigit(char)", span="0-0"];
n143 [cluster="CommandLine.Core.Token.Name(string)", label="Entry CommandLine.Core.Token.Name(string)", span="19-19"];
n144 [cluster="string.Substring(int, int)", label="Entry string.Substring(int, int)", span="0-0"];
n132 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", label="var seen = new List<char> { first[0] }", span="119-119"];
n136 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", label="seen.Add(c)", span="126-126"];
n134 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", label="var n = new string(c, 1)", span="123-123"];
n145 [cluster="string.String(char, int)", label="Entry string.String(char, int)", span="0-0"];
n146 [cluster="System.Collections.Generic.List<T>.Contains(T)", label="Entry System.Collections.Generic.List<T>.Contains(T)", span="0-0"];
n147 [cluster="System.Collections.Generic.List<T>.Add(T)", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
n148 [cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0"];
n149 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", label="value.Length > 2 && value.StartsWith(''--'', StringComparison.Ordinal)", span="145-145"];
n153 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", label="yield return Token.Name(text);", span="151-151"];
n154 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", label="yield break;", span="152-152"];
n157 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", label="yield break;", span="157-157"];
n159 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", label="yield return Token.Name(parts[0]);", span="160-160"];
n160 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", label="yield return Token.Value(parts[1], true);", span="161-161"];
n150 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", label="var text = value.Substring(2)", span="147-147"];
n156 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", label="onError(new BadFormatTokenError(value))", span="156-156"];
n161 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", label="Exit CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", span="141-141"];
n151 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", label="var equalIndex = text.IndexOf('=')", span="148-148"];
n158 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", label="var parts = text.Split('=')", span="159-159"];
n152 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", label="equalIndex <= 0", span="149-149"];
n162 [cluster="string.IndexOf(char)", label="Entry string.IndexOf(char)", span="0-0"];
n155 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", label="equalIndex == 1", span="154-154"];
n163 [cluster="CommandLine.BadFormatTokenError.BadFormatTokenError(string)", label="Entry CommandLine.BadFormatTokenError.BadFormatTokenError(string)", span="196-196"];
n164 [cluster="System.Action<T>.Invoke(T)", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
n165 [cluster="string.Split(params char[])", label="Entry string.Split(params char[])", span="0-0"];
n166 [cluster="CommandLine.Core.Token.Value(string, bool)", label="Entry CommandLine.Core.Token.Value(string, bool)", span="29-29"];
m0_20 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="29-29"];
m0_24 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TokenizerTests.cs", label="((Ok<IEnumerable<Token>, Error>)result).Value.Success.ShouldBeEquivalentTo(expectedTokens)", span="62-62"];
m0_23 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TokenizerTests.cs", label="var result =\r\n                Tokenizer.ExplodeOptionList(\r\n                    Result.Succeed(\r\n                        Enumerable.Empty<Token>().Concat(new[] { Token.Name(''x''),\r\n                            Token.Name(''string-seq''), Token.Value(''aaa,bb,cccc''), Token.Name(''switch'') }),\r\n                        Enumerable.Empty<Error>()),\r\n                        optionName => NameLookup.HavingSeparator(optionName, specs, StringComparer.InvariantCulture))", span="53-59"];
m0_21 [cluster="CommandLine.Core.Specification.IsOption()", file="TokenizerTests.cs", label="Entry CommandLine.Core.Specification.IsOption()", span="11-11"];
m0_22 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TokenizerTests.cs", label="var specs = new[] { new OptionSpecification(string.Empty, ''string-seq'',\r\n                false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), ',', null, string.Empty, string.Empty, new List<string>(), typeof(IEnumerable<string>), TargetType.Sequence)}", span="49-50"];
m0_25 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", span="44-44"];
m0_8 [cluster="CommandLine.Core.SpecificationGuards.GuardAgainstSequenceWithWrongRange()", file="TokenizerTests.cs", label="return spec => spec.ConversionType.ToDescriptorKind() == TypeDescriptorKind.Sequence\r\n                && !spec.IsMinNotSpecified() && !spec.IsMaxNotSpecified() && spec.Min > spec.Max;", span="23-24"];
m0_0 [cluster="CommandLine.Core.SpecificationGuards.GuardAgainstScalarWithRange()", file="TokenizerTests.cs", label="Entry CommandLine.Core.SpecificationGuards.GuardAgainstScalarWithRange()", span="16-16"];
m0_4 [cluster="lambda expression", file="TokenizerTests.cs", label="spec.ConversionType.ToDescriptorKind() == TypeDescriptorKind.Scalar && (spec.Min > 0 || spec.Max > 0)", span="18-18"];
m0_3 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="18-18"];
m0_1 [cluster="CommandLine.Core.SpecificationGuards.GuardAgainstScalarWithRange()", file="TokenizerTests.cs", label="return spec => spec.ConversionType.ToDescriptorKind() == TypeDescriptorKind.Scalar && (spec.Min > 0 || spec.Max > 0);", span="18-18"];
m0_2 [cluster="CommandLine.Core.SpecificationGuards.GuardAgainstScalarWithRange()", file="TokenizerTests.cs", label="Exit CommandLine.Core.SpecificationGuards.GuardAgainstScalarWithRange()", span="16-16"];
m0_5 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="18-18"];
m0_6 [cluster="System.Type.ToDescriptorKind()", file="TokenizerTests.cs", label="Entry System.Type.ToDescriptorKind()", span="22-22"];
m0_7 [cluster="CommandLine.Core.SpecificationGuards.GuardAgainstSequenceWithWrongRange()", file="TokenizerTests.cs", label="Entry CommandLine.Core.SpecificationGuards.GuardAgainstSequenceWithWrongRange()", span="21-21"];
m0_19 [cluster="lambda expression", file="TokenizerTests.cs", label="spec.IsOption() && ((OptionSpecification)spec).LongName.Length == 1", span="29-29"];
m0_11 [cluster="lambda expression", file="TokenizerTests.cs", label="spec.ConversionType.ToDescriptorKind() == TypeDescriptorKind.Sequence\r\n                && !spec.IsMinNotSpecified() && !spec.IsMaxNotSpecified() && spec.Min > spec.Max", span="23-24"];
m0_26 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="59-59"];
m0_10 [cluster="System.Collections.Generic.List<T>.List()", file="TokenizerTests.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m0_12 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="TokenizerTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
m0_18 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="35-35"];
m0_38 [cluster="lambda expression", file="TokenizerTests.cs", label="name.Equals(''x'') || name.Equals(''string-seq'') || name.Equals(''switch'')", span="75-75"];
m0_37 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="75-75"];
m0_39 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="75-75"];
m0_16 [cluster="CommandLine.Core.SpecificationGuards.GuardAgainstOneCharLongName()", file="TokenizerTests.cs", label="return spec => spec.IsOption() && ((OptionSpecification)spec).LongName.Length == 1;", span="29-29"];
m0_17 [cluster="CommandLine.Core.SpecificationGuards.GuardAgainstOneCharLongName()", file="TokenizerTests.cs", label="Exit CommandLine.Core.SpecificationGuards.GuardAgainstOneCharLongName()", span="27-27"];
m0_27 [cluster="lambda expression", file="TokenizerTests.cs", label="NameLookup.HavingSeparator(optionName, specs, StringComparer.InvariantCulture)", span="59-59"];
m0_28 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="59-59"];
m0_13 [cluster="RailwaySharp.ErrorHandling.Result.Succeed<TSuccess, TMessage>(TSuccess, System.Collections.Generic.IEnumerable<TMessage>)", file="TokenizerTests.cs", label="Entry RailwaySharp.ErrorHandling.Result.Succeed<TSuccess, TMessage>(TSuccess, System.Collections.Generic.IEnumerable<TMessage>)", span="202-202"];
m0_29 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", span="68-68"];
m0_33 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", color=green, community=0, file="TokenizerTests.cs", label="result.ShouldBeEquivalentTo(expectedTokens)", prediction=0, span="90-90"];
m0_30 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", file="TokenizerTests.cs", label="var expectedTokens = new[] {\r\n                Token.Name(''x''), Token.Name(''string-seq''), Token.Value(''aaa''), Token.Value(''bb''),\r\n                Token.Name(''unknown''), Token.Name(''switch'') }", span="71-73"];
m0_32 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", color=green, community=0, file="TokenizerTests.cs", label="var result =\r\n                Tokenizer.Normalize(\r\n                    Result.Succeed(\r\n                        Enumerable.Empty<Token>()\r\n                            .Concat(\r\n                                new[] {\r\n                                    Token.Name(''x''), Token.Name(''string-seq''), Token.Value(''aaa''), Token.Value(''bb''),\r\n                                    Token.Name(''unknown''), Token.Value(''value0'', true), Token.Name(''switch'') }),\r\n                        Enumerable.Empty<Error>()),\r\n                    nameLookup)", prediction=1, span="78-87"];
m0_31 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", file="TokenizerTests.cs", label="Func<string, bool> nameLookup =\r\n                name => name.Equals(''x'') || name.Equals(''string-seq'') || name.Equals(''switch'')", span="74-75"];
m0_34 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", span="68-68"];
m0_15 [cluster="CommandLine.Core.SpecificationGuards.GuardAgainstOneCharLongName()", file="TokenizerTests.cs", label="Entry CommandLine.Core.SpecificationGuards.GuardAgainstOneCharLongName()", span="27-27"];
m0_40 [cluster="string.Equals(string)", file="TokenizerTests.cs", label="Entry string.Equals(string)", span="0-0"];
m0_9 [cluster="CommandLine.Core.SpecificationGuards.GuardAgainstSequenceWithWrongRange()", file="TokenizerTests.cs", label="Exit CommandLine.Core.SpecificationGuards.GuardAgainstSequenceWithWrongRange()", span="21-21"];
m0_36 [cluster="Unk.Normalize", file="TokenizerTests.cs", label="Entry Unk.Normalize", span=""];
m0_35 [cluster="CommandLine.Core.Token.Value(string, bool)", file="TokenizerTests.cs", label="Entry CommandLine.Core.Token.Value(string, bool)", span="29-29"];
m0_14 [cluster="CommandLine.Core.Specification.IsMaxNotSpecified()", file="TokenizerTests.cs", label="Entry CommandLine.Core.Specification.IsMaxNotSpecified()", span="75-75"];
m0_41 [file="TokenizerTests.cs", label=specs, span=""];
m0_42 [file="TokenizerTests.cs", label=specs, span=""];
n168 -> n48  [color=darkseagreen4, key=1, label=values, style=dashed];
n169 -> n62  [color=darkseagreen4, key=1, label="System.Func<string, CSharpx.Maybe<char>>", style=dashed];
n170 -> n67  [color=darkseagreen4, key=1, label=int, style=dashed];
n171 -> n74  [color=darkseagreen4, key=1, label=replaces, style=dashed];
n172 -> n81  [color=darkseagreen4, key=1, label=int, style=dashed];
n173 -> n84  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
n175 -> n101  [color=darkseagreen4, key=1, label="System.Func<string, bool>", style=dashed];
n175 -> n109  [color=darkseagreen4, key=1, label="System.Func<string, bool>", style=dashed];
n176 -> n116  [color=darkseagreen4, key=1, label=indexes, style=dashed];
n10 -> n156  [color=darkseagreen4, key=1, label=string, style=dashed];
n11 -> n127  [color=darkseagreen4, key=1, label=string, style=dashed];
n11 -> n135  [color=darkseagreen4, key=1, label="System.Func<string, bool>", style=dashed];
n23 -> n28  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
n24 -> n37  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n25 -> n41  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n25 -> n27  [color=darkseagreen4, key=1, label=tokenizerResult, style=dashed];
n26 -> n44  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n26 -> n48  [color=darkseagreen4, key=1, label=values, style=dashed];
n27 -> n47  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n50 -> n62  [color=darkseagreen4, key=1, label="System.Func<string, CSharpx.Maybe<char>>", style=dashed];
n50 -> n55  [color=darkseagreen4, key=1, label="RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>", style=dashed];
n52 -> n61  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n52 -> n70  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n52 -> n74  [color=darkseagreen4, key=1, label=replaces, style=dashed];
n62 -> n66  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n53 -> n73  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n61 -> n67  [color=darkseagreen4, key=1, label=int, style=dashed];
n74 -> n80  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n74 -> n83  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n54 -> n87  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n73 -> n81  [color=darkseagreen4, key=1, label=int, style=dashed];
n73 -> n84  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
n90 -> n101  [color=darkseagreen4, key=1, label="System.Func<string, bool>", style=dashed];
n90 -> n109  [color=darkseagreen4, key=1, label="System.Func<string, bool>", style=dashed];
n92 -> n99  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n92 -> n111  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n92 -> n116  [color=darkseagreen4, key=1, label=indexes, style=dashed];
n101 -> n108  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n93 -> n115  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n93 -> n119  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n93 -> n93  [color=darkseagreen4, key=1, label=t, style=dashed];
n99 -> n101  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
n123 -> n128  [color=darkseagreen4, key=1, label=text, style=dashed];
n123 -> n133  [color=darkseagreen4, key=1, label=text, style=dashed];
n123 -> n138  [color=darkseagreen4, key=1, label=text, style=dashed];
n123 -> n139  [color=darkseagreen4, key=1, label=text, style=dashed];
n133 -> n135  [color=darkseagreen4, key=1, label=c, style=dashed];
n133 -> n136  [color=darkseagreen4, key=1, label=c, style=dashed];
n132 -> n135  [color=darkseagreen4, key=1, label=seen, style=dashed];
n132 -> n136  [color=darkseagreen4, key=1, label=seen, style=dashed];
n132 -> n138  [color=darkseagreen4, key=1, label=seen, style=dashed];
n132 -> n139  [color=darkseagreen4, key=1, label=seen, style=dashed];
n134 -> n137  [color=darkseagreen4, key=1, label=n, style=dashed];
n150 -> n153  [color=darkseagreen4, key=1, label=text, style=dashed];
n151 -> n155  [color=darkseagreen4, key=1, label=equalIndex, style=dashed];
n158 -> n160  [color=darkseagreen4, key=1, label=parts, style=dashed];
m0_23 -> m0_26  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_21 -> m0_24  [color=darkseagreen4, key=1, label=expectedTokens, style=dashed];
m0_22 -> m0_27  [color=darkseagreen4, key=1, label=specs, style=dashed];
m0_8 -> m0_11  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m0_3 -> m0_16  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_1 -> m0_4  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m0_2 -> m0_17  [color=darkseagreen4, key=1, label=specs, style=dashed];
m0_16 -> m0_19  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m0_30 -> m0_33  [color=green, key=1, label=expectedTokens, style=dashed];
m0_31 -> m0_38  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_41 -> m0_17  [color=darkseagreen4, key=1, label=specs, style=dashed];
m0_42 -> m0_27  [color=darkseagreen4, key=1, label=specs, style=dashed];
}
