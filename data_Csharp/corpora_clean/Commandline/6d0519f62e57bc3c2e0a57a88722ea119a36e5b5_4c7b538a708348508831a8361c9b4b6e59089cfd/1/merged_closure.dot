digraph  {
n62 [label="System.StringComparer", span=""];
n63 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
n64 [label="System.Collections.Generic.IEnumerable<string>", span=""];
n65 [label="System.StringComparer", span=""];
n66 [label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>", span=""];
n67 [label=string, span=""];
n68 [label="System.StringComparer", span=""];
n0 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12"];
n1 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="return Choose(\r\n                (args, optionSpecs) => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer)),\r\n                types,\r\n                arguments,\r\n                nameComparer,\r\n                parsingCulture);", span="18-23"];
n5 [cluster="lambda expression", label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer))", span="19-19"];
n9 [cluster="lambda expression", label="NameLookup.Contains(name, optionSpecs, nameComparer)", span="19-19"];
n2 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Exit CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12"];
n3 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="26-26"];
n4 [cluster="lambda expression", label="Entry lambda expression", span="19-19"];
n6 [cluster="lambda expression", label="Exit lambda expression", span="19-19"];
n7 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11"];
n8 [cluster="lambda expression", label="Entry lambda expression", span="19-19"];
n10 [cluster="lambda expression", label="Exit lambda expression", span="19-19"];
n11 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
n12 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var verbs = Verb.SelectFromTypes(types)", span="33-33"];
n13 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="return arguments.Empty()\r\n                ? ParserResult.Create<object>(\r\n                    ParserResultType.Verbs, new NullInstance(), new[] { new NoVerbSelectedError() }, Maybe.Just(types))\r\n                : nameComparer.Equals(''help'', arguments.First())\r\n                   ? ParserResult.Create<object>(\r\n                        ParserResultType.Verbs,\r\n                        new NullInstance(), new[] { CreateHelpVerbRequestedError(\r\n                            verbs,\r\n                            arguments.Skip(1).SingleOrDefault() ?? string.Empty,\r\n                            nameComparer) }, Maybe.Just(types))\r\n                   : MatchVerb(tokenizer, verbs, arguments, nameComparer, parsingCulture);", span="35-45"];
n15 [cluster="CommandLine.Core.Verb.SelectFromTypes(System.Collections.Generic.IEnumerable<System.Type>)", label="Entry CommandLine.Core.Verb.SelectFromTypes(System.Collections.Generic.IEnumerable<System.Type>)", span="40-40"];
n14 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Exit CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="26-26"];
n16 [cluster="System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", span="62-62"];
n17 [cluster="CommandLine.NullInstance.NullInstance()", label="Entry CommandLine.NullInstance.NullInstance()", span="9-9"];
n18 [cluster="CommandLine.NoVerbSelectedError.NoVerbSelectedError()", label="Entry CommandLine.NoVerbSelectedError.NoVerbSelectedError()", span="406-406"];
n19 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68"];
n20 [cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>, CommandLine.Infrastructure.Maybe<System.Collections.Generic.IEnumerable<System.Type>>)", label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>, CommandLine.Infrastructure.Maybe<System.Collections.Generic.IEnumerable<System.Type>>)", span="105-105"];
n21 [cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0"];
n22 [cluster="System.StringComparer.Equals(string, string)", label="Entry System.StringComparer.Equals(string, string)", span="0-0"];
n23 [cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0"];
n24 [cluster="System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", span="0-0"];
n25 [cluster="CommandLine.Core.InstanceChooser.CreateHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", label="Entry CommandLine.Core.InstanceChooser.CreateHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", span="69-69"];
n26 [cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="48-48"];
n27 [cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="return verbs.Any(a => nameComparer.Equals(a.Item1.Name, arguments.First()))\r\n                ? InstanceBuilder.Build(\r\n                    Maybe.Just<Func<object>>(() => Activator.CreateInstance(verbs.Single(v => nameComparer.Equals(v.Item1.Name, arguments.First())).Item2)),\r\n                    tokenizer,\r\n                    arguments.Skip(1),\r\n                    nameComparer,\r\n                    parsingCulture)\r\n                : ParserResult.Create<object>(\r\n                    ParserResultType.Verbs,\r\n                    new NullInstance(),\r\n                    new[] { new BadVerbSelectedError(arguments.First()) },\r\n                    Maybe.Just(verbs.Select(v => v.Item2)));", span="55-66"];
n36 [cluster="lambda expression", label="nameComparer.Equals(a.Item1.Name, arguments.First())", span="55-55"];
n39 [cluster="lambda expression", label="Activator.CreateInstance(verbs.Single(v => nameComparer.Equals(v.Item1.Name, arguments.First())).Item2)", span="57-57"];
n44 [cluster="lambda expression", label="nameComparer.Equals(v.Item1.Name, arguments.First())", span="57-57"];
n28 [cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Exit CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="48-48"];
n29 [cluster="Unk.Any", label="Entry Unk.Any", span=""];
n30 [cluster="Unk.>", label="Entry Unk.>", span=""];
n31 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="34-34"];
n32 [cluster="CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", label="Entry CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", span="342-342"];
n33 [cluster="Unk.Select", label="Entry Unk.Select", span=""];
n34 [cluster="Unk.Just", label="Entry Unk.Just", span=""];
n35 [cluster="lambda expression", label="Entry lambda expression", span="55-55"];
n38 [cluster="lambda expression", label="Entry lambda expression", span="57-57"];
n46 [cluster="lambda expression", label="Entry lambda expression", span="66-66"];
n37 [cluster="lambda expression", label="Exit lambda expression", span="55-55"];
n40 [cluster="lambda expression", label="Exit lambda expression", span="57-57"];
n41 [cluster="Unk.Single", label="Entry Unk.Single", span=""];
n42 [cluster="Unk.CreateInstance", label="Entry Unk.CreateInstance", span=""];
n43 [cluster="lambda expression", label="Entry lambda expression", span="57-57"];
n45 [cluster="lambda expression", label="Exit lambda expression", span="57-57"];
n47 [cluster="lambda expression", label="v.Item2", span="66-66"];
n48 [cluster="lambda expression", label="Exit lambda expression", span="66-66"];
n49 [cluster="CommandLine.Core.InstanceChooser.CreateHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", label="return verb.Length > 0\r\n                      ? verbs.SingleOrDefault(v => nameComparer.Equals(v.Item1.Name, verb))\r\n                             .ToMaybe()\r\n                             .Return(\r\n                                 v => new HelpVerbRequestedError(v.Item1.Name, v.Item2, true),\r\n                                 new HelpVerbRequestedError(null, null, false))\r\n                      : new HelpVerbRequestedError(null, null, false);", span="74-80"];
n56 [cluster="lambda expression", label="nameComparer.Equals(v.Item1.Name, verb)", span="75-75"];
n50 [cluster="CommandLine.Core.InstanceChooser.CreateHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", label="Exit CommandLine.Core.InstanceChooser.CreateHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", span="69-69"];
n51 [cluster="Unk.SingleOrDefault", label="Entry Unk.SingleOrDefault", span=""];
n52 [cluster="Unk.ToMaybe", label="Entry Unk.ToMaybe", span=""];
n53 [cluster="CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", label="Entry CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", span="368-368"];
n54 [cluster="Unk.Return", label="Entry Unk.Return", span=""];
n55 [cluster="lambda expression", label="Entry lambda expression", span="75-75"];
n58 [cluster="lambda expression", label="Entry lambda expression", span="78-78"];
n57 [cluster="lambda expression", label="Exit lambda expression", span="75-75"];
n59 [cluster="lambda expression", label="new HelpVerbRequestedError(v.Item1.Name, v.Item2, true)", span="78-78"];
n60 [cluster="lambda expression", label="Exit lambda expression", span="78-78"];
n61 [cluster="HelpVerbRequestedError.cstr", label="Entry HelpVerbRequestedError.cstr", span=""];
m1_39 [cluster="Unk.Be", file="SpecificationPropertyRules.cs", label="Entry Unk.Be", span=""];
m1_10 [cluster="CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.Failed_verb_parsing_prints_particular_help_screen()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.Failed_verb_parsing_prints_particular_help_screen()", span="62-62"];
m1_14 [cluster="CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.Failed_verb_parsing_prints_particular_help_screen()", color=green, community=0, file="SpecificationPropertyRules.cs", label="var testWriter = new StringWriter()", prediction=0, span="68-68"];
m1_13 [cluster="CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.Failed_verb_parsing_prints_particular_help_screen()", file="SpecificationPropertyRules.cs", label="var options = new OptionsWithVerbsHelp()", span="67-67"];
m1_15 [cluster="CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.Failed_verb_parsing_prints_particular_help_screen()", file="SpecificationPropertyRules.cs", label="ReflectionUtil.AssemblyFromWhichToPullInformation = Assembly.GetExecutingAssembly()", span="69-69"];
m1_16 [cluster="CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.Failed_verb_parsing_prints_particular_help_screen()", file="SpecificationPropertyRules.cs", label="var parser = new Parser(with => with.HelpWriter = testWriter)", span="70-70"];
m1_19 [cluster="CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.Failed_verb_parsing_prints_particular_help_screen()", file="SpecificationPropertyRules.cs", label="var helpText = testWriter.ToString()", span="80-80"];
m1_26 [cluster="CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.Failed_verb_parsing_prints_particular_help_screen()", color=green, community=0, file="SpecificationPropertyRules.cs", label="invokedVerbInstance.Should().Be(null)", prediction=1, span="89-89"];
m1_17 [cluster="CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.Failed_verb_parsing_prints_particular_help_screen()", file="SpecificationPropertyRules.cs", label="var result = parser.ParseArguments(new string[] { ''clone'', ''--no_hardlinks'' }, options,\r\n                (verb, subOptions) =>\r\n                    {\r\n                        invokedVerb = verb;\r\n                        invokedVerbInstance = subOptions;\r\n                    })", span="71-76"];
m1_25 [cluster="CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.Failed_verb_parsing_prints_particular_help_screen()", file="SpecificationPropertyRules.cs", label="invokedVerb.Should().Be(''clone'')", span="88-88"];
m1_12 [cluster="CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.Failed_verb_parsing_prints_particular_help_screen()", file="SpecificationPropertyRules.cs", label="object invokedVerbInstance = null", span="65-65"];
m1_18 [cluster="CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.Failed_verb_parsing_prints_particular_help_screen()", file="SpecificationPropertyRules.cs", label="result.Should().BeFalse()", span="78-78"];
m1_20 [cluster="CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.Failed_verb_parsing_prints_particular_help_screen()", file="SpecificationPropertyRules.cs", label="Console.WriteLine(helpText)", span="81-81"];
m1_21 [cluster="CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.Failed_verb_parsing_prints_particular_help_screen()", file="SpecificationPropertyRules.cs", label="var lines = helpText.Split(new string[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries)", span="82-82"];
m1_11 [cluster="CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.Failed_verb_parsing_prints_particular_help_screen()", file="SpecificationPropertyRules.cs", label="string invokedVerb = null", span="64-64"];
m1_24 [cluster="CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.Failed_verb_parsing_prints_particular_help_screen()", file="SpecificationPropertyRules.cs", label="lines[7].Trim().Should().Be(''-q, --quiet       Suppress summary message.'')", span="86-86"];
m1_22 [cluster="CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.Failed_verb_parsing_prints_particular_help_screen()", file="SpecificationPropertyRules.cs", label="lines[5].Trim().Should().Be(''--no-hardlinks    Optimize the cloning process from a repository on a local'')", span="84-84"];
m1_23 [cluster="CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.Failed_verb_parsing_prints_particular_help_screen()", file="SpecificationPropertyRules.cs", label="lines[6].Trim().Should().Be(''filesystem by copying files.'')", span="85-85"];
m1_27 [cluster="CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.Failed_verb_parsing_prints_particular_help_screen()", file="SpecificationPropertyRules.cs", label="Exit CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.Failed_verb_parsing_prints_particular_help_screen()", span="62-62"];
m1_3 [cluster="CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.DoCoreTestForIndex(string[])", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.DoCoreTestForIndex(string[])", span="121-121"];
m1_70 [cluster="CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.DoCoreTestForIndex(string[])", file="SpecificationPropertyRules.cs", label="var testWriter = new StringWriter()", span="124-124"];
m1_74 [cluster="CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.DoCoreTestForIndex(string[])", file="SpecificationPropertyRules.cs", label="result.Should().BeFalse()", span="132-132"];
m1_78 [cluster="CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.DoCoreTestForIndex(string[])", file="SpecificationPropertyRules.cs", label="lines[5].Trim().Should().Be(''add       Add file contents to the index.'')", span="138-138"];
m1_79 [cluster="CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.DoCoreTestForIndex(string[])", file="SpecificationPropertyRules.cs", label="lines[6].Trim().Should().Be(''commit    Record changes to the repository.'')", span="139-139"];
m1_80 [cluster="CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.DoCoreTestForIndex(string[])", file="SpecificationPropertyRules.cs", label="lines[7].Trim().Should().Be(''clone     Clone a repository into a new directory.'')", span="140-140"];
m1_69 [cluster="CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.DoCoreTestForIndex(string[])", file="SpecificationPropertyRules.cs", label="var options = new OptionsWithVerbsHelp()", span="123-123"];
m1_71 [cluster="CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.DoCoreTestForIndex(string[])", file="SpecificationPropertyRules.cs", label="ReflectionUtil.AssemblyFromWhichToPullInformation = Assembly.GetExecutingAssembly()", span="125-125"];
m1_72 [cluster="CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.DoCoreTestForIndex(string[])", file="SpecificationPropertyRules.cs", label="var parser = new Parser(with => with.HelpWriter = testWriter)", span="126-126"];
m1_75 [cluster="CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.DoCoreTestForIndex(string[])", file="SpecificationPropertyRules.cs", label="var helpText = testWriter.ToString()", span="134-134"];
m1_73 [cluster="CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.DoCoreTestForIndex(string[])", file="SpecificationPropertyRules.cs", label="var result = parser.ParseArguments(args, options,\r\n                (_, __) =>\r\n                    {\r\n                    })", span="127-130"];
m1_77 [cluster="CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.DoCoreTestForIndex(string[])", file="SpecificationPropertyRules.cs", label="var lines = helpText.Split(new string[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries)", span="136-136"];
m1_76 [cluster="CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.DoCoreTestForIndex(string[])", file="SpecificationPropertyRules.cs", label="Console.WriteLine(helpText)", span="135-135"];
m1_81 [cluster="CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.DoCoreTestForIndex(string[])", file="SpecificationPropertyRules.cs", label="Exit CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.DoCoreTestForIndex(string[])", span="121-121"];
m1_35 [cluster="System.IO.StringWriter.ToString()", file="SpecificationPropertyRules.cs", label="Entry System.IO.StringWriter.ToString()", span="0-0"];
m1_29 [cluster="System.IO.StringWriter.StringWriter()", file="SpecificationPropertyRules.cs", label="Entry System.IO.StringWriter.StringWriter()", span="0-0"];
m1_30 [cluster="System.Reflection.Assembly.GetExecutingAssembly()", file="SpecificationPropertyRules.cs", label="Entry System.Reflection.Assembly.GetExecutingAssembly()", span="0-0"];
m1_31 [cluster="CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)", span="86-86"];
m1_4 [cluster="CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.Requesting_help_prints_help_index()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.Requesting_help_prints_help_index()", span="50-50"];
m1_5 [cluster="CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.Requesting_help_prints_help_index()", file="SpecificationPropertyRules.cs", label="DoCoreTestForIndex(new string[] {''help''})", span="52-52"];
m1_6 [cluster="CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.Requesting_help_prints_help_index()", file="SpecificationPropertyRules.cs", label="Exit CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.Requesting_help_prints_help_index()", span="50-50"];
m1_38 [cluster="string.Trim()", file="SpecificationPropertyRules.cs", label="Entry string.Trim()", span="0-0"];
m1_34 [cluster="Unk.BeFalse", file="SpecificationPropertyRules.cs", label="Entry Unk.BeFalse", span=""];
m1_85 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="128-130"];
m1_41 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="with.HelpWriter = testWriter", span="70-70"];
m1_40 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="70-70"];
m1_42 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="70-70"];
m1_43 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="72-76"];
m1_63 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="with.HelpWriter = testWriter", span="102-102"];
m1_83 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="with.HelpWriter = testWriter", span="126-126"];
m1_46 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="72-76"];
m1_44 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="invokedVerb = verb", span="74-74"];
m1_45 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="invokedVerbInstance = subOptions", span="75-75"];
m1_62 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="102-102"];
m1_64 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="102-102"];
m1_82 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="126-126"];
m1_84 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="126-126"];
m1_65 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="104-108"];
m1_68 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="104-108"];
m1_66 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="invokedVerb = verb", span="106-106"];
m1_67 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="invokedVerbInstance = subOptions", span="107-107"];
m1_86 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="128-130"];
m1_47 [cluster="CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.Requesting_help_of_particular_verb_without_instance_should_work()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.Requesting_help_of_particular_verb_without_instance_should_work()", span="94-94"];
m1_51 [cluster="CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.Requesting_help_of_particular_verb_without_instance_should_work()", file="SpecificationPropertyRules.cs", label="var testWriter = new StringWriter()", span="100-100"];
m1_55 [cluster="CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.Requesting_help_of_particular_verb_without_instance_should_work()", file="SpecificationPropertyRules.cs", label="result.Should().BeFalse()", span="110-110"];
m1_59 [cluster="CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.Requesting_help_of_particular_verb_without_instance_should_work()", file="SpecificationPropertyRules.cs", label="invokedVerb.Should().Be(''help'')", span="116-116"];
m1_60 [cluster="CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.Requesting_help_of_particular_verb_without_instance_should_work()", file="SpecificationPropertyRules.cs", label="invokedVerbInstance.Should().Be(null)", span="117-117"];
m1_50 [cluster="CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.Requesting_help_of_particular_verb_without_instance_should_work()", file="SpecificationPropertyRules.cs", label="var options = new OptionsWithVerbsHelp()", span="99-99"];
m1_52 [cluster="CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.Requesting_help_of_particular_verb_without_instance_should_work()", file="SpecificationPropertyRules.cs", label="ReflectionUtil.AssemblyFromWhichToPullInformation = Assembly.GetExecutingAssembly()", span="101-101"];
m1_53 [cluster="CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.Requesting_help_of_particular_verb_without_instance_should_work()", file="SpecificationPropertyRules.cs", label="var parser = new Parser(with => with.HelpWriter = testWriter)", span="102-102"];
m1_56 [cluster="CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.Requesting_help_of_particular_verb_without_instance_should_work()", file="SpecificationPropertyRules.cs", label="var helpText = testWriter.ToString()", span="112-112"];
m1_48 [cluster="CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.Requesting_help_of_particular_verb_without_instance_should_work()", file="SpecificationPropertyRules.cs", label="string invokedVerb = null", span="96-96"];
m1_49 [cluster="CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.Requesting_help_of_particular_verb_without_instance_should_work()", file="SpecificationPropertyRules.cs", label="object invokedVerbInstance = null", span="97-97"];
m1_54 [cluster="CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.Requesting_help_of_particular_verb_without_instance_should_work()", file="SpecificationPropertyRules.cs", label="var result = parser.ParseArguments(new string[] {''help'', ''add''}, options,\r\n                (verb, subOptions) =>\r\n                    {\r\n                        invokedVerb = verb;\r\n                        invokedVerbInstance = subOptions;\r\n                    })", span="103-108"];
m1_58 [cluster="CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.Requesting_help_of_particular_verb_without_instance_should_work()", file="SpecificationPropertyRules.cs", label="var lines = helpText.Split(new string[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries)", span="114-114"];
m1_57 [cluster="CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.Requesting_help_of_particular_verb_without_instance_should_work()", file="SpecificationPropertyRules.cs", label="Console.WriteLine(helpText)", span="113-113"];
m1_61 [cluster="CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.Requesting_help_of_particular_verb_without_instance_should_work()", file="SpecificationPropertyRules.cs", label="Exit CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.Requesting_help_of_particular_verb_without_instance_should_work()", span="94-94"];
m1_32 [cluster="CommandLine.Parser.ParseArguments(string[], object, System.Action<string, object>)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Parser.ParseArguments(string[], object, System.Action<string, object>)", span="162-162"];
m1_7 [cluster="CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.Requesting_bad_help_prints_help_index()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.Requesting_bad_help_prints_help_index()", span="56-56"];
m1_8 [cluster="CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.Requesting_bad_help_prints_help_index()", file="SpecificationPropertyRules.cs", label="DoCoreTestForIndex(new string[] { ''help'', ''undefined'' })", span="58-58"];
m1_9 [cluster="CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.Requesting_bad_help_prints_help_index()", file="SpecificationPropertyRules.cs", label="Exit CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.Requesting_bad_help_prints_help_index()", span="56-56"];
m1_0 [cluster="CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.Failed_parsing_prints_help_index()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.Failed_parsing_prints_help_index()", span="44-44"];
m1_1 [cluster="CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.Failed_parsing_prints_help_index()", file="SpecificationPropertyRules.cs", label="DoCoreTestForIndex(new string[] {})", span="46-46"];
m1_2 [cluster="CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.Failed_parsing_prints_help_index()", file="SpecificationPropertyRules.cs", label="Exit CommandLine.Tests.Unit.Text.VerbsHelpTextFixture.Failed_parsing_prints_help_index()", span="44-44"];
m1_37 [cluster="string.Split(string[], System.StringSplitOptions)", file="SpecificationPropertyRules.cs", label="Entry string.Split(string[], System.StringSplitOptions)", span="0-0"];
m1_33 [cluster="Unk.Should", file="SpecificationPropertyRules.cs", label="Entry Unk.Should", span=""];
m1_36 [cluster="System.Console.WriteLine(string)", file="SpecificationPropertyRules.cs", label="Entry System.Console.WriteLine(string)", span="0-0"];
m1_28 [cluster="CommandLine.Tests.Fakes.OptionsWithVerbsHelp.OptionsWithVerbsHelp()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Tests.Fakes.OptionsWithVerbsHelp.OptionsWithVerbsHelp()", span="80-80"];
m1_88 [file="SpecificationPropertyRules.cs", label=testWriter, span=""];
m1_89 [file="SpecificationPropertyRules.cs", label=testWriter, span=""];
m1_90 [file="SpecificationPropertyRules.cs", label=testWriter, span=""];
m1_87 [file="SpecificationPropertyRules.cs", label="CommandLine.Tests.Unit.Text.VerbsHelpTextFixture", span=""];
n62 -> n5  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n62 -> n9  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n63 -> n9  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
n64 -> n36  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
n64 -> n39  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
n64 -> n44  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
n65 -> n36  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n65 -> n39  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n65 -> n44  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n66 -> n39  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>", style=dashed];
n67 -> n56  [color=darkseagreen4, key=1, label=string, style=dashed];
n68 -> n56  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n0 -> n5  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n0 -> n9  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n1 -> n4  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n5 -> n8  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n3 -> n13  [color=darkseagreen4, key=1, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>", style=dashed];
n4 -> n9  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
n25 -> n56  [color=darkseagreen4, key=1, label=string, style=dashed];
n26 -> n36  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
n26 -> n39  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>", style=dashed];
n26 -> n44  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
n27 -> n35  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n27 -> n38  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n27 -> n46  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n39 -> n43  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n49 -> n55  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n49 -> n58  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_17 -> m1_26  [color=green, key=1, label=invokedVerbInstance, style=dashed];
m1_17 -> m1_43  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_17 -> m1_25  [color=darkseagreen4, key=1, label=invokedVerb, style=dashed];
m1_21 -> m1_23  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_21 -> m1_24  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_73 -> m1_85  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_77 -> m1_79  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_77 -> m1_80  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_44 -> m1_46  [color=darkseagreen4, key=1, label=invokedVerb, style=dashed];
m1_66 -> m1_68  [color=darkseagreen4, key=1, label=invokedVerb, style=dashed];
m1_54 -> m1_59  [color=darkseagreen4, key=1, label=invokedVerb, style=dashed];
m1_54 -> m1_60  [color=darkseagreen4, key=1, label=invokedVerbInstance, style=dashed];
m1_54 -> m1_65  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_87 -> m1_1  [color=darkseagreen4, key=1, label="CommandLine.Tests.Unit.Text.VerbsHelpTextFixture", style=dashed];
m1_87 -> m1_5  [color=darkseagreen4, key=1, label="CommandLine.Tests.Unit.Text.VerbsHelpTextFixture", style=dashed];
m1_87 -> m1_8  [color=darkseagreen4, key=1, label="CommandLine.Tests.Unit.Text.VerbsHelpTextFixture", style=dashed];
}
