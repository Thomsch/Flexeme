digraph  {
m0_41 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="112-112"];
m0_42 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="117-121"];
m0_43 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="InstanceBuilderTests.cs", label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="124-124"];
m0_44 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="112-112"];
m0_358 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", span="835-835"];
m0_359 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="InstanceBuilderTests.cs", label="Action test = () => InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinMaxZero>>(() => new FakeOptionsWithMinMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="838-842"];
m0_360 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="InstanceBuilderTests.cs", label="Assert.Throws<ApplicationException>(test)", span="845-845"];
m0_361 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", span="835-835"];
m0_339 [cluster="Unk.>", file="InstanceBuilderTests.cs", label="Entry Unk.>", span=""];
m0_63 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="6-6"];
m0_152 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="385-385"];
m0_153 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndSeparator>>(() => new FakeOptionsWithSequenceAndSeparator()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="390-394"];
m0_154 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="InstanceBuilderTests.cs", label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="397-397"];
m0_155 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="385-385"];
m0_55 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", span="6-6"];
m0_267 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="636-636"];
m0_268 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="641-645"];
m0_269 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="InstanceBuilderTests.cs", label="Assert.True(expected.Equals(result.Value.StringValue))", span="648-648"];
m0_270 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="636-636"];
m0_335 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", span="807-807"];
m0_336 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="InstanceBuilderTests.cs", label="Action test = () => InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinZero>>(() => new FakeOptionsWithMinZero()),\r\n                new string[] {},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="810-814"];
m0_337 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="InstanceBuilderTests.cs", label="Assert.Throws<ApplicationException>(test)", span="817-817"];
m0_338 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", span="807-807"];
m0_308 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="740-740"];
m0_309 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNullables>>(() => new FakeOptionsWithNullables()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="745-749"];
m0_310 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="InstanceBuilderTests.cs", label="expected.ShouldBeEquivalentTo(result.Value.NullableLong)", span="752-752"];
m0_311 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="740-740"];
m0_79 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="320-320"];
m0_167 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="428-428"];
m0_168 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="431-437"];
m0_169 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs", label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="438-438"];
m0_171 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="451-451"];
m0_170 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithValues>>(() => new FakeOptionsWithValues()),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="441-448"];
m0_172 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="428-428"];
m0_259 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="615-615"];
m0_260 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="618-618"];
m0_261 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="621-625"];
m0_262 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="628-628"];
m0_263 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="615-615"];
m0_109 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="11-11"];
m0_9 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68"];
m0_204 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", span="4-4"];
m0_74 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="194-194"];
m0_75 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="197-197"];
m0_76 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraintAsValue>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="200-204"];
m0_77 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="207-207"];
m0_78 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="194-194"];
m0_247 [cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", file="InstanceBuilderTests.cs", label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="276-276"];
m0_92 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="233-233"];
m0_93 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="236-236"];
m0_94 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()),\r\n                new[] { ''one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="239-243"];
m0_95 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="246-246"];
m0_96 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="233-233"];
m0_184 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11"];
m0_315 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="760-760"];
m0_316 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithFSharpOption>>(() => new FakeOptionsWithFSharpOption()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="765-769"];
m0_318 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="InstanceBuilderTests.cs", label="expectedValue.ShouldBeEquivalentTo(result.Value.FileName.Value)", span="774-774"];
m0_319 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="InstanceBuilderTests.cs", label="expectedSome.ShouldBeEquivalentTo(FSharpOption<string>.get_IsSome(result.Value.FileName))", span="776-776"];
m0_317 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="InstanceBuilderTests.cs", label="result.Value.FileName != null", span="772-772"];
m0_320 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="760-760"];
m0_299 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", span="9-9"];
m0_307 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", span="4-4"];
m0_6 [cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6"];
m0_251 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="596-596"];
m0_252 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="599-599"];
m0_253 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="602-606"];
m0_254 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="609-609"];
m0_255 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="596-596"];
m0_110 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="276-276"];
m0_111 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="279-279"];
m0_112 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''3'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="282-286"];
m0_113 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="289-289"];
m0_114 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="276-276"];
m0_369 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", span="854-854"];
m0_370 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNamedAndEmptySets>>(() => new FakeOptionsWithNamedAndEmptySets()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="857-861"];
m0_371 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", file="InstanceBuilderTests.cs", label="result.Errors.Should().HaveCount(x => x == expected)", span="864-864"];
m0_372 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", span="854-854"];
m0_7 [cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="353-353"];
m0_378 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithNamedAndEmptySets.FakeOptionsWithNamedAndEmptySets()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithNamedAndEmptySets.FakeOptionsWithNamedAndEmptySets()", span="4-4"];
m0_105 [cluster="Unk.ShouldBeEquivalentTo", file="InstanceBuilderTests.cs", label="Entry Unk.ShouldBeEquivalentTo", span=""];
m0_399 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="903-903"];
m0_400 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithScalarValueAndSequenceStringAdjacent>>(() => new FakeOptionsWithScalarValueAndSequenceStringAdjacent()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="908-912"];
m0_401 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="InstanceBuilderTests.cs", label="expected.ShouldBeEquivalentTo(result.Value)", span="915-915"];
m0_402 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="903-903"];
m0_83 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="6-6"];
m0_144 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="363-363"];
m0_145 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceWithoutRange>>(() => new FakeOptionsWithSequenceWithoutRange()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="368-372"];
m0_146 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="InstanceBuilderTests.cs", label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="375-375"];
m0_147 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="363-363"];
m0_56 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="157-157"];
m0_57 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraint()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="162-166"];
m0_58 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="InstanceBuilderTests.cs", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="169-169"];
m0_59 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="157-157"];
m0_32 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="90-90"];
m0_33 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequence>>(() => new FakeOptionsWithSequence()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="95-99"];
m0_34 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="InstanceBuilderTests.cs", label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="102-102"];
m0_35 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="90-90"];
m0_412 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="928-928"];
m0_14 [cluster="lambda expression", file="InstanceBuilderTests.cs", label=fakeOptions, span="28-28"];
m0_13 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="28-28"];
m0_15 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="28-28"];
m0_21 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="49-49"];
m0_22 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptions()", span="49-49"];
m0_23 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="49-49"];
m0_28 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="72-72"];
m0_29 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithDouble()", span="72-72"];
m0_30 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="72-72"];
m0_37 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="96-96"];
m0_38 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSequence()", span="96-96"];
m0_39 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="96-96"];
m0_45 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="118-118"];
m0_46 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptions()", span="118-118"];
m0_47 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="118-118"];
m0_52 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="141-141"];
m0_53 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="141-141"];
m0_54 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="141-141"];
m0_60 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="163-163"];
m0_61 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="163-163"];
m0_62 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="163-163"];
m0_71 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="182-182"];
m0_72 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="182-182"];
m0_73 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="182-182"];
m0_80 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="201-201"];
m0_81 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="201-201"];
m0_82 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="201-201"];
m0_89 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="221-221"];
m0_90 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="221-221"];
m0_91 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="221-221"];
m0_97 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="240-240"];
m0_98 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="240-240"];
m0_99 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="240-240"];
m0_106 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="264-264"];
m0_107 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithEnum()", span="264-264"];
m0_108 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="264-264"];
m0_116 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="283-283"];
m0_117 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithEnum()", span="283-283"];
m0_118 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="283-283"];
m0_124 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="302-302"];
m0_125 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithEnum()", span="302-302"];
m0_126 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="302-302"];
m0_132 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="321-321"];
m0_133 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithEnum()", span="321-321"];
m0_134 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="321-321"];
m0_141 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="346-346"];
m0_142 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithValues()", span="346-346"];
m0_143 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="346-346"];
m0_148 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="369-369"];
m0_149 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSequenceWithoutRange()", span="369-369"];
m0_150 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="369-369"];
m0_156 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="391-391"];
m0_157 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSequenceAndSeparator()", span="391-391"];
m0_158 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="391-391"];
m0_164 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="413-413"];
m0_165 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSequenceAndSeparator()", span="413-413"];
m0_166 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="413-413"];
m0_174 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="442-442"];
m0_177 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="443-445"];
m0_175 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithValues()", span="442-442"];
m0_176 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="442-442"];
m0_178 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="444-445"];
m0_182 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="445-445"];
m0_186 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="445-445"];
m0_179 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="443-445"];
m0_181 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="445-445"];
m0_183 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="445-445"];
m0_185 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="445-445"];
m0_187 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="445-445"];
m0_195 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="468-468"];
m0_196 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSets()", span="468-468"];
m0_197 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="468-468"];
m0_205 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="488-488"];
m0_206 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionWithRequiredAndSet()", span="488-488"];
m0_207 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="488-488"];
m0_213 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="508-508"];
m0_214 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionWithRequiredAndSet()", span="508-508"];
m0_215 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="508-508"];
m0_222 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="528-528"];
m0_223 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionWithRequiredAndSet()", span="528-528"];
m0_224 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="528-528"];
m0_230 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="546-546"];
m0_231 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionWithRequired()", span="546-546"];
m0_232 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="546-546"];
m0_239 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="565-565"];
m0_240 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptions()", span="565-565"];
m0_241 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="565-565"];
m0_248 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="584-584"];
m0_249 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptions()", span="584-584"];
m0_250 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="584-584"];
m0_256 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="603-603"];
m0_257 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptions()", span="603-603"];
m0_258 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="603-603"];
m0_264 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="622-622"];
m0_265 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptions()", span="622-622"];
m0_266 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="622-622"];
m0_272 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="642-642"];
m0_273 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptions()", span="642-642"];
m0_274 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="642-642"];
m0_280 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="661-661"];
m0_281 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithRequiredValue()", span="661-661"];
m0_282 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="661-661"];
m0_288 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="683-683"];
m0_289 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptions()", span="683-683"];
m0_290 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="683-683"];
m0_296 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="702-702"];
m0_297 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSequenceMinMaxEqual()", span="702-702"];
m0_298 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="702-702"];
m0_304 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="724-724"];
m0_305 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithNullables()", span="724-724"];
m0_306 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="724-724"];
m0_312 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="746-746"];
m0_313 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithNullables()", span="746-746"];
m0_314 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="746-746"];
m0_322 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="766-766"];
m0_323 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithFSharpOption()", span="766-766"];
m0_324 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="766-766"];
m0_332 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="790-790"];
m0_333 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithFSharpOption()", span="790-790"];
m0_334 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="790-790"];
m0_340 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="810-814"];
m0_341 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinZero>>(() => new FakeOptionsWithMinZero()),\r\n                new string[] {},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="810-814"];
m0_342 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="810-814"];
m0_343 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="811-811"];
m0_344 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithMinZero()", span="811-811"];
m0_345 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="811-811"];
m0_351 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="824-828"];
m0_352 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMaxZero>>(() => new FakeOptionsWithMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="824-828"];
m0_353 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="824-828"];
m0_354 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="825-825"];
m0_355 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithMaxZero()", span="825-825"];
m0_356 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="825-825"];
m0_362 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="838-842"];
m0_363 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinMaxZero>>(() => new FakeOptionsWithMinMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="838-842"];
m0_364 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="838-842"];
m0_365 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="839-839"];
m0_366 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithMinMaxZero()", span="839-839"];
m0_367 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="839-839"];
m0_380 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="x == expected", span="864-864"];
m0_375 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="858-858"];
m0_379 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="864-864"];
m0_376 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithNamedAndEmptySets()", span="858-858"];
m0_377 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="858-858"];
m0_381 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="864-864"];
m0_390 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="x == expected", span="879-879"];
m0_386 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="873-873"];
m0_389 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="879-879"];
m0_387 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptions()", span="873-873"];
m0_388 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="873-873"];
m0_391 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="879-879"];
m0_396 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="890-890"];
m0_397 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithRequiredValue()", span="890-890"];
m0_398 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="890-890"];
m0_403 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="909-909"];
m0_404 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="909-909"];
m0_405 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="909-909"];
m0_413 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptions()", span="928-928"];
m0_414 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="928-928"];
m0_11 [cluster="CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", file="InstanceBuilderTests.cs", label="Entry CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", span="87-87"];
m0_31 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", span="4-4"];
m0_159 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="6-6"];
m0_180 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="31-31"];
m0_382 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", span="869-869"];
m0_383 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="872-876"];
m0_384 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="InstanceBuilderTests.cs", label="result.Errors.Should().HaveCount(x => x == expected)", span="879-879"];
m0_385 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", span="869-869"];
m0_194 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="298-298"];
m0_233 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4"];
m0_419 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63"];
m0_48 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="135-135"];
m0_49 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraint()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="140-144"];
m0_50 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="InstanceBuilderTests.cs", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="147-147"];
m0_51 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="135-135"];
m0_10 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12"];
m0_119 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="295-295"];
m0_120 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="298-298"];
m0_121 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''Yellow'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="301-305"];
m0_122 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="308-308"];
m0_123 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="295-295"];
m0_140 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6"];
m0_24 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="66-66"];
m0_25 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithDouble>>(() => new FakeOptionsWithDouble()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="71-75"];
m0_26 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="InstanceBuilderTests.cs", label="Assert.Equal(expected, result.Value.DoubleValue)", span="78-78"];
m0_27 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="66-66"];
m0_283 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", span="4-4"];
m0_368 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithMinMaxZero.FakeOptionsWithMinMaxZero()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMinMaxZero.FakeOptionsWithMinMaxZero()", span="6-6"];
m0_12 [cluster="Unk.True", file="InstanceBuilderTests.cs", label="Entry Unk.True", span=""];
m0_275 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="654-654"];
m0_276 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new MissingRequiredOptionError(NameInfo.EmptyName) }", span="657-657"];
m0_277 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithRequiredValue>>(() => new FakeOptionsWithRequiredValue()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="660-664"];
m0_278 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="667-667"];
m0_279 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="654-654"];
m0_234 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="558-558"];
m0_235 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="561-561"];
m0_236 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="564-568"];
m0_237 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="571-571"];
m0_238 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="558-558"];
m0_325 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()", span="6-6"];
m0_321 [cluster="Unk.get_IsSome", file="InstanceBuilderTests.cs", label="Entry Unk.get_IsSome", span=""];
m0_188 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
m0_0 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="18-18"];
m0_1 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs", label="var fakeOptions = new FakeOptions()", span="21-21"];
m0_2 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs", label="var expectedResult = ParserResult.Create(\r\n                ParserResultType.Options,\r\n                fakeOptions, new Error[] { new HelpRequestedError() })", span="22-24"];
m0_3 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => fakeOptions),\r\n                new[] { ''--help'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="27-31"];
m0_4 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.Equals(result))", span="34-34"];
m0_5 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="18-18"];
m0_225 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="539-539"];
m0_226 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="542-542"];
m0_227 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequired>>(() => new FakeOptionWithRequired()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="545-549"];
m0_228 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="552-552"];
m0_229 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="539-539"];
m0_216 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="519-519"];
m0_217 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs", label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="521-525"];
m0_218 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="527-531"];
m0_219 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="534-534"];
m0_220 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="519-519"];
m0_36 [cluster="Unk.SequenceEqual", file="InstanceBuilderTests.cs", label="Entry Unk.SequenceEqual", span=""];
m0_127 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="314-314"];
m0_128 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="317-317"];
m0_129 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''RED'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="320-324"];
m0_130 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="327-327"];
m0_131 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="314-314"];
m0_69 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="265-265"];
m0_392 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="884-884"];
m0_393 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithRequiredValue>>(() => new FakeOptionsWithRequiredValue()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="889-893"];
m0_394 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="InstanceBuilderTests.cs", label="expected.ShouldBeEquivalentTo(result.Value)", span="896-896"];
m0_395 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="884-884"];
m0_84 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="214-214"];
m0_85 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="217-217"];
m0_86 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraint()),\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="220-224"];
m0_87 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="227-227"];
m0_88 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="214-214"];
m0_64 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="175-175"];
m0_65 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="178-178"];
m0_66 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraint()),\r\n                new[] { ''-s'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="181-185"];
m0_67 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="188-188"];
m0_68 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="175-175"];
m0_135 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="333-333"];
m0_136 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="336-342"];
m0_137 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithValues>>(() => new FakeOptionsWithValues()),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="345-349"];
m0_138 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="352-352"];
m0_139 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="333-333"];
m0_406 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="6-6"];
m0_357 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithMaxZero.FakeOptionsWithMaxZero()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMaxZero.FakeOptionsWithMaxZero()", span="6-6"];
m0_374 [cluster="Unk.HaveCount", file="InstanceBuilderTests.cs", label="Entry Unk.HaveCount", span=""];
m0_198 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4"];
m0_271 [cluster="string.Equals(string)", file="InstanceBuilderTests.cs", label="Entry string.Equals(string)", span="0-0"];
m0_70 [cluster="CommandLine.NameInfo.NameInfo(string, string)", file="InstanceBuilderTests.cs", label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20"];
m0_16 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="43-43"];
m0_17 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="48-52"];
m0_18 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="InstanceBuilderTests.cs", label="Assert.Equal(expected, result.Value.LongValue)", span="55-55"];
m0_19 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="43-43"];
m0_20 [cluster="Unk.Equal", file="InstanceBuilderTests.cs", label="Entry Unk.Equal", span=""];
m0_326 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="784-784"];
m0_327 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithFSharpOption>>(() => new FakeOptionsWithFSharpOption()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="789-793"];
m0_329 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="InstanceBuilderTests.cs", label="expectedValue.ShouldBeEquivalentTo(result.Value.Offset.Value)", span="798-798"];
m0_330 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="InstanceBuilderTests.cs", label="expectedSome.ShouldBeEquivalentTo(FSharpOption<int>.get_IsSome(result.Value.Offset))", span="800-800"];
m0_328 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="InstanceBuilderTests.cs", label="result.Value.Offset != null", span="796-796"];
m0_331 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="784-784"];
m0_407 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", span="921-921"];
m0_408 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="InstanceBuilderTests.cs", label="var expectedResult = new FakeOptions { StringValue=''strval0'', IntSequence=new[] { 9, 7, 8 }, BoolValue = true,  LongValue = 9876543210L }", span="924-924"];
m0_409 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''--stringvalue=strval0'', ''-i'', ''9'', ''7'', ''8'', ''-x'', ''9876543210'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="927-931"];
m0_410 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="InstanceBuilderTests.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="934-934"];
m0_411 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", span="921-921"];
m0_151 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="6-6"];
m0_160 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="407-407"];
m0_161 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndSeparator>>(() => new FakeOptionsWithSequenceAndSeparator()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="412-416"];
m0_162 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="InstanceBuilderTests.cs", label="expected.ShouldBeEquivalentTo(result.Value.StringSequence)", span="419-419"];
m0_163 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="407-407"];
m0_221 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="287-287"];
m0_300 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="718-718"];
m0_301 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNullables>>(() => new FakeOptionsWithNullables()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="723-727"];
m0_302 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="InstanceBuilderTests.cs", label="expected.ShouldBeEquivalentTo(result.Value.NullableInt)", span="730-730"];
m0_303 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="718-718"];
m0_242 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="577-577"];
m0_243 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="580-580"];
m0_244 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="583-587"];
m0_245 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="590-590"];
m0_246 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="577-577"];
m0_208 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="500-500"];
m0_209 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="502-505"];
m0_210 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="507-511"];
m0_211 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="514-514"];
m0_212 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="500-500"];
m0_291 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="695-695"];
m0_292 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="698-698"];
m0_293 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceMinMaxEqual>>(() => new FakeOptionsWithSequenceMinMaxEqual()),\r\n                new[] { ''one'', ''two'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="701-705"];
m0_294 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="708-708"];
m0_295 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="695-695"];
m0_8 [cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="InstanceBuilderTests.cs", label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="100-100"];
m0_101 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="258-258"];
m0_102 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="263-267"];
m0_103 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="InstanceBuilderTests.cs", label="expected.ShouldBeEquivalentTo(result.Value.Colors)", span="270-270"];
m0_104 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="258-258"];
m0_415 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", span="941-941"];
m0_416 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Nothing<Func<FakeImmutableOptions>>(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="946-950"];
m0_417 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="InstanceBuilderTests.cs", label="expected.ShouldBeEquivalentTo(result.Value)", span="953-953"];
m0_418 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", span="941-941"];
m0_100 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="6-6"];
m0_373 [cluster="Unk.Should", file="InstanceBuilderTests.cs", label="Entry Unk.Should", span=""];
m0_284 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="677-677"];
m0_285 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="682-686"];
m0_286 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="InstanceBuilderTests.cs", label="expected.ShouldBeEquivalentTo(result.Value.StringValue)", span="689-689"];
m0_287 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="677-677"];
m0_115 [cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs", label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="309-309"];
m0_199 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="480-480"];
m0_200 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceBuilderTests.cs", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = null\r\n            }", span="482-485"];
m0_201 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] { ''--ftpurl'', ''str1''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="487-491"];
m0_202 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceBuilderTests.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="494-494"];
m0_203 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="480-480"];
m0_40 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", span="6-6"];
m0_346 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithMinZero.FakeOptionsWithMinZero()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMinZero.FakeOptionsWithMinZero()", span="6-6"];
m0_173 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33"];
m0_347 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", span="821-821"];
m0_348 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="InstanceBuilderTests.cs", label="Action test = () => InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMaxZero>>(() => new FakeOptionsWithMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="824-828"];
m0_349 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="InstanceBuilderTests.cs", label="Assert.Throws<ApplicationException>(test)", span="831-831"];
m0_350 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", span="821-821"];
m0_189 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="457-457"];
m0_190 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl'')),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''))\r\n                }", span="460-464"];
m0_191 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSets>>(() => new FakeOptionsWithSets()),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="467-471"];
m0_192 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="474-474"];
m0_193 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="457-457"];
m0_420 [file="InstanceBuilderTests.cs", label=fakeOptions, span=""];
m0_421 [file="InstanceBuilderTests.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
m0_422 [file="InstanceBuilderTests.cs", label=int, span=""];
m0_423 [file="InstanceBuilderTests.cs", label=int, span=""];
m1_5 [cluster="Unk.>", file="ReflectionExtensions.cs", label="Entry Unk.>", span=""];
m1_36 [cluster="System.Action<T>.Invoke(T)", file="ReflectionExtensions.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m1_45 [cluster="CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", file="ReflectionExtensions.cs", label="Entry CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", span="82-82"];
m1_46 [cluster="CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", file="ReflectionExtensions.cs", label="var e = Expression.Lambda<Func<object>>(\r\n                Expression.Convert(\r\n                    Expression.Default(type),\r\n                    typeof(object)))", span="84-87"];
m1_47 [cluster="CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", file="ReflectionExtensions.cs", label="return e.Compile()();", span="88-88"];
m1_48 [cluster="CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", file="ReflectionExtensions.cs", label="Exit CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", span="82-82"];
m1_6 [cluster="Unk.Any", file="ReflectionExtensions.cs", label="Entry Unk.Any", span=""];
m1_15 [cluster="Unk.Where", file="ReflectionExtensions.cs", label="Entry Unk.Where", span=""];
m1_22 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="ReflectionExtensions.cs", label="Entry CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", span="49-49"];
m1_23 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="ReflectionExtensions.cs", label="Action<Exception> fail = inner => { throw new ApplicationException(''Cannot set value to target instance.'', inner); }", span="51-51"];
m1_24 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="ReflectionExtensions.cs", label="property.SetValue(instance, value, null)", span="55-55"];
m1_33 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="ReflectionExtensions.cs", label="return instance;", span="74-74"];
m1_26 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="ReflectionExtensions.cs", label="fail(e)", span="59-59"];
m1_28 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="ReflectionExtensions.cs", label="fail(e)", span="63-63"];
m1_30 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="ReflectionExtensions.cs", label="fail(e)", span="67-67"];
m1_32 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="ReflectionExtensions.cs", label="fail(e)", span="71-71"];
m1_25 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="ReflectionExtensions.cs", label=TargetException, span="57-57"];
m1_27 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="ReflectionExtensions.cs", label=TargetParameterCountException, span="61-61"];
m1_29 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="ReflectionExtensions.cs", label=MethodAccessException, span="65-65"];
m1_31 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="ReflectionExtensions.cs", label=TargetInvocationException, span="69-69"];
m1_34 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="ReflectionExtensions.cs", label="Exit CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", span="49-49"];
m1_8 [cluster="CommandLine.Core.ReflectionExtensions.ToTargetType(System.Type)", file="ReflectionExtensions.cs", label="Entry CommandLine.Core.ReflectionExtensions.ToTargetType(System.Type)", span="23-23"];
m1_9 [cluster="CommandLine.Core.ReflectionExtensions.ToTargetType(System.Type)", file="ReflectionExtensions.cs", label="return type == typeof(bool)\r\n                       ? TargetType.Switch\r\n                       : type == typeof(string)\r\n                             ? TargetType.Scalar\r\n                             : type.IsArray || typeof(IEnumerable).IsAssignableFrom(type)\r\n                                   ? TargetType.Sequence\r\n                                   : TargetType.Scalar;", span="25-31"];
m1_10 [cluster="CommandLine.Core.ReflectionExtensions.ToTargetType(System.Type)", file="ReflectionExtensions.cs", label="Exit CommandLine.Core.ReflectionExtensions.ToTargetType(System.Type)", span="23-23"];
m1_40 [cluster="System.ApplicationException.ApplicationException(string, System.Exception)", file="ReflectionExtensions.cs", label="Entry System.ApplicationException.ApplicationException(string, System.Exception)", span="0-0"];
m1_53 [cluster="System.Func<TResult>.Invoke()", file="ReflectionExtensions.cs", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
m1_44 [cluster="System.Array.CreateInstance(System.Type, int)", file="ReflectionExtensions.cs", label="Entry System.Array.CreateInstance(System.Type, int)", span="0-0"];
m1_50 [cluster="System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression, System.Type)", file="ReflectionExtensions.cs", label="Entry System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression, System.Type)", span="0-0"];
m1_7 [cluster="Unk.selector", file="ReflectionExtensions.cs", label="Entry Unk.selector", span=""];
m1_37 [cluster="lambda expression", file="ReflectionExtensions.cs", label="Entry lambda expression", span="51-51"];
m1_18 [cluster="lambda expression", file="ReflectionExtensions.cs", label="specProp.Property.SetValue(current, selector(specProp))", span="44-44"];
m1_19 [cluster="lambda expression", file="ReflectionExtensions.cs", label="return instance;", span="45-45"];
m1_17 [cluster="lambda expression", file="ReflectionExtensions.cs", label="Entry lambda expression", span="42-46"];
m1_20 [cluster="lambda expression", file="ReflectionExtensions.cs", label="Exit lambda expression", span="42-46"];
m1_38 [cluster="lambda expression", file="ReflectionExtensions.cs", label="throw new ApplicationException(''Cannot set value to target instance.'', inner);", span="51-51"];
m1_39 [cluster="lambda expression", file="ReflectionExtensions.cs", label="Exit lambda expression", span="51-51"];
m1_35 [cluster="System.Reflection.PropertyInfo.SetValue(object, object, object[])", file="ReflectionExtensions.cs", label="Entry System.Reflection.PropertyInfo.SetValue(object, object, object[])", span="0-0"];
m1_49 [cluster="System.Linq.Expressions.Expression.Default(System.Type)", file="ReflectionExtensions.cs", label="Entry System.Linq.Expressions.Expression.Default(System.Type)", span="0-0"];
m1_11 [cluster="System.Type.IsAssignableFrom(System.Type)", file="ReflectionExtensions.cs", label="Entry System.Type.IsAssignableFrom(System.Type)", span="0-0"];
m1_3 [cluster="System.Type.GetProperties()", file="ReflectionExtensions.cs", label="Entry System.Type.GetProperties()", span="0-0"];
m1_0 [cluster="CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", file="ReflectionExtensions.cs", label="Entry CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", span="13-13"];
m1_1 [cluster="CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", file="ReflectionExtensions.cs", label="return from pi in type.GetProperties()\r\n                   let attrs = pi.GetCustomAttributes(true)\r\n                   where\r\n                        attrs.OfType<OptionAttribute>().Any() ||\r\n                        attrs.OfType<ValueAttribute>().Any()\r\n                   select selector(pi);", span="15-20"];
m1_2 [cluster="CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", file="ReflectionExtensions.cs", label="Exit CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", span="13-13"];
m1_51 [cluster="System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, params System.Linq.Expressions.ParameterExpression[])", file="ReflectionExtensions.cs", label="Entry System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, params System.Linq.Expressions.ParameterExpression[])", span="0-0"];
m1_4 [cluster="System.Reflection.MemberInfo.GetCustomAttributes(bool)", file="ReflectionExtensions.cs", label="Entry System.Reflection.MemberInfo.GetCustomAttributes(bool)", span="0-0"];
m1_16 [cluster="Unk.Aggregate", file="ReflectionExtensions.cs", label="Entry Unk.Aggregate", span=""];
m1_41 [cluster="CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", file="ReflectionExtensions.cs", label="Entry CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", span="77-77"];
m1_42 [cluster="CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", file="ReflectionExtensions.cs", label="return Array.CreateInstance(type, 0);", span="79-79"];
m1_43 [cluster="CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", file="ReflectionExtensions.cs", label="Exit CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", span="77-77"];
m1_12 [cluster="CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", file="ReflectionExtensions.cs", label="Entry CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="34-34"];
m1_13 [cluster="CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", file="ReflectionExtensions.cs", label="return specProps.Where(predicate).Aggregate(\r\n                instance,\r\n                (current, specProp) =>\r\n                    {\r\n                        specProp.Property.SetValue(current, selector(specProp));\r\n                        return instance;\r\n                    });", span="40-46"];
m1_14 [cluster="CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", file="ReflectionExtensions.cs", label="Exit CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="34-34"];
m1_21 [cluster="Unk.SetValue", file="ReflectionExtensions.cs", label="Entry Unk.SetValue", span=""];
m1_52 [cluster="System.Linq.Expressions.Expression<TDelegate>.Compile()", file="ReflectionExtensions.cs", label="Entry System.Linq.Expressions.Expression<TDelegate>.Compile()", span="0-0"];
m1_54 [file="ReflectionExtensions.cs", label="System.Func<CommandLine.Core.SpecificationProperty, object>", span=""];
m1_55 [file="ReflectionExtensions.cs", label=T, span=""];
m2_40 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="Sequence.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", span=""];
m2_41 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="Sequence.cs", label=nameIndex, span=""];
m2_42 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="Sequence.cs", label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="121-121"];
m2_43 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="Sequence.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="109-109"];
m2_125 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", file="Sequence.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="9-9"];
m2_147 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="Sequence.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33"];
m2_0 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="Sequence.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="15-15"];
m2_1 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", color=green, community=0, file="Sequence.cs", label="0: var fakeOptions = new FakeOptions()", span="18-18"];
m2_2 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", color=red, community=0, file="Sequence.cs", label="0: var expectedResult = ParserResult.Create(\r\n                ParserResultType.Options,\r\n                fakeOptions, new Error[] { new HelpRequestedError() })", span="19-21"];
m2_3 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", color=red, community=0, file="Sequence.cs", label="0: var result = InstanceBuilder.Build(\r\n                () => fakeOptions,\r\n                new[] { ''--help'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="24-28"];
m2_11 [cluster="lambda expression", file="Sequence.cs", label="Entry lambda expression", span="18-21"];
m2_10 [cluster="CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", file="Sequence.cs", label="Entry CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", span="90-90"];
m2_28 [cluster="lambda expression", file="Sequence.cs", label="new FakeOptionsWithDouble()", span="69-69"];
m2_134 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="Sequence.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="338-338"];
m2_135 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="Sequence.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="343-347"];
m2_136 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="Sequence.cs", label="expected.ShouldBeEquivalentTo(result.Value.StringSequence)", span="350-350"];
m2_137 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="Sequence.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="338-338"];
m2_208 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="Sequence.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="489-489"];
m2_209 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="Sequence.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="492-492"];
m2_210 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="Sequence.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="495-499"];
m2_211 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="Sequence.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="502-502"];
m2_212 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="Sequence.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="489-489"];
m2_195 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="Sequence.cs", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283"];
m2_82 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", file="Sequence.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="9-9"];
m2_7 [cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="Sequence.cs", label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="338-338"];
m2_62 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", file="Sequence.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="9-9"];
m2_126 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="Sequence.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="318-318"];
m2_127 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="Sequence.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="323-327"];
m2_128 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="Sequence.cs", label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="330-330"];
m2_129 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="Sequence.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="318-318"];
m2_118 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="Sequence.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="299-299"];
m2_119 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="Sequence.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceWithoutRange(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="304-308"];
m2_120 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="Sequence.cs", label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="311-311"];
m2_121 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="Sequence.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="299-299"];
m2_216 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="Sequence.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="508-508"];
m2_217 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="Sequence.cs", label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="511-511"];
m2_218 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="Sequence.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="514-518"];
m2_219 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="Sequence.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="521-521"];
m2_220 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="Sequence.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="508-508"];
m2_55 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="Sequence.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="154-154"];
m2_56 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="Sequence.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="159-163"];
m2_57 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="Sequence.cs", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="166-166"];
m2_58 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="Sequence.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="154-154"];
m2_54 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", file="Sequence.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", span="9-9"];
m2_241 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="Sequence.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="567-567"];
m2_242 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="Sequence.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="572-576"];
m2_243 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="Sequence.cs", label="Assert.True(expected.Equals(result.Value.StringValue))", span="579-579"];
m2_244 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="Sequence.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="567-567"];
m2_9 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="Sequence.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12"];
m2_182 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="Sequence.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="431-431"];
m2_183 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="Sequence.cs", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="433-436"];
m2_184 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="Sequence.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="438-442"];
m2_185 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="Sequence.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="445-445"];
m2_186 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="Sequence.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="431-431"];
m2_162 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="Sequence.cs", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="12-12"];
m2_31 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="Sequence.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="87-87"];
m2_32 [cluster="System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", file="Sequence.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", span="0-0"];
m2_33 [cluster="lambda expression", file="Sequence.cs", label="Entry lambda expression", span="34-34"];
m2_34 [cluster="lambda expression", color=green, community=0, file="Sequence.cs", label="0: v.IsValue()", span="34-34"];
m2_4 [cluster="lambda expression", file="Sequence.cs", label="Entry lambda expression", span="16-22"];
m2_5 [cluster="lambda expression", color=green, community=0, file="Sequence.cs", label="0: f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).Return(info =>\r\n                                   info.TargetType == TargetType.Sequence\r\n                                        ? new[] { f }.Concat(tokens.OfSequence(f, info))\r\n                                        : new Token[] { }, new Token[] { })\r\n                            : new Token[] { }", span="17-22"];
m2_199 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="Sequence.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="470-470"];
m2_200 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="Sequence.cs", label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="473-473"];
m2_201 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="Sequence.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequired(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="476-480"];
m2_202 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="Sequence.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="483-483"];
m2_203 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="Sequence.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="470-470"];
m2_8 [cluster="CommandLine.Core.Token.IsValue()", file="Sequence.cs", label="Entry CommandLine.Core.Token.IsValue()", span="73-73"];
m2_78 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="Sequence.cs", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316"];
m2_25 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="Sequence.cs", label="Assert.Equal(expected, result.Value.DoubleValue)", span="75-75"];
m2_13 [cluster="lambda expression", file="Sequence.cs", label="Exit lambda expression", span="18-21"];
m2_12 [cluster="lambda expression", color=green, community=0, file="Sequence.cs", label="0: info.TargetType == TargetType.Sequence\r\n                                        ? new[] { f }.Concat(tokens.OfSequence(f, info))\r\n                                        : new Token[] { }", span="19-21"];
m2_14 [cluster="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>.OfSequence(CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", file="Sequence.cs", label="Entry System.Collections.Generic.IEnumerable<CommandLine.Core.Token>.OfSequence(CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", span="27-27"];
m2_20 [cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", color=green, community=0, file="Sequence.cs", label="0: return new Token[] { };", span="36-36"];
m2_21 [cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", file="Sequence.cs", label="Exit CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", span="27-27"];
m2_22 [cluster="System.Collections.Generic.IEnumerable<TSource>.IndexOf<TSource>(System.Func<TSource, bool>)", file="Sequence.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.IndexOf<TSource>(System.Func<TSource, bool>)", span="36-36"];
m2_27 [cluster="lambda expression", file="Sequence.cs", label="Exit lambda expression", span="29-29"];
m2_29 [cluster="lambda expression", file="Sequence.cs", label="Entry lambda expression", span="33-33"];
m2_36 [cluster="lambda expression", file="Sequence.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", span=""];
m2_37 [cluster="lambda expression", file="Sequence.cs", label="System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>", span=""];
m2_38 [cluster="lambda expression", file="Sequence.cs", label="CommandLine.Core.Token", span=""];
m2_44 [cluster="lambda expression", file="Sequence.cs", label="Entry lambda expression", span="115-115"];
m2_45 [cluster="lambda expression", file="Sequence.cs", label="new FakeOptions()", span="115-115"];
m2_46 [cluster="lambda expression", file="Sequence.cs", label="Exit lambda expression", span="115-115"];
m2_51 [cluster="lambda expression", file="Sequence.cs", label="Entry lambda expression", span="138-138"];
m2_52 [cluster="lambda expression", file="Sequence.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="138-138"];
m2_53 [cluster="lambda expression", file="Sequence.cs", label="Exit lambda expression", span="138-138"];
m2_59 [cluster="lambda expression", file="Sequence.cs", label="Entry lambda expression", span="160-160"];
m2_60 [cluster="lambda expression", file="Sequence.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="160-160"];
m2_61 [cluster="lambda expression", file="Sequence.cs", label="Exit lambda expression", span="160-160"];
m2_70 [cluster="lambda expression", file="Sequence.cs", label="Entry lambda expression", span="179-179"];
m2_71 [cluster="lambda expression", file="Sequence.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="179-179"];
m2_72 [cluster="lambda expression", file="Sequence.cs", label="Exit lambda expression", span="179-179"];
m2_79 [cluster="lambda expression", file="Sequence.cs", label="Entry lambda expression", span="198-198"];
m2_80 [cluster="lambda expression", file="Sequence.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="198-198"];
m2_81 [cluster="lambda expression", file="Sequence.cs", label="Exit lambda expression", span="198-198"];
m2_88 [cluster="lambda expression", file="Sequence.cs", label="Entry lambda expression", span="218-218"];
m2_89 [cluster="lambda expression", file="Sequence.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="218-218"];
m2_90 [cluster="lambda expression", file="Sequence.cs", label="Exit lambda expression", span="218-218"];
m2_96 [cluster="lambda expression", file="Sequence.cs", label="Entry lambda expression", span="237-237"];
m2_97 [cluster="lambda expression", file="Sequence.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="237-237"];
m2_98 [cluster="lambda expression", file="Sequence.cs", label="Exit lambda expression", span="237-237"];
m2_105 [cluster="lambda expression", file="Sequence.cs", label="Entry lambda expression", span="261-261"];
m2_106 [cluster="lambda expression", file="Sequence.cs", label="new FakeOptionsWithEnum()", span="261-261"];
m2_107 [cluster="lambda expression", file="Sequence.cs", label="Exit lambda expression", span="261-261"];
m2_115 [cluster="lambda expression", file="Sequence.cs", label="Entry lambda expression", span="286-286"];
m2_116 [cluster="lambda expression", file="Sequence.cs", label="new FakeOptionsWithValues()", span="286-286"];
m2_117 [cluster="lambda expression", file="Sequence.cs", label="Exit lambda expression", span="286-286"];
m2_122 [cluster="lambda expression", file="Sequence.cs", label="Entry lambda expression", span="305-305"];
m2_123 [cluster="lambda expression", file="Sequence.cs", label="new FakeOptionsWithSequenceWithoutRange()", span="305-305"];
m2_124 [cluster="lambda expression", file="Sequence.cs", label="Exit lambda expression", span="305-305"];
m2_130 [cluster="lambda expression", file="Sequence.cs", label="Entry lambda expression", span="324-324"];
m2_131 [cluster="lambda expression", file="Sequence.cs", label="new FakeOptionsWithSequenceAndSeparator()", span="324-324"];
m2_132 [cluster="lambda expression", file="Sequence.cs", label="Exit lambda expression", span="324-324"];
m2_138 [cluster="lambda expression", file="Sequence.cs", label="Entry lambda expression", span="344-344"];
m2_139 [cluster="lambda expression", file="Sequence.cs", label="new FakeOptionsWithSequenceAndSeparator()", span="344-344"];
m2_140 [cluster="lambda expression", file="Sequence.cs", label="Exit lambda expression", span="344-344"];
m2_148 [cluster="lambda expression", file="Sequence.cs", label="Entry lambda expression", span="373-373"];
m2_151 [cluster="lambda expression", file="Sequence.cs", label="Entry lambda expression", span="374-376"];
m2_149 [cluster="lambda expression", file="Sequence.cs", label="new FakeOptionsWithValues()", span="373-373"];
m2_150 [cluster="lambda expression", file="Sequence.cs", label="Exit lambda expression", span="373-373"];
m2_152 [cluster="lambda expression", file="Sequence.cs", label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="375-376"];
m2_156 [cluster="lambda expression", file="Sequence.cs", label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="376-376"];
m2_160 [cluster="lambda expression", file="Sequence.cs", label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="376-376"];
m2_153 [cluster="lambda expression", file="Sequence.cs", label="Exit lambda expression", span="374-376"];
m2_155 [cluster="lambda expression", file="Sequence.cs", label="Entry lambda expression", span="376-376"];
m2_157 [cluster="lambda expression", file="Sequence.cs", label="Exit lambda expression", span="376-376"];
m2_159 [cluster="lambda expression", file="Sequence.cs", label="Entry lambda expression", span="376-376"];
m2_161 [cluster="lambda expression", file="Sequence.cs", label="Exit lambda expression", span="376-376"];
m2_169 [cluster="lambda expression", file="Sequence.cs", label="Entry lambda expression", span="399-399"];
m2_170 [cluster="lambda expression", file="Sequence.cs", label="new FakeOptionsWithSets()", span="399-399"];
m2_171 [cluster="lambda expression", file="Sequence.cs", label="Exit lambda expression", span="399-399"];
m2_179 [cluster="lambda expression", file="Sequence.cs", label="Entry lambda expression", span="419-419"];
m2_180 [cluster="lambda expression", file="Sequence.cs", label="new FakeOptionWithRequiredAndSet()", span="419-419"];
m2_181 [cluster="lambda expression", file="Sequence.cs", label="Exit lambda expression", span="419-419"];
m2_187 [cluster="lambda expression", file="Sequence.cs", label="Entry lambda expression", span="439-439"];
m2_188 [cluster="lambda expression", file="Sequence.cs", label="new FakeOptionWithRequiredAndSet()", span="439-439"];
m2_189 [cluster="lambda expression", file="Sequence.cs", label="Exit lambda expression", span="439-439"];
m2_196 [cluster="lambda expression", file="Sequence.cs", label="Entry lambda expression", span="459-459"];
m2_197 [cluster="lambda expression", file="Sequence.cs", label="new FakeOptionWithRequiredAndSet()", span="459-459"];
m2_198 [cluster="lambda expression", file="Sequence.cs", label="Exit lambda expression", span="459-459"];
m2_204 [cluster="lambda expression", file="Sequence.cs", label="Entry lambda expression", span="477-477"];
m2_205 [cluster="lambda expression", file="Sequence.cs", label="new FakeOptionWithRequired()", span="477-477"];
m2_206 [cluster="lambda expression", file="Sequence.cs", label="Exit lambda expression", span="477-477"];
m2_213 [cluster="lambda expression", file="Sequence.cs", label="Entry lambda expression", span="496-496"];
m2_214 [cluster="lambda expression", file="Sequence.cs", label="new FakeOptions()", span="496-496"];
m2_215 [cluster="lambda expression", file="Sequence.cs", label="Exit lambda expression", span="496-496"];
m2_222 [cluster="lambda expression", file="Sequence.cs", label="Entry lambda expression", span="515-515"];
m2_223 [cluster="lambda expression", file="Sequence.cs", label="new FakeOptions()", span="515-515"];
m2_224 [cluster="lambda expression", file="Sequence.cs", label="Exit lambda expression", span="515-515"];
m2_230 [cluster="lambda expression", file="Sequence.cs", label="Entry lambda expression", span="534-534"];
m2_231 [cluster="lambda expression", file="Sequence.cs", label="new FakeOptions()", span="534-534"];
m2_232 [cluster="lambda expression", file="Sequence.cs", label="Exit lambda expression", span="534-534"];
m2_238 [cluster="lambda expression", file="Sequence.cs", label="Entry lambda expression", span="553-553"];
m2_239 [cluster="lambda expression", file="Sequence.cs", label="new FakeOptions()", span="553-553"];
m2_240 [cluster="lambda expression", file="Sequence.cs", label="Exit lambda expression", span="553-553"];
m2_246 [cluster="lambda expression", file="Sequence.cs", label="Entry lambda expression", span="573-573"];
m2_247 [cluster="lambda expression", file="Sequence.cs", label="new FakeOptions()", span="573-573"];
m2_248 [cluster="lambda expression", file="Sequence.cs", label="Exit lambda expression", span="573-573"];
m2_6 [cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", file="Sequence.cs", label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6"];
m2_30 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", color=green, community=0, file="Sequence.cs", label="0: Entry CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", span="9-9"];
m2_35 [cluster="Unk.SequenceEqual", file="Sequence.cs", label="Entry Unk.SequenceEqual", span=""];
m2_26 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="Sequence.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="63-63"];
m2_190 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="Sequence.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="450-450"];
m2_191 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="Sequence.cs", label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="452-456"];
m2_192 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="Sequence.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="458-462"];
m2_193 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="Sequence.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="465-465"];
m2_194 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="Sequence.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="450-450"];
m2_100 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="Sequence.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="255-255"];
m2_101 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="Sequence.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="260-264"];
m2_102 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="Sequence.cs", label="expected.ShouldBeEquivalentTo(result.Value.Colors)", span="267-267"];
m2_103 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="Sequence.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="255-255"];
m2_23 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="Sequence.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="63-63"];
m2_141 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="Sequence.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="359-359"];
m2_142 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="Sequence.cs", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="362-368"];
m2_143 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="Sequence.cs", label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="369-369"];
m2_145 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="Sequence.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="382-382"];
m2_144 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="Sequence.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="372-379"];
m2_146 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="Sequence.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="359-359"];
m2_68 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="Sequence.cs", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="261-261"];
m2_99 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", file="Sequence.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="9-9"];
m2_83 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="Sequence.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="211-211"];
m2_84 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="Sequence.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="214-214"];
m2_85 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="Sequence.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="217-221"];
m2_86 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="Sequence.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="224-224"];
m2_87 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="Sequence.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="211-211"];
m2_233 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="Sequence.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="546-546"];
m2_234 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="Sequence.cs", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="549-549"];
m2_235 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="Sequence.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="552-556"];
m2_236 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="Sequence.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="559-559"];
m2_237 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="Sequence.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="546-546"];
m2_63 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="Sequence.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="172-172"];
m2_64 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="Sequence.cs", label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="175-175"];
m2_65 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="Sequence.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                new[] { ''-s'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="178-182"];
m2_66 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="Sequence.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="185-185"];
m2_67 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="Sequence.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="172-172"];
m2_108 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", file="Sequence.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="16-16"];
m2_109 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="Sequence.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="273-273"];
m2_110 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="Sequence.cs", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="276-282"];
m2_111 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="Sequence.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="285-289"];
m2_112 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="Sequence.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="292-292"];
m2_113 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="Sequence.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="273-273"];
m2_24 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="Sequence.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithDouble(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="68-72"];
m2_178 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", file="Sequence.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", span="4-4"];
m2_73 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="Sequence.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="191-191"];
m2_74 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="Sequence.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="194-194"];
m2_75 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="Sequence.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="197-201"];
m2_76 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="Sequence.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="204-204"];
m2_77 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="Sequence.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="191-191"];
m2_221 [cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", file="Sequence.cs", label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="272-272"];
m2_91 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="Sequence.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="230-230"];
m2_92 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="Sequence.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="233-233"];
m2_93 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="Sequence.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue(),\r\n                new[] { ''one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="236-240"];
m2_94 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="Sequence.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="243-243"];
m2_95 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="Sequence.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="230-230"];
m2_133 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", file="Sequence.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="9-9"];
m2_154 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="Sequence.cs", label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="37-37"];
m2_158 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="Sequence.cs", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11"];
m2_173 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="Sequence.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="411-411"];
m2_174 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="Sequence.cs", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = null\r\n            }", span="413-416"];
m2_175 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="Sequence.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="418-422"];
m2_176 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="Sequence.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="425-425"];
m2_177 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="Sequence.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="411-411"];
m2_172 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", file="Sequence.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4"];
m2_245 [cluster="string.Equals(string)", file="Sequence.cs", label="Entry string.Equals(string)", span="0-0"];
m2_168 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="Sequence.cs", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294"];
m2_207 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", file="Sequence.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4"];
m2_69 [cluster="CommandLine.NameInfo.NameInfo(string, string)", file="Sequence.cs", label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20"];
m2_47 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="Sequence.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="132-132"];
m2_48 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="Sequence.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="137-141"];
m2_49 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="Sequence.cs", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="144-144"];
m2_50 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="Sequence.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="132-132"];
m2_15 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="Sequence.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
m2_16 [cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", file="Sequence.cs", label="Entry CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", span="27-27"];
m2_17 [cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", file="Sequence.cs", label="var nameIndex = tokens.IndexOf(t => t.Equals(nameToken))", span="29-29"];
m2_18 [cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", file="Sequence.cs", label="nameIndex >= 0", span="30-30"];
m2_39 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", file="Sequence.cs", label="CommandLine.Core.Token", span=""];
m2_225 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="Sequence.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="527-527"];
m2_226 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="Sequence.cs", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="530-530"];
m2_227 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="Sequence.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="533-537"];
m2_228 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="Sequence.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="540-540"];
m2_229 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="Sequence.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="527-527"];
m2_114 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", file="Sequence.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6"];
m2_19 [cluster="Unk.Equal", color=green, community=0, file="Sequence.cs", label="0: Entry Unk.Equal", span=""];
m2_163 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="Sequence.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="388-388"];
m2_164 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="Sequence.cs", label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl'')),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''))\r\n                }", span="391-395"];
m2_165 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="Sequence.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSets(),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="398-402"];
m2_166 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="Sequence.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="405-405"];
m2_167 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="Sequence.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="388-388"];
m2_104 [cluster="Unk.ShouldBeEquivalentTo", file="Sequence.cs", label="Entry Unk.ShouldBeEquivalentTo", span=""];
m2_249 [file="Sequence.cs", label=fakeOptions, span=""];
m2_250 [file="Sequence.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
m3_13 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="24-24"];
m3_0 [cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="15-15"];
m3_5 [cluster="Unk.Select", color=green, community=0, file="TokenPartitioner.cs", label="0: Entry Unk.Select", span=""];
m3_1 [cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="TokenPartitioner.cs", label="var propAndErrors = MapValuesImpl(specProps, values, converter)", span="20-20"];
m3_2 [cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", color=red, community=0, file="TokenPartitioner.cs", label="0: return Result.Succeed(\r\n                propAndErrors.Select(pe => pe.Item1),\r\n                propAndErrors.Select(pe => pe.Item2)\r\n                    .OfType<Just<Error>>().Select(e => e.Value)\r\n                );", span="22-26"];
m3_3 [cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="TokenPartitioner.cs", label="Exit CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="15-15"];
m3_4 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="29-29"];
m3_6 [cluster="Unk.>", file="TokenPartitioner.cs", label="Entry Unk.>", span=""];
m3_7 [cluster="Unk.Succeed", file="TokenPartitioner.cs", label="Entry Unk.Succeed", span=""];
m3_8 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="23-23"];
m3_9 [cluster="lambda expression", color=red, community=0, file="TokenPartitioner.cs", label="0: pe.Item1", span="23-23"];
m3_19 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="TokenPartitioner.cs", label="var pt = specProps.First()", span="38-38"];
m3_32 [cluster="lambda expression", color=green, community=0, file="TokenPartitioner.cs", label="0: !sequences.Contains(t)", span="23-23"];
m3_17 [cluster="CommandLine.Core.KeyValuePairHelper.ForSwitch(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.KeyValuePairHelper.ForSwitch(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="10-10"];
m3_18 [cluster="CommandLine.Core.KeyValuePairHelper.ForScalar(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.KeyValuePairHelper.ForScalar(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="16-16"];
m3_22 [cluster="Unk.Create", file="TokenPartitioner.cs", label="Entry Unk.Create", span=""];
m3_23 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="TokenPartitioner.cs", label="yield break;", span="44-44"];
m3_26 [cluster="System.Collections.Generic.List<T>.Contains(T)", file="TokenPartitioner.cs", label="Entry System.Collections.Generic.List<T>.Contains(T)", span="0-0"];
m3_27 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="22-22"];
m3_28 [cluster="lambda expression", color=green, community=0, file="TokenPartitioner.cs", label="0: !scalars.Contains(t)", span="22-22"];
m3_30 [cluster="Unk.Contains", file="TokenPartitioner.cs", label="Entry Unk.Contains", span=""];
m3_20 [cluster="CommandLine.Core.KeyValuePairHelper.ForSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.KeyValuePairHelper.ForSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="22-22"];
m3_24 [cluster="lambda expression", color=green, community=0, file="TokenPartitioner.cs", label="0: !switches.Contains(t)", span="21-21"];
m3_25 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="TokenPartitioner.cs", label="pt.Specification.Max.IsJust()\r\n                && next.IsNothing()\r\n                && values.Skip(taken.Count()).Any()", span="48-50"];
m3_29 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="22-22"];
m3_21 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="TokenPartitioner.cs", label="taken.Empty()", span="40-40"];
m3_31 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="23-23"];
m3_34 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="24-24"];
m3_37 [cluster="System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", file="TokenPartitioner.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", span="0-0"];
m3_56 [cluster="CommandLine.Core.Specification.IsValue()", file="TokenPartitioner.cs", label="Entry CommandLine.Core.Specification.IsValue()", span="15-15"];
m3_14 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="25-25"];
m3_44 [cluster="Unk.IsNothing", file="TokenPartitioner.cs", label="Entry Unk.IsNothing", span=""];
m3_42 [cluster="Unk.ToMaybe", file="TokenPartitioner.cs", label=scalars, span=""];
m3_45 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="TokenPartitioner.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
m3_46 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="TokenPartitioner.cs", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="360-360"];
m3_39 [cluster="lambda expression", file="TokenPartitioner.cs", label="t.Text", span="31-31"];
m3_38 [cluster="CommandLine.Core.Specification.MakeErrorInCaseOfMinConstraint()", file="TokenPartitioner.cs", label="Entry CommandLine.Core.Specification.MakeErrorInCaseOfMinConstraint()", span="87-87"];
m3_11 [cluster="CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11"];
m3_10 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", file="TokenPartitioner.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", span="0-0"];
m3_12 [cluster="CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11"];
m3_15 [cluster="Unk.ToList", file="TokenPartitioner.cs", label="Entry Unk.ToList", span=""];
m3_16 [cluster="Unk.Except", file="TokenPartitioner.cs", label="Entry Unk.Except", span=""];
m3_58 [cluster="lambda expression", file="TokenPartitioner.cs", label="Tuple.Create(pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>())", span="61-61"];
m3_50 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="39-39"];
m3_53 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="47-47"];
m3_57 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="61-61"];
m3_51 [cluster="lambda expression", file="TokenPartitioner.cs", label=n, span="39-39"];
m3_52 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="39-39"];
m3_54 [cluster="lambda expression", file="TokenPartitioner.cs", label="s.Specification.IsValue()", span="47-47"];
m3_55 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="47-47"];
m3_59 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="61-61"];
m3_33 [cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="TokenPartitioner.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0"];
m3_36 [cluster="CSharpx.Maybe<T1>.MapValueOrDefault<T1, T2>(System.Func<T1, T2>, T2)", file="TokenPartitioner.cs", label="Entry CSharpx.Maybe<T1>.MapValueOrDefault<T1, T2>(System.Func<T1, T2>, T2)", span="377-377"];
m3_35 [cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="TokenPartitioner.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0"];
m3_40 [cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="TokenPartitioner.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0"];
m3_47 [cluster="CSharpx.Maybe.Just<T>(T)", file="TokenPartitioner.cs", label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124"];
m3_60 [cluster="CommandLine.Core.SpecificationProperty.WithValue(CSharpx.Maybe<object>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.SpecificationProperty.WithValue(CSharpx.Maybe<object>)", span="18-18"];
m3_48 [cluster="System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", file="TokenPartitioner.cs", label="Entry System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", span="0-0"];
m3_72 [cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", span="87-87"];
m3_73 [cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", file="TokenPartitioner.cs", label="return specification.Min.IsJust()\r\n                ? Maybe.Just<Error>(new SequenceOutOfRangeError(NameInfo.EmptyName))\r\n                : Maybe.Nothing<Error>();", span="89-91"];
m3_74 [cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", file="TokenPartitioner.cs", label="Exit CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", span="87-87"];
m3_49 [cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="TokenPartitioner.cs", label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="349-349"];
m3_61 [cluster="CSharpx.Maybe.Nothing<T>()", file="TokenPartitioner.cs", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
m3_71 [cluster="CSharpx.Maybe<T>.FromJustOrFail<T>(System.Exception)", file="TokenPartitioner.cs", label="Entry CSharpx.Maybe<T>.FromJustOrFail<T>(System.Exception)", span="355-355"];
m3_62 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", span="71-71"];
m3_63 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="TokenPartitioner.cs", label="specification.TargetType", span="73-73"];
m3_67 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="TokenPartitioner.cs", label="specification.Max.IsJust()", span="78-78"];
m3_68 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="TokenPartitioner.cs", label="return Maybe.Just(specification.Max.FromJustOrFail());", span="80-80"];
m3_64 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="TokenPartitioner.cs", label="TargetType.Scalar", span="75-75"];
m3_66 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="TokenPartitioner.cs", label="TargetType.Sequence", span="77-77"];
m3_65 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="TokenPartitioner.cs", label="return Maybe.Just(1);", span="76-76"];
m3_69 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="TokenPartitioner.cs", label="return Maybe.Nothing<int>();", span="84-84"];
m3_70 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="TokenPartitioner.cs", label="Exit CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", span="71-71"];
m3_41 [cluster="Unk.FirstOrDefault", file="TokenPartitioner.cs", label=switches, span=""];
m3_43 [cluster="CSharpx.Maybe<T>.IsJust<T>()", file="TokenPartitioner.cs", label=sequences, span=""];
m3_75 [file="TokenPartitioner.cs", label=pt, span=""];
m4_11 [cluster="T.ToMaybe<T>()", file="TypeDescriptor.cs", label="Entry T.ToMaybe<T>()", span="79-79"];
m4_0 [cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>)", file="TypeDescriptor.cs", label="Entry CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>)", span="13-13"];
m4_1 [cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>)", file="TypeDescriptor.cs", label="this.targetType = targetType", span="15-15"];
m4_2 [cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>)", file="TypeDescriptor.cs", label="this.maxItems = maxItems", span="16-16"];
m4_3 [cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>)", color=red, community=0, file="TypeDescriptor.cs", label="2: this.next = next", span="17-17"];
m4_4 [cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>)", file="TypeDescriptor.cs", label="Exit CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>)", span="13-13"];
m4_12 [cluster="CommandLine.Core.TypeDescriptorExtensions.WithNext(CommandLine.Core.TypeDescriptor, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>)", file="TypeDescriptor.cs", label="Entry CommandLine.Core.TypeDescriptorExtensions.WithNext(CommandLine.Core.TypeDescriptor, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>)", span="45-45"];
m4_13 [cluster="CommandLine.Core.TypeDescriptorExtensions.WithNext(CommandLine.Core.TypeDescriptor, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>)", color=red, community=0, file="TypeDescriptor.cs", label="0: return TypeDescriptor.Create(descriptor.TargetType, descriptor.MaxItems, next.Return(n => n, null));", span="47-47"];
m4_14 [cluster="CommandLine.Core.TypeDescriptorExtensions.WithNext(CommandLine.Core.TypeDescriptor, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>)", file="TypeDescriptor.cs", label="Exit CommandLine.Core.TypeDescriptorExtensions.WithNext(CommandLine.Core.TypeDescriptor, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>)", span="45-45"];
m4_15 [cluster="CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", file="TypeDescriptor.cs", label="Entry CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", span="100-100"];
m4_16 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="47-47"];
m4_17 [cluster="lambda expression", color=red, community=0, file="TypeDescriptor.cs", label="1: n", span="47-47"];
m4_18 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="47-47"];
m4_10 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="TypeDescriptor.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m4_5 [cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>, CommandLine.Core.TypeDescriptor)", file="TypeDescriptor.cs", label="Entry CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>, CommandLine.Core.TypeDescriptor)", span="35-35"];
m4_6 [cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>, CommandLine.Core.TypeDescriptor)", file="TypeDescriptor.cs", label="maximumItems == null", span="37-37"];
m4_8 [cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>, CommandLine.Core.TypeDescriptor)", file="TypeDescriptor.cs", label="return new TypeDescriptor(tag, maximumItems, next.ToMaybe());", span="39-39"];
m4_7 [cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>, CommandLine.Core.TypeDescriptor)", file="TypeDescriptor.cs", label="throw new ArgumentNullException(''maximumItems'');", span="37-37"];
m4_9 [cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>, CommandLine.Core.TypeDescriptor)", file="TypeDescriptor.cs", label="Exit CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>, CommandLine.Core.TypeDescriptor)", span="35-35"];
m4_19 [file="TypeDescriptor.cs", label="CommandLine.Core.TypeDescriptor", span=""];
m5_34 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="TypeLookup.cs", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63"];
m5_14 [cluster="Unk.Create", file="TypeLookup.cs", label="Entry Unk.Create", span=""];
m5_4 [cluster="Unk.SingleOrDefault", file="TypeLookup.cs", label="Entry Unk.SingleOrDefault", span=""];
m5_25 [cluster="System.Collections.Generic.IEnumerable<TSource>.IndexOf<TSource>(System.Func<TSource, bool>)", file="TypeLookup.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.IndexOf<TSource>(System.Func<TSource, bool>)", span="36-36"];
m5_41 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="TypeLookup.cs", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68"];
m5_31 [cluster="System.Collections.Generic.IEnumerable<TSource>.FirstOrDefault<TSource>()", file="TypeLookup.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.FirstOrDefault<TSource>()", span="0-0"];
m5_10 [cluster="string.MatchName(string, string, System.StringComparer)", file="TypeLookup.cs", label="Entry string.MatchName(string, string, System.StringComparer)", span="8-8"];
m5_6 [cluster="Unk.Map", file="TypeLookup.cs", label="Entry Unk.Map", span=""];
m5_5 [cluster="Unk.ToMaybe", file="TypeLookup.cs", label="Entry Unk.ToMaybe", span=""];
m5_33 [cluster="CommandLine.Infrastructure.Maybe<T1>.Map<T1, T2>(System.Func<T1, T2>)", file="TypeLookup.cs", label="Entry CommandLine.Infrastructure.Maybe<T1>.Map<T1, T2>(System.Func<T1, T2>)", span="92-92"];
m5_28 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="TypeLookup.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
m5_32 [cluster="T.ToMaybe<T>()", file="TypeLookup.cs", label="Entry T.ToMaybe<T>()", span="79-79"];
m5_0 [cluster="CommandLine.Core.TypeLookup.FindTypeDescriptor(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TypeLookup.cs", label="Entry CommandLine.Core.TypeLookup.FindTypeDescriptor(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
m5_1 [cluster="CommandLine.Core.TypeLookup.FindTypeDescriptor(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TypeLookup.cs", label="var info = specifications.SingleOrDefault(a => name.MatchName(a.ShortName, a.LongName, comparer))\r\n                .ToMaybe()\r\n                    .Map(\r\n                        s => TypeDescriptor.Create(s.TargetType, s.Max))", span="16-19"];
m5_2 [cluster="CommandLine.Core.TypeLookup.FindTypeDescriptor(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TypeLookup.cs", label="return info;", span="20-20"];
m5_3 [cluster="CommandLine.Core.TypeLookup.FindTypeDescriptor(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TypeLookup.cs", label="Exit CommandLine.Core.TypeLookup.FindTypeDescriptor(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
m5_38 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="37-38"];
m5_8 [cluster="lambda expression", file="TypeLookup.cs", label="name.MatchName(a.ShortName, a.LongName, comparer)", span="16-16"];
m5_7 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="16-16"];
m5_11 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="19-19"];
m5_9 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="16-16"];
m5_12 [cluster="lambda expression", file="TypeLookup.cs", label="TypeDescriptor.Create(s.TargetType, s.Max)", span="19-19"];
m5_13 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="19-19"];
m5_36 [cluster="lambda expression", color=red, community=0, file="TypeLookup.cs", label="0: name.MatchName(a.ShortName, a.LongName, comparer)", span="28-28"];
m5_35 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="28-28"];
m5_39 [cluster="lambda expression", color=red, community=0, file="TypeLookup.cs", label="0: info.WithNext(\r\n                            Maybe.Just(TypeDescriptor.Create(second.TargetType, second.Max)))", span="37-38"];
m5_37 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="28-28"];
m5_40 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="37-38"];
m5_29 [cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="TypeLookup.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0"];
m5_15 [cluster="CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TypeLookup.cs", label="Entry CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="23-23"];
m5_16 [cluster="CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", color=red, community=0, file="TypeLookup.cs", label="0: var nameIndex = specifications.IndexOf(a => name.MatchName(a.ShortName, a.LongName, comparer))", span="28-28"];
m5_18 [cluster="CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", color=red, community=0, file="TypeLookup.cs", label="0: var infos = specifications.Skip(nameIndex).Take(2)", span="31-31"];
m5_17 [cluster="CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", color=red, community=0, file="TypeLookup.cs", label="0: nameIndex >= 0", span="29-29"];
m5_23 [cluster="CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", color=red, community=0, file="TypeLookup.cs", label="0: return Maybe.Nothing<TypeDescriptor>();", span="41-41"];
m5_19 [cluster="CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", color=red, community=0, file="TypeLookup.cs", label="0: infos.Any()", span="32-32"];
m5_20 [cluster="CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", color=red, community=0, file="TypeLookup.cs", label="0: var first = infos.First()", span="34-34"];
m5_22 [cluster="CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", color=red, community=0, file="TypeLookup.cs", label="0: return infos.Skip(1).FirstOrDefault().ToMaybe()\r\n                        .Map(second => info.WithNext(\r\n                            Maybe.Just(TypeDescriptor.Create(second.TargetType, second.Max))));", span="36-38"];
m5_21 [cluster="CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", color=red, community=0, file="TypeLookup.cs", label="0: var info = TypeDescriptor.Create(first.TargetType, first.Max)", span="35-35"];
m5_24 [cluster="CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TypeLookup.cs", label="Exit CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="23-23"];
m5_26 [cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="TypeLookup.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0"];
m5_27 [cluster="System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", file="TypeLookup.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", span="0-0"];
m5_30 [cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>, CommandLine.Core.TypeDescriptor)", file="TypeLookup.cs", label="Entry CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>, CommandLine.Core.TypeDescriptor)", span="35-35"];
m5_42 [cluster="CommandLine.Core.TypeDescriptor.WithNext(CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>)", file="TypeLookup.cs", label="Entry CommandLine.Core.TypeDescriptor.WithNext(CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>)", span="45-45"];
m5_43 [file="TypeLookup.cs", label=string, span=""];
m5_44 [file="TypeLookup.cs", label="System.StringComparer", span=""];
m5_45 [file="TypeLookup.cs", label=string, span=""];
m5_46 [file="TypeLookup.cs", label="System.StringComparer", span=""];
m5_47 [file="TypeLookup.cs", label=info, span=""];
m0_41 -> m0_42  [key=0, style=solid];
m0_41 -> m0_43  [color=darkseagreen4, key=1, label="int[]", style=dashed];
m0_42 -> m0_43  [key=0, style=solid];
m0_42 -> m0_9  [key=2, style=dotted];
m0_42 -> m0_10  [key=2, style=dotted];
m0_42 -> m0_45  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_43 -> m0_44  [key=0, style=solid];
m0_43 -> m0_36  [key=2, style=dotted];
m0_43 -> m0_12  [key=2, style=dotted];
m0_44 -> m0_41  [color=blue, key=0, style=bold];
m0_358 -> m0_359  [key=0, style=solid];
m0_359 -> m0_360  [key=0, style=solid];
m0_359 -> m0_359  [color=darkorchid, key=3, label="Local variable System.Action test", style=bold];
m0_360 -> m0_361  [key=0, style=solid];
m0_360 -> m0_339  [key=2, style=dotted];
m0_361 -> m0_358  [color=blue, key=0, style=bold];
m0_152 -> m0_153  [key=0, style=solid];
m0_152 -> m0_154  [color=darkseagreen4, key=1, label="long[]", style=dashed];
m0_153 -> m0_154  [key=0, style=solid];
m0_153 -> m0_9  [key=2, style=dotted];
m0_153 -> m0_10  [key=2, style=dotted];
m0_153 -> m0_156  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_154 -> m0_155  [key=0, style=solid];
m0_154 -> m0_105  [key=2, style=dotted];
m0_155 -> m0_152  [color=blue, key=0, style=bold];
m0_267 -> m0_268  [key=0, style=solid];
m0_267 -> m0_269  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_268 -> m0_269  [key=0, style=solid];
m0_268 -> m0_9  [key=2, style=dotted];
m0_268 -> m0_10  [key=2, style=dotted];
m0_268 -> m0_272  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_269 -> m0_270  [key=0, style=solid];
m0_269 -> m0_271  [key=2, style=dotted];
m0_269 -> m0_12  [key=2, style=dotted];
m0_270 -> m0_267  [color=blue, key=0, style=bold];
m0_335 -> m0_336  [key=0, style=solid];
m0_336 -> m0_337  [key=0, style=solid];
m0_336 -> m0_336  [color=darkorchid, key=3, label="Local variable System.Action test", style=bold];
m0_337 -> m0_338  [key=0, style=solid];
m0_337 -> m0_339  [key=2, style=dotted];
m0_338 -> m0_335  [color=blue, key=0, style=bold];
m0_308 -> m0_309  [key=0, style=solid];
m0_308 -> m0_310  [color=darkseagreen4, key=1, label="long?", style=dashed];
m0_309 -> m0_310  [key=0, style=solid];
m0_309 -> m0_9  [key=2, style=dotted];
m0_309 -> m0_10  [key=2, style=dotted];
m0_309 -> m0_312  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_310 -> m0_311  [key=0, style=solid];
m0_310 -> m0_105  [key=2, style=dotted];
m0_311 -> m0_308  [color=blue, key=0, style=bold];
m0_167 -> m0_168  [key=0, style=solid];
m0_168 -> m0_169  [key=0, style=solid];
m0_168 -> m0_140  [key=2, style=dotted];
m0_168 -> m0_171  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_169 -> m0_170  [key=0, style=solid];
m0_171 -> m0_172  [key=0, style=solid];
m0_171 -> m0_105  [key=2, style=dotted];
m0_170 -> m0_171  [key=0, style=solid];
m0_170 -> m0_9  [key=2, style=dotted];
m0_170 -> m0_173  [key=2, style=dotted];
m0_170 -> m0_174  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_170 -> m0_177  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_172 -> m0_167  [color=blue, key=0, style=bold];
m0_259 -> m0_260  [key=0, style=solid];
m0_260 -> m0_261  [key=0, style=solid];
m0_260 -> m0_247  [key=2, style=dotted];
m0_260 -> m0_262  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_261 -> m0_262  [key=0, style=solid];
m0_261 -> m0_9  [key=2, style=dotted];
m0_261 -> m0_10  [key=2, style=dotted];
m0_261 -> m0_264  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_262 -> m0_263  [key=0, style=solid];
m0_262 -> m0_36  [key=2, style=dotted];
m0_262 -> m0_12  [key=2, style=dotted];
m0_263 -> m0_259  [color=blue, key=0, style=bold];
m0_74 -> m0_75  [key=0, style=solid];
m0_75 -> m0_76  [key=0, style=solid];
m0_75 -> m0_79  [key=2, style=dotted];
m0_75 -> m0_77  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_76 -> m0_77  [key=0, style=solid];
m0_76 -> m0_9  [key=2, style=dotted];
m0_76 -> m0_10  [key=2, style=dotted];
m0_76 -> m0_80  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_77 -> m0_78  [key=0, style=solid];
m0_77 -> m0_36  [key=2, style=dotted];
m0_77 -> m0_12  [key=2, style=dotted];
m0_78 -> m0_74  [color=blue, key=0, style=bold];
m0_92 -> m0_93  [key=0, style=solid];
m0_93 -> m0_94  [key=0, style=solid];
m0_93 -> m0_79  [key=2, style=dotted];
m0_93 -> m0_95  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_94 -> m0_95  [key=0, style=solid];
m0_94 -> m0_9  [key=2, style=dotted];
m0_94 -> m0_10  [key=2, style=dotted];
m0_94 -> m0_97  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_95 -> m0_96  [key=0, style=solid];
m0_95 -> m0_36  [key=2, style=dotted];
m0_95 -> m0_12  [key=2, style=dotted];
m0_96 -> m0_92  [color=blue, key=0, style=bold];
m0_315 -> m0_316  [key=0, style=solid];
m0_315 -> m0_318  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_315 -> m0_319  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_316 -> m0_317  [key=0, style=solid];
m0_316 -> m0_9  [key=2, style=dotted];
m0_316 -> m0_10  [key=2, style=dotted];
m0_316 -> m0_322  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_316 -> m0_318  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_316 -> m0_319  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_318 -> m0_319  [key=0, style=solid];
m0_318 -> m0_105  [key=2, style=dotted];
m0_319 -> m0_320  [key=0, style=solid];
m0_319 -> m0_321  [key=2, style=dotted];
m0_319 -> m0_105  [key=2, style=dotted];
m0_317 -> m0_318  [key=0, style=solid];
m0_317 -> m0_319  [key=0, style=solid];
m0_320 -> m0_315  [color=blue, key=0, style=bold];
m0_251 -> m0_252  [key=0, style=solid];
m0_252 -> m0_253  [key=0, style=solid];
m0_252 -> m0_247  [key=2, style=dotted];
m0_252 -> m0_254  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_253 -> m0_254  [key=0, style=solid];
m0_253 -> m0_9  [key=2, style=dotted];
m0_253 -> m0_10  [key=2, style=dotted];
m0_253 -> m0_256  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_254 -> m0_255  [key=0, style=solid];
m0_254 -> m0_36  [key=2, style=dotted];
m0_254 -> m0_12  [key=2, style=dotted];
m0_255 -> m0_251  [color=blue, key=0, style=bold];
m0_110 -> m0_111  [key=0, style=solid];
m0_111 -> m0_112  [key=0, style=solid];
m0_111 -> m0_115  [key=2, style=dotted];
m0_111 -> m0_70  [key=2, style=dotted];
m0_111 -> m0_113  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_112 -> m0_113  [key=0, style=solid];
m0_112 -> m0_9  [key=2, style=dotted];
m0_112 -> m0_10  [key=2, style=dotted];
m0_112 -> m0_116  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_113 -> m0_114  [key=0, style=solid];
m0_113 -> m0_36  [key=2, style=dotted];
m0_113 -> m0_12  [key=2, style=dotted];
m0_114 -> m0_110  [color=blue, key=0, style=bold];
m0_369 -> m0_370  [key=0, style=solid];
m0_369 -> m0_371  [color=darkseagreen4, key=1, label=int, style=dashed];
m0_369 -> m0_380  [color=darkseagreen4, key=1, label=int, style=dashed];
m0_370 -> m0_371  [key=0, style=solid];
m0_370 -> m0_9  [key=2, style=dotted];
m0_370 -> m0_10  [key=2, style=dotted];
m0_370 -> m0_375  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_371 -> m0_372  [key=0, style=solid];
m0_371 -> m0_373  [key=2, style=dotted];
m0_371 -> m0_374  [key=2, style=dotted];
m0_371 -> m0_379  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_372 -> m0_369  [color=blue, key=0, style=bold];
m0_399 -> m0_400  [key=0, style=solid];
m0_399 -> m0_401  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent", style=dashed];
m0_400 -> m0_401  [key=0, style=solid];
m0_400 -> m0_9  [key=2, style=dotted];
m0_400 -> m0_10  [key=2, style=dotted];
m0_400 -> m0_403  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_401 -> m0_402  [key=0, style=solid];
m0_401 -> m0_105  [key=2, style=dotted];
m0_402 -> m0_399  [color=blue, key=0, style=bold];
m0_144 -> m0_145  [key=0, style=solid];
m0_144 -> m0_146  [color=darkseagreen4, key=1, label="long[]", style=dashed];
m0_145 -> m0_146  [key=0, style=solid];
m0_145 -> m0_9  [key=2, style=dotted];
m0_145 -> m0_10  [key=2, style=dotted];
m0_145 -> m0_148  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_146 -> m0_147  [key=0, style=solid];
m0_146 -> m0_105  [key=2, style=dotted];
m0_147 -> m0_144  [color=blue, key=0, style=bold];
m0_56 -> m0_57  [key=0, style=solid];
m0_56 -> m0_58  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m0_57 -> m0_58  [key=0, style=solid];
m0_57 -> m0_9  [key=2, style=dotted];
m0_57 -> m0_10  [key=2, style=dotted];
m0_57 -> m0_60  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_58 -> m0_59  [key=0, style=solid];
m0_58 -> m0_36  [key=2, style=dotted];
m0_58 -> m0_12  [key=2, style=dotted];
m0_59 -> m0_56  [color=blue, key=0, style=bold];
m0_32 -> m0_33  [key=0, style=solid];
m0_32 -> m0_34  [color=darkseagreen4, key=1, label="int[]", style=dashed];
m0_33 -> m0_34  [key=0, style=solid];
m0_33 -> m0_9  [key=2, style=dotted];
m0_33 -> m0_10  [key=2, style=dotted];
m0_33 -> m0_37  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_34 -> m0_35  [key=0, style=solid];
m0_34 -> m0_36  [key=2, style=dotted];
m0_34 -> m0_12  [key=2, style=dotted];
m0_35 -> m0_32  [color=blue, key=0, style=bold];
m0_412 -> m0_413  [key=0, style=solid];
m0_14 -> m0_15  [key=0, style=solid];
m0_13 -> m0_14  [key=0, style=solid];
m0_15 -> m0_13  [color=blue, key=0, style=bold];
m0_21 -> m0_22  [key=0, style=solid];
m0_22 -> m0_23  [key=0, style=solid];
m0_22 -> m0_6  [key=2, style=dotted];
m0_23 -> m0_21  [color=blue, key=0, style=bold];
m0_28 -> m0_29  [key=0, style=solid];
m0_29 -> m0_30  [key=0, style=solid];
m0_29 -> m0_31  [key=2, style=dotted];
m0_30 -> m0_28  [color=blue, key=0, style=bold];
m0_37 -> m0_38  [key=0, style=solid];
m0_38 -> m0_39  [key=0, style=solid];
m0_38 -> m0_40  [key=2, style=dotted];
m0_39 -> m0_37  [color=blue, key=0, style=bold];
m0_45 -> m0_46  [key=0, style=solid];
m0_46 -> m0_47  [key=0, style=solid];
m0_46 -> m0_6  [key=2, style=dotted];
m0_47 -> m0_45  [color=blue, key=0, style=bold];
m0_52 -> m0_53  [key=0, style=solid];
m0_53 -> m0_54  [key=0, style=solid];
m0_53 -> m0_55  [key=2, style=dotted];
m0_54 -> m0_52  [color=blue, key=0, style=bold];
m0_60 -> m0_61  [key=0, style=solid];
m0_61 -> m0_62  [key=0, style=solid];
m0_61 -> m0_63  [key=2, style=dotted];
m0_62 -> m0_60  [color=blue, key=0, style=bold];
m0_71 -> m0_72  [key=0, style=solid];
m0_72 -> m0_73  [key=0, style=solid];
m0_72 -> m0_55  [key=2, style=dotted];
m0_73 -> m0_71  [color=blue, key=0, style=bold];
m0_80 -> m0_81  [key=0, style=solid];
m0_81 -> m0_82  [key=0, style=solid];
m0_81 -> m0_83  [key=2, style=dotted];
m0_82 -> m0_80  [color=blue, key=0, style=bold];
m0_89 -> m0_90  [key=0, style=solid];
m0_90 -> m0_91  [key=0, style=solid];
m0_90 -> m0_63  [key=2, style=dotted];
m0_91 -> m0_89  [color=blue, key=0, style=bold];
m0_97 -> m0_98  [key=0, style=solid];
m0_98 -> m0_99  [key=0, style=solid];
m0_98 -> m0_100  [key=2, style=dotted];
m0_99 -> m0_97  [color=blue, key=0, style=bold];
m0_106 -> m0_107  [key=0, style=solid];
m0_107 -> m0_108  [key=0, style=solid];
m0_107 -> m0_109  [key=2, style=dotted];
m0_108 -> m0_106  [color=blue, key=0, style=bold];
m0_116 -> m0_117  [key=0, style=solid];
m0_117 -> m0_118  [key=0, style=solid];
m0_117 -> m0_109  [key=2, style=dotted];
m0_118 -> m0_116  [color=blue, key=0, style=bold];
m0_124 -> m0_125  [key=0, style=solid];
m0_125 -> m0_126  [key=0, style=solid];
m0_125 -> m0_109  [key=2, style=dotted];
m0_126 -> m0_124  [color=blue, key=0, style=bold];
m0_132 -> m0_133  [key=0, style=solid];
m0_133 -> m0_134  [key=0, style=solid];
m0_133 -> m0_109  [key=2, style=dotted];
m0_134 -> m0_132  [color=blue, key=0, style=bold];
m0_141 -> m0_142  [key=0, style=solid];
m0_142 -> m0_143  [key=0, style=solid];
m0_142 -> m0_140  [key=2, style=dotted];
m0_143 -> m0_141  [color=blue, key=0, style=bold];
m0_148 -> m0_149  [key=0, style=solid];
m0_149 -> m0_150  [key=0, style=solid];
m0_149 -> m0_151  [key=2, style=dotted];
m0_150 -> m0_148  [color=blue, key=0, style=bold];
m0_156 -> m0_157  [key=0, style=solid];
m0_157 -> m0_158  [key=0, style=solid];
m0_157 -> m0_159  [key=2, style=dotted];
m0_158 -> m0_156  [color=blue, key=0, style=bold];
m0_164 -> m0_165  [key=0, style=solid];
m0_165 -> m0_166  [key=0, style=solid];
m0_165 -> m0_159  [key=2, style=dotted];
m0_166 -> m0_164  [color=blue, key=0, style=bold];
m0_174 -> m0_175  [key=0, style=solid];
m0_177 -> m0_178  [key=0, style=solid];
m0_177 -> m0_182  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_177 -> m0_186  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_175 -> m0_176  [key=0, style=solid];
m0_175 -> m0_140  [key=2, style=dotted];
m0_176 -> m0_174  [color=blue, key=0, style=bold];
m0_178 -> m0_179  [key=0, style=solid];
m0_178 -> m0_180  [key=2, style=dotted];
m0_178 -> m0_181  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_182 -> m0_183  [key=0, style=solid];
m0_182 -> m0_184  [key=2, style=dotted];
m0_182 -> m0_185  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_186 -> m0_187  [key=0, style=solid];
m0_186 -> m0_188  [key=2, style=dotted];
m0_179 -> m0_177  [color=blue, key=0, style=bold];
m0_181 -> m0_182  [key=0, style=solid];
m0_183 -> m0_181  [color=blue, key=0, style=bold];
m0_185 -> m0_186  [key=0, style=solid];
m0_187 -> m0_185  [color=blue, key=0, style=bold];
m0_195 -> m0_196  [key=0, style=solid];
m0_196 -> m0_197  [key=0, style=solid];
m0_196 -> m0_198  [key=2, style=dotted];
m0_197 -> m0_195  [color=blue, key=0, style=bold];
m0_205 -> m0_206  [key=0, style=solid];
m0_206 -> m0_207  [key=0, style=solid];
m0_206 -> m0_204  [key=2, style=dotted];
m0_207 -> m0_205  [color=blue, key=0, style=bold];
m0_213 -> m0_214  [key=0, style=solid];
m0_214 -> m0_215  [key=0, style=solid];
m0_214 -> m0_204  [key=2, style=dotted];
m0_215 -> m0_213  [color=blue, key=0, style=bold];
m0_222 -> m0_223  [key=0, style=solid];
m0_223 -> m0_224  [key=0, style=solid];
m0_223 -> m0_204  [key=2, style=dotted];
m0_224 -> m0_222  [color=blue, key=0, style=bold];
m0_230 -> m0_231  [key=0, style=solid];
m0_231 -> m0_232  [key=0, style=solid];
m0_231 -> m0_233  [key=2, style=dotted];
m0_232 -> m0_230  [color=blue, key=0, style=bold];
m0_239 -> m0_240  [key=0, style=solid];
m0_240 -> m0_241  [key=0, style=solid];
m0_240 -> m0_6  [key=2, style=dotted];
m0_241 -> m0_239  [color=blue, key=0, style=bold];
m0_248 -> m0_249  [key=0, style=solid];
m0_249 -> m0_250  [key=0, style=solid];
m0_249 -> m0_6  [key=2, style=dotted];
m0_250 -> m0_248  [color=blue, key=0, style=bold];
m0_256 -> m0_257  [key=0, style=solid];
m0_257 -> m0_258  [key=0, style=solid];
m0_257 -> m0_6  [key=2, style=dotted];
m0_258 -> m0_256  [color=blue, key=0, style=bold];
m0_264 -> m0_265  [key=0, style=solid];
m0_265 -> m0_266  [key=0, style=solid];
m0_265 -> m0_6  [key=2, style=dotted];
m0_266 -> m0_264  [color=blue, key=0, style=bold];
m0_272 -> m0_273  [key=0, style=solid];
m0_273 -> m0_274  [key=0, style=solid];
m0_273 -> m0_6  [key=2, style=dotted];
m0_274 -> m0_272  [color=blue, key=0, style=bold];
m0_280 -> m0_281  [key=0, style=solid];
m0_281 -> m0_282  [key=0, style=solid];
m0_281 -> m0_283  [key=2, style=dotted];
m0_282 -> m0_280  [color=blue, key=0, style=bold];
m0_288 -> m0_289  [key=0, style=solid];
m0_289 -> m0_290  [key=0, style=solid];
m0_289 -> m0_6  [key=2, style=dotted];
m0_290 -> m0_288  [color=blue, key=0, style=bold];
m0_296 -> m0_297  [key=0, style=solid];
m0_297 -> m0_298  [key=0, style=solid];
m0_297 -> m0_299  [key=2, style=dotted];
m0_298 -> m0_296  [color=blue, key=0, style=bold];
m0_304 -> m0_305  [key=0, style=solid];
m0_305 -> m0_306  [key=0, style=solid];
m0_305 -> m0_307  [key=2, style=dotted];
m0_306 -> m0_304  [color=blue, key=0, style=bold];
m0_312 -> m0_313  [key=0, style=solid];
m0_313 -> m0_314  [key=0, style=solid];
m0_313 -> m0_307  [key=2, style=dotted];
m0_314 -> m0_312  [color=blue, key=0, style=bold];
m0_322 -> m0_323  [key=0, style=solid];
m0_323 -> m0_324  [key=0, style=solid];
m0_323 -> m0_325  [key=2, style=dotted];
m0_324 -> m0_322  [color=blue, key=0, style=bold];
m0_332 -> m0_333  [key=0, style=solid];
m0_333 -> m0_334  [key=0, style=solid];
m0_333 -> m0_325  [key=2, style=dotted];
m0_334 -> m0_332  [color=blue, key=0, style=bold];
m0_340 -> m0_341  [key=0, style=solid];
m0_341 -> m0_342  [key=0, style=solid];
m0_341 -> m0_9  [key=2, style=dotted];
m0_341 -> m0_10  [key=2, style=dotted];
m0_341 -> m0_343  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_342 -> m0_340  [color=blue, key=0, style=bold];
m0_343 -> m0_344  [key=0, style=solid];
m0_344 -> m0_345  [key=0, style=solid];
m0_344 -> m0_346  [key=2, style=dotted];
m0_345 -> m0_343  [color=blue, key=0, style=bold];
m0_351 -> m0_352  [key=0, style=solid];
m0_352 -> m0_353  [key=0, style=solid];
m0_352 -> m0_9  [key=2, style=dotted];
m0_352 -> m0_10  [key=2, style=dotted];
m0_352 -> m0_354  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_353 -> m0_351  [color=blue, key=0, style=bold];
m0_354 -> m0_355  [key=0, style=solid];
m0_355 -> m0_356  [key=0, style=solid];
m0_355 -> m0_357  [key=2, style=dotted];
m0_356 -> m0_354  [color=blue, key=0, style=bold];
m0_362 -> m0_363  [key=0, style=solid];
m0_363 -> m0_364  [key=0, style=solid];
m0_363 -> m0_9  [key=2, style=dotted];
m0_363 -> m0_10  [key=2, style=dotted];
m0_363 -> m0_365  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_364 -> m0_362  [color=blue, key=0, style=bold];
m0_365 -> m0_366  [key=0, style=solid];
m0_366 -> m0_367  [key=0, style=solid];
m0_366 -> m0_368  [key=2, style=dotted];
m0_367 -> m0_365  [color=blue, key=0, style=bold];
m0_380 -> m0_381  [key=0, style=solid];
m0_375 -> m0_376  [key=0, style=solid];
m0_379 -> m0_380  [key=0, style=solid];
m0_376 -> m0_377  [key=0, style=solid];
m0_376 -> m0_378  [key=2, style=dotted];
m0_377 -> m0_375  [color=blue, key=0, style=bold];
m0_381 -> m0_379  [color=blue, key=0, style=bold];
m0_390 -> m0_391  [key=0, style=solid];
m0_386 -> m0_387  [key=0, style=solid];
m0_389 -> m0_390  [key=0, style=solid];
m0_387 -> m0_388  [key=0, style=solid];
m0_387 -> m0_6  [key=2, style=dotted];
m0_388 -> m0_386  [color=blue, key=0, style=bold];
m0_391 -> m0_389  [color=blue, key=0, style=bold];
m0_396 -> m0_397  [key=0, style=solid];
m0_397 -> m0_398  [key=0, style=solid];
m0_397 -> m0_283  [key=2, style=dotted];
m0_398 -> m0_396  [color=blue, key=0, style=bold];
m0_403 -> m0_404  [key=0, style=solid];
m0_404 -> m0_405  [key=0, style=solid];
m0_404 -> m0_406  [key=2, style=dotted];
m0_405 -> m0_403  [color=blue, key=0, style=bold];
m0_413 -> m0_414  [key=0, style=solid];
m0_413 -> m0_6  [key=2, style=dotted];
m0_414 -> m0_412  [color=blue, key=0, style=bold];
m0_382 -> m0_383  [key=0, style=solid];
m0_382 -> m0_384  [color=darkseagreen4, key=1, label=int, style=dashed];
m0_382 -> m0_390  [color=darkseagreen4, key=1, label=int, style=dashed];
m0_383 -> m0_384  [key=0, style=solid];
m0_383 -> m0_9  [key=2, style=dotted];
m0_383 -> m0_10  [key=2, style=dotted];
m0_383 -> m0_386  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_384 -> m0_385  [key=0, style=solid];
m0_384 -> m0_373  [key=2, style=dotted];
m0_384 -> m0_374  [key=2, style=dotted];
m0_384 -> m0_389  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_385 -> m0_382  [color=blue, key=0, style=bold];
m0_48 -> m0_49  [key=0, style=solid];
m0_48 -> m0_50  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m0_49 -> m0_50  [key=0, style=solid];
m0_49 -> m0_9  [key=2, style=dotted];
m0_49 -> m0_10  [key=2, style=dotted];
m0_49 -> m0_52  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_50 -> m0_51  [key=0, style=solid];
m0_50 -> m0_36  [key=2, style=dotted];
m0_50 -> m0_12  [key=2, style=dotted];
m0_51 -> m0_48  [color=blue, key=0, style=bold];
m0_119 -> m0_120  [key=0, style=solid];
m0_120 -> m0_121  [key=0, style=solid];
m0_120 -> m0_115  [key=2, style=dotted];
m0_120 -> m0_70  [key=2, style=dotted];
m0_120 -> m0_122  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_121 -> m0_122  [key=0, style=solid];
m0_121 -> m0_9  [key=2, style=dotted];
m0_121 -> m0_10  [key=2, style=dotted];
m0_121 -> m0_124  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_122 -> m0_123  [key=0, style=solid];
m0_122 -> m0_36  [key=2, style=dotted];
m0_122 -> m0_12  [key=2, style=dotted];
m0_123 -> m0_119  [color=blue, key=0, style=bold];
m0_24 -> m0_25  [key=0, style=solid];
m0_24 -> m0_26  [color=darkseagreen4, key=1, label=double, style=dashed];
m0_25 -> m0_26  [key=0, style=solid];
m0_25 -> m0_9  [key=2, style=dotted];
m0_25 -> m0_10  [key=2, style=dotted];
m0_25 -> m0_28  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_26 -> m0_27  [key=0, style=solid];
m0_26 -> m0_20  [key=2, style=dotted];
m0_27 -> m0_24  [color=blue, key=0, style=bold];
m0_275 -> m0_276  [key=0, style=solid];
m0_276 -> m0_277  [key=0, style=solid];
m0_276 -> m0_221  [key=2, style=dotted];
m0_276 -> m0_278  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_277 -> m0_278  [key=0, style=solid];
m0_277 -> m0_9  [key=2, style=dotted];
m0_277 -> m0_10  [key=2, style=dotted];
m0_277 -> m0_280  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_278 -> m0_279  [key=0, style=solid];
m0_278 -> m0_36  [key=2, style=dotted];
m0_278 -> m0_12  [key=2, style=dotted];
m0_279 -> m0_275  [color=blue, key=0, style=bold];
m0_234 -> m0_235  [key=0, style=solid];
m0_235 -> m0_236  [key=0, style=solid];
m0_235 -> m0_79  [key=2, style=dotted];
m0_235 -> m0_70  [key=2, style=dotted];
m0_235 -> m0_237  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_236 -> m0_237  [key=0, style=solid];
m0_236 -> m0_9  [key=2, style=dotted];
m0_236 -> m0_10  [key=2, style=dotted];
m0_236 -> m0_239  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_237 -> m0_238  [key=0, style=solid];
m0_237 -> m0_36  [key=2, style=dotted];
m0_237 -> m0_12  [key=2, style=dotted];
m0_238 -> m0_234  [color=blue, key=0, style=bold];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_6  [key=2, style=dotted];
m0_1 -> m0_3  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m0_1 -> m0_14  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m0_2 -> m0_3  [key=0, style=solid];
m0_2 -> m0_7  [key=2, style=dotted];
m0_2 -> m0_8  [key=2, style=dotted];
m0_2 -> m0_4  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_3 -> m0_4  [key=0, style=solid];
m0_3 -> m0_9  [key=2, style=dotted];
m0_3 -> m0_10  [key=2, style=dotted];
m0_3 -> m0_13  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_4 -> m0_5  [key=0, style=solid];
m0_4 -> m0_11  [key=2, style=dotted];
m0_4 -> m0_12  [key=2, style=dotted];
m0_5 -> m0_0  [color=blue, key=0, style=bold];
m0_225 -> m0_226  [key=0, style=solid];
m0_226 -> m0_227  [key=0, style=solid];
m0_226 -> m0_221  [key=2, style=dotted];
m0_226 -> m0_70  [key=2, style=dotted];
m0_226 -> m0_228  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_227 -> m0_228  [key=0, style=solid];
m0_227 -> m0_9  [key=2, style=dotted];
m0_227 -> m0_10  [key=2, style=dotted];
m0_227 -> m0_230  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_228 -> m0_229  [key=0, style=solid];
m0_228 -> m0_36  [key=2, style=dotted];
m0_228 -> m0_12  [key=2, style=dotted];
m0_229 -> m0_225  [color=blue, key=0, style=bold];
m0_216 -> m0_217  [key=0, style=solid];
m0_217 -> m0_218  [key=0, style=solid];
m0_217 -> m0_221  [key=2, style=dotted];
m0_217 -> m0_70  [key=2, style=dotted];
m0_217 -> m0_219  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_218 -> m0_219  [key=0, style=solid];
m0_218 -> m0_9  [key=2, style=dotted];
m0_218 -> m0_10  [key=2, style=dotted];
m0_218 -> m0_222  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_219 -> m0_220  [key=0, style=solid];
m0_219 -> m0_36  [key=2, style=dotted];
m0_219 -> m0_12  [key=2, style=dotted];
m0_220 -> m0_216  [color=blue, key=0, style=bold];
m0_127 -> m0_128  [key=0, style=solid];
m0_128 -> m0_129  [key=0, style=solid];
m0_128 -> m0_115  [key=2, style=dotted];
m0_128 -> m0_70  [key=2, style=dotted];
m0_128 -> m0_130  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_129 -> m0_130  [key=0, style=solid];
m0_129 -> m0_9  [key=2, style=dotted];
m0_129 -> m0_10  [key=2, style=dotted];
m0_129 -> m0_132  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_130 -> m0_131  [key=0, style=solid];
m0_130 -> m0_36  [key=2, style=dotted];
m0_130 -> m0_12  [key=2, style=dotted];
m0_131 -> m0_127  [color=blue, key=0, style=bold];
m0_392 -> m0_393  [key=0, style=solid];
m0_392 -> m0_394  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue", style=dashed];
m0_393 -> m0_394  [key=0, style=solid];
m0_393 -> m0_9  [key=2, style=dotted];
m0_393 -> m0_10  [key=2, style=dotted];
m0_393 -> m0_396  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_394 -> m0_395  [key=0, style=solid];
m0_394 -> m0_105  [key=2, style=dotted];
m0_395 -> m0_392  [color=blue, key=0, style=bold];
m0_84 -> m0_85  [key=0, style=solid];
m0_85 -> m0_86  [key=0, style=solid];
m0_85 -> m0_79  [key=2, style=dotted];
m0_85 -> m0_70  [key=2, style=dotted];
m0_85 -> m0_87  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_86 -> m0_87  [key=0, style=solid];
m0_86 -> m0_9  [key=2, style=dotted];
m0_86 -> m0_10  [key=2, style=dotted];
m0_86 -> m0_89  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_87 -> m0_88  [key=0, style=solid];
m0_87 -> m0_36  [key=2, style=dotted];
m0_87 -> m0_12  [key=2, style=dotted];
m0_88 -> m0_84  [color=blue, key=0, style=bold];
m0_64 -> m0_65  [key=0, style=solid];
m0_65 -> m0_66  [key=0, style=solid];
m0_65 -> m0_69  [key=2, style=dotted];
m0_65 -> m0_70  [key=2, style=dotted];
m0_65 -> m0_67  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_66 -> m0_67  [key=0, style=solid];
m0_66 -> m0_9  [key=2, style=dotted];
m0_66 -> m0_10  [key=2, style=dotted];
m0_66 -> m0_71  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_67 -> m0_68  [key=0, style=solid];
m0_67 -> m0_36  [key=2, style=dotted];
m0_67 -> m0_12  [key=2, style=dotted];
m0_68 -> m0_64  [color=blue, key=0, style=bold];
m0_135 -> m0_136  [key=0, style=solid];
m0_136 -> m0_137  [key=0, style=solid];
m0_136 -> m0_140  [key=2, style=dotted];
m0_136 -> m0_138  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_137 -> m0_138  [key=0, style=solid];
m0_137 -> m0_9  [key=2, style=dotted];
m0_137 -> m0_10  [key=2, style=dotted];
m0_137 -> m0_141  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_138 -> m0_139  [key=0, style=solid];
m0_138 -> m0_105  [key=2, style=dotted];
m0_139 -> m0_135  [color=blue, key=0, style=bold];
m0_16 -> m0_17  [key=0, style=solid];
m0_16 -> m0_18  [color=darkseagreen4, key=1, label=long, style=dashed];
m0_17 -> m0_18  [key=0, style=solid];
m0_17 -> m0_9  [key=2, style=dotted];
m0_17 -> m0_10  [key=2, style=dotted];
m0_17 -> m0_21  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_18 -> m0_19  [key=0, style=solid];
m0_18 -> m0_20  [key=2, style=dotted];
m0_19 -> m0_16  [color=blue, key=0, style=bold];
m0_326 -> m0_327  [key=0, style=solid];
m0_326 -> m0_329  [color=darkseagreen4, key=1, label=int, style=dashed];
m0_326 -> m0_330  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_327 -> m0_328  [key=0, style=solid];
m0_327 -> m0_9  [key=2, style=dotted];
m0_327 -> m0_10  [key=2, style=dotted];
m0_327 -> m0_332  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_327 -> m0_329  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_327 -> m0_330  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_329 -> m0_330  [key=0, style=solid];
m0_329 -> m0_105  [key=2, style=dotted];
m0_330 -> m0_331  [key=0, style=solid];
m0_330 -> m0_321  [key=2, style=dotted];
m0_330 -> m0_105  [key=2, style=dotted];
m0_328 -> m0_329  [key=0, style=solid];
m0_328 -> m0_330  [key=0, style=solid];
m0_331 -> m0_326  [color=blue, key=0, style=bold];
m0_407 -> m0_408  [key=0, style=solid];
m0_408 -> m0_409  [key=0, style=solid];
m0_408 -> m0_6  [key=2, style=dotted];
m0_408 -> m0_410  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_409 -> m0_410  [key=0, style=solid];
m0_409 -> m0_9  [key=2, style=dotted];
m0_409 -> m0_10  [key=2, style=dotted];
m0_409 -> m0_412  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_410 -> m0_411  [key=0, style=solid];
m0_410 -> m0_105  [key=2, style=dotted];
m0_411 -> m0_407  [color=blue, key=0, style=bold];
m0_160 -> m0_161  [key=0, style=solid];
m0_160 -> m0_162  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m0_161 -> m0_162  [key=0, style=solid];
m0_161 -> m0_9  [key=2, style=dotted];
m0_161 -> m0_10  [key=2, style=dotted];
m0_161 -> m0_164  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_162 -> m0_163  [key=0, style=solid];
m0_162 -> m0_105  [key=2, style=dotted];
m0_163 -> m0_160  [color=blue, key=0, style=bold];
m0_300 -> m0_301  [key=0, style=solid];
m0_300 -> m0_302  [color=darkseagreen4, key=1, label="int?", style=dashed];
m0_301 -> m0_302  [key=0, style=solid];
m0_301 -> m0_9  [key=2, style=dotted];
m0_301 -> m0_10  [key=2, style=dotted];
m0_301 -> m0_304  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_302 -> m0_303  [key=0, style=solid];
m0_302 -> m0_105  [key=2, style=dotted];
m0_303 -> m0_300  [color=blue, key=0, style=bold];
m0_242 -> m0_243  [key=0, style=solid];
m0_243 -> m0_244  [key=0, style=solid];
m0_243 -> m0_247  [key=2, style=dotted];
m0_243 -> m0_245  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_244 -> m0_245  [key=0, style=solid];
m0_244 -> m0_9  [key=2, style=dotted];
m0_244 -> m0_10  [key=2, style=dotted];
m0_244 -> m0_248  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_245 -> m0_246  [key=0, style=solid];
m0_245 -> m0_36  [key=2, style=dotted];
m0_245 -> m0_12  [key=2, style=dotted];
m0_246 -> m0_242  [color=blue, key=0, style=bold];
m0_208 -> m0_209  [key=0, style=solid];
m0_209 -> m0_210  [key=0, style=solid];
m0_209 -> m0_204  [key=2, style=dotted];
m0_209 -> m0_211  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_210 -> m0_211  [key=0, style=solid];
m0_210 -> m0_9  [key=2, style=dotted];
m0_210 -> m0_10  [key=2, style=dotted];
m0_210 -> m0_213  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_211 -> m0_212  [key=0, style=solid];
m0_211 -> m0_105  [key=2, style=dotted];
m0_212 -> m0_208  [color=blue, key=0, style=bold];
m0_291 -> m0_292  [key=0, style=solid];
m0_292 -> m0_293  [key=0, style=solid];
m0_292 -> m0_79  [key=2, style=dotted];
m0_292 -> m0_294  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_293 -> m0_294  [key=0, style=solid];
m0_293 -> m0_9  [key=2, style=dotted];
m0_293 -> m0_10  [key=2, style=dotted];
m0_293 -> m0_296  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_294 -> m0_295  [key=0, style=solid];
m0_294 -> m0_36  [key=2, style=dotted];
m0_294 -> m0_12  [key=2, style=dotted];
m0_295 -> m0_291  [color=blue, key=0, style=bold];
m0_101 -> m0_102  [key=0, style=solid];
m0_101 -> m0_103  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
m0_102 -> m0_103  [key=0, style=solid];
m0_102 -> m0_9  [key=2, style=dotted];
m0_102 -> m0_10  [key=2, style=dotted];
m0_102 -> m0_106  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_103 -> m0_104  [key=0, style=solid];
m0_103 -> m0_105  [key=2, style=dotted];
m0_103 -> m0_103  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
m0_104 -> m0_101  [color=blue, key=0, style=bold];
m0_415 -> m0_416  [key=0, style=solid];
m0_415 -> m0_417  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeImmutableOptions", style=dashed];
m0_416 -> m0_417  [key=0, style=solid];
m0_416 -> m0_419  [key=2, style=dotted];
m0_416 -> m0_10  [key=2, style=dotted];
m0_417 -> m0_418  [key=0, style=solid];
m0_417 -> m0_105  [key=2, style=dotted];
m0_418 -> m0_415  [color=blue, key=0, style=bold];
m0_284 -> m0_285  [key=0, style=solid];
m0_284 -> m0_286  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_285 -> m0_286  [key=0, style=solid];
m0_285 -> m0_9  [key=2, style=dotted];
m0_285 -> m0_10  [key=2, style=dotted];
m0_285 -> m0_288  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_286 -> m0_287  [key=0, style=solid];
m0_286 -> m0_105  [key=2, style=dotted];
m0_287 -> m0_284  [color=blue, key=0, style=bold];
m0_199 -> m0_200  [key=0, style=solid];
m0_200 -> m0_201  [key=0, style=solid];
m0_200 -> m0_204  [key=2, style=dotted];
m0_200 -> m0_202  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_201 -> m0_202  [key=0, style=solid];
m0_201 -> m0_9  [key=2, style=dotted];
m0_201 -> m0_10  [key=2, style=dotted];
m0_201 -> m0_205  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_202 -> m0_203  [key=0, style=solid];
m0_202 -> m0_105  [key=2, style=dotted];
m0_203 -> m0_199  [color=blue, key=0, style=bold];
m0_347 -> m0_348  [key=0, style=solid];
m0_348 -> m0_349  [key=0, style=solid];
m0_348 -> m0_348  [color=darkorchid, key=3, label="Local variable System.Action test", style=bold];
m0_349 -> m0_350  [key=0, style=solid];
m0_349 -> m0_339  [key=2, style=dotted];
m0_350 -> m0_347  [color=blue, key=0, style=bold];
m0_189 -> m0_190  [key=0, style=solid];
m0_190 -> m0_191  [key=0, style=solid];
m0_190 -> m0_194  [key=2, style=dotted];
m0_190 -> m0_70  [key=2, style=dotted];
m0_190 -> m0_192  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_191 -> m0_192  [key=0, style=solid];
m0_191 -> m0_9  [key=2, style=dotted];
m0_191 -> m0_10  [key=2, style=dotted];
m0_191 -> m0_195  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_192 -> m0_193  [key=0, style=solid];
m0_192 -> m0_36  [key=2, style=dotted];
m0_192 -> m0_12  [key=2, style=dotted];
m0_193 -> m0_189  [color=blue, key=0, style=bold];
m0_420 -> m0_14  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m0_421 -> m0_182  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_421 -> m0_186  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_422 -> m0_380  [color=darkseagreen4, key=1, label=int, style=dashed];
m0_423 -> m0_390  [color=darkseagreen4, key=1, label=int, style=dashed];
m1_45 -> m1_46  [key=0, style=solid];
m1_46 -> m1_47  [key=0, style=solid];
m1_46 -> m1_49  [key=2, style=dotted];
m1_46 -> m1_50  [key=2, style=dotted];
m1_46 -> m1_51  [key=2, style=dotted];
m1_47 -> m1_48  [key=0, style=solid];
m1_47 -> m1_52  [key=2, style=dotted];
m1_47 -> m1_53  [key=2, style=dotted];
m1_48 -> m1_45  [color=blue, key=0, style=bold];
m1_22 -> m1_23  [key=0, style=solid];
m1_22 -> m1_24  [color=darkseagreen4, key=1, label="System.Reflection.PropertyInfo", style=dashed];
m1_22 -> m1_33  [color=darkseagreen4, key=1, label=T, style=dashed];
m1_22 -> m1_22  [color=darkorchid, key=3, label="method methodReturn T SetValue", style=bold];
m1_23 -> m1_24  [key=0, style=solid];
m1_23 -> m1_38  [color=darkseagreen4, key=1, label="System.Exception", style=dashed];
m1_23 -> m1_26  [color=darkseagreen4, key=1, label=fail, style=dashed];
m1_23 -> m1_28  [color=darkseagreen4, key=1, label=fail, style=dashed];
m1_23 -> m1_30  [color=darkseagreen4, key=1, label=fail, style=dashed];
m1_23 -> m1_32  [color=darkseagreen4, key=1, label=fail, style=dashed];
m1_23 -> m1_23  [color=darkorchid, key=3, label="Local variable System.Action<System.Exception> fail", style=bold];
m1_24 -> m1_25  [key=0, style=solid];
m1_24 -> m1_27  [key=0, style=solid];
m1_24 -> m1_29  [key=0, style=solid];
m1_24 -> m1_31  [key=0, style=solid];
m1_24 -> m1_33  [key=0, style=solid];
m1_24 -> m1_35  [key=2, style=dotted];
m1_33 -> m1_34  [key=0, style=solid];
m1_26 -> m1_33  [key=0, style=solid];
m1_26 -> m1_36  [key=2, style=dotted];
m1_28 -> m1_33  [key=0, style=solid];
m1_28 -> m1_36  [key=2, style=dotted];
m1_30 -> m1_33  [key=0, style=solid];
m1_30 -> m1_36  [key=2, style=dotted];
m1_32 -> m1_33  [key=0, style=solid];
m1_32 -> m1_36  [key=2, style=dotted];
m1_25 -> m1_26  [key=0, style=solid];
m1_27 -> m1_28  [key=0, style=solid];
m1_29 -> m1_30  [key=0, style=solid];
m1_31 -> m1_32  [key=0, style=solid];
m1_34 -> m1_22  [color=blue, key=0, style=bold];
m1_8 -> m1_9  [key=0, style=solid];
m1_9 -> m1_10  [key=0, style=solid];
m1_9 -> m1_11  [key=2, style=dotted];
m1_10 -> m1_8  [color=blue, key=0, style=bold];
m1_37 -> m1_38  [key=0, style=solid];
m1_18 -> m1_19  [key=0, style=solid];
m1_18 -> m1_7  [key=2, style=dotted];
m1_18 -> m1_21  [key=2, style=dotted];
m1_19 -> m1_20  [key=0, style=solid];
m1_17 -> m1_18  [key=0, style=solid];
m1_20 -> m1_17  [color=blue, key=0, style=bold];
m1_38 -> m1_39  [key=0, style=solid];
m1_38 -> m1_40  [key=2, style=dotted];
m1_39 -> m1_37  [color=blue, key=0, style=bold];
m1_0 -> m1_1  [key=0, style=solid];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_3  [key=2, style=dotted];
m1_1 -> m1_4  [key=2, style=dotted];
m1_1 -> m1_5  [key=2, style=dotted];
m1_1 -> m1_6  [key=2, style=dotted];
m1_1 -> m1_7  [key=2, style=dotted];
m1_1 -> m1_1  [color=darkseagreen4, key=1, label=pi, style=dashed];
m1_2 -> m1_0  [color=blue, key=0, style=bold];
m1_41 -> m1_42  [key=0, style=solid];
m1_42 -> m1_43  [key=0, style=solid];
m1_42 -> m1_44  [key=2, style=dotted];
m1_43 -> m1_41  [color=blue, key=0, style=bold];
m1_12 -> m1_13  [key=0, style=solid];
m1_12 -> m1_18  [color=darkseagreen4, key=1, label="System.Func<CommandLine.Core.SpecificationProperty, object>", style=dashed];
m1_12 -> m1_19  [color=darkseagreen4, key=1, label=T, style=dashed];
m1_13 -> m1_14  [key=0, style=solid];
m1_13 -> m1_15  [key=2, style=dotted];
m1_13 -> m1_16  [key=2, style=dotted];
m1_13 -> m1_17  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_14 -> m1_12  [color=blue, key=0, style=bold];
m1_54 -> m1_18  [color=darkseagreen4, key=1, label="System.Func<CommandLine.Core.SpecificationProperty, object>", style=dashed];
m1_55 -> m1_19  [color=darkseagreen4, key=1, label=T, style=dashed];
m2_40 -> m2_41  [key=0, style=solid];
m2_40 -> m2_42  [color=darkseagreen4, key=1, label="int[]", style=dashed];
m2_40 -> m2_30  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m2_41 -> m2_42  [key=0, style=solid];
m2_41 -> m2_9  [key=2, style=dotted];
m2_41 -> m2_44  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_41 -> m2_30  [color=green, key=1, label=nameIndex, style=dashed];
m2_42 -> m2_43  [key=0, style=solid];
m2_42 -> m2_35  [key=2, style=dotted];
m2_42 -> m2_11  [key=2, style=dotted];
m2_43 -> m2_40  [color=blue, key=0, style=bold];
m2_0 -> m2_1  [color=green, key=0, style=solid];
m2_0 -> m2_5  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m2_0 -> m2_12  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m2_1 -> m2_1  [color=green, key=1, label=tseq, style=dashed];
m2_1 -> m2_2  [color=red, key=0, style=solid];
m2_1 -> m2_3  [color=green, key=2, style=dotted];
m2_1 -> m2_4  [color=green, key=1, label="lambda expression", style=dashed];
m2_1 -> m2_6  [key=2, style=dotted];
m2_1 -> m2_13  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m2_2 -> m2_0  [color=blue, key=0, style=bold];
m2_2 -> m2_3  [color=red, key=0, style=solid];
m2_2 -> m2_7  [color=red, key=2, style=dotted];
m2_2 -> m2_8  [color=red, key=2, style=dotted];
m2_2 -> m2_4  [color=red, key=1, label=expectedResult, style=dashed];
m2_3 -> m2_4  [color=red, key=0, style=solid];
m2_3 -> m2_9  [color=red, key=2, style=dotted];
m2_3 -> m2_12  [color=red, key=1, label="lambda expression", style=dashed];
m2_11 -> m2_12  [color=green, key=0, style=solid];
m2_28 -> m2_29  [key=0, style=solid];
m2_28 -> m2_30  [key=2, style=dotted];
m2_134 -> m2_135  [key=0, style=solid];
m2_134 -> m2_136  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m2_135 -> m2_136  [key=0, style=solid];
m2_135 -> m2_9  [key=2, style=dotted];
m2_135 -> m2_138  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_136 -> m2_137  [key=0, style=solid];
m2_136 -> m2_104  [key=2, style=dotted];
m2_137 -> m2_134  [color=blue, key=0, style=bold];
m2_208 -> m2_209  [key=0, style=solid];
m2_209 -> m2_210  [key=0, style=solid];
m2_209 -> m2_78  [key=2, style=dotted];
m2_209 -> m2_69  [key=2, style=dotted];
m2_209 -> m2_211  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m2_210 -> m2_211  [key=0, style=solid];
m2_210 -> m2_9  [key=2, style=dotted];
m2_210 -> m2_213  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_211 -> m2_212  [key=0, style=solid];
m2_211 -> m2_35  [key=2, style=dotted];
m2_211 -> m2_11  [key=2, style=dotted];
m2_212 -> m2_208  [color=blue, key=0, style=bold];
m2_126 -> m2_127  [key=0, style=solid];
m2_126 -> m2_128  [color=darkseagreen4, key=1, label="long[]", style=dashed];
m2_127 -> m2_128  [key=0, style=solid];
m2_127 -> m2_9  [key=2, style=dotted];
m2_127 -> m2_130  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_128 -> m2_129  [key=0, style=solid];
m2_128 -> m2_104  [key=2, style=dotted];
m2_129 -> m2_126  [color=blue, key=0, style=bold];
m2_118 -> m2_119  [key=0, style=solid];
m2_118 -> m2_120  [color=darkseagreen4, key=1, label="long[]", style=dashed];
m2_119 -> m2_120  [key=0, style=solid];
m2_119 -> m2_9  [key=2, style=dotted];
m2_119 -> m2_122  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_120 -> m2_121  [key=0, style=solid];
m2_120 -> m2_104  [key=2, style=dotted];
m2_121 -> m2_118  [color=blue, key=0, style=bold];
m2_216 -> m2_217  [key=0, style=solid];
m2_217 -> m2_218  [key=0, style=solid];
m2_217 -> m2_221  [key=2, style=dotted];
m2_217 -> m2_219  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m2_218 -> m2_219  [key=0, style=solid];
m2_218 -> m2_9  [key=2, style=dotted];
m2_218 -> m2_222  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_219 -> m2_220  [key=0, style=solid];
m2_219 -> m2_35  [key=2, style=dotted];
m2_219 -> m2_11  [key=2, style=dotted];
m2_220 -> m2_216  [color=blue, key=0, style=bold];
m2_55 -> m2_56  [key=0, style=solid];
m2_55 -> m2_57  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m2_56 -> m2_57  [key=0, style=solid];
m2_56 -> m2_9  [key=2, style=dotted];
m2_56 -> m2_59  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_57 -> m2_58  [key=0, style=solid];
m2_57 -> m2_35  [key=2, style=dotted];
m2_57 -> m2_11  [key=2, style=dotted];
m2_58 -> m2_55  [color=blue, key=0, style=bold];
m2_241 -> m2_242  [key=0, style=solid];
m2_241 -> m2_243  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_242 -> m2_243  [key=0, style=solid];
m2_242 -> m2_9  [key=2, style=dotted];
m2_242 -> m2_246  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_243 -> m2_244  [key=0, style=solid];
m2_243 -> m2_245  [key=2, style=dotted];
m2_243 -> m2_11  [key=2, style=dotted];
m2_244 -> m2_241  [color=blue, key=0, style=bold];
m2_182 -> m2_183  [key=0, style=solid];
m2_183 -> m2_184  [key=0, style=solid];
m2_183 -> m2_178  [key=2, style=dotted];
m2_183 -> m2_185  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m2_184 -> m2_185  [key=0, style=solid];
m2_184 -> m2_9  [key=2, style=dotted];
m2_184 -> m2_187  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_185 -> m2_186  [key=0, style=solid];
m2_185 -> m2_104  [key=2, style=dotted];
m2_186 -> m2_182  [color=blue, key=0, style=bold];
m2_31 -> m2_32  [key=0, style=solid];
m2_31 -> m2_33  [color=darkseagreen4, key=1, label="int[]", style=dashed];
m2_32 -> m2_33  [key=0, style=solid];
m2_32 -> m2_9  [key=2, style=dotted];
m2_32 -> m2_36  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_33 -> m2_34  [color=green, key=0, style=solid];
m2_33 -> m2_35  [key=2, style=dotted];
m2_33 -> m2_11  [key=2, style=dotted];
m2_34 -> m2_31  [color=blue, key=0, style=bold];
m2_34 -> m2_35  [color=green, key=0, style=solid];
m2_34 -> m2_8  [color=green, key=2, style=dotted];
m2_4 -> m2_5  [color=green, key=0, style=solid];
m2_4 -> m2_10  [key=2, style=dotted];
m2_4 -> m2_11  [key=2, style=dotted];
m2_4 -> m2_12  [color=green, key=1, label="CommandLine.Core.Token", style=dashed];
m2_5 -> m2_0  [color=blue, key=0, style=bold];
m2_5 -> m2_6  [color=green, key=0, style=solid];
m2_5 -> m2_7  [color=green, key=2, style=dotted];
m2_5 -> m2_8  [color=green, key=2, style=dotted];
m2_5 -> m2_9  [color=green, key=2, style=dotted];
m2_5 -> m2_10  [color=green, key=2, style=dotted];
m2_5 -> m2_11  [color=green, key=1, label="lambda expression", style=dashed];
m2_199 -> m2_200  [key=0, style=solid];
m2_200 -> m2_201  [key=0, style=solid];
m2_200 -> m2_195  [key=2, style=dotted];
m2_200 -> m2_69  [key=2, style=dotted];
m2_200 -> m2_202  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m2_201 -> m2_202  [key=0, style=solid];
m2_201 -> m2_9  [key=2, style=dotted];
m2_201 -> m2_204  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_202 -> m2_203  [key=0, style=solid];
m2_202 -> m2_35  [key=2, style=dotted];
m2_202 -> m2_11  [key=2, style=dotted];
m2_203 -> m2_199  [color=blue, key=0, style=bold];
m2_25 -> m2_26  [key=0, style=solid];
m2_25 -> m2_19  [key=2, style=dotted];
m2_13 -> m2_14  [key=0, style=solid];
m2_13 -> m2_11  [color=blue, key=0, style=bold];
m2_12 -> m2_13  [color=green, key=0, style=solid];
m2_12 -> m2_14  [color=green, key=2, style=dotted];
m2_12 -> m2_15  [color=green, key=2, style=dotted];
m2_14 -> m2_12  [color=blue, key=0, style=bold];
m2_14 -> m2_29  [color=blue, key=0, style=bold];
m2_14 -> m2_1  [color=green, key=3, label="Parameter variable CommandLine.Core.TypeDescriptor info", style=bold];
m2_20 -> m2_21  [color=green, key=0, style=solid];
m2_21 -> m2_22  [key=0, style=solid];
m2_21 -> m2_6  [key=2, style=dotted];
m2_21 -> m2_16  [color=blue, key=0, style=bold];
m2_22 -> m2_20  [color=blue, key=0, style=bold];
m2_27 -> m2_28  [key=0, style=solid];
m2_27 -> m2_25  [color=blue, key=0, style=bold];
m2_29 -> m2_27  [color=blue, key=0, style=bold];
m2_29 -> m2_30  [color=green, key=0, style=solid];
m2_36 -> m2_37  [key=0, style=solid];
m2_36 -> m2_5  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m2_36 -> m2_12  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m2_37 -> m2_38  [key=0, style=solid];
m2_37 -> m2_39  [key=2, style=dotted];
m2_37 -> m2_5  [color=green, key=1, label="System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>", style=dashed];
m2_38 -> m2_36  [color=blue, key=0, style=bold];
m2_38 -> m2_12  [color=green, key=1, label="CommandLine.Core.Token", style=dashed];
m2_44 -> m2_45  [key=0, style=solid];
m2_45 -> m2_46  [key=0, style=solid];
m2_45 -> m2_6  [key=2, style=dotted];
m2_46 -> m2_44  [color=blue, key=0, style=bold];
m2_51 -> m2_52  [key=0, style=solid];
m2_52 -> m2_53  [key=0, style=solid];
m2_52 -> m2_54  [key=2, style=dotted];
m2_53 -> m2_51  [color=blue, key=0, style=bold];
m2_59 -> m2_60  [key=0, style=solid];
m2_60 -> m2_61  [key=0, style=solid];
m2_60 -> m2_62  [key=2, style=dotted];
m2_61 -> m2_59  [color=blue, key=0, style=bold];
m2_70 -> m2_71  [key=0, style=solid];
m2_71 -> m2_72  [key=0, style=solid];
m2_71 -> m2_54  [key=2, style=dotted];
m2_72 -> m2_70  [color=blue, key=0, style=bold];
m2_79 -> m2_80  [key=0, style=solid];
m2_80 -> m2_81  [key=0, style=solid];
m2_80 -> m2_82  [key=2, style=dotted];
m2_81 -> m2_79  [color=blue, key=0, style=bold];
m2_88 -> m2_89  [key=0, style=solid];
m2_89 -> m2_90  [key=0, style=solid];
m2_89 -> m2_62  [key=2, style=dotted];
m2_90 -> m2_88  [color=blue, key=0, style=bold];
m2_96 -> m2_97  [key=0, style=solid];
m2_97 -> m2_98  [key=0, style=solid];
m2_97 -> m2_99  [key=2, style=dotted];
m2_98 -> m2_96  [color=blue, key=0, style=bold];
m2_105 -> m2_106  [key=0, style=solid];
m2_106 -> m2_107  [key=0, style=solid];
m2_106 -> m2_108  [key=2, style=dotted];
m2_107 -> m2_105  [color=blue, key=0, style=bold];
m2_115 -> m2_116  [key=0, style=solid];
m2_116 -> m2_117  [key=0, style=solid];
m2_116 -> m2_114  [key=2, style=dotted];
m2_117 -> m2_115  [color=blue, key=0, style=bold];
m2_122 -> m2_123  [key=0, style=solid];
m2_123 -> m2_124  [key=0, style=solid];
m2_123 -> m2_125  [key=2, style=dotted];
m2_124 -> m2_122  [color=blue, key=0, style=bold];
m2_130 -> m2_131  [key=0, style=solid];
m2_131 -> m2_132  [key=0, style=solid];
m2_131 -> m2_133  [key=2, style=dotted];
m2_132 -> m2_130  [color=blue, key=0, style=bold];
m2_138 -> m2_139  [key=0, style=solid];
m2_139 -> m2_140  [key=0, style=solid];
m2_139 -> m2_133  [key=2, style=dotted];
m2_140 -> m2_138  [color=blue, key=0, style=bold];
m2_148 -> m2_149  [key=0, style=solid];
m2_151 -> m2_152  [key=0, style=solid];
m2_151 -> m2_156  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m2_151 -> m2_160  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m2_149 -> m2_150  [key=0, style=solid];
m2_149 -> m2_114  [key=2, style=dotted];
m2_150 -> m2_148  [color=blue, key=0, style=bold];
m2_152 -> m2_153  [key=0, style=solid];
m2_152 -> m2_154  [key=2, style=dotted];
m2_152 -> m2_155  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_156 -> m2_157  [key=0, style=solid];
m2_156 -> m2_158  [key=2, style=dotted];
m2_156 -> m2_159  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_160 -> m2_161  [key=0, style=solid];
m2_160 -> m2_162  [key=2, style=dotted];
m2_153 -> m2_151  [color=blue, key=0, style=bold];
m2_155 -> m2_156  [key=0, style=solid];
m2_157 -> m2_155  [color=blue, key=0, style=bold];
m2_159 -> m2_160  [key=0, style=solid];
m2_161 -> m2_159  [color=blue, key=0, style=bold];
m2_169 -> m2_170  [key=0, style=solid];
m2_170 -> m2_171  [key=0, style=solid];
m2_170 -> m2_172  [key=2, style=dotted];
m2_171 -> m2_169  [color=blue, key=0, style=bold];
m2_179 -> m2_180  [key=0, style=solid];
m2_180 -> m2_181  [key=0, style=solid];
m2_180 -> m2_178  [key=2, style=dotted];
m2_181 -> m2_179  [color=blue, key=0, style=bold];
m2_187 -> m2_188  [key=0, style=solid];
m2_188 -> m2_189  [key=0, style=solid];
m2_188 -> m2_178  [key=2, style=dotted];
m2_189 -> m2_187  [color=blue, key=0, style=bold];
m2_196 -> m2_197  [key=0, style=solid];
m2_197 -> m2_198  [key=0, style=solid];
m2_197 -> m2_178  [key=2, style=dotted];
m2_198 -> m2_196  [color=blue, key=0, style=bold];
m2_204 -> m2_205  [key=0, style=solid];
m2_205 -> m2_206  [key=0, style=solid];
m2_205 -> m2_207  [key=2, style=dotted];
m2_206 -> m2_204  [color=blue, key=0, style=bold];
m2_213 -> m2_214  [key=0, style=solid];
m2_214 -> m2_215  [key=0, style=solid];
m2_214 -> m2_6  [key=2, style=dotted];
m2_215 -> m2_213  [color=blue, key=0, style=bold];
m2_222 -> m2_223  [key=0, style=solid];
m2_223 -> m2_224  [key=0, style=solid];
m2_223 -> m2_6  [key=2, style=dotted];
m2_224 -> m2_222  [color=blue, key=0, style=bold];
m2_230 -> m2_231  [key=0, style=solid];
m2_231 -> m2_232  [key=0, style=solid];
m2_231 -> m2_6  [key=2, style=dotted];
m2_232 -> m2_230  [color=blue, key=0, style=bold];
m2_238 -> m2_239  [key=0, style=solid];
m2_239 -> m2_240  [key=0, style=solid];
m2_239 -> m2_6  [key=2, style=dotted];
m2_240 -> m2_238  [color=blue, key=0, style=bold];
m2_246 -> m2_247  [key=0, style=solid];
m2_247 -> m2_248  [key=0, style=solid];
m2_247 -> m2_6  [key=2, style=dotted];
m2_248 -> m2_246  [color=blue, key=0, style=bold];
m2_6 -> m2_4  [color=blue, key=0, style=bold];
m2_30 -> m2_14  [color=green, key=0, style=solid];
m2_30 -> m2_23  [color=green, key=2, style=dotted];
m2_30 -> m2_32  [color=green, key=2, style=dotted];
m2_35 -> m2_33  [color=blue, key=0, style=bold];
m2_26 -> m2_27  [key=0, style=solid];
m2_26 -> m2_28  [key=2, style=dotted];
m2_26 -> m2_23  [color=blue, key=0, style=bold];
m2_190 -> m2_191  [key=0, style=solid];
m2_191 -> m2_192  [key=0, style=solid];
m2_191 -> m2_195  [key=2, style=dotted];
m2_191 -> m2_69  [key=2, style=dotted];
m2_191 -> m2_193  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m2_192 -> m2_193  [key=0, style=solid];
m2_192 -> m2_9  [key=2, style=dotted];
m2_192 -> m2_196  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_193 -> m2_194  [key=0, style=solid];
m2_193 -> m2_35  [key=2, style=dotted];
m2_193 -> m2_11  [key=2, style=dotted];
m2_194 -> m2_190  [color=blue, key=0, style=bold];
m2_100 -> m2_101  [key=0, style=solid];
m2_100 -> m2_102  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
m2_101 -> m2_102  [key=0, style=solid];
m2_101 -> m2_9  [key=2, style=dotted];
m2_101 -> m2_105  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_102 -> m2_103  [key=0, style=solid];
m2_102 -> m2_104  [key=2, style=dotted];
m2_102 -> m2_102  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
m2_103 -> m2_100  [color=blue, key=0, style=bold];
m2_23 -> m2_24  [key=0, style=solid];
m2_23 -> m2_25  [color=darkseagreen4, key=1, label=double, style=dashed];
m2_141 -> m2_142  [key=0, style=solid];
m2_142 -> m2_143  [key=0, style=solid];
m2_142 -> m2_114  [key=2, style=dotted];
m2_142 -> m2_145  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m2_143 -> m2_144  [key=0, style=solid];
m2_145 -> m2_146  [key=0, style=solid];
m2_145 -> m2_104  [key=2, style=dotted];
m2_144 -> m2_145  [key=0, style=solid];
m2_144 -> m2_147  [key=2, style=dotted];
m2_144 -> m2_148  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_144 -> m2_151  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_146 -> m2_141  [color=blue, key=0, style=bold];
m2_83 -> m2_84  [key=0, style=solid];
m2_84 -> m2_85  [key=0, style=solid];
m2_84 -> m2_78  [key=2, style=dotted];
m2_84 -> m2_69  [key=2, style=dotted];
m2_84 -> m2_86  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m2_85 -> m2_86  [key=0, style=solid];
m2_85 -> m2_9  [key=2, style=dotted];
m2_85 -> m2_88  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_86 -> m2_87  [key=0, style=solid];
m2_86 -> m2_35  [key=2, style=dotted];
m2_86 -> m2_11  [key=2, style=dotted];
m2_87 -> m2_83  [color=blue, key=0, style=bold];
m2_233 -> m2_234  [key=0, style=solid];
m2_234 -> m2_235  [key=0, style=solid];
m2_234 -> m2_221  [key=2, style=dotted];
m2_234 -> m2_236  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m2_235 -> m2_236  [key=0, style=solid];
m2_235 -> m2_9  [key=2, style=dotted];
m2_235 -> m2_238  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_236 -> m2_237  [key=0, style=solid];
m2_236 -> m2_35  [key=2, style=dotted];
m2_236 -> m2_11  [key=2, style=dotted];
m2_237 -> m2_233  [color=blue, key=0, style=bold];
m2_63 -> m2_64  [key=0, style=solid];
m2_64 -> m2_65  [key=0, style=solid];
m2_64 -> m2_68  [key=2, style=dotted];
m2_64 -> m2_69  [key=2, style=dotted];
m2_64 -> m2_66  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m2_65 -> m2_66  [key=0, style=solid];
m2_65 -> m2_9  [key=2, style=dotted];
m2_65 -> m2_70  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_66 -> m2_67  [key=0, style=solid];
m2_66 -> m2_35  [key=2, style=dotted];
m2_66 -> m2_11  [key=2, style=dotted];
m2_67 -> m2_63  [color=blue, key=0, style=bold];
m2_109 -> m2_110  [key=0, style=solid];
m2_110 -> m2_111  [key=0, style=solid];
m2_110 -> m2_114  [key=2, style=dotted];
m2_110 -> m2_112  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m2_111 -> m2_112  [key=0, style=solid];
m2_111 -> m2_9  [key=2, style=dotted];
m2_111 -> m2_115  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_112 -> m2_113  [key=0, style=solid];
m2_112 -> m2_104  [key=2, style=dotted];
m2_113 -> m2_109  [color=blue, key=0, style=bold];
m2_24 -> m2_25  [key=0, style=solid];
m2_24 -> m2_9  [key=2, style=dotted];
m2_24 -> m2_27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_73 -> m2_74  [key=0, style=solid];
m2_74 -> m2_75  [key=0, style=solid];
m2_74 -> m2_78  [key=2, style=dotted];
m2_74 -> m2_76  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m2_75 -> m2_76  [key=0, style=solid];
m2_75 -> m2_9  [key=2, style=dotted];
m2_75 -> m2_79  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_76 -> m2_77  [key=0, style=solid];
m2_76 -> m2_35  [key=2, style=dotted];
m2_76 -> m2_11  [key=2, style=dotted];
m2_77 -> m2_73  [color=blue, key=0, style=bold];
m2_91 -> m2_92  [key=0, style=solid];
m2_92 -> m2_93  [key=0, style=solid];
m2_92 -> m2_78  [key=2, style=dotted];
m2_92 -> m2_94  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m2_93 -> m2_94  [key=0, style=solid];
m2_93 -> m2_9  [key=2, style=dotted];
m2_93 -> m2_96  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_94 -> m2_95  [key=0, style=solid];
m2_94 -> m2_35  [key=2, style=dotted];
m2_94 -> m2_11  [key=2, style=dotted];
m2_95 -> m2_91  [color=blue, key=0, style=bold];
m2_173 -> m2_174  [key=0, style=solid];
m2_174 -> m2_175  [key=0, style=solid];
m2_174 -> m2_178  [key=2, style=dotted];
m2_174 -> m2_176  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m2_175 -> m2_176  [key=0, style=solid];
m2_175 -> m2_9  [key=2, style=dotted];
m2_175 -> m2_179  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_176 -> m2_177  [key=0, style=solid];
m2_176 -> m2_104  [key=2, style=dotted];
m2_177 -> m2_173  [color=blue, key=0, style=bold];
m2_47 -> m2_48  [key=0, style=solid];
m2_47 -> m2_49  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m2_48 -> m2_49  [key=0, style=solid];
m2_48 -> m2_9  [key=2, style=dotted];
m2_48 -> m2_51  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_49 -> m2_50  [key=0, style=solid];
m2_49 -> m2_35  [key=2, style=dotted];
m2_49 -> m2_11  [key=2, style=dotted];
m2_50 -> m2_47  [color=blue, key=0, style=bold];
m2_15 -> m2_16  [key=0, style=solid];
m2_15 -> m2_17  [color=darkseagreen4, key=1, label=long, style=dashed];
m2_16 -> m2_17  [key=0, style=solid];
m2_16 -> m2_9  [key=2, style=dotted];
m2_16 -> m2_20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_16 -> m2_19  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m2_16 -> m2_30  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m2_16 -> m2_26  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m2_17 -> m2_18  [key=0, style=solid];
m2_17 -> m2_19  [key=2, style=dotted];
m2_17 -> m2_30  [color=green, key=1, label=nameIndex, style=dashed];
m2_17 -> m2_22  [key=2, style=dotted];
m2_17 -> m2_25  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_18 -> m2_15  [color=blue, key=0, style=bold];
m2_18 -> m2_19  [color=green, key=0, style=solid];
m2_18 -> m2_20  [color=green, key=0, style=solid];
m2_39 -> m2_26  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m2_225 -> m2_226  [key=0, style=solid];
m2_226 -> m2_227  [key=0, style=solid];
m2_226 -> m2_221  [key=2, style=dotted];
m2_226 -> m2_228  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m2_227 -> m2_228  [key=0, style=solid];
m2_227 -> m2_9  [key=2, style=dotted];
m2_227 -> m2_230  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_228 -> m2_229  [key=0, style=solid];
m2_228 -> m2_35  [key=2, style=dotted];
m2_228 -> m2_11  [key=2, style=dotted];
m2_229 -> m2_225  [color=blue, key=0, style=bold];
m2_19 -> m2_21  [color=green, key=0, style=solid];
m2_19 -> m2_23  [color=green, key=2, style=dotted];
m2_19 -> m2_24  [color=green, key=2, style=dotted];
m2_19 -> m2_10  [color=green, key=2, style=dotted];
m2_19 -> m2_29  [color=green, key=1, label="lambda expression", style=dashed];
m2_19 -> m2_33  [color=green, key=1, label="lambda expression", style=dashed];
m2_163 -> m2_164  [key=0, style=solid];
m2_164 -> m2_165  [key=0, style=solid];
m2_164 -> m2_168  [key=2, style=dotted];
m2_164 -> m2_69  [key=2, style=dotted];
m2_164 -> m2_166  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m2_165 -> m2_166  [key=0, style=solid];
m2_165 -> m2_9  [key=2, style=dotted];
m2_165 -> m2_169  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_166 -> m2_167  [key=0, style=solid];
m2_166 -> m2_35  [key=2, style=dotted];
m2_166 -> m2_11  [key=2, style=dotted];
m2_167 -> m2_163  [color=blue, key=0, style=bold];
m2_249 -> m2_13  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m2_250 -> m2_156  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m2_250 -> m2_160  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m3_13 -> m3_11  [color=blue, key=0, style=bold];
m3_0 -> m3_1  [key=0, style=solid];
m3_0 -> m3_2  [color=darkseagreen4, key=1, label="System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>", style=dashed];
m3_0 -> m3_3  [color=darkseagreen4, key=1, label="System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>", style=dashed];
m3_0 -> m3_4  [color=darkseagreen4, key=1, label="System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>", style=dashed];
m3_5 -> m3_6  [color=green, key=0, style=solid];
m3_5 -> m3_14  [color=green, key=2, style=dotted];
m3_5 -> m3_15  [color=green, key=2, style=dotted];
m3_5 -> m3_8  [color=green, key=1, label="lambda expression", style=dashed];
m3_5 -> m3_27  [color=green, key=1, label="lambda expression", style=dashed];
m3_5 -> m3_31  [color=green, key=1, label="lambda expression", style=dashed];
m3_5 -> m3_7  [color=green, key=1, label=nonOptions, style=dashed];
m3_1 -> m3_5  [color=green, key=1, label=tokenList, style=dashed];
m3_1 -> m3_2  [color=red, key=0, style=solid];
m3_1 -> m3_10  [key=2, style=dotted];
m3_1 -> m3_3  [color=darkseagreen4, key=1, label=tokenList, style=dashed];
m3_1 -> m3_4  [color=darkseagreen4, key=1, label=tokenList, style=dashed];
m3_2 -> m3_5  [color=green, key=1, label=switches, style=dashed];
m3_2 -> m3_24  [color=green, key=1, label=switches, style=dashed];
m3_2 -> m3_3  [color=red, key=0, style=solid];
m3_2 -> m3_11  [key=2, style=dotted];
m3_2 -> m3_10  [key=2, style=dotted];
m3_2 -> m3_8  [color=red, key=1, label="lambda expression", style=dashed];
m3_2 -> m3_6  [color=red, key=2, style=dotted];
m3_2 -> m3_7  [color=red, key=2, style=dotted];
m3_2 -> m3_14  [color=red, key=1, label="lambda expression", style=dashed];
m3_3 -> m3_5  [color=green, key=1, label=scalars, style=dashed];
m3_3 -> m3_28  [color=green, key=1, label=scalars, style=dashed];
m3_3 -> m3_4  [key=0, style=solid];
m3_3 -> m3_12  [key=2, style=dotted];
m3_3 -> m3_10  [key=2, style=dotted];
m3_3 -> m3_8  [color=darkseagreen4, key=1, label=scalars, style=dashed];
m3_3 -> m3_0  [color=blue, key=0, style=bold];
m3_4 -> m3_5  [color=green, key=0, style=solid];
m3_4 -> m3_32  [color=green, key=1, label=sequences, style=dashed];
m3_4 -> m3_13  [key=2, style=dotted];
m3_4 -> m3_10  [key=2, style=dotted];
m3_4 -> m3_8  [color=darkseagreen4, key=1, label=sequences, style=dashed];
m3_4 -> m3_17  [key=0, style=solid];
m3_4 -> m3_18  [color=crimson, key=0, style=bold];
m3_4 -> m3_22  [color=crimson, key=0, style=bold];
m3_4 -> m3_23  [color=crimson, key=0, style=bold];
m3_4 -> m3_26  [color=crimson, key=0, style=bold];
m3_4 -> m3_27  [color=crimson, key=0, style=bold];
m3_4 -> m3_28  [color=crimson, key=0, style=bold];
m3_4 -> m3_30  [color=crimson, key=0, style=bold];
m3_4 -> m3_19  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m3_4 -> m3_20  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m3_4 -> m3_24  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m3_4 -> m3_25  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m3_4 -> m3_29  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m3_6 -> m3_7  [key=0, style=solid];
m3_6 -> m3_14  [key=2, style=dotted];
m3_6 -> m3_15  [key=2, style=dotted];
m3_6 -> m3_34  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_6 -> m3_8  [color=darkseagreen4, key=1, label=values, style=dashed];
m3_7 -> m3_15  [key=2, style=dotted];
m3_7 -> m3_8  [key=0, style=solid];
m3_7 -> m3_16  [key=2, style=dotted];
m3_8 -> m3_9  [color=red, key=0, style=solid];
m3_8 -> m3_17  [key=2, style=dotted];
m3_8 -> m3_18  [key=2, style=dotted];
m3_8 -> m3_19  [key=2, style=dotted];
m3_8 -> m3_20  [key=2, style=dotted];
m3_8 -> m3_5  [key=2, style=dotted];
m3_8 -> m3_22  [key=2, style=dotted];
m3_8 -> m3_38  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_8 -> m3_24  [color=green, key=0, style=solid];
m3_9 -> m3_0  [color=blue, key=0, style=bold];
m3_9 -> m3_10  [color=red, key=0, style=solid];
m3_19 -> m3_20  [key=0, style=solid];
m3_19 -> m3_33  [key=2, style=dotted];
m3_19 -> m3_22  [color=darkseagreen4, key=1, label=pt, style=dashed];
m3_19 -> m3_25  [color=darkseagreen4, key=1, label=pt, style=dashed];
m3_19 -> m3_26  [color=darkseagreen4, key=1, label=pt, style=dashed];
m3_19 -> m3_28  [color=darkseagreen4, key=1, label=pt, style=dashed];
m3_19 -> m3_58  [color=darkseagreen4, key=1, label=pt, style=dashed];
m3_32 -> m3_33  [color=green, key=0, style=solid];
m3_32 -> m3_30  [color=green, key=2, style=dotted];
m3_17 -> m3_18  [key=0, style=solid];
m3_17 -> m3_19  [key=0, style=solid];
m3_17 -> m3_32  [key=2, style=dotted];
m3_18 -> m3_19  [key=0, style=solid];
m3_22 -> m3_23  [key=0, style=solid];
m3_22 -> m3_38  [key=2, style=dotted];
m3_22 -> m3_39  [key=2, style=dotted];
m3_23 -> m3_24  [key=0, style=solid];
m3_26 -> m3_27  [key=0, style=solid];
m3_26 -> m3_46  [key=2, style=dotted];
m3_26 -> m3_47  [key=2, style=dotted];
m3_26 -> m3_39  [key=2, style=dotted];
m3_27 -> m3_28  [color=green, key=0, style=solid];
m3_28 -> m3_29  [color=green, key=0, style=solid];
m3_28 -> m3_48  [key=2, style=dotted];
m3_28 -> m3_49  [key=2, style=dotted];
m3_28 -> m3_47  [key=2, style=dotted];
m3_28 -> m3_39  [key=2, style=dotted];
m3_28 -> m3_36  [key=2, style=dotted];
m3_28 -> m3_57  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_28 -> m3_30  [color=green, key=2, style=dotted];
m3_30 -> m3_29  [key=0, style=solid];
m3_20 -> m3_21  [key=0, style=solid];
m3_20 -> m3_34  [key=2, style=dotted];
m3_20 -> m3_35  [key=2, style=dotted];
m3_20 -> m3_36  [key=2, style=dotted];
m3_20 -> m3_37  [key=2, style=dotted];
m3_20 -> m3_50  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_20 -> m3_25  [color=darkseagreen4, key=1, label=taken, style=dashed];
m3_20 -> m3_28  [color=darkseagreen4, key=1, label=taken, style=dashed];
m3_20 -> m3_29  [color=darkseagreen4, key=1, label=taken, style=dashed];
m3_24 -> m3_25  [key=0, style=solid];
m3_24 -> m3_40  [key=2, style=dotted];
m3_24 -> m3_41  [key=2, style=dotted];
m3_24 -> m3_42  [key=2, style=dotted];
m3_24 -> m3_53  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_24 -> m3_10  [color=green, key=0, style=solid];
m3_24 -> m3_26  [color=green, key=2, style=dotted];
m3_25 -> m3_26  [key=0, style=solid];
m3_25 -> m3_28  [key=0, style=solid];
m3_25 -> m3_43  [key=2, style=dotted];
m3_25 -> m3_44  [key=2, style=dotted];
m3_25 -> m3_35  [key=2, style=dotted];
m3_25 -> m3_40  [key=2, style=dotted];
m3_25 -> m3_45  [key=2, style=dotted];
m3_29 -> m3_30  [key=0, style=solid];
m3_29 -> m3_31  [key=0, style=solid];
m3_29 -> m3_40  [key=2, style=dotted];
m3_29 -> m3_35  [key=2, style=dotted];
m3_29 -> m3_4  [key=2, style=dotted];
m3_29 -> m3_27  [color=blue, key=0, style=bold];
m3_21 -> m3_22  [key=0, style=solid];
m3_21 -> m3_24  [key=0, style=solid];
m3_21 -> m3_32  [key=2, style=dotted];
m3_31 -> m3_4  [color=blue, key=0, style=bold];
m3_31 -> m3_32  [color=green, key=0, style=solid];
m3_34 -> m3_35  [key=0, style=solid];
m3_14 -> m3_15  [key=0, style=solid];
m3_42 -> m3_28  [color=green, key=1, label=scalars, style=dashed];
m3_39 -> m3_40  [key=0, style=solid];
m3_38 -> m3_39  [key=0, style=solid];
m3_11 -> m3_12  [key=0, style=solid];
m3_10 -> m3_8  [color=blue, key=0, style=bold];
m3_12 -> m3_13  [key=0, style=solid];
m3_15 -> m3_16  [key=0, style=solid];
m3_16 -> m3_14  [color=blue, key=0, style=bold];
m3_58 -> m3_59  [key=0, style=solid];
m3_58 -> m3_47  [key=2, style=dotted];
m3_58 -> m3_60  [key=2, style=dotted];
m3_58 -> m3_61  [key=2, style=dotted];
m3_58 -> m3_39  [key=2, style=dotted];
m3_50 -> m3_51  [key=0, style=solid];
m3_53 -> m3_54  [key=0, style=solid];
m3_57 -> m3_58  [key=0, style=solid];
m3_51 -> m3_52  [key=0, style=solid];
m3_52 -> m3_50  [color=blue, key=0, style=bold];
m3_54 -> m3_55  [key=0, style=solid];
m3_54 -> m3_56  [key=2, style=dotted];
m3_55 -> m3_53  [color=blue, key=0, style=bold];
m3_59 -> m3_57  [color=blue, key=0, style=bold];
m3_33 -> m3_31  [color=blue, key=0, style=bold];
m3_36 -> m3_34  [color=blue, key=0, style=bold];
m3_35 -> m3_36  [key=0, style=solid];
m3_35 -> m3_37  [key=2, style=dotted];
m3_40 -> m3_38  [color=blue, key=0, style=bold];
m3_72 -> m3_73  [key=0, style=solid];
m3_73 -> m3_74  [key=0, style=solid];
m3_73 -> m3_43  [key=2, style=dotted];
m3_73 -> m3_46  [key=2, style=dotted];
m3_73 -> m3_47  [key=2, style=dotted];
m3_73 -> m3_61  [key=2, style=dotted];
m3_74 -> m3_72  [color=blue, key=0, style=bold];
m3_62 -> m3_63  [key=0, style=solid];
m3_62 -> m3_67  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m3_62 -> m3_68  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m3_63 -> m3_64  [key=0, style=solid];
m3_63 -> m3_66  [key=0, style=solid];
m3_67 -> m3_68  [key=0, style=solid];
m3_67 -> m3_69  [key=0, style=solid];
m3_67 -> m3_43  [key=2, style=dotted];
m3_68 -> m3_70  [key=0, style=solid];
m3_68 -> m3_71  [key=2, style=dotted];
m3_68 -> m3_47  [key=2, style=dotted];
m3_64 -> m3_65  [key=0, style=solid];
m3_66 -> m3_67  [key=0, style=solid];
m3_65 -> m3_70  [key=0, style=solid];
m3_65 -> m3_47  [key=2, style=dotted];
m3_69 -> m3_70  [key=0, style=solid];
m3_69 -> m3_61  [key=2, style=dotted];
m3_70 -> m3_62  [color=blue, key=0, style=bold];
m3_41 -> m3_24  [color=green, key=1, label=switches, style=dashed];
m3_43 -> m3_32  [color=green, key=1, label=sequences, style=dashed];
m3_75 -> m3_58  [color=darkseagreen4, key=1, label=pt, style=dashed];
m4_0 -> m4_1  [key=0, style=solid];
m4_0 -> m4_2  [color=darkseagreen4, key=1, label="CommandLine.Infrastructure.Maybe<int>", style=dashed];
m4_0 -> m4_3  [color=red, key=1, label="CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>", style=dashed];
m4_1 -> m4_2  [key=0, style=solid];
m4_2 -> m4_3  [color=red, key=0, style=solid];
m4_3 -> m4_4  [color=red, key=0, style=solid];
m4_4 -> m4_0  [color=blue, key=0, style=bold];
m4_12 -> m4_13  [color=red, key=0, style=solid];
m4_12 -> m4_5  [color=darkorchid, key=3, label="method methodReturn CommandLine.Core.TypeDescriptor WithNext", style=bold];
m4_13 -> m4_14  [color=red, key=0, style=solid];
m4_13 -> m4_15  [color=red, key=2, style=dotted];
m4_13 -> m4_5  [color=red, key=2, style=dotted];
m4_13 -> m4_16  [color=red, key=1, label="lambda expression", style=dashed];
m4_14 -> m4_12  [color=blue, key=0, style=bold];
m4_16 -> m4_17  [color=red, key=0, style=solid];
m4_17 -> m4_18  [color=red, key=0, style=solid];
m4_18 -> m4_16  [color=blue, key=0, style=bold];
m4_5 -> m4_6  [key=0, style=solid];
m4_5 -> m4_8  [color=darkseagreen4, key=1, label="CommandLine.Core.TargetType", style=dashed];
m4_6 -> m4_7  [key=0, style=solid];
m4_6 -> m4_8  [key=0, style=solid];
m4_8 -> m4_9  [key=0, style=solid];
m4_8 -> m4_0  [key=2, style=dotted];
m4_8 -> m4_11  [key=2, style=dotted];
m4_7 -> m4_9  [key=0, style=solid];
m4_7 -> m4_10  [key=2, style=dotted];
m4_9 -> m4_5  [color=blue, key=0, style=bold];
m4_19 -> m4_1  [color=darkseagreen4, key=1, label="CommandLine.Core.TypeDescriptor", style=dashed];
m4_19 -> m4_2  [color=darkseagreen4, key=1, label="CommandLine.Core.TypeDescriptor", style=dashed];
m4_19 -> m4_3  [color=red, key=1, label="CommandLine.Core.TypeDescriptor", style=dashed];
m5_0 -> m5_1  [key=0, style=solid];
m5_0 -> m5_8  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_1 -> m5_2  [key=0, style=solid];
m5_1 -> m5_4  [key=2, style=dotted];
m5_1 -> m5_5  [key=2, style=dotted];
m5_1 -> m5_6  [key=2, style=dotted];
m5_1 -> m5_7  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_1 -> m5_11  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_2 -> m5_3  [key=0, style=solid];
m5_3 -> m5_0  [color=blue, key=0, style=bold];
m5_38 -> m5_39  [color=red, key=0, style=solid];
m5_8 -> m5_9  [key=0, style=solid];
m5_8 -> m5_10  [key=2, style=dotted];
m5_7 -> m5_8  [key=0, style=solid];
m5_11 -> m5_12  [key=0, style=solid];
m5_9 -> m5_7  [color=blue, key=0, style=bold];
m5_12 -> m5_13  [key=0, style=solid];
m5_12 -> m5_14  [key=2, style=dotted];
m5_13 -> m5_11  [color=blue, key=0, style=bold];
m5_36 -> m5_37  [color=red, key=0, style=solid];
m5_36 -> m5_10  [color=red, key=2, style=dotted];
m5_35 -> m5_36  [color=red, key=0, style=solid];
m5_39 -> m5_40  [color=red, key=0, style=solid];
m5_39 -> m5_30  [color=red, key=2, style=dotted];
m5_39 -> m5_41  [color=red, key=2, style=dotted];
m5_39 -> m5_42  [color=red, key=2, style=dotted];
m5_37 -> m5_35  [color=blue, key=0, style=bold];
m5_40 -> m5_38  [color=blue, key=0, style=bold];
m5_15 -> m5_16  [color=red, key=0, style=solid];
m5_15 -> m5_36  [color=red, key=1, label=string, style=dashed];
m5_15 -> m5_18  [color=red, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m5_16 -> m5_17  [color=red, key=0, style=solid];
m5_16 -> m5_25  [color=red, key=2, style=dotted];
m5_16 -> m5_35  [color=red, key=1, label="lambda expression", style=dashed];
m5_16 -> m5_18  [color=red, key=1, label=nameIndex, style=dashed];
m5_18 -> m5_19  [color=red, key=0, style=solid];
m5_18 -> m5_26  [color=red, key=2, style=dotted];
m5_18 -> m5_27  [color=red, key=2, style=dotted];
m5_18 -> m5_20  [color=red, key=1, label=infos, style=dashed];
m5_18 -> m5_22  [color=red, key=1, label=infos, style=dashed];
m5_17 -> m5_18  [color=red, key=0, style=solid];
m5_17 -> m5_23  [color=red, key=0, style=solid];
m5_23 -> m5_24  [color=red, key=0, style=solid];
m5_23 -> m5_34  [color=red, key=2, style=dotted];
m5_19 -> m5_20  [color=red, key=0, style=solid];
m5_19 -> m5_23  [color=red, key=0, style=solid];
m5_19 -> m5_28  [color=red, key=2, style=dotted];
m5_20 -> m5_21  [color=red, key=0, style=solid];
m5_20 -> m5_29  [color=red, key=2, style=dotted];
m5_22 -> m5_24  [color=red, key=0, style=solid];
m5_22 -> m5_26  [color=red, key=2, style=dotted];
m5_22 -> m5_31  [color=red, key=2, style=dotted];
m5_22 -> m5_32  [color=red, key=2, style=dotted];
m5_22 -> m5_33  [color=red, key=2, style=dotted];
m5_22 -> m5_38  [color=red, key=1, label="lambda expression", style=dashed];
m5_21 -> m5_22  [color=red, key=0, style=solid];
m5_21 -> m5_30  [color=red, key=2, style=dotted];
m5_21 -> m5_39  [color=red, key=1, label=info, style=dashed];
m5_24 -> m5_15  [color=blue, key=0, style=bold];
m5_43 -> m5_8  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_44 -> m5_8  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m5_45 -> m5_36  [color=red, key=1, label=string, style=dashed];
m5_46 -> m5_36  [color=red, key=1, label="System.StringComparer", style=dashed];
m5_47 -> m5_39  [color=red, key=1, label=info, style=dashed];
}
