digraph  {
m0_8 [label="Entry CommandLine.Core.NameExtensions.FromSpecification(CommandLine.Core.Specification)", span="22-22", cluster="CommandLine.Core.NameExtensions.FromSpecification(CommandLine.Core.Specification)", file="NameExtensions.cs"];
m0_9 [label="specification.Tag", span="24-24", cluster="CommandLine.Core.NameExtensions.FromSpecification(CommandLine.Core.Specification)", file="NameExtensions.cs"];
m0_11 [label="return FromOptionSpecification((OptionSpecification)specification);", span="27-27", cluster="CommandLine.Core.NameExtensions.FromSpecification(CommandLine.Core.Specification)", file="NameExtensions.cs"];
m0_10 [label="SpecificationType.Option", span="26-26", cluster="CommandLine.Core.NameExtensions.FromSpecification(CommandLine.Core.Specification)", file="NameExtensions.cs"];
m0_12 [label="return NameInfo.EmptyName;", span="29-29", cluster="CommandLine.Core.NameExtensions.FromSpecification(CommandLine.Core.Specification)", file="NameExtensions.cs"];
m0_13 [label="Exit CommandLine.Core.NameExtensions.FromSpecification(CommandLine.Core.Specification)", span="22-22", cluster="CommandLine.Core.NameExtensions.FromSpecification(CommandLine.Core.Specification)", file="NameExtensions.cs"];
m0_7 [label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20", cluster="CommandLine.NameInfo.NameInfo(string, string)", file="NameExtensions.cs"];
m0_3 [label="Entry System.StringComparer.Equals(string, string)", span="0-0", cluster="System.StringComparer.Equals(string, string)", file="NameExtensions.cs"];
m0_0 [label="Entry CommandLine.Core.NameExtensions.MatchName(string, string, string, System.StringComparer)", span="8-8", cluster="CommandLine.Core.NameExtensions.MatchName(string, string, string, System.StringComparer)", file="NameExtensions.cs"];
m0_1 [label="return value.Length == 1\r\n               ? comparer.Equals(value, shortName)\r\n               : comparer.Equals(value, longName);", span="10-12", cluster="CommandLine.Core.NameExtensions.MatchName(string, string, string, System.StringComparer)", file="NameExtensions.cs"];
m0_2 [label="Exit CommandLine.Core.NameExtensions.MatchName(string, string, string, System.StringComparer)", span="8-8", cluster="CommandLine.Core.NameExtensions.MatchName(string, string, string, System.StringComparer)", file="NameExtensions.cs"];
m0_4 [label="Entry CommandLine.Core.NameExtensions.FromOptionSpecification(CommandLine.Core.OptionSpecification)", span="15-15", cluster="CommandLine.Core.NameExtensions.FromOptionSpecification(CommandLine.Core.OptionSpecification)", file="NameExtensions.cs"];
m0_5 [label="return new NameInfo(\r\n                specification.LongName,\r\n                specification.ShortName);", span="17-19", cluster="CommandLine.Core.NameExtensions.FromOptionSpecification(CommandLine.Core.OptionSpecification)", color=green, community=0, file="NameExtensions.cs"];
m0_6 [label="Exit CommandLine.Core.NameExtensions.FromOptionSpecification(CommandLine.Core.OptionSpecification)", span="15-15", cluster="CommandLine.Core.NameExtensions.FromOptionSpecification(CommandLine.Core.OptionSpecification)", file="NameExtensions.cs"];
m1_7 [label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", span="16-16", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", file="NameLookupTests.cs"];
m1_6 [label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124", cluster="CSharpx.Maybe.Just<T>(T)", file="NameLookupTests.cs"];
m1_8 [label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116", cluster="CSharpx.Maybe.Nothing<T>()", file="NameLookupTests.cs"];
m1_0 [label="Entry CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", span="14-14", cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs"];
m1_1 [label="var expected = Maybe.Just(''.'')", span="17-17", cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs"];
m1_2 [label="var specs = new[] { new OptionSpecification(string.Empty, ''string-seq'',\r\n                false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), '.', null, string.Empty, string.Empty, new List<string>(), typeof(IEnumerable<string>), TargetType.Sequence)}", span="18-19", cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs"];
m1_4 [label="expected.ShouldBeEquivalentTo(result)", span="25-25", cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs"];
m1_3 [label="var result = NameLookup.HavingSeparator(''string-seq'', specs, StringComparer.InvariantCulture)", span="22-22", cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs"];
m1_5 [label="Exit CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", span="14-14", cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs"];
m1_10 [label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="27-27", cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="NameLookupTests.cs"];
m1_11 [label="Entry Unk.ShouldBeEquivalentTo", span="", cluster="Unk.ShouldBeEquivalentTo", file="NameLookupTests.cs"];
m1_9 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="NameLookupTests.cs"];
m2_13 [label="Entry Unk.Where", span="", cluster="Unk.Where", file="OptionMapperTests.cs"];
m2_12 [label="Entry Unk.Create", span="", cluster="Unk.Create", file="OptionMapperTests.cs"];
m2_6 [label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", file="OptionMapperTests.cs"];
m2_11 [label="Entry Unk.Single", span="", cluster="Unk.Single", file="OptionMapperTests.cs"];
m2_15 [label="Entry Unk.NotNull", span="", cluster="Unk.NotNull", file="OptionMapperTests.cs"];
m2_7 [label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", span="16-16", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", file="OptionMapperTests.cs"];
m2_27 [label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="14-14", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="OptionMapperTests.cs"];
m2_0 [label="Entry CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", span="17-17", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="OptionMapperTests.cs"];
m2_1 [label="var tokenPartitions = new[]\r\n                {\r\n                    new KeyValuePair<string, IEnumerable<string>>(''x'', new [] { ''true'' })\r\n                }", span="20-23", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="OptionMapperTests.cs"];
m2_2 [label="var specProps = new[]\r\n                {\r\n                    SpecificationProperty.Create(\r\n                        new OptionSpecification(''x'', string.Empty, false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), '\0', Maybe.Nothing<object>(), string.Empty, string.Empty, new List<string>(), typeof(bool), TargetType.Switch), \r\n                        typeof(Simple_Options).GetProperties().Single(p => p.Name.Equals(''BoolValue'', StringComparison.Ordinal)),\r\n                        Maybe.Nothing<object>())\r\n                }", span="24-30", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="OptionMapperTests.cs"];
m2_3 [label="var result = OptionMapper.MapValues(\r\n                specProps.Where(pt => pt.Specification.IsOption()),\r\n                tokenPartitions,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, CultureInfo.InvariantCulture),\r\n                StringComparer.InvariantCulture)", span="33-37", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="OptionMapperTests.cs"];
m2_4 [label="Assert.NotNull(((Ok<IEnumerable<SpecificationProperty>, Error>)result).Value.Success.Single(\r\n                a => a.Specification.IsOption()\r\n                && ((OptionSpecification)a.Specification).ShortName.Equals(''x'')\r\n                && (bool)((Just<object>)a.Value).Value))", span="40-43", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", color=green, community=0, file="OptionMapperTests.cs"];
m2_5 [label="Exit CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", span="17-17", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="OptionMapperTests.cs"];
m2_28 [label="Entry lambda expression", span="41-43", cluster="lambda expression", file="OptionMapperTests.cs"];
m2_16 [label="Entry lambda expression", span="28-28", cluster="lambda expression", file="OptionMapperTests.cs"];
m2_20 [label="Entry lambda expression", span="34-34", cluster="lambda expression", file="OptionMapperTests.cs"];
m2_24 [label="Entry lambda expression", span="36-36", cluster="lambda expression", file="OptionMapperTests.cs"];
m2_17 [label="p.Name.Equals(''BoolValue'', StringComparison.Ordinal)", span="28-28", cluster="lambda expression", file="OptionMapperTests.cs"];
m2_18 [label="Exit lambda expression", span="28-28", cluster="lambda expression", file="OptionMapperTests.cs"];
m2_21 [label="pt.Specification.IsOption()", span="34-34", cluster="lambda expression", file="OptionMapperTests.cs"];
m2_22 [label="Exit lambda expression", span="34-34", cluster="lambda expression", file="OptionMapperTests.cs"];
m2_25 [label="TypeConverter.ChangeType(vals, type, isScalar, CultureInfo.InvariantCulture)", span="36-36", cluster="lambda expression", file="OptionMapperTests.cs"];
m2_26 [label="Exit lambda expression", span="36-36", cluster="lambda expression", file="OptionMapperTests.cs"];
m2_29 [label="a.Specification.IsOption()\r\n                && ((OptionSpecification)a.Specification).ShortName.Equals(''x'')\r\n                && (bool)((Just<object>)a.Value).Value", span="41-43", cluster="lambda expression", file="OptionMapperTests.cs"];
m2_30 [label="Exit lambda expression", span="41-43", cluster="lambda expression", file="OptionMapperTests.cs"];
m2_31 [label="Entry Unk.IsOption", span="", cluster="Unk.IsOption", file="OptionMapperTests.cs"];
m2_32 [label="Entry string.Equals(string)", span="0-0", cluster="string.Equals(string)", file="OptionMapperTests.cs"];
m2_8 [label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116", cluster="CSharpx.Maybe.Nothing<T>()", file="OptionMapperTests.cs"];
m2_19 [label="Entry string.Equals(string, System.StringComparison)", span="0-0", cluster="string.Equals(string, System.StringComparison)", file="OptionMapperTests.cs"];
m2_23 [label="Entry CommandLine.Core.Specification.IsOption()", span="10-10", cluster="CommandLine.Core.Specification.IsOption()", file="OptionMapperTests.cs"];
m2_14 [label="Entry Unk.MapValues", span="", cluster="Unk.MapValues", file="OptionMapperTests.cs"];
m2_10 [label="Entry System.Type.GetProperties()", span="0-0", cluster="System.Type.GetProperties()", file="OptionMapperTests.cs"];
m2_9 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="OptionMapperTests.cs"];
m3_0 [label="Entry Ninject.Tests.Integration.WithPropertyValueTests.PropertyValueIsAssignedWhenNoInjectAttributeIsSuppliedUsingCallback()", span="10-10", cluster="Ninject.Tests.Integration.WithPropertyValueTests.PropertyValueIsAssignedWhenNoInjectAttributeIsSuppliedUsingCallback()", file="ParserTests.cs"];
m3_3 [label="ValidateWarrior(warrior)", span="15-15", cluster="Ninject.Tests.Integration.WithPropertyValueTests.PropertyValueIsAssignedWhenNoInjectAttributeIsSuppliedUsingCallback()", file="ParserTests.cs"];
m3_2 [label="var warrior = _kernel.Get<IWarrior>()", span="14-14", cluster="Ninject.Tests.Integration.WithPropertyValueTests.PropertyValueIsAssignedWhenNoInjectAttributeIsSuppliedUsingCallback()", file="ParserTests.cs"];
m3_4 [label="Exit Ninject.Tests.Integration.WithPropertyValueTests.PropertyValueIsAssignedWhenNoInjectAttributeIsSuppliedUsingCallback()", span="10-10", cluster="Ninject.Tests.Integration.WithPropertyValueTests.PropertyValueIsAssignedWhenNoInjectAttributeIsSuppliedUsingCallback()", file="ParserTests.cs"];
m3_1 [label="_kernel.Bind<IWarrior>().To<FootSoldier>()\r\n                .WithPropertyValue(''Weapon'', context => context.Kernel.Get<IWeapon>())", span="12-13", cluster="Ninject.Tests.Integration.WithPropertyValueTests.PropertyValueIsAssignedWhenNoInjectAttributeIsSuppliedUsingCallback()", file="ParserTests.cs"];
m3_5 [label="Entry Ninject.Syntax.IBindingRoot.Bind<T>()", span="26-26", cluster="Ninject.Syntax.IBindingRoot.Bind<T>()", file="ParserTests.cs"];
m3_6 [label="Entry Ninject.Syntax.IBindingToSyntax<T>.To<TImplementation>()", span="40-40", cluster="Ninject.Syntax.IBindingToSyntax<T>.To<TImplementation>()", file="ParserTests.cs"];
m3_8 [label="Entry Ninject.Syntax.IResolutionRoot.Get<T>(params Ninject.Parameters.IParameter[])", span="34-34", cluster="Ninject.Syntax.IResolutionRoot.Get<T>(params Ninject.Parameters.IParameter[])", file="ParserTests.cs"];
m3_147 [label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", span="281-281", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="ParserTests.cs"];
m3_150 [label="sut.ParseArguments<Immutable_Simple_Options>(new[] { ''--help'' })", span="288-288", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="ParserTests.cs"];
m3_149 [label="var sut = new Parser(config => config.HelpWriter = help)", span="285-285", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="ParserTests.cs"];
m3_151 [label="var result = help.ToString()", span="289-289", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="ParserTests.cs"];
m3_148 [label="var help = new StringWriter()", span="284-284", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="ParserTests.cs"];
m3_152 [label="result.Length.Should().BeGreaterThan(0)", span="292-292", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="ParserTests.cs"];
m3_153 [label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", span="281-281", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="ParserTests.cs"];
m3_95 [label="o.RespectingRuntimeTypes()", span="180-180", cluster="lambda expression", file="ParserTests.cs"];
m3_60 [label="Exit lambda expression", span="68-68", cluster="lambda expression", file="ParserTests.cs"];
m3_71 [label="Entry CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", span="135-135", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", file="ParserTests.cs"];
m3_108 [label="Entry CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser_in_verbs_scenario()", span="207-207", cluster="CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser_in_verbs_scenario()", file="ParserTests.cs"];
m3_111 [label="Assert.IsType<NotParsed<object>>(result)", span="218-218", cluster="CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser_in_verbs_scenario()", file="ParserTests.cs"];
m3_110 [label="var result = sut.ParseArguments(\r\n                new[] { ''clone'', ''-q'', ''-q'', ''http://gsscoder.github.com/'', ''http://yes-to-nooo.github.com/'' },\r\n                typeof(Add_Verb), typeof(Commit_Verb), typeof(Clone_Verb))", span="213-215", cluster="CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser_in_verbs_scenario()", file="ParserTests.cs"];
m3_109 [label="var sut = Parser.Default", span="210-210", cluster="CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser_in_verbs_scenario()", file="ParserTests.cs"];
m3_112 [label="Exit CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser_in_verbs_scenario()", span="207-207", cluster="CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser_in_verbs_scenario()", file="ParserTests.cs"];
m3_319 [label="Entry CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.Simple_Options)", span="506-506", cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.Simple_Options)", file="ParserTests.cs"];
m3_321 [label="var result = sut.ParseArguments<Simple_Options>(arguments)", span="514-514", cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.Simple_Options)", file="ParserTests.cs"];
m3_322 [label="result.Tag.ShouldBeEquivalentTo(ParserResultType.Parsed)", span="517-517", cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.Simple_Options)", file="ParserTests.cs"];
m3_320 [label="var sut = new Parser(config => config.IgnoreUnknownArguments = true)", span="511-511", cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.Simple_Options)", file="ParserTests.cs"];
m3_323 [label="result.WithParsed(opts => opts.ShouldBeEquivalentTo(expected))", span="518-518", cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.Simple_Options)", file="ParserTests.cs"];
m3_324 [label="Exit CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.Simple_Options)", span="506-506", cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.Simple_Options)", file="ParserTests.cs"];
m3_76 [label="Entry Ninject.StandardKernel.StandardKernel(params Ninject.Modules.INinjectModule[])", span="36-36", cluster="Ninject.StandardKernel.StandardKernel(params Ninject.Modules.INinjectModule[])", file="ParserTests.cs"];
m3_72 [label="Entry Ninject.Tests.Integration.PropertyInjectionTests.PropertyInjectionTests()", span="97-97", cluster="Ninject.Tests.Integration.PropertyInjectionTests.PropertyInjectionTests()", file="ParserTests.cs"];
m3_74 [label="_kernel.Bind<IWeapon>().To<Shuriken>()", span="100-100", cluster="Ninject.Tests.Integration.PropertyInjectionTests.PropertyInjectionTests()", file="ParserTests.cs"];
m3_75 [label="Exit Ninject.Tests.Integration.PropertyInjectionTests.PropertyInjectionTests()", span="97-97", cluster="Ninject.Tests.Integration.PropertyInjectionTests.PropertyInjectionTests()", file="ParserTests.cs"];
m3_73 [label="_kernel = new StandardKernel()", span="99-99", cluster="Ninject.Tests.Integration.PropertyInjectionTests.PropertyInjectionTests()", file="ParserTests.cs"];
m3_77 [label="Assert.IsType<FootSoldier>(warrior)", span="105-105", cluster="Ninject.Tests.Integration.PropertyInjectionTests.ValidateWarrior(Ninject.Tests.Fakes.IWarrior)", file="ParserTests.cs"];
m3_7 [label="Entry Ninject.Syntax.IBindingWithSyntax<T>.WithPropertyValue(string, System.Func<Ninject.Activation.IContext, object>)", span="240-240", cluster="Ninject.Syntax.IBindingWithSyntax<T>.WithPropertyValue(string, System.Func<Ninject.Activation.IContext, object>)", file="ParserTests.cs"];
m3_129 [label="Entry CommandLine.Tests.Fakes.Immutable_Simple_Options.Immutable_Simple_Options(string, System.Collections.Generic.IEnumerable<int>, bool, long)", span="13-13", cluster="CommandLine.Tests.Fakes.Immutable_Simple_Options.Immutable_Simple_Options(string, System.Collections.Generic.IEnumerable<int>, bool, long)", file="ParserTests.cs"];
m3_10 [label="Entry lambda expression", span="13-13", cluster="lambda expression", file="ParserTests.cs"];
m3_61 [label="Entry CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", span="112-112", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", file="ParserTests.cs"];
m3_62 [label="var expectedOptions = new Simple_Options_With_Values\r\n                                  {\r\n                                      StringValue = ''astring'',\r\n                                      LongValue = 20L,\r\n                                      StringSequence = new[] { ''--aaa'', ''-b'', ''--ccc'' },\r\n                                      IntValue = 30\r\n                                  }", span="115-121", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", file="ParserTests.cs"];
m3_63 [label="var sut = new Parser(with => with.EnableDashDash = true)", span="122-122", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", file="ParserTests.cs"];
m3_64 [label="var result =\r\n                sut.ParseArguments<Simple_Options_With_Values>(\r\n                    new[] { ''--stringvalue'', ''astring'', ''--'', ''20'', ''--aaa'', ''-b'', ''--ccc'', ''30'' })", span="125-127", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", file="ParserTests.cs"];
m3_65 [label="((Parsed<Simple_Options_With_Values>)result).Value.ShouldBeEquivalentTo(expectedOptions)", span="130-130", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", file="ParserTests.cs"];
m3_66 [label="Exit CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", span="112-112", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", file="ParserTests.cs"];
m3_67 [label="Entry CommandLine.Tests.Fakes.Simple_Options_With_Values.Simple_Options_With_Values()", span="6-6", cluster="CommandLine.Tests.Fakes.Simple_Options_With_Values.Simple_Options_With_Values()", file="ParserTests.cs"];
m3_68 [label="Entry lambda expression", span="122-122", cluster="lambda expression", file="ParserTests.cs"];
m3_69 [label="with.EnableDashDash = true", span="122-122", cluster="lambda expression", file="ParserTests.cs"];
m3_70 [label="Exit lambda expression", span="122-122", cluster="lambda expression", file="ParserTests.cs"];
m3_25 [label="Entry lambda expression", span="36-36", cluster="lambda expression", file="ParserTests.cs"];
m3_82 [label="Entry lambda expression", span="150-150", cluster="lambda expression", file="ParserTests.cs"];
m3_83 [label="o.RespectingRuntimeTypes()", span="150-150", cluster="lambda expression", file="ParserTests.cs"];
m3_84 [label="Exit lambda expression", span="150-150", cluster="lambda expression", file="ParserTests.cs"];
m3_85 [label="Entry Unk.RespectingRuntimeTypes", span="", cluster="Unk.RespectingRuntimeTypes", file="ParserTests.cs"];
m3_86 [label="Entry CommandLine.Tests.Unit.ParserTests.Parse_verbs()", span="155-155", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="ParserTests.cs"];
m3_87 [label="var expectedOptions = new Clone_Verb\r\n                                  {\r\n                                      Quiet = true,\r\n                                      Urls =\r\n                                          new[]\r\n                                          {\r\n                                              ''http://gsscoder.github.com/'',\r\n                                              ''http://yes-to-nooo.github.com/''\r\n                                          }\r\n                                  }", span="158-167", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="ParserTests.cs"];
m3_228 [label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", span="383-383", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="ParserTests.cs"];
m3_230 [label="var sut = new Parser(config => config.HelpWriter = help)", span="387-387", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="ParserTests.cs"];
m3_232 [label="var result = help.ToString()", span="391-391", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="ParserTests.cs"];
m3_233 [label="result.Length.Should().BeGreaterThan(0)", span="394-394", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="ParserTests.cs"];
m3_235 [label="lines.Should().HaveCount(x => x == 1)", span="396-396", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="ParserTests.cs"];
m3_236 [label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="397-397", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="ParserTests.cs"];
m3_231 [label="sut.ParseArguments<Add_Verb, Commit_Verb, Clone_Verb>(new[] { command })", span="390-390", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="ParserTests.cs"];
m3_234 [label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="395-395", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="ParserTests.cs"];
m3_229 [label="var help = new StringWriter()", span="386-386", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="ParserTests.cs"];
m3_237 [label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", span="383-383", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="ParserTests.cs"];
m3_137 [label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="393-393", cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="ParserTests.cs"];
m3_94 [label="Entry lambda expression", span="180-180", cluster="lambda expression", file="ParserTests.cs"];
m3_47 [label="Exit Ninject.Tests.Integration.WithParameterTests.PropertyValueIsAssignedWhenNoInjectAttributeUsingSuppliedValue()", span="53-53", cluster="Ninject.Tests.Integration.WithParameterTests.PropertyValueIsAssignedWhenNoInjectAttributeUsingSuppliedValue()", file="ParserTests.cs"];
m3_97 [label="Ninject.Tests.Integration.WithParameterTests", span="", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])", file="ParserTests.cs"];
m3_102 [label="((Parsed<object>)result).Value.ShouldBeEquivalentTo(expectedOptions, o => o.RespectingRuntimeTypes())", span="202-202", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])", file="ParserTests.cs"];
m3_98 [label="Ninject.Tests.Integration.WhenNoPropertyOverridesAreSupplied", span="", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])", file="ParserTests.cs"];
m3_100 [label="var result = sut.ParseArguments(\r\n                args,\r\n                typeof(Add_Verb), typeof(Commit_Verb), typeof(Clone_Verb))", span="196-198", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])", file="ParserTests.cs"];
m3_101 [label="Assert.IsType<Commit_Verb>(((Parsed<object>)result).Value)", span="201-201", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])", file="ParserTests.cs"];
m3_99 [label="Ninject.Tests.Integration.PropertyInjectionTests", span="", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])", file="ParserTests.cs"];
m3_103 [label="Exit CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])", span="189-189", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])", file="ParserTests.cs"];
m3_88 [label="var sut = new Parser()", span="168-168", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="ParserTests.cs"];
m3_89 [label="var result =\r\n                sut.ParseArguments(\r\n                    new[] { ''clone'', ''-q'', ''http://gsscoder.github.com/'', ''http://yes-to-nooo.github.com/'' },\r\n                    typeof(Add_Verb),\r\n                    typeof(Commit_Verb),\r\n                    typeof(Clone_Verb))", span="171-176", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="ParserTests.cs"];
m3_92 [label="Exit CommandLine.Tests.Unit.ParserTests.Parse_verbs()", span="155-155", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="ParserTests.cs"];
m3_90 [label="Assert.IsType<Clone_Verb>(((Parsed<object>)result).Value)", span="179-179", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="ParserTests.cs"];
m3_91 [label="((Parsed<object>)result).Value.ShouldBeEquivalentTo(expectedOptions, o => o.RespectingRuntimeTypes())", span="180-180", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="ParserTests.cs"];
m3_93 [label="Entry CommandLine.Tests.Fakes.Clone_Verb.Clone_Verb()", span="36-36", cluster="CommandLine.Tests.Fakes.Clone_Verb.Clone_Verb()", file="ParserTests.cs"];
m3_369 [label="Entry CommandLine.ParserResult<T>.WithParsed<T>(System.Action<T>)", span="20-20", cluster="CommandLine.ParserResult<T>.WithParsed<T>(System.Action<T>)", file="ParserTests.cs"];
m3_35 [label="var warrior = _kernel.Get<IWarrior>()", span="48-48", cluster="Ninject.Tests.Integration.WithParameterTests.PropertyValueIsAssignedWhenNoInjectAttributeIsSuppliedUsingCallback()", file="ParserTests.cs"];
m3_13 [label="with.HelpWriter = writer", span="20-20", cluster="lambda expression", file="ParserTests.cs"];
m3_14 [label="Exit lambda expression", span="20-20", cluster="lambda expression", file="ParserTests.cs"];
m3_15 [label="Entry CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", span="32-32", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", file="ParserTests.cs"];
m3_16 [label="var writer = new StringWriter()", span="35-35", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", file="ParserTests.cs"];
m3_17 [label="var sut = new Parser(with => with.HelpWriter = writer)", span="36-36", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", file="ParserTests.cs"];
m3_55 [label="Entry lambda expression", span="67-67", cluster="lambda expression", file="ParserTests.cs"];
m3_57 [label="Exit lambda expression", span="67-67", cluster="lambda expression", file="ParserTests.cs"];
m3_56 [label="new Sword()", span="67-67", cluster="lambda expression", file="ParserTests.cs"];
m3_58 [label="Entry lambda expression", span="68-68", cluster="lambda expression", file="ParserTests.cs"];
m3_59 [label="new Sword()", span="68-68", cluster="lambda expression", file="ParserTests.cs"];
m3_154 [label="Entry Unk.BeGreaterThan", span="", cluster="Unk.BeGreaterThan", file="ParserTests.cs"];
m3_48 [label="Entry Ninject.Parameters.PropertyValue.PropertyValue(string, object)", span="26-26", cluster="Ninject.Parameters.PropertyValue.PropertyValue(string, object)", file="ParserTests.cs"];
m3_51 [label="_kernel.Bind<IWarrior>().To<Ninja>()\r\n                .WithParameter(new PropertyValue(''SecondaryWeapon'', context => new Sword()))\r\n                .WithParameter(new PropertyValue(''SecretWeapon'', context => new Sword()))", span="66-68", cluster="Ninject.Tests.Integration.WithParameterTests.PropertyValuesOverrideDefaultBinding()", file="ParserTests.cs"];
m3_52 [label="var warrior = _kernel.Get<IWarrior>()", span="69-69", cluster="Ninject.Tests.Integration.WithParameterTests.PropertyValuesOverrideDefaultBinding()", file="ParserTests.cs"];
m3_50 [label="_kernel.Settings.InjectNonPublic = true", span="65-65", cluster="Ninject.Tests.Integration.WithParameterTests.PropertyValuesOverrideDefaultBinding()", file="ParserTests.cs"];
m3_49 [label="Entry Ninject.Tests.Integration.WithParameterTests.PropertyValuesOverrideDefaultBinding()", span="63-63", cluster="Ninject.Tests.Integration.WithParameterTests.PropertyValuesOverrideDefaultBinding()", file="ParserTests.cs"];
m3_53 [label="ValidateNinjaWarriorWithOverides(warrior)", span="70-70", cluster="Ninject.Tests.Integration.WithParameterTests.PropertyValuesOverrideDefaultBinding()", file="ParserTests.cs"];
m3_211 [label="Entry CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", span="358-358", cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="ParserTests.cs"];
m3_218 [label="lines[1].ShouldBeEquivalentTo(''Copyright (c) 2005 - 2015 Giacomo Stelluti Scala'')", span="371-371", cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="ParserTests.cs"];
m3_219 [label="lines[2].ShouldBeEquivalentTo(''add        Add file contents to the index.'')", span="372-372", cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="ParserTests.cs"];
m3_220 [label="lines[3].ShouldBeEquivalentTo(''commit     Record changes to the repository.'')", span="373-373", cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="ParserTests.cs"];
m3_221 [label="lines[4].ShouldBeEquivalentTo(''clone      Clone a repository into a new directory.'')", span="374-374", cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="ParserTests.cs"];
m3_222 [label="lines[5].ShouldBeEquivalentTo(''help       Display more information on a specific command.'')", span="375-375", cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="ParserTests.cs"];
m3_223 [label="lines[6].ShouldBeEquivalentTo(''version    Display version information.'')", span="376-376", cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="ParserTests.cs"];
m3_216 [label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="369-369", cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="ParserTests.cs"];
m3_217 [label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="370-370", cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="ParserTests.cs"];
m3_215 [label="var result = help.ToString()", span="366-366", cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="ParserTests.cs"];
m3_213 [label="var sut = new Parser(config => config.HelpWriter = help)", span="362-362", cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="ParserTests.cs"];
m3_214 [label="sut.ParseArguments<Add_Verb, Commit_Verb, Clone_Verb>(new[] { ''--help'' })", span="365-365", cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="ParserTests.cs"];
m3_212 [label="var help = new StringWriter()", span="361-361", cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="ParserTests.cs"];
m3_224 [label="Exit CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", span="358-358", cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="ParserTests.cs"];
m3_361 [label="Entry lambda expression", span="547-547", cluster="lambda expression", file="ParserTests.cs"];
m3_11 [label="Entry Unk.True", span="", cluster="Unk.True", file="ParserTests.cs"];
m3_12 [label="Entry lambda expression", span="20-20", cluster="lambda expression", file="ParserTests.cs"];
m3_26 [label="with.HelpWriter = writer", span="36-36", cluster="lambda expression", file="ParserTests.cs"];
m3_30 [label="var sut = new Parser(with => with.HelpWriter = writer)", span="52-52", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", file="ParserTests.cs"];
m3_27 [label="Exit lambda expression", span="36-36", cluster="lambda expression", file="ParserTests.cs"];
m3_28 [label="Entry CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", span="48-48", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", file="ParserTests.cs"];
m3_31 [label="sut.ParseArguments<Add_Verb, Commit_Verb, Clone_Verb>(new string[] { })", span="55-55", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", file="ParserTests.cs"];
m3_32 [label="var text = writer.ToString()", span="58-58", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", file="ParserTests.cs"];
m3_41 [label="var sut = new Parser()", span="68-68", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options()", file="ParserTests.cs"];
m3_40 [label="var expectedOptions = new Simple_Options { StringValue = ''strvalue'', IntSequence = new[] { 1, 2, 3 } }", span="67-67", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options()", file="ParserTests.cs"];
m3_42 [label="var result = sut.ParseArguments<Simple_Options>(new[] { ''--stringvalue=strvalue'', ''-i1'', ''2'', ''3'' })", span="71-71", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options()", file="ParserTests.cs"];
m3_371 [label="Entry lambda expression", span="575-575", cluster="lambda expression", file="ParserTests.cs"];
m3_374 [label="Entry lambda expression", span="576-576", cluster="lambda expression", file="ParserTests.cs"];
m3_372 [label="expected = opts.WebUrl", span="575-575", cluster="lambda expression", color=green, community=0, file="ParserTests.cs"];
m3_373 [label="Exit lambda expression", span="575-575", cluster="lambda expression", file="ParserTests.cs"];
m3_375 [label="expected = ''changed''", span="576-576", cluster="lambda expression", color=green, community=0, file="ParserTests.cs"];
m3_376 [label="Exit lambda expression", span="576-576", cluster="lambda expression", file="ParserTests.cs"];
m3_330 [label="opts.ShouldBeEquivalentTo(expected)", span="518-518", cluster="lambda expression", file="ParserTests.cs"];
m3_342 [label="opts.ShouldBeEquivalentTo(expected)", span="537-537", cluster="lambda expression", file="ParserTests.cs"];
m3_105 [label="Entry lambda expression", span="202-202", cluster="lambda expression", file="ParserTests.cs"];
m3_120 [label="Entry lambda expression", span="245-245", cluster="lambda expression", file="ParserTests.cs"];
m3_329 [label="Entry lambda expression", span="518-518", cluster="lambda expression", file="ParserTests.cs"];
m3_331 [label="Exit lambda expression", span="518-518", cluster="lambda expression", file="ParserTests.cs"];
m3_341 [label="Entry lambda expression", span="537-537", cluster="lambda expression", file="ParserTests.cs"];
m3_343 [label="Exit lambda expression", span="537-537", cluster="lambda expression", file="ParserTests.cs"];
m3_140 [label="Entry lambda expression", span="275-275", cluster="lambda expression", file="ParserTests.cs"];
m3_143 [label="Entry lambda expression", span="276-276", cluster="lambda expression", file="ParserTests.cs"];
m3_156 [label="config.HelpWriter = help", span="285-285", cluster="lambda expression", file="ParserTests.cs"];
m3_166 [label="Entry lambda expression", span="307-307", cluster="lambda expression", file="ParserTests.cs"];
m3_169 [label="Entry lambda expression", span="308-308", cluster="lambda expression", file="ParserTests.cs"];
m3_186 [label="config.HelpWriter = help", span="317-317", cluster="lambda expression", file="ParserTests.cs"];
m3_262 [label="config.HelpWriter = help", span="406-406", cluster="lambda expression", file="ParserTests.cs"];
m3_327 [label="config.IgnoreUnknownArguments = true", span="511-511", cluster="lambda expression", file="ParserTests.cs"];
m3_96 [label="Ninject.Tests.Integration.WithPropertyValueTests", span="", cluster="lambda expression", file="ParserTests.cs"];
m3_107 [label="Exit lambda expression", span="202-202", cluster="lambda expression", file="ParserTests.cs"];
m3_106 [label="o.RespectingRuntimeTypes()", span="202-202", cluster="lambda expression", file="ParserTests.cs"];
m3_122 [label="Exit lambda expression", span="245-245", cluster="lambda expression", file="ParserTests.cs"];
m3_121 [label="o.RespectingRuntimeTypes()", span="245-245", cluster="lambda expression", file="ParserTests.cs"];
m3_144 [label="e.Equals(expectedError)", span="276-276", cluster="lambda expression", file="ParserTests.cs"];
m3_142 [label="Exit lambda expression", span="275-275", cluster="lambda expression", file="ParserTests.cs"];
m3_141 [label="x == 1", span="275-275", cluster="lambda expression", file="ParserTests.cs"];
m3_145 [label="Exit lambda expression", span="276-276", cluster="lambda expression", file="ParserTests.cs"];
m3_155 [label="Entry lambda expression", span="285-285", cluster="lambda expression", file="ParserTests.cs"];
m3_157 [label="Exit lambda expression", span="285-285", cluster="lambda expression", file="ParserTests.cs"];
m3_170 [label="e.Equals(expectedError)", span="308-308", cluster="lambda expression", file="ParserTests.cs"];
m3_168 [label="Exit lambda expression", span="307-307", cluster="lambda expression", file="ParserTests.cs"];
m3_167 [label="x == 1", span="307-307", cluster="lambda expression", file="ParserTests.cs"];
m3_171 [label="Exit lambda expression", span="308-308", cluster="lambda expression", file="ParserTests.cs"];
m3_185 [label="Entry lambda expression", span="317-317", cluster="lambda expression", file="ParserTests.cs"];
m3_187 [label="Exit lambda expression", span="317-317", cluster="lambda expression", file="ParserTests.cs"];
m3_261 [label="Entry lambda expression", span="406-406", cluster="lambda expression", file="ParserTests.cs"];
m3_263 [label="Exit lambda expression", span="406-406", cluster="lambda expression", file="ParserTests.cs"];
m3_326 [label="Entry lambda expression", span="511-511", cluster="lambda expression", file="ParserTests.cs"];
m3_328 [label="Exit lambda expression", span="511-511", cluster="lambda expression", file="ParserTests.cs"];
m3_80 [label="Exit Ninject.Tests.Integration.PropertyInjectionTests.ValidateWarrior(Ninject.Tests.Fakes.IWarrior)", span="103-103", cluster="Ninject.Tests.Integration.PropertyInjectionTests.ValidateWarrior(Ninject.Tests.Fakes.IWarrior)", file="ParserTests.cs"];
m3_339 [label="config.IgnoreUnknownArguments = true", span="530-530", cluster="lambda expression", file="ParserTests.cs"];
m3_37 [label="Exit Ninject.Tests.Integration.WithParameterTests.PropertyValueIsAssignedWhenNoInjectAttributeIsSuppliedUsingCallback()", span="44-44", cluster="Ninject.Tests.Integration.WithParameterTests.PropertyValueIsAssignedWhenNoInjectAttributeIsSuppliedUsingCallback()", file="ParserTests.cs"];
m3_209 [label="config.HelpWriter = help", span="336-336", cluster="lambda expression", file="ParserTests.cs"];
m3_226 [label="config.HelpWriter = help", span="362-362", cluster="lambda expression", file="ParserTests.cs"];
m3_239 [label="config.HelpWriter = help", span="387-387", cluster="lambda expression", file="ParserTests.cs"];
m3_272 [label="config.HelpWriter = help", span="432-432", cluster="lambda expression", file="ParserTests.cs"];
m3_299 [label="config.HelpWriter = help", span="448-448", cluster="lambda expression", file="ParserTests.cs"];
m3_317 [label="config.HelpWriter = help", span="483-483", cluster="lambda expression", file="ParserTests.cs"];
m3_362 [label="config.HelpWriter = help", span="547-547", cluster="lambda expression", file="ParserTests.cs"];
m3_188 [label="Entry lambda expression", span="326-326", cluster="lambda expression", file="ParserTests.cs"];
m3_241 [label="Entry lambda expression", span="396-396", cluster="lambda expression", file="ParserTests.cs"];
m3_79 [label="Assert.IsType<Shuriken>(warrior.Weapon)", span="107-107", cluster="Ninject.Tests.Integration.PropertyInjectionTests.ValidateWarrior(Ninject.Tests.Fakes.IWarrior)", file="ParserTests.cs"];
m3_81 [label="Entry Unk.NotNull", span="", cluster="Unk.NotNull", file="ParserTests.cs"];
m3_338 [label="Entry lambda expression", span="530-530", cluster="lambda expression", file="ParserTests.cs"];
m3_340 [label="Exit lambda expression", span="530-530", cluster="lambda expression", file="ParserTests.cs"];
m3_36 [label="ValidateWarrior(warrior)", span="49-49", cluster="Ninject.Tests.Integration.WithParameterTests.PropertyValueIsAssignedWhenNoInjectAttributeIsSuppliedUsingCallback()", file="ParserTests.cs"];
m3_38 [label="Entry Ninject.Parameters.PropertyValue.PropertyValue(string, System.Func<Ninject.Activation.IContext, object>)", span="33-33", cluster="Ninject.Parameters.PropertyValue.PropertyValue(string, System.Func<Ninject.Activation.IContext, object>)", file="ParserTests.cs"];
m3_208 [label="Entry lambda expression", span="336-336", cluster="lambda expression", file="ParserTests.cs"];
m3_210 [label="Exit lambda expression", span="336-336", cluster="lambda expression", file="ParserTests.cs"];
m3_225 [label="Entry lambda expression", span="362-362", cluster="lambda expression", file="ParserTests.cs"];
m3_227 [label="Exit lambda expression", span="362-362", cluster="lambda expression", file="ParserTests.cs"];
m3_238 [label="Entry lambda expression", span="387-387", cluster="lambda expression", file="ParserTests.cs"];
m3_240 [label="Exit lambda expression", span="387-387", cluster="lambda expression", file="ParserTests.cs"];
m3_271 [label="Entry lambda expression", span="432-432", cluster="lambda expression", file="ParserTests.cs"];
m3_273 [label="Exit lambda expression", span="432-432", cluster="lambda expression", file="ParserTests.cs"];
m3_298 [label="Entry lambda expression", span="448-448", cluster="lambda expression", file="ParserTests.cs"];
m3_300 [label="Exit lambda expression", span="448-448", cluster="lambda expression", file="ParserTests.cs"];
m3_316 [label="Entry lambda expression", span="483-483", cluster="lambda expression", file="ParserTests.cs"];
m3_318 [label="Exit lambda expression", span="483-483", cluster="lambda expression", file="ParserTests.cs"];
m3_363 [label="Exit lambda expression", span="547-547", cluster="lambda expression", file="ParserTests.cs"];
m3_190 [label="Exit lambda expression", span="326-326", cluster="lambda expression", file="ParserTests.cs"];
m3_189 [label="x == 1", span="326-326", cluster="lambda expression", file="ParserTests.cs"];
m3_242 [label="x == 1", span="396-396", cluster="lambda expression", file="ParserTests.cs"];
m3_243 [label="Exit lambda expression", span="396-396", cluster="lambda expression", file="ParserTests.cs"];
m3_54 [label="Entry CommandLine.Tests.Fakes.Options_With_Switches.Options_With_Switches()", span="4-4", cluster="CommandLine.Tests.Fakes.Options_With_Switches.Options_With_Switches()", file="ParserTests.cs"];
m3_33 [label="Entry Ninject.Tests.Integration.WithParameterTests.PropertyValueIsAssignedWhenNoInjectAttributeIsSuppliedUsingCallback()", span="44-44", cluster="Ninject.Tests.Integration.WithParameterTests.PropertyValueIsAssignedWhenNoInjectAttributeIsSuppliedUsingCallback()", file="ParserTests.cs"];
m3_29 [label="Entry Ninject.Tests.Fakes.Sword.Sword()", span="4-4", cluster="Ninject.Tests.Fakes.Sword.Sword()", file="ParserTests.cs"];
m3_34 [label="_kernel.Bind<IWarrior>().To<FootSoldier>()\r\n                .WithParameter(new PropertyValue(''Weapon'', context => context.Kernel.Get<IWeapon>()))", span="46-47", cluster="Ninject.Tests.Integration.WithParameterTests.PropertyValueIsAssignedWhenNoInjectAttributeIsSuppliedUsingCallback()", file="ParserTests.cs"];
m3_146 [label="Entry Unk.Equals", span="", cluster="Unk.Equals", file="ParserTests.cs"];
m3_184 [label="Entry Unk.StartWithEquivalent", span="", cluster="Unk.StartWithEquivalent", file="ParserTests.cs"];
m3_39 [label="Entry Ninject.Syntax.IBindingWithSyntax<T>.WithParameter(Ninject.Parameters.IParameter)", span="246-246", cluster="Ninject.Syntax.IBindingWithSyntax<T>.WithParameter(Ninject.Parameters.IParameter)", file="ParserTests.cs"];
m3_43 [label="Entry Ninject.Tests.Integration.WithParameterTests.PropertyValueIsAssignedWhenNoInjectAttributeUsingSuppliedValue()", span="53-53", cluster="Ninject.Tests.Integration.WithParameterTests.PropertyValueIsAssignedWhenNoInjectAttributeUsingSuppliedValue()", file="ParserTests.cs"];
m3_44 [label="_kernel.Bind<IWarrior>().To<FootSoldier>()\r\n                .WithParameter(new PropertyValue(''Weapon'', _kernel.Get<IWeapon>()))", span="55-56", cluster="Ninject.Tests.Integration.WithParameterTests.PropertyValueIsAssignedWhenNoInjectAttributeUsingSuppliedValue()", file="ParserTests.cs"];
m3_172 [label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", span="313-313", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="ParserTests.cs"];
m3_175 [label="sut.ParseArguments<Simple_Options>(new[] { ''--version'' })", span="320-320", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="ParserTests.cs"];
m3_174 [label="var sut = new Parser(config => config.HelpWriter = help)", span="317-317", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="ParserTests.cs"];
m3_176 [label="var result = help.ToString()", span="321-321", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="ParserTests.cs"];
m3_173 [label="var help = new StringWriter()", span="316-316", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="ParserTests.cs"];
m3_177 [label="result.Length.Should().BeGreaterThan(0)", span="324-324", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="ParserTests.cs"];
m3_178 [label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="325-325", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="ParserTests.cs"];
m3_179 [label="lines.Should().HaveCount(x => x == 1)", span="326-326", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="ParserTests.cs"];
m3_180 [label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="327-327", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="ParserTests.cs"];
m3_181 [label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", span="313-313", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="ParserTests.cs"];
m3_370 [label="Entry CommandLine.ParserResult<T>.WithNotParsed<T>(System.Action<System.Collections.Generic.IEnumerable<CommandLine.Error>>)", span="58-58", cluster="CommandLine.ParserResult<T>.WithNotParsed<T>(System.Action<System.Collections.Generic.IEnumerable<CommandLine.Error>>)", file="ParserTests.cs"];
m3_19 [label="Entry Ninject.Tests.Integration.WithPropertyValueTests.PropertyValuesOverrideDefaultBinding()", span="29-29", cluster="Ninject.Tests.Integration.WithPropertyValueTests.PropertyValuesOverrideDefaultBinding()", file="ParserTests.cs"];
m3_20 [label="_kernel.Settings.InjectNonPublic = true", span="31-31", cluster="Ninject.Tests.Integration.WithPropertyValueTests.PropertyValuesOverrideDefaultBinding()", file="ParserTests.cs"];
m3_18 [label="Entry Ninject.Syntax.IBindingWithSyntax<T>.WithPropertyValue(string, object)", span="233-233", cluster="Ninject.Syntax.IBindingWithSyntax<T>.WithPropertyValue(string, object)", file="ParserTests.cs"];
m3_21 [label="_kernel.Bind<IWarrior>().To<Ninja>()\r\n                .WithPropertyValue(''SecondaryWeapon'', context => new Sword())\r\n                .WithPropertyValue(''SecretWeapon'', context => new Sword())", span="32-34", cluster="Ninject.Tests.Integration.WithPropertyValueTests.PropertyValuesOverrideDefaultBinding()", file="ParserTests.cs"];
m3_45 [label="Entry CommandLine.Tests.Fakes.Simple_Options.Simple_Options()", span="6-6", cluster="CommandLine.Tests.Fakes.Simple_Options.Simple_Options()", file="ParserTests.cs"];
m3_46 [label="Entry CommandLine.Parser.Parser()", span="26-26", cluster="CommandLine.Parser.Parser()", file="ParserTests.cs"];
m3_182 [label="Entry string.ToNotEmptyLines()", span="10-10", cluster="string.ToNotEmptyLines()", file="ParserTests.cs"];
m3_130 [label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", span="265-265", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="ParserTests.cs"];
m3_133 [label="var result = sut.ParseArguments<Immutable_Simple_Options>(new[] { ''--help'' })", span="272-272", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="ParserTests.cs"];
m3_132 [label="var sut = new Parser()", span="269-269", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="ParserTests.cs"];
m3_134 [label="((NotParsed<Immutable_Simple_Options>)result).Errors.Should().HaveCount(x => x == 1)", span="275-275", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="ParserTests.cs"];
m3_135 [label="((NotParsed<Immutable_Simple_Options>)result).Errors.Should().ContainSingle(e => e.Equals(expectedError))", span="276-276", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="ParserTests.cs"];
m3_131 [label="var expectedError = new HelpRequestedError()", span="268-268", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="ParserTests.cs"];
m3_136 [label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", span="265-265", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="ParserTests.cs"];
m3_22 [label="Entry CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", span="144-144", cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="ParserTests.cs"];
m3_23 [label="Entry Unk.Should", span="", cluster="Unk.Should", file="ParserTests.cs"];
m3_24 [label="Entry Unk.NotBeEmpty", span="", cluster="Unk.NotBeEmpty", file="ParserTests.cs"];
m3_139 [label="Entry Unk.ContainSingle", span="", cluster="Unk.ContainSingle", file="ParserTests.cs"];
m3_78 [label="Assert.NotNull(warrior.Weapon)", span="106-106", cluster="Ninject.Tests.Integration.PropertyInjectionTests.ValidateWarrior(Ninject.Tests.Fakes.IWarrior)", file="ParserTests.cs"];
m3_113 [label="Entry CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", span="223-223", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="ParserTests.cs"];
m3_118 [label="((Parsed<object>)result).Value.ShouldBeEquivalentTo(expectedOptions, o => o.RespectingRuntimeTypes())", span="245-245", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="ParserTests.cs"];
m3_114 [label="var expectedOptions = new Clone_Verb\r\n                                  {\r\n                                      Quiet = true,\r\n                                      Urls =\r\n                                          new[]\r\n                                          {\r\n                                              ''http://gsscoder.github.com/'',\r\n                                              ''http://yes-to-nooo.github.com/''\r\n                                          }\r\n                                  }", span="226-235", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="ParserTests.cs"];
m3_116 [label="var result =\r\n                sut.ParseArguments<Add_Verb, Commit_Verb, Clone_Verb>(\r\n                    new[] { ''clone'', ''-q'', ''http://gsscoder.github.com/'', ''http://yes-to-nooo.github.com/'' })", span="239-241", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="ParserTests.cs"];
m3_117 [label="Assert.IsType<Clone_Verb>(((Parsed<object>)result).Value)", span="244-244", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="ParserTests.cs"];
m3_115 [label="var sut = new Parser()", span="236-236", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="ParserTests.cs"];
m3_119 [label="Exit CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", span="223-223", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="ParserTests.cs"];
m3_183 [label="Entry System.Collections.Generic.IEnumerable<string>.TrimStringArray()", span="15-15", cluster="System.Collections.Generic.IEnumerable<string>.TrimStringArray()", file="ParserTests.cs"];
m3_158 [label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", span="297-297", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="ParserTests.cs"];
m3_161 [label="var result = sut.ParseArguments<Simple_Options>(new[] { ''--version'' })", span="304-304", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="ParserTests.cs"];
m3_160 [label="var sut = new Parser()", span="301-301", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="ParserTests.cs"];
m3_162 [label="((NotParsed<Simple_Options>)result).Errors.Should().HaveCount(x => x == 1)", span="307-307", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="ParserTests.cs"];
m3_163 [label="((NotParsed<Simple_Options>)result).Errors.Should().ContainSingle(e => e.Equals(expectedError))", span="308-308", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="ParserTests.cs"];
m3_159 [label="var expectedError = new VersionRequestedError()", span="300-300", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="ParserTests.cs"];
m3_164 [label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", span="297-297", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="ParserTests.cs"];
m3_244 [label="Entry CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", span="402-402", cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs"];
m3_247 [label="sut.ParseArguments<Options_With_Two_Option_Required_Set_To_True_And_Two_Sets>(new[] { ''--weburl=value.com'', ''--ftpurl=value.org'' })", span="409-409", cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs"];
m3_251 [label="lines[1].ShouldBeEquivalentTo(''Copyright (c) 2005 - 2015 Giacomo Stelluti Scala'')", span="415-415", cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs"];
m3_252 [label="lines[2].ShouldBeEquivalentTo(''ERROR(S):'')", span="416-416", cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs"];
m3_253 [label="lines[3].ShouldBeEquivalentTo(''Option: 'weburl' is not compatible with: 'ftpurl'.'')", span="417-417", cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs"];
m3_254 [label="lines[4].ShouldBeEquivalentTo(''Option: 'ftpurl' is not compatible with: 'weburl'.'')", span="418-418", cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs"];
m3_255 [label="lines[5].ShouldBeEquivalentTo(''--weburl     Required.'')", span="419-419", cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs"];
m3_256 [label="lines[6].ShouldBeEquivalentTo(''--ftpurl     Required.'')", span="420-420", cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs"];
m3_257 [label="lines[7].ShouldBeEquivalentTo(''-a'')", span="421-421", cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs"];
m3_258 [label="lines[8].ShouldBeEquivalentTo(''--help       Display this help screen.'')", span="422-422", cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs"];
m3_259 [label="lines[9].ShouldBeEquivalentTo(''--version    Display version information.'')", span="423-423", cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs"];
m3_246 [label="var sut = new Parser(config => config.HelpWriter = help)", span="406-406", cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs"];
m3_248 [label="var result = help.ToString()", span="410-410", cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs"];
m3_249 [label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="413-413", cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs"];
m3_250 [label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="414-414", cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs"];
m3_245 [label="var help = new StringWriter()", span="405-405", cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs"];
m3_260 [label="Exit CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", span="402-402", cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs"];
m3_9 [label="Entry CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", span="85-85", cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", file="ParserTests.cs"];
m3_138 [label="Entry Unk.HaveCount", span="", cluster="Unk.HaveCount", file="ParserTests.cs"];
m3_344 [label="Entry CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", span="543-543", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs"];
m3_351 [label="lines[1].ShouldBeEquivalentTo(''Copyright (c) 2005 - 2015 Giacomo Stelluti Scala'')", span="557-557", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs"];
m3_352 [label="lines[2].ShouldBeEquivalentTo(''ERROR(S):'')", span="558-558", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs"];
m3_353 [label="lines[3].ShouldBeEquivalentTo(''Option 'bad-arg' is unknown.'')", span="559-559", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs"];
m3_354 [label="lines[4].ShouldBeEquivalentTo(''--no-hardlinks    Optimize the cloning process from a repository on a local'')", span="560-560", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs"];
m3_355 [label="lines[5].ShouldBeEquivalentTo(''filesystem by copying files.'')", span="561-561", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs"];
m3_356 [label="lines[6].ShouldBeEquivalentTo(''-q, --quiet       Suppress summary message.'')", span="562-562", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs"];
m3_357 [label="lines[7].ShouldBeEquivalentTo(''--help            Display this help screen.'')", span="563-563", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs"];
m3_358 [label="lines[8].ShouldBeEquivalentTo(''--version         Display version information.'')", span="564-564", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs"];
m3_359 [label="lines[9].ShouldBeEquivalentTo(''value pos. 0'')", span="565-565", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs"];
m3_349 [label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="555-555", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs"];
m3_350 [label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="556-556", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs"];
m3_348 [label="var result = help.ToString()", span="552-552", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs"];
m3_346 [label="var sut = new Parser(config => config.HelpWriter = help)", span="547-547", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs"];
m3_347 [label="sut.ParseArguments<Add_Verb, Commit_Verb, Clone_Verb>(\r\n                new[] { ''clone'', ''--bad-arg'', ''--help'' })", span="550-551", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs"];
m3_345 [label="var help = new StringWriter()", span="546-546", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs"];
m3_360 [label="Exit CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", span="543-543", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs"];
m3_301 [label="Entry CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", span="479-479", cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="ParserTests.cs"];
m3_308 [label="lines[1].ShouldBeEquivalentTo(''Copyright (c) 2005 - 2015 Giacomo Stelluti Scala'')", span="493-493", cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="ParserTests.cs"];
m3_309 [label="lines[2].ShouldBeEquivalentTo(''--no-hardlinks    Optimize the cloning process from a repository on a local'')", span="494-494", cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="ParserTests.cs"];
m3_310 [label="lines[3].ShouldBeEquivalentTo(''filesystem by copying files.'')", span="495-495", cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="ParserTests.cs"];
m3_311 [label="lines[4].ShouldBeEquivalentTo(''-q, --quiet       Suppress summary message.'')", span="496-496", cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="ParserTests.cs"];
m3_312 [label="lines[5].ShouldBeEquivalentTo(''--help            Display this help screen.'')", span="497-497", cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="ParserTests.cs"];
m3_313 [label="lines[6].ShouldBeEquivalentTo(''--version         Display version information.'')", span="498-498", cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="ParserTests.cs"];
m3_314 [label="lines[7].ShouldBeEquivalentTo(''value pos. 0'')", span="499-499", cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="ParserTests.cs"];
m3_306 [label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="491-491", cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="ParserTests.cs"];
m3_307 [label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="492-492", cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="ParserTests.cs"];
m3_305 [label="var result = help.ToString()", span="488-488", cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="ParserTests.cs"];
m3_303 [label="var sut = new Parser(config => config.HelpWriter = help)", span="483-483", cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="ParserTests.cs"];
m3_304 [label="sut.ParseArguments<Add_Verb, Commit_Verb, Clone_Verb>(\r\n                new[] { ''help'', ''clone'', ''extra-arg'' })", span="486-487", cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="ParserTests.cs"];
m3_302 [label="var help = new StringWriter()", span="482-482", cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="ParserTests.cs"];
m3_315 [label="Exit CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", span="479-479", cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="ParserTests.cs"];
m3_191 [label="Entry CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", span="332-332", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs"];
m3_199 [label="lines[1].ShouldBeEquivalentTo(''Copyright (c) 2005 - 2015 Giacomo Stelluti Scala'')", span="346-346", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs"];
m3_200 [label="lines[2].ShouldBeEquivalentTo(''ERROR(S):'')", span="347-347", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs"];
m3_201 [label="lines[3].ShouldBeEquivalentTo(''No verb selected.'')", span="348-348", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs"];
m3_202 [label="lines[4].ShouldBeEquivalentTo(''add        Add file contents to the index.'')", span="349-349", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs"];
m3_203 [label="lines[5].ShouldBeEquivalentTo(''commit     Record changes to the repository.'')", span="350-350", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs"];
m3_204 [label="lines[6].ShouldBeEquivalentTo(''clone      Clone a repository into a new directory.'')", span="351-351", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs"];
m3_205 [label="lines[7].ShouldBeEquivalentTo(''help       Display more information on a specific command.'')", span="352-352", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs"];
m3_206 [label="lines[8].ShouldBeEquivalentTo(''version    Display version information.'')", span="353-353", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs"];
m3_197 [label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="344-344", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs"];
m3_198 [label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="345-345", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs"];
m3_195 [label="var result = help.ToString()", span="340-340", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs"];
m3_196 [label="result.Length.Should().BeGreaterThan(0)", span="343-343", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs"];
m3_193 [label="var sut = new Parser(config => config.HelpWriter = help)", span="336-336", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs"];
m3_194 [label="sut.ParseArguments<Add_Verb, Commit_Verb, Clone_Verb>(new string[] { })", span="339-339", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs"];
m3_192 [label="var help = new StringWriter()", span="335-335", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs"];
m3_207 [label="Exit CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", span="332-332", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs"];
m3_274 [label="Entry CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", span="444-444", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs"];
m3_281 [label="lines[1].ShouldBeEquivalentTo(''Copyright (c) 2005 - 2015 Giacomo Stelluti Scala'')", span="458-458", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs"];
m3_282 [label="lines[2].ShouldBeEquivalentTo(''ERROR(S):'')", span="459-459", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs"];
m3_283 [label="lines[3].ShouldBeEquivalentTo(''Option 'badoption' is unknown.'')", span="460-460", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs"];
m3_284 [label="lines[4].ShouldBeEquivalentTo(''USAGE:'')", span="461-461", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs"];
m3_285 [label="lines[5].ShouldBeEquivalentTo(''Basic cloning:'')", span="462-462", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs"];
m3_286 [label="lines[6].ShouldBeEquivalentTo(''git clone https://github.com/gsscoder/csharpx'')", span="463-463", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs"];
m3_287 [label="lines[7].ShouldBeEquivalentTo(''Cloning quietly:'')", span="464-464", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs"];
m3_288 [label="lines[8].ShouldBeEquivalentTo(''git clone --quiet https://github.com/gsscoder/railwaysharp'')", span="465-465", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs"];
m3_289 [label="lines[9].ShouldBeEquivalentTo(''Cloning without hard links:'')", span="466-466", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs"];
m3_290 [label="lines[10].ShouldBeEquivalentTo(''git clone --no-hardlinks https://github.com/gsscoder/csharpx'')", span="467-467", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs"];
m3_291 [label="lines[11].ShouldBeEquivalentTo(''--no-hardlinks    Optimize the cloning process from a repository on a local'')", span="468-468", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs"];
m3_292 [label="lines[12].ShouldBeEquivalentTo(''filesystem by copying files.'')", span="469-469", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs"];
m3_293 [label="lines[13].ShouldBeEquivalentTo(''-q, --quiet       Suppress summary message.'')", span="470-470", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs"];
m3_294 [label="lines[14].ShouldBeEquivalentTo(''--help            Display this help screen.'')", span="471-471", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs"];
m3_295 [label="lines[15].ShouldBeEquivalentTo(''--version         Display version information.'')", span="472-472", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs"];
m3_296 [label="lines[16].ShouldBeEquivalentTo(''URLS (pos. 0)     A list of url(s) to clone.'')", span="473-473", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs"];
m3_279 [label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="456-456", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs"];
m3_280 [label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="457-457", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs"];
m3_278 [label="var result = help.ToString()", span="453-453", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs"];
m3_276 [label="var sut = new Parser(config => config.HelpWriter = help)", span="448-448", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs"];
m3_277 [label="sut.ParseArguments<Add_Verb_With_Usage_Attribute, Commit_Verb_With_Usage_Attribute, Clone_Verb_With_Usage_Attribute>(\r\n                new[] { ''clone'', ''--badoption=@bad?value'' })", span="451-452", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs"];
m3_275 [label="var help = new StringWriter()", span="447-447", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs"];
m3_297 [label="Exit CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", span="444-444", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs"];
m3_332 [label="Entry CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.Commit_Verb)", span="525-525", cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.Commit_Verb)", file="ParserTests.cs"];
m3_335 [label="result.Tag.ShouldBeEquivalentTo(ParserResultType.Parsed)", span="536-536", cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.Commit_Verb)", file="ParserTests.cs"];
m3_334 [label="var result = sut.ParseArguments<Add_Verb, Commit_Verb, Clone_Verb>(arguments)", span="533-533", cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.Commit_Verb)", file="ParserTests.cs"];
m3_336 [label="result.WithParsed(opts => opts.ShouldBeEquivalentTo(expected))", span="537-537", cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.Commit_Verb)", file="ParserTests.cs"];
m3_333 [label="var sut = new Parser(config => config.IgnoreUnknownArguments = true)", span="530-530", cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.Commit_Verb)", file="ParserTests.cs"];
m3_337 [label="Exit CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.Commit_Verb)", span="525-525", cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.Commit_Verb)", file="ParserTests.cs"];
m3_264 [label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", span="428-428", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", file="ParserTests.cs"];
m3_266 [label="var sut = new Parser(config => config.HelpWriter = help)", span="432-432", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", file="ParserTests.cs"];
m3_268 [label="var result = help.ToString()", span="436-436", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", file="ParserTests.cs"];
m3_269 [label="result.Length.Should().BeGreaterThan(0)", span="439-439", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", file="ParserTests.cs"];
m3_267 [label="sut.ParseArguments<Add_Verb, Commit_Verb, Clone_Verb>(new[] { ''commit'', ''--help'' })", span="435-435", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", file="ParserTests.cs"];
m3_265 [label="var help = new StringWriter()", span="431-431", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", file="ParserTests.cs"];
m3_270 [label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", span="428-428", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", file="ParserTests.cs"];
m3_364 [label="Entry CommandLine.Tests.Unit.ParserTests.Breaking_mutually_exclusive_set_constraint_with_set_name_with_partial_string_right_side_equality_gererates_MissingValueOptionError()", span="571-571", cluster="CommandLine.Tests.Unit.ParserTests.Breaking_mutually_exclusive_set_constraint_with_set_name_with_partial_string_right_side_equality_gererates_MissingValueOptionError()", file="ParserTests.cs"];
m3_365 [label="var expected = string.Empty", span="573-573", cluster="CommandLine.Tests.Unit.ParserTests.Breaking_mutually_exclusive_set_constraint_with_set_name_with_partial_string_right_side_equality_gererates_MissingValueOptionError()", color=green, community=0, file="ParserTests.cs"];
m3_366 [label="Parser.Default.ParseArguments<Options_With_SetName_That_Ends_With_Previous_SetName>(new[] { ''--weburl'', ''value'', ''--somethingelse'', ''othervalue'' })\r\n                .WithParsed(opts => expected = opts.WebUrl)\r\n                .WithNotParsed(err => expected = ''changed'')", span="574-576", cluster="CommandLine.Tests.Unit.ParserTests.Breaking_mutually_exclusive_set_constraint_with_set_name_with_partial_string_right_side_equality_gererates_MissingValueOptionError()", color=green, community=0, file="ParserTests.cs"];
m3_367 [label="''changed''.ShouldBeEquivalentTo(expected)", span="578-578", cluster="CommandLine.Tests.Unit.ParserTests.Breaking_mutually_exclusive_set_constraint_with_set_name_with_partial_string_right_side_equality_gererates_MissingValueOptionError()", color=green, community=0, file="ParserTests.cs"];
m3_368 [label="Exit CommandLine.Tests.Unit.ParserTests.Breaking_mutually_exclusive_set_constraint_with_set_name_with_partial_string_right_side_equality_gererates_MissingValueOptionError()", span="571-571", cluster="CommandLine.Tests.Unit.ParserTests.Breaking_mutually_exclusive_set_constraint_with_set_name_with_partial_string_right_side_equality_gererates_MissingValueOptionError()", file="ParserTests.cs"];
m3_165 [label="Entry CommandLine.VersionRequestedError.VersionRequestedError()", span="457-457", cluster="CommandLine.VersionRequestedError.VersionRequestedError()", file="ParserTests.cs"];
m3_123 [label="Entry CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", span="250-250", cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", file="ParserTests.cs"];
m3_126 [label="var result = sut.ParseArguments<Immutable_Simple_Options>(new[] { ''--stringvalue=strvalue'', ''-i1'', ''2'', ''3'' })", span="257-257", cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", file="ParserTests.cs"];
m3_127 [label="((Parsed<Immutable_Simple_Options>)result).Value.ShouldBeEquivalentTo(expectedOptions)", span="260-260", cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", file="ParserTests.cs"];
m3_125 [label="var sut = new Parser()", span="254-254", cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", file="ParserTests.cs"];
m3_124 [label="var expectedOptions = new Immutable_Simple_Options(''strvalue'', new[] { 1, 2, 3 }, default(bool), default(long))", span="253-253", cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", file="ParserTests.cs"];
m3_128 [label="Exit CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", span="250-250", cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", file="ParserTests.cs"];
m3_104 [label="Entry CommandLine.Tests.Fakes.Commit_Verb.Commit_Verb()", span="22-22", cluster="CommandLine.Tests.Fakes.Commit_Verb.Commit_Verb()", file="ParserTests.cs"];
m3_325 [label="Entry Unk.WithParsed", span="", cluster="Unk.WithParsed", file="ParserTests.cs"];
m3_391 [label="CommandLine.Tests.Fakes.Simple_Options", span="", file="ParserTests.cs"];
m3_392 [label="CommandLine.Tests.Fakes.Commit_Verb", span="", file="ParserTests.cs"];
m3_377 [label=writer, span="", file="ParserTests.cs"];
m3_381 [label=help, span="", file="ParserTests.cs"];
m3_383 [label=help, span="", file="ParserTests.cs"];
m3_387 [label=help, span="", file="ParserTests.cs"];
m3_380 [label=expectedError, span="", file="ParserTests.cs"];
m3_382 [label=expectedError, span="", file="ParserTests.cs"];
m3_378 [label=writer, span="", file="ParserTests.cs"];
m3_379 [label=writer, span="", file="ParserTests.cs"];
m3_384 [label=help, span="", file="ParserTests.cs"];
m3_385 [label=help, span="", file="ParserTests.cs"];
m3_386 [label=help, span="", file="ParserTests.cs"];
m3_388 [label=help, span="", file="ParserTests.cs"];
m3_389 [label=help, span="", file="ParserTests.cs"];
m3_390 [label=help, span="", file="ParserTests.cs"];
m3_393 [label=help, span="", file="ParserTests.cs"];
m4_6 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()", file="ResultExtensions.cs"];
m4_0 [label="Entry CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", span="15-15", cluster="CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ResultExtensions.cs"];
m4_1 [label="result.Tag == ResultType.Ok", span="17-17", cluster="CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ResultExtensions.cs"];
m4_2 [label="var ok = (Ok<TSuccess, TMessage>)result", span="19-19", cluster="CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ResultExtensions.cs"];
m4_4 [label="return Enumerable.Empty<TMessage>();", span="22-22", cluster="CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ResultExtensions.cs"];
m4_3 [label="return ok.Messages;", span="20-20", cluster="CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", color=green, community=0, file="ResultExtensions.cs"];
m4_5 [label="Exit CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", span="15-15", cluster="CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ResultExtensions.cs"];
m4_13 [label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124", cluster="CSharpx.Maybe.Just<T>(T)", file="ResultExtensions.cs"];
m4_7 [label="Entry CommandLine.Infrastructure.ResultExtensions.ToMaybe<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", span="25-25", cluster="CommandLine.Infrastructure.ResultExtensions.ToMaybe<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ResultExtensions.cs"];
m4_8 [label="result.Tag == ResultType.Ok", span="27-27", cluster="CommandLine.Infrastructure.ResultExtensions.ToMaybe<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ResultExtensions.cs"];
m4_9 [label="var ok = (Ok<TSuccess, TMessage>)result", span="29-29", cluster="CommandLine.Infrastructure.ResultExtensions.ToMaybe<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ResultExtensions.cs"];
m4_11 [label="return Maybe.Nothing<TSuccess>();", span="32-32", cluster="CommandLine.Infrastructure.ResultExtensions.ToMaybe<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ResultExtensions.cs"];
m4_10 [label="return Maybe.Just(ok.Success);", span="30-30", cluster="CommandLine.Infrastructure.ResultExtensions.ToMaybe<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", color=green, community=0, file="ResultExtensions.cs"];
m4_12 [label="Exit CommandLine.Infrastructure.ResultExtensions.ToMaybe<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", span="25-25", cluster="CommandLine.Infrastructure.ResultExtensions.ToMaybe<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ResultExtensions.cs"];
m4_14 [label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116", cluster="CSharpx.Maybe.Nothing<T>()", file="ResultExtensions.cs"];
m6_11 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()", file="TokenizerTests.cs"];
m6_20 [label="Entry CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", span="44-44", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TokenizerTests.cs"];
m6_24 [label="((Ok<IEnumerable<Token>, Error>)result).Value.Success.ShouldBeEquivalentTo(expectedTokens)", span="62-62", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", color=green, community=0, file="TokenizerTests.cs"];
m6_21 [label="var expectedTokens = new[] { Token.Name(''x''), Token.Name(''string-seq''),\r\n                Token.Value(''aaa''), Token.Value(''bb''),  Token.Value(''cccc''), Token.Name(''switch'') }", span="47-48", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TokenizerTests.cs"];
m6_23 [label="var result =\r\n                Tokenizer.ExplodeOptionList(\r\n                    Result.Succeed(\r\n                        Enumerable.Empty<Token>().Concat(new[] { Token.Name(''x''),\r\n                            Token.Name(''string-seq''), Token.Value(''aaa,bb,cccc''), Token.Name(''switch'') }),\r\n                        Enumerable.Empty<Error>()),\r\n                        optionName => NameLookup.HavingSeparator(optionName, specs, StringComparer.InvariantCulture))", span="53-59", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TokenizerTests.cs"];
m6_22 [label="var specs = new[] { new OptionSpecification(string.Empty, ''string-seq'',\r\n                false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), ',', null, string.Empty, string.Empty, new List<string>(), typeof(IEnumerable<string>), TargetType.Sequence)}", span="49-50", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TokenizerTests.cs"];
m6_25 [label="Exit CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", span="44-44", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TokenizerTests.cs"];
m6_35 [label="Entry CommandLine.Core.Token.Value(string, bool)", span="29-29", cluster="CommandLine.Core.Token.Value(string, bool)", file="TokenizerTests.cs"];
m6_29 [label="Entry CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", span="68-68", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", file="TokenizerTests.cs"];
m6_33 [label="result.ShouldBeEquivalentTo(expectedTokens)", span="90-90", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", file="TokenizerTests.cs"];
m6_30 [label="var expectedTokens = new[] {\r\n                Token.Name(''x''), Token.Name(''string-seq''), Token.Value(''aaa''), Token.Value(''bb''),\r\n                Token.Name(''unknown''), Token.Name(''switch'') }", span="71-73", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", file="TokenizerTests.cs"];
m6_32 [label="var result =\r\n                Tokenizer.Normalize(\r\n                    //Result.Succeed(\r\n                        Enumerable.Empty<Token>()\r\n                            .Concat(\r\n                                new[] {\r\n                                    Token.Name(''x''), Token.Name(''string-seq''), Token.Value(''aaa''), Token.Value(''bb''),\r\n                                    Token.Name(''unknown''), Token.Value(''value0'', true), Token.Name(''switch'') })\r\n                        //,Enumerable.Empty<Error>()),\r\n                    ,nameLookup)", span="78-87", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", file="TokenizerTests.cs"];
m6_31 [label="Func<string, bool> nameLookup =\r\n                name => name.Equals(''x'') || name.Equals(''string-seq'') || name.Equals(''switch'')", span="74-75", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", file="TokenizerTests.cs"];
m6_34 [label="Exit CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", span="68-68", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", file="TokenizerTests.cs"];
m6_19 [label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="27-27", cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TokenizerTests.cs"];
m6_36 [label="Entry CommandLine.Core.Tokenizer.Normalize(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, bool>)", span="78-78", cluster="CommandLine.Core.Tokenizer.Normalize(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, bool>)", file="TokenizerTests.cs"];
m6_8 [label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", span="16-16", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", file="TokenizerTests.cs"];
m6_0 [label="Entry CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", span="20-20", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="TokenizerTests.cs"];
m6_4 [label="((Ok<IEnumerable<Token>, Error>)result).Value.Success.ShouldBeEquivalentTo(expectedTokens)", span="38-38", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", color=green, community=0, file="TokenizerTests.cs"];
m6_1 [label="var expectedTokens = new[] { Token.Name(''i''), Token.Value(''10''), Token.Name(''string-seq''),\r\n                Token.Value(''aaa''), Token.Value(''bb''),  Token.Value(''cccc''), Token.Name(''switch'') }", span="23-24", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="TokenizerTests.cs"];
m6_3 [label="var result =\r\n                Tokenizer.ExplodeOptionList(\r\n                    Result.Succeed(\r\n                        Enumerable.Empty<Token>().Concat(new[] { Token.Name(''i''), Token.Value(''10''),\r\n                            Token.Name(''string-seq''), Token.Value(''aaa,bb,cccc''), Token.Name(''switch'') }),\r\n                        Enumerable.Empty<Error>()),\r\n                        optionName => NameLookup.HavingSeparator(optionName, specs, StringComparer.InvariantCulture))", span="29-35", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="TokenizerTests.cs"];
m6_2 [label="var specs = new[] { new OptionSpecification(string.Empty, ''string-seq'',\r\n                false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), ',', null, string.Empty, string.Empty, new List<string>(), typeof(IEnumerable<string>), TargetType.Sequence)}", span="25-26", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="TokenizerTests.cs"];
m6_5 [label="Exit CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", span="20-20", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="TokenizerTests.cs"];
m6_37 [label="Entry lambda expression", span="75-75", cluster="lambda expression", file="TokenizerTests.cs"];
m6_16 [label="Entry lambda expression", span="35-35", cluster="lambda expression", file="TokenizerTests.cs"];
m6_26 [label="Entry lambda expression", span="59-59", cluster="lambda expression", file="TokenizerTests.cs"];
m6_17 [label="NameLookup.HavingSeparator(optionName, specs, StringComparer.InvariantCulture)", span="35-35", cluster="lambda expression", file="TokenizerTests.cs"];
m6_18 [label="Exit lambda expression", span="35-35", cluster="lambda expression", file="TokenizerTests.cs"];
m6_27 [label="NameLookup.HavingSeparator(optionName, specs, StringComparer.InvariantCulture)", span="59-59", cluster="lambda expression", file="TokenizerTests.cs"];
m6_28 [label="Exit lambda expression", span="59-59", cluster="lambda expression", file="TokenizerTests.cs"];
m6_38 [label="name.Equals(''x'') || name.Equals(''string-seq'') || name.Equals(''switch'')", span="75-75", cluster="lambda expression", file="TokenizerTests.cs"];
m6_39 [label="Exit lambda expression", span="75-75", cluster="lambda expression", file="TokenizerTests.cs"];
m6_40 [label="Entry string.Equals(string)", span="0-0", cluster="string.Equals(string)", file="TokenizerTests.cs"];
m6_14 [label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", span="57-57", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="TokenizerTests.cs"];
m6_6 [label="Entry CommandLine.Core.Token.Name(string)", span="19-19", cluster="CommandLine.Core.Token.Name(string)", file="TokenizerTests.cs"];
m6_9 [label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116", cluster="CSharpx.Maybe.Nothing<T>()", file="TokenizerTests.cs"];
m6_12 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="TokenizerTests.cs"];
m6_7 [label="Entry CommandLine.Core.Token.Value(string)", span="24-24", cluster="CommandLine.Core.Token.Value(string)", file="TokenizerTests.cs"];
m6_15 [label="Entry Unk.ShouldBeEquivalentTo", span="", cluster="Unk.ShouldBeEquivalentTo", file="TokenizerTests.cs"];
m6_13 [label="Entry RailwaySharp.ErrorHandling.Result.Succeed<TSuccess, TMessage>(TSuccess, System.Collections.Generic.IEnumerable<TMessage>)", span="202-202", cluster="RailwaySharp.ErrorHandling.Result.Succeed<TSuccess, TMessage>(TSuccess, System.Collections.Generic.IEnumerable<TMessage>)", file="TokenizerTests.cs"];
m6_10 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="TokenizerTests.cs"];
m6_41 [label=specs, span="", file="TokenizerTests.cs"];
m6_42 [label=specs, span="", file="TokenizerTests.cs"];
m7_40 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="109-109", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="TypeDescriptor.cs"];
m7_41 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="114-118", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="TypeDescriptor.cs"];
m7_42 [label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="121-121", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="TypeDescriptor.cs"];
m7_43 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="109-109", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="TypeDescriptor.cs"];
m7_125 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", file="TypeDescriptor.cs"];
m7_147 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TypeDescriptor.cs"];
m7_11 [label="Entry T.ToMaybe<T>()", span="249-249", cluster="T.ToMaybe<T>()", file="TypeDescriptor.cs"];
m7_134 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="347-347", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="TypeDescriptor.cs"];
m7_135 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="352-356", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="TypeDescriptor.cs"];
m7_136 [label="expected.ShouldBeEquivalentTo(result.Value.StringSequence)", span="359-359", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="TypeDescriptor.cs"];
m7_137 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="347-347", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="TypeDescriptor.cs"];
m7_208 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="498-498", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs"];
m7_210 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="504-508", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs"];
m7_209 [label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="501-501", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs"];
m7_211 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="511-511", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs"];
m7_212 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="498-498", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs"];
m7_195 [label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283", cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="TypeDescriptor.cs"];
m7_82 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", file="TypeDescriptor.cs"];
m7_126 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="325-325", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="TypeDescriptor.cs"];
m7_127 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="330-334", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="TypeDescriptor.cs"];
m7_128 [label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="337-337", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="TypeDescriptor.cs"];
m7_129 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="325-325", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="TypeDescriptor.cs"];
m7_62 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", file="TypeDescriptor.cs"];
m7_118 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="303-303", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="TypeDescriptor.cs"];
m7_119 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceWithoutRange(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="308-312", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="TypeDescriptor.cs"];
m7_120 [label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="315-315", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="TypeDescriptor.cs"];
m7_121 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="303-303", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="TypeDescriptor.cs"];
m7_216 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="517-517", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="TypeDescriptor.cs"];
m7_218 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="523-527", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="TypeDescriptor.cs"];
m7_217 [label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="520-520", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="TypeDescriptor.cs"];
m7_219 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="530-530", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="TypeDescriptor.cs"];
m7_220 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="517-517", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="TypeDescriptor.cs"];
m7_55 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="154-154", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="TypeDescriptor.cs"];
m7_56 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="159-163", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="TypeDescriptor.cs"];
m7_57 [label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="166-166", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="TypeDescriptor.cs"];
m7_58 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="154-154", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="TypeDescriptor.cs"];
m7_54 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", file="TypeDescriptor.cs"];
m7_241 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="576-576", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="TypeDescriptor.cs"];
m7_242 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="581-585", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="TypeDescriptor.cs"];
m7_243 [label="Assert.True(expected.Equals(result.Value.StringValue))", span="588-588", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="TypeDescriptor.cs"];
m7_244 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="576-576", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="TypeDescriptor.cs"];
m7_182 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="440-440", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="TypeDescriptor.cs"];
m7_184 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="447-451", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="TypeDescriptor.cs"];
m7_183 [label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="442-445", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="TypeDescriptor.cs"];
m7_185 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="454-454", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="TypeDescriptor.cs"];
m7_186 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="440-440", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="TypeDescriptor.cs"];
m7_162 [label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="12-12", cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TypeDescriptor.cs"];
m7_31 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="87-87", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="TypeDescriptor.cs"];
m7_32 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequence(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="92-96", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="TypeDescriptor.cs"];
m7_33 [label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="99-99", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="TypeDescriptor.cs"];
m7_34 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="87-87", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="TypeDescriptor.cs"];
m7_0 [label="Entry CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", span="13-13", cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", file="TypeDescriptor.cs"];
m7_3 [label="this.nextValue = nextValue", span="17-17", cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", file="TypeDescriptor.cs"];
m7_1 [label="this.targetType = targetType", span="15-15", cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", file="TypeDescriptor.cs"];
m7_2 [label="this.maxItems = maxItems", span="16-16", cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", file="TypeDescriptor.cs"];
m7_4 [label="Exit CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", span="13-13", cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", file="TypeDescriptor.cs"];
m7_5 [label="Entry CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CommandLine.Core.TypeDescriptor)", span="35-35", cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CommandLine.Core.TypeDescriptor)", file="TypeDescriptor.cs"];
m7_199 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="479-479", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="TypeDescriptor.cs"];
m7_201 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequired(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="485-489", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="TypeDescriptor.cs"];
m7_200 [label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="482-482", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="TypeDescriptor.cs"];
m7_202 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="492-492", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="TypeDescriptor.cs"];
m7_203 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="479-479", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="TypeDescriptor.cs"];
m7_8 [label="return new TypeDescriptor(tag, maximumItems, next.ToMaybe());", span="39-39", cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CommandLine.Core.TypeDescriptor)", file="TypeDescriptor.cs"];
m7_78 [label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316", cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="TypeDescriptor.cs"];
m7_159 [label="Entry lambda expression", span="385-385", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_16 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="45-49", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="TypeDescriptor.cs", color=green, community=0];
m7_17 [label="Assert.Equal(expected, result.Value.LongValue)", span="52-52", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", color=red, community=0, file="TypeDescriptor.cs"];
m7_18 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="40-40", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="TypeDescriptor.cs"];
m7_20 [label="Entry lambda expression", span="46-46", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_22 [label="Exit lambda expression", span="46-46", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_21 [label="new FakeOptions()", span="46-46", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_27 [label="Entry lambda expression", span="69-69", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_36 [label="Entry lambda expression", span="93-93", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_44 [label="Entry lambda expression", span="115-115", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_51 [label="Entry lambda expression", span="138-138", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_59 [label="Entry lambda expression", span="160-160", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_70 [label="Entry lambda expression", span="179-179", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_79 [label="Entry lambda expression", span="198-198", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_88 [label="Entry lambda expression", span="218-218", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_96 [label="Entry lambda expression", span="237-237", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_105 [label="Entry lambda expression", span="261-261", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_115 [label="Entry lambda expression", span="286-286", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_122 [label="Entry lambda expression", span="309-309", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_130 [label="Entry lambda expression", span="331-331", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_138 [label="Entry lambda expression", span="353-353", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_169 [label="Entry lambda expression", span="408-408", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_179 [label="Entry lambda expression", span="428-428", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_187 [label="Entry lambda expression", span="448-448", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_196 [label="Entry lambda expression", span="468-468", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_204 [label="Entry lambda expression", span="486-486", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_213 [label="Entry lambda expression", span="505-505", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_222 [label="Entry lambda expression", span="524-524", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_230 [label="Entry lambda expression", span="543-543", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_238 [label="Entry lambda expression", span="562-562", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_246 [label="Entry lambda expression", span="582-582", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_13 [label="return TypeDescriptor.Create(descriptor.TargetType, descriptor.MaxItems, nextValue.MapValueOrDefault(n => n, default(TypeDescriptor)));", span="47-47", cluster="CommandLine.Core.TypeDescriptorExtensions.WithNextValue(CommandLine.Core.TypeDescriptor, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", file="TypeDescriptor.cs", color=red, community=0];
m7_29 [label="Exit lambda expression", span="69-69", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_28 [label="new FakeOptionsWithDouble()", span="69-69", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_38 [label="Exit lambda expression", span="93-93", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_37 [label="new FakeOptionsWithSequence()", span="93-93", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_46 [label="Exit lambda expression", span="115-115", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_45 [label="new FakeOptions()", span="115-115", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_53 [label="Exit lambda expression", span="138-138", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_52 [label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="138-138", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_61 [label="Exit lambda expression", span="160-160", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_60 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="160-160", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_72 [label="Exit lambda expression", span="179-179", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_71 [label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="179-179", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_81 [label="Exit lambda expression", span="198-198", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_80 [label="new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="198-198", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_90 [label="Exit lambda expression", span="218-218", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_89 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="218-218", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_98 [label="Exit lambda expression", span="237-237", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_97 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="237-237", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_107 [label="Exit lambda expression", span="261-261", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_106 [label="new FakeOptionsWithEnum()", span="261-261", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_117 [label="Exit lambda expression", span="286-286", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_116 [label="new FakeOptionsWithValues()", span="286-286", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_124 [label="Exit lambda expression", span="309-309", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_123 [label="new FakeOptionsWithSequenceWithoutRange()", span="309-309", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_132 [label="Exit lambda expression", span="331-331", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_131 [label="new FakeOptionsWithSequenceAndSeparator()", span="331-331", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_140 [label="Exit lambda expression", span="353-353", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_139 [label="new FakeOptionsWithSequenceAndSeparator()", span="353-353", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_171 [label="Exit lambda expression", span="408-408", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_170 [label="new FakeOptionsWithSets()", span="408-408", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_181 [label="Exit lambda expression", span="428-428", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_180 [label="new FakeOptionWithRequiredAndSet()", span="428-428", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_189 [label="Exit lambda expression", span="448-448", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_188 [label="new FakeOptionWithRequiredAndSet()", span="448-448", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_198 [label="Exit lambda expression", span="468-468", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_197 [label="new FakeOptionWithRequiredAndSet()", span="468-468", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_206 [label="Exit lambda expression", span="486-486", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_205 [label="new FakeOptionWithRequired()", span="486-486", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_215 [label="Exit lambda expression", span="505-505", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_214 [label="new FakeOptions()", span="505-505", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_224 [label="Exit lambda expression", span="524-524", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_223 [label="new FakeOptions()", span="524-524", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_232 [label="Exit lambda expression", span="543-543", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_231 [label="new FakeOptions()", span="543-543", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_240 [label="Exit lambda expression", span="562-562", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_239 [label="new FakeOptions()", span="562-562", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_248 [label="Exit lambda expression", span="582-582", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_247 [label="new FakeOptions()", span="582-582", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_149 [label="new FakeOptionsWithValues()", span="382-382", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_148 [label="Entry lambda expression", span="382-382", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_150 [label="Exit lambda expression", span="382-382", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_151 [label="Entry lambda expression", span="383-385", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_153 [label="Exit lambda expression", span="383-385", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_152 [label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="384-385", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_156 [label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="385-385", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_160 [label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="385-385", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_155 [label="Entry lambda expression", span="385-385", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_157 [label="Exit lambda expression", span="385-385", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_161 [label="Exit lambda expression", span="385-385", cluster="lambda expression", file="TypeDescriptor.cs"];
m7_190 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="459-459", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="TypeDescriptor.cs"];
m7_192 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="467-471", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="TypeDescriptor.cs"];
m7_191 [label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="461-465", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="TypeDescriptor.cs"];
m7_193 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="474-474", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="TypeDescriptor.cs"];
m7_194 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="459-459", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="TypeDescriptor.cs"];
m7_100 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="255-255", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="TypeDescriptor.cs"];
m7_101 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="260-264", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="TypeDescriptor.cs"];
m7_102 [label="expected.ShouldBeEquivalentTo(result.Value.Colors)", span="267-267", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="TypeDescriptor.cs"];
m7_103 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="255-255", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="TypeDescriptor.cs"];
m7_12 [label="Entry CommandLine.Core.TypeDescriptorExtensions.WithNextValue(CommandLine.Core.TypeDescriptor, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", span="45-45", cluster="CommandLine.Core.TypeDescriptorExtensions.WithNextValue(CommandLine.Core.TypeDescriptor, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", file="TypeDescriptor.cs"];
m7_14 [label="Exit CommandLine.Core.TypeDescriptorExtensions.WithNextValue(CommandLine.Core.TypeDescriptor, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", span="45-45", cluster="CommandLine.Core.TypeDescriptorExtensions.WithNextValue(CommandLine.Core.TypeDescriptor, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", file="TypeDescriptor.cs"];
m7_35 [label="Entry Unk.SequenceEqual", span="", cluster="Unk.SequenceEqual", file="TypeDescriptor.cs"];
m7_141 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="368-368", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="TypeDescriptor.cs"];
m7_145 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="391-391", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="TypeDescriptor.cs"];
m7_142 [label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="371-377", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="TypeDescriptor.cs"];
m7_144 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="381-388", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="TypeDescriptor.cs"];
m7_143 [label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="378-378", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="TypeDescriptor.cs"];
m7_146 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="368-368", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="TypeDescriptor.cs"];
m7_68 [label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="261-261", cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="TypeDescriptor.cs"];
m7_99 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", file="TypeDescriptor.cs"];
m7_83 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="211-211", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs"];
m7_85 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="217-221", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs"];
m7_84 [label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="214-214", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs"];
m7_86 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="224-224", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs"];
m7_87 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="211-211", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs"];
m7_233 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="555-555", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="TypeDescriptor.cs"];
m7_235 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="561-565", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="TypeDescriptor.cs"];
m7_234 [label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="558-558", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="TypeDescriptor.cs"];
m7_236 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="568-568", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="TypeDescriptor.cs"];
m7_237 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="555-555", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="TypeDescriptor.cs"];
m7_10 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="TypeDescriptor.cs"];
m7_63 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="172-172", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="TypeDescriptor.cs"];
m7_65 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                new[] { ''-s'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="178-182", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="TypeDescriptor.cs"];
m7_64 [label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="175-175", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="TypeDescriptor.cs"];
m7_66 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="185-185", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="TypeDescriptor.cs"];
m7_67 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="172-172", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="TypeDescriptor.cs"];
m7_109 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="273-273", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="TypeDescriptor.cs"];
m7_111 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="285-289", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="TypeDescriptor.cs"];
m7_110 [label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="276-282", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="TypeDescriptor.cs"];
m7_112 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="292-292", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="TypeDescriptor.cs"];
m7_113 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="273-273", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="TypeDescriptor.cs"];
m7_30 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", file="TypeDescriptor.cs"];
m7_108 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="16-16", cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", file="TypeDescriptor.cs"];
m7_178 [label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", file="TypeDescriptor.cs"];
m7_73 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="191-191", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs"];
m7_75 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="197-201", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs"];
m7_74 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="194-194", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs"];
m7_76 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="204-204", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs"];
m7_77 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="191-191", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs"];
m7_221 [label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="272-272", cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", file="TypeDescriptor.cs"];
m7_91 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="230-230", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs"];
m7_93 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue(),\r\n                new[] { ''one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="236-240", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs"];
m7_92 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="233-233", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs"];
m7_94 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="243-243", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs"];
m7_95 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="230-230", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs"];
m7_173 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="420-420", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="TypeDescriptor.cs"];
m7_175 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="427-431", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="TypeDescriptor.cs"];
m7_174 [label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = null\r\n            }", span="422-425", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="TypeDescriptor.cs"];
m7_176 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="434-434", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="TypeDescriptor.cs"];
m7_177 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="420-420", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="TypeDescriptor.cs"];
m7_133 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", file="TypeDescriptor.cs"];
m7_154 [label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="37-37", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="TypeDescriptor.cs"];
m7_104 [label="Entry Unk.ShouldBeEquivalentTo", span="", cluster="Unk.ShouldBeEquivalentTo", file="TypeDescriptor.cs"];
m7_158 [label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="TypeDescriptor.cs"];
m7_245 [label="Entry string.Equals(string)", span="0-0", cluster="string.Equals(string)", file="TypeDescriptor.cs"];
m7_172 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", file="TypeDescriptor.cs"];
m7_168 [label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294", cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="TypeDescriptor.cs"];
m7_6 [label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", file="TypeDescriptor.cs"];
m7_7 [label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="338-338", cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="TypeDescriptor.cs"];
m7_9 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TypeDescriptor.cs"];
m7_15 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="40-40", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="TypeDescriptor.cs"];
m7_207 [label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", file="TypeDescriptor.cs"];
m7_69 [label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20", cluster="CommandLine.NameInfo.NameInfo(string, string)", file="TypeDescriptor.cs"];
m7_47 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="132-132", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="TypeDescriptor.cs"];
m7_48 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="137-141", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="TypeDescriptor.cs"];
m7_49 [label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="144-144", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="TypeDescriptor.cs"];
m7_50 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="132-132", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="TypeDescriptor.cs"];
m7_39 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", file="TypeDescriptor.cs"];
m7_225 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="536-536", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="TypeDescriptor.cs"];
m7_227 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="542-546", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="TypeDescriptor.cs"];
m7_226 [label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="539-539", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="TypeDescriptor.cs"];
m7_228 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="549-549", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="TypeDescriptor.cs"];
m7_229 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="536-536", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="TypeDescriptor.cs"];
m7_114 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", file="TypeDescriptor.cs"];
m7_23 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="63-63", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="TypeDescriptor.cs"];
m7_24 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithDouble(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="68-72", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="TypeDescriptor.cs"];
m7_25 [label="Assert.Equal(expected, result.Value.DoubleValue)", span="75-75", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="TypeDescriptor.cs"];
m7_26 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="63-63", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="TypeDescriptor.cs"];
m7_19 [label="out CommandLine.Core.TypeDescriptor", span="", cluster="Unk.Equal", file="TypeDescriptor.cs"];
m7_163 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="397-397", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="TypeDescriptor.cs"];
m7_165 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSets(),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="407-411", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="TypeDescriptor.cs"];
m7_164 [label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl'')),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''))\r\n                }", span="400-404", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="TypeDescriptor.cs"];
m7_166 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="414-414", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="TypeDescriptor.cs"];
m7_167 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="397-397", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="TypeDescriptor.cs"];
m7_249 [label=fakeOptions, span="", file="TypeDescriptor.cs"];
m7_250 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span="", file="TypeDescriptor.cs"];
m8_32 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", span="31-31", cluster="System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", file="ValueMapper.cs"];
m8_0 [label="Entry CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="15-15", cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m8_1 [label="var propAndErrors = MapValuesImpl(specProps, values, converter)", span="20-20", cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m8_2 [label="return Result.Succeed(\r\n                propAndErrors.Select(pe => pe.Item1),\r\n                propAndErrors.Select(pe => pe.Item2)\r\n                    .OfType<Just<Error>>().Select(e => e.Value)\r\n                );", span="22-26", cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m8_3 [label="Exit CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="15-15", cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m8_34 [label="Entry CommandLine.Core.Specification.CountOfMaxNumberOfValues()", span="71-71", cluster="CommandLine.Core.Specification.CountOfMaxNumberOfValues()", file="ValueMapper.cs"];
m8_4 [label="Entry CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="29-29", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m8_20 [label="var taken = values.Take(pt.Specification.CountOfMaxNumberOfValues().MapValueOrDefault(n => n, values.Count()))", span="39-39", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", color=green, community=0, file="ValueMapper.cs"];
m8_19 [label="var pt = specProps.First()", span="38-38", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m8_21 [label="taken.Empty()", span="40-40", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m8_25 [label="pt.Specification.Max.IsJust()\r\n                && next.IsNothing()\r\n                && values.Skip(taken.Count()).Any()", span="48-50", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m8_28 [label="yield return\r\n                converter(taken, pt.Property.PropertyType, pt.Specification.TargetType != TargetType.Sequence)\r\n                    .MapValueOrDefault(\r\n                        converted => Tuple.Create(pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>()),\r\n                        Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                            pt, Maybe.Just<Error>(new BadFormatConversionError(NameInfo.EmptyName))));", span="58-63", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m8_29 [label="MapValuesImpl(specProps.Skip(1), values.Skip(taken.Count()), converter)", span="65-65", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m8_17 [label="specProps.Empty()", span="34-34", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m8_18 [label="yield break;", span="36-36", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m8_22 [label="yield return\r\n                    Tuple.Create(pt, pt.Specification.MakeErrorInCaseOfMinConstraint());", span="42-43", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m8_23 [label="yield break;", span="44-44", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m8_26 [label="yield return\r\n                    Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                        pt, Maybe.Just<Error>(new SequenceOutOfRangeError(NameInfo.EmptyName)));", span="52-54", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m8_27 [label="yield break;", span="55-55", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m8_30 [label="yield return value;", span="67-67", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m8_24 [label="var next = specProps.Skip(1).FirstOrDefault(s => s.Specification.IsValue()).ToMaybe()", span="47-47", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m8_31 [label="Exit CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="29-29", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m8_6 [label="Entry Unk.>", span="", cluster="Unk.>", file="ValueMapper.cs"];
m8_56 [label="Entry CommandLine.Core.Specification.IsValue()", span="15-15", cluster="CommandLine.Core.Specification.IsValue()", file="ValueMapper.cs"];
m8_44 [label="Entry Unk.IsNothing", span="", cluster="Unk.IsNothing", file="ValueMapper.cs"];
m8_42 [label="Entry Unk.ToMaybe", span="", cluster="Unk.ToMaybe", file="ValueMapper.cs"];
m8_46 [label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="360-360", cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="ValueMapper.cs"];
m8_45 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="ValueMapper.cs"];
m8_47 [label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124", cluster="CSharpx.Maybe.Just<T>(T)", file="ValueMapper.cs"];
m8_14 [label="Entry lambda expression", span="25-25", cluster="lambda expression", file="ValueMapper.cs"];
m8_50 [label="Entry lambda expression", span="39-39", cluster="lambda expression", file="ValueMapper.cs"];
m8_51 [label=n, span="39-39", cluster="lambda expression", color=green, community=0, file="ValueMapper.cs"];
m8_52 [label="Exit lambda expression", span="39-39", cluster="lambda expression", file="ValueMapper.cs"];
m8_58 [label="Tuple.Create(pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>())", span="61-61", cluster="lambda expression", file="ValueMapper.cs"];
m8_57 [label="Entry lambda expression", span="61-61", cluster="lambda expression", file="ValueMapper.cs"];
m8_53 [label="Entry lambda expression", span="47-47", cluster="lambda expression", file="ValueMapper.cs"];
m8_59 [label="Exit lambda expression", span="61-61", cluster="lambda expression", file="ValueMapper.cs"];
m8_8 [label="Entry lambda expression", span="23-23", cluster="lambda expression", file="ValueMapper.cs"];
m8_11 [label="Entry lambda expression", span="24-24", cluster="lambda expression", file="ValueMapper.cs"];
m8_55 [label="Exit lambda expression", span="47-47", cluster="lambda expression", file="ValueMapper.cs"];
m8_54 [label="s.Specification.IsValue()", span="47-47", cluster="lambda expression", file="ValueMapper.cs"];
m8_10 [label="Exit lambda expression", span="23-23", cluster="lambda expression", file="ValueMapper.cs"];
m8_9 [label="pe.Item1", span="23-23", cluster="lambda expression", file="ValueMapper.cs"];
m8_13 [label="Exit lambda expression", span="24-24", cluster="lambda expression", file="ValueMapper.cs"];
m8_12 [label="pe.Item2", span="24-24", cluster="lambda expression", file="ValueMapper.cs"];
m8_15 [label="e.Value", span="25-25", cluster="lambda expression", file="ValueMapper.cs"];
m8_16 [label="Exit lambda expression", span="25-25", cluster="lambda expression", file="ValueMapper.cs"];
m8_33 [label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="ValueMapper.cs"];
m8_39 [label="Entry System.Tuple.Create<T1, T2>(T1, T2)", span="0-0", cluster="System.Tuple.Create<T1, T2>(T1, T2)", file="ValueMapper.cs"];
m8_60 [label="Entry CommandLine.Core.SpecificationProperty.WithValue(CSharpx.Maybe<object>)", span="18-18", cluster="CommandLine.Core.SpecificationProperty.WithValue(CSharpx.Maybe<object>)", file="ValueMapper.cs"];
m8_40 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="ValueMapper.cs"];
m8_37 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", file="ValueMapper.cs"];
m8_48 [label="Entry System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", span="0-0", cluster="System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", file="ValueMapper.cs"];
m8_72 [label="Entry CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", span="87-87", cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", file="ValueMapper.cs"];
m8_73 [label="return specification.Min.IsJust()\r\n                ? Maybe.Just<Error>(new SequenceOutOfRangeError(NameInfo.EmptyName))\r\n                : Maybe.Nothing<Error>();", span="89-91", cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", file="ValueMapper.cs"];
m8_74 [label="Exit CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", span="87-87", cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", file="ValueMapper.cs"];
m8_5 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="ValueMapper.cs"];
m8_49 [label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="349-349", cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="ValueMapper.cs"];
m8_38 [label="Entry CommandLine.Core.Specification.MakeErrorInCaseOfMinConstraint()", span="87-87", cluster="CommandLine.Core.Specification.MakeErrorInCaseOfMinConstraint()", file="ValueMapper.cs"];
m8_61 [label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116", cluster="CSharpx.Maybe.Nothing<T>()", file="ValueMapper.cs"];
m8_36 [label="Entry CSharpx.Maybe<T1>.MapValueOrDefault<T1, T2>(System.Func<T1, T2>, T2)", span="377-377", cluster="CSharpx.Maybe<T1>.MapValueOrDefault<T1, T2>(System.Func<T1, T2>, T2)", file="ValueMapper.cs"];
m8_71 [label="Entry CSharpx.Maybe<T>.FromJustOrFail<T>(System.Exception)", span="355-355", cluster="CSharpx.Maybe<T>.FromJustOrFail<T>(System.Exception)", file="ValueMapper.cs"];
m8_35 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="ValueMapper.cs"];
m8_62 [label="Entry CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", span="71-71", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs"];
m8_67 [label="specification.Max.IsJust()", span="78-78", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs"];
m8_68 [label="return Maybe.Just(specification.Max.FromJustOrFail());", span="80-80", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs"];
m8_65 [label="return Maybe.Just(1);", span="76-76", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs"];
m8_69 [label="return Maybe.Nothing<int>();", span="84-84", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs"];
m8_66 [label="TargetType.Sequence", span="77-77", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs"];
m8_64 [label="TargetType.Scalar", span="75-75", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs"];
m8_63 [label="specification.TargetType", span="73-73", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs"];
m8_70 [label="Exit CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", span="71-71", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs"];
m8_41 [label="Entry Unk.FirstOrDefault", span="", cluster="Unk.FirstOrDefault", file="ValueMapper.cs"];
m8_43 [label="Entry CSharpx.Maybe<T>.IsJust<T>()", span="326-326", cluster="CSharpx.Maybe<T>.IsJust<T>()", file="ValueMapper.cs"];
m8_7 [label="Entry Unk.Succeed", span="", cluster="Unk.Succeed", file="ValueMapper.cs"];
m8_75 [label=pt, span="", file="ValueMapper.cs"];
m0_8 -> m0_9  [key=0, style=solid];
m0_8 -> m0_11  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m0_8 -> m0_4  [key=3, color=darkorchid, style=bold, label="method methodReturn CommandLine.NameInfo FromSpecification"];
m0_9 -> m0_10  [key=0, style=solid];
m0_9 -> m0_12  [key=0, style=solid];
m0_11 -> m0_13  [key=0, style=solid];
m0_11 -> m0_4  [key=2, style=dotted];
m0_10 -> m0_11  [key=0, style=solid];
m0_12 -> m0_13  [key=0, style=solid];
m0_13 -> m0_8  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_3  [key=2, style=dotted];
m0_2 -> m0_0  [key=0, style=bold, color=blue];
m0_4 -> m0_5  [key=0, style=solid, color=green];
m0_4 -> m0_8  [key=3, color=darkorchid, style=bold, label="Parameter variable CommandLine.Core.OptionSpecification specification"];
m0_5 -> m0_6  [key=0, style=solid, color=green];
m0_5 -> m0_7  [key=2, style=dotted, color=green];
m0_6 -> m0_4  [key=0, style=bold, color=blue];
m1_0 -> m1_1  [key=0, style=solid];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_6  [key=2, style=dotted];
m1_1 -> m1_4  [key=1, style=dashed, color=darkseagreen4, label=expected];
m1_2 -> m1_3  [key=0, style=solid];
m1_2 -> m1_7  [key=2, style=dotted];
m1_2 -> m1_8  [key=2, style=dotted];
m1_2 -> m1_9  [key=2, style=dotted];
m1_4 -> m1_5  [key=0, style=solid];
m1_4 -> m1_11  [key=2, style=dotted];
m1_3 -> m1_4  [key=0, style=solid];
m1_3 -> m1_10  [key=2, style=dotted];
m1_5 -> m1_0  [key=0, style=bold, color=blue];
m2_0 -> m2_1  [key=0, style=solid];
m2_1 -> m2_2  [key=0, style=solid];
m2_1 -> m2_6  [key=2, style=dotted];
m2_1 -> m2_3  [key=1, style=dashed, color=darkseagreen4, label=tokenPartitions];
m2_2 -> m2_3  [key=0, style=solid];
m2_2 -> m2_7  [key=2, style=dotted];
m2_2 -> m2_8  [key=2, style=dotted];
m2_2 -> m2_9  [key=2, style=dotted];
m2_2 -> m2_10  [key=2, style=dotted];
m2_2 -> m2_11  [key=2, style=dotted];
m2_2 -> m2_12  [key=2, style=dotted];
m2_2 -> m2_16  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_3 -> m2_4  [key=0, style=solid, color=green];
m2_3 -> m2_13  [key=2, style=dotted];
m2_3 -> m2_14  [key=2, style=dotted];
m2_3 -> m2_20  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_3 -> m2_24  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_4 -> m2_5  [key=0, style=solid, color=green];
m2_4 -> m2_11  [key=2, style=dotted, color=green];
m2_4 -> m2_15  [key=2, style=dotted, color=green];
m2_4 -> m2_28  [key=1, style=dashed, color=green, label="lambda expression"];
m2_5 -> m2_0  [key=0, style=bold, color=blue];
m2_28 -> m2_29  [key=0, style=solid];
m2_16 -> m2_17  [key=0, style=solid];
m2_20 -> m2_21  [key=0, style=solid];
m2_24 -> m2_25  [key=0, style=solid];
m2_17 -> m2_18  [key=0, style=solid];
m2_17 -> m2_19  [key=2, style=dotted];
m2_18 -> m2_16  [key=0, style=bold, color=blue];
m2_21 -> m2_22  [key=0, style=solid];
m2_21 -> m2_23  [key=2, style=dotted];
m2_22 -> m2_20  [key=0, style=bold, color=blue];
m2_25 -> m2_26  [key=0, style=solid];
m2_25 -> m2_27  [key=2, style=dotted];
m2_26 -> m2_24  [key=0, style=bold, color=blue];
m2_29 -> m2_30  [key=0, style=solid];
m2_29 -> m2_31  [key=2, style=dotted];
m2_29 -> m2_32  [key=2, style=dotted];
m2_30 -> m2_28  [key=0, style=bold, color=blue];
m3_0 -> m3_1  [key=0, style=solid];
m3_3 -> m3_9  [key=2, style=dotted];
m3_3 -> m3_4  [key=0, style=solid];
m3_2 -> m3_3  [key=0, style=solid];
m3_2 -> m3_8  [key=2, style=dotted];
m3_2 -> m3_13  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m3_4 -> m3_5  [key=0, style=solid];
m3_4 -> m3_10  [key=2, style=dotted];
m3_4 -> m3_0  [key=0, style=bold, color=blue];
m3_1 -> m3_2  [key=0, style=solid];
m3_1 -> m3_4  [key=1, style=dashed, color=darkseagreen4, label=writer];
m3_1 -> m3_7  [key=2, style=dotted];
m3_1 -> m3_13  [key=1, style=dashed, color=darkseagreen4, label=writer];
m3_1 -> m3_5  [key=2, style=dotted];
m3_1 -> m3_6  [key=2, style=dotted];
m3_1 -> m3_10  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_5 -> m3_6  [key=0, style=solid];
m3_5 -> m3_11  [key=2, style=dotted];
m3_6 -> m3_0  [key=0, style=bold, color=blue];
m3_147 -> m3_148  [key=0, style=solid];
m3_150 -> m3_9  [key=2, style=dotted];
m3_150 -> m3_151  [key=0, style=solid];
m3_149 -> m3_150  [key=0, style=solid];
m3_149 -> m3_8  [key=2, style=dotted];
m3_149 -> m3_156  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m3_151 -> m3_152  [key=0, style=solid];
m3_151 -> m3_10  [key=2, style=dotted];
m3_148 -> m3_149  [key=0, style=solid];
m3_148 -> m3_151  [key=1, style=dashed, color=darkseagreen4, label=help];
m3_148 -> m3_7  [key=2, style=dotted];
m3_148 -> m3_156  [key=1, style=dashed, color=darkseagreen4, label=help];
m3_152 -> m3_23  [key=2, style=dotted];
m3_152 -> m3_153  [key=0, style=solid];
m3_152 -> m3_154  [key=2, style=dotted];
m3_153 -> m3_147  [key=0, style=bold, color=blue];
m3_95 -> m3_96  [key=0, style=solid];
m3_95 -> m3_85  [key=2, style=dotted];
m3_60 -> m3_58  [key=0, style=bold, color=blue];
m3_71 -> m3_72  [key=0, style=solid];
m3_108 -> m3_109  [key=0, style=solid];
m3_111 -> m3_60  [key=2, style=dotted];
m3_111 -> m3_112  [key=0, style=solid];
m3_110 -> m3_22  [key=2, style=dotted];
m3_110 -> m3_111  [key=0, style=solid];
m3_109 -> m3_110  [key=0, style=solid];
m3_112 -> m3_108  [key=0, style=bold, color=blue];
m3_319 -> m3_321  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m3_319 -> m3_330  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Simple_Options"];
m3_319 -> m3_320  [key=0, style=solid];
m3_319 -> m3_323  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Simple_Options"];
m3_321 -> m3_9  [key=2, style=dotted];
m3_321 -> m3_322  [key=0, style=solid];
m3_321 -> m3_323  [key=1, style=dashed, color=darkseagreen4, label=result];
m3_322 -> m3_47  [key=2, style=dotted];
m3_322 -> m3_323  [key=0, style=solid];
m3_320 -> m3_321  [key=0, style=solid];
m3_320 -> m3_8  [key=2, style=dotted];
m3_320 -> m3_327  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m3_323 -> m3_324  [key=0, style=solid];
m3_323 -> m3_325  [key=2, style=dotted];
m3_323 -> m3_329  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_324 -> m3_319  [key=0, style=bold, color=blue];
m3_76 -> m3_47  [key=2, style=dotted];
m3_76 -> m3_77  [key=0, style=solid];
m3_76 -> m3_82  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_72 -> m3_76  [key=1, style=dashed, color=darkseagreen4, label=expectedOptions];
m3_72 -> m3_73  [key=0, style=solid];
m3_72 -> m3_78  [key=2, style=dotted];
m3_74 -> m3_76  [key=1, style=dashed, color=darkseagreen4, label=result];
m3_74 -> m3_75  [key=0, style=solid];
m3_74 -> m3_22  [key=2, style=dotted];
m3_74 -> m3_5  [key=2, style=dotted];
m3_74 -> m3_6  [key=2, style=dotted];
m3_75 -> m3_76  [key=0, style=solid];
m3_75 -> m3_60  [key=2, style=dotted];
m3_75 -> m3_72  [key=0, style=bold, color=blue];
m3_73 -> m3_74  [key=0, style=solid];
m3_73 -> m3_8  [key=2, style=dotted];
m3_73 -> m3_80  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m3_73 -> m3_76  [key=2, style=dotted];
m3_77 -> m3_71  [key=0, style=bold, color=blue];
m3_77 -> m3_78  [key=0, style=solid];
m3_10 -> m3_11  [key=0, style=solid];
m3_61 -> m3_62  [key=0, style=solid];
m3_62 -> m3_63  [key=0, style=solid];
m3_62 -> m3_65  [key=1, style=dashed, color=darkseagreen4, label=expectedOptions];
m3_62 -> m3_67  [key=2, style=dotted];
m3_63 -> m3_64  [key=0, style=solid];
m3_63 -> m3_5  [key=2, style=dotted];
m3_63 -> m3_6  [key=2, style=dotted];
m3_63 -> m3_8  [key=2, style=dotted];
m3_63 -> m3_69  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m3_64 -> m3_65  [key=0, style=solid];
m3_64 -> m3_8  [key=2, style=dotted];
m3_64 -> m3_66  [key=1, style=dashed, color=darkseagreen4, label=warrior];
m3_64 -> m3_67  [key=1, style=dashed, color=darkseagreen4, label=warrior];
m3_64 -> m3_9  [key=2, style=dotted];
m3_65 -> m3_66  [key=0, style=solid];
m3_65 -> m3_71  [key=2, style=dotted];
m3_65 -> m3_47  [key=2, style=dotted];
m3_66 -> m3_67  [key=0, style=solid];
m3_66 -> m3_71  [key=2, style=dotted];
m3_66 -> m3_61  [key=0, style=bold, color=blue];
m3_67 -> m3_68  [key=0, style=solid];
m3_67 -> m3_69  [key=1, style=dashed, color=darkseagreen4, label=ninja];
m3_68 -> m3_69  [key=0, style=solid];
m3_68 -> m3_71  [key=2, style=dotted];
m3_69 -> m3_70  [key=0, style=solid];
m3_69 -> m3_71  [key=2, style=dotted];
m3_70 -> m3_61  [key=0, style=bold, color=blue];
m3_70 -> m3_68  [key=0, style=bold, color=blue];
m3_25 -> m3_82  [key=0, style=solid];
m3_25 -> m3_83  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Tests.Fakes.IWarrior"];
m3_25 -> m3_84  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Tests.Fakes.IWarrior"];
m3_25 -> m3_22  [key=3, color=darkorchid, style=bold, label="Parameter variable Ninject.Tests.Fakes.IWarrior warrior"];
m3_25 -> m3_52  [key=3, color=darkorchid, style=bold, label="Parameter variable Ninject.Tests.Fakes.IWarrior warrior"];
m3_25 -> m3_26  [key=0, style=solid];
m3_82 -> m3_83  [key=0, style=solid];
m3_82 -> m3_71  [key=2, style=dotted];
m3_83 -> m3_84  [key=0, style=solid];
m3_83 -> m3_71  [key=2, style=dotted];
m3_83 -> m3_85  [key=2, style=dotted];
m3_84 -> m3_85  [key=0, style=solid];
m3_84 -> m3_86  [key=1, style=dashed, color=darkseagreen4, label=ninja];
m3_84 -> m3_82  [key=0, style=bold, color=blue];
m3_85 -> m3_86  [key=0, style=solid];
m3_85 -> m3_71  [key=2, style=dotted];
m3_86 -> m3_87  [key=0, style=solid];
m3_86 -> m3_71  [key=2, style=dotted];
m3_87 -> m3_25  [key=0, style=bold, color=blue];
m3_87 -> m3_91  [key=1, style=dashed, color=darkseagreen4, label=expectedOptions];
m3_87 -> m3_88  [key=0, style=solid];
m3_87 -> m3_93  [key=2, style=dotted];
m3_228 -> m3_231  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_228 -> m3_229  [key=0, style=solid];
m3_230 -> m3_8  [key=2, style=dotted];
m3_230 -> m3_231  [key=0, style=solid];
m3_230 -> m3_239  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m3_232 -> m3_10  [key=2, style=dotted];
m3_232 -> m3_233  [key=0, style=solid];
m3_232 -> m3_234  [key=1, style=dashed, color=darkseagreen4, label=result];
m3_233 -> m3_23  [key=2, style=dotted];
m3_233 -> m3_234  [key=0, style=solid];
m3_233 -> m3_154  [key=2, style=dotted];
m3_235 -> m3_23  [key=2, style=dotted];
m3_235 -> m3_138  [key=2, style=dotted];
m3_235 -> m3_236  [key=0, style=solid];
m3_235 -> m3_241  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_236 -> m3_23  [key=2, style=dotted];
m3_236 -> m3_184  [key=2, style=dotted];
m3_236 -> m3_237  [key=0, style=solid];
m3_231 -> m3_35  [key=2, style=dotted];
m3_231 -> m3_232  [key=0, style=solid];
m3_234 -> m3_182  [key=2, style=dotted];
m3_234 -> m3_183  [key=2, style=dotted];
m3_234 -> m3_235  [key=0, style=solid];
m3_234 -> m3_236  [key=1, style=dashed, color=darkseagreen4, label=lines];
m3_229 -> m3_7  [key=2, style=dotted];
m3_229 -> m3_230  [key=0, style=solid];
m3_229 -> m3_232  [key=1, style=dashed, color=darkseagreen4, label=help];
m3_229 -> m3_239  [key=1, style=dashed, color=darkseagreen4, label=help];
m3_237 -> m3_228  [key=0, style=bold, color=blue];
m3_94 -> m3_95  [key=0, style=solid];
m3_47 -> m3_43  [key=0, style=bold, color=blue];
m3_97 -> m3_98  [key=0, style=solid];
m3_97 -> m3_100  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m3_97 -> m3_34  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Tests.Integration.WithParameterTests"];
m3_97 -> m3_35  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Tests.Integration.WithParameterTests"];
m3_97 -> m3_36  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Tests.Integration.WithParameterTests"];
m3_97 -> m3_44  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Tests.Integration.WithParameterTests"];
m3_97 -> m3_45  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Tests.Integration.WithParameterTests"];
m3_97 -> m3_46  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Tests.Integration.WithParameterTests"];
m3_97 -> m3_50  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Tests.Integration.WithParameterTests"];
m3_97 -> m3_51  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Tests.Integration.WithParameterTests"];
m3_97 -> m3_52  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Tests.Integration.WithParameterTests"];
m3_97 -> m3_53  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Tests.Integration.WithParameterTests"];
m3_102 -> m3_47  [key=2, style=dotted];
m3_102 -> m3_103  [key=0, style=solid];
m3_102 -> m3_105  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_98 -> m3_102  [key=1, style=dashed, color=darkseagreen4, label=expectedOptions];
m3_98 -> m3_99  [key=0, style=solid];
m3_98 -> m3_104  [key=2, style=dotted];
m3_98 -> m3_62  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Tests.Integration.WhenNoPropertyOverridesAreSupplied"];
m3_98 -> m3_63  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Tests.Integration.WhenNoPropertyOverridesAreSupplied"];
m3_98 -> m3_64  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Tests.Integration.WhenNoPropertyOverridesAreSupplied"];
m3_100 -> m3_102  [key=1, style=dashed, color=darkseagreen4, label=result];
m3_100 -> m3_101  [key=0, style=solid];
m3_100 -> m3_22  [key=2, style=dotted];
m3_101 -> m3_102  [key=0, style=solid];
m3_101 -> m3_60  [key=2, style=dotted];
m3_99 -> m3_100  [key=0, style=solid];
m3_99 -> m3_46  [key=2, style=dotted];
m3_99 -> m3_73  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Tests.Integration.PropertyInjectionTests"];
m3_99 -> m3_74  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Tests.Integration.PropertyInjectionTests"];
m3_99 -> m3_89  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Tests.Integration.PropertyInjectionTests"];
m3_99 -> m3_90  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Tests.Integration.PropertyInjectionTests"];
m3_99 -> m3_91  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Tests.Integration.PropertyInjectionTests"];
m3_99 -> m3_92  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Tests.Integration.PropertyInjectionTests"];
m3_103 -> m3_97  [key=0, style=bold, color=blue];
m3_88 -> m3_89  [key=0, style=solid];
m3_88 -> m3_92  [key=1, style=dashed, color=darkseagreen4, label=bool];
m3_88 -> m3_46  [key=2, style=dotted];
m3_89 -> m3_90  [key=0, style=solid];
m3_89 -> m3_92  [key=0, style=solid];
m3_89 -> m3_91  [key=1, style=dashed, color=darkseagreen4, label=result];
m3_89 -> m3_22  [key=2, style=dotted];
m3_92 -> m3_93  [key=0, style=solid];
m3_92 -> m3_95  [key=2, style=dotted];
m3_92 -> m3_86  [key=0, style=bold, color=blue];
m3_90 -> m3_91  [key=0, style=solid];
m3_90 -> m3_94  [key=2, style=dotted];
m3_90 -> m3_60  [key=2, style=dotted];
m3_91 -> m3_92  [key=0, style=solid];
m3_91 -> m3_47  [key=2, style=dotted];
m3_91 -> m3_94  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_93 -> m3_88  [key=0, style=bold, color=blue];
m3_35 -> m3_36  [key=0, style=solid];
m3_35 -> m3_8  [key=2, style=dotted];
m3_13 -> m3_14  [key=0, style=solid];
m3_14 -> m3_15  [key=0, style=solid];
m3_14 -> m3_5  [key=2, style=dotted];
m3_14 -> m3_6  [key=2, style=dotted];
m3_14 -> m3_8  [key=2, style=dotted];
m3_14 -> m3_18  [key=2, style=dotted];
m3_14 -> m3_12  [key=0, style=bold, color=blue];
m3_15 -> m3_16  [key=0, style=solid];
m3_15 -> m3_8  [key=2, style=dotted];
m3_16 -> m3_17  [key=0, style=solid];
m3_16 -> m3_9  [key=2, style=dotted];
m3_16 -> m3_7  [key=2, style=dotted];
m3_16 -> m3_19  [key=1, style=dashed, color=darkseagreen4, label=writer];
m3_16 -> m3_26  [key=1, style=dashed, color=darkseagreen4, label=writer];
m3_17 -> m3_13  [key=0, style=bold, color=blue];
m3_17 -> m3_8  [key=2, style=dotted];
m3_17 -> m3_18  [key=0, style=solid];
m3_17 -> m3_26  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m3_55 -> m3_56  [key=0, style=solid];
m3_57 -> m3_9  [key=2, style=dotted];
m3_57 -> m3_58  [key=0, style=solid];
m3_57 -> m3_55  [key=0, style=bold, color=blue];
m3_56 -> m3_57  [key=0, style=solid];
m3_56 -> m3_29  [key=2, style=dotted];
m3_58 -> m3_59  [key=0, style=solid];
m3_58 -> m3_60  [key=2, style=dotted];
m3_59 -> m3_55  [key=0, style=bold, color=blue];
m3_59 -> m3_60  [key=0, style=solid];
m3_59 -> m3_29  [key=2, style=dotted];
m3_48 -> m3_51  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m3_48 -> m3_49  [key=0, style=solid];
m3_51 -> m3_9  [key=2, style=dotted];
m3_51 -> m3_52  [key=0, style=solid];
m3_51 -> m3_5  [key=2, style=dotted];
m3_51 -> m3_6  [key=2, style=dotted];
m3_51 -> m3_38  [key=2, style=dotted];
m3_51 -> m3_39  [key=2, style=dotted];
m3_52 -> m3_47  [key=2, style=dotted];
m3_52 -> m3_53  [key=0, style=solid];
m3_52 -> m3_8  [key=2, style=dotted];
m3_50 -> m3_51  [key=0, style=solid];
m3_50 -> m3_46  [key=2, style=dotted];
m3_49 -> m3_52  [key=1, style=dashed, color=darkseagreen4, label=expectedOptions];
m3_49 -> m3_50  [key=0, style=solid];
m3_49 -> m3_54  [key=2, style=dotted];
m3_53 -> m3_48  [key=0, style=bold, color=blue];
m3_53 -> m3_54  [key=0, style=solid];
m3_53 -> m3_25  [key=2, style=dotted];
m3_211 -> m3_212  [key=0, style=solid];
m3_218 -> m3_47  [key=2, style=dotted];
m3_218 -> m3_219  [key=0, style=solid];
m3_219 -> m3_47  [key=2, style=dotted];
m3_219 -> m3_220  [key=0, style=solid];
m3_220 -> m3_47  [key=2, style=dotted];
m3_220 -> m3_221  [key=0, style=solid];
m3_221 -> m3_47  [key=2, style=dotted];
m3_221 -> m3_222  [key=0, style=solid];
m3_222 -> m3_47  [key=2, style=dotted];
m3_222 -> m3_223  [key=0, style=solid];
m3_223 -> m3_47  [key=2, style=dotted];
m3_223 -> m3_224  [key=0, style=solid];
m3_216 -> m3_218  [key=1, style=dashed, color=darkseagreen4, label=lines];
m3_216 -> m3_219  [key=1, style=dashed, color=darkseagreen4, label=lines];
m3_216 -> m3_220  [key=1, style=dashed, color=darkseagreen4, label=lines];
m3_216 -> m3_221  [key=1, style=dashed, color=darkseagreen4, label=lines];
m3_216 -> m3_222  [key=1, style=dashed, color=darkseagreen4, label=lines];
m3_216 -> m3_223  [key=1, style=dashed, color=darkseagreen4, label=lines];
m3_216 -> m3_217  [key=0, style=solid];
m3_216 -> m3_182  [key=2, style=dotted];
m3_216 -> m3_183  [key=2, style=dotted];
m3_217 -> m3_218  [key=0, style=solid];
m3_217 -> m3_23  [key=2, style=dotted];
m3_217 -> m3_184  [key=2, style=dotted];
m3_215 -> m3_216  [key=0, style=solid];
m3_215 -> m3_10  [key=2, style=dotted];
m3_213 -> m3_8  [key=2, style=dotted];
m3_213 -> m3_214  [key=0, style=solid];
m3_213 -> m3_226  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m3_214 -> m3_35  [key=2, style=dotted];
m3_214 -> m3_215  [key=0, style=solid];
m3_212 -> m3_215  [key=1, style=dashed, color=darkseagreen4, label=help];
m3_212 -> m3_7  [key=2, style=dotted];
m3_212 -> m3_213  [key=0, style=solid];
m3_212 -> m3_226  [key=1, style=dashed, color=darkseagreen4, label=help];
m3_224 -> m3_211  [key=0, style=bold, color=blue];
m3_361 -> m3_362  [key=0, style=solid];
m3_11 -> m3_12  [key=0, style=solid];
m3_11 -> m3_8  [key=2, style=dotted];
m3_12 -> m3_10  [key=0, style=bold, color=blue];
m3_12 -> m3_13  [key=0, style=solid];
m3_26 -> m3_27  [key=0, style=solid];
m3_30 -> m3_31  [key=0, style=solid];
m3_30 -> m3_8  [key=2, style=dotted];
m3_30 -> m3_37  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m3_27 -> m3_28  [key=0, style=solid];
m3_27 -> m3_29  [key=2, style=dotted];
m3_27 -> m3_25  [key=0, style=bold, color=blue];
m3_28 -> m3_26  [key=0, style=bold, color=blue];
m3_28 -> m3_29  [key=0, style=solid];
m3_31 -> m3_32  [key=0, style=solid];
m3_31 -> m3_29  [key=2, style=dotted];
m3_31 -> m3_35  [key=2, style=dotted];
m3_32 -> m3_30  [key=0, style=bold, color=blue];
m3_32 -> m3_10  [key=2, style=dotted];
m3_32 -> m3_33  [key=0, style=solid];
m3_41 -> m3_42  [key=0, style=solid];
m3_41 -> m3_8  [key=2, style=dotted];
m3_41 -> m3_46  [key=2, style=dotted];
m3_40 -> m3_41  [key=0, style=solid];
m3_40 -> m3_43  [key=1, style=dashed, color=darkseagreen4, label=expectedOptions];
m3_40 -> m3_45  [key=2, style=dotted];
m3_42 -> m3_40  [key=0, style=bold, color=blue];
m3_42 -> m3_9  [key=2, style=dotted];
m3_42 -> m3_43  [key=0, style=solid];
m3_371 -> m3_372  [key=0, style=solid, color=green];
m3_374 -> m3_375  [key=0, style=solid, color=green];
m3_372 -> m3_373  [key=0, style=solid, color=green];
m3_373 -> m3_371  [key=0, style=bold, color=blue];
m3_375 -> m3_376  [key=0, style=solid, color=green];
m3_376 -> m3_374  [key=0, style=bold, color=blue];
m3_330 -> m3_47  [key=2, style=dotted];
m3_330 -> m3_331  [key=0, style=solid];
m3_342 -> m3_47  [key=2, style=dotted];
m3_342 -> m3_343  [key=0, style=solid];
m3_105 -> m3_106  [key=0, style=solid];
m3_120 -> m3_121  [key=0, style=solid];
m3_329 -> m3_330  [key=0, style=solid];
m3_331 -> m3_329  [key=0, style=bold, color=blue];
m3_341 -> m3_342  [key=0, style=solid];
m3_343 -> m3_341  [key=0, style=bold, color=blue];
m3_140 -> m3_141  [key=0, style=solid];
m3_143 -> m3_144  [key=0, style=solid];
m3_156 -> m3_157  [key=0, style=solid];
m3_166 -> m3_167  [key=0, style=solid];
m3_169 -> m3_170  [key=0, style=solid];
m3_186 -> m3_187  [key=0, style=solid];
m3_262 -> m3_263  [key=0, style=solid];
m3_327 -> m3_328  [key=0, style=solid];
m3_96 -> m3_94  [key=0, style=bold, color=blue];
m3_96 -> m3_1  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Tests.Integration.WithPropertyValueTests"];
m3_96 -> m3_2  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Tests.Integration.WithPropertyValueTests"];
m3_96 -> m3_3  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Tests.Integration.WithPropertyValueTests"];
m3_96 -> m3_14  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Tests.Integration.WithPropertyValueTests"];
m3_96 -> m3_15  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Tests.Integration.WithPropertyValueTests"];
m3_96 -> m3_16  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Tests.Integration.WithPropertyValueTests"];
m3_96 -> m3_20  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Tests.Integration.WithPropertyValueTests"];
m3_96 -> m3_21  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Tests.Integration.WithPropertyValueTests"];
m3_96 -> m3_22  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Tests.Integration.WithPropertyValueTests"];
m3_96 -> m3_23  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Tests.Integration.WithPropertyValueTests"];
m3_107 -> m3_105  [key=0, style=bold, color=blue];
m3_106 -> m3_107  [key=0, style=solid];
m3_106 -> m3_85  [key=2, style=dotted];
m3_122 -> m3_120  [key=0, style=bold, color=blue];
m3_121 -> m3_122  [key=0, style=solid];
m3_121 -> m3_85  [key=2, style=dotted];
m3_144 -> m3_145  [key=0, style=solid];
m3_144 -> m3_146  [key=2, style=dotted];
m3_142 -> m3_140  [key=0, style=bold, color=blue];
m3_141 -> m3_142  [key=0, style=solid];
m3_145 -> m3_143  [key=0, style=bold, color=blue];
m3_155 -> m3_156  [key=0, style=solid];
m3_157 -> m3_155  [key=0, style=bold, color=blue];
m3_170 -> m3_171  [key=0, style=solid];
m3_170 -> m3_146  [key=2, style=dotted];
m3_168 -> m3_166  [key=0, style=bold, color=blue];
m3_167 -> m3_168  [key=0, style=solid];
m3_171 -> m3_169  [key=0, style=bold, color=blue];
m3_185 -> m3_186  [key=0, style=solid];
m3_187 -> m3_185  [key=0, style=bold, color=blue];
m3_261 -> m3_262  [key=0, style=solid];
m3_263 -> m3_261  [key=0, style=bold, color=blue];
m3_326 -> m3_327  [key=0, style=solid];
m3_328 -> m3_326  [key=0, style=bold, color=blue];
m3_80 -> m3_81  [key=0, style=solid];
m3_80 -> m3_9  [key=0, style=bold, color=blue];
m3_339 -> m3_340  [key=0, style=solid];
m3_37 -> m3_38  [key=0, style=solid];
m3_37 -> m3_33  [key=0, style=bold, color=blue];
m3_209 -> m3_210  [key=0, style=solid];
m3_226 -> m3_227  [key=0, style=solid];
m3_239 -> m3_240  [key=0, style=solid];
m3_272 -> m3_273  [key=0, style=solid];
m3_299 -> m3_300  [key=0, style=solid];
m3_317 -> m3_318  [key=0, style=solid];
m3_362 -> m3_363  [key=0, style=solid];
m3_188 -> m3_189  [key=0, style=solid];
m3_241 -> m3_242  [key=0, style=solid];
m3_79 -> m3_80  [key=0, style=solid];
m3_79 -> m3_71  [key=2, style=dotted];
m3_81 -> m3_79  [key=0, style=bold, color=blue];
m3_338 -> m3_339  [key=0, style=solid];
m3_340 -> m3_338  [key=0, style=bold, color=blue];
m3_36 -> m3_37  [key=0, style=solid];
m3_36 -> m3_9  [key=2, style=dotted];
m3_38 -> m3_36  [key=0, style=bold, color=blue];
m3_208 -> m3_209  [key=0, style=solid];
m3_210 -> m3_208  [key=0, style=bold, color=blue];
m3_225 -> m3_226  [key=0, style=solid];
m3_227 -> m3_225  [key=0, style=bold, color=blue];
m3_238 -> m3_239  [key=0, style=solid];
m3_240 -> m3_238  [key=0, style=bold, color=blue];
m3_271 -> m3_272  [key=0, style=solid];
m3_273 -> m3_271  [key=0, style=bold, color=blue];
m3_298 -> m3_299  [key=0, style=solid];
m3_300 -> m3_298  [key=0, style=bold, color=blue];
m3_316 -> m3_317  [key=0, style=solid];
m3_318 -> m3_316  [key=0, style=bold, color=blue];
m3_363 -> m3_361  [key=0, style=bold, color=blue];
m3_190 -> m3_188  [key=0, style=bold, color=blue];
m3_189 -> m3_190  [key=0, style=solid];
m3_242 -> m3_243  [key=0, style=solid];
m3_243 -> m3_241  [key=0, style=bold, color=blue];
m3_54 -> m3_49  [key=0, style=bold, color=blue];
m3_33 -> m3_23  [key=2, style=dotted];
m3_33 -> m3_34  [key=0, style=solid];
m3_33 -> m3_24  [key=2, style=dotted];
m3_29 -> m3_7  [key=2, style=dotted];
m3_29 -> m3_30  [key=0, style=solid];
m3_29 -> m3_32  [key=1, style=dashed, color=darkseagreen4, label=writer];
m3_29 -> m3_37  [key=1, style=dashed, color=darkseagreen4, label=writer];
m3_34 -> m3_28  [key=0, style=bold, color=blue];
m3_34 -> m3_35  [key=0, style=solid];
m3_34 -> m3_5  [key=2, style=dotted];
m3_34 -> m3_6  [key=2, style=dotted];
m3_34 -> m3_38  [key=2, style=dotted];
m3_34 -> m3_39  [key=2, style=dotted];
m3_34 -> m3_41  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Activation.IContext"];
m3_39 -> m3_40  [key=0, style=solid];
m3_43 -> m3_47  [key=2, style=dotted];
m3_43 -> m3_44  [key=0, style=solid];
m3_44 -> m3_39  [key=0, style=bold, color=blue];
m3_44 -> m3_45  [key=0, style=solid];
m3_44 -> m3_5  [key=2, style=dotted];
m3_44 -> m3_6  [key=2, style=dotted];
m3_44 -> m3_48  [key=2, style=dotted];
m3_44 -> m3_8  [key=2, style=dotted];
m3_172 -> m3_173  [key=0, style=solid];
m3_175 -> m3_9  [key=2, style=dotted];
m3_175 -> m3_176  [key=0, style=solid];
m3_174 -> m3_175  [key=0, style=solid];
m3_174 -> m3_8  [key=2, style=dotted];
m3_174 -> m3_186  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m3_176 -> m3_177  [key=0, style=solid];
m3_176 -> m3_10  [key=2, style=dotted];
m3_176 -> m3_178  [key=1, style=dashed, color=darkseagreen4, label=result];
m3_173 -> m3_174  [key=0, style=solid];
m3_173 -> m3_176  [key=1, style=dashed, color=darkseagreen4, label=help];
m3_173 -> m3_7  [key=2, style=dotted];
m3_173 -> m3_186  [key=1, style=dashed, color=darkseagreen4, label=help];
m3_177 -> m3_23  [key=2, style=dotted];
m3_177 -> m3_178  [key=0, style=solid];
m3_177 -> m3_154  [key=2, style=dotted];
m3_178 -> m3_179  [key=0, style=solid];
m3_178 -> m3_182  [key=2, style=dotted];
m3_178 -> m3_183  [key=2, style=dotted];
m3_178 -> m3_180  [key=1, style=dashed, color=darkseagreen4, label=lines];
m3_179 -> m3_23  [key=2, style=dotted];
m3_179 -> m3_138  [key=2, style=dotted];
m3_179 -> m3_180  [key=0, style=solid];
m3_179 -> m3_188  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_180 -> m3_23  [key=2, style=dotted];
m3_180 -> m3_184  [key=2, style=dotted];
m3_180 -> m3_181  [key=0, style=solid];
m3_181 -> m3_172  [key=0, style=bold, color=blue];
m3_19 -> m3_10  [key=2, style=dotted];
m3_19 -> m3_20  [key=0, style=solid];
m3_20 -> m3_23  [key=2, style=dotted];
m3_20 -> m3_21  [key=0, style=solid];
m3_20 -> m3_24  [key=2, style=dotted];
m3_18 -> m3_22  [key=2, style=dotted];
m3_18 -> m3_19  [key=0, style=solid];
m3_21 -> m3_15  [key=0, style=bold, color=blue];
m3_21 -> m3_22  [key=0, style=solid];
m3_21 -> m3_5  [key=2, style=dotted];
m3_21 -> m3_6  [key=2, style=dotted];
m3_21 -> m3_7  [key=2, style=dotted];
m3_21 -> m3_26  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_21 -> m3_30  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_45 -> m3_46  [key=0, style=solid];
m3_45 -> m3_8  [key=2, style=dotted];
m3_46 -> m3_47  [key=0, style=solid];
m3_46 -> m3_9  [key=2, style=dotted];
m3_130 -> m3_131  [key=0, style=solid];
m3_133 -> m3_9  [key=2, style=dotted];
m3_133 -> m3_134  [key=0, style=solid];
m3_133 -> m3_135  [key=1, style=dashed, color=darkseagreen4, label=result];
m3_132 -> m3_133  [key=0, style=solid];
m3_132 -> m3_46  [key=2, style=dotted];
m3_134 -> m3_135  [key=0, style=solid];
m3_134 -> m3_23  [key=2, style=dotted];
m3_134 -> m3_138  [key=2, style=dotted];
m3_134 -> m3_140  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_135 -> m3_136  [key=0, style=solid];
m3_135 -> m3_23  [key=2, style=dotted];
m3_135 -> m3_139  [key=2, style=dotted];
m3_135 -> m3_143  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_131 -> m3_132  [key=0, style=solid];
m3_131 -> m3_135  [key=1, style=dashed, color=darkseagreen4, label=expectedError];
m3_131 -> m3_137  [key=2, style=dotted];
m3_131 -> m3_144  [key=1, style=dashed, color=darkseagreen4, label=expectedError];
m3_136 -> m3_130  [key=0, style=bold, color=blue];
m3_22 -> m3_23  [key=0, style=solid];
m3_22 -> m3_8  [key=2, style=dotted];
m3_23 -> m3_24  [key=0, style=solid];
m3_23 -> m3_25  [key=2, style=dotted];
m3_24 -> m3_19  [key=0, style=bold, color=blue];
m3_78 -> m3_79  [key=0, style=solid];
m3_78 -> m3_81  [key=2, style=dotted];
m3_113 -> m3_114  [key=0, style=solid];
m3_118 -> m3_47  [key=2, style=dotted];
m3_118 -> m3_119  [key=0, style=solid];
m3_118 -> m3_120  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_114 -> m3_118  [key=1, style=dashed, color=darkseagreen4, label=expectedOptions];
m3_114 -> m3_115  [key=0, style=solid];
m3_114 -> m3_93  [key=2, style=dotted];
m3_116 -> m3_118  [key=1, style=dashed, color=darkseagreen4, label=result];
m3_116 -> m3_117  [key=0, style=solid];
m3_116 -> m3_35  [key=2, style=dotted];
m3_117 -> m3_118  [key=0, style=solid];
m3_117 -> m3_60  [key=2, style=dotted];
m3_115 -> m3_116  [key=0, style=solid];
m3_115 -> m3_46  [key=2, style=dotted];
m3_119 -> m3_113  [key=0, style=bold, color=blue];
m3_158 -> m3_159  [key=0, style=solid];
m3_161 -> m3_9  [key=2, style=dotted];
m3_161 -> m3_162  [key=0, style=solid];
m3_161 -> m3_163  [key=1, style=dashed, color=darkseagreen4, label=result];
m3_160 -> m3_161  [key=0, style=solid];
m3_160 -> m3_46  [key=2, style=dotted];
m3_162 -> m3_163  [key=0, style=solid];
m3_162 -> m3_23  [key=2, style=dotted];
m3_162 -> m3_138  [key=2, style=dotted];
m3_162 -> m3_166  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_163 -> m3_164  [key=0, style=solid];
m3_163 -> m3_23  [key=2, style=dotted];
m3_163 -> m3_139  [key=2, style=dotted];
m3_163 -> m3_169  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_159 -> m3_160  [key=0, style=solid];
m3_159 -> m3_163  [key=1, style=dashed, color=darkseagreen4, label=expectedError];
m3_159 -> m3_165  [key=2, style=dotted];
m3_159 -> m3_170  [key=1, style=dashed, color=darkseagreen4, label=expectedError];
m3_164 -> m3_158  [key=0, style=bold, color=blue];
m3_244 -> m3_245  [key=0, style=solid];
m3_247 -> m3_9  [key=2, style=dotted];
m3_247 -> m3_248  [key=0, style=solid];
m3_251 -> m3_47  [key=2, style=dotted];
m3_251 -> m3_252  [key=0, style=solid];
m3_252 -> m3_47  [key=2, style=dotted];
m3_252 -> m3_253  [key=0, style=solid];
m3_253 -> m3_47  [key=2, style=dotted];
m3_253 -> m3_254  [key=0, style=solid];
m3_254 -> m3_47  [key=2, style=dotted];
m3_254 -> m3_255  [key=0, style=solid];
m3_255 -> m3_47  [key=2, style=dotted];
m3_255 -> m3_256  [key=0, style=solid];
m3_256 -> m3_47  [key=2, style=dotted];
m3_256 -> m3_257  [key=0, style=solid];
m3_257 -> m3_47  [key=2, style=dotted];
m3_257 -> m3_258  [key=0, style=solid];
m3_258 -> m3_47  [key=2, style=dotted];
m3_258 -> m3_259  [key=0, style=solid];
m3_259 -> m3_47  [key=2, style=dotted];
m3_259 -> m3_260  [key=0, style=solid];
m3_246 -> m3_247  [key=0, style=solid];
m3_246 -> m3_8  [key=2, style=dotted];
m3_246 -> m3_262  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m3_248 -> m3_249  [key=0, style=solid];
m3_248 -> m3_10  [key=2, style=dotted];
m3_249 -> m3_251  [key=1, style=dashed, color=darkseagreen4, label=lines];
m3_249 -> m3_252  [key=1, style=dashed, color=darkseagreen4, label=lines];
m3_249 -> m3_253  [key=1, style=dashed, color=darkseagreen4, label=lines];
m3_249 -> m3_254  [key=1, style=dashed, color=darkseagreen4, label=lines];
m3_249 -> m3_255  [key=1, style=dashed, color=darkseagreen4, label=lines];
m3_249 -> m3_256  [key=1, style=dashed, color=darkseagreen4, label=lines];
m3_249 -> m3_257  [key=1, style=dashed, color=darkseagreen4, label=lines];
m3_249 -> m3_258  [key=1, style=dashed, color=darkseagreen4, label=lines];
m3_249 -> m3_259  [key=1, style=dashed, color=darkseagreen4, label=lines];
m3_249 -> m3_250  [key=0, style=solid];
m3_249 -> m3_182  [key=2, style=dotted];
m3_249 -> m3_183  [key=2, style=dotted];
m3_250 -> m3_251  [key=0, style=solid];
m3_250 -> m3_23  [key=2, style=dotted];
m3_250 -> m3_184  [key=2, style=dotted];
m3_245 -> m3_246  [key=0, style=solid];
m3_245 -> m3_248  [key=1, style=dashed, color=darkseagreen4, label=help];
m3_245 -> m3_7  [key=2, style=dotted];
m3_245 -> m3_262  [key=1, style=dashed, color=darkseagreen4, label=help];
m3_260 -> m3_244  [key=0, style=bold, color=blue];
m3_9 -> m3_77  [key=0, style=solid];
m3_9 -> m3_78  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Tests.Fakes.IWarrior"];
m3_9 -> m3_79  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Tests.Fakes.IWarrior"];
m3_9 -> m3_2  [key=3, color=darkorchid, style=bold, label="Parameter variable Ninject.Tests.Fakes.IWarrior warrior"];
m3_9 -> m3_15  [key=3, color=darkorchid, style=bold, label="Parameter variable Ninject.Tests.Fakes.IWarrior warrior"];
m3_9 -> m3_35  [key=3, color=darkorchid, style=bold, label="Parameter variable Ninject.Tests.Fakes.IWarrior warrior"];
m3_9 -> m3_45  [key=3, color=darkorchid, style=bold, label="Parameter variable Ninject.Tests.Fakes.IWarrior warrior"];
m3_344 -> m3_345  [key=0, style=solid];
m3_351 -> m3_47  [key=2, style=dotted];
m3_351 -> m3_352  [key=0, style=solid];
m3_352 -> m3_47  [key=2, style=dotted];
m3_352 -> m3_353  [key=0, style=solid];
m3_353 -> m3_47  [key=2, style=dotted];
m3_353 -> m3_354  [key=0, style=solid];
m3_354 -> m3_47  [key=2, style=dotted];
m3_354 -> m3_355  [key=0, style=solid];
m3_355 -> m3_47  [key=2, style=dotted];
m3_355 -> m3_356  [key=0, style=solid];
m3_356 -> m3_47  [key=2, style=dotted];
m3_356 -> m3_357  [key=0, style=solid];
m3_357 -> m3_47  [key=2, style=dotted];
m3_357 -> m3_358  [key=0, style=solid];
m3_358 -> m3_47  [key=2, style=dotted];
m3_358 -> m3_359  [key=0, style=solid];
m3_359 -> m3_47  [key=2, style=dotted];
m3_359 -> m3_360  [key=0, style=solid];
m3_349 -> m3_351  [key=1, style=dashed, color=darkseagreen4, label=lines];
m3_349 -> m3_352  [key=1, style=dashed, color=darkseagreen4, label=lines];
m3_349 -> m3_353  [key=1, style=dashed, color=darkseagreen4, label=lines];
m3_349 -> m3_354  [key=1, style=dashed, color=darkseagreen4, label=lines];
m3_349 -> m3_355  [key=1, style=dashed, color=darkseagreen4, label=lines];
m3_349 -> m3_356  [key=1, style=dashed, color=darkseagreen4, label=lines];
m3_349 -> m3_357  [key=1, style=dashed, color=darkseagreen4, label=lines];
m3_349 -> m3_358  [key=1, style=dashed, color=darkseagreen4, label=lines];
m3_349 -> m3_359  [key=1, style=dashed, color=darkseagreen4, label=lines];
m3_349 -> m3_350  [key=0, style=solid];
m3_349 -> m3_182  [key=2, style=dotted];
m3_349 -> m3_183  [key=2, style=dotted];
m3_350 -> m3_351  [key=0, style=solid];
m3_350 -> m3_23  [key=2, style=dotted];
m3_350 -> m3_184  [key=2, style=dotted];
m3_348 -> m3_349  [key=0, style=solid];
m3_348 -> m3_10  [key=2, style=dotted];
m3_346 -> m3_8  [key=2, style=dotted];
m3_346 -> m3_347  [key=0, style=solid];
m3_346 -> m3_362  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m3_347 -> m3_35  [key=2, style=dotted];
m3_347 -> m3_348  [key=0, style=solid];
m3_345 -> m3_348  [key=1, style=dashed, color=darkseagreen4, label=help];
m3_345 -> m3_7  [key=2, style=dotted];
m3_345 -> m3_346  [key=0, style=solid];
m3_345 -> m3_362  [key=1, style=dashed, color=darkseagreen4, label=help];
m3_360 -> m3_344  [key=0, style=bold, color=blue];
m3_301 -> m3_302  [key=0, style=solid];
m3_308 -> m3_47  [key=2, style=dotted];
m3_308 -> m3_309  [key=0, style=solid];
m3_309 -> m3_47  [key=2, style=dotted];
m3_309 -> m3_310  [key=0, style=solid];
m3_310 -> m3_47  [key=2, style=dotted];
m3_310 -> m3_311  [key=0, style=solid];
m3_311 -> m3_47  [key=2, style=dotted];
m3_311 -> m3_312  [key=0, style=solid];
m3_312 -> m3_47  [key=2, style=dotted];
m3_312 -> m3_313  [key=0, style=solid];
m3_313 -> m3_47  [key=2, style=dotted];
m3_313 -> m3_314  [key=0, style=solid];
m3_314 -> m3_47  [key=2, style=dotted];
m3_314 -> m3_315  [key=0, style=solid];
m3_306 -> m3_308  [key=1, style=dashed, color=darkseagreen4, label=lines];
m3_306 -> m3_309  [key=1, style=dashed, color=darkseagreen4, label=lines];
m3_306 -> m3_310  [key=1, style=dashed, color=darkseagreen4, label=lines];
m3_306 -> m3_311  [key=1, style=dashed, color=darkseagreen4, label=lines];
m3_306 -> m3_312  [key=1, style=dashed, color=darkseagreen4, label=lines];
m3_306 -> m3_313  [key=1, style=dashed, color=darkseagreen4, label=lines];
m3_306 -> m3_314  [key=1, style=dashed, color=darkseagreen4, label=lines];
m3_306 -> m3_307  [key=0, style=solid];
m3_306 -> m3_182  [key=2, style=dotted];
m3_306 -> m3_183  [key=2, style=dotted];
m3_307 -> m3_308  [key=0, style=solid];
m3_307 -> m3_23  [key=2, style=dotted];
m3_307 -> m3_184  [key=2, style=dotted];
m3_305 -> m3_306  [key=0, style=solid];
m3_305 -> m3_10  [key=2, style=dotted];
m3_303 -> m3_8  [key=2, style=dotted];
m3_303 -> m3_304  [key=0, style=solid];
m3_303 -> m3_317  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m3_304 -> m3_35  [key=2, style=dotted];
m3_304 -> m3_305  [key=0, style=solid];
m3_302 -> m3_305  [key=1, style=dashed, color=darkseagreen4, label=help];
m3_302 -> m3_7  [key=2, style=dotted];
m3_302 -> m3_303  [key=0, style=solid];
m3_302 -> m3_317  [key=1, style=dashed, color=darkseagreen4, label=help];
m3_315 -> m3_301  [key=0, style=bold, color=blue];
m3_191 -> m3_192  [key=0, style=solid];
m3_199 -> m3_47  [key=2, style=dotted];
m3_199 -> m3_200  [key=0, style=solid];
m3_200 -> m3_47  [key=2, style=dotted];
m3_200 -> m3_201  [key=0, style=solid];
m3_201 -> m3_47  [key=2, style=dotted];
m3_201 -> m3_202  [key=0, style=solid];
m3_202 -> m3_47  [key=2, style=dotted];
m3_202 -> m3_203  [key=0, style=solid];
m3_203 -> m3_47  [key=2, style=dotted];
m3_203 -> m3_204  [key=0, style=solid];
m3_204 -> m3_47  [key=2, style=dotted];
m3_204 -> m3_205  [key=0, style=solid];
m3_205 -> m3_47  [key=2, style=dotted];
m3_205 -> m3_206  [key=0, style=solid];
m3_206 -> m3_47  [key=2, style=dotted];
m3_206 -> m3_207  [key=0, style=solid];
m3_197 -> m3_199  [key=1, style=dashed, color=darkseagreen4, label=lines];
m3_197 -> m3_200  [key=1, style=dashed, color=darkseagreen4, label=lines];
m3_197 -> m3_201  [key=1, style=dashed, color=darkseagreen4, label=lines];
m3_197 -> m3_202  [key=1, style=dashed, color=darkseagreen4, label=lines];
m3_197 -> m3_203  [key=1, style=dashed, color=darkseagreen4, label=lines];
m3_197 -> m3_204  [key=1, style=dashed, color=darkseagreen4, label=lines];
m3_197 -> m3_205  [key=1, style=dashed, color=darkseagreen4, label=lines];
m3_197 -> m3_206  [key=1, style=dashed, color=darkseagreen4, label=lines];
m3_197 -> m3_198  [key=0, style=solid];
m3_197 -> m3_182  [key=2, style=dotted];
m3_197 -> m3_183  [key=2, style=dotted];
m3_198 -> m3_199  [key=0, style=solid];
m3_198 -> m3_23  [key=2, style=dotted];
m3_198 -> m3_184  [key=2, style=dotted];
m3_195 -> m3_197  [key=1, style=dashed, color=darkseagreen4, label=result];
m3_195 -> m3_10  [key=2, style=dotted];
m3_195 -> m3_196  [key=0, style=solid];
m3_196 -> m3_197  [key=0, style=solid];
m3_196 -> m3_23  [key=2, style=dotted];
m3_196 -> m3_154  [key=2, style=dotted];
m3_193 -> m3_8  [key=2, style=dotted];
m3_193 -> m3_194  [key=0, style=solid];
m3_193 -> m3_209  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m3_194 -> m3_35  [key=2, style=dotted];
m3_194 -> m3_195  [key=0, style=solid];
m3_192 -> m3_195  [key=1, style=dashed, color=darkseagreen4, label=help];
m3_192 -> m3_7  [key=2, style=dotted];
m3_192 -> m3_193  [key=0, style=solid];
m3_192 -> m3_209  [key=1, style=dashed, color=darkseagreen4, label=help];
m3_207 -> m3_191  [key=0, style=bold, color=blue];
m3_274 -> m3_275  [key=0, style=solid];
m3_281 -> m3_47  [key=2, style=dotted];
m3_281 -> m3_282  [key=0, style=solid];
m3_282 -> m3_47  [key=2, style=dotted];
m3_282 -> m3_283  [key=0, style=solid];
m3_283 -> m3_47  [key=2, style=dotted];
m3_283 -> m3_284  [key=0, style=solid];
m3_284 -> m3_47  [key=2, style=dotted];
m3_284 -> m3_285  [key=0, style=solid];
m3_285 -> m3_47  [key=2, style=dotted];
m3_285 -> m3_286  [key=0, style=solid];
m3_286 -> m3_47  [key=2, style=dotted];
m3_286 -> m3_287  [key=0, style=solid];
m3_287 -> m3_47  [key=2, style=dotted];
m3_287 -> m3_288  [key=0, style=solid];
m3_288 -> m3_47  [key=2, style=dotted];
m3_288 -> m3_289  [key=0, style=solid];
m3_289 -> m3_47  [key=2, style=dotted];
m3_289 -> m3_290  [key=0, style=solid];
m3_290 -> m3_47  [key=2, style=dotted];
m3_290 -> m3_291  [key=0, style=solid];
m3_291 -> m3_47  [key=2, style=dotted];
m3_291 -> m3_292  [key=0, style=solid];
m3_292 -> m3_47  [key=2, style=dotted];
m3_292 -> m3_293  [key=0, style=solid];
m3_293 -> m3_47  [key=2, style=dotted];
m3_293 -> m3_294  [key=0, style=solid];
m3_294 -> m3_47  [key=2, style=dotted];
m3_294 -> m3_295  [key=0, style=solid];
m3_295 -> m3_47  [key=2, style=dotted];
m3_295 -> m3_296  [key=0, style=solid];
m3_296 -> m3_47  [key=2, style=dotted];
m3_296 -> m3_297  [key=0, style=solid];
m3_279 -> m3_281  [key=1, style=dashed, color=darkseagreen4, label=lines];
m3_279 -> m3_282  [key=1, style=dashed, color=darkseagreen4, label=lines];
m3_279 -> m3_283  [key=1, style=dashed, color=darkseagreen4, label=lines];
m3_279 -> m3_284  [key=1, style=dashed, color=darkseagreen4, label=lines];
m3_279 -> m3_285  [key=1, style=dashed, color=darkseagreen4, label=lines];
m3_279 -> m3_286  [key=1, style=dashed, color=darkseagreen4, label=lines];
m3_279 -> m3_287  [key=1, style=dashed, color=darkseagreen4, label=lines];
m3_279 -> m3_288  [key=1, style=dashed, color=darkseagreen4, label=lines];
m3_279 -> m3_289  [key=1, style=dashed, color=darkseagreen4, label=lines];
m3_279 -> m3_290  [key=1, style=dashed, color=darkseagreen4, label=lines];
m3_279 -> m3_291  [key=1, style=dashed, color=darkseagreen4, label=lines];
m3_279 -> m3_292  [key=1, style=dashed, color=darkseagreen4, label=lines];
m3_279 -> m3_293  [key=1, style=dashed, color=darkseagreen4, label=lines];
m3_279 -> m3_294  [key=1, style=dashed, color=darkseagreen4, label=lines];
m3_279 -> m3_295  [key=1, style=dashed, color=darkseagreen4, label=lines];
m3_279 -> m3_296  [key=1, style=dashed, color=darkseagreen4, label=lines];
m3_279 -> m3_280  [key=0, style=solid];
m3_279 -> m3_182  [key=2, style=dotted];
m3_279 -> m3_183  [key=2, style=dotted];
m3_280 -> m3_281  [key=0, style=solid];
m3_280 -> m3_23  [key=2, style=dotted];
m3_280 -> m3_184  [key=2, style=dotted];
m3_278 -> m3_279  [key=0, style=solid];
m3_278 -> m3_10  [key=2, style=dotted];
m3_276 -> m3_8  [key=2, style=dotted];
m3_276 -> m3_277  [key=0, style=solid];
m3_276 -> m3_299  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m3_277 -> m3_35  [key=2, style=dotted];
m3_277 -> m3_278  [key=0, style=solid];
m3_275 -> m3_278  [key=1, style=dashed, color=darkseagreen4, label=help];
m3_275 -> m3_7  [key=2, style=dotted];
m3_275 -> m3_276  [key=0, style=solid];
m3_275 -> m3_299  [key=1, style=dashed, color=darkseagreen4, label=help];
m3_297 -> m3_274  [key=0, style=bold, color=blue];
m3_332 -> m3_342  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Commit_Verb"];
m3_332 -> m3_333  [key=0, style=solid];
m3_332 -> m3_334  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m3_332 -> m3_336  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Commit_Verb"];
m3_335 -> m3_47  [key=2, style=dotted];
m3_335 -> m3_336  [key=0, style=solid];
m3_334 -> m3_335  [key=0, style=solid];
m3_334 -> m3_35  [key=2, style=dotted];
m3_334 -> m3_336  [key=1, style=dashed, color=darkseagreen4, label=result];
m3_336 -> m3_341  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_336 -> m3_337  [key=0, style=solid];
m3_336 -> m3_325  [key=2, style=dotted];
m3_333 -> m3_334  [key=0, style=solid];
m3_333 -> m3_8  [key=2, style=dotted];
m3_333 -> m3_339  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m3_337 -> m3_332  [key=0, style=bold, color=blue];
m3_264 -> m3_265  [key=0, style=solid];
m3_266 -> m3_8  [key=2, style=dotted];
m3_266 -> m3_267  [key=0, style=solid];
m3_266 -> m3_272  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m3_268 -> m3_10  [key=2, style=dotted];
m3_268 -> m3_269  [key=0, style=solid];
m3_269 -> m3_23  [key=2, style=dotted];
m3_269 -> m3_270  [key=0, style=solid];
m3_269 -> m3_154  [key=2, style=dotted];
m3_267 -> m3_35  [key=2, style=dotted];
m3_267 -> m3_268  [key=0, style=solid];
m3_265 -> m3_7  [key=2, style=dotted];
m3_265 -> m3_266  [key=0, style=solid];
m3_265 -> m3_268  [key=1, style=dashed, color=darkseagreen4, label=help];
m3_265 -> m3_272  [key=1, style=dashed, color=darkseagreen4, label=help];
m3_270 -> m3_264  [key=0, style=bold, color=blue];
m3_364 -> m3_365  [key=0, style=solid, color=green];
m3_365 -> m3_366  [key=0, style=solid, color=green];
m3_366 -> m3_367  [key=0, style=solid, color=green];
m3_366 -> m3_9  [key=2, style=dotted, color=green];
m3_366 -> m3_369  [key=2, style=dotted, color=green];
m3_366 -> m3_370  [key=2, style=dotted, color=green];
m3_366 -> m3_371  [key=1, style=dashed, color=green, label="lambda expression"];
m3_366 -> m3_374  [key=1, style=dashed, color=green, label="lambda expression"];
m3_367 -> m3_368  [key=0, style=solid, color=green];
m3_367 -> m3_47  [key=2, style=dotted, color=green];
m3_368 -> m3_364  [key=0, style=bold, color=blue];
m3_123 -> m3_124  [key=0, style=solid];
m3_126 -> m3_9  [key=2, style=dotted];
m3_126 -> m3_127  [key=0, style=solid];
m3_127 -> m3_47  [key=2, style=dotted];
m3_127 -> m3_128  [key=0, style=solid];
m3_125 -> m3_126  [key=0, style=solid];
m3_125 -> m3_46  [key=2, style=dotted];
m3_124 -> m3_127  [key=1, style=dashed, color=darkseagreen4, label=expectedOptions];
m3_124 -> m3_125  [key=0, style=solid];
m3_124 -> m3_129  [key=2, style=dotted];
m3_128 -> m3_123  [key=0, style=bold, color=blue];
m3_391 -> m3_330  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Simple_Options"];
m3_392 -> m3_342  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Commit_Verb"];
m3_377 -> m3_13  [key=1, style=dashed, color=darkseagreen4, label=writer];
m3_381 -> m3_156  [key=1, style=dashed, color=darkseagreen4, label=help];
m3_383 -> m3_186  [key=1, style=dashed, color=darkseagreen4, label=help];
m3_387 -> m3_262  [key=1, style=dashed, color=darkseagreen4, label=help];
m3_380 -> m3_144  [key=1, style=dashed, color=darkseagreen4, label=expectedError];
m3_382 -> m3_170  [key=1, style=dashed, color=darkseagreen4, label=expectedError];
m3_378 -> m3_26  [key=1, style=dashed, color=darkseagreen4, label=writer];
m3_379 -> m3_37  [key=1, style=dashed, color=darkseagreen4, label=writer];
m3_384 -> m3_209  [key=1, style=dashed, color=darkseagreen4, label=help];
m3_385 -> m3_226  [key=1, style=dashed, color=darkseagreen4, label=help];
m3_386 -> m3_239  [key=1, style=dashed, color=darkseagreen4, label=help];
m3_388 -> m3_272  [key=1, style=dashed, color=darkseagreen4, label=help];
m3_389 -> m3_299  [key=1, style=dashed, color=darkseagreen4, label=help];
m3_390 -> m3_317  [key=1, style=dashed, color=darkseagreen4, label=help];
m3_393 -> m3_362  [key=1, style=dashed, color=darkseagreen4, label=help];
m4_0 -> m4_1  [key=0, style=solid];
m4_0 -> m4_2  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>"];
m4_1 -> m4_2  [key=0, style=solid];
m4_1 -> m4_4  [key=0, style=solid];
m4_2 -> m4_3  [key=0, style=solid, color=green];
m4_4 -> m4_5  [key=0, style=solid];
m4_4 -> m4_6  [key=2, style=dotted];
m4_3 -> m4_5  [key=0, style=solid, color=green];
m4_5 -> m4_0  [key=0, style=bold, color=blue];
m4_7 -> m4_8  [key=0, style=solid];
m4_7 -> m4_9  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>"];
m4_8 -> m4_9  [key=0, style=solid];
m4_8 -> m4_11  [key=0, style=solid];
m4_9 -> m4_10  [key=0, style=solid, color=green];
m4_11 -> m4_12  [key=0, style=solid];
m4_11 -> m4_14  [key=2, style=dotted];
m4_10 -> m4_12  [key=0, style=solid, color=green];
m4_10 -> m4_13  [key=2, style=dotted, color=green];
m4_12 -> m4_7  [key=0, style=bold, color=blue];
m6_20 -> m6_21  [key=0, style=solid];
m6_24 -> m6_25  [key=0, style=solid, color=green];
m6_24 -> m6_15  [key=2, style=dotted, color=green];
m6_21 -> m6_24  [key=1, style=dashed, color=green, label=expectedTokens];
m6_21 -> m6_22  [key=0, style=solid];
m6_21 -> m6_6  [key=2, style=dotted];
m6_21 -> m6_7  [key=2, style=dotted];
m6_23 -> m6_24  [key=0, style=solid, color=green];
m6_23 -> m6_11  [key=2, style=dotted];
m6_23 -> m6_6  [key=2, style=dotted];
m6_23 -> m6_7  [key=2, style=dotted];
m6_23 -> m6_12  [key=2, style=dotted];
m6_23 -> m6_13  [key=2, style=dotted];
m6_23 -> m6_14  [key=2, style=dotted];
m6_23 -> m6_26  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_22 -> m6_23  [key=0, style=solid];
m6_22 -> m6_8  [key=2, style=dotted];
m6_22 -> m6_9  [key=2, style=dotted];
m6_22 -> m6_10  [key=2, style=dotted];
m6_22 -> m6_27  [key=1, style=dashed, color=darkseagreen4, label=specs];
m6_25 -> m6_20  [key=0, style=bold, color=blue];
m6_29 -> m6_30  [key=0, style=solid];
m6_33 -> m6_15  [key=2, style=dotted];
m6_33 -> m6_34  [key=0, style=solid];
m6_30 -> m6_6  [key=2, style=dotted];
m6_30 -> m6_7  [key=2, style=dotted];
m6_30 -> m6_33  [key=1, style=dashed, color=darkseagreen4, label=expectedTokens];
m6_30 -> m6_31  [key=0, style=solid];
m6_32 -> m6_6  [key=2, style=dotted];
m6_32 -> m6_7  [key=2, style=dotted];
m6_32 -> m6_11  [key=2, style=dotted];
m6_32 -> m6_12  [key=2, style=dotted];
m6_32 -> m6_33  [key=0, style=solid];
m6_32 -> m6_35  [key=2, style=dotted];
m6_32 -> m6_36  [key=2, style=dotted];
m6_31 -> m6_32  [key=0, style=solid];
m6_31 -> m6_38  [key=1, style=dashed, color=darkseagreen4, label=string];
m6_34 -> m6_29  [key=0, style=bold, color=blue];
m6_0 -> m6_1  [key=0, style=solid];
m6_4 -> m6_5  [key=0, style=solid, color=green];
m6_4 -> m6_15  [key=2, style=dotted, color=green];
m6_1 -> m6_4  [key=1, style=dashed, color=green, label=expectedTokens];
m6_1 -> m6_2  [key=0, style=solid];
m6_1 -> m6_6  [key=2, style=dotted];
m6_1 -> m6_7  [key=2, style=dotted];
m6_3 -> m6_4  [key=0, style=solid, color=green];
m6_3 -> m6_11  [key=2, style=dotted];
m6_3 -> m6_6  [key=2, style=dotted];
m6_3 -> m6_7  [key=2, style=dotted];
m6_3 -> m6_12  [key=2, style=dotted];
m6_3 -> m6_13  [key=2, style=dotted];
m6_3 -> m6_14  [key=2, style=dotted];
m6_3 -> m6_16  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_2 -> m6_3  [key=0, style=solid];
m6_2 -> m6_8  [key=2, style=dotted];
m6_2 -> m6_9  [key=2, style=dotted];
m6_2 -> m6_10  [key=2, style=dotted];
m6_2 -> m6_17  [key=1, style=dashed, color=darkseagreen4, label=specs];
m6_5 -> m6_0  [key=0, style=bold, color=blue];
m6_37 -> m6_38  [key=0, style=solid];
m6_16 -> m6_17  [key=0, style=solid];
m6_26 -> m6_27  [key=0, style=solid];
m6_17 -> m6_18  [key=0, style=solid];
m6_17 -> m6_19  [key=2, style=dotted];
m6_18 -> m6_16  [key=0, style=bold, color=blue];
m6_27 -> m6_28  [key=0, style=solid];
m6_27 -> m6_19  [key=2, style=dotted];
m6_28 -> m6_26  [key=0, style=bold, color=blue];
m6_38 -> m6_39  [key=0, style=solid];
m6_38 -> m6_40  [key=2, style=dotted];
m6_39 -> m6_37  [key=0, style=bold, color=blue];
m6_41 -> m6_17  [key=1, style=dashed, color=darkseagreen4, label=specs];
m6_42 -> m6_27  [key=1, style=dashed, color=darkseagreen4, label=specs];
m7_40 -> m7_41  [key=0, style=solid];
m7_40 -> m7_42  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
m7_41 -> m7_9  [key=2, style=dotted];
m7_41 -> m7_42  [key=0, style=solid];
m7_41 -> m7_44  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_42 -> m7_43  [key=0, style=solid];
m7_42 -> m7_35  [key=2, style=dotted];
m7_42 -> m7_11  [key=2, style=dotted];
m7_43 -> m7_40  [key=0, style=bold, color=blue];
m7_147 -> m7_147  [key=3, color=darkorchid, style=bold, label="Local variable System.Func<T> makeDefault"];
m7_134 -> m7_135  [key=0, style=solid];
m7_134 -> m7_136  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m7_135 -> m7_9  [key=2, style=dotted];
m7_135 -> m7_136  [key=0, style=solid];
m7_135 -> m7_138  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_136 -> m7_137  [key=0, style=solid];
m7_136 -> m7_104  [key=2, style=dotted];
m7_137 -> m7_134  [key=0, style=bold, color=blue];
m7_208 -> m7_209  [key=0, style=solid];
m7_210 -> m7_9  [key=2, style=dotted];
m7_210 -> m7_211  [key=0, style=solid];
m7_210 -> m7_213  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_209 -> m7_210  [key=0, style=solid];
m7_209 -> m7_78  [key=2, style=dotted];
m7_209 -> m7_69  [key=2, style=dotted];
m7_209 -> m7_211  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m7_211 -> m7_212  [key=0, style=solid];
m7_211 -> m7_35  [key=2, style=dotted];
m7_211 -> m7_11  [key=2, style=dotted];
m7_212 -> m7_208  [key=0, style=bold, color=blue];
m7_126 -> m7_127  [key=0, style=solid];
m7_126 -> m7_128  [key=1, style=dashed, color=darkseagreen4, label="long[]"];
m7_127 -> m7_9  [key=2, style=dotted];
m7_127 -> m7_128  [key=0, style=solid];
m7_127 -> m7_130  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_128 -> m7_129  [key=0, style=solid];
m7_128 -> m7_104  [key=2, style=dotted];
m7_129 -> m7_126  [key=0, style=bold, color=blue];
m7_118 -> m7_119  [key=0, style=solid];
m7_118 -> m7_120  [key=1, style=dashed, color=darkseagreen4, label="long[]"];
m7_119 -> m7_9  [key=2, style=dotted];
m7_119 -> m7_120  [key=0, style=solid];
m7_119 -> m7_122  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_120 -> m7_121  [key=0, style=solid];
m7_120 -> m7_104  [key=2, style=dotted];
m7_121 -> m7_118  [key=0, style=bold, color=blue];
m7_216 -> m7_217  [key=0, style=solid];
m7_218 -> m7_9  [key=2, style=dotted];
m7_218 -> m7_219  [key=0, style=solid];
m7_218 -> m7_222  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_217 -> m7_218  [key=0, style=solid];
m7_217 -> m7_221  [key=2, style=dotted];
m7_217 -> m7_219  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m7_219 -> m7_220  [key=0, style=solid];
m7_219 -> m7_35  [key=2, style=dotted];
m7_219 -> m7_11  [key=2, style=dotted];
m7_220 -> m7_216  [key=0, style=bold, color=blue];
m7_55 -> m7_56  [key=0, style=solid];
m7_55 -> m7_57  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m7_56 -> m7_9  [key=2, style=dotted];
m7_56 -> m7_57  [key=0, style=solid];
m7_56 -> m7_59  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_57 -> m7_58  [key=0, style=solid];
m7_57 -> m7_35  [key=2, style=dotted];
m7_57 -> m7_11  [key=2, style=dotted];
m7_58 -> m7_55  [key=0, style=bold, color=blue];
m7_241 -> m7_242  [key=0, style=solid];
m7_241 -> m7_243  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_242 -> m7_9  [key=2, style=dotted];
m7_242 -> m7_243  [key=0, style=solid];
m7_242 -> m7_246  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_243 -> m7_244  [key=0, style=solid];
m7_243 -> m7_245  [key=2, style=dotted];
m7_243 -> m7_11  [key=2, style=dotted];
m7_244 -> m7_241  [key=0, style=bold, color=blue];
m7_182 -> m7_183  [key=0, style=solid];
m7_184 -> m7_9  [key=2, style=dotted];
m7_184 -> m7_185  [key=0, style=solid];
m7_184 -> m7_187  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_183 -> m7_184  [key=0, style=solid];
m7_183 -> m7_178  [key=2, style=dotted];
m7_183 -> m7_185  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m7_185 -> m7_186  [key=0, style=solid];
m7_185 -> m7_104  [key=2, style=dotted];
m7_186 -> m7_182  [key=0, style=bold, color=blue];
m7_31 -> m7_32  [key=0, style=solid];
m7_31 -> m7_33  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
m7_32 -> m7_9  [key=2, style=dotted];
m7_32 -> m7_32  [key=3, color=darkorchid, style=bold, label="Local variable System.Func<T> buildImmutable"];
m7_32 -> m7_33  [key=0, style=solid];
m7_32 -> m7_36  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_33 -> m7_34  [key=0, style=solid];
m7_33 -> m7_35  [key=2, style=dotted];
m7_33 -> m7_11  [key=2, style=dotted];
m7_34 -> m7_31  [key=0, style=bold, color=blue];
m7_0 -> m7_1  [key=0, style=solid];
m7_0 -> m7_2  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<int>"];
m7_0 -> m7_3  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<CommandLine.Core.TypeDescriptor>"];
m7_3 -> m7_9  [key=2, style=dotted];
m7_3 -> m7_4  [key=0, style=solid];
m7_3 -> m7_16  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_3 -> m7_19  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.TypeDescriptor"];
m7_1 -> m7_3  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
m7_1 -> m7_2  [key=0, style=solid];
m7_1 -> m7_6  [key=2, style=dotted];
m7_1 -> m7_13  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
m7_1 -> m7_19  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.TypeDescriptor"];
m7_2 -> m7_3  [key=0, style=solid];
m7_2 -> m7_7  [key=2, style=dotted];
m7_2 -> m7_8  [key=2, style=dotted];
m7_2 -> m7_4  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m7_2 -> m7_30  [key=3, color=darkorchid, style=bold, label="Property variable CommandLine.Core.TargetType TargetType"];
m7_2 -> m7_19  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.TypeDescriptor"];
m7_4 -> m7_5  [key=0, style=solid];
m7_4 -> m7_10  [key=2, style=dotted];
m7_4 -> m7_11  [key=2, style=dotted];
m7_4 -> m7_0  [key=0, style=bold, color=blue];
m7_5 -> m7_0  [key=0, style=bold, color=blue];
m7_5 -> m7_6  [key=0, style=solid];
m7_5 -> m7_8  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.TargetType"];
m7_199 -> m7_200  [key=0, style=solid];
m7_201 -> m7_9  [key=2, style=dotted];
m7_201 -> m7_202  [key=0, style=solid];
m7_201 -> m7_204  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_200 -> m7_201  [key=0, style=solid];
m7_200 -> m7_195  [key=2, style=dotted];
m7_200 -> m7_69  [key=2, style=dotted];
m7_200 -> m7_202  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m7_202 -> m7_203  [key=0, style=solid];
m7_202 -> m7_35  [key=2, style=dotted];
m7_202 -> m7_11  [key=2, style=dotted];
m7_203 -> m7_199  [key=0, style=bold, color=blue];
m7_8 -> m7_9  [key=0, style=solid];
m7_8 -> m7_0  [key=2, style=dotted];
m7_8 -> m7_11  [key=2, style=dotted];
m7_159 -> m7_160  [key=0, style=solid];
m7_16 -> m7_17  [key=0, style=solid, color=green];
m7_16 -> m7_13  [key=0, style=solid];
m7_16 -> m7_9  [key=2, style=dotted, color=green];
m7_16 -> m7_20  [key=1, style=dashed, color=green, label="lambda expression"];
m7_17 -> m7_18  [key=0, style=solid, color=red];
m7_17 -> m7_19  [key=2, style=dotted];
m7_18 -> m7_16  [key=0, style=bold, color=blue];
m7_18 -> m7_15  [key=0, style=bold, color=blue];
m7_20 -> m7_21  [key=0, style=solid];
m7_22 -> m7_20  [key=0, style=bold, color=blue];
m7_21 -> m7_22  [key=0, style=solid];
m7_21 -> m7_6  [key=2, style=dotted];
m7_27 -> m7_28  [key=0, style=solid];
m7_36 -> m7_37  [key=0, style=solid];
m7_44 -> m7_45  [key=0, style=solid];
m7_51 -> m7_52  [key=0, style=solid];
m7_59 -> m7_60  [key=0, style=solid];
m7_70 -> m7_71  [key=0, style=solid];
m7_79 -> m7_80  [key=0, style=solid];
m7_88 -> m7_89  [key=0, style=solid];
m7_96 -> m7_97  [key=0, style=solid];
m7_105 -> m7_106  [key=0, style=solid];
m7_115 -> m7_116  [key=0, style=solid];
m7_122 -> m7_123  [key=0, style=solid];
m7_130 -> m7_131  [key=0, style=solid];
m7_138 -> m7_139  [key=0, style=solid];
m7_169 -> m7_170  [key=0, style=solid];
m7_179 -> m7_180  [key=0, style=solid];
m7_187 -> m7_188  [key=0, style=solid];
m7_196 -> m7_197  [key=0, style=solid];
m7_204 -> m7_205  [key=0, style=solid];
m7_213 -> m7_214  [key=0, style=solid];
m7_222 -> m7_223  [key=0, style=solid];
m7_230 -> m7_231  [key=0, style=solid];
m7_238 -> m7_239  [key=0, style=solid];
m7_246 -> m7_247  [key=0, style=solid];
m7_13 -> m7_18  [key=0, style=solid];
m7_13 -> m7_14  [key=0, style=solid, color=red];
m7_13 -> m7_15  [key=2, style=dotted, color=red];
m7_13 -> m7_5  [key=2, style=dotted, color=red];
m7_13 -> m7_13  [key=1, style=dashed, color=red, label="CommandLine.Core.TypeDescriptor"];
m7_13 -> m7_16  [key=1, style=dashed, color=red, label="lambda expression"];
m7_29 -> m7_27  [key=0, style=bold, color=blue];
m7_28 -> m7_30  [key=2, style=dotted];
m7_28 -> m7_29  [key=0, style=solid];
m7_38 -> m7_36  [key=0, style=bold, color=blue];
m7_37 -> m7_38  [key=0, style=solid];
m7_37 -> m7_39  [key=2, style=dotted];
m7_46 -> m7_44  [key=0, style=bold, color=blue];
m7_45 -> m7_6  [key=2, style=dotted];
m7_45 -> m7_46  [key=0, style=solid];
m7_53 -> m7_51  [key=0, style=bold, color=blue];
m7_52 -> m7_53  [key=0, style=solid];
m7_52 -> m7_54  [key=2, style=dotted];
m7_61 -> m7_59  [key=0, style=bold, color=blue];
m7_60 -> m7_61  [key=0, style=solid];
m7_60 -> m7_62  [key=2, style=dotted];
m7_72 -> m7_70  [key=0, style=bold, color=blue];
m7_71 -> m7_72  [key=0, style=solid];
m7_71 -> m7_54  [key=2, style=dotted];
m7_81 -> m7_79  [key=0, style=bold, color=blue];
m7_80 -> m7_81  [key=0, style=solid];
m7_80 -> m7_82  [key=2, style=dotted];
m7_90 -> m7_88  [key=0, style=bold, color=blue];
m7_89 -> m7_90  [key=0, style=solid];
m7_89 -> m7_62  [key=2, style=dotted];
m7_98 -> m7_96  [key=0, style=bold, color=blue];
m7_97 -> m7_98  [key=0, style=solid];
m7_97 -> m7_99  [key=2, style=dotted];
m7_107 -> m7_105  [key=0, style=bold, color=blue];
m7_106 -> m7_107  [key=0, style=solid];
m7_106 -> m7_108  [key=2, style=dotted];
m7_117 -> m7_115  [key=0, style=bold, color=blue];
m7_116 -> m7_114  [key=2, style=dotted];
m7_116 -> m7_117  [key=0, style=solid];
m7_124 -> m7_122  [key=0, style=bold, color=blue];
m7_123 -> m7_124  [key=0, style=solid];
m7_123 -> m7_125  [key=2, style=dotted];
m7_132 -> m7_130  [key=0, style=bold, color=blue];
m7_131 -> m7_132  [key=0, style=solid];
m7_131 -> m7_133  [key=2, style=dotted];
m7_140 -> m7_138  [key=0, style=bold, color=blue];
m7_139 -> m7_140  [key=0, style=solid];
m7_139 -> m7_133  [key=2, style=dotted];
m7_171 -> m7_169  [key=0, style=bold, color=blue];
m7_170 -> m7_171  [key=0, style=solid];
m7_170 -> m7_172  [key=2, style=dotted];
m7_181 -> m7_179  [key=0, style=bold, color=blue];
m7_180 -> m7_178  [key=2, style=dotted];
m7_180 -> m7_181  [key=0, style=solid];
m7_189 -> m7_187  [key=0, style=bold, color=blue];
m7_188 -> m7_178  [key=2, style=dotted];
m7_188 -> m7_189  [key=0, style=solid];
m7_198 -> m7_196  [key=0, style=bold, color=blue];
m7_197 -> m7_178  [key=2, style=dotted];
m7_197 -> m7_198  [key=0, style=solid];
m7_206 -> m7_204  [key=0, style=bold, color=blue];
m7_205 -> m7_206  [key=0, style=solid];
m7_205 -> m7_207  [key=2, style=dotted];
m7_215 -> m7_213  [key=0, style=bold, color=blue];
m7_214 -> m7_6  [key=2, style=dotted];
m7_214 -> m7_215  [key=0, style=solid];
m7_224 -> m7_222  [key=0, style=bold, color=blue];
m7_223 -> m7_6  [key=2, style=dotted];
m7_223 -> m7_224  [key=0, style=solid];
m7_232 -> m7_230  [key=0, style=bold, color=blue];
m7_231 -> m7_6  [key=2, style=dotted];
m7_231 -> m7_232  [key=0, style=solid];
m7_240 -> m7_238  [key=0, style=bold, color=blue];
m7_239 -> m7_6  [key=2, style=dotted];
m7_239 -> m7_240  [key=0, style=solid];
m7_248 -> m7_246  [key=0, style=bold, color=blue];
m7_247 -> m7_6  [key=2, style=dotted];
m7_247 -> m7_248  [key=0, style=solid];
m7_149 -> m7_114  [key=2, style=dotted];
m7_149 -> m7_150  [key=0, style=solid];
m7_148 -> m7_149  [key=0, style=solid];
m7_150 -> m7_148  [key=0, style=bold, color=blue];
m7_151 -> m7_152  [key=0, style=solid];
m7_151 -> m7_156  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m7_151 -> m7_160  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m7_153 -> m7_151  [key=0, style=bold, color=blue];
m7_152 -> m7_153  [key=0, style=solid];
m7_152 -> m7_154  [key=2, style=dotted];
m7_152 -> m7_155  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_156 -> m7_157  [key=0, style=solid];
m7_156 -> m7_158  [key=2, style=dotted];
m7_156 -> m7_159  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_160 -> m7_161  [key=0, style=solid];
m7_160 -> m7_162  [key=2, style=dotted];
m7_155 -> m7_156  [key=0, style=solid];
m7_157 -> m7_155  [key=0, style=bold, color=blue];
m7_161 -> m7_159  [key=0, style=bold, color=blue];
m7_190 -> m7_191  [key=0, style=solid];
m7_192 -> m7_9  [key=2, style=dotted];
m7_192 -> m7_193  [key=0, style=solid];
m7_192 -> m7_196  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_191 -> m7_192  [key=0, style=solid];
m7_191 -> m7_195  [key=2, style=dotted];
m7_191 -> m7_69  [key=2, style=dotted];
m7_191 -> m7_193  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m7_193 -> m7_194  [key=0, style=solid];
m7_193 -> m7_35  [key=2, style=dotted];
m7_193 -> m7_11  [key=2, style=dotted];
m7_194 -> m7_190  [key=0, style=bold, color=blue];
m7_100 -> m7_101  [key=0, style=solid];
m7_100 -> m7_102  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Colors"];
m7_101 -> m7_9  [key=2, style=dotted];
m7_101 -> m7_102  [key=0, style=solid];
m7_101 -> m7_105  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_102 -> m7_102  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Colors"];
m7_102 -> m7_103  [key=0, style=solid];
m7_102 -> m7_104  [key=2, style=dotted];
m7_103 -> m7_100  [key=0, style=bold, color=blue];
m7_12 -> m7_13  [key=0, style=solid, color=red];
m7_12 -> m7_5  [key=3, color=darkorchid, style=bold, label="method methodReturn CommandLine.Core.TypeDescriptor WithNextValue"];
m7_14 -> m7_12  [key=0, style=bold, color=blue];
m7_141 -> m7_142  [key=0, style=solid];
m7_145 -> m7_104  [key=2, style=dotted];
m7_145 -> m7_146  [key=0, style=solid];
m7_142 -> m7_114  [key=2, style=dotted];
m7_142 -> m7_145  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m7_142 -> m7_143  [key=0, style=solid];
m7_144 -> m7_145  [key=0, style=solid];
m7_144 -> m7_147  [key=2, style=dotted];
m7_144 -> m7_148  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_144 -> m7_151  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_143 -> m7_144  [key=0, style=solid];
m7_146 -> m7_141  [key=0, style=bold, color=blue];
m7_83 -> m7_84  [key=0, style=solid];
m7_85 -> m7_9  [key=2, style=dotted];
m7_85 -> m7_86  [key=0, style=solid];
m7_85 -> m7_88  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_84 -> m7_85  [key=0, style=solid];
m7_84 -> m7_78  [key=2, style=dotted];
m7_84 -> m7_69  [key=2, style=dotted];
m7_84 -> m7_86  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m7_86 -> m7_87  [key=0, style=solid];
m7_86 -> m7_35  [key=2, style=dotted];
m7_86 -> m7_11  [key=2, style=dotted];
m7_87 -> m7_83  [key=0, style=bold, color=blue];
m7_233 -> m7_234  [key=0, style=solid];
m7_235 -> m7_9  [key=2, style=dotted];
m7_235 -> m7_236  [key=0, style=solid];
m7_235 -> m7_238  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_234 -> m7_235  [key=0, style=solid];
m7_234 -> m7_221  [key=2, style=dotted];
m7_234 -> m7_236  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m7_236 -> m7_237  [key=0, style=solid];
m7_236 -> m7_35  [key=2, style=dotted];
m7_236 -> m7_11  [key=2, style=dotted];
m7_237 -> m7_233  [key=0, style=bold, color=blue];
m7_63 -> m7_64  [key=0, style=solid];
m7_65 -> m7_9  [key=2, style=dotted];
m7_65 -> m7_66  [key=0, style=solid];
m7_65 -> m7_70  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_64 -> m7_65  [key=0, style=solid];
m7_64 -> m7_68  [key=2, style=dotted];
m7_64 -> m7_69  [key=2, style=dotted];
m7_64 -> m7_66  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m7_66 -> m7_67  [key=0, style=solid];
m7_66 -> m7_35  [key=2, style=dotted];
m7_66 -> m7_11  [key=2, style=dotted];
m7_67 -> m7_63  [key=0, style=bold, color=blue];
m7_109 -> m7_110  [key=0, style=solid];
m7_111 -> m7_9  [key=2, style=dotted];
m7_111 -> m7_112  [key=0, style=solid];
m7_111 -> m7_115  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_110 -> m7_111  [key=0, style=solid];
m7_110 -> m7_114  [key=2, style=dotted];
m7_110 -> m7_112  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m7_112 -> m7_113  [key=0, style=solid];
m7_112 -> m7_104  [key=2, style=dotted];
m7_113 -> m7_109  [key=0, style=bold, color=blue];
m7_73 -> m7_74  [key=0, style=solid];
m7_75 -> m7_9  [key=2, style=dotted];
m7_75 -> m7_76  [key=0, style=solid];
m7_75 -> m7_79  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_74 -> m7_75  [key=0, style=solid];
m7_74 -> m7_78  [key=2, style=dotted];
m7_74 -> m7_76  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m7_76 -> m7_77  [key=0, style=solid];
m7_76 -> m7_35  [key=2, style=dotted];
m7_76 -> m7_11  [key=2, style=dotted];
m7_77 -> m7_73  [key=0, style=bold, color=blue];
m7_91 -> m7_92  [key=0, style=solid];
m7_93 -> m7_9  [key=2, style=dotted];
m7_93 -> m7_94  [key=0, style=solid];
m7_93 -> m7_96  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_92 -> m7_93  [key=0, style=solid];
m7_92 -> m7_78  [key=2, style=dotted];
m7_92 -> m7_94  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m7_94 -> m7_95  [key=0, style=solid];
m7_94 -> m7_35  [key=2, style=dotted];
m7_94 -> m7_11  [key=2, style=dotted];
m7_95 -> m7_91  [key=0, style=bold, color=blue];
m7_173 -> m7_174  [key=0, style=solid];
m7_175 -> m7_9  [key=2, style=dotted];
m7_175 -> m7_176  [key=0, style=solid];
m7_175 -> m7_179  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_174 -> m7_175  [key=0, style=solid];
m7_174 -> m7_178  [key=2, style=dotted];
m7_174 -> m7_176  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m7_176 -> m7_177  [key=0, style=solid];
m7_176 -> m7_104  [key=2, style=dotted];
m7_177 -> m7_173  [key=0, style=bold, color=blue];
m7_6 -> m7_7  [key=0, style=solid];
m7_6 -> m7_8  [key=0, style=solid];
m7_7 -> m7_9  [key=0, style=solid];
m7_7 -> m7_10  [key=2, style=dotted];
m7_9 -> m7_5  [key=0, style=bold, color=blue];
m7_15 -> m7_16  [key=0, style=solid, color=green];
m7_15 -> m7_17  [key=1, style=dashed, color=darkseagreen4, label=long];
m7_47 -> m7_48  [key=0, style=solid];
m7_47 -> m7_49  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m7_48 -> m7_9  [key=2, style=dotted];
m7_48 -> m7_49  [key=0, style=solid];
m7_48 -> m7_51  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_49 -> m7_50  [key=0, style=solid];
m7_49 -> m7_35  [key=2, style=dotted];
m7_49 -> m7_11  [key=2, style=dotted];
m7_50 -> m7_47  [key=0, style=bold, color=blue];
m7_225 -> m7_226  [key=0, style=solid];
m7_227 -> m7_9  [key=2, style=dotted];
m7_227 -> m7_228  [key=0, style=solid];
m7_227 -> m7_230  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_226 -> m7_227  [key=0, style=solid];
m7_226 -> m7_221  [key=2, style=dotted];
m7_226 -> m7_228  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m7_228 -> m7_229  [key=0, style=solid];
m7_228 -> m7_35  [key=2, style=dotted];
m7_228 -> m7_11  [key=2, style=dotted];
m7_229 -> m7_225  [key=0, style=bold, color=blue];
m7_23 -> m7_24  [key=0, style=solid];
m7_23 -> m7_25  [key=1, style=dashed, color=darkseagreen4, label=double];
m7_24 -> m7_9  [key=2, style=dotted];
m7_24 -> m7_25  [key=0, style=solid];
m7_24 -> m7_27  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_25 -> m7_19  [key=2, style=dotted];
m7_25 -> m7_26  [key=0, style=solid];
m7_26 -> m7_23  [key=0, style=bold, color=blue];
m7_163 -> m7_164  [key=0, style=solid];
m7_165 -> m7_9  [key=2, style=dotted];
m7_165 -> m7_166  [key=0, style=solid];
m7_165 -> m7_169  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_164 -> m7_165  [key=0, style=solid];
m7_164 -> m7_168  [key=2, style=dotted];
m7_164 -> m7_69  [key=2, style=dotted];
m7_164 -> m7_166  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m7_166 -> m7_167  [key=0, style=solid];
m7_166 -> m7_35  [key=2, style=dotted];
m7_166 -> m7_11  [key=2, style=dotted];
m7_167 -> m7_163  [key=0, style=bold, color=blue];
m7_249 -> m7_13  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
m7_250 -> m7_156  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m7_250 -> m7_160  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m8_0 -> m8_1  [key=0, style=solid];
m8_1 -> m8_4  [key=2, style=dotted];
m8_1 -> m8_2  [key=0, style=solid];
m8_2 -> m8_3  [key=0, style=solid];
m8_2 -> m8_5  [key=2, style=dotted];
m8_2 -> m8_6  [key=2, style=dotted];
m8_2 -> m8_7  [key=2, style=dotted];
m8_2 -> m8_8  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_2 -> m8_11  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_2 -> m8_14  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_3 -> m8_0  [key=0, style=bold, color=blue];
m8_4 -> m8_20  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<string>"];
m8_4 -> m8_17  [key=0, style=solid];
m8_4 -> m8_18  [key=0, style=bold, color=crimson];
m8_4 -> m8_22  [key=0, style=bold, color=crimson];
m8_4 -> m8_23  [key=0, style=bold, color=crimson];
m8_4 -> m8_26  [key=0, style=bold, color=crimson];
m8_4 -> m8_27  [key=0, style=bold, color=crimson];
m8_4 -> m8_28  [key=0, style=bold, color=crimson];
m8_4 -> m8_30  [key=0, style=bold, color=crimson];
m8_4 -> m8_19  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m8_4 -> m8_24  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m8_4 -> m8_25  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m8_4 -> m8_29  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m8_20 -> m8_21  [key=0, style=solid, color=green];
m8_20 -> m8_34  [key=2, style=dotted, color=green];
m8_20 -> m8_35  [key=2, style=dotted, color=green];
m8_20 -> m8_36  [key=2, style=dotted, color=green];
m8_20 -> m8_37  [key=2, style=dotted, color=green];
m8_20 -> m8_50  [key=1, style=dashed, color=green, label="lambda expression"];
m8_20 -> m8_25  [key=1, style=dashed, color=green, label=taken];
m8_20 -> m8_28  [key=1, style=dashed, color=green, label=taken];
m8_20 -> m8_29  [key=1, style=dashed, color=green, label=taken];
m8_19 -> m8_20  [key=0, style=solid, color=green];
m8_19 -> m8_33  [key=2, style=dotted];
m8_19 -> m8_22  [key=1, style=dashed, color=darkseagreen4, label=pt];
m8_19 -> m8_25  [key=1, style=dashed, color=darkseagreen4, label=pt];
m8_19 -> m8_26  [key=1, style=dashed, color=darkseagreen4, label=pt];
m8_19 -> m8_28  [key=1, style=dashed, color=darkseagreen4, label=pt];
m8_19 -> m8_58  [key=1, style=dashed, color=darkseagreen4, label=pt];
m8_21 -> m8_22  [key=0, style=solid];
m8_21 -> m8_24  [key=0, style=solid];
m8_21 -> m8_32  [key=2, style=dotted];
m8_25 -> m8_35  [key=2, style=dotted];
m8_25 -> m8_26  [key=0, style=solid];
m8_25 -> m8_28  [key=0, style=solid];
m8_25 -> m8_43  [key=2, style=dotted];
m8_25 -> m8_44  [key=2, style=dotted];
m8_25 -> m8_40  [key=2, style=dotted];
m8_25 -> m8_45  [key=2, style=dotted];
m8_28 -> m8_36  [key=2, style=dotted];
m8_28 -> m8_29  [key=0, style=solid];
m8_28 -> m8_48  [key=2, style=dotted];
m8_28 -> m8_49  [key=2, style=dotted];
m8_28 -> m8_47  [key=2, style=dotted];
m8_28 -> m8_39  [key=2, style=dotted];
m8_28 -> m8_57  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_29 -> m8_4  [key=2, style=dotted];
m8_29 -> m8_35  [key=2, style=dotted];
m8_29 -> m8_30  [key=0, style=solid];
m8_29 -> m8_31  [key=0, style=solid];
m8_29 -> m8_40  [key=2, style=dotted];
m8_17 -> m8_19  [key=0, style=solid];
m8_17 -> m8_18  [key=0, style=solid];
m8_17 -> m8_32  [key=2, style=dotted];
m8_18 -> m8_19  [key=0, style=solid];
m8_22 -> m8_23  [key=0, style=solid];
m8_22 -> m8_38  [key=2, style=dotted];
m8_22 -> m8_39  [key=2, style=dotted];
m8_23 -> m8_24  [key=0, style=solid];
m8_26 -> m8_27  [key=0, style=solid];
m8_26 -> m8_46  [key=2, style=dotted];
m8_26 -> m8_47  [key=2, style=dotted];
m8_26 -> m8_39  [key=2, style=dotted];
m8_27 -> m8_28  [key=0, style=solid];
m8_30 -> m8_29  [key=0, style=solid];
m8_24 -> m8_25  [key=0, style=solid];
m8_24 -> m8_40  [key=2, style=dotted];
m8_24 -> m8_41  [key=2, style=dotted];
m8_24 -> m8_42  [key=2, style=dotted];
m8_24 -> m8_53  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_31 -> m8_4  [key=0, style=bold, color=blue];
m8_14 -> m8_15  [key=0, style=solid];
m8_50 -> m8_51  [key=0, style=solid, color=green];
m8_51 -> m8_52  [key=0, style=solid, color=green];
m8_52 -> m8_50  [key=0, style=bold, color=blue];
m8_58 -> m8_59  [key=0, style=solid];
m8_58 -> m8_47  [key=2, style=dotted];
m8_58 -> m8_60  [key=2, style=dotted];
m8_58 -> m8_61  [key=2, style=dotted];
m8_58 -> m8_39  [key=2, style=dotted];
m8_57 -> m8_58  [key=0, style=solid];
m8_53 -> m8_54  [key=0, style=solid];
m8_59 -> m8_57  [key=0, style=bold, color=blue];
m8_8 -> m8_9  [key=0, style=solid];
m8_11 -> m8_12  [key=0, style=solid];
m8_55 -> m8_53  [key=0, style=bold, color=blue];
m8_54 -> m8_55  [key=0, style=solid];
m8_54 -> m8_56  [key=2, style=dotted];
m8_10 -> m8_8  [key=0, style=bold, color=blue];
m8_9 -> m8_10  [key=0, style=solid];
m8_13 -> m8_11  [key=0, style=bold, color=blue];
m8_12 -> m8_13  [key=0, style=solid];
m8_15 -> m8_16  [key=0, style=solid];
m8_16 -> m8_14  [key=0, style=bold, color=blue];
m8_72 -> m8_73  [key=0, style=solid];
m8_73 -> m8_43  [key=2, style=dotted];
m8_73 -> m8_47  [key=2, style=dotted];
m8_73 -> m8_46  [key=2, style=dotted];
m8_73 -> m8_61  [key=2, style=dotted];
m8_73 -> m8_74  [key=0, style=solid];
m8_74 -> m8_72  [key=0, style=bold, color=blue];
m8_62 -> m8_67  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m8_62 -> m8_68  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m8_62 -> m8_63  [key=0, style=solid];
m8_67 -> m8_43  [key=2, style=dotted];
m8_67 -> m8_68  [key=0, style=solid];
m8_67 -> m8_69  [key=0, style=solid];
m8_68 -> m8_47  [key=2, style=dotted];
m8_68 -> m8_70  [key=0, style=solid];
m8_68 -> m8_71  [key=2, style=dotted];
m8_65 -> m8_47  [key=2, style=dotted];
m8_65 -> m8_70  [key=0, style=solid];
m8_69 -> m8_61  [key=2, style=dotted];
m8_69 -> m8_70  [key=0, style=solid];
m8_66 -> m8_67  [key=0, style=solid];
m8_64 -> m8_65  [key=0, style=solid];
m8_63 -> m8_66  [key=0, style=solid];
m8_63 -> m8_64  [key=0, style=solid];
m8_70 -> m8_62  [key=0, style=bold, color=blue];
m8_75 -> m8_58  [key=1, style=dashed, color=darkseagreen4, label=pt];
}
