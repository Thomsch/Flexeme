digraph  {
m0_8 [cluster="CommandLine.Core.NameExtensions.FromSpecification(CommandLine.Core.Specification)", file="NameExtensions.cs", label="Entry CommandLine.Core.NameExtensions.FromSpecification(CommandLine.Core.Specification)", span="22-22"];
m0_9 [cluster="CommandLine.Core.NameExtensions.FromSpecification(CommandLine.Core.Specification)", file="NameExtensions.cs", label="specification.Tag", span="24-24"];
m0_11 [cluster="CommandLine.Core.NameExtensions.FromSpecification(CommandLine.Core.Specification)", file="NameExtensions.cs", label="return FromOptionSpecification((OptionSpecification)specification);", span="27-27"];
m0_10 [cluster="CommandLine.Core.NameExtensions.FromSpecification(CommandLine.Core.Specification)", file="NameExtensions.cs", label="SpecificationType.Option", span="26-26"];
m0_12 [cluster="CommandLine.Core.NameExtensions.FromSpecification(CommandLine.Core.Specification)", file="NameExtensions.cs", label="return NameInfo.EmptyName;", span="29-29"];
m0_13 [cluster="CommandLine.Core.NameExtensions.FromSpecification(CommandLine.Core.Specification)", file="NameExtensions.cs", label="Exit CommandLine.Core.NameExtensions.FromSpecification(CommandLine.Core.Specification)", span="22-22"];
m0_7 [cluster="CommandLine.NameInfo.NameInfo(string, string)", file="NameExtensions.cs", label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20"];
m0_3 [cluster="System.StringComparer.Equals(string, string)", file="NameExtensions.cs", label="Entry System.StringComparer.Equals(string, string)", span="0-0"];
m0_0 [cluster="CommandLine.Core.NameExtensions.MatchName(string, string, string, System.StringComparer)", file="NameExtensions.cs", label="Entry CommandLine.Core.NameExtensions.MatchName(string, string, string, System.StringComparer)", span="8-8"];
m0_1 [cluster="CommandLine.Core.NameExtensions.MatchName(string, string, string, System.StringComparer)", file="NameExtensions.cs", label="return value.Length == 1\r\n               ? comparer.Equals(value, shortName)\r\n               : comparer.Equals(value, longName);", span="10-12"];
m0_2 [cluster="CommandLine.Core.NameExtensions.MatchName(string, string, string, System.StringComparer)", file="NameExtensions.cs", label="Exit CommandLine.Core.NameExtensions.MatchName(string, string, string, System.StringComparer)", span="8-8"];
m0_4 [cluster="CommandLine.Core.NameExtensions.FromOptionSpecification(CommandLine.Core.OptionSpecification)", file="NameExtensions.cs", label="Entry CommandLine.Core.NameExtensions.FromOptionSpecification(CommandLine.Core.OptionSpecification)", span="15-15"];
m0_5 [cluster="CommandLine.Core.NameExtensions.FromOptionSpecification(CommandLine.Core.OptionSpecification)", color=green, community=0, file="NameExtensions.cs", label="return new NameInfo(\r\n                specification.LongName,\r\n                specification.ShortName);", prediction=0, span="17-19"];
m0_6 [cluster="CommandLine.Core.NameExtensions.FromOptionSpecification(CommandLine.Core.OptionSpecification)", file="NameExtensions.cs", label="Exit CommandLine.Core.NameExtensions.FromOptionSpecification(CommandLine.Core.OptionSpecification)", span="15-15"];
m1_7 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", file="NameLookupTests.cs", label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", span="16-16"];
m1_6 [cluster="CSharpx.Maybe.Just<T>(T)", file="NameLookupTests.cs", label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124"];
m1_8 [cluster="CSharpx.Maybe.Nothing<T>()", file="NameLookupTests.cs", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
m1_0 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs", label="Entry CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", span="14-14"];
m1_1 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs", label="var expected = Maybe.Just(''.'')", span="17-17"];
m1_2 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs", label="var specs = new[] { new OptionSpecification(string.Empty, ''string-seq'',\r\n                false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), '.', null, string.Empty, string.Empty, new List<string>(), typeof(IEnumerable<string>), TargetType.Sequence)}", span="18-19"];
m1_4 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs", label="expected.ShouldBeEquivalentTo(result)", span="25-25"];
m1_3 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs", label="var result = NameLookup.HavingSeparator(''string-seq'', specs, StringComparer.InvariantCulture)", span="22-22"];
m1_5 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs", label="Exit CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", span="14-14"];
m1_10 [cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="NameLookupTests.cs", label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="27-27"];
m1_11 [cluster="Unk.ShouldBeEquivalentTo", file="NameLookupTests.cs", label="Entry Unk.ShouldBeEquivalentTo", span=""];
m1_9 [cluster="System.Collections.Generic.List<T>.List()", file="NameLookupTests.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m2_13 [cluster="Unk.Where", file="OptionMapperTests.cs", label="Entry Unk.Where", span=""];
m2_12 [cluster="Unk.Create", file="OptionMapperTests.cs", label="Entry Unk.Create", span=""];
m2_6 [cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", file="OptionMapperTests.cs", label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0"];
m2_11 [cluster="Unk.Single", file="OptionMapperTests.cs", label="Entry Unk.Single", span=""];
m2_15 [cluster="Unk.NotNull", file="OptionMapperTests.cs", label="Entry Unk.NotNull", span=""];
m2_7 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", file="OptionMapperTests.cs", label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", span="16-16"];
m2_27 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="OptionMapperTests.cs", label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="14-14"];
m2_0 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="OptionMapperTests.cs", label="Entry CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", span="17-17"];
m2_1 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="OptionMapperTests.cs", label="var tokenPartitions = new[]\r\n                {\r\n                    new KeyValuePair<string, IEnumerable<string>>(''x'', new [] { ''true'' })\r\n                }", span="20-23"];
m2_2 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="OptionMapperTests.cs", label="var specProps = new[]\r\n                {\r\n                    SpecificationProperty.Create(\r\n                        new OptionSpecification(''x'', string.Empty, false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), '\0', Maybe.Nothing<object>(), string.Empty, string.Empty, new List<string>(), typeof(bool), TargetType.Switch), \r\n                        typeof(Simple_Options).GetProperties().Single(p => p.Name.Equals(''BoolValue'', StringComparison.Ordinal)),\r\n                        Maybe.Nothing<object>())\r\n                }", span="24-30"];
m2_3 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="OptionMapperTests.cs", label="var result = OptionMapper.MapValues(\r\n                specProps.Where(pt => pt.Specification.IsOption()),\r\n                tokenPartitions,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, CultureInfo.InvariantCulture),\r\n                StringComparer.InvariantCulture)", span="33-37"];
m2_4 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", color=green, community=0, file="OptionMapperTests.cs", label="Assert.NotNull(((Ok<IEnumerable<SpecificationProperty>, Error>)result).Value.Success.Single(\r\n                a => a.Specification.IsOption()\r\n                && ((OptionSpecification)a.Specification).ShortName.Equals(''x'')\r\n                && (bool)((Just<object>)a.Value).Value))", prediction=1, span="40-43"];
m2_5 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="OptionMapperTests.cs", label="Exit CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", span="17-17"];
m2_28 [cluster="lambda expression", file="OptionMapperTests.cs", label="Entry lambda expression", span="41-43"];
m2_16 [cluster="lambda expression", file="OptionMapperTests.cs", label="Entry lambda expression", span="28-28"];
m2_20 [cluster="lambda expression", file="OptionMapperTests.cs", label="Entry lambda expression", span="34-34"];
m2_24 [cluster="lambda expression", file="OptionMapperTests.cs", label="Entry lambda expression", span="36-36"];
m2_17 [cluster="lambda expression", file="OptionMapperTests.cs", label="p.Name.Equals(''BoolValue'', StringComparison.Ordinal)", span="28-28"];
m2_18 [cluster="lambda expression", file="OptionMapperTests.cs", label="Exit lambda expression", span="28-28"];
m2_21 [cluster="lambda expression", file="OptionMapperTests.cs", label="pt.Specification.IsOption()", span="34-34"];
m2_22 [cluster="lambda expression", file="OptionMapperTests.cs", label="Exit lambda expression", span="34-34"];
m2_25 [cluster="lambda expression", file="OptionMapperTests.cs", label="TypeConverter.ChangeType(vals, type, isScalar, CultureInfo.InvariantCulture)", span="36-36"];
m2_26 [cluster="lambda expression", file="OptionMapperTests.cs", label="Exit lambda expression", span="36-36"];
m2_29 [cluster="lambda expression", file="OptionMapperTests.cs", label="a.Specification.IsOption()\r\n                && ((OptionSpecification)a.Specification).ShortName.Equals(''x'')\r\n                && (bool)((Just<object>)a.Value).Value", span="41-43"];
m2_30 [cluster="lambda expression", file="OptionMapperTests.cs", label="Exit lambda expression", span="41-43"];
m2_31 [cluster="Unk.IsOption", file="OptionMapperTests.cs", label="Entry Unk.IsOption", span=""];
m2_32 [cluster="string.Equals(string)", file="OptionMapperTests.cs", label="Entry string.Equals(string)", span="0-0"];
m2_8 [cluster="CSharpx.Maybe.Nothing<T>()", file="OptionMapperTests.cs", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
m2_19 [cluster="string.Equals(string, System.StringComparison)", file="OptionMapperTests.cs", label="Entry string.Equals(string, System.StringComparison)", span="0-0"];
m2_23 [cluster="CommandLine.Core.Specification.IsOption()", file="OptionMapperTests.cs", label="Entry CommandLine.Core.Specification.IsOption()", span="10-10"];
m2_14 [cluster="Unk.MapValues", file="OptionMapperTests.cs", label="Entry Unk.MapValues", span=""];
m2_10 [cluster="System.Type.GetProperties()", file="OptionMapperTests.cs", label="Entry System.Type.GetProperties()", span="0-0"];
m2_9 [cluster="System.Collections.Generic.List<T>.List()", file="OptionMapperTests.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m3_0 [cluster="Ninject.Tests.Integration.WithPropertyValueTests.PropertyValueIsAssignedWhenNoInjectAttributeIsSuppliedUsingCallback()", file="ParserTests.cs", label="Entry Ninject.Tests.Integration.WithPropertyValueTests.PropertyValueIsAssignedWhenNoInjectAttributeIsSuppliedUsingCallback()", span="10-10"];
m3_3 [cluster="Ninject.Tests.Integration.WithPropertyValueTests.PropertyValueIsAssignedWhenNoInjectAttributeIsSuppliedUsingCallback()", file="ParserTests.cs", label="ValidateWarrior(warrior)", span="15-15"];
m3_2 [cluster="Ninject.Tests.Integration.WithPropertyValueTests.PropertyValueIsAssignedWhenNoInjectAttributeIsSuppliedUsingCallback()", file="ParserTests.cs", label="var warrior = _kernel.Get<IWarrior>()", span="14-14"];
m3_4 [cluster="Ninject.Tests.Integration.WithPropertyValueTests.PropertyValueIsAssignedWhenNoInjectAttributeIsSuppliedUsingCallback()", file="ParserTests.cs", label="Exit Ninject.Tests.Integration.WithPropertyValueTests.PropertyValueIsAssignedWhenNoInjectAttributeIsSuppliedUsingCallback()", span="10-10"];
m3_1 [cluster="Ninject.Tests.Integration.WithPropertyValueTests.PropertyValueIsAssignedWhenNoInjectAttributeIsSuppliedUsingCallback()", file="ParserTests.cs", label="_kernel.Bind<IWarrior>().To<FootSoldier>()\r\n                .WithPropertyValue(''Weapon'', context => context.Kernel.Get<IWeapon>())", span="12-13"];
m3_5 [cluster="Ninject.Syntax.IBindingRoot.Bind<T>()", file="ParserTests.cs", label="Entry Ninject.Syntax.IBindingRoot.Bind<T>()", span="26-26"];
m3_6 [cluster="Ninject.Syntax.IBindingToSyntax<T>.To<TImplementation>()", file="ParserTests.cs", label="Entry Ninject.Syntax.IBindingToSyntax<T>.To<TImplementation>()", span="40-40"];
m3_8 [cluster="Ninject.Syntax.IResolutionRoot.Get<T>(params Ninject.Parameters.IParameter[])", file="ParserTests.cs", label="Entry Ninject.Syntax.IResolutionRoot.Get<T>(params Ninject.Parameters.IParameter[])", span="34-34"];
m3_147 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", span="281-281"];
m3_150 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="ParserTests.cs", label="sut.ParseArguments<Immutable_Simple_Options>(new[] { ''--help'' })", span="288-288"];
m3_149 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="ParserTests.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="285-285"];
m3_151 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="ParserTests.cs", label="var result = help.ToString()", span="289-289"];
m3_148 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="ParserTests.cs", label="var help = new StringWriter()", span="284-284"];
m3_152 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="ParserTests.cs", label="result.Length.Should().BeGreaterThan(0)", span="292-292"];
m3_153 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="ParserTests.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", span="281-281"];
m3_95 [cluster="lambda expression", file="ParserTests.cs", label="o.RespectingRuntimeTypes()", span="180-180"];
m3_60 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="68-68"];
m3_71 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", span="135-135"];
m3_108 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser_in_verbs_scenario()", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser_in_verbs_scenario()", span="207-207"];
m3_111 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser_in_verbs_scenario()", file="ParserTests.cs", label="Assert.IsType<NotParsed<object>>(result)", span="218-218"];
m3_110 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser_in_verbs_scenario()", file="ParserTests.cs", label="var result = sut.ParseArguments(\r\n                new[] { ''clone'', ''-q'', ''-q'', ''http://gsscoder.github.com/'', ''http://yes-to-nooo.github.com/'' },\r\n                typeof(Add_Verb), typeof(Commit_Verb), typeof(Clone_Verb))", span="213-215"];
m3_109 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser_in_verbs_scenario()", file="ParserTests.cs", label="var sut = Parser.Default", span="210-210"];
m3_112 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser_in_verbs_scenario()", file="ParserTests.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser_in_verbs_scenario()", span="207-207"];
m3_319 [cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.Simple_Options)", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.Simple_Options)", span="506-506"];
m3_321 [cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.Simple_Options)", file="ParserTests.cs", label="var result = sut.ParseArguments<Simple_Options>(arguments)", span="514-514"];
m3_322 [cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.Simple_Options)", file="ParserTests.cs", label="result.Tag.ShouldBeEquivalentTo(ParserResultType.Parsed)", span="517-517"];
m3_320 [cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.Simple_Options)", file="ParserTests.cs", label="var sut = new Parser(config => config.IgnoreUnknownArguments = true)", span="511-511"];
m3_323 [cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.Simple_Options)", file="ParserTests.cs", label="result.WithParsed(opts => opts.ShouldBeEquivalentTo(expected))", span="518-518"];
m3_324 [cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.Simple_Options)", file="ParserTests.cs", label="Exit CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.Simple_Options)", span="506-506"];
m3_76 [cluster="Ninject.StandardKernel.StandardKernel(params Ninject.Modules.INinjectModule[])", file="ParserTests.cs", label="Entry Ninject.StandardKernel.StandardKernel(params Ninject.Modules.INinjectModule[])", span="36-36"];
m3_72 [cluster="Ninject.Tests.Integration.PropertyInjectionTests.PropertyInjectionTests()", file="ParserTests.cs", label="Entry Ninject.Tests.Integration.PropertyInjectionTests.PropertyInjectionTests()", span="97-97"];
m3_74 [cluster="Ninject.Tests.Integration.PropertyInjectionTests.PropertyInjectionTests()", file="ParserTests.cs", label="_kernel.Bind<IWeapon>().To<Shuriken>()", span="100-100"];
m3_75 [cluster="Ninject.Tests.Integration.PropertyInjectionTests.PropertyInjectionTests()", file="ParserTests.cs", label="Exit Ninject.Tests.Integration.PropertyInjectionTests.PropertyInjectionTests()", span="97-97"];
m3_73 [cluster="Ninject.Tests.Integration.PropertyInjectionTests.PropertyInjectionTests()", file="ParserTests.cs", label="_kernel = new StandardKernel()", span="99-99"];
m3_77 [cluster="Ninject.Tests.Integration.PropertyInjectionTests.ValidateWarrior(Ninject.Tests.Fakes.IWarrior)", file="ParserTests.cs", label="Assert.IsType<FootSoldier>(warrior)", span="105-105"];
m3_7 [cluster="Ninject.Syntax.IBindingWithSyntax<T>.WithPropertyValue(string, System.Func<Ninject.Activation.IContext, object>)", file="ParserTests.cs", label="Entry Ninject.Syntax.IBindingWithSyntax<T>.WithPropertyValue(string, System.Func<Ninject.Activation.IContext, object>)", span="240-240"];
m3_129 [cluster="CommandLine.Tests.Fakes.Immutable_Simple_Options.Immutable_Simple_Options(string, System.Collections.Generic.IEnumerable<int>, bool, long)", file="ParserTests.cs", label="Entry CommandLine.Tests.Fakes.Immutable_Simple_Options.Immutable_Simple_Options(string, System.Collections.Generic.IEnumerable<int>, bool, long)", span="13-13"];
m3_10 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="13-13"];
m3_61 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", span="112-112"];
m3_62 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", file="ParserTests.cs", label="var expectedOptions = new Simple_Options_With_Values\r\n                                  {\r\n                                      StringValue = ''astring'',\r\n                                      LongValue = 20L,\r\n                                      StringSequence = new[] { ''--aaa'', ''-b'', ''--ccc'' },\r\n                                      IntValue = 30\r\n                                  }", span="115-121"];
m3_63 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", file="ParserTests.cs", label="var sut = new Parser(with => with.EnableDashDash = true)", span="122-122"];
m3_64 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", file="ParserTests.cs", label="var result =\r\n                sut.ParseArguments<Simple_Options_With_Values>(\r\n                    new[] { ''--stringvalue'', ''astring'', ''--'', ''20'', ''--aaa'', ''-b'', ''--ccc'', ''30'' })", span="125-127"];
m3_65 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", file="ParserTests.cs", label="((Parsed<Simple_Options_With_Values>)result).Value.ShouldBeEquivalentTo(expectedOptions)", span="130-130"];
m3_66 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", file="ParserTests.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", span="112-112"];
m3_67 [cluster="CommandLine.Tests.Fakes.Simple_Options_With_Values.Simple_Options_With_Values()", file="ParserTests.cs", label="Entry CommandLine.Tests.Fakes.Simple_Options_With_Values.Simple_Options_With_Values()", span="6-6"];
m3_68 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="122-122"];
m3_69 [cluster="lambda expression", file="ParserTests.cs", label="with.EnableDashDash = true", span="122-122"];
m3_70 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="122-122"];
m3_25 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="36-36"];
m3_82 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="150-150"];
m3_83 [cluster="lambda expression", file="ParserTests.cs", label="o.RespectingRuntimeTypes()", span="150-150"];
m3_84 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="150-150"];
m3_85 [cluster="Unk.RespectingRuntimeTypes", file="ParserTests.cs", label="Entry Unk.RespectingRuntimeTypes", span=""];
m3_86 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_verbs()", span="155-155"];
m3_87 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="ParserTests.cs", label="var expectedOptions = new Clone_Verb\r\n                                  {\r\n                                      Quiet = true,\r\n                                      Urls =\r\n                                          new[]\r\n                                          {\r\n                                              ''http://gsscoder.github.com/'',\r\n                                              ''http://yes-to-nooo.github.com/''\r\n                                          }\r\n                                  }", span="158-167"];
m3_228 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", span="383-383"];
m3_230 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="ParserTests.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="387-387"];
m3_232 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="ParserTests.cs", label="var result = help.ToString()", span="391-391"];
m3_233 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="ParserTests.cs", label="result.Length.Should().BeGreaterThan(0)", span="394-394"];
m3_235 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="ParserTests.cs", label="lines.Should().HaveCount(x => x == 1)", span="396-396"];
m3_236 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="ParserTests.cs", label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="397-397"];
m3_231 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="ParserTests.cs", label="sut.ParseArguments<Add_Verb, Commit_Verb, Clone_Verb>(new[] { command })", span="390-390"];
m3_234 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="ParserTests.cs", label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="395-395"];
m3_229 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="ParserTests.cs", label="var help = new StringWriter()", span="386-386"];
m3_237 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="ParserTests.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", span="383-383"];
m3_137 [cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="ParserTests.cs", label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="393-393"];
m3_94 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="180-180"];
m3_47 [cluster="Ninject.Tests.Integration.WithParameterTests.PropertyValueIsAssignedWhenNoInjectAttributeUsingSuppliedValue()", file="ParserTests.cs", label="Exit Ninject.Tests.Integration.WithParameterTests.PropertyValueIsAssignedWhenNoInjectAttributeUsingSuppliedValue()", span="53-53"];
m3_97 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])", file="ParserTests.cs", label="Ninject.Tests.Integration.WithParameterTests", span=""];
m3_102 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])", file="ParserTests.cs", label="((Parsed<object>)result).Value.ShouldBeEquivalentTo(expectedOptions, o => o.RespectingRuntimeTypes())", span="202-202"];
m3_98 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])", file="ParserTests.cs", label="Ninject.Tests.Integration.WhenNoPropertyOverridesAreSupplied", span=""];
m3_100 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])", file="ParserTests.cs", label="var result = sut.ParseArguments(\r\n                args,\r\n                typeof(Add_Verb), typeof(Commit_Verb), typeof(Clone_Verb))", span="196-198"];
m3_101 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])", file="ParserTests.cs", label="Assert.IsType<Commit_Verb>(((Parsed<object>)result).Value)", span="201-201"];
m3_99 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])", file="ParserTests.cs", label="Ninject.Tests.Integration.PropertyInjectionTests", span=""];
m3_103 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])", file="ParserTests.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])", span="189-189"];
m3_88 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="ParserTests.cs", label="var sut = new Parser()", span="168-168"];
m3_89 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="ParserTests.cs", label="var result =\r\n                sut.ParseArguments(\r\n                    new[] { ''clone'', ''-q'', ''http://gsscoder.github.com/'', ''http://yes-to-nooo.github.com/'' },\r\n                    typeof(Add_Verb),\r\n                    typeof(Commit_Verb),\r\n                    typeof(Clone_Verb))", span="171-176"];
m3_92 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="ParserTests.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_verbs()", span="155-155"];
m3_90 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="ParserTests.cs", label="Assert.IsType<Clone_Verb>(((Parsed<object>)result).Value)", span="179-179"];
m3_91 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="ParserTests.cs", label="((Parsed<object>)result).Value.ShouldBeEquivalentTo(expectedOptions, o => o.RespectingRuntimeTypes())", span="180-180"];
m3_93 [cluster="CommandLine.Tests.Fakes.Clone_Verb.Clone_Verb()", file="ParserTests.cs", label="Entry CommandLine.Tests.Fakes.Clone_Verb.Clone_Verb()", span="36-36"];
m3_369 [cluster="CommandLine.ParserResult<T>.WithParsed<T>(System.Action<T>)", file="ParserTests.cs", label="Entry CommandLine.ParserResult<T>.WithParsed<T>(System.Action<T>)", span="20-20"];
m3_35 [cluster="Ninject.Tests.Integration.WithParameterTests.PropertyValueIsAssignedWhenNoInjectAttributeIsSuppliedUsingCallback()", file="ParserTests.cs", label="var warrior = _kernel.Get<IWarrior>()", span="48-48"];
m3_13 [cluster="lambda expression", file="ParserTests.cs", label="with.HelpWriter = writer", span="20-20"];
m3_14 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="20-20"];
m3_15 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", span="32-32"];
m3_16 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", file="ParserTests.cs", label="var writer = new StringWriter()", span="35-35"];
m3_17 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", file="ParserTests.cs", label="var sut = new Parser(with => with.HelpWriter = writer)", span="36-36"];
m3_55 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="67-67"];
m3_57 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="67-67"];
m3_56 [cluster="lambda expression", file="ParserTests.cs", label="new Sword()", span="67-67"];
m3_58 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="68-68"];
m3_59 [cluster="lambda expression", file="ParserTests.cs", label="new Sword()", span="68-68"];
m3_154 [cluster="Unk.BeGreaterThan", file="ParserTests.cs", label="Entry Unk.BeGreaterThan", span=""];
m3_48 [cluster="Ninject.Parameters.PropertyValue.PropertyValue(string, object)", file="ParserTests.cs", label="Entry Ninject.Parameters.PropertyValue.PropertyValue(string, object)", span="26-26"];
m3_51 [cluster="Ninject.Tests.Integration.WithParameterTests.PropertyValuesOverrideDefaultBinding()", file="ParserTests.cs", label="_kernel.Bind<IWarrior>().To<Ninja>()\r\n                .WithParameter(new PropertyValue(''SecondaryWeapon'', context => new Sword()))\r\n                .WithParameter(new PropertyValue(''SecretWeapon'', context => new Sword()))", span="66-68"];
m3_52 [cluster="Ninject.Tests.Integration.WithParameterTests.PropertyValuesOverrideDefaultBinding()", file="ParserTests.cs", label="var warrior = _kernel.Get<IWarrior>()", span="69-69"];
m3_50 [cluster="Ninject.Tests.Integration.WithParameterTests.PropertyValuesOverrideDefaultBinding()", file="ParserTests.cs", label="_kernel.Settings.InjectNonPublic = true", span="65-65"];
m3_49 [cluster="Ninject.Tests.Integration.WithParameterTests.PropertyValuesOverrideDefaultBinding()", file="ParserTests.cs", label="Entry Ninject.Tests.Integration.WithParameterTests.PropertyValuesOverrideDefaultBinding()", span="63-63"];
m3_53 [cluster="Ninject.Tests.Integration.WithParameterTests.PropertyValuesOverrideDefaultBinding()", file="ParserTests.cs", label="ValidateNinjaWarriorWithOverides(warrior)", span="70-70"];
m3_211 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", span="358-358"];
m3_218 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="ParserTests.cs", label="lines[1].ShouldBeEquivalentTo(''Copyright (c) 2005 - 2015 Giacomo Stelluti Scala'')", span="371-371"];
m3_219 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="ParserTests.cs", label="lines[2].ShouldBeEquivalentTo(''add        Add file contents to the index.'')", span="372-372"];
m3_220 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="ParserTests.cs", label="lines[3].ShouldBeEquivalentTo(''commit     Record changes to the repository.'')", span="373-373"];
m3_221 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="ParserTests.cs", label="lines[4].ShouldBeEquivalentTo(''clone      Clone a repository into a new directory.'')", span="374-374"];
m3_222 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="ParserTests.cs", label="lines[5].ShouldBeEquivalentTo(''help       Display more information on a specific command.'')", span="375-375"];
m3_223 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="ParserTests.cs", label="lines[6].ShouldBeEquivalentTo(''version    Display version information.'')", span="376-376"];
m3_216 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="ParserTests.cs", label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="369-369"];
m3_217 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="ParserTests.cs", label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="370-370"];
m3_215 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="ParserTests.cs", label="var result = help.ToString()", span="366-366"];
m3_213 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="ParserTests.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="362-362"];
m3_214 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="ParserTests.cs", label="sut.ParseArguments<Add_Verb, Commit_Verb, Clone_Verb>(new[] { ''--help'' })", span="365-365"];
m3_212 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="ParserTests.cs", label="var help = new StringWriter()", span="361-361"];
m3_224 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="ParserTests.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", span="358-358"];
m3_361 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="547-547"];
m3_11 [cluster="Unk.True", file="ParserTests.cs", label="Entry Unk.True", span=""];
m3_12 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="20-20"];
m3_26 [cluster="lambda expression", file="ParserTests.cs", label="with.HelpWriter = writer", span="36-36"];
m3_30 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", file="ParserTests.cs", label="var sut = new Parser(with => with.HelpWriter = writer)", span="52-52"];
m3_27 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="36-36"];
m3_28 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", span="48-48"];
m3_31 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", file="ParserTests.cs", label="sut.ParseArguments<Add_Verb, Commit_Verb, Clone_Verb>(new string[] { })", span="55-55"];
m3_32 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", file="ParserTests.cs", label="var text = writer.ToString()", span="58-58"];
m3_41 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options()", file="ParserTests.cs", label="var sut = new Parser()", span="68-68"];
m3_40 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options()", file="ParserTests.cs", label="var expectedOptions = new Simple_Options { StringValue = ''strvalue'', IntSequence = new[] { 1, 2, 3 } }", span="67-67"];
m3_42 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options()", file="ParserTests.cs", label="var result = sut.ParseArguments<Simple_Options>(new[] { ''--stringvalue=strvalue'', ''-i1'', ''2'', ''3'' })", span="71-71"];
m3_371 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="575-575"];
m3_374 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="576-576"];
m3_372 [cluster="lambda expression", color=green, community=0, file="ParserTests.cs", label="expected = opts.WebUrl", prediction=2, span="575-575"];
m3_373 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="575-575"];
m3_375 [cluster="lambda expression", color=green, community=0, file="ParserTests.cs", label="expected = ''changed''", prediction=3, span="576-576"];
m3_376 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="576-576"];
m3_330 [cluster="lambda expression", file="ParserTests.cs", label="opts.ShouldBeEquivalentTo(expected)", span="518-518"];
m3_342 [cluster="lambda expression", file="ParserTests.cs", label="opts.ShouldBeEquivalentTo(expected)", span="537-537"];
m3_105 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="202-202"];
m3_120 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="245-245"];
m3_329 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="518-518"];
m3_331 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="518-518"];
m3_341 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="537-537"];
m3_343 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="537-537"];
m3_140 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="275-275"];
m3_143 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="276-276"];
m3_156 [cluster="lambda expression", file="ParserTests.cs", label="config.HelpWriter = help", span="285-285"];
m3_166 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="307-307"];
m3_169 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="308-308"];
m3_186 [cluster="lambda expression", file="ParserTests.cs", label="config.HelpWriter = help", span="317-317"];
m3_262 [cluster="lambda expression", file="ParserTests.cs", label="config.HelpWriter = help", span="406-406"];
m3_327 [cluster="lambda expression", file="ParserTests.cs", label="config.IgnoreUnknownArguments = true", span="511-511"];
m3_96 [cluster="lambda expression", file="ParserTests.cs", label="Ninject.Tests.Integration.WithPropertyValueTests", span=""];
m3_107 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="202-202"];
m3_106 [cluster="lambda expression", file="ParserTests.cs", label="o.RespectingRuntimeTypes()", span="202-202"];
m3_122 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="245-245"];
m3_121 [cluster="lambda expression", file="ParserTests.cs", label="o.RespectingRuntimeTypes()", span="245-245"];
m3_144 [cluster="lambda expression", file="ParserTests.cs", label="e.Equals(expectedError)", span="276-276"];
m3_142 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="275-275"];
m3_141 [cluster="lambda expression", file="ParserTests.cs", label="x == 1", span="275-275"];
m3_145 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="276-276"];
m3_155 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="285-285"];
m3_157 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="285-285"];
m3_170 [cluster="lambda expression", file="ParserTests.cs", label="e.Equals(expectedError)", span="308-308"];
m3_168 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="307-307"];
m3_167 [cluster="lambda expression", file="ParserTests.cs", label="x == 1", span="307-307"];
m3_171 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="308-308"];
m3_185 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="317-317"];
m3_187 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="317-317"];
m3_261 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="406-406"];
m3_263 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="406-406"];
m3_326 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="511-511"];
m3_328 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="511-511"];
m3_80 [cluster="Ninject.Tests.Integration.PropertyInjectionTests.ValidateWarrior(Ninject.Tests.Fakes.IWarrior)", file="ParserTests.cs", label="Exit Ninject.Tests.Integration.PropertyInjectionTests.ValidateWarrior(Ninject.Tests.Fakes.IWarrior)", span="103-103"];
m3_339 [cluster="lambda expression", file="ParserTests.cs", label="config.IgnoreUnknownArguments = true", span="530-530"];
m3_37 [cluster="Ninject.Tests.Integration.WithParameterTests.PropertyValueIsAssignedWhenNoInjectAttributeIsSuppliedUsingCallback()", file="ParserTests.cs", label="Exit Ninject.Tests.Integration.WithParameterTests.PropertyValueIsAssignedWhenNoInjectAttributeIsSuppliedUsingCallback()", span="44-44"];
m3_209 [cluster="lambda expression", file="ParserTests.cs", label="config.HelpWriter = help", span="336-336"];
m3_226 [cluster="lambda expression", file="ParserTests.cs", label="config.HelpWriter = help", span="362-362"];
m3_239 [cluster="lambda expression", file="ParserTests.cs", label="config.HelpWriter = help", span="387-387"];
m3_272 [cluster="lambda expression", file="ParserTests.cs", label="config.HelpWriter = help", span="432-432"];
m3_299 [cluster="lambda expression", file="ParserTests.cs", label="config.HelpWriter = help", span="448-448"];
m3_317 [cluster="lambda expression", file="ParserTests.cs", label="config.HelpWriter = help", span="483-483"];
m3_362 [cluster="lambda expression", file="ParserTests.cs", label="config.HelpWriter = help", span="547-547"];
m3_188 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="326-326"];
m3_241 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="396-396"];
m3_79 [cluster="Ninject.Tests.Integration.PropertyInjectionTests.ValidateWarrior(Ninject.Tests.Fakes.IWarrior)", file="ParserTests.cs", label="Assert.IsType<Shuriken>(warrior.Weapon)", span="107-107"];
m3_81 [cluster="Unk.NotNull", file="ParserTests.cs", label="Entry Unk.NotNull", span=""];
m3_338 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="530-530"];
m3_340 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="530-530"];
m3_36 [cluster="Ninject.Tests.Integration.WithParameterTests.PropertyValueIsAssignedWhenNoInjectAttributeIsSuppliedUsingCallback()", file="ParserTests.cs", label="ValidateWarrior(warrior)", span="49-49"];
m3_38 [cluster="Ninject.Parameters.PropertyValue.PropertyValue(string, System.Func<Ninject.Activation.IContext, object>)", file="ParserTests.cs", label="Entry Ninject.Parameters.PropertyValue.PropertyValue(string, System.Func<Ninject.Activation.IContext, object>)", span="33-33"];
m3_208 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="336-336"];
m3_210 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="336-336"];
m3_225 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="362-362"];
m3_227 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="362-362"];
m3_238 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="387-387"];
m3_240 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="387-387"];
m3_271 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="432-432"];
m3_273 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="432-432"];
m3_298 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="448-448"];
m3_300 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="448-448"];
m3_316 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="483-483"];
m3_318 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="483-483"];
m3_363 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="547-547"];
m3_190 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="326-326"];
m3_189 [cluster="lambda expression", file="ParserTests.cs", label="x == 1", span="326-326"];
m3_242 [cluster="lambda expression", file="ParserTests.cs", label="x == 1", span="396-396"];
m3_243 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="396-396"];
m3_54 [cluster="CommandLine.Tests.Fakes.Options_With_Switches.Options_With_Switches()", file="ParserTests.cs", label="Entry CommandLine.Tests.Fakes.Options_With_Switches.Options_With_Switches()", span="4-4"];
m3_33 [cluster="Ninject.Tests.Integration.WithParameterTests.PropertyValueIsAssignedWhenNoInjectAttributeIsSuppliedUsingCallback()", file="ParserTests.cs", label="Entry Ninject.Tests.Integration.WithParameterTests.PropertyValueIsAssignedWhenNoInjectAttributeIsSuppliedUsingCallback()", span="44-44"];
m3_29 [cluster="Ninject.Tests.Fakes.Sword.Sword()", file="ParserTests.cs", label="Entry Ninject.Tests.Fakes.Sword.Sword()", span="4-4"];
m3_34 [cluster="Ninject.Tests.Integration.WithParameterTests.PropertyValueIsAssignedWhenNoInjectAttributeIsSuppliedUsingCallback()", file="ParserTests.cs", label="_kernel.Bind<IWarrior>().To<FootSoldier>()\r\n                .WithParameter(new PropertyValue(''Weapon'', context => context.Kernel.Get<IWeapon>()))", span="46-47"];
m3_146 [cluster="Unk.Equals", file="ParserTests.cs", label="Entry Unk.Equals", span=""];
m3_184 [cluster="Unk.StartWithEquivalent", file="ParserTests.cs", label="Entry Unk.StartWithEquivalent", span=""];
m3_39 [cluster="Ninject.Syntax.IBindingWithSyntax<T>.WithParameter(Ninject.Parameters.IParameter)", file="ParserTests.cs", label="Entry Ninject.Syntax.IBindingWithSyntax<T>.WithParameter(Ninject.Parameters.IParameter)", span="246-246"];
m3_43 [cluster="Ninject.Tests.Integration.WithParameterTests.PropertyValueIsAssignedWhenNoInjectAttributeUsingSuppliedValue()", file="ParserTests.cs", label="Entry Ninject.Tests.Integration.WithParameterTests.PropertyValueIsAssignedWhenNoInjectAttributeUsingSuppliedValue()", span="53-53"];
m3_44 [cluster="Ninject.Tests.Integration.WithParameterTests.PropertyValueIsAssignedWhenNoInjectAttributeUsingSuppliedValue()", file="ParserTests.cs", label="_kernel.Bind<IWarrior>().To<FootSoldier>()\r\n                .WithParameter(new PropertyValue(''Weapon'', _kernel.Get<IWeapon>()))", span="55-56"];
m3_172 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", span="313-313"];
m3_175 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="ParserTests.cs", label="sut.ParseArguments<Simple_Options>(new[] { ''--version'' })", span="320-320"];
m3_174 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="ParserTests.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="317-317"];
m3_176 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="ParserTests.cs", label="var result = help.ToString()", span="321-321"];
m3_173 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="ParserTests.cs", label="var help = new StringWriter()", span="316-316"];
m3_177 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="ParserTests.cs", label="result.Length.Should().BeGreaterThan(0)", span="324-324"];
m3_178 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="ParserTests.cs", label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="325-325"];
m3_179 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="ParserTests.cs", label="lines.Should().HaveCount(x => x == 1)", span="326-326"];
m3_180 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="ParserTests.cs", label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="327-327"];
m3_181 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="ParserTests.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", span="313-313"];
m3_370 [cluster="CommandLine.ParserResult<T>.WithNotParsed<T>(System.Action<System.Collections.Generic.IEnumerable<CommandLine.Error>>)", file="ParserTests.cs", label="Entry CommandLine.ParserResult<T>.WithNotParsed<T>(System.Action<System.Collections.Generic.IEnumerable<CommandLine.Error>>)", span="58-58"];
m3_19 [cluster="Ninject.Tests.Integration.WithPropertyValueTests.PropertyValuesOverrideDefaultBinding()", file="ParserTests.cs", label="Entry Ninject.Tests.Integration.WithPropertyValueTests.PropertyValuesOverrideDefaultBinding()", span="29-29"];
m3_20 [cluster="Ninject.Tests.Integration.WithPropertyValueTests.PropertyValuesOverrideDefaultBinding()", file="ParserTests.cs", label="_kernel.Settings.InjectNonPublic = true", span="31-31"];
m3_18 [cluster="Ninject.Syntax.IBindingWithSyntax<T>.WithPropertyValue(string, object)", file="ParserTests.cs", label="Entry Ninject.Syntax.IBindingWithSyntax<T>.WithPropertyValue(string, object)", span="233-233"];
m3_21 [cluster="Ninject.Tests.Integration.WithPropertyValueTests.PropertyValuesOverrideDefaultBinding()", file="ParserTests.cs", label="_kernel.Bind<IWarrior>().To<Ninja>()\r\n                .WithPropertyValue(''SecondaryWeapon'', context => new Sword())\r\n                .WithPropertyValue(''SecretWeapon'', context => new Sword())", span="32-34"];
m3_45 [cluster="CommandLine.Tests.Fakes.Simple_Options.Simple_Options()", file="ParserTests.cs", label="Entry CommandLine.Tests.Fakes.Simple_Options.Simple_Options()", span="6-6"];
m3_46 [cluster="CommandLine.Parser.Parser()", file="ParserTests.cs", label="Entry CommandLine.Parser.Parser()", span="26-26"];
m3_182 [cluster="string.ToNotEmptyLines()", file="ParserTests.cs", label="Entry string.ToNotEmptyLines()", span="10-10"];
m3_130 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", span="265-265"];
m3_133 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="ParserTests.cs", label="var result = sut.ParseArguments<Immutable_Simple_Options>(new[] { ''--help'' })", span="272-272"];
m3_132 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="ParserTests.cs", label="var sut = new Parser()", span="269-269"];
m3_134 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="ParserTests.cs", label="((NotParsed<Immutable_Simple_Options>)result).Errors.Should().HaveCount(x => x == 1)", span="275-275"];
m3_135 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="ParserTests.cs", label="((NotParsed<Immutable_Simple_Options>)result).Errors.Should().ContainSingle(e => e.Equals(expectedError))", span="276-276"];
m3_131 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="ParserTests.cs", label="var expectedError = new HelpRequestedError()", span="268-268"];
m3_136 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="ParserTests.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", span="265-265"];
m3_22 [cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="ParserTests.cs", label="Entry CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", span="144-144"];
m3_23 [cluster="Unk.Should", file="ParserTests.cs", label="Entry Unk.Should", span=""];
m3_24 [cluster="Unk.NotBeEmpty", file="ParserTests.cs", label="Entry Unk.NotBeEmpty", span=""];
m3_139 [cluster="Unk.ContainSingle", file="ParserTests.cs", label="Entry Unk.ContainSingle", span=""];
m3_78 [cluster="Ninject.Tests.Integration.PropertyInjectionTests.ValidateWarrior(Ninject.Tests.Fakes.IWarrior)", file="ParserTests.cs", label="Assert.NotNull(warrior.Weapon)", span="106-106"];
m3_113 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", span="223-223"];
m3_118 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="ParserTests.cs", label="((Parsed<object>)result).Value.ShouldBeEquivalentTo(expectedOptions, o => o.RespectingRuntimeTypes())", span="245-245"];
m3_114 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="ParserTests.cs", label="var expectedOptions = new Clone_Verb\r\n                                  {\r\n                                      Quiet = true,\r\n                                      Urls =\r\n                                          new[]\r\n                                          {\r\n                                              ''http://gsscoder.github.com/'',\r\n                                              ''http://yes-to-nooo.github.com/''\r\n                                          }\r\n                                  }", span="226-235"];
m3_116 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="ParserTests.cs", label="var result =\r\n                sut.ParseArguments<Add_Verb, Commit_Verb, Clone_Verb>(\r\n                    new[] { ''clone'', ''-q'', ''http://gsscoder.github.com/'', ''http://yes-to-nooo.github.com/'' })", span="239-241"];
m3_117 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="ParserTests.cs", label="Assert.IsType<Clone_Verb>(((Parsed<object>)result).Value)", span="244-244"];
m3_115 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="ParserTests.cs", label="var sut = new Parser()", span="236-236"];
m3_119 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="ParserTests.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", span="223-223"];
m3_183 [cluster="System.Collections.Generic.IEnumerable<string>.TrimStringArray()", file="ParserTests.cs", label="Entry System.Collections.Generic.IEnumerable<string>.TrimStringArray()", span="15-15"];
m3_158 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", span="297-297"];
m3_161 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="ParserTests.cs", label="var result = sut.ParseArguments<Simple_Options>(new[] { ''--version'' })", span="304-304"];
m3_160 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="ParserTests.cs", label="var sut = new Parser()", span="301-301"];
m3_162 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="ParserTests.cs", label="((NotParsed<Simple_Options>)result).Errors.Should().HaveCount(x => x == 1)", span="307-307"];
m3_163 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="ParserTests.cs", label="((NotParsed<Simple_Options>)result).Errors.Should().ContainSingle(e => e.Equals(expectedError))", span="308-308"];
m3_159 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="ParserTests.cs", label="var expectedError = new VersionRequestedError()", span="300-300"];
m3_164 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="ParserTests.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", span="297-297"];
m3_244 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", span="402-402"];
m3_247 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs", label="sut.ParseArguments<Options_With_Two_Option_Required_Set_To_True_And_Two_Sets>(new[] { ''--weburl=value.com'', ''--ftpurl=value.org'' })", span="409-409"];
m3_251 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs", label="lines[1].ShouldBeEquivalentTo(''Copyright (c) 2005 - 2015 Giacomo Stelluti Scala'')", span="415-415"];
m3_252 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs", label="lines[2].ShouldBeEquivalentTo(''ERROR(S):'')", span="416-416"];
m3_253 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs", label="lines[3].ShouldBeEquivalentTo(''Option: 'weburl' is not compatible with: 'ftpurl'.'')", span="417-417"];
m3_254 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs", label="lines[4].ShouldBeEquivalentTo(''Option: 'ftpurl' is not compatible with: 'weburl'.'')", span="418-418"];
m3_255 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs", label="lines[5].ShouldBeEquivalentTo(''--weburl     Required.'')", span="419-419"];
m3_256 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs", label="lines[6].ShouldBeEquivalentTo(''--ftpurl     Required.'')", span="420-420"];
m3_257 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs", label="lines[7].ShouldBeEquivalentTo(''-a'')", span="421-421"];
m3_258 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs", label="lines[8].ShouldBeEquivalentTo(''--help       Display this help screen.'')", span="422-422"];
m3_259 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs", label="lines[9].ShouldBeEquivalentTo(''--version    Display version information.'')", span="423-423"];
m3_246 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="406-406"];
m3_248 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs", label="var result = help.ToString()", span="410-410"];
m3_249 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs", label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="413-413"];
m3_250 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs", label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="414-414"];
m3_245 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs", label="var help = new StringWriter()", span="405-405"];
m3_260 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", span="402-402"];
m3_9 [cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", file="ParserTests.cs", label="Entry CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", span="85-85"];
m3_138 [cluster="Unk.HaveCount", file="ParserTests.cs", label="Entry Unk.HaveCount", span=""];
m3_344 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", span="543-543"];
m3_351 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs", label="lines[1].ShouldBeEquivalentTo(''Copyright (c) 2005 - 2015 Giacomo Stelluti Scala'')", span="557-557"];
m3_352 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs", label="lines[2].ShouldBeEquivalentTo(''ERROR(S):'')", span="558-558"];
m3_353 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs", label="lines[3].ShouldBeEquivalentTo(''Option 'bad-arg' is unknown.'')", span="559-559"];
m3_354 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs", label="lines[4].ShouldBeEquivalentTo(''--no-hardlinks    Optimize the cloning process from a repository on a local'')", span="560-560"];
m3_355 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs", label="lines[5].ShouldBeEquivalentTo(''filesystem by copying files.'')", span="561-561"];
m3_356 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs", label="lines[6].ShouldBeEquivalentTo(''-q, --quiet       Suppress summary message.'')", span="562-562"];
m3_357 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs", label="lines[7].ShouldBeEquivalentTo(''--help            Display this help screen.'')", span="563-563"];
m3_358 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs", label="lines[8].ShouldBeEquivalentTo(''--version         Display version information.'')", span="564-564"];
m3_359 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs", label="lines[9].ShouldBeEquivalentTo(''value pos. 0'')", span="565-565"];
m3_349 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs", label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="555-555"];
m3_350 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs", label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="556-556"];
m3_348 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs", label="var result = help.ToString()", span="552-552"];
m3_346 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="547-547"];
m3_347 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs", label="sut.ParseArguments<Add_Verb, Commit_Verb, Clone_Verb>(\r\n                new[] { ''clone'', ''--bad-arg'', ''--help'' })", span="550-551"];
m3_345 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs", label="var help = new StringWriter()", span="546-546"];
m3_360 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", span="543-543"];
m3_301 [cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", span="479-479"];
m3_308 [cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="ParserTests.cs", label="lines[1].ShouldBeEquivalentTo(''Copyright (c) 2005 - 2015 Giacomo Stelluti Scala'')", span="493-493"];
m3_309 [cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="ParserTests.cs", label="lines[2].ShouldBeEquivalentTo(''--no-hardlinks    Optimize the cloning process from a repository on a local'')", span="494-494"];
m3_310 [cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="ParserTests.cs", label="lines[3].ShouldBeEquivalentTo(''filesystem by copying files.'')", span="495-495"];
m3_311 [cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="ParserTests.cs", label="lines[4].ShouldBeEquivalentTo(''-q, --quiet       Suppress summary message.'')", span="496-496"];
m3_312 [cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="ParserTests.cs", label="lines[5].ShouldBeEquivalentTo(''--help            Display this help screen.'')", span="497-497"];
m3_313 [cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="ParserTests.cs", label="lines[6].ShouldBeEquivalentTo(''--version         Display version information.'')", span="498-498"];
m3_314 [cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="ParserTests.cs", label="lines[7].ShouldBeEquivalentTo(''value pos. 0'')", span="499-499"];
m3_306 [cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="ParserTests.cs", label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="491-491"];
m3_307 [cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="ParserTests.cs", label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="492-492"];
m3_305 [cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="ParserTests.cs", label="var result = help.ToString()", span="488-488"];
m3_303 [cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="ParserTests.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="483-483"];
m3_304 [cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="ParserTests.cs", label="sut.ParseArguments<Add_Verb, Commit_Verb, Clone_Verb>(\r\n                new[] { ''help'', ''clone'', ''extra-arg'' })", span="486-487"];
m3_302 [cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="ParserTests.cs", label="var help = new StringWriter()", span="482-482"];
m3_315 [cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="ParserTests.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", span="479-479"];
m3_191 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", span="332-332"];
m3_199 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs", label="lines[1].ShouldBeEquivalentTo(''Copyright (c) 2005 - 2015 Giacomo Stelluti Scala'')", span="346-346"];
m3_200 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs", label="lines[2].ShouldBeEquivalentTo(''ERROR(S):'')", span="347-347"];
m3_201 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs", label="lines[3].ShouldBeEquivalentTo(''No verb selected.'')", span="348-348"];
m3_202 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs", label="lines[4].ShouldBeEquivalentTo(''add        Add file contents to the index.'')", span="349-349"];
m3_203 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs", label="lines[5].ShouldBeEquivalentTo(''commit     Record changes to the repository.'')", span="350-350"];
m3_204 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs", label="lines[6].ShouldBeEquivalentTo(''clone      Clone a repository into a new directory.'')", span="351-351"];
m3_205 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs", label="lines[7].ShouldBeEquivalentTo(''help       Display more information on a specific command.'')", span="352-352"];
m3_206 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs", label="lines[8].ShouldBeEquivalentTo(''version    Display version information.'')", span="353-353"];
m3_197 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs", label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="344-344"];
m3_198 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs", label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="345-345"];
m3_195 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs", label="var result = help.ToString()", span="340-340"];
m3_196 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs", label="result.Length.Should().BeGreaterThan(0)", span="343-343"];
m3_193 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="336-336"];
m3_194 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs", label="sut.ParseArguments<Add_Verb, Commit_Verb, Clone_Verb>(new string[] { })", span="339-339"];
m3_192 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs", label="var help = new StringWriter()", span="335-335"];
m3_207 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", span="332-332"];
m3_274 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", span="444-444"];
m3_281 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs", label="lines[1].ShouldBeEquivalentTo(''Copyright (c) 2005 - 2015 Giacomo Stelluti Scala'')", span="458-458"];
m3_282 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs", label="lines[2].ShouldBeEquivalentTo(''ERROR(S):'')", span="459-459"];
m3_283 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs", label="lines[3].ShouldBeEquivalentTo(''Option 'badoption' is unknown.'')", span="460-460"];
m3_284 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs", label="lines[4].ShouldBeEquivalentTo(''USAGE:'')", span="461-461"];
m3_285 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs", label="lines[5].ShouldBeEquivalentTo(''Basic cloning:'')", span="462-462"];
m3_286 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs", label="lines[6].ShouldBeEquivalentTo(''git clone https://github.com/gsscoder/csharpx'')", span="463-463"];
m3_287 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs", label="lines[7].ShouldBeEquivalentTo(''Cloning quietly:'')", span="464-464"];
m3_288 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs", label="lines[8].ShouldBeEquivalentTo(''git clone --quiet https://github.com/gsscoder/railwaysharp'')", span="465-465"];
m3_289 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs", label="lines[9].ShouldBeEquivalentTo(''Cloning without hard links:'')", span="466-466"];
m3_290 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs", label="lines[10].ShouldBeEquivalentTo(''git clone --no-hardlinks https://github.com/gsscoder/csharpx'')", span="467-467"];
m3_291 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs", label="lines[11].ShouldBeEquivalentTo(''--no-hardlinks    Optimize the cloning process from a repository on a local'')", span="468-468"];
m3_292 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs", label="lines[12].ShouldBeEquivalentTo(''filesystem by copying files.'')", span="469-469"];
m3_293 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs", label="lines[13].ShouldBeEquivalentTo(''-q, --quiet       Suppress summary message.'')", span="470-470"];
m3_294 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs", label="lines[14].ShouldBeEquivalentTo(''--help            Display this help screen.'')", span="471-471"];
m3_295 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs", label="lines[15].ShouldBeEquivalentTo(''--version         Display version information.'')", span="472-472"];
m3_296 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs", label="lines[16].ShouldBeEquivalentTo(''URLS (pos. 0)     A list of url(s) to clone.'')", span="473-473"];
m3_279 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs", label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="456-456"];
m3_280 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs", label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="457-457"];
m3_278 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs", label="var result = help.ToString()", span="453-453"];
m3_276 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="448-448"];
m3_277 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs", label="sut.ParseArguments<Add_Verb_With_Usage_Attribute, Commit_Verb_With_Usage_Attribute, Clone_Verb_With_Usage_Attribute>(\r\n                new[] { ''clone'', ''--badoption=@bad?value'' })", span="451-452"];
m3_275 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs", label="var help = new StringWriter()", span="447-447"];
m3_297 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", span="444-444"];
m3_332 [cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.Commit_Verb)", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.Commit_Verb)", span="525-525"];
m3_335 [cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.Commit_Verb)", file="ParserTests.cs", label="result.Tag.ShouldBeEquivalentTo(ParserResultType.Parsed)", span="536-536"];
m3_334 [cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.Commit_Verb)", file="ParserTests.cs", label="var result = sut.ParseArguments<Add_Verb, Commit_Verb, Clone_Verb>(arguments)", span="533-533"];
m3_336 [cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.Commit_Verb)", file="ParserTests.cs", label="result.WithParsed(opts => opts.ShouldBeEquivalentTo(expected))", span="537-537"];
m3_333 [cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.Commit_Verb)", file="ParserTests.cs", label="var sut = new Parser(config => config.IgnoreUnknownArguments = true)", span="530-530"];
m3_337 [cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.Commit_Verb)", file="ParserTests.cs", label="Exit CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.Commit_Verb)", span="525-525"];
m3_264 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", span="428-428"];
m3_266 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", file="ParserTests.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="432-432"];
m3_268 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", file="ParserTests.cs", label="var result = help.ToString()", span="436-436"];
m3_269 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", file="ParserTests.cs", label="result.Length.Should().BeGreaterThan(0)", span="439-439"];
m3_267 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", file="ParserTests.cs", label="sut.ParseArguments<Add_Verb, Commit_Verb, Clone_Verb>(new[] { ''commit'', ''--help'' })", span="435-435"];
m3_265 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", file="ParserTests.cs", label="var help = new StringWriter()", span="431-431"];
m3_270 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", file="ParserTests.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", span="428-428"];
m3_364 [cluster="CommandLine.Tests.Unit.ParserTests.Breaking_mutually_exclusive_set_constraint_with_set_name_with_partial_string_right_side_equality_gererates_MissingValueOptionError()", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Breaking_mutually_exclusive_set_constraint_with_set_name_with_partial_string_right_side_equality_gererates_MissingValueOptionError()", span="571-571"];
m3_365 [cluster="CommandLine.Tests.Unit.ParserTests.Breaking_mutually_exclusive_set_constraint_with_set_name_with_partial_string_right_side_equality_gererates_MissingValueOptionError()", color=green, community=0, file="ParserTests.cs", label="var expected = string.Empty", prediction=4, span="573-573"];
m3_366 [cluster="CommandLine.Tests.Unit.ParserTests.Breaking_mutually_exclusive_set_constraint_with_set_name_with_partial_string_right_side_equality_gererates_MissingValueOptionError()", color=green, community=0, file="ParserTests.cs", label="Parser.Default.ParseArguments<Options_With_SetName_That_Ends_With_Previous_SetName>(new[] { ''--weburl'', ''value'', ''--somethingelse'', ''othervalue'' })\r\n                .WithParsed(opts => expected = opts.WebUrl)\r\n                .WithNotParsed(err => expected = ''changed'')", prediction=5, span="574-576"];
m3_367 [cluster="CommandLine.Tests.Unit.ParserTests.Breaking_mutually_exclusive_set_constraint_with_set_name_with_partial_string_right_side_equality_gererates_MissingValueOptionError()", color=green, community=0, file="ParserTests.cs", label="''changed''.ShouldBeEquivalentTo(expected)", prediction=6, span="578-578"];
m3_368 [cluster="CommandLine.Tests.Unit.ParserTests.Breaking_mutually_exclusive_set_constraint_with_set_name_with_partial_string_right_side_equality_gererates_MissingValueOptionError()", file="ParserTests.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Breaking_mutually_exclusive_set_constraint_with_set_name_with_partial_string_right_side_equality_gererates_MissingValueOptionError()", span="571-571"];
m3_165 [cluster="CommandLine.VersionRequestedError.VersionRequestedError()", file="ParserTests.cs", label="Entry CommandLine.VersionRequestedError.VersionRequestedError()", span="457-457"];
m3_123 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", span="250-250"];
m3_126 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", file="ParserTests.cs", label="var result = sut.ParseArguments<Immutable_Simple_Options>(new[] { ''--stringvalue=strvalue'', ''-i1'', ''2'', ''3'' })", span="257-257"];
m3_127 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", file="ParserTests.cs", label="((Parsed<Immutable_Simple_Options>)result).Value.ShouldBeEquivalentTo(expectedOptions)", span="260-260"];
m3_125 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", file="ParserTests.cs", label="var sut = new Parser()", span="254-254"];
m3_124 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", file="ParserTests.cs", label="var expectedOptions = new Immutable_Simple_Options(''strvalue'', new[] { 1, 2, 3 }, default(bool), default(long))", span="253-253"];
m3_128 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", file="ParserTests.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", span="250-250"];
m3_104 [cluster="CommandLine.Tests.Fakes.Commit_Verb.Commit_Verb()", file="ParserTests.cs", label="Entry CommandLine.Tests.Fakes.Commit_Verb.Commit_Verb()", span="22-22"];
m3_325 [cluster="Unk.WithParsed", file="ParserTests.cs", label="Entry Unk.WithParsed", span=""];
m3_391 [file="ParserTests.cs", label="CommandLine.Tests.Fakes.Simple_Options", span=""];
m3_392 [file="ParserTests.cs", label="CommandLine.Tests.Fakes.Commit_Verb", span=""];
m3_377 [file="ParserTests.cs", label=writer, span=""];
m3_381 [file="ParserTests.cs", label=help, span=""];
m3_383 [file="ParserTests.cs", label=help, span=""];
m3_387 [file="ParserTests.cs", label=help, span=""];
m3_380 [file="ParserTests.cs", label=expectedError, span=""];
m3_382 [file="ParserTests.cs", label=expectedError, span=""];
m3_378 [file="ParserTests.cs", label=writer, span=""];
m3_379 [file="ParserTests.cs", label=writer, span=""];
m3_384 [file="ParserTests.cs", label=help, span=""];
m3_385 [file="ParserTests.cs", label=help, span=""];
m3_386 [file="ParserTests.cs", label=help, span=""];
m3_388 [file="ParserTests.cs", label=help, span=""];
m3_389 [file="ParserTests.cs", label=help, span=""];
m3_390 [file="ParserTests.cs", label=help, span=""];
m3_393 [file="ParserTests.cs", label=help, span=""];
m4_6 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="ResultExtensions.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m4_0 [cluster="CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ResultExtensions.cs", label="Entry CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", span="15-15"];
m4_1 [cluster="CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ResultExtensions.cs", label="result.Tag == ResultType.Ok", span="17-17"];
m4_2 [cluster="CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ResultExtensions.cs", label="var ok = (Ok<TSuccess, TMessage>)result", span="19-19"];
m4_4 [cluster="CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ResultExtensions.cs", label="return Enumerable.Empty<TMessage>();", span="22-22"];
m4_3 [cluster="CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", color=green, community=0, file="ResultExtensions.cs", label="return ok.Messages;", prediction=7, span="20-20"];
m4_5 [cluster="CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ResultExtensions.cs", label="Exit CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", span="15-15"];
m4_13 [cluster="CSharpx.Maybe.Just<T>(T)", file="ResultExtensions.cs", label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124"];
m4_7 [cluster="CommandLine.Infrastructure.ResultExtensions.ToMaybe<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ResultExtensions.cs", label="Entry CommandLine.Infrastructure.ResultExtensions.ToMaybe<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", span="25-25"];
m4_8 [cluster="CommandLine.Infrastructure.ResultExtensions.ToMaybe<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ResultExtensions.cs", label="result.Tag == ResultType.Ok", span="27-27"];
m4_9 [cluster="CommandLine.Infrastructure.ResultExtensions.ToMaybe<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ResultExtensions.cs", label="var ok = (Ok<TSuccess, TMessage>)result", span="29-29"];
m4_11 [cluster="CommandLine.Infrastructure.ResultExtensions.ToMaybe<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ResultExtensions.cs", label="return Maybe.Nothing<TSuccess>();", span="32-32"];
m4_10 [cluster="CommandLine.Infrastructure.ResultExtensions.ToMaybe<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", color=green, community=0, file="ResultExtensions.cs", label="return Maybe.Just(ok.Success);", prediction=8, span="30-30"];
m4_12 [cluster="CommandLine.Infrastructure.ResultExtensions.ToMaybe<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ResultExtensions.cs", label="Exit CommandLine.Infrastructure.ResultExtensions.ToMaybe<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", span="25-25"];
m4_14 [cluster="CSharpx.Maybe.Nothing<T>()", file="ResultExtensions.cs", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
m6_11 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="TokenizerTests.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m6_20 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", span="44-44"];
m6_24 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", color=green, community=0, file="TokenizerTests.cs", label="((Ok<IEnumerable<Token>, Error>)result).Value.Success.ShouldBeEquivalentTo(expectedTokens)", prediction=9, span="62-62"];
m6_21 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TokenizerTests.cs", label="var expectedTokens = new[] { Token.Name(''x''), Token.Name(''string-seq''),\r\n                Token.Value(''aaa''), Token.Value(''bb''),  Token.Value(''cccc''), Token.Name(''switch'') }", span="47-48"];
m6_23 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TokenizerTests.cs", label="var result =\r\n                Tokenizer.ExplodeOptionList(\r\n                    Result.Succeed(\r\n                        Enumerable.Empty<Token>().Concat(new[] { Token.Name(''x''),\r\n                            Token.Name(''string-seq''), Token.Value(''aaa,bb,cccc''), Token.Name(''switch'') }),\r\n                        Enumerable.Empty<Error>()),\r\n                        optionName => NameLookup.HavingSeparator(optionName, specs, StringComparer.InvariantCulture))", span="53-59"];
m6_22 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TokenizerTests.cs", label="var specs = new[] { new OptionSpecification(string.Empty, ''string-seq'',\r\n                false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), ',', null, string.Empty, string.Empty, new List<string>(), typeof(IEnumerable<string>), TargetType.Sequence)}", span="49-50"];
m6_25 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", span="44-44"];
m6_35 [cluster="CommandLine.Core.Token.Value(string, bool)", file="TokenizerTests.cs", label="Entry CommandLine.Core.Token.Value(string, bool)", span="29-29"];
m6_29 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", span="68-68"];
m6_33 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", file="TokenizerTests.cs", label="result.ShouldBeEquivalentTo(expectedTokens)", span="90-90"];
m6_30 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", file="TokenizerTests.cs", label="var expectedTokens = new[] {\r\n                Token.Name(''x''), Token.Name(''string-seq''), Token.Value(''aaa''), Token.Value(''bb''),\r\n                Token.Name(''unknown''), Token.Name(''switch'') }", span="71-73"];
m6_32 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", file="TokenizerTests.cs", label="var result =\r\n                Tokenizer.Normalize(\r\n                    //Result.Succeed(\r\n                        Enumerable.Empty<Token>()\r\n                            .Concat(\r\n                                new[] {\r\n                                    Token.Name(''x''), Token.Name(''string-seq''), Token.Value(''aaa''), Token.Value(''bb''),\r\n                                    Token.Name(''unknown''), Token.Value(''value0'', true), Token.Name(''switch'') })\r\n                        //,Enumerable.Empty<Error>()),\r\n                    ,nameLookup)", span="78-87"];
m6_31 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", file="TokenizerTests.cs", label="Func<string, bool> nameLookup =\r\n                name => name.Equals(''x'') || name.Equals(''string-seq'') || name.Equals(''switch'')", span="74-75"];
m6_34 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", span="68-68"];
m6_19 [cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TokenizerTests.cs", label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="27-27"];
m6_36 [cluster="CommandLine.Core.Tokenizer.Normalize(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, bool>)", file="TokenizerTests.cs", label="Entry CommandLine.Core.Tokenizer.Normalize(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, bool>)", span="78-78"];
m6_8 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", file="TokenizerTests.cs", label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", span="16-16"];
m6_0 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", span="20-20"];
m6_4 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", color=green, community=0, file="TokenizerTests.cs", label="((Ok<IEnumerable<Token>, Error>)result).Value.Success.ShouldBeEquivalentTo(expectedTokens)", prediction=10, span="38-38"];
m6_1 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="TokenizerTests.cs", label="var expectedTokens = new[] { Token.Name(''i''), Token.Value(''10''), Token.Name(''string-seq''),\r\n                Token.Value(''aaa''), Token.Value(''bb''),  Token.Value(''cccc''), Token.Name(''switch'') }", span="23-24"];
m6_3 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="TokenizerTests.cs", label="var result =\r\n                Tokenizer.ExplodeOptionList(\r\n                    Result.Succeed(\r\n                        Enumerable.Empty<Token>().Concat(new[] { Token.Name(''i''), Token.Value(''10''),\r\n                            Token.Name(''string-seq''), Token.Value(''aaa,bb,cccc''), Token.Name(''switch'') }),\r\n                        Enumerable.Empty<Error>()),\r\n                        optionName => NameLookup.HavingSeparator(optionName, specs, StringComparer.InvariantCulture))", span="29-35"];
m6_2 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="TokenizerTests.cs", label="var specs = new[] { new OptionSpecification(string.Empty, ''string-seq'',\r\n                false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), ',', null, string.Empty, string.Empty, new List<string>(), typeof(IEnumerable<string>), TargetType.Sequence)}", span="25-26"];
m6_5 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", span="20-20"];
m6_37 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="75-75"];
m6_16 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="35-35"];
m6_26 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="59-59"];
m6_17 [cluster="lambda expression", file="TokenizerTests.cs", label="NameLookup.HavingSeparator(optionName, specs, StringComparer.InvariantCulture)", span="35-35"];
m6_18 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="35-35"];
m6_27 [cluster="lambda expression", file="TokenizerTests.cs", label="NameLookup.HavingSeparator(optionName, specs, StringComparer.InvariantCulture)", span="59-59"];
m6_28 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="59-59"];
m6_38 [cluster="lambda expression", file="TokenizerTests.cs", label="name.Equals(''x'') || name.Equals(''string-seq'') || name.Equals(''switch'')", span="75-75"];
m6_39 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="75-75"];
m6_40 [cluster="string.Equals(string)", file="TokenizerTests.cs", label="Entry string.Equals(string)", span="0-0"];
m6_14 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="TokenizerTests.cs", label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", span="57-57"];
m6_6 [cluster="CommandLine.Core.Token.Name(string)", file="TokenizerTests.cs", label="Entry CommandLine.Core.Token.Name(string)", span="19-19"];
m6_9 [cluster="CSharpx.Maybe.Nothing<T>()", file="TokenizerTests.cs", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
m6_12 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="TokenizerTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
m6_7 [cluster="CommandLine.Core.Token.Value(string)", file="TokenizerTests.cs", label="Entry CommandLine.Core.Token.Value(string)", span="24-24"];
m6_15 [cluster="Unk.ShouldBeEquivalentTo", file="TokenizerTests.cs", label="Entry Unk.ShouldBeEquivalentTo", span=""];
m6_13 [cluster="RailwaySharp.ErrorHandling.Result.Succeed<TSuccess, TMessage>(TSuccess, System.Collections.Generic.IEnumerable<TMessage>)", file="TokenizerTests.cs", label="Entry RailwaySharp.ErrorHandling.Result.Succeed<TSuccess, TMessage>(TSuccess, System.Collections.Generic.IEnumerable<TMessage>)", span="202-202"];
m6_10 [cluster="System.Collections.Generic.List<T>.List()", file="TokenizerTests.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m6_41 [file="TokenizerTests.cs", label=specs, span=""];
m6_42 [file="TokenizerTests.cs", label=specs, span=""];
m7_40 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="109-109"];
m7_41 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="TypeDescriptor.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="114-118"];
m7_42 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="TypeDescriptor.cs", label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="121-121"];
m7_43 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="109-109"];
m7_125 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="9-9"];
m7_147 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TypeDescriptor.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33"];
m7_11 [cluster="T.ToMaybe<T>()", file="TypeDescriptor.cs", label="Entry T.ToMaybe<T>()", span="249-249"];
m7_134 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="347-347"];
m7_135 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="TypeDescriptor.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="352-356"];
m7_136 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="TypeDescriptor.cs", label="expected.ShouldBeEquivalentTo(result.Value.StringSequence)", span="359-359"];
m7_137 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="347-347"];
m7_208 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="498-498"];
m7_210 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="504-508"];
m7_209 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="501-501"];
m7_211 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="511-511"];
m7_212 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="498-498"];
m7_195 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="TypeDescriptor.cs", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283"];
m7_82 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="9-9"];
m7_126 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="325-325"];
m7_127 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="TypeDescriptor.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="330-334"];
m7_128 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="TypeDescriptor.cs", label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="337-337"];
m7_129 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="325-325"];
m7_62 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="9-9"];
m7_118 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="303-303"];
m7_119 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="TypeDescriptor.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceWithoutRange(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="308-312"];
m7_120 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="TypeDescriptor.cs", label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="315-315"];
m7_121 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="303-303"];
m7_216 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="517-517"];
m7_218 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="TypeDescriptor.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="523-527"];
m7_217 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="TypeDescriptor.cs", label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="520-520"];
m7_219 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="TypeDescriptor.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="530-530"];
m7_220 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="517-517"];
m7_55 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="154-154"];
m7_56 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="TypeDescriptor.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="159-163"];
m7_57 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="TypeDescriptor.cs", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="166-166"];
m7_58 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="154-154"];
m7_54 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", span="9-9"];
m7_241 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="576-576"];
m7_242 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="TypeDescriptor.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="581-585"];
m7_243 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="TypeDescriptor.cs", label="Assert.True(expected.Equals(result.Value.StringValue))", span="588-588"];
m7_244 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="576-576"];
m7_182 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="440-440"];
m7_184 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="TypeDescriptor.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="447-451"];
m7_183 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="TypeDescriptor.cs", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="442-445"];
m7_185 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="TypeDescriptor.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="454-454"];
m7_186 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="440-440"];
m7_162 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TypeDescriptor.cs", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="12-12"];
m7_31 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="87-87"];
m7_32 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="TypeDescriptor.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequence(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="92-96"];
m7_33 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="TypeDescriptor.cs", label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="99-99"];
m7_34 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="87-87"];
m7_0 [cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", file="TypeDescriptor.cs", label="Entry CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", span="13-13"];
m7_3 [cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", file="TypeDescriptor.cs", label="this.nextValue = nextValue", span="17-17"];
m7_1 [cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", file="TypeDescriptor.cs", label="this.targetType = targetType", span="15-15"];
m7_2 [cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", file="TypeDescriptor.cs", label="this.maxItems = maxItems", span="16-16"];
m7_4 [cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", file="TypeDescriptor.cs", label="Exit CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", span="13-13"];
m7_5 [cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CommandLine.Core.TypeDescriptor)", file="TypeDescriptor.cs", label="Entry CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CommandLine.Core.TypeDescriptor)", span="35-35"];
m7_199 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="479-479"];
m7_201 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="TypeDescriptor.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequired(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="485-489"];
m7_200 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="TypeDescriptor.cs", label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="482-482"];
m7_202 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="TypeDescriptor.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="492-492"];
m7_203 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="479-479"];
m7_8 [cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CommandLine.Core.TypeDescriptor)", file="TypeDescriptor.cs", label="return new TypeDescriptor(tag, maximumItems, next.ToMaybe());", span="39-39"];
m7_78 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="TypeDescriptor.cs", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316"];
m7_159 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="385-385"];
m7_16 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", color=green, community=0, file="TypeDescriptor.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", prediction=11, span="45-49"];
m7_18 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="40-40"];
m7_20 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="46-46"];
m7_22 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="46-46"];
m7_21 [cluster="lambda expression", file="TypeDescriptor.cs", label="new FakeOptions()", span="46-46"];
m7_27 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="69-69"];
m7_36 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="93-93"];
m7_44 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="115-115"];
m7_51 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="138-138"];
m7_59 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="160-160"];
m7_70 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="179-179"];
m7_79 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="198-198"];
m7_88 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="218-218"];
m7_96 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="237-237"];
m7_105 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="261-261"];
m7_115 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="286-286"];
m7_122 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="309-309"];
m7_130 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="331-331"];
m7_138 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="353-353"];
m7_169 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="408-408"];
m7_179 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="428-428"];
m7_187 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="448-448"];
m7_196 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="468-468"];
m7_204 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="486-486"];
m7_213 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="505-505"];
m7_222 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="524-524"];
m7_230 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="543-543"];
m7_238 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="562-562"];
m7_246 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="582-582"];
m7_29 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="69-69"];
m7_28 [cluster="lambda expression", file="TypeDescriptor.cs", label="new FakeOptionsWithDouble()", span="69-69"];
m7_38 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="93-93"];
m7_37 [cluster="lambda expression", file="TypeDescriptor.cs", label="new FakeOptionsWithSequence()", span="93-93"];
m7_46 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="115-115"];
m7_45 [cluster="lambda expression", file="TypeDescriptor.cs", label="new FakeOptions()", span="115-115"];
m7_53 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="138-138"];
m7_52 [cluster="lambda expression", file="TypeDescriptor.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="138-138"];
m7_61 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="160-160"];
m7_60 [cluster="lambda expression", file="TypeDescriptor.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="160-160"];
m7_72 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="179-179"];
m7_71 [cluster="lambda expression", file="TypeDescriptor.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="179-179"];
m7_81 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="198-198"];
m7_80 [cluster="lambda expression", file="TypeDescriptor.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="198-198"];
m7_90 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="218-218"];
m7_89 [cluster="lambda expression", file="TypeDescriptor.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="218-218"];
m7_98 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="237-237"];
m7_97 [cluster="lambda expression", file="TypeDescriptor.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="237-237"];
m7_107 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="261-261"];
m7_106 [cluster="lambda expression", file="TypeDescriptor.cs", label="new FakeOptionsWithEnum()", span="261-261"];
m7_117 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="286-286"];
m7_116 [cluster="lambda expression", file="TypeDescriptor.cs", label="new FakeOptionsWithValues()", span="286-286"];
m7_124 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="309-309"];
m7_123 [cluster="lambda expression", file="TypeDescriptor.cs", label="new FakeOptionsWithSequenceWithoutRange()", span="309-309"];
m7_132 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="331-331"];
m7_131 [cluster="lambda expression", file="TypeDescriptor.cs", label="new FakeOptionsWithSequenceAndSeparator()", span="331-331"];
m7_140 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="353-353"];
m7_139 [cluster="lambda expression", file="TypeDescriptor.cs", label="new FakeOptionsWithSequenceAndSeparator()", span="353-353"];
m7_171 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="408-408"];
m7_170 [cluster="lambda expression", file="TypeDescriptor.cs", label="new FakeOptionsWithSets()", span="408-408"];
m7_181 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="428-428"];
m7_180 [cluster="lambda expression", file="TypeDescriptor.cs", label="new FakeOptionWithRequiredAndSet()", span="428-428"];
m7_189 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="448-448"];
m7_188 [cluster="lambda expression", file="TypeDescriptor.cs", label="new FakeOptionWithRequiredAndSet()", span="448-448"];
m7_198 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="468-468"];
m7_197 [cluster="lambda expression", file="TypeDescriptor.cs", label="new FakeOptionWithRequiredAndSet()", span="468-468"];
m7_206 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="486-486"];
m7_205 [cluster="lambda expression", file="TypeDescriptor.cs", label="new FakeOptionWithRequired()", span="486-486"];
m7_215 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="505-505"];
m7_214 [cluster="lambda expression", file="TypeDescriptor.cs", label="new FakeOptions()", span="505-505"];
m7_224 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="524-524"];
m7_223 [cluster="lambda expression", file="TypeDescriptor.cs", label="new FakeOptions()", span="524-524"];
m7_232 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="543-543"];
m7_231 [cluster="lambda expression", file="TypeDescriptor.cs", label="new FakeOptions()", span="543-543"];
m7_240 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="562-562"];
m7_239 [cluster="lambda expression", file="TypeDescriptor.cs", label="new FakeOptions()", span="562-562"];
m7_248 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="582-582"];
m7_247 [cluster="lambda expression", file="TypeDescriptor.cs", label="new FakeOptions()", span="582-582"];
m7_149 [cluster="lambda expression", file="TypeDescriptor.cs", label="new FakeOptionsWithValues()", span="382-382"];
m7_148 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="382-382"];
m7_150 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="382-382"];
m7_151 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="383-385"];
m7_153 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="383-385"];
m7_152 [cluster="lambda expression", file="TypeDescriptor.cs", label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="384-385"];
m7_156 [cluster="lambda expression", file="TypeDescriptor.cs", label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="385-385"];
m7_160 [cluster="lambda expression", file="TypeDescriptor.cs", label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="385-385"];
m7_155 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="385-385"];
m7_157 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="385-385"];
m7_161 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="385-385"];
m7_190 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="459-459"];
m7_192 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="TypeDescriptor.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="467-471"];
m7_191 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="TypeDescriptor.cs", label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="461-465"];
m7_193 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="TypeDescriptor.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="474-474"];
m7_194 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="459-459"];
m7_100 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="255-255"];
m7_101 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="TypeDescriptor.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="260-264"];
m7_102 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="TypeDescriptor.cs", label="expected.ShouldBeEquivalentTo(result.Value.Colors)", span="267-267"];
m7_103 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="255-255"];
m7_12 [cluster="CommandLine.Core.TypeDescriptorExtensions.WithNextValue(CommandLine.Core.TypeDescriptor, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", file="TypeDescriptor.cs", label="Entry CommandLine.Core.TypeDescriptorExtensions.WithNextValue(CommandLine.Core.TypeDescriptor, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", span="45-45"];
m7_14 [cluster="CommandLine.Core.TypeDescriptorExtensions.WithNextValue(CommandLine.Core.TypeDescriptor, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", file="TypeDescriptor.cs", label="Exit CommandLine.Core.TypeDescriptorExtensions.WithNextValue(CommandLine.Core.TypeDescriptor, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", span="45-45"];
m7_35 [cluster="Unk.SequenceEqual", file="TypeDescriptor.cs", label="Entry Unk.SequenceEqual", span=""];
m7_141 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="368-368"];
m7_145 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="TypeDescriptor.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="391-391"];
m7_142 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="TypeDescriptor.cs", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="371-377"];
m7_144 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="TypeDescriptor.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="381-388"];
m7_143 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="TypeDescriptor.cs", label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="378-378"];
m7_146 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="368-368"];
m7_68 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="TypeDescriptor.cs", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="261-261"];
m7_99 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="9-9"];
m7_83 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="211-211"];
m7_85 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="217-221"];
m7_84 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="214-214"];
m7_86 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="224-224"];
m7_87 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="211-211"];
m7_233 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="555-555"];
m7_235 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="TypeDescriptor.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="561-565"];
m7_234 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="TypeDescriptor.cs", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="558-558"];
m7_236 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="TypeDescriptor.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="568-568"];
m7_237 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="555-555"];
m7_10 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="TypeDescriptor.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m7_63 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="172-172"];
m7_65 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="TypeDescriptor.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                new[] { ''-s'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="178-182"];
m7_64 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="TypeDescriptor.cs", label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="175-175"];
m7_66 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="TypeDescriptor.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="185-185"];
m7_67 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="172-172"];
m7_109 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="273-273"];
m7_111 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="TypeDescriptor.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="285-289"];
m7_110 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="TypeDescriptor.cs", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="276-282"];
m7_112 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="TypeDescriptor.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="292-292"];
m7_113 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="273-273"];
m7_30 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", span="9-9"];
m7_108 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="16-16"];
m7_178 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", span="4-4"];
m7_73 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="191-191"];
m7_75 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="197-201"];
m7_74 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="194-194"];
m7_76 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="204-204"];
m7_77 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="191-191"];
m7_221 [cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", file="TypeDescriptor.cs", label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="272-272"];
m7_91 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="230-230"];
m7_93 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue(),\r\n                new[] { ''one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="236-240"];
m7_92 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="233-233"];
m7_94 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="243-243"];
m7_95 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="230-230"];
m7_173 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="420-420"];
m7_175 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="TypeDescriptor.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="427-431"];
m7_174 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="TypeDescriptor.cs", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = null\r\n            }", span="422-425"];
m7_176 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="TypeDescriptor.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="434-434"];
m7_177 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="420-420"];
m7_133 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="9-9"];
m7_154 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="TypeDescriptor.cs", label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="37-37"];
m7_104 [cluster="Unk.ShouldBeEquivalentTo", file="TypeDescriptor.cs", label="Entry Unk.ShouldBeEquivalentTo", span=""];
m7_158 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="TypeDescriptor.cs", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11"];
m7_245 [cluster="string.Equals(string)", file="TypeDescriptor.cs", label="Entry string.Equals(string)", span="0-0"];
m7_172 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4"];
m7_168 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="TypeDescriptor.cs", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294"];
m7_6 [cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6"];
m7_7 [cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="TypeDescriptor.cs", label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="338-338"];
m7_9 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TypeDescriptor.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12"];
m7_15 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="40-40"];
m7_207 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4"];
m7_69 [cluster="CommandLine.NameInfo.NameInfo(string, string)", file="TypeDescriptor.cs", label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20"];
m7_47 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="132-132"];
m7_48 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="TypeDescriptor.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="137-141"];
m7_49 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="TypeDescriptor.cs", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="144-144"];
m7_50 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="132-132"];
m7_39 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", span="9-9"];
m7_225 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="536-536"];
m7_227 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="TypeDescriptor.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="542-546"];
m7_226 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="TypeDescriptor.cs", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="539-539"];
m7_228 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="TypeDescriptor.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="549-549"];
m7_229 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="536-536"];
m7_114 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6"];
m7_23 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="63-63"];
m7_24 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="TypeDescriptor.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithDouble(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="68-72"];
m7_25 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="TypeDescriptor.cs", label="Assert.Equal(expected, result.Value.DoubleValue)", span="75-75"];
m7_26 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="63-63"];
m7_19 [cluster="Unk.Equal", file="TypeDescriptor.cs", label="out CommandLine.Core.TypeDescriptor", span=""];
m7_163 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="397-397"];
m7_165 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="TypeDescriptor.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSets(),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="407-411"];
m7_164 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="TypeDescriptor.cs", label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl'')),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''))\r\n                }", span="400-404"];
m7_166 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="TypeDescriptor.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="414-414"];
m7_167 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="397-397"];
m7_249 [file="TypeDescriptor.cs", label=fakeOptions, span=""];
m7_250 [file="TypeDescriptor.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
m8_32 [cluster="System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", file="ValueMapper.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", span="31-31"];
m8_0 [cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="Entry CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="15-15"];
m8_1 [cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="var propAndErrors = MapValuesImpl(specProps, values, converter)", span="20-20"];
m8_2 [cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="return Result.Succeed(\r\n                propAndErrors.Select(pe => pe.Item1),\r\n                propAndErrors.Select(pe => pe.Item2)\r\n                    .OfType<Just<Error>>().Select(e => e.Value)\r\n                );", span="22-26"];
m8_3 [cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="Exit CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="15-15"];
m8_34 [cluster="CommandLine.Core.Specification.CountOfMaxNumberOfValues()", file="ValueMapper.cs", label="Entry CommandLine.Core.Specification.CountOfMaxNumberOfValues()", span="71-71"];
m8_4 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="Entry CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="29-29"];
m8_20 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", color=green, community=0, file="ValueMapper.cs", label="var taken = values.Take(pt.Specification.CountOfMaxNumberOfValues().MapValueOrDefault(n => n, values.Count()))", prediction=12, span="39-39"];
m8_19 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="var pt = specProps.First()", span="38-38"];
m8_21 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="taken.Empty()", span="40-40"];
m8_25 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="pt.Specification.Max.IsJust()\r\n                && next.IsNothing()\r\n                && values.Skip(taken.Count()).Any()", span="48-50"];
m8_28 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="yield return\r\n                converter(taken, pt.Property.PropertyType, pt.Specification.TargetType != TargetType.Sequence)\r\n                    .MapValueOrDefault(\r\n                        converted => Tuple.Create(pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>()),\r\n                        Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                            pt, Maybe.Just<Error>(new BadFormatConversionError(NameInfo.EmptyName))));", span="58-63"];
m8_29 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="MapValuesImpl(specProps.Skip(1), values.Skip(taken.Count()), converter)", span="65-65"];
m8_17 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="specProps.Empty()", span="34-34"];
m8_18 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="yield break;", span="36-36"];
m8_22 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="yield return\r\n                    Tuple.Create(pt, pt.Specification.MakeErrorInCaseOfMinConstraint());", span="42-43"];
m8_23 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="yield break;", span="44-44"];
m8_26 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="yield return\r\n                    Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                        pt, Maybe.Just<Error>(new SequenceOutOfRangeError(NameInfo.EmptyName)));", span="52-54"];
m8_27 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="yield break;", span="55-55"];
m8_30 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="yield return value;", span="67-67"];
m8_24 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="var next = specProps.Skip(1).FirstOrDefault(s => s.Specification.IsValue()).ToMaybe()", span="47-47"];
m8_31 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="Exit CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="29-29"];
m8_6 [cluster="Unk.>", file="ValueMapper.cs", label="Entry Unk.>", span=""];
m8_56 [cluster="CommandLine.Core.Specification.IsValue()", file="ValueMapper.cs", label="Entry CommandLine.Core.Specification.IsValue()", span="15-15"];
m8_44 [cluster="Unk.IsNothing", file="ValueMapper.cs", label="Entry Unk.IsNothing", span=""];
m8_42 [cluster="Unk.ToMaybe", file="ValueMapper.cs", label="Entry Unk.ToMaybe", span=""];
m8_46 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="ValueMapper.cs", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="360-360"];
m8_45 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="ValueMapper.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
m8_47 [cluster="CSharpx.Maybe.Just<T>(T)", file="ValueMapper.cs", label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124"];
m8_14 [cluster="lambda expression", file="ValueMapper.cs", label="Entry lambda expression", span="25-25"];
m8_50 [cluster="lambda expression", file="ValueMapper.cs", label="Entry lambda expression", span="39-39"];
m8_51 [cluster="lambda expression", color=green, community=0, file="ValueMapper.cs", label=n, prediction=13, span="39-39"];
m8_52 [cluster="lambda expression", file="ValueMapper.cs", label="Exit lambda expression", span="39-39"];
m8_58 [cluster="lambda expression", file="ValueMapper.cs", label="Tuple.Create(pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>())", span="61-61"];
m8_57 [cluster="lambda expression", file="ValueMapper.cs", label="Entry lambda expression", span="61-61"];
m8_53 [cluster="lambda expression", file="ValueMapper.cs", label="Entry lambda expression", span="47-47"];
m8_59 [cluster="lambda expression", file="ValueMapper.cs", label="Exit lambda expression", span="61-61"];
m8_8 [cluster="lambda expression", file="ValueMapper.cs", label="Entry lambda expression", span="23-23"];
m8_11 [cluster="lambda expression", file="ValueMapper.cs", label="Entry lambda expression", span="24-24"];
m8_55 [cluster="lambda expression", file="ValueMapper.cs", label="Exit lambda expression", span="47-47"];
m8_54 [cluster="lambda expression", file="ValueMapper.cs", label="s.Specification.IsValue()", span="47-47"];
m8_10 [cluster="lambda expression", file="ValueMapper.cs", label="Exit lambda expression", span="23-23"];
m8_9 [cluster="lambda expression", file="ValueMapper.cs", label="pe.Item1", span="23-23"];
m8_13 [cluster="lambda expression", file="ValueMapper.cs", label="Exit lambda expression", span="24-24"];
m8_12 [cluster="lambda expression", file="ValueMapper.cs", label="pe.Item2", span="24-24"];
m8_15 [cluster="lambda expression", file="ValueMapper.cs", label="e.Value", span="25-25"];
m8_16 [cluster="lambda expression", file="ValueMapper.cs", label="Exit lambda expression", span="25-25"];
m8_33 [cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="ValueMapper.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0"];
m8_39 [cluster="System.Tuple.Create<T1, T2>(T1, T2)", file="ValueMapper.cs", label="Entry System.Tuple.Create<T1, T2>(T1, T2)", span="0-0"];
m8_60 [cluster="CommandLine.Core.SpecificationProperty.WithValue(CSharpx.Maybe<object>)", file="ValueMapper.cs", label="Entry CommandLine.Core.SpecificationProperty.WithValue(CSharpx.Maybe<object>)", span="18-18"];
m8_40 [cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="ValueMapper.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0"];
m8_37 [cluster="System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", file="ValueMapper.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", span="0-0"];
m8_48 [cluster="System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", file="ValueMapper.cs", label="Entry System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", span="0-0"];
m8_72 [cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", file="ValueMapper.cs", label="Entry CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", span="87-87"];
m8_73 [cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", file="ValueMapper.cs", label="return specification.Min.IsJust()\r\n                ? Maybe.Just<Error>(new SequenceOutOfRangeError(NameInfo.EmptyName))\r\n                : Maybe.Nothing<Error>();", span="89-91"];
m8_74 [cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", file="ValueMapper.cs", label="Exit CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", span="87-87"];
m8_5 [cluster="Unk.Select", file="ValueMapper.cs", label="Entry Unk.Select", span=""];
m8_49 [cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="ValueMapper.cs", label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="349-349"];
m8_38 [cluster="CommandLine.Core.Specification.MakeErrorInCaseOfMinConstraint()", file="ValueMapper.cs", label="Entry CommandLine.Core.Specification.MakeErrorInCaseOfMinConstraint()", span="87-87"];
m8_61 [cluster="CSharpx.Maybe.Nothing<T>()", file="ValueMapper.cs", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
m8_36 [cluster="CSharpx.Maybe<T1>.MapValueOrDefault<T1, T2>(System.Func<T1, T2>, T2)", file="ValueMapper.cs", label="Entry CSharpx.Maybe<T1>.MapValueOrDefault<T1, T2>(System.Func<T1, T2>, T2)", span="377-377"];
m8_71 [cluster="CSharpx.Maybe<T>.FromJustOrFail<T>(System.Exception)", file="ValueMapper.cs", label="Entry CSharpx.Maybe<T>.FromJustOrFail<T>(System.Exception)", span="355-355"];
m8_35 [cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="ValueMapper.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0"];
m8_62 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs", label="Entry CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", span="71-71"];
m8_67 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs", label="specification.Max.IsJust()", span="78-78"];
m8_68 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs", label="return Maybe.Just(specification.Max.FromJustOrFail());", span="80-80"];
m8_65 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs", label="return Maybe.Just(1);", span="76-76"];
m8_69 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs", label="return Maybe.Nothing<int>();", span="84-84"];
m8_66 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs", label="TargetType.Sequence", span="77-77"];
m8_64 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs", label="TargetType.Scalar", span="75-75"];
m8_63 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs", label="specification.TargetType", span="73-73"];
m8_70 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs", label="Exit CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", span="71-71"];
m8_41 [cluster="Unk.FirstOrDefault", file="ValueMapper.cs", label="Entry Unk.FirstOrDefault", span=""];
m8_43 [cluster="CSharpx.Maybe<T>.IsJust<T>()", file="ValueMapper.cs", label="Entry CSharpx.Maybe<T>.IsJust<T>()", span="326-326"];
m8_7 [cluster="Unk.Succeed", file="ValueMapper.cs", label="Entry Unk.Succeed", span=""];
m8_75 [file="ValueMapper.cs", label=pt, span=""];
m0_8 -> m0_11  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m1_1 -> m1_4  [color=darkseagreen4, key=1, label=expected, style=dashed];
m2_2 -> m2_16  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_3 -> m2_20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_3 -> m2_24  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_4 -> m2_28  [color=green, key=1, label="lambda expression", style=dashed];
m3_1 -> m3_4  [color=darkseagreen4, key=1, label=writer, style=dashed];
m3_1 -> m3_10  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_319 -> m3_330  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Simple_Options", style=dashed];
m3_319 -> m3_323  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Simple_Options", style=dashed];
m3_321 -> m3_323  [color=darkseagreen4, key=1, label=result, style=dashed];
m3_323 -> m3_329  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_76 -> m3_82  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_72 -> m3_76  [color=darkseagreen4, key=1, label=expectedOptions, style=dashed];
m3_74 -> m3_76  [color=darkseagreen4, key=1, label=result, style=dashed];
m3_73 -> m3_80  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m3_62 -> m3_65  [color=darkseagreen4, key=1, label=expectedOptions, style=dashed];
m3_64 -> m3_66  [color=darkseagreen4, key=1, label=warrior, style=dashed];
m3_64 -> m3_67  [color=darkseagreen4, key=1, label=warrior, style=dashed];
m3_25 -> m3_83  [color=darkseagreen4, key=1, label="Ninject.Tests.Fakes.IWarrior", style=dashed];
m3_25 -> m3_84  [color=darkseagreen4, key=1, label="Ninject.Tests.Fakes.IWarrior", style=dashed];
m3_84 -> m3_86  [color=darkseagreen4, key=1, label=ninja, style=dashed];
m3_87 -> m3_91  [color=darkseagreen4, key=1, label=expectedOptions, style=dashed];
m3_228 -> m3_231  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_235 -> m3_241  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_234 -> m3_236  [color=darkseagreen4, key=1, label=lines, style=dashed];
m3_97 -> m3_34  [color=darkseagreen4, key=1, label="Ninject.Tests.Integration.WithParameterTests", style=dashed];
m3_97 -> m3_36  [color=darkseagreen4, key=1, label="Ninject.Tests.Integration.WithParameterTests", style=dashed];
m3_97 -> m3_44  [color=darkseagreen4, key=1, label="Ninject.Tests.Integration.WithParameterTests", style=dashed];
m3_97 -> m3_45  [color=darkseagreen4, key=1, label="Ninject.Tests.Integration.WithParameterTests", style=dashed];
m3_97 -> m3_46  [color=darkseagreen4, key=1, label="Ninject.Tests.Integration.WithParameterTests", style=dashed];
m3_97 -> m3_51  [color=darkseagreen4, key=1, label="Ninject.Tests.Integration.WithParameterTests", style=dashed];
m3_97 -> m3_53  [color=darkseagreen4, key=1, label="Ninject.Tests.Integration.WithParameterTests", style=dashed];
m3_102 -> m3_105  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_98 -> m3_102  [color=darkseagreen4, key=1, label=expectedOptions, style=dashed];
m3_98 -> m3_64  [color=darkseagreen4, key=1, label="Ninject.Tests.Integration.WhenNoPropertyOverridesAreSupplied", style=dashed];
m3_100 -> m3_102  [color=darkseagreen4, key=1, label=result, style=dashed];
m3_99 -> m3_74  [color=darkseagreen4, key=1, label="Ninject.Tests.Integration.PropertyInjectionTests", style=dashed];
m3_99 -> m3_89  [color=darkseagreen4, key=1, label="Ninject.Tests.Integration.PropertyInjectionTests", style=dashed];
m3_99 -> m3_90  [color=darkseagreen4, key=1, label="Ninject.Tests.Integration.PropertyInjectionTests", style=dashed];
m3_99 -> m3_91  [color=darkseagreen4, key=1, label="Ninject.Tests.Integration.PropertyInjectionTests", style=dashed];
m3_99 -> m3_92  [color=darkseagreen4, key=1, label="Ninject.Tests.Integration.PropertyInjectionTests", style=dashed];
m3_88 -> m3_92  [color=darkseagreen4, key=1, label=bool, style=dashed];
m3_89 -> m3_91  [color=darkseagreen4, key=1, label=result, style=dashed];
m3_91 -> m3_94  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_16 -> m3_19  [color=darkseagreen4, key=1, label=writer, style=dashed];
m3_48 -> m3_51  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m3_216 -> m3_218  [color=darkseagreen4, key=1, label=lines, style=dashed];
m3_216 -> m3_219  [color=darkseagreen4, key=1, label=lines, style=dashed];
m3_216 -> m3_220  [color=darkseagreen4, key=1, label=lines, style=dashed];
m3_216 -> m3_221  [color=darkseagreen4, key=1, label=lines, style=dashed];
m3_216 -> m3_222  [color=darkseagreen4, key=1, label=lines, style=dashed];
m3_216 -> m3_223  [color=darkseagreen4, key=1, label=lines, style=dashed];
m3_30 -> m3_37  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m3_40 -> m3_43  [color=darkseagreen4, key=1, label=expectedOptions, style=dashed];
m3_96 -> m3_1  [color=darkseagreen4, key=1, label="Ninject.Tests.Integration.WithPropertyValueTests", style=dashed];
m3_96 -> m3_3  [color=darkseagreen4, key=1, label="Ninject.Tests.Integration.WithPropertyValueTests", style=dashed];
m3_96 -> m3_14  [color=darkseagreen4, key=1, label="Ninject.Tests.Integration.WithPropertyValueTests", style=dashed];
m3_96 -> m3_15  [color=darkseagreen4, key=1, label="Ninject.Tests.Integration.WithPropertyValueTests", style=dashed];
m3_96 -> m3_21  [color=darkseagreen4, key=1, label="Ninject.Tests.Integration.WithPropertyValueTests", style=dashed];
m3_96 -> m3_22  [color=darkseagreen4, key=1, label="Ninject.Tests.Integration.WithPropertyValueTests", style=dashed];
m3_96 -> m3_23  [color=darkseagreen4, key=1, label="Ninject.Tests.Integration.WithPropertyValueTests", style=dashed];
m3_29 -> m3_37  [color=darkseagreen4, key=1, label=writer, style=dashed];
m3_178 -> m3_180  [color=darkseagreen4, key=1, label=lines, style=dashed];
m3_179 -> m3_188  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_133 -> m3_135  [color=darkseagreen4, key=1, label=result, style=dashed];
m3_134 -> m3_140  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_135 -> m3_143  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_131 -> m3_135  [color=darkseagreen4, key=1, label=expectedError, style=dashed];
m3_131 -> m3_144  [color=darkseagreen4, key=1, label=expectedError, style=dashed];
m3_118 -> m3_120  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_114 -> m3_118  [color=darkseagreen4, key=1, label=expectedOptions, style=dashed];
m3_116 -> m3_118  [color=darkseagreen4, key=1, label=result, style=dashed];
m3_161 -> m3_163  [color=darkseagreen4, key=1, label=result, style=dashed];
m3_162 -> m3_166  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_163 -> m3_169  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_159 -> m3_163  [color=darkseagreen4, key=1, label=expectedError, style=dashed];
m3_159 -> m3_170  [color=darkseagreen4, key=1, label=expectedError, style=dashed];
m3_249 -> m3_251  [color=darkseagreen4, key=1, label=lines, style=dashed];
m3_249 -> m3_252  [color=darkseagreen4, key=1, label=lines, style=dashed];
m3_249 -> m3_253  [color=darkseagreen4, key=1, label=lines, style=dashed];
m3_249 -> m3_254  [color=darkseagreen4, key=1, label=lines, style=dashed];
m3_249 -> m3_255  [color=darkseagreen4, key=1, label=lines, style=dashed];
m3_249 -> m3_256  [color=darkseagreen4, key=1, label=lines, style=dashed];
m3_249 -> m3_257  [color=darkseagreen4, key=1, label=lines, style=dashed];
m3_249 -> m3_258  [color=darkseagreen4, key=1, label=lines, style=dashed];
m3_249 -> m3_259  [color=darkseagreen4, key=1, label=lines, style=dashed];
m3_9 -> m3_78  [color=darkseagreen4, key=1, label="Ninject.Tests.Fakes.IWarrior", style=dashed];
m3_9 -> m3_79  [color=darkseagreen4, key=1, label="Ninject.Tests.Fakes.IWarrior", style=dashed];
m3_349 -> m3_351  [color=darkseagreen4, key=1, label=lines, style=dashed];
m3_349 -> m3_352  [color=darkseagreen4, key=1, label=lines, style=dashed];
m3_349 -> m3_353  [color=darkseagreen4, key=1, label=lines, style=dashed];
m3_349 -> m3_354  [color=darkseagreen4, key=1, label=lines, style=dashed];
m3_349 -> m3_355  [color=darkseagreen4, key=1, label=lines, style=dashed];
m3_349 -> m3_356  [color=darkseagreen4, key=1, label=lines, style=dashed];
m3_349 -> m3_357  [color=darkseagreen4, key=1, label=lines, style=dashed];
m3_349 -> m3_358  [color=darkseagreen4, key=1, label=lines, style=dashed];
m3_349 -> m3_359  [color=darkseagreen4, key=1, label=lines, style=dashed];
m3_306 -> m3_308  [color=darkseagreen4, key=1, label=lines, style=dashed];
m3_306 -> m3_309  [color=darkseagreen4, key=1, label=lines, style=dashed];
m3_306 -> m3_310  [color=darkseagreen4, key=1, label=lines, style=dashed];
m3_306 -> m3_311  [color=darkseagreen4, key=1, label=lines, style=dashed];
m3_306 -> m3_312  [color=darkseagreen4, key=1, label=lines, style=dashed];
m3_306 -> m3_313  [color=darkseagreen4, key=1, label=lines, style=dashed];
m3_306 -> m3_314  [color=darkseagreen4, key=1, label=lines, style=dashed];
m3_197 -> m3_199  [color=darkseagreen4, key=1, label=lines, style=dashed];
m3_197 -> m3_200  [color=darkseagreen4, key=1, label=lines, style=dashed];
m3_197 -> m3_201  [color=darkseagreen4, key=1, label=lines, style=dashed];
m3_197 -> m3_202  [color=darkseagreen4, key=1, label=lines, style=dashed];
m3_197 -> m3_203  [color=darkseagreen4, key=1, label=lines, style=dashed];
m3_197 -> m3_204  [color=darkseagreen4, key=1, label=lines, style=dashed];
m3_197 -> m3_205  [color=darkseagreen4, key=1, label=lines, style=dashed];
m3_197 -> m3_206  [color=darkseagreen4, key=1, label=lines, style=dashed];
m3_279 -> m3_281  [color=darkseagreen4, key=1, label=lines, style=dashed];
m3_279 -> m3_282  [color=darkseagreen4, key=1, label=lines, style=dashed];
m3_279 -> m3_283  [color=darkseagreen4, key=1, label=lines, style=dashed];
m3_279 -> m3_284  [color=darkseagreen4, key=1, label=lines, style=dashed];
m3_279 -> m3_285  [color=darkseagreen4, key=1, label=lines, style=dashed];
m3_279 -> m3_286  [color=darkseagreen4, key=1, label=lines, style=dashed];
m3_279 -> m3_287  [color=darkseagreen4, key=1, label=lines, style=dashed];
m3_279 -> m3_288  [color=darkseagreen4, key=1, label=lines, style=dashed];
m3_279 -> m3_289  [color=darkseagreen4, key=1, label=lines, style=dashed];
m3_279 -> m3_290  [color=darkseagreen4, key=1, label=lines, style=dashed];
m3_279 -> m3_291  [color=darkseagreen4, key=1, label=lines, style=dashed];
m3_279 -> m3_292  [color=darkseagreen4, key=1, label=lines, style=dashed];
m3_279 -> m3_293  [color=darkseagreen4, key=1, label=lines, style=dashed];
m3_279 -> m3_294  [color=darkseagreen4, key=1, label=lines, style=dashed];
m3_279 -> m3_295  [color=darkseagreen4, key=1, label=lines, style=dashed];
m3_279 -> m3_296  [color=darkseagreen4, key=1, label=lines, style=dashed];
m3_332 -> m3_342  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Commit_Verb", style=dashed];
m3_332 -> m3_336  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Commit_Verb", style=dashed];
m3_334 -> m3_336  [color=darkseagreen4, key=1, label=result, style=dashed];
m3_336 -> m3_341  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_366 -> m3_371  [color=green, key=1, label="lambda expression", style=dashed];
m3_366 -> m3_374  [color=green, key=1, label="lambda expression", style=dashed];
m3_124 -> m3_127  [color=darkseagreen4, key=1, label=expectedOptions, style=dashed];
m3_391 -> m3_330  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Simple_Options", style=dashed];
m3_392 -> m3_342  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Commit_Verb", style=dashed];
m3_380 -> m3_144  [color=darkseagreen4, key=1, label=expectedError, style=dashed];
m3_382 -> m3_170  [color=darkseagreen4, key=1, label=expectedError, style=dashed];
m3_379 -> m3_37  [color=darkseagreen4, key=1, label=writer, style=dashed];
m6_21 -> m6_24  [color=green, key=1, label=expectedTokens, style=dashed];
m6_23 -> m6_26  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_22 -> m6_27  [color=darkseagreen4, key=1, label=specs, style=dashed];
m6_30 -> m6_33  [color=darkseagreen4, key=1, label=expectedTokens, style=dashed];
m6_31 -> m6_38  [color=darkseagreen4, key=1, label=string, style=dashed];
m6_1 -> m6_4  [color=green, key=1, label=expectedTokens, style=dashed];
m6_3 -> m6_16  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_2 -> m6_17  [color=darkseagreen4, key=1, label=specs, style=dashed];
m6_41 -> m6_17  [color=darkseagreen4, key=1, label=specs, style=dashed];
m6_42 -> m6_27  [color=darkseagreen4, key=1, label=specs, style=dashed];
m7_40 -> m7_42  [color=darkseagreen4, key=1, label="int[]", style=dashed];
m7_41 -> m7_44  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_134 -> m7_136  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m7_135 -> m7_138  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_210 -> m7_213  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_209 -> m7_211  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m7_126 -> m7_128  [color=darkseagreen4, key=1, label="long[]", style=dashed];
m7_127 -> m7_130  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_118 -> m7_120  [color=darkseagreen4, key=1, label="long[]", style=dashed];
m7_119 -> m7_122  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_218 -> m7_222  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_217 -> m7_219  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m7_55 -> m7_57  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m7_56 -> m7_59  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_241 -> m7_243  [color=darkseagreen4, key=1, label=string, style=dashed];
m7_242 -> m7_246  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_184 -> m7_187  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_183 -> m7_185  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m7_31 -> m7_33  [color=darkseagreen4, key=1, label="int[]", style=dashed];
m7_32 -> m7_36  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_3 -> m7_19  [color=darkseagreen4, key=1, label="CommandLine.Core.TypeDescriptor", style=dashed];
m7_1 -> m7_19  [color=darkseagreen4, key=1, label="CommandLine.Core.TypeDescriptor", style=dashed];
m7_2 -> m7_4  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m7_2 -> m7_19  [color=darkseagreen4, key=1, label="CommandLine.Core.TypeDescriptor", style=dashed];
m7_5 -> m7_8  [color=darkseagreen4, key=1, label="CommandLine.Core.TargetType", style=dashed];
m7_201 -> m7_204  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_200 -> m7_202  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m7_16 -> m7_20  [color=green, key=1, label="lambda expression", style=dashed];
m7_151 -> m7_156  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m7_151 -> m7_160  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m7_152 -> m7_155  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_156 -> m7_159  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_192 -> m7_196  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_191 -> m7_193  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m7_100 -> m7_102  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
m7_101 -> m7_105  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_102 -> m7_102  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
m7_142 -> m7_145  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m7_144 -> m7_148  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_144 -> m7_151  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_85 -> m7_88  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_84 -> m7_86  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m7_235 -> m7_238  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_234 -> m7_236  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m7_65 -> m7_70  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_64 -> m7_66  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m7_111 -> m7_115  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_110 -> m7_112  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m7_75 -> m7_79  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_74 -> m7_76  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m7_93 -> m7_96  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_92 -> m7_94  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m7_175 -> m7_179  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_174 -> m7_176  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m7_47 -> m7_49  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m7_48 -> m7_51  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_227 -> m7_230  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_226 -> m7_228  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m7_23 -> m7_25  [color=darkseagreen4, key=1, label=double, style=dashed];
m7_24 -> m7_27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_165 -> m7_169  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_164 -> m7_166  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m7_250 -> m7_156  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m7_250 -> m7_160  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m8_2 -> m8_8  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_2 -> m8_11  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_2 -> m8_14  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_4 -> m8_25  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m8_4 -> m8_29  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m8_20 -> m8_50  [color=green, key=1, label="lambda expression", style=dashed];
m8_20 -> m8_25  [color=green, key=1, label=taken, style=dashed];
m8_20 -> m8_28  [color=green, key=1, label=taken, style=dashed];
m8_20 -> m8_29  [color=green, key=1, label=taken, style=dashed];
m8_19 -> m8_22  [color=darkseagreen4, key=1, label=pt, style=dashed];
m8_19 -> m8_25  [color=darkseagreen4, key=1, label=pt, style=dashed];
m8_19 -> m8_26  [color=darkseagreen4, key=1, label=pt, style=dashed];
m8_19 -> m8_28  [color=darkseagreen4, key=1, label=pt, style=dashed];
m8_19 -> m8_58  [color=darkseagreen4, key=1, label=pt, style=dashed];
m8_28 -> m8_57  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_24 -> m8_53  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_62 -> m8_67  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m8_62 -> m8_68  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m8_75 -> m8_58  [color=darkseagreen4, key=1, label=pt, style=dashed];
}
