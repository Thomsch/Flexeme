digraph  {
m0_40 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="109-109", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="InstanceBuilderTests.cs"];
m0_41 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="114-118", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="InstanceBuilderTests.cs"];
m0_42 [label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="121-121", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="InstanceBuilderTests.cs"];
m0_43 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="109-109", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="InstanceBuilderTests.cs"];
m0_125 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", file="InstanceBuilderTests.cs"];
m0_147 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilderTests.cs"];
m0_11 [label="Entry Unk.True", span="", cluster="Unk.True", file="InstanceBuilderTests.cs"];
m0_134 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="347-347", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="InstanceBuilderTests.cs"];
m0_135 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="352-356", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="InstanceBuilderTests.cs"];
m0_136 [label="expected.ShouldBeEquivalentTo(result.Value.StringSequence)", span="359-359", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="InstanceBuilderTests.cs"];
m0_137 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="347-347", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="InstanceBuilderTests.cs"];
m0_208 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="498-498", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_209 [label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="501-501", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_210 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="504-508", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_211 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="511-511", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_212 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="498-498", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_195 [label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283", cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs"];
m0_82 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", file="InstanceBuilderTests.cs"];
m0_62 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", file="InstanceBuilderTests.cs"];
m0_126 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="325-325", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="InstanceBuilderTests.cs"];
m0_127 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="330-334", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="InstanceBuilderTests.cs"];
m0_128 [label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="337-337", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="InstanceBuilderTests.cs"];
m0_129 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="325-325", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="InstanceBuilderTests.cs"];
m0_118 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="303-303", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="InstanceBuilderTests.cs"];
m0_119 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceWithoutRange(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="308-312", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="InstanceBuilderTests.cs", color=green, community=0];
m0_120 [label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="315-315", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="InstanceBuilderTests.cs", color=green, community=0];
m0_121 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="303-303", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="InstanceBuilderTests.cs"];
m0_216 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="517-517", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_217 [label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="520-520", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_218 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="523-527", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_219 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="530-530", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_220 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="517-517", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_55 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="154-154", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="InstanceBuilderTests.cs"];
m0_56 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="159-163", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="InstanceBuilderTests.cs"];
m0_57 [label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="166-166", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="InstanceBuilderTests.cs"];
m0_58 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="154-154", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="InstanceBuilderTests.cs"];
m0_54 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", file="InstanceBuilderTests.cs"];
m0_241 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="576-576", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="InstanceBuilderTests.cs"];
m0_242 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="581-585", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="InstanceBuilderTests.cs"];
m0_243 [label="Assert.True(expected.Equals(result.Value.StringValue))", span="588-588", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="InstanceBuilderTests.cs"];
m0_244 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="576-576", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="InstanceBuilderTests.cs"];
m0_182 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="440-440", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs"];
m0_183 [label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="442-445", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs"];
m0_184 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="447-451", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs"];
m0_185 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="454-454", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs"];
m0_186 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="440-440", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs"];
m0_162 [label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="12-12", cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="InstanceBuilderTests.cs"];
m0_31 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="87-87", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="InstanceBuilderTests.cs"];
m0_32 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequence(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="92-96", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="InstanceBuilderTests.cs"];
m0_33 [label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="99-99", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="InstanceBuilderTests.cs"];
m0_34 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="87-87", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="InstanceBuilderTests.cs"];
m0_0 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="15-15", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs"];
m0_1 [label="var fakeOptions = new FakeOptions()", span="18-18", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs"];
m0_2 [label="var expectedResult = ParserResult.Create(\r\n                ParserResultType.Options,\r\n                fakeOptions, new Error[] { new HelpRequestedError() })", span="19-21", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs"];
m0_3 [label="var result = InstanceBuilder.Build(\r\n                () => fakeOptions,\r\n                new[] { ''--help'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="24-28", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs"];
m0_4 [label="Assert.True(expectedResult.Equals(result))", span="31-31", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs"];
m0_5 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="15-15", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs"];
m0_199 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="479-479", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs"];
m0_200 [label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="482-482", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs"];
m0_201 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequired(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="485-489", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs"];
m0_202 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="492-492", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs"];
m0_203 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="479-479", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs"];
m0_8 [label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="103-103", cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="InstanceBuilderTests.cs"];
m0_78 [label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316", cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs"];
m0_246 [label="Entry lambda expression", span="582-582", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_13 [label=fakeOptions, span="25-25", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_12 [label="Entry lambda expression", span="25-25", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_14 [label="Exit lambda expression", span="25-25", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_20 [label="Entry lambda expression", span="46-46", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_21 [label="new FakeOptions()", span="46-46", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_22 [label="Exit lambda expression", span="46-46", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_27 [label="Entry lambda expression", span="69-69", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_28 [label="new FakeOptionsWithDouble()", span="69-69", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_29 [label="Exit lambda expression", span="69-69", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_36 [label="Entry lambda expression", span="93-93", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_37 [label="new FakeOptionsWithSequence()", span="93-93", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_38 [label="Exit lambda expression", span="93-93", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_44 [label="Entry lambda expression", span="115-115", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_45 [label="new FakeOptions()", span="115-115", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_46 [label="Exit lambda expression", span="115-115", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_51 [label="Entry lambda expression", span="138-138", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_52 [label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="138-138", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_53 [label="Exit lambda expression", span="138-138", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_59 [label="Entry lambda expression", span="160-160", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_60 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="160-160", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_61 [label="Exit lambda expression", span="160-160", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_70 [label="Entry lambda expression", span="179-179", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_71 [label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="179-179", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_72 [label="Exit lambda expression", span="179-179", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_79 [label="Entry lambda expression", span="198-198", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_80 [label="new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="198-198", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_81 [label="Exit lambda expression", span="198-198", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_88 [label="Entry lambda expression", span="218-218", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_89 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="218-218", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_90 [label="Exit lambda expression", span="218-218", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_96 [label="Entry lambda expression", span="237-237", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_97 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="237-237", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_98 [label="Exit lambda expression", span="237-237", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_105 [label="Entry lambda expression", span="261-261", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_106 [label="new FakeOptionsWithEnum()", span="261-261", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_107 [label="Exit lambda expression", span="261-261", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_115 [label="Entry lambda expression", span="286-286", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_116 [label="new FakeOptionsWithValues()", span="286-286", cluster="lambda expression", file="InstanceBuilderTests.cs", color=green, community=0];
m0_117 [label="Exit lambda expression", span="286-286", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_122 [label="Entry lambda expression", span="309-309", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_123 [label="new FakeOptionsWithSequenceWithoutRange()", span="309-309", cluster="lambda expression", file="InstanceBuilderTests.cs", color=green, community=0];
m0_124 [label="Exit lambda expression", span="309-309", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_130 [label="Entry lambda expression", span="331-331", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_131 [label="new FakeOptionsWithSequenceAndSeparator()", span="331-331", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_132 [label="Exit lambda expression", span="331-331", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_138 [label="Entry lambda expression", span="353-353", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_139 [label="new FakeOptionsWithSequenceAndSeparator()", span="353-353", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_140 [label="Exit lambda expression", span="353-353", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_148 [label="Entry lambda expression", span="382-382", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_151 [label="Entry lambda expression", span="383-385", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_149 [label="new FakeOptionsWithValues()", span="382-382", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_150 [label="Exit lambda expression", span="382-382", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_152 [label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="384-385", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_156 [label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="385-385", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_160 [label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="385-385", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_153 [label="Exit lambda expression", span="383-385", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_155 [label="Entry lambda expression", span="385-385", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_157 [label="Exit lambda expression", span="385-385", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_159 [label="Entry lambda expression", span="385-385", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_161 [label="Exit lambda expression", span="385-385", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_169 [label="Entry lambda expression", span="408-408", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_170 [label="new FakeOptionsWithSets()", span="408-408", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_171 [label="Exit lambda expression", span="408-408", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_179 [label="Entry lambda expression", span="428-428", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_180 [label="new FakeOptionWithRequiredAndSet()", span="428-428", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_181 [label="Exit lambda expression", span="428-428", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_187 [label="Entry lambda expression", span="448-448", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_188 [label="new FakeOptionWithRequiredAndSet()", span="448-448", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_189 [label="Exit lambda expression", span="448-448", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_196 [label="Entry lambda expression", span="468-468", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_197 [label="new FakeOptionWithRequiredAndSet()", span="468-468", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_198 [label="Exit lambda expression", span="468-468", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_204 [label="Entry lambda expression", span="486-486", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_205 [label="new FakeOptionWithRequired()", span="486-486", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_206 [label="Exit lambda expression", span="486-486", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_213 [label="Entry lambda expression", span="505-505", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_214 [label="new FakeOptions()", span="505-505", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_215 [label="Exit lambda expression", span="505-505", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_222 [label="Entry lambda expression", span="524-524", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_223 [label="new FakeOptions()", span="524-524", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_224 [label="Exit lambda expression", span="524-524", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_230 [label="Entry lambda expression", span="543-543", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_231 [label="new FakeOptions()", span="543-543", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_232 [label="Exit lambda expression", span="543-543", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_238 [label="Entry lambda expression", span="562-562", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_239 [label="new FakeOptions()", span="562-562", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_240 [label="Exit lambda expression", span="562-562", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_247 [label="new FakeOptions()", span="582-582", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_248 [label="Exit lambda expression", span="582-582", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_190 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="459-459", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs"];
m0_191 [label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="461-465", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs"];
m0_192 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="467-471", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs"];
m0_193 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="474-474", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs"];
m0_194 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="459-459", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs"];
m0_100 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="255-255", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="InstanceBuilderTests.cs"];
m0_101 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="260-264", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="InstanceBuilderTests.cs"];
m0_102 [label="expected.ShouldBeEquivalentTo(result.Value.Colors)", span="267-267", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="InstanceBuilderTests.cs"];
m0_103 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="255-255", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="InstanceBuilderTests.cs"];
m0_35 [label="Entry Unk.SequenceEqual", span="", cluster="Unk.SequenceEqual", file="InstanceBuilderTests.cs"];
m0_141 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="368-368", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs"];
m0_142 [label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="371-377", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs"];
m0_143 [label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="378-378", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs"];
m0_145 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="391-391", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs"];
m0_144 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="381-388", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs"];
m0_146 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="368-368", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs"];
m0_68 [label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="261-261", cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs"];
m0_99 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", file="InstanceBuilderTests.cs"];
m0_83 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="211-211", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_84 [label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="214-214", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_85 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="217-221", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_86 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="224-224", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_87 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="211-211", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_233 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="555-555", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_234 [label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="558-558", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_235 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="561-565", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_236 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="568-568", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_237 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="555-555", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_10 [label="Entry CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", span="90-90", cluster="CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", file="InstanceBuilderTests.cs"];
m0_30 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", file="InstanceBuilderTests.cs"];
m0_63 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="172-172", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceBuilderTests.cs"];
m0_64 [label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="175-175", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceBuilderTests.cs"];
m0_65 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                new[] { ''-s'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="178-182", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceBuilderTests.cs"];
m0_66 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="185-185", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceBuilderTests.cs"];
m0_67 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="172-172", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceBuilderTests.cs"];
m0_108 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="16-16", cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", file="InstanceBuilderTests.cs"];
m0_109 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="273-273", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs"];
m0_110 [label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="276-282", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs", color=green, community=0];
m0_111 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="285-289", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs", color=green, community=0];
m0_112 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="292-292", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs", color=green, community=0];
m0_113 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="273-273", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs"];
m0_178 [label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", file="InstanceBuilderTests.cs"];
m0_73 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="191-191", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_74 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="194-194", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_75 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="197-201", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_76 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="204-204", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_77 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="191-191", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_221 [label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="272-272", cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", file="InstanceBuilderTests.cs"];
m0_91 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="230-230", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_92 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="233-233", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_93 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue(),\r\n                new[] { ''one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="236-240", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_94 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="243-243", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_95 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="230-230", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_133 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", file="InstanceBuilderTests.cs"];
m0_154 [label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="37-37", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="InstanceBuilderTests.cs"];
m0_158 [label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="InstanceBuilderTests.cs"];
m0_173 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="420-420", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceBuilderTests.cs"];
m0_174 [label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = null\r\n            }", span="422-425", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceBuilderTests.cs"];
m0_175 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="427-431", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceBuilderTests.cs"];
m0_176 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="434-434", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceBuilderTests.cs"];
m0_177 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="420-420", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceBuilderTests.cs"];
m0_172 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", file="InstanceBuilderTests.cs"];
m0_245 [label="Entry string.Equals(string)", span="0-0", cluster="string.Equals(string)", file="InstanceBuilderTests.cs"];
m0_168 [label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294", cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs"];
m0_207 [label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", file="InstanceBuilderTests.cs"];
m0_69 [label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20", cluster="CommandLine.NameInfo.NameInfo(string, string)", file="InstanceBuilderTests.cs"];
m0_47 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="132-132", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="InstanceBuilderTests.cs"];
m0_48 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="137-141", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="InstanceBuilderTests.cs"];
m0_49 [label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="144-144", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="InstanceBuilderTests.cs"];
m0_50 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="132-132", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="InstanceBuilderTests.cs"];
m0_15 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="40-40", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="InstanceBuilderTests.cs"];
m0_16 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="45-49", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="InstanceBuilderTests.cs"];
m0_17 [label="Assert.Equal(expected, result.Value.LongValue)", span="52-52", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="InstanceBuilderTests.cs"];
m0_18 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="40-40", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="InstanceBuilderTests.cs"];
m0_39 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", file="InstanceBuilderTests.cs"];
m0_6 [label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", file="InstanceBuilderTests.cs"];
m0_225 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="536-536", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_226 [label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="539-539", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_227 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="542-546", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_228 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="549-549", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_229 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="536-536", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_114 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", file="InstanceBuilderTests.cs"];
m0_23 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="63-63", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="InstanceBuilderTests.cs"];
m0_24 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithDouble(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="68-72", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="InstanceBuilderTests.cs"];
m0_25 [label="Assert.Equal(expected, result.Value.DoubleValue)", span="75-75", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="InstanceBuilderTests.cs"];
m0_26 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="63-63", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="InstanceBuilderTests.cs"];
m0_7 [label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="338-338", cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="InstanceBuilderTests.cs"];
m0_19 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="InstanceBuilderTests.cs"];
m0_163 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="397-397", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs"];
m0_164 [label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl'')),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''))\r\n                }", span="400-404", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs"];
m0_165 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSets(),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="407-411", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs"];
m0_166 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="414-414", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs"];
m0_167 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="397-397", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs"];
m0_104 [label="Entry Unk.ShouldBeEquivalentTo", span="", cluster="Unk.ShouldBeEquivalentTo", file="InstanceBuilderTests.cs"];
m0_9 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilderTests.cs"];
m0_249 [label=fakeOptions, span="", file="InstanceBuilderTests.cs"];
m0_250 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span="", file="InstanceBuilderTests.cs"];
m2_11 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()", file="TypeConverter.cs"];
m2_20 [label="Entry CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", span="44-44", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TypeConverter.cs"];
m2_21 [label="var expectedTokens = new[] { Token.Name(''x''), Token.Name(''string-seq''),\r\n                Token.Value(''aaa''), Token.Value(''bb''),  Token.Value(''cccc''), Token.Name(''switch'') }", span="47-48", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", color=green, community=0, file="TypeConverter.cs"];
m2_22 [label="var specs = new[] { new OptionSpecification(string.Empty, ''string-seq'',\r\n                false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), ',', null, string.Empty, string.Empty, new List<string>(), typeof(IEnumerable<string>), TargetType.Sequence)}", span="49-50", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TypeConverter.cs"];
m2_24 [label="((Ok<IEnumerable<Token>, Error>)result).Value.Success.ShouldBeEquivalentTo(expectedTokens)", span="62-62", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TypeConverter.cs"];
m2_23 [label="var result =\r\n                Tokenizer.ExplodeOptionList(\r\n                    Result.Succeed(\r\n                        Enumerable.Empty<Token>().Concat(new[] { Token.Name(''x''),\r\n                            Token.Name(''string-seq''), Token.Value(''aaa,bb,cccc''), Token.Name(''switch'') }),\r\n                        Enumerable.Empty<Error>()),\r\n                        optionName => NameLookup.HavingSeparator(optionName, specs, StringComparer.InvariantCulture))", span="53-59", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TypeConverter.cs"];
m2_25 [label="Exit CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", span="44-44", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TypeConverter.cs"];
m2_35 [label="Entry CommandLine.Core.Token.Value(string, bool)", span="29-29", cluster="CommandLine.Core.Token.Value(string, bool)", file="TypeConverter.cs"];
m2_29 [label="Entry CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", span="68-68", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", file="TypeConverter.cs"];
m2_31 [label="Func<string, bool> nameLookup =\r\n                name => name.Equals(''x'') || name.Equals(''string-seq'') || name.Equals(''switch'')", span="74-75", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", color=green, community=0, file="TypeConverter.cs"];
m2_30 [label="var expectedTokens = new[] {\r\n                Token.Name(''x''), Token.Name(''string-seq''), Token.Value(''aaa''), Token.Value(''bb''),\r\n                Token.Name(''unknown''), Token.Name(''switch'') }", span="71-73", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", file="TypeConverter.cs"];
m2_32 [label="var result =\r\n                Tokenizer.Normalize(\r\n                    //Result.Succeed(\r\n                        Enumerable.Empty<Token>()\r\n                            .Concat(\r\n                                new[] {\r\n                                    Token.Name(''x''), Token.Name(''string-seq''), Token.Value(''aaa''), Token.Value(''bb''),\r\n                                    Token.Name(''unknown''), Token.Value(''value0'', true), Token.Name(''switch'') })\r\n                        //,Enumerable.Empty<Error>()),\r\n                    ,nameLookup)", span="78-87", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", color=green, community=0, file="TypeConverter.cs"];
m2_33 [label="result.ShouldBeEquivalentTo(expectedTokens)", span="90-90", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", color=green, community=0, file="TypeConverter.cs"];
m2_34 [label="Exit CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", span="68-68", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", file="TypeConverter.cs"];
m2_19 [label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="27-27", cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TypeConverter.cs"];
m2_36 [label="Entry CommandLine.Core.Tokenizer.Normalize(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, bool>)", span="78-78", cluster="CommandLine.Core.Tokenizer.Normalize(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, bool>)", file="TypeConverter.cs"];
m2_8 [label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", span="16-16", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", file="TypeConverter.cs"];
m2_0 [label="Entry CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", span="20-20", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="TypeConverter.cs"];
m2_1 [label="var expectedTokens = new[] { Token.Name(''i''), Token.Value(''10''), Token.Name(''string-seq''),\r\n                Token.Value(''aaa''), Token.Value(''bb''),  Token.Value(''cccc''), Token.Name(''switch'') }", span="23-24", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="TypeConverter.cs"];
m2_3 [label="var result =\r\n                Tokenizer.ExplodeOptionList(\r\n                    Result.Succeed(\r\n                        Enumerable.Empty<Token>().Concat(new[] { Token.Name(''i''), Token.Value(''10''),\r\n                            Token.Name(''string-seq''), Token.Value(''aaa,bb,cccc''), Token.Name(''switch'') }),\r\n                        Enumerable.Empty<Error>()),\r\n                        optionName => NameLookup.HavingSeparator(optionName, specs, StringComparer.InvariantCulture))", span="29-35", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="TypeConverter.cs"];
m2_4 [label="((Ok<IEnumerable<Token>, Error>)result).Value.Success.ShouldBeEquivalentTo(expectedTokens)", span="38-38", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="TypeConverter.cs"];
m2_2 [label="var specs = new[] { new OptionSpecification(string.Empty, ''string-seq'',\r\n                false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), ',', null, string.Empty, string.Empty, new List<string>(), typeof(IEnumerable<string>), TargetType.Sequence)}", span="25-26", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="TypeConverter.cs"];
m2_5 [label="Exit CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", span="20-20", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="TypeConverter.cs"];
m2_16 [label="Entry lambda expression", span="35-35", cluster="lambda expression", file="TypeConverter.cs"];
m2_38 [label="name.Equals(''x'') || name.Equals(''string-seq'') || name.Equals(''switch'')", span="75-75", cluster="lambda expression", color=green, community=0, file="TypeConverter.cs"];
m2_37 [label="Entry lambda expression", span="75-75", cluster="lambda expression", file="TypeConverter.cs"];
m2_39 [label="Exit lambda expression", span="75-75", cluster="lambda expression", file="TypeConverter.cs"];
m2_27 [label="NameLookup.HavingSeparator(optionName, specs, StringComparer.InvariantCulture)", span="59-59", cluster="lambda expression", file="TypeConverter.cs"];
m2_26 [label="Entry lambda expression", span="59-59", cluster="lambda expression", file="TypeConverter.cs"];
m2_28 [label="Exit lambda expression", span="59-59", cluster="lambda expression", file="TypeConverter.cs"];
m2_17 [label="NameLookup.HavingSeparator(optionName, specs, StringComparer.InvariantCulture)", span="35-35", cluster="lambda expression", file="TypeConverter.cs"];
m2_18 [label="Exit lambda expression", span="35-35", cluster="lambda expression", file="TypeConverter.cs"];
m2_40 [label="Entry string.Equals(string)", span="0-0", cluster="string.Equals(string)", file="TypeConverter.cs"];
m2_14 [label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", span="57-57", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="TypeConverter.cs"];
m2_6 [label="Entry CommandLine.Core.Token.Name(string)", span="19-19", cluster="CommandLine.Core.Token.Name(string)", file="TypeConverter.cs"];
m2_9 [label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116", cluster="CSharpx.Maybe.Nothing<T>()", file="TypeConverter.cs"];
m2_12 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="TypeConverter.cs"];
m2_7 [label="Entry CommandLine.Core.Token.Value(string)", span="24-24", cluster="CommandLine.Core.Token.Value(string)", file="TypeConverter.cs"];
m2_15 [label="Entry Unk.ShouldBeEquivalentTo", span="", cluster="Unk.ShouldBeEquivalentTo", file="TypeConverter.cs"];
m2_13 [label="Entry RailwaySharp.ErrorHandling.Result.Succeed<TSuccess, TMessage>(TSuccess, System.Collections.Generic.IEnumerable<TMessage>)", span="202-202", cluster="RailwaySharp.ErrorHandling.Result.Succeed<TSuccess, TMessage>(TSuccess, System.Collections.Generic.IEnumerable<TMessage>)", file="TypeConverter.cs"];
m2_10 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="TypeConverter.cs"];
m2_42 [label=specs, span="", file="TypeConverter.cs"];
m2_41 [label=specs, span="", file="TypeConverter.cs"];
m0_40 -> m0_41  [key=0, style=solid];
m0_40 -> m0_42  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
m0_41 -> m0_42  [key=0, style=solid];
m0_41 -> m0_9  [key=2, style=dotted];
m0_41 -> m0_44  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_42 -> m0_43  [key=0, style=solid];
m0_42 -> m0_35  [key=2, style=dotted];
m0_42 -> m0_11  [key=2, style=dotted];
m0_43 -> m0_40  [key=0, style=bold, color=blue];
m0_147 -> m0_147  [key=3, color=green, style=bold, label="Local variable System.Func<T> makeDefault"];
m0_134 -> m0_135  [key=0, style=solid];
m0_134 -> m0_136  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m0_135 -> m0_136  [key=0, style=solid];
m0_135 -> m0_9  [key=2, style=dotted];
m0_135 -> m0_138  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_136 -> m0_137  [key=0, style=solid];
m0_136 -> m0_104  [key=2, style=dotted];
m0_137 -> m0_134  [key=0, style=bold, color=blue];
m0_208 -> m0_209  [key=0, style=solid];
m0_209 -> m0_210  [key=0, style=solid];
m0_209 -> m0_78  [key=2, style=dotted];
m0_209 -> m0_69  [key=2, style=dotted];
m0_209 -> m0_211  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_210 -> m0_211  [key=0, style=solid];
m0_210 -> m0_9  [key=2, style=dotted];
m0_210 -> m0_213  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_211 -> m0_212  [key=0, style=solid];
m0_211 -> m0_35  [key=2, style=dotted];
m0_211 -> m0_11  [key=2, style=dotted];
m0_212 -> m0_208  [key=0, style=bold, color=blue];
m0_126 -> m0_127  [key=0, style=solid];
m0_126 -> m0_128  [key=1, style=dashed, color=darkseagreen4, label="long[]"];
m0_127 -> m0_128  [key=0, style=solid];
m0_127 -> m0_9  [key=2, style=dotted];
m0_127 -> m0_130  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_128 -> m0_129  [key=0, style=solid];
m0_128 -> m0_104  [key=2, style=dotted];
m0_129 -> m0_126  [key=0, style=bold, color=blue];
m0_118 -> m0_119  [key=0, style=solid, color=green];
m0_118 -> m0_120  [key=1, style=dashed, color=green, label="long[]"];
m0_119 -> m0_120  [key=0, style=solid, color=green];
m0_119 -> m0_9  [key=2, style=dotted, color=green];
m0_119 -> m0_122  [key=1, style=dashed, color=green, label="lambda expression"];
m0_120 -> m0_121  [key=0, style=solid, color=green];
m0_120 -> m0_104  [key=2, style=dotted, color=green];
m0_121 -> m0_118  [key=0, style=bold, color=blue];
m0_216 -> m0_217  [key=0, style=solid];
m0_217 -> m0_218  [key=0, style=solid];
m0_217 -> m0_221  [key=2, style=dotted];
m0_217 -> m0_219  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_218 -> m0_219  [key=0, style=solid];
m0_218 -> m0_9  [key=2, style=dotted];
m0_218 -> m0_222  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_219 -> m0_220  [key=0, style=solid];
m0_219 -> m0_35  [key=2, style=dotted];
m0_219 -> m0_11  [key=2, style=dotted];
m0_220 -> m0_216  [key=0, style=bold, color=blue];
m0_55 -> m0_56  [key=0, style=solid];
m0_55 -> m0_57  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m0_56 -> m0_57  [key=0, style=solid];
m0_56 -> m0_9  [key=2, style=dotted];
m0_56 -> m0_59  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_57 -> m0_58  [key=0, style=solid];
m0_57 -> m0_35  [key=2, style=dotted];
m0_57 -> m0_11  [key=2, style=dotted];
m0_58 -> m0_55  [key=0, style=bold, color=blue];
m0_241 -> m0_242  [key=0, style=solid];
m0_241 -> m0_243  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_242 -> m0_243  [key=0, style=solid];
m0_242 -> m0_9  [key=2, style=dotted];
m0_242 -> m0_246  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_243 -> m0_244  [key=0, style=solid];
m0_243 -> m0_245  [key=2, style=dotted];
m0_243 -> m0_11  [key=2, style=dotted];
m0_244 -> m0_241  [key=0, style=bold, color=blue];
m0_182 -> m0_183  [key=0, style=solid];
m0_183 -> m0_184  [key=0, style=solid];
m0_183 -> m0_178  [key=2, style=dotted];
m0_183 -> m0_185  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_184 -> m0_185  [key=0, style=solid];
m0_184 -> m0_9  [key=2, style=dotted];
m0_184 -> m0_187  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_185 -> m0_186  [key=0, style=solid];
m0_185 -> m0_104  [key=2, style=dotted];
m0_186 -> m0_182  [key=0, style=bold, color=blue];
m0_31 -> m0_32  [key=0, style=solid];
m0_31 -> m0_33  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
m0_32 -> m0_33  [key=0, style=solid];
m0_32 -> m0_9  [key=2, style=dotted];
m0_32 -> m0_36  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_32 -> m0_32  [key=3, color=green, style=bold, label="Local variable System.Func<T> buildImmutable"];
m0_33 -> m0_34  [key=0, style=solid];
m0_33 -> m0_35  [key=2, style=dotted];
m0_33 -> m0_11  [key=2, style=dotted];
m0_34 -> m0_31  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_6  [key=2, style=dotted];
m0_1 -> m0_3  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
m0_1 -> m0_13  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
m0_2 -> m0_3  [key=0, style=solid];
m0_2 -> m0_7  [key=2, style=dotted];
m0_2 -> m0_8  [key=2, style=dotted];
m0_2 -> m0_4  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_3 -> m0_4  [key=0, style=solid];
m0_3 -> m0_9  [key=2, style=dotted];
m0_3 -> m0_12  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_4 -> m0_5  [key=0, style=solid];
m0_4 -> m0_10  [key=2, style=dotted];
m0_4 -> m0_11  [key=2, style=dotted];
m0_5 -> m0_0  [key=0, style=bold, color=blue];
m0_199 -> m0_200  [key=0, style=solid];
m0_200 -> m0_201  [key=0, style=solid];
m0_200 -> m0_195  [key=2, style=dotted];
m0_200 -> m0_69  [key=2, style=dotted];
m0_200 -> m0_202  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_201 -> m0_202  [key=0, style=solid];
m0_201 -> m0_9  [key=2, style=dotted];
m0_201 -> m0_204  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_202 -> m0_203  [key=0, style=solid];
m0_202 -> m0_35  [key=2, style=dotted];
m0_202 -> m0_11  [key=2, style=dotted];
m0_203 -> m0_199  [key=0, style=bold, color=blue];
m0_246 -> m0_247  [key=0, style=solid];
m0_13 -> m0_14  [key=0, style=solid];
m0_12 -> m0_13  [key=0, style=solid];
m0_14 -> m0_12  [key=0, style=bold, color=blue];
m0_20 -> m0_21  [key=0, style=solid];
m0_21 -> m0_22  [key=0, style=solid];
m0_21 -> m0_6  [key=2, style=dotted];
m0_22 -> m0_20  [key=0, style=bold, color=blue];
m0_27 -> m0_28  [key=0, style=solid];
m0_28 -> m0_29  [key=0, style=solid];
m0_28 -> m0_30  [key=2, style=dotted];
m0_29 -> m0_27  [key=0, style=bold, color=blue];
m0_36 -> m0_37  [key=0, style=solid];
m0_37 -> m0_38  [key=0, style=solid];
m0_37 -> m0_39  [key=2, style=dotted];
m0_38 -> m0_36  [key=0, style=bold, color=blue];
m0_44 -> m0_45  [key=0, style=solid];
m0_45 -> m0_46  [key=0, style=solid];
m0_45 -> m0_6  [key=2, style=dotted];
m0_46 -> m0_44  [key=0, style=bold, color=blue];
m0_51 -> m0_52  [key=0, style=solid];
m0_52 -> m0_53  [key=0, style=solid];
m0_52 -> m0_54  [key=2, style=dotted];
m0_53 -> m0_51  [key=0, style=bold, color=blue];
m0_59 -> m0_60  [key=0, style=solid];
m0_60 -> m0_61  [key=0, style=solid];
m0_60 -> m0_62  [key=2, style=dotted];
m0_61 -> m0_59  [key=0, style=bold, color=blue];
m0_70 -> m0_71  [key=0, style=solid];
m0_71 -> m0_72  [key=0, style=solid];
m0_71 -> m0_54  [key=2, style=dotted];
m0_72 -> m0_70  [key=0, style=bold, color=blue];
m0_79 -> m0_80  [key=0, style=solid];
m0_80 -> m0_81  [key=0, style=solid];
m0_80 -> m0_82  [key=2, style=dotted];
m0_81 -> m0_79  [key=0, style=bold, color=blue];
m0_88 -> m0_89  [key=0, style=solid];
m0_89 -> m0_90  [key=0, style=solid];
m0_89 -> m0_62  [key=2, style=dotted];
m0_90 -> m0_88  [key=0, style=bold, color=blue];
m0_96 -> m0_97  [key=0, style=solid];
m0_97 -> m0_98  [key=0, style=solid];
m0_97 -> m0_99  [key=2, style=dotted];
m0_98 -> m0_96  [key=0, style=bold, color=blue];
m0_105 -> m0_106  [key=0, style=solid];
m0_106 -> m0_107  [key=0, style=solid];
m0_106 -> m0_108  [key=2, style=dotted];
m0_107 -> m0_105  [key=0, style=bold, color=blue];
m0_115 -> m0_116  [key=0, style=solid, color=green];
m0_116 -> m0_117  [key=0, style=solid, color=green];
m0_116 -> m0_114  [key=2, style=dotted, color=green];
m0_116 -> m0_150  [key=0, style=solid, color=green];
m0_117 -> m0_115  [key=0, style=bold, color=blue];
m0_122 -> m0_123  [key=0, style=solid, color=green];
m0_123 -> m0_124  [key=0, style=solid, color=green];
m0_123 -> m0_125  [key=2, style=dotted, color=green];
m0_124 -> m0_122  [key=0, style=bold, color=blue];
m0_130 -> m0_131  [key=0, style=solid];
m0_131 -> m0_132  [key=0, style=solid];
m0_131 -> m0_133  [key=2, style=dotted];
m0_132 -> m0_130  [key=0, style=bold, color=blue];
m0_138 -> m0_139  [key=0, style=solid];
m0_139 -> m0_140  [key=0, style=solid];
m0_139 -> m0_133  [key=2, style=dotted];
m0_140 -> m0_138  [key=0, style=bold, color=blue];
m0_148 -> m0_149  [key=0, style=solid];
m0_148 -> m0_116  [key=0, style=solid, color=green];
m0_151 -> m0_152  [key=0, style=solid];
m0_151 -> m0_156  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m0_151 -> m0_160  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m0_149 -> m0_150  [key=0, style=solid];
m0_149 -> m0_114  [key=2, style=dotted];
m0_150 -> m0_148  [key=0, style=bold, color=blue];
m0_152 -> m0_153  [key=0, style=solid];
m0_152 -> m0_154  [key=2, style=dotted];
m0_152 -> m0_155  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_156 -> m0_157  [key=0, style=solid];
m0_156 -> m0_158  [key=2, style=dotted];
m0_156 -> m0_159  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_160 -> m0_161  [key=0, style=solid];
m0_160 -> m0_162  [key=2, style=dotted];
m0_153 -> m0_151  [key=0, style=bold, color=blue];
m0_155 -> m0_156  [key=0, style=solid];
m0_157 -> m0_155  [key=0, style=bold, color=blue];
m0_159 -> m0_160  [key=0, style=solid];
m0_161 -> m0_159  [key=0, style=bold, color=blue];
m0_169 -> m0_170  [key=0, style=solid];
m0_170 -> m0_171  [key=0, style=solid];
m0_170 -> m0_172  [key=2, style=dotted];
m0_171 -> m0_169  [key=0, style=bold, color=blue];
m0_179 -> m0_180  [key=0, style=solid];
m0_180 -> m0_181  [key=0, style=solid];
m0_180 -> m0_178  [key=2, style=dotted];
m0_181 -> m0_179  [key=0, style=bold, color=blue];
m0_187 -> m0_188  [key=0, style=solid];
m0_188 -> m0_189  [key=0, style=solid];
m0_188 -> m0_178  [key=2, style=dotted];
m0_189 -> m0_187  [key=0, style=bold, color=blue];
m0_196 -> m0_197  [key=0, style=solid];
m0_197 -> m0_198  [key=0, style=solid];
m0_197 -> m0_178  [key=2, style=dotted];
m0_198 -> m0_196  [key=0, style=bold, color=blue];
m0_204 -> m0_205  [key=0, style=solid];
m0_205 -> m0_206  [key=0, style=solid];
m0_205 -> m0_207  [key=2, style=dotted];
m0_206 -> m0_204  [key=0, style=bold, color=blue];
m0_213 -> m0_214  [key=0, style=solid];
m0_214 -> m0_215  [key=0, style=solid];
m0_214 -> m0_6  [key=2, style=dotted];
m0_215 -> m0_213  [key=0, style=bold, color=blue];
m0_222 -> m0_223  [key=0, style=solid];
m0_223 -> m0_224  [key=0, style=solid];
m0_223 -> m0_6  [key=2, style=dotted];
m0_224 -> m0_222  [key=0, style=bold, color=blue];
m0_230 -> m0_231  [key=0, style=solid];
m0_231 -> m0_232  [key=0, style=solid];
m0_231 -> m0_6  [key=2, style=dotted];
m0_232 -> m0_230  [key=0, style=bold, color=blue];
m0_238 -> m0_239  [key=0, style=solid];
m0_239 -> m0_240  [key=0, style=solid];
m0_239 -> m0_6  [key=2, style=dotted];
m0_240 -> m0_238  [key=0, style=bold, color=blue];
m0_247 -> m0_248  [key=0, style=solid];
m0_247 -> m0_6  [key=2, style=dotted];
m0_248 -> m0_246  [key=0, style=bold, color=blue];
m0_190 -> m0_191  [key=0, style=solid];
m0_191 -> m0_192  [key=0, style=solid];
m0_191 -> m0_195  [key=2, style=dotted];
m0_191 -> m0_69  [key=2, style=dotted];
m0_191 -> m0_193  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_192 -> m0_193  [key=0, style=solid];
m0_192 -> m0_9  [key=2, style=dotted];
m0_192 -> m0_196  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_193 -> m0_194  [key=0, style=solid];
m0_193 -> m0_35  [key=2, style=dotted];
m0_193 -> m0_11  [key=2, style=dotted];
m0_194 -> m0_190  [key=0, style=bold, color=blue];
m0_100 -> m0_101  [key=0, style=solid];
m0_100 -> m0_102  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Colors"];
m0_101 -> m0_102  [key=0, style=solid];
m0_101 -> m0_9  [key=2, style=dotted];
m0_101 -> m0_105  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_102 -> m0_103  [key=0, style=solid];
m0_102 -> m0_104  [key=2, style=dotted];
m0_102 -> m0_102  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Colors"];
m0_103 -> m0_100  [key=0, style=bold, color=blue];
m0_141 -> m0_142  [key=0, style=solid];
m0_142 -> m0_143  [key=0, style=solid];
m0_142 -> m0_114  [key=2, style=dotted];
m0_142 -> m0_145  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_143 -> m0_144  [key=0, style=solid];
m0_145 -> m0_146  [key=0, style=solid];
m0_145 -> m0_104  [key=2, style=dotted];
m0_144 -> m0_145  [key=0, style=solid];
m0_144 -> m0_147  [key=2, style=dotted];
m0_144 -> m0_148  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_144 -> m0_151  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_146 -> m0_141  [key=0, style=bold, color=blue];
m0_83 -> m0_84  [key=0, style=solid];
m0_84 -> m0_85  [key=0, style=solid];
m0_84 -> m0_78  [key=2, style=dotted];
m0_84 -> m0_69  [key=2, style=dotted];
m0_84 -> m0_86  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_85 -> m0_86  [key=0, style=solid];
m0_85 -> m0_9  [key=2, style=dotted];
m0_85 -> m0_88  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_86 -> m0_87  [key=0, style=solid];
m0_86 -> m0_35  [key=2, style=dotted];
m0_86 -> m0_11  [key=2, style=dotted];
m0_87 -> m0_83  [key=0, style=bold, color=blue];
m0_233 -> m0_234  [key=0, style=solid];
m0_234 -> m0_235  [key=0, style=solid];
m0_234 -> m0_221  [key=2, style=dotted];
m0_234 -> m0_236  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_235 -> m0_236  [key=0, style=solid];
m0_235 -> m0_9  [key=2, style=dotted];
m0_235 -> m0_238  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_236 -> m0_237  [key=0, style=solid];
m0_236 -> m0_35  [key=2, style=dotted];
m0_236 -> m0_11  [key=2, style=dotted];
m0_237 -> m0_233  [key=0, style=bold, color=blue];
m0_63 -> m0_64  [key=0, style=solid];
m0_64 -> m0_65  [key=0, style=solid];
m0_64 -> m0_68  [key=2, style=dotted];
m0_64 -> m0_69  [key=2, style=dotted];
m0_64 -> m0_66  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_65 -> m0_66  [key=0, style=solid];
m0_65 -> m0_9  [key=2, style=dotted];
m0_65 -> m0_70  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_66 -> m0_67  [key=0, style=solid];
m0_66 -> m0_35  [key=2, style=dotted];
m0_66 -> m0_11  [key=2, style=dotted];
m0_67 -> m0_63  [key=0, style=bold, color=blue];
m0_109 -> m0_110  [key=0, style=solid, color=green];
m0_110 -> m0_111  [key=0, style=solid, color=green];
m0_110 -> m0_114  [key=2, style=dotted, color=green];
m0_110 -> m0_112  [key=1, style=dashed, color=green, label=expectedResult];
m0_111 -> m0_112  [key=0, style=solid, color=green];
m0_111 -> m0_9  [key=2, style=dotted, color=green];
m0_111 -> m0_115  [key=1, style=dashed, color=green, label="lambda expression"];
m0_112 -> m0_113  [key=0, style=solid, color=green];
m0_112 -> m0_104  [key=2, style=dotted, color=green];
m0_113 -> m0_109  [key=0, style=bold, color=blue];
m0_73 -> m0_74  [key=0, style=solid];
m0_74 -> m0_75  [key=0, style=solid];
m0_74 -> m0_78  [key=2, style=dotted];
m0_74 -> m0_76  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_75 -> m0_76  [key=0, style=solid];
m0_75 -> m0_9  [key=2, style=dotted];
m0_75 -> m0_79  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_76 -> m0_77  [key=0, style=solid];
m0_76 -> m0_35  [key=2, style=dotted];
m0_76 -> m0_11  [key=2, style=dotted];
m0_77 -> m0_73  [key=0, style=bold, color=blue];
m0_91 -> m0_92  [key=0, style=solid];
m0_92 -> m0_93  [key=0, style=solid];
m0_92 -> m0_78  [key=2, style=dotted];
m0_92 -> m0_94  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_93 -> m0_94  [key=0, style=solid];
m0_93 -> m0_9  [key=2, style=dotted];
m0_93 -> m0_96  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_94 -> m0_95  [key=0, style=solid];
m0_94 -> m0_35  [key=2, style=dotted];
m0_94 -> m0_11  [key=2, style=dotted];
m0_95 -> m0_91  [key=0, style=bold, color=blue];
m0_173 -> m0_174  [key=0, style=solid];
m0_174 -> m0_175  [key=0, style=solid];
m0_174 -> m0_178  [key=2, style=dotted];
m0_174 -> m0_176  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_175 -> m0_176  [key=0, style=solid];
m0_175 -> m0_9  [key=2, style=dotted];
m0_175 -> m0_179  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_176 -> m0_177  [key=0, style=solid];
m0_176 -> m0_104  [key=2, style=dotted];
m0_177 -> m0_173  [key=0, style=bold, color=blue];
m0_47 -> m0_48  [key=0, style=solid];
m0_47 -> m0_49  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m0_48 -> m0_49  [key=0, style=solid];
m0_48 -> m0_9  [key=2, style=dotted];
m0_48 -> m0_51  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_49 -> m0_50  [key=0, style=solid];
m0_49 -> m0_35  [key=2, style=dotted];
m0_49 -> m0_11  [key=2, style=dotted];
m0_50 -> m0_47  [key=0, style=bold, color=blue];
m0_15 -> m0_16  [key=0, style=solid];
m0_15 -> m0_17  [key=1, style=dashed, color=darkseagreen4, label=long];
m0_16 -> m0_17  [key=0, style=solid];
m0_16 -> m0_9  [key=2, style=dotted];
m0_16 -> m0_20  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_17 -> m0_18  [key=0, style=solid];
m0_17 -> m0_19  [key=2, style=dotted];
m0_18 -> m0_15  [key=0, style=bold, color=blue];
m0_225 -> m0_226  [key=0, style=solid];
m0_226 -> m0_227  [key=0, style=solid];
m0_226 -> m0_221  [key=2, style=dotted];
m0_226 -> m0_228  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_227 -> m0_228  [key=0, style=solid];
m0_227 -> m0_9  [key=2, style=dotted];
m0_227 -> m0_230  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_228 -> m0_229  [key=0, style=solid];
m0_228 -> m0_35  [key=2, style=dotted];
m0_228 -> m0_11  [key=2, style=dotted];
m0_229 -> m0_225  [key=0, style=bold, color=blue];
m0_23 -> m0_24  [key=0, style=solid];
m0_23 -> m0_25  [key=1, style=dashed, color=darkseagreen4, label=double];
m0_24 -> m0_25  [key=0, style=solid];
m0_24 -> m0_9  [key=2, style=dotted];
m0_24 -> m0_27  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_25 -> m0_26  [key=0, style=solid];
m0_25 -> m0_19  [key=2, style=dotted];
m0_26 -> m0_23  [key=0, style=bold, color=blue];
m0_163 -> m0_164  [key=0, style=solid];
m0_164 -> m0_165  [key=0, style=solid];
m0_164 -> m0_168  [key=2, style=dotted];
m0_164 -> m0_69  [key=2, style=dotted];
m0_164 -> m0_166  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_165 -> m0_166  [key=0, style=solid];
m0_165 -> m0_9  [key=2, style=dotted];
m0_165 -> m0_169  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_166 -> m0_167  [key=0, style=solid];
m0_166 -> m0_35  [key=2, style=dotted];
m0_166 -> m0_11  [key=2, style=dotted];
m0_167 -> m0_163  [key=0, style=bold, color=blue];
m0_249 -> m0_13  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
m0_250 -> m0_156  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m0_250 -> m0_160  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m2_20 -> m2_21  [key=0, style=solid, color=green];
m2_21 -> m2_22  [key=0, style=solid, color=green];
m2_21 -> m2_6  [key=2, style=dotted, color=green];
m2_21 -> m2_7  [key=2, style=dotted, color=green];
m2_21 -> m2_24  [key=1, style=dashed, color=green, label=expectedTokens];
m2_22 -> m2_23  [key=0, style=solid];
m2_22 -> m2_8  [key=2, style=dotted];
m2_22 -> m2_9  [key=2, style=dotted];
m2_22 -> m2_10  [key=2, style=dotted];
m2_22 -> m2_27  [key=1, style=dashed, color=darkseagreen4, label=specs];
m2_24 -> m2_25  [key=0, style=solid];
m2_24 -> m2_15  [key=2, style=dotted];
m2_23 -> m2_6  [key=2, style=dotted];
m2_23 -> m2_7  [key=2, style=dotted];
m2_23 -> m2_24  [key=0, style=solid];
m2_23 -> m2_11  [key=2, style=dotted];
m2_23 -> m2_12  [key=2, style=dotted];
m2_23 -> m2_13  [key=2, style=dotted];
m2_23 -> m2_14  [key=2, style=dotted];
m2_23 -> m2_26  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_25 -> m2_20  [key=0, style=bold, color=blue];
m2_29 -> m2_30  [key=0, style=solid];
m2_31 -> m2_32  [key=0, style=solid, color=green];
m2_31 -> m2_38  [key=1, style=dashed, color=green, label=string];
m2_30 -> m2_31  [key=0, style=solid, color=green];
m2_30 -> m2_33  [key=1, style=dashed, color=green, label=expectedTokens];
m2_30 -> m2_6  [key=2, style=dotted];
m2_30 -> m2_7  [key=2, style=dotted];
m2_32 -> m2_33  [key=0, style=solid, color=green];
m2_32 -> m2_11  [key=2, style=dotted, color=green];
m2_32 -> m2_6  [key=2, style=dotted, color=green];
m2_32 -> m2_7  [key=2, style=dotted, color=green];
m2_32 -> m2_35  [key=2, style=dotted, color=green];
m2_32 -> m2_12  [key=2, style=dotted, color=green];
m2_32 -> m2_36  [key=2, style=dotted, color=green];
m2_33 -> m2_34  [key=0, style=solid, color=green];
m2_33 -> m2_15  [key=2, style=dotted, color=green];
m2_34 -> m2_29  [key=0, style=bold, color=blue];
m2_0 -> m2_1  [key=0, style=solid];
m2_1 -> m2_6  [key=2, style=dotted];
m2_1 -> m2_7  [key=2, style=dotted];
m2_1 -> m2_2  [key=0, style=solid];
m2_1 -> m2_4  [key=1, style=dashed, color=darkseagreen4, label=expectedTokens];
m2_3 -> m2_6  [key=2, style=dotted];
m2_3 -> m2_7  [key=2, style=dotted];
m2_3 -> m2_11  [key=2, style=dotted];
m2_3 -> m2_12  [key=2, style=dotted];
m2_3 -> m2_4  [key=0, style=solid];
m2_3 -> m2_13  [key=2, style=dotted];
m2_3 -> m2_14  [key=2, style=dotted];
m2_3 -> m2_16  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_4 -> m2_15  [key=2, style=dotted];
m2_4 -> m2_5  [key=0, style=solid];
m2_2 -> m2_8  [key=2, style=dotted];
m2_2 -> m2_9  [key=2, style=dotted];
m2_2 -> m2_10  [key=2, style=dotted];
m2_2 -> m2_3  [key=0, style=solid];
m2_2 -> m2_17  [key=1, style=dashed, color=darkseagreen4, label=specs];
m2_5 -> m2_0  [key=0, style=bold, color=blue];
m2_16 -> m2_17  [key=0, style=solid];
m2_38 -> m2_39  [key=0, style=solid, color=green];
m2_38 -> m2_40  [key=2, style=dotted, color=green];
m2_37 -> m2_38  [key=0, style=solid, color=green];
m2_39 -> m2_37  [key=0, style=bold, color=blue];
m2_27 -> m2_28  [key=0, style=solid];
m2_27 -> m2_19  [key=2, style=dotted];
m2_26 -> m2_27  [key=0, style=solid];
m2_28 -> m2_26  [key=0, style=bold, color=blue];
m2_17 -> m2_19  [key=2, style=dotted];
m2_17 -> m2_18  [key=0, style=solid];
m2_18 -> m2_16  [key=0, style=bold, color=blue];
m2_42 -> m2_27  [key=1, style=dashed, color=darkseagreen4, label=specs];
m2_41 -> m2_17  [key=1, style=dashed, color=darkseagreen4, label=specs];
}
