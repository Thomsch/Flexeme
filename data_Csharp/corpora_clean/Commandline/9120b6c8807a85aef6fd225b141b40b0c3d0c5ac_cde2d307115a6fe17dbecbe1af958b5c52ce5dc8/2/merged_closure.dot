digraph  {
n223 [label=int, span=""];
n224 [label="CSharpx.EnumerableExtensions.MaterializedEnumerable<T>", span=""];
n0 [cluster="CSharpx.EnumerableExtensions.AssertCountImpl<TSource>(System.Collections.Generic.IEnumerable<TSource>, int, System.Func<int, int, System.Exception>)", label="Entry CSharpx.EnumerableExtensions.AssertCountImpl<TSource>(System.Collections.Generic.IEnumerable<TSource>, int, System.Func<int, int, System.Exception>)", span="23-23"];
n1 [cluster="CSharpx.EnumerableExtensions.AssertCountImpl<TSource>(System.Collections.Generic.IEnumerable<TSource>, int, System.Func<int, int, System.Exception>)", label="var collection = source as ICollection<TSource>", span="26-26"];
n3 [cluster="CSharpx.EnumerableExtensions.AssertCountImpl<TSource>(System.Collections.Generic.IEnumerable<TSource>, int, System.Func<int, int, System.Exception>)", label="collection.Count != count", span="29-29"];
n4 [cluster="CSharpx.EnumerableExtensions.AssertCountImpl<TSource>(System.Collections.Generic.IEnumerable<TSource>, int, System.Func<int, int, System.Exception>)", label="throw errorSelector(collection.Count.CompareTo(count), count);", span="30-30"];
n5 [cluster="CSharpx.EnumerableExtensions.AssertCountImpl<TSource>(System.Collections.Generic.IEnumerable<TSource>, int, System.Func<int, int, System.Exception>)", label="return source;", span="31-31"];
n6 [cluster="CSharpx.EnumerableExtensions.AssertCountImpl<TSource>(System.Collections.Generic.IEnumerable<TSource>, int, System.Func<int, int, System.Exception>)", label="return ExpectingCountYieldingImpl(source, count, errorSelector);", span="34-34"];
n2 [cluster="CSharpx.EnumerableExtensions.AssertCountImpl<TSource>(System.Collections.Generic.IEnumerable<TSource>, int, System.Func<int, int, System.Exception>)", label="collection != null", span="27-27"];
n7 [cluster="CSharpx.EnumerableExtensions.AssertCountImpl<TSource>(System.Collections.Generic.IEnumerable<TSource>, int, System.Func<int, int, System.Exception>)", label="Exit CSharpx.EnumerableExtensions.AssertCountImpl<TSource>(System.Collections.Generic.IEnumerable<TSource>, int, System.Func<int, int, System.Exception>)", span="23-23"];
n10 [cluster="CSharpx.EnumerableExtensions.ExpectingCountYieldingImpl<TSource>(System.Collections.Generic.IEnumerable<TSource>, int, System.Func<int, int, System.Exception>)", label="Entry CSharpx.EnumerableExtensions.ExpectingCountYieldingImpl<TSource>(System.Collections.Generic.IEnumerable<TSource>, int, System.Func<int, int, System.Exception>)", span="37-37"];
n8 [cluster="int.CompareTo(int)", label="Entry int.CompareTo(int)", span="0-0"];
n9 [cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0"];
n11 [cluster="CSharpx.EnumerableExtensions.ExpectingCountYieldingImpl<TSource>(System.Collections.Generic.IEnumerable<TSource>, int, System.Func<int, int, System.Exception>)", label="var iterations = 0", span="40-40"];
n16 [cluster="CSharpx.EnumerableExtensions.ExpectingCountYieldingImpl<TSource>(System.Collections.Generic.IEnumerable<TSource>, int, System.Func<int, int, System.Exception>)", label="yield return element;", span="48-48"];
n12 [cluster="CSharpx.EnumerableExtensions.ExpectingCountYieldingImpl<TSource>(System.Collections.Generic.IEnumerable<TSource>, int, System.Func<int, int, System.Exception>)", label=source, span="41-41"];
n14 [cluster="CSharpx.EnumerableExtensions.ExpectingCountYieldingImpl<TSource>(System.Collections.Generic.IEnumerable<TSource>, int, System.Func<int, int, System.Exception>)", label="iterations > count", span="44-44"];
n15 [cluster="CSharpx.EnumerableExtensions.ExpectingCountYieldingImpl<TSource>(System.Collections.Generic.IEnumerable<TSource>, int, System.Func<int, int, System.Exception>)", label="throw errorSelector(1, count);", span="46-46"];
n17 [cluster="CSharpx.EnumerableExtensions.ExpectingCountYieldingImpl<TSource>(System.Collections.Generic.IEnumerable<TSource>, int, System.Func<int, int, System.Exception>)", label="iterations != count", span="50-50"];
n18 [cluster="CSharpx.EnumerableExtensions.ExpectingCountYieldingImpl<TSource>(System.Collections.Generic.IEnumerable<TSource>, int, System.Func<int, int, System.Exception>)", label="throw errorSelector(-1, count);", span="52-52"];
n13 [cluster="CSharpx.EnumerableExtensions.ExpectingCountYieldingImpl<TSource>(System.Collections.Generic.IEnumerable<TSource>, int, System.Func<int, int, System.Exception>)", label="iterations++", span="43-43"];
n19 [cluster="CSharpx.EnumerableExtensions.ExpectingCountYieldingImpl<TSource>(System.Collections.Generic.IEnumerable<TSource>, int, System.Func<int, int, System.Exception>)", label="Exit CSharpx.EnumerableExtensions.ExpectingCountYieldingImpl<TSource>(System.Collections.Generic.IEnumerable<TSource>, int, System.Func<int, int, System.Exception>)", span="37-37"];
n20 [cluster="CSharpx.EnumerableExtensions.Cartesian<TFirst, TSecond, TResult>(System.Collections.Generic.IEnumerable<TFirst>, System.Collections.Generic.IEnumerable<TSecond>, System.Func<TFirst, TSecond, TResult>)", label="Entry CSharpx.EnumerableExtensions.Cartesian<TFirst, TSecond, TResult>(System.Collections.Generic.IEnumerable<TFirst>, System.Collections.Generic.IEnumerable<TSecond>, System.Func<TFirst, TSecond, TResult>)", span="60-60"];
n21 [cluster="CSharpx.EnumerableExtensions.Cartesian<TFirst, TSecond, TResult>(System.Collections.Generic.IEnumerable<TFirst>, System.Collections.Generic.IEnumerable<TSecond>, System.Func<TFirst, TSecond, TResult>)", label="first == null", span="62-62"];
n23 [cluster="CSharpx.EnumerableExtensions.Cartesian<TFirst, TSecond, TResult>(System.Collections.Generic.IEnumerable<TFirst>, System.Collections.Generic.IEnumerable<TSecond>, System.Func<TFirst, TSecond, TResult>)", label="second == null", span="63-63"];
n25 [cluster="CSharpx.EnumerableExtensions.Cartesian<TFirst, TSecond, TResult>(System.Collections.Generic.IEnumerable<TFirst>, System.Collections.Generic.IEnumerable<TSecond>, System.Func<TFirst, TSecond, TResult>)", label="resultSelector == null", span="64-64"];
n27 [cluster="CSharpx.EnumerableExtensions.Cartesian<TFirst, TSecond, TResult>(System.Collections.Generic.IEnumerable<TFirst>, System.Collections.Generic.IEnumerable<TSecond>, System.Func<TFirst, TSecond, TResult>)", label="return from item1 in first\n                   from item2 in second // TODO buffer to avoid multiple enumerations\n                   select resultSelector(item1, item2);", span="66-68"];
n22 [cluster="CSharpx.EnumerableExtensions.Cartesian<TFirst, TSecond, TResult>(System.Collections.Generic.IEnumerable<TFirst>, System.Collections.Generic.IEnumerable<TSecond>, System.Func<TFirst, TSecond, TResult>)", label="throw new ArgumentNullException(''first'');", span="62-62"];
n24 [cluster="CSharpx.EnumerableExtensions.Cartesian<TFirst, TSecond, TResult>(System.Collections.Generic.IEnumerable<TFirst>, System.Collections.Generic.IEnumerable<TSecond>, System.Func<TFirst, TSecond, TResult>)", label="throw new ArgumentNullException(''second'');", span="63-63"];
n26 [cluster="CSharpx.EnumerableExtensions.Cartesian<TFirst, TSecond, TResult>(System.Collections.Generic.IEnumerable<TFirst>, System.Collections.Generic.IEnumerable<TSecond>, System.Func<TFirst, TSecond, TResult>)", label="throw new ArgumentNullException(''resultSelector'');", span="64-64"];
n28 [cluster="CSharpx.EnumerableExtensions.Cartesian<TFirst, TSecond, TResult>(System.Collections.Generic.IEnumerable<TFirst>, System.Collections.Generic.IEnumerable<TSecond>, System.Func<TFirst, TSecond, TResult>)", label="Exit CSharpx.EnumerableExtensions.Cartesian<TFirst, TSecond, TResult>(System.Collections.Generic.IEnumerable<TFirst>, System.Collections.Generic.IEnumerable<TSecond>, System.Func<TFirst, TSecond, TResult>)", span="60-60"];
n29 [cluster="System.ArgumentNullException.ArgumentNullException(string)", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
n30 [cluster="CSharpx.EnumerableExtensions.Prepend<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource)", label="Entry CSharpx.EnumerableExtensions.Prepend<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource)", span="74-74"];
n31 [cluster="CSharpx.EnumerableExtensions.Prepend<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource)", label="source == null", span="76-76"];
n33 [cluster="CSharpx.EnumerableExtensions.Prepend<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource)", label="return LinqEnumerable.Concat(LinqEnumerable.Repeat(value, 1), source);", span="78-78"];
n32 [cluster="CSharpx.EnumerableExtensions.Prepend<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource)", label="throw new ArgumentNullException(''source'');", span="76-76"];
n34 [cluster="CSharpx.EnumerableExtensions.Prepend<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource)", label="Exit CSharpx.EnumerableExtensions.Prepend<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource)", span="74-74"];
n35 [cluster="System.Linq.Enumerable.Repeat<TResult>(TResult, int)", label="Entry System.Linq.Enumerable.Repeat<TResult>(TResult, int)", span="0-0"];
n36 [cluster="System.Linq.Enumerable.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)", label="Entry System.Linq.Enumerable.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
n37 [cluster="CSharpx.EnumerableExtensions.Concat<T>(T, System.Collections.Generic.IEnumerable<T>)", label="Entry CSharpx.EnumerableExtensions.Concat<T>(T, System.Collections.Generic.IEnumerable<T>)", span="84-84"];
n38 [cluster="CSharpx.EnumerableExtensions.Concat<T>(T, System.Collections.Generic.IEnumerable<T>)", label="tail == null", span="86-86"];
n40 [cluster="CSharpx.EnumerableExtensions.Concat<T>(T, System.Collections.Generic.IEnumerable<T>)", label="return tail.Prepend(head);", span="88-88"];
n39 [cluster="CSharpx.EnumerableExtensions.Concat<T>(T, System.Collections.Generic.IEnumerable<T>)", label="throw new ArgumentNullException(''tail'');", span="86-86"];
n41 [cluster="CSharpx.EnumerableExtensions.Concat<T>(T, System.Collections.Generic.IEnumerable<T>)", label="Exit CSharpx.EnumerableExtensions.Concat<T>(T, System.Collections.Generic.IEnumerable<T>)", span="84-84"];
n42 [cluster="System.Collections.Generic.IEnumerable<TSource>.Prepend<TSource>(TSource)", label="Entry System.Collections.Generic.IEnumerable<TSource>.Prepend<TSource>(TSource)", span="74-74"];
n43 [cluster="CSharpx.EnumerableExtensions.Concat<T>(System.Collections.Generic.IEnumerable<T>, T)", label="Entry CSharpx.EnumerableExtensions.Concat<T>(System.Collections.Generic.IEnumerable<T>, T)", span="94-94"];
n44 [cluster="CSharpx.EnumerableExtensions.Concat<T>(System.Collections.Generic.IEnumerable<T>, T)", label="head == null", span="96-96"];
n46 [cluster="CSharpx.EnumerableExtensions.Concat<T>(System.Collections.Generic.IEnumerable<T>, T)", label="return LinqEnumerable.Concat(head, LinqEnumerable.Repeat(tail, 1));", span="98-98"];
n45 [cluster="CSharpx.EnumerableExtensions.Concat<T>(System.Collections.Generic.IEnumerable<T>, T)", label="throw new ArgumentNullException(''head'');", span="96-96"];
n47 [cluster="CSharpx.EnumerableExtensions.Concat<T>(System.Collections.Generic.IEnumerable<T>, T)", label="Exit CSharpx.EnumerableExtensions.Concat<T>(System.Collections.Generic.IEnumerable<T>, T)", span="94-94"];
n48 [cluster="CSharpx.EnumerableExtensions.Exclude<T>(System.Collections.Generic.IEnumerable<T>, int, int)", label="Entry CSharpx.EnumerableExtensions.Exclude<T>(System.Collections.Generic.IEnumerable<T>, int, int)", span="105-105"];
n49 [cluster="CSharpx.EnumerableExtensions.Exclude<T>(System.Collections.Generic.IEnumerable<T>, int, int)", label="sequence == null", span="107-107"];
n51 [cluster="CSharpx.EnumerableExtensions.Exclude<T>(System.Collections.Generic.IEnumerable<T>, int, int)", label="startIndex < 0", span="108-108"];
n53 [cluster="CSharpx.EnumerableExtensions.Exclude<T>(System.Collections.Generic.IEnumerable<T>, int, int)", label="count < 0", span="109-109"];
n55 [cluster="CSharpx.EnumerableExtensions.Exclude<T>(System.Collections.Generic.IEnumerable<T>, int, int)", label="return ExcludeImpl(sequence, startIndex, count);", span="111-111"];
n50 [cluster="CSharpx.EnumerableExtensions.Exclude<T>(System.Collections.Generic.IEnumerable<T>, int, int)", label="throw new ArgumentNullException(''sequence'');", span="107-107"];
n52 [cluster="CSharpx.EnumerableExtensions.Exclude<T>(System.Collections.Generic.IEnumerable<T>, int, int)", label="throw new ArgumentOutOfRangeException(''startIndex'');", span="108-108"];
n54 [cluster="CSharpx.EnumerableExtensions.Exclude<T>(System.Collections.Generic.IEnumerable<T>, int, int)", label="throw new ArgumentOutOfRangeException(''count'');", span="109-109"];
n56 [cluster="CSharpx.EnumerableExtensions.Exclude<T>(System.Collections.Generic.IEnumerable<T>, int, int)", label="Exit CSharpx.EnumerableExtensions.Exclude<T>(System.Collections.Generic.IEnumerable<T>, int, int)", span="105-105"];
n58 [cluster="CSharpx.EnumerableExtensions.ExcludeImpl<T>(System.Collections.Generic.IEnumerable<T>, int, int)", label="Entry CSharpx.EnumerableExtensions.ExcludeImpl<T>(System.Collections.Generic.IEnumerable<T>, int, int)", span="114-114"];
n57 [cluster="System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", label="Entry System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", span="0-0"];
n59 [cluster="CSharpx.EnumerableExtensions.ExcludeImpl<T>(System.Collections.Generic.IEnumerable<T>, int, int)", label="var index = -1", span="116-116"];
n63 [cluster="CSharpx.EnumerableExtensions.ExcludeImpl<T>(System.Collections.Generic.IEnumerable<T>, int, int)", label="yield return iter.Current;", span="122-122"];
n66 [cluster="CSharpx.EnumerableExtensions.ExcludeImpl<T>(System.Collections.Generic.IEnumerable<T>, int, int)", label="yield return iter.Current;", span="128-128"];
n60 [cluster="CSharpx.EnumerableExtensions.ExcludeImpl<T>(System.Collections.Generic.IEnumerable<T>, int, int)", label="var endIndex = startIndex + count", span="117-117"];
n61 [cluster="CSharpx.EnumerableExtensions.ExcludeImpl<T>(System.Collections.Generic.IEnumerable<T>, int, int)", label="var iter = sequence.GetEnumerator()", span="118-118"];
n62 [cluster="CSharpx.EnumerableExtensions.ExcludeImpl<T>(System.Collections.Generic.IEnumerable<T>, int, int)", label="iter.MoveNext() && ++index < startIndex", span="121-121"];
n64 [cluster="CSharpx.EnumerableExtensions.ExcludeImpl<T>(System.Collections.Generic.IEnumerable<T>, int, int)", label="++index < endIndex && iter.MoveNext()", span="124-124"];
n68 [cluster="System.Collections.Generic.IEnumerable<T>.GetEnumerator()", label="Entry System.Collections.Generic.IEnumerable<T>.GetEnumerator()", span="0-0"];
n65 [cluster="CSharpx.EnumerableExtensions.ExcludeImpl<T>(System.Collections.Generic.IEnumerable<T>, int, int)", label="iter.MoveNext()", span="127-127"];
n69 [cluster="System.Collections.IEnumerator.MoveNext()", label="Entry System.Collections.IEnumerator.MoveNext()", span="0-0"];
n67 [cluster="CSharpx.EnumerableExtensions.ExcludeImpl<T>(System.Collections.Generic.IEnumerable<T>, int, int)", label="Exit CSharpx.EnumerableExtensions.ExcludeImpl<T>(System.Collections.Generic.IEnumerable<T>, int, int)", span="114-114"];
n70 [cluster="CSharpx.EnumerableExtensions.Index<TSource>(System.Collections.Generic.IEnumerable<TSource>)", label="Entry CSharpx.EnumerableExtensions.Index<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="137-137"];
n71 [cluster="CSharpx.EnumerableExtensions.Index<TSource>(System.Collections.Generic.IEnumerable<TSource>)", label="return source.Index(0);", span="139-139"];
n72 [cluster="CSharpx.EnumerableExtensions.Index<TSource>(System.Collections.Generic.IEnumerable<TSource>)", label="Exit CSharpx.EnumerableExtensions.Index<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="137-137"];
n73 [cluster="System.Collections.Generic.IEnumerable<TSource>.Index<TSource>(int)", label="Entry System.Collections.Generic.IEnumerable<TSource>.Index<TSource>(int)", span="147-147"];
n74 [cluster="CSharpx.EnumerableExtensions.Index<TSource>(System.Collections.Generic.IEnumerable<TSource>, int)", label="Entry CSharpx.EnumerableExtensions.Index<TSource>(System.Collections.Generic.IEnumerable<TSource>, int)", span="147-147"];
n75 [cluster="CSharpx.EnumerableExtensions.Index<TSource>(System.Collections.Generic.IEnumerable<TSource>, int)", label="return source.Select((item, index) => new KeyValuePair<int, TSource>(startIndex + index, item));", span="149-149"];
n79 [cluster="lambda expression", label="new KeyValuePair<int, TSource>(startIndex + index, item)", span="149-149"];
n76 [cluster="CSharpx.EnumerableExtensions.Index<TSource>(System.Collections.Generic.IEnumerable<TSource>, int)", label="Exit CSharpx.EnumerableExtensions.Index<TSource>(System.Collections.Generic.IEnumerable<TSource>, int)", span="147-147"];
n77 [cluster="Unk.Select", label="Entry Unk.Select", span=""];
n78 [cluster="lambda expression", label="Entry lambda expression", span="149-149"];
n80 [cluster="lambda expression", label="Exit lambda expression", span="149-149"];
n81 [cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0"];
n82 [cluster="CSharpx.EnumerableExtensions.Fold<T, TResult>(System.Collections.Generic.IEnumerable<T>, System.Func<T, TResult>)", label="Entry CSharpx.EnumerableExtensions.Fold<T, TResult>(System.Collections.Generic.IEnumerable<T>, System.Func<T, TResult>)", span="156-156"];
n83 [cluster="CSharpx.EnumerableExtensions.Fold<T, TResult>(System.Collections.Generic.IEnumerable<T>, System.Func<T, TResult>)", label="return FoldImpl(source, 1, folder, null, null, null);", span="158-158"];
n84 [cluster="CSharpx.EnumerableExtensions.Fold<T, TResult>(System.Collections.Generic.IEnumerable<T>, System.Func<T, TResult>)", label="Exit CSharpx.EnumerableExtensions.Fold<T, TResult>(System.Collections.Generic.IEnumerable<T>, System.Func<T, TResult>)", span="156-156"];
n85 [cluster="CSharpx.EnumerableExtensions.FoldImpl<T, TResult>(System.Collections.Generic.IEnumerable<T>, int, System.Func<T, TResult>, System.Func<T, T, TResult>, System.Func<T, T, T, TResult>, System.Func<T, T, T, T, TResult>)", label="Entry CSharpx.EnumerableExtensions.FoldImpl<T, TResult>(System.Collections.Generic.IEnumerable<T>, int, System.Func<T, TResult>, System.Func<T, T, TResult>, System.Func<T, T, T, TResult>, System.Func<T, T, T, T, TResult>)", span="188-188"];
n86 [cluster="CSharpx.EnumerableExtensions.Fold<T, TResult>(System.Collections.Generic.IEnumerable<T>, System.Func<T, T, TResult>)", label="Entry CSharpx.EnumerableExtensions.Fold<T, TResult>(System.Collections.Generic.IEnumerable<T>, System.Func<T, T, TResult>)", span="165-165"];
n87 [cluster="CSharpx.EnumerableExtensions.Fold<T, TResult>(System.Collections.Generic.IEnumerable<T>, System.Func<T, T, TResult>)", label="return FoldImpl(source, 2, null, folder, null, null);", span="167-167"];
n88 [cluster="CSharpx.EnumerableExtensions.Fold<T, TResult>(System.Collections.Generic.IEnumerable<T>, System.Func<T, T, TResult>)", label="Exit CSharpx.EnumerableExtensions.Fold<T, TResult>(System.Collections.Generic.IEnumerable<T>, System.Func<T, T, TResult>)", span="165-165"];
n89 [cluster="CSharpx.EnumerableExtensions.Fold<T, TResult>(System.Collections.Generic.IEnumerable<T>, System.Func<T, T, T, TResult>)", label="Entry CSharpx.EnumerableExtensions.Fold<T, TResult>(System.Collections.Generic.IEnumerable<T>, System.Func<T, T, T, TResult>)", span="174-174"];
n90 [cluster="CSharpx.EnumerableExtensions.Fold<T, TResult>(System.Collections.Generic.IEnumerable<T>, System.Func<T, T, T, TResult>)", label="return FoldImpl(source, 3, null, null, folder, null);", span="176-176"];
n91 [cluster="CSharpx.EnumerableExtensions.Fold<T, TResult>(System.Collections.Generic.IEnumerable<T>, System.Func<T, T, T, TResult>)", label="Exit CSharpx.EnumerableExtensions.Fold<T, TResult>(System.Collections.Generic.IEnumerable<T>, System.Func<T, T, T, TResult>)", span="174-174"];
n92 [cluster="CSharpx.EnumerableExtensions.Fold<T, TResult>(System.Collections.Generic.IEnumerable<T>, System.Func<T, T, T, T, TResult>)", label="Entry CSharpx.EnumerableExtensions.Fold<T, TResult>(System.Collections.Generic.IEnumerable<T>, System.Func<T, T, T, T, TResult>)", span="183-183"];
n93 [cluster="CSharpx.EnumerableExtensions.Fold<T, TResult>(System.Collections.Generic.IEnumerable<T>, System.Func<T, T, T, T, TResult>)", label="return FoldImpl(source, 4, null, null, null, folder);", span="185-185"];
n94 [cluster="CSharpx.EnumerableExtensions.Fold<T, TResult>(System.Collections.Generic.IEnumerable<T>, System.Func<T, T, T, T, TResult>)", label="Exit CSharpx.EnumerableExtensions.Fold<T, TResult>(System.Collections.Generic.IEnumerable<T>, System.Func<T, T, T, T, TResult>)", span="183-183"];
n95 [cluster="CSharpx.EnumerableExtensions.FoldImpl<T, TResult>(System.Collections.Generic.IEnumerable<T>, int, System.Func<T, TResult>, System.Func<T, T, TResult>, System.Func<T, T, T, TResult>, System.Func<T, T, T, T, TResult>)", label="source == null", span="194-194"];
n97 [cluster="CSharpx.EnumerableExtensions.FoldImpl<T, TResult>(System.Collections.Generic.IEnumerable<T>, int, System.Func<T, TResult>, System.Func<T, T, TResult>, System.Func<T, T, T, TResult>, System.Func<T, T, T, T, TResult>)", label="count == 1 && folder1 == null\n                || count == 2 && folder2 == null\n                || count == 3 && folder3 == null\n                || count == 4 && folder4 == null", span="195-198"];
n99 [cluster="CSharpx.EnumerableExtensions.FoldImpl<T, TResult>(System.Collections.Generic.IEnumerable<T>, int, System.Func<T, TResult>, System.Func<T, T, TResult>, System.Func<T, T, T, TResult>, System.Func<T, T, T, T, TResult>)", label="var elements = new T[count]", span="203-203"];
n100 [cluster="CSharpx.EnumerableExtensions.FoldImpl<T, TResult>(System.Collections.Generic.IEnumerable<T>, int, System.Func<T, TResult>, System.Func<T, T, TResult>, System.Func<T, T, T, TResult>, System.Func<T, T, T, T, TResult>)", label="AssertCountImpl(source.Index(), count, OnFolderSourceSizeErrorSelector)", span="204-204"];
n102 [cluster="CSharpx.EnumerableExtensions.FoldImpl<T, TResult>(System.Collections.Generic.IEnumerable<T>, int, System.Func<T, TResult>, System.Func<T, T, TResult>, System.Func<T, T, T, TResult>, System.Func<T, T, T, T, TResult>)", label=count, span="207-207"];
n104 [cluster="CSharpx.EnumerableExtensions.FoldImpl<T, TResult>(System.Collections.Generic.IEnumerable<T>, int, System.Func<T, TResult>, System.Func<T, T, TResult>, System.Func<T, T, T, TResult>, System.Func<T, T, T, T, TResult>)", label="return folder1(elements[0]);", span="209-209"];
n106 [cluster="CSharpx.EnumerableExtensions.FoldImpl<T, TResult>(System.Collections.Generic.IEnumerable<T>, int, System.Func<T, TResult>, System.Func<T, T, TResult>, System.Func<T, T, T, TResult>, System.Func<T, T, T, T, TResult>)", label="return folder2(elements[0], elements[1]);", span="210-210"];
n108 [cluster="CSharpx.EnumerableExtensions.FoldImpl<T, TResult>(System.Collections.Generic.IEnumerable<T>, int, System.Func<T, TResult>, System.Func<T, T, TResult>, System.Func<T, T, T, TResult>, System.Func<T, T, T, T, TResult>)", label="return folder3(elements[0], elements[1], elements[2]);", span="211-211"];
n110 [cluster="CSharpx.EnumerableExtensions.FoldImpl<T, TResult>(System.Collections.Generic.IEnumerable<T>, int, System.Func<T, TResult>, System.Func<T, T, TResult>, System.Func<T, T, T, TResult>, System.Func<T, T, T, T, TResult>)", label="return folder4(elements[0], elements[1], elements[2], elements[3]);", span="212-212"];
n96 [cluster="CSharpx.EnumerableExtensions.FoldImpl<T, TResult>(System.Collections.Generic.IEnumerable<T>, int, System.Func<T, TResult>, System.Func<T, T, TResult>, System.Func<T, T, T, TResult>, System.Func<T, T, T, T, TResult>)", label="throw new ArgumentNullException(''source'');", span="194-194"];
n98 [cluster="CSharpx.EnumerableExtensions.FoldImpl<T, TResult>(System.Collections.Generic.IEnumerable<T>, int, System.Func<T, TResult>, System.Func<T, T, TResult>, System.Func<T, T, T, TResult>, System.Func<T, T, T, T, TResult>)", label="throw new ArgumentNullException(''folder'');", span="200-200"];
n101 [cluster="CSharpx.EnumerableExtensions.FoldImpl<T, TResult>(System.Collections.Generic.IEnumerable<T>, int, System.Func<T, TResult>, System.Func<T, T, TResult>, System.Func<T, T, T, TResult>, System.Func<T, T, T, T, TResult>)", label="elements[e.Key] = e.Value", span="205-205"];
n113 [cluster="System.Collections.Generic.IEnumerable<TSource>.Index<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Index<TSource>()", span="137-137"];
n103 [cluster="CSharpx.EnumerableExtensions.FoldImpl<T, TResult>(System.Collections.Generic.IEnumerable<T>, int, System.Func<T, TResult>, System.Func<T, T, TResult>, System.Func<T, T, T, TResult>, System.Func<T, T, T, T, TResult>)", label=1, span="209-209"];
n105 [cluster="CSharpx.EnumerableExtensions.FoldImpl<T, TResult>(System.Collections.Generic.IEnumerable<T>, int, System.Func<T, TResult>, System.Func<T, T, TResult>, System.Func<T, T, T, TResult>, System.Func<T, T, T, T, TResult>)", label=2, span="210-210"];
n107 [cluster="CSharpx.EnumerableExtensions.FoldImpl<T, TResult>(System.Collections.Generic.IEnumerable<T>, int, System.Func<T, TResult>, System.Func<T, T, TResult>, System.Func<T, T, T, TResult>, System.Func<T, T, T, T, TResult>)", label=3, span="211-211"];
n109 [cluster="CSharpx.EnumerableExtensions.FoldImpl<T, TResult>(System.Collections.Generic.IEnumerable<T>, int, System.Func<T, TResult>, System.Func<T, T, TResult>, System.Func<T, T, T, TResult>, System.Func<T, T, T, T, TResult>)", label=4, span="212-212"];
n111 [cluster="CSharpx.EnumerableExtensions.FoldImpl<T, TResult>(System.Collections.Generic.IEnumerable<T>, int, System.Func<T, TResult>, System.Func<T, T, TResult>, System.Func<T, T, T, TResult>, System.Func<T, T, T, T, TResult>)", label="throw new NotSupportedException();", span="213-213"];
n112 [cluster="CSharpx.EnumerableExtensions.FoldImpl<T, TResult>(System.Collections.Generic.IEnumerable<T>, int, System.Func<T, TResult>, System.Func<T, T, TResult>, System.Func<T, T, T, TResult>, System.Func<T, T, T, T, TResult>)", label="Exit CSharpx.EnumerableExtensions.FoldImpl<T, TResult>(System.Collections.Generic.IEnumerable<T>, int, System.Func<T, TResult>, System.Func<T, T, TResult>, System.Func<T, T, T, TResult>, System.Func<T, T, T, T, TResult>)", span="188-188"];
n117 [cluster="System.NotSupportedException.NotSupportedException()", label="Entry System.NotSupportedException.NotSupportedException()", span="0-0"];
n114 [cluster="System.Func<T, TResult>.Invoke(T)", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
n115 [cluster="System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", label="Entry System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", span="0-0"];
n116 [cluster="System.Func<T1, T2, T3, T4, TResult>.Invoke(T1, T2, T3, T4)", label="Entry System.Func<T1, T2, T3, T4, TResult>.Invoke(T1, T2, T3, T4)", span="0-0"];
n118 [cluster="CSharpx.EnumerableExtensions.OnFolderSourceSizeError(int, int)", label="Entry CSharpx.EnumerableExtensions.OnFolderSourceSizeError(int, int)", span="219-219"];
n119 [cluster="CSharpx.EnumerableExtensions.OnFolderSourceSizeError(int, int)", label="var message = cmp < 0\n                        ? ''Sequence contains too few elements when exactly {0} {1} expected.''\n                        : ''Sequence contains too many elements when exactly {0} {1} expected.''", span="221-223"];
n120 [cluster="CSharpx.EnumerableExtensions.OnFolderSourceSizeError(int, int)", label="return new Exception(string.Format(message, count.ToString(''N0''), count == 1 ? ''was'' : ''were''));", span="224-224"];
n121 [cluster="CSharpx.EnumerableExtensions.OnFolderSourceSizeError(int, int)", label="Exit CSharpx.EnumerableExtensions.OnFolderSourceSizeError(int, int)", span="219-219"];
n122 [cluster="System.Exception.Exception(string)", label="Entry System.Exception.Exception(string)", span="0-0"];
n123 [cluster="int.ToString(string)", label="Entry int.ToString(string)", span="0-0"];
n124 [cluster="string.Format(string, object, object)", label="Entry string.Format(string, object, object)", span="0-0"];
n125 [cluster="CSharpx.EnumerableExtensions.ForEach<T>(System.Collections.Generic.IEnumerable<T>, System.Action<T>)", label="Entry CSharpx.EnumerableExtensions.ForEach<T>(System.Collections.Generic.IEnumerable<T>, System.Action<T>)", span="231-231"];
n126 [cluster="CSharpx.EnumerableExtensions.ForEach<T>(System.Collections.Generic.IEnumerable<T>, System.Action<T>)", label="source == null", span="233-233"];
n128 [cluster="CSharpx.EnumerableExtensions.ForEach<T>(System.Collections.Generic.IEnumerable<T>, System.Action<T>)", label="action == null", span="234-234"];
n130 [cluster="CSharpx.EnumerableExtensions.ForEach<T>(System.Collections.Generic.IEnumerable<T>, System.Action<T>)", label=source, span="236-236"];
n131 [cluster="CSharpx.EnumerableExtensions.ForEach<T>(System.Collections.Generic.IEnumerable<T>, System.Action<T>)", label="action(element)", span="238-238"];
n127 [cluster="CSharpx.EnumerableExtensions.ForEach<T>(System.Collections.Generic.IEnumerable<T>, System.Action<T>)", label="throw new ArgumentNullException(''source'');", span="233-233"];
n129 [cluster="CSharpx.EnumerableExtensions.ForEach<T>(System.Collections.Generic.IEnumerable<T>, System.Action<T>)", label="throw new ArgumentNullException(''action'');", span="234-234"];
n132 [cluster="CSharpx.EnumerableExtensions.ForEach<T>(System.Collections.Generic.IEnumerable<T>, System.Action<T>)", label="Exit CSharpx.EnumerableExtensions.ForEach<T>(System.Collections.Generic.IEnumerable<T>, System.Action<T>)", span="231-231"];
n133 [cluster="System.Action<T>.Invoke(T)", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
n134 [cluster="CSharpx.EnumerableExtensions.Pairwise<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", label="Entry CSharpx.EnumerableExtensions.Pairwise<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", span="248-248"];
n135 [cluster="CSharpx.EnumerableExtensions.Pairwise<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", label="source == null", span="250-250"];
n137 [cluster="CSharpx.EnumerableExtensions.Pairwise<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", label="resultSelector == null", span="251-251"];
n139 [cluster="CSharpx.EnumerableExtensions.Pairwise<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", label="return PairwiseImpl(source, resultSelector);", span="253-253"];
n136 [cluster="CSharpx.EnumerableExtensions.Pairwise<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", label="throw new ArgumentNullException(''source'');", span="250-250"];
n138 [cluster="CSharpx.EnumerableExtensions.Pairwise<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", label="throw new ArgumentNullException(''resultSelector'');", span="251-251"];
n140 [cluster="CSharpx.EnumerableExtensions.Pairwise<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", label="Exit CSharpx.EnumerableExtensions.Pairwise<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", span="248-248"];
n141 [cluster="CSharpx.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", label="Entry CSharpx.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", span="256-256"];
n142 [cluster="CSharpx.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", label="Debug.Assert(source != null)", span="258-258"];
n146 [cluster="CSharpx.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", label="yield break;", span="264-264"];
n149 [cluster="CSharpx.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", label="yield return resultSelector(previous, e.Current);", span="269-269"];
n143 [cluster="CSharpx.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", label="Debug.Assert(resultSelector != null)", span="259-259"];
n144 [cluster="CSharpx.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", label="var e = source.GetEnumerator()", span="261-261"];
n152 [cluster="System.Diagnostics.Debug.Assert(bool)", label="Entry System.Diagnostics.Debug.Assert(bool)", span="0-0"];
n145 [cluster="CSharpx.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", label="!e.MoveNext()", span="263-263"];
n147 [cluster="CSharpx.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", label="var previous = e.Current", span="266-266"];
n148 [cluster="CSharpx.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", label="e.MoveNext()", span="267-267"];
n150 [cluster="CSharpx.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", label="previous = e.Current", span="270-270"];
n151 [cluster="CSharpx.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", label="Exit CSharpx.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", span="256-256"];
n153 [cluster="CSharpx.EnumerableExtensions.ToDelimitedString<TSource>(System.Collections.Generic.IEnumerable<TSource>)", label="Entry CSharpx.EnumerableExtensions.ToDelimitedString<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="279-279"];
n154 [cluster="CSharpx.EnumerableExtensions.ToDelimitedString<TSource>(System.Collections.Generic.IEnumerable<TSource>)", label="return ToDelimitedString(source, null);", span="281-281"];
n155 [cluster="CSharpx.EnumerableExtensions.ToDelimitedString<TSource>(System.Collections.Generic.IEnumerable<TSource>)", label="Exit CSharpx.EnumerableExtensions.ToDelimitedString<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="279-279"];
n156 [cluster="CSharpx.EnumerableExtensions.ToDelimitedString<TSource>(System.Collections.Generic.IEnumerable<TSource>, string)", label="Entry CSharpx.EnumerableExtensions.ToDelimitedString<TSource>(System.Collections.Generic.IEnumerable<TSource>, string)", span="288-288"];
n157 [cluster="CSharpx.EnumerableExtensions.ToDelimitedString<TSource>(System.Collections.Generic.IEnumerable<TSource>, string)", label="source == null", span="290-290"];
n159 [cluster="CSharpx.EnumerableExtensions.ToDelimitedString<TSource>(System.Collections.Generic.IEnumerable<TSource>, string)", label="return ToDelimitedStringImpl(source, delimiter, (sb, e) => sb.Append(e));", span="292-292"];
n158 [cluster="CSharpx.EnumerableExtensions.ToDelimitedString<TSource>(System.Collections.Generic.IEnumerable<TSource>, string)", label="throw new ArgumentNullException(''source'');", span="290-290"];
n160 [cluster="CSharpx.EnumerableExtensions.ToDelimitedString<TSource>(System.Collections.Generic.IEnumerable<TSource>, string)", label="Exit CSharpx.EnumerableExtensions.ToDelimitedString<TSource>(System.Collections.Generic.IEnumerable<TSource>, string)", span="288-288"];
n161 [cluster="CSharpx.EnumerableExtensions.ToDelimitedStringImpl<T>(System.Collections.Generic.IEnumerable<T>, string, System.Func<System.Text.StringBuilder, T, System.Text.StringBuilder>)", label="Entry CSharpx.EnumerableExtensions.ToDelimitedStringImpl<T>(System.Collections.Generic.IEnumerable<T>, string, System.Func<System.Text.StringBuilder, T, System.Text.StringBuilder>)", span="295-295"];
n162 [cluster="lambda expression", label="Entry lambda expression", span="292-292"];
n163 [cluster="lambda expression", label="sb.Append(e)", span="292-292"];
n164 [cluster="lambda expression", label="Exit lambda expression", span="292-292"];
n165 [cluster="System.Text.StringBuilder.Append(object)", label="Entry System.Text.StringBuilder.Append(object)", span="0-0"];
n166 [cluster="CSharpx.EnumerableExtensions.ToDelimitedStringImpl<T>(System.Collections.Generic.IEnumerable<T>, string, System.Func<System.Text.StringBuilder, T, System.Text.StringBuilder>)", label="Debug.Assert(source != null)", span="297-297"];
n167 [cluster="CSharpx.EnumerableExtensions.ToDelimitedStringImpl<T>(System.Collections.Generic.IEnumerable<T>, string, System.Func<System.Text.StringBuilder, T, System.Text.StringBuilder>)", label="Debug.Assert(append != null)", span="298-298"];
n168 [cluster="CSharpx.EnumerableExtensions.ToDelimitedStringImpl<T>(System.Collections.Generic.IEnumerable<T>, string, System.Func<System.Text.StringBuilder, T, System.Text.StringBuilder>)", label="delimiter = delimiter ?? CultureInfo.CurrentCulture.TextInfo.ListSeparator", span="300-300"];
n171 [cluster="CSharpx.EnumerableExtensions.ToDelimitedStringImpl<T>(System.Collections.Generic.IEnumerable<T>, string, System.Func<System.Text.StringBuilder, T, System.Text.StringBuilder>)", label=source, span="304-304"];
n174 [cluster="CSharpx.EnumerableExtensions.ToDelimitedStringImpl<T>(System.Collections.Generic.IEnumerable<T>, string, System.Func<System.Text.StringBuilder, T, System.Text.StringBuilder>)", label="append(sb, value)", span="307-307"];
n169 [cluster="CSharpx.EnumerableExtensions.ToDelimitedStringImpl<T>(System.Collections.Generic.IEnumerable<T>, string, System.Func<System.Text.StringBuilder, T, System.Text.StringBuilder>)", label="var sb = new StringBuilder()", span="301-301"];
n173 [cluster="CSharpx.EnumerableExtensions.ToDelimitedStringImpl<T>(System.Collections.Generic.IEnumerable<T>, string, System.Func<System.Text.StringBuilder, T, System.Text.StringBuilder>)", label="sb.Append(delimiter)", span="306-306"];
n170 [cluster="CSharpx.EnumerableExtensions.ToDelimitedStringImpl<T>(System.Collections.Generic.IEnumerable<T>, string, System.Func<System.Text.StringBuilder, T, System.Text.StringBuilder>)", label="var i = 0", span="302-302"];
n177 [cluster="System.Text.StringBuilder.StringBuilder()", label="Entry System.Text.StringBuilder.StringBuilder()", span="0-0"];
n175 [cluster="CSharpx.EnumerableExtensions.ToDelimitedStringImpl<T>(System.Collections.Generic.IEnumerable<T>, string, System.Func<System.Text.StringBuilder, T, System.Text.StringBuilder>)", label="return sb.ToString();", span="310-310"];
n172 [cluster="CSharpx.EnumerableExtensions.ToDelimitedStringImpl<T>(System.Collections.Generic.IEnumerable<T>, string, System.Func<System.Text.StringBuilder, T, System.Text.StringBuilder>)", label="i++ > 0", span="306-306"];
n178 [cluster="System.Text.StringBuilder.Append(string)", label="Entry System.Text.StringBuilder.Append(string)", span="0-0"];
n176 [cluster="CSharpx.EnumerableExtensions.ToDelimitedStringImpl<T>(System.Collections.Generic.IEnumerable<T>, string, System.Func<System.Text.StringBuilder, T, System.Text.StringBuilder>)", label="Exit CSharpx.EnumerableExtensions.ToDelimitedStringImpl<T>(System.Collections.Generic.IEnumerable<T>, string, System.Func<System.Text.StringBuilder, T, System.Text.StringBuilder>)", span="295-295"];
n179 [cluster="System.Text.StringBuilder.ToString()", label="Entry System.Text.StringBuilder.ToString()", span="0-0"];
n180 [cluster="CSharpx.EnumerableExtensions.TryHead<T>(System.Collections.Generic.IEnumerable<T>)", label="Entry CSharpx.EnumerableExtensions.TryHead<T>(System.Collections.Generic.IEnumerable<T>)", span="318-318"];
n181 [cluster="CSharpx.EnumerableExtensions.TryHead<T>(System.Collections.Generic.IEnumerable<T>)", label="var e = source.GetEnumerator()", span="320-320"];
n182 [cluster="CSharpx.EnumerableExtensions.TryHead<T>(System.Collections.Generic.IEnumerable<T>)", label="return e.MoveNext()\n                    ? Maybe.Just(e.Current)\n                    : Maybe.Nothing<T>();", span="322-324"];
n183 [cluster="CSharpx.EnumerableExtensions.TryHead<T>(System.Collections.Generic.IEnumerable<T>)", label="Exit CSharpx.EnumerableExtensions.TryHead<T>(System.Collections.Generic.IEnumerable<T>)", span="318-318"];
n184 [cluster="CSharpx.Maybe.Just<T>(T)", label="Entry CSharpx.Maybe.Just<T>(T)", span="80-80"];
n185 [cluster="CSharpx.Maybe.Nothing<T>()", label="Entry CSharpx.Maybe.Nothing<T>()", span="75-75"];
n186 [cluster="CSharpx.EnumerableExtensions.ToMaybe<T>(System.Collections.Generic.IEnumerable<T>)", label="Entry CSharpx.EnumerableExtensions.ToMaybe<T>(System.Collections.Generic.IEnumerable<T>)", span="331-331"];
n187 [cluster="CSharpx.EnumerableExtensions.ToMaybe<T>(System.Collections.Generic.IEnumerable<T>)", label="var e = source.GetEnumerator()", span="333-333"];
n188 [cluster="CSharpx.EnumerableExtensions.ToMaybe<T>(System.Collections.Generic.IEnumerable<T>)", label="return e.MoveNext()\n                    ? Maybe.Just(source)\n                    : Maybe.Nothing<IEnumerable<T>>();", span="335-337"];
n189 [cluster="CSharpx.EnumerableExtensions.ToMaybe<T>(System.Collections.Generic.IEnumerable<T>)", label="Exit CSharpx.EnumerableExtensions.ToMaybe<T>(System.Collections.Generic.IEnumerable<T>)", span="331-331"];
n190 [cluster="CSharpx.EnumerableExtensions.Tail<T>(System.Collections.Generic.IEnumerable<T>)", label="Entry CSharpx.EnumerableExtensions.Tail<T>(System.Collections.Generic.IEnumerable<T>)", span="346-346"];
n191 [cluster="CSharpx.EnumerableExtensions.Tail<T>(System.Collections.Generic.IEnumerable<T>)", label="var e = source.GetEnumerator()", span="348-348"];
n194 [cluster="CSharpx.EnumerableExtensions.Tail<T>(System.Collections.Generic.IEnumerable<T>)", label="yield return e.Current;", span="352-352"];
n192 [cluster="CSharpx.EnumerableExtensions.Tail<T>(System.Collections.Generic.IEnumerable<T>)", label="e.MoveNext()", span="350-350"];
n193 [cluster="CSharpx.EnumerableExtensions.Tail<T>(System.Collections.Generic.IEnumerable<T>)", label="e.MoveNext()", span="351-351"];
n195 [cluster="CSharpx.EnumerableExtensions.Tail<T>(System.Collections.Generic.IEnumerable<T>)", label="throw new ArgumentException(''Source sequence cannot be empty.'', ''source'');", span="354-354"];
n196 [cluster="CSharpx.EnumerableExtensions.Tail<T>(System.Collections.Generic.IEnumerable<T>)", label="Exit CSharpx.EnumerableExtensions.Tail<T>(System.Collections.Generic.IEnumerable<T>)", span="346-346"];
n197 [cluster="System.ArgumentException.ArgumentException(string, string)", label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0"];
n198 [cluster="CSharpx.EnumerableExtensions.TailNoFail<T>(System.Collections.Generic.IEnumerable<T>)", label="Entry CSharpx.EnumerableExtensions.TailNoFail<T>(System.Collections.Generic.IEnumerable<T>)", span="361-361"];
n199 [cluster="CSharpx.EnumerableExtensions.TailNoFail<T>(System.Collections.Generic.IEnumerable<T>)", label="var e = source.GetEnumerator()", span="363-363"];
n202 [cluster="CSharpx.EnumerableExtensions.TailNoFail<T>(System.Collections.Generic.IEnumerable<T>)", label="yield return e.Current;", span="367-367"];
n200 [cluster="CSharpx.EnumerableExtensions.TailNoFail<T>(System.Collections.Generic.IEnumerable<T>)", label="e.MoveNext()", span="365-365"];
n201 [cluster="CSharpx.EnumerableExtensions.TailNoFail<T>(System.Collections.Generic.IEnumerable<T>)", label="e.MoveNext()", span="366-366"];
n203 [cluster="CSharpx.EnumerableExtensions.TailNoFail<T>(System.Collections.Generic.IEnumerable<T>)", label="Exit CSharpx.EnumerableExtensions.TailNoFail<T>(System.Collections.Generic.IEnumerable<T>)", span="361-361"];
n204 [cluster="CSharpx.EnumerableExtensions.Memorize<T>(System.Collections.Generic.IEnumerable<T>)", label="Entry CSharpx.EnumerableExtensions.Memorize<T>(System.Collections.Generic.IEnumerable<T>)", span="374-374"];
n205 [cluster="CSharpx.EnumerableExtensions.Memorize<T>(System.Collections.Generic.IEnumerable<T>)", label="return source.GetType().IsArray ? source : source.ToArray();", span="376-376"];
n206 [cluster="CSharpx.EnumerableExtensions.Memorize<T>(System.Collections.Generic.IEnumerable<T>)", label="Exit CSharpx.EnumerableExtensions.Memorize<T>(System.Collections.Generic.IEnumerable<T>)", span="374-374"];
n207 [cluster="object.GetType()", label="Entry object.GetType()", span="0-0"];
n208 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", span="0-0"];
n209 [cluster="CSharpx.EnumerableExtensions.Materialize<T>(System.Collections.Generic.IEnumerable<T>)", label="Entry CSharpx.EnumerableExtensions.Materialize<T>(System.Collections.Generic.IEnumerable<T>)", span="382-382"];
n210 [cluster="CSharpx.EnumerableExtensions.Materialize<T>(System.Collections.Generic.IEnumerable<T>)", label="source is MaterializedEnumerable<T> || source.GetType().IsArray", span="384-384"];
n211 [cluster="CSharpx.EnumerableExtensions.Materialize<T>(System.Collections.Generic.IEnumerable<T>)", label="return source;", span="386-386"];
n212 [cluster="CSharpx.EnumerableExtensions.Materialize<T>(System.Collections.Generic.IEnumerable<T>)", label="return new MaterializedEnumerable<T>(source);", span="388-388"];
n213 [cluster="CSharpx.EnumerableExtensions.Materialize<T>(System.Collections.Generic.IEnumerable<T>)", label="Exit CSharpx.EnumerableExtensions.Materialize<T>(System.Collections.Generic.IEnumerable<T>)", span="382-382"];
n214 [cluster="CSharpx.EnumerableExtensions.MaterializedEnumerable<T>.MaterializedEnumerable(System.Collections.Generic.IEnumerable<T>)", label="Entry CSharpx.EnumerableExtensions.MaterializedEnumerable<T>.MaterializedEnumerable(System.Collections.Generic.IEnumerable<T>)", span="395-395"];
n215 [cluster="CSharpx.EnumerableExtensions.MaterializedEnumerable<T>.MaterializedEnumerable(System.Collections.Generic.IEnumerable<T>)", label="inner = enumerable as ICollection<T> ?? enumerable.ToArray()", span="397-397"];
n216 [cluster="CSharpx.EnumerableExtensions.MaterializedEnumerable<T>.MaterializedEnumerable(System.Collections.Generic.IEnumerable<T>)", label="Exit CSharpx.EnumerableExtensions.MaterializedEnumerable<T>.MaterializedEnumerable(System.Collections.Generic.IEnumerable<T>)", span="395-395"];
n217 [cluster="CSharpx.EnumerableExtensions.MaterializedEnumerable<T>.GetEnumerator()", label="Entry CSharpx.EnumerableExtensions.MaterializedEnumerable<T>.GetEnumerator()", span="400-400"];
n218 [cluster="CSharpx.EnumerableExtensions.MaterializedEnumerable<T>.GetEnumerator()", label="return inner.GetEnumerator();", span="402-402"];
n219 [cluster="CSharpx.EnumerableExtensions.MaterializedEnumerable<T>.GetEnumerator()", label="Exit CSharpx.EnumerableExtensions.MaterializedEnumerable<T>.GetEnumerator()", span="400-400"];
n220 [cluster="CSharpx.EnumerableExtensions.MaterializedEnumerable<T>.System.Collections.IEnumerable.GetEnumerator()", label="Entry CSharpx.EnumerableExtensions.MaterializedEnumerable<T>.System.Collections.IEnumerable.GetEnumerator()", span="405-405"];
n221 [cluster="CSharpx.EnumerableExtensions.MaterializedEnumerable<T>.System.Collections.IEnumerable.GetEnumerator()", label="return GetEnumerator();", span="407-407"];
n222 [cluster="CSharpx.EnumerableExtensions.MaterializedEnumerable<T>.System.Collections.IEnumerable.GetEnumerator()", label="Exit CSharpx.EnumerableExtensions.MaterializedEnumerable<T>.System.Collections.IEnumerable.GetEnumerator()", span="405-405"];
d1 [cluster="CSharpx.EnumerableExtensions.AssertCountImpl<TSource>(System.Collections.Generic.IEnumerable<TSource>, int, System.Func<int, int, System.Exception>)", color=green, community=0, label="var collection = source as ICollection<TSource>", prediction=0, span="26-26"];
d2 [cluster="CSharpx.EnumerableExtensions.AssertCountImpl<TSource>(System.Collections.Generic.IEnumerable<TSource>, int, System.Func<int, int, System.Exception>)", color=green, community=0, label="collection != null", prediction=1, span="27-27"];
d3 [cluster="CSharpx.EnumerableExtensions.AssertCountImpl<TSource>(System.Collections.Generic.IEnumerable<TSource>, int, System.Func<int, int, System.Exception>)", color=green, community=0, label="collection.Count != count", prediction=0, span="29-29"];
d4 [cluster="CSharpx.EnumerableExtensions.AssertCountImpl<TSource>(System.Collections.Generic.IEnumerable<TSource>, int, System.Func<int, int, System.Exception>)", color=green, community=0, label="throw errorSelector(collection.Count.CompareTo(count), count);", prediction=0, span="30-30"];
d5 [cluster="CSharpx.EnumerableExtensions.AssertCountImpl<TSource>(System.Collections.Generic.IEnumerable<TSource>, int, System.Func<int, int, System.Exception>)", color=green, community=0, label="return source;", prediction=0, span="31-31"];
d6 [cluster="CSharpx.EnumerableExtensions.AssertCountImpl<TSource>(System.Collections.Generic.IEnumerable<TSource>, int, System.Func<int, int, System.Exception>)", color=green, community=0, label="return ExpectingCountYieldingImpl(source, count, errorSelector);", prediction=0, span="34-34"];
d11 [cluster="CSharpx.EnumerableExtensions.ExpectingCountYieldingImpl<TSource>(System.Collections.Generic.IEnumerable<TSource>, int, System.Func<int, int, System.Exception>)", color=green, community=0, label="var iterations = 0", prediction=6, span="40-40"];
d170 [cluster="CSharpx.EnumerableExtensions.ToDelimitedStringImpl<T>(System.Collections.Generic.IEnumerable<T>, string, System.Func<System.Text.StringBuilder, T, System.Text.StringBuilder>)", color=green, community=0, label="var i = 0", prediction=7, span="302-302"];
d12 [cluster="CSharpx.EnumerableExtensions.ExpectingCountYieldingImpl<TSource>(System.Collections.Generic.IEnumerable<TSource>, int, System.Func<int, int, System.Exception>)", color=green, community=0, label=source, prediction=6, span="41-41"];
d13 [cluster="CSharpx.EnumerableExtensions.ExpectingCountYieldingImpl<TSource>(System.Collections.Generic.IEnumerable<TSource>, int, System.Func<int, int, System.Exception>)", color=green, community=0, label="iterations++", prediction=6, span="43-43"];
d17 [cluster="CSharpx.EnumerableExtensions.ExpectingCountYieldingImpl<TSource>(System.Collections.Generic.IEnumerable<TSource>, int, System.Func<int, int, System.Exception>)", color=green, community=0, label="iterations != count", prediction=6, span="50-50"];
d16 [cluster="CSharpx.EnumerableExtensions.ExpectingCountYieldingImpl<TSource>(System.Collections.Generic.IEnumerable<TSource>, int, System.Func<int, int, System.Exception>)", color=green, community=0, label="yield return element;", prediction=6, span="48-48"];
d14 [cluster="CSharpx.EnumerableExtensions.ExpectingCountYieldingImpl<TSource>(System.Collections.Generic.IEnumerable<TSource>, int, System.Func<int, int, System.Exception>)", color=green, community=0, label="iterations > count", prediction=6, span="44-44"];
d15 [cluster="CSharpx.EnumerableExtensions.ExpectingCountYieldingImpl<TSource>(System.Collections.Generic.IEnumerable<TSource>, int, System.Func<int, int, System.Exception>)", color=green, community=0, label="throw errorSelector(1, count);", prediction=6, span="46-46"];
d18 [cluster="CSharpx.EnumerableExtensions.ExpectingCountYieldingImpl<TSource>(System.Collections.Generic.IEnumerable<TSource>, int, System.Func<int, int, System.Exception>)", color=green, community=0, label="throw errorSelector(-1, count);", prediction=6, span="52-52"];
d21 [cluster="CSharpx.EnumerableExtensions.Cartesian<TFirst, TSecond, TResult>(System.Collections.Generic.IEnumerable<TFirst>, System.Collections.Generic.IEnumerable<TSecond>, System.Func<TFirst, TSecond, TResult>)", color=green, community=0, label="first == null", prediction=15, span="62-62"];
d22 [cluster="CSharpx.EnumerableExtensions.Cartesian<TFirst, TSecond, TResult>(System.Collections.Generic.IEnumerable<TFirst>, System.Collections.Generic.IEnumerable<TSecond>, System.Func<TFirst, TSecond, TResult>)", color=green, community=0, label="throw new ArgumentNullException(''first'');", prediction=16, span="62-62"];
d23 [cluster="CSharpx.EnumerableExtensions.Cartesian<TFirst, TSecond, TResult>(System.Collections.Generic.IEnumerable<TFirst>, System.Collections.Generic.IEnumerable<TSecond>, System.Func<TFirst, TSecond, TResult>)", color=green, community=0, label="second == null", prediction=17, span="63-63"];
d24 [cluster="CSharpx.EnumerableExtensions.Cartesian<TFirst, TSecond, TResult>(System.Collections.Generic.IEnumerable<TFirst>, System.Collections.Generic.IEnumerable<TSecond>, System.Func<TFirst, TSecond, TResult>)", color=green, community=0, label="throw new ArgumentNullException(''second'');", prediction=18, span="63-63"];
d25 [cluster="CSharpx.EnumerableExtensions.Cartesian<TFirst, TSecond, TResult>(System.Collections.Generic.IEnumerable<TFirst>, System.Collections.Generic.IEnumerable<TSecond>, System.Func<TFirst, TSecond, TResult>)", color=green, community=0, label="resultSelector == null", prediction=17, span="64-64"];
d26 [cluster="CSharpx.EnumerableExtensions.Cartesian<TFirst, TSecond, TResult>(System.Collections.Generic.IEnumerable<TFirst>, System.Collections.Generic.IEnumerable<TSecond>, System.Func<TFirst, TSecond, TResult>)", color=green, community=0, label="throw new ArgumentNullException(''resultSelector'');", prediction=20, span="64-64"];
d27 [cluster="CSharpx.EnumerableExtensions.Cartesian<TFirst, TSecond, TResult>(System.Collections.Generic.IEnumerable<TFirst>, System.Collections.Generic.IEnumerable<TSecond>, System.Func<TFirst, TSecond, TResult>)", color=green, community=0, label="return from item1 in first\n                   from item2 in second // TODO buffer to avoid multiple enumerations\n                   select resultSelector(item1, item2);", prediction=17, span="66-68"];
d31 [cluster="CSharpx.EnumerableExtensions.Prepend<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource)", color=green, community=0, label="source == null", prediction=22, span="76-76"];
d32 [cluster="CSharpx.EnumerableExtensions.Prepend<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource)", color=green, community=0, label="throw new ArgumentNullException(''source'');", prediction=23, span="76-76"];
d33 [cluster="CSharpx.EnumerableExtensions.Prepend<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource)", color=green, community=0, label="return LinqEnumerable.Concat(LinqEnumerable.Repeat(value, 1), source);", prediction=24, span="78-78"];
d38 [cluster="CSharpx.EnumerableExtensions.Concat<T>(T, System.Collections.Generic.IEnumerable<T>)", color=green, community=0, label="tail == null", prediction=25, span="86-86"];
d39 [cluster="CSharpx.EnumerableExtensions.Concat<T>(T, System.Collections.Generic.IEnumerable<T>)", color=green, community=0, label="throw new ArgumentNullException(''tail'');", prediction=26, span="86-86"];
d40 [cluster="CSharpx.EnumerableExtensions.Concat<T>(T, System.Collections.Generic.IEnumerable<T>)", color=green, community=0, label="return tail.Prepend(head);", prediction=27, span="88-88"];
d44 [cluster="CSharpx.EnumerableExtensions.Concat<T>(System.Collections.Generic.IEnumerable<T>, T)", color=green, community=0, label="head == null", prediction=28, span="96-96"];
d45 [cluster="CSharpx.EnumerableExtensions.Concat<T>(System.Collections.Generic.IEnumerable<T>, T)", color=green, community=0, label="throw new ArgumentNullException(''head'');", prediction=29, span="96-96"];
d46 [cluster="CSharpx.EnumerableExtensions.Concat<T>(System.Collections.Generic.IEnumerable<T>, T)", color=green, community=0, label="return LinqEnumerable.Concat(head, LinqEnumerable.Repeat(tail, 1));", prediction=30, span="98-98"];
d49 [cluster="CSharpx.EnumerableExtensions.Exclude<T>(System.Collections.Generic.IEnumerable<T>, int, int)", color=green, community=0, label="sequence == null", prediction=31, span="107-107"];
d50 [cluster="CSharpx.EnumerableExtensions.Exclude<T>(System.Collections.Generic.IEnumerable<T>, int, int)", color=green, community=0, label="throw new ArgumentNullException(''sequence'');", prediction=32, span="107-107"];
d51 [cluster="CSharpx.EnumerableExtensions.Exclude<T>(System.Collections.Generic.IEnumerable<T>, int, int)", color=green, community=0, label="startIndex < 0", prediction=33, span="108-108"];
d52 [cluster="CSharpx.EnumerableExtensions.Exclude<T>(System.Collections.Generic.IEnumerable<T>, int, int)", color=green, community=0, label="throw new ArgumentOutOfRangeException(''startIndex'');", prediction=34, span="108-108"];
d53 [cluster="CSharpx.EnumerableExtensions.Exclude<T>(System.Collections.Generic.IEnumerable<T>, int, int)", color=green, community=0, label="count < 0", prediction=33, span="109-109"];
d54 [cluster="CSharpx.EnumerableExtensions.Exclude<T>(System.Collections.Generic.IEnumerable<T>, int, int)", color=green, community=0, label="throw new ArgumentOutOfRangeException(''count'');", prediction=36, span="109-109"];
d55 [cluster="CSharpx.EnumerableExtensions.Exclude<T>(System.Collections.Generic.IEnumerable<T>, int, int)", color=green, community=0, label="return ExcludeImpl(sequence, startIndex, count);", prediction=33, span="111-111"];
d59 [cluster="CSharpx.EnumerableExtensions.ExcludeImpl<T>(System.Collections.Generic.IEnumerable<T>, int, int)", color=green, community=0, label="var index = -1", prediction=38, span="116-116"];
d60 [cluster="CSharpx.EnumerableExtensions.ExcludeImpl<T>(System.Collections.Generic.IEnumerable<T>, int, int)", color=green, community=0, label="var endIndex = startIndex + count", prediction=39, span="117-117"];
d62 [cluster="CSharpx.EnumerableExtensions.ExcludeImpl<T>(System.Collections.Generic.IEnumerable<T>, int, int)", color=green, community=0, label="iter.MoveNext() && ++index < startIndex", prediction=38, span="121-121"];
d63 [cluster="CSharpx.EnumerableExtensions.ExcludeImpl<T>(System.Collections.Generic.IEnumerable<T>, int, int)", color=green, community=0, label="yield return iter.Current;", prediction=39, span="122-122"];
d66 [cluster="CSharpx.EnumerableExtensions.ExcludeImpl<T>(System.Collections.Generic.IEnumerable<T>, int, int)", color=green, community=0, label="yield return iter.Current;", prediction=39, span="128-128"];
d61 [cluster="CSharpx.EnumerableExtensions.ExcludeImpl<T>(System.Collections.Generic.IEnumerable<T>, int, int)", color=green, community=0, label="var iter = sequence.GetEnumerator()", prediction=39, span="118-118"];
d64 [cluster="CSharpx.EnumerableExtensions.ExcludeImpl<T>(System.Collections.Generic.IEnumerable<T>, int, int)", color=green, community=0, label="++index < endIndex && iter.MoveNext()", prediction=39, span="124-124"];
d65 [cluster="CSharpx.EnumerableExtensions.ExcludeImpl<T>(System.Collections.Generic.IEnumerable<T>, int, int)", color=green, community=0, label="iter.MoveNext()", prediction=39, span="127-127"];
d71 [cluster="CSharpx.EnumerableExtensions.Index<TSource>(System.Collections.Generic.IEnumerable<TSource>)", color=green, community=0, label="return source.Index(0);", prediction=46, span="139-139"];
d75 [cluster="CSharpx.EnumerableExtensions.Index<TSource>(System.Collections.Generic.IEnumerable<TSource>, int)", color=green, community=0, label="return source.Select((item, index) => new KeyValuePair<int, TSource>(startIndex + index, item));", prediction=47, span="149-149"];
d79 [cluster="lambda expression", color=green, community=0, label="new KeyValuePair<int, TSource>(startIndex + index, item)", prediction=48, span="149-149"];
d83 [cluster="CSharpx.EnumerableExtensions.Fold<T, TResult>(System.Collections.Generic.IEnumerable<T>, System.Func<T, TResult>)", color=green, community=0, label="return FoldImpl(source, 1, folder, null, null, null);", prediction=49, span="158-158"];
d87 [cluster="CSharpx.EnumerableExtensions.Fold<T, TResult>(System.Collections.Generic.IEnumerable<T>, System.Func<T, T, TResult>)", color=green, community=0, label="return FoldImpl(source, 2, null, folder, null, null);", prediction=50, span="167-167"];
d90 [cluster="CSharpx.EnumerableExtensions.Fold<T, TResult>(System.Collections.Generic.IEnumerable<T>, System.Func<T, T, T, TResult>)", color=green, community=0, label="return FoldImpl(source, 3, null, null, folder, null);", prediction=51, span="176-176"];
d93 [cluster="CSharpx.EnumerableExtensions.Fold<T, TResult>(System.Collections.Generic.IEnumerable<T>, System.Func<T, T, T, T, TResult>)", color=green, community=0, label="return FoldImpl(source, 4, null, null, null, folder);", prediction=52, span="185-185"];
d95 [cluster="CSharpx.EnumerableExtensions.FoldImpl<T, TResult>(System.Collections.Generic.IEnumerable<T>, int, System.Func<T, TResult>, System.Func<T, T, TResult>, System.Func<T, T, T, TResult>, System.Func<T, T, T, T, TResult>)", color=green, community=0, label="source == null", prediction=53, span="194-194"];
d96 [cluster="CSharpx.EnumerableExtensions.FoldImpl<T, TResult>(System.Collections.Generic.IEnumerable<T>, int, System.Func<T, TResult>, System.Func<T, T, TResult>, System.Func<T, T, T, TResult>, System.Func<T, T, T, T, TResult>)", color=green, community=0, label="throw new ArgumentNullException(''source'');", prediction=54, span="194-194"];
d97 [cluster="CSharpx.EnumerableExtensions.FoldImpl<T, TResult>(System.Collections.Generic.IEnumerable<T>, int, System.Func<T, TResult>, System.Func<T, T, TResult>, System.Func<T, T, T, TResult>, System.Func<T, T, T, T, TResult>)", color=green, community=0, label="count == 1 && folder1 == null\n                || count == 2 && folder2 == null\n                || count == 3 && folder3 == null\n                || count == 4 && folder4 == null", prediction=55, span="195-198"];
d98 [cluster="CSharpx.EnumerableExtensions.FoldImpl<T, TResult>(System.Collections.Generic.IEnumerable<T>, int, System.Func<T, TResult>, System.Func<T, T, TResult>, System.Func<T, T, T, TResult>, System.Func<T, T, T, T, TResult>)", color=green, community=0, label="throw new ArgumentNullException(''folder'');", prediction=56, span="200-200"];
d99 [cluster="CSharpx.EnumerableExtensions.FoldImpl<T, TResult>(System.Collections.Generic.IEnumerable<T>, int, System.Func<T, TResult>, System.Func<T, T, TResult>, System.Func<T, T, T, TResult>, System.Func<T, T, T, T, TResult>)", color=green, community=0, label="var elements = new T[count]", prediction=55, span="203-203"];
d100 [cluster="CSharpx.EnumerableExtensions.FoldImpl<T, TResult>(System.Collections.Generic.IEnumerable<T>, int, System.Func<T, TResult>, System.Func<T, T, TResult>, System.Func<T, T, T, TResult>, System.Func<T, T, T, T, TResult>)", color=green, community=0, label="AssertCountImpl(source.Index(), count, OnFolderSourceSizeErrorSelector)", prediction=55, span="204-204"];
d101 [cluster="CSharpx.EnumerableExtensions.FoldImpl<T, TResult>(System.Collections.Generic.IEnumerable<T>, int, System.Func<T, TResult>, System.Func<T, T, TResult>, System.Func<T, T, T, TResult>, System.Func<T, T, T, T, TResult>)", color=green, community=0, label="elements[e.Key] = e.Value", prediction=59, span="205-205"];
d104 [cluster="CSharpx.EnumerableExtensions.FoldImpl<T, TResult>(System.Collections.Generic.IEnumerable<T>, int, System.Func<T, TResult>, System.Func<T, T, TResult>, System.Func<T, T, T, TResult>, System.Func<T, T, T, T, TResult>)", color=green, community=0, label="return folder1(elements[0]);", prediction=55, span="209-209"];
d106 [cluster="CSharpx.EnumerableExtensions.FoldImpl<T, TResult>(System.Collections.Generic.IEnumerable<T>, int, System.Func<T, TResult>, System.Func<T, T, TResult>, System.Func<T, T, T, TResult>, System.Func<T, T, T, T, TResult>)", color=green, community=0, label="return folder2(elements[0], elements[1]);", prediction=55, span="210-210"];
d108 [cluster="CSharpx.EnumerableExtensions.FoldImpl<T, TResult>(System.Collections.Generic.IEnumerable<T>, int, System.Func<T, TResult>, System.Func<T, T, TResult>, System.Func<T, T, T, TResult>, System.Func<T, T, T, T, TResult>)", color=green, community=0, label="return folder3(elements[0], elements[1], elements[2]);", prediction=55, span="211-211"];
d110 [cluster="CSharpx.EnumerableExtensions.FoldImpl<T, TResult>(System.Collections.Generic.IEnumerable<T>, int, System.Func<T, TResult>, System.Func<T, T, TResult>, System.Func<T, T, T, TResult>, System.Func<T, T, T, T, TResult>)", color=green, community=0, label="return folder4(elements[0], elements[1], elements[2], elements[3]);", prediction=55, span="212-212"];
d102 [cluster="CSharpx.EnumerableExtensions.FoldImpl<T, TResult>(System.Collections.Generic.IEnumerable<T>, int, System.Func<T, TResult>, System.Func<T, T, TResult>, System.Func<T, T, T, TResult>, System.Func<T, T, T, T, TResult>)", color=green, community=0, label=count, prediction=55, span="207-207"];
d103 [cluster="CSharpx.EnumerableExtensions.FoldImpl<T, TResult>(System.Collections.Generic.IEnumerable<T>, int, System.Func<T, TResult>, System.Func<T, T, TResult>, System.Func<T, T, T, TResult>, System.Func<T, T, T, T, TResult>)", color=green, community=1, label=1, prediction=65, span="209-209"];
d105 [cluster="CSharpx.EnumerableExtensions.FoldImpl<T, TResult>(System.Collections.Generic.IEnumerable<T>, int, System.Func<T, TResult>, System.Func<T, T, TResult>, System.Func<T, T, T, TResult>, System.Func<T, T, T, T, TResult>)", color=green, community=1, label=2, prediction=66, span="210-210"];
d107 [cluster="CSharpx.EnumerableExtensions.FoldImpl<T, TResult>(System.Collections.Generic.IEnumerable<T>, int, System.Func<T, TResult>, System.Func<T, T, TResult>, System.Func<T, T, T, TResult>, System.Func<T, T, T, T, TResult>)", color=green, community=1, label=3, prediction=67, span="211-211"];
d109 [cluster="CSharpx.EnumerableExtensions.FoldImpl<T, TResult>(System.Collections.Generic.IEnumerable<T>, int, System.Func<T, TResult>, System.Func<T, T, TResult>, System.Func<T, T, T, TResult>, System.Func<T, T, T, T, TResult>)", color=green, community=1, label=4, prediction=68, span="212-212"];
d111 [cluster="CSharpx.EnumerableExtensions.FoldImpl<T, TResult>(System.Collections.Generic.IEnumerable<T>, int, System.Func<T, TResult>, System.Func<T, T, TResult>, System.Func<T, T, T, TResult>, System.Func<T, T, T, T, TResult>)", color=green, community=0, label="throw new NotSupportedException();", prediction=69, span="213-213"];
d119 [cluster="CSharpx.EnumerableExtensions.OnFolderSourceSizeError(int, int)", color=green, community=0, label="var message = cmp < 0\n                        ? ''Sequence contains too few elements when exactly {0} {1} expected.''\n                        : ''Sequence contains too many elements when exactly {0} {1} expected.''", prediction=70, span="221-223"];
d120 [cluster="CSharpx.EnumerableExtensions.OnFolderSourceSizeError(int, int)", color=green, community=0, label="return new Exception(string.Format(message, count.ToString(''N0''), count == 1 ? ''was'' : ''were''));", prediction=71, span="224-224"];
d126 [cluster="CSharpx.EnumerableExtensions.ForEach<T>(System.Collections.Generic.IEnumerable<T>, System.Action<T>)", color=green, community=0, label="source == null", prediction=72, span="233-233"];
d127 [cluster="CSharpx.EnumerableExtensions.ForEach<T>(System.Collections.Generic.IEnumerable<T>, System.Action<T>)", color=green, community=0, label="throw new ArgumentNullException(''source'');", prediction=73, span="233-233"];
d128 [cluster="CSharpx.EnumerableExtensions.ForEach<T>(System.Collections.Generic.IEnumerable<T>, System.Action<T>)", color=green, community=0, label="action == null", prediction=74, span="234-234"];
d129 [cluster="CSharpx.EnumerableExtensions.ForEach<T>(System.Collections.Generic.IEnumerable<T>, System.Action<T>)", color=green, community=0, label="throw new ArgumentNullException(''action'');", prediction=75, span="234-234"];
d130 [cluster="CSharpx.EnumerableExtensions.ForEach<T>(System.Collections.Generic.IEnumerable<T>, System.Action<T>)", color=green, community=0, label=source, prediction=74, span="236-236"];
d131 [cluster="CSharpx.EnumerableExtensions.ForEach<T>(System.Collections.Generic.IEnumerable<T>, System.Action<T>)", color=green, community=0, label="action(element)", prediction=74, span="238-238"];
d135 [cluster="CSharpx.EnumerableExtensions.Pairwise<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", color=green, community=0, label="source == null", prediction=78, span="250-250"];
d136 [cluster="CSharpx.EnumerableExtensions.Pairwise<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", color=green, community=0, label="throw new ArgumentNullException(''source'');", prediction=79, span="250-250"];
d137 [cluster="CSharpx.EnumerableExtensions.Pairwise<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", color=green, community=0, label="resultSelector == null", prediction=80, span="251-251"];
d138 [cluster="CSharpx.EnumerableExtensions.Pairwise<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", color=green, community=0, label="throw new ArgumentNullException(''resultSelector'');", prediction=81, span="251-251"];
d139 [cluster="CSharpx.EnumerableExtensions.Pairwise<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", color=green, community=0, label="return PairwiseImpl(source, resultSelector);", prediction=80, span="253-253"];
d142 [cluster="CSharpx.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", color=green, community=0, label="Debug.Assert(source != null)", prediction=83, span="258-258"];
d143 [cluster="CSharpx.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", color=green, community=0, label="Debug.Assert(resultSelector != null)", prediction=84, span="259-259"];
d146 [cluster="CSharpx.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", color=green, community=0, label="yield break;", prediction=85, span="264-264"];
d145 [cluster="CSharpx.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", color=green, community=0, label="!e.MoveNext()", prediction=86, span="263-263"];
d147 [cluster="CSharpx.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", color=green, community=0, label="var previous = e.Current", prediction=87, span="266-266"];
d149 [cluster="CSharpx.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", color=green, community=0, label="yield return resultSelector(previous, e.Current);", prediction=87, span="269-269"];
d144 [cluster="CSharpx.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", color=green, community=0, label="var e = source.GetEnumerator()", prediction=87, span="261-261"];
d148 [cluster="CSharpx.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", color=green, community=0, label="e.MoveNext()", prediction=87, span="267-267"];
d150 [cluster="CSharpx.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", color=green, community=0, label="previous = e.Current", prediction=91, span="270-270"];
d154 [cluster="CSharpx.EnumerableExtensions.ToDelimitedString<TSource>(System.Collections.Generic.IEnumerable<TSource>)", color=green, community=0, label="return ToDelimitedString(source, null);", prediction=92, span="281-281"];
d157 [cluster="CSharpx.EnumerableExtensions.ToDelimitedString<TSource>(System.Collections.Generic.IEnumerable<TSource>, string)", color=green, community=0, label="source == null", prediction=93, span="290-290"];
d158 [cluster="CSharpx.EnumerableExtensions.ToDelimitedString<TSource>(System.Collections.Generic.IEnumerable<TSource>, string)", color=green, community=0, label="throw new ArgumentNullException(''source'');", prediction=94, span="290-290"];
d159 [cluster="CSharpx.EnumerableExtensions.ToDelimitedString<TSource>(System.Collections.Generic.IEnumerable<TSource>, string)", color=green, community=0, label="return ToDelimitedStringImpl(source, delimiter, (sb, e) => sb.Append(e));", prediction=95, span="292-292"];
d163 [cluster="lambda expression", color=green, community=0, label="sb.Append(e)", prediction=96, span="292-292"];
d166 [cluster="CSharpx.EnumerableExtensions.ToDelimitedStringImpl<T>(System.Collections.Generic.IEnumerable<T>, string, System.Func<System.Text.StringBuilder, T, System.Text.StringBuilder>)", color=green, community=0, label="Debug.Assert(source != null)", prediction=97, span="297-297"];
d167 [cluster="CSharpx.EnumerableExtensions.ToDelimitedStringImpl<T>(System.Collections.Generic.IEnumerable<T>, string, System.Func<System.Text.StringBuilder, T, System.Text.StringBuilder>)", color=green, community=0, label="Debug.Assert(append != null)", prediction=98, span="298-298"];
d168 [cluster="CSharpx.EnumerableExtensions.ToDelimitedStringImpl<T>(System.Collections.Generic.IEnumerable<T>, string, System.Func<System.Text.StringBuilder, T, System.Text.StringBuilder>)", color=green, community=0, label="delimiter = delimiter ?? CultureInfo.CurrentCulture.TextInfo.ListSeparator", prediction=98, span="300-300"];
d169 [cluster="CSharpx.EnumerableExtensions.ToDelimitedStringImpl<T>(System.Collections.Generic.IEnumerable<T>, string, System.Func<System.Text.StringBuilder, T, System.Text.StringBuilder>)", color=green, community=0, label="var sb = new StringBuilder()", prediction=98, span="301-301"];
d173 [cluster="CSharpx.EnumerableExtensions.ToDelimitedStringImpl<T>(System.Collections.Generic.IEnumerable<T>, string, System.Func<System.Text.StringBuilder, T, System.Text.StringBuilder>)", color=green, community=0, label="sb.Append(delimiter)", prediction=98, span="306-306"];
d171 [cluster="CSharpx.EnumerableExtensions.ToDelimitedStringImpl<T>(System.Collections.Generic.IEnumerable<T>, string, System.Func<System.Text.StringBuilder, T, System.Text.StringBuilder>)", color=green, community=0, label=source, prediction=98, span="304-304"];
d174 [cluster="CSharpx.EnumerableExtensions.ToDelimitedStringImpl<T>(System.Collections.Generic.IEnumerable<T>, string, System.Func<System.Text.StringBuilder, T, System.Text.StringBuilder>)", color=green, community=0, label="append(sb, value)", prediction=98, span="307-307"];
d172 [cluster="CSharpx.EnumerableExtensions.ToDelimitedStringImpl<T>(System.Collections.Generic.IEnumerable<T>, string, System.Func<System.Text.StringBuilder, T, System.Text.StringBuilder>)", color=green, community=0, label="i++ > 0", prediction=7, span="306-306"];
d175 [cluster="CSharpx.EnumerableExtensions.ToDelimitedStringImpl<T>(System.Collections.Generic.IEnumerable<T>, string, System.Func<System.Text.StringBuilder, T, System.Text.StringBuilder>)", color=green, community=0, label="return sb.ToString();", prediction=98, span="310-310"];
d181 [cluster="CSharpx.EnumerableExtensions.TryHead<T>(System.Collections.Generic.IEnumerable<T>)", color=green, community=0, label="var e = source.GetEnumerator()", prediction=106, span="320-320"];
d182 [cluster="CSharpx.EnumerableExtensions.TryHead<T>(System.Collections.Generic.IEnumerable<T>)", color=green, community=0, label="return e.MoveNext()\n                    ? Maybe.Just(e.Current)\n                    : Maybe.Nothing<T>();", prediction=107, span="322-324"];
n223 -> n79  [color=darkseagreen4, key=1, label=int, style=dashed];
n223 -> d79  [color=green, key=1, label=int, style=dashed];
n224 -> n218  [color=darkseagreen4, key=1, label="CSharpx.EnumerableExtensions.MaterializedEnumerable<T>", style=dashed];
n224 -> n221  [color=darkseagreen4, key=1, label="CSharpx.EnumerableExtensions.MaterializedEnumerable<T>", style=dashed];
n0 -> n3  [color=darkseagreen4, key=1, label=int, style=dashed];
n0 -> n4  [color=darkseagreen4, key=1, label=int, style=dashed];
n0 -> n5  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<TSource>", style=dashed];
n0 -> n6  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<TSource>", style=dashed];
n0 -> d3  [color=green, key=1, label=int, style=dashed];
n0 -> d4  [color=green, key=1, label=int, style=dashed];
n0 -> d5  [color=green, key=1, label="System.Collections.Generic.IEnumerable<TSource>", style=dashed];
n0 -> d6  [color=green, key=1, label="System.Collections.Generic.IEnumerable<TSource>", style=dashed];
n1 -> n3  [color=darkseagreen4, key=1, label=collection, style=dashed];
n1 -> n4  [color=darkseagreen4, key=1, label=collection, style=dashed];
n10 -> n12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<TSource>", style=dashed];
n10 -> n14  [color=darkseagreen4, key=1, label=int, style=dashed];
n10 -> n15  [color=darkseagreen4, key=1, label=int, style=dashed];
n10 -> n17  [color=darkseagreen4, key=1, label=int, style=dashed];
n10 -> n18  [color=darkseagreen4, key=1, label=int, style=dashed];
n10 -> d12  [color=green, key=1, label="System.Collections.Generic.IEnumerable<TSource>", style=dashed];
n10 -> d14  [color=green, key=1, label=int, style=dashed];
n10 -> d15  [color=green, key=1, label=int, style=dashed];
n10 -> d17  [color=green, key=1, label=int, style=dashed];
n10 -> d18  [color=green, key=1, label=int, style=dashed];
n11 -> n13  [color=darkseagreen4, key=1, label=iterations, style=dashed];
n11 -> n17  [color=darkseagreen4, key=1, label=iterations, style=dashed];
n12 -> n16  [color=darkseagreen4, key=1, label=element, style=dashed];
n13 -> n13  [color=darkseagreen4, key=1, label=iterations, style=dashed];
n13 -> n17  [color=darkseagreen4, key=1, label=iterations, style=dashed];
n20 -> n23  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<TSecond>", style=dashed];
n20 -> n25  [color=darkseagreen4, key=1, label="System.Func<TFirst, TSecond, TResult>", style=dashed];
n20 -> n27  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<TFirst>", style=dashed];
n20 -> d23  [color=green, key=1, label="System.Collections.Generic.IEnumerable<TSecond>", style=dashed];
n20 -> d25  [color=green, key=1, label="System.Func<TFirst, TSecond, TResult>", style=dashed];
n20 -> d27  [color=green, key=1, label="System.Collections.Generic.IEnumerable<TFirst>", style=dashed];
n27 -> n27  [color=darkseagreen4, key=1, label=item1, style=dashed];
n30 -> n33  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<TSource>", style=dashed];
n30 -> d33  [color=green, key=1, label="System.Collections.Generic.IEnumerable<TSource>", style=dashed];
n37 -> n40  [color=darkseagreen4, key=1, label=T, style=dashed];
n37 -> d40  [color=green, key=1, label=T, style=dashed];
n43 -> n46  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<T>", style=dashed];
n43 -> d46  [color=green, key=1, label="System.Collections.Generic.IEnumerable<T>", style=dashed];
n48 -> n51  [color=darkseagreen4, key=1, label=int, style=dashed];
n48 -> n53  [color=darkseagreen4, key=1, label=int, style=dashed];
n48 -> n55  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<T>", style=dashed];
n48 -> d51  [color=green, key=1, label=int, style=dashed];
n48 -> d53  [color=green, key=1, label=int, style=dashed];
n48 -> d55  [color=green, key=1, label="System.Collections.Generic.IEnumerable<T>", style=dashed];
n58 -> n62  [color=darkseagreen4, key=1, label=int, style=dashed];
n58 -> d62  [color=green, key=1, label=int, style=dashed];
n59 -> n62  [color=darkseagreen4, key=1, label=index, style=dashed];
n60 -> n64  [color=darkseagreen4, key=1, label=endIndex, style=dashed];
n61 -> n63  [color=darkseagreen4, key=1, label=iter, style=dashed];
n61 -> n64  [color=darkseagreen4, key=1, label=iter, style=dashed];
n61 -> n65  [color=darkseagreen4, key=1, label=iter, style=dashed];
n61 -> n66  [color=darkseagreen4, key=1, label=iter, style=dashed];
n62 -> n62  [color=darkseagreen4, key=1, label=index, style=dashed];
n64 -> n64  [color=darkseagreen4, key=1, label=index, style=dashed];
n74 -> n79  [color=darkseagreen4, key=1, label=int, style=dashed];
n74 -> d79  [color=green, key=1, label=int, style=dashed];
n75 -> n78  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n85 -> n97  [color=darkseagreen4, key=1, label=int, style=dashed];
n85 -> n100  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<T>", style=dashed];
n85 -> n102  [color=darkseagreen4, key=1, label=int, style=dashed];
n85 -> n104  [color=darkseagreen4, key=1, label="System.Func<T, TResult>", style=dashed];
n85 -> n106  [color=darkseagreen4, key=1, label="System.Func<T, T, TResult>", style=dashed];
n85 -> n108  [color=darkseagreen4, key=1, label="System.Func<T, T, T, TResult>", style=dashed];
n85 -> n110  [color=darkseagreen4, key=1, label="System.Func<T, T, T, T, TResult>", style=dashed];
n85 -> d97  [color=green, key=1, label=int, style=dashed];
n85 -> d100  [color=green, key=1, label="System.Collections.Generic.IEnumerable<T>", style=dashed];
n85 -> d102  [color=green, key=1, label=int, style=dashed];
n85 -> d104  [color=green, key=1, label="System.Func<T, TResult>", style=dashed];
n85 -> d106  [color=green, key=1, label="System.Func<T, T, TResult>", style=dashed];
n85 -> d108  [color=green, key=1, label="System.Func<T, T, T, TResult>", style=dashed];
n85 -> d110  [color=green, key=1, label="System.Func<T, T, T, T, TResult>", style=dashed];
n99 -> n104  [color=darkseagreen4, key=1, label=elements, style=dashed];
n99 -> n106  [color=darkseagreen4, key=1, label=elements, style=dashed];
n99 -> n108  [color=darkseagreen4, key=1, label=elements, style=dashed];
n99 -> n110  [color=darkseagreen4, key=1, label=elements, style=dashed];
n118 -> n120  [color=darkseagreen4, key=1, label=int, style=dashed];
n118 -> d120  [color=green, key=1, label=int, style=dashed];
n125 -> n128  [color=darkseagreen4, key=1, label="System.Action<T>", style=dashed];
n125 -> n130  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<T>", style=dashed];
n125 -> n131  [color=darkseagreen4, key=1, label="System.Action<T>", style=dashed];
n125 -> d128  [color=green, key=1, label="System.Action<T>", style=dashed];
n125 -> d130  [color=green, key=1, label="System.Collections.Generic.IEnumerable<T>", style=dashed];
n125 -> d131  [color=green, key=1, label="System.Action<T>", style=dashed];
n134 -> n137  [color=darkseagreen4, key=1, label="System.Func<TSource, TSource, TResult>", style=dashed];
n134 -> n139  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<TSource>", style=dashed];
n134 -> d137  [color=green, key=1, label="System.Func<TSource, TSource, TResult>", style=dashed];
n134 -> d139  [color=green, key=1, label="System.Collections.Generic.IEnumerable<TSource>", style=dashed];
n141 -> n143  [color=darkseagreen4, key=1, label="System.Func<TSource, TSource, TResult>", style=dashed];
n141 -> d143  [color=green, key=1, label="System.Func<TSource, TSource, TResult>", style=dashed];
n144 -> n148  [color=darkseagreen4, key=1, label=e, style=dashed];
n144 -> n149  [color=darkseagreen4, key=1, label=e, style=dashed];
n147 -> n149  [color=darkseagreen4, key=1, label=previous, style=dashed];
n156 -> n159  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<TSource>", style=dashed];
n156 -> d159  [color=green, key=1, label="System.Collections.Generic.IEnumerable<TSource>", style=dashed];
n159 -> n162  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n161 -> n167  [color=darkseagreen4, key=1, label="System.Func<System.Text.StringBuilder, T, System.Text.StringBuilder>", style=dashed];
n161 -> n171  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<T>", style=dashed];
n161 -> n174  [color=darkseagreen4, key=1, label="System.Func<System.Text.StringBuilder, T, System.Text.StringBuilder>", style=dashed];
n161 -> d167  [color=green, key=1, label="System.Func<System.Text.StringBuilder, T, System.Text.StringBuilder>", style=dashed];
n161 -> d171  [color=green, key=1, label="System.Collections.Generic.IEnumerable<T>", style=dashed];
n161 -> d174  [color=green, key=1, label="System.Func<System.Text.StringBuilder, T, System.Text.StringBuilder>", style=dashed];
n168 -> n173  [color=darkseagreen4, key=1, label=string, style=dashed];
n171 -> n174  [color=darkseagreen4, key=1, label=value, style=dashed];
n169 -> n173  [color=darkseagreen4, key=1, label=sb, style=dashed];
n169 -> n174  [color=darkseagreen4, key=1, label=sb, style=dashed];
n169 -> n175  [color=darkseagreen4, key=1, label=sb, style=dashed];
n170 -> n172  [color=darkseagreen4, key=1, label=i, style=dashed];
n172 -> n172  [color=darkseagreen4, key=1, label=i, style=dashed];
n186 -> n188  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<T>", style=dashed];
n191 -> n193  [color=darkseagreen4, key=1, label=e, style=dashed];
n191 -> n194  [color=darkseagreen4, key=1, label=e, style=dashed];
n199 -> n201  [color=darkseagreen4, key=1, label=e, style=dashed];
n199 -> n202  [color=darkseagreen4, key=1, label=e, style=dashed];
n209 -> n211  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<T>", style=dashed];
n209 -> n212  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<T>", style=dashed];
d1 -> d3  [color=green, key=1, label=collection, style=dashed];
d1 -> d4  [color=green, key=1, label=collection, style=dashed];
d11 -> d13  [color=green, key=1, label=iterations, style=dashed];
d11 -> d17  [color=green, key=1, label=iterations, style=dashed];
d170 -> d172  [color=green, key=1, label=i, style=dashed];
d12 -> d16  [color=green, key=1, label=element, style=dashed];
d13 -> d17  [color=green, key=1, label=iterations, style=dashed];
d13 -> d13  [color=green, key=1, label=iterations, style=dashed];
d27 -> d27  [color=green, key=1, label=item1, style=dashed];
d59 -> d62  [color=green, key=1, label=index, style=dashed];
d60 -> d64  [color=green, key=1, label=endIndex, style=dashed];
d62 -> d62  [color=green, key=1, label=index, style=dashed];
d61 -> d63  [color=green, key=1, label=iter, style=dashed];
d61 -> d66  [color=green, key=1, label=iter, style=dashed];
d61 -> d64  [color=green, key=1, label=iter, style=dashed];
d61 -> d65  [color=green, key=1, label=iter, style=dashed];
d64 -> d64  [color=green, key=1, label=index, style=dashed];
d75 -> n78  [color=green, key=1, label="lambda expression", style=dashed];
d99 -> d104  [color=green, key=1, label=elements, style=dashed];
d99 -> d106  [color=green, key=1, label=elements, style=dashed];
d99 -> d108  [color=green, key=1, label=elements, style=dashed];
d99 -> d110  [color=green, key=1, label=elements, style=dashed];
d147 -> d149  [color=green, key=1, label=previous, style=dashed];
d144 -> d149  [color=green, key=1, label=e, style=dashed];
d144 -> d148  [color=green, key=1, label=e, style=dashed];
d159 -> n162  [color=green, key=1, label="lambda expression", style=dashed];
d168 -> d173  [color=green, key=1, label=string, style=dashed];
d169 -> d174  [color=green, key=1, label=sb, style=dashed];
d169 -> d173  [color=green, key=1, label=sb, style=dashed];
d169 -> d175  [color=green, key=1, label=sb, style=dashed];
d171 -> d174  [color=green, key=1, label=value, style=dashed];
d172 -> d172  [color=green, key=1, label=i, style=dashed];
}
