digraph  {
n0 [label="Entry Humanizer.Tests.CasingTests.ApplyCaseTitle(string, string)", span="12-12", cluster="Humanizer.Tests.CasingTests.ApplyCaseTitle(string, string)"];
n1 [label="Assert.Equal(expectedOutput, input.ApplyCase(LetterCasing.Title))", span="14-14", cluster="Humanizer.Tests.CasingTests.ApplyCaseTitle(string, string)"];
n2 [label="Exit Humanizer.Tests.CasingTests.ApplyCaseTitle(string, string)", span="12-12", cluster="Humanizer.Tests.CasingTests.ApplyCaseTitle(string, string)"];
n3 [label="Entry string.ApplyCase(Humanizer.LetterCasing)", span="15-15", cluster="string.ApplyCase(Humanizer.LetterCasing)"];
n4 [label="Entry Unk.Equal", span="", cluster="Unk.Equal"];
n5 [label="Entry Humanizer.Tests.CasingTests.ApplyCaseLower(string, string)", span="22-22", cluster="Humanizer.Tests.CasingTests.ApplyCaseLower(string, string)"];
n6 [label="Assert.Equal(expectedOutput, input.ApplyCase(LetterCasing.LowerCase))", span="24-24", cluster="Humanizer.Tests.CasingTests.ApplyCaseLower(string, string)"];
n7 [label="Exit Humanizer.Tests.CasingTests.ApplyCaseLower(string, string)", span="22-22", cluster="Humanizer.Tests.CasingTests.ApplyCaseLower(string, string)"];
n8 [label="Entry Humanizer.Tests.CasingTests.ApplyCaseSentence(string, string)", span="31-31", cluster="Humanizer.Tests.CasingTests.ApplyCaseSentence(string, string)"];
n9 [label="Assert.Equal(expectedOutput, input.ApplyCase(LetterCasing.Sentence))", span="33-33", cluster="Humanizer.Tests.CasingTests.ApplyCaseSentence(string, string)"];
n10 [label="Exit Humanizer.Tests.CasingTests.ApplyCaseSentence(string, string)", span="31-31", cluster="Humanizer.Tests.CasingTests.ApplyCaseSentence(string, string)"];
n11 [label="Entry Humanizer.Tests.CasingTests.ApplyCaseAllCaps(string, string)", span="40-40", cluster="Humanizer.Tests.CasingTests.ApplyCaseAllCaps(string, string)"];
n12 [label="Assert.Equal(expectedOutput, input.ApplyCase(LetterCasing.AllCaps))", span="42-42", cluster="Humanizer.Tests.CasingTests.ApplyCaseAllCaps(string, string)"];
n13 [label="Exit Humanizer.Tests.CasingTests.ApplyCaseAllCaps(string, string)", span="40-40", cluster="Humanizer.Tests.CasingTests.ApplyCaseAllCaps(string, string)"];
m0_49 [label="Entry Unk.SingleOrDefault", span="", cluster="Unk.SingleOrDefault", file="ReflectionHelper.cs"];
m0_0 [label="Entry CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12", cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ReflectionHelper.cs"];
m0_1 [label="return Choose(\r\n                (args, optionSpecs) => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer)),\r\n                types,\r\n                arguments,\r\n                nameComparer,\r\n                parsingCulture);", span="18-23", cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=red, community=0, file="ReflectionHelper.cs"];
m0_2 [label="Exit CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12", cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, file="ReflectionHelper.cs"];
m0_3 [label="Entry CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="26-26", cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, file="ReflectionHelper.cs"];
m0_4 [label="Entry lambda expression", span="19-19", cluster="lambda expression", file="ReflectionHelper.cs"];
m0_17 [label="var attributes = assembly.GetCustomAttributes<TAttribute>().ToArray()", span="59-59", cluster="CommandLine.Infrastructure.ReflectionHelper.GetAttribute<TAttribute>()", file="ReflectionHelper.cs"];
m0_25 [label="return verbs.Any(a => nameComparer.Equals(a.Item1.Name, arguments.First()))\r\n                ? InstanceBuilder.Build(\r\n                    Maybe.Just<Func<object>>(() => verbs.Single(v => nameComparer.Equals(v.Item1.Name, arguments.First())).Item2.AutoDefault()),\r\n                    tokenizer,\r\n                    arguments.Skip(1),\r\n                    nameComparer,\r\n                    parsingCulture)\r\n                : new NotParsed<object>(\r\n                    verbs.Select(v => v.Item2),\r\n                    new[] { new BadVerbSelectedError(arguments.First()) });", span="55-64", cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ReflectionHelper.cs"];
m0_16 [label="var assembly = GetExecutingOrEntryAssembly()", span="54-54", cluster="CommandLine.Infrastructure.ReflectionHelper.GetAttribute<TAttribute>()", file="ReflectionHelper.cs"];
m0_57 [label="new HelpVerbRequestedError(v.Item1.Name, v.Item2, true)", span="76-76", cluster="lambda expression", file="ReflectionHelper.cs"];
m0_23 [label="Entry CommandLine.Core.InstanceChooser.CreateHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", span="67-67", cluster="CommandLine.Core.InstanceChooser.CreateHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", file="ReflectionHelper.cs"];
m0_60 [label="System.StringComparer", span="", cluster="CommandLine.Infrastructure.ReflectionHelper.GetExecutingOrEntryAssembly()", file="ReflectionHelper.cs"];
m0_59 [label="Entry HelpVerbRequestedError.cstr", span="", cluster="HelpVerbRequestedError.cstr", file="ReflectionHelper.cs"];
m0_58 [label="Exit lambda expression", span="76-76", cluster="lambda expression", file="ReflectionHelper.cs"];
m0_28 [label="return assembly.GetName().Name;", span="70-70", cluster="CommandLine.Infrastructure.ReflectionHelper.GetAssemblyName()", file="ReflectionHelper.cs"];
m0_26 [label="Exit CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="48-48", cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ReflectionHelper.cs"];
m0_27 [label="Entry Unk.Any", span="", cluster="Unk.Any", file="ReflectionHelper.cs"];
m0_29 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="34-34", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ReflectionHelper.cs"];
m0_30 [label="Entry System.Reflection.Assembly.GetName()", span="0-0", cluster="System.Reflection.Assembly.GetName()", file="ReflectionHelper.cs"];
m0_47 [label="return verb.Length > 0\r\n                      ? verbs.SingleOrDefault(v => nameComparer.Equals(v.Item1.Name, verb))\r\n                             .ToMaybe()\r\n                             .Return(\r\n                                 v => new HelpVerbRequestedError(v.Item1.Name, v.Item2, true),\r\n                                 new HelpVerbRequestedError(null, null, false))\r\n                      : new HelpVerbRequestedError(null, null, false);", span="72-78", cluster="CommandLine.Core.InstanceChooser.CreateHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", file="ReflectionHelper.cs"];
m0_48 [label="Exit CommandLine.Core.InstanceChooser.CreateHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", span="67-67", cluster="CommandLine.Core.InstanceChooser.CreateHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", file="ReflectionHelper.cs"];
m0_14 [label="Exit CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="26-26", cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, file="ReflectionHelper.cs"];
m0_13 [label="return arguments.Empty()\r\n                ? new NotParsed<object>(\r\n                    types,\r\n                    new[] { new NoVerbSelectedError() })\r\n                : nameComparer.Equals(''help'', arguments.First())\r\n                   ? new NotParsed<object>(\r\n                       types, new[] { CreateHelpVerbRequestedError(\r\n                                        verbs,\r\n                                        arguments.Skip(1).SingleOrDefault() ?? string.Empty,\r\n                                        nameComparer) })\r\n                   : MatchVerb(tokenizer, verbs, arguments, nameComparer, parsingCulture);", span="35-45", cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ReflectionHelper.cs"];
m0_15 [label="Entry CommandLine.Core.Verb.SelectFromTypes(System.Collections.Generic.IEnumerable<System.Type>)", span="40-40", cluster="CommandLine.Core.Verb.SelectFromTypes(System.Collections.Generic.IEnumerable<System.Type>)", color=green, community=0, file="ReflectionHelper.cs"];
m0_18 [label="Entry CommandLine.NoVerbSelectedError.NoVerbSelectedError()", span="406-406", cluster="CommandLine.NoVerbSelectedError.NoVerbSelectedError()", file="ReflectionHelper.cs"];
m0_19 [label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="ReflectionHelper.cs"];
m0_32 [label="var assembly = GetExecutingOrEntryAssembly()", span="75-75", cluster="CommandLine.Infrastructure.ReflectionHelper.GetAssemblyVersion()", file="ReflectionHelper.cs"];
m0_51 [label="Entry CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", span="368-368", cluster="CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", file="ReflectionHelper.cs"];
m0_12 [label="var verbs = Verb.SelectFromTypes(types)", span="33-33", cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ReflectionHelper.cs"];
m0_11 [label=attr, span="34-34", cluster="lambda expression", file="ReflectionHelper.cs", color=green, community=0];
m0_35 [label="Exit lambda expression", span="55-55", cluster="lambda expression", file="ReflectionHelper.cs"];
m0_20 [label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0", cluster="System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", file="ReflectionHelper.cs"];
m0_39 [label="Entry Unk.Single", span="", cluster="Unk.Single", file="ReflectionHelper.cs"];
m0_50 [label="Entry Unk.ToMaybe", span="", cluster="Unk.ToMaybe", file="ReflectionHelper.cs"];
m0_21 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="ReflectionHelper.cs"];
m0_9 [label="NameLookup.Contains(name, optionSpecs, nameComparer)", span="19-19", cluster="lambda expression", file="ReflectionHelper.cs", color=red, community=0];
m0_56 [label="Entry lambda expression", span="76-76", cluster="lambda expression", file="ReflectionHelper.cs"];
m0_5 [label="Entry Unk.ToDictionary", span="", cluster="Unk.ToDictionary", color=red, community=0, file="ReflectionHelper.cs"];
m0_6 [label="Exit lambda expression", span="19-19", cluster="lambda expression", file="ReflectionHelper.cs"];
m0_8 [label="Entry lambda expression", span="19-19", cluster="lambda expression", file="ReflectionHelper.cs"];
m0_10 [label="Exit lambda expression", span="19-19", cluster="lambda expression", file="ReflectionHelper.cs"];
m0_34 [label="Exit CommandLine.Infrastructure.ReflectionHelper.GetAssemblyVersion()", span="73-73", cluster="CommandLine.Infrastructure.ReflectionHelper.GetAssemblyVersion()", file="ReflectionHelper.cs"];
m0_37 [label="verbs.Single(v => nameComparer.Equals(v.Item1.Name, arguments.First())).Item2.AutoDefault()", span="57-57", cluster="lambda expression", file="ReflectionHelper.cs"];
m0_42 [label="nameComparer.Equals(v.Item1.Name, arguments.First())", span="57-57", cluster="lambda expression", file="ReflectionHelper.cs"];
m0_33 [label="return assembly.GetName().Version.ToStringInvariant();", span="76-76", cluster="CommandLine.Infrastructure.ReflectionHelper.GetAssemblyVersion()", file="ReflectionHelper.cs"];
m0_36 [label="Entry lambda expression", span="57-57", cluster="lambda expression", file="ReflectionHelper.cs"];
m0_44 [label="Entry lambda expression", span="63-63", cluster="lambda expression", file="ReflectionHelper.cs"];
m0_38 [label="Exit lambda expression", span="57-57", cluster="lambda expression", file="ReflectionHelper.cs"];
m0_41 [label="Entry lambda expression", span="57-57", cluster="lambda expression", file="ReflectionHelper.cs"];
m0_43 [label="Exit lambda expression", span="57-57", cluster="lambda expression", file="ReflectionHelper.cs"];
m0_45 [label="v.Item2", span="63-63", cluster="lambda expression", file="ReflectionHelper.cs"];
m0_46 [label="Exit lambda expression", span="63-63", cluster="lambda expression", file="ReflectionHelper.cs"];
m0_54 [label="nameComparer.Equals(v.Item1.Name, verb)", span="73-73", cluster="lambda expression", file="ReflectionHelper.cs"];
m0_53 [label="Entry lambda expression", span="73-73", cluster="lambda expression", file="ReflectionHelper.cs"];
m0_55 [label="Exit lambda expression", span="73-73", cluster="lambda expression", file="ReflectionHelper.cs"];
m0_7 [label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", color=green, community=0, file="ReflectionHelper.cs"];
m0_31 [label="Entry CommandLine.Infrastructure.ReflectionHelper.GetAssemblyVersion()", span="73-73", cluster="CommandLine.Infrastructure.ReflectionHelper.GetAssemblyVersion()", file="ReflectionHelper.cs"];
m0_62 [label="System.Collections.Generic.IEnumerable<string>", span="", cluster="System.Reflection.Assembly.GetExecutingAssembly()", file="ReflectionHelper.cs"];
m0_61 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span="", cluster="System.Reflection.Assembly.GetEntryAssembly()", file="ReflectionHelper.cs"];
m0_52 [label="Entry Unk.Return", span="", cluster="Unk.Return", file="ReflectionHelper.cs"];
m0_24 [label="Entry System.Reflection.Assembly.GetCustomAttributes<T>()", span="0-0", cluster="System.Reflection.Assembly.GetCustomAttributes<T>()", file="ReflectionHelper.cs"];
m0_40 [label="Entry Unk.AutoDefault", span="", cluster="Unk.AutoDefault", file="ReflectionHelper.cs"];
m0_22 [label="Entry System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", file="ReflectionHelper.cs"];
m0_63 [label="System.StringComparer", span="", file="ReflectionHelper.cs"];
m0_64 [label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>", span="", file="ReflectionHelper.cs"];
m0_65 [label=string, span="", file="ReflectionHelper.cs"];
m0_66 [label="System.StringComparer", span="", file="ReflectionHelper.cs"];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=2, style=dotted];
n1 -> n4  [key=2, style=dotted];
n2 -> n0  [key=0, style=bold, color=blue];
n5 -> n6  [key=0, style=solid];
n6 -> n7  [key=0, style=solid];
n6 -> n3  [key=2, style=dotted];
n6 -> n4  [key=2, style=dotted];
n7 -> n5  [key=0, style=bold, color=blue];
n8 -> n9  [key=0, style=solid];
n9 -> n10  [key=0, style=solid];
n9 -> n3  [key=2, style=dotted];
n9 -> n4  [key=2, style=dotted];
n10 -> n8  [key=0, style=bold, color=blue];
n11 -> n12  [key=0, style=solid];
n12 -> n13  [key=0, style=solid];
n12 -> n3  [key=2, style=dotted];
n12 -> n4  [key=2, style=dotted];
n13 -> n11  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid, color=red];
m0_0 -> m0_2  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<System.Attribute>"];
m0_0 -> m0_5  [key=1, style=dashed, color=red, label="System.StringComparer"];
m0_0 -> m0_9  [key=1, style=dashed, color=red, label="System.StringComparer"];
m0_1 -> m0_2  [key=0, style=solid, color=red];
m0_1 -> m0_3  [key=0, style=solid, color=green];
m0_1 -> m0_4  [key=1, style=dashed, color=red, label="lambda expression"];
m0_2 -> m0_4  [key=0, style=solid, color=green];
m0_2 -> m0_5  [key=2, style=dotted, color=green];
m0_2 -> m0_8  [key=1, style=dashed, color=green, label="lambda expression"];
m0_2 -> m0_0  [key=0, style=bold, color=blue];
m0_3 -> m0_4  [key=0, style=solid, color=green];
m0_3 -> m0_12  [key=0, style=solid];
m0_3 -> m0_13  [key=1, style=dashed, color=darkseagreen4, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>"];
m0_4 -> m0_0  [key=0, style=bold, color=blue];
m0_4 -> m0_5  [key=0, style=solid, color=red];
m0_4 -> m0_9  [key=1, style=dashed, color=red, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m0_4 -> m0_7  [key=0, style=solid, color=green];
m0_17 -> m0_18  [key=0, style=solid];
m0_17 -> m0_24  [key=2, style=dotted];
m0_17 -> m0_25  [key=2, style=dotted];
m0_25 -> m0_26  [key=0, style=solid];
m0_25 -> m0_27  [key=2, style=dotted];
m0_25 -> m0_28  [key=2, style=dotted];
m0_25 -> m0_21  [key=2, style=dotted];
m0_25 -> m0_29  [key=2, style=dotted];
m0_25 -> m0_30  [key=2, style=dotted];
m0_25 -> m0_31  [key=2, style=dotted];
m0_25 -> m0_32  [key=2, style=dotted];
m0_25 -> m0_19  [key=2, style=dotted];
m0_25 -> m0_33  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_25 -> m0_36  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_25 -> m0_44  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_16 -> m0_17  [key=0, style=solid];
m0_16 -> m0_23  [key=2, style=dotted];
m0_57 -> m0_58  [key=0, style=solid];
m0_57 -> m0_61  [key=2, style=dotted];
m0_57 -> m0_59  [key=2, style=dotted];
m0_23 -> m0_57  [key=0, style=solid];
m0_23 -> m0_47  [key=0, style=solid];
m0_23 -> m0_54  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_60 -> m0_23  [key=0, style=bold, color=blue];
m0_60 -> m0_5  [key=1, style=dashed, color=red, label="System.StringComparer"];
m0_60 -> m0_9  [key=1, style=dashed, color=red, label="System.StringComparer"];
m0_59 -> m0_60  [key=0, style=solid];
m0_58 -> m0_59  [key=0, style=solid];
m0_58 -> m0_58  [key=1, style=dashed, color=darkseagreen4, label=assembly];
m0_58 -> m0_62  [key=2, style=dotted];
m0_58 -> m0_56  [key=0, style=bold, color=blue];
m0_28 -> m0_29  [key=0, style=solid];
m0_28 -> m0_30  [key=2, style=dotted];
m0_26 -> m0_27  [key=0, style=solid];
m0_26 -> m0_24  [key=0, style=bold, color=blue];
m0_27 -> m0_23  [key=2, style=dotted];
m0_27 -> m0_28  [key=0, style=solid];
m0_29 -> m0_26  [key=0, style=bold, color=blue];
m0_47 -> m0_48  [key=0, style=solid];
m0_47 -> m0_49  [key=2, style=dotted];
m0_47 -> m0_50  [key=2, style=dotted];
m0_47 -> m0_51  [key=2, style=dotted];
m0_47 -> m0_52  [key=2, style=dotted];
m0_47 -> m0_53  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_47 -> m0_56  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_48 -> m0_23  [key=0, style=bold, color=blue];
m0_14 -> m0_15  [key=0, style=solid, color=green];
m0_14 -> m0_16  [key=0, style=solid, color=green];
m0_14 -> m0_3  [key=0, style=bold, color=blue];
m0_13 -> m0_14  [key=0, style=solid, color=green];
m0_13 -> m0_16  [key=2, style=dotted];
m0_13 -> m0_17  [key=2, style=dotted];
m0_13 -> m0_18  [key=2, style=dotted];
m0_13 -> m0_19  [key=2, style=dotted];
m0_13 -> m0_20  [key=2, style=dotted];
m0_13 -> m0_21  [key=2, style=dotted];
m0_13 -> m0_22  [key=2, style=dotted];
m0_13 -> m0_23  [key=2, style=dotted];
m0_13 -> m0_24  [key=2, style=dotted];
m0_15 -> m0_19  [key=0, style=solid, color=green];
m0_15 -> m0_20  [key=2, style=dotted, color=green];
m0_15 -> m0_21  [key=2, style=dotted, color=green];
m0_15 -> m0_22  [key=2, style=dotted, color=green];
m0_18 -> m0_19  [key=0, style=solid];
m0_18 -> m0_21  [key=2, style=dotted];
m0_18 -> m0_22  [key=2, style=dotted];
m0_19 -> m0_13  [key=0, style=bold, color=blue];
m0_32 -> m0_23  [key=2, style=dotted];
m0_32 -> m0_33  [key=0, style=solid];
m0_12 -> m0_13  [key=0, style=solid];
m0_12 -> m0_15  [key=2, style=dotted];
m0_11 -> m0_10  [key=0, style=solid, color=green];
m0_35 -> m0_33  [key=0, style=bold, color=blue];
m0_9 -> m0_10  [key=0, style=solid, color=red];
m0_9 -> m0_11  [key=2, style=dotted, color=red];
m0_56 -> m0_57  [key=0, style=solid];
m0_5 -> m0_6  [key=0, style=solid, color=red];
m0_5 -> m0_7  [key=2, style=dotted, color=red];
m0_5 -> m0_8  [key=1, style=dashed, color=red, label="lambda expression"];
m0_6 -> m0_4  [key=0, style=bold, color=blue];
m0_8 -> m0_9  [key=0, style=solid, color=red];
m0_8 -> m0_11  [key=0, style=solid, color=green];
m0_10 -> m0_8  [key=0, style=bold, color=blue];
m0_34 -> m0_35  [key=0, style=solid];
m0_34 -> m0_19  [key=2, style=dotted];
m0_34 -> m0_20  [key=2, style=dotted];
m0_34 -> m0_31  [key=0, style=bold, color=blue];
m0_37 -> m0_38  [key=0, style=solid];
m0_37 -> m0_39  [key=2, style=dotted];
m0_37 -> m0_40  [key=2, style=dotted];
m0_37 -> m0_41  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_42 -> m0_43  [key=0, style=solid];
m0_42 -> m0_19  [key=2, style=dotted];
m0_42 -> m0_20  [key=2, style=dotted];
m0_33 -> m0_34  [key=0, style=solid];
m0_33 -> m0_30  [key=2, style=dotted];
m0_33 -> m0_35  [key=2, style=dotted];
m0_36 -> m0_37  [key=0, style=solid];
m0_44 -> m0_45  [key=0, style=solid];
m0_38 -> m0_36  [key=0, style=bold, color=blue];
m0_41 -> m0_42  [key=0, style=solid];
m0_43 -> m0_41  [key=0, style=bold, color=blue];
m0_45 -> m0_46  [key=0, style=solid];
m0_46 -> m0_44  [key=0, style=bold, color=blue];
m0_54 -> m0_55  [key=0, style=solid];
m0_54 -> m0_20  [key=2, style=dotted];
m0_53 -> m0_54  [key=0, style=solid];
m0_55 -> m0_53  [key=0, style=bold, color=blue];
m0_7 -> m0_6  [key=0, style=solid, color=green];
m0_7 -> m0_9  [key=2, style=dotted, color=green];
m0_31 -> m0_32  [key=0, style=solid];
m0_62 -> m0_34  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m0_62 -> m0_37  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m0_62 -> m0_42  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m0_61 -> m0_9  [key=1, style=dashed, color=red, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m0_24 -> m0_25  [key=0, style=solid];
m0_24 -> m0_34  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m0_24 -> m0_37  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>"];
m0_24 -> m0_42  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m0_63 -> m0_34  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_63 -> m0_37  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_63 -> m0_42  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_64 -> m0_37  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>"];
m0_65 -> m0_54  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_66 -> m0_54  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
}
