digraph  {
n138 [label="CommandLine.Parser", span=""];
n139 [label="System.Collections.Generic.IEnumerable<string>", span=""];
n140 [label=factory, span=""];
n141 [label="System.Func<T>", span=""];
n142 [label="System.Collections.Generic.IEnumerable<string>", span=""];
n143 [label="System.Collections.Generic.IEnumerable<string>", span=""];
n144 [label="params System.Type[]", span=""];
n145 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
n146 [label="CommandLine.ParserSettings", span=""];
n147 [label="CommandLine.ParserResult<T>", span=""];
n0 [cluster="lambda expression", label="Entry lambda expression", span="20-20"];
n1 [cluster="lambda expression", label="new Parser(new ParserSettings{ HelpWriter = Console.Error })", span="20-20"];
n2 [cluster="lambda expression", label="Exit lambda expression", span="20-20"];
n3 [cluster="CommandLine.Parser.Parser(CommandLine.ParserSettings)", label="Entry CommandLine.Parser.Parser(CommandLine.ParserSettings)", span="45-45"];
n4 [cluster="CommandLine.ParserSettings.ParserSettings()", label="Entry CommandLine.ParserSettings.ParserSettings()", span="25-25"];
n5 [cluster="CommandLine.Parser.Parser()", label="Entry CommandLine.Parser.Parser()", span="25-25"];
n6 [cluster="CommandLine.Parser.Parser()", label="settings = new ParserSettings { Consumed = true }", span="27-27"];
n7 [cluster="CommandLine.Parser.Parser()", label="Exit CommandLine.Parser.Parser()", span="25-25"];
n8 [cluster="CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)", label="Entry CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)", span="36-36"];
n9 [cluster="CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)", label="configuration == null", span="38-38"];
n12 [cluster="CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)", label="configuration(settings)", span="41-41"];
n10 [cluster="CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)", label="throw new ArgumentNullException(''configuration'');", span="38-38"];
n11 [cluster="CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)", label="settings = new ParserSettings()", span="40-40"];
n13 [cluster="CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)", label="settings.Consumed = true", span="42-42"];
n16 [cluster="System.Action<T>.Invoke(T)", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
n14 [cluster="CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)", label="Exit CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)", span="36-36"];
n15 [cluster="System.ArgumentNullException.ArgumentNullException(string)", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
n17 [cluster="CommandLine.Parser.Parser(CommandLine.ParserSettings)", label="this.settings = settings", span="47-47"];
n18 [cluster="CommandLine.Parser.Parser(CommandLine.ParserSettings)", label="this.settings.Consumed = true", span="48-48"];
n19 [cluster="CommandLine.Parser.Parser(CommandLine.ParserSettings)", label="Exit CommandLine.Parser.Parser(CommandLine.ParserSettings)", span="45-45"];
n20 [cluster="CommandLine.Parser.~Parser()", label="Entry CommandLine.Parser.~Parser()", span="54-54"];
n21 [cluster="CommandLine.Parser.~Parser()", label="Dispose(false)", span="56-56"];
n22 [cluster="CommandLine.Parser.~Parser()", label="Exit CommandLine.Parser.~Parser()", span="54-54"];
n23 [cluster="CommandLine.Parser.Dispose(bool)", label="Entry CommandLine.Parser.Dispose(bool)", span="213-213"];
n24 [cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", label="Entry CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", span="84-84"];
n25 [cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", label="args == null", span="86-86"];
n28 [cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", label="return MakeParserResult(\r\n                () => InstanceBuilder.Build(\r\n                    factory,\r\n                    (arguments, optionSpecs) => Tokenize(arguments, optionSpecs, settings),\r\n                    args,\r\n                    settings.NameComparer,\r\n                    settings.ParsingCulture),\r\n                settings);", span="92-99"];
n35 [cluster="lambda expression", label="InstanceBuilder.Build(\r\n                    factory,\r\n                    (arguments, optionSpecs) => Tokenize(arguments, optionSpecs, settings),\r\n                    args,\r\n                    settings.NameComparer,\r\n                    settings.ParsingCulture)", span="93-98"];
n26 [cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", label="throw new ArgumentNullException(''args'');", span="86-86"];
n27 [cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", label="var factory = typeof(T).IsMutable()\r\n                ? Maybe.Just<Func<T>>(Activator.CreateInstance<T>)\r\n                : Maybe.Nothing<Func<T>>()", span="88-90"];
n30 [cluster="System.Type.IsMutable()", label="Entry System.Type.IsMutable()", span="115-115"];
n31 [cluster="CSharpx.Maybe.Just<T>(T)", label="Entry CSharpx.Maybe.Just<T>(T)", span="80-80"];
n32 [cluster="CSharpx.Maybe.Nothing<T>()", label="Entry CSharpx.Maybe.Nothing<T>()", span="75-75"];
n29 [cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", label="Exit CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", span="84-84"];
n33 [cluster="Unk.MakeParserResult", label="Entry Unk.MakeParserResult", span=""];
n34 [cluster="lambda expression", label="Entry lambda expression", span="93-98"];
n36 [cluster="lambda expression", label="Exit lambda expression", span="93-98"];
n37 [cluster="Unk.Build", label="Entry Unk.Build", span=""];
n38 [cluster="lambda expression", label="Entry lambda expression", span="95-95"];
n39 [cluster="lambda expression", label="Tokenize(arguments, optionSpecs, settings)", span="95-95"];
n40 [cluster="lambda expression", label="Exit lambda expression", span="95-95"];
n41 [cluster="CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)", label="Entry CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)", span="167-167"];
n42 [cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", label="Entry CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", span="112-112"];
n43 [cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", label="factory == null", span="115-115"];
n47 [cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", label="args == null", span="117-117"];
n49 [cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", label="return MakeParserResult(\r\n                () => InstanceBuilder.Build(\r\n                    Maybe.Just(factory),\r\n                    (arguments, optionSpecs) => Tokenize(arguments, optionSpecs, settings),\r\n                    args,\r\n                    settings.NameComparer,\r\n                    settings.ParsingCulture),\r\n                settings);", span="119-126"];
n53 [cluster="lambda expression", label="InstanceBuilder.Build(\r\n                    Maybe.Just(factory),\r\n                    (arguments, optionSpecs) => Tokenize(arguments, optionSpecs, settings),\r\n                    args,\r\n                    settings.NameComparer,\r\n                    settings.ParsingCulture)", span="120-125"];
n44 [cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", label="throw new ArgumentNullException(''factory'');", span="115-115"];
n45 [cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", label="!typeof(T).IsMutable()", span="116-116"];
n46 [cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", label="throw new ArgumentException(''factory'');", span="116-116"];
n48 [cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", label="throw new ArgumentNullException(''args'');", span="117-117"];
n50 [cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", label="Exit CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", span="112-112"];
n51 [cluster="System.ArgumentException.ArgumentException(string)", label="Entry System.ArgumentException.ArgumentException(string)", span="0-0"];
n52 [cluster="lambda expression", label="Entry lambda expression", span="120-125"];
n54 [cluster="lambda expression", label="Exit lambda expression", span="120-125"];
n55 [cluster="lambda expression", label="Entry lambda expression", span="122-122"];
n56 [cluster="lambda expression", label="Tokenize(arguments, optionSpecs, settings)", span="122-122"];
n57 [cluster="lambda expression", label="Exit lambda expression", span="122-122"];
n58 [cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", label="Entry CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", span="141-141"];
n59 [cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", label="args == null", span="143-143"];
n61 [cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", label="types == null", span="144-144"];
n63 [cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", label="types.Length == 0", span="145-145"];
n65 [cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", label="return MakeParserResult(\r\n                () => InstanceChooser.Choose(\r\n                    (arguments, optionSpecs) => Tokenize(arguments, optionSpecs, settings),\r\n                    types,\r\n                    args,\r\n                    settings.NameComparer,\r\n                    settings.ParsingCulture),\r\n                settings);", span="147-154"];
n69 [cluster="lambda expression", label="InstanceChooser.Choose(\r\n                    (arguments, optionSpecs) => Tokenize(arguments, optionSpecs, settings),\r\n                    types,\r\n                    args,\r\n                    settings.NameComparer,\r\n                    settings.ParsingCulture)", span="148-153"];
n60 [cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", label="throw new ArgumentNullException(''args'');", span="143-143"];
n62 [cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", label="throw new ArgumentNullException(''types'');", span="144-144"];
n64 [cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", label="throw new ArgumentOutOfRangeException(''types'');", span="145-145"];
n66 [cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", label="Exit CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", span="141-141"];
n67 [cluster="System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", label="Entry System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", span="0-0"];
n68 [cluster="lambda expression", label="Entry lambda expression", span="148-153"];
n70 [cluster="lambda expression", label="Exit lambda expression", span="148-153"];
n71 [cluster="Unk.Choose", label="Entry Unk.Choose", span=""];
n72 [cluster="lambda expression", label="Entry lambda expression", span="149-149"];
n73 [cluster="lambda expression", label="Tokenize(arguments, optionSpecs, settings)", span="149-149"];
n74 [cluster="lambda expression", label="Exit lambda expression", span="149-149"];
n75 [cluster="CommandLine.Parser.Dispose()", label="Entry CommandLine.Parser.Dispose()", span="160-160"];
n76 [cluster="CommandLine.Parser.Dispose()", label="Dispose(true)", span="162-162"];
n77 [cluster="CommandLine.Parser.Dispose()", label="GC.SuppressFinalize(this)", span="164-164"];
n78 [cluster="CommandLine.Parser.Dispose()", label="Exit CommandLine.Parser.Dispose()", span="160-160"];
n79 [cluster="System.GC.SuppressFinalize(object)", label="Entry System.GC.SuppressFinalize(object)", span="0-0"];
n80 [cluster="CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)", label="var tokens = settings.EnableDashDash\r\n                ? Tokenizer.PreprocessDashDash(\r\n                        arguments,\r\n                        args =>\r\n                            Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, settings.NameComparer)))\r\n                : Tokenizer.Tokenize(arguments, name => NameLookup.Contains(name, optionSpecs, settings.NameComparer))", span="172-177"];
n88 [cluster="lambda expression", label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, settings.NameComparer))", span="176-176"];
n91 [cluster="lambda expression", label="NameLookup.Contains(name, optionSpecs, settings.NameComparer)", span="176-176"];
n95 [cluster="lambda expression", label="NameLookup.Contains(name, optionSpecs, settings.NameComparer)", span="177-177"];
n81 [cluster="CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)", label="var explodedTokens = Tokenizer.ExplodeOptionList(tokens, name => NameLookup.HavingSeparator(name, optionSpecs, settings.NameComparer))", span="178-178"];
n98 [cluster="lambda expression", label="NameLookup.HavingSeparator(name, optionSpecs, settings.NameComparer)", span="178-178"];
n84 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", span="34-34"];
n85 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="14-14"];
n87 [cluster="lambda expression", label="Entry lambda expression", span="175-176"];
n94 [cluster="lambda expression", label="Entry lambda expression", span="177-177"];
n82 [cluster="CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)", label="return explodedTokens;", span="179-179"];
n86 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", span="47-47"];
n97 [cluster="lambda expression", label="Entry lambda expression", span="178-178"];
n83 [cluster="CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)", label="Exit CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)", span="167-167"];
n89 [cluster="lambda expression", label="Exit lambda expression", span="175-176"];
n90 [cluster="lambda expression", label="Entry lambda expression", span="176-176"];
n92 [cluster="lambda expression", label="Exit lambda expression", span="176-176"];
n93 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
n96 [cluster="lambda expression", label="Exit lambda expression", span="177-177"];
n99 [cluster="lambda expression", label="Exit lambda expression", span="178-178"];
n100 [cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16"];
n101 [cluster="CommandLine.Parser.MakeParserResult<T>(System.Func<CommandLine.ParserResult<T>>, CommandLine.ParserSettings)", label="Entry CommandLine.Parser.MakeParserResult<T>(System.Func<CommandLine.ParserResult<T>>, CommandLine.ParserSettings)", span="182-182"];
n102 [cluster="CommandLine.Parser.MakeParserResult<T>(System.Func<CommandLine.ParserResult<T>>, CommandLine.ParserSettings)", label="return DisplayHelp(\r\n                HandleUnknownArguments(\r\n                    parseFunc(),\r\n                    settings.IgnoreUnknownArguments),\r\n                settings.HelpWriter);", span="184-188"];
n103 [cluster="CommandLine.Parser.MakeParserResult<T>(System.Func<CommandLine.ParserResult<T>>, CommandLine.ParserSettings)", label="Exit CommandLine.Parser.MakeParserResult<T>(System.Func<CommandLine.ParserResult<T>>, CommandLine.ParserSettings)", span="182-182"];
n104 [cluster="System.Func<TResult>.Invoke()", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
n105 [cluster="CommandLine.Parser.HandleUnknownArguments<T>(CommandLine.ParserResult<T>, bool)", label="Entry CommandLine.Parser.HandleUnknownArguments<T>(CommandLine.ParserResult<T>, bool)", span="191-191"];
n106 [cluster="CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", label="Entry CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", span="200-200"];
n107 [cluster="CommandLine.Parser.HandleUnknownArguments<T>(CommandLine.ParserResult<T>, bool)", label="return ignoreUnknownArguments\r\n                       ? parserResult.Tag == ParserResultType.NotParsed\r\n                            ? ((NotParsed<T>)parserResult).MapErrors(errs => errs.Where(e => e.Tag != ErrorType.UnknownOptionError))\r\n                            : parserResult\r\n                       : parserResult;", span="193-197"];
n108 [cluster="CommandLine.Parser.HandleUnknownArguments<T>(CommandLine.ParserResult<T>, bool)", label="Exit CommandLine.Parser.HandleUnknownArguments<T>(CommandLine.ParserResult<T>, bool)", span="191-191"];
n109 [cluster="Unk.MapErrors", label="Entry Unk.MapErrors", span=""];
n110 [cluster="lambda expression", label="Entry lambda expression", span="195-195"];
n111 [cluster="lambda expression", label="errs.Where(e => e.Tag != ErrorType.UnknownOptionError)", span="195-195"];
n112 [cluster="lambda expression", label="Exit lambda expression", span="195-195"];
n113 [cluster="Unk.Where", label="Entry Unk.Where", span=""];
n114 [cluster="lambda expression", label="Entry lambda expression", span="195-195"];
n115 [cluster="lambda expression", label="e.Tag != ErrorType.UnknownOptionError", span="195-195"];
n116 [cluster="lambda expression", label="Exit lambda expression", span="195-195"];
n117 [cluster="CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", label="parserResult.Tag == ParserResultType.NotParsed", span="202-202"];
n118 [cluster="CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", label="((NotParsed<T>)parserResult).Errors.Any()", span="204-204"];
n119 [cluster="CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", label="helpWriter.ToMaybe().Do(writer => writer.Write(HelpText.AutoBuild(parserResult)))", span="206-206"];
n126 [cluster="lambda expression", label="writer.Write(HelpText.AutoBuild(parserResult))", span="206-206"];
n120 [cluster="CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", label="return parserResult;", span="210-210"];
n122 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
n123 [cluster="T.ToMaybe<T>()", label="Entry T.ToMaybe<T>()", span="105-105"];
n124 [cluster="CSharpx.Maybe<T>.Do<T>(System.Action<T>)", label="Entry CSharpx.Maybe<T>.Do<T>(System.Action<T>)", span="134-134"];
n125 [cluster="lambda expression", label="Entry lambda expression", span="206-206"];
n121 [cluster="CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", label="Exit CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", span="200-200"];
n127 [cluster="lambda expression", label="Exit lambda expression", span="206-206"];
n128 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", label="Entry CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", span="252-252"];
n129 [cluster="System.IO.TextWriter.Write(string)", label="Entry System.IO.TextWriter.Write(string)", span="0-0"];
n130 [cluster="CommandLine.Parser.Dispose(bool)", label=disposed, span="215-215"];
n132 [cluster="CommandLine.Parser.Dispose(bool)", label=disposing, span="220-220"];
n131 [cluster="CommandLine.Parser.Dispose(bool)", label="return;", span="217-217"];
n133 [cluster="CommandLine.Parser.Dispose(bool)", label="settings != null", span="222-222"];
n136 [cluster="CommandLine.Parser.Dispose(bool)", label="Exit CommandLine.Parser.Dispose(bool)", span="213-213"];
n134 [cluster="CommandLine.Parser.Dispose(bool)", label="settings.Dispose()", span="224-224"];
n135 [cluster="CommandLine.Parser.Dispose(bool)", label="disposed = true", span="227-227"];
n137 [cluster="CommandLine.ParserSettings.Dispose()", label="Entry CommandLine.ParserSettings.Dispose()", span="119-119"];
d3 [cluster="CommandLine.BaseAttribute.BaseAttribute()", color=green, community=0, label="13: helpText = string.Empty", span="24-24"];
d6 [label="CommandLine.BaseAttribute", span=""];
d2 [cluster="CommandLine.BaseAttribute.BaseAttribute()", label="max = -1", span="23-23"];
d4 [cluster="CommandLine.BaseAttribute.BaseAttribute()", color=green, community=0, label="21: metaValue = string.Empty", span="25-25"];
d5 [cluster="CommandLine.BaseAttribute.BaseAttribute()", label="Exit CommandLine.BaseAttribute.BaseAttribute()", span="20-20"];
d1 [cluster="CommandLine.BaseAttribute.BaseAttribute()", label="min = -1", span="22-22"];
d0 [cluster="CommandLine.BaseAttribute.BaseAttribute()", label="Entry CommandLine.BaseAttribute.BaseAttribute()", span="20-20"];
m1_1 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs", label="var expected = Maybe.Just(''.'')", span="17-17"];
m1_2 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", color=green, community=0, file="NameLookupTests.cs", label="21: var specs = new[] { new OptionSpecification(string.Empty, ''string-seq'',\r\n                false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), '.', null, string.Empty, string.Empty, new List<string>(), typeof(IEnumerable<string>), TargetType.Sequence)}", span="18-19"];
m1_3 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs", label="var result = NameLookup.HavingSeparator(''string-seq'', specs, StringComparer.InvariantCulture)", span="22-22"];
m1_4 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs", label="expected.ShouldBeEquivalentTo(result)", span="25-25"];
m1_8 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="NameLookupTests.cs", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63"];
m1_6 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="NameLookupTests.cs", label="CommandLine.BaseAttribute", span=""];
m1_7 [cluster="OptionSpecification.cstr", file="NameLookupTests.cs", label="Entry OptionSpecification.cstr", span=""];
m1_0 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs", label="Entry CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", span="14-14"];
m1_5 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs", label="Exit CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", span="14-14"];
m1_10 [cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="NameLookupTests.cs", label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16"];
m1_11 [cluster="Unk.ShouldBeEquivalentTo", file="NameLookupTests.cs", label="Entry Unk.ShouldBeEquivalentTo", span=""];
m1_9 [cluster="System.Collections.Generic.List<T>.List()", file="NameLookupTests.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m2_8 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="OptionAttribute.cs", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63"];
m2_6 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="OptionAttribute.cs", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68"];
m2_7 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType, string, string, System.Collections.Generic.IEnumerable<string>)", file="OptionAttribute.cs", label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType, string, string, System.Collections.Generic.IEnumerable<string>)", span="18-18"];
m2_10 [cluster="CommandLine.Core.NameLookup.WithSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="OptionAttribute.cs", label="Entry CommandLine.Core.NameLookup.WithSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16"];
m2_0 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="OptionAttribute.cs", label="Entry CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", span="14-14"];
m2_1 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", color=red, community=0, file="OptionAttribute.cs", label="37: var expected = Maybe.Just(''.'')", span="17-17"];
m2_2 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", color=red, community=0, file="OptionAttribute.cs", label="36: var specs = new[] { new OptionSpecification(string.Empty, ''string-seq'',\r\n                false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), '.', null, typeof(IEnumerable<string>), TargetType.Sequence, string.Empty, string.Empty, new List<string>())}", span="18-19"];
m2_4 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="OptionAttribute.cs", label="expected.ShouldBeEquivalentTo(result)", span="25-25"];
m2_3 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="OptionAttribute.cs", label="var result = NameLookup.WithSeparator(''string-seq'', specs, StringComparer.InvariantCulture)", span="22-22"];
m2_5 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="OptionAttribute.cs", label="Exit CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", span="14-14"];
m2_11 [cluster="Unk.ShouldBeEquivalentTo", file="OptionAttribute.cs", label="Entry Unk.ShouldBeEquivalentTo", span=""];
m2_9 [cluster="System.Collections.Generic.List<T>.List()", file="OptionAttribute.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m3_9 [cluster="CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)", file="OptionMapperTests.cs", label="configuration == null", span="38-38"];
m3_12 [cluster="CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)", file="OptionMapperTests.cs", label="configuration(settings)", span="41-41"];
m3_10 [cluster="CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)", file="OptionMapperTests.cs", label="throw new ArgumentNullException(''configuration'');", span="38-38"];
m3_11 [cluster="CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)", file="OptionMapperTests.cs", label="settings = new ParserSettings()", span="40-40"];
m3_13 [cluster="CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)", file="OptionMapperTests.cs", label="settings.Consumed = true", span="42-42"];
m3_84 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", file="OptionMapperTests.cs", label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", span="34-34"];
m3_20 [cluster="CommandLine.Parser.~Parser()", file="OptionMapperTests.cs", label="Entry CommandLine.Parser.~Parser()", span="54-54"];
m3_21 [cluster="CommandLine.Parser.~Parser()", file="OptionMapperTests.cs", label="Dispose(false)", span="56-56"];
m3_22 [cluster="CommandLine.Parser.~Parser()", file="OptionMapperTests.cs", label="Exit CommandLine.Parser.~Parser()", span="54-54"];
m3_86 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="OptionMapperTests.cs", label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", span="47-47"];
m3_16 [cluster="System.Action<T>.Invoke(T)", file="OptionMapperTests.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m3_58 [cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="OptionMapperTests.cs", label="Entry CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", span="141-141"];
m3_59 [cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="OptionMapperTests.cs", label="args == null", span="143-143"];
m3_61 [cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="OptionMapperTests.cs", label="types == null", span="144-144"];
m3_63 [cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="OptionMapperTests.cs", label="types.Length == 0", span="145-145"];
m3_65 [cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="OptionMapperTests.cs", label="return MakeParserResult(\r\n                () => InstanceChooser.Choose(\r\n                    (arguments, optionSpecs) => Tokenize(arguments, optionSpecs, settings),\r\n                    types,\r\n                    args,\r\n                    settings.NameComparer,\r\n                    settings.ParsingCulture),\r\n                settings);", span="147-154"];
m3_60 [cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="OptionMapperTests.cs", label="throw new ArgumentNullException(''args'');", span="143-143"];
m3_62 [cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="OptionMapperTests.cs", label="throw new ArgumentNullException(''types'');", span="144-144"];
m3_64 [cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="OptionMapperTests.cs", label="throw new ArgumentOutOfRangeException(''types'');", span="145-145"];
m3_66 [cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="OptionMapperTests.cs", label="Exit CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", span="141-141"];
m3_33 [cluster="Unk.MakeParserResult", file="OptionMapperTests.cs", label="Entry Unk.MakeParserResult", span=""];
m3_3 [cluster="CommandLine.Parser.Parser(CommandLine.ParserSettings)", file="OptionMapperTests.cs", label="Entry CommandLine.Parser.Parser(CommandLine.ParserSettings)", span="45-45"];
m3_17 [cluster="CommandLine.Parser.Parser(CommandLine.ParserSettings)", file="OptionMapperTests.cs", label="this.settings = settings", span="47-47"];
m3_18 [cluster="CommandLine.Parser.Parser(CommandLine.ParserSettings)", file="OptionMapperTests.cs", label="this.settings.Consumed = true", span="48-48"];
m3_19 [cluster="CommandLine.Parser.Parser(CommandLine.ParserSettings)", file="OptionMapperTests.cs", label="Exit CommandLine.Parser.Parser(CommandLine.ParserSettings)", span="45-45"];
m3_67 [cluster="System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", file="OptionMapperTests.cs", label="Entry System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", span="0-0"];
m3_42 [cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", file="OptionMapperTests.cs", label="Entry CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", span="112-112"];
m3_43 [cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", file="OptionMapperTests.cs", label="factory == null", span="115-115"];
m3_47 [cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", file="OptionMapperTests.cs", label="args == null", span="117-117"];
m3_49 [cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", file="OptionMapperTests.cs", label="return MakeParserResult(\r\n                () => InstanceBuilder.Build(\r\n                    Maybe.Just(factory),\r\n                    (arguments, optionSpecs) => Tokenize(arguments, optionSpecs, settings),\r\n                    args,\r\n                    settings.NameComparer,\r\n                    settings.ParsingCulture),\r\n                settings);", span="119-126"];
m3_44 [cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", file="OptionMapperTests.cs", label="throw new ArgumentNullException(''factory'');", span="115-115"];
m3_45 [cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", file="OptionMapperTests.cs", label="!typeof(T).IsMutable()", span="116-116"];
m3_46 [cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", file="OptionMapperTests.cs", label="throw new ArgumentException(''factory'');", span="116-116"];
m3_48 [cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", file="OptionMapperTests.cs", label="throw new ArgumentNullException(''args'');", span="117-117"];
m3_50 [cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", file="OptionMapperTests.cs", label="Exit CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", span="112-112"];
m3_100 [cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="OptionMapperTests.cs", label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16"];
m3_51 [cluster="System.ArgumentException.ArgumentException(string)", file="OptionMapperTests.cs", label="Entry System.ArgumentException.ArgumentException(string)", span="0-0"];
m3_113 [cluster="Unk.Where", file="OptionMapperTests.cs", label="Entry Unk.Where", span=""];
m3_4 [cluster="CommandLine.ParserSettings.ParserSettings()", file="OptionMapperTests.cs", label="Entry CommandLine.ParserSettings.ParserSettings()", span="25-25"];
m3_93 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="OptionMapperTests.cs", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
m3_5 [cluster="CommandLine.Parser.Parser()", file="OptionMapperTests.cs", label="Entry CommandLine.Parser.Parser()", span="25-25"];
m3_6 [cluster="CommandLine.Parser.Parser()", file="OptionMapperTests.cs", label="settings = new ParserSettings { Consumed = true }", span="27-27"];
m3_7 [cluster="CommandLine.Parser.Parser()", file="OptionMapperTests.cs", label="Exit CommandLine.Parser.Parser()", span="25-25"];
m3_31 [cluster="CSharpx.Maybe.Just<T>(T)", file="OptionMapperTests.cs", label="Entry CSharpx.Maybe.Just<T>(T)", span="80-80"];
m3_104 [cluster="System.Func<TResult>.Invoke()", file="OptionMapperTests.cs", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
m3_106 [cluster="CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", file="OptionMapperTests.cs", label="Entry CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", span="200-200"];
m3_117 [cluster="CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", file="OptionMapperTests.cs", label="parserResult.Tag == ParserResultType.NotParsed", span="202-202"];
m3_118 [cluster="CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", file="OptionMapperTests.cs", label="((NotParsed<T>)parserResult).Errors.Any()", span="204-204"];
m3_119 [cluster="CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", file="OptionMapperTests.cs", label="helpWriter.ToMaybe().Do(writer => writer.Write(HelpText.AutoBuild(parserResult)))", span="206-206"];
m3_120 [cluster="CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", file="OptionMapperTests.cs", label="return parserResult;", span="210-210"];
m3_121 [cluster="CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", file="OptionMapperTests.cs", label="Exit CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", span="200-200"];
m3_125 [cluster="lambda expression", file="OptionMapperTests.cs", label="Entry lambda expression", span="206-206"];
m3_0 [cluster="lambda expression", file="OptionMapperTests.cs", label="Entry lambda expression", span="20-20"];
m3_1 [cluster="lambda expression", file="OptionMapperTests.cs", label="new Parser(new ParserSettings{ HelpWriter = Console.Error })", span="20-20"];
m3_2 [cluster="lambda expression", file="OptionMapperTests.cs", label="Exit lambda expression", span="20-20"];
m3_35 [cluster="lambda expression", file="OptionMapperTests.cs", label="InstanceBuilder.Build(\r\n                    factory,\r\n                    (arguments, optionSpecs) => Tokenize(arguments, optionSpecs, settings),\r\n                    args,\r\n                    settings.NameComparer,\r\n                    settings.ParsingCulture)", span="93-98"];
m3_34 [cluster="lambda expression", file="OptionMapperTests.cs", label="Entry lambda expression", span="93-98"];
m3_36 [cluster="lambda expression", file="OptionMapperTests.cs", label="Exit lambda expression", span="93-98"];
m3_38 [cluster="lambda expression", file="OptionMapperTests.cs", label="Entry lambda expression", span="95-95"];
m3_39 [cluster="lambda expression", file="OptionMapperTests.cs", label="Tokenize(arguments, optionSpecs, settings)", span="95-95"];
m3_40 [cluster="lambda expression", file="OptionMapperTests.cs", label="Exit lambda expression", span="95-95"];
m3_53 [cluster="lambda expression", file="OptionMapperTests.cs", label="InstanceBuilder.Build(\r\n                    Maybe.Just(factory),\r\n                    (arguments, optionSpecs) => Tokenize(arguments, optionSpecs, settings),\r\n                    args,\r\n                    settings.NameComparer,\r\n                    settings.ParsingCulture)", span="120-125"];
m3_52 [cluster="lambda expression", file="OptionMapperTests.cs", label="Entry lambda expression", span="120-125"];
m3_54 [cluster="lambda expression", file="OptionMapperTests.cs", label="Exit lambda expression", span="120-125"];
m3_55 [cluster="lambda expression", file="OptionMapperTests.cs", label="Entry lambda expression", span="122-122"];
m3_56 [cluster="lambda expression", file="OptionMapperTests.cs", label="Tokenize(arguments, optionSpecs, settings)", span="122-122"];
m3_57 [cluster="lambda expression", file="OptionMapperTests.cs", label="Exit lambda expression", span="122-122"];
m3_69 [cluster="lambda expression", file="OptionMapperTests.cs", label="InstanceChooser.Choose(\r\n                    (arguments, optionSpecs) => Tokenize(arguments, optionSpecs, settings),\r\n                    types,\r\n                    args,\r\n                    settings.NameComparer,\r\n                    settings.ParsingCulture)", span="148-153"];
m3_68 [cluster="lambda expression", file="OptionMapperTests.cs", label="Entry lambda expression", span="148-153"];
m3_70 [cluster="lambda expression", file="OptionMapperTests.cs", label="Exit lambda expression", span="148-153"];
m3_72 [cluster="lambda expression", file="OptionMapperTests.cs", label="Entry lambda expression", span="149-149"];
m3_73 [cluster="lambda expression", file="OptionMapperTests.cs", label="Tokenize(arguments, optionSpecs, settings)", span="149-149"];
m3_74 [cluster="lambda expression", file="OptionMapperTests.cs", label="Exit lambda expression", span="149-149"];
m3_88 [cluster="lambda expression", file="OptionMapperTests.cs", label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, settings.NameComparer))", span="176-176"];
m3_91 [cluster="lambda expression", file="OptionMapperTests.cs", label="NameLookup.Contains(name, optionSpecs, settings.NameComparer)", span="176-176"];
m3_95 [cluster="lambda expression", file="OptionMapperTests.cs", label="NameLookup.Contains(name, optionSpecs, settings.NameComparer)", span="177-177"];
m3_98 [cluster="lambda expression", file="OptionMapperTests.cs", label="NameLookup.HavingSeparator(name, optionSpecs, settings.NameComparer)", span="178-178"];
m3_87 [cluster="lambda expression", file="OptionMapperTests.cs", label="Entry lambda expression", span="175-176"];
m3_94 [cluster="lambda expression", file="OptionMapperTests.cs", label="Entry lambda expression", span="177-177"];
m3_97 [cluster="lambda expression", file="OptionMapperTests.cs", label="Entry lambda expression", span="178-178"];
m3_89 [cluster="lambda expression", file="OptionMapperTests.cs", label="Exit lambda expression", span="175-176"];
m3_90 [cluster="lambda expression", file="OptionMapperTests.cs", label="Entry lambda expression", span="176-176"];
m3_92 [cluster="lambda expression", file="OptionMapperTests.cs", label="Exit lambda expression", span="176-176"];
m3_96 [cluster="lambda expression", file="OptionMapperTests.cs", label="Exit lambda expression", span="177-177"];
m3_99 [cluster="lambda expression", file="OptionMapperTests.cs", label="Exit lambda expression", span="178-178"];
m3_110 [cluster="lambda expression", file="OptionMapperTests.cs", label="Entry lambda expression", span="195-195"];
m3_111 [cluster="lambda expression", file="OptionMapperTests.cs", label="errs.Where(e => e.Tag != ErrorType.UnknownOptionError)", span="195-195"];
m3_112 [cluster="lambda expression", file="OptionMapperTests.cs", label="Exit lambda expression", span="195-195"];
m3_114 [cluster="lambda expression", file="OptionMapperTests.cs", label="Entry lambda expression", span="195-195"];
m3_115 [cluster="lambda expression", file="OptionMapperTests.cs", label="e.Tag != ErrorType.UnknownOptionError", span="195-195"];
m3_116 [cluster="lambda expression", file="OptionMapperTests.cs", label="Exit lambda expression", span="195-195"];
m3_126 [cluster="lambda expression", file="OptionMapperTests.cs", label="writer.Write(HelpText.AutoBuild(parserResult))", span="206-206"];
m3_127 [cluster="lambda expression", file="OptionMapperTests.cs", label="Exit lambda expression", span="206-206"];
m3_122 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="OptionMapperTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
m3_123 [cluster="T.ToMaybe<T>()", file="OptionMapperTests.cs", label="Entry T.ToMaybe<T>()", span="105-105"];
m3_105 [cluster="CommandLine.Parser.HandleUnknownArguments<T>(CommandLine.ParserResult<T>, bool)", file="OptionMapperTests.cs", label="Entry CommandLine.Parser.HandleUnknownArguments<T>(CommandLine.ParserResult<T>, bool)", span="191-191"];
m3_107 [cluster="CommandLine.Parser.HandleUnknownArguments<T>(CommandLine.ParserResult<T>, bool)", file="OptionMapperTests.cs", label="return ignoreUnknownArguments\r\n                       ? parserResult.Tag == ParserResultType.NotParsed\r\n                            ? ((NotParsed<T>)parserResult).MapErrors(errs => errs.Where(e => e.Tag != ErrorType.UnknownOptionError))\r\n                            : parserResult\r\n                       : parserResult;", span="193-197"];
m3_108 [cluster="CommandLine.Parser.HandleUnknownArguments<T>(CommandLine.ParserResult<T>, bool)", file="OptionMapperTests.cs", label="Exit CommandLine.Parser.HandleUnknownArguments<T>(CommandLine.ParserResult<T>, bool)", span="191-191"];
m3_109 [cluster="Unk.MapErrors", file="OptionMapperTests.cs", label="Entry Unk.MapErrors", span=""];
m3_124 [cluster="CSharpx.Maybe<T>.Do<T>(System.Action<T>)", file="OptionMapperTests.cs", label="Entry CSharpx.Maybe<T>.Do<T>(System.Action<T>)", span="134-134"];
m3_128 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", file="OptionMapperTests.cs", label="Entry CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", span="252-252"];
m3_85 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="OptionMapperTests.cs", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="14-14"];
m3_79 [cluster="System.GC.SuppressFinalize(object)", file="OptionMapperTests.cs", label="Entry System.GC.SuppressFinalize(object)", span="0-0"];
m3_32 [cluster="CSharpx.Maybe.Nothing<T>()", file="OptionMapperTests.cs", label="Entry CSharpx.Maybe.Nothing<T>()", span="75-75"];
m3_137 [cluster="CommandLine.ParserSettings.Dispose()", file="OptionMapperTests.cs", label="Entry CommandLine.ParserSettings.Dispose()", span="119-119"];
m3_30 [cluster="System.Type.IsMutable()", file="OptionMapperTests.cs", label="Entry System.Type.IsMutable()", span="115-115"];
m3_101 [cluster="CommandLine.Parser.MakeParserResult<T>(System.Func<CommandLine.ParserResult<T>>, CommandLine.ParserSettings)", file="OptionMapperTests.cs", label="Entry CommandLine.Parser.MakeParserResult<T>(System.Func<CommandLine.ParserResult<T>>, CommandLine.ParserSettings)", span="182-182"];
m3_102 [cluster="CommandLine.Parser.MakeParserResult<T>(System.Func<CommandLine.ParserResult<T>>, CommandLine.ParserSettings)", file="OptionMapperTests.cs", label="return DisplayHelp(\r\n                HandleUnknownArguments(\r\n                    parseFunc(),\r\n                    settings.IgnoreUnknownArguments),\r\n                settings.HelpWriter);", span="184-188"];
m3_103 [cluster="CommandLine.Parser.MakeParserResult<T>(System.Func<CommandLine.ParserResult<T>>, CommandLine.ParserSettings)", file="OptionMapperTests.cs", label="Exit CommandLine.Parser.MakeParserResult<T>(System.Func<CommandLine.ParserResult<T>>, CommandLine.ParserSettings)", span="182-182"];
m3_75 [cluster="CommandLine.Parser.Dispose()", file="OptionMapperTests.cs", label="Entry CommandLine.Parser.Dispose()", span="160-160"];
m3_76 [cluster="CommandLine.Parser.Dispose()", file="OptionMapperTests.cs", label="Dispose(true)", span="162-162"];
m3_77 [cluster="CommandLine.Parser.Dispose()", file="OptionMapperTests.cs", label="GC.SuppressFinalize(this)", span="164-164"];
m3_78 [cluster="CommandLine.Parser.Dispose()", file="OptionMapperTests.cs", label="Exit CommandLine.Parser.Dispose()", span="160-160"];
m3_71 [cluster="Unk.Choose", file="OptionMapperTests.cs", label="Entry Unk.Choose", span=""];
m3_24 [cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", file="OptionMapperTests.cs", label="Entry CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", span="84-84"];
m3_25 [cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", file="OptionMapperTests.cs", label="args == null", span="86-86"];
m3_28 [cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", file="OptionMapperTests.cs", label="return MakeParserResult(\r\n                () => InstanceBuilder.Build(\r\n                    factory,\r\n                    (arguments, optionSpecs) => Tokenize(arguments, optionSpecs, settings),\r\n                    args,\r\n                    settings.NameComparer,\r\n                    settings.ParsingCulture),\r\n                settings);", span="92-99"];
m3_26 [cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", file="OptionMapperTests.cs", label="throw new ArgumentNullException(''args'');", span="86-86"];
m3_27 [cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", file="OptionMapperTests.cs", label="var factory = typeof(T).IsMutable()\r\n                ? Maybe.Just<Func<T>>(Activator.CreateInstance<T>)\r\n                : Maybe.Nothing<Func<T>>()", span="88-90"];
m3_29 [cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", file="OptionMapperTests.cs", label="Exit CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", span="84-84"];
m3_41 [cluster="CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)", file="OptionMapperTests.cs", label="Entry CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)", span="167-167"];
m3_80 [cluster="CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)", file="OptionMapperTests.cs", label="var tokens = settings.EnableDashDash\r\n                ? Tokenizer.PreprocessDashDash(\r\n                        arguments,\r\n                        args =>\r\n                            Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, settings.NameComparer)))\r\n                : Tokenizer.Tokenize(arguments, name => NameLookup.Contains(name, optionSpecs, settings.NameComparer))", span="172-177"];
m3_81 [cluster="CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)", file="OptionMapperTests.cs", label="var explodedTokens = Tokenizer.ExplodeOptionList(tokens, name => NameLookup.HavingSeparator(name, optionSpecs, settings.NameComparer))", span="178-178"];
m3_82 [cluster="CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)", file="OptionMapperTests.cs", label="return explodedTokens;", span="179-179"];
m3_83 [cluster="CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)", file="OptionMapperTests.cs", label="Exit CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)", span="167-167"];
m3_23 [cluster="CommandLine.Parser.Dispose(bool)", file="OptionMapperTests.cs", label="Entry CommandLine.Parser.Dispose(bool)", span="213-213"];
m3_130 [cluster="CommandLine.Parser.Dispose(bool)", file="OptionMapperTests.cs", label=disposed, span="215-215"];
m3_132 [cluster="CommandLine.Parser.Dispose(bool)", file="OptionMapperTests.cs", label=disposing, span="220-220"];
m3_131 [cluster="CommandLine.Parser.Dispose(bool)", file="OptionMapperTests.cs", label="return;", span="217-217"];
m3_133 [cluster="CommandLine.Parser.Dispose(bool)", file="OptionMapperTests.cs", label="settings != null", span="222-222"];
m3_134 [cluster="CommandLine.Parser.Dispose(bool)", file="OptionMapperTests.cs", label="settings.Dispose()", span="224-224"];
m3_135 [cluster="CommandLine.Parser.Dispose(bool)", file="OptionMapperTests.cs", label="disposed = true", span="227-227"];
m3_136 [cluster="CommandLine.Parser.Dispose(bool)", file="OptionMapperTests.cs", label="Exit CommandLine.Parser.Dispose(bool)", span="213-213"];
m3_15 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="OptionMapperTests.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m3_37 [cluster="Unk.Build", file="OptionMapperTests.cs", label="Entry Unk.Build", span=""];
m3_129 [cluster="System.IO.TextWriter.Write(string)", file="OptionMapperTests.cs", label="Entry System.IO.TextWriter.Write(string)", span="0-0"];
m3_138 [file="OptionMapperTests.cs", label="CommandLine.Parser", span=""];
m3_139 [file="OptionMapperTests.cs", label="System.Collections.Generic.IEnumerable<string>", span=""];
m3_140 [file="OptionMapperTests.cs", label=factory, span=""];
m3_141 [file="OptionMapperTests.cs", label="System.Func<T>", span=""];
m3_142 [file="OptionMapperTests.cs", label="System.Collections.Generic.IEnumerable<string>", span=""];
m3_143 [file="OptionMapperTests.cs", label="System.Collections.Generic.IEnumerable<string>", span=""];
m3_144 [file="OptionMapperTests.cs", label="params System.Type[]", span=""];
m3_145 [file="OptionMapperTests.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
m3_146 [file="OptionMapperTests.cs", label="CommandLine.ParserSettings", span=""];
m3_147 [file="OptionMapperTests.cs", label="CommandLine.ParserResult<T>", span=""];
m5_2 [cluster="CommandLine.BadOptionInfo.BadOptionInfo(char?, string)", file="Specification.cs", label="Entry CommandLine.BadOptionInfo.BadOptionInfo(char?, string)", span="51-51"];
m5_3 [cluster="CommandLine.BadOptionInfo.BadOptionInfo(char?, string)", file="Specification.cs", label="ShortName = shortName", span="53-53"];
m5_4 [cluster="CommandLine.BadOptionInfo.BadOptionInfo(char?, string)", file="Specification.cs", label="LongName = longName", span="54-54"];
m5_5 [cluster="CommandLine.BadOptionInfo.BadOptionInfo(char?, string)", file="Specification.cs", label="Exit CommandLine.BadOptionInfo.BadOptionInfo(char?, string)", span="51-51"];
m5_0 [cluster="CommandLine.BadOptionInfo.BadOptionInfo()", file="Specification.cs", label="Entry CommandLine.BadOptionInfo.BadOptionInfo()", span="47-47"];
m5_1 [cluster="CommandLine.BadOptionInfo.BadOptionInfo()", file="Specification.cs", label="Exit CommandLine.BadOptionInfo.BadOptionInfo()", span="47-47"];
m5_6 [file="Specification.cs", label="CommandLine.BadOptionInfo", span=""];
m6_25 [cluster="lambda expression", color=green, community=0, file="SpecificationExtensions.cs", label="6: TypeConverter.ChangeType(vals, type, isScalar, CultureInfo.InvariantCulture)", span="35-35"];
m6_26 [cluster="lambda expression", file="SpecificationExtensions.cs", label="Exit lambda expression", span="35-35"];
m6_28 [cluster="lambda expression", file="SpecificationExtensions.cs", label="Entry lambda expression", span="40-42"];
m6_29 [cluster="lambda expression", file="SpecificationExtensions.cs", label="a.Specification.IsOption()\r\n                && ((OptionSpecification)a.Specification).ShortName.Equals(''x'')\r\n                && (bool)((Just<object>)a.Value).Value == true", span="40-42"];
m6_27 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="SpecificationExtensions.cs", label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="12-12"];
m6_30 [cluster="lambda expression", file="SpecificationExtensions.cs", label="Exit lambda expression", span="40-42"];
m6_31 [cluster="string.Equals(string)", file="SpecificationExtensions.cs", label="Entry string.Equals(string)", span="0-0"];
m6_34 [cluster="CommandLine.Core.SpecificationExtensions.HavingMin(CommandLine.Core.Specification, System.Func<int, bool>)", file="SpecificationExtensions.cs", label="Entry CommandLine.Core.SpecificationExtensions.HavingMin(CommandLine.Core.Specification, System.Func<int, bool>)", span="67-67"];
m6_35 [cluster="CommandLine.Core.SpecificationExtensions.HavingMin(CommandLine.Core.Specification, System.Func<int, bool>)", file="SpecificationExtensions.cs", label="int min", span="69-69"];
m6_36 [cluster="CommandLine.Core.SpecificationExtensions.HavingMin(CommandLine.Core.Specification, System.Func<int, bool>)", file="SpecificationExtensions.cs", label="specification.Min.MatchJust(out min)", span="70-70"];
m6_37 [cluster="CommandLine.Core.SpecificationExtensions.HavingMin(CommandLine.Core.Specification, System.Func<int, bool>)", file="SpecificationExtensions.cs", label="return predicate(min);", span="72-72"];
m6_38 [cluster="CommandLine.Core.SpecificationExtensions.HavingMin(CommandLine.Core.Specification, System.Func<int, bool>)", file="SpecificationExtensions.cs", label="return false;", span="74-74"];
m6_39 [cluster="CommandLine.Core.SpecificationExtensions.HavingMin(CommandLine.Core.Specification, System.Func<int, bool>)", file="SpecificationExtensions.cs", label="Exit CommandLine.Core.SpecificationExtensions.HavingMin(CommandLine.Core.Specification, System.Func<int, bool>)", span="67-67"];
m6_20 [cluster="lambda expression", file="SpecificationExtensions.cs", label="Entry lambda expression", span="33-33"];
m6_19 [cluster="string.Equals(string, System.StringComparison)", file="SpecificationExtensions.cs", label="Entry string.Equals(string, System.StringComparison)", span="0-0"];
m6_24 [cluster="lambda expression", file="SpecificationExtensions.cs", label="Entry lambda expression", span="35-35"];
m6_12 [cluster="CommandLine.Core.SpecificationExtensions.UniqueName(CommandLine.Core.OptionSpecification)", file="SpecificationExtensions.cs", label="Exit CommandLine.Core.SpecificationExtensions.UniqueName(CommandLine.Core.OptionSpecification)", span="38-38"];
m6_13 [cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", file="SpecificationExtensions.cs", label="Entry CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", span="43-43"];
m6_14 [cluster="Unk.MapValues", file="SpecificationExtensions.cs", label="Entry Unk.MapValues", span=""];
m6_15 [cluster="Unk.NotNull", file="SpecificationExtensions.cs", label="Entry Unk.NotNull", span=""];
m6_17 [cluster="lambda expression", file="SpecificationExtensions.cs", label="p.Name.Equals(''BoolValue'', StringComparison.Ordinal)", span="27-27"];
m6_16 [cluster="lambda expression", file="SpecificationExtensions.cs", label="Entry lambda expression", span="27-27"];
m6_18 [cluster="lambda expression", file="SpecificationExtensions.cs", label="Exit lambda expression", span="27-27"];
m6_11 [cluster="CommandLine.Core.SpecificationExtensions.UniqueName(CommandLine.Core.OptionSpecification)", file="SpecificationExtensions.cs", label="return specification.ShortName.Length > 0 ? specification.ShortName : specification.LongName;", span="40-40"];
m6_3 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", color=green, community=0, file="SpecificationExtensions.cs", label="6: var result = OptionMapper.MapValues(\r\n                specProps.Where(pt => pt.Specification.IsOption()),\r\n                tokenPartitions,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, CultureInfo.InvariantCulture),\r\n                StringComparer.InvariantCulture)", span="32-36"];
m6_4 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="SpecificationExtensions.cs", label="Assert.NotNull(result.Value.Single(\r\n                a => a.Specification.IsOption()\r\n                && ((OptionSpecification)a.Specification).ShortName.Equals(''x'')\r\n                && (bool)((Just<object>)a.Value).Value == true))", span="39-42"];
m6_5 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="SpecificationExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", span="16-16"];
m6_22 [cluster="lambda expression", file="SpecificationExtensions.cs", label="Exit lambda expression", span="33-33"];
m6_21 [cluster="lambda expression", color=green, community=0, file="SpecificationExtensions.cs", label="36: pt.Specification.IsOption()", span="33-33"];
m6_23 [cluster="CommandLine.Core.Specification.IsOption()", file="SpecificationExtensions.cs", label="Entry CommandLine.Core.Specification.IsOption()", span="11-11"];
m6_10 [cluster="CommandLine.Core.SpecificationExtensions.UniqueName(CommandLine.Core.OptionSpecification)", file="SpecificationExtensions.cs", label="Entry CommandLine.Core.SpecificationExtensions.UniqueName(CommandLine.Core.OptionSpecification)", span="38-38"];
m6_9 [cluster="System.Collections.Generic.List<T>.List()", file="SpecificationExtensions.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m6_32 [cluster="CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)", file="SpecificationExtensions.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)", span="31-31"];
m6_7 [cluster="CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)", color=red, community=0, file="SpecificationExtensions.cs", label="24: return new OptionSpecification(\r\n                specification.ShortName,\r\n                newLongName,\r\n                specification.Required,\r\n                specification.SetName,\r\n                specification.Min,\r\n                specification.Max,\r\n                specification.Separator,\r\n                specification.DefaultValue,\r\n                specification.ConversionType,\r\n                specification.TargetType,\r\n                specification.HelpText,\r\n                specification.MetaValue,\r\n                specification.EnumValues);", span="22-35"];
m6_8 [cluster="CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)", file="SpecificationExtensions.cs", label="Exit CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)", span="20-20"];
m6_6 [cluster="CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)", file="SpecificationExtensions.cs", label="Entry CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)", span="20-20"];
m6_0 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="SpecificationExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", span="16-16"];
m6_1 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="SpecificationExtensions.cs", label="var tokenPartitions = new[]\r\n                {\r\n                    new KeyValuePair<string, IEnumerable<string>>(''x'', new [] { ''true'' })\r\n                }", span="19-22"];
m6_2 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="SpecificationExtensions.cs", label="var specProps = new[]\r\n                {\r\n                    SpecificationProperty.Create(\r\n                        new OptionSpecification(''x'', string.Empty, false, string.Empty, -1, -1, '\0', Maybe.Nothing<object>(), typeof(bool), string.Empty, string.Empty, new List<string>()), \r\n                        typeof(FakeOptions).GetProperties().Single(p => p.Name.Equals(''BoolValue'', StringComparison.Ordinal)),\r\n                        Maybe.Nothing<object>())\r\n                }", span="23-29"];
m6_40 [cluster="CommandLine.Core.SpecificationExtensions.HavingMax(CommandLine.Core.Specification, System.Func<int, bool>)", file="SpecificationExtensions.cs", label="Entry CommandLine.Core.SpecificationExtensions.HavingMax(CommandLine.Core.Specification, System.Func<int, bool>)", span="77-77"];
m6_41 [cluster="CommandLine.Core.SpecificationExtensions.HavingMax(CommandLine.Core.Specification, System.Func<int, bool>)", file="SpecificationExtensions.cs", label="int max", span="79-79"];
m6_42 [cluster="CommandLine.Core.SpecificationExtensions.HavingMax(CommandLine.Core.Specification, System.Func<int, bool>)", file="SpecificationExtensions.cs", label="specification.Max.MatchJust(out max)", span="80-80"];
m6_43 [cluster="CommandLine.Core.SpecificationExtensions.HavingMax(CommandLine.Core.Specification, System.Func<int, bool>)", file="SpecificationExtensions.cs", label="return predicate(max);", span="82-82"];
m6_44 [cluster="CommandLine.Core.SpecificationExtensions.HavingMax(CommandLine.Core.Specification, System.Func<int, bool>)", file="SpecificationExtensions.cs", label="return false;", span="84-84"];
m6_45 [cluster="CommandLine.Core.SpecificationExtensions.HavingMax(CommandLine.Core.Specification, System.Func<int, bool>)", file="SpecificationExtensions.cs", label="Exit CommandLine.Core.SpecificationExtensions.HavingMax(CommandLine.Core.Specification, System.Func<int, bool>)", span="77-77"];
m6_33 [cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", file="SpecificationExtensions.cs", label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0"];
m6_46 [file="SpecificationExtensions.cs", label=guard, span=""];
m7_5 [cluster="string.IsNullOrWhiteSpace(string)", file="TokenizerTests.cs", label="Entry string.IsNullOrWhiteSpace(string)", span="0-0"];
m7_0 [cluster="CommandLine.VerbAttribute.VerbAttribute(string)", file="TokenizerTests.cs", label="Entry CommandLine.VerbAttribute.VerbAttribute(string)", span="20-20"];
m7_1 [cluster="CommandLine.VerbAttribute.VerbAttribute(string)", file="TokenizerTests.cs", label="string.IsNullOrWhiteSpace(name)", span="22-22"];
m7_3 [cluster="CommandLine.VerbAttribute.VerbAttribute(string)", file="TokenizerTests.cs", label="this.name = name", span="24-24"];
m7_2 [cluster="CommandLine.VerbAttribute.VerbAttribute(string)", file="TokenizerTests.cs", label="throw new ArgumentException(''name'');", span="22-22"];
m7_4 [cluster="CommandLine.VerbAttribute.VerbAttribute(string)", file="TokenizerTests.cs", label="Exit CommandLine.VerbAttribute.VerbAttribute(string)", span="20-20"];
m7_7 [file="TokenizerTests.cs", label="CommandLine.VerbAttribute", span=""];
m8_0 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs", label="Entry CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", span="14-14"];
m8_1 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs", label="var expectedSequence = new[]\r\n                {\r\n                    new KeyValuePair<string, IEnumerable<string>>(''i'', new[] {''10'', ''20'', ''30'', ''40''}) \r\n                }", span="17-20"];
m8_2 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", color=red, community=0, file="TokenPartitionerTests.cs", label="11: var specs =new[]\r\n                {\r\n                    new OptionSpecification(string.Empty, ''stringvalue'', false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), '\0', null, typeof(string), TargetType.Scalar, string.Empty, string.Empty, new List<string>()),\r\n                    new OptionSpecification(''i'', string.Empty, false, string.Empty, Maybe.Just(3), Maybe.Just(4), '\0', null, typeof(IEnumerable<int>), TargetType.Sequence, string.Empty, string.Empty, new List<string>())\r\n                }", span="21-25"];
m8_4 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs", label="Assert.True(expectedSequence.All(a => result.Options.Any(r => a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value))))", span="34-34"];
m8_3 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs", label="var result = TokenPartitioner.Partition(\r\n                new[] { Token.Name(''i''), Token.Value(''10''), Token.Value(''20''), Token.Value(''30''), Token.Value(''40'') },\r\n                name => TypeLookup.FindTypeDescriptor(name, specs, StringComparer.InvariantCulture)\r\n                )", span="28-31"];
m8_5 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs", label="Exit CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", span="14-14"];
m8_8 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="TokenPartitionerTests.cs", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63"];
m8_6 [cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", file="TokenPartitionerTests.cs", label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0"];
m8_7 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType, string, string, System.Collections.Generic.IEnumerable<string>)", file="TokenPartitionerTests.cs", label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType, string, string, System.Collections.Generic.IEnumerable<string>)", span="18-18"];
m8_10 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="TokenPartitionerTests.cs", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68"];
m8_13 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitionerTests.cs", label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12"];
m8_15 [cluster="Unk.True", file="TokenPartitionerTests.cs", label="Entry Unk.True", span=""];
m8_14 [cluster="Unk.All", file="TokenPartitionerTests.cs", label="Entry Unk.All", span=""];
m8_41 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="60-60"];
m8_17 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="TypeLookup.FindTypeDescriptor(name, specs, StringComparer.InvariantCulture)", span="30-30"];
m8_16 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="30-30"];
m8_21 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="result.Options.Any(r => a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value))", span="34-34"];
m8_20 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="34-34"];
m8_18 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="30-30"];
m8_22 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="34-34"];
m8_24 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="34-34"];
m8_25 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value)", span="34-34"];
m8_26 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="34-34"];
m8_36 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="TypeLookup.FindTypeDescriptor(name, specs, StringComparer.InvariantCulture)", span="56-56"];
m8_35 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="56-56"];
m8_39 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="result.Options.Any(r => a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value))", span="60-60"];
m8_38 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="60-60"];
m8_37 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="56-56"];
m8_40 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="60-60"];
m8_42 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value)", span="60-60"];
m8_43 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="60-60"];
m8_19 [cluster="CommandLine.Core.TypeLookup.FindTypeDescriptor(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TokenPartitionerTests.cs", label="Entry CommandLine.Core.TypeLookup.FindTypeDescriptor(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
m8_27 [cluster="string.Equals(string)", file="TokenPartitionerTests.cs", label="Entry string.Equals(string)", span="0-0"];
m8_11 [cluster="CommandLine.Core.Token.Name(string)", file="TokenPartitionerTests.cs", label="Entry CommandLine.Core.Token.Name(string)", span="19-19"];
m8_28 [cluster="Unk.SequenceEqual", file="TokenPartitionerTests.cs", label="Entry Unk.SequenceEqual", span=""];
m8_23 [cluster="Unk.Any", file="TokenPartitionerTests.cs", label="Entry Unk.Any", span=""];
m8_12 [cluster="CommandLine.Core.Token.Value(string)", file="TokenPartitionerTests.cs", label="Entry CommandLine.Core.Token.Value(string)", span="24-24"];
m8_29 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", file="TokenPartitionerTests.cs", label="Entry CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", span="40-40"];
m8_30 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", file="TokenPartitionerTests.cs", label="var expectedSequence = new[]\r\n                {\r\n                    new KeyValuePair<string, IEnumerable<string>>(''i'', new[] {''10'', ''10'', ''30'', ''40''}) \r\n                }", span="43-46"];
m8_31 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", color=red, community=0, file="TokenPartitionerTests.cs", label="11: var specs =new[]\r\n                {\r\n                    new OptionSpecification(string.Empty, ''stringvalue'', false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), '\0', null, typeof(string), TargetType.Scalar, string.Empty, string.Empty, new List<string>()),\r\n                    new OptionSpecification(''i'', string.Empty, false, string.Empty, Maybe.Just(3), Maybe.Just(4), '\0', null, typeof(IEnumerable<int>), TargetType.Sequence, string.Empty, string.Empty, new List<string>())\r\n                }", span="47-51"];
m8_33 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", file="TokenPartitionerTests.cs", label="Assert.True(expectedSequence.All(a => result.Options.Any(r => a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value))))", span="60-60"];
m8_32 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", file="TokenPartitionerTests.cs", label="var result = TokenPartitioner.Partition(\r\n                new[] { Token.Name(''i''), Token.Value(''10''), Token.Value(''10''), Token.Value(''30''), Token.Value(''40'') },\r\n                name => TypeLookup.FindTypeDescriptor(name, specs, StringComparer.InvariantCulture)\r\n                )", span="54-57"];
m8_34 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", file="TokenPartitionerTests.cs", label="Exit CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", span="40-40"];
m8_9 [cluster="System.Collections.Generic.List<T>.List()", file="TokenPartitionerTests.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m8_44 [file="TokenPartitionerTests.cs", label=specs, span=""];
m8_45 [file="TokenPartitionerTests.cs", label=result, span=""];
m8_46 [file="TokenPartitionerTests.cs", label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", span=""];
m8_47 [file="TokenPartitionerTests.cs", label=specs, span=""];
m8_48 [file="TokenPartitionerTests.cs", label=result, span=""];
m8_49 [file="TokenPartitionerTests.cs", label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", span=""];
n138 -> n6  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
n138 -> n11  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
n138 -> n12  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
n138 -> n13  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
n138 -> n17  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
n138 -> n18  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
n138 -> n21  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
n138 -> n28  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
n138 -> n35  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
n138 -> n39  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
n138 -> n49  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
n138 -> n53  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
n138 -> n56  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
n138 -> n65  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
n138 -> n69  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
n138 -> n73  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
n138 -> n76  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
n138 -> n77  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
n138 -> n130  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
n138 -> n133  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
n138 -> n134  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
n138 -> n135  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
n139 -> n35  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
n140 -> n35  [color=darkseagreen4, key=1, label=factory, style=dashed];
n141 -> n53  [color=darkseagreen4, key=1, label="System.Func<T>", style=dashed];
n142 -> n53  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
n143 -> n69  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
n144 -> n69  [color=darkseagreen4, key=1, label="params System.Type[]", style=dashed];
n145 -> n88  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
n145 -> n91  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
n145 -> n95  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
n145 -> n98  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
n146 -> n88  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
n146 -> n91  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
n146 -> n95  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
n146 -> n98  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
n147 -> n126  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=2, style=dotted];
n1 -> n4  [key=2, style=dotted];
n2 -> n0  [color=blue, key=0, style=bold];
n3 -> n17  [key=0, style=solid];
n5 -> n6  [key=0, style=solid];
n6 -> n7  [key=0, style=solid];
n6 -> n4  [key=2, style=dotted];
n7 -> n5  [color=blue, key=0, style=bold];
n8 -> n9  [key=0, style=solid];
n8 -> n12  [color=darkseagreen4, key=1, label="System.Action<CommandLine.ParserSettings>", style=dashed];
n9 -> n10  [key=0, style=solid];
n9 -> n11  [key=0, style=solid];
n12 -> n13  [key=0, style=solid];
n12 -> n16  [key=2, style=dotted];
n10 -> n14  [key=0, style=solid];
n10 -> n15  [key=2, style=dotted];
n11 -> n12  [key=0, style=solid];
n11 -> n4  [key=2, style=dotted];
n13 -> n14  [key=0, style=solid];
n14 -> n8  [color=blue, key=0, style=bold];
n17 -> n18  [key=0, style=solid];
n18 -> n19  [key=0, style=solid];
n19 -> n3  [color=blue, key=0, style=bold];
n20 -> n21  [key=0, style=solid];
n21 -> n22  [key=0, style=solid];
n21 -> n23  [key=2, style=dotted];
n22 -> n20  [color=blue, key=0, style=bold];
n23 -> n130  [key=0, style=solid];
n23 -> n132  [color=darkseagreen4, key=1, label=bool, style=dashed];
n24 -> n25  [key=0, style=solid];
n24 -> n28  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
n24 -> n35  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
n25 -> n26  [key=0, style=solid];
n25 -> n27  [key=0, style=solid];
n28 -> n29  [key=0, style=solid];
n28 -> n33  [key=2, style=dotted];
n28 -> n34  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n35 -> n36  [key=0, style=solid];
n35 -> n37  [key=2, style=dotted];
n35 -> n38  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n26 -> n29  [key=0, style=solid];
n26 -> n15  [key=2, style=dotted];
n27 -> n28  [key=0, style=solid];
n27 -> n30  [key=2, style=dotted];
n27 -> n31  [key=2, style=dotted];
n27 -> n32  [key=2, style=dotted];
n27 -> n35  [color=darkseagreen4, key=1, label=factory, style=dashed];
n29 -> n24  [color=blue, key=0, style=bold];
n34 -> n35  [key=0, style=solid];
n36 -> n34  [color=blue, key=0, style=bold];
n38 -> n39  [key=0, style=solid];
n39 -> n40  [key=0, style=solid];
n39 -> n41  [key=2, style=dotted];
n40 -> n38  [color=blue, key=0, style=bold];
n41 -> n80  [key=0, style=solid];
n41 -> n88  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
n41 -> n91  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
n41 -> n95  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
n41 -> n81  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
n41 -> n98  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
n42 -> n43  [key=0, style=solid];
n42 -> n47  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
n42 -> n49  [color=darkseagreen4, key=1, label="System.Func<T>", style=dashed];
n42 -> n53  [color=darkseagreen4, key=1, label="System.Func<T>", style=dashed];
n43 -> n44  [key=0, style=solid];
n43 -> n45  [key=0, style=solid];
n47 -> n48  [key=0, style=solid];
n47 -> n49  [key=0, style=solid];
n49 -> n50  [key=0, style=solid];
n49 -> n33  [key=2, style=dotted];
n49 -> n52  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n49 -> n0  [color=darkorchid, key=3, label="Parameter variable string value", style=bold];
n53 -> n54  [key=0, style=solid];
n53 -> n31  [key=2, style=dotted];
n53 -> n37  [key=2, style=dotted];
n53 -> n55  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n44 -> n50  [key=0, style=solid];
n44 -> n15  [key=2, style=dotted];
n45 -> n46  [key=0, style=solid];
n45 -> n47  [key=0, style=solid];
n45 -> n30  [key=2, style=dotted];
n46 -> n50  [key=0, style=solid];
n46 -> n51  [key=2, style=dotted];
n48 -> n50  [key=0, style=solid];
n48 -> n15  [key=2, style=dotted];
n50 -> n42  [color=blue, key=0, style=bold];
n52 -> n53  [key=0, style=solid];
n54 -> n52  [color=blue, key=0, style=bold];
n55 -> n56  [key=0, style=solid];
n56 -> n57  [key=0, style=solid];
n56 -> n41  [key=2, style=dotted];
n57 -> n55  [color=blue, key=0, style=bold];
n58 -> n59  [key=0, style=solid];
n58 -> n61  [color=darkseagreen4, key=1, label="params System.Type[]", style=dashed];
n58 -> n63  [color=darkseagreen4, key=1, label="params System.Type[]", style=dashed];
n58 -> n65  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
n58 -> n69  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
n59 -> n60  [key=0, style=solid];
n59 -> n61  [key=0, style=solid];
n61 -> n62  [key=0, style=solid];
n61 -> n63  [key=0, style=solid];
n63 -> n64  [key=0, style=solid];
n63 -> n65  [key=0, style=solid];
n65 -> n66  [key=0, style=solid];
n65 -> n33  [key=2, style=dotted];
n65 -> n68  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n69 -> n70  [key=0, style=solid];
n69 -> n71  [key=2, style=dotted];
n69 -> n72  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n60 -> n66  [key=0, style=solid];
n60 -> n15  [key=2, style=dotted];
n62 -> n66  [key=0, style=solid];
n62 -> n15  [key=2, style=dotted];
n64 -> n66  [key=0, style=solid];
n64 -> n67  [key=2, style=dotted];
n66 -> n58  [color=blue, key=0, style=bold];
n68 -> n69  [key=0, style=solid];
n70 -> n68  [color=blue, key=0, style=bold];
n72 -> n73  [key=0, style=solid];
n73 -> n74  [key=0, style=solid];
n73 -> n41  [key=2, style=dotted];
n74 -> n72  [color=blue, key=0, style=bold];
n75 -> n76  [key=0, style=solid];
n76 -> n77  [key=0, style=solid];
n76 -> n23  [key=2, style=dotted];
n77 -> n78  [key=0, style=solid];
n77 -> n79  [key=2, style=dotted];
n78 -> n75  [color=blue, key=0, style=bold];
n80 -> n81  [key=0, style=solid];
n80 -> n84  [key=2, style=dotted];
n80 -> n85  [key=2, style=dotted];
n80 -> n87  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n80 -> n94  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n88 -> n89  [key=0, style=solid];
n88 -> n85  [key=2, style=dotted];
n88 -> n90  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n91 -> n92  [key=0, style=solid];
n91 -> n93  [key=2, style=dotted];
n95 -> n96  [key=0, style=solid];
n95 -> n93  [key=2, style=dotted];
n81 -> n82  [key=0, style=solid];
n81 -> n86  [key=2, style=dotted];
n81 -> n97  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n98 -> n99  [key=0, style=solid];
n98 -> n100  [key=2, style=dotted];
n87 -> n88  [key=0, style=solid];
n94 -> n95  [key=0, style=solid];
n82 -> n83  [key=0, style=solid];
n97 -> n98  [key=0, style=solid];
n83 -> n41  [color=blue, key=0, style=bold];
n89 -> n87  [color=blue, key=0, style=bold];
n90 -> n91  [key=0, style=solid];
n92 -> n90  [color=blue, key=0, style=bold];
n96 -> n94  [color=blue, key=0, style=bold];
n99 -> n97  [color=blue, key=0, style=bold];
n101 -> n102  [key=0, style=solid];
n102 -> n103  [key=0, style=solid];
n102 -> n104  [key=2, style=dotted];
n102 -> n105  [key=2, style=dotted];
n102 -> n106  [key=2, style=dotted];
n103 -> n101  [color=blue, key=0, style=bold];
n105 -> n107  [key=0, style=solid];
n106 -> n117  [key=0, style=solid];
n106 -> n118  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
n106 -> n119  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
n106 -> n126  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
n106 -> n120  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
n107 -> n108  [key=0, style=solid];
n107 -> n109  [key=2, style=dotted];
n107 -> n110  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n108 -> n105  [color=blue, key=0, style=bold];
n110 -> n111  [key=0, style=solid];
n111 -> n112  [key=0, style=solid];
n111 -> n113  [key=2, style=dotted];
n111 -> n114  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n112 -> n110  [color=blue, key=0, style=bold];
n114 -> n115  [key=0, style=solid];
n115 -> n116  [key=0, style=solid];
n116 -> n114  [color=blue, key=0, style=bold];
n117 -> n118  [key=0, style=solid];
n117 -> n120  [key=0, style=solid];
n118 -> n119  [key=0, style=solid];
n118 -> n120  [key=0, style=solid];
n118 -> n122  [key=2, style=dotted];
n119 -> n120  [key=0, style=solid];
n119 -> n123  [key=2, style=dotted];
n119 -> n124  [key=2, style=dotted];
n119 -> n125  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n126 -> n127  [key=0, style=solid];
n126 -> n128  [key=2, style=dotted];
n126 -> n129  [key=2, style=dotted];
n120 -> n121  [key=0, style=solid];
n125 -> n126  [key=0, style=solid];
n121 -> n106  [color=blue, key=0, style=bold];
n127 -> n125  [color=blue, key=0, style=bold];
n130 -> n131  [key=0, style=solid];
n130 -> n132  [key=0, style=solid];
n132 -> n133  [key=0, style=solid];
n132 -> n136  [key=0, style=solid];
n131 -> n136  [key=0, style=solid];
n133 -> n134  [key=0, style=solid];
n133 -> n135  [key=0, style=solid];
n136 -> n23  [color=blue, key=0, style=bold];
n134 -> n135  [key=0, style=solid];
n134 -> n137  [key=2, style=dotted];
n135 -> n136  [key=0, style=solid];
d3 -> d4  [color=green, key=0, style=solid];
d6 -> d3  [color=green, key=1, label="CommandLine.BaseAttribute", style=dashed];
d6 -> d4  [color=green, key=1, label="CommandLine.BaseAttribute", style=dashed];
d6 -> d1  [color=darkseagreen4, key=1, label="CommandLine.BaseAttribute", style=dashed];
d6 -> d2  [color=darkseagreen4, key=1, label="CommandLine.BaseAttribute", style=dashed];
d2 -> d3  [color=green, key=0, style=solid];
d4 -> d5  [color=green, key=0, style=solid];
d5 -> d0  [color=blue, key=0, style=bold];
d1 -> d2  [key=0, style=solid];
d0 -> d1  [key=0, style=solid];
m1_1 -> m1_2  [color=green, key=0, style=solid];
m1_1 -> m1_6  [key=2, style=dotted];
m1_1 -> m1_4  [color=darkseagreen4, key=1, label=expected, style=dashed];
m1_2 -> m1_3  [color=green, key=0, style=solid];
m1_2 -> m1_7  [color=green, key=2, style=dotted];
m1_2 -> m1_8  [color=green, key=2, style=dotted];
m1_2 -> m1_9  [color=green, key=2, style=dotted];
m1_3 -> m1_4  [key=0, style=solid];
m1_3 -> d0  [color=darkorchid, key=3, label="Property variable CommandLine.NameStyleFormat NameStyleFormat", style=bold];
m1_3 -> m1_10  [key=2, style=dotted];
m1_4 -> d5  [key=0, style=solid];
m1_4 -> m1_5  [key=0, style=solid];
m1_4 -> m1_11  [key=2, style=dotted];
m1_6 -> m1_1  [color=darkseagreen4, key=1, label="CommandLine.BaseAttribute", style=dashed];
m1_6 -> m1_2  [color=darkseagreen4, key=1, label="CommandLine.BaseAttribute", style=dashed];
m1_6 -> m1_3  [color=darkseagreen4, key=1, label="CommandLine.BaseAttribute", style=dashed];
m1_6 -> m1_4  [color=darkseagreen4, key=1, label="CommandLine.BaseAttribute", style=dashed];
m1_0 -> m1_1  [key=0, style=solid];
m1_5 -> m1_0  [color=blue, key=0, style=bold];
m2_0 -> m2_1  [color=red, key=0, style=solid];
m2_1 -> m2_2  [color=red, key=0, style=solid];
m2_1 -> m2_6  [color=red, key=2, style=dotted];
m2_1 -> m2_4  [color=red, key=1, label=expected, style=dashed];
m2_2 -> m2_3  [color=red, key=0, style=solid];
m2_2 -> m2_7  [color=red, key=2, style=dotted];
m2_2 -> m2_8  [color=red, key=2, style=dotted];
m2_2 -> m2_9  [color=red, key=2, style=dotted];
m2_4 -> m2_5  [key=0, style=solid];
m2_4 -> m2_11  [key=2, style=dotted];
m2_3 -> m2_4  [key=0, style=solid];
m2_3 -> m2_10  [key=2, style=dotted];
m2_5 -> m2_0  [color=blue, key=0, style=bold];
m3_9 -> m3_10  [key=0, style=solid];
m3_9 -> m3_11  [key=0, style=solid];
m3_12 -> m3_13  [key=0, style=solid];
m3_12 -> m3_16  [key=2, style=dotted];
m3_10 -> n14  [key=0, style=solid];
m3_10 -> m3_15  [key=2, style=dotted];
m3_11 -> m3_12  [key=0, style=solid];
m3_11 -> m3_4  [key=2, style=dotted];
m3_13 -> n14  [key=0, style=solid];
m3_20 -> m3_21  [key=0, style=solid];
m3_21 -> m3_22  [key=0, style=solid];
m3_21 -> m3_23  [key=2, style=dotted];
m3_22 -> m3_20  [color=blue, key=0, style=bold];
m3_58 -> m3_59  [key=0, style=solid];
m3_58 -> m3_61  [color=darkseagreen4, key=1, label="params System.Type[]", style=dashed];
m3_58 -> m3_63  [color=darkseagreen4, key=1, label="params System.Type[]", style=dashed];
m3_58 -> m3_65  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m3_58 -> m3_69  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m3_59 -> m3_60  [key=0, style=solid];
m3_59 -> m3_61  [key=0, style=solid];
m3_61 -> m3_62  [key=0, style=solid];
m3_61 -> m3_63  [key=0, style=solid];
m3_63 -> m3_64  [key=0, style=solid];
m3_63 -> m3_65  [key=0, style=solid];
m3_65 -> m3_66  [key=0, style=solid];
m3_65 -> m3_33  [key=2, style=dotted];
m3_65 -> m3_68  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_60 -> m3_66  [key=0, style=solid];
m3_60 -> m3_15  [key=2, style=dotted];
m3_62 -> m3_66  [key=0, style=solid];
m3_62 -> m3_15  [key=2, style=dotted];
m3_64 -> m3_66  [key=0, style=solid];
m3_64 -> m3_67  [key=2, style=dotted];
m3_66 -> m3_58  [color=blue, key=0, style=bold];
m3_3 -> m3_17  [key=0, style=solid];
m3_17 -> m3_18  [key=0, style=solid];
m3_18 -> m3_19  [key=0, style=solid];
m3_19 -> m3_3  [color=blue, key=0, style=bold];
m3_42 -> m3_43  [key=0, style=solid];
m3_42 -> m3_47  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m3_42 -> m3_49  [color=darkseagreen4, key=1, label="System.Func<T>", style=dashed];
m3_42 -> m3_53  [color=darkseagreen4, key=1, label="System.Func<T>", style=dashed];
m3_43 -> m3_44  [key=0, style=solid];
m3_43 -> m3_45  [key=0, style=solid];
m3_47 -> m3_48  [key=0, style=solid];
m3_47 -> m3_49  [key=0, style=solid];
m3_49 -> m3_50  [key=0, style=solid];
m3_49 -> m3_33  [key=2, style=dotted];
m3_49 -> m3_52  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_49 -> m3_0  [color=darkorchid, key=3, label="Parameter variable string value", style=bold];
m3_44 -> m3_50  [key=0, style=solid];
m3_44 -> m3_15  [key=2, style=dotted];
m3_45 -> m3_46  [key=0, style=solid];
m3_45 -> m3_47  [key=0, style=solid];
m3_45 -> m3_30  [key=2, style=dotted];
m3_46 -> m3_50  [key=0, style=solid];
m3_46 -> m3_51  [key=2, style=dotted];
m3_48 -> m3_50  [key=0, style=solid];
m3_48 -> m3_15  [key=2, style=dotted];
m3_50 -> m3_42  [color=blue, key=0, style=bold];
m3_5 -> m3_6  [key=0, style=solid];
m3_6 -> m3_7  [key=0, style=solid];
m3_6 -> m3_4  [key=2, style=dotted];
m3_7 -> m3_5  [color=blue, key=0, style=bold];
m3_106 -> m3_117  [key=0, style=solid];
m3_106 -> m3_118  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
m3_106 -> m3_119  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
m3_106 -> m3_126  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
m3_106 -> m3_120  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
m3_117 -> m3_118  [key=0, style=solid];
m3_117 -> m3_120  [key=0, style=solid];
m3_118 -> m3_119  [key=0, style=solid];
m3_118 -> m3_120  [key=0, style=solid];
m3_118 -> m3_122  [key=2, style=dotted];
m3_119 -> m3_120  [key=0, style=solid];
m3_119 -> m3_123  [key=2, style=dotted];
m3_119 -> m3_124  [key=2, style=dotted];
m3_119 -> m3_125  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_120 -> m3_121  [key=0, style=solid];
m3_121 -> m3_106  [color=blue, key=0, style=bold];
m3_125 -> m3_126  [key=0, style=solid];
m3_0 -> m3_1  [key=0, style=solid];
m3_1 -> m3_2  [key=0, style=solid];
m3_1 -> m3_3  [key=2, style=dotted];
m3_1 -> m3_4  [key=2, style=dotted];
m3_2 -> m3_0  [color=blue, key=0, style=bold];
m3_35 -> m3_36  [key=0, style=solid];
m3_35 -> m3_37  [key=2, style=dotted];
m3_35 -> m3_38  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_34 -> m3_35  [key=0, style=solid];
m3_36 -> m3_34  [color=blue, key=0, style=bold];
m3_38 -> m3_39  [key=0, style=solid];
m3_39 -> m3_40  [key=0, style=solid];
m3_39 -> m3_41  [key=2, style=dotted];
m3_40 -> m3_38  [color=blue, key=0, style=bold];
m3_53 -> m3_54  [key=0, style=solid];
m3_53 -> m3_31  [key=2, style=dotted];
m3_53 -> m3_37  [key=2, style=dotted];
m3_53 -> m3_55  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_52 -> m3_53  [key=0, style=solid];
m3_54 -> m3_52  [color=blue, key=0, style=bold];
m3_55 -> m3_56  [key=0, style=solid];
m3_56 -> m3_57  [key=0, style=solid];
m3_56 -> m3_41  [key=2, style=dotted];
m3_57 -> m3_55  [color=blue, key=0, style=bold];
m3_69 -> m3_70  [key=0, style=solid];
m3_69 -> m3_71  [key=2, style=dotted];
m3_69 -> m3_72  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_68 -> m3_69  [key=0, style=solid];
m3_70 -> m3_68  [color=blue, key=0, style=bold];
m3_72 -> m3_73  [key=0, style=solid];
m3_73 -> m3_74  [key=0, style=solid];
m3_73 -> m3_41  [key=2, style=dotted];
m3_74 -> m3_72  [color=blue, key=0, style=bold];
m3_88 -> m3_89  [key=0, style=solid];
m3_88 -> m3_85  [key=2, style=dotted];
m3_88 -> m3_90  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_91 -> m3_92  [key=0, style=solid];
m3_91 -> m3_93  [key=2, style=dotted];
m3_95 -> m3_96  [key=0, style=solid];
m3_95 -> m3_93  [key=2, style=dotted];
m3_98 -> m3_99  [key=0, style=solid];
m3_98 -> m3_100  [key=2, style=dotted];
m3_87 -> m3_88  [key=0, style=solid];
m3_94 -> m3_95  [key=0, style=solid];
m3_97 -> m3_98  [key=0, style=solid];
m3_89 -> m3_87  [color=blue, key=0, style=bold];
m3_90 -> m3_91  [key=0, style=solid];
m3_92 -> m3_90  [color=blue, key=0, style=bold];
m3_96 -> m3_94  [color=blue, key=0, style=bold];
m3_99 -> m3_97  [color=blue, key=0, style=bold];
m3_110 -> m3_111  [key=0, style=solid];
m3_111 -> m3_112  [key=0, style=solid];
m3_111 -> m3_113  [key=2, style=dotted];
m3_111 -> m3_114  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_112 -> m3_110  [color=blue, key=0, style=bold];
m3_114 -> m3_115  [key=0, style=solid];
m3_115 -> m3_116  [key=0, style=solid];
m3_116 -> m3_114  [color=blue, key=0, style=bold];
m3_126 -> m3_127  [key=0, style=solid];
m3_126 -> m3_128  [key=2, style=dotted];
m3_126 -> m3_129  [key=2, style=dotted];
m3_127 -> m3_125  [color=blue, key=0, style=bold];
m3_105 -> m3_107  [key=0, style=solid];
m3_107 -> m3_108  [key=0, style=solid];
m3_107 -> m3_109  [key=2, style=dotted];
m3_107 -> m3_110  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_108 -> m3_105  [color=blue, key=0, style=bold];
m3_101 -> m3_102  [key=0, style=solid];
m3_102 -> m3_103  [key=0, style=solid];
m3_102 -> m3_104  [key=2, style=dotted];
m3_102 -> m3_105  [key=2, style=dotted];
m3_102 -> m3_106  [key=2, style=dotted];
m3_103 -> m3_101  [color=blue, key=0, style=bold];
m3_75 -> m3_76  [key=0, style=solid];
m3_76 -> m3_77  [key=0, style=solid];
m3_76 -> m3_23  [key=2, style=dotted];
m3_77 -> m3_78  [key=0, style=solid];
m3_77 -> m3_79  [key=2, style=dotted];
m3_78 -> m3_75  [color=blue, key=0, style=bold];
m3_24 -> m3_25  [key=0, style=solid];
m3_24 -> m3_28  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m3_24 -> m3_35  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m3_25 -> m3_26  [key=0, style=solid];
m3_25 -> m3_27  [key=0, style=solid];
m3_28 -> m3_29  [key=0, style=solid];
m3_28 -> m3_33  [key=2, style=dotted];
m3_28 -> m3_34  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_26 -> m3_29  [key=0, style=solid];
m3_26 -> m3_15  [key=2, style=dotted];
m3_27 -> m3_28  [key=0, style=solid];
m3_27 -> m3_30  [key=2, style=dotted];
m3_27 -> m3_31  [key=2, style=dotted];
m3_27 -> m3_32  [key=2, style=dotted];
m3_27 -> m3_35  [color=darkseagreen4, key=1, label=factory, style=dashed];
m3_29 -> m3_24  [color=blue, key=0, style=bold];
m3_41 -> m3_80  [key=0, style=solid];
m3_41 -> m3_88  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m3_41 -> m3_91  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m3_41 -> m3_95  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m3_41 -> m3_81  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m3_41 -> m3_98  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m3_80 -> m3_81  [key=0, style=solid];
m3_80 -> m3_84  [key=2, style=dotted];
m3_80 -> m3_85  [key=2, style=dotted];
m3_80 -> m3_87  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_80 -> m3_94  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_81 -> m3_82  [key=0, style=solid];
m3_81 -> m3_86  [key=2, style=dotted];
m3_81 -> m3_97  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_82 -> m3_83  [key=0, style=solid];
m3_83 -> m3_41  [color=blue, key=0, style=bold];
m3_23 -> m3_130  [key=0, style=solid];
m3_23 -> m3_132  [color=darkseagreen4, key=1, label=bool, style=dashed];
m3_130 -> m3_131  [key=0, style=solid];
m3_130 -> m3_132  [key=0, style=solid];
m3_132 -> m3_133  [key=0, style=solid];
m3_132 -> m3_136  [key=0, style=solid];
m3_131 -> m3_136  [key=0, style=solid];
m3_133 -> m3_134  [key=0, style=solid];
m3_133 -> m3_135  [key=0, style=solid];
m3_134 -> m3_135  [key=0, style=solid];
m3_134 -> m3_137  [key=2, style=dotted];
m3_135 -> m3_136  [key=0, style=solid];
m3_136 -> m3_23  [color=blue, key=0, style=bold];
m3_138 -> m3_6  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m3_138 -> m3_11  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m3_138 -> m3_12  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m3_138 -> m3_13  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m3_138 -> m3_17  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m3_138 -> m3_18  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m3_138 -> m3_21  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m3_138 -> m3_28  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m3_138 -> m3_35  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m3_138 -> m3_39  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m3_138 -> m3_49  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m3_138 -> m3_53  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m3_138 -> m3_56  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m3_138 -> m3_65  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m3_138 -> m3_69  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m3_138 -> m3_73  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m3_138 -> m3_76  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m3_138 -> m3_77  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m3_138 -> m3_130  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m3_138 -> m3_133  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m3_138 -> m3_134  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m3_138 -> m3_135  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m3_139 -> m3_35  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m3_140 -> m3_35  [color=darkseagreen4, key=1, label=factory, style=dashed];
m3_141 -> m3_53  [color=darkseagreen4, key=1, label="System.Func<T>", style=dashed];
m3_142 -> m3_53  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m3_143 -> m3_69  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m3_144 -> m3_69  [color=darkseagreen4, key=1, label="params System.Type[]", style=dashed];
m3_145 -> m3_88  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m3_145 -> m3_91  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m3_145 -> m3_95  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m3_145 -> m3_98  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m3_146 -> m3_88  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m3_146 -> m3_91  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m3_146 -> m3_95  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m3_146 -> m3_98  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m3_147 -> m3_126  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
m5_2 -> m5_3  [key=0, style=solid];
m5_2 -> m5_4  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_3 -> m5_4  [key=0, style=solid];
m5_4 -> m5_5  [key=0, style=solid];
m5_5 -> m5_2  [color=blue, key=0, style=bold];
m5_0 -> m5_1  [key=0, style=solid];
m5_1 -> m5_0  [color=blue, key=0, style=bold];
m5_6 -> m5_3  [color=darkseagreen4, key=1, label="CommandLine.BadOptionInfo", style=dashed];
m5_6 -> m5_4  [color=darkseagreen4, key=1, label="CommandLine.BadOptionInfo", style=dashed];
m6_25 -> m6_26  [color=green, key=0, style=solid];
m6_25 -> m6_28  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m6_25 -> m6_29  [color=darkseagreen4, key=1, label="System.Func<int, int, bool>", style=dashed];
m6_25 -> m6_30  [color=darkorchid, key=3, label="method methodReturn bool HavingRange", style=bold];
m6_25 -> m6_27  [color=green, key=2, style=dotted];
m6_26 -> m6_27  [key=0, style=solid];
m6_26 -> m6_24  [color=blue, key=0, style=bold];
m6_28 -> m6_29  [key=0, style=solid];
m6_28 -> m6_30  [key=0, style=solid];
m6_28 -> m6_32  [key=2, style=dotted];
m6_29 -> m6_31  [key=0, style=solid];
m6_29 -> m6_33  [key=2, style=dotted];
m6_29 -> m6_23  [key=2, style=dotted];
m6_29 -> m6_30  [key=0, style=solid];
m6_27 -> m6_28  [key=0, style=solid];
m6_30 -> m6_31  [key=0, style=solid];
m6_30 -> m6_28  [color=blue, key=0, style=bold];
m6_31 -> m6_25  [color=blue, key=0, style=bold];
m6_34 -> m6_35  [key=0, style=solid];
m6_34 -> m6_36  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m6_34 -> m6_37  [color=darkseagreen4, key=1, label="System.Func<int, bool>", style=dashed];
m6_34 -> m6_30  [color=darkorchid, key=3, label="method methodReturn bool HavingMin", style=bold];
m6_35 -> m6_36  [key=0, style=solid];
m6_36 -> m6_37  [key=0, style=solid];
m6_36 -> m6_38  [key=0, style=solid];
m6_36 -> m6_32  [key=2, style=dotted];
m6_37 -> m6_39  [key=0, style=solid];
m6_37 -> m6_24  [key=2, style=dotted];
m6_38 -> m6_39  [key=0, style=solid];
m6_39 -> m6_34  [color=blue, key=0, style=bold];
m6_20 -> m6_21  [color=green, key=0, style=solid];
m6_24 -> m6_25  [color=green, key=0, style=solid];
m6_12 -> m6_10  [color=blue, key=0, style=bold];
m6_13 -> m6_14  [key=0, style=solid];
m6_13 -> m6_15  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>", style=dashed];
m6_13 -> m6_17  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>", style=dashed];
m6_13 -> m6_13  [color=darkorchid, key=3, label="method methodReturn System.Collections.Generic.IEnumerable<CommandLine.Core.Specification> ThrowingValidate", style=bold];
m6_14 -> m6_15  [key=0, style=solid];
m6_14 -> m6_17  [key=0, style=solid];
m6_14 -> m6_22  [color=darkseagreen4, key=1, label=guard, style=dashed];
m6_14 -> m6_16  [color=darkseagreen4, key=1, label=guard, style=dashed];
m6_15 -> m6_16  [key=0, style=solid];
m6_15 -> m6_14  [key=0, style=solid];
m6_15 -> m6_19  [key=2, style=dotted];
m6_15 -> m6_21  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_17 -> m6_18  [key=0, style=solid];
m6_17 -> m6_19  [key=2, style=dotted];
m6_16 -> m6_18  [key=0, style=solid];
m6_16 -> m6_20  [key=2, style=dotted];
m6_16 -> m6_17  [key=0, style=solid];
m6_18 -> m6_13  [color=blue, key=0, style=bold];
m6_18 -> m6_16  [color=blue, key=0, style=bold];
m6_11 -> m6_12  [key=0, style=solid];
m6_3 -> m6_4  [color=green, key=0, style=solid];
m6_3 -> n113  [color=green, key=2, style=dotted];
m6_3 -> m6_14  [color=green, key=2, style=dotted];
m6_3 -> m6_20  [color=green, key=1, label="lambda expression", style=dashed];
m6_3 -> m6_24  [color=green, key=1, label="lambda expression", style=dashed];
m6_4 -> m6_5  [key=0, style=solid];
m6_4 -> m6_11  [key=2, style=dotted];
m6_4 -> m6_15  [key=2, style=dotted];
m6_4 -> m6_28  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_5 -> m6_3  [color=blue, key=0, style=bold];
m6_5 -> m6_0  [color=blue, key=0, style=bold];
m6_22 -> m6_23  [key=0, style=solid];
m6_22 -> m6_24  [key=2, style=dotted];
m6_22 -> m6_20  [color=blue, key=0, style=bold];
m6_21 -> m6_22  [color=green, key=0, style=solid];
m6_21 -> m6_23  [color=green, key=2, style=dotted];
m6_23 -> m6_21  [color=blue, key=0, style=bold];
m6_10 -> m6_11  [key=0, style=solid];
m6_7 -> m6_8  [color=red, key=0, style=solid];
m6_7 -> m6_9  [color=red, key=2, style=dotted];
m6_8 -> m6_6  [color=blue, key=0, style=bold];
m6_6 -> m6_7  [color=red, key=0, style=solid];
m6_0 -> m6_1  [key=0, style=solid];
m6_1 -> m6_2  [key=0, style=solid];
m6_1 -> m6_3  [color=green, key=1, label=tokenPartitions, style=dashed];
m6_1 -> m6_6  [key=2, style=dotted];
m6_2 -> m6_0  [color=blue, key=0, style=bold];
m6_2 -> m6_3  [color=green, key=0, style=solid];
m6_2 -> m6_7  [key=2, style=dotted];
m6_2 -> m6_8  [key=2, style=dotted];
m6_2 -> m6_9  [key=2, style=dotted];
m6_2 -> m6_10  [key=2, style=dotted];
m6_2 -> m6_11  [key=2, style=dotted];
m6_2 -> m6_12  [key=2, style=dotted];
m6_2 -> m6_16  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_40 -> m6_41  [key=0, style=solid];
m6_40 -> m6_42  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m6_40 -> m6_43  [color=darkseagreen4, key=1, label="System.Func<int, bool>", style=dashed];
m6_40 -> m6_30  [color=darkorchid, key=3, label="method methodReturn bool HavingMax", style=bold];
m6_41 -> m6_42  [key=0, style=solid];
m6_42 -> m6_43  [key=0, style=solid];
m6_42 -> m6_44  [key=0, style=solid];
m6_42 -> m6_32  [key=2, style=dotted];
m6_43 -> m6_45  [key=0, style=solid];
m6_43 -> m6_24  [key=2, style=dotted];
m6_44 -> m6_45  [key=0, style=solid];
m6_45 -> m6_40  [color=blue, key=0, style=bold];
m6_46 -> m6_22  [color=darkseagreen4, key=1, label=guard, style=dashed];
m7_0 -> m7_1  [key=0, style=solid];
m7_0 -> m7_3  [color=darkseagreen4, key=1, label=string, style=dashed];
m7_1 -> m7_2  [key=0, style=solid];
m7_1 -> m7_3  [key=0, style=solid];
m7_1 -> m7_5  [key=2, style=dotted];
m7_3 -> m7_4  [key=0, style=solid];
m7_2 -> m7_4  [key=0, style=solid];
m7_2 -> n51  [key=2, style=dotted];
m7_4 -> m7_0  [color=blue, key=0, style=bold];
m7_7 -> m7_3  [color=darkseagreen4, key=1, label="CommandLine.VerbAttribute", style=dashed];
m8_0 -> m8_1  [key=0, style=solid];
m8_1 -> m8_2  [color=red, key=0, style=solid];
m8_1 -> m8_6  [key=2, style=dotted];
m8_1 -> m8_4  [color=darkseagreen4, key=1, label=expectedSequence, style=dashed];
m8_2 -> m8_3  [color=red, key=0, style=solid];
m8_2 -> m8_7  [color=red, key=2, style=dotted];
m8_2 -> m8_8  [color=red, key=2, style=dotted];
m8_2 -> m8_9  [color=red, key=2, style=dotted];
m8_2 -> m8_10  [color=red, key=2, style=dotted];
m8_2 -> m8_17  [color=red, key=1, label=specs, style=dashed];
m8_4 -> m8_5  [key=0, style=solid];
m8_4 -> m8_14  [key=2, style=dotted];
m8_4 -> m8_15  [key=2, style=dotted];
m8_4 -> m8_20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_3 -> m8_4  [key=0, style=solid];
m8_3 -> m8_11  [key=2, style=dotted];
m8_3 -> m8_12  [key=2, style=dotted];
m8_3 -> m8_13  [key=2, style=dotted];
m8_3 -> m8_16  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_3 -> m8_21  [color=darkseagreen4, key=1, label=result, style=dashed];
m8_5 -> m8_0  [color=blue, key=0, style=bold];
m8_41 -> m8_42  [key=0, style=solid];
m8_17 -> m8_18  [key=0, style=solid];
m8_17 -> m8_19  [key=2, style=dotted];
m8_16 -> m8_17  [key=0, style=solid];
m8_21 -> m8_22  [key=0, style=solid];
m8_21 -> m8_23  [key=2, style=dotted];
m8_21 -> m8_24  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_21 -> m8_25  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
m8_20 -> m8_21  [key=0, style=solid];
m8_18 -> m8_16  [color=blue, key=0, style=bold];
m8_22 -> m8_20  [color=blue, key=0, style=bold];
m8_24 -> m8_25  [key=0, style=solid];
m8_25 -> m8_26  [key=0, style=solid];
m8_25 -> m8_27  [key=2, style=dotted];
m8_25 -> m8_28  [key=2, style=dotted];
m8_25 -> m8_25  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
m8_26 -> m8_24  [color=blue, key=0, style=bold];
m8_36 -> m8_37  [key=0, style=solid];
m8_36 -> m8_19  [key=2, style=dotted];
m8_35 -> m8_36  [key=0, style=solid];
m8_39 -> m8_40  [key=0, style=solid];
m8_39 -> m8_23  [key=2, style=dotted];
m8_39 -> m8_41  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_39 -> m8_42  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
m8_38 -> m8_39  [key=0, style=solid];
m8_37 -> m8_35  [color=blue, key=0, style=bold];
m8_40 -> m8_38  [color=blue, key=0, style=bold];
m8_42 -> m8_43  [key=0, style=solid];
m8_42 -> m8_27  [key=2, style=dotted];
m8_42 -> m8_28  [key=2, style=dotted];
m8_42 -> m8_42  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
m8_43 -> m8_41  [color=blue, key=0, style=bold];
m8_29 -> m8_30  [key=0, style=solid];
m8_30 -> m8_31  [color=red, key=0, style=solid];
m8_30 -> m8_6  [key=2, style=dotted];
m8_30 -> m8_33  [color=darkseagreen4, key=1, label=expectedSequence, style=dashed];
m8_31 -> m8_32  [color=red, key=0, style=solid];
m8_31 -> m8_7  [color=red, key=2, style=dotted];
m8_31 -> m8_8  [color=red, key=2, style=dotted];
m8_31 -> m8_9  [color=red, key=2, style=dotted];
m8_31 -> m8_10  [color=red, key=2, style=dotted];
m8_31 -> m8_36  [color=red, key=1, label=specs, style=dashed];
m8_33 -> m8_34  [key=0, style=solid];
m8_33 -> m8_14  [key=2, style=dotted];
m8_33 -> m8_15  [key=2, style=dotted];
m8_33 -> m8_38  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_32 -> m8_33  [key=0, style=solid];
m8_32 -> m8_11  [key=2, style=dotted];
m8_32 -> m8_12  [key=2, style=dotted];
m8_32 -> m8_13  [key=2, style=dotted];
m8_32 -> m8_35  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_32 -> m8_39  [color=darkseagreen4, key=1, label=result, style=dashed];
m8_34 -> m8_29  [color=blue, key=0, style=bold];
m8_44 -> m8_17  [color=darkseagreen4, key=1, label=specs, style=dashed];
m8_45 -> m8_21  [color=darkseagreen4, key=1, label=result, style=dashed];
m8_46 -> m8_25  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
m8_47 -> m8_36  [color=darkseagreen4, key=1, label=specs, style=dashed];
m8_48 -> m8_39  [color=darkseagreen4, key=1, label=result, style=dashed];
m8_49 -> m8_42  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
}
