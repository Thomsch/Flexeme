digraph  {
n138 [label="CommandLine.Parser", span=""];
n139 [label="System.Collections.Generic.IEnumerable<string>", span=""];
n140 [label=factory, span=""];
n141 [label="System.Func<T>", span=""];
n142 [label="System.Collections.Generic.IEnumerable<string>", span=""];
n143 [label="System.Collections.Generic.IEnumerable<string>", span=""];
n144 [label="params System.Type[]", span=""];
n145 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
n146 [label="CommandLine.ParserSettings", span=""];
n147 [label="CommandLine.ParserResult<T>", span=""];
n0 [label="Entry lambda expression", span="20-20", cluster="lambda expression"];
n1 [label="new Parser(new ParserSettings{ HelpWriter = Console.Error })", span="20-20", cluster="lambda expression"];
n2 [label="Exit lambda expression", span="20-20", cluster="lambda expression"];
n3 [label="Entry CommandLine.Parser.Parser(CommandLine.ParserSettings)", span="45-45", cluster="CommandLine.Parser.Parser(CommandLine.ParserSettings)"];
n4 [label="Entry CommandLine.ParserSettings.ParserSettings()", span="25-25", cluster="CommandLine.ParserSettings.ParserSettings()"];
n5 [label="Entry CommandLine.Parser.Parser()", span="25-25", cluster="CommandLine.Parser.Parser()"];
n6 [label="settings = new ParserSettings { Consumed = true }", span="27-27", cluster="CommandLine.Parser.Parser()"];
n7 [label="Exit CommandLine.Parser.Parser()", span="25-25", cluster="CommandLine.Parser.Parser()"];
n8 [label="Entry CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)", span="36-36", cluster="CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)"];
n9 [label="configuration == null", span="38-38", cluster="CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)"];
n12 [label="configuration(settings)", span="41-41", cluster="CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)"];
n10 [label="throw new ArgumentNullException(''configuration'');", span="38-38", cluster="CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)"];
n11 [label="settings = new ParserSettings()", span="40-40", cluster="CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)"];
n13 [label="settings.Consumed = true", span="42-42", cluster="CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)"];
n16 [label="Entry System.Action<T>.Invoke(T)", span="0-0", cluster="System.Action<T>.Invoke(T)"];
n14 [label="Exit CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)", span="36-36", cluster="CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)"];
n15 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)"];
n17 [label="this.settings = settings", span="47-47", cluster="CommandLine.Parser.Parser(CommandLine.ParserSettings)"];
n18 [label="this.settings.Consumed = true", span="48-48", cluster="CommandLine.Parser.Parser(CommandLine.ParserSettings)"];
n19 [label="Exit CommandLine.Parser.Parser(CommandLine.ParserSettings)", span="45-45", cluster="CommandLine.Parser.Parser(CommandLine.ParserSettings)"];
n20 [label="Entry CommandLine.Parser.~Parser()", span="54-54", cluster="CommandLine.Parser.~Parser()"];
n21 [label="Dispose(false)", span="56-56", cluster="CommandLine.Parser.~Parser()"];
n22 [label="Exit CommandLine.Parser.~Parser()", span="54-54", cluster="CommandLine.Parser.~Parser()"];
n23 [label="Entry CommandLine.Parser.Dispose(bool)", span="213-213", cluster="CommandLine.Parser.Dispose(bool)"];
n24 [label="Entry CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", span="84-84", cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)"];
n25 [label="args == null", span="86-86", cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)"];
n28 [label="return MakeParserResult(\r\n                () => InstanceBuilder.Build(\r\n                    factory,\r\n                    (arguments, optionSpecs) => Tokenize(arguments, optionSpecs, settings),\r\n                    args,\r\n                    settings.NameComparer,\r\n                    settings.ParsingCulture),\r\n                settings);", span="92-99", cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)"];
n35 [label="InstanceBuilder.Build(\r\n                    factory,\r\n                    (arguments, optionSpecs) => Tokenize(arguments, optionSpecs, settings),\r\n                    args,\r\n                    settings.NameComparer,\r\n                    settings.ParsingCulture)", span="93-98", cluster="lambda expression"];
n26 [label="throw new ArgumentNullException(''args'');", span="86-86", cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)"];
n27 [label="var factory = typeof(T).IsMutable()\r\n                ? Maybe.Just<Func<T>>(Activator.CreateInstance<T>)\r\n                : Maybe.Nothing<Func<T>>()", span="88-90", cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)"];
n30 [label="Entry System.Type.IsMutable()", span="115-115", cluster="System.Type.IsMutable()"];
n31 [label="Entry CSharpx.Maybe.Just<T>(T)", span="80-80", cluster="CSharpx.Maybe.Just<T>(T)"];
n32 [label="Entry CSharpx.Maybe.Nothing<T>()", span="75-75", cluster="CSharpx.Maybe.Nothing<T>()"];
n29 [label="Exit CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", span="84-84", cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)"];
n33 [label="Entry Unk.MakeParserResult", span="", cluster="Unk.MakeParserResult"];
n34 [label="Entry lambda expression", span="93-98", cluster="lambda expression"];
n36 [label="Exit lambda expression", span="93-98", cluster="lambda expression"];
n37 [label="Entry Unk.Build", span="", cluster="Unk.Build"];
n38 [label="Entry lambda expression", span="95-95", cluster="lambda expression"];
n39 [label="Tokenize(arguments, optionSpecs, settings)", span="95-95", cluster="lambda expression"];
n40 [label="Exit lambda expression", span="95-95", cluster="lambda expression"];
n41 [label="Entry CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)", span="167-167", cluster="CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)"];
n42 [label="Entry CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", span="112-112", cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)"];
n43 [label="factory == null", span="115-115", cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)"];
n47 [label="args == null", span="117-117", cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)"];
n49 [label="return MakeParserResult(\r\n                () => InstanceBuilder.Build(\r\n                    Maybe.Just(factory),\r\n                    (arguments, optionSpecs) => Tokenize(arguments, optionSpecs, settings),\r\n                    args,\r\n                    settings.NameComparer,\r\n                    settings.ParsingCulture),\r\n                settings);", span="119-126", cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)"];
n53 [label="InstanceBuilder.Build(\r\n                    Maybe.Just(factory),\r\n                    (arguments, optionSpecs) => Tokenize(arguments, optionSpecs, settings),\r\n                    args,\r\n                    settings.NameComparer,\r\n                    settings.ParsingCulture)", span="120-125", cluster="lambda expression"];
n44 [label="throw new ArgumentNullException(''factory'');", span="115-115", cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)"];
n45 [label="!typeof(T).IsMutable()", span="116-116", cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)"];
n46 [label="throw new ArgumentException(''factory'');", span="116-116", cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)"];
n48 [label="throw new ArgumentNullException(''args'');", span="117-117", cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)"];
n50 [label="Exit CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", span="112-112", cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)"];
n51 [label="Entry System.ArgumentException.ArgumentException(string)", span="0-0", cluster="System.ArgumentException.ArgumentException(string)"];
n52 [label="Entry lambda expression", span="120-125", cluster="lambda expression"];
n54 [label="Exit lambda expression", span="120-125", cluster="lambda expression"];
n55 [label="Entry lambda expression", span="122-122", cluster="lambda expression"];
n56 [label="Tokenize(arguments, optionSpecs, settings)", span="122-122", cluster="lambda expression"];
n57 [label="Exit lambda expression", span="122-122", cluster="lambda expression"];
n58 [label="Entry CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", span="141-141", cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])"];
n59 [label="args == null", span="143-143", cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])"];
n61 [label="types == null", span="144-144", cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])"];
n63 [label="types.Length == 0", span="145-145", cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])"];
n65 [label="return MakeParserResult(\r\n                () => InstanceChooser.Choose(\r\n                    (arguments, optionSpecs) => Tokenize(arguments, optionSpecs, settings),\r\n                    types,\r\n                    args,\r\n                    settings.NameComparer,\r\n                    settings.ParsingCulture),\r\n                settings);", span="147-154", cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])"];
n69 [label="InstanceChooser.Choose(\r\n                    (arguments, optionSpecs) => Tokenize(arguments, optionSpecs, settings),\r\n                    types,\r\n                    args,\r\n                    settings.NameComparer,\r\n                    settings.ParsingCulture)", span="148-153", cluster="lambda expression"];
n60 [label="throw new ArgumentNullException(''args'');", span="143-143", cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])"];
n62 [label="throw new ArgumentNullException(''types'');", span="144-144", cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])"];
n64 [label="throw new ArgumentOutOfRangeException(''types'');", span="145-145", cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])"];
n66 [label="Exit CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", span="141-141", cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])"];
n67 [label="Entry System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", span="0-0", cluster="System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)"];
n68 [label="Entry lambda expression", span="148-153", cluster="lambda expression"];
n70 [label="Exit lambda expression", span="148-153", cluster="lambda expression"];
n71 [label="Entry Unk.Choose", span="", cluster="Unk.Choose"];
n72 [label="Entry lambda expression", span="149-149", cluster="lambda expression"];
n73 [label="Tokenize(arguments, optionSpecs, settings)", span="149-149", cluster="lambda expression"];
n74 [label="Exit lambda expression", span="149-149", cluster="lambda expression"];
n75 [label="Entry CommandLine.Parser.Dispose()", span="160-160", cluster="CommandLine.Parser.Dispose()"];
n76 [label="Dispose(true)", span="162-162", cluster="CommandLine.Parser.Dispose()"];
n77 [label="GC.SuppressFinalize(this)", span="164-164", cluster="CommandLine.Parser.Dispose()"];
n78 [label="Exit CommandLine.Parser.Dispose()", span="160-160", cluster="CommandLine.Parser.Dispose()"];
n79 [label="Entry System.GC.SuppressFinalize(object)", span="0-0", cluster="System.GC.SuppressFinalize(object)"];
n80 [label="var tokens = settings.EnableDashDash\r\n                ? Tokenizer.PreprocessDashDash(\r\n                        arguments,\r\n                        args =>\r\n                            Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, settings.NameComparer)))\r\n                : Tokenizer.Tokenize(arguments, name => NameLookup.Contains(name, optionSpecs, settings.NameComparer))", span="172-177", cluster="CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)"];
n88 [label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, settings.NameComparer))", span="176-176", cluster="lambda expression"];
n91 [label="NameLookup.Contains(name, optionSpecs, settings.NameComparer)", span="176-176", cluster="lambda expression"];
n95 [label="NameLookup.Contains(name, optionSpecs, settings.NameComparer)", span="177-177", cluster="lambda expression"];
n81 [label="var explodedTokens = Tokenizer.ExplodeOptionList(tokens, name => NameLookup.HavingSeparator(name, optionSpecs, settings.NameComparer))", span="178-178", cluster="CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)"];
n98 [label="NameLookup.HavingSeparator(name, optionSpecs, settings.NameComparer)", span="178-178", cluster="lambda expression"];
n84 [label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", span="34-34", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)"];
n85 [label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="14-14", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)"];
n87 [label="Entry lambda expression", span="175-176", cluster="lambda expression"];
n94 [label="Entry lambda expression", span="177-177", cluster="lambda expression"];
n82 [label="return explodedTokens;", span="179-179", cluster="CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)"];
n86 [label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", span="47-47", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)"];
n97 [label="Entry lambda expression", span="178-178", cluster="lambda expression"];
n83 [label="Exit CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)", span="167-167", cluster="CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)"];
n89 [label="Exit lambda expression", span="175-176", cluster="lambda expression"];
n90 [label="Entry lambda expression", span="176-176", cluster="lambda expression"];
n92 [label="Exit lambda expression", span="176-176", cluster="lambda expression"];
n93 [label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11", cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)"];
n96 [label="Exit lambda expression", span="177-177", cluster="lambda expression"];
n99 [label="Exit lambda expression", span="178-178", cluster="lambda expression"];
n100 [label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16", cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)"];
n101 [label="Entry CommandLine.Parser.MakeParserResult<T>(System.Func<CommandLine.ParserResult<T>>, CommandLine.ParserSettings)", span="182-182", cluster="CommandLine.Parser.MakeParserResult<T>(System.Func<CommandLine.ParserResult<T>>, CommandLine.ParserSettings)"];
n102 [label="return DisplayHelp(\r\n                HandleUnknownArguments(\r\n                    parseFunc(),\r\n                    settings.IgnoreUnknownArguments),\r\n                settings.HelpWriter);", span="184-188", cluster="CommandLine.Parser.MakeParserResult<T>(System.Func<CommandLine.ParserResult<T>>, CommandLine.ParserSettings)"];
n103 [label="Exit CommandLine.Parser.MakeParserResult<T>(System.Func<CommandLine.ParserResult<T>>, CommandLine.ParserSettings)", span="182-182", cluster="CommandLine.Parser.MakeParserResult<T>(System.Func<CommandLine.ParserResult<T>>, CommandLine.ParserSettings)"];
n104 [label="Entry System.Func<TResult>.Invoke()", span="0-0", cluster="System.Func<TResult>.Invoke()"];
n105 [label="Entry CommandLine.Parser.HandleUnknownArguments<T>(CommandLine.ParserResult<T>, bool)", span="191-191", cluster="CommandLine.Parser.HandleUnknownArguments<T>(CommandLine.ParserResult<T>, bool)"];
n106 [label="Entry CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", span="200-200", cluster="CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)"];
n107 [label="return ignoreUnknownArguments\r\n                       ? parserResult.Tag == ParserResultType.NotParsed\r\n                            ? ((NotParsed<T>)parserResult).MapErrors(errs => errs.Where(e => e.Tag != ErrorType.UnknownOptionError))\r\n                            : parserResult\r\n                       : parserResult;", span="193-197", cluster="CommandLine.Parser.HandleUnknownArguments<T>(CommandLine.ParserResult<T>, bool)"];
n108 [label="Exit CommandLine.Parser.HandleUnknownArguments<T>(CommandLine.ParserResult<T>, bool)", span="191-191", cluster="CommandLine.Parser.HandleUnknownArguments<T>(CommandLine.ParserResult<T>, bool)"];
n109 [label="Entry Unk.MapErrors", span="", cluster="Unk.MapErrors"];
n110 [label="Entry lambda expression", span="195-195", cluster="lambda expression"];
n111 [label="errs.Where(e => e.Tag != ErrorType.UnknownOptionError)", span="195-195", cluster="lambda expression"];
n112 [label="Exit lambda expression", span="195-195", cluster="lambda expression"];
n113 [label="Entry Unk.Where", span="", cluster="Unk.Where"];
n114 [label="Entry lambda expression", span="195-195", cluster="lambda expression"];
n115 [label="e.Tag != ErrorType.UnknownOptionError", span="195-195", cluster="lambda expression"];
n116 [label="Exit lambda expression", span="195-195", cluster="lambda expression"];
n117 [label="parserResult.Tag == ParserResultType.NotParsed", span="202-202", cluster="CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)"];
n118 [label="((NotParsed<T>)parserResult).Errors.Any()", span="204-204", cluster="CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)"];
n119 [label="helpWriter.ToMaybe().Do(writer => writer.Write(HelpText.AutoBuild(parserResult)))", span="206-206", cluster="CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)"];
n126 [label="writer.Write(HelpText.AutoBuild(parserResult))", span="206-206", cluster="lambda expression"];
n120 [label="return parserResult;", span="210-210", cluster="CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)"];
n122 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()"];
n123 [label="Entry T.ToMaybe<T>()", span="105-105", cluster="T.ToMaybe<T>()"];
n124 [label="Entry CSharpx.Maybe<T>.Do<T>(System.Action<T>)", span="134-134", cluster="CSharpx.Maybe<T>.Do<T>(System.Action<T>)"];
n125 [label="Entry lambda expression", span="206-206", cluster="lambda expression"];
n121 [label="Exit CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", span="200-200", cluster="CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)"];
n127 [label="Exit lambda expression", span="206-206", cluster="lambda expression"];
n128 [label="Entry CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", span="252-252", cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)"];
n129 [label="Entry System.IO.TextWriter.Write(string)", span="0-0", cluster="System.IO.TextWriter.Write(string)"];
n130 [label=disposed, span="215-215", cluster="CommandLine.Parser.Dispose(bool)"];
n132 [label=disposing, span="220-220", cluster="CommandLine.Parser.Dispose(bool)"];
n131 [label="return;", span="217-217", cluster="CommandLine.Parser.Dispose(bool)"];
n133 [label="settings != null", span="222-222", cluster="CommandLine.Parser.Dispose(bool)"];
n136 [label="Exit CommandLine.Parser.Dispose(bool)", span="213-213", cluster="CommandLine.Parser.Dispose(bool)"];
n134 [label="settings.Dispose()", span="224-224", cluster="CommandLine.Parser.Dispose(bool)"];
n135 [label="disposed = true", span="227-227", cluster="CommandLine.Parser.Dispose(bool)"];
n137 [label="Entry CommandLine.ParserSettings.Dispose()", span="119-119", cluster="CommandLine.ParserSettings.Dispose()"];
d3 [label="helpText = string.Empty", span="24-24", cluster="CommandLine.BaseAttribute.BaseAttribute()", color=green, community=0];
d6 [label="CommandLine.BaseAttribute", span=""];
d2 [label="max = -1", span="23-23", cluster="CommandLine.BaseAttribute.BaseAttribute()"];
d4 [label="metaValue = string.Empty", span="25-25", cluster="CommandLine.BaseAttribute.BaseAttribute()", color=green, community=0];
d5 [label="Exit CommandLine.BaseAttribute.BaseAttribute()", span="20-20", cluster="CommandLine.BaseAttribute.BaseAttribute()"];
d1 [label="min = -1", span="22-22", cluster="CommandLine.BaseAttribute.BaseAttribute()"];
d0 [label="Entry CommandLine.BaseAttribute.BaseAttribute()", span="20-20", cluster="CommandLine.BaseAttribute.BaseAttribute()"];
m1_1 [label="var expected = Maybe.Just(''.'')", span="17-17", cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs"];
m1_2 [label="var specs = new[] { new OptionSpecification(string.Empty, ''string-seq'',\r\n                false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), '.', null, string.Empty, string.Empty, new List<string>(), typeof(IEnumerable<string>), TargetType.Sequence)}", span="18-19", cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs", color=green, community=0];
m1_3 [label="var result = NameLookup.HavingSeparator(''string-seq'', specs, StringComparer.InvariantCulture)", span="22-22", cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs"];
m1_4 [label="expected.ShouldBeEquivalentTo(result)", span="25-25", cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs"];
m1_8 [label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63", cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="NameLookupTests.cs"];
m1_6 [label="CommandLine.BaseAttribute", span="", cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="NameLookupTests.cs"];
m1_7 [label="Entry OptionSpecification.cstr", span="", cluster="OptionSpecification.cstr", file="NameLookupTests.cs"];
m1_0 [label="Entry CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", span="14-14", cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs"];
m1_5 [label="Exit CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", span="14-14", cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs"];
m1_10 [label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16", cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="NameLookupTests.cs"];
m1_11 [label="Entry Unk.ShouldBeEquivalentTo", span="", cluster="Unk.ShouldBeEquivalentTo", file="NameLookupTests.cs"];
m1_9 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="NameLookupTests.cs"];
m2_8 [label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63", cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="OptionAttribute.cs"];
m2_6 [label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68", cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="OptionAttribute.cs"];
m2_7 [label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType, string, string, System.Collections.Generic.IEnumerable<string>)", span="18-18", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType, string, string, System.Collections.Generic.IEnumerable<string>)", file="OptionAttribute.cs"];
m2_10 [label="Entry CommandLine.Core.NameLookup.WithSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16", cluster="CommandLine.Core.NameLookup.WithSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="OptionAttribute.cs"];
m2_0 [label="Entry CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", span="14-14", cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="OptionAttribute.cs"];
m2_1 [label="var expected = Maybe.Just(''.'')", span="17-17", cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", color=red, community=0, file="OptionAttribute.cs"];
m2_2 [label="var specs = new[] { new OptionSpecification(string.Empty, ''string-seq'',\r\n                false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), '.', null, typeof(IEnumerable<string>), TargetType.Sequence, string.Empty, string.Empty, new List<string>())}", span="18-19", cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", color=red, community=0, file="OptionAttribute.cs"];
m2_4 [label="expected.ShouldBeEquivalentTo(result)", span="25-25", cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="OptionAttribute.cs"];
m2_3 [label="var result = NameLookup.WithSeparator(''string-seq'', specs, StringComparer.InvariantCulture)", span="22-22", cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="OptionAttribute.cs"];
m2_5 [label="Exit CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", span="14-14", cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="OptionAttribute.cs"];
m2_11 [label="Entry Unk.ShouldBeEquivalentTo", span="", cluster="Unk.ShouldBeEquivalentTo", file="OptionAttribute.cs"];
m2_9 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="OptionAttribute.cs"];
m3_9 [label="configuration == null", span="38-38", cluster="CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)", file="OptionMapperTests.cs"];
m3_12 [label="configuration(settings)", span="41-41", cluster="CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)", file="OptionMapperTests.cs"];
m3_10 [label="throw new ArgumentNullException(''configuration'');", span="38-38", cluster="CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)", file="OptionMapperTests.cs"];
m3_11 [label="settings = new ParserSettings()", span="40-40", cluster="CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)", file="OptionMapperTests.cs"];
m3_13 [label="settings.Consumed = true", span="42-42", cluster="CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)", file="OptionMapperTests.cs"];
m3_84 [label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", span="34-34", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", file="OptionMapperTests.cs"];
m3_20 [label="Entry CommandLine.Parser.~Parser()", span="54-54", cluster="CommandLine.Parser.~Parser()", file="OptionMapperTests.cs"];
m3_21 [label="Dispose(false)", span="56-56", cluster="CommandLine.Parser.~Parser()", file="OptionMapperTests.cs"];
m3_22 [label="Exit CommandLine.Parser.~Parser()", span="54-54", cluster="CommandLine.Parser.~Parser()", file="OptionMapperTests.cs"];
m3_86 [label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", span="47-47", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="OptionMapperTests.cs"];
m3_16 [label="Entry System.Action<T>.Invoke(T)", span="0-0", cluster="System.Action<T>.Invoke(T)", file="OptionMapperTests.cs"];
m3_58 [label="Entry CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", span="141-141", cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="OptionMapperTests.cs"];
m3_59 [label="args == null", span="143-143", cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="OptionMapperTests.cs"];
m3_61 [label="types == null", span="144-144", cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="OptionMapperTests.cs"];
m3_63 [label="types.Length == 0", span="145-145", cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="OptionMapperTests.cs"];
m3_65 [label="return MakeParserResult(\r\n                () => InstanceChooser.Choose(\r\n                    (arguments, optionSpecs) => Tokenize(arguments, optionSpecs, settings),\r\n                    types,\r\n                    args,\r\n                    settings.NameComparer,\r\n                    settings.ParsingCulture),\r\n                settings);", span="147-154", cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="OptionMapperTests.cs"];
m3_60 [label="throw new ArgumentNullException(''args'');", span="143-143", cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="OptionMapperTests.cs"];
m3_62 [label="throw new ArgumentNullException(''types'');", span="144-144", cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="OptionMapperTests.cs"];
m3_64 [label="throw new ArgumentOutOfRangeException(''types'');", span="145-145", cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="OptionMapperTests.cs"];
m3_66 [label="Exit CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", span="141-141", cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="OptionMapperTests.cs"];
m3_33 [label="Entry Unk.MakeParserResult", span="", cluster="Unk.MakeParserResult", file="OptionMapperTests.cs"];
m3_3 [label="Entry CommandLine.Parser.Parser(CommandLine.ParserSettings)", span="45-45", cluster="CommandLine.Parser.Parser(CommandLine.ParserSettings)", file="OptionMapperTests.cs"];
m3_17 [label="this.settings = settings", span="47-47", cluster="CommandLine.Parser.Parser(CommandLine.ParserSettings)", file="OptionMapperTests.cs"];
m3_18 [label="this.settings.Consumed = true", span="48-48", cluster="CommandLine.Parser.Parser(CommandLine.ParserSettings)", file="OptionMapperTests.cs"];
m3_19 [label="Exit CommandLine.Parser.Parser(CommandLine.ParserSettings)", span="45-45", cluster="CommandLine.Parser.Parser(CommandLine.ParserSettings)", file="OptionMapperTests.cs"];
m3_67 [label="Entry System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", span="0-0", cluster="System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", file="OptionMapperTests.cs"];
m3_42 [label="Entry CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", span="112-112", cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", file="OptionMapperTests.cs"];
m3_43 [label="factory == null", span="115-115", cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", file="OptionMapperTests.cs"];
m3_47 [label="args == null", span="117-117", cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", file="OptionMapperTests.cs"];
m3_49 [label="return MakeParserResult(\r\n                () => InstanceBuilder.Build(\r\n                    Maybe.Just(factory),\r\n                    (arguments, optionSpecs) => Tokenize(arguments, optionSpecs, settings),\r\n                    args,\r\n                    settings.NameComparer,\r\n                    settings.ParsingCulture),\r\n                settings);", span="119-126", cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", file="OptionMapperTests.cs"];
m3_44 [label="throw new ArgumentNullException(''factory'');", span="115-115", cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", file="OptionMapperTests.cs"];
m3_45 [label="!typeof(T).IsMutable()", span="116-116", cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", file="OptionMapperTests.cs"];
m3_46 [label="throw new ArgumentException(''factory'');", span="116-116", cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", file="OptionMapperTests.cs"];
m3_48 [label="throw new ArgumentNullException(''args'');", span="117-117", cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", file="OptionMapperTests.cs"];
m3_50 [label="Exit CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", span="112-112", cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", file="OptionMapperTests.cs"];
m3_100 [label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16", cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="OptionMapperTests.cs"];
m3_51 [label="Entry System.ArgumentException.ArgumentException(string)", span="0-0", cluster="System.ArgumentException.ArgumentException(string)", file="OptionMapperTests.cs"];
m3_113 [label="Entry Unk.Where", span="", cluster="Unk.Where", file="OptionMapperTests.cs"];
m3_4 [label="Entry CommandLine.ParserSettings.ParserSettings()", span="25-25", cluster="CommandLine.ParserSettings.ParserSettings()", file="OptionMapperTests.cs"];
m3_93 [label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11", cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="OptionMapperTests.cs"];
m3_5 [label="Entry CommandLine.Parser.Parser()", span="25-25", cluster="CommandLine.Parser.Parser()", file="OptionMapperTests.cs"];
m3_6 [label="settings = new ParserSettings { Consumed = true }", span="27-27", cluster="CommandLine.Parser.Parser()", file="OptionMapperTests.cs"];
m3_7 [label="Exit CommandLine.Parser.Parser()", span="25-25", cluster="CommandLine.Parser.Parser()", file="OptionMapperTests.cs"];
m3_31 [label="Entry CSharpx.Maybe.Just<T>(T)", span="80-80", cluster="CSharpx.Maybe.Just<T>(T)", file="OptionMapperTests.cs"];
m3_104 [label="Entry System.Func<TResult>.Invoke()", span="0-0", cluster="System.Func<TResult>.Invoke()", file="OptionMapperTests.cs"];
m3_106 [label="Entry CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", span="200-200", cluster="CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", file="OptionMapperTests.cs"];
m3_117 [label="parserResult.Tag == ParserResultType.NotParsed", span="202-202", cluster="CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", file="OptionMapperTests.cs"];
m3_118 [label="((NotParsed<T>)parserResult).Errors.Any()", span="204-204", cluster="CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", file="OptionMapperTests.cs"];
m3_119 [label="helpWriter.ToMaybe().Do(writer => writer.Write(HelpText.AutoBuild(parserResult)))", span="206-206", cluster="CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", file="OptionMapperTests.cs"];
m3_120 [label="return parserResult;", span="210-210", cluster="CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", file="OptionMapperTests.cs"];
m3_121 [label="Exit CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", span="200-200", cluster="CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", file="OptionMapperTests.cs"];
m3_125 [label="Entry lambda expression", span="206-206", cluster="lambda expression", file="OptionMapperTests.cs"];
m3_0 [label="Entry lambda expression", span="20-20", cluster="lambda expression", file="OptionMapperTests.cs"];
m3_1 [label="new Parser(new ParserSettings{ HelpWriter = Console.Error })", span="20-20", cluster="lambda expression", file="OptionMapperTests.cs"];
m3_2 [label="Exit lambda expression", span="20-20", cluster="lambda expression", file="OptionMapperTests.cs"];
m3_35 [label="InstanceBuilder.Build(\r\n                    factory,\r\n                    (arguments, optionSpecs) => Tokenize(arguments, optionSpecs, settings),\r\n                    args,\r\n                    settings.NameComparer,\r\n                    settings.ParsingCulture)", span="93-98", cluster="lambda expression", file="OptionMapperTests.cs"];
m3_34 [label="Entry lambda expression", span="93-98", cluster="lambda expression", file="OptionMapperTests.cs"];
m3_36 [label="Exit lambda expression", span="93-98", cluster="lambda expression", file="OptionMapperTests.cs"];
m3_38 [label="Entry lambda expression", span="95-95", cluster="lambda expression", file="OptionMapperTests.cs"];
m3_39 [label="Tokenize(arguments, optionSpecs, settings)", span="95-95", cluster="lambda expression", file="OptionMapperTests.cs"];
m3_40 [label="Exit lambda expression", span="95-95", cluster="lambda expression", file="OptionMapperTests.cs"];
m3_53 [label="InstanceBuilder.Build(\r\n                    Maybe.Just(factory),\r\n                    (arguments, optionSpecs) => Tokenize(arguments, optionSpecs, settings),\r\n                    args,\r\n                    settings.NameComparer,\r\n                    settings.ParsingCulture)", span="120-125", cluster="lambda expression", file="OptionMapperTests.cs"];
m3_52 [label="Entry lambda expression", span="120-125", cluster="lambda expression", file="OptionMapperTests.cs"];
m3_54 [label="Exit lambda expression", span="120-125", cluster="lambda expression", file="OptionMapperTests.cs"];
m3_55 [label="Entry lambda expression", span="122-122", cluster="lambda expression", file="OptionMapperTests.cs"];
m3_56 [label="Tokenize(arguments, optionSpecs, settings)", span="122-122", cluster="lambda expression", file="OptionMapperTests.cs"];
m3_57 [label="Exit lambda expression", span="122-122", cluster="lambda expression", file="OptionMapperTests.cs"];
m3_69 [label="InstanceChooser.Choose(\r\n                    (arguments, optionSpecs) => Tokenize(arguments, optionSpecs, settings),\r\n                    types,\r\n                    args,\r\n                    settings.NameComparer,\r\n                    settings.ParsingCulture)", span="148-153", cluster="lambda expression", file="OptionMapperTests.cs"];
m3_68 [label="Entry lambda expression", span="148-153", cluster="lambda expression", file="OptionMapperTests.cs"];
m3_70 [label="Exit lambda expression", span="148-153", cluster="lambda expression", file="OptionMapperTests.cs"];
m3_72 [label="Entry lambda expression", span="149-149", cluster="lambda expression", file="OptionMapperTests.cs"];
m3_73 [label="Tokenize(arguments, optionSpecs, settings)", span="149-149", cluster="lambda expression", file="OptionMapperTests.cs"];
m3_74 [label="Exit lambda expression", span="149-149", cluster="lambda expression", file="OptionMapperTests.cs"];
m3_88 [label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, settings.NameComparer))", span="176-176", cluster="lambda expression", file="OptionMapperTests.cs"];
m3_91 [label="NameLookup.Contains(name, optionSpecs, settings.NameComparer)", span="176-176", cluster="lambda expression", file="OptionMapperTests.cs"];
m3_95 [label="NameLookup.Contains(name, optionSpecs, settings.NameComparer)", span="177-177", cluster="lambda expression", file="OptionMapperTests.cs"];
m3_98 [label="NameLookup.HavingSeparator(name, optionSpecs, settings.NameComparer)", span="178-178", cluster="lambda expression", file="OptionMapperTests.cs"];
m3_87 [label="Entry lambda expression", span="175-176", cluster="lambda expression", file="OptionMapperTests.cs"];
m3_94 [label="Entry lambda expression", span="177-177", cluster="lambda expression", file="OptionMapperTests.cs"];
m3_97 [label="Entry lambda expression", span="178-178", cluster="lambda expression", file="OptionMapperTests.cs"];
m3_89 [label="Exit lambda expression", span="175-176", cluster="lambda expression", file="OptionMapperTests.cs"];
m3_90 [label="Entry lambda expression", span="176-176", cluster="lambda expression", file="OptionMapperTests.cs"];
m3_92 [label="Exit lambda expression", span="176-176", cluster="lambda expression", file="OptionMapperTests.cs"];
m3_96 [label="Exit lambda expression", span="177-177", cluster="lambda expression", file="OptionMapperTests.cs"];
m3_99 [label="Exit lambda expression", span="178-178", cluster="lambda expression", file="OptionMapperTests.cs"];
m3_110 [label="Entry lambda expression", span="195-195", cluster="lambda expression", file="OptionMapperTests.cs"];
m3_111 [label="errs.Where(e => e.Tag != ErrorType.UnknownOptionError)", span="195-195", cluster="lambda expression", file="OptionMapperTests.cs"];
m3_112 [label="Exit lambda expression", span="195-195", cluster="lambda expression", file="OptionMapperTests.cs"];
m3_114 [label="Entry lambda expression", span="195-195", cluster="lambda expression", file="OptionMapperTests.cs"];
m3_115 [label="e.Tag != ErrorType.UnknownOptionError", span="195-195", cluster="lambda expression", file="OptionMapperTests.cs"];
m3_116 [label="Exit lambda expression", span="195-195", cluster="lambda expression", file="OptionMapperTests.cs"];
m3_126 [label="writer.Write(HelpText.AutoBuild(parserResult))", span="206-206", cluster="lambda expression", file="OptionMapperTests.cs"];
m3_127 [label="Exit lambda expression", span="206-206", cluster="lambda expression", file="OptionMapperTests.cs"];
m3_122 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="OptionMapperTests.cs"];
m3_123 [label="Entry T.ToMaybe<T>()", span="105-105", cluster="T.ToMaybe<T>()", file="OptionMapperTests.cs"];
m3_105 [label="Entry CommandLine.Parser.HandleUnknownArguments<T>(CommandLine.ParserResult<T>, bool)", span="191-191", cluster="CommandLine.Parser.HandleUnknownArguments<T>(CommandLine.ParserResult<T>, bool)", file="OptionMapperTests.cs"];
m3_107 [label="return ignoreUnknownArguments\r\n                       ? parserResult.Tag == ParserResultType.NotParsed\r\n                            ? ((NotParsed<T>)parserResult).MapErrors(errs => errs.Where(e => e.Tag != ErrorType.UnknownOptionError))\r\n                            : parserResult\r\n                       : parserResult;", span="193-197", cluster="CommandLine.Parser.HandleUnknownArguments<T>(CommandLine.ParserResult<T>, bool)", file="OptionMapperTests.cs"];
m3_108 [label="Exit CommandLine.Parser.HandleUnknownArguments<T>(CommandLine.ParserResult<T>, bool)", span="191-191", cluster="CommandLine.Parser.HandleUnknownArguments<T>(CommandLine.ParserResult<T>, bool)", file="OptionMapperTests.cs"];
m3_109 [label="Entry Unk.MapErrors", span="", cluster="Unk.MapErrors", file="OptionMapperTests.cs"];
m3_124 [label="Entry CSharpx.Maybe<T>.Do<T>(System.Action<T>)", span="134-134", cluster="CSharpx.Maybe<T>.Do<T>(System.Action<T>)", file="OptionMapperTests.cs"];
m3_128 [label="Entry CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", span="252-252", cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", file="OptionMapperTests.cs"];
m3_85 [label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="14-14", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="OptionMapperTests.cs"];
m3_79 [label="Entry System.GC.SuppressFinalize(object)", span="0-0", cluster="System.GC.SuppressFinalize(object)", file="OptionMapperTests.cs"];
m3_32 [label="Entry CSharpx.Maybe.Nothing<T>()", span="75-75", cluster="CSharpx.Maybe.Nothing<T>()", file="OptionMapperTests.cs"];
m3_137 [label="Entry CommandLine.ParserSettings.Dispose()", span="119-119", cluster="CommandLine.ParserSettings.Dispose()", file="OptionMapperTests.cs"];
m3_30 [label="Entry System.Type.IsMutable()", span="115-115", cluster="System.Type.IsMutable()", file="OptionMapperTests.cs"];
m3_101 [label="Entry CommandLine.Parser.MakeParserResult<T>(System.Func<CommandLine.ParserResult<T>>, CommandLine.ParserSettings)", span="182-182", cluster="CommandLine.Parser.MakeParserResult<T>(System.Func<CommandLine.ParserResult<T>>, CommandLine.ParserSettings)", file="OptionMapperTests.cs"];
m3_102 [label="return DisplayHelp(\r\n                HandleUnknownArguments(\r\n                    parseFunc(),\r\n                    settings.IgnoreUnknownArguments),\r\n                settings.HelpWriter);", span="184-188", cluster="CommandLine.Parser.MakeParserResult<T>(System.Func<CommandLine.ParserResult<T>>, CommandLine.ParserSettings)", file="OptionMapperTests.cs"];
m3_103 [label="Exit CommandLine.Parser.MakeParserResult<T>(System.Func<CommandLine.ParserResult<T>>, CommandLine.ParserSettings)", span="182-182", cluster="CommandLine.Parser.MakeParserResult<T>(System.Func<CommandLine.ParserResult<T>>, CommandLine.ParserSettings)", file="OptionMapperTests.cs"];
m3_75 [label="Entry CommandLine.Parser.Dispose()", span="160-160", cluster="CommandLine.Parser.Dispose()", file="OptionMapperTests.cs"];
m3_76 [label="Dispose(true)", span="162-162", cluster="CommandLine.Parser.Dispose()", file="OptionMapperTests.cs"];
m3_77 [label="GC.SuppressFinalize(this)", span="164-164", cluster="CommandLine.Parser.Dispose()", file="OptionMapperTests.cs"];
m3_78 [label="Exit CommandLine.Parser.Dispose()", span="160-160", cluster="CommandLine.Parser.Dispose()", file="OptionMapperTests.cs"];
m3_71 [label="Entry Unk.Choose", span="", cluster="Unk.Choose", file="OptionMapperTests.cs"];
m3_24 [label="Entry CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", span="84-84", cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", file="OptionMapperTests.cs"];
m3_25 [label="args == null", span="86-86", cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", file="OptionMapperTests.cs"];
m3_28 [label="return MakeParserResult(\r\n                () => InstanceBuilder.Build(\r\n                    factory,\r\n                    (arguments, optionSpecs) => Tokenize(arguments, optionSpecs, settings),\r\n                    args,\r\n                    settings.NameComparer,\r\n                    settings.ParsingCulture),\r\n                settings);", span="92-99", cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", file="OptionMapperTests.cs"];
m3_26 [label="throw new ArgumentNullException(''args'');", span="86-86", cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", file="OptionMapperTests.cs"];
m3_27 [label="var factory = typeof(T).IsMutable()\r\n                ? Maybe.Just<Func<T>>(Activator.CreateInstance<T>)\r\n                : Maybe.Nothing<Func<T>>()", span="88-90", cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", file="OptionMapperTests.cs"];
m3_29 [label="Exit CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", span="84-84", cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", file="OptionMapperTests.cs"];
m3_41 [label="Entry CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)", span="167-167", cluster="CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)", file="OptionMapperTests.cs"];
m3_80 [label="var tokens = settings.EnableDashDash\r\n                ? Tokenizer.PreprocessDashDash(\r\n                        arguments,\r\n                        args =>\r\n                            Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, settings.NameComparer)))\r\n                : Tokenizer.Tokenize(arguments, name => NameLookup.Contains(name, optionSpecs, settings.NameComparer))", span="172-177", cluster="CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)", file="OptionMapperTests.cs"];
m3_81 [label="var explodedTokens = Tokenizer.ExplodeOptionList(tokens, name => NameLookup.HavingSeparator(name, optionSpecs, settings.NameComparer))", span="178-178", cluster="CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)", file="OptionMapperTests.cs"];
m3_82 [label="return explodedTokens;", span="179-179", cluster="CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)", file="OptionMapperTests.cs"];
m3_83 [label="Exit CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)", span="167-167", cluster="CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)", file="OptionMapperTests.cs"];
m3_23 [label="Entry CommandLine.Parser.Dispose(bool)", span="213-213", cluster="CommandLine.Parser.Dispose(bool)", file="OptionMapperTests.cs"];
m3_130 [label=disposed, span="215-215", cluster="CommandLine.Parser.Dispose(bool)", file="OptionMapperTests.cs"];
m3_132 [label=disposing, span="220-220", cluster="CommandLine.Parser.Dispose(bool)", file="OptionMapperTests.cs"];
m3_131 [label="return;", span="217-217", cluster="CommandLine.Parser.Dispose(bool)", file="OptionMapperTests.cs"];
m3_133 [label="settings != null", span="222-222", cluster="CommandLine.Parser.Dispose(bool)", file="OptionMapperTests.cs"];
m3_134 [label="settings.Dispose()", span="224-224", cluster="CommandLine.Parser.Dispose(bool)", file="OptionMapperTests.cs"];
m3_135 [label="disposed = true", span="227-227", cluster="CommandLine.Parser.Dispose(bool)", file="OptionMapperTests.cs"];
m3_136 [label="Exit CommandLine.Parser.Dispose(bool)", span="213-213", cluster="CommandLine.Parser.Dispose(bool)", file="OptionMapperTests.cs"];
m3_15 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="OptionMapperTests.cs"];
m3_37 [label="Entry Unk.Build", span="", cluster="Unk.Build", file="OptionMapperTests.cs"];
m3_129 [label="Entry System.IO.TextWriter.Write(string)", span="0-0", cluster="System.IO.TextWriter.Write(string)", file="OptionMapperTests.cs"];
m3_138 [label="CommandLine.Parser", span="", file="OptionMapperTests.cs"];
m3_139 [label="System.Collections.Generic.IEnumerable<string>", span="", file="OptionMapperTests.cs"];
m3_140 [label=factory, span="", file="OptionMapperTests.cs"];
m3_141 [label="System.Func<T>", span="", file="OptionMapperTests.cs"];
m3_142 [label="System.Collections.Generic.IEnumerable<string>", span="", file="OptionMapperTests.cs"];
m3_143 [label="System.Collections.Generic.IEnumerable<string>", span="", file="OptionMapperTests.cs"];
m3_144 [label="params System.Type[]", span="", file="OptionMapperTests.cs"];
m3_145 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span="", file="OptionMapperTests.cs"];
m3_146 [label="CommandLine.ParserSettings", span="", file="OptionMapperTests.cs"];
m3_147 [label="CommandLine.ParserResult<T>", span="", file="OptionMapperTests.cs"];
m5_2 [label="Entry CommandLine.BadOptionInfo.BadOptionInfo(char?, string)", span="51-51", cluster="CommandLine.BadOptionInfo.BadOptionInfo(char?, string)", file="Specification.cs"];
m5_3 [label="ShortName = shortName", span="53-53", cluster="CommandLine.BadOptionInfo.BadOptionInfo(char?, string)", file="Specification.cs"];
m5_4 [label="LongName = longName", span="54-54", cluster="CommandLine.BadOptionInfo.BadOptionInfo(char?, string)", file="Specification.cs"];
m5_5 [label="Exit CommandLine.BadOptionInfo.BadOptionInfo(char?, string)", span="51-51", cluster="CommandLine.BadOptionInfo.BadOptionInfo(char?, string)", file="Specification.cs"];
m5_0 [label="Entry CommandLine.BadOptionInfo.BadOptionInfo()", span="47-47", cluster="CommandLine.BadOptionInfo.BadOptionInfo()", file="Specification.cs"];
m5_1 [label="Exit CommandLine.BadOptionInfo.BadOptionInfo()", span="47-47", cluster="CommandLine.BadOptionInfo.BadOptionInfo()", file="Specification.cs"];
m5_6 [label="CommandLine.BadOptionInfo", span="", file="Specification.cs"];
m6_25 [label="TypeConverter.ChangeType(vals, type, isScalar, CultureInfo.InvariantCulture)", span="35-35", cluster="lambda expression", file="SpecificationExtensions.cs", color=green, community=0];
m6_26 [label="Exit lambda expression", span="35-35", cluster="lambda expression", file="SpecificationExtensions.cs"];
m6_28 [label="Entry lambda expression", span="40-42", cluster="lambda expression", file="SpecificationExtensions.cs"];
m6_29 [label="a.Specification.IsOption()\r\n                && ((OptionSpecification)a.Specification).ShortName.Equals(''x'')\r\n                && (bool)((Just<object>)a.Value).Value == true", span="40-42", cluster="lambda expression", file="SpecificationExtensions.cs"];
m6_27 [label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="12-12", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="SpecificationExtensions.cs"];
m6_30 [label="Exit lambda expression", span="40-42", cluster="lambda expression", file="SpecificationExtensions.cs"];
m6_31 [label="Entry string.Equals(string)", span="0-0", cluster="string.Equals(string)", file="SpecificationExtensions.cs"];
m6_34 [label="Entry CommandLine.Core.SpecificationExtensions.HavingMin(CommandLine.Core.Specification, System.Func<int, bool>)", span="67-67", cluster="CommandLine.Core.SpecificationExtensions.HavingMin(CommandLine.Core.Specification, System.Func<int, bool>)", file="SpecificationExtensions.cs"];
m6_35 [label="int min", span="69-69", cluster="CommandLine.Core.SpecificationExtensions.HavingMin(CommandLine.Core.Specification, System.Func<int, bool>)", file="SpecificationExtensions.cs"];
m6_36 [label="specification.Min.MatchJust(out min)", span="70-70", cluster="CommandLine.Core.SpecificationExtensions.HavingMin(CommandLine.Core.Specification, System.Func<int, bool>)", file="SpecificationExtensions.cs"];
m6_37 [label="return predicate(min);", span="72-72", cluster="CommandLine.Core.SpecificationExtensions.HavingMin(CommandLine.Core.Specification, System.Func<int, bool>)", file="SpecificationExtensions.cs"];
m6_38 [label="return false;", span="74-74", cluster="CommandLine.Core.SpecificationExtensions.HavingMin(CommandLine.Core.Specification, System.Func<int, bool>)", file="SpecificationExtensions.cs"];
m6_39 [label="Exit CommandLine.Core.SpecificationExtensions.HavingMin(CommandLine.Core.Specification, System.Func<int, bool>)", span="67-67", cluster="CommandLine.Core.SpecificationExtensions.HavingMin(CommandLine.Core.Specification, System.Func<int, bool>)", file="SpecificationExtensions.cs"];
m6_20 [label="Entry lambda expression", span="33-33", cluster="lambda expression", file="SpecificationExtensions.cs"];
m6_19 [label="Entry string.Equals(string, System.StringComparison)", span="0-0", cluster="string.Equals(string, System.StringComparison)", file="SpecificationExtensions.cs"];
m6_24 [label="Entry lambda expression", span="35-35", cluster="lambda expression", file="SpecificationExtensions.cs"];
m6_12 [label="Exit CommandLine.Core.SpecificationExtensions.UniqueName(CommandLine.Core.OptionSpecification)", span="38-38", cluster="CommandLine.Core.SpecificationExtensions.UniqueName(CommandLine.Core.OptionSpecification)", file="SpecificationExtensions.cs"];
m6_13 [label="Entry CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", span="43-43", cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", file="SpecificationExtensions.cs"];
m6_14 [label="Entry Unk.MapValues", span="", cluster="Unk.MapValues", file="SpecificationExtensions.cs"];
m6_15 [label="Entry Unk.NotNull", span="", cluster="Unk.NotNull", file="SpecificationExtensions.cs"];
m6_17 [label="p.Name.Equals(''BoolValue'', StringComparison.Ordinal)", span="27-27", cluster="lambda expression", file="SpecificationExtensions.cs"];
m6_16 [label="Entry lambda expression", span="27-27", cluster="lambda expression", file="SpecificationExtensions.cs"];
m6_18 [label="Exit lambda expression", span="27-27", cluster="lambda expression", file="SpecificationExtensions.cs"];
m6_11 [label="return specification.ShortName.Length > 0 ? specification.ShortName : specification.LongName;", span="40-40", cluster="CommandLine.Core.SpecificationExtensions.UniqueName(CommandLine.Core.OptionSpecification)", file="SpecificationExtensions.cs"];
m6_3 [label="var result = OptionMapper.MapValues(\r\n                specProps.Where(pt => pt.Specification.IsOption()),\r\n                tokenPartitions,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, CultureInfo.InvariantCulture),\r\n                StringComparer.InvariantCulture)", span="32-36", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="SpecificationExtensions.cs", color=green, community=0];
m6_4 [label="Assert.NotNull(result.Value.Single(\r\n                a => a.Specification.IsOption()\r\n                && ((OptionSpecification)a.Specification).ShortName.Equals(''x'')\r\n                && (bool)((Just<object>)a.Value).Value == true))", span="39-42", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="SpecificationExtensions.cs"];
m6_5 [label="Exit CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", span="16-16", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="SpecificationExtensions.cs"];
m6_22 [label="Exit lambda expression", span="33-33", cluster="lambda expression", file="SpecificationExtensions.cs"];
m6_21 [label="pt.Specification.IsOption()", span="33-33", cluster="lambda expression", file="SpecificationExtensions.cs", color=green, community=0];
m6_23 [label="Entry CommandLine.Core.Specification.IsOption()", span="11-11", cluster="CommandLine.Core.Specification.IsOption()", file="SpecificationExtensions.cs"];
m6_10 [label="Entry CommandLine.Core.SpecificationExtensions.UniqueName(CommandLine.Core.OptionSpecification)", span="38-38", cluster="CommandLine.Core.SpecificationExtensions.UniqueName(CommandLine.Core.OptionSpecification)", file="SpecificationExtensions.cs"];
m6_9 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="SpecificationExtensions.cs"];
m6_32 [label="Entry CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)", span="31-31", cluster="CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)", file="SpecificationExtensions.cs"];
m6_7 [label="return new OptionSpecification(\r\n                specification.ShortName,\r\n                newLongName,\r\n                specification.Required,\r\n                specification.SetName,\r\n                specification.Min,\r\n                specification.Max,\r\n                specification.Separator,\r\n                specification.DefaultValue,\r\n                specification.ConversionType,\r\n                specification.TargetType,\r\n                specification.HelpText,\r\n                specification.MetaValue,\r\n                specification.EnumValues);", span="22-35", cluster="CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)", file="SpecificationExtensions.cs", color=red, community=0];
m6_8 [label="Exit CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)", span="20-20", cluster="CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)", file="SpecificationExtensions.cs"];
m6_6 [label="Entry CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)", span="20-20", cluster="CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)", file="SpecificationExtensions.cs"];
m6_0 [label="Entry CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", span="16-16", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="SpecificationExtensions.cs"];
m6_1 [label="var tokenPartitions = new[]\r\n                {\r\n                    new KeyValuePair<string, IEnumerable<string>>(''x'', new [] { ''true'' })\r\n                }", span="19-22", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="SpecificationExtensions.cs"];
m6_2 [label="var specProps = new[]\r\n                {\r\n                    SpecificationProperty.Create(\r\n                        new OptionSpecification(''x'', string.Empty, false, string.Empty, -1, -1, '\0', Maybe.Nothing<object>(), typeof(bool), string.Empty, string.Empty, new List<string>()), \r\n                        typeof(FakeOptions).GetProperties().Single(p => p.Name.Equals(''BoolValue'', StringComparison.Ordinal)),\r\n                        Maybe.Nothing<object>())\r\n                }", span="23-29", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="SpecificationExtensions.cs"];
m6_40 [label="Entry CommandLine.Core.SpecificationExtensions.HavingMax(CommandLine.Core.Specification, System.Func<int, bool>)", span="77-77", cluster="CommandLine.Core.SpecificationExtensions.HavingMax(CommandLine.Core.Specification, System.Func<int, bool>)", file="SpecificationExtensions.cs"];
m6_41 [label="int max", span="79-79", cluster="CommandLine.Core.SpecificationExtensions.HavingMax(CommandLine.Core.Specification, System.Func<int, bool>)", file="SpecificationExtensions.cs"];
m6_42 [label="specification.Max.MatchJust(out max)", span="80-80", cluster="CommandLine.Core.SpecificationExtensions.HavingMax(CommandLine.Core.Specification, System.Func<int, bool>)", file="SpecificationExtensions.cs"];
m6_43 [label="return predicate(max);", span="82-82", cluster="CommandLine.Core.SpecificationExtensions.HavingMax(CommandLine.Core.Specification, System.Func<int, bool>)", file="SpecificationExtensions.cs"];
m6_44 [label="return false;", span="84-84", cluster="CommandLine.Core.SpecificationExtensions.HavingMax(CommandLine.Core.Specification, System.Func<int, bool>)", file="SpecificationExtensions.cs"];
m6_45 [label="Exit CommandLine.Core.SpecificationExtensions.HavingMax(CommandLine.Core.Specification, System.Func<int, bool>)", span="77-77", cluster="CommandLine.Core.SpecificationExtensions.HavingMax(CommandLine.Core.Specification, System.Func<int, bool>)", file="SpecificationExtensions.cs"];
m6_33 [label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0", cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", file="SpecificationExtensions.cs"];
m6_46 [label=guard, span="", file="SpecificationExtensions.cs"];
m7_5 [label="Entry string.IsNullOrWhiteSpace(string)", span="0-0", cluster="string.IsNullOrWhiteSpace(string)", file="TokenizerTests.cs"];
m7_0 [label="Entry CommandLine.VerbAttribute.VerbAttribute(string)", span="20-20", cluster="CommandLine.VerbAttribute.VerbAttribute(string)", file="TokenizerTests.cs"];
m7_1 [label="string.IsNullOrWhiteSpace(name)", span="22-22", cluster="CommandLine.VerbAttribute.VerbAttribute(string)", file="TokenizerTests.cs"];
m7_3 [label="this.name = name", span="24-24", cluster="CommandLine.VerbAttribute.VerbAttribute(string)", file="TokenizerTests.cs"];
m7_2 [label="throw new ArgumentException(''name'');", span="22-22", cluster="CommandLine.VerbAttribute.VerbAttribute(string)", file="TokenizerTests.cs"];
m7_4 [label="Exit CommandLine.VerbAttribute.VerbAttribute(string)", span="20-20", cluster="CommandLine.VerbAttribute.VerbAttribute(string)", file="TokenizerTests.cs"];
m7_7 [label="CommandLine.VerbAttribute", span="", file="TokenizerTests.cs"];
m8_0 [label="Entry CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", span="14-14", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs"];
m8_1 [label="var expectedSequence = new[]\r\n                {\r\n                    new KeyValuePair<string, IEnumerable<string>>(''i'', new[] {''10'', ''20'', ''30'', ''40''}) \r\n                }", span="17-20", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs"];
m8_2 [label="var specs =new[]\r\n                {\r\n                    new OptionSpecification(string.Empty, ''stringvalue'', false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), '\0', null, typeof(string), TargetType.Scalar, string.Empty, string.Empty, new List<string>()),\r\n                    new OptionSpecification(''i'', string.Empty, false, string.Empty, Maybe.Just(3), Maybe.Just(4), '\0', null, typeof(IEnumerable<int>), TargetType.Sequence, string.Empty, string.Empty, new List<string>())\r\n                }", span="21-25", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", color=red, community=0, file="TokenPartitionerTests.cs"];
m8_4 [label="Assert.True(expectedSequence.All(a => result.Options.Any(r => a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value))))", span="34-34", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs"];
m8_3 [label="var result = TokenPartitioner.Partition(\r\n                new[] { Token.Name(''i''), Token.Value(''10''), Token.Value(''20''), Token.Value(''30''), Token.Value(''40'') },\r\n                name => TypeLookup.FindTypeDescriptor(name, specs, StringComparer.InvariantCulture)\r\n                )", span="28-31", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs"];
m8_5 [label="Exit CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", span="14-14", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs"];
m8_8 [label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63", cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="TokenPartitionerTests.cs"];
m8_6 [label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", file="TokenPartitionerTests.cs"];
m8_7 [label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType, string, string, System.Collections.Generic.IEnumerable<string>)", span="18-18", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType, string, string, System.Collections.Generic.IEnumerable<string>)", file="TokenPartitionerTests.cs"];
m8_10 [label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68", cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="TokenPartitionerTests.cs"];
m8_13 [label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitionerTests.cs"];
m8_15 [label="Entry Unk.True", span="", cluster="Unk.True", file="TokenPartitionerTests.cs"];
m8_14 [label="Entry Unk.All", span="", cluster="Unk.All", file="TokenPartitionerTests.cs"];
m8_41 [label="Entry lambda expression", span="60-60", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m8_17 [label="TypeLookup.FindTypeDescriptor(name, specs, StringComparer.InvariantCulture)", span="30-30", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m8_16 [label="Entry lambda expression", span="30-30", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m8_21 [label="result.Options.Any(r => a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value))", span="34-34", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m8_20 [label="Entry lambda expression", span="34-34", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m8_18 [label="Exit lambda expression", span="30-30", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m8_22 [label="Exit lambda expression", span="34-34", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m8_24 [label="Entry lambda expression", span="34-34", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m8_25 [label="a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value)", span="34-34", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m8_26 [label="Exit lambda expression", span="34-34", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m8_36 [label="TypeLookup.FindTypeDescriptor(name, specs, StringComparer.InvariantCulture)", span="56-56", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m8_35 [label="Entry lambda expression", span="56-56", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m8_39 [label="result.Options.Any(r => a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value))", span="60-60", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m8_38 [label="Entry lambda expression", span="60-60", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m8_37 [label="Exit lambda expression", span="56-56", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m8_40 [label="Exit lambda expression", span="60-60", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m8_42 [label="a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value)", span="60-60", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m8_43 [label="Exit lambda expression", span="60-60", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m8_19 [label="Entry CommandLine.Core.TypeLookup.FindTypeDescriptor(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11", cluster="CommandLine.Core.TypeLookup.FindTypeDescriptor(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TokenPartitionerTests.cs"];
m8_27 [label="Entry string.Equals(string)", span="0-0", cluster="string.Equals(string)", file="TokenPartitionerTests.cs"];
m8_11 [label="Entry CommandLine.Core.Token.Name(string)", span="19-19", cluster="CommandLine.Core.Token.Name(string)", file="TokenPartitionerTests.cs"];
m8_28 [label="Entry Unk.SequenceEqual", span="", cluster="Unk.SequenceEqual", file="TokenPartitionerTests.cs"];
m8_23 [label="Entry Unk.Any", span="", cluster="Unk.Any", file="TokenPartitionerTests.cs"];
m8_12 [label="Entry CommandLine.Core.Token.Value(string)", span="24-24", cluster="CommandLine.Core.Token.Value(string)", file="TokenPartitionerTests.cs"];
m8_29 [label="Entry CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", span="40-40", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", file="TokenPartitionerTests.cs"];
m8_30 [label="var expectedSequence = new[]\r\n                {\r\n                    new KeyValuePair<string, IEnumerable<string>>(''i'', new[] {''10'', ''10'', ''30'', ''40''}) \r\n                }", span="43-46", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", file="TokenPartitionerTests.cs"];
m8_31 [label="var specs =new[]\r\n                {\r\n                    new OptionSpecification(string.Empty, ''stringvalue'', false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), '\0', null, typeof(string), TargetType.Scalar, string.Empty, string.Empty, new List<string>()),\r\n                    new OptionSpecification(''i'', string.Empty, false, string.Empty, Maybe.Just(3), Maybe.Just(4), '\0', null, typeof(IEnumerable<int>), TargetType.Sequence, string.Empty, string.Empty, new List<string>())\r\n                }", span="47-51", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", color=red, community=0, file="TokenPartitionerTests.cs"];
m8_33 [label="Assert.True(expectedSequence.All(a => result.Options.Any(r => a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value))))", span="60-60", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", file="TokenPartitionerTests.cs"];
m8_32 [label="var result = TokenPartitioner.Partition(\r\n                new[] { Token.Name(''i''), Token.Value(''10''), Token.Value(''10''), Token.Value(''30''), Token.Value(''40'') },\r\n                name => TypeLookup.FindTypeDescriptor(name, specs, StringComparer.InvariantCulture)\r\n                )", span="54-57", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", file="TokenPartitionerTests.cs"];
m8_34 [label="Exit CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", span="40-40", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", file="TokenPartitionerTests.cs"];
m8_9 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="TokenPartitionerTests.cs"];
m8_44 [label=specs, span="", file="TokenPartitionerTests.cs"];
m8_45 [label=result, span="", file="TokenPartitionerTests.cs"];
m8_46 [label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", span="", file="TokenPartitionerTests.cs"];
m8_47 [label=specs, span="", file="TokenPartitionerTests.cs"];
m8_48 [label=result, span="", file="TokenPartitionerTests.cs"];
m8_49 [label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", span="", file="TokenPartitionerTests.cs"];
n138 -> n6  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
n138 -> n11  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
n138 -> n12  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
n138 -> n13  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
n138 -> n17  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
n138 -> n18  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
n138 -> n21  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
n138 -> n28  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
n138 -> n35  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
n138 -> n39  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
n138 -> n49  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
n138 -> n53  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
n138 -> n56  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
n138 -> n65  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
n138 -> n69  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
n138 -> n73  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
n138 -> n76  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
n138 -> n77  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
n138 -> n130  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
n138 -> n133  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
n138 -> n134  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
n138 -> n135  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
n139 -> n35  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
n140 -> n35  [key=1, style=dashed, color=darkseagreen4, label=factory];
n141 -> n53  [key=1, style=dashed, color=darkseagreen4, label="System.Func<T>"];
n142 -> n53  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
n143 -> n69  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
n144 -> n69  [key=1, style=dashed, color=darkseagreen4, label="params System.Type[]"];
n145 -> n88  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
n145 -> n91  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
n145 -> n95  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
n145 -> n98  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
n146 -> n88  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
n146 -> n91  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
n146 -> n95  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
n146 -> n98  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
n147 -> n126  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResult<T>"];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=2, style=dotted];
n1 -> n4  [key=2, style=dotted];
n2 -> n0  [key=0, style=bold, color=blue];
n3 -> n17  [key=0, style=solid];
n5 -> n6  [key=0, style=solid];
n6 -> n7  [key=0, style=solid];
n6 -> n4  [key=2, style=dotted];
n7 -> n5  [key=0, style=bold, color=blue];
n8 -> n9  [key=0, style=solid];
n8 -> n12  [key=1, style=dashed, color=darkseagreen4, label="System.Action<CommandLine.ParserSettings>"];
n9 -> n10  [key=0, style=solid];
n9 -> n11  [key=0, style=solid];
n12 -> n13  [key=0, style=solid];
n12 -> n16  [key=2, style=dotted];
n10 -> n14  [key=0, style=solid];
n10 -> n15  [key=2, style=dotted];
n11 -> n12  [key=0, style=solid];
n11 -> n4  [key=2, style=dotted];
n13 -> n14  [key=0, style=solid];
n14 -> n8  [key=0, style=bold, color=blue];
n17 -> n18  [key=0, style=solid];
n18 -> n19  [key=0, style=solid];
n19 -> n3  [key=0, style=bold, color=blue];
n20 -> n21  [key=0, style=solid];
n21 -> n22  [key=0, style=solid];
n21 -> n23  [key=2, style=dotted];
n22 -> n20  [key=0, style=bold, color=blue];
n23 -> n130  [key=0, style=solid];
n23 -> n132  [key=1, style=dashed, color=darkseagreen4, label=bool];
n24 -> n25  [key=0, style=solid];
n24 -> n28  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
n24 -> n35  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
n25 -> n26  [key=0, style=solid];
n25 -> n27  [key=0, style=solid];
n28 -> n29  [key=0, style=solid];
n28 -> n33  [key=2, style=dotted];
n28 -> n34  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n35 -> n36  [key=0, style=solid];
n35 -> n37  [key=2, style=dotted];
n35 -> n38  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n26 -> n29  [key=0, style=solid];
n26 -> n15  [key=2, style=dotted];
n27 -> n28  [key=0, style=solid];
n27 -> n30  [key=2, style=dotted];
n27 -> n31  [key=2, style=dotted];
n27 -> n32  [key=2, style=dotted];
n27 -> n35  [key=1, style=dashed, color=darkseagreen4, label=factory];
n29 -> n24  [key=0, style=bold, color=blue];
n34 -> n35  [key=0, style=solid];
n36 -> n34  [key=0, style=bold, color=blue];
n38 -> n39  [key=0, style=solid];
n39 -> n40  [key=0, style=solid];
n39 -> n41  [key=2, style=dotted];
n40 -> n38  [key=0, style=bold, color=blue];
n41 -> n80  [key=0, style=solid];
n41 -> n88  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
n41 -> n91  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
n41 -> n95  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
n41 -> n81  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
n41 -> n98  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
n42 -> n43  [key=0, style=solid];
n42 -> n47  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
n42 -> n49  [key=1, style=dashed, color=darkseagreen4, label="System.Func<T>"];
n42 -> n53  [key=1, style=dashed, color=darkseagreen4, label="System.Func<T>"];
n43 -> n44  [key=0, style=solid];
n43 -> n45  [key=0, style=solid];
n47 -> n48  [key=0, style=solid];
n47 -> n49  [key=0, style=solid];
n49 -> n50  [key=0, style=solid];
n49 -> n33  [key=2, style=dotted];
n49 -> n52  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n49 -> n0  [key=3, color=darkorchid, style=bold, label="Parameter variable string value"];
n53 -> n54  [key=0, style=solid];
n53 -> n31  [key=2, style=dotted];
n53 -> n37  [key=2, style=dotted];
n53 -> n55  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n44 -> n50  [key=0, style=solid];
n44 -> n15  [key=2, style=dotted];
n45 -> n46  [key=0, style=solid];
n45 -> n47  [key=0, style=solid];
n45 -> n30  [key=2, style=dotted];
n46 -> n50  [key=0, style=solid];
n46 -> n51  [key=2, style=dotted];
n48 -> n50  [key=0, style=solid];
n48 -> n15  [key=2, style=dotted];
n50 -> n42  [key=0, style=bold, color=blue];
n52 -> n53  [key=0, style=solid];
n54 -> n52  [key=0, style=bold, color=blue];
n55 -> n56  [key=0, style=solid];
n56 -> n57  [key=0, style=solid];
n56 -> n41  [key=2, style=dotted];
n57 -> n55  [key=0, style=bold, color=blue];
n58 -> n59  [key=0, style=solid];
n58 -> n61  [key=1, style=dashed, color=darkseagreen4, label="params System.Type[]"];
n58 -> n63  [key=1, style=dashed, color=darkseagreen4, label="params System.Type[]"];
n58 -> n65  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
n58 -> n69  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
n59 -> n60  [key=0, style=solid];
n59 -> n61  [key=0, style=solid];
n61 -> n62  [key=0, style=solid];
n61 -> n63  [key=0, style=solid];
n63 -> n64  [key=0, style=solid];
n63 -> n65  [key=0, style=solid];
n65 -> n66  [key=0, style=solid];
n65 -> n33  [key=2, style=dotted];
n65 -> n68  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n69 -> n70  [key=0, style=solid];
n69 -> n71  [key=2, style=dotted];
n69 -> n72  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n60 -> n66  [key=0, style=solid];
n60 -> n15  [key=2, style=dotted];
n62 -> n66  [key=0, style=solid];
n62 -> n15  [key=2, style=dotted];
n64 -> n66  [key=0, style=solid];
n64 -> n67  [key=2, style=dotted];
n66 -> n58  [key=0, style=bold, color=blue];
n68 -> n69  [key=0, style=solid];
n70 -> n68  [key=0, style=bold, color=blue];
n72 -> n73  [key=0, style=solid];
n73 -> n74  [key=0, style=solid];
n73 -> n41  [key=2, style=dotted];
n74 -> n72  [key=0, style=bold, color=blue];
n75 -> n76  [key=0, style=solid];
n76 -> n77  [key=0, style=solid];
n76 -> n23  [key=2, style=dotted];
n77 -> n78  [key=0, style=solid];
n77 -> n79  [key=2, style=dotted];
n78 -> n75  [key=0, style=bold, color=blue];
n80 -> n81  [key=0, style=solid];
n80 -> n84  [key=2, style=dotted];
n80 -> n85  [key=2, style=dotted];
n80 -> n87  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n80 -> n94  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n88 -> n89  [key=0, style=solid];
n88 -> n85  [key=2, style=dotted];
n88 -> n90  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n91 -> n92  [key=0, style=solid];
n91 -> n93  [key=2, style=dotted];
n95 -> n96  [key=0, style=solid];
n95 -> n93  [key=2, style=dotted];
n81 -> n82  [key=0, style=solid];
n81 -> n86  [key=2, style=dotted];
n81 -> n97  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n98 -> n99  [key=0, style=solid];
n98 -> n100  [key=2, style=dotted];
n87 -> n88  [key=0, style=solid];
n94 -> n95  [key=0, style=solid];
n82 -> n83  [key=0, style=solid];
n97 -> n98  [key=0, style=solid];
n83 -> n41  [key=0, style=bold, color=blue];
n89 -> n87  [key=0, style=bold, color=blue];
n90 -> n91  [key=0, style=solid];
n92 -> n90  [key=0, style=bold, color=blue];
n96 -> n94  [key=0, style=bold, color=blue];
n99 -> n97  [key=0, style=bold, color=blue];
n101 -> n102  [key=0, style=solid];
n102 -> n103  [key=0, style=solid];
n102 -> n104  [key=2, style=dotted];
n102 -> n105  [key=2, style=dotted];
n102 -> n106  [key=2, style=dotted];
n103 -> n101  [key=0, style=bold, color=blue];
n105 -> n107  [key=0, style=solid];
n106 -> n117  [key=0, style=solid];
n106 -> n118  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResult<T>"];
n106 -> n119  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResult<T>"];
n106 -> n126  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResult<T>"];
n106 -> n120  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResult<T>"];
n107 -> n108  [key=0, style=solid];
n107 -> n109  [key=2, style=dotted];
n107 -> n110  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n108 -> n105  [key=0, style=bold, color=blue];
n110 -> n111  [key=0, style=solid];
n111 -> n112  [key=0, style=solid];
n111 -> n113  [key=2, style=dotted];
n111 -> n114  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n112 -> n110  [key=0, style=bold, color=blue];
n114 -> n115  [key=0, style=solid];
n115 -> n116  [key=0, style=solid];
n116 -> n114  [key=0, style=bold, color=blue];
n117 -> n118  [key=0, style=solid];
n117 -> n120  [key=0, style=solid];
n118 -> n119  [key=0, style=solid];
n118 -> n120  [key=0, style=solid];
n118 -> n122  [key=2, style=dotted];
n119 -> n120  [key=0, style=solid];
n119 -> n123  [key=2, style=dotted];
n119 -> n124  [key=2, style=dotted];
n119 -> n125  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n126 -> n127  [key=0, style=solid];
n126 -> n128  [key=2, style=dotted];
n126 -> n129  [key=2, style=dotted];
n120 -> n121  [key=0, style=solid];
n125 -> n126  [key=0, style=solid];
n121 -> n106  [key=0, style=bold, color=blue];
n127 -> n125  [key=0, style=bold, color=blue];
n130 -> n131  [key=0, style=solid];
n130 -> n132  [key=0, style=solid];
n132 -> n133  [key=0, style=solid];
n132 -> n136  [key=0, style=solid];
n131 -> n136  [key=0, style=solid];
n133 -> n134  [key=0, style=solid];
n133 -> n135  [key=0, style=solid];
n136 -> n23  [key=0, style=bold, color=blue];
n134 -> n135  [key=0, style=solid];
n134 -> n137  [key=2, style=dotted];
n135 -> n136  [key=0, style=solid];
d3 -> d4  [key=0, style=solid, color=green];
d6 -> d3  [key=1, style=dashed, color=green, label="CommandLine.BaseAttribute"];
d6 -> d4  [key=1, style=dashed, color=green, label="CommandLine.BaseAttribute"];
d6 -> d1  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.BaseAttribute"];
d6 -> d2  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.BaseAttribute"];
d2 -> d3  [key=0, style=solid, color=green];
d4 -> d5  [key=0, style=solid, color=green];
d5 -> d0  [key=0, style=bold, color=blue];
d1 -> d2  [key=0, style=solid];
d0 -> d1  [key=0, style=solid];
m1_1 -> m1_2  [key=0, style=solid, color=green];
m1_1 -> m1_6  [key=2, style=dotted];
m1_1 -> m1_4  [key=1, style=dashed, color=darkseagreen4, label=expected];
m1_2 -> m1_3  [key=0, style=solid, color=green];
m1_2 -> m1_7  [key=2, style=dotted, color=green];
m1_2 -> m1_8  [key=2, style=dotted, color=green];
m1_2 -> m1_9  [key=2, style=dotted, color=green];
m1_3 -> m1_4  [key=0, style=solid];
m1_3 -> d0  [key=3, color=darkorchid, style=bold, label="Property variable CommandLine.NameStyleFormat NameStyleFormat"];
m1_3 -> m1_10  [key=2, style=dotted];
m1_4 -> d5  [key=0, style=solid];
m1_4 -> m1_5  [key=0, style=solid];
m1_4 -> m1_11  [key=2, style=dotted];
m1_6 -> m1_1  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.BaseAttribute"];
m1_6 -> m1_2  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.BaseAttribute"];
m1_6 -> m1_3  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.BaseAttribute"];
m1_6 -> m1_4  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.BaseAttribute"];
m1_0 -> m1_1  [key=0, style=solid];
m1_5 -> m1_0  [key=0, style=bold, color=blue];
m2_0 -> m2_1  [key=0, style=solid, color=red];
m2_1 -> m2_2  [key=0, style=solid, color=red];
m2_1 -> m2_6  [key=2, style=dotted, color=red];
m2_1 -> m2_4  [key=1, style=dashed, color=red, label=expected];
m2_2 -> m2_3  [key=0, style=solid, color=red];
m2_2 -> m2_7  [key=2, style=dotted, color=red];
m2_2 -> m2_8  [key=2, style=dotted, color=red];
m2_2 -> m2_9  [key=2, style=dotted, color=red];
m2_4 -> m2_5  [key=0, style=solid];
m2_4 -> m2_11  [key=2, style=dotted];
m2_3 -> m2_4  [key=0, style=solid];
m2_3 -> m2_10  [key=2, style=dotted];
m2_5 -> m2_0  [key=0, style=bold, color=blue];
m3_9 -> m3_10  [key=0, style=solid];
m3_9 -> m3_11  [key=0, style=solid];
m3_12 -> m3_13  [key=0, style=solid];
m3_12 -> m3_16  [key=2, style=dotted];
m3_10 -> n14  [key=0, style=solid];
m3_10 -> m3_15  [key=2, style=dotted];
m3_11 -> m3_12  [key=0, style=solid];
m3_11 -> m3_4  [key=2, style=dotted];
m3_13 -> n14  [key=0, style=solid];
m3_20 -> m3_21  [key=0, style=solid];
m3_21 -> m3_22  [key=0, style=solid];
m3_21 -> m3_23  [key=2, style=dotted];
m3_22 -> m3_20  [key=0, style=bold, color=blue];
m3_58 -> m3_59  [key=0, style=solid];
m3_58 -> m3_61  [key=1, style=dashed, color=darkseagreen4, label="params System.Type[]"];
m3_58 -> m3_63  [key=1, style=dashed, color=darkseagreen4, label="params System.Type[]"];
m3_58 -> m3_65  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m3_58 -> m3_69  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m3_59 -> m3_60  [key=0, style=solid];
m3_59 -> m3_61  [key=0, style=solid];
m3_61 -> m3_62  [key=0, style=solid];
m3_61 -> m3_63  [key=0, style=solid];
m3_63 -> m3_64  [key=0, style=solid];
m3_63 -> m3_65  [key=0, style=solid];
m3_65 -> m3_66  [key=0, style=solid];
m3_65 -> m3_33  [key=2, style=dotted];
m3_65 -> m3_68  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_60 -> m3_66  [key=0, style=solid];
m3_60 -> m3_15  [key=2, style=dotted];
m3_62 -> m3_66  [key=0, style=solid];
m3_62 -> m3_15  [key=2, style=dotted];
m3_64 -> m3_66  [key=0, style=solid];
m3_64 -> m3_67  [key=2, style=dotted];
m3_66 -> m3_58  [key=0, style=bold, color=blue];
m3_3 -> m3_17  [key=0, style=solid];
m3_17 -> m3_18  [key=0, style=solid];
m3_18 -> m3_19  [key=0, style=solid];
m3_19 -> m3_3  [key=0, style=bold, color=blue];
m3_42 -> m3_43  [key=0, style=solid];
m3_42 -> m3_47  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m3_42 -> m3_49  [key=1, style=dashed, color=darkseagreen4, label="System.Func<T>"];
m3_42 -> m3_53  [key=1, style=dashed, color=darkseagreen4, label="System.Func<T>"];
m3_43 -> m3_44  [key=0, style=solid];
m3_43 -> m3_45  [key=0, style=solid];
m3_47 -> m3_48  [key=0, style=solid];
m3_47 -> m3_49  [key=0, style=solid];
m3_49 -> m3_50  [key=0, style=solid];
m3_49 -> m3_33  [key=2, style=dotted];
m3_49 -> m3_52  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_49 -> m3_0  [key=3, color=darkorchid, style=bold, label="Parameter variable string value"];
m3_44 -> m3_50  [key=0, style=solid];
m3_44 -> m3_15  [key=2, style=dotted];
m3_45 -> m3_46  [key=0, style=solid];
m3_45 -> m3_47  [key=0, style=solid];
m3_45 -> m3_30  [key=2, style=dotted];
m3_46 -> m3_50  [key=0, style=solid];
m3_46 -> m3_51  [key=2, style=dotted];
m3_48 -> m3_50  [key=0, style=solid];
m3_48 -> m3_15  [key=2, style=dotted];
m3_50 -> m3_42  [key=0, style=bold, color=blue];
m3_5 -> m3_6  [key=0, style=solid];
m3_6 -> m3_7  [key=0, style=solid];
m3_6 -> m3_4  [key=2, style=dotted];
m3_7 -> m3_5  [key=0, style=bold, color=blue];
m3_106 -> m3_117  [key=0, style=solid];
m3_106 -> m3_118  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResult<T>"];
m3_106 -> m3_119  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResult<T>"];
m3_106 -> m3_126  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResult<T>"];
m3_106 -> m3_120  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResult<T>"];
m3_117 -> m3_118  [key=0, style=solid];
m3_117 -> m3_120  [key=0, style=solid];
m3_118 -> m3_119  [key=0, style=solid];
m3_118 -> m3_120  [key=0, style=solid];
m3_118 -> m3_122  [key=2, style=dotted];
m3_119 -> m3_120  [key=0, style=solid];
m3_119 -> m3_123  [key=2, style=dotted];
m3_119 -> m3_124  [key=2, style=dotted];
m3_119 -> m3_125  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_120 -> m3_121  [key=0, style=solid];
m3_121 -> m3_106  [key=0, style=bold, color=blue];
m3_125 -> m3_126  [key=0, style=solid];
m3_0 -> m3_1  [key=0, style=solid];
m3_1 -> m3_2  [key=0, style=solid];
m3_1 -> m3_3  [key=2, style=dotted];
m3_1 -> m3_4  [key=2, style=dotted];
m3_2 -> m3_0  [key=0, style=bold, color=blue];
m3_35 -> m3_36  [key=0, style=solid];
m3_35 -> m3_37  [key=2, style=dotted];
m3_35 -> m3_38  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_34 -> m3_35  [key=0, style=solid];
m3_36 -> m3_34  [key=0, style=bold, color=blue];
m3_38 -> m3_39  [key=0, style=solid];
m3_39 -> m3_40  [key=0, style=solid];
m3_39 -> m3_41  [key=2, style=dotted];
m3_40 -> m3_38  [key=0, style=bold, color=blue];
m3_53 -> m3_54  [key=0, style=solid];
m3_53 -> m3_31  [key=2, style=dotted];
m3_53 -> m3_37  [key=2, style=dotted];
m3_53 -> m3_55  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_52 -> m3_53  [key=0, style=solid];
m3_54 -> m3_52  [key=0, style=bold, color=blue];
m3_55 -> m3_56  [key=0, style=solid];
m3_56 -> m3_57  [key=0, style=solid];
m3_56 -> m3_41  [key=2, style=dotted];
m3_57 -> m3_55  [key=0, style=bold, color=blue];
m3_69 -> m3_70  [key=0, style=solid];
m3_69 -> m3_71  [key=2, style=dotted];
m3_69 -> m3_72  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_68 -> m3_69  [key=0, style=solid];
m3_70 -> m3_68  [key=0, style=bold, color=blue];
m3_72 -> m3_73  [key=0, style=solid];
m3_73 -> m3_74  [key=0, style=solid];
m3_73 -> m3_41  [key=2, style=dotted];
m3_74 -> m3_72  [key=0, style=bold, color=blue];
m3_88 -> m3_89  [key=0, style=solid];
m3_88 -> m3_85  [key=2, style=dotted];
m3_88 -> m3_90  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_91 -> m3_92  [key=0, style=solid];
m3_91 -> m3_93  [key=2, style=dotted];
m3_95 -> m3_96  [key=0, style=solid];
m3_95 -> m3_93  [key=2, style=dotted];
m3_98 -> m3_99  [key=0, style=solid];
m3_98 -> m3_100  [key=2, style=dotted];
m3_87 -> m3_88  [key=0, style=solid];
m3_94 -> m3_95  [key=0, style=solid];
m3_97 -> m3_98  [key=0, style=solid];
m3_89 -> m3_87  [key=0, style=bold, color=blue];
m3_90 -> m3_91  [key=0, style=solid];
m3_92 -> m3_90  [key=0, style=bold, color=blue];
m3_96 -> m3_94  [key=0, style=bold, color=blue];
m3_99 -> m3_97  [key=0, style=bold, color=blue];
m3_110 -> m3_111  [key=0, style=solid];
m3_111 -> m3_112  [key=0, style=solid];
m3_111 -> m3_113  [key=2, style=dotted];
m3_111 -> m3_114  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_112 -> m3_110  [key=0, style=bold, color=blue];
m3_114 -> m3_115  [key=0, style=solid];
m3_115 -> m3_116  [key=0, style=solid];
m3_116 -> m3_114  [key=0, style=bold, color=blue];
m3_126 -> m3_127  [key=0, style=solid];
m3_126 -> m3_128  [key=2, style=dotted];
m3_126 -> m3_129  [key=2, style=dotted];
m3_127 -> m3_125  [key=0, style=bold, color=blue];
m3_105 -> m3_107  [key=0, style=solid];
m3_107 -> m3_108  [key=0, style=solid];
m3_107 -> m3_109  [key=2, style=dotted];
m3_107 -> m3_110  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_108 -> m3_105  [key=0, style=bold, color=blue];
m3_101 -> m3_102  [key=0, style=solid];
m3_102 -> m3_103  [key=0, style=solid];
m3_102 -> m3_104  [key=2, style=dotted];
m3_102 -> m3_105  [key=2, style=dotted];
m3_102 -> m3_106  [key=2, style=dotted];
m3_103 -> m3_101  [key=0, style=bold, color=blue];
m3_75 -> m3_76  [key=0, style=solid];
m3_76 -> m3_77  [key=0, style=solid];
m3_76 -> m3_23  [key=2, style=dotted];
m3_77 -> m3_78  [key=0, style=solid];
m3_77 -> m3_79  [key=2, style=dotted];
m3_78 -> m3_75  [key=0, style=bold, color=blue];
m3_24 -> m3_25  [key=0, style=solid];
m3_24 -> m3_28  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m3_24 -> m3_35  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m3_25 -> m3_26  [key=0, style=solid];
m3_25 -> m3_27  [key=0, style=solid];
m3_28 -> m3_29  [key=0, style=solid];
m3_28 -> m3_33  [key=2, style=dotted];
m3_28 -> m3_34  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_26 -> m3_29  [key=0, style=solid];
m3_26 -> m3_15  [key=2, style=dotted];
m3_27 -> m3_28  [key=0, style=solid];
m3_27 -> m3_30  [key=2, style=dotted];
m3_27 -> m3_31  [key=2, style=dotted];
m3_27 -> m3_32  [key=2, style=dotted];
m3_27 -> m3_35  [key=1, style=dashed, color=darkseagreen4, label=factory];
m3_29 -> m3_24  [key=0, style=bold, color=blue];
m3_41 -> m3_80  [key=0, style=solid];
m3_41 -> m3_88  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m3_41 -> m3_91  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m3_41 -> m3_95  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m3_41 -> m3_81  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m3_41 -> m3_98  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m3_80 -> m3_81  [key=0, style=solid];
m3_80 -> m3_84  [key=2, style=dotted];
m3_80 -> m3_85  [key=2, style=dotted];
m3_80 -> m3_87  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_80 -> m3_94  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_81 -> m3_82  [key=0, style=solid];
m3_81 -> m3_86  [key=2, style=dotted];
m3_81 -> m3_97  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_82 -> m3_83  [key=0, style=solid];
m3_83 -> m3_41  [key=0, style=bold, color=blue];
m3_23 -> m3_130  [key=0, style=solid];
m3_23 -> m3_132  [key=1, style=dashed, color=darkseagreen4, label=bool];
m3_130 -> m3_131  [key=0, style=solid];
m3_130 -> m3_132  [key=0, style=solid];
m3_132 -> m3_133  [key=0, style=solid];
m3_132 -> m3_136  [key=0, style=solid];
m3_131 -> m3_136  [key=0, style=solid];
m3_133 -> m3_134  [key=0, style=solid];
m3_133 -> m3_135  [key=0, style=solid];
m3_134 -> m3_135  [key=0, style=solid];
m3_134 -> m3_137  [key=2, style=dotted];
m3_135 -> m3_136  [key=0, style=solid];
m3_136 -> m3_23  [key=0, style=bold, color=blue];
m3_138 -> m3_6  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m3_138 -> m3_11  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m3_138 -> m3_12  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m3_138 -> m3_13  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m3_138 -> m3_17  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m3_138 -> m3_18  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m3_138 -> m3_21  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m3_138 -> m3_28  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m3_138 -> m3_35  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m3_138 -> m3_39  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m3_138 -> m3_49  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m3_138 -> m3_53  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m3_138 -> m3_56  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m3_138 -> m3_65  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m3_138 -> m3_69  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m3_138 -> m3_73  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m3_138 -> m3_76  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m3_138 -> m3_77  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m3_138 -> m3_130  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m3_138 -> m3_133  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m3_138 -> m3_134  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m3_138 -> m3_135  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m3_139 -> m3_35  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m3_140 -> m3_35  [key=1, style=dashed, color=darkseagreen4, label=factory];
m3_141 -> m3_53  [key=1, style=dashed, color=darkseagreen4, label="System.Func<T>"];
m3_142 -> m3_53  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m3_143 -> m3_69  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m3_144 -> m3_69  [key=1, style=dashed, color=darkseagreen4, label="params System.Type[]"];
m3_145 -> m3_88  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m3_145 -> m3_91  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m3_145 -> m3_95  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m3_145 -> m3_98  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m3_146 -> m3_88  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m3_146 -> m3_91  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m3_146 -> m3_95  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m3_146 -> m3_98  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m3_147 -> m3_126  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResult<T>"];
m5_2 -> m5_3  [key=0, style=solid];
m5_2 -> m5_4  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_3 -> m5_4  [key=0, style=solid];
m5_4 -> m5_5  [key=0, style=solid];
m5_5 -> m5_2  [key=0, style=bold, color=blue];
m5_0 -> m5_1  [key=0, style=solid];
m5_1 -> m5_0  [key=0, style=bold, color=blue];
m5_6 -> m5_3  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.BadOptionInfo"];
m5_6 -> m5_4  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.BadOptionInfo"];
m6_25 -> m6_26  [key=0, style=solid, color=green];
m6_25 -> m6_28  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m6_25 -> m6_29  [key=1, style=dashed, color=darkseagreen4, label="System.Func<int, int, bool>"];
m6_25 -> m6_30  [key=3, color=darkorchid, style=bold, label="method methodReturn bool HavingRange"];
m6_25 -> m6_27  [key=2, style=dotted, color=green];
m6_26 -> m6_27  [key=0, style=solid];
m6_26 -> m6_24  [key=0, style=bold, color=blue];
m6_28 -> m6_29  [key=0, style=solid];
m6_28 -> m6_30  [key=0, style=solid];
m6_28 -> m6_32  [key=2, style=dotted];
m6_29 -> m6_31  [key=0, style=solid];
m6_29 -> m6_33  [key=2, style=dotted];
m6_29 -> m6_23  [key=2, style=dotted];
m6_29 -> m6_30  [key=0, style=solid];
m6_27 -> m6_28  [key=0, style=solid];
m6_30 -> m6_31  [key=0, style=solid];
m6_30 -> m6_28  [key=0, style=bold, color=blue];
m6_31 -> m6_25  [key=0, style=bold, color=blue];
m6_34 -> m6_35  [key=0, style=solid];
m6_34 -> m6_36  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m6_34 -> m6_37  [key=1, style=dashed, color=darkseagreen4, label="System.Func<int, bool>"];
m6_34 -> m6_30  [key=3, color=darkorchid, style=bold, label="method methodReturn bool HavingMin"];
m6_35 -> m6_36  [key=0, style=solid];
m6_36 -> m6_37  [key=0, style=solid];
m6_36 -> m6_38  [key=0, style=solid];
m6_36 -> m6_32  [key=2, style=dotted];
m6_37 -> m6_39  [key=0, style=solid];
m6_37 -> m6_24  [key=2, style=dotted];
m6_38 -> m6_39  [key=0, style=solid];
m6_39 -> m6_34  [key=0, style=bold, color=blue];
m6_20 -> m6_21  [key=0, style=solid, color=green];
m6_24 -> m6_25  [key=0, style=solid, color=green];
m6_12 -> m6_10  [key=0, style=bold, color=blue];
m6_13 -> m6_14  [key=0, style=solid];
m6_13 -> m6_15  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>"];
m6_13 -> m6_17  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>"];
m6_13 -> m6_13  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Collections.Generic.IEnumerable<CommandLine.Core.Specification> ThrowingValidate"];
m6_14 -> m6_15  [key=0, style=solid];
m6_14 -> m6_17  [key=0, style=solid];
m6_14 -> m6_22  [key=1, style=dashed, color=darkseagreen4, label=guard];
m6_14 -> m6_16  [key=1, style=dashed, color=darkseagreen4, label=guard];
m6_15 -> m6_16  [key=0, style=solid];
m6_15 -> m6_14  [key=0, style=solid];
m6_15 -> m6_19  [key=2, style=dotted];
m6_15 -> m6_21  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_17 -> m6_18  [key=0, style=solid];
m6_17 -> m6_19  [key=2, style=dotted];
m6_16 -> m6_18  [key=0, style=solid];
m6_16 -> m6_20  [key=2, style=dotted];
m6_16 -> m6_17  [key=0, style=solid];
m6_18 -> m6_13  [key=0, style=bold, color=blue];
m6_18 -> m6_16  [key=0, style=bold, color=blue];
m6_11 -> m6_12  [key=0, style=solid];
m6_3 -> m6_4  [key=0, style=solid, color=green];
m6_3 -> n113  [key=2, style=dotted, color=green];
m6_3 -> m6_14  [key=2, style=dotted, color=green];
m6_3 -> m6_20  [key=1, style=dashed, color=green, label="lambda expression"];
m6_3 -> m6_24  [key=1, style=dashed, color=green, label="lambda expression"];
m6_4 -> m6_5  [key=0, style=solid];
m6_4 -> m6_11  [key=2, style=dotted];
m6_4 -> m6_15  [key=2, style=dotted];
m6_4 -> m6_28  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_5 -> m6_3  [key=0, style=bold, color=blue];
m6_5 -> m6_0  [key=0, style=bold, color=blue];
m6_22 -> m6_23  [key=0, style=solid];
m6_22 -> m6_24  [key=2, style=dotted];
m6_22 -> m6_20  [key=0, style=bold, color=blue];
m6_21 -> m6_22  [key=0, style=solid, color=green];
m6_21 -> m6_23  [key=2, style=dotted, color=green];
m6_23 -> m6_21  [key=0, style=bold, color=blue];
m6_10 -> m6_11  [key=0, style=solid];
m6_7 -> m6_8  [key=0, style=solid, color=red];
m6_7 -> m6_9  [key=2, style=dotted, color=red];
m6_8 -> m6_6  [key=0, style=bold, color=blue];
m6_6 -> m6_7  [key=0, style=solid, color=red];
m6_0 -> m6_1  [key=0, style=solid];
m6_1 -> m6_2  [key=0, style=solid];
m6_1 -> m6_3  [key=1, style=dashed, color=green, label=tokenPartitions];
m6_1 -> m6_6  [key=2, style=dotted];
m6_2 -> m6_0  [key=0, style=bold, color=blue];
m6_2 -> m6_3  [key=0, style=solid, color=green];
m6_2 -> m6_7  [key=2, style=dotted];
m6_2 -> m6_8  [key=2, style=dotted];
m6_2 -> m6_9  [key=2, style=dotted];
m6_2 -> m6_10  [key=2, style=dotted];
m6_2 -> m6_11  [key=2, style=dotted];
m6_2 -> m6_12  [key=2, style=dotted];
m6_2 -> m6_16  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_40 -> m6_41  [key=0, style=solid];
m6_40 -> m6_42  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m6_40 -> m6_43  [key=1, style=dashed, color=darkseagreen4, label="System.Func<int, bool>"];
m6_40 -> m6_30  [key=3, color=darkorchid, style=bold, label="method methodReturn bool HavingMax"];
m6_41 -> m6_42  [key=0, style=solid];
m6_42 -> m6_43  [key=0, style=solid];
m6_42 -> m6_44  [key=0, style=solid];
m6_42 -> m6_32  [key=2, style=dotted];
m6_43 -> m6_45  [key=0, style=solid];
m6_43 -> m6_24  [key=2, style=dotted];
m6_44 -> m6_45  [key=0, style=solid];
m6_45 -> m6_40  [key=0, style=bold, color=blue];
m6_46 -> m6_22  [key=1, style=dashed, color=darkseagreen4, label=guard];
m7_0 -> m7_1  [key=0, style=solid];
m7_0 -> m7_3  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_1 -> m7_2  [key=0, style=solid];
m7_1 -> m7_3  [key=0, style=solid];
m7_1 -> m7_5  [key=2, style=dotted];
m7_3 -> m7_4  [key=0, style=solid];
m7_2 -> m7_4  [key=0, style=solid];
m7_2 -> n51  [key=2, style=dotted];
m7_4 -> m7_0  [key=0, style=bold, color=blue];
m7_7 -> m7_3  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.VerbAttribute"];
m8_0 -> m8_1  [key=0, style=solid];
m8_1 -> m8_2  [key=0, style=solid, color=red];
m8_1 -> m8_6  [key=2, style=dotted];
m8_1 -> m8_4  [key=1, style=dashed, color=darkseagreen4, label=expectedSequence];
m8_2 -> m8_3  [key=0, style=solid, color=red];
m8_2 -> m8_7  [key=2, style=dotted, color=red];
m8_2 -> m8_8  [key=2, style=dotted, color=red];
m8_2 -> m8_9  [key=2, style=dotted, color=red];
m8_2 -> m8_10  [key=2, style=dotted, color=red];
m8_2 -> m8_17  [key=1, style=dashed, color=red, label=specs];
m8_4 -> m8_5  [key=0, style=solid];
m8_4 -> m8_14  [key=2, style=dotted];
m8_4 -> m8_15  [key=2, style=dotted];
m8_4 -> m8_20  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_3 -> m8_4  [key=0, style=solid];
m8_3 -> m8_11  [key=2, style=dotted];
m8_3 -> m8_12  [key=2, style=dotted];
m8_3 -> m8_13  [key=2, style=dotted];
m8_3 -> m8_16  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_3 -> m8_21  [key=1, style=dashed, color=darkseagreen4, label=result];
m8_5 -> m8_0  [key=0, style=bold, color=blue];
m8_41 -> m8_42  [key=0, style=solid];
m8_17 -> m8_18  [key=0, style=solid];
m8_17 -> m8_19  [key=2, style=dotted];
m8_16 -> m8_17  [key=0, style=solid];
m8_21 -> m8_22  [key=0, style=solid];
m8_21 -> m8_23  [key=2, style=dotted];
m8_21 -> m8_24  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_21 -> m8_25  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>"];
m8_20 -> m8_21  [key=0, style=solid];
m8_18 -> m8_16  [key=0, style=bold, color=blue];
m8_22 -> m8_20  [key=0, style=bold, color=blue];
m8_24 -> m8_25  [key=0, style=solid];
m8_25 -> m8_26  [key=0, style=solid];
m8_25 -> m8_27  [key=2, style=dotted];
m8_25 -> m8_28  [key=2, style=dotted];
m8_25 -> m8_25  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>"];
m8_26 -> m8_24  [key=0, style=bold, color=blue];
m8_36 -> m8_37  [key=0, style=solid];
m8_36 -> m8_19  [key=2, style=dotted];
m8_35 -> m8_36  [key=0, style=solid];
m8_39 -> m8_40  [key=0, style=solid];
m8_39 -> m8_23  [key=2, style=dotted];
m8_39 -> m8_41  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_39 -> m8_42  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>"];
m8_38 -> m8_39  [key=0, style=solid];
m8_37 -> m8_35  [key=0, style=bold, color=blue];
m8_40 -> m8_38  [key=0, style=bold, color=blue];
m8_42 -> m8_43  [key=0, style=solid];
m8_42 -> m8_27  [key=2, style=dotted];
m8_42 -> m8_28  [key=2, style=dotted];
m8_42 -> m8_42  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>"];
m8_43 -> m8_41  [key=0, style=bold, color=blue];
m8_29 -> m8_30  [key=0, style=solid];
m8_30 -> m8_31  [key=0, style=solid, color=red];
m8_30 -> m8_6  [key=2, style=dotted];
m8_30 -> m8_33  [key=1, style=dashed, color=darkseagreen4, label=expectedSequence];
m8_31 -> m8_32  [key=0, style=solid, color=red];
m8_31 -> m8_7  [key=2, style=dotted, color=red];
m8_31 -> m8_8  [key=2, style=dotted, color=red];
m8_31 -> m8_9  [key=2, style=dotted, color=red];
m8_31 -> m8_10  [key=2, style=dotted, color=red];
m8_31 -> m8_36  [key=1, style=dashed, color=red, label=specs];
m8_33 -> m8_34  [key=0, style=solid];
m8_33 -> m8_14  [key=2, style=dotted];
m8_33 -> m8_15  [key=2, style=dotted];
m8_33 -> m8_38  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_32 -> m8_33  [key=0, style=solid];
m8_32 -> m8_11  [key=2, style=dotted];
m8_32 -> m8_12  [key=2, style=dotted];
m8_32 -> m8_13  [key=2, style=dotted];
m8_32 -> m8_35  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_32 -> m8_39  [key=1, style=dashed, color=darkseagreen4, label=result];
m8_34 -> m8_29  [key=0, style=bold, color=blue];
m8_44 -> m8_17  [key=1, style=dashed, color=darkseagreen4, label=specs];
m8_45 -> m8_21  [key=1, style=dashed, color=darkseagreen4, label=result];
m8_46 -> m8_25  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>"];
m8_47 -> m8_36  [key=1, style=dashed, color=darkseagreen4, label=specs];
m8_48 -> m8_39  [key=1, style=dashed, color=darkseagreen4, label=result];
m8_49 -> m8_42  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>"];
}
