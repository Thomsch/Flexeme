digraph  {
n160 [label=builder, span=""];
n161 [label=T, span=""];
n162 [label=shortSwitches, span=""];
n163 [label=settings, span=""];
n164 [label=sep, span=""];
n165 [label=doubQt, span=""];
n0 [label="Entry CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)", span="57-57", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)"];
n1 [label="return parser.FormatCommandLine(options, config => config.NameStyleFormat = NameStyleFormat.PreferLongName);", span="59-59", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)"];
n2 [label="Exit CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)", span="57-57", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)"];
n3 [label="Entry CommandLine.Parser.FormatCommandLine<T>(T, System.Action<CommandLine.UnParserSettings>)", span="71-71", cluster="CommandLine.Parser.FormatCommandLine<T>(T, System.Action<CommandLine.UnParserSettings>)"];
n4 [label="Entry lambda expression", span="59-59", cluster="lambda expression"];
n5 [label="config.NameStyleFormat = NameStyleFormat.PreferLongName", span="59-59", cluster="lambda expression"];
n6 [label="Exit lambda expression", span="59-59", cluster="lambda expression"];
n7 [label="Entry CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", span="71-71", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n8 [label="options == null", span="73-73", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n11 [label="configuration(settings)", span="76-76", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n13 [label="var type = options.GetType()", span="79-79", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n16 [label="var specs =\r\n                (from info in\r\n                    type.GetSpecifications(\r\n                        pi => new { Specification = Specification.FromProperty(pi),\r\n                            Value = pi.GetValue(options, null).NormalizeValue(), PropertyValue = pi.GetValue(options, null) })\r\n                where !info.PropertyValue.IsEmpty()\r\n                select info)\r\n                    .Memorize()", span="85-92", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n56 [label="new { Specification = Specification.FromProperty(pi),\r\n                            Value = pi.GetValue(options, null).NormalizeValue(), PropertyValue = pi.GetValue(options, null) }", span="88-89", cluster="lambda expression"];
n9 [label="throw new ArgumentNullException(''options'');", span="73-73", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n10 [label="var settings = new UnParserSettings()", span="75-75", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n29 [label="Entry CommandLine.UnParserSettings.UnParserSettings()", span="18-18", cluster="CommandLine.UnParserSettings.UnParserSettings()"];
n12 [label="settings.Consumed = true", span="77-77", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n19 [label="var optSpecs = settings.GroupSwitches\r\n                ? allOptSpecs.Where(info => !shortSwitches.Contains(info))\r\n                : allOptSpecs", span="107-109", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n21 [label="builder = settings.GroupSwitches && shortSwitches.Any()\r\n                ? builder.Append('-').Append(string.Join(string.Empty, shortSwitches.Select(\r\n                    info => ((OptionSpecification)info.Specification).ShortName).ToArray())).Append(' ')\r\n                : builder", span="116-119", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n23 [label="optSpecs.ForEach(\r\n                opt => builder.Append(FormatOption((OptionSpecification)opt.Specification, opt.Value, settings)).Append(' '))", span="122-123", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n75 [label="builder.Append(FormatOption((OptionSpecification)opt.Specification, opt.Value, settings)).Append(' ')", span="123-123", cluster="lambda expression"];
n30 [label="Entry System.Action<T>.Invoke(T)", span="0-0", cluster="System.Action<T>.Invoke(T)"];
n14 [label="var builder = new StringBuilder()", span="80-80", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n31 [label="Entry object.GetType()", span="0-0", cluster="object.GetType()"];
n15 [label="type.GetVerbSpecification()\r\n                .Return(verb => builder.Append(verb.Name).Append(' '), builder)", span="82-83", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n32 [label="Entry System.Text.StringBuilder.StringBuilder()", span="0-0", cluster="System.Text.StringBuilder.StringBuilder()"];
n52 [label="builder.Append(verb.Name).Append(' ')", span="83-83", cluster="lambda expression"];
n33 [label="Entry System.Type.GetVerbSpecification()", span="27-27", cluster="System.Type.GetVerbSpecification()"];
n34 [label="Entry Unk.Return", span="", cluster="Unk.Return"];
n51 [label="Entry lambda expression", span="83-83", cluster="lambda expression"];
n17 [label="var allOptSpecs = from info in specs.Where(i => i.Specification.Tag == SpecificationType.Option)\r\n                let o = (OptionSpecification)info.Specification\r\n                where o.TargetType != TargetType.Switch || (o.TargetType == TargetType.Switch && ((bool)info.Value))\r\n                orderby o.UniqueName()\r\n                select info", span="94-98", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n35 [label="Entry System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", span="16-16", cluster="System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)"];
n36 [label="Entry object.IsEmpty()", span="203-203", cluster="object.IsEmpty()"];
n37 [label="Entry Unk.Memorize", span="", cluster="Unk.Memorize"];
n55 [label="Entry lambda expression", span="88-89", cluster="lambda expression"];
n20 [label="var valSpecs = from info in specs.Where(i => i.Specification.Tag == SpecificationType.Value)\r\n                let v = (ValueSpecification)info.Specification\r\n                orderby v.Index\r\n                select info", span="111-114", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n18 [label="var shortSwitches = from info in allOptSpecs\r\n                let o = (OptionSpecification)info.Specification\r\n                where o.TargetType == TargetType.Switch\r\n                where o.ShortName.Length > 0\r\n                orderby o.UniqueName()\r\n                select info", span="100-105", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n38 [label="Entry Unk.Where", span="", cluster="Unk.Where"];
n39 [label="Entry Unk.UniqueName", span="", cluster="Unk.UniqueName"];
n61 [label="Entry lambda expression", span="94-94", cluster="lambda expression"];
n65 [label="!shortSwitches.Contains(info)", span="108-108", cluster="lambda expression"];
n64 [label="Entry lambda expression", span="108-108", cluster="lambda expression"];
n22 [label="builder\r\n                .TrimEndIfMatchWhen(!optSpecs.Any() || builder.TrailingSpaces() > 1, ' ')", span="120-121", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n68 [label="Entry lambda expression", span="111-111", cluster="lambda expression"];
n24 [label="builder\r\n                .TrimEndIfMatchWhen(!valSpecs.Any() || builder.TrailingSpaces() > 1, ' ')", span="124-125", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n25 [label="valSpecs.ForEach(\r\n                val => builder.Append(FormatValue(val.Specification, val.Value)).Append(' '))", span="126-127", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n40 [label="Entry Unk.Any", span="", cluster="Unk.Any"];
n41 [label="Entry System.Text.StringBuilder.Append(char)", span="0-0", cluster="System.Text.StringBuilder.Append(char)"];
n42 [label="Entry Unk.Select", span="", cluster="Unk.Select"];
n43 [label="Entry Unk.ToArray", span="", cluster="Unk.ToArray"];
n44 [label="Entry Unk.Join", span="", cluster="Unk.Join"];
n45 [label="Entry System.Text.StringBuilder.Append(string)", span="0-0", cluster="System.Text.StringBuilder.Append(string)"];
n71 [label="Entry lambda expression", span="118-118", cluster="lambda expression"];
n79 [label="builder.Append(FormatValue(val.Specification, val.Value)).Append(' ')", span="127-127", cluster="lambda expression"];
n26 [label="return builder\r\n                .ToString().TrimEnd(' ');", span="129-130", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n46 [label="Entry System.Text.StringBuilder.TrailingSpaces()", span="101-101", cluster="System.Text.StringBuilder.TrailingSpaces()"];
n47 [label="Entry Unk.TrimEndIfMatchWhen", span="", cluster="Unk.TrimEndIfMatchWhen"];
n48 [label="Entry Unk.ForEach", span="", cluster="Unk.ForEach"];
n74 [label="Entry lambda expression", span="123-123", cluster="lambda expression"];
n78 [label="Entry lambda expression", span="127-127", cluster="lambda expression"];
n27 [label="Exit CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", span="71-71", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n28 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)"];
n49 [label="Entry System.Text.StringBuilder.ToString()", span="0-0", cluster="System.Text.StringBuilder.ToString()"];
n50 [label="Entry string.TrimEnd(params char[])", span="0-0", cluster="string.TrimEnd(params char[])"];
n53 [label="Exit lambda expression", span="83-83", cluster="lambda expression"];
n54 [label="Entry Unk.Append", span="", cluster="Unk.Append"];
n57 [label="Exit lambda expression", span="88-89", cluster="lambda expression"];
n58 [label="Entry CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="105-105", cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)"];
n59 [label="Entry System.Reflection.PropertyInfo.GetValue(object, object[])", span="0-0", cluster="System.Reflection.PropertyInfo.GetValue(object, object[])"];
n60 [label="Entry object.NormalizeValue()", span="192-192", cluster="object.NormalizeValue()"];
n62 [label="i.Specification.Tag == SpecificationType.Option", span="94-94", cluster="lambda expression"];
n63 [label="Exit lambda expression", span="94-94", cluster="lambda expression"];
n66 [label="Exit lambda expression", span="108-108", cluster="lambda expression"];
n67 [label="Entry Unk.Contains", span="", cluster="Unk.Contains"];
n69 [label="i.Specification.Tag == SpecificationType.Value", span="111-111", cluster="lambda expression"];
n70 [label="Exit lambda expression", span="111-111", cluster="lambda expression"];
n72 [label="((OptionSpecification)info.Specification).ShortName", span="118-118", cluster="lambda expression"];
n73 [label="Exit lambda expression", span="118-118", cluster="lambda expression"];
n76 [label="Exit lambda expression", span="123-123", cluster="lambda expression"];
n77 [label="Entry Unk.FormatOption", span="", cluster="Unk.FormatOption"];
n80 [label="Exit lambda expression", span="127-127", cluster="lambda expression"];
n81 [label="Entry Unk.FormatValue", span="", cluster="Unk.FormatValue"];
n82 [label="Entry CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", span="133-133", cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)"];
n83 [label="var builder = new StringBuilder()", span="135-135", cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)"];
n84 [label="spec.TargetType", span="136-136", cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)"];
n86 [label="builder.Append(FormatWithQuotesIfString(value))", span="139-139", cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)"];
n88 [label="var sep = spec.SeperatorOrSpace()", span="142-142", cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)"];
n90 [label="var e = ((IEnumerable)value).GetEnumerator()", span="145-145", cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)"];
n92 [label="builder.Append(format(e.Current)).Append(sep)", span="147-147", cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)"];
n93 [label="builder.TrimEndIfMatch(' ')", span="148-148", cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)"];
n94 [label="return builder.ToString();", span="151-151", cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)"];
n85 [label="TargetType.Scalar", span="138-138", cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)"];
n87 [label="TargetType.Sequence", span="141-141", cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)"];
n89 [label="Func<object, object> format = v\r\n                        => sep == ' ' ? FormatWithQuotesIfString(v) : v", span="143-144", cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)"];
n98 [label="Entry CommandLine.Core.Specification.SeperatorOrSpace()", span="165-165", cluster="CommandLine.Core.Specification.SeperatorOrSpace()"];
n104 [label="sep == ' ' ? FormatWithQuotesIfString(v) : v", span="144-144", cluster="lambda expression"];
n91 [label="e.MoveNext()", span="146-146", cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)"];
n99 [label="Entry System.Collections.IEnumerable.GetEnumerator()", span="0-0", cluster="System.Collections.IEnumerable.GetEnumerator()"];
n100 [label="Entry System.Collections.IEnumerator.MoveNext()", span="0-0", cluster="System.Collections.IEnumerator.MoveNext()"];
n101 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)"];
n97 [label="Entry System.Text.StringBuilder.Append(object)", span="0-0", cluster="System.Text.StringBuilder.Append(object)"];
n102 [label="Entry System.Text.StringBuilder.TrimEndIfMatch(char)", span="85-85", cluster="System.Text.StringBuilder.TrimEndIfMatch(char)"];
n96 [label="Entry CommandLine.UnParserExtensions.FormatWithQuotesIfString(object)", span="154-154", cluster="CommandLine.UnParserExtensions.FormatWithQuotesIfString(object)"];
n95 [label="Exit CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", span="133-133", cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)"];
n103 [label="Entry lambda expression", span="143-144", cluster="lambda expression"];
n105 [label="Exit lambda expression", span="143-144", cluster="lambda expression"];
n106 [label="Func<string, string> doubQt = v\r\n                => v.Contains(''\'''') ? v.Replace(''\'''', ''\\\'''') : v", span="156-157", cluster="CommandLine.UnParserExtensions.FormatWithQuotesIfString(object)"];
n107 [label="return (value as string)\r\n                .ToMaybe()\r\n                .Return(v => v.Contains(' ') || v.Contains(''\'''')\r\n                    ? ''\''''.JoinTo(doubQt(v), ''\'''') : v, value);", span="159-162", cluster="CommandLine.UnParserExtensions.FormatWithQuotesIfString(object)"];
n111 [label="v.Contains(''\'''') ? v.Replace(''\'''', ''\\\'''') : v", span="157-157", cluster="lambda expression"];
n116 [label="v.Contains(' ') || v.Contains(''\'''')\r\n                    ? ''\''''.JoinTo(doubQt(v), ''\'''') : v", span="161-162", cluster="lambda expression"];
n108 [label="Exit CommandLine.UnParserExtensions.FormatWithQuotesIfString(object)", span="154-154", cluster="CommandLine.UnParserExtensions.FormatWithQuotesIfString(object)"];
n109 [label="Entry T.ToMaybe<T>()", span="249-249", cluster="T.ToMaybe<T>()"];
n115 [label="Entry lambda expression", span="161-162", cluster="lambda expression"];
n110 [label="Entry lambda expression", span="156-157", cluster="lambda expression"];
n112 [label="Exit lambda expression", span="156-157", cluster="lambda expression"];
n113 [label="Entry string.Contains(string)", span="0-0", cluster="string.Contains(string)"];
n114 [label="Entry string.Replace(string, string)", span="0-0", cluster="string.Replace(string, string)"];
n117 [label="Exit lambda expression", span="161-162", cluster="lambda expression"];
n118 [label="Entry Unk.doubQt", span="", cluster="Unk.doubQt"];
n119 [label="Entry string.JoinTo(params string[])", span="45-45", cluster="string.JoinTo(params string[])"];
n120 [label="Entry CommandLine.UnParserExtensions.SeperatorOrSpace(CommandLine.Core.Specification)", span="165-165", cluster="CommandLine.UnParserExtensions.SeperatorOrSpace(CommandLine.Core.Specification)"];
n121 [label="return (spec as OptionSpecification).ToMaybe()\r\n                .Return(o => o.Separator != '\0' ? o.Separator : ' ', ' ');", span="167-168", cluster="CommandLine.UnParserExtensions.SeperatorOrSpace(CommandLine.Core.Specification)"];
n122 [label="Exit CommandLine.UnParserExtensions.SeperatorOrSpace(CommandLine.Core.Specification)", span="165-165", cluster="CommandLine.UnParserExtensions.SeperatorOrSpace(CommandLine.Core.Specification)"];
n123 [label="Entry lambda expression", span="168-168", cluster="lambda expression"];
n124 [label="o.Separator != '\0' ? o.Separator : ' '", span="168-168", cluster="lambda expression"];
n125 [label="Exit lambda expression", span="168-168", cluster="lambda expression"];
n126 [label="Entry CommandLine.UnParserExtensions.FormatOption(CommandLine.Core.OptionSpecification, object, CommandLine.UnParserSettings)", span="171-171", cluster="CommandLine.UnParserExtensions.FormatOption(CommandLine.Core.OptionSpecification, object, CommandLine.UnParserSettings)"];
n127 [label="return new StringBuilder()\r\n                    .Append(spec.FormatName(settings))\r\n                    .AppendWhen(spec.TargetType != TargetType.Switch, FormatValue(spec, value))\r\n                .ToString();", span="173-176", cluster="CommandLine.UnParserExtensions.FormatOption(CommandLine.Core.OptionSpecification, object, CommandLine.UnParserSettings)"];
n128 [label="Exit CommandLine.UnParserExtensions.FormatOption(CommandLine.Core.OptionSpecification, object, CommandLine.UnParserSettings)", span="171-171", cluster="CommandLine.UnParserExtensions.FormatOption(CommandLine.Core.OptionSpecification, object, CommandLine.UnParserSettings)"];
n129 [label="Entry CommandLine.Core.OptionSpecification.FormatName(CommandLine.UnParserSettings)", span="179-179", cluster="CommandLine.Core.OptionSpecification.FormatName(CommandLine.UnParserSettings)"];
n130 [label="Entry System.Text.StringBuilder.AppendWhen(bool, params string[])", span="9-9", cluster="System.Text.StringBuilder.AppendWhen(bool, params string[])"];
n131 [label="Entry CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification, CommandLine.UnParserSettings)", span="179-179", cluster="CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification, CommandLine.UnParserSettings)"];
n132 [label="var longName =\r\n                optionSpec.LongName.Length > 0\r\n                && settings.NameStyleFormat == NameStyleFormat.PreferLongName", span="181-183", cluster="CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification, CommandLine.UnParserSettings)"];
n133 [label="return\r\n                new StringBuilder(longName\r\n                    ? ''--''.JoinTo(optionSpec.LongName)\r\n                    : ''-''.JoinTo(optionSpec.ShortName))\r\n                        .AppendIf(longName && settings.UseEqualToken, ''='', '' '')\r\n                    .ToString();", span="184-189", cluster="CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification, CommandLine.UnParserSettings)"];
n134 [label="Exit CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification, CommandLine.UnParserSettings)", span="179-179", cluster="CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification, CommandLine.UnParserSettings)"];
n135 [label="Entry System.Text.StringBuilder.StringBuilder(string)", span="0-0", cluster="System.Text.StringBuilder.StringBuilder(string)"];
n136 [label="Entry System.Text.StringBuilder.AppendIf(bool, string, string)", span="34-34", cluster="System.Text.StringBuilder.AppendIf(bool, string, string)"];
n137 [label="Entry CommandLine.UnParserExtensions.NormalizeValue(object)", span="192-192", cluster="CommandLine.UnParserExtensions.NormalizeValue(object)"];
n138 [label="value != null\r\n                && ReflectionHelper.IsFSharpOptionType(value.GetType())\r\n                && FSharpOptionHelper.IsSome(value)", span="194-196", cluster="CommandLine.UnParserExtensions.NormalizeValue(object)"];
n139 [label="return FSharpOptionHelper.ValueOf(value);", span="198-198", cluster="CommandLine.UnParserExtensions.NormalizeValue(object)"];
n140 [label="return value;", span="200-200", cluster="CommandLine.UnParserExtensions.NormalizeValue(object)"];
n142 [label="Entry CommandLine.Infrastructure.ReflectionHelper.IsFSharpOptionType(System.Type)", span="35-35", cluster="CommandLine.Infrastructure.ReflectionHelper.IsFSharpOptionType(System.Type)"];
n143 [label="Entry CommandLine.Infrastructure.FSharpOptionHelper.IsSome(object)", span="38-38", cluster="CommandLine.Infrastructure.FSharpOptionHelper.IsSome(object)"];
n141 [label="Exit CommandLine.UnParserExtensions.NormalizeValue(object)", span="192-192", cluster="CommandLine.UnParserExtensions.NormalizeValue(object)"];
n144 [label="Entry CommandLine.Infrastructure.FSharpOptionHelper.ValueOf(object)", span="30-30", cluster="CommandLine.Infrastructure.FSharpOptionHelper.ValueOf(object)"];
n145 [label="Entry CommandLine.UnParserExtensions.IsEmpty(object)", span="203-203", cluster="CommandLine.UnParserExtensions.IsEmpty(object)"];
n146 [label="value == null", span="205-205", cluster="CommandLine.UnParserExtensions.IsEmpty(object)"];
n148 [label="ReflectionHelper.IsFSharpOptionType(value.GetType()) && !FSharpOptionHelper.IsSome(value)", span="206-206", cluster="CommandLine.UnParserExtensions.IsEmpty(object)"];
n150 [label="value is ValueType && value.Equals(value.GetType().GetDefaultValue())", span="207-207", cluster="CommandLine.UnParserExtensions.IsEmpty(object)"];
n152 [label="value is string && ((string)value).Length == 0", span="208-208", cluster="CommandLine.UnParserExtensions.IsEmpty(object)"];
n154 [label="value is IEnumerable && !((IEnumerable)value).GetEnumerator().MoveNext()", span="209-209", cluster="CommandLine.UnParserExtensions.IsEmpty(object)"];
n147 [label="return true;", span="205-205", cluster="CommandLine.UnParserExtensions.IsEmpty(object)"];
n149 [label="return true;", span="206-206", cluster="CommandLine.UnParserExtensions.IsEmpty(object)"];
n151 [label="return true;", span="207-207", cluster="CommandLine.UnParserExtensions.IsEmpty(object)"];
n158 [label="Entry System.Type.GetDefaultValue()", span="119-119", cluster="System.Type.GetDefaultValue()"];
n159 [label="Entry object.Equals(object)", span="0-0", cluster="object.Equals(object)"];
n153 [label="return true;", span="208-208", cluster="CommandLine.UnParserExtensions.IsEmpty(object)"];
n155 [label="return true;", span="209-209", cluster="CommandLine.UnParserExtensions.IsEmpty(object)"];
n156 [label="return false;", span="210-210", cluster="CommandLine.UnParserExtensions.IsEmpty(object)"];
n157 [label="Exit CommandLine.UnParserExtensions.IsEmpty(object)", span="203-203", cluster="CommandLine.UnParserExtensions.IsEmpty(object)"];
m0_103 [label="Entry NameInfo.cstr", span="", cluster="NameInfo.cstr", file="SentenceBuilder.cs"];
m0_4 [label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="24-24", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="SentenceBuilder.cs"];
m0_8 [label="return specProps =>\r\n                {\r\n                    var options = specProps\r\n                            .Where(sp => sp.Specification.IsOption())\r\n                            .Where(sp => ((OptionSpecification)sp.Specification).SetName.Length > 0\r\n                                   && sp.Value.IsJust());\r\n                    var groups = options.GroupBy(g => ((OptionSpecification)g.Specification).SetName);\r\n                    if (groups.Count() > 1)\r\n                    {\r\n                        return options.Select(s =>\r\n                            new MutuallyExclusiveSetError(\r\n                                NameInfo.FromOptionSpecification((OptionSpecification)s.Specification)));\r\n                    }\r\n                    return Enumerable.Empty<Error>();\r\n                };", span="26-40", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", color=red, community=0, file="SentenceBuilder.cs"];
m0_9 [label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="24-24", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="SentenceBuilder.cs"];
m0_53 [label="Entry CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", span="149-149", cluster="CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", file="SentenceBuilder.cs"];
m0_6 [label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="71-71", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="SentenceBuilder.cs"];
m0_75 [label="return specProps =>\r\n                {\r\n                    var options = specProps.Where(\r\n                        sp => sp.Specification.TargetType == TargetType.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min.FromJust())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max.FromJust())\r\n                        )\r\n                    );\r\n                    if (options.Any())\r\n                    {\r\n                        return options.Select(s => new SequenceOutOfRangeError(\r\n                            NameInfo.FromSpecification(s.Specification)));\r\n                    }\r\n                    return Enumerable.Empty<Error>();\r\n                };", span="73-89", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="SentenceBuilder.cs"];
m0_76 [label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="71-71", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="SentenceBuilder.cs"];
m0_73 [label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283", cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="SentenceBuilder.cs"];
m0_107 [label="Entry CommandLine.Core.Token.IsName()", span="68-68", cluster="CommandLine.Core.Token.IsName()", file="SentenceBuilder.cs"];
m0_68 [label="Entry CommandLine.Core.Specification.IsValue()", span="15-15", cluster="CommandLine.Core.Specification.IsValue()", file="SentenceBuilder.cs"];
m0_17 [label="Entry Unk.Where", span="", cluster="Unk.Where", file="SentenceBuilder.cs"];
m0_21 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()", file="SentenceBuilder.cs"];
m0_63 [label="Entry Unk.IsNothing", span="", cluster="Unk.IsNothing", file="SentenceBuilder.cs"];
m0_74 [label="Entry Unk.FromSpecification", span="", cluster="Unk.FromSpecification", file="SentenceBuilder.cs"];
m0_86 [label="Entry CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", span="134-134", cluster="CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", file="SentenceBuilder.cs"];
m0_102 [label="Entry RepeatedOptionError.cstr", span="", cluster="RepeatedOptionError.cstr", file="SentenceBuilder.cs"];
m0_7 [label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="92-92", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SentenceBuilder.cs"];
m0_91 [label="return specProps =>\r\n                {\r\n                    var specs = from sp in specProps\r\n                                where sp.Specification.IsOption() && sp.Value.IsJust()\r\n                                select (OptionSpecification)sp.Specification;\r\n                    var options = from t in tokens.Where(t => t.IsName())\r\n                                  join o in specs on t.Text equals o.UniqueName() into to\r\n                                  from o in to.DefaultIfEmpty()\r\n                                  where o != null\r\n                                  select new { o.ShortName, o.LongName };\r\n                    var groups = from x in options\r\n                                 group x by x into g\r\n                                 let count = g.Count()\r\n                                 select new { Value = g.Key, Count = count };\r\n                    var errors = from y in groups\r\n                                 where y.Count > 1\r\n                                 select new RepeatedOptionError(new NameInfo(y.Value.ShortName, y.Value.LongName));\r\n                    return errors;\r\n                };", span="94-112", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SentenceBuilder.cs"];
m0_92 [label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="92-92", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SentenceBuilder.cs"];
m0_69 [label="Entry CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", span="144-144", cluster="CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", file="SentenceBuilder.cs"];
m0_64 [label="Entry Unk.Contains", span="", cluster="Unk.Contains", file="SentenceBuilder.cs"];
m0_90 [label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316", cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="SentenceBuilder.cs"];
m0_0 [label="Entry CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12", cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SentenceBuilder.cs"];
m0_1 [label="return new List<Func<IEnumerable<SpecificationProperty>, IEnumerable<Error>>>\r\n                {\r\n                    EnforceMutuallyExclusiveSet(),\r\n                    EnforceRequired(),\r\n                    EnforceRange(),\r\n                    EnforceSingle(tokens)\r\n                };", span="15-21", cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SentenceBuilder.cs"];
m0_2 [label="Exit CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12", cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SentenceBuilder.cs"];
m0_104 [label="Entry lambda expression", span="99-99", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_11 [label="var options = specProps\r\n                            .Where(sp => sp.Specification.IsOption())\r\n                            .Where(sp => ((OptionSpecification)sp.Specification).SetName.Length > 0\r\n                                   && sp.Value.IsJust())", span="28-31", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_10 [label="Entry lambda expression", span="26-40", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_12 [label="var groups = options.GroupBy(g => ((OptionSpecification)g.Specification).SetName)", span="32-32", cluster="lambda expression", color=red, community=0, file="SentenceBuilder.cs"];
m0_22 [label="Entry lambda expression", span="29-29", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_26 [label="Entry lambda expression", span="30-31", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_14 [label="return options.Select(s =>\r\n                            new MutuallyExclusiveSetError(\r\n                                NameInfo.FromOptionSpecification((OptionSpecification)s.Specification)));", span="35-37", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_13 [label="groups.Count() > 1", span="33-33", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_30 [label="Entry lambda expression", span="32-32", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_15 [label="return Enumerable.Empty<Error>();", span="39-39", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_16 [label="Exit lambda expression", span="26-40", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_33 [label="Entry lambda expression", span="35-37", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_23 [label="sp.Specification.IsOption()", span="29-29", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_24 [label="Exit lambda expression", span="29-29", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_27 [label="((OptionSpecification)sp.Specification).SetName.Length > 0\r\n                                   && sp.Value.IsJust()", span="30-31", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_28 [label="Exit lambda expression", span="30-31", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_31 [label="((OptionSpecification)g.Specification).SetName", span="32-32", cluster="lambda expression", color=red, community=0, file="SentenceBuilder.cs"];
m0_32 [label="Exit lambda expression", span="32-32", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_34 [label="new MutuallyExclusiveSetError(\r\n                                NameInfo.FromOptionSpecification((OptionSpecification)s.Specification))", span="36-37", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_35 [label="Exit lambda expression", span="35-37", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_41 [label="var setsWithTrue =\r\n                    specProps\r\n                        .Where(sp => sp.Specification.IsOption()\r\n                            && sp.Value.IsJust() && sp.Specification.Required)\r\n                        .Select(s => ((OptionSpecification)s.Specification).SetName).ToList()", span="47-51", cluster="lambda expression", color=red, community=0, file="SentenceBuilder.cs"];
m0_42 [label="var requiredButEmpty =\r\n                    specProps\r\n                        .Where(sp => sp.Specification.IsOption())\r\n                        .Where(sp => sp.Value.IsNothing()\r\n                            && sp.Specification.Required\r\n                            && !setsWithTrue.Contains(((OptionSpecification)sp.Specification).SetName))\r\n                    .Concat(specProps\r\n                        .Where(sp => sp.Specification.IsValue()\r\n                            && sp.Value.IsNothing()\r\n                            && sp.Specification.Required)).ToList()", span="53-62", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_40 [label="Entry lambda expression", span="45-68", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_50 [label="Entry lambda expression", span="49-50", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_54 [label="Entry lambda expression", span="51-51", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_61 [label="sp.Value.IsNothing()\r\n                            && sp.Specification.Required\r\n                            && !setsWithTrue.Contains(((OptionSpecification)sp.Specification).SetName)", span="56-58", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_43 [label="requiredButEmpty.Any()", span="63-63", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_57 [label="Entry lambda expression", span="55-55", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_60 [label="Entry lambda expression", span="56-58", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_65 [label="Entry lambda expression", span="60-62", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_44 [label="return requiredButEmpty.Select(s =>new MissingRequiredOptionError(\r\n                            NameInfo.FromSpecification(s.Specification)));", span="64-65", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_45 [label="return Enumerable.Empty<Error>();", span="67-67", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_46 [label="Exit lambda expression", span="45-68", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_70 [label="Entry lambda expression", span="64-65", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_51 [label="sp.Specification.IsOption()\r\n                            && sp.Value.IsJust() && sp.Specification.Required", span="49-50", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_52 [label="Exit lambda expression", span="49-50", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_55 [label="((OptionSpecification)s.Specification).SetName", span="51-51", cluster="lambda expression", color=red, community=0, file="SentenceBuilder.cs"];
m0_56 [label="Exit lambda expression", span="51-51", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_58 [label="sp.Specification.IsOption()", span="55-55", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_59 [label="Exit lambda expression", span="55-55", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_62 [label="Exit lambda expression", span="56-58", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_66 [label="sp.Specification.IsValue()\r\n                            && sp.Value.IsNothing()\r\n                            && sp.Specification.Required", span="60-62", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_67 [label="Exit lambda expression", span="60-62", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_71 [label="new MissingRequiredOptionError(\r\n                            NameInfo.FromSpecification(s.Specification))", span="64-65", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_72 [label="Exit lambda expression", span="64-65", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_78 [label="var options = specProps.Where(\r\n                        sp => sp.Specification.TargetType == TargetType.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min.FromJust())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max.FromJust())\r\n                        )\r\n                    )", span="75-82", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_77 [label="Entry lambda expression", span="73-89", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_79 [label="options.Any()", span="83-83", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_83 [label="Entry lambda expression", span="76-81", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_80 [label="return options.Select(s => new SequenceOutOfRangeError(\r\n                            NameInfo.FromSpecification(s.Specification)));", span="85-86", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_81 [label="return Enumerable.Empty<Error>();", span="88-88", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_82 [label="Exit lambda expression", span="73-89", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_87 [label="Entry lambda expression", span="85-86", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_84 [label="sp.Specification.TargetType == TargetType.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min.FromJust())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max.FromJust())\r\n                        )", span="76-81", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_85 [label="Exit lambda expression", span="76-81", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_88 [label="new SequenceOutOfRangeError(\r\n                            NameInfo.FromSpecification(s.Specification))", span="85-86", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_89 [label="Exit lambda expression", span="85-86", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_95 [label="var options = from t in tokens.Where(t => t.IsName())\r\n                                  join o in specs on t.Text equals o.UniqueName() into to\r\n                                  from o in to.DefaultIfEmpty()\r\n                                  where o != null\r\n                                  select new { o.ShortName, o.LongName }", span="99-103", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_94 [label="var specs = from sp in specProps\r\n                                where sp.Specification.IsOption() && sp.Value.IsJust()\r\n                                select (OptionSpecification)sp.Specification", span="96-98", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_93 [label="Entry lambda expression", span="94-112", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_96 [label="var groups = from x in options\r\n                                 group x by x into g\r\n                                 let count = g.Count()\r\n                                 select new { Value = g.Key, Count = count }", span="104-107", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_97 [label="var errors = from y in groups\r\n                                 where y.Count > 1\r\n                                 select new RepeatedOptionError(new NameInfo(y.Value.ShortName, y.Value.LongName))", span="108-110", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_98 [label="return errors;", span="111-111", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_99 [label="Exit lambda expression", span="94-112", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_105 [label="t.IsName()", span="99-99", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_106 [label="Exit lambda expression", span="99-99", cluster="lambda expression", file="SentenceBuilder.cs"];
m0_48 [label="Entry Unk.Concat", span="", cluster="Unk.Concat", file="SentenceBuilder.cs"];
m0_5 [label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="43-43", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", file="SentenceBuilder.cs"];
m0_38 [label="return specProps =>\r\n            {\r\n                var setsWithTrue =\r\n                    specProps\r\n                        .Where(sp => sp.Specification.IsOption()\r\n                            && sp.Value.IsJust() && sp.Specification.Required)\r\n                        .Select(s => ((OptionSpecification)s.Specification).SetName).ToList();\r\n                \r\n                var requiredButEmpty =\r\n                    specProps\r\n                        .Where(sp => sp.Specification.IsOption())\r\n                        .Where(sp => sp.Value.IsNothing()\r\n                            && sp.Specification.Required\r\n                            && !setsWithTrue.Contains(((OptionSpecification)sp.Specification).SetName))\r\n                    .Concat(specProps\r\n                        .Where(sp => sp.Specification.IsValue()\r\n                            && sp.Value.IsNothing()\r\n                            && sp.Specification.Required)).ToList();\r\n                    if (requiredButEmpty.Any()) {\r\n                        return requiredButEmpty.Select(s =>new MissingRequiredOptionError(\r\n                            NameInfo.FromSpecification(s.Specification)));\r\n                    }\r\n                    return Enumerable.Empty<Error>();\r\n                };", span="45-68", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", color=red, community=0, file="SentenceBuilder.cs"];
m0_39 [label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="43-43", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", file="SentenceBuilder.cs"];
m0_20 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="SentenceBuilder.cs"];
m0_29 [label="Entry Unk.IsJust", span="", cluster="Unk.IsJust", file="SentenceBuilder.cs"];
m0_100 [label="Entry Unk.UniqueName", span="", cluster="Unk.UniqueName", file="SentenceBuilder.cs"];
m0_47 [label="Entry Unk.ToList", span="", cluster="Unk.ToList", file="SentenceBuilder.cs"];
m0_36 [label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294", cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="SentenceBuilder.cs"];
m0_101 [label="Entry Unk.DefaultIfEmpty", span="", cluster="Unk.DefaultIfEmpty", file="SentenceBuilder.cs"];
m0_25 [label="Entry CommandLine.Core.Specification.IsOption()", span="10-10", cluster="CommandLine.Core.Specification.IsOption()", file="SentenceBuilder.cs"];
m0_3 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="SentenceBuilder.cs"];
m0_37 [label="Entry CommandLine.NameInfo.FromOptionSpecification(CommandLine.Core.OptionSpecification)", span="60-60", cluster="CommandLine.NameInfo.FromOptionSpecification(CommandLine.Core.OptionSpecification)", file="SentenceBuilder.cs"];
m0_18 [label="Entry Unk.GroupBy", span="", cluster="Unk.GroupBy", file="SentenceBuilder.cs"];
m0_19 [label="Entry Unk.Count", span="", cluster="Unk.Count", file="SentenceBuilder.cs"];
m0_108 [label=setsWithTrue, span="", file="SentenceBuilder.cs"];
m0_109 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", span="", file="SentenceBuilder.cs"];
n160 -> n52  [key=1, style=dashed, color=darkseagreen4, label=builder];
n160 -> n75  [key=1, style=dashed, color=darkseagreen4, label=builder];
n160 -> n79  [key=1, style=dashed, color=darkseagreen4, label=builder];
n161 -> n56  [key=1, style=dashed, color=darkseagreen4, label=T];
n162 -> n65  [key=1, style=dashed, color=darkseagreen4, label=shortSwitches];
n163 -> n75  [key=1, style=dashed, color=darkseagreen4, label=settings];
n164 -> n104  [key=1, style=dashed, color=darkseagreen4, label=sep];
n165 -> n116  [key=1, style=dashed, color=darkseagreen4, label=doubQt];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=2, style=dotted];
n1 -> n4  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n2 -> n0  [key=0, style=bold, color=blue];
n4 -> n5  [key=0, style=solid];
n5 -> n6  [key=0, style=solid];
n6 -> n4  [key=0, style=bold, color=blue];
n7 -> n8  [key=0, style=solid];
n7 -> n11  [key=1, style=dashed, color=darkseagreen4, label="System.Action<CommandLine.UnParserSettings>"];
n7 -> n13  [key=1, style=dashed, color=darkseagreen4, label=T];
n7 -> n16  [key=1, style=dashed, color=darkseagreen4, label=T];
n7 -> n56  [key=1, style=dashed, color=darkseagreen4, label=T];
n8 -> n9  [key=0, style=solid];
n8 -> n10  [key=0, style=solid];
n11 -> n12  [key=0, style=solid];
n11 -> n30  [key=2, style=dotted];
n13 -> n14  [key=0, style=solid];
n13 -> n31  [key=2, style=dotted];
n13 -> n15  [key=1, style=dashed, color=darkseagreen4, label=type];
n13 -> n16  [key=1, style=dashed, color=darkseagreen4, label=type];
n16 -> n17  [key=0, style=solid];
n16 -> n35  [key=2, style=dotted];
n16 -> n36  [key=2, style=dotted];
n16 -> n37  [key=2, style=dotted];
n16 -> n55  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n16 -> n16  [key=1, style=dashed, color=darkseagreen4, label=info];
n16 -> n20  [key=1, style=dashed, color=darkseagreen4, label=specs];
n56 -> n57  [key=0, style=solid];
n56 -> n58  [key=2, style=dotted];
n56 -> n59  [key=2, style=dotted];
n56 -> n60  [key=2, style=dotted];
n9 -> n27  [key=0, style=solid];
n9 -> n28  [key=2, style=dotted];
n10 -> n11  [key=0, style=solid];
n10 -> n29  [key=2, style=dotted];
n10 -> n12  [key=1, style=dashed, color=darkseagreen4, label=settings];
n10 -> n19  [key=1, style=dashed, color=darkseagreen4, label=settings];
n10 -> n21  [key=1, style=dashed, color=darkseagreen4, label=settings];
n10 -> n23  [key=1, style=dashed, color=darkseagreen4, label=settings];
n10 -> n75  [key=1, style=dashed, color=darkseagreen4, label=settings];
n12 -> n13  [key=0, style=solid];
n19 -> n20  [key=0, style=solid];
n19 -> n38  [key=2, style=dotted];
n19 -> n64  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n19 -> n22  [key=1, style=dashed, color=darkseagreen4, label=optSpecs];
n19 -> n23  [key=1, style=dashed, color=darkseagreen4, label=optSpecs];
n21 -> n22  [key=0, style=solid];
n21 -> n40  [key=2, style=dotted];
n21 -> n41  [key=2, style=dotted];
n21 -> n42  [key=2, style=dotted];
n21 -> n43  [key=2, style=dotted];
n21 -> n44  [key=2, style=dotted];
n21 -> n45  [key=2, style=dotted];
n21 -> n21  [key=1, style=dashed, color=darkseagreen4, label=builder];
n21 -> n71  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n21 -> n23  [key=1, style=dashed, color=darkseagreen4, label=builder];
n21 -> n75  [key=1, style=dashed, color=darkseagreen4, label=builder];
n21 -> n24  [key=1, style=dashed, color=darkseagreen4, label=builder];
n21 -> n25  [key=1, style=dashed, color=darkseagreen4, label=builder];
n21 -> n79  [key=1, style=dashed, color=darkseagreen4, label=builder];
n21 -> n26  [key=1, style=dashed, color=darkseagreen4, label=builder];
n23 -> n24  [key=0, style=solid];
n23 -> n48  [key=2, style=dotted];
n23 -> n74  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n75 -> n76  [key=0, style=solid];
n75 -> n77  [key=2, style=dotted];
n75 -> n45  [key=2, style=dotted];
n75 -> n41  [key=2, style=dotted];
n14 -> n15  [key=0, style=solid];
n14 -> n32  [key=2, style=dotted];
n14 -> n52  [key=1, style=dashed, color=darkseagreen4, label=builder];
n14 -> n21  [key=1, style=dashed, color=darkseagreen4, label=builder];
n15 -> n16  [key=0, style=solid];
n15 -> n33  [key=2, style=dotted];
n15 -> n34  [key=2, style=dotted];
n15 -> n51  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n52 -> n53  [key=0, style=solid];
n52 -> n54  [key=2, style=dotted];
n52 -> n41  [key=2, style=dotted];
n51 -> n52  [key=0, style=solid];
n17 -> n18  [key=0, style=solid];
n17 -> n38  [key=2, style=dotted];
n17 -> n39  [key=2, style=dotted];
n17 -> n61  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n17 -> n17  [key=1, style=dashed, color=darkseagreen4, label=info];
n17 -> n19  [key=1, style=dashed, color=darkseagreen4, label=allOptSpecs];
n55 -> n56  [key=0, style=solid];
n20 -> n21  [key=0, style=solid];
n20 -> n38  [key=2, style=dotted];
n20 -> n68  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n20 -> n20  [key=1, style=dashed, color=darkseagreen4, label=info];
n20 -> n24  [key=1, style=dashed, color=darkseagreen4, label=valSpecs];
n20 -> n25  [key=1, style=dashed, color=darkseagreen4, label=valSpecs];
n18 -> n19  [key=0, style=solid];
n18 -> n39  [key=2, style=dotted];
n18 -> n18  [key=1, style=dashed, color=darkseagreen4, label=info];
n18 -> n65  [key=1, style=dashed, color=darkseagreen4, label=shortSwitches];
n18 -> n21  [key=1, style=dashed, color=darkseagreen4, label=shortSwitches];
n61 -> n62  [key=0, style=solid];
n65 -> n66  [key=0, style=solid];
n65 -> n67  [key=2, style=dotted];
n64 -> n65  [key=0, style=solid];
n22 -> n23  [key=0, style=solid];
n22 -> n40  [key=2, style=dotted];
n22 -> n46  [key=2, style=dotted];
n22 -> n47  [key=2, style=dotted];
n68 -> n69  [key=0, style=solid];
n24 -> n25  [key=0, style=solid];
n24 -> n40  [key=2, style=dotted];
n24 -> n46  [key=2, style=dotted];
n24 -> n47  [key=2, style=dotted];
n25 -> n26  [key=0, style=solid];
n25 -> n48  [key=2, style=dotted];
n25 -> n78  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n71 -> n72  [key=0, style=solid];
n79 -> n80  [key=0, style=solid];
n79 -> n81  [key=2, style=dotted];
n79 -> n45  [key=2, style=dotted];
n79 -> n41  [key=2, style=dotted];
n26 -> n27  [key=0, style=solid];
n26 -> n49  [key=2, style=dotted];
n26 -> n50  [key=2, style=dotted];
n74 -> n75  [key=0, style=solid];
n78 -> n79  [key=0, style=solid];
n27 -> n7  [key=0, style=bold, color=blue];
n53 -> n51  [key=0, style=bold, color=blue];
n57 -> n55  [key=0, style=bold, color=blue];
n62 -> n63  [key=0, style=solid];
n63 -> n61  [key=0, style=bold, color=blue];
n66 -> n64  [key=0, style=bold, color=blue];
n69 -> n70  [key=0, style=solid];
n70 -> n68  [key=0, style=bold, color=blue];
n72 -> n73  [key=0, style=solid];
n73 -> n71  [key=0, style=bold, color=blue];
n76 -> n74  [key=0, style=bold, color=blue];
n80 -> n78  [key=0, style=bold, color=blue];
n82 -> n83  [key=0, style=solid];
n82 -> n84  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
n82 -> n86  [key=1, style=dashed, color=darkseagreen4, label=object];
n82 -> n88  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
n82 -> n90  [key=1, style=dashed, color=darkseagreen4, label=object];
n83 -> n84  [key=0, style=solid];
n83 -> n32  [key=2, style=dotted];
n83 -> n86  [key=1, style=dashed, color=darkseagreen4, label=builder];
n83 -> n92  [key=1, style=dashed, color=darkseagreen4, label=builder];
n83 -> n93  [key=1, style=dashed, color=darkseagreen4, label=builder];
n83 -> n94  [key=1, style=dashed, color=darkseagreen4, label=builder];
n84 -> n85  [key=0, style=solid];
n84 -> n87  [key=0, style=solid];
n86 -> n94  [key=0, style=solid];
n86 -> n96  [key=2, style=dotted];
n86 -> n97  [key=2, style=dotted];
n88 -> n89  [key=0, style=solid];
n88 -> n98  [key=2, style=dotted];
n88 -> n104  [key=1, style=dashed, color=darkseagreen4, label=sep];
n88 -> n92  [key=1, style=dashed, color=darkseagreen4, label=sep];
n90 -> n91  [key=0, style=solid];
n90 -> n99  [key=2, style=dotted];
n90 -> n92  [key=1, style=dashed, color=darkseagreen4, label=e];
n92 -> n91  [key=0, style=solid];
n92 -> n101  [key=2, style=dotted];
n92 -> n97  [key=2, style=dotted];
n92 -> n41  [key=2, style=dotted];
n93 -> n94  [key=0, style=solid];
n93 -> n102  [key=2, style=dotted];
n94 -> n95  [key=0, style=solid];
n94 -> n49  [key=2, style=dotted];
n85 -> n86  [key=0, style=solid];
n87 -> n88  [key=0, style=solid];
n89 -> n90  [key=0, style=solid];
n89 -> n104  [key=1, style=dashed, color=darkseagreen4, label=object];
n89 -> n92  [key=1, style=dashed, color=darkseagreen4, label=format];
n104 -> n105  [key=0, style=solid];
n104 -> n96  [key=2, style=dotted];
n91 -> n92  [key=0, style=solid];
n91 -> n93  [key=0, style=solid];
n91 -> n100  [key=2, style=dotted];
n96 -> n106  [key=0, style=solid];
n96 -> n107  [key=1, style=dashed, color=darkseagreen4, label=object];
n95 -> n82  [key=0, style=bold, color=blue];
n103 -> n104  [key=0, style=solid];
n105 -> n103  [key=0, style=bold, color=blue];
n106 -> n107  [key=0, style=solid];
n106 -> n111  [key=1, style=dashed, color=darkseagreen4, label=string];
n106 -> n116  [key=1, style=dashed, color=darkseagreen4, label=doubQt];
n107 -> n108  [key=0, style=solid];
n107 -> n109  [key=2, style=dotted];
n107 -> n34  [key=2, style=dotted];
n107 -> n115  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n107 -> n33  [key=3, color=darkorchid, style=bold, label="Property variable bool AdditionalNewLineAfterOption"];
n111 -> n112  [key=0, style=solid];
n111 -> n113  [key=2, style=dotted];
n111 -> n114  [key=2, style=dotted];
n116 -> n117  [key=0, style=solid];
n116 -> n67  [key=2, style=dotted];
n116 -> n118  [key=2, style=dotted];
n116 -> n119  [key=2, style=dotted];
n108 -> n96  [key=0, style=bold, color=blue];
n115 -> n116  [key=0, style=solid];
n110 -> n111  [key=0, style=solid];
n112 -> n110  [key=0, style=bold, color=blue];
n117 -> n115  [key=0, style=bold, color=blue];
n120 -> n121  [key=0, style=solid];
n121 -> n122  [key=0, style=solid];
n121 -> n109  [key=2, style=dotted];
n121 -> n34  [key=2, style=dotted];
n121 -> n123  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n122 -> n120  [key=0, style=bold, color=blue];
n123 -> n124  [key=0, style=solid];
n124 -> n125  [key=0, style=solid];
n125 -> n123  [key=0, style=bold, color=blue];
n126 -> n127  [key=0, style=solid];
n127 -> n128  [key=0, style=solid];
n127 -> n32  [key=2, style=dotted];
n127 -> n129  [key=2, style=dotted];
n127 -> n45  [key=2, style=dotted];
n127 -> n82  [key=2, style=dotted];
n127 -> n130  [key=2, style=dotted];
n127 -> n49  [key=2, style=dotted];
n128 -> n126  [key=0, style=bold, color=blue];
n131 -> n132  [key=0, style=solid];
n131 -> n133  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.OptionSpecification"];
n132 -> n133  [key=0, style=solid];
n133 -> n134  [key=0, style=solid];
n133 -> n135  [key=2, style=dotted];
n133 -> n119  [key=2, style=dotted];
n133 -> n136  [key=2, style=dotted];
n133 -> n49  [key=2, style=dotted];
n134 -> n131  [key=0, style=bold, color=blue];
n137 -> n138  [key=0, style=solid];
n137 -> n139  [key=1, style=dashed, color=darkseagreen4, label=object];
n137 -> n140  [key=1, style=dashed, color=darkseagreen4, label=object];
n138 -> n139  [key=0, style=solid];
n138 -> n140  [key=0, style=solid];
n138 -> n31  [key=2, style=dotted];
n138 -> n142  [key=2, style=dotted];
n138 -> n143  [key=2, style=dotted];
n139 -> n141  [key=0, style=solid];
n139 -> n144  [key=2, style=dotted];
n140 -> n141  [key=0, style=solid];
n141 -> n137  [key=0, style=bold, color=blue];
n145 -> n146  [key=0, style=solid];
n145 -> n148  [key=1, style=dashed, color=darkseagreen4, label=object];
n145 -> n150  [key=1, style=dashed, color=darkseagreen4, label=object];
n145 -> n152  [key=1, style=dashed, color=darkseagreen4, label=object];
n145 -> n154  [key=1, style=dashed, color=darkseagreen4, label=object];
n146 -> n147  [key=0, style=solid];
n146 -> n148  [key=0, style=solid];
n148 -> n149  [key=0, style=solid];
n148 -> n150  [key=0, style=solid];
n148 -> n31  [key=2, style=dotted];
n148 -> n142  [key=2, style=dotted];
n148 -> n143  [key=2, style=dotted];
n150 -> n151  [key=0, style=solid];
n150 -> n152  [key=0, style=solid];
n150 -> n31  [key=2, style=dotted];
n150 -> n158  [key=2, style=dotted];
n150 -> n159  [key=2, style=dotted];
n152 -> n153  [key=0, style=solid];
n152 -> n154  [key=0, style=solid];
n154 -> n155  [key=0, style=solid];
n154 -> n156  [key=0, style=solid];
n154 -> n99  [key=2, style=dotted];
n154 -> n100  [key=2, style=dotted];
n147 -> n157  [key=0, style=solid];
n149 -> n157  [key=0, style=solid];
n151 -> n157  [key=0, style=solid];
n153 -> n157  [key=0, style=solid];
n155 -> n157  [key=0, style=solid];
n156 -> n157  [key=0, style=solid];
n157 -> n145  [key=0, style=bold, color=blue];
m0_4 -> m0_8  [key=0, style=solid, color=red];
m0_8 -> m0_9  [key=0, style=solid, color=red];
m0_8 -> m0_11  [key=1, style=dashed, color=red, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m0_9 -> m0_4  [key=0, style=bold, color=blue];
m0_6 -> m0_75  [key=0, style=solid];
m0_75 -> m0_76  [key=0, style=solid];
m0_75 -> m0_78  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m0_75 -> m0_75  [key=3, color=darkorchid, style=bold, label="Property variable System.Func<bool, string> VersionCommandText"];
m0_76 -> m0_6  [key=0, style=bold, color=blue];
m0_7 -> m0_91  [key=0, style=solid];
m0_7 -> m0_95  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
m0_91 -> m0_92  [key=0, style=solid];
m0_91 -> m0_94  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m0_92 -> m0_7  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_3  [key=2, style=dotted];
m0_1 -> m0_4  [key=2, style=dotted];
m0_1 -> m0_5  [key=2, style=dotted];
m0_1 -> m0_6  [key=2, style=dotted];
m0_1 -> m0_7  [key=2, style=dotted];
m0_2 -> m0_0  [key=0, style=bold, color=blue];
m0_104 -> m0_105  [key=0, style=solid];
m0_11 -> m0_12  [key=0, style=solid, color=red];
m0_11 -> m0_17  [key=2, style=dotted];
m0_11 -> m0_22  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_11 -> m0_26  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_11 -> m0_14  [key=1, style=dashed, color=darkseagreen4, label=options];
m0_10 -> m0_11  [key=0, style=solid];
m0_12 -> m0_13  [key=0, style=solid, color=red];
m0_12 -> m0_18  [key=2, style=dotted, color=red];
m0_12 -> m0_30  [key=1, style=dashed, color=red, label="lambda expression"];
m0_22 -> m0_23  [key=0, style=solid];
m0_26 -> m0_27  [key=0, style=solid];
m0_14 -> m0_16  [key=0, style=solid];
m0_14 -> m0_20  [key=2, style=dotted];
m0_14 -> m0_33  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_13 -> m0_14  [key=0, style=solid];
m0_13 -> m0_15  [key=0, style=solid];
m0_13 -> m0_19  [key=2, style=dotted];
m0_30 -> m0_31  [key=0, style=solid, color=red];
m0_15 -> m0_16  [key=0, style=solid];
m0_15 -> m0_21  [key=2, style=dotted];
m0_16 -> m0_10  [key=0, style=bold, color=blue];
m0_33 -> m0_34  [key=0, style=solid];
m0_23 -> m0_24  [key=0, style=solid];
m0_23 -> m0_25  [key=2, style=dotted];
m0_24 -> m0_22  [key=0, style=bold, color=blue];
m0_27 -> m0_28  [key=0, style=solid];
m0_27 -> m0_29  [key=2, style=dotted];
m0_28 -> m0_26  [key=0, style=bold, color=blue];
m0_31 -> m0_32  [key=0, style=solid, color=red];
m0_32 -> m0_30  [key=0, style=bold, color=blue];
m0_34 -> m0_35  [key=0, style=solid];
m0_34 -> m0_36  [key=2, style=dotted];
m0_34 -> m0_37  [key=2, style=dotted];
m0_35 -> m0_33  [key=0, style=bold, color=blue];
m0_41 -> m0_42  [key=0, style=solid, color=red];
m0_41 -> m0_17  [key=2, style=dotted, color=red];
m0_41 -> m0_20  [key=2, style=dotted, color=red];
m0_41 -> m0_47  [key=2, style=dotted, color=red];
m0_41 -> m0_50  [key=1, style=dashed, color=red, label="lambda expression"];
m0_41 -> m0_54  [key=1, style=dashed, color=red, label="lambda expression"];
m0_41 -> m0_61  [key=1, style=dashed, color=red, label=setsWithTrue];
m0_42 -> m0_43  [key=0, style=solid];
m0_42 -> m0_17  [key=2, style=dotted];
m0_42 -> m0_48  [key=2, style=dotted];
m0_42 -> m0_47  [key=2, style=dotted];
m0_42 -> m0_57  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_42 -> m0_60  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_42 -> m0_65  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_42 -> m0_44  [key=1, style=dashed, color=darkseagreen4, label=requiredButEmpty];
m0_40 -> m0_41  [key=0, style=solid, color=red];
m0_40 -> m0_42  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m0_50 -> m0_51  [key=0, style=solid];
m0_54 -> m0_55  [key=0, style=solid, color=red];
m0_61 -> m0_62  [key=0, style=solid];
m0_61 -> m0_63  [key=2, style=dotted];
m0_61 -> m0_64  [key=2, style=dotted];
m0_43 -> m0_44  [key=0, style=solid];
m0_43 -> m0_45  [key=0, style=solid];
m0_43 -> n40  [key=2, style=dotted];
m0_57 -> m0_58  [key=0, style=solid];
m0_60 -> m0_61  [key=0, style=solid];
m0_65 -> m0_66  [key=0, style=solid];
m0_44 -> m0_46  [key=0, style=solid];
m0_44 -> m0_20  [key=2, style=dotted];
m0_44 -> m0_70  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_45 -> m0_46  [key=0, style=solid];
m0_45 -> m0_21  [key=2, style=dotted];
m0_46 -> m0_40  [key=0, style=bold, color=blue];
m0_70 -> m0_71  [key=0, style=solid];
m0_51 -> m0_52  [key=0, style=solid];
m0_51 -> m0_25  [key=2, style=dotted];
m0_51 -> m0_53  [key=2, style=dotted];
m0_52 -> m0_50  [key=0, style=bold, color=blue];
m0_55 -> m0_56  [key=0, style=solid, color=red];
m0_56 -> m0_54  [key=0, style=bold, color=blue];
m0_58 -> m0_59  [key=0, style=solid];
m0_58 -> m0_25  [key=2, style=dotted];
m0_59 -> m0_57  [key=0, style=bold, color=blue];
m0_62 -> m0_60  [key=0, style=bold, color=blue];
m0_66 -> m0_67  [key=0, style=solid];
m0_66 -> m0_68  [key=2, style=dotted];
m0_66 -> m0_69  [key=2, style=dotted];
m0_67 -> m0_65  [key=0, style=bold, color=blue];
m0_71 -> m0_72  [key=0, style=solid];
m0_71 -> m0_73  [key=2, style=dotted];
m0_71 -> m0_74  [key=2, style=dotted];
m0_72 -> m0_70  [key=0, style=bold, color=blue];
m0_78 -> m0_79  [key=0, style=solid];
m0_78 -> m0_17  [key=2, style=dotted];
m0_78 -> m0_83  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_78 -> m0_80  [key=1, style=dashed, color=darkseagreen4, label=options];
m0_77 -> m0_78  [key=0, style=solid];
m0_79 -> m0_80  [key=0, style=solid];
m0_79 -> m0_81  [key=0, style=solid];
m0_79 -> n40  [key=2, style=dotted];
m0_83 -> m0_84  [key=0, style=solid];
m0_80 -> m0_82  [key=0, style=solid];
m0_80 -> m0_20  [key=2, style=dotted];
m0_80 -> m0_87  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_81 -> m0_82  [key=0, style=solid];
m0_81 -> m0_21  [key=2, style=dotted];
m0_82 -> m0_77  [key=0, style=bold, color=blue];
m0_87 -> m0_88  [key=0, style=solid];
m0_84 -> m0_85  [key=0, style=solid];
m0_84 -> m0_53  [key=2, style=dotted];
m0_84 -> m0_86  [key=2, style=dotted];
m0_85 -> m0_83  [key=0, style=bold, color=blue];
m0_88 -> m0_89  [key=0, style=solid];
m0_88 -> m0_90  [key=2, style=dotted];
m0_88 -> m0_74  [key=2, style=dotted];
m0_89 -> m0_87  [key=0, style=bold, color=blue];
m0_95 -> m0_96  [key=0, style=solid];
m0_95 -> m0_17  [key=2, style=dotted];
m0_95 -> m0_100  [key=2, style=dotted];
m0_95 -> m0_101  [key=2, style=dotted];
m0_95 -> m0_104  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_95 -> m0_95  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_94 -> m0_95  [key=0, style=solid];
m0_94 -> m0_25  [key=2, style=dotted];
m0_94 -> m0_53  [key=2, style=dotted];
m0_94 -> m0_94  [key=1, style=dashed, color=darkseagreen4, label=sp];
m0_93 -> m0_94  [key=0, style=solid];
m0_96 -> m0_97  [key=0, style=solid];
m0_96 -> m0_19  [key=2, style=dotted];
m0_96 -> m0_96  [key=1, style=dashed, color=darkseagreen4, label=x];
m0_97 -> m0_98  [key=0, style=solid];
m0_97 -> m0_102  [key=2, style=dotted];
m0_97 -> m0_103  [key=2, style=dotted];
m0_97 -> m0_97  [key=1, style=dashed, color=darkseagreen4, label=y];
m0_98 -> m0_99  [key=0, style=solid];
m0_99 -> m0_93  [key=0, style=bold, color=blue];
m0_105 -> m0_106  [key=0, style=solid];
m0_105 -> m0_107  [key=2, style=dotted];
m0_106 -> m0_104  [key=0, style=bold, color=blue];
m0_5 -> m0_38  [key=0, style=solid, color=red];
m0_38 -> m0_39  [key=0, style=solid, color=red];
m0_38 -> m0_41  [key=1, style=dashed, color=red, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m0_38 -> m0_42  [key=1, style=dashed, color=red, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m0_38 -> m0_38  [key=3, color=red, style=bold, label="Property variable System.Func<string> ErrorsHeadingText"];
m0_39 -> m0_5  [key=0, style=bold, color=blue];
m0_37 -> m0_38  [key=3, color=red, style=bold, label="Property variable System.Func<string> RequiredWord"];
m0_108 -> m0_61  [key=1, style=dashed, color=darkseagreen4, label=setsWithTrue];
m0_109 -> m0_95  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
}
