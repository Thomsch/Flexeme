digraph  {
n160 [label=builder, span=""];
n161 [label=T, span=""];
n162 [label=shortSwitches, span=""];
n163 [label=settings, span=""];
n164 [label=sep, span=""];
n165 [label=doubQt, span=""];
n0 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)", label="Entry CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)", span="57-57"];
n1 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)", label="return parser.FormatCommandLine(options, config => config.NameStyleFormat = NameStyleFormat.PreferLongName);", span="59-59"];
n2 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)", label="Exit CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)", span="57-57"];
n3 [cluster="CommandLine.Parser.FormatCommandLine<T>(T, System.Action<CommandLine.UnParserSettings>)", label="Entry CommandLine.Parser.FormatCommandLine<T>(T, System.Action<CommandLine.UnParserSettings>)", span="71-71"];
n4 [cluster="lambda expression", label="Entry lambda expression", span="59-59"];
n5 [cluster="lambda expression", label="config.NameStyleFormat = NameStyleFormat.PreferLongName", span="59-59"];
n6 [cluster="lambda expression", label="Exit lambda expression", span="59-59"];
n7 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", label="Entry CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", span="71-71"];
n8 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", label="options == null", span="73-73"];
n11 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", label="configuration(settings)", span="76-76"];
n13 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", label="var type = options.GetType()", span="79-79"];
n16 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", label="var specs =\r\n                (from info in\r\n                    type.GetSpecifications(\r\n                        pi => new { Specification = Specification.FromProperty(pi),\r\n                            Value = pi.GetValue(options, null).NormalizeValue(), PropertyValue = pi.GetValue(options, null) })\r\n                where !info.PropertyValue.IsEmpty()\r\n                select info)\r\n                    .Memorize()", span="85-92"];
n56 [cluster="lambda expression", label="new { Specification = Specification.FromProperty(pi),\r\n                            Value = pi.GetValue(options, null).NormalizeValue(), PropertyValue = pi.GetValue(options, null) }", span="88-89"];
n9 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", label="throw new ArgumentNullException(''options'');", span="73-73"];
n10 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", label="var settings = new UnParserSettings()", span="75-75"];
n29 [cluster="CommandLine.UnParserSettings.UnParserSettings()", label="Entry CommandLine.UnParserSettings.UnParserSettings()", span="18-18"];
n12 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", label="settings.Consumed = true", span="77-77"];
n19 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", label="var optSpecs = settings.GroupSwitches\r\n                ? allOptSpecs.Where(info => !shortSwitches.Contains(info))\r\n                : allOptSpecs", span="107-109"];
n21 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", label="builder = settings.GroupSwitches && shortSwitches.Any()\r\n                ? builder.Append('-').Append(string.Join(string.Empty, shortSwitches.Select(\r\n                    info => ((OptionSpecification)info.Specification).ShortName).ToArray())).Append(' ')\r\n                : builder", span="116-119"];
n23 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", label="optSpecs.ForEach(\r\n                opt => builder.Append(FormatOption((OptionSpecification)opt.Specification, opt.Value, settings)).Append(' '))", span="122-123"];
n75 [cluster="lambda expression", label="builder.Append(FormatOption((OptionSpecification)opt.Specification, opt.Value, settings)).Append(' ')", span="123-123"];
n30 [cluster="System.Action<T>.Invoke(T)", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
n14 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", label="var builder = new StringBuilder()", span="80-80"];
n31 [cluster="object.GetType()", label="Entry object.GetType()", span="0-0"];
n15 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", label="type.GetVerbSpecification()\r\n                .Return(verb => builder.Append(verb.Name).Append(' '), builder)", span="82-83"];
n32 [cluster="System.Text.StringBuilder.StringBuilder()", label="Entry System.Text.StringBuilder.StringBuilder()", span="0-0"];
n52 [cluster="lambda expression", label="builder.Append(verb.Name).Append(' ')", span="83-83"];
n33 [cluster="System.Type.GetVerbSpecification()", label="Entry System.Type.GetVerbSpecification()", span="27-27"];
n34 [cluster="Unk.Return", label="Entry Unk.Return", span=""];
n51 [cluster="lambda expression", label="Entry lambda expression", span="83-83"];
n17 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", label="var allOptSpecs = from info in specs.Where(i => i.Specification.Tag == SpecificationType.Option)\r\n                let o = (OptionSpecification)info.Specification\r\n                where o.TargetType != TargetType.Switch || (o.TargetType == TargetType.Switch && ((bool)info.Value))\r\n                orderby o.UniqueName()\r\n                select info", span="94-98"];
n35 [cluster="System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", label="Entry System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", span="16-16"];
n36 [cluster="object.IsEmpty()", label="Entry object.IsEmpty()", span="203-203"];
n37 [cluster="Unk.Memorize", label="Entry Unk.Memorize", span=""];
n55 [cluster="lambda expression", label="Entry lambda expression", span="88-89"];
n20 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", label="var valSpecs = from info in specs.Where(i => i.Specification.Tag == SpecificationType.Value)\r\n                let v = (ValueSpecification)info.Specification\r\n                orderby v.Index\r\n                select info", span="111-114"];
n18 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", label="var shortSwitches = from info in allOptSpecs\r\n                let o = (OptionSpecification)info.Specification\r\n                where o.TargetType == TargetType.Switch\r\n                where o.ShortName.Length > 0\r\n                orderby o.UniqueName()\r\n                select info", span="100-105"];
n38 [cluster="Unk.Where", label="Entry Unk.Where", span=""];
n39 [cluster="Unk.UniqueName", label="Entry Unk.UniqueName", span=""];
n61 [cluster="lambda expression", label="Entry lambda expression", span="94-94"];
n65 [cluster="lambda expression", label="!shortSwitches.Contains(info)", span="108-108"];
n64 [cluster="lambda expression", label="Entry lambda expression", span="108-108"];
n22 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", label="builder\r\n                .TrimEndIfMatchWhen(!optSpecs.Any() || builder.TrailingSpaces() > 1, ' ')", span="120-121"];
n68 [cluster="lambda expression", label="Entry lambda expression", span="111-111"];
n24 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", label="builder\r\n                .TrimEndIfMatchWhen(!valSpecs.Any() || builder.TrailingSpaces() > 1, ' ')", span="124-125"];
n25 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", label="valSpecs.ForEach(\r\n                val => builder.Append(FormatValue(val.Specification, val.Value)).Append(' '))", span="126-127"];
n40 [cluster="Unk.Any", label="Entry Unk.Any", span=""];
n41 [cluster="System.Text.StringBuilder.Append(char)", label="Entry System.Text.StringBuilder.Append(char)", span="0-0"];
n42 [cluster="Unk.Select", label="Entry Unk.Select", span=""];
n43 [cluster="Unk.ToArray", label="Entry Unk.ToArray", span=""];
n44 [cluster="Unk.Join", label="Entry Unk.Join", span=""];
n45 [cluster="System.Text.StringBuilder.Append(string)", label="Entry System.Text.StringBuilder.Append(string)", span="0-0"];
n71 [cluster="lambda expression", label="Entry lambda expression", span="118-118"];
n79 [cluster="lambda expression", label="builder.Append(FormatValue(val.Specification, val.Value)).Append(' ')", span="127-127"];
n26 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", label="return builder\r\n                .ToString().TrimEnd(' ');", span="129-130"];
n46 [cluster="System.Text.StringBuilder.TrailingSpaces()", label="Entry System.Text.StringBuilder.TrailingSpaces()", span="101-101"];
n47 [cluster="Unk.TrimEndIfMatchWhen", label="Entry Unk.TrimEndIfMatchWhen", span=""];
n48 [cluster="Unk.ForEach", label="Entry Unk.ForEach", span=""];
n74 [cluster="lambda expression", label="Entry lambda expression", span="123-123"];
n78 [cluster="lambda expression", label="Entry lambda expression", span="127-127"];
n27 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", label="Exit CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", span="71-71"];
n28 [cluster="System.ArgumentNullException.ArgumentNullException(string)", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
n49 [cluster="System.Text.StringBuilder.ToString()", label="Entry System.Text.StringBuilder.ToString()", span="0-0"];
n50 [cluster="string.TrimEnd(params char[])", label="Entry string.TrimEnd(params char[])", span="0-0"];
n53 [cluster="lambda expression", label="Exit lambda expression", span="83-83"];
n54 [cluster="Unk.Append", label="Entry Unk.Append", span=""];
n57 [cluster="lambda expression", label="Exit lambda expression", span="88-89"];
n58 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", label="Entry CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="105-105"];
n59 [cluster="System.Reflection.PropertyInfo.GetValue(object, object[])", label="Entry System.Reflection.PropertyInfo.GetValue(object, object[])", span="0-0"];
n60 [cluster="object.NormalizeValue()", label="Entry object.NormalizeValue()", span="192-192"];
n62 [cluster="lambda expression", label="i.Specification.Tag == SpecificationType.Option", span="94-94"];
n63 [cluster="lambda expression", label="Exit lambda expression", span="94-94"];
n66 [cluster="lambda expression", label="Exit lambda expression", span="108-108"];
n67 [cluster="Unk.Contains", label="Entry Unk.Contains", span=""];
n69 [cluster="lambda expression", label="i.Specification.Tag == SpecificationType.Value", span="111-111"];
n70 [cluster="lambda expression", label="Exit lambda expression", span="111-111"];
n72 [cluster="lambda expression", label="((OptionSpecification)info.Specification).ShortName", span="118-118"];
n73 [cluster="lambda expression", label="Exit lambda expression", span="118-118"];
n76 [cluster="lambda expression", label="Exit lambda expression", span="123-123"];
n77 [cluster="Unk.FormatOption", label="Entry Unk.FormatOption", span=""];
n80 [cluster="lambda expression", label="Exit lambda expression", span="127-127"];
n81 [cluster="Unk.FormatValue", label="Entry Unk.FormatValue", span=""];
n82 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", label="Entry CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", span="133-133"];
n83 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", label="var builder = new StringBuilder()", span="135-135"];
n84 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", label="spec.TargetType", span="136-136"];
n86 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", label="builder.Append(FormatWithQuotesIfString(value))", span="139-139"];
n88 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", label="var sep = spec.SeperatorOrSpace()", span="142-142"];
n90 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", label="var e = ((IEnumerable)value).GetEnumerator()", span="145-145"];
n92 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", label="builder.Append(format(e.Current)).Append(sep)", span="147-147"];
n93 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", label="builder.TrimEndIfMatch(' ')", span="148-148"];
n94 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", label="return builder.ToString();", span="151-151"];
n85 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", label="TargetType.Scalar", span="138-138"];
n87 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", label="TargetType.Sequence", span="141-141"];
n89 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", label="Func<object, object> format = v\r\n                        => sep == ' ' ? FormatWithQuotesIfString(v) : v", span="143-144"];
n98 [cluster="CommandLine.Core.Specification.SeperatorOrSpace()", label="Entry CommandLine.Core.Specification.SeperatorOrSpace()", span="165-165"];
n104 [cluster="lambda expression", label="sep == ' ' ? FormatWithQuotesIfString(v) : v", span="144-144"];
n91 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", label="e.MoveNext()", span="146-146"];
n99 [cluster="System.Collections.IEnumerable.GetEnumerator()", label="Entry System.Collections.IEnumerable.GetEnumerator()", span="0-0"];
n100 [cluster="System.Collections.IEnumerator.MoveNext()", label="Entry System.Collections.IEnumerator.MoveNext()", span="0-0"];
n101 [cluster="System.Func<T, TResult>.Invoke(T)", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
n97 [cluster="System.Text.StringBuilder.Append(object)", label="Entry System.Text.StringBuilder.Append(object)", span="0-0"];
n102 [cluster="System.Text.StringBuilder.TrimEndIfMatch(char)", label="Entry System.Text.StringBuilder.TrimEndIfMatch(char)", span="85-85"];
n96 [cluster="CommandLine.UnParserExtensions.FormatWithQuotesIfString(object)", label="Entry CommandLine.UnParserExtensions.FormatWithQuotesIfString(object)", span="154-154"];
n95 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", label="Exit CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", span="133-133"];
n103 [cluster="lambda expression", label="Entry lambda expression", span="143-144"];
n105 [cluster="lambda expression", label="Exit lambda expression", span="143-144"];
n106 [cluster="CommandLine.UnParserExtensions.FormatWithQuotesIfString(object)", label="Func<string, string> doubQt = v\r\n                => v.Contains(''\'''') ? v.Replace(''\'''', ''\\\'''') : v", span="156-157"];
n107 [cluster="CommandLine.UnParserExtensions.FormatWithQuotesIfString(object)", label="return (value as string)\r\n                .ToMaybe()\r\n                .Return(v => v.Contains(' ') || v.Contains(''\'''')\r\n                    ? ''\''''.JoinTo(doubQt(v), ''\'''') : v, value);", span="159-162"];
n111 [cluster="lambda expression", label="v.Contains(''\'''') ? v.Replace(''\'''', ''\\\'''') : v", span="157-157"];
n116 [cluster="lambda expression", label="v.Contains(' ') || v.Contains(''\'''')\r\n                    ? ''\''''.JoinTo(doubQt(v), ''\'''') : v", span="161-162"];
n108 [cluster="CommandLine.UnParserExtensions.FormatWithQuotesIfString(object)", label="Exit CommandLine.UnParserExtensions.FormatWithQuotesIfString(object)", span="154-154"];
n109 [cluster="T.ToMaybe<T>()", label="Entry T.ToMaybe<T>()", span="249-249"];
n115 [cluster="lambda expression", label="Entry lambda expression", span="161-162"];
n110 [cluster="lambda expression", label="Entry lambda expression", span="156-157"];
n112 [cluster="lambda expression", label="Exit lambda expression", span="156-157"];
n113 [cluster="string.Contains(string)", label="Entry string.Contains(string)", span="0-0"];
n114 [cluster="string.Replace(string, string)", label="Entry string.Replace(string, string)", span="0-0"];
n117 [cluster="lambda expression", label="Exit lambda expression", span="161-162"];
n118 [cluster="Unk.doubQt", label="Entry Unk.doubQt", span=""];
n119 [cluster="string.JoinTo(params string[])", label="Entry string.JoinTo(params string[])", span="45-45"];
n120 [cluster="CommandLine.UnParserExtensions.SeperatorOrSpace(CommandLine.Core.Specification)", label="Entry CommandLine.UnParserExtensions.SeperatorOrSpace(CommandLine.Core.Specification)", span="165-165"];
n121 [cluster="CommandLine.UnParserExtensions.SeperatorOrSpace(CommandLine.Core.Specification)", label="return (spec as OptionSpecification).ToMaybe()\r\n                .Return(o => o.Separator != '\0' ? o.Separator : ' ', ' ');", span="167-168"];
n122 [cluster="CommandLine.UnParserExtensions.SeperatorOrSpace(CommandLine.Core.Specification)", label="Exit CommandLine.UnParserExtensions.SeperatorOrSpace(CommandLine.Core.Specification)", span="165-165"];
n123 [cluster="lambda expression", label="Entry lambda expression", span="168-168"];
n124 [cluster="lambda expression", label="o.Separator != '\0' ? o.Separator : ' '", span="168-168"];
n125 [cluster="lambda expression", label="Exit lambda expression", span="168-168"];
n126 [cluster="CommandLine.UnParserExtensions.FormatOption(CommandLine.Core.OptionSpecification, object, CommandLine.UnParserSettings)", label="Entry CommandLine.UnParserExtensions.FormatOption(CommandLine.Core.OptionSpecification, object, CommandLine.UnParserSettings)", span="171-171"];
n127 [cluster="CommandLine.UnParserExtensions.FormatOption(CommandLine.Core.OptionSpecification, object, CommandLine.UnParserSettings)", label="return new StringBuilder()\r\n                    .Append(spec.FormatName(settings))\r\n                    .AppendWhen(spec.TargetType != TargetType.Switch, FormatValue(spec, value))\r\n                .ToString();", span="173-176"];
n128 [cluster="CommandLine.UnParserExtensions.FormatOption(CommandLine.Core.OptionSpecification, object, CommandLine.UnParserSettings)", label="Exit CommandLine.UnParserExtensions.FormatOption(CommandLine.Core.OptionSpecification, object, CommandLine.UnParserSettings)", span="171-171"];
n129 [cluster="CommandLine.Core.OptionSpecification.FormatName(CommandLine.UnParserSettings)", label="Entry CommandLine.Core.OptionSpecification.FormatName(CommandLine.UnParserSettings)", span="179-179"];
n130 [cluster="System.Text.StringBuilder.AppendWhen(bool, params string[])", label="Entry System.Text.StringBuilder.AppendWhen(bool, params string[])", span="9-9"];
n131 [cluster="CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification, CommandLine.UnParserSettings)", label="Entry CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification, CommandLine.UnParserSettings)", span="179-179"];
n132 [cluster="CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification, CommandLine.UnParserSettings)", label="var longName =\r\n                optionSpec.LongName.Length > 0\r\n                && settings.NameStyleFormat == NameStyleFormat.PreferLongName", span="181-183"];
n133 [cluster="CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification, CommandLine.UnParserSettings)", label="return\r\n                new StringBuilder(longName\r\n                    ? ''--''.JoinTo(optionSpec.LongName)\r\n                    : ''-''.JoinTo(optionSpec.ShortName))\r\n                        .AppendIf(longName && settings.UseEqualToken, ''='', '' '')\r\n                    .ToString();", span="184-189"];
n134 [cluster="CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification, CommandLine.UnParserSettings)", label="Exit CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification, CommandLine.UnParserSettings)", span="179-179"];
n135 [cluster="System.Text.StringBuilder.StringBuilder(string)", label="Entry System.Text.StringBuilder.StringBuilder(string)", span="0-0"];
n136 [cluster="System.Text.StringBuilder.AppendIf(bool, string, string)", label="Entry System.Text.StringBuilder.AppendIf(bool, string, string)", span="34-34"];
n137 [cluster="CommandLine.UnParserExtensions.NormalizeValue(object)", label="Entry CommandLine.UnParserExtensions.NormalizeValue(object)", span="192-192"];
n138 [cluster="CommandLine.UnParserExtensions.NormalizeValue(object)", label="value != null\r\n                && ReflectionHelper.IsFSharpOptionType(value.GetType())\r\n                && FSharpOptionHelper.IsSome(value)", span="194-196"];
n139 [cluster="CommandLine.UnParserExtensions.NormalizeValue(object)", label="return FSharpOptionHelper.ValueOf(value);", span="198-198"];
n140 [cluster="CommandLine.UnParserExtensions.NormalizeValue(object)", label="return value;", span="200-200"];
n142 [cluster="CommandLine.Infrastructure.ReflectionHelper.IsFSharpOptionType(System.Type)", label="Entry CommandLine.Infrastructure.ReflectionHelper.IsFSharpOptionType(System.Type)", span="35-35"];
n143 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.IsSome(object)", label="Entry CommandLine.Infrastructure.FSharpOptionHelper.IsSome(object)", span="38-38"];
n141 [cluster="CommandLine.UnParserExtensions.NormalizeValue(object)", label="Exit CommandLine.UnParserExtensions.NormalizeValue(object)", span="192-192"];
n144 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.ValueOf(object)", label="Entry CommandLine.Infrastructure.FSharpOptionHelper.ValueOf(object)", span="30-30"];
n145 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", label="Entry CommandLine.UnParserExtensions.IsEmpty(object)", span="203-203"];
n146 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", label="value == null", span="205-205"];
n148 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", label="ReflectionHelper.IsFSharpOptionType(value.GetType()) && !FSharpOptionHelper.IsSome(value)", span="206-206"];
n150 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", label="value is ValueType && value.Equals(value.GetType().GetDefaultValue())", span="207-207"];
n152 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", label="value is string && ((string)value).Length == 0", span="208-208"];
n154 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", label="value is IEnumerable && !((IEnumerable)value).GetEnumerator().MoveNext()", span="209-209"];
n147 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", label="return true;", span="205-205"];
n149 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", label="return true;", span="206-206"];
n151 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", label="return true;", span="207-207"];
n158 [cluster="System.Type.GetDefaultValue()", label="Entry System.Type.GetDefaultValue()", span="119-119"];
n159 [cluster="object.Equals(object)", label="Entry object.Equals(object)", span="0-0"];
n153 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", label="return true;", span="208-208"];
n155 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", label="return true;", span="209-209"];
n156 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", label="return false;", span="210-210"];
n157 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", label="Exit CommandLine.UnParserExtensions.IsEmpty(object)", span="203-203"];
m0_103 [cluster="NameInfo.cstr", file="SentenceBuilder.cs", label="Entry NameInfo.cstr", span=""];
m0_4 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="SentenceBuilder.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="24-24"];
m0_8 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", color=red, community=0, file="SentenceBuilder.cs", label="0: return specProps =>\r\n                {\r\n                    var options = specProps\r\n                            .Where(sp => sp.Specification.IsOption())\r\n                            .Where(sp => ((OptionSpecification)sp.Specification).SetName.Length > 0\r\n                                   && sp.Value.IsJust());\r\n                    var groups = options.GroupBy(g => ((OptionSpecification)g.Specification).SetName);\r\n                    if (groups.Count() > 1)\r\n                    {\r\n                        return options.Select(s =>\r\n                            new MutuallyExclusiveSetError(\r\n                                NameInfo.FromOptionSpecification((OptionSpecification)s.Specification)));\r\n                    }\r\n                    return Enumerable.Empty<Error>();\r\n                };", span="26-40"];
m0_9 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="SentenceBuilder.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="24-24"];
m0_53 [cluster="CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", file="SentenceBuilder.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", span="149-149"];
m0_6 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="SentenceBuilder.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="71-71"];
m0_75 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="SentenceBuilder.cs", label="return specProps =>\r\n                {\r\n                    var options = specProps.Where(\r\n                        sp => sp.Specification.TargetType == TargetType.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min.FromJust())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max.FromJust())\r\n                        )\r\n                    );\r\n                    if (options.Any())\r\n                    {\r\n                        return options.Select(s => new SequenceOutOfRangeError(\r\n                            NameInfo.FromSpecification(s.Specification)));\r\n                    }\r\n                    return Enumerable.Empty<Error>();\r\n                };", span="73-89"];
m0_76 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="SentenceBuilder.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="71-71"];
m0_73 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="SentenceBuilder.cs", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283"];
m0_107 [cluster="CommandLine.Core.Token.IsName()", file="SentenceBuilder.cs", label="Entry CommandLine.Core.Token.IsName()", span="68-68"];
m0_68 [cluster="CommandLine.Core.Specification.IsValue()", file="SentenceBuilder.cs", label="Entry CommandLine.Core.Specification.IsValue()", span="15-15"];
m0_17 [cluster="Unk.Where", file="SentenceBuilder.cs", label="Entry Unk.Where", span=""];
m0_21 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="SentenceBuilder.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m0_63 [cluster="Unk.IsNothing", file="SentenceBuilder.cs", label="Entry Unk.IsNothing", span=""];
m0_74 [cluster="Unk.FromSpecification", file="SentenceBuilder.cs", label="Entry Unk.FromSpecification", span=""];
m0_86 [cluster="CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", file="SentenceBuilder.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", span="134-134"];
m0_102 [cluster="RepeatedOptionError.cstr", file="SentenceBuilder.cs", label="Entry RepeatedOptionError.cstr", span=""];
m0_7 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SentenceBuilder.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="92-92"];
m0_91 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SentenceBuilder.cs", label="return specProps =>\r\n                {\r\n                    var specs = from sp in specProps\r\n                                where sp.Specification.IsOption() && sp.Value.IsJust()\r\n                                select (OptionSpecification)sp.Specification;\r\n                    var options = from t in tokens.Where(t => t.IsName())\r\n                                  join o in specs on t.Text equals o.UniqueName() into to\r\n                                  from o in to.DefaultIfEmpty()\r\n                                  where o != null\r\n                                  select new { o.ShortName, o.LongName };\r\n                    var groups = from x in options\r\n                                 group x by x into g\r\n                                 let count = g.Count()\r\n                                 select new { Value = g.Key, Count = count };\r\n                    var errors = from y in groups\r\n                                 where y.Count > 1\r\n                                 select new RepeatedOptionError(new NameInfo(y.Value.ShortName, y.Value.LongName));\r\n                    return errors;\r\n                };", span="94-112"];
m0_92 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SentenceBuilder.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="92-92"];
m0_69 [cluster="CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", file="SentenceBuilder.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", span="144-144"];
m0_64 [cluster="Unk.Contains", file="SentenceBuilder.cs", label="Entry Unk.Contains", span=""];
m0_90 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="SentenceBuilder.cs", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316"];
m0_0 [cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SentenceBuilder.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12"];
m0_1 [cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SentenceBuilder.cs", label="return new List<Func<IEnumerable<SpecificationProperty>, IEnumerable<Error>>>\r\n                {\r\n                    EnforceMutuallyExclusiveSet(),\r\n                    EnforceRequired(),\r\n                    EnforceRange(),\r\n                    EnforceSingle(tokens)\r\n                };", span="15-21"];
m0_2 [cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SentenceBuilder.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12"];
m0_104 [cluster="lambda expression", file="SentenceBuilder.cs", label="Entry lambda expression", span="99-99"];
m0_11 [cluster="lambda expression", file="SentenceBuilder.cs", label="var options = specProps\r\n                            .Where(sp => sp.Specification.IsOption())\r\n                            .Where(sp => ((OptionSpecification)sp.Specification).SetName.Length > 0\r\n                                   && sp.Value.IsJust())", span="28-31"];
m0_10 [cluster="lambda expression", file="SentenceBuilder.cs", label="Entry lambda expression", span="26-40"];
m0_12 [cluster="lambda expression", color=red, community=0, file="SentenceBuilder.cs", label="0: var groups = options.GroupBy(g => ((OptionSpecification)g.Specification).SetName)", span="32-32"];
m0_22 [cluster="lambda expression", file="SentenceBuilder.cs", label="Entry lambda expression", span="29-29"];
m0_26 [cluster="lambda expression", file="SentenceBuilder.cs", label="Entry lambda expression", span="30-31"];
m0_14 [cluster="lambda expression", file="SentenceBuilder.cs", label="return options.Select(s =>\r\n                            new MutuallyExclusiveSetError(\r\n                                NameInfo.FromOptionSpecification((OptionSpecification)s.Specification)));", span="35-37"];
m0_13 [cluster="lambda expression", file="SentenceBuilder.cs", label="groups.Count() > 1", span="33-33"];
m0_30 [cluster="lambda expression", file="SentenceBuilder.cs", label="Entry lambda expression", span="32-32"];
m0_15 [cluster="lambda expression", file="SentenceBuilder.cs", label="return Enumerable.Empty<Error>();", span="39-39"];
m0_16 [cluster="lambda expression", file="SentenceBuilder.cs", label="Exit lambda expression", span="26-40"];
m0_33 [cluster="lambda expression", file="SentenceBuilder.cs", label="Entry lambda expression", span="35-37"];
m0_23 [cluster="lambda expression", file="SentenceBuilder.cs", label="sp.Specification.IsOption()", span="29-29"];
m0_24 [cluster="lambda expression", file="SentenceBuilder.cs", label="Exit lambda expression", span="29-29"];
m0_27 [cluster="lambda expression", file="SentenceBuilder.cs", label="((OptionSpecification)sp.Specification).SetName.Length > 0\r\n                                   && sp.Value.IsJust()", span="30-31"];
m0_28 [cluster="lambda expression", file="SentenceBuilder.cs", label="Exit lambda expression", span="30-31"];
m0_31 [cluster="lambda expression", color=red, community=0, file="SentenceBuilder.cs", label="1: ((OptionSpecification)g.Specification).SetName", span="32-32"];
m0_32 [cluster="lambda expression", file="SentenceBuilder.cs", label="Exit lambda expression", span="32-32"];
m0_34 [cluster="lambda expression", file="SentenceBuilder.cs", label="new MutuallyExclusiveSetError(\r\n                                NameInfo.FromOptionSpecification((OptionSpecification)s.Specification))", span="36-37"];
m0_35 [cluster="lambda expression", file="SentenceBuilder.cs", label="Exit lambda expression", span="35-37"];
m0_41 [cluster="lambda expression", color=red, community=0, file="SentenceBuilder.cs", label="0: var setsWithTrue =\r\n                    specProps\r\n                        .Where(sp => sp.Specification.IsOption()\r\n                            && sp.Value.IsJust() && sp.Specification.Required)\r\n                        .Select(s => ((OptionSpecification)s.Specification).SetName).ToList()", span="47-51"];
m0_42 [cluster="lambda expression", file="SentenceBuilder.cs", label="var requiredButEmpty =\r\n                    specProps\r\n                        .Where(sp => sp.Specification.IsOption())\r\n                        .Where(sp => sp.Value.IsNothing()\r\n                            && sp.Specification.Required\r\n                            && !setsWithTrue.Contains(((OptionSpecification)sp.Specification).SetName))\r\n                    .Concat(specProps\r\n                        .Where(sp => sp.Specification.IsValue()\r\n                            && sp.Value.IsNothing()\r\n                            && sp.Specification.Required)).ToList()", span="53-62"];
m0_40 [cluster="lambda expression", file="SentenceBuilder.cs", label="Entry lambda expression", span="45-68"];
m0_50 [cluster="lambda expression", file="SentenceBuilder.cs", label="Entry lambda expression", span="49-50"];
m0_54 [cluster="lambda expression", file="SentenceBuilder.cs", label="Entry lambda expression", span="51-51"];
m0_61 [cluster="lambda expression", file="SentenceBuilder.cs", label="sp.Value.IsNothing()\r\n                            && sp.Specification.Required\r\n                            && !setsWithTrue.Contains(((OptionSpecification)sp.Specification).SetName)", span="56-58"];
m0_43 [cluster="lambda expression", file="SentenceBuilder.cs", label="requiredButEmpty.Any()", span="63-63"];
m0_57 [cluster="lambda expression", file="SentenceBuilder.cs", label="Entry lambda expression", span="55-55"];
m0_60 [cluster="lambda expression", file="SentenceBuilder.cs", label="Entry lambda expression", span="56-58"];
m0_65 [cluster="lambda expression", file="SentenceBuilder.cs", label="Entry lambda expression", span="60-62"];
m0_44 [cluster="lambda expression", file="SentenceBuilder.cs", label="return requiredButEmpty.Select(s =>new MissingRequiredOptionError(\r\n                            NameInfo.FromSpecification(s.Specification)));", span="64-65"];
m0_45 [cluster="lambda expression", file="SentenceBuilder.cs", label="return Enumerable.Empty<Error>();", span="67-67"];
m0_46 [cluster="lambda expression", file="SentenceBuilder.cs", label="Exit lambda expression", span="45-68"];
m0_70 [cluster="lambda expression", file="SentenceBuilder.cs", label="Entry lambda expression", span="64-65"];
m0_51 [cluster="lambda expression", file="SentenceBuilder.cs", label="sp.Specification.IsOption()\r\n                            && sp.Value.IsJust() && sp.Specification.Required", span="49-50"];
m0_52 [cluster="lambda expression", file="SentenceBuilder.cs", label="Exit lambda expression", span="49-50"];
m0_55 [cluster="lambda expression", color=red, community=0, file="SentenceBuilder.cs", label="1: ((OptionSpecification)s.Specification).SetName", span="51-51"];
m0_56 [cluster="lambda expression", file="SentenceBuilder.cs", label="Exit lambda expression", span="51-51"];
m0_58 [cluster="lambda expression", file="SentenceBuilder.cs", label="sp.Specification.IsOption()", span="55-55"];
m0_59 [cluster="lambda expression", file="SentenceBuilder.cs", label="Exit lambda expression", span="55-55"];
m0_62 [cluster="lambda expression", file="SentenceBuilder.cs", label="Exit lambda expression", span="56-58"];
m0_66 [cluster="lambda expression", file="SentenceBuilder.cs", label="sp.Specification.IsValue()\r\n                            && sp.Value.IsNothing()\r\n                            && sp.Specification.Required", span="60-62"];
m0_67 [cluster="lambda expression", file="SentenceBuilder.cs", label="Exit lambda expression", span="60-62"];
m0_71 [cluster="lambda expression", file="SentenceBuilder.cs", label="new MissingRequiredOptionError(\r\n                            NameInfo.FromSpecification(s.Specification))", span="64-65"];
m0_72 [cluster="lambda expression", file="SentenceBuilder.cs", label="Exit lambda expression", span="64-65"];
m0_78 [cluster="lambda expression", file="SentenceBuilder.cs", label="var options = specProps.Where(\r\n                        sp => sp.Specification.TargetType == TargetType.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min.FromJust())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max.FromJust())\r\n                        )\r\n                    )", span="75-82"];
m0_77 [cluster="lambda expression", file="SentenceBuilder.cs", label="Entry lambda expression", span="73-89"];
m0_79 [cluster="lambda expression", file="SentenceBuilder.cs", label="options.Any()", span="83-83"];
m0_83 [cluster="lambda expression", file="SentenceBuilder.cs", label="Entry lambda expression", span="76-81"];
m0_80 [cluster="lambda expression", file="SentenceBuilder.cs", label="return options.Select(s => new SequenceOutOfRangeError(\r\n                            NameInfo.FromSpecification(s.Specification)));", span="85-86"];
m0_81 [cluster="lambda expression", file="SentenceBuilder.cs", label="return Enumerable.Empty<Error>();", span="88-88"];
m0_82 [cluster="lambda expression", file="SentenceBuilder.cs", label="Exit lambda expression", span="73-89"];
m0_87 [cluster="lambda expression", file="SentenceBuilder.cs", label="Entry lambda expression", span="85-86"];
m0_84 [cluster="lambda expression", file="SentenceBuilder.cs", label="sp.Specification.TargetType == TargetType.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min.FromJust())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max.FromJust())\r\n                        )", span="76-81"];
m0_85 [cluster="lambda expression", file="SentenceBuilder.cs", label="Exit lambda expression", span="76-81"];
m0_88 [cluster="lambda expression", file="SentenceBuilder.cs", label="new SequenceOutOfRangeError(\r\n                            NameInfo.FromSpecification(s.Specification))", span="85-86"];
m0_89 [cluster="lambda expression", file="SentenceBuilder.cs", label="Exit lambda expression", span="85-86"];
m0_95 [cluster="lambda expression", file="SentenceBuilder.cs", label="var options = from t in tokens.Where(t => t.IsName())\r\n                                  join o in specs on t.Text equals o.UniqueName() into to\r\n                                  from o in to.DefaultIfEmpty()\r\n                                  where o != null\r\n                                  select new { o.ShortName, o.LongName }", span="99-103"];
m0_94 [cluster="lambda expression", file="SentenceBuilder.cs", label="var specs = from sp in specProps\r\n                                where sp.Specification.IsOption() && sp.Value.IsJust()\r\n                                select (OptionSpecification)sp.Specification", span="96-98"];
m0_93 [cluster="lambda expression", file="SentenceBuilder.cs", label="Entry lambda expression", span="94-112"];
m0_96 [cluster="lambda expression", file="SentenceBuilder.cs", label="var groups = from x in options\r\n                                 group x by x into g\r\n                                 let count = g.Count()\r\n                                 select new { Value = g.Key, Count = count }", span="104-107"];
m0_97 [cluster="lambda expression", file="SentenceBuilder.cs", label="var errors = from y in groups\r\n                                 where y.Count > 1\r\n                                 select new RepeatedOptionError(new NameInfo(y.Value.ShortName, y.Value.LongName))", span="108-110"];
m0_98 [cluster="lambda expression", file="SentenceBuilder.cs", label="return errors;", span="111-111"];
m0_99 [cluster="lambda expression", file="SentenceBuilder.cs", label="Exit lambda expression", span="94-112"];
m0_105 [cluster="lambda expression", file="SentenceBuilder.cs", label="t.IsName()", span="99-99"];
m0_106 [cluster="lambda expression", file="SentenceBuilder.cs", label="Exit lambda expression", span="99-99"];
m0_48 [cluster="Unk.Concat", file="SentenceBuilder.cs", label="Entry Unk.Concat", span=""];
m0_5 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", file="SentenceBuilder.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="43-43"];
m0_38 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", color=red, community=0, file="SentenceBuilder.cs", label="0: return specProps =>\r\n            {\r\n                var setsWithTrue =\r\n                    specProps\r\n                        .Where(sp => sp.Specification.IsOption()\r\n                            && sp.Value.IsJust() && sp.Specification.Required)\r\n                        .Select(s => ((OptionSpecification)s.Specification).SetName).ToList();\r\n                \r\n                var requiredButEmpty =\r\n                    specProps\r\n                        .Where(sp => sp.Specification.IsOption())\r\n                        .Where(sp => sp.Value.IsNothing()\r\n                            && sp.Specification.Required\r\n                            && !setsWithTrue.Contains(((OptionSpecification)sp.Specification).SetName))\r\n                    .Concat(specProps\r\n                        .Where(sp => sp.Specification.IsValue()\r\n                            && sp.Value.IsNothing()\r\n                            && sp.Specification.Required)).ToList();\r\n                    if (requiredButEmpty.Any()) {\r\n                        return requiredButEmpty.Select(s =>new MissingRequiredOptionError(\r\n                            NameInfo.FromSpecification(s.Specification)));\r\n                    }\r\n                    return Enumerable.Empty<Error>();\r\n                };", span="45-68"];
m0_39 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", file="SentenceBuilder.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="43-43"];
m0_20 [cluster="Unk.Select", file="SentenceBuilder.cs", label="Entry Unk.Select", span=""];
m0_29 [cluster="Unk.IsJust", file="SentenceBuilder.cs", label="Entry Unk.IsJust", span=""];
m0_100 [cluster="Unk.UniqueName", file="SentenceBuilder.cs", label="Entry Unk.UniqueName", span=""];
m0_47 [cluster="Unk.ToList", file="SentenceBuilder.cs", label="Entry Unk.ToList", span=""];
m0_36 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="SentenceBuilder.cs", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294"];
m0_101 [cluster="Unk.DefaultIfEmpty", file="SentenceBuilder.cs", label="Entry Unk.DefaultIfEmpty", span=""];
m0_25 [cluster="CommandLine.Core.Specification.IsOption()", file="SentenceBuilder.cs", label="Entry CommandLine.Core.Specification.IsOption()", span="10-10"];
m0_3 [cluster="System.Collections.Generic.List<T>.List()", file="SentenceBuilder.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m0_37 [cluster="CommandLine.NameInfo.FromOptionSpecification(CommandLine.Core.OptionSpecification)", file="SentenceBuilder.cs", label="Entry CommandLine.NameInfo.FromOptionSpecification(CommandLine.Core.OptionSpecification)", span="60-60"];
m0_18 [cluster="Unk.GroupBy", file="SentenceBuilder.cs", label="Entry Unk.GroupBy", span=""];
m0_19 [cluster="Unk.Count", file="SentenceBuilder.cs", label="Entry Unk.Count", span=""];
m0_108 [file="SentenceBuilder.cs", label=setsWithTrue, span=""];
m0_109 [file="SentenceBuilder.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", span=""];
n160 -> n52  [color=darkseagreen4, key=1, label=builder, style=dashed];
n160 -> n75  [color=darkseagreen4, key=1, label=builder, style=dashed];
n160 -> n79  [color=darkseagreen4, key=1, label=builder, style=dashed];
n161 -> n56  [color=darkseagreen4, key=1, label=T, style=dashed];
n162 -> n65  [color=darkseagreen4, key=1, label=shortSwitches, style=dashed];
n163 -> n75  [color=darkseagreen4, key=1, label=settings, style=dashed];
n164 -> n104  [color=darkseagreen4, key=1, label=sep, style=dashed];
n165 -> n116  [color=darkseagreen4, key=1, label=doubQt, style=dashed];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=2, style=dotted];
n1 -> n4  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n2 -> n0  [color=blue, key=0, style=bold];
n4 -> n5  [key=0, style=solid];
n5 -> n6  [key=0, style=solid];
n6 -> n4  [color=blue, key=0, style=bold];
n7 -> n8  [key=0, style=solid];
n7 -> n11  [color=darkseagreen4, key=1, label="System.Action<CommandLine.UnParserSettings>", style=dashed];
n7 -> n13  [color=darkseagreen4, key=1, label=T, style=dashed];
n7 -> n16  [color=darkseagreen4, key=1, label=T, style=dashed];
n7 -> n56  [color=darkseagreen4, key=1, label=T, style=dashed];
n8 -> n9  [key=0, style=solid];
n8 -> n10  [key=0, style=solid];
n11 -> n12  [key=0, style=solid];
n11 -> n30  [key=2, style=dotted];
n13 -> n14  [key=0, style=solid];
n13 -> n31  [key=2, style=dotted];
n13 -> n15  [color=darkseagreen4, key=1, label=type, style=dashed];
n13 -> n16  [color=darkseagreen4, key=1, label=type, style=dashed];
n16 -> n17  [key=0, style=solid];
n16 -> n35  [key=2, style=dotted];
n16 -> n36  [key=2, style=dotted];
n16 -> n37  [key=2, style=dotted];
n16 -> n55  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n16 -> n16  [color=darkseagreen4, key=1, label=info, style=dashed];
n16 -> n20  [color=darkseagreen4, key=1, label=specs, style=dashed];
n56 -> n57  [key=0, style=solid];
n56 -> n58  [key=2, style=dotted];
n56 -> n59  [key=2, style=dotted];
n56 -> n60  [key=2, style=dotted];
n9 -> n27  [key=0, style=solid];
n9 -> n28  [key=2, style=dotted];
n10 -> n11  [key=0, style=solid];
n10 -> n29  [key=2, style=dotted];
n10 -> n12  [color=darkseagreen4, key=1, label=settings, style=dashed];
n10 -> n19  [color=darkseagreen4, key=1, label=settings, style=dashed];
n10 -> n21  [color=darkseagreen4, key=1, label=settings, style=dashed];
n10 -> n23  [color=darkseagreen4, key=1, label=settings, style=dashed];
n10 -> n75  [color=darkseagreen4, key=1, label=settings, style=dashed];
n12 -> n13  [key=0, style=solid];
n19 -> n20  [key=0, style=solid];
n19 -> n38  [key=2, style=dotted];
n19 -> n64  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n19 -> n22  [color=darkseagreen4, key=1, label=optSpecs, style=dashed];
n19 -> n23  [color=darkseagreen4, key=1, label=optSpecs, style=dashed];
n21 -> n22  [key=0, style=solid];
n21 -> n40  [key=2, style=dotted];
n21 -> n41  [key=2, style=dotted];
n21 -> n42  [key=2, style=dotted];
n21 -> n43  [key=2, style=dotted];
n21 -> n44  [key=2, style=dotted];
n21 -> n45  [key=2, style=dotted];
n21 -> n21  [color=darkseagreen4, key=1, label=builder, style=dashed];
n21 -> n71  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n21 -> n23  [color=darkseagreen4, key=1, label=builder, style=dashed];
n21 -> n75  [color=darkseagreen4, key=1, label=builder, style=dashed];
n21 -> n24  [color=darkseagreen4, key=1, label=builder, style=dashed];
n21 -> n25  [color=darkseagreen4, key=1, label=builder, style=dashed];
n21 -> n79  [color=darkseagreen4, key=1, label=builder, style=dashed];
n21 -> n26  [color=darkseagreen4, key=1, label=builder, style=dashed];
n23 -> n24  [key=0, style=solid];
n23 -> n48  [key=2, style=dotted];
n23 -> n74  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n75 -> n76  [key=0, style=solid];
n75 -> n77  [key=2, style=dotted];
n75 -> n45  [key=2, style=dotted];
n75 -> n41  [key=2, style=dotted];
n14 -> n15  [key=0, style=solid];
n14 -> n32  [key=2, style=dotted];
n14 -> n52  [color=darkseagreen4, key=1, label=builder, style=dashed];
n14 -> n21  [color=darkseagreen4, key=1, label=builder, style=dashed];
n15 -> n16  [key=0, style=solid];
n15 -> n33  [key=2, style=dotted];
n15 -> n34  [key=2, style=dotted];
n15 -> n51  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n52 -> n53  [key=0, style=solid];
n52 -> n54  [key=2, style=dotted];
n52 -> n41  [key=2, style=dotted];
n51 -> n52  [key=0, style=solid];
n17 -> n18  [key=0, style=solid];
n17 -> n38  [key=2, style=dotted];
n17 -> n39  [key=2, style=dotted];
n17 -> n61  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n17 -> n17  [color=darkseagreen4, key=1, label=info, style=dashed];
n17 -> n19  [color=darkseagreen4, key=1, label=allOptSpecs, style=dashed];
n55 -> n56  [key=0, style=solid];
n20 -> n21  [key=0, style=solid];
n20 -> n38  [key=2, style=dotted];
n20 -> n68  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n20 -> n20  [color=darkseagreen4, key=1, label=info, style=dashed];
n20 -> n24  [color=darkseagreen4, key=1, label=valSpecs, style=dashed];
n20 -> n25  [color=darkseagreen4, key=1, label=valSpecs, style=dashed];
n18 -> n19  [key=0, style=solid];
n18 -> n39  [key=2, style=dotted];
n18 -> n18  [color=darkseagreen4, key=1, label=info, style=dashed];
n18 -> n65  [color=darkseagreen4, key=1, label=shortSwitches, style=dashed];
n18 -> n21  [color=darkseagreen4, key=1, label=shortSwitches, style=dashed];
n61 -> n62  [key=0, style=solid];
n65 -> n66  [key=0, style=solid];
n65 -> n67  [key=2, style=dotted];
n64 -> n65  [key=0, style=solid];
n22 -> n23  [key=0, style=solid];
n22 -> n40  [key=2, style=dotted];
n22 -> n46  [key=2, style=dotted];
n22 -> n47  [key=2, style=dotted];
n68 -> n69  [key=0, style=solid];
n24 -> n25  [key=0, style=solid];
n24 -> n40  [key=2, style=dotted];
n24 -> n46  [key=2, style=dotted];
n24 -> n47  [key=2, style=dotted];
n25 -> n26  [key=0, style=solid];
n25 -> n48  [key=2, style=dotted];
n25 -> n78  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n71 -> n72  [key=0, style=solid];
n79 -> n80  [key=0, style=solid];
n79 -> n81  [key=2, style=dotted];
n79 -> n45  [key=2, style=dotted];
n79 -> n41  [key=2, style=dotted];
n26 -> n27  [key=0, style=solid];
n26 -> n49  [key=2, style=dotted];
n26 -> n50  [key=2, style=dotted];
n74 -> n75  [key=0, style=solid];
n78 -> n79  [key=0, style=solid];
n27 -> n7  [color=blue, key=0, style=bold];
n53 -> n51  [color=blue, key=0, style=bold];
n57 -> n55  [color=blue, key=0, style=bold];
n62 -> n63  [key=0, style=solid];
n63 -> n61  [color=blue, key=0, style=bold];
n66 -> n64  [color=blue, key=0, style=bold];
n69 -> n70  [key=0, style=solid];
n70 -> n68  [color=blue, key=0, style=bold];
n72 -> n73  [key=0, style=solid];
n73 -> n71  [color=blue, key=0, style=bold];
n76 -> n74  [color=blue, key=0, style=bold];
n80 -> n78  [color=blue, key=0, style=bold];
n82 -> n83  [key=0, style=solid];
n82 -> n84  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
n82 -> n86  [color=darkseagreen4, key=1, label=object, style=dashed];
n82 -> n88  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
n82 -> n90  [color=darkseagreen4, key=1, label=object, style=dashed];
n83 -> n84  [key=0, style=solid];
n83 -> n32  [key=2, style=dotted];
n83 -> n86  [color=darkseagreen4, key=1, label=builder, style=dashed];
n83 -> n92  [color=darkseagreen4, key=1, label=builder, style=dashed];
n83 -> n93  [color=darkseagreen4, key=1, label=builder, style=dashed];
n83 -> n94  [color=darkseagreen4, key=1, label=builder, style=dashed];
n84 -> n85  [key=0, style=solid];
n84 -> n87  [key=0, style=solid];
n86 -> n94  [key=0, style=solid];
n86 -> n96  [key=2, style=dotted];
n86 -> n97  [key=2, style=dotted];
n88 -> n89  [key=0, style=solid];
n88 -> n98  [key=2, style=dotted];
n88 -> n104  [color=darkseagreen4, key=1, label=sep, style=dashed];
n88 -> n92  [color=darkseagreen4, key=1, label=sep, style=dashed];
n90 -> n91  [key=0, style=solid];
n90 -> n99  [key=2, style=dotted];
n90 -> n92  [color=darkseagreen4, key=1, label=e, style=dashed];
n92 -> n91  [key=0, style=solid];
n92 -> n101  [key=2, style=dotted];
n92 -> n97  [key=2, style=dotted];
n92 -> n41  [key=2, style=dotted];
n93 -> n94  [key=0, style=solid];
n93 -> n102  [key=2, style=dotted];
n94 -> n95  [key=0, style=solid];
n94 -> n49  [key=2, style=dotted];
n85 -> n86  [key=0, style=solid];
n87 -> n88  [key=0, style=solid];
n89 -> n90  [key=0, style=solid];
n89 -> n104  [color=darkseagreen4, key=1, label=object, style=dashed];
n89 -> n92  [color=darkseagreen4, key=1, label=format, style=dashed];
n104 -> n105  [key=0, style=solid];
n104 -> n96  [key=2, style=dotted];
n91 -> n92  [key=0, style=solid];
n91 -> n93  [key=0, style=solid];
n91 -> n100  [key=2, style=dotted];
n96 -> n106  [key=0, style=solid];
n96 -> n107  [color=darkseagreen4, key=1, label=object, style=dashed];
n95 -> n82  [color=blue, key=0, style=bold];
n103 -> n104  [key=0, style=solid];
n105 -> n103  [color=blue, key=0, style=bold];
n106 -> n107  [key=0, style=solid];
n106 -> n111  [color=darkseagreen4, key=1, label=string, style=dashed];
n106 -> n116  [color=darkseagreen4, key=1, label=doubQt, style=dashed];
n107 -> n108  [key=0, style=solid];
n107 -> n109  [key=2, style=dotted];
n107 -> n34  [key=2, style=dotted];
n107 -> n115  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n107 -> n33  [color=darkorchid, key=3, label="Property variable bool AdditionalNewLineAfterOption", style=bold];
n111 -> n112  [key=0, style=solid];
n111 -> n113  [key=2, style=dotted];
n111 -> n114  [key=2, style=dotted];
n116 -> n117  [key=0, style=solid];
n116 -> n67  [key=2, style=dotted];
n116 -> n118  [key=2, style=dotted];
n116 -> n119  [key=2, style=dotted];
n108 -> n96  [color=blue, key=0, style=bold];
n115 -> n116  [key=0, style=solid];
n110 -> n111  [key=0, style=solid];
n112 -> n110  [color=blue, key=0, style=bold];
n117 -> n115  [color=blue, key=0, style=bold];
n120 -> n121  [key=0, style=solid];
n121 -> n122  [key=0, style=solid];
n121 -> n109  [key=2, style=dotted];
n121 -> n34  [key=2, style=dotted];
n121 -> n123  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n122 -> n120  [color=blue, key=0, style=bold];
n123 -> n124  [key=0, style=solid];
n124 -> n125  [key=0, style=solid];
n125 -> n123  [color=blue, key=0, style=bold];
n126 -> n127  [key=0, style=solid];
n127 -> n128  [key=0, style=solid];
n127 -> n32  [key=2, style=dotted];
n127 -> n129  [key=2, style=dotted];
n127 -> n45  [key=2, style=dotted];
n127 -> n82  [key=2, style=dotted];
n127 -> n130  [key=2, style=dotted];
n127 -> n49  [key=2, style=dotted];
n128 -> n126  [color=blue, key=0, style=bold];
n131 -> n132  [key=0, style=solid];
n131 -> n133  [color=darkseagreen4, key=1, label="CommandLine.Core.OptionSpecification", style=dashed];
n132 -> n133  [key=0, style=solid];
n133 -> n134  [key=0, style=solid];
n133 -> n135  [key=2, style=dotted];
n133 -> n119  [key=2, style=dotted];
n133 -> n136  [key=2, style=dotted];
n133 -> n49  [key=2, style=dotted];
n134 -> n131  [color=blue, key=0, style=bold];
n137 -> n138  [key=0, style=solid];
n137 -> n139  [color=darkseagreen4, key=1, label=object, style=dashed];
n137 -> n140  [color=darkseagreen4, key=1, label=object, style=dashed];
n138 -> n139  [key=0, style=solid];
n138 -> n140  [key=0, style=solid];
n138 -> n31  [key=2, style=dotted];
n138 -> n142  [key=2, style=dotted];
n138 -> n143  [key=2, style=dotted];
n139 -> n141  [key=0, style=solid];
n139 -> n144  [key=2, style=dotted];
n140 -> n141  [key=0, style=solid];
n141 -> n137  [color=blue, key=0, style=bold];
n145 -> n146  [key=0, style=solid];
n145 -> n148  [color=darkseagreen4, key=1, label=object, style=dashed];
n145 -> n150  [color=darkseagreen4, key=1, label=object, style=dashed];
n145 -> n152  [color=darkseagreen4, key=1, label=object, style=dashed];
n145 -> n154  [color=darkseagreen4, key=1, label=object, style=dashed];
n146 -> n147  [key=0, style=solid];
n146 -> n148  [key=0, style=solid];
n148 -> n149  [key=0, style=solid];
n148 -> n150  [key=0, style=solid];
n148 -> n31  [key=2, style=dotted];
n148 -> n142  [key=2, style=dotted];
n148 -> n143  [key=2, style=dotted];
n150 -> n151  [key=0, style=solid];
n150 -> n152  [key=0, style=solid];
n150 -> n31  [key=2, style=dotted];
n150 -> n158  [key=2, style=dotted];
n150 -> n159  [key=2, style=dotted];
n152 -> n153  [key=0, style=solid];
n152 -> n154  [key=0, style=solid];
n154 -> n155  [key=0, style=solid];
n154 -> n156  [key=0, style=solid];
n154 -> n99  [key=2, style=dotted];
n154 -> n100  [key=2, style=dotted];
n147 -> n157  [key=0, style=solid];
n149 -> n157  [key=0, style=solid];
n151 -> n157  [key=0, style=solid];
n153 -> n157  [key=0, style=solid];
n155 -> n157  [key=0, style=solid];
n156 -> n157  [key=0, style=solid];
n157 -> n145  [color=blue, key=0, style=bold];
m0_4 -> m0_8  [color=red, key=0, style=solid];
m0_8 -> m0_9  [color=red, key=0, style=solid];
m0_8 -> m0_11  [color=red, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m0_9 -> m0_4  [color=blue, key=0, style=bold];
m0_6 -> m0_75  [key=0, style=solid];
m0_75 -> m0_76  [key=0, style=solid];
m0_75 -> m0_78  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m0_75 -> m0_75  [color=darkorchid, key=3, label="Property variable System.Func<bool, string> VersionCommandText", style=bold];
m0_76 -> m0_6  [color=blue, key=0, style=bold];
m0_7 -> m0_91  [key=0, style=solid];
m0_7 -> m0_95  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m0_91 -> m0_92  [key=0, style=solid];
m0_91 -> m0_94  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m0_92 -> m0_7  [color=blue, key=0, style=bold];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_3  [key=2, style=dotted];
m0_1 -> m0_4  [key=2, style=dotted];
m0_1 -> m0_5  [key=2, style=dotted];
m0_1 -> m0_6  [key=2, style=dotted];
m0_1 -> m0_7  [key=2, style=dotted];
m0_2 -> m0_0  [color=blue, key=0, style=bold];
m0_104 -> m0_105  [key=0, style=solid];
m0_11 -> m0_12  [color=red, key=0, style=solid];
m0_11 -> m0_17  [key=2, style=dotted];
m0_11 -> m0_22  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_11 -> m0_26  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_11 -> m0_14  [color=darkseagreen4, key=1, label=options, style=dashed];
m0_10 -> m0_11  [key=0, style=solid];
m0_12 -> m0_13  [color=red, key=0, style=solid];
m0_12 -> m0_18  [color=red, key=2, style=dotted];
m0_12 -> m0_30  [color=red, key=1, label="lambda expression", style=dashed];
m0_22 -> m0_23  [key=0, style=solid];
m0_26 -> m0_27  [key=0, style=solid];
m0_14 -> m0_16  [key=0, style=solid];
m0_14 -> m0_20  [key=2, style=dotted];
m0_14 -> m0_33  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_13 -> m0_14  [key=0, style=solid];
m0_13 -> m0_15  [key=0, style=solid];
m0_13 -> m0_19  [key=2, style=dotted];
m0_30 -> m0_31  [color=red, key=0, style=solid];
m0_15 -> m0_16  [key=0, style=solid];
m0_15 -> m0_21  [key=2, style=dotted];
m0_16 -> m0_10  [color=blue, key=0, style=bold];
m0_33 -> m0_34  [key=0, style=solid];
m0_23 -> m0_24  [key=0, style=solid];
m0_23 -> m0_25  [key=2, style=dotted];
m0_24 -> m0_22  [color=blue, key=0, style=bold];
m0_27 -> m0_28  [key=0, style=solid];
m0_27 -> m0_29  [key=2, style=dotted];
m0_28 -> m0_26  [color=blue, key=0, style=bold];
m0_31 -> m0_32  [color=red, key=0, style=solid];
m0_32 -> m0_30  [color=blue, key=0, style=bold];
m0_34 -> m0_35  [key=0, style=solid];
m0_34 -> m0_36  [key=2, style=dotted];
m0_34 -> m0_37  [key=2, style=dotted];
m0_35 -> m0_33  [color=blue, key=0, style=bold];
m0_41 -> m0_42  [color=red, key=0, style=solid];
m0_41 -> m0_17  [color=red, key=2, style=dotted];
m0_41 -> m0_20  [color=red, key=2, style=dotted];
m0_41 -> m0_47  [color=red, key=2, style=dotted];
m0_41 -> m0_50  [color=red, key=1, label="lambda expression", style=dashed];
m0_41 -> m0_54  [color=red, key=1, label="lambda expression", style=dashed];
m0_41 -> m0_61  [color=red, key=1, label=setsWithTrue, style=dashed];
m0_42 -> m0_43  [key=0, style=solid];
m0_42 -> m0_17  [key=2, style=dotted];
m0_42 -> m0_48  [key=2, style=dotted];
m0_42 -> m0_47  [key=2, style=dotted];
m0_42 -> m0_57  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_42 -> m0_60  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_42 -> m0_65  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_42 -> m0_44  [color=darkseagreen4, key=1, label=requiredButEmpty, style=dashed];
m0_40 -> m0_41  [color=red, key=0, style=solid];
m0_40 -> m0_42  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m0_50 -> m0_51  [key=0, style=solid];
m0_54 -> m0_55  [color=red, key=0, style=solid];
m0_61 -> m0_62  [key=0, style=solid];
m0_61 -> m0_63  [key=2, style=dotted];
m0_61 -> m0_64  [key=2, style=dotted];
m0_43 -> m0_44  [key=0, style=solid];
m0_43 -> m0_45  [key=0, style=solid];
m0_43 -> n40  [key=2, style=dotted];
m0_57 -> m0_58  [key=0, style=solid];
m0_60 -> m0_61  [key=0, style=solid];
m0_65 -> m0_66  [key=0, style=solid];
m0_44 -> m0_46  [key=0, style=solid];
m0_44 -> m0_20  [key=2, style=dotted];
m0_44 -> m0_70  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_45 -> m0_46  [key=0, style=solid];
m0_45 -> m0_21  [key=2, style=dotted];
m0_46 -> m0_40  [color=blue, key=0, style=bold];
m0_70 -> m0_71  [key=0, style=solid];
m0_51 -> m0_52  [key=0, style=solid];
m0_51 -> m0_25  [key=2, style=dotted];
m0_51 -> m0_53  [key=2, style=dotted];
m0_52 -> m0_50  [color=blue, key=0, style=bold];
m0_55 -> m0_56  [color=red, key=0, style=solid];
m0_56 -> m0_54  [color=blue, key=0, style=bold];
m0_58 -> m0_59  [key=0, style=solid];
m0_58 -> m0_25  [key=2, style=dotted];
m0_59 -> m0_57  [color=blue, key=0, style=bold];
m0_62 -> m0_60  [color=blue, key=0, style=bold];
m0_66 -> m0_67  [key=0, style=solid];
m0_66 -> m0_68  [key=2, style=dotted];
m0_66 -> m0_69  [key=2, style=dotted];
m0_67 -> m0_65  [color=blue, key=0, style=bold];
m0_71 -> m0_72  [key=0, style=solid];
m0_71 -> m0_73  [key=2, style=dotted];
m0_71 -> m0_74  [key=2, style=dotted];
m0_72 -> m0_70  [color=blue, key=0, style=bold];
m0_78 -> m0_79  [key=0, style=solid];
m0_78 -> m0_17  [key=2, style=dotted];
m0_78 -> m0_83  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_78 -> m0_80  [color=darkseagreen4, key=1, label=options, style=dashed];
m0_77 -> m0_78  [key=0, style=solid];
m0_79 -> m0_80  [key=0, style=solid];
m0_79 -> m0_81  [key=0, style=solid];
m0_79 -> n40  [key=2, style=dotted];
m0_83 -> m0_84  [key=0, style=solid];
m0_80 -> m0_82  [key=0, style=solid];
m0_80 -> m0_20  [key=2, style=dotted];
m0_80 -> m0_87  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_81 -> m0_82  [key=0, style=solid];
m0_81 -> m0_21  [key=2, style=dotted];
m0_82 -> m0_77  [color=blue, key=0, style=bold];
m0_87 -> m0_88  [key=0, style=solid];
m0_84 -> m0_85  [key=0, style=solid];
m0_84 -> m0_53  [key=2, style=dotted];
m0_84 -> m0_86  [key=2, style=dotted];
m0_85 -> m0_83  [color=blue, key=0, style=bold];
m0_88 -> m0_89  [key=0, style=solid];
m0_88 -> m0_90  [key=2, style=dotted];
m0_88 -> m0_74  [key=2, style=dotted];
m0_89 -> m0_87  [color=blue, key=0, style=bold];
m0_95 -> m0_96  [key=0, style=solid];
m0_95 -> m0_17  [key=2, style=dotted];
m0_95 -> m0_100  [key=2, style=dotted];
m0_95 -> m0_101  [key=2, style=dotted];
m0_95 -> m0_104  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_95 -> m0_95  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_94 -> m0_95  [key=0, style=solid];
m0_94 -> m0_25  [key=2, style=dotted];
m0_94 -> m0_53  [key=2, style=dotted];
m0_94 -> m0_94  [color=darkseagreen4, key=1, label=sp, style=dashed];
m0_93 -> m0_94  [key=0, style=solid];
m0_96 -> m0_97  [key=0, style=solid];
m0_96 -> m0_19  [key=2, style=dotted];
m0_96 -> m0_96  [color=darkseagreen4, key=1, label=x, style=dashed];
m0_97 -> m0_98  [key=0, style=solid];
m0_97 -> m0_102  [key=2, style=dotted];
m0_97 -> m0_103  [key=2, style=dotted];
m0_97 -> m0_97  [color=darkseagreen4, key=1, label=y, style=dashed];
m0_98 -> m0_99  [key=0, style=solid];
m0_99 -> m0_93  [color=blue, key=0, style=bold];
m0_105 -> m0_106  [key=0, style=solid];
m0_105 -> m0_107  [key=2, style=dotted];
m0_106 -> m0_104  [color=blue, key=0, style=bold];
m0_5 -> m0_38  [color=red, key=0, style=solid];
m0_38 -> m0_39  [color=red, key=0, style=solid];
m0_38 -> m0_41  [color=red, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m0_38 -> m0_42  [color=red, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m0_38 -> m0_38  [color=red, key=3, label="Property variable System.Func<string> ErrorsHeadingText", style=bold];
m0_39 -> m0_5  [color=blue, key=0, style=bold];
m0_37 -> m0_38  [color=red, key=3, label="Property variable System.Func<string> RequiredWord", style=bold];
m0_108 -> m0_61  [color=darkseagreen4, key=1, label=setsWithTrue, style=dashed];
m0_109 -> m0_95  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
}
