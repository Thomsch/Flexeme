digraph  {
n10 [label="CommandLine.Core.TypeDescriptor", span=""];
n0 [cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", label="Entry CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", span="20-20"];
n1 [cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", label="this.tag = tag", span="22-22"];
n2 [cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", label="this.maximumItems = maximumItems", span="23-23"];
n3 [cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", label="Exit CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", span="20-20"];
n4 [cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", label="Entry CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", span="36-36"];
n5 [cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", label="maximumItems == null", span="38-38"];
n7 [cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", color=red, community=0, label="1: return new TypeDescriptor(tag, maximumItems);", span="40-40"];
n6 [cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", label="throw new ArgumentNullException(''maximumItems'');", span="38-38"];
n8 [cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", label="Exit CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", span="36-36"];
n9 [cluster="System.ArgumentNullException.ArgumentNullException(string)", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
d1 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", color=green, community=0, label="0: return Build(\r\n                factory,\r\n                (args, optionSpecs) =>\r\n                    {\r\n                        var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer));\r\n                        var explodedTokens = Tokenizer.ExplodeOptionList(\r\n                            tokens,\r\n                            name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer));\r\n                        return explodedTokens;\r\n                    },\r\n                arguments,\r\n                nameComparer,\r\n                parsingCulture,\r\n                nonFatalErrors);", span="21-34"];
d0 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="14-14"];
d2 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="Exit CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="14-14"];
d3 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="37-37"];
d4 [cluster="lambda expression", label="Entry lambda expression", span="23-30"];
d44 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", color=green, community=1, label="0: return allErrors\r\n                .Where(e => !nonFatalErrors.Contains(e.Tag))\r\n                .ToParserResult(instance);", span="135-137"];
d43 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", color=green, community=1, label="0: var allErrors =\r\n                tokenizerResult.SuccessfulMessages()\r\n                    .Concat(missingValueErrors)\r\n                    .Concat(optionSpecPropsResult.SuccessfulMessages())\r\n                    .Concat(valueSpecPropsResult.SuccessfulMessages())\r\n                    .Concat(validationErrors)", span="128-133"];
d38 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="instance = instance\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsJust(),\r\n                        sp => sp.Value.FromJust())\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust(),\r\n                        sp => sp.Specification.DefaultValue.FromJust())\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsNothing()\r\n                            && sp.Specification.TargetType == TargetType.Sequence\r\n                            && sp.Specification.DefaultValue.MatchNothing(),\r\n                        sp => sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray())", span="101-112"];
d41 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="instance = (T)ctor.Invoke(values)", span="122-122"];
d45 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="Exit CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="37-37"];
d81 [cluster="Unk.Where", label="Entry Unk.Where", span=""];
d82 [cluster="Unk.ToParserResult", label="Entry Unk.ToParserResult", span=""];
d151 [cluster="lambda expression", label="Entry lambda expression", span="136-136"];
d152 [cluster="lambda expression", color=green, community=0, label="0: !nonFatalErrors.Contains(e.Tag)", span="136-136"];
d163 [label="System.Collections.Generic.IEnumerable<CommandLine.ErrorType>", span=""];
d153 [cluster="lambda expression", label="Exit lambda expression", span="136-136"];
d154 [cluster="Unk.Contains", label="Entry Unk.Contains", span=""];
d28 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var tokenizerResult = tokenizer(arguments, optionSpecs)", span="71-71"];
d31 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var optionSpecPropsResult = OptionMapper.MapValues(\r\n                (from pt in specProps where pt.Specification.IsOption() select pt),\r\n                partitions.Options,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture),\r\n                nameComparer)", span="79-83"];
d32 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var valueSpecPropsResult = ValueMapper.MapValues(\r\n                (from pt in specProps where pt.Specification.IsValue() select pt),\r\n                    partitions.Values,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture))", span="85-88"];
d33 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var missingValueErrors = from token in partitions.Errors\r\n                                     select new MissingValueOptionError(\r\n                                         optionSpecs.Single(o => token.Text.MatchName(o.ShortName, o.LongName, nameComparer)).FromOptionSpecification())", span="90-92"];
d42 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var validationErrors = specPropsWithValue.Validate(\r\n                SpecificationPropertyRules.Lookup(tokens))", span="125-126"];
d79 [cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SuccessfulMessages<TSuccess, TMessage>()", label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SuccessfulMessages<TSuccess, TMessage>()", span="12-12"];
d80 [cluster="Unk.Concat", label="Entry Unk.Concat", span=""];
d5 [cluster="lambda expression", label="var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer))", span="25-25"];
d12 [cluster="lambda expression", label="NameLookup.Contains(name, optionSpecs, nameComparer)", span="25-25"];
d6 [cluster="lambda expression", label="var explodedTokens = Tokenizer.ExplodeOptionList(\r\n                            tokens,\r\n                            name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer))", span="26-28"];
d16 [cluster="lambda expression", label="NameLookup.HavingSeparator(name, optionSpecs, nameComparer)", span="28-28"];
d19 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var typeInfo = factory.Return(f => f().GetType(), typeof(T))", span="45-45"];
d23 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="Func<T> makeDefault = () =>\r\n                typeof(T).IsMutable()\r\n                    ? factory.Return(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="56-60"];
d95 [cluster="lambda expression", label="typeof(T).IsMutable()\r\n                    ? factory.Return(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="57-60"];
d24 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="arguments.Any()", span="62-62"];
d25 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var preprocessorErrors = arguments.Preprocess(PreprocessorGuards.Lookup(nameComparer))", span="64-64"];
d30 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var partitions = TokenPartitioner.Partition(\r\n                tokens,\r\n                name => TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer))", span="75-77"];
d103 [cluster="lambda expression", label="TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer)", span="77-77"];
d107 [cluster="lambda expression", label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="82-82"];
d111 [cluster="lambda expression", label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="88-88"];
d114 [cluster="lambda expression", label="token.Text.MatchName(o.ShortName, o.LongName, nameComparer)", span="92-92"];
d37 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="instance = factory.Return(f => f(), Activator.CreateInstance<T>())", span="100-100"];
d8 [cluster="lambda expression", label="Exit lambda expression", span="23-30"];
d34 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var specPropsWithValue = optionSpecPropsResult.SucceededWith()\r\n                .Concat(valueSpecPropsResult.SucceededWith())", span="94-95"];
d69 [cluster="T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", label="Entry T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="82-82"];
d120 [cluster="lambda expression", label="Entry lambda expression", span="103-103"];
d124 [cluster="lambda expression", label="Entry lambda expression", span="104-104"];
d128 [cluster="lambda expression", label="Entry lambda expression", span="106-106"];
d132 [cluster="lambda expression", label="Entry lambda expression", span="107-107"];
d135 [cluster="lambda expression", label="Entry lambda expression", span="109-111"];
d139 [cluster="lambda expression", label="Entry lambda expression", span="112-112"];
d39 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var ctor = typeInfo.GetConstructor((from sp in specProps select sp.Property.PropertyType).ToArray())", span="116-116"];
d40 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var values = (from prms in ctor.GetParameters()\r\n                              join sp in specPropsWithValue on prms.Name.ToLower() equals sp.Property.Name.ToLower()\r\n                              select sp.Value.Return(v => v,\r\n                                    sp.Specification.DefaultValue.Return(d => d,\r\n                                        sp.Specification.ConversionType.CreateDefaultForImmutable()))).ToArray()", span="117-121"];
d76 [cluster="Unk.Invoke", label="Entry Unk.Invoke", span=""];
d27 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="return new NotParsed<T>(makeDefault().GetType().ToTypeInfo(), preprocessorErrors);", span="67-67"];
d22 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var optionSpecs = specs\r\n                .ThrowingValidate(SpecificationGuards.Lookup)\r\n                .OfType<OptionSpecification>()", span="52-54"];
d26 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="preprocessorErrors.Any()", span="65-65"];
d29 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var tokens = tokenizerResult.SucceededWith()", span="73-73"];
d57 [cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0"];
d20 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var specProps = typeInfo.GetSpecifications(pi => SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>()))", span="47-48"];
d60 [cluster="CommandLine.Core.Specification.IsOption()", label="Entry CommandLine.Core.Specification.IsOption()", span="10-10"];
d61 [cluster="Unk.MapValues", label="Entry Unk.MapValues", span=""];
d106 [cluster="lambda expression", label="Entry lambda expression", span="82-82"];
d62 [cluster="CommandLine.Core.Specification.IsValue()", label="Entry CommandLine.Core.Specification.IsValue()", span="15-15"];
d110 [cluster="lambda expression", label="Entry lambda expression", span="88-88"];
d63 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="269-269"];
d64 [cluster="Unk.Single", label="Entry Unk.Single", span=""];
d65 [cluster="Unk.FromOptionSpecification", label="Entry Unk.FromOptionSpecification", span=""];
d113 [cluster="lambda expression", label="Entry lambda expression", span="92-92"];
d77 [cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", label="Entry CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12"];
d78 [cluster="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", label="Entry System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="40-40"];
d155 [label="System.StringComparer", span=""];
d9 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="13-13"];
d11 [cluster="lambda expression", label="Entry lambda expression", span="25-25"];
d156 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
d13 [cluster="lambda expression", label="Exit lambda expression", span="25-25"];
d14 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
d7 [cluster="lambda expression", label="return explodedTokens;", span="29-29"];
d10 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", span="46-46"];
d15 [cluster="lambda expression", label="Entry lambda expression", span="28-28"];
d17 [cluster="lambda expression", label="Exit lambda expression", span="28-28"];
d18 [cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16"];
d46 [cluster="Unk.Return", label="Entry Unk.Return", span=""];
d83 [cluster="lambda expression", label="Entry lambda expression", span="45-45"];
d36 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="typeInfo.IsMutable()", span="98-98"];
d157 [label="CSharpx.Maybe<System.Func<T>>", span=""];
d158 [label=specProps, span=""];
d94 [cluster="lambda expression", label="Entry lambda expression", span="56-60"];
d96 [cluster="lambda expression", label="Exit lambda expression", span="56-60"];
d97 [cluster="System.Type.IsMutable()", label="Entry System.Type.IsMutable()", span="139-139"];
d68 [cluster="System.Activator.CreateInstance<T>()", label="Entry System.Activator.CreateInstance<T>()", span="0-0"];
d70 [cluster="Unk.ToArray", label="Entry Unk.ToArray", span=""];
d98 [cluster="Unk.>", label="Entry Unk.>", span=""];
d99 [cluster="lambda expression", label="Entry lambda expression", span="58-58"];
d50 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
d51 [cluster="CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)", label="Entry CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)", span="11-11"];
d52 [cluster="System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", label="Entry System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="11-11"];
d59 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12"];
d102 [cluster="lambda expression", label="Entry lambda expression", span="77-77"];
d159 [label="System.StringComparer", span=""];
d160 [label=optionSpecs, span=""];
d104 [cluster="lambda expression", label="Exit lambda expression", span="77-77"];
d105 [cluster="CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", label="Entry CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="23-23"];
d161 [label="System.Globalization.CultureInfo", span=""];
d108 [cluster="lambda expression", label="Exit lambda expression", span="82-82"];
d109 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="13-13"];
d112 [cluster="lambda expression", label="Exit lambda expression", span="88-88"];
d162 [label=token, span=""];
d115 [cluster="lambda expression", label="Exit lambda expression", span="92-92"];
d116 [cluster="string.MatchName(string, string, System.StringComparer)", label="Entry string.MatchName(string, string, System.StringComparer)", span="8-8"];
d117 [cluster="lambda expression", label="Entry lambda expression", span="100-100"];
d35 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="T instance", span="97-97"];
d58 [cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()", label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()", span="653-653"];
d66 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
d122 [cluster="lambda expression", label="Exit lambda expression", span="103-103"];
d121 [cluster="lambda expression", label="sp.Value.IsJust()", span="103-103"];
d126 [cluster="lambda expression", label="Exit lambda expression", span="104-104"];
d125 [cluster="lambda expression", label="sp.Value.FromJust()", span="104-104"];
d130 [cluster="lambda expression", label="Exit lambda expression", span="106-106"];
d129 [cluster="lambda expression", label="sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust()", span="106-106"];
d134 [cluster="lambda expression", label="Exit lambda expression", span="107-107"];
d133 [cluster="lambda expression", label="sp.Specification.DefaultValue.FromJust()", span="107-107"];
d137 [cluster="lambda expression", label="Exit lambda expression", span="109-111"];
d136 [cluster="lambda expression", label="sp.Value.IsNothing()\r\n                            && sp.Specification.TargetType == TargetType.Sequence\r\n                            && sp.Specification.DefaultValue.MatchNothing()", span="109-111"];
d141 [cluster="lambda expression", label="Exit lambda expression", span="112-112"];
d140 [cluster="lambda expression", label="sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray()", span="112-112"];
d71 [cluster="Unk.GetConstructor", label="Entry Unk.GetConstructor", span=""];
d72 [cluster="Unk.GetParameters", label="Entry Unk.GetParameters", span=""];
d73 [cluster="Unk.ToLower", label="Entry Unk.ToLower", span=""];
d74 [cluster="string.ToLower()", label="Entry string.ToLower()", span="0-0"];
d75 [cluster="Unk.CreateDefaultForImmutable", label="Entry Unk.CreateDefaultForImmutable", span=""];
d145 [cluster="lambda expression", label="Entry lambda expression", span="119-119"];
d148 [cluster="lambda expression", label="Entry lambda expression", span="120-120"];
d53 [cluster="CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", label="Entry CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="163-163"];
d54 [cluster="System.Func<TResult>.Invoke()", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
d55 [cluster="object.GetType()", label="Entry object.GetType()", span="0-0"];
d56 [cluster="System.Type.ToTypeInfo()", label="Entry System.Type.ToTypeInfo()", span="174-174"];
d21 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var specs = from pt in specProps select pt.Specification", span="50-50"];
d48 [cluster="Unk.ThrowingValidate", label="Entry Unk.ThrowingValidate", span=""];
d49 [cluster="System.Collections.IEnumerable.OfType<TResult>()", label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0"];
d47 [cluster="Unk.GetSpecifications", label="Entry Unk.GetSpecifications", span=""];
d88 [cluster="lambda expression", label="Entry lambda expression", span="47-48"];
d85 [cluster="lambda expression", label="Exit lambda expression", span="45-45"];
d84 [cluster="lambda expression", label="f().GetType()", span="45-45"];
d67 [cluster="Unk.IsMutable", label="Entry Unk.IsMutable", span=""];
d101 [cluster="lambda expression", label="Exit lambda expression", span="58-58"];
d100 [cluster="lambda expression", label="f()", span="58-58"];
d119 [cluster="lambda expression", label="Exit lambda expression", span="100-100"];
d118 [cluster="lambda expression", label="f()", span="100-100"];
d123 [cluster="CSharpx.Maybe<T>.IsJust<T>()", label="Entry CSharpx.Maybe<T>.IsJust<T>()", span="326-326"];
d127 [cluster="CSharpx.Maybe<T>.FromJust<T>()", label="Entry CSharpx.Maybe<T>.FromJust<T>()", span="342-342"];
d131 [cluster="CSharpx.Maybe<T>.IsNothing<T>()", label="Entry CSharpx.Maybe<T>.IsNothing<T>()", span="334-334"];
d138 [cluster="CSharpx.Maybe<T>.MatchNothing()", label="Entry CSharpx.Maybe<T>.MatchNothing()", span="57-57"];
d142 [cluster="System.Type.GetGenericArguments()", label="Entry System.Type.GetGenericArguments()", span="0-0"];
d143 [cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0"];
d144 [cluster="System.Type.CreateEmptyArray()", label="Entry System.Type.CreateEmptyArray()", span="125-125"];
d147 [cluster="lambda expression", label="Exit lambda expression", span="119-119"];
d146 [cluster="lambda expression", label=v, span="119-119"];
d150 [cluster="lambda expression", label="Exit lambda expression", span="120-120"];
d149 [cluster="lambda expression", label=d, span="120-120"];
d90 [cluster="lambda expression", label="Exit lambda expression", span="47-48"];
d89 [cluster="lambda expression", label="SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>())", span="47-48"];
d86 [cluster="Unk.f", label="Entry Unk.f", span=""];
d87 [cluster="Unk.GetType", label="Entry Unk.GetType", span=""];
d91 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", label="Entry CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="105-105"];
d92 [cluster="CSharpx.Maybe.Nothing<T>()", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
d93 [cluster="CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)", label="Entry CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)", span="21-21"];
m0_66 [cluster="Unk.SingleOrDefault", file="InstanceChooser.cs", label="Entry Unk.SingleOrDefault", span=""];
m0_28 [cluster="CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", file="InstanceChooser.cs", label="Entry CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", span="95-95"];
m0_77 [cluster="CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", file="InstanceChooser.cs", label="return new NotParsed<object>(TypeInfo.Create(typeof(NullInstance), types), errors);", span="97-97"];
m0_78 [cluster="CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", file="InstanceChooser.cs", label="Exit CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", span="95-95"];
m0_26 [cluster="System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", file="InstanceChooser.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", span="31-31"];
m0_45 [cluster="Unk.>", file="InstanceChooser.cs", label="Entry Unk.>", span=""];
m0_49 [cluster="Unk.MakeNotParsed", file="InstanceChooser.cs", label="Entry Unk.MakeNotParsed", span=""];
m0_44 [cluster="Unk.Any", file="InstanceChooser.cs", label="Entry Unk.Any", span=""];
m0_18 [cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="InstanceChooser.cs", label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16"];
m0_31 [cluster="System.Func<T, TResult>.Invoke(T)", file="InstanceChooser.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m0_36 [cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceChooser.cs", label="Entry CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="62-62"];
m0_42 [cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, file="InstanceChooser.cs", label="0: return verbs.Any(a => nameComparer.Equals(a.Item1.Name, arguments.First()))\r\n                ? InstanceBuilder.Build(\r\n                    Maybe.Just<Func<object>>(\r\n                        () =>\r\n                            verbs.Single(v => nameComparer.Equals(v.Item1.Name, arguments.First())).Item2.AutoDefault()),\r\n                    tokenizer,\r\n                    arguments.Skip(1),\r\n                    nameComparer,\r\n                    parsingCulture)\r\n                : MakeNotParsed(verbs.Select(v => v.Item2), new BadVerbSelectedError(arguments.First()));", span="69-78"];
m0_43 [cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceChooser.cs", label="Exit CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="62-62"];
m0_79 [cluster="CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="InstanceChooser.cs", label="Entry CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="163-163"];
m0_48 [cluster="CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", file="InstanceChooser.cs", label="Entry CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", span="357-357"];
m0_68 [cluster="CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", file="InstanceChooser.cs", label="Entry CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", span="383-383"];
m0_14 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="InstanceChooser.cs", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
m0_35 [cluster="CommandLine.VersionRequestedError.VersionRequestedError()", file="InstanceChooser.cs", label="Entry CommandLine.VersionRequestedError.VersionRequestedError()", span="432-432"];
m0_40 [cluster="System.StringComparer.Equals(string, string)", file="InstanceChooser.cs", label="Entry System.StringComparer.Equals(string, string)", span="0-0"];
m0_56 [cluster="Unk.Single", file="InstanceChooser.cs", label="Entry Unk.Single", span=""];
m0_67 [cluster="Unk.ToMaybe", file="InstanceChooser.cs", label="Entry Unk.ToMaybe", span=""];
m0_41 [cluster="string.Concat(string, string)", file="InstanceChooser.cs", label="Entry string.Concat(string, string)", span="0-0"];
m0_73 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="90-90"];
m0_5 [cluster="lambda expression", file="InstanceChooser.cs", label="var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer))", span="23-23"];
m0_12 [cluster="lambda expression", file="InstanceChooser.cs", label="NameLookup.Contains(name, optionSpecs, nameComparer)", span="23-23"];
m0_6 [cluster="lambda expression", file="InstanceChooser.cs", label="var explodedTokens = Tokenizer.ExplodeOptionList(tokens, name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer))", span="24-24"];
m0_16 [cluster="lambda expression", file="InstanceChooser.cs", label="NameLookup.HavingSeparator(name, optionSpecs, nameComparer)", span="24-24"];
m0_4 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="21-26"];
m0_11 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="23-23"];
m0_7 [cluster="lambda expression", file="InstanceChooser.cs", label="return explodedTokens;", span="25-25"];
m0_15 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="24-24"];
m0_8 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="21-26"];
m0_13 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="23-23"];
m0_17 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="24-24"];
m0_38 [cluster="lambda expression", file="InstanceChooser.cs", label="nameComparer.Equals(command, firstArg) ||\r\n                    nameComparer.Equals(string.Concat(''--'', command), firstArg)", span="48-49"];
m0_37 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="47-49"];
m0_39 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="47-49"];
m0_51 [cluster="lambda expression", file="InstanceChooser.cs", label="nameComparer.Equals(a.Item1.Name, arguments.First())", span="69-69"];
m0_54 [cluster="lambda expression", file="InstanceChooser.cs", label="verbs.Single(v => nameComparer.Equals(v.Item1.Name, arguments.First())).Item2.AutoDefault()", span="73-73"];
m0_59 [cluster="lambda expression", file="InstanceChooser.cs", label="nameComparer.Equals(v.Item1.Name, arguments.First())", span="73-73"];
m0_50 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="69-69"];
m0_53 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="72-73"];
m0_61 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="78-78"];
m0_52 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="69-69"];
m0_55 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="72-73"];
m0_58 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="73-73"];
m0_60 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="73-73"];
m0_62 [cluster="lambda expression", file="InstanceChooser.cs", label="v.Item2", span="78-78"];
m0_63 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="78-78"];
m0_71 [cluster="lambda expression", file="InstanceChooser.cs", label="nameComparer.Equals(v.Item1.Name, verb)", span="87-87"];
m0_70 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="87-87"];
m0_72 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="87-87"];
m0_74 [cluster="lambda expression", file="InstanceChooser.cs", label="new HelpVerbRequestedError(v.Item1.Name, v.Item2, true)", span="90-90"];
m0_75 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="90-90"];
m0_29 [cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="InstanceChooser.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0"];
m0_80 [cluster="CommandLine.TypeInfo.Create(System.Type, System.Collections.Generic.IEnumerable<System.Type>)", file="InstanceChooser.cs", label="Entry CommandLine.TypeInfo.Create(System.Type, System.Collections.Generic.IEnumerable<System.Type>)", span="34-34"];
m0_32 [cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="InstanceChooser.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0"];
m0_34 [cluster="CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", file="InstanceChooser.cs", label="Entry CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", span="81-81"];
m0_64 [cluster="CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", file="InstanceChooser.cs", label="return verb.Length > 0\r\n                ? verbs.SingleOrDefault(v => nameComparer.Equals(v.Item1.Name, verb))\r\n                        .ToMaybe()\r\n                        .Return(\r\n                            v => new HelpVerbRequestedError(v.Item1.Name, v.Item2, true),\r\n                            new HelpVerbRequestedError(null, null, false))\r\n                : new HelpVerbRequestedError(null, null, false);", span="86-92"];
m0_65 [cluster="CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", file="InstanceChooser.cs", label="Exit CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", span="81-81"];
m0_47 [cluster="Unk.Select", file="InstanceChooser.cs", label="Entry Unk.Select", span=""];
m0_27 [cluster="CommandLine.NoVerbSelectedError.NoVerbSelectedError()", file="InstanceChooser.cs", label="Entry CommandLine.NoVerbSelectedError.NoVerbSelectedError()", span="421-421"];
m0_0 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceChooser.cs", label="Entry CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="14-14"];
m0_1 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=red, community=0, file="InstanceChooser.cs", label="0: return Choose(\r\n                (args, optionSpecs) =>\r\n                    {\r\n                        var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer));\r\n                        var explodedTokens = Tokenizer.ExplodeOptionList(tokens, name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer));\r\n                        return explodedTokens;\r\n                    },\r\n                types,\r\n                arguments,\r\n                nameComparer,\r\n                parsingCulture);", span="20-30"];
m0_2 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceChooser.cs", label="Exit CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="14-14"];
m0_9 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="InstanceChooser.cs", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="13-13"];
m0_3 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceChooser.cs", label="Entry CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33"];
m0_19 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, file="InstanceChooser.cs", label="0: arguments.Empty()", span="40-40"];
m0_20 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceChooser.cs", label="return MakeNotParsed(types, new NoVerbSelectedError());", span="42-42"];
m0_21 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceChooser.cs", label="var firstArg = arguments.First()", span="45-45"];
m0_22 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceChooser.cs", label="Func<string, bool> preprocCompare = command =>\r\n                    nameComparer.Equals(command, firstArg) ||\r\n                    nameComparer.Equals(string.Concat(''--'', command), firstArg)", span="47-49"];
m0_23 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceChooser.cs", label="var verbs = Verb.SelectFromTypes(types)", span="51-51"];
m0_24 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=red, community=0, file="InstanceChooser.cs", label="0: return preprocCompare(''help'')\r\n                ? MakeNotParsed(types,\r\n                    MakeHelpVerbRequestedError(verbs,\r\n                        arguments.Skip(1).SingleOrDefault() ?? string.Empty, nameComparer))\r\n                : preprocCompare(''version'')\r\n                    ? MakeNotParsed(types, new VersionRequestedError())\r\n                    : MatchVerb(tokenizer, verbs, arguments, nameComparer, parsingCulture);", span="53-59"];
m0_25 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceChooser.cs", label="Exit CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33"];
m0_69 [cluster="Unk.Return", file="InstanceChooser.cs", label="Entry Unk.Return", span=""];
m0_57 [cluster="Unk.AutoDefault", file="InstanceChooser.cs", label="Entry Unk.AutoDefault", span=""];
m0_30 [cluster="CommandLine.Core.Verb.SelectFromTypes(System.Collections.Generic.IEnumerable<System.Type>)", file="InstanceChooser.cs", label="Entry CommandLine.Core.Verb.SelectFromTypes(System.Collections.Generic.IEnumerable<System.Type>)", span="40-40"];
m0_46 [cluster="Unk.Build", file="InstanceChooser.cs", label="Entry Unk.Build", span=""];
m0_33 [cluster="System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", file="InstanceChooser.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", span="0-0"];
m0_76 [cluster="HelpVerbRequestedError.cstr", file="InstanceChooser.cs", label="Entry HelpVerbRequestedError.cstr", span=""];
m0_81 [file="InstanceChooser.cs", label="System.StringComparer", span=""];
m0_82 [file="InstanceChooser.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
m0_83 [file="InstanceChooser.cs", label="System.StringComparer", span=""];
m0_84 [file="InstanceChooser.cs", label=firstArg, span=""];
m0_85 [file="InstanceChooser.cs", label="System.Collections.Generic.IEnumerable<string>", span=""];
m0_86 [file="InstanceChooser.cs", label="System.StringComparer", span=""];
m0_87 [file="InstanceChooser.cs", label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>", span=""];
m0_88 [file="InstanceChooser.cs", label=string, span=""];
m0_89 [file="InstanceChooser.cs", label="System.StringComparer", span=""];
m1_34 [cluster="CommandLine.Text.HeadingInfo.WriteMessage(string, System.IO.TextWriter)", file="Parser.cs", label="Entry CommandLine.Text.HeadingInfo.WriteMessage(string, System.IO.TextWriter)", span="105-105"];
m1_35 [cluster="CommandLine.Text.HeadingInfo.WriteMessage(string, System.IO.TextWriter)", file="Parser.cs", label="string.IsNullOrWhiteSpace(''message'')", span="107-107"];
m1_37 [cluster="CommandLine.Text.HeadingInfo.WriteMessage(string, System.IO.TextWriter)", file="Parser.cs", label="writer == null", span="108-108"];
m1_39 [cluster="CommandLine.Text.HeadingInfo.WriteMessage(string, System.IO.TextWriter)", file="Parser.cs", label="var builder = new StringBuilder(this.programName.Length + message.Length + 2)", span="110-110"];
m1_42 [cluster="CommandLine.Text.HeadingInfo.WriteMessage(string, System.IO.TextWriter)", file="Parser.cs", label="builder.Append(message)", span="113-113"];
m1_43 [cluster="CommandLine.Text.HeadingInfo.WriteMessage(string, System.IO.TextWriter)", file="Parser.cs", label="writer.WriteLine(builder.ToString())", span="114-114"];
m1_36 [cluster="CommandLine.Text.HeadingInfo.WriteMessage(string, System.IO.TextWriter)", file="Parser.cs", label="throw new ArgumentException(''message'');", span="107-107"];
m1_38 [cluster="CommandLine.Text.HeadingInfo.WriteMessage(string, System.IO.TextWriter)", file="Parser.cs", label="throw new ArgumentNullException(''writer'');", span="108-108"];
m1_40 [cluster="CommandLine.Text.HeadingInfo.WriteMessage(string, System.IO.TextWriter)", file="Parser.cs", label="builder.Append(this.programName)", span="111-111"];
m1_41 [cluster="CommandLine.Text.HeadingInfo.WriteMessage(string, System.IO.TextWriter)", file="Parser.cs", label="builder.Append('': '')", span="112-112"];
m1_44 [cluster="CommandLine.Text.HeadingInfo.WriteMessage(string, System.IO.TextWriter)", file="Parser.cs", label="Exit CommandLine.Text.HeadingInfo.WriteMessage(string, System.IO.TextWriter)", span="105-105"];
m1_32 [cluster="System.Text.StringBuilder.Append(char)", file="Parser.cs", label="Entry System.Text.StringBuilder.Append(char)", span="0-0"];
m1_46 [cluster="System.IO.TextWriter.WriteLine(string)", file="Parser.cs", label="Entry System.IO.TextWriter.WriteLine(string)", span="0-0"];
m1_47 [cluster="CommandLine.Text.HeadingInfo.WriteMessage(string)", file="Parser.cs", label="Entry CommandLine.Text.HeadingInfo.WriteMessage(string)", span="123-123"];
m1_48 [cluster="CommandLine.Text.HeadingInfo.WriteMessage(string)", file="Parser.cs", label="WriteMessage(message, Console.Out)", span="125-125"];
m1_49 [cluster="CommandLine.Text.HeadingInfo.WriteMessage(string)", file="Parser.cs", label="Exit CommandLine.Text.HeadingInfo.WriteMessage(string)", span="123-123"];
m1_2 [cluster="CommandLine.Text.HeadingInfo.HeadingInfo(string, string)", file="Parser.cs", label="Entry CommandLine.Text.HeadingInfo.HeadingInfo(string, string)", span="37-37"];
m1_3 [cluster="CommandLine.Text.HeadingInfo.HeadingInfo(string, string)", file="Parser.cs", label="string.IsNullOrWhiteSpace(''programName'')", span="39-39"];
m1_5 [cluster="CommandLine.Text.HeadingInfo.HeadingInfo(string, string)", file="Parser.cs", label="this.programName = programName", span="41-41"];
m1_6 [cluster="CommandLine.Text.HeadingInfo.HeadingInfo(string, string)", file="Parser.cs", label="this.version = version", span="42-42"];
m1_4 [cluster="CommandLine.Text.HeadingInfo.HeadingInfo(string, string)", file="Parser.cs", label="throw new ArgumentException(''programName'');", span="39-39"];
m1_7 [cluster="CommandLine.Text.HeadingInfo.HeadingInfo(string, string)", file="Parser.cs", label="Exit CommandLine.Text.HeadingInfo.HeadingInfo(string, string)", span="37-37"];
m1_30 [cluster="System.Text.StringBuilder.StringBuilder(int)", file="Parser.cs", label="Entry System.Text.StringBuilder.StringBuilder(int)", span="0-0"];
m1_17 [cluster="CommandLine.Text.HeadingInfo.implicit operator string(CommandLine.Text.HeadingInfo)", file="Parser.cs", label="Entry CommandLine.Text.HeadingInfo.implicit operator string(CommandLine.Text.HeadingInfo)", span="73-73"];
m1_18 [cluster="CommandLine.Text.HeadingInfo.implicit operator string(CommandLine.Text.HeadingInfo)", file="Parser.cs", label="return info.ToString();", span="75-75"];
m1_19 [cluster="CommandLine.Text.HeadingInfo.implicit operator string(CommandLine.Text.HeadingInfo)", file="Parser.cs", label="Exit CommandLine.Text.HeadingInfo.implicit operator string(CommandLine.Text.HeadingInfo)", span="73-73"];
m1_0 [cluster="CommandLine.Text.HeadingInfo.HeadingInfo(string)", file="Parser.cs", label="Entry CommandLine.Text.HeadingInfo.HeadingInfo(string)", span="25-25"];
m1_1 [cluster="CommandLine.Text.HeadingInfo.HeadingInfo(string)", file="Parser.cs", label="Exit CommandLine.Text.HeadingInfo.HeadingInfo(string)", span="25-25"];
m1_20 [cluster="CommandLine.Text.HeadingInfo.ToString()", file="Parser.cs", label="Entry CommandLine.Text.HeadingInfo.ToString()", span="82-82"];
m1_21 [cluster="CommandLine.Text.HeadingInfo.ToString()", file="Parser.cs", label="bool isVersionNull = string.IsNullOrEmpty(this.version)", span="84-84"];
m1_22 [cluster="CommandLine.Text.HeadingInfo.ToString()", file="Parser.cs", label="var builder = new StringBuilder(this.programName.Length +\r\n                (!isVersionNull ? this.version.Length + 1 : 0))", span="85-86"];
m1_24 [cluster="CommandLine.Text.HeadingInfo.ToString()", file="Parser.cs", label="!isVersionNull", span="88-88"];
m1_23 [cluster="CommandLine.Text.HeadingInfo.ToString()", file="Parser.cs", label="builder.Append(this.programName)", span="87-87"];
m1_25 [cluster="CommandLine.Text.HeadingInfo.ToString()", file="Parser.cs", label="builder.Append(' ')", span="90-90"];
m1_26 [cluster="CommandLine.Text.HeadingInfo.ToString()", file="Parser.cs", label="builder.Append(this.version)", span="91-91"];
m1_27 [cluster="CommandLine.Text.HeadingInfo.ToString()", file="Parser.cs", label="return builder.ToString();", span="94-94"];
m1_28 [cluster="CommandLine.Text.HeadingInfo.ToString()", file="Parser.cs", label="Exit CommandLine.Text.HeadingInfo.ToString()", span="82-82"];
m1_14 [cluster="lambda expression", file="Parser.cs", label="Entry lambda expression", span="62-62"];
m1_10 [cluster="lambda expression", file="Parser.cs", label="Entry lambda expression", span="58-58"];
m1_11 [cluster="lambda expression", file="Parser.cs", label="Path.GetFileNameWithoutExtension(titleAttribute.Title)", span="58-58"];
m1_12 [cluster="lambda expression", file="Parser.cs", label="Exit lambda expression", span="58-58"];
m1_15 [cluster="lambda expression", file="Parser.cs", label="versionAttribute.InformationalVersion", span="62-62"];
m1_16 [cluster="lambda expression", file="Parser.cs", label="Exit lambda expression", span="62-62"];
m1_29 [cluster="string.IsNullOrEmpty(string)", file="Parser.cs", label="Entry string.IsNullOrEmpty(string)", span="0-0"];
m1_13 [cluster="System.IO.Path.GetFileNameWithoutExtension(string)", file="Parser.cs", label="Entry System.IO.Path.GetFileNameWithoutExtension(string)", span="0-0"];
m1_33 [cluster="System.Text.StringBuilder.ToString()", file="Parser.cs", label="Entry System.Text.StringBuilder.ToString()", span="0-0"];
m1_31 [cluster="System.Text.StringBuilder.Append(string)", file="Parser.cs", label="Entry System.Text.StringBuilder.Append(string)", span="0-0"];
m1_50 [cluster="CommandLine.Text.HeadingInfo.WriteError(string)", file="Parser.cs", label="Entry CommandLine.Text.HeadingInfo.WriteError(string)", span="134-134"];
m1_51 [cluster="CommandLine.Text.HeadingInfo.WriteError(string)", file="Parser.cs", label="WriteMessage(message, Console.Error)", span="136-136"];
m1_52 [cluster="CommandLine.Text.HeadingInfo.WriteError(string)", file="Parser.cs", label="Exit CommandLine.Text.HeadingInfo.WriteError(string)", span="134-134"];
m1_9 [cluster="System.ArgumentException.ArgumentException(string)", file="Parser.cs", label="Entry System.ArgumentException.ArgumentException(string)", span="0-0"];
m1_8 [cluster="string.IsNullOrWhiteSpace(string)", file="Parser.cs", label="Entry string.IsNullOrWhiteSpace(string)", span="0-0"];
m1_53 [file="Parser.cs", label="CommandLine.Text.HeadingInfo", span=""];
n10 -> n1  [color=darkseagreen4, key=1, label="CommandLine.Core.TypeDescriptor", style=dashed];
n10 -> n2  [color=darkseagreen4, key=1, label="CommandLine.Core.TypeDescriptor", style=dashed];
n0 -> n1  [key=0, style=solid];
n0 -> n2  [color=darkseagreen4, key=1, label="CommandLine.Infrastructure.Maybe<int>", style=dashed];
n1 -> n2  [key=0, style=solid];
n2 -> n3  [key=0, style=solid];
n3 -> n0  [color=blue, key=0, style=bold];
n4 -> n5  [key=0, style=solid];
n4 -> n7  [color=red, key=1, label="CommandLine.Core.TypeDescriptorKind", style=dashed];
n5 -> n6  [key=0, style=solid];
n5 -> n7  [color=red, key=0, style=solid];
n7 -> n8  [color=red, key=0, style=solid];
n7 -> n0  [color=red, key=2, style=dotted];
n6 -> n8  [key=0, style=solid];
n6 -> n9  [key=2, style=dotted];
n8 -> n4  [color=blue, key=0, style=bold];
d1 -> d1  [color=green, key=3, label="method methodReturn RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error> ", style=bold];
d1 -> d2  [color=green, key=0, style=solid];
d1 -> d3  [color=green, key=2, style=dotted];
d1 -> d4  [color=green, key=1, label="lambda expression", style=dashed];
d0 -> d1  [color=green, key=0, style=solid];
d0 -> d5  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d0 -> d12  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d0 -> d6  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d0 -> d16  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d0 -> d3  [color=darkorchid, key=3, label="method methodReturn CommandLine.ParserResult<T> Build", style=bold];
d2 -> d0  [color=blue, key=0, style=bold];
d3 -> d44  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.ErrorType>", style=dashed];
d3 -> d152  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.ErrorType>", style=dashed];
d3 -> d19  [key=0, style=solid];
d3 -> d23  [color=darkseagreen4, key=1, label="CSharpx.Maybe<System.Func<T>>", style=dashed];
d3 -> d95  [color=darkseagreen4, key=1, label="CSharpx.Maybe<System.Func<T>>", style=dashed];
d3 -> d24  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
d3 -> d25  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
d3 -> d28  [color=darkseagreen4, key=1, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>", style=dashed];
d3 -> d30  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d3 -> d103  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d3 -> d31  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d3 -> d107  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
d3 -> d32  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
d3 -> d111  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
d3 -> d33  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d3 -> d114  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d3 -> d37  [color=darkseagreen4, key=1, label="CSharpx.Maybe<System.Func<T>>", style=dashed];
d4 -> d5  [key=0, style=solid];
d4 -> d12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
d4 -> d6  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
d4 -> d16  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
d44 -> d45  [color=green, key=0, style=solid];
d44 -> d81  [color=green, key=2, style=dotted];
d44 -> d82  [color=green, key=2, style=dotted];
d44 -> d151  [color=green, key=1, label="lambda expression", style=dashed];
d43 -> d44  [color=green, key=0, style=solid];
d43 -> d79  [color=green, key=2, style=dotted];
d43 -> d80  [color=green, key=2, style=dotted];
d38 -> d44  [color=green, key=1, label=instance, style=dashed];
d38 -> d38  [color=darkseagreen4, key=1, label=instance, style=dashed];
d38 -> d42  [key=0, style=solid];
d38 -> d69  [key=2, style=dotted];
d38 -> d120  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d38 -> d124  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d38 -> d128  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d38 -> d132  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d38 -> d135  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d38 -> d139  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d41 -> d44  [color=green, key=1, label=instance, style=dashed];
d41 -> d42  [key=0, style=solid];
d41 -> d76  [key=2, style=dotted];
d45 -> d3  [color=blue, key=0, style=bold];
d151 -> d152  [color=green, key=0, style=solid];
d152 -> d153  [color=green, key=0, style=solid];
d152 -> d154  [color=green, key=2, style=dotted];
d163 -> d152  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.ErrorType>", style=dashed];
d153 -> d151  [color=blue, key=0, style=bold];
d28 -> d43  [color=green, key=1, label=tokenizerResult, style=dashed];
d28 -> d29  [key=0, style=solid];
d28 -> d57  [key=2, style=dotted];
d31 -> d43  [color=green, key=1, label=optionSpecPropsResult, style=dashed];
d31 -> d31  [color=darkseagreen4, key=1, label=pt, style=dashed];
d31 -> d32  [key=0, style=solid];
d31 -> d60  [key=2, style=dotted];
d31 -> d61  [key=2, style=dotted];
d31 -> d106  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d31 -> d34  [color=darkseagreen4, key=1, label=optionSpecPropsResult, style=dashed];
d32 -> d43  [color=green, key=1, label=valueSpecPropsResult, style=dashed];
d32 -> d32  [color=darkseagreen4, key=1, label=pt, style=dashed];
d32 -> d33  [key=0, style=solid];
d32 -> d62  [key=2, style=dotted];
d32 -> d61  [key=2, style=dotted];
d32 -> d110  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d32 -> d34  [color=darkseagreen4, key=1, label=valueSpecPropsResult, style=dashed];
d33 -> d43  [color=green, key=1, label=missingValueErrors, style=dashed];
d33 -> d33  [color=darkseagreen4, key=1, label=token, style=dashed];
d33 -> d34  [key=0, style=solid];
d33 -> d63  [key=2, style=dotted];
d33 -> d64  [key=2, style=dotted];
d33 -> d65  [key=2, style=dotted];
d33 -> d113  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d33 -> d114  [color=darkseagreen4, key=1, label=token, style=dashed];
d42 -> d43  [color=green, key=0, style=solid];
d42 -> d77  [key=2, style=dotted];
d42 -> d78  [key=2, style=dotted];
d5 -> d6  [key=0, style=solid];
d5 -> d9  [key=2, style=dotted];
d5 -> d11  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d12 -> d13  [key=0, style=solid];
d12 -> d14  [key=2, style=dotted];
d6 -> d7  [key=0, style=solid];
d6 -> d10  [key=2, style=dotted];
d6 -> d15  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d16 -> d17  [key=0, style=solid];
d16 -> d18  [key=2, style=dotted];
d19 -> d20  [key=0, style=solid];
d19 -> d46  [key=2, style=dotted];
d19 -> d83  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d19 -> d36  [color=darkseagreen4, key=1, label=typeInfo, style=dashed];
d19 -> d39  [color=darkseagreen4, key=1, label=typeInfo, style=dashed];
d23 -> d23  [color=darkorchid, key=3, label="Local variable System.Func<T> makeDefault", style=bold];
d23 -> d24  [key=0, style=solid];
d23 -> d27  [color=darkseagreen4, key=1, label=makeDefault, style=dashed];
d95 -> d95  [color=darkseagreen4, key=1, label=p, style=dashed];
d95 -> d96  [key=0, style=solid];
d95 -> d97  [key=2, style=dotted];
d95 -> d68  [key=2, style=dotted];
d95 -> d46  [key=2, style=dotted];
d95 -> d70  [key=2, style=dotted];
d95 -> d98  [key=2, style=dotted];
d95 -> d99  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d24 -> d28  [key=0, style=solid];
d24 -> d25  [key=0, style=solid];
d24 -> d50  [key=2, style=dotted];
d25 -> d26  [key=0, style=solid];
d25 -> d51  [key=2, style=dotted];
d25 -> d52  [key=2, style=dotted];
d25 -> d27  [color=darkseagreen4, key=1, label=preprocessorErrors, style=dashed];
d30 -> d31  [key=0, style=solid];
d30 -> d32  [color=darkseagreen4, key=1, label=partitions, style=dashed];
d30 -> d33  [color=darkseagreen4, key=1, label=partitions, style=dashed];
d30 -> d59  [key=2, style=dotted];
d30 -> d102  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d103 -> d104  [key=0, style=solid];
d103 -> d105  [key=2, style=dotted];
d107 -> d108  [key=0, style=solid];
d107 -> d109  [key=2, style=dotted];
d111 -> d112  [key=0, style=solid];
d111 -> d109  [key=2, style=dotted];
d114 -> d115  [key=0, style=solid];
d114 -> d116  [key=2, style=dotted];
d37 -> d38  [key=0, style=solid];
d37 -> d68  [key=2, style=dotted];
d37 -> d46  [key=2, style=dotted];
d37 -> d117  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d8 -> d4  [color=blue, key=0, style=bold];
d34 -> d38  [color=darkseagreen4, key=1, label=specPropsWithValue, style=dashed];
d34 -> d42  [color=darkseagreen4, key=1, label=specPropsWithValue, style=dashed];
d34 -> d35  [key=0, style=solid];
d34 -> d58  [key=2, style=dotted];
d34 -> d66  [key=2, style=dotted];
d34 -> d40  [color=darkseagreen4, key=1, label=specPropsWithValue, style=dashed];
d120 -> d121  [key=0, style=solid];
d124 -> d125  [key=0, style=solid];
d128 -> d129  [key=0, style=solid];
d132 -> d133  [key=0, style=solid];
d135 -> d136  [key=0, style=solid];
d139 -> d140  [key=0, style=solid];
d39 -> d41  [color=darkseagreen4, key=1, label=ctor, style=dashed];
d39 -> d39  [color=darkseagreen4, key=1, label=sp, style=dashed];
d39 -> d40  [key=0, style=solid];
d39 -> d70  [key=2, style=dotted];
d39 -> d71  [key=2, style=dotted];
d40 -> d41  [key=0, style=solid];
d40 -> d40  [color=darkseagreen4, key=1, label=prms, style=dashed];
d40 -> d72  [key=2, style=dotted];
d40 -> d73  [key=2, style=dotted];
d40 -> d74  [key=2, style=dotted];
d40 -> d75  [key=2, style=dotted];
d40 -> d46  [key=2, style=dotted];
d40 -> d70  [key=2, style=dotted];
d40 -> d145  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d40 -> d148  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d27 -> d45  [key=0, style=solid];
d27 -> d53  [key=2, style=dotted];
d27 -> d54  [key=2, style=dotted];
d27 -> d55  [key=2, style=dotted];
d27 -> d56  [key=2, style=dotted];
d22 -> d28  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
d22 -> d33  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
d22 -> d23  [key=0, style=solid];
d22 -> d30  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
d22 -> d103  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
d22 -> d48  [key=2, style=dotted];
d22 -> d49  [key=2, style=dotted];
d26 -> d28  [key=0, style=solid];
d26 -> d27  [key=0, style=solid];
d26 -> d50  [key=2, style=dotted];
d29 -> d42  [color=darkseagreen4, key=1, label=tokens, style=dashed];
d29 -> d30  [key=0, style=solid];
d29 -> d58  [key=2, style=dotted];
d20 -> d31  [color=darkseagreen4, key=1, label=specProps, style=dashed];
d20 -> d32  [color=darkseagreen4, key=1, label=specProps, style=dashed];
d20 -> d23  [color=darkseagreen4, key=1, label=specProps, style=dashed];
d20 -> d95  [color=darkseagreen4, key=1, label=specProps, style=dashed];
d20 -> d39  [color=darkseagreen4, key=1, label=specProps, style=dashed];
d20 -> d21  [key=0, style=solid];
d20 -> d47  [key=2, style=dotted];
d20 -> d88  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d106 -> d107  [key=0, style=solid];
d110 -> d111  [key=0, style=solid];
d113 -> d114  [key=0, style=solid];
d78 -> d18  [color=darkorchid, key=3, label="Parameter variable System.Collections.Generic.IEnumerable<string> arguments", style=bold];
d155 -> d5  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d155 -> d12  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d155 -> d6  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d155 -> d16  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d11 -> d12  [key=0, style=solid];
d156 -> d12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
d156 -> d16  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
d13 -> d11  [color=blue, key=0, style=bold];
d7 -> d8  [key=0, style=solid];
d15 -> d16  [key=0, style=solid];
d17 -> d15  [color=blue, key=0, style=bold];
d83 -> d84  [key=0, style=solid];
d36 -> d37  [key=0, style=solid];
d36 -> d39  [key=0, style=solid];
d36 -> d67  [key=2, style=dotted];
d157 -> d95  [color=darkseagreen4, key=1, label="CSharpx.Maybe<System.Func<T>>", style=dashed];
d158 -> d95  [color=darkseagreen4, key=1, label=specProps, style=dashed];
d94 -> d95  [key=0, style=solid];
d96 -> d94  [color=blue, key=0, style=bold];
d99 -> d100  [key=0, style=solid];
d102 -> d103  [key=0, style=solid];
d159 -> d103  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d159 -> d114  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d160 -> d103  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
d104 -> d102  [color=blue, key=0, style=bold];
d161 -> d107  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
d161 -> d111  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
d108 -> d106  [color=blue, key=0, style=bold];
d112 -> d110  [color=blue, key=0, style=bold];
d162 -> d114  [color=darkseagreen4, key=1, label=token, style=dashed];
d115 -> d113  [color=blue, key=0, style=bold];
d117 -> d118  [key=0, style=solid];
d35 -> d36  [key=0, style=solid];
d122 -> d120  [color=blue, key=0, style=bold];
d121 -> d122  [key=0, style=solid];
d121 -> d123  [key=2, style=dotted];
d126 -> d124  [color=blue, key=0, style=bold];
d125 -> d126  [key=0, style=solid];
d125 -> d127  [key=2, style=dotted];
d130 -> d128  [color=blue, key=0, style=bold];
d129 -> d130  [key=0, style=solid];
d129 -> d131  [key=2, style=dotted];
d129 -> d123  [key=2, style=dotted];
d134 -> d132  [color=blue, key=0, style=bold];
d133 -> d134  [key=0, style=solid];
d133 -> d127  [key=2, style=dotted];
d137 -> d135  [color=blue, key=0, style=bold];
d136 -> d137  [key=0, style=solid];
d136 -> d131  [key=2, style=dotted];
d136 -> d138  [key=2, style=dotted];
d141 -> d139  [color=blue, key=0, style=bold];
d140 -> d141  [key=0, style=solid];
d140 -> d142  [key=2, style=dotted];
d140 -> d143  [key=2, style=dotted];
d140 -> d144  [key=2, style=dotted];
d145 -> d146  [key=0, style=solid];
d148 -> d149  [key=0, style=solid];
d21 -> d22  [key=0, style=solid];
d21 -> d21  [color=darkseagreen4, key=1, label=pt, style=dashed];
d88 -> d89  [key=0, style=solid];
d85 -> d83  [color=blue, key=0, style=bold];
d84 -> d85  [key=0, style=solid];
d84 -> d86  [key=2, style=dotted];
d84 -> d87  [key=2, style=dotted];
d101 -> d99  [color=blue, key=0, style=bold];
d100 -> d101  [key=0, style=solid];
d100 -> d86  [key=2, style=dotted];
d119 -> d117  [color=blue, key=0, style=bold];
d118 -> d119  [key=0, style=solid];
d118 -> d86  [key=2, style=dotted];
d147 -> d145  [color=blue, key=0, style=bold];
d146 -> d147  [key=0, style=solid];
d150 -> d148  [color=blue, key=0, style=bold];
d149 -> d150  [key=0, style=solid];
d90 -> d88  [color=blue, key=0, style=bold];
d89 -> d90  [key=0, style=solid];
d89 -> d91  [key=2, style=dotted];
d89 -> d92  [key=2, style=dotted];
d89 -> d93  [key=2, style=dotted];
m0_28 -> m0_77  [key=0, style=solid];
m0_28 -> m0_34  [color=green, key=3, label="Parameter variable CommandLine.Error[] errors", style=bold];
m0_77 -> m0_78  [key=0, style=solid];
m0_77 -> m0_79  [key=2, style=dotted];
m0_77 -> m0_80  [key=2, style=dotted];
m0_78 -> m0_28  [color=blue, key=0, style=bold];
m0_36 -> m0_42  [color=green, key=0, style=solid];
m0_36 -> m0_51  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m0_36 -> m0_54  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>", style=dashed];
m0_36 -> m0_59  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m0_42 -> m0_43  [color=green, key=0, style=solid];
m0_42 -> m0_44  [color=green, key=2, style=dotted];
m0_42 -> m0_45  [color=green, key=2, style=dotted];
m0_42 -> m0_32  [color=green, key=2, style=dotted];
m0_42 -> m0_46  [color=green, key=2, style=dotted];
m0_42 -> m0_47  [color=green, key=2, style=dotted];
m0_42 -> m0_48  [color=green, key=2, style=dotted];
m0_42 -> m0_29  [color=green, key=2, style=dotted];
m0_42 -> m0_49  [color=green, key=2, style=dotted];
m0_42 -> m0_50  [color=green, key=1, label="lambda expression", style=dashed];
m0_42 -> m0_53  [color=green, key=1, label="lambda expression", style=dashed];
m0_42 -> m0_61  [color=green, key=1, label="lambda expression", style=dashed];
m0_43 -> m0_36  [color=blue, key=0, style=bold];
m0_73 -> m0_74  [key=0, style=solid];
m0_5 -> m0_6  [key=0, style=solid];
m0_5 -> m0_9  [key=2, style=dotted];
m0_5 -> m0_11  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_12 -> m0_13  [key=0, style=solid];
m0_12 -> m0_14  [key=2, style=dotted];
m0_6 -> m0_7  [key=0, style=solid];
m0_6 -> d10  [key=2, style=dotted];
m0_6 -> m0_15  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_16 -> m0_17  [key=0, style=solid];
m0_16 -> m0_18  [key=2, style=dotted];
m0_4 -> m0_5  [key=0, style=solid];
m0_4 -> m0_12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_4 -> m0_6  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_4 -> m0_16  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_11 -> m0_12  [key=0, style=solid];
m0_7 -> m0_8  [key=0, style=solid];
m0_15 -> m0_16  [key=0, style=solid];
m0_8 -> m0_4  [color=blue, key=0, style=bold];
m0_13 -> m0_11  [color=blue, key=0, style=bold];
m0_17 -> m0_15  [color=blue, key=0, style=bold];
m0_38 -> m0_39  [key=0, style=solid];
m0_38 -> m0_40  [key=2, style=dotted];
m0_38 -> m0_41  [key=2, style=dotted];
m0_37 -> m0_38  [key=0, style=solid];
m0_39 -> m0_37  [color=blue, key=0, style=bold];
m0_51 -> m0_52  [key=0, style=solid];
m0_51 -> m0_29  [key=2, style=dotted];
m0_51 -> m0_40  [key=2, style=dotted];
m0_54 -> m0_55  [key=0, style=solid];
m0_54 -> m0_56  [key=2, style=dotted];
m0_54 -> m0_57  [key=2, style=dotted];
m0_54 -> m0_58  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_59 -> m0_60  [key=0, style=solid];
m0_59 -> m0_29  [key=2, style=dotted];
m0_59 -> m0_40  [key=2, style=dotted];
m0_50 -> m0_51  [key=0, style=solid];
m0_53 -> m0_54  [key=0, style=solid];
m0_61 -> m0_62  [key=0, style=solid];
m0_52 -> m0_50  [color=blue, key=0, style=bold];
m0_55 -> m0_53  [color=blue, key=0, style=bold];
m0_58 -> m0_59  [key=0, style=solid];
m0_60 -> m0_58  [color=blue, key=0, style=bold];
m0_62 -> m0_63  [key=0, style=solid];
m0_63 -> m0_61  [color=blue, key=0, style=bold];
m0_71 -> m0_72  [key=0, style=solid];
m0_71 -> m0_40  [key=2, style=dotted];
m0_70 -> m0_71  [key=0, style=solid];
m0_72 -> m0_70  [color=blue, key=0, style=bold];
m0_74 -> m0_75  [key=0, style=solid];
m0_74 -> m0_76  [key=2, style=dotted];
m0_75 -> m0_73  [color=blue, key=0, style=bold];
m0_80 -> m0_1  [color=darkorchid, key=3, label="Parameter variable System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>> tokenizer", style=bold];
m0_34 -> m0_64  [key=0, style=solid];
m0_34 -> m0_71  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_64 -> m0_65  [key=0, style=solid];
m0_64 -> m0_66  [key=2, style=dotted];
m0_64 -> m0_67  [key=2, style=dotted];
m0_64 -> m0_68  [key=2, style=dotted];
m0_64 -> m0_69  [key=2, style=dotted];
m0_64 -> m0_70  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_64 -> m0_73  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_65 -> m0_34  [color=blue, key=0, style=bold];
m0_0 -> m0_1  [color=red, key=0, style=solid];
m0_0 -> m0_5  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_0 -> m0_12  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_0 -> m0_6  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_0 -> m0_16  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_0 -> m0_3  [color=darkorchid, key=3, label="method methodReturn CommandLine.ParserResult<object> Choose", style=bold];
m0_1 -> m0_2  [color=red, key=0, style=solid];
m0_1 -> m0_3  [color=red, key=2, style=dotted];
m0_1 -> m0_4  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_1 -> m0_1  [color=darkorchid, key=3, label="method methodReturn RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error> ", style=bold];
m0_2 -> m0_0  [color=blue, key=0, style=bold];
m0_3 -> m0_19  [color=green, key=0, style=solid];
m0_3 -> m0_20  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Type>", style=dashed];
m0_3 -> m0_21  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m0_3 -> m0_22  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_3 -> m0_38  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_3 -> m0_23  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Type>", style=dashed];
m0_3 -> m0_24  [color=red, key=1, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>", style=dashed];
m0_3 -> m0_28  [color=darkorchid, key=3, label="method methodReturn CommandLine.ParserResult<object> Choose", style=bold];
m0_19 -> m0_20  [color=green, key=0, style=solid];
m0_19 -> m0_21  [color=green, key=0, style=solid];
m0_19 -> m0_26  [color=green, key=2, style=dotted];
m0_20 -> m0_25  [key=0, style=solid];
m0_20 -> m0_27  [key=2, style=dotted];
m0_20 -> m0_28  [key=2, style=dotted];
m0_21 -> m0_22  [key=0, style=solid];
m0_21 -> m0_29  [key=2, style=dotted];
m0_21 -> m0_38  [color=darkseagreen4, key=1, label=firstArg, style=dashed];
m0_22 -> m0_23  [key=0, style=solid];
m0_22 -> m0_38  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_22 -> m0_24  [color=darkseagreen4, key=1, label=preprocCompare, style=dashed];
m0_22 -> m0_22  [color=green, key=3, label="Local variable System.Func<string, bool> preprocCompare", style=bold];
m0_23 -> m0_24  [color=red, key=0, style=solid];
m0_23 -> m0_30  [key=2, style=dotted];
m0_24 -> m0_25  [color=red, key=0, style=solid];
m0_24 -> m0_31  [color=red, key=2, style=dotted];
m0_24 -> m0_32  [color=red, key=2, style=dotted];
m0_24 -> m0_33  [color=red, key=2, style=dotted];
m0_24 -> m0_34  [color=red, key=2, style=dotted];
m0_24 -> m0_28  [color=red, key=2, style=dotted];
m0_24 -> m0_35  [color=red, key=2, style=dotted];
m0_24 -> m0_36  [color=red, key=2, style=dotted];
m0_25 -> m0_3  [color=blue, key=0, style=bold];
m0_81 -> m0_5  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_81 -> m0_12  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_81 -> m0_6  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_81 -> m0_16  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_82 -> m0_12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_82 -> m0_16  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_83 -> m0_38  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_84 -> m0_38  [color=darkseagreen4, key=1, label=firstArg, style=dashed];
m0_85 -> m0_51  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m0_85 -> m0_54  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m0_85 -> m0_59  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m0_86 -> m0_51  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_86 -> m0_54  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_86 -> m0_59  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_87 -> m0_54  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>", style=dashed];
m0_88 -> m0_71  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_89 -> m0_71  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_34 -> m1_35  [key=0, style=solid];
m1_34 -> m1_37  [color=darkseagreen4, key=1, label="System.IO.TextWriter", style=dashed];
m1_34 -> m1_39  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_34 -> m1_42  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_34 -> m1_43  [color=darkseagreen4, key=1, label="System.IO.TextWriter", style=dashed];
m1_34 -> m1_47  [color=darkorchid, key=3, label="Parameter variable string message", style=bold];
m1_34 -> m1_50  [color=darkorchid, key=3, label="Parameter variable string message", style=bold];
m1_35 -> m1_36  [key=0, style=solid];
m1_35 -> m1_37  [key=0, style=solid];
m1_35 -> m1_8  [key=2, style=dotted];
m1_37 -> m1_38  [key=0, style=solid];
m1_37 -> m1_39  [key=0, style=solid];
m1_39 -> m1_40  [key=0, style=solid];
m1_39 -> m1_30  [key=2, style=dotted];
m1_39 -> m1_41  [color=darkseagreen4, key=1, label=builder, style=dashed];
m1_39 -> m1_42  [color=darkseagreen4, key=1, label=builder, style=dashed];
m1_39 -> m1_43  [color=darkseagreen4, key=1, label=builder, style=dashed];
m1_42 -> m1_43  [key=0, style=solid];
m1_42 -> m1_31  [key=2, style=dotted];
m1_43 -> m1_44  [key=0, style=solid];
m1_43 -> m1_33  [key=2, style=dotted];
m1_43 -> m1_46  [key=2, style=dotted];
m1_36 -> m1_44  [key=0, style=solid];
m1_36 -> m1_9  [key=2, style=dotted];
m1_38 -> m1_44  [key=0, style=solid];
m1_38 -> n9  [key=2, style=dotted];
m1_40 -> m1_41  [key=0, style=solid];
m1_40 -> m1_31  [key=2, style=dotted];
m1_41 -> m1_42  [key=0, style=solid];
m1_41 -> m1_31  [key=2, style=dotted];
m1_44 -> m1_34  [color=blue, key=0, style=bold];
m1_47 -> m1_48  [key=0, style=solid];
m1_48 -> m1_49  [key=0, style=solid];
m1_48 -> m1_34  [key=2, style=dotted];
m1_49 -> m1_47  [color=blue, key=0, style=bold];
m1_2 -> m1_3  [key=0, style=solid];
m1_2 -> m1_5  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_2 -> m1_6  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_3 -> m1_4  [key=0, style=solid];
m1_3 -> m1_5  [key=0, style=solid];
m1_3 -> m1_8  [key=2, style=dotted];
m1_5 -> m1_6  [key=0, style=solid];
m1_6 -> m1_7  [key=0, style=solid];
m1_4 -> m1_7  [key=0, style=solid];
m1_4 -> m1_9  [key=2, style=dotted];
m1_7 -> m1_2  [color=blue, key=0, style=bold];
m1_17 -> m1_18  [key=0, style=solid];
m1_17 -> m1_20  [color=darkorchid, key=3, label="method methodReturn string op_Implicit", style=bold];
m1_18 -> m1_19  [key=0, style=solid];
m1_18 -> m1_20  [key=2, style=dotted];
m1_19 -> m1_17  [color=blue, key=0, style=bold];
m1_0 -> m1_1  [key=0, style=solid];
m1_1 -> m1_0  [color=blue, key=0, style=bold];
m1_20 -> m1_21  [key=0, style=solid];
m1_21 -> m1_22  [key=0, style=solid];
m1_21 -> m1_29  [key=2, style=dotted];
m1_21 -> m1_24  [color=darkseagreen4, key=1, label=isVersionNull, style=dashed];
m1_22 -> m1_23  [key=0, style=solid];
m1_22 -> m1_30  [key=2, style=dotted];
m1_22 -> m1_25  [color=darkseagreen4, key=1, label=builder, style=dashed];
m1_22 -> m1_26  [color=darkseagreen4, key=1, label=builder, style=dashed];
m1_22 -> m1_27  [color=darkseagreen4, key=1, label=builder, style=dashed];
m1_24 -> m1_25  [key=0, style=solid];
m1_24 -> m1_27  [key=0, style=solid];
m1_23 -> m1_24  [key=0, style=solid];
m1_23 -> m1_31  [key=2, style=dotted];
m1_25 -> m1_26  [key=0, style=solid];
m1_25 -> m1_32  [key=2, style=dotted];
m1_26 -> m1_27  [key=0, style=solid];
m1_26 -> m1_31  [key=2, style=dotted];
m1_27 -> m1_28  [key=0, style=solid];
m1_27 -> m1_33  [key=2, style=dotted];
m1_28 -> m1_20  [color=blue, key=0, style=bold];
m1_14 -> m1_15  [key=0, style=solid];
m1_10 -> m1_11  [key=0, style=solid];
m1_11 -> m1_12  [key=0, style=solid];
m1_11 -> m1_13  [key=2, style=dotted];
m1_12 -> m1_10  [color=blue, key=0, style=bold];
m1_15 -> m1_16  [key=0, style=solid];
m1_16 -> m1_14  [color=blue, key=0, style=bold];
m1_50 -> m1_51  [key=0, style=solid];
m1_51 -> m1_52  [key=0, style=solid];
m1_51 -> m1_34  [key=2, style=dotted];
m1_52 -> m1_50  [color=blue, key=0, style=bold];
m1_53 -> m1_5  [color=darkseagreen4, key=1, label="CommandLine.Text.HeadingInfo", style=dashed];
m1_53 -> m1_6  [color=darkseagreen4, key=1, label="CommandLine.Text.HeadingInfo", style=dashed];
m1_53 -> m1_21  [color=darkseagreen4, key=1, label="CommandLine.Text.HeadingInfo", style=dashed];
m1_53 -> m1_22  [color=darkseagreen4, key=1, label="CommandLine.Text.HeadingInfo", style=dashed];
m1_53 -> m1_23  [color=darkseagreen4, key=1, label="CommandLine.Text.HeadingInfo", style=dashed];
m1_53 -> m1_26  [color=darkseagreen4, key=1, label="CommandLine.Text.HeadingInfo", style=dashed];
m1_53 -> m1_39  [color=darkseagreen4, key=1, label="CommandLine.Text.HeadingInfo", style=dashed];
m1_53 -> m1_40  [color=darkseagreen4, key=1, label="CommandLine.Text.HeadingInfo", style=dashed];
m1_53 -> m1_48  [color=darkseagreen4, key=1, label="CommandLine.Text.HeadingInfo", style=dashed];
m1_53 -> m1_51  [color=darkseagreen4, key=1, label="CommandLine.Text.HeadingInfo", style=dashed];
}
