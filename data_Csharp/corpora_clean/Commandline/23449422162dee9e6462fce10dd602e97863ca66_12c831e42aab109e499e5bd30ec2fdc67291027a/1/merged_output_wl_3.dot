digraph  {
m0_0 [cluster="CommandLine.Infrastructure.PopsicleSetter.Set<T>(bool, ref T, T)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Infrastructure.PopsicleSetter.Set<T>(bool, ref T, T)", span="8-8"];
m0_1 [cluster="CommandLine.Infrastructure.PopsicleSetter.Set<T>(bool, ref T, T)", file="InstanceBuilderTests.cs", label=consumed, span="10-10"];
m0_3 [cluster="CommandLine.Infrastructure.PopsicleSetter.Set<T>(bool, ref T, T)", file="InstanceBuilderTests.cs", label="field = value", span="15-15"];
m0_2 [cluster="CommandLine.Infrastructure.PopsicleSetter.Set<T>(bool, ref T, T)", file="InstanceBuilderTests.cs", label="throw new InvalidOperationException();", span="12-12"];
m0_4 [cluster="CommandLine.Infrastructure.PopsicleSetter.Set<T>(bool, ref T, T)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Infrastructure.PopsicleSetter.Set<T>(bool, ref T, T)", span="8-8"];
m0_5 [cluster="System.InvalidOperationException.InvalidOperationException()", file="InstanceBuilderTests.cs", label="Entry System.InvalidOperationException.InvalidOperationException()", span="0-0"];
m1_5 [cluster="Unk.Select", file="Sequence.cs", label="Entry Unk.Select", span=""];
m1_32 [cluster="System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", file="Sequence.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", span="31-31"];
m1_0 [cluster="CommandLine.Infrastructure.ExceptionExtensions.RethrowWhenAbsentIn(System.Exception, System.Collections.Generic.IEnumerable<System.Type>)", file="Sequence.cs", label="Entry CommandLine.Infrastructure.ExceptionExtensions.RethrowWhenAbsentIn(System.Exception, System.Collections.Generic.IEnumerable<System.Type>)", span="11-11"];
m1_1 [cluster="CommandLine.Infrastructure.ExceptionExtensions.RethrowWhenAbsentIn(System.Exception, System.Collections.Generic.IEnumerable<System.Type>)", color=green, community=0, file="Sequence.cs", label="0: !validExceptions.Contains(exception.GetType())", span="13-13"];
m1_2 [cluster="CommandLine.Infrastructure.ExceptionExtensions.RethrowWhenAbsentIn(System.Exception, System.Collections.Generic.IEnumerable<System.Type>)", file="Sequence.cs", label="throw exception;", span="15-15"];
m1_3 [cluster="CommandLine.Infrastructure.ExceptionExtensions.RethrowWhenAbsentIn(System.Exception, System.Collections.Generic.IEnumerable<System.Type>)", file="Sequence.cs", label="Exit CommandLine.Infrastructure.ExceptionExtensions.RethrowWhenAbsentIn(System.Exception, System.Collections.Generic.IEnumerable<System.Type>)", span="11-11"];
m1_6 [cluster="Unk.>", file="Sequence.cs", label="Entry Unk.>", span=""];
m1_4 [cluster="System.Exception.GetType()", file="Sequence.cs", label="Entry System.Exception.GetType()", span="0-0"];
m1_17 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", color=green, community=0, file="Sequence.cs", label="0: specProps.Empty()", span="34-34"];
m1_18 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", color=green, community=0, file="Sequence.cs", label="0: yield break;", span="36-36"];
m1_19 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="Sequence.cs", label="var pt = specProps.First()", span="38-38"];
m1_29 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="Sequence.cs", label="MapValuesImpl(specProps.Skip(1), values.Skip(taken.Count()), converter)", span="65-65"];
m1_22 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="Sequence.cs", label="yield return\r\n                    Tuple.Create(pt, pt.Specification.MakeErrorInCaseOfMinConstraint());", span="42-43"];
m1_23 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="Sequence.cs", label="yield break;", span="44-44"];
m1_26 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="Sequence.cs", label="yield return\r\n                    Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                        pt, Maybe.Just<Error>(new SequenceOutOfRangeError(NameInfo.EmptyName)));", span="52-54"];
m1_27 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="Sequence.cs", label="yield break;", span="55-55"];
m1_28 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="Sequence.cs", label="yield return\r\n                converter(taken, pt.Property.PropertyType, pt.Specification.TargetType != TargetType.Sequence)\r\n                    .MapValueOrDefault(\r\n                        converted => Tuple.Create(pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>()),\r\n                        Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                            pt, Maybe.Just<Error>(new BadFormatConversionError(NameInfo.EmptyName))));", span="58-63"];
m1_30 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="Sequence.cs", label="yield return value;", span="67-67"];
m1_20 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="Sequence.cs", label="var taken = values.Take(pt.Specification.CountOfMaxNumberOfValues().MapValueOrDefault(n => n, values.Count()))", span="39-39"];
m1_24 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="Sequence.cs", label="var next = specProps.Skip(1).FirstOrDefault(s => s.Specification.IsValue()).ToMaybe()", span="47-47"];
m1_25 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="Sequence.cs", label="pt.Specification.Max.IsJust()\r\n                && next.IsNothing()\r\n                && values.Skip(taken.Count()).Any()", span="48-50"];
m1_21 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="Sequence.cs", label="taken.Empty()", span="40-40"];
m1_31 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="Sequence.cs", label="Exit CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="29-29"];
m1_34 [cluster="CommandLine.Core.Specification.CountOfMaxNumberOfValues()", file="Sequence.cs", label="Entry CommandLine.Core.Specification.CountOfMaxNumberOfValues()", span="71-71"];
m1_56 [cluster="CommandLine.Core.Specification.IsValue()", file="Sequence.cs", label="Entry CommandLine.Core.Specification.IsValue()", span="15-15"];
m1_44 [cluster="Unk.IsNothing", file="Sequence.cs", label="Entry Unk.IsNothing", span=""];
m1_42 [cluster="Unk.ToMaybe", file="Sequence.cs", label="Entry Unk.ToMaybe", span=""];
m1_47 [cluster="CSharpx.Maybe.Just<T>(T)", file="Sequence.cs", label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124"];
m1_46 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="Sequence.cs", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="360-360"];
m1_39 [cluster="System.Tuple.Create<T1, T2>(T1, T2)", file="Sequence.cs", label="Entry System.Tuple.Create<T1, T2>(T1, T2)", span="0-0"];
m1_53 [cluster="lambda expression", file="Sequence.cs", label="Entry lambda expression", span="47-47"];
m1_8 [cluster="lambda expression", file="Sequence.cs", label="Entry lambda expression", span="23-23"];
m1_11 [cluster="lambda expression", file="Sequence.cs", label="Entry lambda expression", span="24-24"];
m1_14 [cluster="lambda expression", file="Sequence.cs", label="Entry lambda expression", span="25-25"];
m1_58 [cluster="lambda expression", file="Sequence.cs", label="Tuple.Create(pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>())", span="61-61"];
m1_10 [cluster="lambda expression", file="Sequence.cs", label="Exit lambda expression", span="23-23"];
m1_9 [cluster="lambda expression", file="Sequence.cs", label="pe.Item1", span="23-23"];
m1_13 [cluster="lambda expression", file="Sequence.cs", label="Exit lambda expression", span="24-24"];
m1_12 [cluster="lambda expression", file="Sequence.cs", label="pe.Item2", span="24-24"];
m1_16 [cluster="lambda expression", file="Sequence.cs", label="Exit lambda expression", span="25-25"];
m1_15 [cluster="lambda expression", file="Sequence.cs", label="e.Value", span="25-25"];
m1_57 [cluster="lambda expression", file="Sequence.cs", label="Entry lambda expression", span="61-61"];
m1_50 [cluster="lambda expression", file="Sequence.cs", label="Entry lambda expression", span="39-39"];
m1_59 [cluster="lambda expression", file="Sequence.cs", label="Exit lambda expression", span="61-61"];
m1_52 [cluster="lambda expression", file="Sequence.cs", label="Exit lambda expression", span="39-39"];
m1_51 [cluster="lambda expression", file="Sequence.cs", label=n, span="39-39"];
m1_54 [cluster="lambda expression", file="Sequence.cs", label="s.Specification.IsValue()", span="47-47"];
m1_55 [cluster="lambda expression", file="Sequence.cs", label="Exit lambda expression", span="47-47"];
m1_33 [cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="Sequence.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0"];
m1_45 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="Sequence.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
m1_60 [cluster="CommandLine.Core.SpecificationProperty.WithValue(CSharpx.Maybe<object>)", file="Sequence.cs", label="Entry CommandLine.Core.SpecificationProperty.WithValue(CSharpx.Maybe<object>)", span="18-18"];
m1_40 [cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="Sequence.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0"];
m1_37 [cluster="System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", file="Sequence.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", span="0-0"];
m1_48 [cluster="System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", file="Sequence.cs", label="Entry System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", span="0-0"];
m1_72 [cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", file="Sequence.cs", label="Entry CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", span="87-87"];
m1_73 [cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", file="Sequence.cs", label="return specification.Min.IsJust()\r\n                ? Maybe.Just<Error>(new SequenceOutOfRangeError(NameInfo.EmptyName))\r\n                : Maybe.Nothing<Error>();", span="89-91"];
m1_74 [cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", file="Sequence.cs", label="Exit CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", span="87-87"];
m1_49 [cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="Sequence.cs", label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="349-349"];
m1_38 [cluster="CommandLine.Core.Specification.MakeErrorInCaseOfMinConstraint()", file="Sequence.cs", label="Entry CommandLine.Core.Specification.MakeErrorInCaseOfMinConstraint()", span="87-87"];
m1_61 [cluster="CSharpx.Maybe.Nothing<T>()", file="Sequence.cs", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
m1_36 [cluster="CSharpx.Maybe<T1>.MapValueOrDefault<T1, T2>(System.Func<T1, T2>, T2)", file="Sequence.cs", label="Entry CSharpx.Maybe<T1>.MapValueOrDefault<T1, T2>(System.Func<T1, T2>, T2)", span="377-377"];
m1_71 [cluster="CSharpx.Maybe<T>.FromJustOrFail<T>(System.Exception)", file="Sequence.cs", label="Entry CSharpx.Maybe<T>.FromJustOrFail<T>(System.Exception)", span="355-355"];
m1_35 [cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="Sequence.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0"];
m1_62 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="Sequence.cs", label="Entry CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", span="71-71"];
m1_68 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="Sequence.cs", label="return Maybe.Just(specification.Max.FromJustOrFail());", span="80-80"];
m1_65 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="Sequence.cs", label="return Maybe.Just(1);", span="76-76"];
m1_67 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="Sequence.cs", label="specification.Max.IsJust()", span="78-78"];
m1_69 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="Sequence.cs", label="return Maybe.Nothing<int>();", span="84-84"];
m1_64 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="Sequence.cs", label="TargetType.Scalar", span="75-75"];
m1_66 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="Sequence.cs", label="TargetType.Sequence", span="77-77"];
m1_63 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="Sequence.cs", label="specification.TargetType", span="73-73"];
m1_70 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="Sequence.cs", label="Exit CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", span="71-71"];
m1_41 [cluster="Unk.FirstOrDefault", file="Sequence.cs", label="Entry Unk.FirstOrDefault", span=""];
m1_43 [cluster="CSharpx.Maybe<T>.IsJust<T>()", file="Sequence.cs", label="Entry CSharpx.Maybe<T>.IsJust<T>()", span="326-326"];
m1_7 [cluster="Unk.Succeed", file="Sequence.cs", label="Entry Unk.Succeed", span=""];
m1_75 [file="Sequence.cs", label=pt, span=""];
m2_15 [cluster="Unk.Where", file="TokenPartitioner.cs", label="Entry Unk.Where", span=""];
m2_23 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="21-21"];
m2_12 [cluster="CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11"];
m2_22 [cluster="Unk.Select", file="TokenPartitioner.cs", label="Entry Unk.Select", span=""];
m2_19 [cluster="CommandLine.Core.KeyValuePairHelper.ForScalar(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.KeyValuePairHelper.ForScalar(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="16-16"];
m2_13 [cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11"];
m2_0 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12"];
m2_1 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs", label="var tokenList = tokens.ToList()", span="16-16"];
m2_2 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs", label="var switches = Switch.Partition(tokenList, typeLookup).ToList()", span="17-17"];
m2_3 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs", label="var scalars = Scalar.Partition(tokenList, typeLookup).ToList()", span="18-18"];
m2_4 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs", label="var sequences = Sequence.Partition(tokenList, typeLookup).ToList()", span="19-19"];
m2_5 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", color=green, community=0, file="TokenPartitioner.cs", label="0: var nonOptions = tokenList\r\n                .Where(t => !switches.Contains(t))\r\n                .Where(t => !scalars.Contains(t))\r\n                .Where(t => !sequences.Contains(t)).ToList()", span="20-23"];
m2_8 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs", label="return TokenPartitions.Create(\r\n                    KeyValuePairHelper.ForSwitch(switches)\r\n                        .Concat(KeyValuePairHelper.ForScalar(scalars))\r\n                        .Concat(KeyValuePairHelper.ForSequence(sequences)),\r\n                values.Select(t => t.Text),\r\n                errors);", span="27-32"];
m2_6 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs", label="var values = nonOptions.Where(v => v.IsValue()).ToList()", span="24-24"];
m2_7 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs", label="var errors = nonOptions.Except(values).ToList()", span="25-25"];
m2_9 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs", label="Exit CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12"];
m2_17 [cluster="Unk.Except", file="TokenPartitioner.cs", label="Entry Unk.Except", span=""];
m2_30 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="31-31"];
m2_14 [cluster="System.Collections.Generic.IEnumerable<TSource>.Except<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="TokenPartitioner.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Except<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
m2_16 [cluster="Unk.ToList", file="TokenPartitioner.cs", label="Entry Unk.ToList", span=""];
m2_31 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="23-23"];
m2_24 [cluster="lambda expression", color=green, community=0, file="TokenPartitioner.cs", label="0: !switches.Contains(t)", span="21-21"];
m2_28 [cluster="lambda expression", color=green, community=0, file="TokenPartitioner.cs", label="2: !scalars.Contains(t)", span="22-22"];
m2_25 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="21-21"];
m2_26 [cluster="System.Collections.Generic.List<T>.Contains(T)", file="TokenPartitioner.cs", label="Entry System.Collections.Generic.List<T>.Contains(T)", span="0-0"];
m2_29 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="22-22"];
m2_27 [cluster="CommandLine.Core.Token.IsValue()", file="TokenPartitioner.cs", label="Entry CommandLine.Core.Token.IsValue()", span="73-73"];
m2_32 [cluster="lambda expression", color=green, community=0, file="TokenPartitioner.cs", label="1: !sequences.Contains(t)", span="23-23"];
m2_33 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="23-23"];
m2_18 [cluster="CommandLine.Core.KeyValuePairHelper.ForSwitch(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.KeyValuePairHelper.ForSwitch(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="10-10"];
m2_11 [cluster="CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11"];
m2_10 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", file="TokenPartitioner.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", span="0-0"];
m2_20 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="TokenPartitioner.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
m2_21 [cluster="CommandLine.Core.KeyValuePairHelper.ForSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.KeyValuePairHelper.ForSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="22-22"];
m2_41 [file="TokenPartitioner.cs", label=switches, span=""];
m2_42 [file="TokenPartitioner.cs", label=scalars, span=""];
m2_43 [file="TokenPartitioner.cs", label=sequences, span=""];
m3_0 [cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="TypeDescriptor.cs", label="Entry CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="15-15"];
m3_3 [cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", color=green, community=0, file="TypeDescriptor.cs", label="0: Exit CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="15-15"];
m3_2 [cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="TypeDescriptor.cs", label="return Result.Succeed(\r\n                propAndErrors.Select(pe => pe.Item1),\r\n                propAndErrors.Select(pe => pe.Item2)\r\n                    .OfType<Just<Error>>().Select(e => e.Value)\r\n                );", span="22-26"];
m3_1 [cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="TypeDescriptor.cs", label="var propAndErrors = MapValuesImpl(specProps, values, converter)", span="20-20"];
m3_4 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="TypeDescriptor.cs", label="Entry CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="29-29"];
m3_32 [cluster="System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", file="TypeDescriptor.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", span="31-31"];
m3_12 [cluster="lambda expression", file="TypeDescriptor.cs", label="pe.Item2", span="24-24"];
m3_13 [cluster="lambda expression", color=green, community=0, file="TypeDescriptor.cs", label="0: Exit lambda expression", span="24-24"];
m3_14 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="25-25"];
m3_6 [cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>, CommandLine.Core.TypeDescriptor)", file="TypeDescriptor.cs", label="maximumItems == null", span="37-37"];
m3_17 [cluster="lambda expression", color=green, community=0, file="TypeDescriptor.cs", label="0: n", span="47-47"];
m3_18 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="TypeDescriptor.cs", label="yield break;", span="36-36"];
m3_22 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="TypeDescriptor.cs", label="yield return\r\n                    Tuple.Create(pt, pt.Specification.MakeErrorInCaseOfMinConstraint());", span="42-43"];
m3_23 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="TypeDescriptor.cs", label="yield break;", span="44-44"];
m3_26 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="TypeDescriptor.cs", label="yield return\r\n                    Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                        pt, Maybe.Just<Error>(new SequenceOutOfRangeError(NameInfo.EmptyName)));", span="52-54"];
m3_27 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="TypeDescriptor.cs", label="yield break;", span="55-55"];
m3_28 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="TypeDescriptor.cs", label="yield return\r\n                converter(taken, pt.Property.PropertyType, pt.Specification.TargetType != TargetType.Sequence)\r\n                    .MapValueOrDefault(\r\n                        converted => Tuple.Create(pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>()),\r\n                        Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                            pt, Maybe.Just<Error>(new BadFormatConversionError(NameInfo.EmptyName))));", span="58-63"];
m3_30 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="TypeDescriptor.cs", label="yield return value;", span="67-67"];
m3_19 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="TypeDescriptor.cs", label="CommandLine.Core.TypeDescriptor", span=""];
m3_20 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="TypeDescriptor.cs", label="var taken = values.Take(pt.Specification.CountOfMaxNumberOfValues().MapValueOrDefault(n => n, values.Count()))", span="39-39"];
m3_24 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", color=red, community=0, file="TypeDescriptor.cs", label="0: var next = specProps.Skip(1).FirstOrDefault(s => s.Specification.IsValue()).ToMaybe()", span="47-47"];
m3_25 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="TypeDescriptor.cs", label="pt.Specification.Max.IsJust()\r\n                && next.IsNothing()\r\n                && values.Skip(taken.Count()).Any()", span="48-50"];
m3_29 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="TypeDescriptor.cs", label="MapValuesImpl(specProps.Skip(1), values.Skip(taken.Count()), converter)", span="65-65"];
m3_21 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="TypeDescriptor.cs", label="taken.Empty()", span="40-40"];
m3_31 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="TypeDescriptor.cs", label="Exit CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="29-29"];
m3_34 [cluster="CommandLine.Core.Specification.CountOfMaxNumberOfValues()", file="TypeDescriptor.cs", label="Entry CommandLine.Core.Specification.CountOfMaxNumberOfValues()", span="71-71"];
m3_56 [cluster="CommandLine.Core.Specification.IsValue()", file="TypeDescriptor.cs", label="Entry CommandLine.Core.Specification.IsValue()", span="15-15"];
m3_44 [cluster="Unk.IsNothing", file="TypeDescriptor.cs", label="Entry Unk.IsNothing", span=""];
m3_42 [cluster="Unk.ToMaybe", file="TypeDescriptor.cs", label="Entry Unk.ToMaybe", span=""];
m3_45 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="TypeDescriptor.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
m3_46 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="TypeDescriptor.cs", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="360-360"];
m3_39 [cluster="System.Tuple.Create<T1, T2>(T1, T2)", file="TypeDescriptor.cs", label="Entry System.Tuple.Create<T1, T2>(T1, T2)", span="0-0"];
m3_57 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="61-61"];
m3_8 [cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>, CommandLine.Core.TypeDescriptor)", file="TypeDescriptor.cs", label="return new TypeDescriptor(tag, maximumItems, next.ToMaybe());", span="39-39"];
m3_11 [cluster="T.ToMaybe<T>()", file="TypeDescriptor.cs", label="Entry T.ToMaybe<T>()", span="79-79"];
m3_9 [cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>, CommandLine.Core.TypeDescriptor)", file="TypeDescriptor.cs", label="Exit CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>, CommandLine.Core.TypeDescriptor)", span="35-35"];
m3_10 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="TypeDescriptor.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m3_15 [cluster="CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", file="TypeDescriptor.cs", label="Entry CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", span="100-100"];
m3_16 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="25-25"];
m3_58 [cluster="lambda expression", file="TypeDescriptor.cs", label="Tuple.Create(pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>())", span="61-61"];
m3_50 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="39-39"];
m3_53 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="47-47"];
m3_51 [cluster="lambda expression", file="TypeDescriptor.cs", label=n, span="39-39"];
m3_52 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="39-39"];
m3_54 [cluster="lambda expression", color=red, community=0, file="TypeDescriptor.cs", label="0: s.Specification.IsValue()", span="47-47"];
m3_55 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="47-47"];
m3_59 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="61-61"];
m3_33 [cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="TypeDescriptor.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0"];
m3_47 [cluster="CSharpx.Maybe.Just<T>(T)", file="TypeDescriptor.cs", label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124"];
m3_60 [cluster="CommandLine.Core.SpecificationProperty.WithValue(CSharpx.Maybe<object>)", file="TypeDescriptor.cs", label="Entry CommandLine.Core.SpecificationProperty.WithValue(CSharpx.Maybe<object>)", span="18-18"];
m3_40 [cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="TypeDescriptor.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0"];
m3_37 [cluster="System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", file="TypeDescriptor.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", span="0-0"];
m3_48 [cluster="System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", file="TypeDescriptor.cs", label="Entry System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", span="0-0"];
m3_5 [cluster="Unk.Select", file="TypeDescriptor.cs", label="Entry Unk.Select", span=""];
m3_7 [cluster="Unk.Succeed", file="TypeDescriptor.cs", label="Entry Unk.Succeed", span=""];
m3_72 [cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", file="TypeDescriptor.cs", label="Entry CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", span="87-87"];
m3_73 [cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", file="TypeDescriptor.cs", label="return specification.Min.IsJust()\r\n                ? Maybe.Just<Error>(new SequenceOutOfRangeError(NameInfo.EmptyName))\r\n                : Maybe.Nothing<Error>();", span="89-91"];
m3_74 [cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", file="TypeDescriptor.cs", label="Exit CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", span="87-87"];
m3_49 [cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="TypeDescriptor.cs", label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="349-349"];
m3_38 [cluster="CommandLine.Core.Specification.MakeErrorInCaseOfMinConstraint()", file="TypeDescriptor.cs", label="Entry CommandLine.Core.Specification.MakeErrorInCaseOfMinConstraint()", span="87-87"];
m3_61 [cluster="CSharpx.Maybe.Nothing<T>()", file="TypeDescriptor.cs", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
m3_36 [cluster="CSharpx.Maybe<T1>.MapValueOrDefault<T1, T2>(System.Func<T1, T2>, T2)", file="TypeDescriptor.cs", label="Entry CSharpx.Maybe<T1>.MapValueOrDefault<T1, T2>(System.Func<T1, T2>, T2)", span="377-377"];
m3_71 [cluster="CSharpx.Maybe<T>.FromJustOrFail<T>(System.Exception)", file="TypeDescriptor.cs", label="Entry CSharpx.Maybe<T>.FromJustOrFail<T>(System.Exception)", span="355-355"];
m3_35 [cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="TypeDescriptor.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0"];
m3_62 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="TypeDescriptor.cs", label="Entry CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", span="71-71"];
m3_63 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="TypeDescriptor.cs", label="specification.TargetType", span="73-73"];
m3_67 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="TypeDescriptor.cs", label="specification.Max.IsJust()", span="78-78"];
m3_68 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="TypeDescriptor.cs", label="return Maybe.Just(specification.Max.FromJustOrFail());", span="80-80"];
m3_64 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="TypeDescriptor.cs", label="TargetType.Scalar", span="75-75"];
m3_66 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="TypeDescriptor.cs", label="TargetType.Sequence", span="77-77"];
m3_65 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="TypeDescriptor.cs", label="return Maybe.Just(1);", span="76-76"];
m3_69 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="TypeDescriptor.cs", label="return Maybe.Nothing<int>();", span="84-84"];
m3_70 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="TypeDescriptor.cs", label="Exit CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", span="71-71"];
m3_41 [cluster="Unk.FirstOrDefault", file="TypeDescriptor.cs", label="Entry Unk.FirstOrDefault", span=""];
m3_43 [cluster="CSharpx.Maybe<T>.IsJust<T>()", file="TypeDescriptor.cs", label="Entry CSharpx.Maybe<T>.IsJust<T>()", span="326-326"];
m3_75 [file="TypeDescriptor.cs", label=pt, span=""];
m4_62 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<char>>)", file="TypeLookup.cs", label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<char>>)", span="48-48"];
m4_68 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<char>>)", file="TypeLookup.cs", label="return StatePair.Create(flattened, tokens.Errors);", span="66-66"];
m4_65 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<char>>)", file="TypeLookup.cs", label="var replaces = tokens.Value.Select((t,i) =>\r\n                optionSequenceWithSeparatorLookup(t.Text)\r\n                    .Return(sep => Tuple.Create(i + 1, sep),\r\n                        Tuple.Create(-1, '\0'))).SkipWhile(x => x.Item1 < 0)", span="54-57"];
m4_66 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<char>>)", file="TypeLookup.cs", label="var exploded = tokens.Value.Select((t, i) =>\r\n                        replaces.FirstOrDefault(x => x.Item1 == i).ToMaybe()\r\n                            .Return(r => t.Text.Split(r.Item2).Select(str => Token.Value(str)),\r\n                                Enumerable.Empty<Token>().Concat(new[]{ t })))", span="59-62"];
m4_64 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<char>>)", file="TypeLookup.cs", label="throw new ArgumentNullException(''tokens'');", span="52-52"];
m4_67 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<char>>)", file="TypeLookup.cs", label="var flattened = exploded.SelectMany(x => x)", span="64-64"];
m4_63 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<char>>)", file="TypeLookup.cs", label="tokens == null", span="52-52"];
m4_69 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<char>>)", file="TypeLookup.cs", label="Exit CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<char>>)", span="48-48"];
m4_150 [cluster="string.Split(params char[])", file="TypeLookup.cs", label="Entry string.Split(params char[])", span="0-0"];
m4_17 [cluster="Unk.nameLookup", file="TypeLookup.cs", label="Entry Unk.nameLookup", span=""];
m4_76 [cluster="CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", file="TypeLookup.cs", label="Entry CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", span="103-103"];
m4_148 [cluster="CommandLine.BadFormatTokenError.BadFormatTokenError(string)", file="TypeLookup.cs", label="Entry CommandLine.BadFormatTokenError.BadFormatTokenError(string)", span="188-188"];
m4_11 [cluster="string.StartsWith(string, System.StringComparison)", file="TypeLookup.cs", label="Entry string.StartsWith(string, System.StringComparison)", span="0-0"];
m4_70 [cluster="Unk.SkipWhile", file="TypeLookup.cs", label="Entry Unk.SkipWhile", span=""];
m4_127 [cluster="CommandLine.Core.Token.Name(string)", file="TypeLookup.cs", label="Entry CommandLine.Core.Token.Name(string)", span="19-19"];
m4_149 [cluster="System.Action<T>.Invoke(T)", file="TypeLookup.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m4_39 [cluster="Unk.Any", file="TypeLookup.cs", label="Entry Unk.Any", span=""];
m4_12 [cluster="CommandLine.Core.Token.Value(string)", file="TypeLookup.cs", label="Entry CommandLine.Core.Token.Value(string)", span="26-26"];
m4_16 [cluster="Unk.IsName", file="TypeLookup.cs", label="Entry Unk.IsName", span=""];
m4_41 [cluster="System.Func<T, TResult>.Invoke(T)", file="TypeLookup.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m4_18 [cluster="Unk.Where", file="TypeLookup.cs", label="Entry Unk.Where", span=""];
m4_21 [cluster="Unk.Create", file="TypeLookup.cs", label="Entry Unk.Create", span=""];
m4_88 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="TypeLookup.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m4_128 [cluster="string.Substring(int, int)", file="TypeLookup.cs", label="Entry string.Substring(int, int)", span="0-0"];
m4_129 [cluster="string.String(char, int)", file="TypeLookup.cs", label="Entry string.String(char, int)", span="0-0"];
m4_29 [cluster="Unk.Contains", file="TypeLookup.cs", label="Entry Unk.Contains", span=""];
m4_87 [cluster="Unk.ToMaybe", file="TypeLookup.cs", label="Entry Unk.ToMaybe", span=""];
m4_75 [cluster="System.Tuple.Create<T1, T2>(T1, T2)", file="TypeLookup.cs", label="Entry System.Tuple.Create<T1, T2>(T1, T2)", span="0-0"];
m4_91 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="60-60"];
m4_27 [cluster="lambda expression", color=green, community=0, file="TypeLookup.cs", label="0: !unkTokens.Contains(x)", span="30-30"];
m4_26 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="30-30"];
m4_28 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="30-30"];
m4_46 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="39-39"];
m4_50 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="41-41"];
m4_53 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="42-42"];
m4_56 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="42-42"];
m4_60 [cluster="lambda expression", file="TypeLookup.cs", label="tokens.Concat(values)", span="43-43"];
m4_47 [cluster="lambda expression", color=green, community=0, file="TypeLookup.cs", label="0: arg.EqualsOrdinal(''--'')", span="39-39"];
m4_48 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="39-39"];
m4_51 [cluster="lambda expression", color=green, community=0, file="TypeLookup.cs", label="0: !arg.EqualsOrdinal(''--'')", span="41-41"];
m4_52 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="41-41"];
m4_54 [cluster="lambda expression", color=green, community=0, file="TypeLookup.cs", label="0: !arg.EqualsOrdinal(''--'')", span="42-42"];
m4_55 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="42-42"];
m4_57 [cluster="lambda expression", color=green, community=0, file="TypeLookup.cs", label="0: Token.Value(t)", span="42-42"];
m4_58 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="42-42"];
m4_23 [cluster="lambda expression", file="TypeLookup.cs", label="errors.Add(e)", span="18-18"];
m4_73 [cluster="lambda expression", file="TypeLookup.cs", label="optionSequenceWithSeparatorLookup(t.Text)\r\n                    .Return(sep => Tuple.Create(i + 1, sep),\r\n                        Tuple.Create(-1, '\0'))", span="55-57"];
m4_59 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="43-43"];
m4_95 [cluster="lambda expression", file="TypeLookup.cs", label="t.Text.Split(r.Item2).Select(str => Token.Value(str))", span="61-61"];
m4_61 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="43-43"];
m4_99 [cluster="lambda expression", file="TypeLookup.cs", label="Token.Value(str)", span="61-61"];
m4_22 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="18-18"];
m4_24 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="18-18"];
m4_72 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="54-57"];
m4_74 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="54-57"];
m4_77 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="56-56"];
m4_80 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="57-57"];
m4_84 [cluster="lambda expression", file="TypeLookup.cs", label="replaces.FirstOrDefault(x => x.Item1 == i).ToMaybe()\r\n                            .Return(r => t.Text.Split(r.Item2).Select(str => Token.Value(str)),\r\n                                Enumerable.Empty<Token>().Concat(new[]{ t }))", span="60-62"];
m4_83 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="59-62"];
m4_94 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="61-61"];
m4_96 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="61-61"];
m4_98 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="61-61"];
m4_100 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="61-61"];
m4_101 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="64-64"];
m4_78 [cluster="lambda expression", file="TypeLookup.cs", label="Tuple.Create(i + 1, sep)", span="56-56"];
m4_79 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="56-56"];
m4_82 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="57-57"];
m4_81 [cluster="lambda expression", file="TypeLookup.cs", label="x.Item1 < 0", span="57-57"];
m4_85 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="59-62"];
m4_92 [cluster="lambda expression", file="TypeLookup.cs", label="x.Item1 == i", span="60-60"];
m4_103 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="64-64"];
m4_102 [cluster="lambda expression", file="TypeLookup.cs", label=x, span="64-64"];
m4_93 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="60-60"];
m4_43 [cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="TypeLookup.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0"];
m4_13 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="TypeLookup.cs", label="Entry CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", span="119-119"];
m4_133 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="TypeLookup.cs", label="throw new ArgumentNullException(''value'');", span="125-125"];
m4_145 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="TypeLookup.cs", label="yield return Token.Value(parts[1]);", span="144-144"];
m4_134 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="TypeLookup.cs", label="value.Length > 2 && value.StartsWith(''--'', StringComparison.Ordinal)", span="128-128"];
m4_132 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="TypeLookup.cs", label="value == null", span="123-123"];
m4_138 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="TypeLookup.cs", label="yield return Token.Name(text);", span="134-134"];
m4_139 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="TypeLookup.cs", label="yield break;", span="135-135"];
m4_142 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="TypeLookup.cs", label="yield break;", span="140-140"];
m4_144 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="TypeLookup.cs", label="yield return Token.Name(parts[0]);", span="143-143"];
m4_135 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="TypeLookup.cs", label="var text = value.Substring(2)", span="130-130"];
m4_141 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="TypeLookup.cs", label="onError(new BadFormatTokenError(value))", span="139-139"];
m4_143 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="TypeLookup.cs", label="var parts = text.Split('=')", span="142-142"];
m4_137 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="TypeLookup.cs", label="equalIndex <= 0", span="132-132"];
m4_140 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="TypeLookup.cs", label="equalIndex == 1", span="137-137"];
m4_136 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="TypeLookup.cs", label="var equalIndex = text.IndexOf('=')", span="131-131"];
m4_146 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="TypeLookup.cs", label="Exit CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", span="119-119"];
m4_49 [cluster="string.EqualsOrdinal(string)", file="TypeLookup.cs", label="Entry string.EqualsOrdinal(string)", span="34-34"];
m4_42 [cluster="System.Collections.Generic.IEnumerable<TSource>.SkipWhile<TSource>(System.Func<TSource, bool>)", file="TypeLookup.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.SkipWhile<TSource>(System.Func<TSource, bool>)", span="0-0"];
m4_20 [cluster="Unk.Concat", file="TypeLookup.cs", label="Entry Unk.Concat", span=""];
m4_40 [cluster="System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", file="TypeLookup.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", span="0-0"];
m4_147 [cluster="string.IndexOf(char)", file="TypeLookup.cs", label="Entry string.IndexOf(char)", span="0-0"];
m4_44 [cluster="Unk.Select", file="TypeLookup.cs", label="Entry Unk.Select", span=""];
m4_45 [cluster="CommandLine.Core.StatePair<T1>.MapValue<T1, T2>(System.Func<T1, T2>)", file="TypeLookup.cs", label="Entry CommandLine.Core.StatePair<T1>.MapValue<T1, T2>(System.Func<T1, T2>)", span="69-69"];
m4_0 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="TypeLookup.cs", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11"];
m4_6 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", color=green, community=0, file="TypeLookup.cs", label="0: var unkTokens = (from t in tokens where t.IsName() && !nameLookup(t.Text) select t).ToList()", span="28-28"];
m4_5 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="TypeLookup.cs", label="var tokens = (from arg in arguments\r\n                          from token in !arg.StartsWith(''-'', StringComparison.Ordinal)\r\n                               ? new Token[] { Token.Value(arg) }\r\n                               : arg.StartsWith(''--'', StringComparison.Ordinal)\r\n                                     ? TokenizeLongName(arg, onError)\r\n                                     : TokenizeShortName(arg, nameLookup)\r\n                          select token).ToList()", span="20-26"];
m4_7 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", color=green, community=0, file="TypeLookup.cs", label="0: return StatePair.Create(tokens.Where(x=>!unkTokens.Contains(x)), errors.Concat(from t in unkTokens select new UnknownOptionError(t.Text)));", span="30-30"];
m4_3 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="TypeLookup.cs", label="var errors = new List<Error>()", span="17-17"];
m4_1 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="TypeLookup.cs", label="arguments == null", span="15-15"];
m4_4 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="TypeLookup.cs", label="Action<Error> onError = e => errors.Add(e)", span="18-18"];
m4_2 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="TypeLookup.cs", label="throw new ArgumentNullException(''arguments'');", span="15-15"];
m4_8 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="TypeLookup.cs", label="Exit CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11"];
m4_30 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="TypeLookup.cs", label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="33-33"];
m4_31 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", color=green, community=0, file="TypeLookup.cs", label="0: arguments == null", span="37-37"];
m4_32 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", color=green, community=0, file="TypeLookup.cs", label="0: throw new ArgumentNullException(''arguments'');", span="37-37"];
m4_33 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", color=green, community=0, file="TypeLookup.cs", label="0: arguments.Any(arg => arg.EqualsOrdinal(''--''))", span="39-39"];
m4_34 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", color=green, community=0, file="TypeLookup.cs", label="0: var tokenizerResult = tokenizer(arguments.TakeWhile(arg => !arg.EqualsOrdinal(''--'')))", span="41-41"];
m4_37 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="TypeLookup.cs", label="return tokenizer(arguments);", span="45-45"];
m4_35 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", color=green, community=0, file="TypeLookup.cs", label="0: var values = arguments.SkipWhile(arg => !arg.EqualsOrdinal(''--'')).Skip(1).Select(t => Token.Value(t))", span="42-42"];
m4_36 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="TypeLookup.cs", label="return tokenizerResult.MapValue(tokens => tokens.Concat(values));", span="43-43"];
m4_38 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="TypeLookup.cs", label="Exit CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="33-33"];
m4_15 [cluster="Unk.ToList", file="TypeLookup.cs", label="Entry Unk.ToList", span=""];
m4_90 [cluster="Unk.Return", file="TypeLookup.cs", label="Entry Unk.Return", span=""];
m4_25 [cluster="System.Collections.Generic.List<T>.Add(T)", file="TypeLookup.cs", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
m4_126 [cluster="char.IsDigit(char)", file="TypeLookup.cs", label="Entry char.IsDigit(char)", span="0-0"];
m4_10 [cluster="System.Collections.Generic.List<T>.List()", file="TypeLookup.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m4_19 [cluster="UnknownOptionError.cstr", file="TypeLookup.cs", label="Entry UnknownOptionError.cstr", span=""];
m4_131 [cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="TypeLookup.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0"];
m4_71 [cluster="Unk.SelectMany", file="TypeLookup.cs", label="Entry Unk.SelectMany", span=""];
m4_86 [cluster="Unk.FirstOrDefault", file="TypeLookup.cs", label="Entry Unk.FirstOrDefault", span=""];
m4_97 [cluster="Unk.Split", file="TypeLookup.cs", label="Entry Unk.Split", span=""];
m4_14 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="TypeLookup.cs", label="Entry CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", span="69-69"];
m4_119 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="TypeLookup.cs", label="!seen.Contains(c) && nameLookup(n)", span="102-102"];
m4_105 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="TypeLookup.cs", label="throw new ArgumentNullException(''value'');", span="75-75"];
m4_109 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="TypeLookup.cs", label="yield return Token.Value(value);", span="84-84"];
m4_123 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="TypeLookup.cs", label="yield return Token.Value(text.Substring(seen.Count()));", span="114-114"];
m4_104 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="TypeLookup.cs", label="value == null", span="73-73"];
m4_110 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="TypeLookup.cs", label="yield break;", span="85-85"];
m4_112 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="TypeLookup.cs", label="yield return Token.Name(text);", span="90-90"];
m4_113 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="TypeLookup.cs", label="yield break;", span="91-91"];
m4_115 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="TypeLookup.cs", label="yield return Token.Name(first);", span="95-95"];
m4_121 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="TypeLookup.cs", label="yield return Token.Name(n);", span="105-105"];
m4_106 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="TypeLookup.cs", label="value.Length > 1 || value[0] == '-' || value[1] != '-'", span="78-78"];
m4_107 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="TypeLookup.cs", label="var text = value.Substring(1)", span="80-80"];
m4_111 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="TypeLookup.cs", label="value.Length == 2", span="88-88"];
m4_116 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="TypeLookup.cs", label="var seen = new List<char> { first[0] }", span="97-97"];
m4_117 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="TypeLookup.cs", label="text.Substring(1)", span="99-99"];
m4_118 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="TypeLookup.cs", label="var n = new string(c, 1)", span="101-101"];
m4_120 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="TypeLookup.cs", label="seen.Add(c)", span="104-104"];
m4_122 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="TypeLookup.cs", label="seen.Count() < text.Length", span="112-112"];
m4_108 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="TypeLookup.cs", label="char.IsDigit(text[0])", span="82-82"];
m4_114 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="TypeLookup.cs", label="var first = text.Substring(0, 1)", span="94-94"];
m4_124 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="TypeLookup.cs", label="Exit CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", span="69-69"];
m4_9 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="TypeLookup.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m4_89 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="TypeLookup.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
m4_130 [cluster="System.Collections.Generic.List<T>.Contains(T)", file="TypeLookup.cs", label="Entry System.Collections.Generic.List<T>.Contains(T)", span="0-0"];
m4_125 [cluster="string.Substring(int)", file="TypeLookup.cs", label="Entry string.Substring(int)", span="0-0"];
m4_152 [file="TypeLookup.cs", label=unkTokens, span=""];
m4_153 [file="TypeLookup.cs", label=values, span=""];
m4_151 [file="TypeLookup.cs", label=errors, span=""];
m4_154 [file="TypeLookup.cs", label="System.Func<string, CommandLine.Infrastructure.Maybe<char>>", span=""];
m4_158 [file="TypeLookup.cs", label="CommandLine.Core.Token", span=""];
m4_156 [file="TypeLookup.cs", label=replaces, span=""];
m4_155 [file="TypeLookup.cs", label=int, span=""];
m4_157 [file="TypeLookup.cs", label=int, span=""];
m0_0 -> m0_1  [key=0, style=solid];
m0_0 -> m0_3  [color=darkseagreen4, key=1, label=T, style=dashed];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_3  [key=0, style=solid];
m0_3 -> m0_4  [key=0, style=solid];
m0_2 -> m0_4  [key=0, style=solid];
m0_2 -> m0_5  [key=2, style=dotted];
m0_4 -> m0_0  [color=blue, key=0, style=bold];
m1_0 -> m1_1  [color=green, key=0, style=solid];
m1_0 -> m1_2  [color=darkseagreen4, key=1, label="System.Exception", style=dashed];
m1_1 -> m1_2  [color=green, key=0, style=solid];
m1_1 -> m1_4  [color=green, key=2, style=dotted];
m1_1 -> m1_3  [key=0, style=solid];
m1_1 -> m1_5  [key=2, style=dotted];
m1_2 -> m1_3  [key=0, style=solid];
m1_2 -> m1_5  [key=2, style=dotted];
m1_2 -> m1_6  [key=2, style=dotted];
m1_2 -> m1_7  [key=2, style=dotted];
m1_2 -> m1_8  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_2 -> m1_11  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_2 -> m1_14  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_3 -> m1_0  [color=blue, key=0, style=bold];
m1_4 -> m1_17  [color=green, key=0, style=solid];
m1_4 -> m1_18  [color=green, key=0, style=bold];
m1_4 -> m1_22  [color=crimson, key=0, style=bold];
m1_4 -> m1_23  [color=crimson, key=0, style=bold];
m1_4 -> m1_26  [color=crimson, key=0, style=bold];
m1_4 -> m1_27  [color=crimson, key=0, style=bold];
m1_4 -> m1_28  [color=crimson, key=0, style=bold];
m1_4 -> m1_30  [color=crimson, key=0, style=bold];
m1_4 -> m1_19  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m1_4 -> m1_20  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m1_4 -> m1_24  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m1_4 -> m1_25  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m1_4 -> m1_29  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m1_17 -> m1_18  [color=green, key=0, style=solid];
m1_17 -> m1_19  [color=green, key=0, style=solid];
m1_17 -> m1_32  [color=green, key=2, style=dotted];
m1_18 -> m1_19  [color=green, key=0, style=solid];
m1_19 -> m1_20  [key=0, style=solid];
m1_19 -> m1_33  [key=2, style=dotted];
m1_19 -> m1_22  [color=darkseagreen4, key=1, label=pt, style=dashed];
m1_19 -> m1_25  [color=darkseagreen4, key=1, label=pt, style=dashed];
m1_19 -> m1_26  [color=darkseagreen4, key=1, label=pt, style=dashed];
m1_19 -> m1_28  [color=darkseagreen4, key=1, label=pt, style=dashed];
m1_19 -> m1_58  [color=darkseagreen4, key=1, label=pt, style=dashed];
m1_29 -> m1_4  [key=2, style=dotted];
m1_29 -> m1_30  [key=0, style=solid];
m1_29 -> m1_31  [key=0, style=solid];
m1_29 -> m1_40  [key=2, style=dotted];
m1_29 -> m1_35  [key=2, style=dotted];
m1_22 -> m1_23  [key=0, style=solid];
m1_22 -> m1_38  [key=2, style=dotted];
m1_22 -> m1_39  [key=2, style=dotted];
m1_23 -> m1_24  [key=0, style=solid];
m1_26 -> m1_27  [key=0, style=solid];
m1_26 -> m1_46  [key=2, style=dotted];
m1_26 -> m1_47  [key=2, style=dotted];
m1_26 -> m1_39  [key=2, style=dotted];
m1_27 -> m1_28  [key=0, style=solid];
m1_28 -> m1_29  [key=0, style=solid];
m1_28 -> m1_48  [key=2, style=dotted];
m1_28 -> m1_49  [key=2, style=dotted];
m1_28 -> m1_47  [key=2, style=dotted];
m1_28 -> m1_39  [key=2, style=dotted];
m1_28 -> m1_36  [key=2, style=dotted];
m1_28 -> m1_57  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_30 -> m1_29  [key=0, style=solid];
m1_20 -> m1_29  [color=darkseagreen4, key=1, label=taken, style=dashed];
m1_20 -> m1_28  [color=darkseagreen4, key=1, label=taken, style=dashed];
m1_20 -> m1_21  [key=0, style=solid];
m1_20 -> m1_34  [key=2, style=dotted];
m1_20 -> m1_35  [key=2, style=dotted];
m1_20 -> m1_36  [key=2, style=dotted];
m1_20 -> m1_37  [key=2, style=dotted];
m1_20 -> m1_50  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_20 -> m1_25  [color=darkseagreen4, key=1, label=taken, style=dashed];
m1_24 -> m1_25  [key=0, style=solid];
m1_24 -> m1_40  [key=2, style=dotted];
m1_24 -> m1_41  [key=2, style=dotted];
m1_24 -> m1_42  [key=2, style=dotted];
m1_24 -> m1_53  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_25 -> m1_26  [key=0, style=solid];
m1_25 -> m1_28  [key=0, style=solid];
m1_25 -> m1_43  [key=2, style=dotted];
m1_25 -> m1_44  [key=2, style=dotted];
m1_25 -> m1_35  [key=2, style=dotted];
m1_25 -> m1_40  [key=2, style=dotted];
m1_25 -> m1_45  [key=2, style=dotted];
m1_21 -> m1_32  [key=2, style=dotted];
m1_21 -> m1_22  [key=0, style=solid];
m1_21 -> m1_24  [key=0, style=solid];
m1_31 -> m1_4  [color=blue, key=0, style=bold];
m1_53 -> m1_54  [key=0, style=solid];
m1_8 -> m1_9  [key=0, style=solid];
m1_11 -> m1_12  [key=0, style=solid];
m1_14 -> m1_15  [key=0, style=solid];
m1_58 -> m1_59  [key=0, style=solid];
m1_58 -> m1_47  [key=2, style=dotted];
m1_58 -> m1_60  [key=2, style=dotted];
m1_58 -> m1_61  [key=2, style=dotted];
m1_58 -> m1_39  [key=2, style=dotted];
m1_10 -> m1_8  [color=blue, key=0, style=bold];
m1_9 -> m1_10  [key=0, style=solid];
m1_13 -> m1_11  [color=blue, key=0, style=bold];
m1_12 -> m1_13  [key=0, style=solid];
m1_16 -> m1_14  [color=blue, key=0, style=bold];
m1_15 -> m1_16  [key=0, style=solid];
m1_57 -> m1_58  [key=0, style=solid];
m1_50 -> m1_51  [key=0, style=solid];
m1_59 -> m1_57  [color=blue, key=0, style=bold];
m1_52 -> m1_50  [color=blue, key=0, style=bold];
m1_51 -> m1_52  [key=0, style=solid];
m1_54 -> m1_55  [key=0, style=solid];
m1_54 -> m1_56  [key=2, style=dotted];
m1_55 -> m1_53  [color=blue, key=0, style=bold];
m1_72 -> m1_73  [key=0, style=solid];
m1_73 -> m1_46  [key=2, style=dotted];
m1_73 -> m1_47  [key=2, style=dotted];
m1_73 -> m1_43  [key=2, style=dotted];
m1_73 -> m1_61  [key=2, style=dotted];
m1_73 -> m1_74  [key=0, style=solid];
m1_74 -> m1_72  [color=blue, key=0, style=bold];
m1_62 -> m1_68  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m1_62 -> m1_67  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m1_62 -> m1_63  [key=0, style=solid];
m1_68 -> m1_47  [key=2, style=dotted];
m1_68 -> m1_70  [key=0, style=solid];
m1_68 -> m1_71  [key=2, style=dotted];
m1_65 -> m1_47  [key=2, style=dotted];
m1_65 -> m1_70  [key=0, style=solid];
m1_67 -> m1_43  [key=2, style=dotted];
m1_67 -> m1_68  [key=0, style=solid];
m1_67 -> m1_69  [key=0, style=solid];
m1_69 -> m1_61  [key=2, style=dotted];
m1_69 -> m1_70  [key=0, style=solid];
m1_64 -> m1_65  [key=0, style=solid];
m1_66 -> m1_67  [key=0, style=solid];
m1_63 -> m1_64  [key=0, style=solid];
m1_63 -> m1_66  [key=0, style=solid];
m1_70 -> m1_62  [color=blue, key=0, style=bold];
m1_75 -> m1_58  [color=darkseagreen4, key=1, label=pt, style=dashed];
m2_23 -> m2_24  [color=green, key=0, style=solid];
m2_0 -> m2_1  [key=0, style=solid];
m2_0 -> m2_2  [color=darkseagreen4, key=1, label="System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>", style=dashed];
m2_0 -> m2_3  [color=darkseagreen4, key=1, label="System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>", style=dashed];
m2_0 -> m2_4  [color=darkseagreen4, key=1, label="System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>", style=dashed];
m2_1 -> m2_2  [key=0, style=solid];
m2_1 -> m2_10  [key=2, style=dotted];
m2_1 -> m2_3  [color=darkseagreen4, key=1, label=tokenList, style=dashed];
m2_1 -> m2_4  [color=darkseagreen4, key=1, label=tokenList, style=dashed];
m2_1 -> m2_5  [color=green, key=1, label=tokenList, style=dashed];
m2_2 -> m2_3  [key=0, style=solid];
m2_2 -> m2_11  [key=2, style=dotted];
m2_2 -> m2_10  [key=2, style=dotted];
m2_2 -> m2_5  [color=green, key=1, label=switches, style=dashed];
m2_2 -> m2_8  [color=darkseagreen4, key=1, label=switches, style=dashed];
m2_2 -> m2_24  [color=green, key=1, label=switches, style=dashed];
m2_3 -> m2_4  [key=0, style=solid];
m2_3 -> m2_12  [key=2, style=dotted];
m2_3 -> m2_10  [key=2, style=dotted];
m2_3 -> m2_5  [color=green, key=1, label=scalars, style=dashed];
m2_3 -> m2_8  [color=darkseagreen4, key=1, label=scalars, style=dashed];
m2_3 -> m2_28  [color=green, key=1, label=scalars, style=dashed];
m2_4 -> m2_5  [color=green, key=0, style=solid];
m2_4 -> m2_13  [key=2, style=dotted];
m2_4 -> m2_10  [key=2, style=dotted];
m2_4 -> m2_8  [color=darkseagreen4, key=1, label=sequences, style=dashed];
m2_4 -> m2_32  [color=green, key=1, label=sequences, style=dashed];
m2_5 -> m2_6  [color=green, key=0, style=solid];
m2_5 -> m2_14  [color=red, key=2, style=dotted];
m2_5 -> m2_10  [color=red, key=2, style=dotted];
m2_5 -> m2_7  [color=green, key=1, label=nonOptions, style=dashed];
m2_5 -> m2_15  [color=green, key=2, style=dotted];
m2_5 -> m2_16  [color=green, key=2, style=dotted];
m2_5 -> m2_23  [color=green, key=1, label="lambda expression", style=dashed];
m2_5 -> m2_27  [color=green, key=1, label="lambda expression", style=dashed];
m2_5 -> m2_31  [color=green, key=1, label="lambda expression", style=dashed];
m2_8 -> m2_9  [key=0, style=solid];
m2_8 -> m2_18  [key=2, style=dotted];
m2_8 -> m2_19  [key=2, style=dotted];
m2_8 -> m2_20  [key=2, style=dotted];
m2_8 -> m2_21  [key=2, style=dotted];
m2_8 -> m2_22  [key=2, style=dotted];
m2_8 -> m2_23  [key=2, style=dotted];
m2_8 -> m2_28  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_6 -> m2_7  [key=0, style=solid];
m2_6 -> m2_15  [key=2, style=dotted];
m2_6 -> m2_16  [key=2, style=dotted];
m2_6 -> m2_24  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_6 -> m2_8  [color=darkseagreen4, key=1, label=values, style=dashed];
m2_7 -> m2_8  [key=0, style=solid];
m2_7 -> m2_17  [key=2, style=dotted];
m2_7 -> m2_16  [key=2, style=dotted];
m2_9 -> m2_0  [color=blue, key=0, style=bold];
m2_30 -> m2_28  [color=blue, key=0, style=bold];
m2_31 -> m2_32  [color=green, key=0, style=solid];
m2_24 -> m2_25  [color=green, key=0, style=solid];
m2_24 -> m2_26  [color=green, key=2, style=dotted];
m2_28 -> m2_29  [color=green, key=0, style=solid];
m2_28 -> m2_30  [color=green, key=2, style=dotted];
m2_25 -> m2_26  [key=0, style=solid];
m2_25 -> m2_27  [key=2, style=dotted];
m2_25 -> m2_23  [color=blue, key=0, style=bold];
m2_26 -> m2_24  [color=blue, key=0, style=bold];
m2_29 -> m2_30  [key=0, style=solid];
m2_29 -> m2_27  [color=blue, key=0, style=bold];
m2_27 -> m2_28  [color=green, key=0, style=solid];
m2_32 -> m2_33  [color=green, key=0, style=solid];
m2_32 -> m2_30  [color=green, key=2, style=dotted];
m2_33 -> m2_31  [color=blue, key=0, style=bold];
m2_41 -> m2_24  [color=green, key=1, label=switches, style=dashed];
m2_42 -> m2_28  [color=green, key=1, label=scalars, style=dashed];
m2_43 -> m2_32  [color=green, key=1, label=sequences, style=dashed];
m3_0 -> m3_3  [color=green, key=1, label="CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>", style=dashed];
m3_0 -> m3_1  [key=0, style=solid];
m3_0 -> m3_2  [color=darkseagreen4, key=1, label="CommandLine.Infrastructure.Maybe<int>", style=dashed];
m3_3 -> m3_4  [color=green, key=0, style=solid];
m3_3 -> m3_0  [color=blue, key=0, style=bold];
m3_2 -> m3_3  [color=green, key=0, style=solid];
m3_2 -> m3_5  [key=2, style=dotted];
m3_2 -> m3_6  [key=2, style=dotted];
m3_2 -> m3_7  [key=2, style=dotted];
m3_2 -> m3_8  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_2 -> m3_11  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_2 -> m3_14  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_1 -> m3_2  [key=0, style=solid];
m3_1 -> m3_4  [key=2, style=dotted];
m3_4 -> m3_0  [color=blue, key=0, style=bold];
m3_4 -> m3_17  [key=0, style=solid];
m3_4 -> m3_18  [color=crimson, key=0, style=bold];
m3_4 -> m3_22  [color=crimson, key=0, style=bold];
m3_4 -> m3_23  [color=crimson, key=0, style=bold];
m3_4 -> m3_26  [color=crimson, key=0, style=bold];
m3_4 -> m3_27  [color=crimson, key=0, style=bold];
m3_4 -> m3_28  [color=crimson, key=0, style=bold];
m3_4 -> m3_30  [color=crimson, key=0, style=bold];
m3_4 -> m3_19  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m3_4 -> m3_20  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m3_4 -> m3_24  [color=red, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m3_4 -> m3_25  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m3_4 -> m3_29  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m3_12 -> m3_13  [color=green, key=0, style=solid];
m3_12 -> m3_5  [color=darkorchid, key=3, label="method methodReturn CommandLine.Core.TypeDescriptor WithNext", style=bold];
m3_13 -> m3_14  [color=green, key=0, style=solid];
m3_13 -> m3_15  [color=green, key=2, style=dotted];
m3_13 -> m3_5  [color=green, key=2, style=dotted];
m3_13 -> m3_53  [color=green, key=1, label="lambda expression", style=dashed];
m3_13 -> m3_11  [color=blue, key=0, style=bold];
m3_14 -> m3_12  [color=blue, key=0, style=bold];
m3_14 -> m3_15  [key=0, style=solid];
m3_6 -> m3_8  [key=0, style=solid];
m3_6 -> m3_7  [key=0, style=solid];
m3_17 -> m3_18  [key=0, style=solid];
m3_17 -> m3_19  [key=0, style=solid];
m3_17 -> m3_32  [key=2, style=dotted];
m3_17 -> m3_55  [color=green, key=0, style=solid];
m3_18 -> m3_19  [key=0, style=solid];
m3_22 -> m3_23  [key=0, style=solid];
m3_22 -> m3_38  [key=2, style=dotted];
m3_22 -> m3_39  [key=2, style=dotted];
m3_23 -> m3_24  [color=red, key=0, style=solid];
m3_26 -> m3_27  [key=0, style=solid];
m3_26 -> m3_46  [key=2, style=dotted];
m3_26 -> m3_47  [key=2, style=dotted];
m3_26 -> m3_39  [key=2, style=dotted];
m3_27 -> m3_28  [key=0, style=solid];
m3_28 -> m3_29  [key=0, style=solid];
m3_28 -> m3_48  [key=2, style=dotted];
m3_28 -> m3_49  [key=2, style=dotted];
m3_28 -> m3_47  [key=2, style=dotted];
m3_28 -> m3_39  [key=2, style=dotted];
m3_28 -> m3_36  [key=2, style=dotted];
m3_28 -> m3_57  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_30 -> m3_29  [key=0, style=solid];
m3_19 -> m3_20  [key=0, style=solid];
m3_19 -> m3_33  [key=2, style=dotted];
m3_19 -> m3_22  [color=darkseagreen4, key=1, label=pt, style=dashed];
m3_19 -> m3_25  [color=darkseagreen4, key=1, label=pt, style=dashed];
m3_19 -> m3_26  [color=darkseagreen4, key=1, label=pt, style=dashed];
m3_19 -> m3_28  [color=darkseagreen4, key=1, label=pt, style=dashed];
m3_19 -> m3_58  [color=darkseagreen4, key=1, label=pt, style=dashed];
m3_19 -> m3_3  [color=green, key=1, label="CommandLine.Core.TypeDescriptor", style=dashed];
m3_19 -> m3_1  [color=darkseagreen4, key=1, label="CommandLine.Core.TypeDescriptor", style=dashed];
m3_19 -> m3_2  [color=darkseagreen4, key=1, label="CommandLine.Core.TypeDescriptor", style=dashed];
m3_20 -> m3_21  [key=0, style=solid];
m3_20 -> m3_34  [key=2, style=dotted];
m3_20 -> m3_35  [key=2, style=dotted];
m3_20 -> m3_36  [key=2, style=dotted];
m3_20 -> m3_37  [key=2, style=dotted];
m3_20 -> m3_50  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_20 -> m3_25  [color=darkseagreen4, key=1, label=taken, style=dashed];
m3_20 -> m3_28  [color=darkseagreen4, key=1, label=taken, style=dashed];
m3_20 -> m3_29  [color=darkseagreen4, key=1, label=taken, style=dashed];
m3_24 -> m3_25  [color=red, key=0, style=solid];
m3_24 -> m3_40  [color=red, key=2, style=dotted];
m3_24 -> m3_41  [color=red, key=2, style=dotted];
m3_24 -> m3_42  [color=red, key=2, style=dotted];
m3_24 -> m3_53  [color=red, key=1, label="lambda expression", style=dashed];
m3_25 -> m3_26  [key=0, style=solid];
m3_25 -> m3_28  [key=0, style=solid];
m3_25 -> m3_43  [key=2, style=dotted];
m3_25 -> m3_44  [key=2, style=dotted];
m3_25 -> m3_35  [key=2, style=dotted];
m3_25 -> m3_40  [key=2, style=dotted];
m3_25 -> m3_45  [key=2, style=dotted];
m3_29 -> m3_30  [key=0, style=solid];
m3_29 -> m3_31  [key=0, style=solid];
m3_29 -> m3_40  [key=2, style=dotted];
m3_29 -> m3_35  [key=2, style=dotted];
m3_29 -> m3_4  [key=2, style=dotted];
m3_21 -> m3_22  [key=0, style=solid];
m3_21 -> m3_24  [color=red, key=0, style=solid];
m3_21 -> m3_32  [key=2, style=dotted];
m3_31 -> m3_4  [color=blue, key=0, style=bold];
m3_57 -> m3_58  [key=0, style=solid];
m3_8 -> m3_9  [key=0, style=solid];
m3_8 -> m3_0  [key=2, style=dotted];
m3_8 -> m3_11  [key=2, style=dotted];
m3_11 -> m3_12  [key=0, style=solid];
m3_9 -> m3_10  [key=0, style=solid];
m3_9 -> m3_5  [color=blue, key=0, style=bold];
m3_10 -> m3_8  [color=blue, key=0, style=bold];
m3_15 -> m3_16  [key=0, style=solid];
m3_16 -> m3_14  [color=blue, key=0, style=bold];
m3_58 -> m3_59  [key=0, style=solid];
m3_58 -> m3_47  [key=2, style=dotted];
m3_58 -> m3_60  [key=2, style=dotted];
m3_58 -> m3_61  [key=2, style=dotted];
m3_58 -> m3_39  [key=2, style=dotted];
m3_50 -> m3_51  [key=0, style=solid];
m3_53 -> m3_54  [color=red, key=0, style=solid];
m3_53 -> m3_17  [color=green, key=0, style=solid];
m3_51 -> m3_52  [key=0, style=solid];
m3_52 -> m3_50  [color=blue, key=0, style=bold];
m3_54 -> m3_55  [color=red, key=0, style=solid];
m3_54 -> m3_56  [color=red, key=2, style=dotted];
m3_55 -> m3_53  [color=blue, key=0, style=bold];
m3_59 -> m3_57  [color=blue, key=0, style=bold];
m3_5 -> m3_6  [key=0, style=solid];
m3_5 -> m3_8  [color=darkseagreen4, key=1, label="CommandLine.Core.TargetType", style=dashed];
m3_7 -> m3_9  [key=0, style=solid];
m3_7 -> m3_10  [key=2, style=dotted];
m3_72 -> m3_73  [key=0, style=solid];
m3_73 -> m3_74  [key=0, style=solid];
m3_73 -> m3_43  [key=2, style=dotted];
m3_73 -> m3_46  [key=2, style=dotted];
m3_73 -> m3_47  [key=2, style=dotted];
m3_73 -> m3_61  [key=2, style=dotted];
m3_74 -> m3_72  [color=blue, key=0, style=bold];
m3_62 -> m3_63  [key=0, style=solid];
m3_62 -> m3_67  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m3_62 -> m3_68  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m3_63 -> m3_64  [key=0, style=solid];
m3_63 -> m3_66  [key=0, style=solid];
m3_67 -> m3_68  [key=0, style=solid];
m3_67 -> m3_69  [key=0, style=solid];
m3_67 -> m3_43  [key=2, style=dotted];
m3_68 -> m3_70  [key=0, style=solid];
m3_68 -> m3_71  [key=2, style=dotted];
m3_68 -> m3_47  [key=2, style=dotted];
m3_64 -> m3_65  [key=0, style=solid];
m3_66 -> m3_67  [key=0, style=solid];
m3_65 -> m3_70  [key=0, style=solid];
m3_65 -> m3_47  [key=2, style=dotted];
m3_69 -> m3_70  [key=0, style=solid];
m3_69 -> m3_61  [key=2, style=dotted];
m3_70 -> m3_62  [color=blue, key=0, style=bold];
m3_75 -> m3_58  [color=darkseagreen4, key=1, label=pt, style=dashed];
m4_62 -> m4_68  [color=darkseagreen4, key=1, label="CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>", style=dashed];
m4_62 -> m4_73  [color=darkseagreen4, key=1, label="System.Func<string, CommandLine.Infrastructure.Maybe<char>>", style=dashed];
m4_62 -> m4_65  [color=darkseagreen4, key=1, label="CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>", style=dashed];
m4_62 -> m4_66  [color=darkseagreen4, key=1, label="CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>", style=dashed];
m4_62 -> m4_63  [key=0, style=solid];
m4_68 -> m4_21  [key=2, style=dotted];
m4_68 -> m4_69  [key=0, style=solid];
m4_65 -> m4_44  [key=2, style=dotted];
m4_65 -> m4_66  [key=0, style=solid];
m4_65 -> m4_70  [key=2, style=dotted];
m4_65 -> m4_72  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_65 -> m4_80  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_65 -> m4_84  [color=darkseagreen4, key=1, label=replaces, style=dashed];
m4_66 -> m4_44  [key=2, style=dotted];
m4_66 -> m4_67  [key=0, style=solid];
m4_66 -> m4_83  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_64 -> m4_9  [key=2, style=dotted];
m4_64 -> m4_69  [key=0, style=solid];
m4_67 -> m4_68  [key=0, style=solid];
m4_67 -> m4_71  [key=2, style=dotted];
m4_67 -> m4_101  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_63 -> m4_65  [key=0, style=solid];
m4_63 -> m4_64  [key=0, style=solid];
m4_69 -> m4_62  [color=blue, key=0, style=bold];
m4_91 -> m4_92  [key=0, style=solid];
m4_27 -> m4_28  [color=green, key=0, style=solid];
m4_27 -> m4_29  [color=green, key=2, style=dotted];
m4_26 -> m4_27  [color=green, key=0, style=solid];
m4_28 -> m4_26  [color=blue, key=0, style=bold];
m4_46 -> m4_47  [color=green, key=0, style=solid];
m4_50 -> m4_51  [color=green, key=0, style=solid];
m4_53 -> m4_54  [color=green, key=0, style=solid];
m4_56 -> m4_57  [color=green, key=0, style=solid];
m4_60 -> m4_20  [key=2, style=dotted];
m4_60 -> m4_61  [key=0, style=solid];
m4_47 -> m4_48  [color=green, key=0, style=solid];
m4_47 -> m4_49  [color=green, key=2, style=dotted];
m4_48 -> m4_46  [color=blue, key=0, style=bold];
m4_51 -> m4_52  [color=green, key=0, style=solid];
m4_51 -> m4_49  [color=green, key=2, style=dotted];
m4_52 -> m4_50  [color=blue, key=0, style=bold];
m4_54 -> m4_55  [color=green, key=0, style=solid];
m4_54 -> m4_49  [color=green, key=2, style=dotted];
m4_55 -> m4_53  [color=blue, key=0, style=bold];
m4_57 -> m4_58  [color=green, key=0, style=solid];
m4_57 -> m4_12  [color=green, key=2, style=dotted];
m4_58 -> m4_56  [color=blue, key=0, style=bold];
m4_23 -> m4_24  [key=0, style=solid];
m4_23 -> m4_25  [key=2, style=dotted];
m4_73 -> m4_41  [key=2, style=dotted];
m4_73 -> m4_74  [key=0, style=solid];
m4_73 -> m4_75  [key=2, style=dotted];
m4_73 -> m4_76  [key=2, style=dotted];
m4_73 -> m4_77  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_59 -> m4_60  [key=0, style=solid];
m4_95 -> m4_44  [key=2, style=dotted];
m4_95 -> m4_96  [key=0, style=solid];
m4_95 -> m4_97  [key=2, style=dotted];
m4_95 -> m4_98  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_61 -> m4_59  [color=blue, key=0, style=bold];
m4_99 -> m4_12  [key=2, style=dotted];
m4_99 -> m4_100  [key=0, style=solid];
m4_22 -> m4_23  [key=0, style=solid];
m4_24 -> m4_22  [color=blue, key=0, style=bold];
m4_72 -> m4_73  [key=0, style=solid];
m4_72 -> m4_78  [color=darkseagreen4, key=1, label=int, style=dashed];
m4_74 -> m4_72  [color=blue, key=0, style=bold];
m4_77 -> m4_78  [key=0, style=solid];
m4_80 -> m4_81  [key=0, style=solid];
m4_84 -> m4_85  [key=0, style=solid];
m4_84 -> m4_86  [key=2, style=dotted];
m4_84 -> m4_87  [key=2, style=dotted];
m4_84 -> m4_88  [key=2, style=dotted];
m4_84 -> m4_89  [key=2, style=dotted];
m4_84 -> m4_90  [key=2, style=dotted];
m4_84 -> m4_91  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_84 -> m4_94  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_83 -> m4_95  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m4_83 -> m4_84  [key=0, style=solid];
m4_83 -> m4_92  [color=darkseagreen4, key=1, label=int, style=dashed];
m4_94 -> m4_95  [key=0, style=solid];
m4_96 -> m4_94  [color=blue, key=0, style=bold];
m4_98 -> m4_99  [key=0, style=solid];
m4_100 -> m4_98  [color=blue, key=0, style=bold];
m4_101 -> m4_102  [key=0, style=solid];
m4_78 -> m4_75  [key=2, style=dotted];
m4_78 -> m4_79  [key=0, style=solid];
m4_79 -> m4_77  [color=blue, key=0, style=bold];
m4_82 -> m4_80  [color=blue, key=0, style=bold];
m4_81 -> m4_82  [key=0, style=solid];
m4_85 -> m4_83  [color=blue, key=0, style=bold];
m4_92 -> m4_93  [key=0, style=solid];
m4_103 -> m4_101  [color=blue, key=0, style=bold];
m4_102 -> m4_103  [key=0, style=solid];
m4_93 -> m4_91  [color=blue, key=0, style=bold];
m4_13 -> m4_132  [key=0, style=solid];
m4_13 -> m4_138  [color=crimson, key=0, style=bold];
m4_13 -> m4_139  [color=crimson, key=0, style=bold];
m4_13 -> m4_142  [color=crimson, key=0, style=bold];
m4_13 -> m4_144  [color=crimson, key=0, style=bold];
m4_13 -> m4_145  [color=crimson, key=0, style=bold];
m4_13 -> m4_134  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_13 -> m4_135  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_13 -> m4_141  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_133 -> m4_9  [key=2, style=dotted];
m4_133 -> m4_146  [key=0, style=solid];
m4_145 -> m4_12  [key=2, style=dotted];
m4_145 -> m4_146  [key=0, style=solid];
m4_134 -> m4_11  [key=2, style=dotted];
m4_134 -> m4_135  [key=0, style=solid];
m4_134 -> m4_146  [key=0, style=solid];
m4_132 -> m4_133  [key=0, style=solid];
m4_132 -> m4_134  [key=0, style=solid];
m4_138 -> m4_139  [key=0, style=solid];
m4_138 -> m4_127  [key=2, style=dotted];
m4_139 -> m4_140  [key=0, style=solid];
m4_142 -> m4_143  [key=0, style=solid];
m4_144 -> m4_145  [key=0, style=solid];
m4_144 -> m4_127  [key=2, style=dotted];
m4_135 -> m4_138  [color=darkseagreen4, key=1, label=text, style=dashed];
m4_135 -> m4_136  [key=0, style=solid];
m4_135 -> m4_125  [key=2, style=dotted];
m4_135 -> m4_143  [color=darkseagreen4, key=1, label=text, style=dashed];
m4_141 -> m4_142  [key=0, style=solid];
m4_141 -> m4_148  [key=2, style=dotted];
m4_141 -> m4_149  [key=2, style=dotted];
m4_143 -> m4_145  [color=darkseagreen4, key=1, label=parts, style=dashed];
m4_143 -> m4_144  [key=0, style=solid];
m4_143 -> m4_150  [key=2, style=dotted];
m4_137 -> m4_138  [key=0, style=solid];
m4_137 -> m4_140  [key=0, style=solid];
m4_140 -> m4_141  [key=0, style=solid];
m4_140 -> m4_143  [key=0, style=solid];
m4_136 -> m4_137  [key=0, style=solid];
m4_136 -> m4_140  [color=darkseagreen4, key=1, label=equalIndex, style=dashed];
m4_136 -> m4_147  [key=2, style=dotted];
m4_146 -> m4_13  [color=blue, key=0, style=bold];
m4_0 -> m4_6  [color=green, key=1, label="System.Func<string, bool>", style=dashed];
m4_0 -> m4_1  [key=0, style=solid];
m4_0 -> m4_5  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m4_6 -> m4_6  [color=green, key=1, label=t, style=dashed];
m4_6 -> m4_7  [color=green, key=0, style=solid];
m4_6 -> m4_16  [color=green, key=2, style=dotted];
m4_6 -> m4_17  [color=green, key=2, style=dotted];
m4_6 -> m4_15  [color=green, key=2, style=dotted];
m4_6 -> m4_27  [color=green, key=1, label=unkTokens, style=dashed];
m4_5 -> m4_6  [color=green, key=0, style=solid];
m4_5 -> m4_7  [color=green, key=1, label=tokens, style=dashed];
m4_5 -> m4_5  [color=darkseagreen4, key=1, label=arg, style=dashed];
m4_5 -> m4_11  [key=2, style=dotted];
m4_5 -> m4_12  [key=2, style=dotted];
m4_5 -> m4_13  [key=2, style=dotted];
m4_5 -> m4_14  [key=2, style=dotted];
m4_5 -> m4_15  [key=2, style=dotted];
m4_7 -> m4_7  [color=green, key=1, label=t, style=dashed];
m4_7 -> m4_8  [color=green, key=0, style=solid];
m4_7 -> m4_18  [color=green, key=2, style=dotted];
m4_7 -> m4_19  [color=green, key=2, style=dotted];
m4_7 -> m4_20  [color=green, key=2, style=dotted];
m4_7 -> m4_21  [color=green, key=2, style=dotted];
m4_7 -> m4_26  [color=green, key=1, label="lambda expression", style=dashed];
m4_3 -> m4_7  [color=green, key=1, label=errors, style=dashed];
m4_3 -> m4_4  [key=0, style=solid];
m4_3 -> m4_10  [key=2, style=dotted];
m4_3 -> m4_23  [color=darkseagreen4, key=1, label=errors, style=dashed];
m4_1 -> m4_3  [key=0, style=solid];
m4_1 -> m4_2  [key=0, style=solid];
m4_4 -> m4_5  [key=0, style=solid];
m4_4 -> m4_23  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
m4_2 -> m4_8  [key=0, style=solid];
m4_2 -> m4_9  [key=2, style=dotted];
m4_8 -> m4_0  [color=blue, key=0, style=bold];
m4_30 -> m4_31  [color=green, key=0, style=solid];
m4_30 -> m4_33  [color=green, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m4_30 -> m4_34  [color=green, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m4_30 -> m4_35  [color=green, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m4_30 -> m4_37  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m4_31 -> m4_32  [color=green, key=0, style=solid];
m4_31 -> m4_33  [color=green, key=0, style=solid];
m4_32 -> m4_38  [color=green, key=0, style=solid];
m4_32 -> m4_9  [color=green, key=2, style=dotted];
m4_33 -> m4_34  [color=green, key=0, style=solid];
m4_33 -> m4_37  [color=green, key=0, style=solid];
m4_33 -> m4_39  [color=green, key=2, style=dotted];
m4_33 -> m4_46  [color=green, key=1, label="lambda expression", style=dashed];
m4_34 -> m4_35  [color=green, key=0, style=solid];
m4_34 -> m4_40  [color=green, key=2, style=dotted];
m4_34 -> m4_41  [color=green, key=2, style=dotted];
m4_34 -> m4_50  [color=green, key=1, label="lambda expression", style=dashed];
m4_34 -> m4_36  [color=green, key=1, label=tokenizerResult, style=dashed];
m4_37 -> m4_38  [key=0, style=solid];
m4_37 -> m4_41  [key=2, style=dotted];
m4_35 -> m4_36  [color=green, key=0, style=solid];
m4_35 -> m4_42  [color=green, key=2, style=dotted];
m4_35 -> m4_43  [color=green, key=2, style=dotted];
m4_35 -> m4_44  [color=green, key=2, style=dotted];
m4_35 -> m4_53  [color=green, key=1, label="lambda expression", style=dashed];
m4_35 -> m4_56  [color=green, key=1, label="lambda expression", style=dashed];
m4_35 -> m4_60  [color=green, key=1, label=values, style=dashed];
m4_36 -> m4_38  [key=0, style=solid];
m4_36 -> m4_45  [key=2, style=dotted];
m4_36 -> m4_59  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_38 -> m4_30  [color=blue, key=0, style=bold];
m4_14 -> m4_104  [key=0, style=solid];
m4_14 -> m4_109  [color=crimson, key=0, style=bold];
m4_14 -> m4_110  [color=crimson, key=0, style=bold];
m4_14 -> m4_112  [color=crimson, key=0, style=bold];
m4_14 -> m4_113  [color=crimson, key=0, style=bold];
m4_14 -> m4_115  [color=crimson, key=0, style=bold];
m4_14 -> m4_121  [color=crimson, key=0, style=bold];
m4_14 -> m4_123  [color=crimson, key=0, style=bold];
m4_14 -> m4_106  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_14 -> m4_107  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_14 -> m4_111  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_14 -> m4_119  [color=darkseagreen4, key=1, label="System.Func<string, bool>", style=dashed];
m4_119 -> m4_41  [key=2, style=dotted];
m4_119 -> m4_120  [key=0, style=solid];
m4_119 -> m4_122  [key=0, style=solid];
m4_119 -> m4_130  [key=2, style=dotted];
m4_105 -> m4_9  [key=2, style=dotted];
m4_105 -> m4_124  [key=0, style=solid];
m4_109 -> m4_12  [key=2, style=dotted];
m4_109 -> m4_110  [key=0, style=solid];
m4_123 -> m4_12  [key=2, style=dotted];
m4_123 -> m4_124  [key=0, style=solid];
m4_123 -> m4_131  [key=2, style=dotted];
m4_123 -> m4_125  [key=2, style=dotted];
m4_104 -> m4_105  [key=0, style=solid];
m4_104 -> m4_106  [key=0, style=solid];
m4_110 -> m4_111  [key=0, style=solid];
m4_112 -> m4_113  [key=0, style=solid];
m4_112 -> m4_127  [key=2, style=dotted];
m4_113 -> m4_114  [key=0, style=solid];
m4_115 -> m4_116  [key=0, style=solid];
m4_115 -> m4_127  [key=2, style=dotted];
m4_121 -> m4_117  [key=0, style=solid];
m4_121 -> m4_127  [key=2, style=dotted];
m4_106 -> m4_124  [key=0, style=solid];
m4_106 -> m4_107  [key=0, style=solid];
m4_107 -> m4_123  [color=darkseagreen4, key=1, label=text, style=dashed];
m4_107 -> m4_112  [color=darkseagreen4, key=1, label=text, style=dashed];
m4_107 -> m4_108  [key=0, style=solid];
m4_107 -> m4_125  [key=2, style=dotted];
m4_107 -> m4_114  [color=darkseagreen4, key=1, label=text, style=dashed];
m4_107 -> m4_117  [color=darkseagreen4, key=1, label=text, style=dashed];
m4_107 -> m4_122  [color=darkseagreen4, key=1, label=text, style=dashed];
m4_111 -> m4_112  [key=0, style=solid];
m4_111 -> m4_114  [key=0, style=solid];
m4_116 -> m4_10  [key=2, style=dotted];
m4_116 -> m4_119  [color=darkseagreen4, key=1, label=seen, style=dashed];
m4_116 -> m4_123  [color=darkseagreen4, key=1, label=seen, style=dashed];
m4_116 -> m4_117  [key=0, style=solid];
m4_116 -> m4_120  [color=darkseagreen4, key=1, label=seen, style=dashed];
m4_116 -> m4_122  [color=darkseagreen4, key=1, label=seen, style=dashed];
m4_117 -> m4_119  [color=darkseagreen4, key=1, label=c, style=dashed];
m4_117 -> m4_118  [key=0, style=solid];
m4_117 -> m4_122  [key=0, style=solid];
m4_117 -> m4_125  [key=2, style=dotted];
m4_117 -> m4_120  [color=darkseagreen4, key=1, label=c, style=dashed];
m4_118 -> m4_119  [key=0, style=solid];
m4_118 -> m4_121  [color=darkseagreen4, key=1, label=n, style=dashed];
m4_118 -> m4_129  [key=2, style=dotted];
m4_120 -> m4_121  [key=0, style=solid];
m4_120 -> m4_25  [key=2, style=dotted];
m4_122 -> m4_123  [key=0, style=solid];
m4_122 -> m4_124  [key=0, style=solid];
m4_122 -> m4_131  [key=2, style=dotted];
m4_108 -> m4_109  [key=0, style=solid];
m4_108 -> m4_111  [key=0, style=solid];
m4_108 -> m4_126  [key=2, style=dotted];
m4_114 -> m4_115  [key=0, style=solid];
m4_114 -> m4_116  [color=darkseagreen4, key=1, label=first, style=dashed];
m4_114 -> m4_128  [key=2, style=dotted];
m4_124 -> m4_14  [color=blue, key=0, style=bold];
m4_152 -> m4_27  [color=green, key=1, label=unkTokens, style=dashed];
m4_153 -> m4_60  [color=darkseagreen4, key=1, label=values, style=dashed];
m4_151 -> m4_23  [color=darkseagreen4, key=1, label=errors, style=dashed];
m4_154 -> m4_73  [color=darkseagreen4, key=1, label="System.Func<string, CommandLine.Infrastructure.Maybe<char>>", style=dashed];
m4_158 -> m4_95  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m4_156 -> m4_84  [color=darkseagreen4, key=1, label=replaces, style=dashed];
m4_155 -> m4_78  [color=darkseagreen4, key=1, label=int, style=dashed];
m4_157 -> m4_92  [color=darkseagreen4, key=1, label=int, style=dashed];
}
