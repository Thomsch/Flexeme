digraph  {
n77 [label="CSharpx.Maybe<T>", span=""];
n78 [label="CSharpx.Just<T>", span=""];
n79 [label="System.Func<TSource, CSharpx.Maybe<TValue>>", span=""];
n80 [label="System.Func<TSource, TValue, TResult>", span=""];
n81 [label=TSource, span=""];
n0 [label="Entry CSharpx.Maybe<T>.Maybe(CSharpx.MaybeType)", span="19-19", cluster="CSharpx.Maybe<T>.Maybe(CSharpx.MaybeType)"];
n1 [label="this.tag = tag", span="21-21", cluster="CSharpx.Maybe<T>.Maybe(CSharpx.MaybeType)"];
n2 [label="Exit CSharpx.Maybe<T>.Maybe(CSharpx.MaybeType)", span="19-19", cluster="CSharpx.Maybe<T>.Maybe(CSharpx.MaybeType)"];
n3 [label="Entry CSharpx.Maybe<T>.MatchNothing()", span="29-29", cluster="CSharpx.Maybe<T>.MatchNothing()"];
n4 [label="return Tag == MaybeType.Nothing;", span="31-31", cluster="CSharpx.Maybe<T>.MatchNothing()"];
n5 [label="Exit CSharpx.Maybe<T>.MatchNothing()", span="29-29", cluster="CSharpx.Maybe<T>.MatchNothing()"];
n6 [label="Entry CSharpx.Maybe<T>.MatchJust(out T)", span="34-34", cluster="CSharpx.Maybe<T>.MatchJust(out T)"];
n7 [label="value = Tag == MaybeType.Just\r\n                ? ((Just<T>)this).Value\r\n                : default(T)", span="36-38", cluster="CSharpx.Maybe<T>.MatchJust(out T)"];
n8 [label="return Tag == MaybeType.Just;", span="39-39", cluster="CSharpx.Maybe<T>.MatchJust(out T)"];
n9 [label="Exit CSharpx.Maybe<T>.MatchJust(out T)", span="34-34", cluster="CSharpx.Maybe<T>.MatchJust(out T)"];
n10 [label="Entry CSharpx.Nothing<T>.Nothing()", span="48-48", cluster="CSharpx.Nothing<T>.Nothing()"];
n11 [label="Exit CSharpx.Nothing<T>.Nothing()", span="48-48", cluster="CSharpx.Nothing<T>.Nothing()"];
n12 [label="Entry CSharpx.Just<T>.Just(T)", span="58-58", cluster="CSharpx.Just<T>.Just(T)"];
n13 [label="this.value = value", span="61-61", cluster="CSharpx.Just<T>.Just(T)"];
n14 [label="Exit CSharpx.Just<T>.Just(T)", span="58-58", cluster="CSharpx.Just<T>.Just(T)"];
n15 [label="Entry CSharpx.Maybe.Nothing<T>()", span="75-75", cluster="CSharpx.Maybe.Nothing<T>()"];
n16 [label="return new Nothing<T>();", span="77-77", cluster="CSharpx.Maybe.Nothing<T>()"];
n17 [label="Exit CSharpx.Maybe.Nothing<T>()", span="75-75", cluster="CSharpx.Maybe.Nothing<T>()"];
n18 [label="Entry CSharpx.Maybe.Just<T>(T)", span="80-80", cluster="CSharpx.Maybe.Just<T>(T)"];
n19 [label="return new Just<T>(value);", span="82-82", cluster="CSharpx.Maybe.Just<T>(T)"];
n20 [label="Exit CSharpx.Maybe.Just<T>(T)", span="80-80", cluster="CSharpx.Maybe.Just<T>(T)"];
n21 [label="Entry CSharpx.Maybe.OfEither<T1, T2>(CSharpx.Either<T1, T2>)", span="89-89", cluster="CSharpx.Maybe.OfEither<T1, T2>(CSharpx.Either<T1, T2>)"];
n22 [label="either.Tag == Either2Type.Either1Of2", span="91-91", cluster="CSharpx.Maybe.OfEither<T1, T2>(CSharpx.Either<T1, T2>)"];
n23 [label="return new Just<T1>(((Either1Of2<T1, T2>)either).Value);", span="93-93", cluster="CSharpx.Maybe.OfEither<T1, T2>(CSharpx.Either<T1, T2>)"];
n24 [label="return new Nothing<T1>();", span="95-95", cluster="CSharpx.Maybe.OfEither<T1, T2>(CSharpx.Either<T1, T2>)"];
n25 [label="Exit CSharpx.Maybe.OfEither<T1, T2>(CSharpx.Either<T1, T2>)", span="89-89", cluster="CSharpx.Maybe.OfEither<T1, T2>(CSharpx.Either<T1, T2>)"];
n26 [label="Entry CSharpx.MaybeExtensions.ToMaybe<T>(T)", span="105-105", cluster="CSharpx.MaybeExtensions.ToMaybe<T>(T)"];
n27 [label="return Equals(value, default(T)) ? Maybe.Nothing<T>() : Maybe.Just(value);", span="107-107", cluster="CSharpx.MaybeExtensions.ToMaybe<T>(T)"];
n28 [label="Exit CSharpx.MaybeExtensions.ToMaybe<T>(T)", span="105-105", cluster="CSharpx.MaybeExtensions.ToMaybe<T>(T)"];
n29 [label="Entry object.Equals(object, object)", span="0-0", cluster="object.Equals(object, object)"];
n30 [label="Entry CSharpx.MaybeExtensions.Bind<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, CSharpx.Maybe<T2>>)", span="110-110", cluster="CSharpx.MaybeExtensions.Bind<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, CSharpx.Maybe<T2>>)"];
n31 [label="T1 value1", span="112-112", cluster="CSharpx.MaybeExtensions.Bind<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, CSharpx.Maybe<T2>>)"];
n32 [label="return maybe.MatchJust(out value1)\r\n                ? func(value1)\r\n                : Maybe.Nothing<T2>();", span="113-115", cluster="CSharpx.MaybeExtensions.Bind<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, CSharpx.Maybe<T2>>)"];
n33 [label="Exit CSharpx.MaybeExtensions.Bind<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, CSharpx.Maybe<T2>>)", span="110-110", cluster="CSharpx.MaybeExtensions.Bind<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, CSharpx.Maybe<T2>>)"];
n34 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)"];
n35 [label="Entry CSharpx.MaybeExtensions.Map<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>)", span="118-118", cluster="CSharpx.MaybeExtensions.Map<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>)"];
n36 [label="T1 value1", span="120-120", cluster="CSharpx.MaybeExtensions.Map<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>)"];
n37 [label="return maybe.MatchJust(out value1)\r\n                ? Maybe.Just(func(value1))\r\n                : Maybe.Nothing<T2>();", span="121-123", cluster="CSharpx.MaybeExtensions.Map<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>)"];
n38 [label="Exit CSharpx.MaybeExtensions.Map<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>)", span="118-118", cluster="CSharpx.MaybeExtensions.Map<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>)"];
n39 [label="Entry CSharpx.MaybeExtensions.Return<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>, T2)", span="126-126", cluster="CSharpx.MaybeExtensions.Return<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>, T2)"];
n40 [label="T1 value1", span="128-128", cluster="CSharpx.MaybeExtensions.Return<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>, T2)"];
n41 [label="return maybe.MatchJust(out value1)\r\n                ? func(value1)\r\n                : noneValue;", span="129-131", cluster="CSharpx.MaybeExtensions.Return<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>, T2)"];
n42 [label="Exit CSharpx.MaybeExtensions.Return<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>, T2)", span="126-126", cluster="CSharpx.MaybeExtensions.Return<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>, T2)"];
n43 [label="Entry CSharpx.MaybeExtensions.Do<T>(CSharpx.Maybe<T>, System.Action<T>)", span="134-134", cluster="CSharpx.MaybeExtensions.Do<T>(CSharpx.Maybe<T>, System.Action<T>)"];
n44 [label="T value", span="136-136", cluster="CSharpx.MaybeExtensions.Do<T>(CSharpx.Maybe<T>, System.Action<T>)"];
n45 [label="maybe.MatchJust(out value)", span="137-137", cluster="CSharpx.MaybeExtensions.Do<T>(CSharpx.Maybe<T>, System.Action<T>)"];
n46 [label="action(value)", span="139-139", cluster="CSharpx.MaybeExtensions.Do<T>(CSharpx.Maybe<T>, System.Action<T>)"];
n47 [label="Exit CSharpx.MaybeExtensions.Do<T>(CSharpx.Maybe<T>, System.Action<T>)", span="134-134", cluster="CSharpx.MaybeExtensions.Do<T>(CSharpx.Maybe<T>, System.Action<T>)"];
n48 [label="Entry System.Action<T>.Invoke(T)", span="0-0", cluster="System.Action<T>.Invoke(T)"];
n49 [label="Entry CSharpx.MaybeExtensions.Select<TSource, TResult>(CSharpx.Maybe<TSource>, System.Func<TSource, TResult>)", span="143-143", cluster="CSharpx.MaybeExtensions.Select<TSource, TResult>(CSharpx.Maybe<TSource>, System.Func<TSource, TResult>)"];
n50 [label="return maybe.Map(selector);", span="146-146", cluster="CSharpx.MaybeExtensions.Select<TSource, TResult>(CSharpx.Maybe<TSource>, System.Func<TSource, TResult>)"];
n51 [label="Exit CSharpx.MaybeExtensions.Select<TSource, TResult>(CSharpx.Maybe<TSource>, System.Func<TSource, TResult>)", span="143-143", cluster="CSharpx.MaybeExtensions.Select<TSource, TResult>(CSharpx.Maybe<TSource>, System.Func<TSource, TResult>)"];
n52 [label="Entry CSharpx.Maybe<T1>.Map<T1, T2>(System.Func<T1, T2>)", span="118-118", cluster="CSharpx.Maybe<T1>.Map<T1, T2>(System.Func<T1, T2>)"];
n53 [label="Entry CSharpx.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CSharpx.Maybe<TSource>, System.Func<TSource, CSharpx.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)", span="149-149", cluster="CSharpx.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CSharpx.Maybe<TSource>, System.Func<TSource, CSharpx.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)"];
n54 [label="return maybe.Bind(\r\n                sourceValue => valueSelector(sourceValue)\r\n                    .Map(\r\n                        resultValue => resultSelector(sourceValue, resultValue)));", span="154-157", cluster="CSharpx.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CSharpx.Maybe<TSource>, System.Func<TSource, CSharpx.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)"];
n58 [label="valueSelector(sourceValue)\r\n                    .Map(\r\n                        resultValue => resultSelector(sourceValue, resultValue))", span="155-157", cluster="lambda expression"];
n61 [label="resultSelector(sourceValue, resultValue)", span="157-157", cluster="lambda expression"];
n55 [label="Exit CSharpx.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CSharpx.Maybe<TSource>, System.Func<TSource, CSharpx.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)", span="149-149", cluster="CSharpx.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CSharpx.Maybe<TSource>, System.Func<TSource, CSharpx.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)"];
n56 [label="Entry CSharpx.Maybe<T1>.Bind<T1, T2>(System.Func<T1, CSharpx.Maybe<T2>>)", span="110-110", cluster="CSharpx.Maybe<T1>.Bind<T1, T2>(System.Func<T1, CSharpx.Maybe<T2>>)"];
n57 [label="Entry lambda expression", span="155-157", cluster="lambda expression"];
n59 [label="Exit lambda expression", span="155-157", cluster="lambda expression"];
n60 [label="Entry lambda expression", span="157-157", cluster="lambda expression"];
n62 [label="Exit lambda expression", span="157-157", cluster="lambda expression"];
n63 [label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0", cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)"];
n64 [label="Entry CSharpx.MaybeExtensions.FromJust<T>(CSharpx.Maybe<T>, System.Exception)", span="160-160", cluster="CSharpx.MaybeExtensions.FromJust<T>(CSharpx.Maybe<T>, System.Exception)"];
n65 [label="T value", span="162-162", cluster="CSharpx.MaybeExtensions.FromJust<T>(CSharpx.Maybe<T>, System.Exception)"];
n66 [label="maybe.MatchJust(out value)", span="163-163", cluster="CSharpx.MaybeExtensions.FromJust<T>(CSharpx.Maybe<T>, System.Exception)"];
n68 [label="throw exceptionToThrow ?? new ArgumentException(''Value empty.'');", span="167-167", cluster="CSharpx.MaybeExtensions.FromJust<T>(CSharpx.Maybe<T>, System.Exception)"];
n67 [label="return value;", span="165-165", cluster="CSharpx.MaybeExtensions.FromJust<T>(CSharpx.Maybe<T>, System.Exception)"];
n69 [label="Exit CSharpx.MaybeExtensions.FromJust<T>(CSharpx.Maybe<T>, System.Exception)", span="160-160", cluster="CSharpx.MaybeExtensions.FromJust<T>(CSharpx.Maybe<T>, System.Exception)"];
n70 [label="Entry System.ArgumentException.ArgumentException(string)", span="0-0", cluster="System.ArgumentException.ArgumentException(string)"];
n71 [label="Entry CSharpx.MaybeExtensions.IsNothing<T>(CSharpx.Maybe<T>)", span="170-170", cluster="CSharpx.MaybeExtensions.IsNothing<T>(CSharpx.Maybe<T>)"];
n72 [label="return maybe.Tag == MaybeType.Nothing;", span="172-172", cluster="CSharpx.MaybeExtensions.IsNothing<T>(CSharpx.Maybe<T>)"];
n73 [label="Exit CSharpx.MaybeExtensions.IsNothing<T>(CSharpx.Maybe<T>)", span="170-170", cluster="CSharpx.MaybeExtensions.IsNothing<T>(CSharpx.Maybe<T>)"];
n74 [label="Entry CSharpx.MaybeExtensions.IsJust<T>(CSharpx.Maybe<T>)", span="175-175", cluster="CSharpx.MaybeExtensions.IsJust<T>(CSharpx.Maybe<T>)"];
n75 [label="return maybe.Tag == MaybeType.Just;", span="177-177", cluster="CSharpx.MaybeExtensions.IsJust<T>(CSharpx.Maybe<T>)"];
n76 [label="Exit CSharpx.MaybeExtensions.IsJust<T>(CSharpx.Maybe<T>)", span="175-175", cluster="CSharpx.MaybeExtensions.IsJust<T>(CSharpx.Maybe<T>)"];
m0_9 [label="Entry CommandLine.OptionAttribute.CreateOptionInfo()", span="77-77", cluster="CommandLine.OptionAttribute.CreateOptionInfo()", file="HelpText.cs"];
m0_10 [label="return new OptionInfo(ShortName, LongName);", span="79-79", cluster="CommandLine.OptionAttribute.CreateOptionInfo()", file="HelpText.cs"];
m0_11 [label="Exit CommandLine.OptionAttribute.CreateOptionInfo()", span="77-77", cluster="CommandLine.OptionAttribute.CreateOptionInfo()", file="HelpText.cs"];
m0_12 [label="Entry CommandLine.Parsing.OptionInfo.OptionInfo(char?, string)", span="78-78", cluster="CommandLine.Parsing.OptionInfo.OptionInfo(char?, string)", file="HelpText.cs"];
m0_3 [label="Entry CommandLine.OptionAttribute.OptionAttribute(char)", span="49-49", cluster="CommandLine.OptionAttribute.OptionAttribute(char)", file="HelpText.cs"];
m0_4 [label="Exit CommandLine.OptionAttribute.OptionAttribute(char)", span="49-49", cluster="CommandLine.OptionAttribute.OptionAttribute(char)", file="HelpText.cs"];
m0_7 [label="Entry CommandLine.OptionAttribute.OptionAttribute(char, string)", span="68-68", cluster="CommandLine.OptionAttribute.OptionAttribute(char, string)", file="HelpText.cs"];
m0_8 [label="Exit CommandLine.OptionAttribute.OptionAttribute(char, string)", span="68-68", cluster="CommandLine.OptionAttribute.OptionAttribute(char, string)", file="HelpText.cs"];
m0_0 [label="Entry CommandLine.OptionAttribute.OptionAttribute()", span="40-40", cluster="CommandLine.OptionAttribute.OptionAttribute()", file="HelpText.cs"];
m0_1 [label="AutoLongName = true", span="42-42", cluster="CommandLine.OptionAttribute.OptionAttribute()", file="HelpText.cs"];
m0_2 [label="Exit CommandLine.OptionAttribute.OptionAttribute()", span="40-40", cluster="CommandLine.OptionAttribute.OptionAttribute()", file="HelpText.cs"];
m0_5 [label="Entry CommandLine.OptionAttribute.OptionAttribute(string)", span="58-58", cluster="CommandLine.OptionAttribute.OptionAttribute(string)", file="HelpText.cs"];
m0_6 [label="Exit CommandLine.OptionAttribute.OptionAttribute(string)", span="58-58", cluster="CommandLine.OptionAttribute.OptionAttribute(string)", file="HelpText.cs"];
m0_13 [label="CommandLine.OptionAttribute", span="", file="HelpText.cs"];
m1_4 [label="Entry CommandLine.Tests.Unit.Parser.FakeOptionsWithPreBuiltParserState.FakeOptionsWithPreBuiltParserState()", span="21-21", cluster="CommandLine.Tests.Unit.Parser.FakeOptionsWithPreBuiltParserState.FakeOptionsWithPreBuiltParserState()", file="UnParserExtensions.cs"];
m1_5 [label="BadParserState = new FakeParserState()", span="23-23", cluster="CommandLine.Tests.Unit.Parser.FakeOptionsWithPreBuiltParserState.FakeOptionsWithPreBuiltParserState()", color=red, community=0, file="UnParserExtensions.cs"];
m1_6 [label="Exit CommandLine.Tests.Unit.Parser.FakeOptionsWithPreBuiltParserState.FakeOptionsWithPreBuiltParserState()", span="21-21", cluster="CommandLine.Tests.Unit.Parser.FakeOptionsWithPreBuiltParserState.FakeOptionsWithPreBuiltParserState()", file="UnParserExtensions.cs"];
m1_0 [label="Entry CommandLine.Tests.Unit.Parser.FakeParserState.FakeParserState()", span="11-11", cluster="CommandLine.Tests.Unit.Parser.FakeParserState.FakeParserState()", file="UnParserExtensions.cs"];
m1_1 [label="Errors = new List<ParsingError>()", span="13-13", cluster="CommandLine.Tests.Unit.Parser.FakeParserState.FakeParserState()", color=red, community=0, file="UnParserExtensions.cs"];
m1_2 [label="Exit CommandLine.Tests.Unit.Parser.FakeParserState.FakeParserState()", span="11-11", cluster="CommandLine.Tests.Unit.Parser.FakeParserState.FakeParserState()", file="UnParserExtensions.cs"];
m1_44 [label="Entry CommandLine.Tests.Unit.Parser.FakeOptionsWithParserStateAttributeAppliedInWrongWayAndNotInitialized.FakeOptionsWithParserStateAttributeAppliedInWrongWayAndNotInitialized()", span="52-52", cluster="CommandLine.Tests.Unit.Parser.FakeOptionsWithParserStateAttributeAppliedInWrongWayAndNotInitialized.FakeOptionsWithParserStateAttributeAppliedInWrongWayAndNotInitialized()", file="UnParserExtensions.cs"];
m1_39 [label="Entry CommandLine.Tests.Unit.Parser.ParserStateFixture.Parser_state_attribute_should_be_applied_to_a_property_of_the_correct_type_also_if_not_initialized()", span="86-86", cluster="CommandLine.Tests.Unit.Parser.ParserStateFixture.Parser_state_attribute_should_be_applied_to_a_property_of_the_correct_type_also_if_not_initialized()", file="UnParserExtensions.cs"];
m1_40 [label="var options = new FakeOptionsWithParserStateAttributeAppliedInWrongWayAndNotInitialized()", span="88-88", cluster="CommandLine.Tests.Unit.Parser.ParserStateFixture.Parser_state_attribute_should_be_applied_to_a_property_of_the_correct_type_also_if_not_initialized()", file="UnParserExtensions.cs"];
m1_41 [label="Assert.ThrowsDelegate act = () => new CommandLine.Parser(\r\n                with => with.HelpWriter = new StringWriter()).ParseArguments(new[] { ''--foo'' }, options)", span="90-91", cluster="CommandLine.Tests.Unit.Parser.ParserStateFixture.Parser_state_attribute_should_be_applied_to_a_property_of_the_correct_type_also_if_not_initialized()", file="UnParserExtensions.cs"];
m1_42 [label="Assert.Throws<InvalidOperationException>(act)", span="93-93", cluster="CommandLine.Tests.Unit.Parser.ParserStateFixture.Parser_state_attribute_should_be_applied_to_a_property_of_the_correct_type_also_if_not_initialized()", file="UnParserExtensions.cs"];
m1_43 [label="Exit CommandLine.Tests.Unit.Parser.ParserStateFixture.Parser_state_attribute_should_be_applied_to_a_property_of_the_correct_type_also_if_not_initialized()", span="86-86", cluster="CommandLine.Tests.Unit.Parser.ParserStateFixture.Parser_state_attribute_should_be_applied_to_a_property_of_the_correct_type_also_if_not_initialized()", file="UnParserExtensions.cs"];
m1_27 [label="Entry System.IO.StringWriter.StringWriter()", span="0-0", cluster="System.IO.StringWriter.StringWriter()", file="UnParserExtensions.cs"];
m1_28 [label="Entry CommandLine.Tests.Unit.Parser.ParserStateFixture.Parser_state_attribute_should_be_applied_to_a_property_of_the_correct_type()", span="75-75", cluster="CommandLine.Tests.Unit.Parser.ParserStateFixture.Parser_state_attribute_should_be_applied_to_a_property_of_the_correct_type()", file="UnParserExtensions.cs"];
m1_29 [label="var options = new FakeOptionsWithParserStateAttributeAppliedInWrongWay()", span="77-77", cluster="CommandLine.Tests.Unit.Parser.ParserStateFixture.Parser_state_attribute_should_be_applied_to_a_property_of_the_correct_type()", file="UnParserExtensions.cs"];
m1_30 [label="Assert.ThrowsDelegate act = () => new CommandLine.Parser(\r\n                with => with.HelpWriter = new StringWriter()).ParseArguments(new[] { ''--foo'' }, options)", span="79-80", cluster="CommandLine.Tests.Unit.Parser.ParserStateFixture.Parser_state_attribute_should_be_applied_to_a_property_of_the_correct_type()", color=red, community=0, file="UnParserExtensions.cs"];
m1_31 [label="Assert.Throws<InvalidOperationException>(act)", span="82-82", cluster="CommandLine.Tests.Unit.Parser.ParserStateFixture.Parser_state_attribute_should_be_applied_to_a_property_of_the_correct_type()", file="UnParserExtensions.cs"];
m1_32 [label="Exit CommandLine.Tests.Unit.Parser.ParserStateFixture.Parser_state_attribute_should_be_applied_to_a_property_of_the_correct_type()", span="75-75", cluster="CommandLine.Tests.Unit.Parser.ParserStateFixture.Parser_state_attribute_should_be_applied_to_a_property_of_the_correct_type()", file="UnParserExtensions.cs"];
m1_22 [label="Entry CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)", span="85-85", cluster="CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)", file="UnParserExtensions.cs"];
m1_23 [label="Entry CommandLine.Parser.ParseArguments(string[], object)", span="140-140", cluster="CommandLine.Parser.ParseArguments(string[], object)", file="UnParserExtensions.cs"];
m1_10 [label="var enumerator = source.GetEnumerator()", span="20-20", cluster="CommandLine.Infrastructure.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", file="UnParserExtensions.cs"];
m1_11 [label="enumerator.MoveNext()", span="22-22", cluster="CommandLine.Infrastructure.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", color=green, community=0, file="UnParserExtensions.cs"];
m1_12 [label="var left = enumerator.Current", span="24-24", cluster="CommandLine.Infrastructure.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", file="UnParserExtensions.cs", color=green, community=0];
m1_19 [label="Entry lambda expression", span="68-69", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_48 [label="Entry lambda expression", span="91-91", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_20 [label="new CommandLine.Parser(\r\n                with => with.HelpWriter = new StringWriter()).ParseArguments(new[] { ''--bar'' }, options)", span="68-69", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_21 [label="Exit lambda expression", span="68-69", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_25 [label="with.HelpWriter = new StringWriter()", span="69-69", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_24 [label="Entry lambda expression", span="69-69", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_26 [label="Exit lambda expression", span="69-69", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_34 [label="new CommandLine.Parser(\r\n                with => with.HelpWriter = new StringWriter()).ParseArguments(new[] { ''--foo'' }, options)", span="79-80", cluster="lambda expression", color=red, community=0, file="UnParserExtensions.cs"];
m1_33 [label="Entry lambda expression", span="79-80", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_35 [label="Exit lambda expression", span="79-80", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_37 [label="with.HelpWriter = new StringWriter()", span="80-80", cluster="lambda expression", color=red, community=0, file="UnParserExtensions.cs"];
m1_36 [label="Entry lambda expression", span="80-80", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_38 [label="Exit lambda expression", span="80-80", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_46 [label="new CommandLine.Parser(\r\n                with => with.HelpWriter = new StringWriter()).ParseArguments(new[] { ''--foo'' }, options)", span="90-91", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_45 [label="Entry lambda expression", span="90-91", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_47 [label="Exit lambda expression", span="90-91", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_49 [label="with.HelpWriter = new StringWriter()", span="91-91", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_50 [label="Exit lambda expression", span="91-91", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_18 [label="Entry Unk.>", span="", cluster="Unk.>", file="UnParserExtensions.cs"];
m1_7 [label="Entry CommandLine.Tests.Unit.Parser.FakeOptionsWithPreBuiltParserState.GetUsage()", span="26-26", cluster="CommandLine.Tests.Unit.Parser.FakeOptionsWithPreBuiltParserState.GetUsage()", file="UnParserExtensions.cs"];
m1_8 [label="return ''FakeOptionsWithPreBuiltParserState::GetUsage()'';", span="28-28", cluster="CommandLine.Tests.Unit.Parser.FakeOptionsWithPreBuiltParserState.GetUsage()", file="UnParserExtensions.cs"];
m1_9 [label="Entry CommandLine.Infrastructure.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", span="18-18", cluster="CommandLine.Infrastructure.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", file="UnParserExtensions.cs"];
m1_13 [label="Entry CommandLine.Tests.Unit.Parser.ParserStateFixture.Parser_state_instance_should_not_pre_built()", span="64-64", cluster="CommandLine.Tests.Unit.Parser.ParserStateFixture.Parser_state_instance_should_not_pre_built()", color=green, community=0, file="UnParserExtensions.cs"];
m1_15 [label="Assert.ThrowsDelegate act = () => new CommandLine.Parser(\r\n                with => with.HelpWriter = new StringWriter()).ParseArguments(new[] { ''--bar'' }, options)", span="68-69", cluster="CommandLine.Tests.Unit.Parser.ParserStateFixture.Parser_state_instance_should_not_pre_built()", file="UnParserExtensions.cs"];
m1_16 [label="Assert.Throws<InvalidOperationException>(act)", span="71-71", cluster="CommandLine.Tests.Unit.Parser.ParserStateFixture.Parser_state_instance_should_not_pre_built()", file="UnParserExtensions.cs"];
m1_14 [label="var options = new FakeOptionsWithPreBuiltParserState()", span="66-66", cluster="CommandLine.Tests.Unit.Parser.ParserStateFixture.Parser_state_instance_should_not_pre_built()", file="UnParserExtensions.cs"];
m1_17 [label="Exit CommandLine.Tests.Unit.Parser.ParserStateFixture.Parser_state_instance_should_not_pre_built()", span="64-64", cluster="CommandLine.Tests.Unit.Parser.ParserStateFixture.Parser_state_instance_should_not_pre_built()", file="UnParserExtensions.cs"];
m1_3 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="UnParserExtensions.cs"];
m1_51 [label="CommandLine.Tests.Unit.Parser.FakeParserState", span="", file="UnParserExtensions.cs"];
m1_52 [label="CommandLine.Tests.Unit.Parser.FakeOptionsWithPreBuiltParserState", span="", file="UnParserExtensions.cs"];
m1_53 [label="CommandLine.Tests.Unit.Parser.FakeOptionsWithParserStateAttributeAppliedInWrongWay", span="", file="UnParserExtensions.cs"];
m1_54 [label=options, span="", file="UnParserExtensions.cs"];
m1_55 [label=options, span="", file="UnParserExtensions.cs"];
m1_56 [label=options, span="", file="UnParserExtensions.cs"];
n77 -> n1  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<T>"];
n77 -> n4  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<T>"];
n77 -> n7  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<T>"];
n77 -> n8  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<T>"];
n78 -> n13  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Just<T>"];
n79 -> n58  [key=1, style=dashed, color=darkseagreen4, label="System.Func<TSource, CSharpx.Maybe<TValue>>"];
n80 -> n58  [key=1, style=dashed, color=darkseagreen4, label="System.Func<TSource, TValue, TResult>"];
n80 -> n61  [key=1, style=dashed, color=darkseagreen4, label="System.Func<TSource, TValue, TResult>"];
n81 -> n61  [key=1, style=dashed, color=darkseagreen4, label=TSource];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n2 -> n0  [key=0, style=bold, color=blue];
n3 -> n4  [key=0, style=solid];
n4 -> n5  [key=0, style=solid];
n5 -> n3  [key=0, style=bold, color=blue];
n6 -> n7  [key=0, style=solid];
n7 -> n8  [key=0, style=solid];
n7 -> n9  [key=1, style=dashed, color=darkseagreen4, label="out T"];
n8 -> n9  [key=0, style=solid];
n9 -> n6  [key=0, style=bold, color=blue];
n10 -> n11  [key=0, style=solid];
n11 -> n10  [key=0, style=bold, color=blue];
n12 -> n13  [key=0, style=solid];
n13 -> n14  [key=0, style=solid];
n14 -> n12  [key=0, style=bold, color=blue];
n15 -> n16  [key=0, style=solid];
n16 -> n17  [key=0, style=solid];
n16 -> n10  [key=2, style=dotted];
n17 -> n15  [key=0, style=bold, color=blue];
n18 -> n19  [key=0, style=solid];
n19 -> n20  [key=0, style=solid];
n19 -> n12  [key=2, style=dotted];
n20 -> n18  [key=0, style=bold, color=blue];
n21 -> n22  [key=0, style=solid];
n21 -> n23  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Either<T1, T2>"];
n22 -> n23  [key=0, style=solid];
n22 -> n24  [key=0, style=solid];
n23 -> n25  [key=0, style=solid];
n23 -> n12  [key=2, style=dotted];
n24 -> n25  [key=0, style=solid];
n24 -> n10  [key=2, style=dotted];
n25 -> n21  [key=0, style=bold, color=blue];
n26 -> n27  [key=0, style=solid];
n27 -> n28  [key=0, style=solid];
n27 -> n29  [key=2, style=dotted];
n27 -> n15  [key=2, style=dotted];
n27 -> n18  [key=2, style=dotted];
n28 -> n26  [key=0, style=bold, color=blue];
n30 -> n31  [key=0, style=solid];
n30 -> n32  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<T1>"];
n31 -> n32  [key=0, style=solid];
n32 -> n33  [key=0, style=solid];
n32 -> n6  [key=2, style=dotted];
n32 -> n34  [key=2, style=dotted];
n32 -> n15  [key=2, style=dotted];
n32 -> n32  [key=1, style=dashed, color=darkseagreen4, label=value1];
n33 -> n30  [key=0, style=bold, color=blue];
n35 -> n36  [key=0, style=solid];
n35 -> n37  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<T1>"];
n36 -> n37  [key=0, style=solid];
n37 -> n38  [key=0, style=solid];
n37 -> n6  [key=2, style=dotted];
n37 -> n34  [key=2, style=dotted];
n37 -> n18  [key=2, style=dotted];
n37 -> n15  [key=2, style=dotted];
n37 -> n37  [key=1, style=dashed, color=darkseagreen4, label=value1];
n38 -> n35  [key=0, style=bold, color=blue];
n39 -> n40  [key=0, style=solid];
n39 -> n41  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<T1>"];
n40 -> n41  [key=0, style=solid];
n41 -> n42  [key=0, style=solid];
n41 -> n6  [key=2, style=dotted];
n41 -> n34  [key=2, style=dotted];
n41 -> n41  [key=1, style=dashed, color=darkseagreen4, label=value1];
n42 -> n39  [key=0, style=bold, color=blue];
n43 -> n44  [key=0, style=solid];
n43 -> n45  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<T>"];
n43 -> n46  [key=1, style=dashed, color=darkseagreen4, label="System.Action<T>"];
n44 -> n45  [key=0, style=solid];
n45 -> n46  [key=0, style=solid];
n45 -> n47  [key=0, style=solid];
n45 -> n6  [key=2, style=dotted];
n46 -> n47  [key=0, style=solid];
n46 -> n48  [key=2, style=dotted];
n47 -> n43  [key=0, style=bold, color=blue];
n49 -> n50  [key=0, style=solid];
n50 -> n51  [key=0, style=solid];
n50 -> n52  [key=2, style=dotted];
n51 -> n49  [key=0, style=bold, color=blue];
n53 -> n54  [key=0, style=solid];
n53 -> n58  [key=1, style=dashed, color=darkseagreen4, label="System.Func<TSource, CSharpx.Maybe<TValue>>"];
n53 -> n61  [key=1, style=dashed, color=darkseagreen4, label="System.Func<TSource, TValue, TResult>"];
n54 -> n55  [key=0, style=solid];
n54 -> n56  [key=2, style=dotted];
n54 -> n57  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n58 -> n59  [key=0, style=solid];
n58 -> n34  [key=2, style=dotted];
n58 -> n52  [key=2, style=dotted];
n58 -> n60  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n61 -> n62  [key=0, style=solid];
n61 -> n63  [key=2, style=dotted];
n55 -> n53  [key=0, style=bold, color=blue];
n57 -> n58  [key=0, style=solid];
n57 -> n61  [key=1, style=dashed, color=darkseagreen4, label=TSource];
n59 -> n57  [key=0, style=bold, color=blue];
n60 -> n61  [key=0, style=solid];
n62 -> n60  [key=0, style=bold, color=blue];
n64 -> n65  [key=0, style=solid];
n64 -> n66  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<T>"];
n64 -> n68  [key=1, style=dashed, color=darkseagreen4, label="System.Exception"];
n65 -> n66  [key=0, style=solid];
n66 -> n67  [key=0, style=solid];
n66 -> n68  [key=0, style=solid];
n66 -> n6  [key=2, style=dotted];
n68 -> n69  [key=0, style=solid];
n68 -> n70  [key=2, style=dotted];
n67 -> n69  [key=0, style=solid];
n69 -> n64  [key=0, style=bold, color=blue];
n71 -> n72  [key=0, style=solid];
n72 -> n73  [key=0, style=solid];
n73 -> n71  [key=0, style=bold, color=blue];
n74 -> n75  [key=0, style=solid];
n75 -> n76  [key=0, style=solid];
n76 -> n74  [key=0, style=bold, color=blue];
m0_9 -> m0_10  [key=0, style=solid];
m0_10 -> m0_11  [key=0, style=solid];
m0_10 -> m0_12  [key=2, style=dotted];
m0_11 -> m0_9  [key=0, style=bold, color=blue];
m0_3 -> m0_4  [key=0, style=solid];
m0_4 -> m0_3  [key=0, style=bold, color=blue];
m0_7 -> m0_8  [key=0, style=solid];
m0_8 -> m0_7  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_2  [key=0, style=solid];
m0_2 -> m0_0  [key=0, style=bold, color=blue];
m0_5 -> m0_6  [key=0, style=solid];
m0_6 -> m0_5  [key=0, style=bold, color=blue];
m0_13 -> m0_1  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.OptionAttribute"];
m0_13 -> m0_10  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.OptionAttribute"];
m1_4 -> m1_5  [key=0, style=solid, color=red];
m1_5 -> m1_6  [key=0, style=solid, color=red];
m1_5 -> m1_0  [key=2, style=dotted, color=red];
m1_6 -> m1_4  [key=0, style=bold, color=blue];
m1_0 -> m1_1  [key=0, style=solid, color=red];
m1_1 -> m1_2  [key=0, style=solid, color=red];
m1_1 -> m1_3  [key=2, style=dotted, color=red];
m1_2 -> m1_0  [key=0, style=bold, color=blue];
m1_39 -> m1_40  [key=0, style=solid];
m1_40 -> m1_41  [key=0, style=solid];
m1_40 -> m1_44  [key=2, style=dotted];
m1_40 -> m1_46  [key=1, style=dashed, color=darkseagreen4, label=options];
m1_41 -> m1_42  [key=0, style=solid];
m1_42 -> m1_43  [key=0, style=solid];
m1_42 -> m1_18  [key=2, style=dotted];
m1_43 -> m1_39  [key=0, style=bold, color=blue];
m1_28 -> m1_29  [key=0, style=solid];
m1_29 -> m1_30  [key=0, style=solid, color=red];
m1_29 -> m1_10  [key=2, style=dotted];
m1_29 -> m1_34  [key=1, style=dashed, color=red, label=options];
m1_30 -> m1_31  [key=0, style=solid, color=red];
m1_31 -> m1_32  [key=0, style=solid];
m1_31 -> m1_18  [key=2, style=dotted];
m1_32 -> m1_28  [key=0, style=bold, color=blue];
m1_10 -> m1_11  [key=0, style=solid, color=green];
m1_10 -> m1_12  [key=1, style=dashed, color=green, label=enumerator];
m1_10 -> m1_13  [key=1, style=dashed, color=green, label=enumerator];
m1_10 -> m1_18  [key=2, style=dotted];
m1_10 -> m1_14  [key=1, style=dashed, color=darkseagreen4, label=enumerator];
m1_11 -> m1_12  [key=0, style=solid, color=green];
m1_11 -> m1_17  [key=0, style=solid, color=green];
m1_11 -> m1_19  [key=2, style=dotted, color=green];
m1_12 -> m1_10  [key=0, style=bold, color=blue];
m1_12 -> m1_13  [key=0, style=solid, color=green];
m1_12 -> m1_15  [key=1, style=dashed, color=green, label=left];
m1_19 -> m1_20  [key=0, style=solid];
m1_48 -> m1_49  [key=0, style=solid];
m1_20 -> m1_21  [key=0, style=solid];
m1_20 -> m1_22  [key=2, style=dotted];
m1_20 -> m1_23  [key=2, style=dotted];
m1_20 -> m1_25  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m1_21 -> m1_19  [key=0, style=bold, color=blue];
m1_25 -> m1_26  [key=0, style=solid];
m1_25 -> m1_27  [key=2, style=dotted];
m1_24 -> m1_25  [key=0, style=solid];
m1_26 -> m1_24  [key=0, style=bold, color=blue];
m1_34 -> m1_35  [key=0, style=solid, color=red];
m1_34 -> m1_22  [key=2, style=dotted, color=red];
m1_34 -> m1_23  [key=2, style=dotted, color=red];
m1_34 -> m1_37  [key=1, style=dashed, color=red, label="CommandLine.ParserSettings"];
m1_33 -> m1_34  [key=0, style=solid, color=red];
m1_35 -> m1_33  [key=0, style=bold, color=blue];
m1_37 -> m1_38  [key=0, style=solid, color=red];
m1_37 -> m1_27  [key=2, style=dotted, color=red];
m1_36 -> m1_37  [key=0, style=solid, color=red];
m1_38 -> m1_36  [key=0, style=bold, color=blue];
m1_46 -> m1_47  [key=0, style=solid];
m1_46 -> m1_22  [key=2, style=dotted];
m1_46 -> m1_23  [key=2, style=dotted];
m1_46 -> m1_49  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m1_45 -> m1_46  [key=0, style=solid];
m1_47 -> m1_45  [key=0, style=bold, color=blue];
m1_49 -> m1_50  [key=0, style=solid];
m1_49 -> m1_27  [key=2, style=dotted];
m1_50 -> m1_48  [key=0, style=bold, color=blue];
m1_7 -> m1_8  [key=0, style=solid];
m1_8 -> m1_9  [key=0, style=solid];
m1_9 -> m1_7  [key=0, style=bold, color=blue];
m1_9 -> m1_10  [key=0, style=solid];
m1_9 -> m1_15  [key=0, style=bold, color=crimson];
m1_13 -> m1_14  [key=0, style=solid, color=green];
m1_13 -> m1_17  [key=0, style=solid, color=green];
m1_13 -> m1_19  [key=2, style=dotted, color=green];
m1_15 -> m1_16  [key=0, style=solid];
m1_15 -> n63  [key=2, style=dotted];
m1_16 -> m1_13  [key=0, style=solid, color=green];
m1_16 -> m1_17  [key=0, style=solid];
m1_16 -> m1_18  [key=2, style=dotted];
m1_14 -> m1_15  [key=0, style=solid];
m1_14 -> m1_16  [key=1, style=dashed, color=darkseagreen4, label=right];
m1_14 -> m1_4  [key=2, style=dotted];
m1_14 -> m1_20  [key=1, style=dashed, color=darkseagreen4, label=options];
m1_17 -> m1_9  [key=0, style=bold, color=blue];
m1_17 -> m1_13  [key=0, style=bold, color=blue];
m1_51 -> m1_1  [key=1, style=dashed, color=red, label="CommandLine.Tests.Unit.Parser.FakeParserState"];
m1_52 -> m1_5  [key=1, style=dashed, color=red, label="CommandLine.Tests.Unit.Parser.FakeOptionsWithPreBuiltParserState"];
m1_53 -> m1_11  [key=1, style=dashed, color=red, label="CommandLine.Tests.Unit.Parser.FakeOptionsWithParserStateAttributeAppliedInWrongWay"];
m1_54 -> m1_20  [key=1, style=dashed, color=darkseagreen4, label=options];
m1_55 -> m1_34  [key=1, style=dashed, color=red, label=options];
m1_56 -> m1_46  [key=1, style=dashed, color=darkseagreen4, label=options];
}
