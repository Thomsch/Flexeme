digraph  {
n0 [label="Entry CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", span="15-15", cluster="CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)"];
n1 [label="result.Tag == ResultType.Ok", span="17-17", cluster="CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)"];
n2 [label="var ok = (Ok<TSuccess, TMessage>)result", span="19-19", cluster="CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)"];
n4 [label="return Enumerable.Empty<TMessage>();", span="22-22", cluster="CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)"];
n3 [label="return ok.Value.Messages;", span="20-20", cluster="CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)"];
n5 [label="Exit CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", span="15-15", cluster="CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)"];
n6 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()"];
n7 [label="Entry CommandLine.Infrastructure.ResultExtensions.ToMaybe<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", span="25-25", cluster="CommandLine.Infrastructure.ResultExtensions.ToMaybe<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)"];
n8 [label="result.Tag == ResultType.Ok", span="27-27", cluster="CommandLine.Infrastructure.ResultExtensions.ToMaybe<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)"];
n9 [label="var ok = (Ok<TSuccess, TMessage>)result", span="29-29", cluster="CommandLine.Infrastructure.ResultExtensions.ToMaybe<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)"];
n11 [label="return Maybe.Nothing<TSuccess>();", span="32-32", cluster="CommandLine.Infrastructure.ResultExtensions.ToMaybe<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)"];
n10 [label="return Maybe.Just(ok.Value.Success);", span="30-30", cluster="CommandLine.Infrastructure.ResultExtensions.ToMaybe<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)"];
n12 [label="Exit CommandLine.Infrastructure.ResultExtensions.ToMaybe<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", span="25-25", cluster="CommandLine.Infrastructure.ResultExtensions.ToMaybe<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)"];
n13 [label="Entry Unk.Just", span="", cluster="Unk.Just"];
n14 [label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116", cluster="CSharpx.Maybe.Nothing<T>()"];
d135 [label="((NotParsed<Immutable_Simple_Options>)result).Errors.Should().ContainSingle(e => e.Equals(expectedError))", span="276-276", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", color=green, community=0];
d131 [label="var expectedError = new HelpRequestedError()", span="268-268", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()"];
d133 [label="var result = sut.ParseArguments<Immutable_Simple_Options>(new[] { ''--help'' })", span="272-272", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", color=green, community=0];
d134 [label="((NotParsed<Immutable_Simple_Options>)result).Errors.Should().HaveCount(x => x == 1)", span="275-275", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", color=green, community=0];
d136 [label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", span="265-265", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()"];
d23 [label="Entry Unk.Should", span="", cluster="Unk.Should"];
d139 [label="Entry Unk.ContainSingle", span="", cluster="Unk.ContainSingle"];
d143 [label="Entry lambda expression", span="276-276", cluster="lambda expression"];
d144 [label="e.Equals(expectedError)", span="276-276", cluster="lambda expression", color=green, community=0];
d380 [label=expectedError, span=""];
d145 [label="Exit lambda expression", span="276-276", cluster="lambda expression"];
d146 [label="Entry Unk.Equals", span="", cluster="Unk.Equals"];
d132 [label="var sut = new Parser()", span="269-269", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()"];
d9 [label="Entry CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", span="85-85", cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)"];
d138 [label="Entry Unk.HaveCount", span="", cluster="Unk.HaveCount"];
d140 [label="Entry lambda expression", span="275-275", cluster="lambda expression"];
d141 [label="x == 1", span="275-275", cluster="lambda expression", color=green, community=0];
d142 [label="Exit lambda expression", span="275-275", cluster="lambda expression"];
d148 [label="var help = new StringWriter()", span="284-284", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", color=green, community=0];
d147 [label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", span="281-281", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()"];
d149 [label="var sut = new Parser(config => config.HelpWriter = help)", span="285-285", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", color=green, community=0];
d7 [label="Entry System.IO.StringWriter.StringWriter()", span="0-0", cluster="System.IO.StringWriter.StringWriter()"];
d156 [label="config.HelpWriter = help", span="285-285", cluster="lambda expression", color=green, community=0];
d151 [label="var result = help.ToString()", span="289-289", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", color=green, community=0];
d150 [label="sut.ParseArguments<Immutable_Simple_Options>(new[] { ''--help'' })", span="288-288", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", color=green, community=0];
d8 [label="Entry CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)", span="37-37", cluster="CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)"];
d381 [label=help, span=""];
d155 [label="Entry lambda expression", span="285-285", cluster="lambda expression"];
d157 [label="Exit lambda expression", span="285-285", cluster="lambda expression"];
d152 [label="result.Length.Should().BeGreaterThan(0)", span="292-292", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", color=green, community=0];
d10 [label="Entry System.IO.StringWriter.ToString()", span="0-0", cluster="System.IO.StringWriter.ToString()"];
d153 [label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", span="281-281", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()"];
d154 [label="Entry Unk.BeGreaterThan", span="", cluster="Unk.BeGreaterThan"];
d159 [label="var expectedError = new VersionRequestedError()", span="300-300", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", color=green, community=0];
d158 [label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", span="297-297", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()"];
d160 [label="var sut = new Parser()", span="301-301", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", color=green, community=0];
d165 [label="Entry CommandLine.VersionRequestedError.VersionRequestedError()", span="457-457", cluster="CommandLine.VersionRequestedError.VersionRequestedError()"];
d163 [label="((NotParsed<Simple_Options>)result).Errors.Should().ContainSingle(e => e.Equals(expectedError))", span="308-308", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", color=green, community=0];
d170 [label="e.Equals(expectedError)", span="308-308", cluster="lambda expression", color=green, community=0];
d161 [label="var result = sut.ParseArguments<Simple_Options>(new[] { ''--version'' })", span="304-304", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", color=green, community=0];
d46 [label="Entry CommandLine.Parser.Parser()", span="26-26", cluster="CommandLine.Parser.Parser()"];
d162 [label="((NotParsed<Simple_Options>)result).Errors.Should().HaveCount(x => x == 1)", span="307-307", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", color=green, community=0];
d164 [label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", span="297-297", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()"];
d169 [label="Entry lambda expression", span="308-308", cluster="lambda expression"];
d382 [label=expectedError, span=""];
d171 [label="Exit lambda expression", span="308-308", cluster="lambda expression"];
d166 [label="Entry lambda expression", span="307-307", cluster="lambda expression"];
d167 [label="x == 1", span="307-307", cluster="lambda expression", color=green, community=0];
d168 [label="Exit lambda expression", span="307-307", cluster="lambda expression"];
d173 [label="var help = new StringWriter()", span="316-316", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", color=green, community=0];
d172 [label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", span="313-313", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()"];
d174 [label="var sut = new Parser(config => config.HelpWriter = help)", span="317-317", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", color=green, community=0];
d186 [label="config.HelpWriter = help", span="317-317", cluster="lambda expression", color=green, community=0];
d176 [label="var result = help.ToString()", span="321-321", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", color=green, community=0];
d175 [label="sut.ParseArguments<Simple_Options>(new[] { ''--version'' })", span="320-320", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", color=green, community=0];
d383 [label=help, span=""];
d185 [label="Entry lambda expression", span="317-317", cluster="lambda expression"];
d187 [label="Exit lambda expression", span="317-317", cluster="lambda expression"];
d177 [label="result.Length.Should().BeGreaterThan(0)", span="324-324", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", color=green, community=0];
d178 [label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="325-325", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", color=green, community=0];
d179 [label="lines.Should().HaveCount(x => x == 1)", span="326-326", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", color=green, community=0];
d182 [label="Entry string.ToNotEmptyLines()", span="10-10", cluster="string.ToNotEmptyLines()"];
d183 [label="Entry System.Collections.Generic.IEnumerable<string>.TrimStringArray()", span="15-15", cluster="System.Collections.Generic.IEnumerable<string>.TrimStringArray()"];
d180 [label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="327-327", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", color=green, community=0];
d188 [label="Entry lambda expression", span="326-326", cluster="lambda expression"];
d181 [label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", span="313-313", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()"];
d184 [label="Entry Unk.StartWithEquivalent", span="", cluster="Unk.StartWithEquivalent"];
d189 [label="x == 1", span="326-326", cluster="lambda expression", color=green, community=0];
d190 [label="Exit lambda expression", span="326-326", cluster="lambda expression"];
d130 [label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", span="265-265", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()"];
d137 [label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="393-393", cluster="CommandLine.HelpRequestedError.HelpRequestedError()"];
d20 [label="text.Should().NotBeEmpty()", span="43-43", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()"];
d33 [label="text.Should().NotBeEmpty()", span="59-59", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()"];
d196 [label="result.Length.Should().BeGreaterThan(0)", span="343-343", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()"];
d198 [label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="345-345", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()"];
d217 [label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="370-370", cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()"];
d233 [label="result.Length.Should().BeGreaterThan(0)", span="394-394", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)"];
d235 [label="lines.Should().HaveCount(x => x == 1)", span="396-396", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)"];
d236 [label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="397-397", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)"];
d250 [label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="414-414", cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()"];
d269 [label="result.Length.Should().BeGreaterThan(0)", span="439-439", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()"];
d280 [label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="457-457", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()"];
d307 [label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="492-492", cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()"];
d350 [label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="556-556", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()"];
d3 [label="sut.ParseArguments<Options_With_Required_Set_To_True>(new string[] { })", span="23-23", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated()"];
d42 [label="var result = sut.ParseArguments<Simple_Options>(new[] { ''--stringvalue=strvalue'', ''-i1'', ''2'', ''3'' })", span="71-71", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options()"];
d51 [label="var result = sut.ParseArguments<Options_With_Switches>(args)", span="90-90", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name(string, string[])"];
d57 [label="var result = sut.ParseArguments<Options_With_Switches>(new[] { ''-i'', ''-i'', ''-o'', ''file'' })", span="104-104", cluster="CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser()"];
d64 [label="var result =\r\n                sut.ParseArguments<Simple_Options_With_Values>(\r\n                    new[] { ''--stringvalue'', ''astring'', ''--'', ''20'', ''--aaa'', ''-b'', ''--ccc'', ''30'' })", span="125-127", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()"];
d126 [label="var result = sut.ParseArguments<Immutable_Simple_Options>(new[] { ''--stringvalue=strvalue'', ''-i1'', ''2'', ''3'' })", span="257-257", cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()"];
d247 [label="sut.ParseArguments<Options_With_Two_Option_Required_Set_To_True_And_Two_Sets>(new[] { ''--weburl=value.com'', ''--ftpurl=value.org'' })", span="409-409", cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()"];
d321 [label="var result = sut.ParseArguments<Simple_Options>(arguments)", span="514-514", cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.Simple_Options)"];
d366 [label="Parser.Default.ParseArguments<Options_With_SetName_That_Ends_With_Previous_SetName>(new[] { ''--weburl'', ''value'', ''--somethingelse'', ''othervalue'' })\r\n                .WithParsed(opts => expected = opts.WebUrl)\r\n                .WithNotParsed(err => expected = ''changed'')", span="574-576", cluster="CommandLine.Tests.Unit.ParserTests.Invoke_not_parsed_lambda_when_parsed_With_Options_With_SetName_That_Ends_With_Previous_SetName()"];
d1 [label="var writer = new StringWriter()", span="19-19", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated()"];
d16 [label="var writer = new StringWriter()", span="35-35", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()"];
d29 [label="var writer = new StringWriter()", span="51-51", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()"];
d192 [label="var help = new StringWriter()", span="335-335", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()"];
d212 [label="var help = new StringWriter()", span="361-361", cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()"];
d229 [label="var help = new StringWriter()", span="386-386", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)"];
d245 [label="var help = new StringWriter()", span="405-405", cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()"];
d265 [label="var help = new StringWriter()", span="431-431", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()"];
d275 [label="var help = new StringWriter()", span="447-447", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()"];
d302 [label="var help = new StringWriter()", span="482-482", cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()"];
d345 [label="var help = new StringWriter()", span="546-546", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()"];
d2 [label="var sut = new Parser(with => with.HelpWriter = writer)", span="20-20", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated()"];
d17 [label="var sut = new Parser(with => with.HelpWriter = writer)", span="36-36", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()"];
d30 [label="var sut = new Parser(with => with.HelpWriter = writer)", span="52-52", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()"];
d63 [label="var sut = new Parser(with => with.EnableDashDash = true)", span="122-122", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()"];
d73 [label="var sut = new Parser(with => with.EnableDashDash = true)", span="139-139", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()"];
d193 [label="var sut = new Parser(config => config.HelpWriter = help)", span="336-336", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()"];
d213 [label="var sut = new Parser(config => config.HelpWriter = help)", span="362-362", cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()"];
d230 [label="var sut = new Parser(config => config.HelpWriter = help)", span="387-387", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)"];
d246 [label="var sut = new Parser(config => config.HelpWriter = help)", span="406-406", cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()"];
d266 [label="var sut = new Parser(config => config.HelpWriter = help)", span="432-432", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()"];
d276 [label="var sut = new Parser(config => config.HelpWriter = help)", span="448-448", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()"];
d303 [label="var sut = new Parser(config => config.HelpWriter = help)", span="483-483", cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()"];
d320 [label="var sut = new Parser(config => config.IgnoreUnknownArguments = true)", span="511-511", cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.Simple_Options)"];
d333 [label="var sut = new Parser(config => config.IgnoreUnknownArguments = true)", span="530-530", cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.Commit_Verb)"];
d346 [label="var sut = new Parser(config => config.HelpWriter = help)", span="547-547", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()"];
d4 [label="var text = writer.ToString()", span="26-26", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated()"];
d19 [label="var text = writer.ToString()", span="42-42", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()"];
d32 [label="var text = writer.ToString()", span="58-58", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()"];
d195 [label="var result = help.ToString()", span="340-340", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()"];
d215 [label="var result = help.ToString()", span="366-366", cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()"];
d232 [label="var result = help.ToString()", span="391-391", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)"];
d248 [label="var result = help.ToString()", span="410-410", cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()"];
d268 [label="var result = help.ToString()", span="436-436", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()"];
d278 [label="var result = help.ToString()", span="453-453", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()"];
d305 [label="var result = help.ToString()", span="488-488", cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()"];
d348 [label="var result = help.ToString()", span="552-552", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()"];
d41 [label="var sut = new Parser()", span="68-68", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options()"];
d50 [label="var sut = new Parser()", span="87-87", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name(string, string[])"];
d88 [label="var sut = new Parser()", span="168-168", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()"];
d99 [label="var sut = new Parser()", span="193-193", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])"];
d115 [label="var sut = new Parser()", span="236-236", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()"];
d125 [label="var sut = new Parser()", span="254-254", cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()"];
d197 [label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="344-344", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()"];
d216 [label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="369-369", cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()"];
d234 [label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="395-395", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)"];
d249 [label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="413-413", cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()"];
d279 [label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="456-456", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()"];
d306 [label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="491-491", cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()"];
d349 [label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="555-555", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()"];
d21 [label="Exit CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", span="32-32", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()"];
d24 [label="Entry Unk.NotBeEmpty", span="", cluster="Unk.NotBeEmpty"];
d34 [label="Exit CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", span="48-48", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()"];
d199 [label="lines[1].ShouldBeEquivalentTo(''Copyright (c) 2005 - 2015 Giacomo Stelluti Scala'')", span="346-346", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()"];
d218 [label="lines[1].ShouldBeEquivalentTo(''Copyright (c) 2005 - 2015 Giacomo Stelluti Scala'')", span="371-371", cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()"];
d241 [label="Entry lambda expression", span="396-396", cluster="lambda expression"];
d237 [label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", span="383-383", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)"];
d251 [label="lines[1].ShouldBeEquivalentTo(''Copyright (c) 2005 - 2015 Giacomo Stelluti Scala'')", span="415-415", cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()"];
d270 [label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", span="428-428", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()"];
d281 [label="lines[1].ShouldBeEquivalentTo(''Copyright (c) 2005 - 2015 Giacomo Stelluti Scala'')", span="458-458", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()"];
d308 [label="lines[1].ShouldBeEquivalentTo(''Copyright (c) 2005 - 2015 Giacomo Stelluti Scala'')", span="493-493", cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()"];
d351 [label="lines[1].ShouldBeEquivalentTo(''Copyright (c) 2005 - 2015 Giacomo Stelluti Scala'')", span="557-557", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()"];
d43 [label="((Parsed<Simple_Options>)result).Value.ShouldBeEquivalentTo(expectedOptions)", span="74-74", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options()"];
d48 [label="Entry CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name(string, string[])", span="83-83", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name(string, string[])"];
d52 [label="((Parsed<Options_With_Switches>)result).Value.ShouldBeEquivalentTo(expectedOptions)", span="93-93", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name(string, string[])"];
d56 [label="var sut = Parser.Default", span="101-101", cluster="CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser()"];
d58 [label="Assert.IsType<NotParsed<Options_With_Switches>>(result)", span="107-107", cluster="CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser()"];
d65 [label="((Parsed<Simple_Options_With_Values>)result).Value.ShouldBeEquivalentTo(expectedOptions)", span="130-130", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()"];
d127 [label="((Parsed<Immutable_Simple_Options>)result).Value.ShouldBeEquivalentTo(expectedOptions)", span="260-260", cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()"];
d319 [label="Entry CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.Simple_Options)", span="506-506", cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.Simple_Options)"];
d322 [label="result.Tag.ShouldBeEquivalentTo(ParserResultType.Parsed)", span="517-517", cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.Simple_Options)"];
d323 [label="result.WithParsed(opts => opts.ShouldBeEquivalentTo(expected))", span="518-518", cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.Simple_Options)"];
d365 [label="var expected = string.Empty", span="573-573", cluster="CommandLine.Tests.Unit.ParserTests.Invoke_not_parsed_lambda_when_parsed_With_Options_With_SetName_That_Ends_With_Previous_SetName()"];
d367 [label="''changed''.ShouldBeEquivalentTo(expected)", span="578-578", cluster="CommandLine.Tests.Unit.ParserTests.Invoke_not_parsed_lambda_when_parsed_With_Options_With_SetName_That_Ends_With_Previous_SetName()"];
d369 [label="Entry CommandLine.ParserResult<T>.WithParsed<T>(System.Action<T>)", span="20-20", cluster="CommandLine.ParserResult<T>.WithParsed<T>(System.Action<T>)"];
d370 [label="Entry CommandLine.ParserResult<T>.WithNotParsed<T>(System.Action<System.Collections.Generic.IEnumerable<CommandLine.Error>>)", span="58-58", cluster="CommandLine.ParserResult<T>.WithNotParsed<T>(System.Action<System.Collections.Generic.IEnumerable<CommandLine.Error>>)"];
d371 [label="Entry lambda expression", span="575-575", cluster="lambda expression"];
d374 [label="Entry lambda expression", span="576-576", cluster="lambda expression"];
d0 [label="Entry CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated()", span="16-16", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated()"];
d13 [label="with.HelpWriter = writer", span="20-20", cluster="lambda expression"];
d15 [label="Entry CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", span="32-32", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()"];
d26 [label="with.HelpWriter = writer", span="36-36", cluster="lambda expression"];
d28 [label="Entry CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", span="48-48", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()"];
d37 [label="with.HelpWriter = writer", span="52-52", cluster="lambda expression"];
d191 [label="Entry CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", span="332-332", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()"];
d209 [label="config.HelpWriter = help", span="336-336", cluster="lambda expression"];
d211 [label="Entry CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", span="358-358", cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()"];
d226 [label="config.HelpWriter = help", span="362-362", cluster="lambda expression"];
d228 [label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", span="383-383", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)"];
d239 [label="config.HelpWriter = help", span="387-387", cluster="lambda expression"];
d244 [label="Entry CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", span="402-402", cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()"];
d262 [label="config.HelpWriter = help", span="406-406", cluster="lambda expression"];
d264 [label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", span="428-428", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()"];
d272 [label="config.HelpWriter = help", span="432-432", cluster="lambda expression"];
d274 [label="Entry CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", span="444-444", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()"];
d299 [label="config.HelpWriter = help", span="448-448", cluster="lambda expression"];
d301 [label="Entry CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", span="479-479", cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()"];
d317 [label="config.HelpWriter = help", span="483-483", cluster="lambda expression"];
d344 [label="Entry CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", span="543-543", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()"];
d362 [label="config.HelpWriter = help", span="547-547", cluster="lambda expression"];
d18 [label="sut.ParseArguments(new string[] { }, typeof(Add_Verb), typeof(Commit_Verb), typeof(Clone_Verb))", span="39-39", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()"];
d31 [label="sut.ParseArguments<Add_Verb, Commit_Verb, Clone_Verb>(new string[] { })", span="55-55", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()"];
d62 [label="var expectedOptions = new Simple_Options_With_Values\r\n                                  {\r\n                                      StringValue = ''astring'',\r\n                                      LongValue = 20L,\r\n                                      StringSequence = new[] { ''--aaa'', ''-b'', ''--ccc'' },\r\n                                      IntValue = 30\r\n                                  }", span="115-121", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()"];
d69 [label="with.EnableDashDash = true", span="122-122", cluster="lambda expression"];
d72 [label="var expectedOptions = new Add_Verb { Patch = true, FileName = ''--strange-fn'' }", span="138-138", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()"];
d74 [label="var result = sut.ParseArguments(\r\n                new[] { ''add'', ''-p'', ''--'', ''--strange-fn'' },\r\n                typeof(Add_Verb),\r\n                typeof(Commit_Verb),\r\n                typeof(Clone_Verb))", span="142-146", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()"];
d80 [label="with.EnableDashDash = true", span="139-139", cluster="lambda expression"];
d194 [label="sut.ParseArguments<Add_Verb, Commit_Verb, Clone_Verb>(new string[] { })", span="339-339", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()"];
d214 [label="sut.ParseArguments<Add_Verb, Commit_Verb, Clone_Verb>(new[] { ''--help'' })", span="365-365", cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()"];
d231 [label="sut.ParseArguments<Add_Verb, Commit_Verb, Clone_Verb>(new[] { command })", span="390-390", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)"];
d267 [label="sut.ParseArguments<Add_Verb, Commit_Verb, Clone_Verb>(new[] { ''commit'', ''--help'' })", span="435-435", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()"];
d277 [label="sut.ParseArguments<Add_Verb_With_Usage_Attribute, Commit_Verb_With_Usage_Attribute, Clone_Verb_With_Usage_Attribute>(\r\n                new[] { ''clone'', ''--badoption=@bad?value'' })", span="451-452", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()"];
d304 [label="sut.ParseArguments<Add_Verb, Commit_Verb, Clone_Verb>(\r\n                new[] { ''help'', ''clone'', ''extra-arg'' })", span="486-487", cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()"];
d327 [label="config.IgnoreUnknownArguments = true", span="511-511", cluster="lambda expression"];
d332 [label="Entry CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.Commit_Verb)", span="525-525", cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.Commit_Verb)"];
d334 [label="var result = sut.ParseArguments<Add_Verb, Commit_Verb, Clone_Verb>(arguments)", span="533-533", cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.Commit_Verb)"];
d339 [label="config.IgnoreUnknownArguments = true", span="530-530", cluster="lambda expression"];
d347 [label="sut.ParseArguments<Add_Verb, Commit_Verb, Clone_Verb>(\r\n                new[] { ''clone'', ''--bad-arg'', ''--help'' })", span="550-551", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()"];
d5 [label="Assert.True(text.Length > 0)", span="27-27", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated()"];
d40 [label="var expectedOptions = new Simple_Options { StringValue = ''strvalue'', IntSequence = new[] { 1, 2, 3 } }", span="67-67", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options()"];
d49 [label="var expectedOptions = new Options_With_Switches { OutputFile = outputFile }", span="86-86", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name(string, string[])"];
d87 [label="var expectedOptions = new Clone_Verb\r\n                                  {\r\n                                      Quiet = true,\r\n                                      Urls =\r\n                                          new[]\r\n                                          {\r\n                                              ''http://gsscoder.github.com/'',\r\n                                              ''http://yes-to-nooo.github.com/''\r\n                                          }\r\n                                  }", span="158-167", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()"];
d89 [label="var result =\r\n                sut.ParseArguments(\r\n                    new[] { ''clone'', ''-q'', ''http://gsscoder.github.com/'', ''http://yes-to-nooo.github.com/'' },\r\n                    typeof(Add_Verb),\r\n                    typeof(Commit_Verb),\r\n                    typeof(Clone_Verb))", span="171-176", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()"];
d98 [label="var expectedOptions = new Commit_Verb() { Message = message }", span="192-192", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])"];
d100 [label="var result = sut.ParseArguments(\r\n                args,\r\n                typeof(Add_Verb), typeof(Commit_Verb), typeof(Clone_Verb))", span="196-198", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])"];
d114 [label="var expectedOptions = new Clone_Verb\r\n                                  {\r\n                                      Quiet = true,\r\n                                      Urls =\r\n                                          new[]\r\n                                          {\r\n                                              ''http://gsscoder.github.com/'',\r\n                                              ''http://yes-to-nooo.github.com/''\r\n                                          }\r\n                                  }", span="226-235", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()"];
d116 [label="var result =\r\n                sut.ParseArguments<Add_Verb, Commit_Verb, Clone_Verb>(\r\n                    new[] { ''clone'', ''-q'', ''http://gsscoder.github.com/'', ''http://yes-to-nooo.github.com/'' })", span="239-241", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()"];
d124 [label="var expectedOptions = new Immutable_Simple_Options(''strvalue'', new[] { 1, 2, 3 }, default(bool), default(long))", span="253-253", cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()"];
d200 [label="lines[2].ShouldBeEquivalentTo(''ERROR(S):'')", span="347-347", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()"];
d201 [label="lines[3].ShouldBeEquivalentTo(''No verb selected.'')", span="348-348", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()"];
d202 [label="lines[4].ShouldBeEquivalentTo(''add        Add file contents to the index.'')", span="349-349", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()"];
d203 [label="lines[5].ShouldBeEquivalentTo(''commit     Record changes to the repository.'')", span="350-350", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()"];
d204 [label="lines[6].ShouldBeEquivalentTo(''clone      Clone a repository into a new directory.'')", span="351-351", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()"];
d205 [label="lines[7].ShouldBeEquivalentTo(''help       Display more information on a specific command.'')", span="352-352", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()"];
d206 [label="lines[8].ShouldBeEquivalentTo(''version    Display version information.'')", span="353-353", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()"];
d219 [label="lines[2].ShouldBeEquivalentTo(''add        Add file contents to the index.'')", span="372-372", cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()"];
d220 [label="lines[3].ShouldBeEquivalentTo(''commit     Record changes to the repository.'')", span="373-373", cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()"];
d221 [label="lines[4].ShouldBeEquivalentTo(''clone      Clone a repository into a new directory.'')", span="374-374", cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()"];
d222 [label="lines[5].ShouldBeEquivalentTo(''help       Display more information on a specific command.'')", span="375-375", cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()"];
d223 [label="lines[6].ShouldBeEquivalentTo(''version    Display version information.'')", span="376-376", cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()"];
d252 [label="lines[2].ShouldBeEquivalentTo(''ERROR(S):'')", span="416-416", cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()"];
d253 [label="lines[3].ShouldBeEquivalentTo(''Option: 'weburl' is not compatible with: 'ftpurl'.'')", span="417-417", cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()"];
d254 [label="lines[4].ShouldBeEquivalentTo(''Option: 'ftpurl' is not compatible with: 'weburl'.'')", span="418-418", cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()"];
d255 [label="lines[5].ShouldBeEquivalentTo(''--weburl     Required.'')", span="419-419", cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()"];
d256 [label="lines[6].ShouldBeEquivalentTo(''--ftpurl     Required.'')", span="420-420", cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()"];
d257 [label="lines[7].ShouldBeEquivalentTo(''-a'')", span="421-421", cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()"];
d258 [label="lines[8].ShouldBeEquivalentTo(''--help       Display this help screen.'')", span="422-422", cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()"];
d259 [label="lines[9].ShouldBeEquivalentTo(''--version    Display version information.'')", span="423-423", cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()"];
d282 [label="lines[2].ShouldBeEquivalentTo(''ERROR(S):'')", span="459-459", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()"];
d283 [label="lines[3].ShouldBeEquivalentTo(''Option 'badoption' is unknown.'')", span="460-460", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()"];
d284 [label="lines[4].ShouldBeEquivalentTo(''USAGE:'')", span="461-461", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()"];
d285 [label="lines[5].ShouldBeEquivalentTo(''Basic cloning:'')", span="462-462", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()"];
d286 [label="lines[6].ShouldBeEquivalentTo(''git clone https://github.com/gsscoder/csharpx'')", span="463-463", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()"];
d287 [label="lines[7].ShouldBeEquivalentTo(''Cloning quietly:'')", span="464-464", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()"];
d288 [label="lines[8].ShouldBeEquivalentTo(''git clone --quiet https://github.com/gsscoder/railwaysharp'')", span="465-465", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()"];
d289 [label="lines[9].ShouldBeEquivalentTo(''Cloning without hard links:'')", span="466-466", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()"];
d290 [label="lines[10].ShouldBeEquivalentTo(''git clone --no-hardlinks https://github.com/gsscoder/csharpx'')", span="467-467", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()"];
d291 [label="lines[11].ShouldBeEquivalentTo(''--no-hardlinks    Optimize the cloning process from a repository on a local'')", span="468-468", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()"];
d292 [label="lines[12].ShouldBeEquivalentTo(''filesystem by copying files.'')", span="469-469", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()"];
d293 [label="lines[13].ShouldBeEquivalentTo(''-q, --quiet       Suppress summary message.'')", span="470-470", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()"];
d294 [label="lines[14].ShouldBeEquivalentTo(''--help            Display this help screen.'')", span="471-471", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()"];
d295 [label="lines[15].ShouldBeEquivalentTo(''--version         Display version information.'')", span="472-472", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()"];
d296 [label="lines[16].ShouldBeEquivalentTo(''URLS (pos. 0)     A list of url(s) to clone.'')", span="473-473", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()"];
d309 [label="lines[2].ShouldBeEquivalentTo(''--no-hardlinks    Optimize the cloning process from a repository on a local'')", span="494-494", cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()"];
d310 [label="lines[3].ShouldBeEquivalentTo(''filesystem by copying files.'')", span="495-495", cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()"];
d311 [label="lines[4].ShouldBeEquivalentTo(''-q, --quiet       Suppress summary message.'')", span="496-496", cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()"];
d312 [label="lines[5].ShouldBeEquivalentTo(''--help            Display this help screen.'')", span="497-497", cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()"];
d313 [label="lines[6].ShouldBeEquivalentTo(''--version         Display version information.'')", span="498-498", cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()"];
d314 [label="lines[7].ShouldBeEquivalentTo(''value pos. 0'')", span="499-499", cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()"];
d352 [label="lines[2].ShouldBeEquivalentTo(''ERROR(S):'')", span="558-558", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()"];
d353 [label="lines[3].ShouldBeEquivalentTo(''Option 'bad-arg' is unknown.'')", span="559-559", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()"];
d354 [label="lines[4].ShouldBeEquivalentTo(''--no-hardlinks    Optimize the cloning process from a repository on a local'')", span="560-560", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()"];
d355 [label="lines[5].ShouldBeEquivalentTo(''filesystem by copying files.'')", span="561-561", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()"];
d356 [label="lines[6].ShouldBeEquivalentTo(''-q, --quiet       Suppress summary message.'')", span="562-562", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()"];
d357 [label="lines[7].ShouldBeEquivalentTo(''--help            Display this help screen.'')", span="563-563", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()"];
d358 [label="lines[8].ShouldBeEquivalentTo(''--version         Display version information.'')", span="564-564", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()"];
d359 [label="lines[9].ShouldBeEquivalentTo(''value pos. 0'')", span="565-565", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()"];
d47 [label="Entry Unk.ShouldBeEquivalentTo", span="", cluster="Unk.ShouldBeEquivalentTo"];
d243 [label="Exit lambda expression", span="396-396", cluster="lambda expression"];
d242 [label="x == 1", span="396-396", cluster="lambda expression"];
d44 [label="Exit CommandLine.Tests.Unit.ParserTests.Parse_options()", span="64-64", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options()"];
d53 [label="Exit CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name(string, string[])", span="83-83", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name(string, string[])"];
d55 [label="Entry CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser()", span="98-98", cluster="CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser()"];
d59 [label="Exit CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser()", span="98-98", cluster="CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser()"];
d60 [label="Entry Unk.>", span="", cluster="Unk.>"];
d66 [label="Exit CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", span="112-112", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()"];
d128 [label="Exit CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", span="250-250", cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()"];
d324 [label="Exit CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.Simple_Options)", span="506-506", cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.Simple_Options)"];
d330 [label="opts.ShouldBeEquivalentTo(expected)", span="518-518", cluster="lambda expression"];
d325 [label="Entry Unk.WithParsed", span="", cluster="Unk.WithParsed"];
d329 [label="Entry lambda expression", span="518-518", cluster="lambda expression"];
d364 [label="Entry CommandLine.Tests.Unit.ParserTests.Invoke_not_parsed_lambda_when_parsed_With_Options_With_SetName_That_Ends_With_Previous_SetName()", span="571-571", cluster="CommandLine.Tests.Unit.ParserTests.Invoke_not_parsed_lambda_when_parsed_With_Options_With_SetName_That_Ends_With_Previous_SetName()"];
d368 [label="Exit CommandLine.Tests.Unit.ParserTests.Invoke_not_parsed_lambda_when_parsed_With_Options_With_SetName_That_Ends_With_Previous_SetName()", span="571-571", cluster="CommandLine.Tests.Unit.ParserTests.Invoke_not_parsed_lambda_when_parsed_With_Options_With_SetName_That_Ends_With_Previous_SetName()"];
d373 [label="Exit lambda expression", span="575-575", cluster="lambda expression"];
d372 [label="expected = opts.WebUrl", span="575-575", cluster="lambda expression"];
d376 [label="Exit lambda expression", span="576-576", cluster="lambda expression"];
d375 [label="expected = ''changed''", span="576-576", cluster="lambda expression"];
d6 [label="Exit CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated()", span="16-16", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated()"];
d377 [label=writer, span=""];
d12 [label="Entry lambda expression", span="20-20", cluster="lambda expression"];
d14 [label="Exit lambda expression", span="20-20", cluster="lambda expression"];
d378 [label=writer, span=""];
d25 [label="Entry lambda expression", span="36-36", cluster="lambda expression"];
d27 [label="Exit lambda expression", span="36-36", cluster="lambda expression"];
d379 [label=writer, span=""];
d36 [label="Entry lambda expression", span="52-52", cluster="lambda expression"];
d38 [label="Exit lambda expression", span="52-52", cluster="lambda expression"];
d207 [label="Exit CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", span="332-332", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()"];
d384 [label=help, span=""];
d208 [label="Entry lambda expression", span="336-336", cluster="lambda expression"];
d210 [label="Exit lambda expression", span="336-336", cluster="lambda expression"];
d224 [label="Exit CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", span="358-358", cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()"];
d385 [label=help, span=""];
d225 [label="Entry lambda expression", span="362-362", cluster="lambda expression"];
d227 [label="Exit lambda expression", span="362-362", cluster="lambda expression"];
d386 [label=help, span=""];
d238 [label="Entry lambda expression", span="387-387", cluster="lambda expression"];
d240 [label="Exit lambda expression", span="387-387", cluster="lambda expression"];
d260 [label="Exit CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", span="402-402", cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()"];
d387 [label=help, span=""];
d261 [label="Entry lambda expression", span="406-406", cluster="lambda expression"];
d263 [label="Exit lambda expression", span="406-406", cluster="lambda expression"];
d388 [label=help, span=""];
d271 [label="Entry lambda expression", span="432-432", cluster="lambda expression"];
d273 [label="Exit lambda expression", span="432-432", cluster="lambda expression"];
d297 [label="Exit CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", span="444-444", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()"];
d389 [label=help, span=""];
d298 [label="Entry lambda expression", span="448-448", cluster="lambda expression"];
d300 [label="Exit lambda expression", span="448-448", cluster="lambda expression"];
d315 [label="Exit CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", span="479-479", cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()"];
d390 [label=help, span=""];
d316 [label="Entry lambda expression", span="483-483", cluster="lambda expression"];
d318 [label="Exit lambda expression", span="483-483", cluster="lambda expression"];
d360 [label="Exit CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", span="543-543", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()"];
d393 [label=help, span=""];
d361 [label="Entry lambda expression", span="547-547", cluster="lambda expression"];
d363 [label="Exit lambda expression", span="547-547", cluster="lambda expression"];
d22 [label="Entry CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", span="144-144", cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])"];
d35 [label="Entry CommandLine.Parser.ParseArguments<T1, T2, T3>(System.Collections.Generic.IEnumerable<string>)", span="46-46", cluster="CommandLine.Parser.ParseArguments<T1, T2, T3>(System.Collections.Generic.IEnumerable<string>)"];
d61 [label="Entry CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", span="112-112", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()"];
d67 [label="Entry CommandLine.Tests.Fakes.Simple_Options_With_Values.Simple_Options_With_Values()", span="6-6", cluster="CommandLine.Tests.Fakes.Simple_Options_With_Values.Simple_Options_With_Values()"];
d68 [label="Entry lambda expression", span="122-122", cluster="lambda expression"];
d70 [label="Exit lambda expression", span="122-122", cluster="lambda expression"];
d71 [label="Entry CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", span="135-135", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()"];
d78 [label="Entry CommandLine.Tests.Fakes.Add_Verb.Add_Verb()", span="7-7", cluster="CommandLine.Tests.Fakes.Add_Verb.Add_Verb()"];
d76 [label="((Parsed<object>)result).Value.ShouldBeEquivalentTo(expectedOptions, o => o.RespectingRuntimeTypes())", span="150-150", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()"];
d75 [label="Assert.IsType<Add_Verb>(((Parsed<object>)result).Value)", span="149-149", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()"];
d79 [label="Entry lambda expression", span="139-139", cluster="lambda expression"];
d81 [label="Exit lambda expression", span="139-139", cluster="lambda expression"];
d326 [label="Entry lambda expression", span="511-511", cluster="lambda expression"];
d328 [label="Exit lambda expression", span="511-511", cluster="lambda expression"];
d337 [label="Exit CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.Commit_Verb)", span="525-525", cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.Commit_Verb)"];
d336 [label="result.WithParsed(opts => opts.ShouldBeEquivalentTo(expected))", span="537-537", cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.Commit_Verb)"];
d342 [label="opts.ShouldBeEquivalentTo(expected)", span="537-537", cluster="lambda expression"];
d335 [label="result.Tag.ShouldBeEquivalentTo(ParserResultType.Parsed)", span="536-536", cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.Commit_Verb)"];
d338 [label="Entry lambda expression", span="530-530", cluster="lambda expression"];
d340 [label="Exit lambda expression", span="530-530", cluster="lambda expression"];
d11 [label="Entry Unk.True", span="", cluster="Unk.True"];
d39 [label="Entry CommandLine.Tests.Unit.ParserTests.Parse_options()", span="64-64", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options()"];
d45 [label="Entry CommandLine.Tests.Fakes.Simple_Options.Simple_Options()", span="6-6", cluster="CommandLine.Tests.Fakes.Simple_Options.Simple_Options()"];
d54 [label="Entry CommandLine.Tests.Fakes.Options_With_Switches.Options_With_Switches()", span="4-4", cluster="CommandLine.Tests.Fakes.Options_With_Switches.Options_With_Switches()"];
d86 [label="Entry CommandLine.Tests.Unit.ParserTests.Parse_verbs()", span="155-155", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()"];
d93 [label="Entry CommandLine.Tests.Fakes.Clone_Verb.Clone_Verb()", span="36-36", cluster="CommandLine.Tests.Fakes.Clone_Verb.Clone_Verb()"];
d91 [label="((Parsed<object>)result).Value.ShouldBeEquivalentTo(expectedOptions, o => o.RespectingRuntimeTypes())", span="180-180", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()"];
d90 [label="Assert.IsType<Clone_Verb>(((Parsed<object>)result).Value)", span="179-179", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()"];
d97 [label="Entry CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])", span="189-189", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])"];
d104 [label="Entry CommandLine.Tests.Fakes.Commit_Verb.Commit_Verb()", span="22-22", cluster="CommandLine.Tests.Fakes.Commit_Verb.Commit_Verb()"];
d102 [label="((Parsed<object>)result).Value.ShouldBeEquivalentTo(expectedOptions, o => o.RespectingRuntimeTypes())", span="202-202", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])"];
d101 [label="Assert.IsType<Commit_Verb>(((Parsed<object>)result).Value)", span="201-201", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])"];
d113 [label="Entry CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", span="223-223", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()"];
d118 [label="((Parsed<object>)result).Value.ShouldBeEquivalentTo(expectedOptions, o => o.RespectingRuntimeTypes())", span="245-245", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()"];
d117 [label="Assert.IsType<Clone_Verb>(((Parsed<object>)result).Value)", span="244-244", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()"];
d123 [label="Entry CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", span="250-250", cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()"];
d129 [label="Entry CommandLine.Tests.Fakes.Immutable_Simple_Options.Immutable_Simple_Options(string, System.Collections.Generic.IEnumerable<int>, bool, long)", span="13-13", cluster="CommandLine.Tests.Fakes.Immutable_Simple_Options.Immutable_Simple_Options(string, System.Collections.Generic.IEnumerable<int>, bool, long)"];
d111 [label="Assert.IsType<NotParsed<object>>(result)", span="218-218", cluster="CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser_in_verbs_scenario()"];
d391 [label="CommandLine.Tests.Fakes.Simple_Options", span=""];
d331 [label="Exit lambda expression", span="518-518", cluster="lambda expression"];
d110 [label="var result = sut.ParseArguments(\r\n                new[] { ''clone'', ''-q'', ''-q'', ''http://gsscoder.github.com/'', ''http://yes-to-nooo.github.com/'' },\r\n                typeof(Add_Verb), typeof(Commit_Verb), typeof(Clone_Verb))", span="213-215", cluster="CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser_in_verbs_scenario()"];
d77 [label="Exit CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", span="135-135", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()"];
d82 [label="Entry lambda expression", span="150-150", cluster="lambda expression"];
d341 [label="Entry lambda expression", span="537-537", cluster="lambda expression"];
d392 [label="CommandLine.Tests.Fakes.Commit_Verb", span=""];
d343 [label="Exit lambda expression", span="537-537", cluster="lambda expression"];
d92 [label="Exit CommandLine.Tests.Unit.ParserTests.Parse_verbs()", span="155-155", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()"];
d94 [label="Entry lambda expression", span="180-180", cluster="lambda expression"];
d103 [label="Exit CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])", span="189-189", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])"];
d105 [label="Entry lambda expression", span="202-202", cluster="lambda expression"];
d119 [label="Exit CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", span="223-223", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()"];
d120 [label="Entry lambda expression", span="245-245", cluster="lambda expression"];
d112 [label="Exit CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser_in_verbs_scenario()", span="207-207", cluster="CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser_in_verbs_scenario()"];
d109 [label="var sut = Parser.Default", span="210-210", cluster="CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser_in_verbs_scenario()"];
d84 [label="Exit lambda expression", span="150-150", cluster="lambda expression"];
d83 [label="o.RespectingRuntimeTypes()", span="150-150", cluster="lambda expression"];
d96 [label="Exit lambda expression", span="180-180", cluster="lambda expression"];
d95 [label="o.RespectingRuntimeTypes()", span="180-180", cluster="lambda expression"];
d107 [label="Exit lambda expression", span="202-202", cluster="lambda expression"];
d106 [label="o.RespectingRuntimeTypes()", span="202-202", cluster="lambda expression"];
d122 [label="Exit lambda expression", span="245-245", cluster="lambda expression"];
d121 [label="o.RespectingRuntimeTypes()", span="245-245", cluster="lambda expression"];
d108 [label="Entry CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser_in_verbs_scenario()", span="207-207", cluster="CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser_in_verbs_scenario()"];
d85 [label="Entry Unk.RespectingRuntimeTypes", span="", cluster="Unk.RespectingRuntimeTypes"];
m1_12 [label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", span="23-23", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs"];
m1_13 [label="var type =\r\n                conversionType.GetGenericArguments()\r\n                              .SingleOrDefault()\r\n                              .ToMaybe()\r\n                              .FromJust(\r\n                                  new ApplicationException(''Non scalar properties should be sequence of type IEnumerable<T>.''))", span="25-30", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs"];
m1_14 [label="var converted = values.Select(value => ChangeType(value, type, conversionCulture))", span="32-32", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs"];
m1_15 [label="return converted.Any(a => a.MatchNothing())\r\n                ? Maybe.Nothing<object>()\r\n                : Maybe.Just(converted.Select(c => ((Just<object>)c).Value).ToArray(type));", span="34-36", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs"];
m1_16 [label="Exit CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", span="23-23", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs"];
m1_0 [label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="12-12", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="TypeConverter.cs"];
m1_1 [label="values == null", span="14-14", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="TypeConverter.cs"];
m1_3 [label="conversionType == null", span="15-15", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="TypeConverter.cs"];
m1_5 [label="conversionCulture == null", span="16-16", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="TypeConverter.cs"];
m1_7 [label="return scalar\r\n                ? ChangeType(values.Single(), conversionType, conversionCulture)\r\n                : ChangeType(values, conversionType, conversionCulture);", span="18-20", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="TypeConverter.cs"];
m1_2 [label="throw new ArgumentNullException(''values'');", span="14-14", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="TypeConverter.cs"];
m1_4 [label="throw new ArgumentNullException(''conversionType'');", span="15-15", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="TypeConverter.cs"];
m1_6 [label="throw new ArgumentNullException(''conversionCulture'');", span="16-16", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="TypeConverter.cs"];
m1_8 [label="Exit CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="12-12", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="TypeConverter.cs"];
m1_20 [label="Entry System.ApplicationException.ApplicationException(string)", span="0-0", cluster="System.ApplicationException.ApplicationException(string)", file="TypeConverter.cs"];
m1_23 [label="Entry Unk.Any", span="", cluster="Unk.Any", file="TypeConverter.cs"];
m1_21 [label="Entry CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", span="137-137", cluster="CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", file="TypeConverter.cs"];
m1_47 [label="Entry System.Enum.Parse(System.Type, string)", span="0-0", cluster="System.Enum.Parse(System.Type, string)", file="TypeConverter.cs"];
m1_46 [label="Entry CommandLine.Core.TypeConverter.ConvertBoolString(string)", span="70-70", cluster="CommandLine.Core.TypeConverter.ConvertBoolString(string)", file="TypeConverter.cs"];
m1_53 [label="return value.Equals(''true'', StringComparison.OrdinalIgnoreCase);", span="72-72", cluster="CommandLine.Core.TypeConverter.ConvertBoolString(string)", file="TypeConverter.cs"];
m1_54 [label="Exit CommandLine.Core.TypeConverter.ConvertBoolString(string)", span="70-70", cluster="CommandLine.Core.TypeConverter.ConvertBoolString(string)", file="TypeConverter.cs"];
m1_19 [label="Entry T.ToMaybe<T>()", span="82-82", cluster="T.ToMaybe<T>()", file="TypeConverter.cs"];
m1_34 [label="Entry lambda expression", span="36-36", cluster="lambda expression", file="TypeConverter.cs"];
m1_28 [label="ChangeType(value, type, conversionCulture)", span="32-32", cluster="lambda expression", file="TypeConverter.cs"];
m1_27 [label="Entry lambda expression", span="32-32", cluster="lambda expression", file="TypeConverter.cs"];
m1_30 [label="Entry lambda expression", span="34-34", cluster="lambda expression", file="TypeConverter.cs"];
m1_29 [label="Exit lambda expression", span="32-32", cluster="lambda expression", file="TypeConverter.cs"];
m1_31 [label="a.MatchNothing()", span="34-34", cluster="lambda expression", file="TypeConverter.cs"];
m1_32 [label="Exit lambda expression", span="34-34", cluster="lambda expression", file="TypeConverter.cs"];
m1_35 [label="((Just<object>)c).Value", span="36-36", cluster="lambda expression", file="TypeConverter.cs"];
m1_36 [label="Exit lambda expression", span="36-36", cluster="lambda expression", file="TypeConverter.cs"];
m1_52 [label="Entry string.Equals(string, System.StringComparison)", span="0-0", cluster="string.Equals(string, System.StringComparison)", file="TypeConverter.cs"];
m1_48 [label="Entry System.Convert.ChangeType(object, System.Type, System.IFormatProvider)", span="0-0", cluster="System.Convert.ChangeType(object, System.Type, System.IFormatProvider)", file="TypeConverter.cs"];
m1_10 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", file="TypeConverter.cs"];
m1_11 [label="Entry CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", span="39-39", cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs"];
m1_37 [label="return Maybe.Just(\r\n                    MatchBoolString(value)\r\n                        ? ConvertBoolString(value)\r\n                        : conversionType.IsEnum\r\n                            ? Enum.Parse(conversionType, value)\r\n                            : Convert.ChangeType(value, conversionType, conversionCulture));", span="43-48", cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", color=red, community=0, file="TypeConverter.cs"];
m1_38 [label=InvalidCastException, span="50-50", cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs"];
m1_39 [label="return Maybe.Nothing<object>();", span="52-52", cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs"];
m1_40 [label=FormatException, span="54-54", cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs"];
m1_41 [label="return Maybe.Nothing<object>();", span="56-56", cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs"];
m1_42 [label=OverflowException, span="58-58", cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs"];
m1_43 [label="return Maybe.Nothing<object>();", span="60-60", cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs"];
m1_44 [label="Exit CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", span="39-39", cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs"];
m1_49 [label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="71-71", cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="TypeConverter.cs"];
m1_22 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="TypeConverter.cs"];
m1_17 [label="Entry System.Type.GetGenericArguments()", span="0-0", cluster="System.Type.GetGenericArguments()", file="TypeConverter.cs"];
m1_24 [label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="66-66", cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="TypeConverter.cs"];
m1_33 [label="Entry Unk.MatchNothing", span="", cluster="Unk.MatchNothing", file="TypeConverter.cs"];
m1_25 [label="Entry Unk.ToArray", span="", cluster="Unk.ToArray", file="TypeConverter.cs"];
m1_45 [label="Entry CommandLine.Core.TypeConverter.MatchBoolString(string)", span="64-64", cluster="CommandLine.Core.TypeConverter.MatchBoolString(string)", file="TypeConverter.cs"];
m1_50 [label="return value.Equals(''true'', StringComparison.OrdinalIgnoreCase)\r\n                   || value.Equals(''false'', StringComparison.OrdinalIgnoreCase);", span="66-67", cluster="CommandLine.Core.TypeConverter.MatchBoolString(string)", file="TypeConverter.cs"];
m1_51 [label="Exit CommandLine.Core.TypeConverter.MatchBoolString(string)", span="64-64", cluster="CommandLine.Core.TypeConverter.MatchBoolString(string)", file="TypeConverter.cs"];
m1_9 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="TypeConverter.cs"];
m1_18 [label="Entry System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", file="TypeConverter.cs"];
m1_55 [label="System.Globalization.CultureInfo", span="", file="TypeConverter.cs"];
m1_56 [label=type, span="", file="TypeConverter.cs"];
n0 -> n1  [key=0, style=solid];
n0 -> n2  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>"];
n1 -> n2  [key=0, style=solid];
n1 -> n4  [key=0, style=solid];
n2 -> n3  [key=0, style=solid];
n4 -> n5  [key=0, style=solid];
n4 -> n6  [key=2, style=dotted];
n3 -> n5  [key=0, style=solid];
n5 -> n0  [key=0, style=bold, color=blue];
n7 -> n8  [key=0, style=solid];
n7 -> n9  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>"];
n8 -> n9  [key=0, style=solid];
n8 -> n11  [key=0, style=solid];
n9 -> n10  [key=0, style=solid];
n11 -> n12  [key=0, style=solid];
n11 -> n14  [key=2, style=dotted];
n10 -> n12  [key=0, style=solid];
n10 -> n13  [key=2, style=dotted];
n12 -> n7  [key=0, style=bold, color=blue];
d135 -> d136  [key=0, style=solid, color=green];
d135 -> d23  [key=2, style=dotted, color=green];
d135 -> d139  [key=2, style=dotted, color=green];
d135 -> d143  [key=1, style=dashed, color=green, label="lambda expression"];
d131 -> d135  [key=1, style=dashed, color=green, label=expectedError];
d131 -> d144  [key=1, style=dashed, color=green, label=expectedError];
d131 -> d132  [key=0, style=solid];
d131 -> d137  [key=2, style=dotted];
d133 -> d135  [key=1, style=dashed, color=green, label=result];
d133 -> d134  [key=0, style=solid, color=green];
d133 -> d9  [key=2, style=dotted, color=green];
d134 -> d135  [key=0, style=solid, color=green];
d134 -> d23  [key=2, style=dotted, color=green];
d134 -> d138  [key=2, style=dotted, color=green];
d134 -> d140  [key=1, style=dashed, color=green, label="lambda expression"];
d136 -> d130  [key=0, style=bold, color=blue];
d143 -> d144  [key=0, style=solid, color=green];
d144 -> d145  [key=0, style=solid, color=green];
d144 -> d146  [key=2, style=dotted, color=green];
d380 -> d144  [key=1, style=dashed, color=green, label=expectedError];
d145 -> d143  [key=0, style=bold, color=blue];
d132 -> d133  [key=0, style=solid, color=green];
d132 -> d46  [key=2, style=dotted];
d140 -> d141  [key=0, style=solid, color=green];
d141 -> d142  [key=0, style=solid, color=green];
d142 -> d140  [key=0, style=bold, color=blue];
d148 -> d149  [key=0, style=solid, color=green];
d148 -> d7  [key=2, style=dotted, color=green];
d148 -> d156  [key=1, style=dashed, color=green, label=help];
d148 -> d151  [key=1, style=dashed, color=green, label=help];
d147 -> d148  [key=0, style=solid, color=green];
d149 -> d150  [key=0, style=solid, color=green];
d149 -> d8  [key=2, style=dotted, color=green];
d149 -> d156  [key=1, style=dashed, color=green, label="CommandLine.ParserSettings"];
d156 -> d157  [key=0, style=solid, color=green];
d151 -> d152  [key=0, style=solid, color=green];
d151 -> d10  [key=2, style=dotted, color=green];
d150 -> d151  [key=0, style=solid, color=green];
d150 -> d9  [key=2, style=dotted, color=green];
d381 -> d156  [key=1, style=dashed, color=green, label=help];
d155 -> d156  [key=0, style=solid, color=green];
d157 -> d155  [key=0, style=bold, color=blue];
d152 -> d153  [key=0, style=solid, color=green];
d152 -> d23  [key=2, style=dotted, color=green];
d152 -> d154  [key=2, style=dotted, color=green];
d153 -> d147  [key=0, style=bold, color=blue];
d159 -> d160  [key=0, style=solid, color=green];
d159 -> d165  [key=2, style=dotted, color=green];
d159 -> d163  [key=1, style=dashed, color=green, label=expectedError];
d159 -> d170  [key=1, style=dashed, color=green, label=expectedError];
d158 -> d159  [key=0, style=solid, color=green];
d160 -> d161  [key=0, style=solid, color=green];
d160 -> d46  [key=2, style=dotted, color=green];
d163 -> d164  [key=0, style=solid, color=green];
d163 -> d23  [key=2, style=dotted, color=green];
d163 -> d139  [key=2, style=dotted, color=green];
d163 -> d169  [key=1, style=dashed, color=green, label="lambda expression"];
d170 -> d171  [key=0, style=solid, color=green];
d170 -> d146  [key=2, style=dotted, color=green];
d161 -> d163  [key=1, style=dashed, color=green, label=result];
d161 -> d162  [key=0, style=solid, color=green];
d161 -> d9  [key=2, style=dotted, color=green];
d162 -> d163  [key=0, style=solid, color=green];
d162 -> d23  [key=2, style=dotted, color=green];
d162 -> d138  [key=2, style=dotted, color=green];
d162 -> d166  [key=1, style=dashed, color=green, label="lambda expression"];
d164 -> d158  [key=0, style=bold, color=blue];
d169 -> d170  [key=0, style=solid, color=green];
d382 -> d170  [key=1, style=dashed, color=green, label=expectedError];
d171 -> d169  [key=0, style=bold, color=blue];
d166 -> d167  [key=0, style=solid, color=green];
d167 -> d168  [key=0, style=solid, color=green];
d168 -> d166  [key=0, style=bold, color=blue];
d173 -> d174  [key=0, style=solid, color=green];
d173 -> d7  [key=2, style=dotted, color=green];
d173 -> d186  [key=1, style=dashed, color=green, label=help];
d173 -> d176  [key=1, style=dashed, color=green, label=help];
d172 -> d173  [key=0, style=solid, color=green];
d174 -> d175  [key=0, style=solid, color=green];
d174 -> d8  [key=2, style=dotted, color=green];
d174 -> d186  [key=1, style=dashed, color=green, label="CommandLine.ParserSettings"];
d186 -> d187  [key=0, style=solid, color=green];
d176 -> d177  [key=0, style=solid, color=green];
d176 -> d10  [key=2, style=dotted, color=green];
d176 -> d178  [key=1, style=dashed, color=green, label=result];
d175 -> d176  [key=0, style=solid, color=green];
d175 -> d9  [key=2, style=dotted, color=green];
d383 -> d186  [key=1, style=dashed, color=green, label=help];
d185 -> d186  [key=0, style=solid, color=green];
d187 -> d185  [key=0, style=bold, color=blue];
d177 -> d178  [key=0, style=solid, color=green];
d177 -> d23  [key=2, style=dotted, color=green];
d177 -> d154  [key=2, style=dotted, color=green];
d178 -> d179  [key=0, style=solid, color=green];
d178 -> d182  [key=2, style=dotted, color=green];
d178 -> d183  [key=2, style=dotted, color=green];
d178 -> d180  [key=1, style=dashed, color=green, label=lines];
d179 -> d180  [key=0, style=solid, color=green];
d179 -> d23  [key=2, style=dotted, color=green];
d179 -> d138  [key=2, style=dotted, color=green];
d179 -> d188  [key=1, style=dashed, color=green, label="lambda expression"];
d180 -> d181  [key=0, style=solid, color=green];
d180 -> d23  [key=2, style=dotted, color=green];
d180 -> d184  [key=2, style=dotted, color=green];
d188 -> d189  [key=0, style=solid, color=green];
d181 -> d172  [key=0, style=bold, color=blue];
d189 -> d190  [key=0, style=solid, color=green];
d190 -> d188  [key=0, style=bold, color=blue];
d130 -> d131  [key=0, style=solid];
d20 -> d23  [key=2, style=dotted];
d20 -> d21  [key=0, style=solid];
d20 -> d24  [key=2, style=dotted];
d33 -> d23  [key=2, style=dotted];
d33 -> d34  [key=0, style=solid];
d33 -> d24  [key=2, style=dotted];
d196 -> d23  [key=2, style=dotted];
d196 -> d154  [key=2, style=dotted];
d196 -> d197  [key=0, style=solid];
d198 -> d23  [key=2, style=dotted];
d198 -> d184  [key=2, style=dotted];
d198 -> d199  [key=0, style=solid];
d217 -> d23  [key=2, style=dotted];
d217 -> d184  [key=2, style=dotted];
d217 -> d218  [key=0, style=solid];
d233 -> d23  [key=2, style=dotted];
d233 -> d154  [key=2, style=dotted];
d233 -> d234  [key=0, style=solid];
d235 -> d23  [key=2, style=dotted];
d235 -> d138  [key=2, style=dotted];
d235 -> d236  [key=0, style=solid];
d235 -> d241  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d236 -> d23  [key=2, style=dotted];
d236 -> d184  [key=2, style=dotted];
d236 -> d237  [key=0, style=solid];
d250 -> d23  [key=2, style=dotted];
d250 -> d184  [key=2, style=dotted];
d250 -> d251  [key=0, style=solid];
d269 -> d23  [key=2, style=dotted];
d269 -> d154  [key=2, style=dotted];
d269 -> d270  [key=0, style=solid];
d280 -> d23  [key=2, style=dotted];
d280 -> d184  [key=2, style=dotted];
d280 -> d281  [key=0, style=solid];
d307 -> d23  [key=2, style=dotted];
d307 -> d184  [key=2, style=dotted];
d307 -> d308  [key=0, style=solid];
d350 -> d23  [key=2, style=dotted];
d350 -> d184  [key=2, style=dotted];
d350 -> d351  [key=0, style=solid];
d3 -> d9  [key=2, style=dotted];
d3 -> d4  [key=0, style=solid];
d42 -> d9  [key=2, style=dotted];
d42 -> d43  [key=0, style=solid];
d51 -> d9  [key=2, style=dotted];
d51 -> d52  [key=0, style=solid];
d57 -> d9  [key=2, style=dotted];
d57 -> d58  [key=0, style=solid];
d64 -> d9  [key=2, style=dotted];
d64 -> d65  [key=0, style=solid];
d126 -> d9  [key=2, style=dotted];
d126 -> d127  [key=0, style=solid];
d247 -> d9  [key=2, style=dotted];
d247 -> d248  [key=0, style=solid];
d321 -> d9  [key=2, style=dotted];
d321 -> d322  [key=0, style=solid];
d321 -> d323  [key=1, style=dashed, color=darkseagreen4, label=result];
d366 -> d9  [key=2, style=dotted];
d366 -> d367  [key=0, style=solid];
d366 -> d369  [key=2, style=dotted];
d366 -> d370  [key=2, style=dotted];
d366 -> d371  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d366 -> d374  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d1 -> d7  [key=2, style=dotted];
d1 -> d2  [key=0, style=solid];
d1 -> d13  [key=1, style=dashed, color=darkseagreen4, label=writer];
d1 -> d4  [key=1, style=dashed, color=darkseagreen4, label=writer];
d16 -> d7  [key=2, style=dotted];
d16 -> d17  [key=0, style=solid];
d16 -> d26  [key=1, style=dashed, color=darkseagreen4, label=writer];
d16 -> d19  [key=1, style=dashed, color=darkseagreen4, label=writer];
d29 -> d7  [key=2, style=dotted];
d29 -> d30  [key=0, style=solid];
d29 -> d37  [key=1, style=dashed, color=darkseagreen4, label=writer];
d29 -> d32  [key=1, style=dashed, color=darkseagreen4, label=writer];
d192 -> d7  [key=2, style=dotted];
d192 -> d193  [key=0, style=solid];
d192 -> d209  [key=1, style=dashed, color=darkseagreen4, label=help];
d192 -> d195  [key=1, style=dashed, color=darkseagreen4, label=help];
d212 -> d7  [key=2, style=dotted];
d212 -> d213  [key=0, style=solid];
d212 -> d226  [key=1, style=dashed, color=darkseagreen4, label=help];
d212 -> d215  [key=1, style=dashed, color=darkseagreen4, label=help];
d229 -> d7  [key=2, style=dotted];
d229 -> d230  [key=0, style=solid];
d229 -> d239  [key=1, style=dashed, color=darkseagreen4, label=help];
d229 -> d232  [key=1, style=dashed, color=darkseagreen4, label=help];
d245 -> d7  [key=2, style=dotted];
d245 -> d246  [key=0, style=solid];
d245 -> d262  [key=1, style=dashed, color=darkseagreen4, label=help];
d245 -> d248  [key=1, style=dashed, color=darkseagreen4, label=help];
d265 -> d7  [key=2, style=dotted];
d265 -> d266  [key=0, style=solid];
d265 -> d272  [key=1, style=dashed, color=darkseagreen4, label=help];
d265 -> d268  [key=1, style=dashed, color=darkseagreen4, label=help];
d275 -> d7  [key=2, style=dotted];
d275 -> d276  [key=0, style=solid];
d275 -> d299  [key=1, style=dashed, color=darkseagreen4, label=help];
d275 -> d278  [key=1, style=dashed, color=darkseagreen4, label=help];
d302 -> d7  [key=2, style=dotted];
d302 -> d303  [key=0, style=solid];
d302 -> d317  [key=1, style=dashed, color=darkseagreen4, label=help];
d302 -> d305  [key=1, style=dashed, color=darkseagreen4, label=help];
d345 -> d7  [key=2, style=dotted];
d345 -> d346  [key=0, style=solid];
d345 -> d362  [key=1, style=dashed, color=darkseagreen4, label=help];
d345 -> d348  [key=1, style=dashed, color=darkseagreen4, label=help];
d2 -> d8  [key=2, style=dotted];
d2 -> d3  [key=0, style=solid];
d2 -> d13  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
d17 -> d8  [key=2, style=dotted];
d17 -> d18  [key=0, style=solid];
d17 -> d26  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
d30 -> d8  [key=2, style=dotted];
d30 -> d31  [key=0, style=solid];
d30 -> d37  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
d63 -> d8  [key=2, style=dotted];
d63 -> d64  [key=0, style=solid];
d63 -> d69  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
d73 -> d8  [key=2, style=dotted];
d73 -> d74  [key=0, style=solid];
d73 -> d80  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
d193 -> d8  [key=2, style=dotted];
d193 -> d194  [key=0, style=solid];
d193 -> d209  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
d213 -> d8  [key=2, style=dotted];
d213 -> d214  [key=0, style=solid];
d213 -> d226  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
d230 -> d8  [key=2, style=dotted];
d230 -> d231  [key=0, style=solid];
d230 -> d239  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
d246 -> d8  [key=2, style=dotted];
d246 -> d247  [key=0, style=solid];
d246 -> d262  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
d266 -> d8  [key=2, style=dotted];
d266 -> d267  [key=0, style=solid];
d266 -> d272  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
d276 -> d8  [key=2, style=dotted];
d276 -> d277  [key=0, style=solid];
d276 -> d299  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
d303 -> d8  [key=2, style=dotted];
d303 -> d304  [key=0, style=solid];
d303 -> d317  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
d320 -> d8  [key=2, style=dotted];
d320 -> d321  [key=0, style=solid];
d320 -> d327  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
d333 -> d8  [key=2, style=dotted];
d333 -> d334  [key=0, style=solid];
d333 -> d339  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
d346 -> d8  [key=2, style=dotted];
d346 -> d347  [key=0, style=solid];
d346 -> d362  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
d4 -> d10  [key=2, style=dotted];
d4 -> d5  [key=0, style=solid];
d19 -> d10  [key=2, style=dotted];
d19 -> d20  [key=0, style=solid];
d32 -> d10  [key=2, style=dotted];
d32 -> d33  [key=0, style=solid];
d195 -> d10  [key=2, style=dotted];
d195 -> d196  [key=0, style=solid];
d195 -> d197  [key=1, style=dashed, color=darkseagreen4, label=result];
d215 -> d10  [key=2, style=dotted];
d215 -> d216  [key=0, style=solid];
d232 -> d10  [key=2, style=dotted];
d232 -> d233  [key=0, style=solid];
d232 -> d234  [key=1, style=dashed, color=darkseagreen4, label=result];
d248 -> d10  [key=2, style=dotted];
d248 -> d249  [key=0, style=solid];
d268 -> d10  [key=2, style=dotted];
d268 -> d269  [key=0, style=solid];
d278 -> d10  [key=2, style=dotted];
d278 -> d279  [key=0, style=solid];
d305 -> d10  [key=2, style=dotted];
d305 -> d306  [key=0, style=solid];
d348 -> d10  [key=2, style=dotted];
d348 -> d349  [key=0, style=solid];
d41 -> d46  [key=2, style=dotted];
d41 -> d42  [key=0, style=solid];
d50 -> d46  [key=2, style=dotted];
d50 -> d51  [key=0, style=solid];
d88 -> d46  [key=2, style=dotted];
d88 -> d89  [key=0, style=solid];
d99 -> d46  [key=2, style=dotted];
d99 -> d100  [key=0, style=solid];
d115 -> d46  [key=2, style=dotted];
d115 -> d116  [key=0, style=solid];
d125 -> d46  [key=2, style=dotted];
d125 -> d126  [key=0, style=solid];
d197 -> d182  [key=2, style=dotted];
d197 -> d183  [key=2, style=dotted];
d197 -> d198  [key=0, style=solid];
d197 -> d199  [key=1, style=dashed, color=darkseagreen4, label=lines];
d197 -> d200  [key=1, style=dashed, color=darkseagreen4, label=lines];
d197 -> d201  [key=1, style=dashed, color=darkseagreen4, label=lines];
d197 -> d202  [key=1, style=dashed, color=darkseagreen4, label=lines];
d197 -> d203  [key=1, style=dashed, color=darkseagreen4, label=lines];
d197 -> d204  [key=1, style=dashed, color=darkseagreen4, label=lines];
d197 -> d205  [key=1, style=dashed, color=darkseagreen4, label=lines];
d197 -> d206  [key=1, style=dashed, color=darkseagreen4, label=lines];
d216 -> d182  [key=2, style=dotted];
d216 -> d183  [key=2, style=dotted];
d216 -> d217  [key=0, style=solid];
d216 -> d218  [key=1, style=dashed, color=darkseagreen4, label=lines];
d216 -> d219  [key=1, style=dashed, color=darkseagreen4, label=lines];
d216 -> d220  [key=1, style=dashed, color=darkseagreen4, label=lines];
d216 -> d221  [key=1, style=dashed, color=darkseagreen4, label=lines];
d216 -> d222  [key=1, style=dashed, color=darkseagreen4, label=lines];
d216 -> d223  [key=1, style=dashed, color=darkseagreen4, label=lines];
d234 -> d182  [key=2, style=dotted];
d234 -> d183  [key=2, style=dotted];
d234 -> d235  [key=0, style=solid];
d234 -> d236  [key=1, style=dashed, color=darkseagreen4, label=lines];
d249 -> d182  [key=2, style=dotted];
d249 -> d183  [key=2, style=dotted];
d249 -> d250  [key=0, style=solid];
d249 -> d251  [key=1, style=dashed, color=darkseagreen4, label=lines];
d249 -> d252  [key=1, style=dashed, color=darkseagreen4, label=lines];
d249 -> d253  [key=1, style=dashed, color=darkseagreen4, label=lines];
d249 -> d254  [key=1, style=dashed, color=darkseagreen4, label=lines];
d249 -> d255  [key=1, style=dashed, color=darkseagreen4, label=lines];
d249 -> d256  [key=1, style=dashed, color=darkseagreen4, label=lines];
d249 -> d257  [key=1, style=dashed, color=darkseagreen4, label=lines];
d249 -> d258  [key=1, style=dashed, color=darkseagreen4, label=lines];
d249 -> d259  [key=1, style=dashed, color=darkseagreen4, label=lines];
d279 -> d182  [key=2, style=dotted];
d279 -> d183  [key=2, style=dotted];
d279 -> d280  [key=0, style=solid];
d279 -> d281  [key=1, style=dashed, color=darkseagreen4, label=lines];
d279 -> d282  [key=1, style=dashed, color=darkseagreen4, label=lines];
d279 -> d283  [key=1, style=dashed, color=darkseagreen4, label=lines];
d279 -> d284  [key=1, style=dashed, color=darkseagreen4, label=lines];
d279 -> d285  [key=1, style=dashed, color=darkseagreen4, label=lines];
d279 -> d286  [key=1, style=dashed, color=darkseagreen4, label=lines];
d279 -> d287  [key=1, style=dashed, color=darkseagreen4, label=lines];
d279 -> d288  [key=1, style=dashed, color=darkseagreen4, label=lines];
d279 -> d289  [key=1, style=dashed, color=darkseagreen4, label=lines];
d279 -> d290  [key=1, style=dashed, color=darkseagreen4, label=lines];
d279 -> d291  [key=1, style=dashed, color=darkseagreen4, label=lines];
d279 -> d292  [key=1, style=dashed, color=darkseagreen4, label=lines];
d279 -> d293  [key=1, style=dashed, color=darkseagreen4, label=lines];
d279 -> d294  [key=1, style=dashed, color=darkseagreen4, label=lines];
d279 -> d295  [key=1, style=dashed, color=darkseagreen4, label=lines];
d279 -> d296  [key=1, style=dashed, color=darkseagreen4, label=lines];
d306 -> d182  [key=2, style=dotted];
d306 -> d183  [key=2, style=dotted];
d306 -> d307  [key=0, style=solid];
d306 -> d308  [key=1, style=dashed, color=darkseagreen4, label=lines];
d306 -> d309  [key=1, style=dashed, color=darkseagreen4, label=lines];
d306 -> d310  [key=1, style=dashed, color=darkseagreen4, label=lines];
d306 -> d311  [key=1, style=dashed, color=darkseagreen4, label=lines];
d306 -> d312  [key=1, style=dashed, color=darkseagreen4, label=lines];
d306 -> d313  [key=1, style=dashed, color=darkseagreen4, label=lines];
d306 -> d314  [key=1, style=dashed, color=darkseagreen4, label=lines];
d349 -> d182  [key=2, style=dotted];
d349 -> d183  [key=2, style=dotted];
d349 -> d350  [key=0, style=solid];
d349 -> d351  [key=1, style=dashed, color=darkseagreen4, label=lines];
d349 -> d352  [key=1, style=dashed, color=darkseagreen4, label=lines];
d349 -> d353  [key=1, style=dashed, color=darkseagreen4, label=lines];
d349 -> d354  [key=1, style=dashed, color=darkseagreen4, label=lines];
d349 -> d355  [key=1, style=dashed, color=darkseagreen4, label=lines];
d349 -> d356  [key=1, style=dashed, color=darkseagreen4, label=lines];
d349 -> d357  [key=1, style=dashed, color=darkseagreen4, label=lines];
d349 -> d358  [key=1, style=dashed, color=darkseagreen4, label=lines];
d349 -> d359  [key=1, style=dashed, color=darkseagreen4, label=lines];
d21 -> d15  [key=0, style=bold, color=blue];
d34 -> d28  [key=0, style=bold, color=blue];
d199 -> d200  [key=0, style=solid];
d199 -> d47  [key=2, style=dotted];
d218 -> d219  [key=0, style=solid];
d218 -> d47  [key=2, style=dotted];
d241 -> d242  [key=0, style=solid];
d237 -> d228  [key=0, style=bold, color=blue];
d251 -> d252  [key=0, style=solid];
d251 -> d47  [key=2, style=dotted];
d270 -> d264  [key=0, style=bold, color=blue];
d281 -> d282  [key=0, style=solid];
d281 -> d47  [key=2, style=dotted];
d308 -> d309  [key=0, style=solid];
d308 -> d47  [key=2, style=dotted];
d351 -> d352  [key=0, style=solid];
d351 -> d47  [key=2, style=dotted];
d43 -> d44  [key=0, style=solid];
d43 -> d47  [key=2, style=dotted];
d48 -> d51  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
d48 -> d49  [key=0, style=solid];
d52 -> d53  [key=0, style=solid];
d52 -> d47  [key=2, style=dotted];
d56 -> d57  [key=0, style=solid];
d58 -> d59  [key=0, style=solid];
d58 -> d60  [key=2, style=dotted];
d65 -> d66  [key=0, style=solid];
d65 -> d47  [key=2, style=dotted];
d127 -> d128  [key=0, style=solid];
d127 -> d47  [key=2, style=dotted];
d319 -> d321  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
d319 -> d320  [key=0, style=solid];
d319 -> d323  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Simple_Options"];
d319 -> d330  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Simple_Options"];
d322 -> d323  [key=0, style=solid];
d322 -> d47  [key=2, style=dotted];
d323 -> d324  [key=0, style=solid];
d323 -> d325  [key=2, style=dotted];
d323 -> d329  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d365 -> d366  [key=0, style=solid];
d367 -> d368  [key=0, style=solid];
d367 -> d47  [key=2, style=dotted];
d371 -> d372  [key=0, style=solid];
d374 -> d375  [key=0, style=solid];
d0 -> d1  [key=0, style=solid];
d13 -> d14  [key=0, style=solid];
d15 -> d16  [key=0, style=solid];
d26 -> d27  [key=0, style=solid];
d28 -> d29  [key=0, style=solid];
d37 -> d38  [key=0, style=solid];
d191 -> d192  [key=0, style=solid];
d209 -> d210  [key=0, style=solid];
d211 -> d212  [key=0, style=solid];
d226 -> d227  [key=0, style=solid];
d228 -> d229  [key=0, style=solid];
d228 -> d231  [key=1, style=dashed, color=darkseagreen4, label=string];
d239 -> d240  [key=0, style=solid];
d244 -> d245  [key=0, style=solid];
d262 -> d263  [key=0, style=solid];
d264 -> d265  [key=0, style=solid];
d272 -> d273  [key=0, style=solid];
d274 -> d275  [key=0, style=solid];
d299 -> d300  [key=0, style=solid];
d301 -> d302  [key=0, style=solid];
d317 -> d318  [key=0, style=solid];
d344 -> d345  [key=0, style=solid];
d362 -> d363  [key=0, style=solid];
d18 -> d19  [key=0, style=solid];
d18 -> d22  [key=2, style=dotted];
d31 -> d32  [key=0, style=solid];
d31 -> d35  [key=2, style=dotted];
d62 -> d63  [key=0, style=solid];
d62 -> d65  [key=1, style=dashed, color=darkseagreen4, label=expectedOptions];
d62 -> d67  [key=2, style=dotted];
d69 -> d70  [key=0, style=solid];
d72 -> d73  [key=0, style=solid];
d72 -> d78  [key=2, style=dotted];
d72 -> d76  [key=1, style=dashed, color=darkseagreen4, label=expectedOptions];
d74 -> d75  [key=0, style=solid];
d74 -> d22  [key=2, style=dotted];
d74 -> d76  [key=1, style=dashed, color=darkseagreen4, label=result];
d80 -> d81  [key=0, style=solid];
d194 -> d195  [key=0, style=solid];
d194 -> d35  [key=2, style=dotted];
d214 -> d215  [key=0, style=solid];
d214 -> d35  [key=2, style=dotted];
d231 -> d232  [key=0, style=solid];
d231 -> d35  [key=2, style=dotted];
d267 -> d268  [key=0, style=solid];
d267 -> d35  [key=2, style=dotted];
d277 -> d278  [key=0, style=solid];
d277 -> d35  [key=2, style=dotted];
d304 -> d305  [key=0, style=solid];
d304 -> d35  [key=2, style=dotted];
d327 -> d328  [key=0, style=solid];
d332 -> d333  [key=0, style=solid];
d332 -> d334  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
d332 -> d336  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Commit_Verb"];
d332 -> d342  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Commit_Verb"];
d334 -> d335  [key=0, style=solid];
d334 -> d35  [key=2, style=dotted];
d334 -> d336  [key=1, style=dashed, color=darkseagreen4, label=result];
d339 -> d340  [key=0, style=solid];
d347 -> d348  [key=0, style=solid];
d347 -> d35  [key=2, style=dotted];
d5 -> d6  [key=0, style=solid];
d5 -> d11  [key=2, style=dotted];
d40 -> d41  [key=0, style=solid];
d40 -> d43  [key=1, style=dashed, color=darkseagreen4, label=expectedOptions];
d40 -> d45  [key=2, style=dotted];
d49 -> d50  [key=0, style=solid];
d49 -> d52  [key=1, style=dashed, color=darkseagreen4, label=expectedOptions];
d49 -> d54  [key=2, style=dotted];
d87 -> d88  [key=0, style=solid];
d87 -> d93  [key=2, style=dotted];
d87 -> d91  [key=1, style=dashed, color=darkseagreen4, label=expectedOptions];
d89 -> d90  [key=0, style=solid];
d89 -> d22  [key=2, style=dotted];
d89 -> d91  [key=1, style=dashed, color=darkseagreen4, label=result];
d98 -> d99  [key=0, style=solid];
d98 -> d104  [key=2, style=dotted];
d98 -> d102  [key=1, style=dashed, color=darkseagreen4, label=expectedOptions];
d100 -> d101  [key=0, style=solid];
d100 -> d22  [key=2, style=dotted];
d100 -> d102  [key=1, style=dashed, color=darkseagreen4, label=result];
d114 -> d115  [key=0, style=solid];
d114 -> d93  [key=2, style=dotted];
d114 -> d118  [key=1, style=dashed, color=darkseagreen4, label=expectedOptions];
d116 -> d117  [key=0, style=solid];
d116 -> d35  [key=2, style=dotted];
d116 -> d118  [key=1, style=dashed, color=darkseagreen4, label=result];
d124 -> d125  [key=0, style=solid];
d124 -> d127  [key=1, style=dashed, color=darkseagreen4, label=expectedOptions];
d124 -> d129  [key=2, style=dotted];
d200 -> d201  [key=0, style=solid];
d200 -> d47  [key=2, style=dotted];
d201 -> d202  [key=0, style=solid];
d201 -> d47  [key=2, style=dotted];
d202 -> d203  [key=0, style=solid];
d202 -> d47  [key=2, style=dotted];
d203 -> d204  [key=0, style=solid];
d203 -> d47  [key=2, style=dotted];
d204 -> d205  [key=0, style=solid];
d204 -> d47  [key=2, style=dotted];
d205 -> d206  [key=0, style=solid];
d205 -> d47  [key=2, style=dotted];
d206 -> d207  [key=0, style=solid];
d206 -> d47  [key=2, style=dotted];
d219 -> d220  [key=0, style=solid];
d219 -> d47  [key=2, style=dotted];
d220 -> d221  [key=0, style=solid];
d220 -> d47  [key=2, style=dotted];
d221 -> d222  [key=0, style=solid];
d221 -> d47  [key=2, style=dotted];
d222 -> d223  [key=0, style=solid];
d222 -> d47  [key=2, style=dotted];
d223 -> d224  [key=0, style=solid];
d223 -> d47  [key=2, style=dotted];
d252 -> d253  [key=0, style=solid];
d252 -> d47  [key=2, style=dotted];
d253 -> d254  [key=0, style=solid];
d253 -> d47  [key=2, style=dotted];
d254 -> d255  [key=0, style=solid];
d254 -> d47  [key=2, style=dotted];
d255 -> d256  [key=0, style=solid];
d255 -> d47  [key=2, style=dotted];
d256 -> d257  [key=0, style=solid];
d256 -> d47  [key=2, style=dotted];
d257 -> d258  [key=0, style=solid];
d257 -> d47  [key=2, style=dotted];
d258 -> d259  [key=0, style=solid];
d258 -> d47  [key=2, style=dotted];
d259 -> d260  [key=0, style=solid];
d259 -> d47  [key=2, style=dotted];
d282 -> d283  [key=0, style=solid];
d282 -> d47  [key=2, style=dotted];
d283 -> d284  [key=0, style=solid];
d283 -> d47  [key=2, style=dotted];
d284 -> d285  [key=0, style=solid];
d284 -> d47  [key=2, style=dotted];
d285 -> d286  [key=0, style=solid];
d285 -> d47  [key=2, style=dotted];
d286 -> d287  [key=0, style=solid];
d286 -> d47  [key=2, style=dotted];
d287 -> d288  [key=0, style=solid];
d287 -> d47  [key=2, style=dotted];
d288 -> d289  [key=0, style=solid];
d288 -> d47  [key=2, style=dotted];
d289 -> d290  [key=0, style=solid];
d289 -> d47  [key=2, style=dotted];
d290 -> d291  [key=0, style=solid];
d290 -> d47  [key=2, style=dotted];
d291 -> d292  [key=0, style=solid];
d291 -> d47  [key=2, style=dotted];
d292 -> d293  [key=0, style=solid];
d292 -> d47  [key=2, style=dotted];
d293 -> d294  [key=0, style=solid];
d293 -> d47  [key=2, style=dotted];
d294 -> d295  [key=0, style=solid];
d294 -> d47  [key=2, style=dotted];
d295 -> d296  [key=0, style=solid];
d295 -> d47  [key=2, style=dotted];
d296 -> d297  [key=0, style=solid];
d296 -> d47  [key=2, style=dotted];
d309 -> d310  [key=0, style=solid];
d309 -> d47  [key=2, style=dotted];
d310 -> d311  [key=0, style=solid];
d310 -> d47  [key=2, style=dotted];
d311 -> d312  [key=0, style=solid];
d311 -> d47  [key=2, style=dotted];
d312 -> d313  [key=0, style=solid];
d312 -> d47  [key=2, style=dotted];
d313 -> d314  [key=0, style=solid];
d313 -> d47  [key=2, style=dotted];
d314 -> d315  [key=0, style=solid];
d314 -> d47  [key=2, style=dotted];
d352 -> d353  [key=0, style=solid];
d352 -> d47  [key=2, style=dotted];
d353 -> d354  [key=0, style=solid];
d353 -> d47  [key=2, style=dotted];
d354 -> d355  [key=0, style=solid];
d354 -> d47  [key=2, style=dotted];
d355 -> d356  [key=0, style=solid];
d355 -> d47  [key=2, style=dotted];
d356 -> d357  [key=0, style=solid];
d356 -> d47  [key=2, style=dotted];
d357 -> d358  [key=0, style=solid];
d357 -> d47  [key=2, style=dotted];
d358 -> d359  [key=0, style=solid];
d358 -> d47  [key=2, style=dotted];
d359 -> d360  [key=0, style=solid];
d359 -> d47  [key=2, style=dotted];
d243 -> d241  [key=0, style=bold, color=blue];
d242 -> d243  [key=0, style=solid];
d44 -> d39  [key=0, style=bold, color=blue];
d53 -> d48  [key=0, style=bold, color=blue];
d55 -> d56  [key=0, style=solid];
d59 -> d55  [key=0, style=bold, color=blue];
d66 -> d61  [key=0, style=bold, color=blue];
d128 -> d123  [key=0, style=bold, color=blue];
d324 -> d319  [key=0, style=bold, color=blue];
d330 -> d47  [key=2, style=dotted];
d330 -> d331  [key=0, style=solid];
d329 -> d330  [key=0, style=solid];
d364 -> d365  [key=0, style=solid];
d368 -> d364  [key=0, style=bold, color=blue];
d373 -> d371  [key=0, style=bold, color=blue];
d372 -> d373  [key=0, style=solid];
d376 -> d374  [key=0, style=bold, color=blue];
d375 -> d376  [key=0, style=solid];
d6 -> d0  [key=0, style=bold, color=blue];
d377 -> d13  [key=1, style=dashed, color=darkseagreen4, label=writer];
d12 -> d13  [key=0, style=solid];
d14 -> d12  [key=0, style=bold, color=blue];
d378 -> d26  [key=1, style=dashed, color=darkseagreen4, label=writer];
d25 -> d26  [key=0, style=solid];
d27 -> d25  [key=0, style=bold, color=blue];
d379 -> d37  [key=1, style=dashed, color=darkseagreen4, label=writer];
d36 -> d37  [key=0, style=solid];
d38 -> d36  [key=0, style=bold, color=blue];
d207 -> d191  [key=0, style=bold, color=blue];
d384 -> d209  [key=1, style=dashed, color=darkseagreen4, label=help];
d208 -> d209  [key=0, style=solid];
d210 -> d208  [key=0, style=bold, color=blue];
d224 -> d211  [key=0, style=bold, color=blue];
d385 -> d226  [key=1, style=dashed, color=darkseagreen4, label=help];
d225 -> d226  [key=0, style=solid];
d227 -> d225  [key=0, style=bold, color=blue];
d386 -> d239  [key=1, style=dashed, color=darkseagreen4, label=help];
d238 -> d239  [key=0, style=solid];
d240 -> d238  [key=0, style=bold, color=blue];
d260 -> d244  [key=0, style=bold, color=blue];
d387 -> d262  [key=1, style=dashed, color=darkseagreen4, label=help];
d261 -> d262  [key=0, style=solid];
d263 -> d261  [key=0, style=bold, color=blue];
d388 -> d272  [key=1, style=dashed, color=darkseagreen4, label=help];
d271 -> d272  [key=0, style=solid];
d273 -> d271  [key=0, style=bold, color=blue];
d297 -> d274  [key=0, style=bold, color=blue];
d389 -> d299  [key=1, style=dashed, color=darkseagreen4, label=help];
d298 -> d299  [key=0, style=solid];
d300 -> d298  [key=0, style=bold, color=blue];
d315 -> d301  [key=0, style=bold, color=blue];
d390 -> d317  [key=1, style=dashed, color=darkseagreen4, label=help];
d316 -> d317  [key=0, style=solid];
d318 -> d316  [key=0, style=bold, color=blue];
d360 -> d344  [key=0, style=bold, color=blue];
d393 -> d362  [key=1, style=dashed, color=darkseagreen4, label=help];
d361 -> d362  [key=0, style=solid];
d363 -> d361  [key=0, style=bold, color=blue];
d61 -> d62  [key=0, style=solid];
d68 -> d69  [key=0, style=solid];
d70 -> d68  [key=0, style=bold, color=blue];
d71 -> d72  [key=0, style=solid];
d76 -> d47  [key=2, style=dotted];
d76 -> d77  [key=0, style=solid];
d76 -> d82  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d75 -> d60  [key=2, style=dotted];
d75 -> d76  [key=0, style=solid];
d79 -> d80  [key=0, style=solid];
d81 -> d79  [key=0, style=bold, color=blue];
d326 -> d327  [key=0, style=solid];
d328 -> d326  [key=0, style=bold, color=blue];
d337 -> d332  [key=0, style=bold, color=blue];
d336 -> d325  [key=2, style=dotted];
d336 -> d337  [key=0, style=solid];
d336 -> d341  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d342 -> d47  [key=2, style=dotted];
d342 -> d343  [key=0, style=solid];
d335 -> d47  [key=2, style=dotted];
d335 -> d336  [key=0, style=solid];
d338 -> d339  [key=0, style=solid];
d340 -> d338  [key=0, style=bold, color=blue];
d39 -> d40  [key=0, style=solid];
d86 -> d87  [key=0, style=solid];
d91 -> d47  [key=2, style=dotted];
d91 -> d92  [key=0, style=solid];
d91 -> d94  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d90 -> d60  [key=2, style=dotted];
d90 -> d91  [key=0, style=solid];
d97 -> d98  [key=0, style=solid];
d97 -> d100  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
d102 -> d47  [key=2, style=dotted];
d102 -> d103  [key=0, style=solid];
d102 -> d105  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d101 -> d60  [key=2, style=dotted];
d101 -> d102  [key=0, style=solid];
d113 -> d114  [key=0, style=solid];
d118 -> d47  [key=2, style=dotted];
d118 -> d119  [key=0, style=solid];
d118 -> d120  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d117 -> d60  [key=2, style=dotted];
d117 -> d118  [key=0, style=solid];
d123 -> d124  [key=0, style=solid];
d111 -> d60  [key=2, style=dotted];
d111 -> d112  [key=0, style=solid];
d391 -> d330  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Simple_Options"];
d331 -> d329  [key=0, style=bold, color=blue];
d110 -> d22  [key=2, style=dotted];
d110 -> d111  [key=0, style=solid];
d77 -> d71  [key=0, style=bold, color=blue];
d82 -> d83  [key=0, style=solid];
d341 -> d342  [key=0, style=solid];
d392 -> d342  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Commit_Verb"];
d343 -> d341  [key=0, style=bold, color=blue];
d92 -> d86  [key=0, style=bold, color=blue];
d94 -> d95  [key=0, style=solid];
d103 -> d97  [key=0, style=bold, color=blue];
d105 -> d106  [key=0, style=solid];
d119 -> d113  [key=0, style=bold, color=blue];
d120 -> d121  [key=0, style=solid];
d112 -> d108  [key=0, style=bold, color=blue];
d109 -> d110  [key=0, style=solid];
d84 -> d82  [key=0, style=bold, color=blue];
d83 -> d84  [key=0, style=solid];
d83 -> d85  [key=2, style=dotted];
d96 -> d94  [key=0, style=bold, color=blue];
d95 -> d96  [key=0, style=solid];
d95 -> d85  [key=2, style=dotted];
d107 -> d105  [key=0, style=bold, color=blue];
d106 -> d107  [key=0, style=solid];
d106 -> d85  [key=2, style=dotted];
d122 -> d120  [key=0, style=bold, color=blue];
d121 -> d122  [key=0, style=solid];
d121 -> d85  [key=2, style=dotted];
d108 -> d109  [key=0, style=solid];
m1_12 -> m1_13  [key=0, style=solid];
m1_12 -> m1_14  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m1_12 -> m1_28  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m1_12 -> m1_0  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Globalization.CultureInfo conversionCulture"];
m1_13 -> m1_14  [key=0, style=solid];
m1_13 -> m1_17  [key=2, style=dotted];
m1_13 -> m1_18  [key=2, style=dotted];
m1_13 -> m1_19  [key=2, style=dotted];
m1_13 -> m1_20  [key=2, style=dotted];
m1_13 -> m1_21  [key=2, style=dotted];
m1_13 -> m1_28  [key=1, style=dashed, color=darkseagreen4, label=type];
m1_13 -> m1_15  [key=1, style=dashed, color=darkseagreen4, label=type];
m1_14 -> m1_15  [key=0, style=solid];
m1_14 -> m1_22  [key=2, style=dotted];
m1_14 -> m1_27  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_15 -> m1_16  [key=0, style=solid];
m1_15 -> m1_23  [key=2, style=dotted];
m1_15 -> m1_24  [key=2, style=dotted];
m1_15 -> m1_22  [key=2, style=dotted];
m1_15 -> m1_25  [key=2, style=dotted];
m1_15 -> n13  [key=2, style=dotted];
m1_15 -> m1_30  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_15 -> m1_34  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_16 -> m1_12  [key=0, style=bold, color=blue];
m1_0 -> m1_1  [key=0, style=solid];
m1_0 -> m1_3  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m1_0 -> m1_5  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m1_0 -> m1_7  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_3  [key=0, style=solid];
m1_3 -> m1_4  [key=0, style=solid];
m1_3 -> m1_5  [key=0, style=solid];
m1_5 -> m1_6  [key=0, style=solid];
m1_5 -> m1_7  [key=0, style=solid];
m1_7 -> m1_8  [key=0, style=solid];
m1_7 -> m1_10  [key=2, style=dotted];
m1_7 -> m1_11  [key=2, style=dotted];
m1_7 -> m1_12  [key=2, style=dotted];
m1_2 -> m1_8  [key=0, style=solid];
m1_2 -> m1_9  [key=2, style=dotted];
m1_4 -> m1_8  [key=0, style=solid];
m1_4 -> m1_9  [key=2, style=dotted];
m1_6 -> m1_8  [key=0, style=solid];
m1_6 -> m1_9  [key=2, style=dotted];
m1_8 -> m1_0  [key=0, style=bold, color=blue];
m1_46 -> m1_53  [key=0, style=solid];
m1_46 -> m1_11  [key=3, color=darkorchid, style=bold, label="Parameter variable string value"];
m1_53 -> m1_54  [key=0, style=solid];
m1_53 -> m1_52  [key=2, style=dotted];
m1_54 -> m1_46  [key=0, style=bold, color=blue];
m1_34 -> m1_35  [key=0, style=solid];
m1_28 -> m1_29  [key=0, style=solid];
m1_28 -> m1_11  [key=2, style=dotted];
m1_27 -> m1_28  [key=0, style=solid];
m1_30 -> m1_31  [key=0, style=solid];
m1_29 -> m1_27  [key=0, style=bold, color=blue];
m1_31 -> m1_32  [key=0, style=solid];
m1_31 -> m1_33  [key=2, style=dotted];
m1_32 -> m1_30  [key=0, style=bold, color=blue];
m1_35 -> m1_36  [key=0, style=solid];
m1_36 -> m1_34  [key=0, style=bold, color=blue];
m1_11 -> m1_37  [key=0, style=solid, color=red];
m1_11 -> m1_0  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Globalization.CultureInfo conversionCulture"];
m1_11 -> m1_13  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Type conversionType"];
m1_11 -> m1_12  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Globalization.CultureInfo conversionCulture"];
m1_11 -> m1_14  [key=3, color=darkorchid, style=bold, label="Parameter variable string value"];
m1_37 -> m1_44  [key=0, style=solid, color=red];
m1_37 -> m1_45  [key=2, style=dotted, color=red];
m1_37 -> m1_46  [key=2, style=dotted, color=red];
m1_37 -> m1_47  [key=2, style=dotted, color=red];
m1_37 -> m1_48  [key=2, style=dotted, color=red];
m1_37 -> m1_49  [key=2, style=dotted, color=red];
m1_38 -> m1_39  [key=0, style=solid];
m1_39 -> m1_44  [key=0, style=solid];
m1_39 -> m1_24  [key=2, style=dotted];
m1_40 -> m1_41  [key=0, style=solid];
m1_41 -> m1_44  [key=0, style=solid];
m1_41 -> m1_24  [key=2, style=dotted];
m1_42 -> m1_43  [key=0, style=solid];
m1_43 -> m1_44  [key=0, style=solid];
m1_43 -> m1_24  [key=2, style=dotted];
m1_44 -> m1_11  [key=0, style=bold, color=blue];
m1_45 -> m1_50  [key=0, style=solid];
m1_45 -> m1_11  [key=3, color=darkorchid, style=bold, label="Parameter variable string value"];
m1_50 -> m1_51  [key=0, style=solid];
m1_50 -> m1_52  [key=2, style=dotted];
m1_51 -> m1_45  [key=0, style=bold, color=blue];
m1_55 -> m1_28  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m1_56 -> m1_28  [key=1, style=dashed, color=darkseagreen4, label=type];
}
