digraph  {
m1_57 [label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Program.cs"];
m1_48 [label="Entry Unk.ThrowingValidate", span="", cluster="Unk.ThrowingValidate", file="Program.cs"];
m1_67 [label="Entry T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="71-71", cluster="T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", file="Program.cs"];
m1_80 [label="Entry NotParsed<T>.cstr", span="", cluster="NotParsed<T>.cstr", file="Program.cs"];
m1_115 [label="Entry string.MatchName(string, string, System.StringComparer)", span="8-8", cluster="string.MatchName(string, string, System.StringComparer)", file="Program.cs"];
m1_53 [label="Entry CommandLine.NotParsed<T>.NotParsed(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="142-142", cluster="CommandLine.NotParsed<T>.NotParsed(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="Program.cs"];
m1_3 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="35-35", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="Program.cs"];
m1_19 [label="var typeInfo = factory.Return(f => f().GetType(), typeof(T))", span="42-42", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="Program.cs"];
m1_23 [label="Func<T> makeDefault = () =>\r\n                typeof(T).IsMutable()\r\n                    ? factory.Return(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="53-57", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=red, community=0, file="Program.cs"];
m1_24 [label="arguments.Any()", span="59-59", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=red, community=0, file="Program.cs"];
m1_25 [label="var preprocessorErrors = arguments.Preprocess(PreprocessorGuards.Lookup(nameComparer))", span="61-61", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=red, community=0, file="Program.cs"];
m1_28 [label="var tokenizerResult = tokenizer(arguments, optionSpecs)", span="68-68", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=red, community=0, file="Program.cs"];
m1_30 [label="var partitions = TokenPartitioner.Partition(\r\n                tokens,\r\n                name => TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer))", span="72-74", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=red, community=0, file="Program.cs"];
m1_31 [label="var optionSpecProps = OptionMapper.MapValues(\r\n                (from pt in specProps where pt.Specification.IsOption() select pt),\r\n                partitions.Options,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture),\r\n                nameComparer)", span="76-80", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=red, community=0, file="Program.cs"];
m1_32 [label="var valueSpecProps = ValueMapper.MapValues(\r\n                (from pt in specProps where pt.Specification.IsValue() select pt),\r\n                    partitions.Values,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture))", span="82-85", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="Program.cs"];
m1_33 [label="var missingValueErrors = from token in partitions.Errors\r\n                                     select new MissingValueOptionError(\r\n                                         optionSpecs.Single(o => token.Text.MatchName(o.ShortName, o.LongName, nameComparer)).FromOptionSpecification())", span="87-89", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="Program.cs"];
m1_37 [label="instance = factory.Return(f => f(), Activator.CreateInstance<T>())", span="97-97", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="Program.cs"];
m1_20 [label="var specProps = typeInfo.GetSpecifications(pi => SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>()))", span="44-45", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="Program.cs"];
m1_36 [label="typeInfo.IsMutable()", span="95-95", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="Program.cs"];
m1_39 [label="var ctor = typeInfo.GetConstructor((from sp in specProps select sp.Property.PropertyType).ToArray())", span="113-113", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="Program.cs"];
m1_21 [label="var specs = from pt in specProps select pt.Specification", span="47-47", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="Program.cs"];
m1_22 [label="var optionSpecs = specs\r\n                .ThrowingValidate(SpecificationGuards.Lookup)\r\n                .OfType<OptionSpecification>()", span="49-51", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=red, community=0, file="Program.cs"];
m1_27 [label="return new NotParsed<T>(makeDefault(), preprocessorErrors);", span="64-64", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="Program.cs"];
m1_26 [label="preprocessorErrors.Any()", span="62-62", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=red, community=0, file="Program.cs"];
m1_29 [label="var tokens = tokenizerResult.SucceededWith()", span="70-70", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=red, community=0, file="Program.cs"];
m1_43 [label="var allErrors = tokenizerResult.SuccessfulMessages()\r\n                .Concat(missingValueErrors)\r\n                .Concat(optionSpecProps.SuccessfulMessages())\r\n                .Concat(valueSpecProps.SuccessfulMessages())\r\n                .Concat(validationErrors)", span="125-129", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="Program.cs"];
m1_42 [label="var validationErrors = specPropsWithValue.Validate(\r\n                SpecificationPropertyRules.Lookup(tokens))", span="122-123", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="Program.cs"];
m1_34 [label="var specPropsWithValue = optionSpecProps.SucceededWith()\r\n                .Concat(valueSpecProps.SucceededWith())", span="91-92", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="Program.cs"];
m1_35 [label="T instance", span="94-94", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="Program.cs"];
m1_38 [label="instance = instance\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsJust(),\r\n                        sp => sp.Value.FromJust())\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust(),\r\n                        sp => sp.Specification.DefaultValue.FromJust())\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsNothing()\r\n                            && sp.Specification.TargetType == TargetType.Sequence\r\n                            && sp.Specification.DefaultValue.MatchNothing(),\r\n                        sp => sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray())", span="98-109", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="Program.cs"];
m1_40 [label="var values = (from prms in ctor.GetParameters()\r\n                              join sp in specPropsWithValue on prms.Name.ToLower() equals sp.Property.Name.ToLower()\r\n                              select sp.Value.Return(v => v,\r\n                                    sp.Specification.DefaultValue.Return(d => d,\r\n                                        sp.Specification.ConversionType.CreateDefaultForImmutable()))).ToArray()", span="114-118", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="Program.cs"];
m1_41 [label="instance = (T)ctor.Invoke(values)", span="119-119", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="Program.cs"];
m1_44 [label="return allErrors.Any()\r\n                ? (ParserResult<T>)new NotParsed<T>(instance, allErrors)\r\n                : (ParserResult<T>)new Parsed<T>(instance);", span="131-133", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="Program.cs"];
m1_45 [label="Exit CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="35-35", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="Program.cs"];
m1_86 [label="Entry Unk.GetType", span="", cluster="Unk.GetType", file="Program.cs"];
m1_70 [label="Entry Unk.GetParameters", span="", cluster="Unk.GetParameters", file="Program.cs"];
m1_108 [label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="13-13", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="Program.cs"];
m1_10 [label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", span="46-46", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="Program.cs"];
m1_97 [label="Entry Unk.>", span="", cluster="Unk.>", file="Program.cs"];
m1_79 [label="Entry Unk.Any", span="", cluster="Unk.Any", file="Program.cs"];
m1_18 [label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16", cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="Program.cs"];
m1_60 [label="Entry CommandLine.Core.Specification.IsValue()", span="15-15", cluster="CommandLine.Core.Specification.IsValue()", file="Program.cs"];
m1_76 [label="Entry System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="40-40", cluster="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", file="Program.cs"];
m1_14 [label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11", cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="Program.cs"];
m1_69 [label="Entry Unk.GetConstructor", span="", cluster="Unk.GetConstructor", file="Program.cs"];
m1_62 [label="Entry Unk.Single", span="", cluster="Unk.Single", file="Program.cs"];
m1_74 [label="Entry Unk.Invoke", span="", cluster="Unk.Invoke", file="Program.cs"];
m1_50 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="Program.cs"];
m1_54 [label="Entry System.Func<TResult>.Invoke()", span="0-0", cluster="System.Func<TResult>.Invoke()", file="Program.cs"];
m1_75 [label="Entry CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12", cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="Program.cs"];
m1_98 [label="Entry lambda expression", span="55-55", cluster="lambda expression", file="Program.cs"];
m1_5 [label="var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer))", span="24-24", cluster="lambda expression", color=red, community=0, file="Program.cs"];
m1_12 [label="NameLookup.Contains(name, optionSpecs, nameComparer)", span="24-24", cluster="lambda expression", color=red, community=0, file="Program.cs"];
m1_6 [label="var explodedTokens = Tokenizer.ExplodeOptionList(\r\n                            tokens,\r\n                            name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer))", span="25-27", cluster="lambda expression", color=red, community=0, file="Program.cs"];
m1_16 [label="NameLookup.HavingSeparator(name, optionSpecs, nameComparer)", span="27-27", cluster="lambda expression", file="Program.cs"];
m1_4 [label="Entry lambda expression", span="22-29", cluster="lambda expression", file="Program.cs"];
m1_11 [label="Entry lambda expression", span="24-24", cluster="lambda expression", file="Program.cs"];
m1_7 [label="return explodedTokens;", span="28-28", cluster="lambda expression", color=red, community=0, file="Program.cs"];
m1_15 [label="Entry lambda expression", span="27-27", cluster="lambda expression", file="Program.cs"];
m1_8 [label="Exit lambda expression", span="22-29", cluster="lambda expression", file="Program.cs"];
m1_13 [label="Exit lambda expression", span="24-24", cluster="lambda expression", file="Program.cs"];
m1_17 [label="Exit lambda expression", span="27-27", cluster="lambda expression", file="Program.cs"];
m1_94 [label="typeof(T).IsMutable()\r\n                    ? factory.Return(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="54-57", cluster="lambda expression", color=red, community=0, file="Program.cs"];
m1_102 [label="TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer)", span="74-74", cluster="lambda expression", color=red, community=0, file="Program.cs"];
m1_106 [label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="79-79", cluster="lambda expression", file="Program.cs"];
m1_110 [label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="85-85", cluster="lambda expression", file="Program.cs"];
m1_113 [label="token.Text.MatchName(o.ShortName, o.LongName, nameComparer)", span="89-89", cluster="lambda expression", file="Program.cs"];
m1_82 [label="Entry lambda expression", span="42-42", cluster="lambda expression", file="Program.cs"];
m1_87 [label="Entry lambda expression", span="44-45", cluster="lambda expression", file="Program.cs"];
m1_101 [label="Entry lambda expression", span="74-74", cluster="lambda expression", file="Program.cs"];
m1_105 [label="Entry lambda expression", span="79-79", cluster="lambda expression", file="Program.cs"];
m1_109 [label="Entry lambda expression", span="85-85", cluster="lambda expression", file="Program.cs"];
m1_112 [label="Entry lambda expression", span="89-89", cluster="lambda expression", file="Program.cs"];
m1_116 [label="Entry lambda expression", span="97-97", cluster="lambda expression", file="Program.cs"];
m1_144 [label="Entry lambda expression", span="116-116", cluster="lambda expression", file="Program.cs"];
m1_147 [label="Entry lambda expression", span="117-117", cluster="lambda expression", file="Program.cs"];
m1_119 [label="Entry lambda expression", span="100-100", cluster="lambda expression", file="Program.cs"];
m1_123 [label="Entry lambda expression", span="101-101", cluster="lambda expression", file="Program.cs"];
m1_127 [label="Entry lambda expression", span="103-103", cluster="lambda expression", file="Program.cs"];
m1_131 [label="Entry lambda expression", span="104-104", cluster="lambda expression", file="Program.cs"];
m1_134 [label="Entry lambda expression", span="106-108", cluster="lambda expression", file="Program.cs"];
m1_138 [label="Entry lambda expression", span="109-109", cluster="lambda expression", file="Program.cs"];
m1_83 [label="f().GetType()", span="42-42", cluster="lambda expression", file="Program.cs"];
m1_84 [label="Exit lambda expression", span="42-42", cluster="lambda expression", file="Program.cs"];
m1_88 [label="SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>())", span="44-45", cluster="lambda expression", file="Program.cs"];
m1_89 [label="Exit lambda expression", span="44-45", cluster="lambda expression", file="Program.cs"];
m1_93 [label="Entry lambda expression", span="53-57", cluster="lambda expression", file="Program.cs"];
m1_95 [label="Exit lambda expression", span="53-57", cluster="lambda expression", file="Program.cs"];
m1_99 [label="f()", span="55-55", cluster="lambda expression", color=red, community=0, file="Program.cs"];
m1_100 [label="Exit lambda expression", span="55-55", cluster="lambda expression", file="Program.cs"];
m1_103 [label="Exit lambda expression", span="74-74", cluster="lambda expression", file="Program.cs"];
m1_107 [label="Exit lambda expression", span="79-79", cluster="lambda expression", file="Program.cs"];
m1_111 [label="Exit lambda expression", span="85-85", cluster="lambda expression", file="Program.cs"];
m1_114 [label="Exit lambda expression", span="89-89", cluster="lambda expression", file="Program.cs"];
m1_117 [label="f()", span="97-97", cluster="lambda expression", file="Program.cs"];
m1_118 [label="Exit lambda expression", span="97-97", cluster="lambda expression", file="Program.cs"];
m1_120 [label="sp.Value.IsJust()", span="100-100", cluster="lambda expression", file="Program.cs"];
m1_121 [label="Exit lambda expression", span="100-100", cluster="lambda expression", file="Program.cs"];
m1_124 [label="sp.Value.FromJust()", span="101-101", cluster="lambda expression", file="Program.cs"];
m1_125 [label="Exit lambda expression", span="101-101", cluster="lambda expression", file="Program.cs"];
m1_128 [label="sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust()", span="103-103", cluster="lambda expression", file="Program.cs"];
m1_129 [label="Exit lambda expression", span="103-103", cluster="lambda expression", file="Program.cs"];
m1_132 [label="sp.Specification.DefaultValue.FromJust()", span="104-104", cluster="lambda expression", file="Program.cs"];
m1_133 [label="Exit lambda expression", span="104-104", cluster="lambda expression", file="Program.cs"];
m1_135 [label="sp.Value.IsNothing()\r\n                            && sp.Specification.TargetType == TargetType.Sequence\r\n                            && sp.Specification.DefaultValue.MatchNothing()", span="106-108", cluster="lambda expression", file="Program.cs"];
m1_136 [label="Exit lambda expression", span="106-108", cluster="lambda expression", file="Program.cs"];
m1_139 [label="sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray()", span="109-109", cluster="lambda expression", file="Program.cs"];
m1_140 [label="Exit lambda expression", span="109-109", cluster="lambda expression", file="Program.cs"];
m1_145 [label=v, span="116-116", cluster="lambda expression", file="Program.cs"];
m1_146 [label="Exit lambda expression", span="116-116", cluster="lambda expression", file="Program.cs"];
m1_148 [label=d, span="117-117", cluster="lambda expression", file="Program.cs"];
m1_149 [label="Exit lambda expression", span="117-117", cluster="lambda expression", file="Program.cs"];
m1_52 [label="Entry System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="11-11", cluster="System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", file="Program.cs"];
m1_61 [label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="269-269", cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="Program.cs"];
m1_0 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="14-14", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="Program.cs"];
m1_1 [label="return Build(\r\n                factory,\r\n                (args, optionSpecs) =>\r\n                    {\r\n                        var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer));\r\n                        var explodedTokens = Tokenizer.ExplodeOptionList(\r\n                            tokens,\r\n                            name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer));\r\n                        return explodedTokens;\r\n                    },\r\n                arguments,\r\n                nameComparer,\r\n                parsingCulture);", span="20-32", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=red, community=0, file="Program.cs"];
m1_2 [label="Exit CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="14-14", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="Program.cs"];
m1_47 [label="Entry Unk.GetSpecifications", span="", cluster="Unk.GetSpecifications", file="Program.cs"];
m1_73 [label="Entry Unk.CreateDefaultForImmutable", span="", cluster="Unk.CreateDefaultForImmutable", file="Program.cs"];
m1_77 [label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SuccessfulMessages<TSuccess, TMessage>()", span="12-12", cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SuccessfulMessages<TSuccess, TMessage>()", file="Program.cs"];
m1_78 [label="Entry Unk.Concat", span="", cluster="Unk.Concat", file="Program.cs"];
m1_81 [label="Entry CommandLine.Parsed<T>.Parsed(T)", span="72-72", cluster="CommandLine.Parsed<T>.Parsed(T)", file="Program.cs"];
m1_142 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", file="Program.cs"];
m1_143 [label="Entry System.Type.CreateEmptyArray()", span="114-114", cluster="System.Type.CreateEmptyArray()", file="Program.cs"];
m1_72 [label="Entry string.ToLower()", span="0-0", cluster="string.ToLower()", file="Program.cs"];
m1_141 [label="Entry System.Type.GetGenericArguments()", span="0-0", cluster="System.Type.GetGenericArguments()", file="Program.cs"];
m1_9 [label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="13-13", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="Program.cs"];
m1_46 [label="Entry Unk.Return", span="", cluster="Unk.Return", file="Program.cs"];
m1_90 [label="Entry CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="105-105", cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="Program.cs"];
m1_104 [label="Entry CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="23-23", cluster="CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="Program.cs"];
m1_85 [label="Entry Unk.f", span="", cluster="Unk.f", file="Program.cs"];
m1_66 [label="Entry System.Activator.CreateInstance<T>()", span="0-0", cluster="System.Activator.CreateInstance<T>()", file="Program.cs"];
m1_56 [label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()", span="653-653", cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()", file="Program.cs"];
m1_58 [label="Entry CommandLine.Core.Specification.IsOption()", span="10-10", cluster="CommandLine.Core.Specification.IsOption()", file="Program.cs"];
m1_91 [label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116", cluster="CSharpx.Maybe.Nothing<T>()", file="Program.cs"];
m1_126 [label="Entry CSharpx.Maybe<T>.FromJust<T>()", span="342-342", cluster="CSharpx.Maybe<T>.FromJust<T>()", file="Program.cs"];
m1_130 [label="Entry CSharpx.Maybe<T>.IsNothing<T>()", span="334-334", cluster="CSharpx.Maybe<T>.IsNothing<T>()", file="Program.cs"];
m1_137 [label="Entry CSharpx.Maybe<T>.MatchNothing()", span="57-57", cluster="CSharpx.Maybe<T>.MatchNothing()", file="Program.cs"];
m1_96 [label="Entry System.Type.IsMutable()", span="128-128", cluster="System.Type.IsMutable()", file="Program.cs"];
m1_92 [label="Entry CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)", span="21-21", cluster="CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)", file="Program.cs"];
m1_71 [label="Entry Unk.ToLower", span="", cluster="Unk.ToLower", file="Program.cs"];
m1_49 [label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0", cluster="System.Collections.IEnumerable.OfType<TResult>()", file="Program.cs"];
m1_51 [label="Entry CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)", span="11-11", cluster="CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)", file="Program.cs"];
m1_65 [label="Entry Unk.IsMutable", span="", cluster="Unk.IsMutable", file="Program.cs"];
m1_68 [label="Entry Unk.ToArray", span="", cluster="Unk.ToArray", file="Program.cs"];
m1_122 [label="Entry CSharpx.Maybe<T>.IsJust<T>()", span="326-326", cluster="CSharpx.Maybe<T>.IsJust<T>()", file="Program.cs"];
m1_63 [label="Entry Unk.FromOptionSpecification", span="", cluster="Unk.FromOptionSpecification", file="Program.cs"];
m1_55 [label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0", cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", file="Program.cs"];
m1_64 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="Program.cs"];
m1_59 [label="Entry Unk.MapValues", span="", cluster="Unk.MapValues", file="Program.cs"];
m1_150 [label="System.StringComparer", span="", file="Program.cs"];
m1_151 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span="", file="Program.cs"];
m1_152 [label="CSharpx.Maybe<System.Func<T>>", span="", file="Program.cs"];
m1_153 [label=specProps, span="", file="Program.cs"];
m1_154 [label="System.StringComparer", span="", file="Program.cs"];
m1_155 [label=optionSpecs, span="", file="Program.cs"];
m1_156 [label="System.Globalization.CultureInfo", span="", file="Program.cs"];
m1_157 [label=token, span="", file="Program.cs"];
m1_3 -> m1_19  [key=0, style=solid];
m1_3 -> m1_23  [key=1, style=dashed, color=red, label="CSharpx.Maybe<System.Func<T>>"];
m1_3 -> m1_94  [key=1, style=dashed, color=red, label="CSharpx.Maybe<System.Func<T>>"];
m1_3 -> m1_24  [key=1, style=dashed, color=red, label="System.Collections.Generic.IEnumerable<string>"];
m1_3 -> m1_25  [key=1, style=dashed, color=red, label="System.Collections.Generic.IEnumerable<string>"];
m1_3 -> m1_28  [key=1, style=dashed, color=red, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>"];
m1_3 -> m1_30  [key=1, style=dashed, color=red, label="System.StringComparer"];
m1_3 -> m1_102  [key=1, style=dashed, color=red, label="System.StringComparer"];
m1_3 -> m1_31  [key=1, style=dashed, color=red, label="System.StringComparer"];
m1_3 -> m1_106  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m1_3 -> m1_32  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m1_3 -> m1_110  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m1_3 -> m1_33  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_3 -> m1_113  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_3 -> m1_37  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Func<T>>"];
m1_19 -> m1_20  [key=0, style=solid];
m1_19 -> m1_46  [key=2, style=dotted];
m1_19 -> m1_82  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_19 -> m1_36  [key=1, style=dashed, color=darkseagreen4, label=typeInfo];
m1_19 -> m1_39  [key=1, style=dashed, color=darkseagreen4, label=typeInfo];
m1_23 -> m1_24  [key=0, style=solid, color=red];
m1_23 -> m1_27  [key=1, style=dashed, color=red, label=makeDefault];
m1_24 -> m1_25  [key=0, style=solid, color=red];
m1_24 -> m1_28  [key=0, style=solid, color=red];
m1_24 -> m1_50  [key=2, style=dotted, color=red];
m1_25 -> m1_26  [key=0, style=solid, color=red];
m1_25 -> m1_51  [key=2, style=dotted, color=red];
m1_25 -> m1_52  [key=2, style=dotted, color=red];
m1_25 -> m1_27  [key=1, style=dashed, color=red, label=preprocessorErrors];
m1_28 -> m1_29  [key=0, style=solid, color=red];
m1_28 -> m1_55  [key=2, style=dotted, color=red];
m1_28 -> m1_43  [key=1, style=dashed, color=red, label=tokenizerResult];
m1_30 -> m1_31  [key=0, style=solid, color=red];
m1_30 -> m1_57  [key=2, style=dotted, color=red];
m1_30 -> m1_101  [key=1, style=dashed, color=red, label="lambda expression"];
m1_30 -> m1_32  [key=1, style=dashed, color=red, label=partitions];
m1_30 -> m1_33  [key=1, style=dashed, color=red, label=partitions];
m1_31 -> m1_32  [key=0, style=solid, color=red];
m1_31 -> m1_58  [key=2, style=dotted, color=red];
m1_31 -> m1_59  [key=2, style=dotted, color=red];
m1_31 -> m1_31  [key=1, style=dashed, color=red, label=pt];
m1_31 -> m1_105  [key=1, style=dashed, color=red, label="lambda expression"];
m1_31 -> m1_34  [key=1, style=dashed, color=red, label=optionSpecProps];
m1_31 -> m1_43  [key=1, style=dashed, color=red, label=optionSpecProps];
m1_32 -> m1_33  [key=0, style=solid];
m1_32 -> m1_60  [key=2, style=dotted];
m1_32 -> m1_59  [key=2, style=dotted];
m1_32 -> m1_32  [key=1, style=dashed, color=darkseagreen4, label=pt];
m1_32 -> m1_109  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_32 -> m1_34  [key=1, style=dashed, color=darkseagreen4, label=valueSpecProps];
m1_32 -> m1_43  [key=1, style=dashed, color=darkseagreen4, label=valueSpecProps];
m1_33 -> m1_34  [key=0, style=solid];
m1_33 -> m1_61  [key=2, style=dotted];
m1_33 -> m1_62  [key=2, style=dotted];
m1_33 -> m1_63  [key=2, style=dotted];
m1_33 -> m1_33  [key=1, style=dashed, color=darkseagreen4, label=token];
m1_33 -> m1_112  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_33 -> m1_113  [key=1, style=dashed, color=darkseagreen4, label=token];
m1_33 -> m1_43  [key=1, style=dashed, color=darkseagreen4, label=missingValueErrors];
m1_37 -> m1_38  [key=0, style=solid];
m1_37 -> m1_66  [key=2, style=dotted];
m1_37 -> m1_46  [key=2, style=dotted];
m1_37 -> m1_116  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_20 -> m1_21  [key=0, style=solid];
m1_20 -> m1_47  [key=2, style=dotted];
m1_20 -> m1_87  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_20 -> m1_23  [key=1, style=dashed, color=red, label=specProps];
m1_20 -> m1_94  [key=1, style=dashed, color=red, label=specProps];
m1_20 -> m1_31  [key=1, style=dashed, color=red, label=specProps];
m1_20 -> m1_32  [key=1, style=dashed, color=darkseagreen4, label=specProps];
m1_20 -> m1_39  [key=1, style=dashed, color=darkseagreen4, label=specProps];
m1_36 -> m1_37  [key=0, style=solid];
m1_36 -> m1_39  [key=0, style=solid];
m1_36 -> m1_65  [key=2, style=dotted];
m1_39 -> m1_40  [key=0, style=solid];
m1_39 -> m1_68  [key=2, style=dotted];
m1_39 -> m1_69  [key=2, style=dotted];
m1_39 -> m1_39  [key=1, style=dashed, color=darkseagreen4, label=sp];
m1_39 -> m1_41  [key=1, style=dashed, color=darkseagreen4, label=ctor];
m1_21 -> m1_22  [key=0, style=solid, color=red];
m1_21 -> m1_21  [key=1, style=dashed, color=darkseagreen4, label=pt];
m1_22 -> m1_23  [key=0, style=solid, color=red];
m1_22 -> m1_48  [key=2, style=dotted, color=red];
m1_22 -> m1_49  [key=2, style=dotted, color=red];
m1_22 -> m1_28  [key=1, style=dashed, color=red, label=optionSpecs];
m1_22 -> m1_30  [key=1, style=dashed, color=red, label=optionSpecs];
m1_22 -> m1_102  [key=1, style=dashed, color=red, label=optionSpecs];
m1_22 -> m1_33  [key=1, style=dashed, color=red, label=optionSpecs];
m1_27 -> m1_45  [key=0, style=solid];
m1_27 -> m1_53  [key=2, style=dotted];
m1_27 -> m1_54  [key=2, style=dotted];
m1_26 -> m1_27  [key=0, style=solid, color=red];
m1_26 -> m1_28  [key=0, style=solid, color=red];
m1_26 -> m1_50  [key=2, style=dotted, color=red];
m1_29 -> m1_30  [key=0, style=solid, color=red];
m1_29 -> m1_56  [key=2, style=dotted, color=red];
m1_29 -> m1_42  [key=1, style=dashed, color=red, label=tokens];
m1_43 -> m1_44  [key=0, style=solid];
m1_43 -> m1_77  [key=2, style=dotted];
m1_43 -> m1_78  [key=2, style=dotted];
m1_42 -> m1_43  [key=0, style=solid];
m1_42 -> m1_75  [key=2, style=dotted];
m1_42 -> m1_76  [key=2, style=dotted];
m1_34 -> m1_35  [key=0, style=solid];
m1_34 -> m1_56  [key=2, style=dotted];
m1_34 -> m1_64  [key=2, style=dotted];
m1_34 -> m1_38  [key=1, style=dashed, color=darkseagreen4, label=specPropsWithValue];
m1_34 -> m1_40  [key=1, style=dashed, color=darkseagreen4, label=specPropsWithValue];
m1_34 -> m1_42  [key=1, style=dashed, color=darkseagreen4, label=specPropsWithValue];
m1_35 -> m1_36  [key=0, style=solid];
m1_38 -> m1_42  [key=0, style=solid];
m1_38 -> m1_67  [key=2, style=dotted];
m1_38 -> m1_38  [key=1, style=dashed, color=darkseagreen4, label=instance];
m1_38 -> m1_119  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_38 -> m1_123  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_38 -> m1_127  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_38 -> m1_131  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_38 -> m1_134  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_38 -> m1_138  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_38 -> m1_44  [key=1, style=dashed, color=darkseagreen4, label=instance];
m1_40 -> m1_41  [key=0, style=solid];
m1_40 -> m1_70  [key=2, style=dotted];
m1_40 -> m1_71  [key=2, style=dotted];
m1_40 -> m1_72  [key=2, style=dotted];
m1_40 -> m1_73  [key=2, style=dotted];
m1_40 -> m1_46  [key=2, style=dotted];
m1_40 -> m1_68  [key=2, style=dotted];
m1_40 -> m1_40  [key=1, style=dashed, color=darkseagreen4, label=prms];
m1_40 -> m1_144  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_40 -> m1_147  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_41 -> m1_42  [key=0, style=solid];
m1_41 -> m1_74  [key=2, style=dotted];
m1_41 -> m1_44  [key=1, style=dashed, color=darkseagreen4, label=instance];
m1_44 -> m1_45  [key=0, style=solid];
m1_44 -> m1_79  [key=2, style=dotted];
m1_44 -> m1_80  [key=2, style=dotted];
m1_44 -> m1_81  [key=2, style=dotted];
m1_45 -> m1_3  [key=0, style=bold, color=blue];
m1_98 -> m1_99  [key=0, style=solid, color=red];
m1_5 -> m1_6  [key=0, style=solid, color=red];
m1_5 -> m1_9  [key=2, style=dotted, color=red];
m1_5 -> m1_11  [key=1, style=dashed, color=red, label="lambda expression"];
m1_12 -> m1_13  [key=0, style=solid, color=red];
m1_12 -> m1_14  [key=2, style=dotted, color=red];
m1_6 -> m1_7  [key=0, style=solid, color=red];
m1_6 -> m1_10  [key=2, style=dotted, color=red];
m1_6 -> m1_15  [key=1, style=dashed, color=red, label="lambda expression"];
m1_16 -> m1_17  [key=0, style=solid];
m1_16 -> m1_18  [key=2, style=dotted];
m1_4 -> m1_5  [key=0, style=solid, color=red];
m1_4 -> m1_12  [key=1, style=dashed, color=red, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_4 -> m1_6  [key=1, style=dashed, color=red, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_4 -> m1_16  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_11 -> m1_12  [key=0, style=solid, color=red];
m1_7 -> m1_8  [key=0, style=solid, color=red];
m1_15 -> m1_16  [key=0, style=solid];
m1_8 -> m1_4  [key=0, style=bold, color=blue];
m1_13 -> m1_11  [key=0, style=bold, color=blue];
m1_17 -> m1_15  [key=0, style=bold, color=blue];
m1_94 -> m1_95  [key=0, style=solid, color=red];
m1_94 -> m1_96  [key=2, style=dotted, color=red];
m1_94 -> m1_66  [key=2, style=dotted, color=red];
m1_94 -> m1_46  [key=2, style=dotted, color=red];
m1_94 -> m1_68  [key=2, style=dotted, color=red];
m1_94 -> m1_97  [key=2, style=dotted, color=red];
m1_94 -> m1_98  [key=1, style=dashed, color=red, label="lambda expression"];
m1_94 -> m1_94  [key=1, style=dashed, color=red, label=p];
m1_102 -> m1_103  [key=0, style=solid, color=red];
m1_102 -> m1_104  [key=2, style=dotted, color=red];
m1_106 -> m1_107  [key=0, style=solid];
m1_106 -> m1_108  [key=2, style=dotted];
m1_110 -> m1_111  [key=0, style=solid];
m1_110 -> m1_108  [key=2, style=dotted];
m1_113 -> m1_114  [key=0, style=solid];
m1_113 -> m1_115  [key=2, style=dotted];
m1_82 -> m1_83  [key=0, style=solid];
m1_87 -> m1_88  [key=0, style=solid];
m1_101 -> m1_102  [key=0, style=solid, color=red];
m1_105 -> m1_106  [key=0, style=solid];
m1_109 -> m1_110  [key=0, style=solid];
m1_112 -> m1_113  [key=0, style=solid];
m1_116 -> m1_117  [key=0, style=solid];
m1_144 -> m1_145  [key=0, style=solid];
m1_147 -> m1_148  [key=0, style=solid];
m1_119 -> m1_120  [key=0, style=solid];
m1_123 -> m1_124  [key=0, style=solid];
m1_127 -> m1_128  [key=0, style=solid];
m1_131 -> m1_132  [key=0, style=solid];
m1_134 -> m1_135  [key=0, style=solid];
m1_138 -> m1_139  [key=0, style=solid];
m1_83 -> m1_84  [key=0, style=solid];
m1_83 -> m1_85  [key=2, style=dotted];
m1_83 -> m1_86  [key=2, style=dotted];
m1_84 -> m1_82  [key=0, style=bold, color=blue];
m1_88 -> m1_89  [key=0, style=solid];
m1_88 -> m1_90  [key=2, style=dotted];
m1_88 -> m1_91  [key=2, style=dotted];
m1_88 -> m1_92  [key=2, style=dotted];
m1_89 -> m1_87  [key=0, style=bold, color=blue];
m1_93 -> m1_94  [key=0, style=solid, color=red];
m1_95 -> m1_93  [key=0, style=bold, color=blue];
m1_99 -> m1_100  [key=0, style=solid, color=red];
m1_99 -> m1_85  [key=2, style=dotted, color=red];
m1_100 -> m1_98  [key=0, style=bold, color=blue];
m1_103 -> m1_101  [key=0, style=bold, color=blue];
m1_107 -> m1_105  [key=0, style=bold, color=blue];
m1_111 -> m1_109  [key=0, style=bold, color=blue];
m1_114 -> m1_112  [key=0, style=bold, color=blue];
m1_117 -> m1_118  [key=0, style=solid];
m1_117 -> m1_85  [key=2, style=dotted];
m1_118 -> m1_116  [key=0, style=bold, color=blue];
m1_120 -> m1_121  [key=0, style=solid];
m1_120 -> m1_122  [key=2, style=dotted];
m1_121 -> m1_119  [key=0, style=bold, color=blue];
m1_124 -> m1_125  [key=0, style=solid];
m1_124 -> m1_126  [key=2, style=dotted];
m1_125 -> m1_123  [key=0, style=bold, color=blue];
m1_128 -> m1_129  [key=0, style=solid];
m1_128 -> m1_130  [key=2, style=dotted];
m1_128 -> m1_122  [key=2, style=dotted];
m1_129 -> m1_127  [key=0, style=bold, color=blue];
m1_132 -> m1_133  [key=0, style=solid];
m1_132 -> m1_126  [key=2, style=dotted];
m1_133 -> m1_131  [key=0, style=bold, color=blue];
m1_135 -> m1_136  [key=0, style=solid];
m1_135 -> m1_130  [key=2, style=dotted];
m1_135 -> m1_137  [key=2, style=dotted];
m1_136 -> m1_134  [key=0, style=bold, color=blue];
m1_139 -> m1_140  [key=0, style=solid];
m1_139 -> m1_141  [key=2, style=dotted];
m1_139 -> m1_142  [key=2, style=dotted];
m1_139 -> m1_143  [key=2, style=dotted];
m1_140 -> m1_138  [key=0, style=bold, color=blue];
m1_145 -> m1_146  [key=0, style=solid];
m1_146 -> m1_144  [key=0, style=bold, color=blue];
m1_148 -> m1_149  [key=0, style=solid];
m1_149 -> m1_147  [key=0, style=bold, color=blue];
m1_0 -> m1_1  [key=0, style=solid, color=red];
m1_0 -> m1_5  [key=1, style=dashed, color=red, label="System.StringComparer"];
m1_0 -> m1_12  [key=1, style=dashed, color=red, label="System.StringComparer"];
m1_0 -> m1_6  [key=1, style=dashed, color=red, label="System.StringComparer"];
m1_0 -> m1_16  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_1 -> m1_2  [key=0, style=solid, color=red];
m1_1 -> m1_3  [key=2, style=dotted, color=red];
m1_1 -> m1_4  [key=1, style=dashed, color=red, label="lambda expression"];
m1_2 -> m1_0  [key=0, style=bold, color=blue];
m1_150 -> m1_5  [key=1, style=dashed, color=red, label="System.StringComparer"];
m1_150 -> m1_12  [key=1, style=dashed, color=red, label="System.StringComparer"];
m1_150 -> m1_6  [key=1, style=dashed, color=red, label="System.StringComparer"];
m1_150 -> m1_16  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_151 -> m1_12  [key=1, style=dashed, color=red, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_151 -> m1_16  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_152 -> m1_94  [key=1, style=dashed, color=red, label="CSharpx.Maybe<System.Func<T>>"];
m1_153 -> m1_94  [key=1, style=dashed, color=red, label=specProps];
m1_154 -> m1_102  [key=1, style=dashed, color=red, label="System.StringComparer"];
m1_154 -> m1_113  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_155 -> m1_102  [key=1, style=dashed, color=red, label=optionSpecs];
m1_156 -> m1_106  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m1_156 -> m1_110  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m1_157 -> m1_113  [key=1, style=dashed, color=darkseagreen4, label=token];
}
