digraph  {
m0_40 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="111-111", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="InstanceBuilderTests.cs"];
m0_41 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="116-120", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="InstanceBuilderTests.cs"];
m0_42 [label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="123-123", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="InstanceBuilderTests.cs"];
m0_43 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="111-111", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="InstanceBuilderTests.cs"];
m0_150 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", file="InstanceBuilderTests.cs"];
m0_172 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilderTests.cs"];
m0_20 [label="Entry lambda expression", span="48-48", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_26 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="65-65", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="InstanceBuilderTests.cs"];
m0_15 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="42-42", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="InstanceBuilderTests.cs"];
m0_11 [label="Entry Unk.FirstOrDefault", span="", cluster="Unk.FirstOrDefault", file="InstanceBuilderTests.cs"];
m0_14 [label="Exit lambda expression", span="27-27", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_274 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingValueOptionError()", span="653-653", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingValueOptionError()", file="InstanceBuilderTests.cs"];
m0_275 [label="var expectedResult = new[] { new MissingValueOptionError(NameInfo.EmptyName) }", span="656-656", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingValueOptionError()", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_276 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredValue(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="659-663", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingValueOptionError()", color=green, community=1, file="InstanceBuilderTests.cs"];
m0_277 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="666-666", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingValueOptionError()", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_278 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingValueOptionError()", span="653-653", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingValueOptionError()", file="InstanceBuilderTests.cs"];
m0_5 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="17-17", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs"];
m0_233 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="557-557", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_234 [label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="560-560", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_235 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="563-567", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_236 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="570-570", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_237 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="557-557", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_159 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="406-406", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="InstanceBuilderTests.cs"];
m0_160 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="411-415", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="InstanceBuilderTests.cs"];
m0_161 [label="expected.ShouldBeEquivalentTo(result.Value.StringSequence)", span="418-418", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="InstanceBuilderTests.cs"];
m0_162 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="406-406", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="InstanceBuilderTests.cs"];
m0_220 [label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283", cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs"];
m0_82 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", file="InstanceBuilderTests.cs"];
m0_151 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="384-384", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="InstanceBuilderTests.cs"];
m0_152 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="389-393", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="InstanceBuilderTests.cs"];
m0_153 [label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="396-396", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="InstanceBuilderTests.cs"];
m0_154 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="384-384", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="InstanceBuilderTests.cs"];
m0_62 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", file="InstanceBuilderTests.cs"];
m0_143 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="362-362", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="InstanceBuilderTests.cs"];
m0_144 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceWithoutRange(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="367-371", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="InstanceBuilderTests.cs"];
m0_145 [label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="374-374", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="InstanceBuilderTests.cs"];
m0_146 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="362-362", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="InstanceBuilderTests.cs"];
m0_22 [label="Exit lambda expression", span="48-48", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_55 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="156-156", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="InstanceBuilderTests.cs"];
m0_56 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="161-165", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="InstanceBuilderTests.cs"];
m0_57 [label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="168-168", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="InstanceBuilderTests.cs"];
m0_58 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="156-156", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="InstanceBuilderTests.cs"];
m0_241 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="576-576", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_243 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="582-586", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_244 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="589-589", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_242 [label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="579-579", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_245 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="576-576", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_266 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="635-635", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="InstanceBuilderTests.cs"];
m0_267 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="640-644", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="InstanceBuilderTests.cs"];
m0_268 [label="Assert.True(expected.Equals(result.Value.StringValue))", span="647-647", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="InstanceBuilderTests.cs"];
m0_269 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="635-635", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="InstanceBuilderTests.cs"];
m0_54 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", file="InstanceBuilderTests.cs"];
m0_207 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="499-499", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs"];
m0_209 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="506-510", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs"];
m0_210 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="513-513", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs"];
m0_208 [label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="501-504", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs"];
m0_211 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="499-499", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs"];
m0_187 [label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="12-12", cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="InstanceBuilderTests.cs"];
m0_31 [label="se.Item2", span="48-48", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_32 [label="Exit lambda expression", span="48-48", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_33 [label="Entry lambda expression", span="48-48", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_34 [label="se.Value", span="48-48", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_0 [label="Entry CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>, System.StringComparer)", span="14-14", cluster="CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>, System.StringComparer)", file="InstanceBuilderTests.cs"];
m0_3 [label="Exit CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>, System.StringComparer)", span="14-14", cluster="CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>, System.StringComparer)", file="InstanceBuilderTests.cs"];
m0_4 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="InstanceBuilderTests.cs"];
m0_1 [label="var sequencesAndErrors = propertyTuples\r\n                .Select(\r\n                    pt =>\r\n                    {\r\n                        var matched = options.FirstOrDefault(s =>\r\n                            s.Key.MatchName(((OptionSpecification)pt.Specification).ShortName, ((OptionSpecification)pt.Specification).LongName, comparer)).ToMaybe();\r\n                        return matched.IsJust()\r\n                            ? (\r\n                                from sequence in matched\r\n                                from converted in\r\n                                    converter(\r\n                                        sequence.Value,\r\n                                        pt.Property.PropertyType,\r\n                                        pt.Specification.TargetType != TargetType.Sequence)\r\n                                select Tuple.Create(\r\n                                    pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>())\r\n                               )\r\n                                .GetValueOrDefault(\r\n                                    Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                                        pt,\r\n                                        Maybe.Just<Error>(\r\n                                            new BadFormatConversionError(\r\n                                                ((OptionSpecification)pt.Specification).FromOptionSpecification()))))\r\n                            : Tuple.Create(pt, Maybe.Nothing<Error>());\r\n                    }\r\n                )", span="20-45", cluster="CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>, System.StringComparer)", file="InstanceBuilderTests.cs"];
m0_2 [label="return Result.Succeed(\r\n                sequencesAndErrors.Select(se => se.Item1),\r\n                sequencesAndErrors.Select(se => se.Item2).OfType<Just<Error>>().Select(se => se.Value));", span="46-48", cluster="CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>, System.StringComparer)", file="InstanceBuilderTests.cs"];
m0_224 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="538-538", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs"];
m0_225 [label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="541-541", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs"];
m0_226 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequired(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="544-548", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs"];
m0_227 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="551-551", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs"];
m0_228 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="538-538", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs"];
m0_12 [label="Entry lambda expression", span="27-27", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_8 [label="var matched = options.FirstOrDefault(s =>\r\n                            s.Key.MatchName(((OptionSpecification)pt.Specification).ShortName, ((OptionSpecification)pt.Specification).LongName, comparer)).ToMaybe()", span="24-25", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_21 [label="new FakeOptions()", span="48-48", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_18 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="42-42", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="InstanceBuilderTests.cs"];
m0_78 [label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316", cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs"];
m0_184 [label="Entry lambda expression", span="444-444", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_24 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithDouble(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="70-74", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="InstanceBuilderTests.cs"];
m0_9 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilderTests.cs"];
m0_7 [label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="338-338", cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="InstanceBuilderTests.cs"];
m0_27 [label="Entry lambda expression", span="71-71", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_30 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", file="InstanceBuilderTests.cs"];
m0_23 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="65-65", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="InstanceBuilderTests.cs"];
m0_10 [label="Entry CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", span="90-90", cluster="CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", file="InstanceBuilderTests.cs"];
m0_25 [label="Assert.Equal(expected, result.Value.DoubleValue)", span="77-77", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="InstanceBuilderTests.cs"];
m0_28 [label="new FakeOptionsWithDouble()", span="71-71", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_29 [label="Exit lambda expression", span="71-71", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_35 [label="Entry Unk.SequenceEqual", span="", cluster="Unk.SequenceEqual", file="InstanceBuilderTests.cs"];
m0_131 [label="Entry lambda expression", span="320-320", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_132 [label="new FakeOptionsWithEnum()", span="320-320", cluster="lambda expression", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_133 [label="Exit lambda expression", span="320-320", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_279 [label="Entry lambda expression", span="660-660", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_280 [label="new FakeOptionWithRequiredValue()", span="660-660", cluster="lambda expression", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_281 [label="Exit lambda expression", span="660-660", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_287 [label="Entry lambda expression", span="679-679", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_288 [label="new FakeOptionWithRequiredValue()", span="679-679", cluster="lambda expression", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_289 [label="Exit lambda expression", span="679-679", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_106 [label="new FakeOptionsWithEnum()", span="263-263", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_116 [label="new FakeOptionsWithEnum()", span="282-282", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_124 [label="new FakeOptionsWithEnum()", span="301-301", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_36 [label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>", span="", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_44 [label="Entry lambda expression", span="117-117", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_51 [label="Entry lambda expression", span="140-140", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_59 [label="Entry lambda expression", span="162-162", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_70 [label="Entry lambda expression", span="181-181", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_79 [label="Entry lambda expression", span="200-200", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_88 [label="Entry lambda expression", span="220-220", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_96 [label="Entry lambda expression", span="239-239", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_105 [label="Entry lambda expression", span="263-263", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_115 [label="Entry lambda expression", span="282-282", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_123 [label="Entry lambda expression", span="301-301", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_140 [label="Entry lambda expression", span="345-345", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_147 [label="Entry lambda expression", span="368-368", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_155 [label="Entry lambda expression", span="390-390", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_163 [label="Entry lambda expression", span="412-412", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_194 [label="Entry lambda expression", span="467-467", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_204 [label="Entry lambda expression", span="487-487", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_212 [label="Entry lambda expression", span="507-507", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_221 [label="Entry lambda expression", span="527-527", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_229 [label="Entry lambda expression", span="545-545", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_238 [label="Entry lambda expression", span="564-564", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_247 [label="Entry lambda expression", span="583-583", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_255 [label="Entry lambda expression", span="602-602", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_263 [label="Entry lambda expression", span="621-621", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_271 [label="Entry lambda expression", span="641-641", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_107 [label="Exit lambda expression", span="263-263", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_117 [label="Exit lambda expression", span="282-282", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_125 [label="Exit lambda expression", span="301-301", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_13 [label="Entry Unk.IsJust", span="", cluster="Unk.IsJust", file="InstanceBuilderTests.cs"];
m0_38 [label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>", span="", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_37 [label="System.StringComparer", span="", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_46 [label="Exit lambda expression", span="117-117", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_45 [label="new FakeOptions()", span="117-117", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_53 [label="Exit lambda expression", span="140-140", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_52 [label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="140-140", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_61 [label="Exit lambda expression", span="162-162", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_60 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="162-162", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_72 [label="Exit lambda expression", span="181-181", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_71 [label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="181-181", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_81 [label="Exit lambda expression", span="200-200", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_80 [label="new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="200-200", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_90 [label="Exit lambda expression", span="220-220", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_89 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="220-220", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_98 [label="Exit lambda expression", span="239-239", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_97 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="239-239", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_142 [label="Exit lambda expression", span="345-345", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_141 [label="new FakeOptionsWithValues()", span="345-345", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_149 [label="Exit lambda expression", span="368-368", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_148 [label="new FakeOptionsWithSequenceWithoutRange()", span="368-368", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_157 [label="Exit lambda expression", span="390-390", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_156 [label="new FakeOptionsWithSequenceAndSeparator()", span="390-390", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_165 [label="Exit lambda expression", span="412-412", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_164 [label="new FakeOptionsWithSequenceAndSeparator()", span="412-412", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_196 [label="Exit lambda expression", span="467-467", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_195 [label="new FakeOptionsWithSets()", span="467-467", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_206 [label="Exit lambda expression", span="487-487", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_205 [label="new FakeOptionWithRequiredAndSet()", span="487-487", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_214 [label="Exit lambda expression", span="507-507", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_213 [label="new FakeOptionWithRequiredAndSet()", span="507-507", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_223 [label="Exit lambda expression", span="527-527", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_222 [label="new FakeOptionWithRequiredAndSet()", span="527-527", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_231 [label="Exit lambda expression", span="545-545", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_230 [label="new FakeOptionWithRequired()", span="545-545", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_240 [label="Exit lambda expression", span="564-564", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_239 [label="new FakeOptions()", span="564-564", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_249 [label="Exit lambda expression", span="583-583", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_248 [label="new FakeOptions()", span="583-583", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_257 [label="Exit lambda expression", span="602-602", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_256 [label="new FakeOptions()", span="602-602", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_265 [label="Exit lambda expression", span="621-621", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_264 [label="new FakeOptions()", span="621-621", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_273 [label="Exit lambda expression", span="641-641", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_272 [label="new FakeOptions()", span="641-641", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_173 [label="Entry lambda expression", span="441-441", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_176 [label="Entry lambda expression", span="442-444", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_174 [label="new FakeOptionsWithValues()", span="441-441", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_175 [label="Exit lambda expression", span="441-441", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_178 [label="Exit lambda expression", span="442-444", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_177 [label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="443-444", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_181 [label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="444-444", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_185 [label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="444-444", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_180 [label="Entry lambda expression", span="444-444", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_182 [label="Exit lambda expression", span="444-444", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_186 [label="Exit lambda expression", span="444-444", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_215 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="518-518", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs"];
m0_216 [label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="520-524", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs"];
m0_217 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="526-530", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs"];
m0_218 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="533-533", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs"];
m0_219 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="518-518", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs"];
m0_100 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="257-257", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="InstanceBuilderTests.cs"];
m0_101 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="262-266", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="InstanceBuilderTests.cs"];
m0_102 [label="expected.ShouldBeEquivalentTo(result.Value.Colors)", span="269-269", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="InstanceBuilderTests.cs"];
m0_103 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="257-257", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="InstanceBuilderTests.cs"];
m0_126 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="313-313", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_127 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="316-316", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_128 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''RED'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="319-323", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", color=green, community=1, file="InstanceBuilderTests.cs"];
m0_129 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="326-326", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_130 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="313-313", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_68 [label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="261-261", cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs"];
m0_283 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionWithRequiredValue)", span="673-673", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionWithRequiredValue)", file="InstanceBuilderTests.cs"];
m0_284 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredValue(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="678-682", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionWithRequiredValue)", color=green, community=1, file="InstanceBuilderTests.cs"];
m0_285 [label="expected.ShouldBeEquivalentTo(result.Value)", span="685-685", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionWithRequiredValue)", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_286 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionWithRequiredValue)", span="673-673", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionWithRequiredValue)", file="InstanceBuilderTests.cs"];
m0_166 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="427-427", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs"];
m0_170 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="450-450", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs"];
m0_167 [label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="430-436", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs"];
m0_169 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="440-447", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs"];
m0_168 [label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="437-437", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs"];
m0_171 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="427-427", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs"];
m0_83 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="213-213", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_84 [label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="216-216", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_85 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="219-223", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_86 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="226-226", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_87 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="213-213", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_99 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", file="InstanceBuilderTests.cs"];
m0_258 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="614-614", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_260 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="620-624", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_261 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="627-627", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_259 [label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="617-617", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_262 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="614-614", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_108 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="16-16", cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", file="InstanceBuilderTests.cs"];
m0_63 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="174-174", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceBuilderTests.cs"];
m0_64 [label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="177-177", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceBuilderTests.cs"];
m0_65 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                new[] { ''-s'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="180-184", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceBuilderTests.cs"];
m0_66 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="187-187", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceBuilderTests.cs"];
m0_67 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="174-174", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceBuilderTests.cs"];
m0_134 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="332-332", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs"];
m0_136 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="344-348", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs"];
m0_137 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="351-351", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs"];
m0_135 [label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="335-341", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs"];
m0_138 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="332-332", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs"];
m0_203 [label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", file="InstanceBuilderTests.cs"];
m0_73 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="193-193", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_75 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="199-203", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_76 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="206-206", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_74 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="196-196", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_77 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="193-193", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_114 [label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="305-305", cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs"];
m0_19 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="InstanceBuilderTests.cs"];
m0_91 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="232-232", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_93 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue(),\r\n                new[] { ''one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="238-242", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_94 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="245-245", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_92 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="235-235", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_95 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="232-232", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_198 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="479-479", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceBuilderTests.cs"];
m0_200 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="486-490", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceBuilderTests.cs"];
m0_201 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="493-493", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceBuilderTests.cs"];
m0_199 [label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = null\r\n            }", span="481-484", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceBuilderTests.cs"];
m0_202 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="479-479", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceBuilderTests.cs"];
m0_246 [label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="272-272", cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", file="InstanceBuilderTests.cs"];
m0_158 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", file="InstanceBuilderTests.cs"];
m0_179 [label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="37-37", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="InstanceBuilderTests.cs"];
m0_270 [label="Entry string.Equals(string)", span="0-0", cluster="string.Equals(string)", file="InstanceBuilderTests.cs"];
m0_197 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", file="InstanceBuilderTests.cs"];
m0_183 [label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="InstanceBuilderTests.cs"];
m0_17 [label="Assert.Equal(expected, result.Value.LongValue)", span="54-54", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="InstanceBuilderTests.cs"];
m0_193 [label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294", cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs"];
m0_232 [label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", file="InstanceBuilderTests.cs"];
m0_69 [label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20", cluster="CommandLine.NameInfo.NameInfo(string, string)", file="InstanceBuilderTests.cs"];
m0_16 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="47-51", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="InstanceBuilderTests.cs"];
m0_47 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="134-134", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="InstanceBuilderTests.cs"];
m0_48 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="139-143", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="InstanceBuilderTests.cs"];
m0_49 [label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="146-146", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="InstanceBuilderTests.cs"];
m0_50 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="134-134", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="InstanceBuilderTests.cs"];
m0_39 [label="CommandLine.Core.SpecificationProperty", span="", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", file="InstanceBuilderTests.cs"];
m0_6 [label="Entry Unk.Succeed", span="", cluster="Unk.Succeed", file="InstanceBuilderTests.cs"];
m0_250 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="595-595", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_252 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="601-605", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_253 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="608-608", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_251 [label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="598-598", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_254 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="595-595", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_282 [label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredValue.FakeOptionWithRequiredValue()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredValue.FakeOptionWithRequiredValue()", file="InstanceBuilderTests.cs"];
m0_109 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="275-275", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_110 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="278-278", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_111 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''3'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="281-285", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_112 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="288-288", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_113 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="275-275", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_118 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="294-294", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_119 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="297-297", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_120 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''Yellow'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="300-304", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_121 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="307-307", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_122 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="294-294", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_139 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", file="InstanceBuilderTests.cs"];
m0_188 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="456-456", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs"];
m0_189 [label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl'')),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''))\r\n                }", span="459-463", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs"];
m0_190 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSets(),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="466-470", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs"];
m0_191 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="473-473", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs"];
m0_192 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="456-456", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs"];
m0_104 [label="Entry Unk.ShouldBeEquivalentTo", span="", cluster="Unk.ShouldBeEquivalentTo", file="InstanceBuilderTests.cs"];
m0_290 [label=fakeOptions, span="", file="InstanceBuilderTests.cs"];
m0_291 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span="", file="InstanceBuilderTests.cs"];
m1_13 [label="Entry Unk.Where", span="", cluster="Unk.Where", file="SpecificationExtensions.cs"];
m1_12 [label="Entry Unk.Create", span="", cluster="Unk.Create", file="SpecificationExtensions.cs"];
m1_6 [label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", file="SpecificationExtensions.cs"];
m1_11 [label="Entry Unk.Single", span="", cluster="Unk.Single", file="SpecificationExtensions.cs"];
m1_15 [label="Entry Unk.NotNull", span="", cluster="Unk.NotNull", file="SpecificationExtensions.cs"];
m1_7 [label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", span="16-16", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", file="SpecificationExtensions.cs"];
m1_27 [label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="14-14", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="SpecificationExtensions.cs"];
m1_0 [label="Entry CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", span="17-17", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="SpecificationExtensions.cs"];
m1_1 [label="var tokenPartitions = new[]\r\n                {\r\n                    new KeyValuePair<string, IEnumerable<string>>(''x'', new [] { ''true'' })\r\n                }", span="20-23", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="SpecificationExtensions.cs"];
m1_2 [label="var specProps = new[]\r\n                {\r\n                    SpecificationProperty.Create(\r\n                        new OptionSpecification(''x'', string.Empty, false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), '\0', Maybe.Nothing<object>(), string.Empty, string.Empty, new List<string>(), typeof(bool), TargetType.Switch), \r\n                        typeof(Simple_Options).GetProperties().Single(p => p.Name.Equals(''BoolValue'', StringComparison.Ordinal)),\r\n                        Maybe.Nothing<object>())\r\n                }", span="24-30", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="SpecificationExtensions.cs"];
m1_3 [label="var result = OptionMapper.MapValues(\r\n                specProps.Where(pt => pt.Specification.IsOption()),\r\n                tokenPartitions,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, CultureInfo.InvariantCulture),\r\n                StringComparer.InvariantCulture)", span="33-37", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="SpecificationExtensions.cs"];
m1_4 [label="Assert.NotNull(((Ok<IEnumerable<SpecificationProperty>, Error>)result).Value.Success.Single(\r\n                a => a.Specification.IsOption()\r\n                && ((OptionSpecification)a.Specification).ShortName.Equals(''x'')\r\n                && (bool)((Just<object>)a.Value).Value))", span="40-43", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="SpecificationExtensions.cs"];
m1_5 [label="Exit CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", span="17-17", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="SpecificationExtensions.cs"];
m1_28 [label="Entry lambda expression", span="41-43", cluster="lambda expression", file="SpecificationExtensions.cs"];
m1_16 [label="Entry lambda expression", span="28-28", cluster="lambda expression", file="SpecificationExtensions.cs"];
m1_20 [label="Entry lambda expression", span="34-34", cluster="lambda expression", file="SpecificationExtensions.cs"];
m1_24 [label="Entry lambda expression", span="36-36", cluster="lambda expression", file="SpecificationExtensions.cs"];
m1_17 [label="p.Name.Equals(''BoolValue'', StringComparison.Ordinal)", span="28-28", cluster="lambda expression", file="SpecificationExtensions.cs"];
m1_18 [label="Exit lambda expression", span="28-28", cluster="lambda expression", file="SpecificationExtensions.cs"];
m1_21 [label="pt.Specification.IsOption()", span="34-34", cluster="lambda expression", file="SpecificationExtensions.cs"];
m1_22 [label="Exit lambda expression", span="34-34", cluster="lambda expression", file="SpecificationExtensions.cs"];
m1_25 [label="TypeConverter.ChangeType(vals, type, isScalar, CultureInfo.InvariantCulture)", span="36-36", cluster="lambda expression", file="SpecificationExtensions.cs"];
m1_26 [label="Exit lambda expression", span="36-36", cluster="lambda expression", file="SpecificationExtensions.cs"];
m1_29 [label="a.Specification.IsOption()\r\n                && ((OptionSpecification)a.Specification).ShortName.Equals(''x'')\r\n                && (bool)((Just<object>)a.Value).Value", span="41-43", cluster="lambda expression", file="SpecificationExtensions.cs"];
m1_30 [label="Exit lambda expression", span="41-43", cluster="lambda expression", file="SpecificationExtensions.cs"];
m1_31 [label="Entry Unk.IsOption", span="", cluster="Unk.IsOption", file="SpecificationExtensions.cs"];
m1_32 [label="Entry string.Equals(string)", span="0-0", cluster="string.Equals(string)", file="SpecificationExtensions.cs"];
m1_8 [label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116", cluster="CSharpx.Maybe.Nothing<T>()", file="SpecificationExtensions.cs"];
m1_19 [label="Entry string.Equals(string, System.StringComparison)", span="0-0", cluster="string.Equals(string, System.StringComparison)", file="SpecificationExtensions.cs"];
m1_23 [label="Entry CommandLine.Core.Specification.IsOption()", span="10-10", cluster="CommandLine.Core.Specification.IsOption()", file="SpecificationExtensions.cs"];
m1_14 [label="Entry Unk.MapValues", span="", cluster="Unk.MapValues", file="SpecificationExtensions.cs"];
m1_10 [label="Entry System.Type.GetProperties()", span="0-0", cluster="System.Type.GetProperties()", file="SpecificationExtensions.cs"];
m1_9 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="SpecificationExtensions.cs"];
m2_0 [label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="18-18", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="SpecificationPropertyRules.cs"];
m2_1 [label="return specProps =>\r\n                {\r\n                    var options = specProps.Where(sp => sp.Specification.IsOption() && sp.Value.IsJust());\r\n                    var groups = options.GroupBy(g => ((OptionSpecification)g.Specification).SetName);\r\n                    if (groups.Count() > 1)\r\n                    {\r\n                        return options.Select(s => Maybe.Just<Error>(new MutuallyExclusiveSetError(NameInfo.FromOptionSpecification((OptionSpecification)s.Specification))));\r\n                    }\r\n                    return Enumerable.Empty<Nothing<Error>>();\r\n                };", span="20-29", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="SpecificationPropertyRules.cs"];
m2_2 [label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="18-18", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="SpecificationPropertyRules.cs"];
m2_19 [label="Entry CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", span="152-152", cluster="CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", file="SpecificationPropertyRules.cs"];
m2_57 [label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="52-52", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="SpecificationPropertyRules.cs"];
m2_58 [label="return specProps =>\r\n                {\r\n                    var options = specProps.Where(\r\n                        sp => sp.Specification.ConversionType.ToDescriptor() == DescriptorType.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (!sp.Specification.IsMinNotSpecified() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min)\r\n                            || (!sp.Specification.IsMaxNotSpecified() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max)\r\n                        )\r\n                    );\r\n                    if (options.Any())\r\n                    {\r\n                        return options.Select(s => Maybe.Just<Error>(new SequenceOutOfRangeError(\r\n                            NameInfo.FromSpecification(s.Specification))));\r\n                    }\r\n                    return Enumerable.Empty<Nothing<Error>>();\r\n                };", span="54-70", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="SpecificationPropertyRules.cs"];
m2_59 [label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="52-52", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="SpecificationPropertyRules.cs"];
m2_55 [label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283", cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs"];
m2_40 [label="Entry Unk.Any", span="", cluster="Unk.Any", file="SpecificationPropertyRules.cs"];
m2_10 [label="Entry Unk.Where", span="", cluster="Unk.Where", file="SpecificationPropertyRules.cs"];
m2_14 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()", file="SpecificationPropertyRules.cs"];
m2_56 [label="Entry Unk.FromSpecification", span="", cluster="Unk.FromSpecification", file="SpecificationPropertyRules.cs"];
m2_71 [label="Entry CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", span="137-137", cluster="CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", file="SpecificationPropertyRules.cs"];
m2_50 [label="Entry CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", span="147-147", cluster="CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", file="SpecificationPropertyRules.cs"];
m2_76 [label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316", cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs"];
m2_73 [label="Entry lambda expression", span="66-67", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m2_4 [label="var options = specProps.Where(sp => sp.Specification.IsOption() && sp.Value.IsJust())", span="22-22", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m2_3 [label="Entry lambda expression", span="20-29", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m2_5 [label="var groups = options.GroupBy(g => ((OptionSpecification)g.Specification).SetName)", span="23-23", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m2_15 [label="Entry lambda expression", span="22-22", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m2_7 [label="return options.Select(s => Maybe.Just<Error>(new MutuallyExclusiveSetError(NameInfo.FromOptionSpecification((OptionSpecification)s.Specification))));", span="26-26", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m2_6 [label="groups.Count() > 1", span="24-24", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m2_20 [label="Entry lambda expression", span="23-23", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m2_8 [label="return Enumerable.Empty<Nothing<Error>>();", span="28-28", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m2_9 [label="Exit lambda expression", span="20-29", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m2_23 [label="Entry lambda expression", span="26-26", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m2_16 [label="sp.Specification.IsOption() && sp.Value.IsJust()", span="22-22", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m2_17 [label="Exit lambda expression", span="22-22", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m2_21 [label="((OptionSpecification)g.Specification).SetName", span="23-23", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m2_22 [label="Exit lambda expression", span="23-23", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m2_24 [label="Maybe.Just<Error>(new MutuallyExclusiveSetError(NameInfo.FromOptionSpecification((OptionSpecification)s.Specification)))", span="26-26", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m2_25 [label="Exit lambda expression", span="26-26", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m2_33 [label="List<string> setsWithTrue =\r\n                    specProps.Where(sp => sp.Specification.IsOption() && sp.Value.IsJust() && sp.Specification.Required)\r\n                        .Select(x => ((OptionSpecification)x.Specification).SetName).ToList()", span="36-38", cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs"];
m2_34 [label="var requiredButEmpty =\r\n                    specProps.Where(sp => sp.Value.IsNothing() && \r\n                                          sp.Specification.Required &&\r\n                                          !setsWithTrue.Contains(((OptionSpecification)sp.Specification).SetName)).ToList()", span="40-43", cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs"];
m2_32 [label="Entry lambda expression", span="34-49", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m2_41 [label="Entry lambda expression", span="37-37", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m2_44 [label="Entry lambda expression", span="38-38", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m2_48 [label="sp.Value.IsNothing() && \r\n                                          sp.Specification.Required &&\r\n                                          !setsWithTrue.Contains(((OptionSpecification)sp.Specification).SetName)", span="41-43", cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs"];
m2_35 [label="requiredButEmpty.Any()", span="44-44", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m2_47 [label="Entry lambda expression", span="41-43", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m2_36 [label="return requiredButEmpty.Select(s => Maybe.Just<Error>(new MissingRequiredOptionError(\r\n                            NameInfo.FromSpecification(s.Specification))));", span="45-46", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m2_37 [label="return Enumerable.Empty<Nothing<Error>>();", span="48-48", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m2_38 [label="Exit lambda expression", span="34-49", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m2_52 [label="Entry lambda expression", span="45-46", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m2_42 [label="sp.Specification.IsOption() && sp.Value.IsJust() && sp.Specification.Required", span="37-37", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m2_43 [label="Exit lambda expression", span="37-37", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m2_45 [label="((OptionSpecification)x.Specification).SetName", span="38-38", cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs"];
m2_46 [label="Exit lambda expression", span="38-38", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m2_49 [label="Exit lambda expression", span="41-43", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m2_53 [label="Maybe.Just<Error>(new MissingRequiredOptionError(\r\n                            NameInfo.FromSpecification(s.Specification)))", span="45-46", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m2_54 [label="Exit lambda expression", span="45-46", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m2_61 [label="var options = specProps.Where(\r\n                        sp => sp.Specification.ConversionType.ToDescriptor() == DescriptorType.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (!sp.Specification.IsMinNotSpecified() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min)\r\n                            || (!sp.Specification.IsMaxNotSpecified() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max)\r\n                        )\r\n                    )", span="56-63", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m2_60 [label="Entry lambda expression", span="54-70", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m2_62 [label="options.Any()", span="64-64", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m2_66 [label="Entry lambda expression", span="57-62", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m2_63 [label="return options.Select(s => Maybe.Just<Error>(new SequenceOutOfRangeError(\r\n                            NameInfo.FromSpecification(s.Specification))));", span="66-67", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m2_64 [label="return Enumerable.Empty<Nothing<Error>>();", span="69-69", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m2_65 [label="Exit lambda expression", span="54-70", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m2_67 [label="sp.Specification.ConversionType.ToDescriptor() == DescriptorType.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (!sp.Specification.IsMinNotSpecified() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min)\r\n                            || (!sp.Specification.IsMaxNotSpecified() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max)\r\n                        )", span="57-62", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m2_68 [label="Exit lambda expression", span="57-62", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m2_74 [label="Maybe.Just<Error>(new SequenceOutOfRangeError(\r\n                            NameInfo.FromSpecification(s.Specification)))", span="66-67", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m2_75 [label="Exit lambda expression", span="66-67", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m2_70 [label="Entry CommandLine.Core.Specification.IsMinNotSpecified()", span="76-76", cluster="CommandLine.Core.Specification.IsMinNotSpecified()", file="SpecificationPropertyRules.cs"];
m2_29 [label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="32-32", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", file="SpecificationPropertyRules.cs"];
m2_30 [label="return specProps =>\r\n            {\r\n                List<string> setsWithTrue =\r\n                    specProps.Where(sp => sp.Specification.IsOption() && sp.Value.IsJust() && sp.Specification.Required)\r\n                        .Select(x => ((OptionSpecification)x.Specification).SetName).ToList();\r\n                \r\n                var requiredButEmpty =\r\n                    specProps.Where(sp => sp.Value.IsNothing() && \r\n                                          sp.Specification.Required &&\r\n                                          !setsWithTrue.Contains(((OptionSpecification)sp.Specification).SetName)).ToList();\r\n                    if (requiredButEmpty.Any()) {\r\n                        return requiredButEmpty.Select(s => Maybe.Just<Error>(new MissingRequiredOptionError(\r\n                            NameInfo.FromSpecification(s.Specification))));\r\n                    }\r\n                    return Enumerable.Empty<Nothing<Error>>();\r\n                };", span="34-49", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", color=green, community=0, file="SpecificationPropertyRules.cs"];
m2_31 [label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="32-32", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", file="SpecificationPropertyRules.cs"];
m2_28 [label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="71-71", cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="SpecificationPropertyRules.cs"];
m2_13 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="SpecificationPropertyRules.cs"];
m2_39 [label="Entry Unk.ToList", span="", cluster="Unk.ToList", file="SpecificationPropertyRules.cs"];
m2_69 [label="Entry System.Type.ToDescriptor()", span="22-22", cluster="System.Type.ToDescriptor()", file="SpecificationPropertyRules.cs"];
m2_26 [label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294", cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs"];
m2_18 [label="Entry CommandLine.Core.Specification.IsOption()", span="11-11", cluster="CommandLine.Core.Specification.IsOption()", file="SpecificationPropertyRules.cs"];
m2_27 [label="Entry CommandLine.NameInfo.FromOptionSpecification(CommandLine.Core.OptionSpecification)", span="60-60", cluster="CommandLine.NameInfo.FromOptionSpecification(CommandLine.Core.OptionSpecification)", file="SpecificationPropertyRules.cs"];
m2_11 [label="Entry Unk.GroupBy", span="", cluster="Unk.GroupBy", file="SpecificationPropertyRules.cs"];
m2_12 [label="Entry Unk.Count", span="", cluster="Unk.Count", file="SpecificationPropertyRules.cs"];
m2_51 [label="Entry System.Collections.Generic.List<T>.Contains(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Contains(T)", file="SpecificationPropertyRules.cs"];
m2_72 [label="Entry CommandLine.Core.Specification.IsMaxNotSpecified()", span="81-81", cluster="CommandLine.Core.Specification.IsMaxNotSpecified()", file="SpecificationPropertyRules.cs"];
m2_77 [label=setsWithTrue, span="", file="SpecificationPropertyRules.cs"];
m0_40 -> m0_41  [key=0, style=solid];
m0_40 -> m0_42  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
m0_41 -> m0_9  [key=2, style=dotted];
m0_41 -> m0_42  [key=0, style=solid];
m0_41 -> m0_44  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_42 -> m0_35  [key=2, style=dotted];
m0_42 -> m0_11  [key=2, style=dotted];
m0_42 -> m0_43  [key=0, style=solid];
m0_43 -> m0_40  [key=0, style=bold, color=blue];
m0_20 -> m0_21  [key=0, style=solid];
m0_26 -> m0_23  [key=0, style=bold, color=blue];
m0_15 -> m0_16  [key=0, style=solid];
m0_15 -> m0_17  [key=1, style=dashed, color=darkseagreen4, label=long];
m0_14 -> m0_12  [key=0, style=bold, color=blue];
m0_274 -> m0_275  [key=0, style=solid, color=green];
m0_275 -> m0_276  [key=0, style=solid, color=green];
m0_275 -> m0_68  [key=2, style=dotted, color=green];
m0_275 -> m0_277  [key=1, style=dashed, color=green, label=expectedResult];
m0_276 -> m0_277  [key=0, style=solid, color=green];
m0_276 -> m0_9  [key=2, style=dotted, color=green];
m0_276 -> m0_279  [key=1, style=dashed, color=green, label="lambda expression"];
m0_277 -> m0_278  [key=0, style=solid, color=green];
m0_277 -> m0_35  [key=2, style=dotted, color=green];
m0_277 -> m0_11  [key=2, style=dotted, color=green];
m0_278 -> m0_274  [key=0, style=bold, color=blue];
m0_5 -> m0_0  [key=0, style=bold, color=blue];
m0_233 -> m0_234  [key=0, style=solid];
m0_234 -> m0_69  [key=2, style=dotted];
m0_234 -> m0_235  [key=0, style=solid];
m0_234 -> m0_78  [key=2, style=dotted];
m0_234 -> m0_236  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_235 -> m0_9  [key=2, style=dotted];
m0_235 -> m0_236  [key=0, style=solid];
m0_235 -> m0_238  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_236 -> m0_35  [key=2, style=dotted];
m0_236 -> m0_11  [key=2, style=dotted];
m0_236 -> m0_237  [key=0, style=solid];
m0_237 -> m0_233  [key=0, style=bold, color=blue];
m0_159 -> m0_160  [key=0, style=solid];
m0_159 -> m0_161  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m0_160 -> m0_9  [key=2, style=dotted];
m0_160 -> m0_161  [key=0, style=solid];
m0_160 -> m0_163  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_161 -> m0_104  [key=2, style=dotted];
m0_161 -> m0_162  [key=0, style=solid];
m0_162 -> m0_159  [key=0, style=bold, color=blue];
m0_151 -> m0_152  [key=0, style=solid];
m0_151 -> m0_153  [key=1, style=dashed, color=darkseagreen4, label="long[]"];
m0_152 -> m0_9  [key=2, style=dotted];
m0_152 -> m0_153  [key=0, style=solid];
m0_152 -> m0_155  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_153 -> m0_104  [key=2, style=dotted];
m0_153 -> m0_154  [key=0, style=solid];
m0_154 -> m0_151  [key=0, style=bold, color=blue];
m0_143 -> m0_144  [key=0, style=solid];
m0_143 -> m0_145  [key=1, style=dashed, color=darkseagreen4, label="long[]"];
m0_144 -> m0_9  [key=2, style=dotted];
m0_144 -> m0_145  [key=0, style=solid];
m0_144 -> m0_147  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_145 -> m0_104  [key=2, style=dotted];
m0_145 -> m0_146  [key=0, style=solid];
m0_146 -> m0_143  [key=0, style=bold, color=blue];
m0_22 -> m0_20  [key=0, style=bold, color=blue];
m0_55 -> m0_56  [key=0, style=solid];
m0_55 -> m0_57  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m0_56 -> m0_9  [key=2, style=dotted];
m0_56 -> m0_57  [key=0, style=solid];
m0_56 -> m0_59  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_57 -> m0_35  [key=2, style=dotted];
m0_57 -> m0_11  [key=2, style=dotted];
m0_57 -> m0_58  [key=0, style=solid];
m0_58 -> m0_55  [key=0, style=bold, color=blue];
m0_241 -> m0_242  [key=0, style=solid];
m0_243 -> m0_9  [key=2, style=dotted];
m0_243 -> m0_244  [key=0, style=solid];
m0_243 -> m0_247  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_244 -> m0_35  [key=2, style=dotted];
m0_244 -> m0_11  [key=2, style=dotted];
m0_244 -> m0_245  [key=0, style=solid];
m0_242 -> m0_243  [key=0, style=solid];
m0_242 -> m0_244  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_242 -> m0_246  [key=2, style=dotted];
m0_245 -> m0_241  [key=0, style=bold, color=blue];
m0_266 -> m0_267  [key=0, style=solid];
m0_266 -> m0_268  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_267 -> m0_9  [key=2, style=dotted];
m0_267 -> m0_268  [key=0, style=solid];
m0_267 -> m0_271  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_268 -> m0_11  [key=2, style=dotted];
m0_268 -> m0_269  [key=0, style=solid];
m0_268 -> m0_270  [key=2, style=dotted];
m0_269 -> m0_266  [key=0, style=bold, color=blue];
m0_207 -> m0_208  [key=0, style=solid];
m0_209 -> m0_9  [key=2, style=dotted];
m0_209 -> m0_210  [key=0, style=solid];
m0_209 -> m0_212  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_210 -> m0_104  [key=2, style=dotted];
m0_210 -> m0_211  [key=0, style=solid];
m0_208 -> m0_209  [key=0, style=solid];
m0_208 -> m0_210  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_208 -> m0_203  [key=2, style=dotted];
m0_211 -> m0_207  [key=0, style=bold, color=blue];
m0_31 -> m0_32  [key=0, style=solid];
m0_31 -> m0_33  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
m0_32 -> m0_9  [key=2, style=dotted];
m0_32 -> m0_33  [key=0, style=solid];
m0_32 -> m0_36  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_32 -> m0_30  [key=0, style=bold, color=blue];
m0_33 -> m0_35  [key=2, style=dotted];
m0_33 -> m0_11  [key=2, style=dotted];
m0_33 -> m0_34  [key=0, style=solid];
m0_34 -> m0_31  [key=0, style=bold, color=blue];
m0_34 -> m0_35  [key=0, style=solid];
m0_0 -> m0_1  [key=0, style=solid];
m0_0 -> m0_8  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>"];
m0_0 -> m0_24  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_0 -> m0_9  [key=1, style=dashed, color=darkseagreen4, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>"];
m0_3 -> m0_9  [key=2, style=dotted];
m0_3 -> m0_4  [key=0, style=solid];
m0_3 -> m0_12  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_3 -> m0_0  [key=0, style=bold, color=blue];
m0_4 -> m0_11  [key=2, style=dotted];
m0_4 -> m0_5  [key=0, style=solid];
m0_4 -> m0_10  [key=2, style=dotted];
m0_1 -> m0_3  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_6  [key=2, style=dotted];
m0_1 -> m0_13  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
m0_1 -> m0_4  [key=2, style=dotted];
m0_1 -> m0_7  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_2 -> m0_3  [key=0, style=solid];
m0_2 -> m0_4  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_2 -> m0_7  [key=2, style=dotted];
m0_2 -> m0_8  [key=2, style=dotted];
m0_2 -> m0_5  [key=2, style=dotted];
m0_2 -> m0_6  [key=2, style=dotted];
m0_2 -> m0_27  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_2 -> m0_30  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_2 -> m0_33  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_224 -> m0_225  [key=0, style=solid];
m0_225 -> m0_69  [key=2, style=dotted];
m0_225 -> m0_226  [key=0, style=solid];
m0_225 -> m0_220  [key=2, style=dotted];
m0_225 -> m0_227  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_226 -> m0_9  [key=2, style=dotted];
m0_226 -> m0_227  [key=0, style=solid];
m0_226 -> m0_229  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_227 -> m0_35  [key=2, style=dotted];
m0_227 -> m0_11  [key=2, style=dotted];
m0_227 -> m0_228  [key=0, style=solid];
m0_228 -> m0_224  [key=0, style=bold, color=blue];
m0_12 -> m0_13  [key=0, style=solid];
m0_8 -> m0_9  [key=0, style=solid];
m0_8 -> m0_11  [key=2, style=dotted];
m0_8 -> m0_12  [key=2, style=dotted];
m0_8 -> m0_23  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_21 -> m0_6  [key=2, style=dotted];
m0_21 -> m0_22  [key=0, style=solid];
m0_18 -> m0_15  [key=0, style=bold, color=blue];
m0_184 -> m0_185  [key=0, style=solid];
m0_24 -> m0_25  [key=0, style=solid];
m0_24 -> m0_26  [key=2, style=dotted];
m0_24 -> m0_24  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>"];
m0_24 -> m0_9  [key=2, style=dotted];
m0_24 -> m0_27  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_9 -> m0_10  [key=0, style=solid];
m0_9 -> m0_13  [key=2, style=dotted];
m0_9 -> m0_14  [key=2, style=dotted];
m0_9 -> m0_15  [key=2, style=dotted];
m0_9 -> m0_16  [key=2, style=dotted];
m0_9 -> m0_17  [key=2, style=dotted];
m0_9 -> m0_18  [key=2, style=dotted];
m0_9 -> m0_19  [key=2, style=dotted];
m0_9 -> m0_20  [key=2, style=dotted];
m0_9 -> m0_21  [key=2, style=dotted];
m0_9 -> m0_22  [key=2, style=dotted];
m0_9 -> m0_9  [key=1, style=dashed, color=darkseagreen4, label=sequence];
m0_7 -> m0_8  [key=0, style=solid];
m0_7 -> m0_24  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.SpecificationProperty"];
m0_7 -> m0_9  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.SpecificationProperty"];
m0_27 -> m0_28  [key=0, style=solid];
m0_30 -> m0_31  [key=0, style=solid];
m0_23 -> m0_24  [key=0, style=solid];
m0_23 -> m0_25  [key=1, style=dashed, color=darkseagreen4, label=double];
m0_10 -> m0_7  [key=0, style=bold, color=blue];
m0_25 -> m0_23  [key=0, style=bold, color=blue];
m0_25 -> m0_26  [key=0, style=solid];
m0_25 -> m0_19  [key=2, style=dotted];
m0_28 -> m0_29  [key=0, style=solid];
m0_28 -> m0_30  [key=2, style=dotted];
m0_29 -> m0_27  [key=0, style=bold, color=blue];
m0_35 -> m0_33  [key=0, style=bold, color=blue];
m0_131 -> m0_132  [key=0, style=solid, color=green];
m0_132 -> m0_133  [key=0, style=solid, color=green];
m0_132 -> m0_108  [key=2, style=dotted, color=green];
m0_133 -> m0_131  [key=0, style=bold, color=blue];
m0_279 -> m0_280  [key=0, style=solid, color=green];
m0_280 -> m0_281  [key=0, style=solid, color=green];
m0_280 -> m0_282  [key=2, style=dotted, color=green];
m0_281 -> m0_279  [key=0, style=bold, color=blue];
m0_287 -> m0_288  [key=0, style=solid, color=green];
m0_288 -> m0_289  [key=0, style=solid, color=green];
m0_288 -> m0_282  [key=2, style=dotted, color=green];
m0_289 -> m0_287  [key=0, style=bold, color=blue];
m0_106 -> m0_108  [key=2, style=dotted];
m0_106 -> m0_107  [key=0, style=solid];
m0_116 -> m0_108  [key=2, style=dotted];
m0_116 -> m0_117  [key=0, style=solid];
m0_124 -> m0_108  [key=2, style=dotted];
m0_124 -> m0_125  [key=0, style=solid];
m0_36 -> m0_37  [key=0, style=solid];
m0_36 -> m0_8  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>"];
m0_44 -> m0_45  [key=0, style=solid];
m0_51 -> m0_52  [key=0, style=solid];
m0_59 -> m0_60  [key=0, style=solid];
m0_70 -> m0_71  [key=0, style=solid];
m0_79 -> m0_80  [key=0, style=solid];
m0_88 -> m0_89  [key=0, style=solid];
m0_96 -> m0_97  [key=0, style=solid];
m0_105 -> m0_106  [key=0, style=solid];
m0_115 -> m0_116  [key=0, style=solid];
m0_123 -> m0_124  [key=0, style=solid];
m0_140 -> m0_141  [key=0, style=solid];
m0_147 -> m0_148  [key=0, style=solid];
m0_155 -> m0_156  [key=0, style=solid];
m0_163 -> m0_164  [key=0, style=solid];
m0_194 -> m0_195  [key=0, style=solid];
m0_204 -> m0_205  [key=0, style=solid];
m0_212 -> m0_213  [key=0, style=solid];
m0_221 -> m0_222  [key=0, style=solid];
m0_229 -> m0_230  [key=0, style=solid];
m0_238 -> m0_239  [key=0, style=solid];
m0_247 -> m0_248  [key=0, style=solid];
m0_255 -> m0_256  [key=0, style=solid];
m0_263 -> m0_264  [key=0, style=solid];
m0_271 -> m0_272  [key=0, style=solid];
m0_107 -> m0_105  [key=0, style=bold, color=blue];
m0_117 -> m0_115  [key=0, style=bold, color=blue];
m0_125 -> m0_123  [key=0, style=bold, color=blue];
m0_13 -> m0_14  [key=0, style=solid];
m0_38 -> m0_36  [key=0, style=bold, color=blue];
m0_38 -> m0_9  [key=1, style=dashed, color=darkseagreen4, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>"];
m0_37 -> m0_38  [key=0, style=solid];
m0_37 -> m0_39  [key=2, style=dotted];
m0_37 -> m0_8  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_37 -> m0_24  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_46 -> m0_44  [key=0, style=bold, color=blue];
m0_45 -> m0_6  [key=2, style=dotted];
m0_45 -> m0_46  [key=0, style=solid];
m0_53 -> m0_51  [key=0, style=bold, color=blue];
m0_52 -> m0_53  [key=0, style=solid];
m0_52 -> m0_54  [key=2, style=dotted];
m0_61 -> m0_59  [key=0, style=bold, color=blue];
m0_60 -> m0_61  [key=0, style=solid];
m0_60 -> m0_62  [key=2, style=dotted];
m0_72 -> m0_70  [key=0, style=bold, color=blue];
m0_71 -> m0_72  [key=0, style=solid];
m0_71 -> m0_54  [key=2, style=dotted];
m0_81 -> m0_79  [key=0, style=bold, color=blue];
m0_80 -> m0_81  [key=0, style=solid];
m0_80 -> m0_82  [key=2, style=dotted];
m0_90 -> m0_88  [key=0, style=bold, color=blue];
m0_89 -> m0_90  [key=0, style=solid];
m0_89 -> m0_62  [key=2, style=dotted];
m0_98 -> m0_96  [key=0, style=bold, color=blue];
m0_97 -> m0_98  [key=0, style=solid];
m0_97 -> m0_99  [key=2, style=dotted];
m0_142 -> m0_140  [key=0, style=bold, color=blue];
m0_141 -> m0_139  [key=2, style=dotted];
m0_141 -> m0_142  [key=0, style=solid];
m0_149 -> m0_147  [key=0, style=bold, color=blue];
m0_148 -> m0_149  [key=0, style=solid];
m0_148 -> m0_150  [key=2, style=dotted];
m0_157 -> m0_155  [key=0, style=bold, color=blue];
m0_156 -> m0_157  [key=0, style=solid];
m0_156 -> m0_158  [key=2, style=dotted];
m0_165 -> m0_163  [key=0, style=bold, color=blue];
m0_164 -> m0_165  [key=0, style=solid];
m0_164 -> m0_158  [key=2, style=dotted];
m0_196 -> m0_194  [key=0, style=bold, color=blue];
m0_195 -> m0_196  [key=0, style=solid];
m0_195 -> m0_197  [key=2, style=dotted];
m0_206 -> m0_204  [key=0, style=bold, color=blue];
m0_205 -> m0_203  [key=2, style=dotted];
m0_205 -> m0_206  [key=0, style=solid];
m0_214 -> m0_212  [key=0, style=bold, color=blue];
m0_213 -> m0_203  [key=2, style=dotted];
m0_213 -> m0_214  [key=0, style=solid];
m0_223 -> m0_221  [key=0, style=bold, color=blue];
m0_222 -> m0_203  [key=2, style=dotted];
m0_222 -> m0_223  [key=0, style=solid];
m0_231 -> m0_229  [key=0, style=bold, color=blue];
m0_230 -> m0_231  [key=0, style=solid];
m0_230 -> m0_232  [key=2, style=dotted];
m0_240 -> m0_238  [key=0, style=bold, color=blue];
m0_239 -> m0_6  [key=2, style=dotted];
m0_239 -> m0_240  [key=0, style=solid];
m0_249 -> m0_247  [key=0, style=bold, color=blue];
m0_248 -> m0_6  [key=2, style=dotted];
m0_248 -> m0_249  [key=0, style=solid];
m0_257 -> m0_255  [key=0, style=bold, color=blue];
m0_256 -> m0_6  [key=2, style=dotted];
m0_256 -> m0_257  [key=0, style=solid];
m0_265 -> m0_263  [key=0, style=bold, color=blue];
m0_264 -> m0_6  [key=2, style=dotted];
m0_264 -> m0_265  [key=0, style=solid];
m0_273 -> m0_271  [key=0, style=bold, color=blue];
m0_272 -> m0_6  [key=2, style=dotted];
m0_272 -> m0_273  [key=0, style=solid];
m0_173 -> m0_174  [key=0, style=solid];
m0_176 -> m0_177  [key=0, style=solid];
m0_176 -> m0_181  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m0_176 -> m0_185  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m0_174 -> m0_139  [key=2, style=dotted];
m0_174 -> m0_175  [key=0, style=solid];
m0_175 -> m0_173  [key=0, style=bold, color=blue];
m0_178 -> m0_176  [key=0, style=bold, color=blue];
m0_177 -> m0_178  [key=0, style=solid];
m0_177 -> m0_179  [key=2, style=dotted];
m0_177 -> m0_180  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_181 -> m0_182  [key=0, style=solid];
m0_181 -> m0_183  [key=2, style=dotted];
m0_181 -> m0_184  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_185 -> m0_186  [key=0, style=solid];
m0_185 -> m0_187  [key=2, style=dotted];
m0_180 -> m0_181  [key=0, style=solid];
m0_182 -> m0_180  [key=0, style=bold, color=blue];
m0_186 -> m0_184  [key=0, style=bold, color=blue];
m0_215 -> m0_216  [key=0, style=solid];
m0_216 -> m0_69  [key=2, style=dotted];
m0_216 -> m0_217  [key=0, style=solid];
m0_216 -> m0_220  [key=2, style=dotted];
m0_216 -> m0_218  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_217 -> m0_9  [key=2, style=dotted];
m0_217 -> m0_218  [key=0, style=solid];
m0_217 -> m0_221  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_218 -> m0_35  [key=2, style=dotted];
m0_218 -> m0_11  [key=2, style=dotted];
m0_218 -> m0_219  [key=0, style=solid];
m0_219 -> m0_215  [key=0, style=bold, color=blue];
m0_100 -> m0_101  [key=0, style=solid];
m0_100 -> m0_102  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Colors"];
m0_101 -> m0_9  [key=2, style=dotted];
m0_101 -> m0_102  [key=0, style=solid];
m0_101 -> m0_105  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_102 -> m0_104  [key=2, style=dotted];
m0_102 -> m0_102  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Colors"];
m0_102 -> m0_103  [key=0, style=solid];
m0_103 -> m0_100  [key=0, style=bold, color=blue];
m0_126 -> m0_127  [key=0, style=solid, color=green];
m0_127 -> m0_128  [key=0, style=solid, color=green];
m0_127 -> m0_114  [key=2, style=dotted, color=green];
m0_127 -> m0_69  [key=2, style=dotted, color=green];
m0_127 -> m0_129  [key=1, style=dashed, color=green, label=expectedResult];
m0_128 -> m0_129  [key=0, style=solid, color=green];
m0_128 -> m0_9  [key=2, style=dotted, color=green];
m0_128 -> m0_131  [key=1, style=dashed, color=green, label="lambda expression"];
m0_129 -> m0_130  [key=0, style=solid, color=green];
m0_129 -> m0_35  [key=2, style=dotted, color=green];
m0_129 -> m0_11  [key=2, style=dotted, color=green];
m0_130 -> m0_126  [key=0, style=bold, color=blue];
m0_283 -> m0_284  [key=0, style=solid, color=green];
m0_283 -> m0_285  [key=1, style=dashed, color=green, label="CommandLine.Tests.Fakes.FakeOptionWithRequiredValue"];
m0_284 -> m0_285  [key=0, style=solid, color=green];
m0_284 -> m0_9  [key=2, style=dotted, color=green];
m0_284 -> m0_287  [key=1, style=dashed, color=green, label="lambda expression"];
m0_285 -> m0_286  [key=0, style=solid, color=green];
m0_285 -> m0_104  [key=2, style=dotted, color=green];
m0_286 -> m0_283  [key=0, style=bold, color=blue];
m0_166 -> m0_167  [key=0, style=solid];
m0_170 -> m0_104  [key=2, style=dotted];
m0_170 -> m0_171  [key=0, style=solid];
m0_167 -> m0_170  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_167 -> m0_168  [key=0, style=solid];
m0_167 -> m0_139  [key=2, style=dotted];
m0_169 -> m0_170  [key=0, style=solid];
m0_169 -> m0_172  [key=2, style=dotted];
m0_169 -> m0_173  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_169 -> m0_176  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_168 -> m0_169  [key=0, style=solid];
m0_171 -> m0_166  [key=0, style=bold, color=blue];
m0_83 -> m0_84  [key=0, style=solid];
m0_84 -> m0_69  [key=2, style=dotted];
m0_84 -> m0_85  [key=0, style=solid];
m0_84 -> m0_78  [key=2, style=dotted];
m0_84 -> m0_86  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_85 -> m0_9  [key=2, style=dotted];
m0_85 -> m0_86  [key=0, style=solid];
m0_85 -> m0_88  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_86 -> m0_35  [key=2, style=dotted];
m0_86 -> m0_11  [key=2, style=dotted];
m0_86 -> m0_87  [key=0, style=solid];
m0_87 -> m0_83  [key=0, style=bold, color=blue];
m0_258 -> m0_259  [key=0, style=solid];
m0_260 -> m0_9  [key=2, style=dotted];
m0_260 -> m0_261  [key=0, style=solid];
m0_260 -> m0_263  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_261 -> m0_35  [key=2, style=dotted];
m0_261 -> m0_11  [key=2, style=dotted];
m0_261 -> m0_262  [key=0, style=solid];
m0_259 -> m0_260  [key=0, style=solid];
m0_259 -> m0_261  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_259 -> m0_246  [key=2, style=dotted];
m0_262 -> m0_258  [key=0, style=bold, color=blue];
m0_63 -> m0_64  [key=0, style=solid];
m0_64 -> m0_69  [key=2, style=dotted];
m0_64 -> m0_68  [key=2, style=dotted];
m0_64 -> m0_65  [key=0, style=solid];
m0_64 -> m0_66  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_65 -> m0_9  [key=2, style=dotted];
m0_65 -> m0_66  [key=0, style=solid];
m0_65 -> m0_70  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_66 -> m0_35  [key=2, style=dotted];
m0_66 -> m0_11  [key=2, style=dotted];
m0_66 -> m0_67  [key=0, style=solid];
m0_67 -> m0_63  [key=0, style=bold, color=blue];
m0_134 -> m0_135  [key=0, style=solid];
m0_136 -> m0_9  [key=2, style=dotted];
m0_136 -> m0_137  [key=0, style=solid];
m0_136 -> m0_140  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_137 -> m0_104  [key=2, style=dotted];
m0_137 -> m0_138  [key=0, style=solid];
m0_135 -> m0_136  [key=0, style=solid];
m0_135 -> m0_137  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_135 -> m0_139  [key=2, style=dotted];
m0_138 -> m0_134  [key=0, style=bold, color=blue];
m0_73 -> m0_74  [key=0, style=solid];
m0_75 -> m0_9  [key=2, style=dotted];
m0_75 -> m0_76  [key=0, style=solid];
m0_75 -> m0_79  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_76 -> m0_35  [key=2, style=dotted];
m0_76 -> m0_11  [key=2, style=dotted];
m0_76 -> m0_77  [key=0, style=solid];
m0_74 -> m0_75  [key=0, style=solid];
m0_74 -> m0_76  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_74 -> m0_78  [key=2, style=dotted];
m0_77 -> m0_73  [key=0, style=bold, color=blue];
m0_91 -> m0_92  [key=0, style=solid];
m0_93 -> m0_9  [key=2, style=dotted];
m0_93 -> m0_94  [key=0, style=solid];
m0_93 -> m0_96  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_94 -> m0_35  [key=2, style=dotted];
m0_94 -> m0_11  [key=2, style=dotted];
m0_94 -> m0_95  [key=0, style=solid];
m0_92 -> m0_93  [key=0, style=solid];
m0_92 -> m0_94  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_92 -> m0_78  [key=2, style=dotted];
m0_95 -> m0_91  [key=0, style=bold, color=blue];
m0_198 -> m0_199  [key=0, style=solid];
m0_200 -> m0_9  [key=2, style=dotted];
m0_200 -> m0_201  [key=0, style=solid];
m0_200 -> m0_204  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_201 -> m0_104  [key=2, style=dotted];
m0_201 -> m0_202  [key=0, style=solid];
m0_199 -> m0_200  [key=0, style=solid];
m0_199 -> m0_201  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_199 -> m0_203  [key=2, style=dotted];
m0_202 -> m0_198  [key=0, style=bold, color=blue];
m0_17 -> m0_18  [key=0, style=solid];
m0_17 -> m0_19  [key=2, style=dotted];
m0_16 -> m0_9  [key=2, style=dotted];
m0_16 -> m0_17  [key=0, style=solid];
m0_16 -> m0_20  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_47 -> m0_48  [key=0, style=solid];
m0_47 -> m0_49  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m0_48 -> m0_9  [key=2, style=dotted];
m0_48 -> m0_49  [key=0, style=solid];
m0_48 -> m0_51  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_49 -> m0_35  [key=2, style=dotted];
m0_49 -> m0_11  [key=2, style=dotted];
m0_49 -> m0_50  [key=0, style=solid];
m0_50 -> m0_47  [key=0, style=bold, color=blue];
m0_39 -> m0_24  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.SpecificationProperty"];
m0_250 -> m0_251  [key=0, style=solid];
m0_252 -> m0_9  [key=2, style=dotted];
m0_252 -> m0_253  [key=0, style=solid];
m0_252 -> m0_255  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_253 -> m0_35  [key=2, style=dotted];
m0_253 -> m0_11  [key=2, style=dotted];
m0_253 -> m0_254  [key=0, style=solid];
m0_251 -> m0_252  [key=0, style=solid];
m0_251 -> m0_253  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_251 -> m0_246  [key=2, style=dotted];
m0_254 -> m0_250  [key=0, style=bold, color=blue];
m0_109 -> m0_110  [key=0, style=solid];
m0_110 -> m0_114  [key=2, style=dotted];
m0_110 -> m0_69  [key=2, style=dotted];
m0_110 -> m0_111  [key=0, style=solid];
m0_110 -> m0_112  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_111 -> m0_9  [key=2, style=dotted];
m0_111 -> m0_112  [key=0, style=solid];
m0_111 -> m0_115  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_112 -> m0_35  [key=2, style=dotted];
m0_112 -> m0_11  [key=2, style=dotted];
m0_112 -> m0_113  [key=0, style=solid];
m0_113 -> m0_109  [key=0, style=bold, color=blue];
m0_118 -> m0_119  [key=0, style=solid];
m0_119 -> m0_114  [key=2, style=dotted];
m0_119 -> m0_69  [key=2, style=dotted];
m0_119 -> m0_120  [key=0, style=solid];
m0_119 -> m0_121  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_120 -> m0_9  [key=2, style=dotted];
m0_120 -> m0_121  [key=0, style=solid];
m0_120 -> m0_123  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_121 -> m0_35  [key=2, style=dotted];
m0_121 -> m0_11  [key=2, style=dotted];
m0_121 -> m0_122  [key=0, style=solid];
m0_122 -> m0_118  [key=0, style=bold, color=blue];
m0_188 -> m0_189  [key=0, style=solid];
m0_189 -> m0_69  [key=2, style=dotted];
m0_189 -> m0_190  [key=0, style=solid];
m0_189 -> m0_193  [key=2, style=dotted];
m0_189 -> m0_191  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_190 -> m0_9  [key=2, style=dotted];
m0_190 -> m0_191  [key=0, style=solid];
m0_190 -> m0_194  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_191 -> m0_35  [key=2, style=dotted];
m0_191 -> m0_11  [key=2, style=dotted];
m0_191 -> m0_192  [key=0, style=solid];
m0_192 -> m0_188  [key=0, style=bold, color=blue];
m0_290 -> m0_13  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
m0_291 -> m0_181  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m0_291 -> m0_185  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_0 -> m1_1  [key=0, style=solid];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_6  [key=2, style=dotted];
m1_1 -> m1_3  [key=1, style=dashed, color=darkseagreen4, label=tokenPartitions];
m1_2 -> m1_3  [key=0, style=solid];
m1_2 -> m1_7  [key=2, style=dotted];
m1_2 -> m1_8  [key=2, style=dotted];
m1_2 -> m1_9  [key=2, style=dotted];
m1_2 -> m1_10  [key=2, style=dotted];
m1_2 -> m1_11  [key=2, style=dotted];
m1_2 -> m1_12  [key=2, style=dotted];
m1_2 -> m1_16  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_3 -> m1_4  [key=0, style=solid];
m1_3 -> m1_13  [key=2, style=dotted];
m1_3 -> m1_14  [key=2, style=dotted];
m1_3 -> m1_20  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_3 -> m1_24  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_4 -> m1_5  [key=0, style=solid];
m1_4 -> m1_11  [key=2, style=dotted];
m1_4 -> m1_15  [key=2, style=dotted];
m1_4 -> m1_28  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_4 -> m1_4  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Collections.Generic.IEnumerable<CommandLine.Core.Specification> ThrowingValidate"];
m1_5 -> m1_0  [key=0, style=bold, color=blue];
m1_28 -> m1_29  [key=0, style=solid];
m1_16 -> m1_17  [key=0, style=solid];
m1_20 -> m1_21  [key=0, style=solid];
m1_24 -> m1_25  [key=0, style=solid];
m1_17 -> m1_18  [key=0, style=solid];
m1_17 -> m1_19  [key=2, style=dotted];
m1_18 -> m1_16  [key=0, style=bold, color=blue];
m1_21 -> m1_22  [key=0, style=solid];
m1_21 -> m1_23  [key=2, style=dotted];
m1_22 -> m1_20  [key=0, style=bold, color=blue];
m1_25 -> m1_26  [key=0, style=solid];
m1_25 -> m1_27  [key=2, style=dotted];
m1_26 -> m1_24  [key=0, style=bold, color=blue];
m1_29 -> m1_30  [key=0, style=solid];
m1_29 -> m1_31  [key=2, style=dotted];
m1_29 -> m1_32  [key=2, style=dotted];
m1_30 -> m1_28  [key=0, style=bold, color=blue];
m2_0 -> m2_1  [key=0, style=solid];
m2_1 -> m2_2  [key=0, style=solid];
m2_1 -> m2_4  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m2_2 -> m2_0  [key=0, style=bold, color=blue];
m2_57 -> m2_58  [key=0, style=solid];
m2_58 -> m2_59  [key=0, style=solid];
m2_58 -> m2_61  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m2_59 -> m2_57  [key=0, style=bold, color=blue];
m2_73 -> m2_74  [key=0, style=solid];
m2_4 -> m2_5  [key=0, style=solid];
m2_4 -> m2_10  [key=2, style=dotted];
m2_4 -> m2_15  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_4 -> m2_7  [key=1, style=dashed, color=darkseagreen4, label=options];
m2_3 -> m2_4  [key=0, style=solid];
m2_5 -> m2_6  [key=0, style=solid];
m2_5 -> m2_11  [key=2, style=dotted];
m2_5 -> m2_20  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_15 -> m2_16  [key=0, style=solid];
m2_7 -> m2_9  [key=0, style=solid];
m2_7 -> m2_13  [key=2, style=dotted];
m2_7 -> m2_23  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_6 -> m2_7  [key=0, style=solid];
m2_6 -> m2_8  [key=0, style=solid];
m2_6 -> m2_12  [key=2, style=dotted];
m2_20 -> m2_21  [key=0, style=solid];
m2_8 -> m2_9  [key=0, style=solid];
m2_8 -> m2_14  [key=2, style=dotted];
m2_9 -> m2_3  [key=0, style=bold, color=blue];
m2_23 -> m2_24  [key=0, style=solid];
m2_16 -> m2_17  [key=0, style=solid];
m2_16 -> m2_18  [key=2, style=dotted];
m2_16 -> m2_19  [key=2, style=dotted];
m2_17 -> m2_15  [key=0, style=bold, color=blue];
m2_21 -> m2_22  [key=0, style=solid];
m2_22 -> m2_20  [key=0, style=bold, color=blue];
m2_24 -> m2_25  [key=0, style=solid];
m2_24 -> m2_26  [key=2, style=dotted];
m2_24 -> m2_27  [key=2, style=dotted];
m2_24 -> m2_28  [key=2, style=dotted];
m2_25 -> m2_23  [key=0, style=bold, color=blue];
m2_33 -> m2_34  [key=0, style=solid, color=green];
m2_33 -> m2_10  [key=2, style=dotted, color=green];
m2_33 -> m2_13  [key=2, style=dotted, color=green];
m2_33 -> m2_39  [key=2, style=dotted, color=green];
m2_33 -> m2_41  [key=1, style=dashed, color=green, label="lambda expression"];
m2_33 -> m2_44  [key=1, style=dashed, color=green, label="lambda expression"];
m2_33 -> m2_48  [key=1, style=dashed, color=green, label=setsWithTrue];
m2_34 -> m2_35  [key=0, style=solid, color=green];
m2_34 -> m2_10  [key=2, style=dotted, color=green];
m2_34 -> m2_39  [key=2, style=dotted, color=green];
m2_34 -> m2_47  [key=1, style=dashed, color=green, label="lambda expression"];
m2_34 -> m2_36  [key=1, style=dashed, color=green, label=requiredButEmpty];
m2_32 -> m2_33  [key=0, style=solid, color=green];
m2_32 -> m2_34  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m2_41 -> m2_42  [key=0, style=solid];
m2_44 -> m2_45  [key=0, style=solid, color=green];
m2_48 -> m2_49  [key=0, style=solid, color=green];
m2_48 -> m2_50  [key=2, style=dotted, color=green];
m2_48 -> m2_51  [key=2, style=dotted, color=green];
m2_35 -> m2_36  [key=0, style=solid];
m2_35 -> m2_37  [key=0, style=solid];
m2_35 -> m2_40  [key=2, style=dotted];
m2_47 -> m2_48  [key=0, style=solid, color=green];
m2_36 -> m2_38  [key=0, style=solid];
m2_36 -> m2_13  [key=2, style=dotted];
m2_36 -> m2_52  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_37 -> m2_38  [key=0, style=solid];
m2_37 -> m2_14  [key=2, style=dotted];
m2_38 -> m2_32  [key=0, style=bold, color=blue];
m2_52 -> m2_53  [key=0, style=solid];
m2_42 -> m2_43  [key=0, style=solid];
m2_42 -> m2_18  [key=2, style=dotted];
m2_42 -> m2_19  [key=2, style=dotted];
m2_43 -> m2_41  [key=0, style=bold, color=blue];
m2_45 -> m2_46  [key=0, style=solid, color=green];
m2_46 -> m2_44  [key=0, style=bold, color=blue];
m2_49 -> m2_47  [key=0, style=bold, color=blue];
m2_53 -> m2_54  [key=0, style=solid];
m2_53 -> m2_55  [key=2, style=dotted];
m2_53 -> m2_56  [key=2, style=dotted];
m2_53 -> m2_28  [key=2, style=dotted];
m2_54 -> m2_52  [key=0, style=bold, color=blue];
m2_61 -> m2_62  [key=0, style=solid];
m2_61 -> m2_10  [key=2, style=dotted];
m2_61 -> m2_66  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_61 -> m2_63  [key=1, style=dashed, color=darkseagreen4, label=options];
m2_60 -> m2_61  [key=0, style=solid];
m2_62 -> m2_63  [key=0, style=solid];
m2_62 -> m2_64  [key=0, style=solid];
m2_62 -> m2_40  [key=2, style=dotted];
m2_66 -> m2_67  [key=0, style=solid];
m2_63 -> m2_65  [key=0, style=solid];
m2_63 -> m2_13  [key=2, style=dotted];
m2_63 -> m2_73  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_64 -> m2_65  [key=0, style=solid];
m2_64 -> m2_14  [key=2, style=dotted];
m2_65 -> m2_60  [key=0, style=bold, color=blue];
m2_67 -> m2_68  [key=0, style=solid];
m2_67 -> m2_69  [key=2, style=dotted];
m2_67 -> m2_19  [key=2, style=dotted];
m2_67 -> m2_70  [key=2, style=dotted];
m2_67 -> m2_71  [key=2, style=dotted];
m2_67 -> m2_72  [key=2, style=dotted];
m2_68 -> m2_66  [key=0, style=bold, color=blue];
m2_74 -> m2_75  [key=0, style=solid];
m2_74 -> m2_76  [key=2, style=dotted];
m2_74 -> m2_56  [key=2, style=dotted];
m2_74 -> m2_28  [key=2, style=dotted];
m2_75 -> m2_73  [key=0, style=bold, color=blue];
m2_29 -> m2_30  [key=0, style=solid, color=green];
m2_30 -> m2_31  [key=0, style=solid, color=green];
m2_30 -> m2_33  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m2_30 -> m2_34  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m2_31 -> m2_29  [key=0, style=bold, color=blue];
m2_77 -> m2_48  [key=1, style=dashed, color=green, label=setsWithTrue];
}
