digraph  {
n14 [label="System.Collections.Generic.IEnumerable<string>", span=""];
n15 [label="System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>", span=""];
n0 [cluster="CommandLine.Core.ArgumentsExtensions.Preprocess(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", label="Entry CommandLine.Core.ArgumentsExtensions.Preprocess(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="11-11"];
n1 [cluster="CommandLine.Core.ArgumentsExtensions.Preprocess(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", color=red, community=1, label="0: return preprocessorLookup.TryHead().MapMaybe(\r\n                func =>\r\n                    {\r\n                        var errors = func(arguments);\r\n                        return errors.Any()\r\n                            ? errors\r\n                            : arguments.Preprocess(preprocessorLookup.TailNoFail());\r\n                    },\r\n                Enumerable.Empty<Error>());", span="17-25"];
n7 [cluster="lambda expression", label="var errors = func(arguments)", span="20-20"];
n8 [cluster="lambda expression", label="return errors.Any()\r\n                            ? errors\r\n                            : arguments.Preprocess(preprocessorLookup.TailNoFail());", span="21-23"];
n2 [cluster="CommandLine.Core.ArgumentsExtensions.Preprocess(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", label="Exit CommandLine.Core.ArgumentsExtensions.Preprocess(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="11-11"];
n3 [cluster="System.Collections.Generic.IEnumerable<T>.TryHead<T>()", label="Entry System.Collections.Generic.IEnumerable<T>.TryHead<T>()", span="318-318"];
n4 [cluster="System.Linq.Enumerable.Empty<TResult>()", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
n5 [cluster="Unk.MapMaybe", label="Entry Unk.MapMaybe", span=""];
n6 [cluster="lambda expression", label="Entry lambda expression", span="18-24"];
n10 [cluster="Unk.func", label="Entry Unk.func", span=""];
n9 [cluster="lambda expression", label="Exit lambda expression", span="18-24"];
n11 [cluster="Unk.Any", label="Entry Unk.Any", span=""];
n12 [cluster="System.Collections.Generic.IEnumerable<T>.TailNoFail<T>()", label="Entry System.Collections.Generic.IEnumerable<T>.TailNoFail<T>()", span="361-361"];
n13 [cluster="System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", label="Entry System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="11-11"];
m2_67 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12"];
m2_105 [cluster="T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", file="InstanceBuilder.cs", label="Entry T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="82-82"];
m2_14 [cluster="Unk.ThrowingValidate", file="InstanceBuilder.cs", label="Entry Unk.ThrowingValidate", span=""];
m2_98 [cluster="string.MatchName(string, string, System.StringComparer)", file="InstanceBuilder.cs", label="Entry string.MatchName(string, string, System.StringComparer)", span="8-8"];
m2_26 [cluster="Unk.GetType", file="InstanceBuilder.cs", label="Entry Unk.GetType", span=""];
m2_141 [cluster="Unk.GetParameters", file="InstanceBuilder.cs", label="Entry Unk.GetParameters", span=""];
m2_91 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="14-14"];
m2_0 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="14-14"];
m2_1 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", color=green, community=0, file="InstanceBuilder.cs", label="0: var typeInfo = factory.MapMaybeOrDefault(f => f().GetType(), typeof(T))", span="22-22"];
m2_2 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="InstanceBuilder.cs", label="var specProps = typeInfo.GetSpecifications(pi => SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>()))", span="24-25"];
m2_7 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", color=green, community=0, file="InstanceBuilder.cs", label="0: Func<ParserResult<T>> buildUp = () =>\r\n            {\r\n                var tokenizerResult = tokenizer(arguments, optionSpecs);\r\n\r\n                var tokens = tokenizerResult.SucceededWith();\r\n\r\n                var partitions = TokenPartitioner.Partition(\r\n                    tokens,\r\n                    name => TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer));\r\n\r\n                var optionSpecPropsResult =\r\n                    OptionMapper.MapValues(\r\n                        (from pt in specProps where pt.Specification.IsOption() select pt),\r\n                        partitions.Options,\r\n                        (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture),\r\n                        nameComparer);\r\n\r\n                var valueSpecPropsResult =\r\n                    ValueMapper.MapValues(\r\n                        (from pt in specProps where pt.Specification.IsValue() select pt),\r\n                        partitions.Values,\r\n                        (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture));\r\n\r\n                var missingValueErrors = from token in partitions.Errors\r\n                    select\r\n                        new MissingValueOptionError(\r\n                            optionSpecs.Single(o => token.Text.MatchName(o.ShortName, o.LongName, nameComparer))\r\n                                .FromOptionSpecification());\r\n\r\n                var specPropsWithValue =\r\n                    optionSpecPropsResult.SucceededWith().Concat(valueSpecPropsResult.SucceededWith());\r\n\r\n                Func<T> buildMutable = () =>\r\n                {\r\n                    var mutable = factory.MapMaybeOrDefault(f => f(), Activator.CreateInstance<T>());\r\n                    mutable =\r\n                        mutable.SetProperties(specPropsWithValue, sp => sp.Value.IsJust(), sp => sp.Value.FromJustOrFail())\r\n                            .SetProperties(\r\n                                specPropsWithValue,\r\n                                sp => sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust(),\r\n                                sp => sp.Specification.DefaultValue.FromJustOrFail())\r\n                            .SetProperties(\r\n                                specPropsWithValue,\r\n                                sp =>\r\n                                    sp.Value.IsNothing() && sp.Specification.TargetType == TargetType.Sequence\r\n                                    && sp.Specification.DefaultValue.MatchNothing(),\r\n                                sp => sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray());\r\n                    return mutable;\r\n                };\r\n\r\n                Func<T> buildImmutable = () =>\r\n                {\r\n                    var ctor = typeInfo.GetConstructor((from sp in specProps select sp.Property.PropertyType).ToArray());\r\n                    var values = (from prms in ctor.GetParameters()\r\n                        join sp in specPropsWithValue on prms.Name.ToLower() equals sp.Property.Name.ToLower()\r\n                        select\r\n                            sp.Value.MapMaybeOrDefault(\r\n                                v => v,\r\n                                sp.Specification.DefaultValue.MapMaybeOrDefault(\r\n                                    d => d,\r\n                                    sp.Specification.ConversionType.CreateDefaultForImmutable()))).ToArray();\r\n                    var immutable = (T)ctor.Invoke(values);\r\n                    return immutable;\r\n                };\r\n\r\n                var instance = typeInfo.IsMutable() ? buildMutable() : buildImmutable();\r\n\r\n                var validationErrors = specPropsWithValue.Validate(SpecificationPropertyRules.Lookup(tokens));\r\n\r\n                var allErrors =\r\n                    tokenizerResult.SuccessfulMessages()\r\n                        .Concat(missingValueErrors)\r\n                        .Concat(optionSpecPropsResult.SuccessfulMessages())\r\n                        .Concat(valueSpecPropsResult.SuccessfulMessages())\r\n                        .Concat(validationErrors)\r\n                        .Memorize();\r\n\r\n                var warnings = from e in allErrors where nonFatalErrors.Contains(e.Tag) select e;\r\n\r\n                return allErrors.Except(warnings).ToParserResult(instance);\r\n            }", span="42-122"];
m2_5 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", color=green, community=0, file="InstanceBuilder.cs", label="0: Func<T> makeDefault = () =>\r\n                typeof(T).IsMutable()\r\n                    ? factory.MapMaybeOrDefault(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="33-37"];
m2_4 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="InstanceBuilder.cs", label="var optionSpecs = specs\r\n                .ThrowingValidate(SpecificationGuards.Lookup)\r\n                .OfType<OptionSpecification>()", span="29-31"];
m2_6 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="InstanceBuilder.cs", label="Func<IEnumerable<Error>, ParserResult<T>> notParsed =\r\n                errs => new NotParsed<T>(makeDefault().GetType().ToTypeInfo(), errs)", span="39-40"];
m2_8 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="InstanceBuilder.cs", label="var preprocessorErrors = arguments.Any()\r\n                ? arguments.Preprocess(PreprocessorGuards.Lookup(nameComparer))\r\n                : Enumerable.Empty<Error>()", span="124-126"];
m2_9 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="InstanceBuilder.cs", label="var result = arguments.Any()\r\n                ? preprocessorErrors.Any()\r\n                    ? notParsed(preprocessorErrors)\r\n                    : buildUp()\r\n                : buildUp()", span="128-132"];
m2_3 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="InstanceBuilder.cs", label="var specs = from pt in specProps select pt.Specification", span="27-27"];
m2_10 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="InstanceBuilder.cs", label="return result;", span="134-134"];
m2_11 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="InstanceBuilder.cs", label="Exit CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="14-14"];
m2_39 [cluster="Unk.>", file="InstanceBuilder.cs", label="Entry Unk.>", span=""];
m2_48 [cluster="System.Type.ToTypeInfo()", file="InstanceBuilder.cs", label="Entry System.Type.ToTypeInfo()", span="174-174"];
m2_12 [cluster="Unk.MapMaybeOrDefault", file="InstanceBuilder.cs", label="Entry Unk.MapMaybeOrDefault", span=""];
m2_20 [cluster="System.Func<T, TResult>.Invoke(T)", file="InstanceBuilder.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m2_70 [cluster="CommandLine.Core.Specification.IsValue()", file="InstanceBuilder.cs", label="Entry CommandLine.Core.Specification.IsValue()", span="15-15"];
m2_77 [cluster="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", file="InstanceBuilder.cs", label="Entry System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="40-40"];
m2_46 [cluster="CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="InstanceBuilder.cs", label="Entry CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="163-163"];
m2_140 [cluster="Unk.GetConstructor", file="InstanceBuilder.cs", label="Entry Unk.GetConstructor", span=""];
m2_72 [cluster="Unk.Single", file="InstanceBuilder.cs", label="Entry Unk.Single", span=""];
m2_81 [cluster="Unk.Contains", file="InstanceBuilder.cs", label="Entry Unk.Contains", span=""];
m2_145 [cluster="Unk.Invoke", file="InstanceBuilder.cs", label="Entry Unk.Invoke", span=""];
m2_21 [cluster="System.Func<TResult>.Invoke()", file="InstanceBuilder.cs", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
m2_16 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="InstanceBuilder.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
m2_47 [cluster="object.GetType()", file="InstanceBuilder.cs", label="Entry object.GetType()", span="0-0"];
m2_95 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="68-68"];
m2_22 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="22-22"];
m2_58 [cluster="lambda expression", color=green, community=0, file="InstanceBuilder.cs", label="0: Func<T> buildImmutable = () =>\r\n                {\r\n                    var ctor = typeInfo.GetConstructor((from sp in specProps select sp.Property.PropertyType).ToArray());\r\n                    var values = (from prms in ctor.GetParameters()\r\n                        join sp in specPropsWithValue on prms.Name.ToLower() equals sp.Property.Name.ToLower()\r\n                        select\r\n                            sp.Value.MapMaybeOrDefault(\r\n                                v => v,\r\n                                sp.Specification.DefaultValue.MapMaybeOrDefault(\r\n                                    d => d,\r\n                                    sp.Specification.ConversionType.CreateDefaultForImmutable()))).ToArray();\r\n                    var immutable = (T)ctor.Invoke(values);\r\n                    return immutable;\r\n                }", span="92-105"];
m2_135 [cluster="lambda expression", file="InstanceBuilder.cs", label="var ctor = typeInfo.GetConstructor((from sp in specProps select sp.Property.PropertyType).ToArray())", span="94-94"];
m2_59 [cluster="lambda expression", file="InstanceBuilder.cs", label="var instance = typeInfo.IsMutable() ? buildMutable() : buildImmutable()", span="107-107"];
m2_44 [cluster="lambda expression", file="InstanceBuilder.cs", label="new NotParsed<T>(makeDefault().GetType().ToTypeInfo(), errs)", span="40-40"];
m2_34 [cluster="lambda expression", color=green, community=0, file="InstanceBuilder.cs", label="0: typeof(T).IsMutable()\r\n                    ? factory.MapMaybeOrDefault(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="34-37"];
m2_33 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="33-37"];
m2_35 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="33-37"];
m2_40 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="35-35"];
m2_57 [cluster="lambda expression", color=green, community=0, file="InstanceBuilder.cs", label="0: Func<T> buildMutable = () =>\r\n                {\r\n                    var mutable = factory.MapMaybeOrDefault(f => f(), Activator.CreateInstance<T>());\r\n                    mutable =\r\n                        mutable.SetProperties(specPropsWithValue, sp => sp.Value.IsJust(), sp => sp.Value.FromJustOrFail())\r\n                            .SetProperties(\r\n                                specPropsWithValue,\r\n                                sp => sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust(),\r\n                                sp => sp.Specification.DefaultValue.FromJustOrFail())\r\n                            .SetProperties(\r\n                                specPropsWithValue,\r\n                                sp =>\r\n                                    sp.Value.IsNothing() && sp.Specification.TargetType == TargetType.Sequence\r\n                                    && sp.Specification.DefaultValue.MatchNothing(),\r\n                                sp => sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray());\r\n                    return mutable;\r\n                }", span="74-90"];
m2_56 [cluster="lambda expression", file="InstanceBuilder.cs", label="var specPropsWithValue =\r\n                    optionSpecPropsResult.SucceededWith().Concat(valueSpecPropsResult.SucceededWith())", span="71-72"];
m2_100 [cluster="lambda expression", color=green, community=0, file="InstanceBuilder.cs", label="0: var mutable = factory.MapMaybeOrDefault(f => f(), Activator.CreateInstance<T>())", span="76-76"];
m2_99 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="74-90"];
m2_101 [cluster="lambda expression", color=green, community=2, file="InstanceBuilder.cs", label="0: mutable =\r\n                        mutable.SetProperties(specPropsWithValue, sp => sp.Value.IsJust(), sp => sp.Value.FromJustOrFail())\r\n                            .SetProperties(\r\n                                specPropsWithValue,\r\n                                sp => sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust(),\r\n                                sp => sp.Specification.DefaultValue.FromJustOrFail())\r\n                            .SetProperties(\r\n                                specPropsWithValue,\r\n                                sp =>\r\n                                    sp.Value.IsNothing() && sp.Specification.TargetType == TargetType.Sequence\r\n                                    && sp.Specification.DefaultValue.MatchNothing(),\r\n                                sp => sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray())", span="77-88"];
m2_106 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="76-76"];
m2_23 [cluster="lambda expression", color=green, community=0, file="InstanceBuilder.cs", label="0: f().GetType()", span="22-22"];
m2_24 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="22-22"];
m2_41 [cluster="lambda expression", color=green, community=0, file="InstanceBuilder.cs", label="0: f()", span="35-35"];
m2_42 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="35-35"];
m2_102 [cluster="lambda expression", file="InstanceBuilder.cs", label="return mutable;", span="89-89"];
m2_109 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="78-78"];
m2_113 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="78-78"];
m2_117 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="81-81"];
m2_121 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="82-82"];
m2_124 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="85-87"];
m2_128 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="88-88"];
m2_136 [cluster="lambda expression", color=green, community=0, file="InstanceBuilder.cs", label="0: var values = (from prms in ctor.GetParameters()\r\n                        join sp in specPropsWithValue on prms.Name.ToLower() equals sp.Property.Name.ToLower()\r\n                        select\r\n                            sp.Value.MapMaybeOrDefault(\r\n                                v => v,\r\n                                sp.Specification.DefaultValue.MapMaybeOrDefault(\r\n                                    d => d,\r\n                                    sp.Specification.ConversionType.CreateDefaultForImmutable()))).ToArray()", span="95-102"];
m2_137 [cluster="lambda expression", file="InstanceBuilder.cs", label="var immutable = (T)ctor.Invoke(values)", span="103-103"];
m2_146 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="99-99"];
m2_149 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="101-101"];
m2_107 [cluster="lambda expression", color=green, community=0, file="InstanceBuilder.cs", label="0: f()", span="76-76"];
m2_108 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="76-76"];
m2_110 [cluster="lambda expression", color=green, community=0, file="InstanceBuilder.cs", label="0: sp.Value.IsJust()", span="78-78"];
m2_111 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="78-78"];
m2_114 [cluster="lambda expression", color=green, community=0, file="InstanceBuilder.cs", label="0: sp.Value.FromJustOrFail()", span="78-78"];
m2_115 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="78-78"];
m2_122 [cluster="lambda expression", color=green, community=0, file="InstanceBuilder.cs", label="0: sp.Specification.DefaultValue.FromJustOrFail()", span="82-82"];
m2_123 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="82-82"];
m2_50 [cluster="lambda expression", file="InstanceBuilder.cs", label="var tokenizerResult = tokenizer(arguments, optionSpecs)", span="44-44"];
m2_52 [cluster="lambda expression", file="InstanceBuilder.cs", label="var partitions = TokenPartitioner.Partition(\r\n                    tokens,\r\n                    name => TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer))", span="48-50"];
m2_85 [cluster="lambda expression", file="InstanceBuilder.cs", label="TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer)", span="50-50"];
m2_53 [cluster="lambda expression", file="InstanceBuilder.cs", label="var optionSpecPropsResult =\r\n                    OptionMapper.MapValues(\r\n                        (from pt in specProps where pt.Specification.IsOption() select pt),\r\n                        partitions.Options,\r\n                        (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture),\r\n                        nameComparer)", span="52-57"];
m2_89 [cluster="lambda expression", file="InstanceBuilder.cs", label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="56-56"];
m2_54 [cluster="lambda expression", file="InstanceBuilder.cs", label="var valueSpecPropsResult =\r\n                    ValueMapper.MapValues(\r\n                        (from pt in specProps where pt.Specification.IsValue() select pt),\r\n                        partitions.Values,\r\n                        (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture))", span="59-63"];
m2_93 [cluster="lambda expression", file="InstanceBuilder.cs", label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="63-63"];
m2_55 [cluster="lambda expression", file="InstanceBuilder.cs", label="var missingValueErrors = from token in partitions.Errors\r\n                    select\r\n                        new MissingValueOptionError(\r\n                            optionSpecs.Single(o => token.Text.MatchName(o.ShortName, o.LongName, nameComparer))\r\n                                .FromOptionSpecification())", span="65-69"];
m2_96 [cluster="lambda expression", file="InstanceBuilder.cs", label="token.Text.MatchName(o.ShortName, o.LongName, nameComparer)", span="68-68"];
m2_62 [cluster="lambda expression", file="InstanceBuilder.cs", label="var warnings = from e in allErrors where nonFatalErrors.Contains(e.Tag) select e", span="119-119"];
m2_27 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="24-25"];
m2_134 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="92-105"];
m2_60 [cluster="lambda expression", file="InstanceBuilder.cs", label="var validationErrors = specPropsWithValue.Validate(SpecificationPropertyRules.Lookup(tokens))", span="109-109"];
m2_63 [cluster="lambda expression", file="InstanceBuilder.cs", label="return allErrors.Except(warnings).ToParserResult(instance);", span="121-121"];
m2_43 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="40-40"];
m2_45 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="40-40"];
m2_103 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="74-90"];
m2_119 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="81-81"];
m2_118 [cluster="lambda expression", file="InstanceBuilder.cs", label="sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust()", span="81-81"];
m2_126 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="85-87"];
m2_125 [cluster="lambda expression", file="InstanceBuilder.cs", label="sp.Value.IsNothing() && sp.Specification.TargetType == TargetType.Sequence\r\n                                    && sp.Specification.DefaultValue.MatchNothing()", span="86-87"];
m2_130 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="88-88"];
m2_129 [cluster="lambda expression", file="InstanceBuilder.cs", label="sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray()", span="88-88"];
m2_138 [cluster="lambda expression", file="InstanceBuilder.cs", label="return immutable;", span="104-104"];
m2_148 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="99-99"];
m2_147 [cluster="lambda expression", file="InstanceBuilder.cs", label=v, span="99-99"];
m2_151 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="101-101"];
m2_150 [cluster="lambda expression", file="InstanceBuilder.cs", label=d, span="101-101"];
m2_49 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="42-122"];
m2_51 [cluster="lambda expression", file="InstanceBuilder.cs", label="var tokens = tokenizerResult.SucceededWith()", span="46-46"];
m2_61 [cluster="lambda expression", file="InstanceBuilder.cs", label="var allErrors =\r\n                    tokenizerResult.SuccessfulMessages()\r\n                        .Concat(missingValueErrors)\r\n                        .Concat(optionSpecPropsResult.SuccessfulMessages())\r\n                        .Concat(valueSpecPropsResult.SuccessfulMessages())\r\n                        .Concat(validationErrors)\r\n                        .Memorize()", span="111-117"];
m2_84 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="50-50"];
m2_86 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="50-50"];
m2_88 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="56-56"];
m2_90 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="56-56"];
m2_92 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="63-63"];
m2_94 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="63-63"];
m2_97 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="68-68"];
m2_29 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="24-25"];
m2_28 [cluster="lambda expression", file="InstanceBuilder.cs", label="SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>())", span="24-25"];
m2_139 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="92-105"];
m2_64 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="42-122"];
m2_76 [cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12"];
m2_144 [cluster="Unk.CreateDefaultForImmutable", file="InstanceBuilder.cs", label="Entry Unk.CreateDefaultForImmutable", span=""];
m2_18 [cluster="System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", file="InstanceBuilder.cs", label="Entry System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="11-11"];
m2_13 [cluster="Unk.GetSpecifications", file="InstanceBuilder.cs", label="Entry Unk.GetSpecifications", span=""];
m2_71 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="InstanceBuilder.cs", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="294-294"];
m2_132 [cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", file="InstanceBuilder.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0"];
m2_78 [cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SuccessfulMessages<TSuccess, TMessage>()", file="InstanceBuilder.cs", label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SuccessfulMessages<TSuccess, TMessage>()", span="15-15"];
m2_79 [cluster="Unk.Concat", file="InstanceBuilder.cs", label="Entry Unk.Concat", span=""];
m2_133 [cluster="System.Type.CreateEmptyArray()", file="InstanceBuilder.cs", label="Entry System.Type.CreateEmptyArray()", span="125-125"];
m2_143 [cluster="string.ToLower()", file="InstanceBuilder.cs", label="Entry string.ToLower()", span="0-0"];
m2_131 [cluster="System.Type.GetGenericArguments()", file="InstanceBuilder.cs", label="Entry System.Type.GetGenericArguments()", span="0-0"];
m2_80 [cluster="Unk.Memorize", file="InstanceBuilder.cs", label="Entry Unk.Memorize", span=""];
m2_82 [cluster="Unk.Except", file="InstanceBuilder.cs", label="Entry Unk.Except", span=""];
m2_83 [cluster="Unk.ToParserResult", file="InstanceBuilder.cs", label="Entry Unk.ToParserResult", span=""];
m2_30 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="103-103"];
m2_87 [cluster="CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
m2_25 [cluster="Unk.f", file="InstanceBuilder.cs", label="Entry Unk.f", span=""];
m2_37 [cluster="System.Activator.CreateInstance<T>()", file="InstanceBuilder.cs", label="Entry System.Activator.CreateInstance<T>()", span="0-0"];
m2_66 [cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()", file="InstanceBuilder.cs", label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()", span="653-653"];
m2_68 [cluster="CommandLine.Core.Specification.IsOption()", file="InstanceBuilder.cs", label="Entry CommandLine.Core.Specification.IsOption()", span="10-10"];
m2_120 [cluster="CSharpx.Maybe<T>.IsNothing<T>()", file="InstanceBuilder.cs", label="Entry CSharpx.Maybe<T>.IsNothing<T>()", span="334-334"];
m2_127 [cluster="CSharpx.Maybe<T>.MatchNothing()", file="InstanceBuilder.cs", label="Entry CSharpx.Maybe<T>.MatchNothing()", span="57-57"];
m2_31 [cluster="CSharpx.Maybe.Nothing<T>()", file="InstanceBuilder.cs", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
m2_36 [cluster="System.Type.IsMutable()", file="InstanceBuilder.cs", label="Entry System.Type.IsMutable()", span="139-139"];
m2_32 [cluster="CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)", span="21-21"];
m2_142 [cluster="Unk.ToLower", file="InstanceBuilder.cs", label="Entry Unk.ToLower", span=""];
m2_116 [cluster="CSharpx.Maybe<T>.FromJustOrFail<T>(System.Exception)", file="InstanceBuilder.cs", label="Entry CSharpx.Maybe<T>.FromJustOrFail<T>(System.Exception)", span="355-355"];
m2_15 [cluster="System.Collections.IEnumerable.OfType<TResult>()", file="InstanceBuilder.cs", label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0"];
m2_17 [cluster="CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)", span="11-11"];
m2_75 [cluster="Unk.IsMutable", file="InstanceBuilder.cs", label="Entry Unk.IsMutable", span=""];
m2_38 [cluster="Unk.ToArray", file="InstanceBuilder.cs", label="Entry Unk.ToArray", span=""];
m2_104 [cluster="Unk.SetProperties", file="InstanceBuilder.cs", label="Entry Unk.SetProperties", span=""];
m2_112 [cluster="CSharpx.Maybe<T>.IsJust<T>()", file="InstanceBuilder.cs", label="Entry CSharpx.Maybe<T>.IsJust<T>()", span="326-326"];
m2_73 [cluster="Unk.FromOptionSpecification", file="InstanceBuilder.cs", label="Entry Unk.FromOptionSpecification", span=""];
m2_65 [cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", file="InstanceBuilder.cs", label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0"];
m2_74 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="InstanceBuilder.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
m2_69 [cluster="Unk.MapValues", file="InstanceBuilder.cs", label="Entry Unk.MapValues", span=""];
m2_152 [file="InstanceBuilder.cs", label="CSharpx.Maybe<System.Func<T>>", span=""];
m2_153 [file="InstanceBuilder.cs", label=specProps, span=""];
m2_160 [file="InstanceBuilder.cs", label=typeInfo, span=""];
m2_163 [file="InstanceBuilder.cs", label=specPropsWithValue, span=""];
m2_154 [file="InstanceBuilder.cs", label=makeDefault, span=""];
m2_155 [file="InstanceBuilder.cs", label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>", span=""];
m2_156 [file="InstanceBuilder.cs", label="System.Collections.Generic.IEnumerable<string>", span=""];
m2_157 [file="InstanceBuilder.cs", label=optionSpecs, span=""];
m2_158 [file="InstanceBuilder.cs", label="System.StringComparer", span=""];
m2_159 [file="InstanceBuilder.cs", label="System.Globalization.CultureInfo", span=""];
m2_162 [file="InstanceBuilder.cs", label=token, span=""];
m2_161 [file="InstanceBuilder.cs", label="System.Collections.Generic.IEnumerable<CommandLine.ErrorType>", span=""];
m3_26 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfWordsTruncator(string, int, string, string)", file="InstanceChooser.cs", label="Entry Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfWordsTruncator(string, int, string, string)", span="110-110"];
m3_27 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfWordsTruncator(string, int, string, string)", file="InstanceChooser.cs", label="Assert.Equal(expectedOutput, input.Truncate(length, truncationString, Truncator.FixedNumberOfWords))", span="112-112"];
m3_28 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfWordsTruncator(string, int, string, string)", file="InstanceChooser.cs", label="Exit Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfWordsTruncator(string, int, string, string)", span="110-110"];
m3_19 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedLengthTruncator(string, int, string, string)", file="InstanceChooser.cs", label="Entry Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedLengthTruncator(string, int, string, string)", span="80-80"];
m3_20 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedLengthTruncator(string, int, string, string)", file="InstanceChooser.cs", label="Assert.Equal(expectedOutput, input.Truncate(length, truncationString, Truncator.FixedLength))", span="82-82"];
m3_21 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedLengthTruncator(string, int, string, string)", file="InstanceChooser.cs", label="Exit Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedLengthTruncator(string, int, string, string)", span="80-80"];
m3_5 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedLengthTruncator(string, int, string)", file="InstanceChooser.cs", label="Entry Humanizer.Tests.TruncatorTests.TruncateWithFixedLengthTruncator(string, int, string)", span="26-26"];
m3_6 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedLengthTruncator(string, int, string)", file="InstanceChooser.cs", label="Assert.Equal(expectedOutput, input.Truncate(length, Truncator.FixedLength))", span="28-28"];
m3_7 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedLengthTruncator(string, int, string)", file="InstanceChooser.cs", label="Exit Humanizer.Tests.TruncatorTests.TruncateWithFixedLengthTruncator(string, int, string)", span="26-26"];
m3_23 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfCharactersTruncator(string, int, string, string)", file="InstanceChooser.cs", label="Entry Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfCharactersTruncator(string, int, string, string)", span="95-95"];
m3_24 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfCharactersTruncator(string, int, string, string)", file="InstanceChooser.cs", label="Assert.Equal(expectedOutput, input.Truncate(length, truncationString, Truncator.FixedNumberOfCharacters))", span="97-97"];
m3_25 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfCharactersTruncator(string, int, string, string)", file="InstanceChooser.cs", label="Exit Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfCharactersTruncator(string, int, string, string)", span="95-95"];
m3_8 [cluster="string.Truncate(int, Humanizer.ITruncator)", file="InstanceChooser.cs", label="Entry string.Truncate(int, Humanizer.ITruncator)", span="27-27"];
m3_3 [cluster="string.Truncate(int)", file="InstanceChooser.cs", label="Entry string.Truncate(int)", span="15-15"];
m3_0 [cluster="Humanizer.Tests.TruncatorTests.Truncate(string, int, string)", file="InstanceChooser.cs", label="Entry Humanizer.Tests.TruncatorTests.Truncate(string, int, string)", span="14-14"];
m3_1 [cluster="Humanizer.Tests.TruncatorTests.Truncate(string, int, string)", file="InstanceChooser.cs", label="Assert.Equal(expectedOutput, input.Truncate(length))", span="16-16"];
m3_2 [cluster="Humanizer.Tests.TruncatorTests.Truncate(string, int, string)", file="InstanceChooser.cs", label="Exit Humanizer.Tests.TruncatorTests.Truncate(string, int, string)", span="14-14"];
m3_18 [cluster="string.Truncate(int, string)", file="InstanceChooser.cs", label="Entry string.Truncate(int, string)", span="39-39"];
m3_4 [cluster="Unk.Equal", file="InstanceChooser.cs", label="Entry Unk.Equal", span=""];
m3_22 [cluster="string.Truncate(int, string, Humanizer.ITruncator)", file="InstanceChooser.cs", label="Entry string.Truncate(int, string, Humanizer.ITruncator)", span="52-52"];
m3_15 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationString(string, int, string, string)", file="InstanceChooser.cs", label="Entry Humanizer.Tests.TruncatorTests.TruncateWithTruncationString(string, int, string, string)", span="65-65"];
m3_16 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationString(string, int, string, string)", file="InstanceChooser.cs", label="Assert.Equal(expectedOutput, input.Truncate(length, truncationString))", span="67-67"];
m3_17 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationString(string, int, string, string)", file="InstanceChooser.cs", label="Exit Humanizer.Tests.TruncatorTests.TruncateWithTruncationString(string, int, string, string)", span="65-65"];
m3_9 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfCharactersTruncator(string, int, string)", file="InstanceChooser.cs", label="Entry Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfCharactersTruncator(string, int, string)", span="38-38"];
m3_10 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfCharactersTruncator(string, int, string)", file="InstanceChooser.cs", label="Assert.Equal(expectedOutput, input.Truncate(length, Truncator.FixedNumberOfCharacters))", span="40-40"];
m3_11 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfCharactersTruncator(string, int, string)", file="InstanceChooser.cs", label="Exit Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfCharactersTruncator(string, int, string)", span="38-38"];
m3_12 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfWordsTruncator(string, int, string)", file="InstanceChooser.cs", label="Entry Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfWordsTruncator(string, int, string)", span="51-51"];
m3_13 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfWordsTruncator(string, int, string)", file="InstanceChooser.cs", label="Assert.Equal(expectedOutput, input.Truncate(length, Truncator.FixedNumberOfWords))", span="53-53"];
m3_14 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfWordsTruncator(string, int, string)", file="InstanceChooser.cs", label="Exit Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfWordsTruncator(string, int, string)", span="51-51"];
m5_0 [cluster="CSharpx.Either<T1, T2>.Either(CSharpx.Either2Type)", file="OptionMapper.cs", label="Entry CSharpx.Either<T1, T2>.Either(CSharpx.Either2Type)", span="24-24"];
m5_1 [cluster="CSharpx.Either<T1, T2>.Either(CSharpx.Either2Type)", color=red, community=0, file="OptionMapper.cs", label="1: this.tag = tag", span="26-26"];
m5_2 [cluster="CSharpx.Either<T1, T2>.Either(CSharpx.Either2Type)", file="OptionMapper.cs", label="Exit CSharpx.Either<T1, T2>.Either(CSharpx.Either2Type)", span="24-24"];
m5_28 [cluster="CSharpx.Either.Protect<T1, T2>(System.Func<T1, T2>, T1)", file="OptionMapper.cs", label="Entry CSharpx.Either.Protect<T1, T2>(System.Func<T1, T2>, T1)", span="848-848"];
m5_29 [cluster="CSharpx.Either.Protect<T1, T2>(System.Func<T1, T2>, T1)", file="OptionMapper.cs", label="return new Either1Of2<T2, Exception>(func(value));", span="852-852"];
m5_30 [cluster="CSharpx.Either.Protect<T1, T2>(System.Func<T1, T2>, T1)", file="OptionMapper.cs", label=Exception, span="854-854"];
m5_31 [cluster="CSharpx.Either.Protect<T1, T2>(System.Func<T1, T2>, T1)", file="OptionMapper.cs", label="return new Either2Of2<T2, Exception>(ex);", span="856-856"];
m5_32 [cluster="CSharpx.Either.Protect<T1, T2>(System.Func<T1, T2>, T1)", file="OptionMapper.cs", label="Exit CSharpx.Either.Protect<T1, T2>(System.Func<T1, T2>, T1)", span="848-848"];
m5_84 [cluster="CSharpx.EitherExtensions.Match<T1, T2>(CSharpx.Either<T1, T2>, System.Action<T1>, System.Action<T2>)", file="OptionMapper.cs", label="Entry CSharpx.EitherExtensions.Match<T1, T2>(CSharpx.Either<T1, T2>, System.Action<T1>, System.Action<T2>)", span="966-966"];
m5_85 [cluster="CSharpx.EitherExtensions.Match<T1, T2>(CSharpx.Either<T1, T2>, System.Action<T1>, System.Action<T2>)", file="OptionMapper.cs", label="either.Tag == Either2Type.Either1Of2", span="968-968"];
m5_86 [cluster="CSharpx.EitherExtensions.Match<T1, T2>(CSharpx.Either<T1, T2>, System.Action<T1>, System.Action<T2>)", file="OptionMapper.cs", label="ifFirst(((Either1Of2<T1, T2>)either).Value)", span="970-970"];
m5_88 [cluster="CSharpx.EitherExtensions.Match<T1, T2>(CSharpx.Either<T1, T2>, System.Action<T1>, System.Action<T2>)", file="OptionMapper.cs", label="ifSecond(((Either2Of2<T1, T2>)either).Value)", span="973-973"];
m5_87 [cluster="CSharpx.EitherExtensions.Match<T1, T2>(CSharpx.Either<T1, T2>, System.Action<T1>, System.Action<T2>)", file="OptionMapper.cs", label="return;", span="971-971"];
m5_89 [cluster="CSharpx.EitherExtensions.Match<T1, T2>(CSharpx.Either<T1, T2>, System.Action<T1>, System.Action<T2>)", file="OptionMapper.cs", label="Exit CSharpx.EitherExtensions.Match<T1, T2>(CSharpx.Either<T1, T2>, System.Action<T1>, System.Action<T2>)", span="966-966"];
m5_51 [cluster="CSharpx.Either.Map<T1, T2, T3>(System.Func<T1, T2>, CSharpx.Either<T1, T3>)", file="OptionMapper.cs", label="Entry CSharpx.Either.Map<T1, T2, T3>(System.Func<T1, T2>, CSharpx.Either<T1, T3>)", span="892-892"];
m5_52 [cluster="CSharpx.Either.Map<T1, T2, T3>(System.Func<T1, T2>, CSharpx.Either<T1, T3>)", file="OptionMapper.cs", label="either.Tag == Either2Type.Either1Of2", span="894-894"];
m5_53 [cluster="CSharpx.Either.Map<T1, T2, T3>(System.Func<T1, T2>, CSharpx.Either<T1, T3>)", file="OptionMapper.cs", label="var x = (Either1Of2<T1, T3>)either", span="896-896"];
m5_54 [cluster="CSharpx.Either.Map<T1, T2, T3>(System.Func<T1, T2>, CSharpx.Either<T1, T3>)", file="OptionMapper.cs", label="return new Either1Of2<T2, T3>(func(x.Value));", span="897-897"];
m5_55 [cluster="CSharpx.Either.Map<T1, T2, T3>(System.Func<T1, T2>, CSharpx.Either<T1, T3>)", file="OptionMapper.cs", label="var y = (Either2Of2<T1, T3>)either", span="899-899"];
m5_56 [cluster="CSharpx.Either.Map<T1, T2, T3>(System.Func<T1, T2>, CSharpx.Either<T1, T3>)", file="OptionMapper.cs", label="return new Either2Of2<T2, T3>(y.Value);", span="900-900"];
m5_57 [cluster="CSharpx.Either.Map<T1, T2, T3>(System.Func<T1, T2>, CSharpx.Either<T1, T3>)", file="OptionMapper.cs", label="Exit CSharpx.Either.Map<T1, T2, T3>(System.Func<T1, T2>, CSharpx.Either<T1, T3>)", span="892-892"];
m5_90 [cluster="System.Action<T>.Invoke(T)", file="OptionMapper.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m5_33 [cluster="System.Func<T, TResult>.Invoke(T)", file="OptionMapper.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m5_65 [cluster="CSharpx.Either.Bimap<T1, T2, T3, T4>(System.Func<T1, T2>, System.Func<T3, T4>, CSharpx.Either<T1, T3>)", file="OptionMapper.cs", label="Entry CSharpx.Either.Bimap<T1, T2, T3, T4>(System.Func<T1, T2>, System.Func<T3, T4>, CSharpx.Either<T1, T3>)", span="922-922"];
m5_66 [cluster="CSharpx.Either.Bimap<T1, T2, T3, T4>(System.Func<T1, T2>, System.Func<T3, T4>, CSharpx.Either<T1, T3>)", file="OptionMapper.cs", label="either.Tag == Either2Type.Either1Of2", span="924-924"];
m5_67 [cluster="CSharpx.Either.Bimap<T1, T2, T3, T4>(System.Func<T1, T2>, System.Func<T3, T4>, CSharpx.Either<T1, T3>)", file="OptionMapper.cs", label="var x = (Either1Of2<T1, T3>)either", span="926-926"];
m5_68 [cluster="CSharpx.Either.Bimap<T1, T2, T3, T4>(System.Func<T1, T2>, System.Func<T3, T4>, CSharpx.Either<T1, T3>)", file="OptionMapper.cs", label="return new Either1Of2<T2, T4>(func1(x.Value));", span="927-927"];
m5_69 [cluster="CSharpx.Either.Bimap<T1, T2, T3, T4>(System.Func<T1, T2>, System.Func<T3, T4>, CSharpx.Either<T1, T3>)", file="OptionMapper.cs", label="var y = (Either2Of2<T1, T3>)either", span="929-929"];
m5_70 [cluster="CSharpx.Either.Bimap<T1, T2, T3, T4>(System.Func<T1, T2>, System.Func<T3, T4>, CSharpx.Either<T1, T3>)", file="OptionMapper.cs", label="return new Either2Of2<T2, T4>(func2(y.Value));", span="930-930"];
m5_71 [cluster="CSharpx.Either.Bimap<T1, T2, T3, T4>(System.Func<T1, T2>, System.Func<T3, T4>, CSharpx.Either<T1, T3>)", file="OptionMapper.cs", label="Exit CSharpx.Either.Bimap<T1, T2, T3, T4>(System.Func<T1, T2>, System.Func<T3, T4>, CSharpx.Either<T1, T3>)", span="922-922"];
m5_3 [cluster="CSharpx.Either1Of2<T1, T2>.Either1Of2(T1)", file="OptionMapper.cs", label="Entry CSharpx.Either1Of2<T1, T2>.Either1Of2(T1)", span="42-42"];
m5_4 [cluster="CSharpx.Either1Of2<T1, T2>.Either1Of2(T1)", file="OptionMapper.cs", label="this.value = value", span="45-45"];
m5_5 [cluster="CSharpx.Either1Of2<T1, T2>.Either1Of2(T1)", file="OptionMapper.cs", label="Exit CSharpx.Either1Of2<T1, T2>.Either1Of2(T1)", span="42-42"];
m5_72 [cluster="CSharpx.Either.Choice<T1, T2, T3>(System.Func<T1, T2>, System.Func<T3, T2>, CSharpx.Either<T1, T3>)", file="OptionMapper.cs", label="Entry CSharpx.Either.Choice<T1, T2, T3>(System.Func<T1, T2>, System.Func<T3, T2>, CSharpx.Either<T1, T3>)", span="938-938"];
m5_73 [cluster="CSharpx.Either.Choice<T1, T2, T3>(System.Func<T1, T2>, System.Func<T3, T2>, CSharpx.Either<T1, T3>)", file="OptionMapper.cs", label="either.Tag == Either2Type.Either1Of2", span="940-940"];
m5_74 [cluster="CSharpx.Either.Choice<T1, T2, T3>(System.Func<T1, T2>, System.Func<T3, T2>, CSharpx.Either<T1, T3>)", file="OptionMapper.cs", label="var x = (Either1Of2<T1, T3>)either", span="942-942"];
m5_75 [cluster="CSharpx.Either.Choice<T1, T2, T3>(System.Func<T1, T2>, System.Func<T3, T2>, CSharpx.Either<T1, T3>)", file="OptionMapper.cs", label="return func1(x.Value);", span="943-943"];
m5_76 [cluster="CSharpx.Either.Choice<T1, T2, T3>(System.Func<T1, T2>, System.Func<T3, T2>, CSharpx.Either<T1, T3>)", file="OptionMapper.cs", label="var y = (Either2Of2<T1, T3>)either", span="945-945"];
m5_77 [cluster="CSharpx.Either.Choice<T1, T2, T3>(System.Func<T1, T2>, System.Func<T3, T2>, CSharpx.Either<T1, T3>)", file="OptionMapper.cs", label="return func2(y.Value);", span="946-946"];
m5_78 [cluster="CSharpx.Either.Choice<T1, T2, T3>(System.Func<T1, T2>, System.Func<T3, T2>, CSharpx.Either<T1, T3>)", file="OptionMapper.cs", label="Exit CSharpx.Either.Choice<T1, T2, T3>(System.Func<T1, T2>, System.Func<T3, T2>, CSharpx.Either<T1, T3>)", span="938-938"];
m5_37 [cluster="lambda expression", file="OptionMapper.cs", label="Entry lambda expression", span="866-866"];
m5_19 [cluster="lambda expression", file="OptionMapper.cs", label="new Either1Of2<T1, T2>(value)", span="830-830"];
m5_18 [cluster="lambda expression", file="OptionMapper.cs", label="Entry lambda expression", span="830-830"];
m5_20 [cluster="lambda expression", file="OptionMapper.cs", label="Exit lambda expression", span="830-830"];
m5_38 [cluster="lambda expression", file="OptionMapper.cs", label="(T1)obj", span="866-866"];
m5_39 [cluster="lambda expression", file="OptionMapper.cs", label="Exit lambda expression", span="866-866"];
m5_26 [cluster="System.ArgumentException.ArgumentException(string, string)", file="OptionMapper.cs", label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0"];
m5_6 [cluster="CSharpx.Either2Of2<T1, T2>.Either2Of2(T2)", file="OptionMapper.cs", label="Entry CSharpx.Either2Of2<T1, T2>.Either2Of2(T2)", span="61-61"];
m5_7 [cluster="CSharpx.Either2Of2<T1, T2>.Either2Of2(T2)", file="OptionMapper.cs", label="this.value = value", span="64-64"];
m5_8 [cluster="CSharpx.Either2Of2<T1, T2>.Either2Of2(T2)", file="OptionMapper.cs", label="Exit CSharpx.Either2Of2<T1, T2>.Either2Of2(T2)", span="61-61"];
m5_40 [cluster="CSharpx.Either.Ap<T1, T2, T3>(CSharpx.Either<T1, T2>, CSharpx.Either<System.Func<T1, T3>, T2>)", file="OptionMapper.cs", label="Entry CSharpx.Either.Ap<T1, T2, T3>(CSharpx.Either<T1, T2>, CSharpx.Either<System.Func<T1, T3>, T2>)", span="872-872"];
m5_41 [cluster="CSharpx.Either.Ap<T1, T2, T3>(CSharpx.Either<T1, T2>, CSharpx.Either<System.Func<T1, T3>, T2>)", file="OptionMapper.cs", label="func.Tag == Either2Type.Either1Of2 && value.Tag == Either2Type.Either1Of2", span="874-874"];
m5_42 [cluster="CSharpx.Either.Ap<T1, T2, T3>(CSharpx.Either<T1, T2>, CSharpx.Either<System.Func<T1, T3>, T2>)", file="OptionMapper.cs", label="var f = (Either1Of2<Func<T1, T3>, T2>)func", span="876-876"];
m5_43 [cluster="CSharpx.Either.Ap<T1, T2, T3>(CSharpx.Either<T1, T2>, CSharpx.Either<System.Func<T1, T3>, T2>)", file="OptionMapper.cs", label="var x = (Either1Of2<T1, T2>)value", span="877-877"];
m5_45 [cluster="CSharpx.Either.Ap<T1, T2, T3>(CSharpx.Either<T1, T2>, CSharpx.Either<System.Func<T1, T3>, T2>)", file="OptionMapper.cs", label="func.Tag == Either2Type.Either2Of2", span="880-880"];
m5_46 [cluster="CSharpx.Either.Ap<T1, T2, T3>(CSharpx.Either<T1, T2>, CSharpx.Either<System.Func<T1, T3>, T2>)", file="OptionMapper.cs", label="var e = (Either2Of2<Func<T1, T3>, T2>)func", span="882-882"];
m5_48 [cluster="CSharpx.Either.Ap<T1, T2, T3>(CSharpx.Either<T1, T2>, CSharpx.Either<System.Func<T1, T3>, T2>)", file="OptionMapper.cs", label="var g = (Either2Of2<T1, T2>)value", span="885-885"];
m5_44 [cluster="CSharpx.Either.Ap<T1, T2, T3>(CSharpx.Either<T1, T2>, CSharpx.Either<System.Func<T1, T3>, T2>)", file="OptionMapper.cs", label="return new Either1Of2<T3, T2>(f.Value(x.Value));", span="878-878"];
m5_47 [cluster="CSharpx.Either.Ap<T1, T2, T3>(CSharpx.Either<T1, T2>, CSharpx.Either<System.Func<T1, T3>, T2>)", file="OptionMapper.cs", label="return new Either2Of2<T3, T2>(e.Value);", span="883-883"];
m5_49 [cluster="CSharpx.Either.Ap<T1, T2, T3>(CSharpx.Either<T1, T2>, CSharpx.Either<System.Func<T1, T3>, T2>)", file="OptionMapper.cs", label="return new Either2Of2<T3, T2>(g.Value);", span="886-886"];
m5_50 [cluster="CSharpx.Either.Ap<T1, T2, T3>(CSharpx.Either<T1, T2>, CSharpx.Either<System.Func<T1, T3>, T2>)", file="OptionMapper.cs", label="Exit CSharpx.Either.Ap<T1, T2, T3>(CSharpx.Either<T1, T2>, CSharpx.Either<System.Func<T1, T3>, T2>)", span="872-872"];
m5_21 [cluster="CSharpx.Either.Get<T1, T2>(CSharpx.Either<T1, T2>)", file="OptionMapper.cs", label="Entry CSharpx.Either.Get<T1, T2>(CSharpx.Either<T1, T2>)", span="836-836"];
m5_22 [cluster="CSharpx.Either.Get<T1, T2>(CSharpx.Either<T1, T2>)", file="OptionMapper.cs", label="either.Tag == Either2Type.Either1Of2", span="838-838"];
m5_23 [cluster="CSharpx.Either.Get<T1, T2>(CSharpx.Either<T1, T2>)", file="OptionMapper.cs", label="return ((Either1Of2<T1, T2>)either).Value;", span="840-840"];
m5_24 [cluster="CSharpx.Either.Get<T1, T2>(CSharpx.Either<T1, T2>)", file="OptionMapper.cs", label="throw new ArgumentException(''either'', string.Format(''The either value was Either2Of2 {0}'', either));", span="842-842"];
m5_25 [cluster="CSharpx.Either.Get<T1, T2>(CSharpx.Either<T1, T2>)", file="OptionMapper.cs", label="Exit CSharpx.Either.Get<T1, T2>(CSharpx.Either<T1, T2>)", span="836-836"];
m5_15 [cluster="CSharpx.Either.ReturnM<T1, T2>()", file="OptionMapper.cs", label="Entry CSharpx.Either.ReturnM<T1, T2>()", span="828-828"];
m5_16 [cluster="CSharpx.Either.ReturnM<T1, T2>()", file="OptionMapper.cs", label="return value => new Either1Of2<T1, T2>(value);", span="830-830"];
m5_17 [cluster="CSharpx.Either.ReturnM<T1, T2>()", file="OptionMapper.cs", label="Exit CSharpx.Either.ReturnM<T1, T2>()", span="828-828"];
m5_9 [cluster="CSharpx.Either.New1Of2<T1, T2>(T1)", file="OptionMapper.cs", label="Entry CSharpx.Either.New1Of2<T1, T2>(T1)", span="679-679"];
m5_10 [cluster="CSharpx.Either.New1Of2<T1, T2>(T1)", file="OptionMapper.cs", label="return new Either1Of2<T1, T2>(value);", span="681-681"];
m5_11 [cluster="CSharpx.Either.New1Of2<T1, T2>(T1)", file="OptionMapper.cs", label="Exit CSharpx.Either.New1Of2<T1, T2>(T1)", span="679-679"];
m5_79 [cluster="CSharpx.Either.OfMaybe<T1, T2>(CSharpx.Maybe<T1>, T2)", file="OptionMapper.cs", label="Entry CSharpx.Either.OfMaybe<T1, T2>(CSharpx.Maybe<T1>, T2)", span="950-950"];
m5_80 [cluster="CSharpx.Either.OfMaybe<T1, T2>(CSharpx.Maybe<T1>, T2)", file="OptionMapper.cs", label="maybe.Tag == MaybeType.Just", span="952-952"];
m5_81 [cluster="CSharpx.Either.OfMaybe<T1, T2>(CSharpx.Maybe<T1>, T2)", file="OptionMapper.cs", label="return new Either1Of2<T1, T2>(((Just<T1>)maybe).Value);", span="954-954"];
m5_82 [cluster="CSharpx.Either.OfMaybe<T1, T2>(CSharpx.Maybe<T1>, T2)", file="OptionMapper.cs", label="return new Either2Of2<T1, T2>(second);", span="956-956"];
m5_83 [cluster="CSharpx.Either.OfMaybe<T1, T2>(CSharpx.Maybe<T1>, T2)", file="OptionMapper.cs", label="Exit CSharpx.Either.OfMaybe<T1, T2>(CSharpx.Maybe<T1>, T2)", span="950-950"];
m5_27 [cluster="string.Format(string, object)", file="OptionMapper.cs", label="Entry string.Format(string, object)", span="0-0"];
m5_12 [cluster="CSharpx.Either.New2Of2<T1, T2>(T2)", file="OptionMapper.cs", label="Entry CSharpx.Either.New2Of2<T1, T2>(T2)", span="684-684"];
m5_13 [cluster="CSharpx.Either.New2Of2<T1, T2>(T2)", file="OptionMapper.cs", label="return new Either2Of2<T1, T2>(value);", span="686-686"];
m5_14 [cluster="CSharpx.Either.New2Of2<T1, T2>(T2)", file="OptionMapper.cs", label="Exit CSharpx.Either.New2Of2<T1, T2>(T2)", span="684-684"];
m5_58 [cluster="CSharpx.Either.Bind<T1, T2, T3>(System.Func<T1, CSharpx.Either<T2, T3>>, CSharpx.Either<T1, T3>)", file="OptionMapper.cs", label="Entry CSharpx.Either.Bind<T1, T2, T3>(System.Func<T1, CSharpx.Either<T2, T3>>, CSharpx.Either<T1, T3>)", span="906-906"];
m5_59 [cluster="CSharpx.Either.Bind<T1, T2, T3>(System.Func<T1, CSharpx.Either<T2, T3>>, CSharpx.Either<T1, T3>)", file="OptionMapper.cs", label="either.Tag == Either2Type.Either1Of2", span="908-908"];
m5_60 [cluster="CSharpx.Either.Bind<T1, T2, T3>(System.Func<T1, CSharpx.Either<T2, T3>>, CSharpx.Either<T1, T3>)", file="OptionMapper.cs", label="var x = (Either1Of2<T1, T3>)either", span="910-910"];
m5_61 [cluster="CSharpx.Either.Bind<T1, T2, T3>(System.Func<T1, CSharpx.Either<T2, T3>>, CSharpx.Either<T1, T3>)", file="OptionMapper.cs", label="return func(x.Value);", span="911-911"];
m5_62 [cluster="CSharpx.Either.Bind<T1, T2, T3>(System.Func<T1, CSharpx.Either<T2, T3>>, CSharpx.Either<T1, T3>)", file="OptionMapper.cs", label="var y = (Either2Of2<T1, T3>)either", span="913-913"];
m5_63 [cluster="CSharpx.Either.Bind<T1, T2, T3>(System.Func<T1, CSharpx.Either<T2, T3>>, CSharpx.Either<T1, T3>)", file="OptionMapper.cs", label="return new Either2Of2<T2, T3>(y.Value);", span="914-914"];
m5_64 [cluster="CSharpx.Either.Bind<T1, T2, T3>(System.Func<T1, CSharpx.Either<T2, T3>>, CSharpx.Either<T1, T3>)", file="OptionMapper.cs", label="Exit CSharpx.Either.Bind<T1, T2, T3>(System.Func<T1, CSharpx.Either<T2, T3>>, CSharpx.Either<T1, T3>)", span="906-906"];
m5_34 [cluster="CSharpx.Either.Cast<T1>(object)", file="OptionMapper.cs", label="Entry CSharpx.Either.Cast<T1>(object)", span="864-864"];
m5_35 [cluster="CSharpx.Either.Cast<T1>(object)", file="OptionMapper.cs", label="return Protect(v => (T1)obj, obj);", span="866-866"];
m5_36 [cluster="CSharpx.Either.Cast<T1>(object)", file="OptionMapper.cs", label="Exit CSharpx.Either.Cast<T1>(object)", span="864-864"];
m5_91 [file="OptionMapper.cs", label="CSharpx.Either<T1, T2>", span=""];
m5_92 [file="OptionMapper.cs", label="CSharpx.Either1Of2<T1, T2>", span=""];
m5_93 [file="OptionMapper.cs", label="CSharpx.Either2Of2<T1, T2>", span=""];
m5_94 [file="OptionMapper.cs", label=object, span=""];
m7_11 [cluster="lambda expression", file="Scalar.cs", label="Entry lambda expression", span="19-20"];
m7_5 [cluster="lambda expression", color=red, community=0, file="Scalar.cs", label="0: f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).MapMaybe(info =>\r\n                                    info.TargetType == TargetType.Scalar ? new[] { f, s } : new Token[] { }, new Token[] { })\r\n                                    : new Token[] { }", span="18-21"];
m7_4 [cluster="lambda expression", file="Scalar.cs", label="Entry lambda expression", span="17-21"];
m7_12 [cluster="lambda expression", file="Scalar.cs", label="info.TargetType == TargetType.Scalar ? new[] { f, s } : new Token[] { }", span="20-20"];
m7_6 [cluster="lambda expression", file="Scalar.cs", label="Exit lambda expression", span="17-21"];
m7_13 [cluster="lambda expression", file="Scalar.cs", label="Exit lambda expression", span="19-20"];
m7_0 [cluster="CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Scalar.cs", label="Entry CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12"];
m7_1 [cluster="CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", color=red, community=0, file="Scalar.cs", label="0: return from tseq in tokens.Pairwise(\r\n                (f, s) =>\r\n                        f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).MapMaybe(info =>\r\n                                    info.TargetType == TargetType.Scalar ? new[] { f, s } : new Token[] { }, new Token[] { })\r\n                                    : new Token[] { })\r\n                   from t in tseq\r\n                   select t;", span="16-23"];
m7_2 [cluster="CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Scalar.cs", label="Exit CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12"];
m7_7 [cluster="CommandLine.Core.Token.IsName()", file="Scalar.cs", label="Entry CommandLine.Core.Token.IsName()", span="128-128"];
m7_8 [cluster="CommandLine.Core.Token.IsValue()", file="Scalar.cs", label="Entry CommandLine.Core.Token.IsValue()", span="133-133"];
m7_9 [cluster="System.Func<T, TResult>.Invoke(T)", file="Scalar.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m7_3 [cluster="Unk.Pairwise", file="Scalar.cs", label="Entry Unk.Pairwise", span=""];
m7_14 [file="Scalar.cs", label="System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>", span=""];
m7_15 [file="Scalar.cs", label="CommandLine.Core.Token", span=""];
m7_16 [file="Scalar.cs", label="CommandLine.Core.Token", span=""];
m8_22 [cluster="System.Collections.Generic.IEnumerable<TSource>.IndexOf<TSource>(System.Func<TSource, bool>)", file="Sequence.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.IndexOf<TSource>(System.Func<TSource, bool>)", span="10-10"];
m8_24 [cluster="System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", file="Sequence.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", span="0-0"];
m8_0 [cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Sequence.cs", label="Entry CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12"];
m8_1 [cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", color=red, community=0, file="Sequence.cs", label="0: return from tseq in tokens.Pairwise(\r\n                (f, s) =>\r\n                        f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).MapMaybe(info =>\r\n                                   info.TargetType == TargetType.Sequence\r\n                                        ? new[] { f }.Concat(tokens.OfSequence(f, info))\r\n                                        : new Token[] { }, new Token[] { })\r\n                            : new Token[] { })\r\n                   from t in tseq\r\n                   select t;", span="16-25"];
m8_2 [cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Sequence.cs", label="Exit CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12"];
m8_35 [cluster="Unk.Take", file="Sequence.cs", label="Entry Unk.Take", span=""];
m8_15 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="Sequence.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
m8_28 [cluster="object.Equals(object)", file="Sequence.cs", label="Entry object.Equals(object)", span="0-0"];
m8_36 [cluster="lambda expression", file="Sequence.cs", label="Entry lambda expression", span="36-36"];
m8_5 [cluster="lambda expression", color=red, community=0, file="Sequence.cs", label="0: f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).MapMaybe(info =>\r\n                                   info.TargetType == TargetType.Sequence\r\n                                        ? new[] { f }.Concat(tokens.OfSequence(f, info))\r\n                                        : new Token[] { }, new Token[] { })\r\n                            : new Token[] { }", span="18-23"];
m8_12 [cluster="lambda expression", file="Sequence.cs", label="info.TargetType == TargetType.Sequence\r\n                                        ? new[] { f }.Concat(tokens.OfSequence(f, info))\r\n                                        : new Token[] { }", span="20-22"];
m8_4 [cluster="lambda expression", file="Sequence.cs", label="Entry lambda expression", span="17-23"];
m8_6 [cluster="lambda expression", file="Sequence.cs", label="Exit lambda expression", span="17-23"];
m8_11 [cluster="lambda expression", file="Sequence.cs", label="Entry lambda expression", span="19-22"];
m8_13 [cluster="lambda expression", file="Sequence.cs", label="Exit lambda expression", span="19-22"];
m8_26 [cluster="lambda expression", file="Sequence.cs", label="t.Equals(nameToken)", span="30-30"];
m8_30 [cluster="lambda expression", color=red, community=1, file="Sequence.cs", label="0: info.MaxItems.MapMaybe(\r\n                            n => tokens.Skip(nameIndex + 1).Take(n),\r\n                                 tokens.Skip(nameIndex + 1).TakeWhile(v => v.IsValue()))", span="34-36"];
m8_33 [cluster="lambda expression", file="Sequence.cs", label="tokens.Skip(nameIndex + 1).Take(n)", span="35-35"];
m8_25 [cluster="lambda expression", file="Sequence.cs", label="Entry lambda expression", span="30-30"];
m8_29 [cluster="lambda expression", file="Sequence.cs", label="Entry lambda expression", span="34-36"];
m8_39 [cluster="lambda expression", file="Sequence.cs", label="Entry lambda expression", span="37-37"];
m8_27 [cluster="lambda expression", file="Sequence.cs", label="Exit lambda expression", span="30-30"];
m8_31 [cluster="lambda expression", file="Sequence.cs", label="Exit lambda expression", span="34-36"];
m8_32 [cluster="lambda expression", file="Sequence.cs", label="Entry lambda expression", span="35-35"];
m8_34 [cluster="lambda expression", file="Sequence.cs", label="Exit lambda expression", span="35-35"];
m8_37 [cluster="lambda expression", file="Sequence.cs", label="v.IsValue()", span="36-36"];
m8_38 [cluster="lambda expression", file="Sequence.cs", label="Exit lambda expression", span="36-36"];
m8_40 [cluster="lambda expression", file="Sequence.cs", label="v.IsValue()", span="37-37"];
m8_41 [cluster="lambda expression", file="Sequence.cs", label="Exit lambda expression", span="37-37"];
m8_23 [cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="Sequence.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0"];
m8_16 [cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", file="Sequence.cs", label="Entry CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", span="28-28"];
m8_17 [cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", file="Sequence.cs", label="var nameIndex = tokens.IndexOf(t => t.Equals(nameToken))", span="30-30"];
m8_19 [cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", color=red, community=1, file="Sequence.cs", label="0: return info.NextValue.MapMaybe(\r\n                    _ => info.MaxItems.MapMaybe(\r\n                            n => tokens.Skip(nameIndex + 1).Take(n),\r\n                                 tokens.Skip(nameIndex + 1).TakeWhile(v => v.IsValue())),\r\n                    tokens.Skip(nameIndex + 1).TakeWhile(v => v.IsValue()));", span="33-37"];
m8_18 [cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", file="Sequence.cs", label="nameIndex >= 0", span="31-31"];
m8_20 [cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", file="Sequence.cs", label="return new Token[] { };", span="39-39"];
m8_21 [cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", file="Sequence.cs", label="Exit CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", span="28-28"];
m8_7 [cluster="CommandLine.Core.Token.IsName()", file="Sequence.cs", label="Entry CommandLine.Core.Token.IsName()", span="128-128"];
m8_14 [cluster="Unk.OfSequence", file="Sequence.cs", label="Entry Unk.OfSequence", span=""];
m8_8 [cluster="CommandLine.Core.Token.IsValue()", file="Sequence.cs", label="Entry CommandLine.Core.Token.IsValue()", span="133-133"];
m8_9 [cluster="System.Func<T, TResult>.Invoke(T)", file="Sequence.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m8_3 [cluster="Unk.Pairwise", file="Sequence.cs", label="Entry Unk.Pairwise", span=""];
m8_42 [file="Sequence.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", span=""];
m8_43 [file="Sequence.cs", label="System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>", span=""];
m8_44 [file="Sequence.cs", label="CommandLine.Core.Token", span=""];
m8_45 [file="Sequence.cs", label="CommandLine.Core.Token", span=""];
m8_46 [file="Sequence.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", span=""];
m8_47 [file="Sequence.cs", label="CommandLine.Core.TypeDescriptor", span=""];
m8_48 [file="Sequence.cs", label=nameIndex, span=""];
m10_40 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="110-110"];
m10_41 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="SpecificationPropertyExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="115-119"];
m10_42 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="SpecificationPropertyExtensions.cs", label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="122-122"];
m10_43 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="SpecificationPropertyExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="110-110"];
m10_150 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="6-6"];
m10_172 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33"];
m10_11 [cluster="Unk.True", file="SpecificationPropertyExtensions.cs", label="Entry Unk.True", span=""];
m10_159 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="405-405"];
m10_160 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="SpecificationPropertyExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="410-414"];
m10_161 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="SpecificationPropertyExtensions.cs", label="expected.ShouldBeEquivalentTo(result.Value.StringSequence)", span="417-417"];
m10_162 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="SpecificationPropertyExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="405-405"];
m10_233 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="556-556"];
m10_234 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="SpecificationPropertyExtensions.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="559-559"];
m10_235 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="SpecificationPropertyExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="562-566"];
m10_236 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="SpecificationPropertyExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="569-569"];
m10_237 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="SpecificationPropertyExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="556-556"];
m10_274 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="652-652"];
m10_275 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="SpecificationPropertyExtensions.cs", label="var expectedResult = new[] { new MissingRequiredOptionError(NameInfo.EmptyName) }", span="655-655"];
m10_276 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="SpecificationPropertyExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithRequiredValue(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="658-662"];
m10_277 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="SpecificationPropertyExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="665-665"];
m10_278 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="SpecificationPropertyExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="652-652"];
m10_220 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283"];
m10_82 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="6-6"];
m10_62 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="6-6"];
m10_151 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="383-383"];
m10_152 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="SpecificationPropertyExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="388-392"];
m10_153 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="SpecificationPropertyExtensions.cs", label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="395-395"];
m10_154 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="SpecificationPropertyExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="383-383"];
m10_143 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="361-361"];
m10_144 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="SpecificationPropertyExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceWithoutRange(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="366-370"];
m10_145 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="SpecificationPropertyExtensions.cs", label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="373-373"];
m10_146 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="SpecificationPropertyExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="361-361"];
m10_241 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="575-575"];
m10_242 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="SpecificationPropertyExtensions.cs", label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="578-578"];
m10_243 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="SpecificationPropertyExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="581-585"];
m10_244 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="SpecificationPropertyExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="588-588"];
m10_245 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="SpecificationPropertyExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="575-575"];
m10_55 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="155-155"];
m10_56 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="SpecificationPropertyExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="160-164"];
m10_57 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="SpecificationPropertyExtensions.cs", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="167-167"];
m10_58 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="SpecificationPropertyExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="155-155"];
m10_54 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", span="6-6"];
m10_266 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="634-634"];
m10_267 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="SpecificationPropertyExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="639-643"];
m10_268 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="SpecificationPropertyExtensions.cs", label="Assert.True(expected.Equals(result.Value.StringValue))", span="646-646"];
m10_269 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="SpecificationPropertyExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="634-634"];
m10_207 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="498-498"];
m10_208 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="SpecificationPropertyExtensions.cs", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="500-503"];
m10_209 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="SpecificationPropertyExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="505-509"];
m10_210 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="SpecificationPropertyExtensions.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="512-512"];
m10_211 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="SpecificationPropertyExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="498-498"];
m10_187 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
m10_31 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="88-88"];
m10_32 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="SpecificationPropertyExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequence(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="93-97"];
m10_33 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="SpecificationPropertyExtensions.cs", label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="100-100"];
m10_34 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="SpecificationPropertyExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="88-88"];
m10_0 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="16-16"];
m10_1 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="SpecificationPropertyExtensions.cs", label="var fakeOptions = new FakeOptions()", span="19-19"];
m10_2 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="SpecificationPropertyExtensions.cs", label="var expectedResult = ParserResult.Create(\r\n                ParserResultType.Options,\r\n                fakeOptions, new Error[] { new HelpRequestedError() })", span="20-22"];
m10_3 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="SpecificationPropertyExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => fakeOptions,\r\n                new[] { ''--help'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="25-29"];
m10_4 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="SpecificationPropertyExtensions.cs", label="Assert.True(expectedResult.Equals(result))", span="32-32"];
m10_5 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="SpecificationPropertyExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="16-16"];
m10_224 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="537-537"];
m10_225 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="SpecificationPropertyExtensions.cs", label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="540-540"];
m10_226 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="SpecificationPropertyExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequired(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="543-547"];
m10_227 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="SpecificationPropertyExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="550-550"];
m10_228 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="SpecificationPropertyExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="537-537"];
m10_8 [cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="100-100"];
m10_290 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="693-693"];
m10_291 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="SpecificationPropertyExtensions.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="696-696"];
m10_292 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="SpecificationPropertyExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceMinMaxEqual(),\r\n                new[] { ''one'', ''two'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="699-703"];
m10_78 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316"];
m10_287 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Entry lambda expression", span="681-681"];
m10_13 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label=fakeOptions, span="26-26"];
m10_12 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Entry lambda expression", span="26-26"];
m10_14 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Exit lambda expression", span="26-26"];
m10_20 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Entry lambda expression", span="47-47"];
m10_21 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="new FakeOptions()", span="47-47"];
m10_22 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Exit lambda expression", span="47-47"];
m10_27 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Entry lambda expression", span="70-70"];
m10_28 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="new FakeOptionsWithDouble()", span="70-70"];
m10_29 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Exit lambda expression", span="70-70"];
m10_36 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Entry lambda expression", span="94-94"];
m10_37 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="new FakeOptionsWithSequence()", span="94-94"];
m10_38 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Exit lambda expression", span="94-94"];
m10_44 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Entry lambda expression", span="116-116"];
m10_45 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="new FakeOptions()", span="116-116"];
m10_46 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Exit lambda expression", span="116-116"];
m10_51 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Entry lambda expression", span="139-139"];
m10_52 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="139-139"];
m10_53 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Exit lambda expression", span="139-139"];
m10_59 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Entry lambda expression", span="161-161"];
m10_60 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="161-161"];
m10_61 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Exit lambda expression", span="161-161"];
m10_70 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Entry lambda expression", span="180-180"];
m10_71 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="180-180"];
m10_72 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Exit lambda expression", span="180-180"];
m10_79 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Entry lambda expression", span="199-199"];
m10_80 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="199-199"];
m10_81 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Exit lambda expression", span="199-199"];
m10_88 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Entry lambda expression", span="219-219"];
m10_89 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="219-219"];
m10_90 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Exit lambda expression", span="219-219"];
m10_96 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Entry lambda expression", span="238-238"];
m10_97 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="238-238"];
m10_98 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Exit lambda expression", span="238-238"];
m10_105 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Entry lambda expression", span="262-262"];
m10_106 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="new FakeOptionsWithEnum()", span="262-262"];
m10_107 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Exit lambda expression", span="262-262"];
m10_115 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Entry lambda expression", span="281-281"];
m10_116 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="new FakeOptionsWithEnum()", span="281-281"];
m10_117 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Exit lambda expression", span="281-281"];
m10_123 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Entry lambda expression", span="300-300"];
m10_124 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="new FakeOptionsWithEnum()", span="300-300"];
m10_125 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Exit lambda expression", span="300-300"];
m10_131 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Entry lambda expression", span="319-319"];
m10_132 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="new FakeOptionsWithEnum()", span="319-319"];
m10_133 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Exit lambda expression", span="319-319"];
m10_140 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Entry lambda expression", span="344-344"];
m10_141 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="new FakeOptionsWithValues()", span="344-344"];
m10_142 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Exit lambda expression", span="344-344"];
m10_147 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Entry lambda expression", span="367-367"];
m10_148 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="new FakeOptionsWithSequenceWithoutRange()", span="367-367"];
m10_149 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Exit lambda expression", span="367-367"];
m10_155 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Entry lambda expression", span="389-389"];
m10_156 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="new FakeOptionsWithSequenceAndSeparator()", span="389-389"];
m10_157 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Exit lambda expression", span="389-389"];
m10_163 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Entry lambda expression", span="411-411"];
m10_164 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="new FakeOptionsWithSequenceAndSeparator()", span="411-411"];
m10_165 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Exit lambda expression", span="411-411"];
m10_173 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Entry lambda expression", span="440-440"];
m10_176 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Entry lambda expression", span="441-443"];
m10_174 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="new FakeOptionsWithValues()", span="440-440"];
m10_175 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Exit lambda expression", span="440-440"];
m10_177 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="442-443"];
m10_181 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="443-443"];
m10_185 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="443-443"];
m10_178 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Exit lambda expression", span="441-443"];
m10_180 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Entry lambda expression", span="443-443"];
m10_182 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Exit lambda expression", span="443-443"];
m10_184 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Entry lambda expression", span="443-443"];
m10_186 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Exit lambda expression", span="443-443"];
m10_194 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Entry lambda expression", span="466-466"];
m10_195 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="new FakeOptionsWithSets()", span="466-466"];
m10_196 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Exit lambda expression", span="466-466"];
m10_204 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Entry lambda expression", span="486-486"];
m10_205 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="new FakeOptionWithRequiredAndSet()", span="486-486"];
m10_206 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Exit lambda expression", span="486-486"];
m10_212 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Entry lambda expression", span="506-506"];
m10_213 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="new FakeOptionWithRequiredAndSet()", span="506-506"];
m10_214 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Exit lambda expression", span="506-506"];
m10_221 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Entry lambda expression", span="526-526"];
m10_222 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="new FakeOptionWithRequiredAndSet()", span="526-526"];
m10_223 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Exit lambda expression", span="526-526"];
m10_229 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Entry lambda expression", span="544-544"];
m10_230 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="new FakeOptionWithRequired()", span="544-544"];
m10_231 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Exit lambda expression", span="544-544"];
m10_238 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Entry lambda expression", span="563-563"];
m10_239 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="new FakeOptions()", span="563-563"];
m10_240 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Exit lambda expression", span="563-563"];
m10_247 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Entry lambda expression", span="582-582"];
m10_248 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="new FakeOptions()", span="582-582"];
m10_249 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Exit lambda expression", span="582-582"];
m10_255 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Entry lambda expression", span="601-601"];
m10_256 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="new FakeOptions()", span="601-601"];
m10_257 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Exit lambda expression", span="601-601"];
m10_263 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Entry lambda expression", span="620-620"];
m10_264 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="new FakeOptions()", span="620-620"];
m10_265 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Exit lambda expression", span="620-620"];
m10_271 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Entry lambda expression", span="640-640"];
m10_272 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="new FakeOptions()", span="640-640"];
m10_273 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Exit lambda expression", span="640-640"];
m10_279 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Entry lambda expression", span="659-659"];
m10_280 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="new FakeOptionsWithRequiredValue()", span="659-659"];
m10_281 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Exit lambda expression", span="659-659"];
m10_288 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="new FakeOptions()", span="681-681"];
m10_289 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Exit lambda expression", span="681-681"];
m10_215 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="517-517"];
m10_216 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="SpecificationPropertyExtensions.cs", label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="519-523"];
m10_217 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="SpecificationPropertyExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="525-529"];
m10_218 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="SpecificationPropertyExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="532-532"];
m10_219 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="SpecificationPropertyExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="517-517"];
m10_100 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="256-256"];
m10_101 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="SpecificationPropertyExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="261-265"];
m10_102 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="SpecificationPropertyExtensions.cs", label="expected.ShouldBeEquivalentTo(result.Value.Colors)", span="268-268"];
m10_103 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="SpecificationPropertyExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="256-256"];
m10_35 [cluster="Unk.SequenceEqual", file="SpecificationPropertyExtensions.cs", label="Entry Unk.SequenceEqual", span=""];
m10_126 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="312-312"];
m10_127 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="SpecificationPropertyExtensions.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="315-315"];
m10_128 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="SpecificationPropertyExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''RED'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="318-322"];
m10_129 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="SpecificationPropertyExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="325-325"];
m10_130 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="SpecificationPropertyExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="312-312"];
m10_68 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="261-261"];
m10_99 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="6-6"];
m10_166 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="426-426"];
m10_167 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="SpecificationPropertyExtensions.cs", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="429-435"];
m10_168 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="SpecificationPropertyExtensions.cs", label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="436-436"];
m10_170 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="SpecificationPropertyExtensions.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="449-449"];
m10_169 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="SpecificationPropertyExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="439-446"];
m10_171 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="SpecificationPropertyExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="426-426"];
m10_83 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="212-212"];
m10_84 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="SpecificationPropertyExtensions.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="215-215"];
m10_85 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="SpecificationPropertyExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="218-222"];
m10_86 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="SpecificationPropertyExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="225-225"];
m10_87 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="SpecificationPropertyExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="212-212"];
m10_258 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="613-613"];
m10_259 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="SpecificationPropertyExtensions.cs", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="616-616"];
m10_260 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="SpecificationPropertyExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="619-623"];
m10_261 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="SpecificationPropertyExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="626-626"];
m10_262 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="SpecificationPropertyExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="613-613"];
m10_10 [cluster="CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", span="87-87"];
m10_30 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", span="4-4"];
m10_63 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="173-173"];
m10_64 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="SpecificationPropertyExtensions.cs", label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="176-176"];
m10_65 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="SpecificationPropertyExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                new[] { ''-s'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="179-183"];
m10_66 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="SpecificationPropertyExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="186-186"];
m10_67 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="SpecificationPropertyExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="173-173"];
m10_108 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="11-11"];
m10_134 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="331-331"];
m10_135 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="SpecificationPropertyExtensions.cs", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="334-340"];
m10_136 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="SpecificationPropertyExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="343-347"];
m10_137 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="SpecificationPropertyExtensions.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="350-350"];
m10_138 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="SpecificationPropertyExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="331-331"];
m10_283 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="675-675"];
m10_284 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="SpecificationPropertyExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="680-684"];
m10_285 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="SpecificationPropertyExtensions.cs", label="expected.ShouldBeEquivalentTo(result.Value.StringValue)", span="687-687"];
m10_286 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="SpecificationPropertyExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="675-675"];
m10_203 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", span="4-4"];
m10_73 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="192-192"];
m10_74 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="SpecificationPropertyExtensions.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="195-195"];
m10_75 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="SpecificationPropertyExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="198-202"];
m10_76 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="SpecificationPropertyExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="205-205"];
m10_77 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="SpecificationPropertyExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="192-192"];
m10_246 [cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="272-272"];
m10_91 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="231-231"];
m10_92 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="SpecificationPropertyExtensions.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="234-234"];
m10_93 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="SpecificationPropertyExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue(),\r\n                new[] { ''one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="237-241"];
m10_94 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="SpecificationPropertyExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="244-244"];
m10_95 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="SpecificationPropertyExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="231-231"];
m10_114 [cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="305-305"];
m10_158 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="6-6"];
m10_179 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="31-31"];
m10_183 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11"];
m10_198 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="478-478"];
m10_199 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="SpecificationPropertyExtensions.cs", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = null\r\n            }", span="480-483"];
m10_200 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="SpecificationPropertyExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="485-489"];
m10_201 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="SpecificationPropertyExtensions.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="492-492"];
m10_202 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="SpecificationPropertyExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="478-478"];
m10_197 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4"];
m10_270 [cluster="string.Equals(string)", file="SpecificationPropertyExtensions.cs", label="Entry string.Equals(string)", span="0-0"];
m10_193 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294"];
m10_232 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4"];
m10_69 [cluster="CommandLine.NameInfo.NameInfo(string, string)", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20"];
m10_47 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="133-133"];
m10_48 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="SpecificationPropertyExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="138-142"];
m10_49 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="SpecificationPropertyExtensions.cs", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="145-145"];
m10_50 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="SpecificationPropertyExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="133-133"];
m10_15 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="41-41"];
m10_16 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="SpecificationPropertyExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="46-50"];
m10_17 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="SpecificationPropertyExtensions.cs", label="Assert.Equal(expected, result.Value.LongValue)", span="53-53"];
m10_18 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="SpecificationPropertyExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="41-41"];
m10_39 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", span="6-6"];
m10_6 [cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6"];
m10_250 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="594-594"];
m10_251 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="SpecificationPropertyExtensions.cs", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="597-597"];
m10_252 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="SpecificationPropertyExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="600-604"];
m10_253 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="SpecificationPropertyExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="607-607"];
m10_254 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="SpecificationPropertyExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="594-594"];
m10_118 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="293-293"];
m10_119 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="SpecificationPropertyExtensions.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="296-296"];
m10_120 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="SpecificationPropertyExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''Yellow'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="299-303"];
m10_121 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="SpecificationPropertyExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="306-306"];
m10_122 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="SpecificationPropertyExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="293-293"];
m10_109 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="274-274"];
m10_110 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="SpecificationPropertyExtensions.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="277-277"];
m10_111 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="SpecificationPropertyExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''3'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="280-284"];
m10_112 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="SpecificationPropertyExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="287-287"];
m10_113 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="SpecificationPropertyExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="274-274"];
m10_23 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="64-64"];
m10_24 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="SpecificationPropertyExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithDouble(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="69-73"];
m10_25 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="SpecificationPropertyExtensions.cs", label="Assert.Equal(expected, result.Value.DoubleValue)", span="76-76"];
m10_26 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="SpecificationPropertyExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="64-64"];
m10_139 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6"];
m10_282 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", span="4-4"];
m10_7 [cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="338-338"];
m10_19 [cluster="Unk.Equal", file="SpecificationPropertyExtensions.cs", label="Entry Unk.Equal", span=""];
m10_188 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="455-455"];
m10_189 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="SpecificationPropertyExtensions.cs", label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl'')),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''))\r\n                }", span="458-462"];
m10_190 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="SpecificationPropertyExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSets(),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="465-469"];
m10_191 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="SpecificationPropertyExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="472-472"];
m10_192 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="SpecificationPropertyExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="455-455"];
m10_104 [cluster="Unk.ShouldBeEquivalentTo", file="SpecificationPropertyExtensions.cs", label="Entry Unk.ShouldBeEquivalentTo", span=""];
m10_9 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12"];
m10_323 [file="SpecificationPropertyExtensions.cs", label=fakeOptions, span=""];
m10_324 [file="SpecificationPropertyExtensions.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
m11_60 [cluster="Unk.FromJustOrFail", file="SpecificationPropertyRules.cs", label="Entry Unk.FromJustOrFail", span=""];
m11_74 [cluster="NameInfo.cstr", file="SpecificationPropertyRules.cs", label="Entry NameInfo.cstr", span=""];
m11_4 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="24-24"];
m11_8 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="SpecificationPropertyRules.cs", label="return specProps =>\r\n            {\r\n                var options =\r\n                    from sp in specProps\r\n                    where sp.Specification.IsOption()\r\n                    where sp.Value.IsJust()\r\n                    let o = (OptionSpecification)sp.Specification\r\n                    where o.SetName.Length > 0\r\n                    select o;\r\n                var groups = from o in options\r\n                             group o by o.SetName into g\r\n                             select g;\r\n                if (groups.Count() > 1)\r\n                {\r\n                    return\r\n                        from o in options\r\n                        select new MutuallyExclusiveSetError(o.FromOptionSpecification(), o.SetName);\r\n                }\r\n                return Enumerable.Empty<Error>();\r\n            };", span="26-45"];
m11_9 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="SpecificationPropertyRules.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="24-24"];
m11_6 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="96-96"];
m11_40 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", color=green, community=0, file="SpecificationPropertyRules.cs", label="0: return specProps =>\r\n                {\r\n                    var options = specProps\r\n                        .Where(sp => sp.Specification.TargetType == TargetType.Sequence)\r\n                        .Where(sp => sp.Value.IsJust())\r\n                        .Where(sp =>\r\n                            (sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJustOrFail()).Length < sp.Specification.Min.FromJustOrFail())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJustOrFail()).Length > sp.Specification.Max.FromJustOrFail())\r\n                        );\r\n                    if (options.Any())\r\n                    {\r\n                        return\r\n                            from s in options\r\n                            select new SequenceOutOfRangeError(s.Specification.FromSpecification());\r\n                    }\r\n                    return Enumerable.Empty<Error>();\r\n                };", span="98-114"];
m11_41 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="SpecificationPropertyRules.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="96-96"];
m11_38 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="316-316"];
m11_20 [cluster="MutuallyExclusiveSetError.cstr", file="SpecificationPropertyRules.cs", label="Entry MutuallyExclusiveSetError.cstr", span=""];
m11_70 [cluster="CommandLine.Core.Token.IsName()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.Token.IsName()", span="128-128"];
m11_37 [cluster="CommandLine.Core.Specification.IsValue()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.Specification.IsValue()", span="15-15"];
m11_48 [cluster="Unk.Where", file="SpecificationPropertyRules.cs", label="Entry Unk.Where", span=""];
m11_22 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="SpecificationPropertyRules.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m11_33 [cluster="Unk.IsNothing", file="SpecificationPropertyRules.cs", label="Entry Unk.IsNothing", span=""];
m11_39 [cluster="Unk.FromSpecification", file="SpecificationPropertyRules.cs", label="Entry Unk.FromSpecification", span=""];
m11_7 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="117-117"];
m11_61 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs", label="return specProps =>\r\n                {\r\n                    var specs = from sp in specProps\r\n                                where sp.Specification.IsOption()\r\n                                where sp.Value.IsJust()\r\n                                select (OptionSpecification)sp.Specification;\r\n                    var options = from t in tokens\r\n                                  where t.IsName()\r\n                                  join o in specs on t.Text equals o.UniqueName() into to\r\n                                  from o in to.DefaultIfEmpty()\r\n                                  where o != null\r\n                                  select new { o.ShortName, o.LongName };\r\n                    var groups = from x in options\r\n                                 group x by x into g\r\n                                 let count = g.Count()\r\n                                 select new { Value = g.Key, Count = count };\r\n                    var errors = from y in groups\r\n                                 where y.Count > 1\r\n                                 select new RepeatedOptionError(new NameInfo(y.Value.ShortName, y.Value.LongName));\r\n                    return errors;\r\n                };", span="119-139"];
m11_62 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="117-117"];
m11_50 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="360-360"];
m11_0 [cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12"];
m11_1 [cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs", label="return new List<Func<IEnumerable<SpecificationProperty>, IEnumerable<Error>>>\r\n                {\r\n                    EnforceMutuallyExclusiveSet(),\r\n                    EnforceRequired(),\r\n                    EnforceRange(),\r\n                    EnforceSingle(tokens)\r\n                };", span="15-21"];
m11_2 [cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12"];
m11_63 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="119-139"];
m11_43 [cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs", label="0: var options = specProps\r\n                        .Where(sp => sp.Specification.TargetType == TargetType.Sequence)\r\n                        .Where(sp => sp.Value.IsJust())\r\n                        .Where(sp =>\r\n                            (sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJustOrFail()).Length < sp.Specification.Min.FromJustOrFail())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJustOrFail()).Length > sp.Specification.Max.FromJustOrFail())\r\n                        )", span="100-106"];
m11_42 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="98-114"];
m11_44 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="options.Any()", span="107-107"];
m11_51 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="101-101"];
m11_54 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="102-102"];
m11_57 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="103-105"];
m11_45 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="return\r\n                            from s in options\r\n                            select new SequenceOutOfRangeError(s.Specification.FromSpecification());", span="109-111"];
m11_58 [cluster="lambda expression", color=green, community=1, file="SpecificationPropertyRules.cs", label="0: (sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJustOrFail()).Length < sp.Specification.Min.FromJustOrFail())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJustOrFail()).Length > sp.Specification.Max.FromJustOrFail())", span="104-105"];
m11_59 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="103-105"];
m11_47 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="98-114"];
m11_46 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="return Enumerable.Empty<Error>();", span="113-113"];
m11_53 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="101-101"];
m11_52 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="sp.Specification.TargetType == TargetType.Sequence", span="101-101"];
m11_56 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="102-102"];
m11_55 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="sp.Value.IsJust()", span="102-102"];
m11_11 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var options =\r\n                    from sp in specProps\r\n                    where sp.Specification.IsOption()\r\n                    where sp.Value.IsJust()\r\n                    let o = (OptionSpecification)sp.Specification\r\n                    where o.SetName.Length > 0\r\n                    select o", span="28-34"];
m11_26 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var requiredWithValue = from sp in specProps\r\n                    where sp.Specification.IsOption()\r\n                    where sp.Specification.Required\r\n                    where sp.Value.IsJust()\r\n                    let o = (OptionSpecification)sp.Specification\r\n                    where o.SetName.Length > 0\r\n                    select sp.Specification", span="52-58"];
m11_64 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var specs = from sp in specProps\r\n                                where sp.Specification.IsOption()\r\n                                where sp.Value.IsJust()\r\n                                select (OptionSpecification)sp.Specification", span="121-124"];
m11_30 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="return\r\n                    from sp in missing\r\n                    select new MissingRequiredOptionError(sp.FromSpecification());", span="90-92"];
m11_10 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="26-45"];
m11_12 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var groups = from o in options\r\n                             group o by o.SetName into g\r\n                             select g", span="35-37"];
m11_14 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="return\r\n                        from o in options\r\n                        select new MutuallyExclusiveSetError(o.FromOptionSpecification(), o.SetName);", span="40-42"];
m11_25 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="50-93"];
m11_27 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var setWithRequiredValue = (\r\n                    from s in requiredWithValue\r\n                    let o = (OptionSpecification)s\r\n                    where o.SetName.Length > 0\r\n                    select o.SetName)\r\n                        .Distinct()", span="59-64"];
m11_29 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var missing =\r\n                    requiredWithoutValue\r\n                        .Except(requiredWithValue)\r\n                        .Concat(\r\n                            from sp in specProps\r\n                            where sp.Specification.IsOption()\r\n                            where sp.Specification.Required\r\n                            where sp.Value.IsNothing()\r\n                            let o = (OptionSpecification)sp.Specification\r\n                            where o.SetName.Length == 0\r\n                            select sp.Specification)\r\n                        .Concat(\r\n                            from sp in specProps\r\n                            where sp.Specification.IsValue()\r\n                            where sp.Specification.Required\r\n                            where sp.Value.IsNothing()\r\n                            select sp.Specification)", span="73-89"];
m11_65 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var options = from t in tokens\r\n                                  where t.IsName()\r\n                                  join o in specs on t.Text equals o.UniqueName() into to\r\n                                  from o in to.DefaultIfEmpty()\r\n                                  where o != null\r\n                                  select new { o.ShortName, o.LongName }", span="125-130"];
m11_15 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="return Enumerable.Empty<Error>();", span="44-44"];
m11_31 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="50-93"];
m11_16 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="26-45"];
m11_13 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="groups.Count() > 1", span="38-38"];
m11_28 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var requiredWithoutValue = from sp in specProps\r\n                    where sp.Specification.IsOption()\r\n                    where sp.Specification.Required\r\n                    where sp.Value.IsNothing()\r\n                    let o = (OptionSpecification)sp.Specification\r\n                    where o.SetName.Length > 0\r\n                    where setWithRequiredValue.ContainsIfNotEmpty(o.SetName)\r\n                    select sp.Specification", span="65-72"];
m11_66 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var groups = from x in options\r\n                                 group x by x into g\r\n                                 let count = g.Count()\r\n                                 select new { Value = g.Key, Count = count }", span="131-134"];
m11_68 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="return errors;", span="138-138"];
m11_67 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var errors = from y in groups\r\n                                 where y.Count > 1\r\n                                 select new RepeatedOptionError(new NameInfo(y.Value.ShortName, y.Value.LongName))", span="135-137"];
m11_69 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="119-139"];
m11_73 [cluster="CommandLine.RepeatedOptionError.RepeatedOptionError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.RepeatedOptionError.RepeatedOptionError(CommandLine.NameInfo)", span="371-371"];
m11_36 [cluster="Unk.Concat", file="SpecificationPropertyRules.cs", label="Entry Unk.Concat", span=""];
m11_5 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="48-48"];
m11_23 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", file="SpecificationPropertyRules.cs", label="return specProps =>\r\n            {\r\n                var requiredWithValue = from sp in specProps\r\n                    where sp.Specification.IsOption()\r\n                    where sp.Specification.Required\r\n                    where sp.Value.IsJust()\r\n                    let o = (OptionSpecification)sp.Specification\r\n                    where o.SetName.Length > 0\r\n                    select sp.Specification;\r\n                var setWithRequiredValue = (\r\n                    from s in requiredWithValue\r\n                    let o = (OptionSpecification)s\r\n                    where o.SetName.Length > 0\r\n                    select o.SetName)\r\n                        .Distinct();\r\n                var requiredWithoutValue = from sp in specProps\r\n                    where sp.Specification.IsOption()\r\n                    where sp.Specification.Required\r\n                    where sp.Value.IsNothing()\r\n                    let o = (OptionSpecification)sp.Specification\r\n                    where o.SetName.Length > 0\r\n                    where setWithRequiredValue.ContainsIfNotEmpty(o.SetName)\r\n                    select sp.Specification;\r\n                var missing =\r\n                    requiredWithoutValue\r\n                        .Except(requiredWithValue)\r\n                        .Concat(\r\n                            from sp in specProps\r\n                            where sp.Specification.IsOption()\r\n                            where sp.Specification.Required\r\n                            where sp.Value.IsNothing()\r\n                            let o = (OptionSpecification)sp.Specification\r\n                            where o.SetName.Length == 0\r\n                            select sp.Specification)\r\n                        .Concat(\r\n                            from sp in specProps\r\n                            where sp.Specification.IsValue()\r\n                            where sp.Specification.Required\r\n                            where sp.Value.IsNothing()\r\n                            select sp.Specification);\r\n                return\r\n                    from sp in missing\r\n                    select new MissingRequiredOptionError(sp.FromSpecification());\r\n            };", span="50-93"];
m11_24 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", file="SpecificationPropertyRules.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="48-48"];
m11_18 [cluster="Unk.IsJust", file="SpecificationPropertyRules.cs", label="Entry Unk.IsJust", span=""];
m11_34 [cluster="Unk.ContainsIfNotEmpty", file="SpecificationPropertyRules.cs", label="Entry Unk.ContainsIfNotEmpty", span=""];
m11_71 [cluster="Unk.UniqueName", file="SpecificationPropertyRules.cs", label="Entry Unk.UniqueName", span=""];
m11_35 [cluster="Unk.Except", file="SpecificationPropertyRules.cs", label="Entry Unk.Except", span=""];
m11_72 [cluster="Unk.DefaultIfEmpty", file="SpecificationPropertyRules.cs", label="Entry Unk.DefaultIfEmpty", span=""];
m11_17 [cluster="CommandLine.Core.Specification.IsOption()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.Specification.IsOption()", span="10-10"];
m11_3 [cluster="System.Collections.Generic.List<T>.List()", file="SpecificationPropertyRules.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m11_32 [cluster="Unk.Distinct", file="SpecificationPropertyRules.cs", label="Entry Unk.Distinct", span=""];
m11_19 [cluster="Unk.Count", file="SpecificationPropertyRules.cs", label="Entry Unk.Count", span=""];
m11_21 [cluster="Unk.FromOptionSpecification", file="SpecificationPropertyRules.cs", label="Entry Unk.FromOptionSpecification", span=""];
m11_82 [file="SpecificationPropertyRules.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", span=""];
m12_0 [cluster="CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Switch.cs", label="Entry CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11"];
m12_1 [cluster="CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", color=red, community=0, file="Switch.cs", label="0: return from t in tokens\r\n                   where typeLookup(t.Text).MapMaybe(info => t.IsName() && info.TargetType == TargetType.Switch, false)\r\n                   select t;", span="15-17"];
m12_2 [cluster="CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Switch.cs", label="Exit CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11"];
m12_5 [cluster="lambda expression", file="Switch.cs", label="Entry lambda expression", span="16-16"];
m12_6 [cluster="lambda expression", color=red, community=0, file="Switch.cs", label="0: t.IsName() && info.TargetType == TargetType.Switch", span="16-16"];
m12_7 [cluster="lambda expression", file="Switch.cs", label="Exit lambda expression", span="16-16"];
m12_8 [cluster="CommandLine.Core.Token.IsName()", file="Switch.cs", label="Entry CommandLine.Core.Token.IsName()", span="128-128"];
m12_3 [cluster="System.Func<T, TResult>.Invoke(T)", file="Switch.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m12_9 [file="Switch.cs", label=t, span=""];
m13_40 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.ConvertToOrdinal(int)", file="Tokenizer.cs", label="throw new NotImplementedException();", span="81-81"];
m13_41 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.ConvertToOrdinal(int)", file="Tokenizer.cs", label="Exit Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.ConvertToOrdinal(int)", span="79-79"];
m13_42 [cluster="System.NotImplementedException.NotImplementedException()", file="Tokenizer.cs", label="Entry System.NotImplementedException.NotImplementedException()", span="0-0"];
m13_43 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="Tokenizer.cs", label="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter", span=""];
m13_151 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="Tokenizer.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="383-383"];
m13_152 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="Tokenizer.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="388-392"];
m13_153 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="Tokenizer.cs", label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="395-395"];
m13_154 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="Tokenizer.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="383-383"];
m13_62 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", file="Tokenizer.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="6-6"];
m13_54 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", file="Tokenizer.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", span="6-6"];
m13_266 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="Tokenizer.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="634-634"];
m13_267 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="Tokenizer.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="639-643"];
m13_268 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="Tokenizer.cs", label="Assert.True(expected.Equals(result.Value.StringValue))", span="646-646"];
m13_269 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="Tokenizer.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="634-634"];
m13_39 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", file="Tokenizer.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", span="6-6"];
m13_78 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="Tokenizer.cs", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316"];
m13_38 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="94-94"];
m13_32 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="Tokenizer.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequence(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="93-97"];
m13_166 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="Tokenizer.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="426-426"];
m13_170 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="Tokenizer.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="449-449"];
m13_167 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="Tokenizer.cs", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="429-435"];
m13_169 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="Tokenizer.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="439-446"];
m13_168 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="Tokenizer.cs", label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="436-436"];
m13_171 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="Tokenizer.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="426-426"];
m13_258 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="Tokenizer.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="613-613"];
m13_260 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="Tokenizer.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="619-623"];
m13_259 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="Tokenizer.cs", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="616-616"];
m13_261 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="Tokenizer.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="626-626"];
m13_262 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="Tokenizer.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="613-613"];
m13_108 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", file="Tokenizer.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="11-11"];
m13_203 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", file="Tokenizer.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", span="4-4"];
m13_73 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="Tokenizer.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="192-192"];
m13_75 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="Tokenizer.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="198-202"];
m13_74 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="Tokenizer.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="195-195"];
m13_76 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="Tokenizer.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="205-205"];
m13_77 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="Tokenizer.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="192-192"];
m13_246 [cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", file="Tokenizer.cs", label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="272-272"];
m13_91 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="Tokenizer.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="231-231"];
m13_93 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="Tokenizer.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue(),\r\n                new[] { ''one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="237-241"];
m13_92 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="Tokenizer.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="234-234"];
m13_94 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="Tokenizer.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="244-244"];
m13_95 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="Tokenizer.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="231-231"];
m13_183 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="Tokenizer.cs", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11"];
m13_298 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", file="Tokenizer.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", span="9-9"];
m13_321 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", file="Tokenizer.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", span="4-4"];
m13_6 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="Tokenizer.cs", label="(number / 1000000000) > 0", span="21-21"];
m13_250 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="Tokenizer.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="594-594"];
m13_252 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="Tokenizer.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="600-604"];
m13_251 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="Tokenizer.cs", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="597-597"];
m13_253 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="Tokenizer.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="607-607"];
m13_254 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="Tokenizer.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="594-594"];
m13_109 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="Tokenizer.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="274-274"];
m13_111 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="Tokenizer.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''3'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="280-284"];
m13_110 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="Tokenizer.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="277-277"];
m13_112 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="Tokenizer.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="287-287"];
m13_113 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="Tokenizer.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="274-274"];
m13_7 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="Tokenizer.cs", label="parts.Add(number/1000000000 == 1\r\n                    ? string.Format(''mil millones'')\r\n                    : string.Format(''{0} mil millones'', Convert(number/1000000000)))", span="23-25"];
m13_104 [cluster="Unk.ShouldBeEquivalentTo", file="Tokenizer.cs", label="Entry Unk.ShouldBeEquivalentTo", span=""];
m13_172 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="Tokenizer.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33"];
m13_306 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="Tokenizer.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="732-732"];
m13_307 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="Tokenizer.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithScalarValueAndSequenceStringAdjacent(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="737-741"];
m13_308 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="Tokenizer.cs", label="expected.ShouldBeEquivalentTo(result.Value)", span="744-744"];
m13_309 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="Tokenizer.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="732-732"];
m13_82 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", file="Tokenizer.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="6-6"];
m13_143 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="Tokenizer.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="361-361"];
m13_144 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="Tokenizer.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceWithoutRange(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="366-370"];
m13_145 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="Tokenizer.cs", label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="373-373"];
m13_146 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="Tokenizer.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="361-361"];
m13_55 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="Tokenizer.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="155-155"];
m13_56 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="Tokenizer.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="160-164"];
m13_57 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="Tokenizer.cs", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="167-167"];
m13_58 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="Tokenizer.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="155-155"];
m13_37 [cluster="lambda expression", file="Tokenizer.cs", label="new FakeOptionsWithSequence()", span="94-94"];
m13_31 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="Tokenizer.cs", label="Exit Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", span="11-11"];
m13_33 [cluster="string.Format(string, object)", file="Tokenizer.cs", label="Entry string.Format(string, object)", span="0-0"];
m13_34 [cluster="System.Collections.Generic.List<T>.List()", file="Tokenizer.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m13_184 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="443-443"];
m13_27 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="Tokenizer.cs", label="(number % 10) > 0", span="69-69"];
m13_28 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", color=red, community=0, file="Tokenizer.cs", label="1: lastPart += string.Format('' y {0}'', UnitsMap[number % 10])", span="70-70"];
m13_29 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="Tokenizer.cs", label="parts.Add(lastPart)", span="72-72"];
m13_12 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="Tokenizer.cs", label="(number / 1000) > 0", span="39-39"];
m13_20 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="Tokenizer.cs", label="parts.Add(UnitsMap[number])", span="57-57"];
m13_36 [cluster="System.Collections.Generic.List<T>.Add(T)", file="Tokenizer.cs", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
m13_44 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="116-116"];
m13_51 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="139-139"];
m13_59 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="161-161"];
m13_70 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="180-180"];
m13_79 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="199-199"];
m13_88 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="219-219"];
m13_96 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="238-238"];
m13_105 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="262-262"];
m13_115 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="281-281"];
m13_123 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="300-300"];
m13_131 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="319-319"];
m13_140 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="344-344"];
m13_147 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="367-367"];
m13_155 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="389-389"];
m13_163 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="411-411"];
m13_194 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="466-466"];
m13_204 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="486-486"];
m13_212 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="506-506"];
m13_221 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="526-526"];
m13_229 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="544-544"];
m13_238 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="563-563"];
m13_247 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="582-582"];
m13_255 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="601-601"];
m13_263 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="620-620"];
m13_271 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="640-640"];
m13_279 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="659-659"];
m13_287 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="681-681"];
m13_295 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="700-700"];
m13_303 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="719-719"];
m13_310 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="738-738"];
m13_318 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="757-757"];
m13_13 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="Tokenizer.cs", label="parts.Add(number/1000 == 1\r\n                    ? string.Format(''mil'')\r\n                    : string.Format(''{0} mil'', Convert(number/1000)))", span="41-43"];
m13_14 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="Tokenizer.cs", label="number %= 1000", span="45-45"];
m13_22 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="Tokenizer.cs", label="var lastPart = TensMap[number / 10]", span="60-60"];
m13_21 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="Tokenizer.cs", label="number > 20 && number < 30", span="58-58"];
m13_46 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="116-116"];
m13_45 [cluster="lambda expression", file="Tokenizer.cs", label="new FakeOptions()", span="116-116"];
m13_53 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="139-139"];
m13_52 [cluster="lambda expression", file="Tokenizer.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="139-139"];
m13_61 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="161-161"];
m13_60 [cluster="lambda expression", file="Tokenizer.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="161-161"];
m13_72 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="180-180"];
m13_71 [cluster="lambda expression", file="Tokenizer.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="180-180"];
m13_81 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="199-199"];
m13_80 [cluster="lambda expression", file="Tokenizer.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="199-199"];
m13_90 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="219-219"];
m13_89 [cluster="lambda expression", file="Tokenizer.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="219-219"];
m13_98 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="238-238"];
m13_97 [cluster="lambda expression", file="Tokenizer.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="238-238"];
m13_107 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="262-262"];
m13_106 [cluster="lambda expression", file="Tokenizer.cs", label="new FakeOptionsWithEnum()", span="262-262"];
m13_117 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="281-281"];
m13_116 [cluster="lambda expression", file="Tokenizer.cs", label="new FakeOptionsWithEnum()", span="281-281"];
m13_125 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="300-300"];
m13_124 [cluster="lambda expression", file="Tokenizer.cs", label="new FakeOptionsWithEnum()", span="300-300"];
m13_133 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="319-319"];
m13_132 [cluster="lambda expression", file="Tokenizer.cs", label="new FakeOptionsWithEnum()", span="319-319"];
m13_142 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="344-344"];
m13_141 [cluster="lambda expression", file="Tokenizer.cs", label="new FakeOptionsWithValues()", span="344-344"];
m13_149 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="367-367"];
m13_148 [cluster="lambda expression", file="Tokenizer.cs", label="new FakeOptionsWithSequenceWithoutRange()", span="367-367"];
m13_157 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="389-389"];
m13_156 [cluster="lambda expression", file="Tokenizer.cs", label="new FakeOptionsWithSequenceAndSeparator()", span="389-389"];
m13_165 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="411-411"];
m13_164 [cluster="lambda expression", file="Tokenizer.cs", label="new FakeOptionsWithSequenceAndSeparator()", span="411-411"];
m13_196 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="466-466"];
m13_195 [cluster="lambda expression", file="Tokenizer.cs", label="new FakeOptionsWithSets()", span="466-466"];
m13_206 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="486-486"];
m13_205 [cluster="lambda expression", file="Tokenizer.cs", label="new FakeOptionWithRequiredAndSet()", span="486-486"];
m13_214 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="506-506"];
m13_213 [cluster="lambda expression", file="Tokenizer.cs", label="new FakeOptionWithRequiredAndSet()", span="506-506"];
m13_223 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="526-526"];
m13_222 [cluster="lambda expression", file="Tokenizer.cs", label="new FakeOptionWithRequiredAndSet()", span="526-526"];
m13_231 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="544-544"];
m13_230 [cluster="lambda expression", file="Tokenizer.cs", label="new FakeOptionWithRequired()", span="544-544"];
m13_240 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="563-563"];
m13_239 [cluster="lambda expression", file="Tokenizer.cs", label="new FakeOptions()", span="563-563"];
m13_249 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="582-582"];
m13_248 [cluster="lambda expression", file="Tokenizer.cs", label="new FakeOptions()", span="582-582"];
m13_257 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="601-601"];
m13_256 [cluster="lambda expression", file="Tokenizer.cs", label="new FakeOptions()", span="601-601"];
m13_265 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="620-620"];
m13_264 [cluster="lambda expression", file="Tokenizer.cs", label="new FakeOptions()", span="620-620"];
m13_273 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="640-640"];
m13_272 [cluster="lambda expression", file="Tokenizer.cs", label="new FakeOptions()", span="640-640"];
m13_281 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="659-659"];
m13_280 [cluster="lambda expression", file="Tokenizer.cs", label="new FakeOptionsWithRequiredValue()", span="659-659"];
m13_289 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="681-681"];
m13_288 [cluster="lambda expression", file="Tokenizer.cs", label="new FakeOptions()", span="681-681"];
m13_297 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="700-700"];
m13_296 [cluster="lambda expression", file="Tokenizer.cs", label="new FakeOptionsWithSequenceMinMaxEqual()", span="700-700"];
m13_305 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="719-719"];
m13_304 [cluster="lambda expression", file="Tokenizer.cs", label="new FakeOptionsWithRequiredValue()", span="719-719"];
m13_312 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="738-738"];
m13_311 [cluster="lambda expression", file="Tokenizer.cs", label="new FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="738-738"];
m13_320 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="757-757"];
m13_319 [cluster="lambda expression", file="Tokenizer.cs", label="new FakeOptionsWithNullables()", span="757-757"];
m13_174 [cluster="lambda expression", file="Tokenizer.cs", label="new FakeOptionsWithValues()", span="440-440"];
m13_173 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="440-440"];
m13_175 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="440-440"];
m13_176 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="441-443"];
m13_178 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="441-443"];
m13_177 [cluster="lambda expression", file="Tokenizer.cs", label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="442-443"];
m13_181 [cluster="lambda expression", file="Tokenizer.cs", label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="443-443"];
m13_185 [cluster="lambda expression", file="Tokenizer.cs", label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="443-443"];
m13_180 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="443-443"];
m13_182 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="443-443"];
m13_186 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="443-443"];
m13_10 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="Tokenizer.cs", label="parts.Add(number/1000000 == 1\r\n                    ? string.Format(''millón'')\r\n                    : string.Format(''{0} millones'', Convert(number/1000000)))", span="32-34"];
m13_30 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="Tokenizer.cs", label="return string.Join('' '', parts.ToArray());", span="76-76"];
m13_158 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", file="Tokenizer.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="6-6"];
m13_179 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="Tokenizer.cs", label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="31-31"];
m13_193 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="Tokenizer.cs", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294"];
m13_232 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", file="Tokenizer.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4"];
m13_47 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="Tokenizer.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="133-133"];
m13_48 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="Tokenizer.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="138-142"];
m13_49 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="Tokenizer.cs", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="145-145"];
m13_50 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="Tokenizer.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="133-133"];
m13_118 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="Tokenizer.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="293-293"];
m13_120 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="Tokenizer.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''Yellow'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="299-303"];
m13_119 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="Tokenizer.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="296-296"];
m13_121 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="Tokenizer.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="306-306"];
m13_122 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="Tokenizer.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="293-293"];
m13_139 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", file="Tokenizer.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6"];
m13_23 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="Tokenizer.cs", label="(number % 10) > 0", span="61-61"];
m13_24 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", color=green, community=0, file="Tokenizer.cs", label="0: lastPart += string.Format('' {0}'', UnitsMap[number % 10])", span="62-62"];
m13_25 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="Tokenizer.cs", label="parts.Add(lastPart)", span="64-64"];
m13_26 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="Tokenizer.cs", label="var lastPart = TensMap[number / 10]", span="68-68"];
m13_282 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", file="Tokenizer.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", span="4-4"];
m13_11 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="Tokenizer.cs", label="number %= 1000000", span="36-36"];
m13_274 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="Tokenizer.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="652-652"];
m13_276 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="Tokenizer.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithRequiredValue(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="658-662"];
m13_275 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="Tokenizer.cs", label="var expectedResult = new[] { new MissingRequiredOptionError(NameInfo.EmptyName) }", span="655-655"];
m13_277 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="Tokenizer.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="665-665"];
m13_278 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="Tokenizer.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="652-652"];
m13_233 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="Tokenizer.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="556-556"];
m13_235 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="Tokenizer.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="562-566"];
m13_234 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="Tokenizer.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="559-559"];
m13_236 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="Tokenizer.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="569-569"];
m13_237 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="Tokenizer.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="556-556"];
m13_187 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="Tokenizer.cs", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
m13_0 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="Tokenizer.cs", label="Entry Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", span="11-11"];
m13_3 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="Tokenizer.cs", label="number < 0", span="16-16"];
m13_1 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="Tokenizer.cs", label="number == 0", span="13-13"];
m13_2 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="Tokenizer.cs", label="return ''cero'';", span="14-14"];
m13_4 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="Tokenizer.cs", label="return string.Format(''menos {0}'', Convert(Math.Abs(number)));", span="17-17"];
m13_5 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="Tokenizer.cs", label="var parts = new List<string>()", span="19-19"];
m13_224 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="Tokenizer.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="537-537"];
m13_226 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="Tokenizer.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequired(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="543-547"];
m13_225 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="Tokenizer.cs", label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="540-540"];
m13_227 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="Tokenizer.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="550-550"];
m13_228 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="Tokenizer.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="537-537"];
m13_215 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="Tokenizer.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="517-517"];
m13_217 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="Tokenizer.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="525-529"];
m13_216 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="Tokenizer.cs", label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="519-523"];
m13_218 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="Tokenizer.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="532-532"];
m13_219 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="Tokenizer.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="517-517"];
m13_126 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="Tokenizer.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="312-312"];
m13_128 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="Tokenizer.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''RED'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="318-322"];
m13_127 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="Tokenizer.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="315-315"];
m13_129 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="Tokenizer.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="325-325"];
m13_130 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="Tokenizer.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="312-312"];
m13_35 [cluster="string.Format(string, params object[])", file="Tokenizer.cs", label="Entry string.Format(string, params object[])", span="0-0"];
m13_68 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="Tokenizer.cs", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="261-261"];
m13_299 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="Tokenizer.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="713-713"];
m13_300 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="Tokenizer.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithRequiredValue(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="718-722"];
m13_301 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="Tokenizer.cs", label="expected.ShouldBeEquivalentTo(result.Value)", span="725-725"];
m13_302 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="Tokenizer.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="713-713"];
m13_83 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="Tokenizer.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="212-212"];
m13_85 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="Tokenizer.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="218-222"];
m13_84 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="Tokenizer.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="215-215"];
m13_86 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="Tokenizer.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="225-225"];
m13_87 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="Tokenizer.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="212-212"];
m13_63 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="Tokenizer.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="173-173"];
m13_65 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="Tokenizer.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                new[] { ''-s'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="179-183"];
m13_64 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="Tokenizer.cs", label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="176-176"];
m13_66 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="Tokenizer.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="186-186"];
m13_67 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="Tokenizer.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="173-173"];
m13_134 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="Tokenizer.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="331-331"];
m13_136 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="Tokenizer.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="343-347"];
m13_135 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="Tokenizer.cs", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="334-340"];
m13_137 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="Tokenizer.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="350-350"];
m13_138 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="Tokenizer.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="331-331"];
m13_313 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", file="Tokenizer.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="6-6"];
m13_270 [cluster="string.Equals(string)", file="Tokenizer.cs", label="Entry string.Equals(string)", span="0-0"];
m13_197 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", file="Tokenizer.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4"];
m13_8 [cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="Tokenizer.cs", label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="100-100"];
m13_9 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="Tokenizer.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12"];
m13_15 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="Tokenizer.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="41-41"];
m13_16 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="Tokenizer.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="46-50"];
m13_17 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="Tokenizer.cs", label="Assert.Equal(expected, result.Value.LongValue)", span="53-53"];
m13_18 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="Tokenizer.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="41-41"];
m13_19 [cluster="Unk.Equal", file="Tokenizer.cs", label="Entry Unk.Equal", span=""];
m13_69 [cluster="CommandLine.NameInfo.NameInfo(string, string)", file="Tokenizer.cs", label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20"];
m13_150 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", file="Tokenizer.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="6-6"];
m13_159 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="Tokenizer.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="405-405"];
m13_160 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="Tokenizer.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="410-414"];
m13_161 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="Tokenizer.cs", label="expected.ShouldBeEquivalentTo(result.Value.StringSequence)", span="417-417"];
m13_162 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="Tokenizer.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="405-405"];
m13_220 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="Tokenizer.cs", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283"];
m13_314 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="Tokenizer.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="751-751"];
m13_315 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="Tokenizer.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithNullables(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="756-760"];
m13_316 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="Tokenizer.cs", label="expected.ShouldBeEquivalentTo(result.Value.NullableInt)", span="763-763"];
m13_317 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="Tokenizer.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="751-751"];
m13_241 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="Tokenizer.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="575-575"];
m13_243 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="Tokenizer.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="581-585"];
m13_242 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="Tokenizer.cs", label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="578-578"];
m13_244 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="Tokenizer.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="588-588"];
m13_245 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="Tokenizer.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="575-575"];
m13_207 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="Tokenizer.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="498-498"];
m13_209 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="Tokenizer.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="505-509"];
m13_208 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="Tokenizer.cs", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="500-503"];
m13_210 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="Tokenizer.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="512-512"];
m13_211 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="Tokenizer.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="498-498"];
m13_290 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="Tokenizer.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="693-693"];
m13_292 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="Tokenizer.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceMinMaxEqual(),\r\n                new[] { ''one'', ''two'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="699-703"];
m13_291 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="Tokenizer.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="696-696"];
m13_293 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="Tokenizer.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="706-706"];
m13_294 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="Tokenizer.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="693-693"];
m13_100 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="Tokenizer.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="256-256"];
m13_101 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="Tokenizer.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="261-265"];
m13_102 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="Tokenizer.cs", label="expected.ShouldBeEquivalentTo(result.Value.Colors)", span="268-268"];
m13_103 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="Tokenizer.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="256-256"];
m13_99 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", file="Tokenizer.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="6-6"];
m13_283 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="Tokenizer.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="675-675"];
m13_284 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="Tokenizer.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="680-684"];
m13_285 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="Tokenizer.cs", label="expected.ShouldBeEquivalentTo(result.Value.StringValue)", span="687-687"];
m13_286 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="Tokenizer.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="675-675"];
m13_114 [cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="Tokenizer.cs", label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="305-305"];
m13_198 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="Tokenizer.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="478-478"];
m13_200 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="Tokenizer.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="485-489"];
m13_199 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="Tokenizer.cs", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = null\r\n            }", span="480-483"];
m13_201 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="Tokenizer.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="492-492"];
m13_202 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="Tokenizer.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="478-478"];
m13_188 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="Tokenizer.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="455-455"];
m13_190 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="Tokenizer.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSets(),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="465-469"];
m13_189 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="Tokenizer.cs", label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl'')),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''))\r\n                }", span="458-462"];
m13_191 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="Tokenizer.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="472-472"];
m13_192 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="Tokenizer.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="455-455"];
m13_322 [file="Tokenizer.cs", label=fakeOptions, span=""];
m13_323 [file="Tokenizer.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
m15_40 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="110-110"];
m15_41 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="TypeDescriptor.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="115-119"];
m15_42 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="TypeDescriptor.cs", label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="122-122"];
m15_43 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="110-110"];
m15_150 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="6-6"];
m15_172 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TypeDescriptor.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33"];
m15_306 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="732-732"];
m15_307 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="TypeDescriptor.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithScalarValueAndSequenceStringAdjacent(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="737-741"];
m15_308 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="TypeDescriptor.cs", label="expected.ShouldBeEquivalentTo(result.Value)", span="744-744"];
m15_309 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="732-732"];
m15_11 [cluster="Unk.ShouldBeEquivalentTo", file="TypeDescriptor.cs", label="Entry Unk.ShouldBeEquivalentTo", span=""];
m15_159 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="405-405"];
m15_160 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="TypeDescriptor.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="410-414"];
m15_161 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="TypeDescriptor.cs", label="expected.ShouldBeEquivalentTo(result.Value.StringSequence)", span="417-417"];
m15_162 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="405-405"];
m15_233 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="556-556"];
m15_235 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="562-566"];
m15_234 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="559-559"];
m15_236 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="569-569"];
m15_237 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="556-556"];
m15_274 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="652-652"];
m15_276 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="TypeDescriptor.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithRequiredValue(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="658-662"];
m15_275 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="TypeDescriptor.cs", label="var expectedResult = new[] { new MissingRequiredOptionError(NameInfo.EmptyName) }", span="655-655"];
m15_277 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="TypeDescriptor.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="665-665"];
m15_278 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="652-652"];
m15_220 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="TypeDescriptor.cs", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283"];
m15_82 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="6-6"];
m15_151 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="383-383"];
m15_152 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="TypeDescriptor.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="388-392"];
m15_153 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="TypeDescriptor.cs", label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="395-395"];
m15_154 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="383-383"];
m15_62 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="6-6"];
m15_143 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="361-361"];
m15_144 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="TypeDescriptor.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceWithoutRange(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="366-370"];
m15_145 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="TypeDescriptor.cs", label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="373-373"];
m15_146 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="361-361"];
m15_241 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="575-575"];
m15_243 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="TypeDescriptor.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="581-585"];
m15_242 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="TypeDescriptor.cs", label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="578-578"];
m15_244 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="TypeDescriptor.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="588-588"];
m15_245 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="575-575"];
m15_55 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="155-155"];
m15_56 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="TypeDescriptor.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="160-164"];
m15_57 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="TypeDescriptor.cs", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="167-167"];
m15_58 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="155-155"];
m15_54 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", span="6-6"];
m15_266 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="634-634"];
m15_267 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="TypeDescriptor.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="639-643"];
m15_268 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="TypeDescriptor.cs", label="Assert.True(expected.Equals(result.Value.StringValue))", span="646-646"];
m15_269 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="634-634"];
m15_207 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="498-498"];
m15_209 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="TypeDescriptor.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="505-509"];
m15_208 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="TypeDescriptor.cs", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="500-503"];
m15_210 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="TypeDescriptor.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="512-512"];
m15_211 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="498-498"];
m15_187 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TypeDescriptor.cs", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
m15_31 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="88-88"];
m15_32 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="TypeDescriptor.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequence(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="93-97"];
m15_33 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="TypeDescriptor.cs", label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="100-100"];
m15_34 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="88-88"];
m15_0 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", span="14-14"];
m15_3 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="TypeDescriptor.cs", label="var result = NameLookup.WithSeparator(''string-seq'', specs, StringComparer.InvariantCulture)", span="22-22"];
m15_1 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="TypeDescriptor.cs", label="var expected = Maybe.Just(''.'')", span="17-17"];
m15_2 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="TypeDescriptor.cs", label="var specs = new[] { new OptionSpecification(string.Empty, ''string-seq'',\r\n                false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), '.', null, typeof(IEnumerable<string>), TargetType.Sequence, string.Empty, string.Empty, new List<string>())}", span="18-19"];
m15_4 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="TypeDescriptor.cs", label="expected.ShouldBeEquivalentTo(result)", span="25-25"];
m15_5 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", span="14-14"];
m15_224 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="537-537"];
m15_226 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="TypeDescriptor.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequired(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="543-547"];
m15_225 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="TypeDescriptor.cs", label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="540-540"];
m15_227 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="TypeDescriptor.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="550-550"];
m15_228 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="537-537"];
m15_290 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="693-693"];
m15_292 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceMinMaxEqual(),\r\n                new[] { ''one'', ''two'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="699-703"];
m15_291 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="696-696"];
m15_293 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="706-706"];
m15_294 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="693-693"];
m15_8 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="TypeDescriptor.cs", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63"];
m15_78 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="TypeDescriptor.cs", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316"];
m15_184 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="443-443"];
m15_20 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="47-47"];
m15_21 [cluster="lambda expression", color=green, community=0, file="TypeDescriptor.cs", label="0: new FakeOptions()", span="47-47"];
m15_22 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="47-47"];
m15_45 [cluster="lambda expression", file="TypeDescriptor.cs", label="new FakeOptions()", span="116-116"];
m15_239 [cluster="lambda expression", file="TypeDescriptor.cs", label="new FakeOptions()", span="563-563"];
m15_248 [cluster="lambda expression", file="TypeDescriptor.cs", label="new FakeOptions()", span="582-582"];
m15_256 [cluster="lambda expression", file="TypeDescriptor.cs", label="new FakeOptions()", span="601-601"];
m15_264 [cluster="lambda expression", file="TypeDescriptor.cs", label="new FakeOptions()", span="620-620"];
m15_272 [cluster="lambda expression", file="TypeDescriptor.cs", label="new FakeOptions()", span="640-640"];
m15_288 [cluster="lambda expression", file="TypeDescriptor.cs", label="new FakeOptions()", span="681-681"];
m15_12 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="26-26"];
m15_27 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="70-70"];
m15_36 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="94-94"];
m15_44 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="116-116"];
m15_51 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="139-139"];
m15_59 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="161-161"];
m15_70 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="180-180"];
m15_79 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="199-199"];
m15_88 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="219-219"];
m15_96 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="238-238"];
m15_105 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="262-262"];
m15_115 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="281-281"];
m15_123 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="300-300"];
m15_131 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="319-319"];
m15_140 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="344-344"];
m15_147 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="367-367"];
m15_155 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="389-389"];
m15_163 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="411-411"];
m15_194 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="466-466"];
m15_204 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="486-486"];
m15_212 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="506-506"];
m15_221 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="526-526"];
m15_229 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="544-544"];
m15_238 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="563-563"];
m15_247 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="582-582"];
m15_255 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="601-601"];
m15_263 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="620-620"];
m15_271 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="640-640"];
m15_279 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="659-659"];
m15_287 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="681-681"];
m15_295 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="700-700"];
m15_303 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="719-719"];
m15_310 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="738-738"];
m15_13 [cluster="lambda expression", file="TypeDescriptor.cs", label=fakeOptions, span="26-26"];
m15_46 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="116-116"];
m15_240 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="563-563"];
m15_249 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="582-582"];
m15_257 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="601-601"];
m15_265 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="620-620"];
m15_273 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="640-640"];
m15_289 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="681-681"];
m15_14 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="26-26"];
m15_29 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="70-70"];
m15_28 [cluster="lambda expression", file="TypeDescriptor.cs", label="new FakeOptionsWithDouble()", span="70-70"];
m15_38 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="94-94"];
m15_37 [cluster="lambda expression", file="TypeDescriptor.cs", label="new FakeOptionsWithSequence()", span="94-94"];
m15_53 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="139-139"];
m15_52 [cluster="lambda expression", file="TypeDescriptor.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="139-139"];
m15_61 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="161-161"];
m15_60 [cluster="lambda expression", file="TypeDescriptor.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="161-161"];
m15_72 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="180-180"];
m15_71 [cluster="lambda expression", file="TypeDescriptor.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="180-180"];
m15_81 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="199-199"];
m15_80 [cluster="lambda expression", file="TypeDescriptor.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="199-199"];
m15_90 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="219-219"];
m15_89 [cluster="lambda expression", file="TypeDescriptor.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="219-219"];
m15_98 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="238-238"];
m15_97 [cluster="lambda expression", file="TypeDescriptor.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="238-238"];
m15_107 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="262-262"];
m15_106 [cluster="lambda expression", file="TypeDescriptor.cs", label="new FakeOptionsWithEnum()", span="262-262"];
m15_117 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="281-281"];
m15_116 [cluster="lambda expression", file="TypeDescriptor.cs", label="new FakeOptionsWithEnum()", span="281-281"];
m15_125 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="300-300"];
m15_124 [cluster="lambda expression", file="TypeDescriptor.cs", label="new FakeOptionsWithEnum()", span="300-300"];
m15_133 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="319-319"];
m15_132 [cluster="lambda expression", file="TypeDescriptor.cs", label="new FakeOptionsWithEnum()", span="319-319"];
m15_142 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="344-344"];
m15_141 [cluster="lambda expression", file="TypeDescriptor.cs", label="new FakeOptionsWithValues()", span="344-344"];
m15_149 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="367-367"];
m15_148 [cluster="lambda expression", file="TypeDescriptor.cs", label="new FakeOptionsWithSequenceWithoutRange()", span="367-367"];
m15_157 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="389-389"];
m15_156 [cluster="lambda expression", file="TypeDescriptor.cs", label="new FakeOptionsWithSequenceAndSeparator()", span="389-389"];
m15_165 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="411-411"];
m15_164 [cluster="lambda expression", file="TypeDescriptor.cs", label="new FakeOptionsWithSequenceAndSeparator()", span="411-411"];
m15_196 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="466-466"];
m15_195 [cluster="lambda expression", file="TypeDescriptor.cs", label="new FakeOptionsWithSets()", span="466-466"];
m15_206 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="486-486"];
m15_205 [cluster="lambda expression", file="TypeDescriptor.cs", label="new FakeOptionWithRequiredAndSet()", span="486-486"];
m15_214 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="506-506"];
m15_213 [cluster="lambda expression", file="TypeDescriptor.cs", label="new FakeOptionWithRequiredAndSet()", span="506-506"];
m15_223 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="526-526"];
m15_222 [cluster="lambda expression", file="TypeDescriptor.cs", label="new FakeOptionWithRequiredAndSet()", span="526-526"];
m15_231 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="544-544"];
m15_230 [cluster="lambda expression", file="TypeDescriptor.cs", label="new FakeOptionWithRequired()", span="544-544"];
m15_281 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="659-659"];
m15_280 [cluster="lambda expression", file="TypeDescriptor.cs", label="new FakeOptionsWithRequiredValue()", span="659-659"];
m15_297 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="700-700"];
m15_296 [cluster="lambda expression", file="TypeDescriptor.cs", label="new FakeOptionsWithSequenceMinMaxEqual()", span="700-700"];
m15_305 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="719-719"];
m15_304 [cluster="lambda expression", file="TypeDescriptor.cs", label="new FakeOptionsWithRequiredValue()", span="719-719"];
m15_312 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="738-738"];
m15_311 [cluster="lambda expression", file="TypeDescriptor.cs", label="new FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="738-738"];
m15_174 [cluster="lambda expression", file="TypeDescriptor.cs", label="new FakeOptionsWithValues()", span="440-440"];
m15_173 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="440-440"];
m15_175 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="440-440"];
m15_176 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="441-443"];
m15_178 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="441-443"];
m15_177 [cluster="lambda expression", file="TypeDescriptor.cs", label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="442-443"];
m15_181 [cluster="lambda expression", file="TypeDescriptor.cs", label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="443-443"];
m15_185 [cluster="lambda expression", file="TypeDescriptor.cs", label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="443-443"];
m15_180 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="443-443"];
m15_182 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="443-443"];
m15_186 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="443-443"];
m15_215 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="517-517"];
m15_217 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="TypeDescriptor.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="525-529"];
m15_216 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="TypeDescriptor.cs", label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="519-523"];
m15_218 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="TypeDescriptor.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="532-532"];
m15_219 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="517-517"];
m15_100 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="256-256"];
m15_101 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="TypeDescriptor.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="261-265"];
m15_102 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="TypeDescriptor.cs", label="expected.ShouldBeEquivalentTo(result.Value.Colors)", span="268-268"];
m15_103 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="256-256"];
m15_30 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", span="4-4"];
m15_126 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="312-312"];
m15_128 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="TypeDescriptor.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''RED'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="318-322"];
m15_127 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="TypeDescriptor.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="315-315"];
m15_129 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="TypeDescriptor.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="325-325"];
m15_130 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="312-312"];
m15_35 [cluster="Unk.SequenceEqual", file="TypeDescriptor.cs", label="Entry Unk.SequenceEqual", span=""];
m15_68 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="TypeDescriptor.cs", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="261-261"];
m15_299 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="713-713"];
m15_300 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="TypeDescriptor.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithRequiredValue(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="718-722"];
m15_301 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="TypeDescriptor.cs", label="expected.ShouldBeEquivalentTo(result.Value)", span="725-725"];
m15_302 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="713-713"];
m15_99 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="6-6"];
m15_83 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="212-212"];
m15_85 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="218-222"];
m15_84 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="215-215"];
m15_86 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="225-225"];
m15_87 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="212-212"];
m15_166 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="426-426"];
m15_170 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="TypeDescriptor.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="449-449"];
m15_167 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="TypeDescriptor.cs", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="429-435"];
m15_169 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="TypeDescriptor.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="439-446"];
m15_168 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="TypeDescriptor.cs", label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="436-436"];
m15_171 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="426-426"];
m15_313 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="6-6"];
m15_258 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="613-613"];
m15_260 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="TypeDescriptor.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="619-623"];
m15_259 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="TypeDescriptor.cs", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="616-616"];
m15_261 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="TypeDescriptor.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="626-626"];
m15_262 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="613-613"];
m15_10 [cluster="CommandLine.Core.NameLookup.WithSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TypeDescriptor.cs", label="Entry CommandLine.Core.NameLookup.WithSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16"];
m15_108 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="11-11"];
m15_63 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="173-173"];
m15_65 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="TypeDescriptor.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                new[] { ''-s'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="179-183"];
m15_64 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="TypeDescriptor.cs", label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="176-176"];
m15_66 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="TypeDescriptor.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="186-186"];
m15_67 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="173-173"];
m15_134 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="331-331"];
m15_136 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="TypeDescriptor.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="343-347"];
m15_135 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="TypeDescriptor.cs", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="334-340"];
m15_137 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="TypeDescriptor.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="350-350"];
m15_138 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="331-331"];
m15_6 [cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6"];
m15_7 [cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="TypeDescriptor.cs", label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="338-338"];
m15_283 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="675-675"];
m15_284 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="TypeDescriptor.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="680-684"];
m15_285 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="TypeDescriptor.cs", label="expected.ShouldBeEquivalentTo(result.Value.StringValue)", span="687-687"];
m15_286 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="675-675"];
m15_203 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", span="4-4"];
m15_73 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="192-192"];
m15_75 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="198-202"];
m15_74 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="195-195"];
m15_76 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="205-205"];
m15_77 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="192-192"];
m15_246 [cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", file="TypeDescriptor.cs", label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="272-272"];
m15_91 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="231-231"];
m15_93 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue(),\r\n                new[] { ''one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="237-241"];
m15_92 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="234-234"];
m15_94 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="244-244"];
m15_95 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="231-231"];
m15_198 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="478-478"];
m15_200 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="TypeDescriptor.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="485-489"];
m15_199 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="TypeDescriptor.cs", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = null\r\n            }", span="480-483"];
m15_201 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="TypeDescriptor.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="492-492"];
m15_202 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="478-478"];
m15_114 [cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="TypeDescriptor.cs", label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="305-305"];
m15_158 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="6-6"];
m15_179 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="TypeDescriptor.cs", label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="31-31"];
m15_183 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="TypeDescriptor.cs", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11"];
m15_270 [cluster="string.Equals(string)", file="TypeDescriptor.cs", label="Entry string.Equals(string)", span="0-0"];
m15_197 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4"];
m15_193 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="TypeDescriptor.cs", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294"];
m15_298 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", span="9-9"];
m15_9 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TypeDescriptor.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12"];
m15_232 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4"];
m15_69 [cluster="CommandLine.NameInfo.NameInfo(string, string)", file="TypeDescriptor.cs", label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20"];
m15_47 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="133-133"];
m15_48 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="TypeDescriptor.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="138-142"];
m15_49 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="TypeDescriptor.cs", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="145-145"];
m15_50 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="133-133"];
m15_15 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="41-41"];
m15_16 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", color=green, community=0, file="TypeDescriptor.cs", label="0: var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="46-50"];
m15_17 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="TypeDescriptor.cs", label="Assert.Equal(expected, result.Value.LongValue)", span="53-53"];
m15_18 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="41-41"];
m15_39 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", span="6-6"];
m15_250 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="594-594"];
m15_252 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="TypeDescriptor.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="600-604"];
m15_251 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="TypeDescriptor.cs", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="597-597"];
m15_253 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="TypeDescriptor.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="607-607"];
m15_254 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="594-594"];
m15_118 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="293-293"];
m15_120 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="TypeDescriptor.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''Yellow'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="299-303"];
m15_119 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="TypeDescriptor.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="296-296"];
m15_121 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="TypeDescriptor.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="306-306"];
m15_122 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="293-293"];
m15_109 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="274-274"];
m15_111 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="TypeDescriptor.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''3'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="280-284"];
m15_110 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="TypeDescriptor.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="277-277"];
m15_112 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="TypeDescriptor.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="287-287"];
m15_113 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="274-274"];
m15_23 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="64-64"];
m15_24 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="TypeDescriptor.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithDouble(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="69-73"];
m15_25 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="TypeDescriptor.cs", label="Assert.Equal(expected, result.Value.DoubleValue)", span="76-76"];
m15_26 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="64-64"];
m15_139 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6"];
m15_282 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", span="4-4"];
m15_19 [cluster="Unk.Equal", file="TypeDescriptor.cs", label="Entry Unk.Equal", span=""];
m15_188 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="TypeDescriptor.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="455-455"];
m15_190 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="TypeDescriptor.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSets(),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="465-469"];
m15_189 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="TypeDescriptor.cs", label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl'')),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''))\r\n                }", span="458-462"];
m15_191 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="TypeDescriptor.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="472-472"];
m15_192 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="TypeDescriptor.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="455-455"];
m15_104 [cluster="Unk.ShouldBeEquivalentTo", file="TypeDescriptor.cs", label="Entry Unk.ShouldBeEquivalentTo", span=""];
m15_314 [file="TypeDescriptor.cs", label=fakeOptions, span=""];
m15_315 [file="TypeDescriptor.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
m16_62 [cluster="Unk.Just", file="ValueMapper.cs", label="Entry Unk.Just", span=""];
m16_38 [cluster="Unk.Empty", file="ValueMapper.cs", label="Entry Unk.Empty", span=""];
m16_32 [cluster="System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", file="ValueMapper.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", span="31-31"];
m16_0 [cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="Entry CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="15-15"];
m16_1 [cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="var propAndErrors = MapValuesImpl(specProps, values, converter)", span="20-20"];
m16_2 [cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="return Result.Succeed(\r\n                propAndErrors.Select(pe => pe.Item1),\r\n                propAndErrors.Select(pe => pe.Item2)\r\n                    .OfType<Just<Error>>().Select(e => e.Value)\r\n                );", span="22-26"];
m16_3 [cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="Exit CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="15-15"];
m16_50 [cluster="Unk.converter", file="ValueMapper.cs", label="Entry Unk.converter", span=""];
m16_34 [cluster="CommandLine.Core.Specification.CountOfMaxNumberOfValues()", file="ValueMapper.cs", label="Entry CommandLine.Core.Specification.CountOfMaxNumberOfValues()", span="71-71"];
m16_4 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="Entry CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="29-29"];
m16_28 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", color=green, community=0, file="ValueMapper.cs", label="0: yield return\r\n                converter(taken, pt.Property.PropertyType, pt.Specification.TargetType != TargetType.Sequence)\r\n                    .MapMaybeOrDefault(\r\n                        converted => Tuple.Create(pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>()),\r\n                        Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                            pt, Maybe.Just<Error>(new BadFormatConversionError(NameInfo.EmptyName))));", span="58-63"];
m16_27 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="yield break;", span="55-55"];
m16_19 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="var pt = specProps.First()", span="38-38"];
m16_20 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", color=green, community=0, file="ValueMapper.cs", label="0: var taken = values.Take(pt.Specification.CountOfMaxNumberOfValues().MapMaybeOrDefault(n => n, values.Count()))", span="39-39"];
m16_25 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="pt.Specification.Max.IsJust()\r\n                && next.IsNothing()\r\n                && values.Skip(taken.Count()).Any()", span="48-50"];
m16_29 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="MapValuesImpl(specProps.Skip(1), values.Skip(taken.Count()), converter)", span="65-65"];
m16_21 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="taken.Empty()", span="40-40"];
m16_17 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="specProps.Empty()", span="34-34"];
m16_18 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="yield break;", span="36-36"];
m16_22 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="yield return\r\n                    Tuple.Create(pt, pt.Specification.MakeErrorInCaseOfMinConstraint());", span="42-43"];
m16_23 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="yield break;", span="44-44"];
m16_26 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="yield return\r\n                    Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                        pt, Maybe.Just<Error>(new SequenceOutOfRangeError(NameInfo.EmptyName)));", span="52-54"];
m16_30 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="yield return value;", span="67-67"];
m16_24 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="var next = specProps.Skip(1).FirstOrDefault(s => s.Specification.IsValue()).ToMaybe()", span="47-47"];
m16_31 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="Exit CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="29-29"];
m16_6 [cluster="Unk.>", file="ValueMapper.cs", label="Entry Unk.>", span=""];
m16_36 [cluster="Unk.MapMaybeOrDefault", file="ValueMapper.cs", label="Entry Unk.MapMaybeOrDefault", span=""];
m16_58 [cluster="CommandLine.Core.Specification.IsValue()", file="ValueMapper.cs", label="Entry CommandLine.Core.Specification.IsValue()", span="15-15"];
m16_45 [cluster="Unk.IsNothing", file="ValueMapper.cs", label="Entry Unk.IsNothing", span=""];
m16_37 [cluster="Unk.Take", file="ValueMapper.cs", label="Entry Unk.Take", span=""];
m16_43 [cluster="Unk.ToMaybe", file="ValueMapper.cs", label="Entry Unk.ToMaybe", span=""];
m16_49 [cluster="CSharpx.Maybe.Just<T>(T)", file="ValueMapper.cs", label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124"];
m16_40 [cluster="System.Tuple.Create<T1, T2>(T1, T2)", file="ValueMapper.cs", label="Entry System.Tuple.Create<T1, T2>(T1, T2)", span="0-0"];
m16_47 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="ValueMapper.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
m16_14 [cluster="lambda expression", file="ValueMapper.cs", label="Entry lambda expression", span="25-25"];
m16_59 [cluster="lambda expression", file="ValueMapper.cs", label="Entry lambda expression", span="61-61"];
m16_52 [cluster="lambda expression", file="ValueMapper.cs", label="Entry lambda expression", span="39-39"];
m16_53 [cluster="lambda expression", color=green, community=0, file="ValueMapper.cs", label="1: n", span="39-39"];
m16_54 [cluster="lambda expression", file="ValueMapper.cs", label="Exit lambda expression", span="39-39"];
m16_60 [cluster="lambda expression", file="ValueMapper.cs", label="Tuple.Create(pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>())", span="61-61"];
m16_61 [cluster="lambda expression", file="ValueMapper.cs", label="Exit lambda expression", span="61-61"];
m16_55 [cluster="lambda expression", file="ValueMapper.cs", label="Entry lambda expression", span="47-47"];
m16_8 [cluster="lambda expression", file="ValueMapper.cs", label="Entry lambda expression", span="23-23"];
m16_11 [cluster="lambda expression", file="ValueMapper.cs", label="Entry lambda expression", span="24-24"];
m16_57 [cluster="lambda expression", file="ValueMapper.cs", label="Exit lambda expression", span="47-47"];
m16_56 [cluster="lambda expression", file="ValueMapper.cs", label="s.Specification.IsValue()", span="47-47"];
m16_10 [cluster="lambda expression", file="ValueMapper.cs", label="Exit lambda expression", span="23-23"];
m16_9 [cluster="lambda expression", file="ValueMapper.cs", label="pe.Item1", span="23-23"];
m16_13 [cluster="lambda expression", file="ValueMapper.cs", label="Exit lambda expression", span="24-24"];
m16_12 [cluster="lambda expression", file="ValueMapper.cs", label="pe.Item2", span="24-24"];
m16_15 [cluster="lambda expression", file="ValueMapper.cs", label="e.Value", span="25-25"];
m16_16 [cluster="lambda expression", file="ValueMapper.cs", label="Exit lambda expression", span="25-25"];
m16_33 [cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="ValueMapper.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0"];
m16_48 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="ValueMapper.cs", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="360-360"];
m16_41 [cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="ValueMapper.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0"];
m16_75 [cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", file="ValueMapper.cs", label="Entry CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", span="87-87"];
m16_76 [cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", file="ValueMapper.cs", label="return specification.Min.IsJust()\r\n                ? Maybe.Just<Error>(new SequenceOutOfRangeError(NameInfo.EmptyName))\r\n                : Maybe.Nothing<Error>();", span="89-91"];
m16_77 [cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", file="ValueMapper.cs", label="Exit CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", span="87-87"];
m16_5 [cluster="Unk.Select", file="ValueMapper.cs", label="Entry Unk.Select", span=""];
m16_51 [cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="ValueMapper.cs", label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="349-349"];
m16_39 [cluster="CommandLine.Core.Specification.MakeErrorInCaseOfMinConstraint()", file="ValueMapper.cs", label="Entry CommandLine.Core.Specification.MakeErrorInCaseOfMinConstraint()", span="87-87"];
m16_64 [cluster="CSharpx.Maybe.Nothing<T>()", file="ValueMapper.cs", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
m16_63 [cluster="Unk.WithValue", file="ValueMapper.cs", label="Entry Unk.WithValue", span=""];
m16_74 [cluster="CSharpx.Maybe<T>.FromJustOrFail<T>(System.Exception)", file="ValueMapper.cs", label="Entry CSharpx.Maybe<T>.FromJustOrFail<T>(System.Exception)", span="355-355"];
m16_35 [cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="ValueMapper.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0"];
m16_65 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs", label="Entry CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", span="71-71"];
m16_71 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", color=green, community=0, file="ValueMapper.cs", label="0: return Maybe.Just(specification.Max.FromJustOrFail());", span="80-80"];
m16_70 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs", label="specification.Max.IsJust()", span="78-78"];
m16_68 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs", label="return Maybe.Just(1);", span="76-76"];
m16_66 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs", label="specification.TargetType", span="73-73"];
m16_69 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs", label="TargetType.Sequence", span="77-77"];
m16_72 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs", label="return Maybe.Nothing<int>();", span="84-84"];
m16_67 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs", label="TargetType.Scalar", span="75-75"];
m16_73 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs", label="Exit CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", span="71-71"];
m16_42 [cluster="Unk.FirstOrDefault", file="ValueMapper.cs", label="Entry Unk.FirstOrDefault", span=""];
m16_44 [cluster="CSharpx.Maybe<T>.IsJust<T>()", file="ValueMapper.cs", label="Entry CSharpx.Maybe<T>.IsJust<T>()", span="326-326"];
m16_46 [cluster="Unk.Count", file="ValueMapper.cs", label="Entry Unk.Count", span=""];
m16_7 [cluster="Unk.Succeed", file="ValueMapper.cs", label="Entry Unk.Succeed", span=""];
m16_78 [file="ValueMapper.cs", label=pt, span=""];
n14 -> n7  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
n14 -> n8  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
n15 -> n8  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>", style=dashed];
n0 -> n1  [color=red, key=0, style=solid];
n0 -> n7  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
n0 -> n8  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
n1 -> n2  [color=red, key=0, style=solid];
n1 -> n3  [color=red, key=2, style=dotted];
n1 -> n4  [color=red, key=2, style=dotted];
n1 -> n5  [color=red, key=2, style=dotted];
n1 -> n6  [color=red, key=1, label="lambda expression", style=dashed];
n7 -> n8  [key=0, style=solid];
n7 -> n10  [key=2, style=dotted];
n8 -> n9  [key=0, style=solid];
n8 -> n11  [key=2, style=dotted];
n8 -> n12  [key=2, style=dotted];
n8 -> n13  [key=2, style=dotted];
n2 -> n0  [color=blue, key=0, style=bold];
n6 -> n7  [key=0, style=solid];
n9 -> n6  [color=blue, key=0, style=bold];
m2_0 -> m2_1  [color=green, key=0, style=solid];
m2_0 -> m2_5  [color=green, key=1, label="CSharpx.Maybe<System.Func<T>>", style=dashed];
m2_0 -> m2_34  [color=green, key=1, label="CSharpx.Maybe<System.Func<T>>", style=dashed];
m2_0 -> m2_7  [color=green, key=1, label="CSharpx.Maybe<System.Func<T>>", style=dashed];
m2_0 -> m2_57  [color=green, key=1, label="CSharpx.Maybe<System.Func<T>>", style=dashed];
m2_0 -> m2_100  [color=green, key=1, label="CSharpx.Maybe<System.Func<T>>", style=dashed];
m2_0 -> m2_50  [color=darkseagreen4, key=1, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>", style=dashed];
m2_0 -> m2_52  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m2_0 -> m2_85  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m2_0 -> m2_53  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m2_0 -> m2_89  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m2_0 -> m2_54  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m2_0 -> m2_93  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m2_0 -> m2_55  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m2_0 -> m2_96  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m2_0 -> m2_62  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.ErrorType>", style=dashed];
m2_0 -> m2_8  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m2_0 -> m2_9  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m2_1 -> m2_2  [color=green, key=0, style=solid];
m2_1 -> m2_12  [color=green, key=2, style=dotted];
m2_1 -> m2_22  [color=green, key=1, label="lambda expression", style=dashed];
m2_1 -> m2_7  [color=green, key=1, label=typeInfo, style=dashed];
m2_1 -> m2_58  [color=green, key=1, label=typeInfo, style=dashed];
m2_1 -> m2_135  [color=green, key=1, label=typeInfo, style=dashed];
m2_1 -> m2_59  [color=green, key=1, label=typeInfo, style=dashed];
m2_2 -> m2_5  [color=green, key=1, label=specProps, style=dashed];
m2_2 -> m2_34  [color=green, key=1, label=specProps, style=dashed];
m2_2 -> m2_7  [color=green, key=1, label=specProps, style=dashed];
m2_2 -> m2_58  [color=green, key=1, label=specProps, style=dashed];
m2_2 -> m2_3  [key=0, style=solid];
m2_2 -> m2_13  [key=2, style=dotted];
m2_2 -> m2_27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_2 -> m2_53  [color=darkseagreen4, key=1, label=specProps, style=dashed];
m2_2 -> m2_54  [color=darkseagreen4, key=1, label=specProps, style=dashed];
m2_2 -> m2_135  [color=darkseagreen4, key=1, label=specProps, style=dashed];
m2_7 -> m2_7  [color=green, key=3, label="Local variable System.Func<CommandLine.ParserResult<T>> buildUp", style=bold];
m2_7 -> m2_8  [color=green, key=0, style=solid];
m2_7 -> m2_9  [color=green, key=1, label=buildUp, style=dashed];
m2_5 -> m2_5  [color=green, key=3, label="Local variable System.Func<T> makeDefault", style=bold];
m2_5 -> m2_6  [color=green, key=0, style=solid];
m2_5 -> m2_44  [color=green, key=1, label=makeDefault, style=dashed];
m2_4 -> m2_5  [color=green, key=0, style=solid];
m2_4 -> m2_7  [color=green, key=1, label=optionSpecs, style=dashed];
m2_4 -> m2_14  [key=2, style=dotted];
m2_4 -> m2_15  [key=2, style=dotted];
m2_4 -> m2_50  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
m2_4 -> m2_52  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
m2_4 -> m2_85  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
m2_4 -> m2_55  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
m2_6 -> m2_7  [color=green, key=0, style=solid];
m2_6 -> m2_6  [color=darkorchid, key=3, label="Local variable System.Func<System.Collections.Generic.IEnumerable<CommandLine.Error>, CommandLine.ParserResult<T>> notParsed", style=bold];
m2_6 -> m2_44  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Error>", style=dashed];
m2_6 -> m2_9  [color=darkseagreen4, key=1, label=notParsed, style=dashed];
m2_8 -> m2_9  [key=0, style=solid];
m2_8 -> m2_16  [key=2, style=dotted];
m2_8 -> m2_17  [key=2, style=dotted];
m2_8 -> m2_18  [key=2, style=dotted];
m2_8 -> n4  [key=2, style=dotted];
m2_9 -> m2_10  [key=0, style=solid];
m2_9 -> m2_16  [key=2, style=dotted];
m2_9 -> m2_20  [key=2, style=dotted];
m2_9 -> m2_21  [key=2, style=dotted];
m2_3 -> m2_4  [key=0, style=solid];
m2_3 -> m2_3  [color=darkseagreen4, key=1, label=pt, style=dashed];
m2_10 -> m2_11  [key=0, style=solid];
m2_11 -> m2_0  [color=blue, key=0, style=bold];
m2_95 -> m2_96  [key=0, style=solid];
m2_22 -> m2_23  [color=green, key=0, style=solid];
m2_58 -> m2_59  [color=green, key=0, style=solid];
m2_135 -> m2_136  [color=green, key=0, style=solid];
m2_135 -> m2_135  [color=darkseagreen4, key=1, label=sp, style=dashed];
m2_135 -> m2_38  [key=2, style=dotted];
m2_135 -> m2_140  [key=2, style=dotted];
m2_135 -> m2_137  [color=darkseagreen4, key=1, label=ctor, style=dashed];
m2_59 -> m2_60  [key=0, style=solid];
m2_59 -> m2_75  [key=2, style=dotted];
m2_59 -> m2_21  [key=2, style=dotted];
m2_59 -> m2_63  [color=darkseagreen4, key=1, label=instance, style=dashed];
m2_44 -> m2_45  [key=0, style=solid];
m2_44 -> m2_46  [key=2, style=dotted];
m2_44 -> m2_21  [key=2, style=dotted];
m2_44 -> m2_47  [key=2, style=dotted];
m2_44 -> m2_48  [key=2, style=dotted];
m2_34 -> m2_34  [color=green, key=1, label=p, style=dashed];
m2_34 -> m2_35  [color=green, key=0, style=solid];
m2_34 -> m2_36  [color=green, key=2, style=dotted];
m2_34 -> m2_37  [color=green, key=2, style=dotted];
m2_34 -> m2_12  [color=green, key=2, style=dotted];
m2_34 -> m2_38  [color=green, key=2, style=dotted];
m2_34 -> m2_39  [color=green, key=2, style=dotted];
m2_34 -> m2_40  [color=green, key=1, label="lambda expression", style=dashed];
m2_33 -> m2_34  [color=green, key=0, style=solid];
m2_35 -> m2_33  [color=blue, key=0, style=bold];
m2_40 -> m2_41  [color=green, key=0, style=solid];
m2_57 -> m2_58  [color=green, key=0, style=solid];
m2_57 -> m2_59  [color=green, key=1, label=buildMutable, style=dashed];
m2_56 -> m2_57  [color=green, key=0, style=solid];
m2_56 -> m2_58  [color=green, key=1, label=specPropsWithValue, style=dashed];
m2_56 -> m2_101  [color=green, key=1, label=specPropsWithValue, style=dashed];
m2_56 -> m2_136  [color=green, key=1, label=specPropsWithValue, style=dashed];
m2_56 -> m2_66  [key=2, style=dotted];
m2_56 -> m2_74  [key=2, style=dotted];
m2_56 -> m2_60  [color=darkseagreen4, key=1, label=specPropsWithValue, style=dashed];
m2_100 -> m2_101  [color=green, key=0, style=solid];
m2_100 -> m2_37  [color=green, key=2, style=dotted];
m2_100 -> m2_12  [color=green, key=2, style=dotted];
m2_100 -> m2_106  [color=green, key=1, label="lambda expression", style=dashed];
m2_99 -> m2_100  [color=green, key=0, style=solid];
m2_101 -> m2_101  [color=green, key=1, label=mutable, style=dashed];
m2_101 -> m2_102  [color=green, key=0, style=solid];
m2_101 -> m2_104  [color=green, key=2, style=dotted];
m2_101 -> m2_105  [color=green, key=2, style=dotted];
m2_101 -> m2_109  [color=green, key=1, label="lambda expression", style=dashed];
m2_101 -> m2_113  [color=green, key=1, label="lambda expression", style=dashed];
m2_101 -> m2_117  [color=green, key=1, label="lambda expression", style=dashed];
m2_101 -> m2_121  [color=green, key=1, label="lambda expression", style=dashed];
m2_101 -> m2_124  [color=green, key=1, label="lambda expression", style=dashed];
m2_101 -> m2_128  [color=green, key=1, label="lambda expression", style=dashed];
m2_106 -> m2_107  [color=green, key=0, style=solid];
m2_23 -> m2_24  [color=green, key=0, style=solid];
m2_23 -> m2_25  [color=green, key=2, style=dotted];
m2_23 -> m2_26  [color=green, key=2, style=dotted];
m2_24 -> m2_22  [color=blue, key=0, style=bold];
m2_41 -> m2_42  [color=green, key=0, style=solid];
m2_41 -> m2_25  [color=green, key=2, style=dotted];
m2_42 -> m2_40  [color=blue, key=0, style=bold];
m2_102 -> m2_103  [key=0, style=solid];
m2_109 -> m2_110  [color=green, key=0, style=solid];
m2_113 -> m2_114  [color=green, key=0, style=solid];
m2_117 -> m2_118  [key=0, style=solid];
m2_121 -> m2_122  [color=green, key=0, style=solid];
m2_124 -> m2_125  [key=0, style=solid];
m2_128 -> m2_129  [key=0, style=solid];
m2_136 -> m2_136  [color=green, key=1, label=prms, style=dashed];
m2_136 -> m2_137  [color=green, key=0, style=solid];
m2_136 -> m2_141  [color=green, key=2, style=dotted];
m2_136 -> m2_142  [color=green, key=2, style=dotted];
m2_136 -> m2_143  [color=green, key=2, style=dotted];
m2_136 -> m2_144  [color=green, key=2, style=dotted];
m2_136 -> m2_12  [color=green, key=2, style=dotted];
m2_136 -> m2_38  [color=green, key=2, style=dotted];
m2_136 -> m2_146  [color=green, key=1, label="lambda expression", style=dashed];
m2_136 -> m2_149  [color=green, key=1, label="lambda expression", style=dashed];
m2_137 -> m2_138  [key=0, style=solid];
m2_137 -> m2_145  [key=2, style=dotted];
m2_146 -> m2_147  [key=0, style=solid];
m2_149 -> m2_150  [key=0, style=solid];
m2_107 -> m2_108  [color=green, key=0, style=solid];
m2_107 -> m2_25  [color=green, key=2, style=dotted];
m2_108 -> m2_106  [color=blue, key=0, style=bold];
m2_110 -> m2_111  [color=green, key=0, style=solid];
m2_110 -> m2_112  [color=green, key=2, style=dotted];
m2_111 -> m2_109  [color=blue, key=0, style=bold];
m2_114 -> m2_115  [color=green, key=0, style=solid];
m2_114 -> m2_116  [color=green, key=2, style=dotted];
m2_115 -> m2_113  [color=blue, key=0, style=bold];
m2_122 -> m2_123  [color=green, key=0, style=solid];
m2_122 -> m2_116  [color=green, key=2, style=dotted];
m2_123 -> m2_121  [color=blue, key=0, style=bold];
m2_50 -> m2_51  [key=0, style=solid];
m2_50 -> m2_65  [key=2, style=dotted];
m2_50 -> m2_61  [color=darkseagreen4, key=1, label=tokenizerResult, style=dashed];
m2_52 -> m2_53  [key=0, style=solid];
m2_52 -> m2_67  [key=2, style=dotted];
m2_52 -> m2_84  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_52 -> m2_54  [color=darkseagreen4, key=1, label=partitions, style=dashed];
m2_52 -> m2_55  [color=darkseagreen4, key=1, label=partitions, style=dashed];
m2_85 -> m2_86  [key=0, style=solid];
m2_85 -> m2_87  [key=2, style=dotted];
m2_53 -> m2_56  [color=darkseagreen4, key=1, label=optionSpecPropsResult, style=dashed];
m2_53 -> m2_53  [color=darkseagreen4, key=1, label=pt, style=dashed];
m2_53 -> m2_54  [key=0, style=solid];
m2_53 -> m2_68  [key=2, style=dotted];
m2_53 -> m2_69  [key=2, style=dotted];
m2_53 -> m2_88  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_53 -> m2_61  [color=darkseagreen4, key=1, label=optionSpecPropsResult, style=dashed];
m2_89 -> m2_90  [key=0, style=solid];
m2_89 -> m2_91  [key=2, style=dotted];
m2_54 -> m2_56  [color=darkseagreen4, key=1, label=valueSpecPropsResult, style=dashed];
m2_54 -> m2_54  [color=darkseagreen4, key=1, label=pt, style=dashed];
m2_54 -> m2_55  [key=0, style=solid];
m2_54 -> m2_70  [key=2, style=dotted];
m2_54 -> m2_69  [key=2, style=dotted];
m2_54 -> m2_92  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_54 -> m2_61  [color=darkseagreen4, key=1, label=valueSpecPropsResult, style=dashed];
m2_93 -> m2_94  [key=0, style=solid];
m2_93 -> m2_91  [key=2, style=dotted];
m2_55 -> m2_56  [key=0, style=solid];
m2_55 -> m2_55  [color=darkseagreen4, key=1, label=token, style=dashed];
m2_55 -> m2_71  [key=2, style=dotted];
m2_55 -> m2_72  [key=2, style=dotted];
m2_55 -> m2_73  [key=2, style=dotted];
m2_55 -> m2_95  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_55 -> m2_96  [color=darkseagreen4, key=1, label=token, style=dashed];
m2_55 -> m2_61  [color=darkseagreen4, key=1, label=missingValueErrors, style=dashed];
m2_96 -> m2_97  [key=0, style=solid];
m2_96 -> m2_98  [key=2, style=dotted];
m2_62 -> m2_62  [color=darkseagreen4, key=1, label=e, style=dashed];
m2_62 -> m2_63  [key=0, style=solid];
m2_62 -> m2_81  [key=2, style=dotted];
m2_27 -> m2_28  [key=0, style=solid];
m2_134 -> m2_135  [key=0, style=solid];
m2_60 -> m2_61  [key=0, style=solid];
m2_60 -> m2_76  [key=2, style=dotted];
m2_60 -> m2_77  [key=2, style=dotted];
m2_63 -> m2_64  [key=0, style=solid];
m2_63 -> m2_82  [key=2, style=dotted];
m2_63 -> m2_83  [key=2, style=dotted];
m2_43 -> m2_44  [key=0, style=solid];
m2_45 -> m2_43  [color=blue, key=0, style=bold];
m2_103 -> m2_99  [color=blue, key=0, style=bold];
m2_119 -> m2_117  [color=blue, key=0, style=bold];
m2_118 -> m2_112  [key=2, style=dotted];
m2_118 -> m2_119  [key=0, style=solid];
m2_118 -> m2_120  [key=2, style=dotted];
m2_126 -> m2_124  [color=blue, key=0, style=bold];
m2_125 -> m2_126  [key=0, style=solid];
m2_125 -> m2_120  [key=2, style=dotted];
m2_125 -> m2_127  [key=2, style=dotted];
m2_130 -> m2_128  [color=blue, key=0, style=bold];
m2_129 -> m2_130  [key=0, style=solid];
m2_129 -> m2_131  [key=2, style=dotted];
m2_129 -> m2_132  [key=2, style=dotted];
m2_129 -> m2_133  [key=2, style=dotted];
m2_138 -> m2_139  [key=0, style=solid];
m2_148 -> m2_146  [color=blue, key=0, style=bold];
m2_147 -> m2_148  [key=0, style=solid];
m2_151 -> m2_149  [color=blue, key=0, style=bold];
m2_150 -> m2_151  [key=0, style=solid];
m2_49 -> m2_50  [key=0, style=solid];
m2_51 -> m2_52  [key=0, style=solid];
m2_51 -> m2_60  [color=darkseagreen4, key=1, label=tokens, style=dashed];
m2_51 -> m2_66  [key=2, style=dotted];
m2_61 -> m2_62  [key=0, style=solid];
m2_61 -> m2_63  [color=darkseagreen4, key=1, label=allErrors, style=dashed];
m2_61 -> m2_78  [key=2, style=dotted];
m2_61 -> m2_79  [key=2, style=dotted];
m2_61 -> m2_80  [key=2, style=dotted];
m2_84 -> m2_85  [key=0, style=solid];
m2_86 -> m2_84  [color=blue, key=0, style=bold];
m2_88 -> m2_89  [key=0, style=solid];
m2_90 -> m2_88  [color=blue, key=0, style=bold];
m2_92 -> m2_93  [key=0, style=solid];
m2_94 -> m2_92  [color=blue, key=0, style=bold];
m2_97 -> m2_95  [color=blue, key=0, style=bold];
m2_29 -> m2_27  [color=blue, key=0, style=bold];
m2_28 -> m2_29  [key=0, style=solid];
m2_28 -> m2_30  [key=2, style=dotted];
m2_28 -> m2_31  [key=2, style=dotted];
m2_28 -> m2_32  [key=2, style=dotted];
m2_139 -> m2_134  [color=blue, key=0, style=bold];
m2_64 -> m2_49  [color=blue, key=0, style=bold];
m2_152 -> m2_34  [color=green, key=1, label="CSharpx.Maybe<System.Func<T>>", style=dashed];
m2_152 -> m2_57  [color=green, key=1, label="CSharpx.Maybe<System.Func<T>>", style=dashed];
m2_152 -> m2_100  [color=green, key=1, label="CSharpx.Maybe<System.Func<T>>", style=dashed];
m2_153 -> m2_34  [color=green, key=1, label=specProps, style=dashed];
m2_153 -> m2_58  [color=green, key=1, label=specProps, style=dashed];
m2_153 -> m2_135  [color=darkseagreen4, key=1, label=specProps, style=dashed];
m2_153 -> m2_53  [color=darkseagreen4, key=1, label=specProps, style=dashed];
m2_153 -> m2_54  [color=darkseagreen4, key=1, label=specProps, style=dashed];
m2_160 -> m2_58  [color=green, key=1, label=typeInfo, style=dashed];
m2_160 -> m2_135  [color=darkseagreen4, key=1, label=typeInfo, style=dashed];
m2_160 -> m2_59  [color=darkseagreen4, key=1, label=typeInfo, style=dashed];
m2_163 -> m2_101  [color=green, key=1, label=specPropsWithValue, style=dashed];
m2_163 -> m2_136  [color=green, key=1, label=specPropsWithValue, style=dashed];
m2_154 -> m2_44  [color=darkseagreen4, key=1, label=makeDefault, style=dashed];
m2_155 -> m2_50  [color=darkseagreen4, key=1, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>", style=dashed];
m2_156 -> m2_50  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m2_157 -> m2_50  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
m2_157 -> m2_52  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
m2_157 -> m2_85  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
m2_157 -> m2_55  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
m2_158 -> m2_52  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m2_158 -> m2_85  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m2_158 -> m2_53  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m2_158 -> m2_55  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m2_158 -> m2_96  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m2_159 -> m2_53  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m2_159 -> m2_89  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m2_159 -> m2_54  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m2_159 -> m2_93  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m2_162 -> m2_96  [color=darkseagreen4, key=1, label=token, style=dashed];
m2_161 -> m2_62  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.ErrorType>", style=dashed];
m3_26 -> m3_27  [key=0, style=solid];
m3_27 -> m3_28  [key=0, style=solid];
m3_27 -> m3_22  [key=2, style=dotted];
m3_27 -> m3_4  [key=2, style=dotted];
m3_28 -> m3_26  [color=blue, key=0, style=bold];
m3_19 -> m3_20  [key=0, style=solid];
m3_20 -> m3_21  [key=0, style=solid];
m3_20 -> m3_22  [key=2, style=dotted];
m3_20 -> m3_4  [key=2, style=dotted];
m3_21 -> m3_19  [color=blue, key=0, style=bold];
m3_5 -> m3_6  [key=0, style=solid];
m3_6 -> m3_7  [key=0, style=solid];
m3_6 -> m3_8  [key=2, style=dotted];
m3_6 -> m3_4  [key=2, style=dotted];
m3_7 -> m3_5  [color=blue, key=0, style=bold];
m3_23 -> m3_24  [key=0, style=solid];
m3_24 -> m3_25  [key=0, style=solid];
m3_24 -> m3_22  [key=2, style=dotted];
m3_24 -> m3_4  [key=2, style=dotted];
m3_25 -> m3_23  [color=blue, key=0, style=bold];
m3_0 -> m3_1  [key=0, style=solid];
m3_1 -> m3_2  [key=0, style=solid];
m3_1 -> m3_3  [key=2, style=dotted];
m3_1 -> m3_4  [key=2, style=dotted];
m3_2 -> m3_0  [color=blue, key=0, style=bold];
m3_15 -> m3_16  [key=0, style=solid];
m3_16 -> m3_17  [key=0, style=solid];
m3_16 -> m3_18  [key=2, style=dotted];
m3_16 -> m3_4  [key=2, style=dotted];
m3_17 -> m3_15  [color=blue, key=0, style=bold];
m3_9 -> m3_10  [key=0, style=solid];
m3_10 -> m3_11  [key=0, style=solid];
m3_10 -> m3_8  [key=2, style=dotted];
m3_10 -> m3_4  [key=2, style=dotted];
m3_11 -> m3_9  [color=blue, key=0, style=bold];
m3_12 -> m3_13  [key=0, style=solid];
m3_13 -> m3_14  [key=0, style=solid];
m3_13 -> m3_8  [key=2, style=dotted];
m3_13 -> m3_4  [key=2, style=dotted];
m3_14 -> m3_12  [color=blue, key=0, style=bold];
m5_0 -> m5_1  [color=red, key=0, style=solid];
m5_1 -> m5_2  [color=red, key=0, style=solid];
m5_2 -> m5_0  [color=blue, key=0, style=bold];
m5_28 -> m5_29  [key=0, style=solid];
m5_29 -> m5_32  [key=0, style=solid];
m5_29 -> m5_3  [key=2, style=dotted];
m5_29 -> m5_33  [key=2, style=dotted];
m5_30 -> m5_31  [key=0, style=solid];
m5_31 -> m5_32  [key=0, style=solid];
m5_31 -> m5_6  [key=2, style=dotted];
m5_32 -> m5_28  [color=blue, key=0, style=bold];
m5_84 -> m5_85  [key=0, style=solid];
m5_84 -> m5_86  [color=darkseagreen4, key=1, label="CSharpx.Either<T1, T2>", style=dashed];
m5_84 -> m5_88  [color=darkseagreen4, key=1, label="CSharpx.Either<T1, T2>", style=dashed];
m5_85 -> m5_86  [key=0, style=solid];
m5_85 -> m5_88  [key=0, style=solid];
m5_86 -> m5_87  [key=0, style=solid];
m5_86 -> m5_90  [key=2, style=dotted];
m5_88 -> m5_89  [key=0, style=solid];
m5_88 -> m5_90  [key=2, style=dotted];
m5_87 -> m5_89  [key=0, style=solid];
m5_89 -> m5_84  [color=blue, key=0, style=bold];
m5_51 -> m5_52  [key=0, style=solid];
m5_51 -> m5_53  [color=darkseagreen4, key=1, label="CSharpx.Either<T1, T3>", style=dashed];
m5_51 -> m5_54  [color=darkseagreen4, key=1, label="System.Func<T1, T2>", style=dashed];
m5_51 -> m5_55  [color=darkseagreen4, key=1, label="CSharpx.Either<T1, T3>", style=dashed];
m5_52 -> m5_53  [key=0, style=solid];
m5_52 -> m5_55  [key=0, style=solid];
m5_53 -> m5_54  [key=0, style=solid];
m5_54 -> m5_57  [key=0, style=solid];
m5_54 -> m5_3  [key=2, style=dotted];
m5_54 -> m5_33  [key=2, style=dotted];
m5_55 -> m5_56  [key=0, style=solid];
m5_56 -> m5_57  [key=0, style=solid];
m5_56 -> m5_6  [key=2, style=dotted];
m5_57 -> m5_51  [color=blue, key=0, style=bold];
m5_65 -> m5_66  [key=0, style=solid];
m5_65 -> m5_67  [color=darkseagreen4, key=1, label="CSharpx.Either<T1, T3>", style=dashed];
m5_65 -> m5_68  [color=darkseagreen4, key=1, label="System.Func<T1, T2>", style=dashed];
m5_65 -> m5_69  [color=darkseagreen4, key=1, label="CSharpx.Either<T1, T3>", style=dashed];
m5_65 -> m5_70  [color=darkseagreen4, key=1, label="System.Func<T3, T4>", style=dashed];
m5_66 -> m5_67  [key=0, style=solid];
m5_66 -> m5_69  [key=0, style=solid];
m5_67 -> m5_68  [key=0, style=solid];
m5_68 -> m5_71  [key=0, style=solid];
m5_68 -> m5_3  [key=2, style=dotted];
m5_68 -> m5_33  [key=2, style=dotted];
m5_69 -> m5_70  [key=0, style=solid];
m5_70 -> m5_71  [key=0, style=solid];
m5_70 -> m5_6  [key=2, style=dotted];
m5_70 -> m5_33  [key=2, style=dotted];
m5_71 -> m5_65  [color=blue, key=0, style=bold];
m5_3 -> m5_4  [key=0, style=solid];
m5_4 -> m5_5  [key=0, style=solid];
m5_5 -> m5_3  [color=blue, key=0, style=bold];
m5_72 -> m5_73  [key=0, style=solid];
m5_72 -> m5_74  [color=darkseagreen4, key=1, label="CSharpx.Either<T1, T3>", style=dashed];
m5_72 -> m5_75  [color=darkseagreen4, key=1, label="System.Func<T1, T2>", style=dashed];
m5_72 -> m5_76  [color=darkseagreen4, key=1, label="CSharpx.Either<T1, T3>", style=dashed];
m5_72 -> m5_77  [color=darkseagreen4, key=1, label="System.Func<T3, T2>", style=dashed];
m5_73 -> m5_74  [key=0, style=solid];
m5_73 -> m5_76  [key=0, style=solid];
m5_74 -> m5_75  [key=0, style=solid];
m5_75 -> m5_78  [key=0, style=solid];
m5_75 -> m5_33  [key=2, style=dotted];
m5_76 -> m5_77  [key=0, style=solid];
m5_77 -> m5_78  [key=0, style=solid];
m5_77 -> m5_33  [key=2, style=dotted];
m5_78 -> m5_72  [color=blue, key=0, style=bold];
m5_37 -> m5_38  [key=0, style=solid];
m5_19 -> m5_20  [key=0, style=solid];
m5_19 -> m5_3  [key=2, style=dotted];
m5_18 -> m5_19  [key=0, style=solid];
m5_20 -> m5_18  [color=blue, key=0, style=bold];
m5_38 -> m5_39  [key=0, style=solid];
m5_39 -> m5_37  [color=blue, key=0, style=bold];
m5_6 -> m5_7  [key=0, style=solid];
m5_7 -> m5_8  [key=0, style=solid];
m5_8 -> m5_6  [color=blue, key=0, style=bold];
m5_40 -> m5_41  [key=0, style=solid];
m5_40 -> m5_42  [color=darkseagreen4, key=1, label="CSharpx.Either<System.Func<T1, T3>, T2>", style=dashed];
m5_40 -> m5_43  [color=darkseagreen4, key=1, label="CSharpx.Either<T1, T2>", style=dashed];
m5_40 -> m5_45  [color=darkseagreen4, key=1, label="CSharpx.Either<System.Func<T1, T3>, T2>", style=dashed];
m5_40 -> m5_46  [color=darkseagreen4, key=1, label="CSharpx.Either<System.Func<T1, T3>, T2>", style=dashed];
m5_40 -> m5_48  [color=darkseagreen4, key=1, label="CSharpx.Either<T1, T2>", style=dashed];
m5_41 -> m5_42  [key=0, style=solid];
m5_41 -> m5_45  [key=0, style=solid];
m5_42 -> m5_43  [key=0, style=solid];
m5_42 -> m5_44  [color=darkseagreen4, key=1, label=f, style=dashed];
m5_43 -> m5_44  [key=0, style=solid];
m5_45 -> m5_46  [key=0, style=solid];
m5_45 -> m5_48  [key=0, style=solid];
m5_46 -> m5_47  [key=0, style=solid];
m5_48 -> m5_49  [key=0, style=solid];
m5_44 -> m5_50  [key=0, style=solid];
m5_44 -> m5_3  [key=2, style=dotted];
m5_44 -> m5_33  [key=2, style=dotted];
m5_47 -> m5_50  [key=0, style=solid];
m5_47 -> m5_6  [key=2, style=dotted];
m5_49 -> m5_50  [key=0, style=solid];
m5_49 -> m5_6  [key=2, style=dotted];
m5_50 -> m5_40  [color=blue, key=0, style=bold];
m5_21 -> m5_22  [key=0, style=solid];
m5_21 -> m5_23  [color=darkseagreen4, key=1, label="CSharpx.Either<T1, T2>", style=dashed];
m5_21 -> m5_24  [color=darkseagreen4, key=1, label="CSharpx.Either<T1, T2>", style=dashed];
m5_22 -> m5_23  [key=0, style=solid];
m5_22 -> m5_24  [key=0, style=solid];
m5_23 -> m5_25  [key=0, style=solid];
m5_24 -> m5_25  [key=0, style=solid];
m5_24 -> m5_26  [key=2, style=dotted];
m5_24 -> m5_27  [key=2, style=dotted];
m5_25 -> m5_21  [color=blue, key=0, style=bold];
m5_15 -> m5_16  [key=0, style=solid];
m5_16 -> m5_17  [key=0, style=solid];
m5_16 -> m5_19  [color=darkseagreen4, key=1, label=T1, style=dashed];
m5_17 -> m5_15  [color=blue, key=0, style=bold];
m5_9 -> m5_10  [key=0, style=solid];
m5_10 -> m5_11  [key=0, style=solid];
m5_10 -> m5_3  [key=2, style=dotted];
m5_11 -> m5_9  [color=blue, key=0, style=bold];
m5_79 -> m5_80  [key=0, style=solid];
m5_79 -> m5_81  [color=darkseagreen4, key=1, label="CSharpx.Maybe<T1>", style=dashed];
m5_79 -> m5_82  [color=darkseagreen4, key=1, label=T2, style=dashed];
m5_80 -> m5_81  [key=0, style=solid];
m5_80 -> m5_82  [key=0, style=solid];
m5_81 -> m5_83  [key=0, style=solid];
m5_81 -> m5_3  [key=2, style=dotted];
m5_82 -> m5_83  [key=0, style=solid];
m5_82 -> m5_6  [key=2, style=dotted];
m5_83 -> m5_79  [color=blue, key=0, style=bold];
m5_12 -> m5_13  [key=0, style=solid];
m5_13 -> m5_14  [key=0, style=solid];
m5_13 -> m5_6  [key=2, style=dotted];
m5_14 -> m5_12  [color=blue, key=0, style=bold];
m5_58 -> m5_59  [key=0, style=solid];
m5_58 -> m5_60  [color=darkseagreen4, key=1, label="CSharpx.Either<T1, T3>", style=dashed];
m5_58 -> m5_61  [color=darkseagreen4, key=1, label="System.Func<T1, CSharpx.Either<T2, T3>>", style=dashed];
m5_58 -> m5_62  [color=darkseagreen4, key=1, label="CSharpx.Either<T1, T3>", style=dashed];
m5_59 -> m5_60  [key=0, style=solid];
m5_59 -> m5_62  [key=0, style=solid];
m5_60 -> m5_61  [key=0, style=solid];
m5_61 -> m5_64  [key=0, style=solid];
m5_61 -> m5_33  [key=2, style=dotted];
m5_62 -> m5_63  [key=0, style=solid];
m5_63 -> m5_64  [key=0, style=solid];
m5_63 -> m5_6  [key=2, style=dotted];
m5_64 -> m5_58  [color=blue, key=0, style=bold];
m5_34 -> m5_35  [key=0, style=solid];
m5_34 -> m5_38  [color=darkseagreen4, key=1, label=object, style=dashed];
m5_35 -> m5_36  [key=0, style=solid];
m5_35 -> m5_28  [key=2, style=dotted];
m5_35 -> m5_37  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_36 -> m5_34  [color=blue, key=0, style=bold];
m5_91 -> m5_1  [color=red, key=1, label="CSharpx.Either<T1, T2>", style=dashed];
m5_92 -> m5_4  [color=darkseagreen4, key=1, label="CSharpx.Either1Of2<T1, T2>", style=dashed];
m5_93 -> m5_7  [color=darkseagreen4, key=1, label="CSharpx.Either2Of2<T1, T2>", style=dashed];
m5_94 -> m5_38  [color=darkseagreen4, key=1, label=object, style=dashed];
m7_11 -> m7_12  [key=0, style=solid];
m7_5 -> m7_6  [color=red, key=0, style=solid];
m7_5 -> m7_7  [color=red, key=2, style=dotted];
m7_5 -> m7_8  [color=red, key=2, style=dotted];
m7_5 -> m7_9  [color=red, key=2, style=dotted];
m7_5 -> n5  [color=red, key=2, style=dotted];
m7_5 -> m7_11  [color=red, key=1, label="lambda expression", style=dashed];
m7_4 -> m7_5  [color=red, key=0, style=solid];
m7_4 -> m7_12  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m7_12 -> m7_13  [key=0, style=solid];
m7_6 -> m7_4  [color=blue, key=0, style=bold];
m7_13 -> m7_11  [color=blue, key=0, style=bold];
m7_0 -> m7_1  [color=red, key=0, style=solid];
m7_0 -> m7_5  [color=red, key=1, label="System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>", style=dashed];
m7_1 -> m7_2  [color=red, key=0, style=solid];
m7_1 -> m7_3  [color=red, key=2, style=dotted];
m7_1 -> m7_4  [color=red, key=1, label="lambda expression", style=dashed];
m7_1 -> m7_1  [color=red, key=1, label=tseq, style=dashed];
m7_2 -> m7_0  [color=blue, key=0, style=bold];
m7_14 -> m7_5  [color=red, key=1, label="System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>", style=dashed];
m7_15 -> m7_12  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m7_16 -> m7_12  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m8_0 -> m8_1  [color=red, key=0, style=solid];
m8_0 -> m8_5  [color=red, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m8_0 -> m8_12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m8_1 -> m8_2  [color=red, key=0, style=solid];
m8_1 -> m8_3  [color=red, key=2, style=dotted];
m8_1 -> m8_4  [color=red, key=1, label="lambda expression", style=dashed];
m8_1 -> m8_1  [color=red, key=1, label=tseq, style=dashed];
m8_2 -> m8_0  [color=blue, key=0, style=bold];
m8_36 -> m8_37  [key=0, style=solid];
m8_5 -> m8_6  [color=red, key=0, style=solid];
m8_5 -> m8_7  [color=red, key=2, style=dotted];
m8_5 -> m8_8  [color=red, key=2, style=dotted];
m8_5 -> m8_9  [color=red, key=2, style=dotted];
m8_5 -> n5  [color=red, key=2, style=dotted];
m8_5 -> m8_11  [color=red, key=1, label="lambda expression", style=dashed];
m8_12 -> m8_13  [key=0, style=solid];
m8_12 -> m8_14  [key=2, style=dotted];
m8_12 -> m8_15  [key=2, style=dotted];
m8_4 -> m8_5  [color=red, key=0, style=solid];
m8_4 -> m8_12  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m8_6 -> m8_4  [color=blue, key=0, style=bold];
m8_6 -> m8_29  [color=green, key=0, style=bold];
m8_11 -> m8_12  [key=0, style=solid];
m8_13 -> m8_11  [color=blue, key=0, style=bold];
m8_26 -> m8_27  [key=0, style=solid];
m8_26 -> m8_28  [key=2, style=dotted];
m8_30 -> m8_31  [color=red, key=0, style=solid];
m8_30 -> m8_23  [color=red, key=2, style=dotted];
m8_30 -> m8_24  [color=red, key=2, style=dotted];
m8_30 -> n5  [color=red, key=2, style=dotted];
m8_30 -> m8_30  [color=red, key=1, label="CommandLine.Core.TypeDescriptor", style=dashed];
m8_30 -> m8_32  [color=red, key=1, label="lambda expression", style=dashed];
m8_30 -> m8_36  [color=red, key=1, label="lambda expression", style=dashed];
m8_33 -> m8_34  [key=0, style=solid];
m8_33 -> m8_23  [key=2, style=dotted];
m8_33 -> m8_35  [key=2, style=dotted];
m8_25 -> m8_26  [key=0, style=solid];
m8_29 -> m8_30  [color=red, key=0, style=solid];
m8_29 -> m8_6  [color=green, key=0, style=solid];
m8_39 -> m8_40  [key=0, style=solid];
m8_27 -> m8_25  [color=blue, key=0, style=bold];
m8_31 -> m8_29  [color=blue, key=0, style=bold];
m8_32 -> m8_33  [key=0, style=solid];
m8_34 -> m8_32  [color=blue, key=0, style=bold];
m8_37 -> m8_38  [key=0, style=solid];
m8_37 -> m8_8  [key=2, style=dotted];
m8_38 -> m8_36  [color=blue, key=0, style=bold];
m8_40 -> m8_41  [key=0, style=solid];
m8_40 -> m8_8  [key=2, style=dotted];
m8_41 -> m8_39  [color=blue, key=0, style=bold];
m8_16 -> m8_17  [key=0, style=solid];
m8_16 -> m8_26  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m8_16 -> m8_19  [color=red, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m8_16 -> m8_30  [color=red, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m8_16 -> m8_33  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m8_17 -> m8_18  [key=0, style=solid];
m8_17 -> m8_22  [key=2, style=dotted];
m8_17 -> m8_25  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_17 -> m8_19  [color=red, key=1, label=nameIndex, style=dashed];
m8_17 -> m8_30  [color=red, key=1, label=nameIndex, style=dashed];
m8_17 -> m8_33  [color=darkseagreen4, key=1, label=nameIndex, style=dashed];
m8_19 -> m8_21  [color=red, key=0, style=solid];
m8_19 -> m8_23  [color=red, key=2, style=dotted];
m8_19 -> m8_24  [color=red, key=2, style=dotted];
m8_19 -> n5  [color=red, key=2, style=dotted];
m8_19 -> m8_19  [color=red, key=1, label="CommandLine.Core.TypeDescriptor", style=dashed];
m8_19 -> m8_29  [color=red, key=1, label="lambda expression", style=dashed];
m8_19 -> m8_30  [color=red, key=1, label="CommandLine.Core.TypeDescriptor", style=dashed];
m8_19 -> m8_39  [color=red, key=1, label="lambda expression", style=dashed];
m8_18 -> m8_19  [color=red, key=0, style=solid];
m8_18 -> m8_20  [key=0, style=solid];
m8_20 -> m8_21  [key=0, style=solid];
m8_21 -> m8_16  [color=blue, key=0, style=bold];
m8_42 -> m8_5  [color=red, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m8_42 -> m8_12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m8_43 -> m8_5  [color=red, key=1, label="System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>", style=dashed];
m8_44 -> m8_12  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m8_45 -> m8_26  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m8_46 -> m8_30  [color=red, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m8_46 -> m8_33  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m8_47 -> m8_30  [color=red, key=1, label="CommandLine.Core.TypeDescriptor", style=dashed];
m8_48 -> m8_30  [color=red, key=1, label=nameIndex, style=dashed];
m8_48 -> m8_33  [color=darkseagreen4, key=1, label=nameIndex, style=dashed];
m10_14 -> m10_12  [color=green, key=0, style=bold];
m10_22 -> m10_20  [color=green, key=0, style=bold];
m10_29 -> m10_27  [color=green, key=0, style=bold];
m11_4 -> m11_8  [key=0, style=solid];
m11_8 -> m11_11  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m11_8 -> m11_9  [key=0, style=solid];
m11_9 -> m11_4  [color=blue, key=0, style=bold];
m11_6 -> m11_40  [color=green, key=0, style=solid];
m11_40 -> m11_41  [color=green, key=0, style=solid];
m11_40 -> m11_43  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m11_41 -> m11_6  [color=blue, key=0, style=bold];
m11_7 -> m11_61  [key=0, style=solid];
m11_7 -> m11_65  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m11_61 -> m11_64  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m11_61 -> m11_61  [color=darkorchid, key=3, label="method methodReturn System.Collections.Generic.IEnumerable<CommandLine.Error> ", style=bold];
m11_61 -> m11_62  [key=0, style=solid];
m11_62 -> m11_7  [color=blue, key=0, style=bold];
m11_0 -> m11_1  [key=0, style=solid];
m11_1 -> m11_6  [key=2, style=dotted];
m11_1 -> m11_2  [key=0, style=solid];
m11_1 -> m11_3  [key=2, style=dotted];
m11_1 -> m11_4  [key=2, style=dotted];
m11_1 -> m11_5  [key=2, style=dotted];
m11_1 -> m11_7  [key=2, style=dotted];
m11_2 -> m11_0  [color=blue, key=0, style=bold];
m11_63 -> m11_64  [key=0, style=solid];
m11_43 -> m11_44  [color=green, key=0, style=solid];
m11_43 -> m11_48  [color=green, key=2, style=dotted];
m11_43 -> m11_51  [color=green, key=1, label="lambda expression", style=dashed];
m11_43 -> m11_54  [color=green, key=1, label="lambda expression", style=dashed];
m11_43 -> m11_57  [color=green, key=1, label="lambda expression", style=dashed];
m11_43 -> m11_45  [color=green, key=1, label=options, style=dashed];
m11_42 -> m11_43  [color=green, key=0, style=solid];
m11_44 -> m11_45  [key=0, style=solid];
m11_44 -> m11_46  [key=0, style=solid];
m11_44 -> n11  [key=2, style=dotted];
m11_51 -> m11_52  [key=0, style=solid];
m11_54 -> m11_55  [key=0, style=solid];
m11_57 -> m11_58  [color=green, key=0, style=solid];
m11_45 -> m11_45  [color=darkseagreen4, key=1, label=s, style=dashed];
m11_45 -> m11_47  [key=0, style=solid];
m11_45 -> m11_50  [key=2, style=dotted];
m11_45 -> m11_39  [key=2, style=dotted];
m11_58 -> m11_59  [color=green, key=0, style=solid];
m11_58 -> m11_18  [color=green, key=2, style=dotted];
m11_58 -> m11_60  [color=green, key=2, style=dotted];
m11_59 -> m11_57  [color=blue, key=0, style=bold];
m11_47 -> m11_42  [color=blue, key=0, style=bold];
m11_46 -> m11_47  [key=0, style=solid];
m11_46 -> m11_22  [key=2, style=dotted];
m11_53 -> m11_51  [color=blue, key=0, style=bold];
m11_52 -> m11_53  [key=0, style=solid];
m11_56 -> m11_54  [color=blue, key=0, style=bold];
m11_55 -> m11_18  [key=2, style=dotted];
m11_55 -> m11_56  [key=0, style=solid];
m11_11 -> m11_18  [key=2, style=dotted];
m11_11 -> m11_11  [color=darkseagreen4, key=1, label=sp, style=dashed];
m11_11 -> m11_12  [key=0, style=solid];
m11_11 -> m11_17  [key=2, style=dotted];
m11_11 -> m11_14  [color=darkseagreen4, key=1, label=options, style=dashed];
m11_26 -> m11_18  [key=2, style=dotted];
m11_26 -> m11_26  [color=darkseagreen4, key=1, label=sp, style=dashed];
m11_26 -> m11_27  [key=0, style=solid];
m11_26 -> m11_17  [key=2, style=dotted];
m11_26 -> m11_29  [color=darkseagreen4, key=1, label=requiredWithValue, style=dashed];
m11_64 -> m11_18  [key=2, style=dotted];
m11_64 -> m11_64  [color=darkseagreen4, key=1, label=sp, style=dashed];
m11_64 -> m11_65  [key=0, style=solid];
m11_64 -> m11_17  [key=2, style=dotted];
m11_30 -> m11_39  [key=2, style=dotted];
m11_30 -> m11_30  [color=darkseagreen4, key=1, label=sp, style=dashed];
m11_30 -> m11_31  [key=0, style=solid];
m11_30 -> m11_38  [key=2, style=dotted];
m11_10 -> m11_11  [key=0, style=solid];
m11_12 -> m11_12  [color=darkseagreen4, key=1, label=o, style=dashed];
m11_12 -> m11_13  [key=0, style=solid];
m11_14 -> m11_14  [color=darkseagreen4, key=1, label=o, style=dashed];
m11_14 -> m11_16  [key=0, style=solid];
m11_14 -> m11_20  [key=2, style=dotted];
m11_14 -> m11_21  [key=2, style=dotted];
m11_25 -> m11_26  [key=0, style=solid];
m11_25 -> m11_28  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m11_25 -> m11_29  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m11_27 -> m11_27  [color=darkseagreen4, key=1, label=s, style=dashed];
m11_27 -> m11_28  [key=0, style=solid];
m11_27 -> m11_32  [key=2, style=dotted];
m11_29 -> m11_30  [key=0, style=solid];
m11_29 -> m11_17  [key=2, style=dotted];
m11_29 -> m11_29  [color=darkseagreen4, key=1, label=sp, style=dashed];
m11_29 -> m11_35  [key=2, style=dotted];
m11_29 -> m11_33  [key=2, style=dotted];
m11_29 -> m11_36  [key=2, style=dotted];
m11_29 -> m11_37  [key=2, style=dotted];
m11_65 -> m11_65  [color=darkseagreen4, key=1, label=t, style=dashed];
m11_65 -> m11_66  [key=0, style=solid];
m11_65 -> m11_70  [key=2, style=dotted];
m11_65 -> m11_71  [key=2, style=dotted];
m11_65 -> m11_72  [key=2, style=dotted];
m11_15 -> m11_22  [key=2, style=dotted];
m11_15 -> m11_16  [key=0, style=solid];
m11_31 -> m11_25  [color=blue, key=0, style=bold];
m11_16 -> m11_10  [color=blue, key=0, style=bold];
m11_13 -> m11_14  [key=0, style=solid];
m11_13 -> m11_15  [key=0, style=solid];
m11_13 -> m11_19  [key=2, style=dotted];
m11_28 -> m11_17  [key=2, style=dotted];
m11_28 -> m11_29  [key=0, style=solid];
m11_28 -> m11_28  [color=darkseagreen4, key=1, label=sp, style=dashed];
m11_28 -> m11_33  [key=2, style=dotted];
m11_28 -> m11_34  [key=2, style=dotted];
m11_66 -> m11_66  [color=darkseagreen4, key=1, label=x, style=dashed];
m11_66 -> m11_67  [key=0, style=solid];
m11_66 -> m11_19  [key=2, style=dotted];
m11_68 -> m11_69  [key=0, style=solid];
m11_67 -> m11_68  [key=0, style=solid];
m11_67 -> m11_67  [color=darkseagreen4, key=1, label=y, style=dashed];
m11_67 -> m11_73  [key=2, style=dotted];
m11_67 -> m11_74  [key=2, style=dotted];
m11_69 -> m11_63  [color=blue, key=0, style=bold];
m11_5 -> m11_23  [key=0, style=solid];
m11_23 -> m11_26  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m11_23 -> m11_24  [key=0, style=solid];
m11_23 -> m11_28  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m11_23 -> m11_29  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m11_24 -> m11_5  [color=blue, key=0, style=bold];
m11_82 -> m11_65  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m12_0 -> m12_1  [color=red, key=0, style=solid];
m12_1 -> m12_2  [color=red, key=0, style=solid];
m12_1 -> m12_3  [color=red, key=2, style=dotted];
m12_1 -> n5  [color=red, key=2, style=dotted];
m12_1 -> m12_1  [color=red, key=1, label=t, style=dashed];
m12_1 -> m12_5  [color=red, key=1, label="lambda expression", style=dashed];
m12_1 -> m12_6  [color=red, key=1, label=t, style=dashed];
m12_2 -> m12_0  [color=blue, key=0, style=bold];
m12_5 -> m12_6  [color=red, key=0, style=solid];
m12_6 -> m12_7  [color=red, key=0, style=solid];
m12_6 -> m12_8  [color=red, key=2, style=dotted];
m12_7 -> m12_5  [color=blue, key=0, style=bold];
m12_9 -> m12_6  [color=red, key=1, label=t, style=dashed];
m13_40 -> m13_41  [key=0, style=solid];
m13_40 -> m13_42  [color=darkseagreen4, key=1, label="int[]", style=dashed];
m13_41 -> m13_9  [key=2, style=dotted];
m13_41 -> m13_42  [key=0, style=solid];
m13_41 -> m13_44  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_41 -> m13_39  [color=blue, key=0, style=bold];
m13_42 -> m13_43  [key=0, style=solid];
m13_42 -> m13_35  [key=2, style=dotted];
m13_42 -> m13_11  [key=2, style=dotted];
m13_43 -> m13_40  [color=blue, key=0, style=bold];
m13_43 -> m13_4  [color=darkseagreen4, key=1, label="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter", style=dashed];
m13_43 -> m13_7  [color=darkseagreen4, key=1, label="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter", style=dashed];
m13_43 -> m13_10  [color=darkseagreen4, key=1, label="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter", style=dashed];
m13_43 -> m13_13  [color=darkseagreen4, key=1, label="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter", style=dashed];
m13_151 -> m13_152  [key=0, style=solid];
m13_151 -> m13_153  [color=darkseagreen4, key=1, label="long[]", style=dashed];
m13_152 -> m13_9  [key=2, style=dotted];
m13_152 -> m13_153  [key=0, style=solid];
m13_152 -> m13_155  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_153 -> m13_154  [key=0, style=solid];
m13_153 -> m13_104  [key=2, style=dotted];
m13_154 -> m13_151  [color=blue, key=0, style=bold];
m13_266 -> m13_267  [key=0, style=solid];
m13_266 -> m13_268  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_267 -> m13_9  [key=2, style=dotted];
m13_267 -> m13_268  [key=0, style=solid];
m13_267 -> m13_271  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_268 -> m13_269  [key=0, style=solid];
m13_268 -> m13_270  [key=2, style=dotted];
m13_268 -> m13_11  [key=2, style=dotted];
m13_269 -> m13_266  [color=blue, key=0, style=bold];
m13_39 -> m13_40  [key=0, style=solid];
m13_38 -> m13_36  [color=blue, key=0, style=bold];
m13_32 -> m13_9  [key=2, style=dotted];
m13_32 -> m13_33  [key=0, style=solid];
m13_32 -> m13_36  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_166 -> m13_167  [key=0, style=solid];
m13_170 -> m13_104  [key=2, style=dotted];
m13_170 -> m13_171  [key=0, style=solid];
m13_167 -> m13_139  [key=2, style=dotted];
m13_167 -> m13_170  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m13_167 -> m13_168  [key=0, style=solid];
m13_169 -> m13_170  [key=0, style=solid];
m13_169 -> m13_172  [key=2, style=dotted];
m13_169 -> m13_173  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_169 -> m13_176  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_168 -> m13_169  [key=0, style=solid];
m13_171 -> m13_166  [color=blue, key=0, style=bold];
m13_258 -> m13_259  [key=0, style=solid];
m13_260 -> m13_9  [key=2, style=dotted];
m13_260 -> m13_261  [key=0, style=solid];
m13_260 -> m13_263  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_259 -> m13_260  [key=0, style=solid];
m13_259 -> m13_246  [key=2, style=dotted];
m13_259 -> m13_261  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m13_261 -> m13_262  [key=0, style=solid];
m13_261 -> m13_35  [key=2, style=dotted];
m13_261 -> m13_11  [key=2, style=dotted];
m13_262 -> m13_258  [color=blue, key=0, style=bold];
m13_73 -> m13_74  [key=0, style=solid];
m13_75 -> m13_9  [key=2, style=dotted];
m13_75 -> m13_76  [key=0, style=solid];
m13_75 -> m13_79  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_74 -> m13_75  [key=0, style=solid];
m13_74 -> m13_78  [key=2, style=dotted];
m13_74 -> m13_76  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m13_76 -> m13_77  [key=0, style=solid];
m13_76 -> m13_35  [key=2, style=dotted];
m13_76 -> m13_11  [key=2, style=dotted];
m13_77 -> m13_73  [color=blue, key=0, style=bold];
m13_91 -> m13_92  [key=0, style=solid];
m13_93 -> m13_9  [key=2, style=dotted];
m13_93 -> m13_94  [key=0, style=solid];
m13_93 -> m13_96  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_92 -> m13_93  [key=0, style=solid];
m13_92 -> m13_78  [key=2, style=dotted];
m13_92 -> m13_94  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m13_94 -> m13_95  [key=0, style=solid];
m13_94 -> m13_35  [key=2, style=dotted];
m13_94 -> m13_11  [key=2, style=dotted];
m13_95 -> m13_91  [color=blue, key=0, style=bold];
m13_6 -> m13_7  [key=0, style=solid];
m13_6 -> m13_9  [key=0, style=solid];
m13_6 -> m13_2  [color=darkorchid, key=3, label="Parameter variable System.Collections.Generic.IEnumerable<string> arguments", style=bold];
m13_250 -> m13_251  [key=0, style=solid];
m13_252 -> m13_9  [key=2, style=dotted];
m13_252 -> m13_253  [key=0, style=solid];
m13_252 -> m13_255  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_251 -> m13_252  [key=0, style=solid];
m13_251 -> m13_246  [key=2, style=dotted];
m13_251 -> m13_253  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m13_253 -> m13_254  [key=0, style=solid];
m13_253 -> m13_35  [key=2, style=dotted];
m13_253 -> m13_11  [key=2, style=dotted];
m13_254 -> m13_250  [color=blue, key=0, style=bold];
m13_109 -> m13_110  [key=0, style=solid];
m13_111 -> m13_9  [key=2, style=dotted];
m13_111 -> m13_112  [key=0, style=solid];
m13_111 -> m13_115  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_110 -> m13_111  [key=0, style=solid];
m13_110 -> m13_114  [key=2, style=dotted];
m13_110 -> m13_69  [key=2, style=dotted];
m13_110 -> m13_112  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m13_112 -> m13_113  [key=0, style=solid];
m13_112 -> m13_35  [key=2, style=dotted];
m13_112 -> m13_11  [key=2, style=dotted];
m13_113 -> m13_109  [color=blue, key=0, style=bold];
m13_7 -> m13_8  [key=0, style=solid];
m13_7 -> m13_35  [key=2, style=dotted];
m13_7 -> m13_0  [key=2, style=dotted];
m13_7 -> m13_33  [key=2, style=dotted];
m13_7 -> m13_36  [key=2, style=dotted];
m13_7 -> m13_4  [color=darkorchid, key=3, label="Parameter variable System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>> normalize", style=bold];
m13_306 -> m13_307  [key=0, style=solid];
m13_306 -> m13_308  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent", style=dashed];
m13_307 -> m13_9  [key=2, style=dotted];
m13_307 -> m13_308  [key=0, style=solid];
m13_307 -> m13_310  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_308 -> m13_309  [key=0, style=solid];
m13_308 -> m13_104  [key=2, style=dotted];
m13_309 -> m13_306  [color=blue, key=0, style=bold];
m13_143 -> m13_144  [key=0, style=solid];
m13_143 -> m13_145  [color=darkseagreen4, key=1, label="long[]", style=dashed];
m13_144 -> m13_9  [key=2, style=dotted];
m13_144 -> m13_145  [key=0, style=solid];
m13_144 -> m13_147  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_145 -> m13_146  [key=0, style=solid];
m13_145 -> m13_104  [key=2, style=dotted];
m13_146 -> m13_143  [color=blue, key=0, style=bold];
m13_55 -> m13_56  [key=0, style=solid];
m13_55 -> m13_57  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m13_56 -> m13_9  [key=2, style=dotted];
m13_56 -> m13_57  [key=0, style=solid];
m13_56 -> m13_59  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_57 -> m13_58  [key=0, style=solid];
m13_57 -> m13_35  [key=2, style=dotted];
m13_57 -> m13_11  [key=2, style=dotted];
m13_58 -> m13_55  [color=blue, key=0, style=bold];
m13_37 -> m13_38  [key=0, style=solid];
m13_37 -> m13_39  [key=2, style=dotted];
m13_31 -> m13_32  [key=0, style=solid];
m13_31 -> m13_33  [color=darkseagreen4, key=1, label="int[]", style=dashed];
m13_31 -> m13_0  [color=blue, key=0, style=bold];
m13_33 -> m13_34  [key=0, style=solid];
m13_33 -> m13_35  [key=2, style=dotted];
m13_33 -> m13_11  [key=2, style=dotted];
m13_34 -> m13_31  [color=blue, key=0, style=bold];
m13_184 -> m13_185  [key=0, style=solid];
m13_27 -> m13_28  [color=red, key=0, style=solid];
m13_27 -> m13_29  [key=0, style=solid];
m13_28 -> m13_29  [color=red, key=0, style=solid];
m13_28 -> m13_30  [color=green, key=2, style=dotted];
m13_28 -> m13_33  [color=red, key=2, style=dotted];
m13_28 -> m13_28  [color=red, key=1, label=lastPart, style=dashed];
m13_29 -> m13_27  [color=blue, key=0, style=bold];
m13_29 -> m13_30  [key=0, style=solid];
m13_29 -> m13_36  [key=2, style=dotted];
m13_12 -> m13_13  [key=0, style=solid];
m13_12 -> m13_15  [key=0, style=solid];
m13_20 -> m13_21  [key=0, style=solid];
m13_20 -> m13_30  [key=0, style=solid];
m13_20 -> m13_36  [key=2, style=dotted];
m13_36 -> m13_37  [key=0, style=solid];
m13_44 -> m13_45  [key=0, style=solid];
m13_51 -> m13_52  [key=0, style=solid];
m13_59 -> m13_60  [key=0, style=solid];
m13_70 -> m13_71  [key=0, style=solid];
m13_79 -> m13_80  [key=0, style=solid];
m13_88 -> m13_89  [key=0, style=solid];
m13_96 -> m13_97  [key=0, style=solid];
m13_105 -> m13_106  [key=0, style=solid];
m13_115 -> m13_116  [key=0, style=solid];
m13_123 -> m13_124  [key=0, style=solid];
m13_131 -> m13_132  [key=0, style=solid];
m13_140 -> m13_141  [key=0, style=solid];
m13_147 -> m13_148  [key=0, style=solid];
m13_155 -> m13_156  [key=0, style=solid];
m13_163 -> m13_164  [key=0, style=solid];
m13_194 -> m13_195  [key=0, style=solid];
m13_204 -> m13_205  [key=0, style=solid];
m13_212 -> m13_213  [key=0, style=solid];
m13_221 -> m13_222  [key=0, style=solid];
m13_229 -> m13_230  [key=0, style=solid];
m13_238 -> m13_239  [key=0, style=solid];
m13_247 -> m13_248  [key=0, style=solid];
m13_255 -> m13_256  [key=0, style=solid];
m13_263 -> m13_264  [key=0, style=solid];
m13_271 -> m13_272  [key=0, style=solid];
m13_279 -> m13_280  [key=0, style=solid];
m13_287 -> m13_288  [key=0, style=solid];
m13_295 -> m13_296  [key=0, style=solid];
m13_303 -> m13_304  [key=0, style=solid];
m13_310 -> m13_311  [key=0, style=solid];
m13_318 -> m13_319  [key=0, style=solid];
m13_13 -> m13_14  [key=0, style=solid];
m13_13 -> m13_35  [key=2, style=dotted];
m13_13 -> m13_0  [key=2, style=dotted];
m13_13 -> m13_33  [key=2, style=dotted];
m13_13 -> m13_36  [key=2, style=dotted];
m13_14 -> m13_12  [color=blue, key=0, style=bold];
m13_14 -> m13_15  [key=0, style=solid];
m13_14 -> m13_14  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_14 -> m13_16  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_14 -> m13_17  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_14 -> m13_18  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_14 -> m13_19  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_14 -> m13_20  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_14 -> m13_21  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_14 -> m13_22  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_14 -> m13_23  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_14 -> m13_24  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_14 -> m13_26  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_14 -> m13_27  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_14 -> m13_28  [color=red, key=1, label=int, style=dashed];
m13_22 -> m13_20  [color=blue, key=0, style=bold];
m13_22 -> m13_23  [key=0, style=solid];
m13_22 -> m13_24  [color=darkseagreen4, key=1, label=lastPart, style=dashed];
m13_22 -> m13_25  [color=darkseagreen4, key=1, label=lastPart, style=dashed];
m13_21 -> m13_6  [key=2, style=dotted];
m13_21 -> m13_22  [key=0, style=solid];
m13_21 -> m13_26  [key=0, style=solid];
m13_46 -> m13_44  [color=blue, key=0, style=bold];
m13_45 -> m13_6  [key=2, style=dotted];
m13_45 -> m13_46  [key=0, style=solid];
m13_53 -> m13_51  [color=blue, key=0, style=bold];
m13_52 -> m13_53  [key=0, style=solid];
m13_52 -> m13_54  [key=2, style=dotted];
m13_61 -> m13_59  [color=blue, key=0, style=bold];
m13_60 -> m13_61  [key=0, style=solid];
m13_60 -> m13_62  [key=2, style=dotted];
m13_72 -> m13_70  [color=blue, key=0, style=bold];
m13_71 -> m13_72  [key=0, style=solid];
m13_71 -> m13_54  [key=2, style=dotted];
m13_81 -> m13_79  [color=blue, key=0, style=bold];
m13_80 -> m13_81  [key=0, style=solid];
m13_80 -> m13_82  [key=2, style=dotted];
m13_90 -> m13_88  [color=blue, key=0, style=bold];
m13_89 -> m13_90  [key=0, style=solid];
m13_89 -> m13_62  [key=2, style=dotted];
m13_98 -> m13_96  [color=blue, key=0, style=bold];
m13_97 -> m13_98  [key=0, style=solid];
m13_97 -> m13_99  [key=2, style=dotted];
m13_107 -> m13_105  [color=blue, key=0, style=bold];
m13_106 -> m13_107  [key=0, style=solid];
m13_106 -> m13_108  [key=2, style=dotted];
m13_117 -> m13_115  [color=blue, key=0, style=bold];
m13_116 -> m13_117  [key=0, style=solid];
m13_116 -> m13_108  [key=2, style=dotted];
m13_125 -> m13_123  [color=blue, key=0, style=bold];
m13_124 -> m13_125  [key=0, style=solid];
m13_124 -> m13_108  [key=2, style=dotted];
m13_133 -> m13_131  [color=blue, key=0, style=bold];
m13_132 -> m13_133  [key=0, style=solid];
m13_132 -> m13_108  [key=2, style=dotted];
m13_142 -> m13_140  [color=blue, key=0, style=bold];
m13_141 -> m13_139  [key=2, style=dotted];
m13_141 -> m13_142  [key=0, style=solid];
m13_149 -> m13_147  [color=blue, key=0, style=bold];
m13_148 -> m13_149  [key=0, style=solid];
m13_148 -> m13_150  [key=2, style=dotted];
m13_157 -> m13_155  [color=blue, key=0, style=bold];
m13_156 -> m13_157  [key=0, style=solid];
m13_156 -> m13_158  [key=2, style=dotted];
m13_165 -> m13_163  [color=blue, key=0, style=bold];
m13_164 -> m13_165  [key=0, style=solid];
m13_164 -> m13_158  [key=2, style=dotted];
m13_196 -> m13_194  [color=blue, key=0, style=bold];
m13_195 -> m13_196  [key=0, style=solid];
m13_195 -> m13_197  [key=2, style=dotted];
m13_206 -> m13_204  [color=blue, key=0, style=bold];
m13_205 -> m13_203  [key=2, style=dotted];
m13_205 -> m13_206  [key=0, style=solid];
m13_214 -> m13_212  [color=blue, key=0, style=bold];
m13_213 -> m13_203  [key=2, style=dotted];
m13_213 -> m13_214  [key=0, style=solid];
m13_223 -> m13_221  [color=blue, key=0, style=bold];
m13_222 -> m13_203  [key=2, style=dotted];
m13_222 -> m13_223  [key=0, style=solid];
m13_231 -> m13_229  [color=blue, key=0, style=bold];
m13_230 -> m13_231  [key=0, style=solid];
m13_230 -> m13_232  [key=2, style=dotted];
m13_240 -> m13_238  [color=blue, key=0, style=bold];
m13_239 -> m13_6  [key=2, style=dotted];
m13_239 -> m13_240  [key=0, style=solid];
m13_249 -> m13_247  [color=blue, key=0, style=bold];
m13_248 -> m13_6  [key=2, style=dotted];
m13_248 -> m13_249  [key=0, style=solid];
m13_257 -> m13_255  [color=blue, key=0, style=bold];
m13_256 -> m13_6  [key=2, style=dotted];
m13_256 -> m13_257  [key=0, style=solid];
m13_265 -> m13_263  [color=blue, key=0, style=bold];
m13_264 -> m13_6  [key=2, style=dotted];
m13_264 -> m13_265  [key=0, style=solid];
m13_273 -> m13_271  [color=blue, key=0, style=bold];
m13_272 -> m13_6  [key=2, style=dotted];
m13_272 -> m13_273  [key=0, style=solid];
m13_281 -> m13_279  [color=blue, key=0, style=bold];
m13_280 -> m13_281  [key=0, style=solid];
m13_280 -> m13_282  [key=2, style=dotted];
m13_289 -> m13_287  [color=blue, key=0, style=bold];
m13_288 -> m13_6  [key=2, style=dotted];
m13_288 -> m13_289  [key=0, style=solid];
m13_297 -> m13_295  [color=blue, key=0, style=bold];
m13_296 -> m13_297  [key=0, style=solid];
m13_296 -> m13_298  [key=2, style=dotted];
m13_305 -> m13_303  [color=blue, key=0, style=bold];
m13_304 -> m13_305  [key=0, style=solid];
m13_304 -> m13_282  [key=2, style=dotted];
m13_312 -> m13_310  [color=blue, key=0, style=bold];
m13_311 -> m13_312  [key=0, style=solid];
m13_311 -> m13_313  [key=2, style=dotted];
m13_320 -> m13_318  [color=blue, key=0, style=bold];
m13_319 -> m13_320  [key=0, style=solid];
m13_319 -> m13_321  [key=2, style=dotted];
m13_174 -> m13_139  [key=2, style=dotted];
m13_174 -> m13_175  [key=0, style=solid];
m13_173 -> m13_174  [key=0, style=solid];
m13_175 -> m13_173  [color=blue, key=0, style=bold];
m13_176 -> m13_177  [key=0, style=solid];
m13_176 -> m13_181  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m13_176 -> m13_185  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m13_178 -> m13_176  [color=blue, key=0, style=bold];
m13_177 -> m13_178  [key=0, style=solid];
m13_177 -> m13_179  [key=2, style=dotted];
m13_177 -> m13_180  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_181 -> m13_182  [key=0, style=solid];
m13_181 -> m13_183  [key=2, style=dotted];
m13_181 -> m13_184  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_185 -> m13_186  [key=0, style=solid];
m13_185 -> m13_187  [key=2, style=dotted];
m13_180 -> m13_181  [key=0, style=solid];
m13_182 -> m13_180  [color=blue, key=0, style=bold];
m13_186 -> m13_184  [color=blue, key=0, style=bold];
m13_10 -> m13_11  [key=0, style=solid];
m13_10 -> m13_35  [key=2, style=dotted];
m13_10 -> m13_0  [key=2, style=dotted];
m13_10 -> m13_33  [key=2, style=dotted];
m13_10 -> m13_36  [key=2, style=dotted];
m13_30 -> m13_31  [key=0, style=solid];
m13_30 -> m13_37  [key=2, style=dotted];
m13_30 -> m13_38  [key=2, style=dotted];
m13_47 -> m13_48  [key=0, style=solid];
m13_47 -> m13_49  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m13_48 -> m13_9  [key=2, style=dotted];
m13_48 -> m13_49  [key=0, style=solid];
m13_48 -> m13_51  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_49 -> m13_50  [key=0, style=solid];
m13_49 -> m13_35  [key=2, style=dotted];
m13_49 -> m13_11  [key=2, style=dotted];
m13_50 -> m13_47  [color=blue, key=0, style=bold];
m13_118 -> m13_119  [key=0, style=solid];
m13_120 -> m13_9  [key=2, style=dotted];
m13_120 -> m13_121  [key=0, style=solid];
m13_120 -> m13_123  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_119 -> m13_120  [key=0, style=solid];
m13_119 -> m13_114  [key=2, style=dotted];
m13_119 -> m13_69  [key=2, style=dotted];
m13_119 -> m13_121  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m13_121 -> m13_122  [key=0, style=solid];
m13_121 -> m13_35  [key=2, style=dotted];
m13_121 -> m13_11  [key=2, style=dotted];
m13_122 -> m13_118  [color=blue, key=0, style=bold];
m13_23 -> m13_24  [color=green, key=0, style=solid];
m13_23 -> m13_25  [color=darkseagreen4, key=1, label=double, style=dashed];
m13_24 -> m13_25  [color=green, key=0, style=solid];
m13_24 -> m13_9  [color=green, key=2, style=dotted];
m13_24 -> m13_27  [color=green, key=1, label="lambda expression", style=dashed];
m13_24 -> m13_33  [key=2, style=dotted];
m13_24 -> m13_24  [color=darkseagreen4, key=1, label=lastPart, style=dashed];
m13_25 -> m13_26  [key=0, style=solid];
m13_25 -> m13_19  [key=2, style=dotted];
m13_25 -> m13_30  [key=0, style=solid];
m13_25 -> m13_36  [key=2, style=dotted];
m13_26 -> m13_23  [color=blue, key=0, style=bold];
m13_26 -> m13_27  [key=0, style=solid];
m13_26 -> m13_28  [color=red, key=1, label=lastPart, style=dashed];
m13_26 -> m13_29  [color=darkseagreen4, key=1, label=lastPart, style=dashed];
m13_11 -> m13_12  [key=0, style=solid];
m13_11 -> m13_11  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_11 -> m13_13  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_11 -> m13_14  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_11 -> m13_15  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_11 -> m13_16  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_11 -> m13_17  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_11 -> m13_18  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_11 -> m13_19  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_11 -> m13_20  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_11 -> m13_21  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_11 -> m13_22  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_11 -> m13_23  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_11 -> m13_24  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_11 -> m13_26  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_11 -> m13_27  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_11 -> m13_28  [color=red, key=1, label=int, style=dashed];
m13_274 -> m13_275  [key=0, style=solid];
m13_276 -> m13_9  [key=2, style=dotted];
m13_276 -> m13_277  [key=0, style=solid];
m13_276 -> m13_279  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_275 -> m13_276  [key=0, style=solid];
m13_275 -> m13_220  [key=2, style=dotted];
m13_275 -> m13_277  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m13_277 -> m13_278  [key=0, style=solid];
m13_277 -> m13_35  [key=2, style=dotted];
m13_277 -> m13_11  [key=2, style=dotted];
m13_278 -> m13_274  [color=blue, key=0, style=bold];
m13_233 -> m13_234  [key=0, style=solid];
m13_235 -> m13_9  [key=2, style=dotted];
m13_235 -> m13_236  [key=0, style=solid];
m13_235 -> m13_238  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_234 -> m13_235  [key=0, style=solid];
m13_234 -> m13_78  [key=2, style=dotted];
m13_234 -> m13_69  [key=2, style=dotted];
m13_234 -> m13_236  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m13_236 -> m13_237  [key=0, style=solid];
m13_236 -> m13_35  [key=2, style=dotted];
m13_236 -> m13_11  [key=2, style=dotted];
m13_237 -> m13_233  [color=blue, key=0, style=bold];
m13_0 -> m13_1  [key=0, style=solid];
m13_0 -> m13_3  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_0 -> m13_4  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_0 -> m13_6  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_0 -> m13_7  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_0 -> m13_8  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_0 -> m13_9  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_0 -> m13_10  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_0 -> m13_11  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_0 -> m13_12  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_0 -> m13_13  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_0 -> m13_14  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_0 -> m13_15  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_0 -> m13_16  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_0 -> m13_17  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_0 -> m13_18  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_0 -> m13_19  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_0 -> m13_20  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_0 -> m13_21  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_0 -> m13_22  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_0 -> m13_23  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_0 -> m13_24  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_0 -> m13_26  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_0 -> m13_27  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_0 -> m13_28  [color=red, key=1, label=int, style=dashed];
m13_0 -> m13_2  [color=darkorchid, key=3, label="method methodReturn string Convert", style=bold];
m13_3 -> m13_9  [key=2, style=dotted];
m13_3 -> m13_4  [key=0, style=solid];
m13_3 -> m13_12  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_3 -> m13_5  [key=0, style=solid];
m13_1 -> m13_3  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m13_1 -> m13_2  [key=0, style=solid];
m13_1 -> m13_6  [key=2, style=dotted];
m13_1 -> m13_13  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m13_2 -> m13_3  [key=0, style=solid];
m13_2 -> m13_7  [key=2, style=dotted];
m13_2 -> m13_8  [key=2, style=dotted];
m13_2 -> m13_4  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m13_2 -> m13_31  [key=0, style=solid];
m13_4 -> m13_5  [key=0, style=solid];
m13_4 -> m13_10  [key=2, style=dotted];
m13_4 -> m13_11  [key=2, style=dotted];
m13_4 -> m13_31  [key=0, style=solid];
m13_4 -> m13_32  [key=2, style=dotted];
m13_4 -> m13_0  [key=2, style=dotted];
m13_4 -> m13_33  [key=2, style=dotted];
m13_5 -> m13_0  [color=blue, key=0, style=bold];
m13_5 -> m13_6  [key=0, style=solid];
m13_5 -> m13_34  [key=2, style=dotted];
m13_5 -> m13_7  [color=darkseagreen4, key=1, label=parts, style=dashed];
m13_5 -> m13_10  [color=darkseagreen4, key=1, label=parts, style=dashed];
m13_5 -> m13_13  [color=darkseagreen4, key=1, label=parts, style=dashed];
m13_5 -> m13_16  [color=darkseagreen4, key=1, label=parts, style=dashed];
m13_5 -> m13_20  [color=darkseagreen4, key=1, label=parts, style=dashed];
m13_5 -> m13_25  [color=darkseagreen4, key=1, label=parts, style=dashed];
m13_5 -> m13_29  [color=darkseagreen4, key=1, label=parts, style=dashed];
m13_5 -> m13_30  [color=darkseagreen4, key=1, label=parts, style=dashed];
m13_224 -> m13_225  [key=0, style=solid];
m13_226 -> m13_9  [key=2, style=dotted];
m13_226 -> m13_227  [key=0, style=solid];
m13_226 -> m13_229  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_225 -> m13_226  [key=0, style=solid];
m13_225 -> m13_220  [key=2, style=dotted];
m13_225 -> m13_69  [key=2, style=dotted];
m13_225 -> m13_227  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m13_227 -> m13_228  [key=0, style=solid];
m13_227 -> m13_35  [key=2, style=dotted];
m13_227 -> m13_11  [key=2, style=dotted];
m13_228 -> m13_224  [color=blue, key=0, style=bold];
m13_215 -> m13_216  [key=0, style=solid];
m13_217 -> m13_9  [key=2, style=dotted];
m13_217 -> m13_218  [key=0, style=solid];
m13_217 -> m13_221  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_216 -> m13_217  [key=0, style=solid];
m13_216 -> m13_220  [key=2, style=dotted];
m13_216 -> m13_69  [key=2, style=dotted];
m13_216 -> m13_218  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m13_218 -> m13_219  [key=0, style=solid];
m13_218 -> m13_35  [key=2, style=dotted];
m13_218 -> m13_11  [key=2, style=dotted];
m13_219 -> m13_215  [color=blue, key=0, style=bold];
m13_126 -> m13_127  [key=0, style=solid];
m13_128 -> m13_9  [key=2, style=dotted];
m13_128 -> m13_129  [key=0, style=solid];
m13_128 -> m13_131  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_127 -> m13_128  [key=0, style=solid];
m13_127 -> m13_114  [key=2, style=dotted];
m13_127 -> m13_69  [key=2, style=dotted];
m13_127 -> m13_129  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m13_129 -> m13_130  [key=0, style=solid];
m13_129 -> m13_35  [key=2, style=dotted];
m13_129 -> m13_11  [key=2, style=dotted];
m13_130 -> m13_126  [color=blue, key=0, style=bold];
m13_299 -> m13_300  [key=0, style=solid];
m13_299 -> m13_301  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue", style=dashed];
m13_300 -> m13_9  [key=2, style=dotted];
m13_300 -> m13_301  [key=0, style=solid];
m13_300 -> m13_303  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_301 -> m13_302  [key=0, style=solid];
m13_301 -> m13_104  [key=2, style=dotted];
m13_302 -> m13_299  [color=blue, key=0, style=bold];
m13_83 -> m13_84  [key=0, style=solid];
m13_85 -> m13_9  [key=2, style=dotted];
m13_85 -> m13_86  [key=0, style=solid];
m13_85 -> m13_88  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_84 -> m13_85  [key=0, style=solid];
m13_84 -> m13_78  [key=2, style=dotted];
m13_84 -> m13_69  [key=2, style=dotted];
m13_84 -> m13_86  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m13_86 -> m13_87  [key=0, style=solid];
m13_86 -> m13_35  [key=2, style=dotted];
m13_86 -> m13_11  [key=2, style=dotted];
m13_87 -> m13_83  [color=blue, key=0, style=bold];
m13_63 -> m13_64  [key=0, style=solid];
m13_65 -> m13_9  [key=2, style=dotted];
m13_65 -> m13_66  [key=0, style=solid];
m13_65 -> m13_70  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_64 -> m13_65  [key=0, style=solid];
m13_64 -> m13_68  [key=2, style=dotted];
m13_64 -> m13_69  [key=2, style=dotted];
m13_64 -> m13_66  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m13_66 -> m13_67  [key=0, style=solid];
m13_66 -> m13_35  [key=2, style=dotted];
m13_66 -> m13_11  [key=2, style=dotted];
m13_67 -> m13_63  [color=blue, key=0, style=bold];
m13_134 -> m13_135  [key=0, style=solid];
m13_136 -> m13_9  [key=2, style=dotted];
m13_136 -> m13_137  [key=0, style=solid];
m13_136 -> m13_140  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_135 -> m13_136  [key=0, style=solid];
m13_135 -> m13_139  [key=2, style=dotted];
m13_135 -> m13_137  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m13_137 -> m13_138  [key=0, style=solid];
m13_137 -> m13_104  [key=2, style=dotted];
m13_138 -> m13_134  [color=blue, key=0, style=bold];
m13_8 -> m13_9  [key=0, style=solid];
m13_8 -> m13_8  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_8 -> m13_10  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_8 -> m13_11  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_8 -> m13_12  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_8 -> m13_13  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_8 -> m13_14  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_8 -> m13_15  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_8 -> m13_16  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_8 -> m13_17  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_8 -> m13_18  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_8 -> m13_19  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_8 -> m13_20  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_8 -> m13_21  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_8 -> m13_22  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_8 -> m13_23  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_8 -> m13_24  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_8 -> m13_26  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_8 -> m13_27  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_8 -> m13_28  [color=red, key=1, label=int, style=dashed];
m13_9 -> m13_10  [key=0, style=solid];
m13_9 -> m13_12  [key=0, style=solid];
m13_15 -> m13_16  [key=0, style=solid];
m13_15 -> m13_18  [key=0, style=solid];
m13_15 -> m13_17  [color=darkseagreen4, key=1, label=long, style=dashed];
m13_16 -> m13_17  [key=0, style=solid];
m13_16 -> m13_35  [key=2, style=dotted];
m13_16 -> m13_36  [key=2, style=dotted];
m13_16 -> m13_9  [key=2, style=dotted];
m13_16 -> m13_20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_17 -> m13_18  [key=0, style=solid];
m13_17 -> m13_17  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_17 -> m13_19  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_17 -> m13_20  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_17 -> m13_21  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_17 -> m13_22  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_17 -> m13_23  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_17 -> m13_24  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_17 -> m13_26  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_17 -> m13_27  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_17 -> m13_28  [color=red, key=1, label=int, style=dashed];
m13_18 -> m13_19  [key=0, style=solid];
m13_18 -> m13_30  [key=0, style=solid];
m13_18 -> m13_15  [color=blue, key=0, style=bold];
m13_19 -> m13_20  [key=0, style=solid];
m13_19 -> m13_21  [key=0, style=solid];
m13_159 -> m13_160  [key=0, style=solid];
m13_159 -> m13_161  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m13_160 -> m13_9  [key=2, style=dotted];
m13_160 -> m13_161  [key=0, style=solid];
m13_160 -> m13_163  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_161 -> m13_162  [key=0, style=solid];
m13_161 -> m13_104  [key=2, style=dotted];
m13_162 -> m13_159  [color=blue, key=0, style=bold];
m13_314 -> m13_315  [key=0, style=solid];
m13_314 -> m13_316  [color=darkseagreen4, key=1, label="int?", style=dashed];
m13_315 -> m13_9  [key=2, style=dotted];
m13_315 -> m13_316  [key=0, style=solid];
m13_315 -> m13_318  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_316 -> m13_317  [key=0, style=solid];
m13_316 -> m13_104  [key=2, style=dotted];
m13_317 -> m13_314  [color=blue, key=0, style=bold];
m13_241 -> m13_242  [key=0, style=solid];
m13_243 -> m13_9  [key=2, style=dotted];
m13_243 -> m13_244  [key=0, style=solid];
m13_243 -> m13_247  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_242 -> m13_243  [key=0, style=solid];
m13_242 -> m13_246  [key=2, style=dotted];
m13_242 -> m13_244  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m13_244 -> m13_245  [key=0, style=solid];
m13_244 -> m13_35  [key=2, style=dotted];
m13_244 -> m13_11  [key=2, style=dotted];
m13_245 -> m13_241  [color=blue, key=0, style=bold];
m13_207 -> m13_208  [key=0, style=solid];
m13_209 -> m13_9  [key=2, style=dotted];
m13_209 -> m13_210  [key=0, style=solid];
m13_209 -> m13_212  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_208 -> m13_209  [key=0, style=solid];
m13_208 -> m13_203  [key=2, style=dotted];
m13_208 -> m13_210  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m13_210 -> m13_211  [key=0, style=solid];
m13_210 -> m13_104  [key=2, style=dotted];
m13_211 -> m13_207  [color=blue, key=0, style=bold];
m13_290 -> m13_291  [key=0, style=solid];
m13_292 -> m13_9  [key=2, style=dotted];
m13_292 -> m13_293  [key=0, style=solid];
m13_292 -> m13_295  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_291 -> m13_292  [key=0, style=solid];
m13_291 -> m13_78  [key=2, style=dotted];
m13_291 -> m13_293  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m13_293 -> m13_294  [key=0, style=solid];
m13_293 -> m13_35  [key=2, style=dotted];
m13_293 -> m13_11  [key=2, style=dotted];
m13_294 -> m13_290  [color=blue, key=0, style=bold];
m13_100 -> m13_101  [key=0, style=solid];
m13_100 -> m13_102  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
m13_101 -> m13_9  [key=2, style=dotted];
m13_101 -> m13_102  [key=0, style=solid];
m13_101 -> m13_105  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_102 -> m13_102  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
m13_102 -> m13_103  [key=0, style=solid];
m13_102 -> m13_104  [key=2, style=dotted];
m13_103 -> m13_100  [color=blue, key=0, style=bold];
m13_283 -> m13_284  [key=0, style=solid];
m13_283 -> m13_285  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_284 -> m13_9  [key=2, style=dotted];
m13_284 -> m13_285  [key=0, style=solid];
m13_284 -> m13_287  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_285 -> m13_286  [key=0, style=solid];
m13_285 -> m13_104  [key=2, style=dotted];
m13_286 -> m13_283  [color=blue, key=0, style=bold];
m13_198 -> m13_199  [key=0, style=solid];
m13_200 -> m13_9  [key=2, style=dotted];
m13_200 -> m13_201  [key=0, style=solid];
m13_200 -> m13_204  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_199 -> m13_200  [key=0, style=solid];
m13_199 -> m13_203  [key=2, style=dotted];
m13_199 -> m13_201  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m13_201 -> m13_202  [key=0, style=solid];
m13_201 -> m13_104  [key=2, style=dotted];
m13_202 -> m13_198  [color=blue, key=0, style=bold];
m13_188 -> m13_189  [key=0, style=solid];
m13_190 -> m13_9  [key=2, style=dotted];
m13_190 -> m13_191  [key=0, style=solid];
m13_190 -> m13_194  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_189 -> m13_190  [key=0, style=solid];
m13_189 -> m13_193  [key=2, style=dotted];
m13_189 -> m13_69  [key=2, style=dotted];
m13_189 -> m13_191  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m13_191 -> m13_192  [key=0, style=solid];
m13_191 -> m13_35  [key=2, style=dotted];
m13_191 -> m13_11  [key=2, style=dotted];
m13_192 -> m13_188  [color=blue, key=0, style=bold];
m13_322 -> m13_13  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m13_323 -> m13_181  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m13_323 -> m13_185  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m15_40 -> m15_41  [key=0, style=solid];
m15_40 -> m15_42  [color=darkseagreen4, key=1, label="int[]", style=dashed];
m15_41 -> m15_9  [key=2, style=dotted];
m15_41 -> m15_42  [key=0, style=solid];
m15_41 -> m15_44  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_42 -> m15_43  [key=0, style=solid];
m15_42 -> m15_35  [key=2, style=dotted];
m15_42 -> m15_11  [key=2, style=dotted];
m15_43 -> m15_40  [color=blue, key=0, style=bold];
m15_306 -> m15_307  [key=0, style=solid];
m15_306 -> m15_308  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent", style=dashed];
m15_307 -> m15_9  [key=2, style=dotted];
m15_307 -> m15_308  [key=0, style=solid];
m15_307 -> m15_310  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_308 -> m15_309  [key=0, style=solid];
m15_308 -> m15_104  [key=2, style=dotted];
m15_309 -> m15_306  [color=blue, key=0, style=bold];
m15_159 -> m15_160  [key=0, style=solid];
m15_159 -> m15_161  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m15_160 -> m15_9  [key=2, style=dotted];
m15_160 -> m15_161  [key=0, style=solid];
m15_160 -> m15_163  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_161 -> m15_162  [key=0, style=solid];
m15_161 -> m15_104  [key=2, style=dotted];
m15_162 -> m15_159  [color=blue, key=0, style=bold];
m15_233 -> m15_234  [key=0, style=solid];
m15_235 -> m15_9  [key=2, style=dotted];
m15_235 -> m15_236  [key=0, style=solid];
m15_235 -> m15_238  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_234 -> m15_235  [key=0, style=solid];
m15_234 -> m15_78  [key=2, style=dotted];
m15_234 -> m15_69  [key=2, style=dotted];
m15_234 -> m15_236  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m15_236 -> m15_237  [key=0, style=solid];
m15_236 -> m15_35  [key=2, style=dotted];
m15_236 -> m15_11  [key=2, style=dotted];
m15_237 -> m15_233  [color=blue, key=0, style=bold];
m15_274 -> m15_275  [key=0, style=solid];
m15_276 -> m15_9  [key=2, style=dotted];
m15_276 -> m15_277  [key=0, style=solid];
m15_276 -> m15_279  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_275 -> m15_276  [key=0, style=solid];
m15_275 -> m15_220  [key=2, style=dotted];
m15_275 -> m15_277  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m15_277 -> m15_278  [key=0, style=solid];
m15_277 -> m15_35  [key=2, style=dotted];
m15_277 -> m15_11  [key=2, style=dotted];
m15_278 -> m15_274  [color=blue, key=0, style=bold];
m15_151 -> m15_152  [key=0, style=solid];
m15_151 -> m15_153  [color=darkseagreen4, key=1, label="long[]", style=dashed];
m15_152 -> m15_9  [key=2, style=dotted];
m15_152 -> m15_153  [key=0, style=solid];
m15_152 -> m15_155  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_153 -> m15_154  [key=0, style=solid];
m15_153 -> m15_104  [key=2, style=dotted];
m15_154 -> m15_151  [color=blue, key=0, style=bold];
m15_143 -> m15_144  [key=0, style=solid];
m15_143 -> m15_145  [color=darkseagreen4, key=1, label="long[]", style=dashed];
m15_144 -> m15_9  [key=2, style=dotted];
m15_144 -> m15_145  [key=0, style=solid];
m15_144 -> m15_147  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_145 -> m15_146  [key=0, style=solid];
m15_145 -> m15_104  [key=2, style=dotted];
m15_146 -> m15_143  [color=blue, key=0, style=bold];
m15_241 -> m15_242  [key=0, style=solid];
m15_243 -> m15_9  [key=2, style=dotted];
m15_243 -> m15_244  [key=0, style=solid];
m15_243 -> m15_247  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_242 -> m15_243  [key=0, style=solid];
m15_242 -> m15_246  [key=2, style=dotted];
m15_242 -> m15_244  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m15_244 -> m15_245  [key=0, style=solid];
m15_244 -> m15_35  [key=2, style=dotted];
m15_244 -> m15_11  [key=2, style=dotted];
m15_245 -> m15_241  [color=blue, key=0, style=bold];
m15_55 -> m15_56  [key=0, style=solid];
m15_55 -> m15_57  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m15_56 -> m15_9  [key=2, style=dotted];
m15_56 -> m15_57  [key=0, style=solid];
m15_56 -> m15_59  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_57 -> m15_58  [key=0, style=solid];
m15_57 -> m15_35  [key=2, style=dotted];
m15_57 -> m15_11  [key=2, style=dotted];
m15_58 -> m15_55  [color=blue, key=0, style=bold];
m15_266 -> m15_267  [key=0, style=solid];
m15_266 -> m15_268  [color=darkseagreen4, key=1, label=string, style=dashed];
m15_267 -> m15_9  [key=2, style=dotted];
m15_267 -> m15_268  [key=0, style=solid];
m15_267 -> m15_271  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_268 -> m15_269  [key=0, style=solid];
m15_268 -> m15_270  [key=2, style=dotted];
m15_268 -> m15_11  [key=2, style=dotted];
m15_269 -> m15_266  [color=blue, key=0, style=bold];
m15_207 -> m15_208  [key=0, style=solid];
m15_209 -> m15_9  [key=2, style=dotted];
m15_209 -> m15_210  [key=0, style=solid];
m15_209 -> m15_212  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_208 -> m15_209  [key=0, style=solid];
m15_208 -> m15_203  [key=2, style=dotted];
m15_208 -> m15_210  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m15_210 -> m15_211  [key=0, style=solid];
m15_210 -> m15_104  [key=2, style=dotted];
m15_211 -> m15_207  [color=blue, key=0, style=bold];
m15_31 -> m15_32  [key=0, style=solid];
m15_31 -> m15_33  [color=darkseagreen4, key=1, label="int[]", style=dashed];
m15_32 -> m15_9  [key=2, style=dotted];
m15_32 -> m15_33  [key=0, style=solid];
m15_32 -> m15_36  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_33 -> m15_34  [key=0, style=solid];
m15_33 -> m15_35  [key=2, style=dotted];
m15_33 -> m15_11  [key=2, style=dotted];
m15_34 -> m15_31  [color=blue, key=0, style=bold];
m15_0 -> m15_1  [key=0, style=solid];
m15_3 -> m15_9  [key=2, style=dotted];
m15_3 -> m15_4  [key=0, style=solid];
m15_3 -> m15_12  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_3 -> m15_10  [key=2, style=dotted];
m15_1 -> m15_6  [key=2, style=dotted];
m15_1 -> m15_3  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m15_1 -> m15_2  [key=0, style=solid];
m15_1 -> m15_13  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m15_1 -> m15_4  [color=darkseagreen4, key=1, label=expected, style=dashed];
m15_2 -> m15_3  [key=0, style=solid];
m15_2 -> m15_7  [key=2, style=dotted];
m15_2 -> m15_8  [key=2, style=dotted];
m15_2 -> m15_4  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m15_2 -> m15_298  [color=darkorchid, key=3, label="Property variable CommandLine.Core.TargetType TargetType", style=bold];
m15_2 -> m15_9  [key=2, style=dotted];
m15_4 -> m15_5  [key=0, style=solid];
m15_4 -> m15_10  [key=2, style=dotted];
m15_4 -> m15_11  [key=2, style=dotted];
m15_5 -> m15_0  [color=blue, key=0, style=bold];
m15_224 -> m15_225  [key=0, style=solid];
m15_226 -> m15_9  [key=2, style=dotted];
m15_226 -> m15_227  [key=0, style=solid];
m15_226 -> m15_229  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_225 -> m15_226  [key=0, style=solid];
m15_225 -> m15_220  [key=2, style=dotted];
m15_225 -> m15_69  [key=2, style=dotted];
m15_225 -> m15_227  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m15_227 -> m15_228  [key=0, style=solid];
m15_227 -> m15_35  [key=2, style=dotted];
m15_227 -> m15_11  [key=2, style=dotted];
m15_228 -> m15_224  [color=blue, key=0, style=bold];
m15_290 -> m15_291  [key=0, style=solid];
m15_292 -> m15_9  [key=2, style=dotted];
m15_292 -> m15_293  [key=0, style=solid];
m15_292 -> m15_295  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_291 -> m15_292  [key=0, style=solid];
m15_291 -> m15_78  [key=2, style=dotted];
m15_291 -> m15_293  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m15_293 -> m15_294  [key=0, style=solid];
m15_293 -> m15_35  [key=2, style=dotted];
m15_293 -> m15_11  [key=2, style=dotted];
m15_294 -> m15_290  [color=blue, key=0, style=bold];
m15_184 -> m15_185  [key=0, style=solid];
m15_20 -> m15_21  [color=green, key=0, style=solid];
m15_21 -> m15_22  [color=green, key=0, style=solid];
m15_21 -> m15_6  [color=green, key=2, style=dotted];
m15_22 -> m15_20  [color=blue, key=0, style=bold];
m15_45 -> m15_6  [key=2, style=dotted];
m15_45 -> m15_46  [key=0, style=solid];
m15_239 -> m15_6  [key=2, style=dotted];
m15_239 -> m15_240  [key=0, style=solid];
m15_248 -> m15_6  [key=2, style=dotted];
m15_248 -> m15_249  [key=0, style=solid];
m15_256 -> m15_6  [key=2, style=dotted];
m15_256 -> m15_257  [key=0, style=solid];
m15_264 -> m15_6  [key=2, style=dotted];
m15_264 -> m15_265  [key=0, style=solid];
m15_272 -> m15_6  [key=2, style=dotted];
m15_272 -> m15_273  [key=0, style=solid];
m15_288 -> m15_6  [key=2, style=dotted];
m15_288 -> m15_289  [key=0, style=solid];
m15_12 -> m15_13  [key=0, style=solid];
m15_27 -> m15_28  [key=0, style=solid];
m15_36 -> m15_37  [key=0, style=solid];
m15_44 -> m15_45  [key=0, style=solid];
m15_51 -> m15_52  [key=0, style=solid];
m15_59 -> m15_60  [key=0, style=solid];
m15_70 -> m15_71  [key=0, style=solid];
m15_79 -> m15_80  [key=0, style=solid];
m15_88 -> m15_89  [key=0, style=solid];
m15_96 -> m15_97  [key=0, style=solid];
m15_105 -> m15_106  [key=0, style=solid];
m15_115 -> m15_116  [key=0, style=solid];
m15_123 -> m15_124  [key=0, style=solid];
m15_131 -> m15_132  [key=0, style=solid];
m15_140 -> m15_141  [key=0, style=solid];
m15_147 -> m15_148  [key=0, style=solid];
m15_155 -> m15_156  [key=0, style=solid];
m15_163 -> m15_164  [key=0, style=solid];
m15_194 -> m15_195  [key=0, style=solid];
m15_204 -> m15_205  [key=0, style=solid];
m15_212 -> m15_213  [key=0, style=solid];
m15_221 -> m15_222  [key=0, style=solid];
m15_229 -> m15_230  [key=0, style=solid];
m15_238 -> m15_239  [key=0, style=solid];
m15_247 -> m15_248  [key=0, style=solid];
m15_255 -> m15_256  [key=0, style=solid];
m15_263 -> m15_264  [key=0, style=solid];
m15_271 -> m15_272  [key=0, style=solid];
m15_279 -> m15_280  [key=0, style=solid];
m15_287 -> m15_288  [key=0, style=solid];
m15_295 -> m15_296  [key=0, style=solid];
m15_303 -> m15_304  [key=0, style=solid];
m15_310 -> m15_311  [key=0, style=solid];
m15_13 -> m15_14  [key=0, style=solid];
m15_46 -> m15_44  [color=blue, key=0, style=bold];
m15_240 -> m15_238  [color=blue, key=0, style=bold];
m15_249 -> m15_247  [color=blue, key=0, style=bold];
m15_257 -> m15_255  [color=blue, key=0, style=bold];
m15_265 -> m15_263  [color=blue, key=0, style=bold];
m15_273 -> m15_271  [color=blue, key=0, style=bold];
m15_289 -> m15_287  [color=blue, key=0, style=bold];
m15_14 -> m15_12  [color=blue, key=0, style=bold];
m15_29 -> m15_27  [color=blue, key=0, style=bold];
m15_28 -> m15_29  [key=0, style=solid];
m15_28 -> m15_30  [key=2, style=dotted];
m15_38 -> m15_36  [color=blue, key=0, style=bold];
m15_37 -> m15_38  [key=0, style=solid];
m15_37 -> m15_39  [key=2, style=dotted];
m15_53 -> m15_51  [color=blue, key=0, style=bold];
m15_52 -> m15_53  [key=0, style=solid];
m15_52 -> m15_54  [key=2, style=dotted];
m15_61 -> m15_59  [color=blue, key=0, style=bold];
m15_60 -> m15_61  [key=0, style=solid];
m15_60 -> m15_62  [key=2, style=dotted];
m15_72 -> m15_70  [color=blue, key=0, style=bold];
m15_71 -> m15_72  [key=0, style=solid];
m15_71 -> m15_54  [key=2, style=dotted];
m15_81 -> m15_79  [color=blue, key=0, style=bold];
m15_80 -> m15_81  [key=0, style=solid];
m15_80 -> m15_82  [key=2, style=dotted];
m15_90 -> m15_88  [color=blue, key=0, style=bold];
m15_89 -> m15_90  [key=0, style=solid];
m15_89 -> m15_62  [key=2, style=dotted];
m15_98 -> m15_96  [color=blue, key=0, style=bold];
m15_97 -> m15_98  [key=0, style=solid];
m15_97 -> m15_99  [key=2, style=dotted];
m15_107 -> m15_105  [color=blue, key=0, style=bold];
m15_106 -> m15_107  [key=0, style=solid];
m15_106 -> m15_108  [key=2, style=dotted];
m15_117 -> m15_115  [color=blue, key=0, style=bold];
m15_116 -> m15_117  [key=0, style=solid];
m15_116 -> m15_108  [key=2, style=dotted];
m15_125 -> m15_123  [color=blue, key=0, style=bold];
m15_124 -> m15_125  [key=0, style=solid];
m15_124 -> m15_108  [key=2, style=dotted];
m15_133 -> m15_131  [color=blue, key=0, style=bold];
m15_132 -> m15_133  [key=0, style=solid];
m15_132 -> m15_108  [key=2, style=dotted];
m15_142 -> m15_140  [color=blue, key=0, style=bold];
m15_141 -> m15_139  [key=2, style=dotted];
m15_141 -> m15_142  [key=0, style=solid];
m15_149 -> m15_147  [color=blue, key=0, style=bold];
m15_148 -> m15_149  [key=0, style=solid];
m15_148 -> m15_150  [key=2, style=dotted];
m15_157 -> m15_155  [color=blue, key=0, style=bold];
m15_156 -> m15_157  [key=0, style=solid];
m15_156 -> m15_158  [key=2, style=dotted];
m15_165 -> m15_163  [color=blue, key=0, style=bold];
m15_164 -> m15_165  [key=0, style=solid];
m15_164 -> m15_158  [key=2, style=dotted];
m15_196 -> m15_194  [color=blue, key=0, style=bold];
m15_195 -> m15_196  [key=0, style=solid];
m15_195 -> m15_197  [key=2, style=dotted];
m15_206 -> m15_204  [color=blue, key=0, style=bold];
m15_205 -> m15_203  [key=2, style=dotted];
m15_205 -> m15_206  [key=0, style=solid];
m15_214 -> m15_212  [color=blue, key=0, style=bold];
m15_213 -> m15_203  [key=2, style=dotted];
m15_213 -> m15_214  [key=0, style=solid];
m15_223 -> m15_221  [color=blue, key=0, style=bold];
m15_222 -> m15_203  [key=2, style=dotted];
m15_222 -> m15_223  [key=0, style=solid];
m15_231 -> m15_229  [color=blue, key=0, style=bold];
m15_230 -> m15_231  [key=0, style=solid];
m15_230 -> m15_232  [key=2, style=dotted];
m15_281 -> m15_279  [color=blue, key=0, style=bold];
m15_280 -> m15_281  [key=0, style=solid];
m15_280 -> m15_282  [key=2, style=dotted];
m15_297 -> m15_295  [color=blue, key=0, style=bold];
m15_296 -> m15_298  [key=2, style=dotted];
m15_296 -> m15_297  [key=0, style=solid];
m15_305 -> m15_303  [color=blue, key=0, style=bold];
m15_304 -> m15_305  [key=0, style=solid];
m15_304 -> m15_282  [key=2, style=dotted];
m15_312 -> m15_310  [color=blue, key=0, style=bold];
m15_311 -> m15_312  [key=0, style=solid];
m15_311 -> m15_313  [key=2, style=dotted];
m15_174 -> m15_139  [key=2, style=dotted];
m15_174 -> m15_175  [key=0, style=solid];
m15_173 -> m15_174  [key=0, style=solid];
m15_175 -> m15_173  [color=blue, key=0, style=bold];
m15_176 -> m15_177  [key=0, style=solid];
m15_176 -> m15_181  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m15_176 -> m15_185  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m15_178 -> m15_176  [color=blue, key=0, style=bold];
m15_177 -> m15_178  [key=0, style=solid];
m15_177 -> m15_179  [key=2, style=dotted];
m15_177 -> m15_180  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_181 -> m15_182  [key=0, style=solid];
m15_181 -> m15_183  [key=2, style=dotted];
m15_181 -> m15_184  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_185 -> m15_186  [key=0, style=solid];
m15_185 -> m15_187  [key=2, style=dotted];
m15_180 -> m15_181  [key=0, style=solid];
m15_182 -> m15_180  [color=blue, key=0, style=bold];
m15_186 -> m15_184  [color=blue, key=0, style=bold];
m15_215 -> m15_216  [key=0, style=solid];
m15_217 -> m15_9  [key=2, style=dotted];
m15_217 -> m15_218  [key=0, style=solid];
m15_217 -> m15_221  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_216 -> m15_217  [key=0, style=solid];
m15_216 -> m15_220  [key=2, style=dotted];
m15_216 -> m15_69  [key=2, style=dotted];
m15_216 -> m15_218  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m15_218 -> m15_219  [key=0, style=solid];
m15_218 -> m15_35  [key=2, style=dotted];
m15_218 -> m15_11  [key=2, style=dotted];
m15_219 -> m15_215  [color=blue, key=0, style=bold];
m15_100 -> m15_101  [key=0, style=solid];
m15_100 -> m15_102  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
m15_101 -> m15_9  [key=2, style=dotted];
m15_101 -> m15_102  [key=0, style=solid];
m15_101 -> m15_105  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_102 -> m15_102  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
m15_102 -> m15_103  [key=0, style=solid];
m15_102 -> m15_104  [key=2, style=dotted];
m15_103 -> m15_100  [color=blue, key=0, style=bold];
m15_126 -> m15_127  [key=0, style=solid];
m15_128 -> m15_9  [key=2, style=dotted];
m15_128 -> m15_129  [key=0, style=solid];
m15_128 -> m15_131  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_127 -> m15_128  [key=0, style=solid];
m15_127 -> m15_114  [key=2, style=dotted];
m15_127 -> m15_69  [key=2, style=dotted];
m15_127 -> m15_129  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m15_129 -> m15_130  [key=0, style=solid];
m15_129 -> m15_35  [key=2, style=dotted];
m15_129 -> m15_11  [key=2, style=dotted];
m15_130 -> m15_126  [color=blue, key=0, style=bold];
m15_299 -> m15_300  [key=0, style=solid];
m15_299 -> m15_301  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue", style=dashed];
m15_300 -> m15_9  [key=2, style=dotted];
m15_300 -> m15_301  [key=0, style=solid];
m15_300 -> m15_303  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_301 -> m15_302  [key=0, style=solid];
m15_301 -> m15_104  [key=2, style=dotted];
m15_302 -> m15_299  [color=blue, key=0, style=bold];
m15_83 -> m15_84  [key=0, style=solid];
m15_85 -> m15_9  [key=2, style=dotted];
m15_85 -> m15_86  [key=0, style=solid];
m15_85 -> m15_88  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_84 -> m15_85  [key=0, style=solid];
m15_84 -> m15_78  [key=2, style=dotted];
m15_84 -> m15_69  [key=2, style=dotted];
m15_84 -> m15_86  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m15_86 -> m15_87  [key=0, style=solid];
m15_86 -> m15_35  [key=2, style=dotted];
m15_86 -> m15_11  [key=2, style=dotted];
m15_87 -> m15_83  [color=blue, key=0, style=bold];
m15_166 -> m15_167  [key=0, style=solid];
m15_170 -> m15_104  [key=2, style=dotted];
m15_170 -> m15_171  [key=0, style=solid];
m15_167 -> m15_139  [key=2, style=dotted];
m15_167 -> m15_170  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m15_167 -> m15_168  [key=0, style=solid];
m15_169 -> m15_170  [key=0, style=solid];
m15_169 -> m15_172  [key=2, style=dotted];
m15_169 -> m15_173  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_169 -> m15_176  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_168 -> m15_169  [key=0, style=solid];
m15_171 -> m15_166  [color=blue, key=0, style=bold];
m15_258 -> m15_259  [key=0, style=solid];
m15_260 -> m15_9  [key=2, style=dotted];
m15_260 -> m15_261  [key=0, style=solid];
m15_260 -> m15_263  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_259 -> m15_260  [key=0, style=solid];
m15_259 -> m15_246  [key=2, style=dotted];
m15_259 -> m15_261  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m15_261 -> m15_262  [key=0, style=solid];
m15_261 -> m15_35  [key=2, style=dotted];
m15_261 -> m15_11  [key=2, style=dotted];
m15_262 -> m15_258  [color=blue, key=0, style=bold];
m15_63 -> m15_64  [key=0, style=solid];
m15_65 -> m15_9  [key=2, style=dotted];
m15_65 -> m15_66  [key=0, style=solid];
m15_65 -> m15_70  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_64 -> m15_65  [key=0, style=solid];
m15_64 -> m15_68  [key=2, style=dotted];
m15_64 -> m15_69  [key=2, style=dotted];
m15_64 -> m15_66  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m15_66 -> m15_67  [key=0, style=solid];
m15_66 -> m15_35  [key=2, style=dotted];
m15_66 -> m15_11  [key=2, style=dotted];
m15_67 -> m15_63  [color=blue, key=0, style=bold];
m15_134 -> m15_135  [key=0, style=solid];
m15_136 -> m15_9  [key=2, style=dotted];
m15_136 -> m15_137  [key=0, style=solid];
m15_136 -> m15_140  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_135 -> m15_136  [key=0, style=solid];
m15_135 -> m15_139  [key=2, style=dotted];
m15_135 -> m15_137  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m15_137 -> m15_138  [key=0, style=solid];
m15_137 -> m15_104  [key=2, style=dotted];
m15_138 -> m15_134  [color=blue, key=0, style=bold];
m15_283 -> m15_284  [key=0, style=solid];
m15_283 -> m15_285  [color=darkseagreen4, key=1, label=string, style=dashed];
m15_284 -> m15_9  [key=2, style=dotted];
m15_284 -> m15_285  [key=0, style=solid];
m15_284 -> m15_287  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_285 -> m15_286  [key=0, style=solid];
m15_285 -> m15_104  [key=2, style=dotted];
m15_286 -> m15_283  [color=blue, key=0, style=bold];
m15_73 -> m15_74  [key=0, style=solid];
m15_75 -> m15_9  [key=2, style=dotted];
m15_75 -> m15_76  [key=0, style=solid];
m15_75 -> m15_79  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_74 -> m15_75  [key=0, style=solid];
m15_74 -> m15_78  [key=2, style=dotted];
m15_74 -> m15_76  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m15_76 -> m15_77  [key=0, style=solid];
m15_76 -> m15_35  [key=2, style=dotted];
m15_76 -> m15_11  [key=2, style=dotted];
m15_77 -> m15_73  [color=blue, key=0, style=bold];
m15_91 -> m15_92  [key=0, style=solid];
m15_93 -> m15_9  [key=2, style=dotted];
m15_93 -> m15_94  [key=0, style=solid];
m15_93 -> m15_96  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_92 -> m15_93  [key=0, style=solid];
m15_92 -> m15_78  [key=2, style=dotted];
m15_92 -> m15_94  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m15_94 -> m15_95  [key=0, style=solid];
m15_94 -> m15_35  [key=2, style=dotted];
m15_94 -> m15_11  [key=2, style=dotted];
m15_95 -> m15_91  [color=blue, key=0, style=bold];
m15_198 -> m15_199  [key=0, style=solid];
m15_200 -> m15_9  [key=2, style=dotted];
m15_200 -> m15_201  [key=0, style=solid];
m15_200 -> m15_204  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_199 -> m15_200  [key=0, style=solid];
m15_199 -> m15_203  [key=2, style=dotted];
m15_199 -> m15_201  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m15_201 -> m15_202  [key=0, style=solid];
m15_201 -> m15_104  [key=2, style=dotted];
m15_202 -> m15_198  [color=blue, key=0, style=bold];
m15_47 -> m15_48  [key=0, style=solid];
m15_47 -> m15_49  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m15_48 -> m15_9  [key=2, style=dotted];
m15_48 -> m15_49  [key=0, style=solid];
m15_48 -> m15_51  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_49 -> m15_50  [key=0, style=solid];
m15_49 -> m15_35  [key=2, style=dotted];
m15_49 -> m15_11  [key=2, style=dotted];
m15_50 -> m15_47  [color=blue, key=0, style=bold];
m15_15 -> m15_16  [color=green, key=0, style=solid];
m15_15 -> m15_17  [color=darkseagreen4, key=1, label=long, style=dashed];
m15_16 -> m15_17  [color=green, key=0, style=solid];
m15_16 -> m15_9  [color=green, key=2, style=dotted];
m15_16 -> m15_20  [color=green, key=1, label="lambda expression", style=dashed];
m15_17 -> m15_18  [key=0, style=solid];
m15_17 -> m15_19  [key=2, style=dotted];
m15_18 -> m15_15  [color=blue, key=0, style=bold];
m15_250 -> m15_251  [key=0, style=solid];
m15_252 -> m15_9  [key=2, style=dotted];
m15_252 -> m15_253  [key=0, style=solid];
m15_252 -> m15_255  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_251 -> m15_252  [key=0, style=solid];
m15_251 -> m15_246  [key=2, style=dotted];
m15_251 -> m15_253  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m15_253 -> m15_254  [key=0, style=solid];
m15_253 -> m15_35  [key=2, style=dotted];
m15_253 -> m15_11  [key=2, style=dotted];
m15_254 -> m15_250  [color=blue, key=0, style=bold];
m15_118 -> m15_119  [key=0, style=solid];
m15_120 -> m15_9  [key=2, style=dotted];
m15_120 -> m15_121  [key=0, style=solid];
m15_120 -> m15_123  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_119 -> m15_120  [key=0, style=solid];
m15_119 -> m15_114  [key=2, style=dotted];
m15_119 -> m15_69  [key=2, style=dotted];
m15_119 -> m15_121  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m15_121 -> m15_122  [key=0, style=solid];
m15_121 -> m15_35  [key=2, style=dotted];
m15_121 -> m15_11  [key=2, style=dotted];
m15_122 -> m15_118  [color=blue, key=0, style=bold];
m15_109 -> m15_110  [key=0, style=solid];
m15_111 -> m15_9  [key=2, style=dotted];
m15_111 -> m15_112  [key=0, style=solid];
m15_111 -> m15_115  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_110 -> m15_111  [key=0, style=solid];
m15_110 -> m15_114  [key=2, style=dotted];
m15_110 -> m15_69  [key=2, style=dotted];
m15_110 -> m15_112  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m15_112 -> m15_113  [key=0, style=solid];
m15_112 -> m15_35  [key=2, style=dotted];
m15_112 -> m15_11  [key=2, style=dotted];
m15_113 -> m15_109  [color=blue, key=0, style=bold];
m15_23 -> m15_24  [key=0, style=solid];
m15_23 -> m15_25  [color=darkseagreen4, key=1, label=double, style=dashed];
m15_24 -> m15_9  [key=2, style=dotted];
m15_24 -> m15_25  [key=0, style=solid];
m15_24 -> m15_27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_25 -> m15_19  [key=2, style=dotted];
m15_25 -> m15_26  [key=0, style=solid];
m15_26 -> m15_23  [color=blue, key=0, style=bold];
m15_188 -> m15_189  [key=0, style=solid];
m15_190 -> m15_9  [key=2, style=dotted];
m15_190 -> m15_191  [key=0, style=solid];
m15_190 -> m15_194  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_189 -> m15_190  [key=0, style=solid];
m15_189 -> m15_193  [key=2, style=dotted];
m15_189 -> m15_69  [key=2, style=dotted];
m15_189 -> m15_191  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m15_191 -> m15_192  [key=0, style=solid];
m15_191 -> m15_35  [key=2, style=dotted];
m15_191 -> m15_11  [key=2, style=dotted];
m15_192 -> m15_188  [color=blue, key=0, style=bold];
m15_314 -> m15_13  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m15_315 -> m15_181  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m15_315 -> m15_185  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m16_0 -> m16_1  [key=0, style=solid];
m16_1 -> m16_4  [key=2, style=dotted];
m16_1 -> m16_2  [key=0, style=solid];
m16_2 -> m16_3  [key=0, style=solid];
m16_2 -> m16_5  [key=2, style=dotted];
m16_2 -> m16_6  [key=2, style=dotted];
m16_2 -> m16_7  [key=2, style=dotted];
m16_2 -> m16_8  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m16_2 -> m16_11  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m16_2 -> m16_14  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m16_3 -> m16_0  [color=blue, key=0, style=bold];
m16_4 -> m16_28  [color=green, key=0, style=bold];
m16_4 -> m16_20  [color=green, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m16_4 -> m16_17  [key=0, style=solid];
m16_4 -> m16_18  [color=crimson, key=0, style=bold];
m16_4 -> m16_22  [color=crimson, key=0, style=bold];
m16_4 -> m16_23  [color=crimson, key=0, style=bold];
m16_4 -> m16_26  [color=crimson, key=0, style=bold];
m16_4 -> m16_27  [color=crimson, key=0, style=bold];
m16_4 -> m16_30  [color=crimson, key=0, style=bold];
m16_4 -> m16_19  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m16_4 -> m16_24  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m16_4 -> m16_25  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m16_4 -> m16_29  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m16_28 -> m16_29  [color=green, key=0, style=solid];
m16_28 -> m16_50  [color=green, key=2, style=dotted];
m16_28 -> m16_51  [color=green, key=2, style=dotted];
m16_28 -> m16_49  [color=green, key=2, style=dotted];
m16_28 -> m16_40  [color=green, key=2, style=dotted];
m16_28 -> m16_36  [color=green, key=2, style=dotted];
m16_28 -> m16_59  [color=green, key=1, label="lambda expression", style=dashed];
m16_27 -> m16_28  [color=green, key=0, style=solid];
m16_19 -> m16_28  [color=green, key=1, label=pt, style=dashed];
m16_19 -> m16_20  [color=green, key=0, style=solid];
m16_19 -> m16_33  [key=2, style=dotted];
m16_19 -> m16_22  [color=darkseagreen4, key=1, label=pt, style=dashed];
m16_19 -> m16_25  [color=darkseagreen4, key=1, label=pt, style=dashed];
m16_19 -> m16_26  [color=darkseagreen4, key=1, label=pt, style=dashed];
m16_19 -> m16_60  [color=darkseagreen4, key=1, label=pt, style=dashed];
m16_20 -> m16_28  [color=green, key=1, label=taken, style=dashed];
m16_20 -> m16_21  [color=green, key=0, style=solid];
m16_20 -> m16_34  [color=green, key=2, style=dotted];
m16_20 -> m16_35  [color=green, key=2, style=dotted];
m16_20 -> m16_36  [color=green, key=2, style=dotted];
m16_20 -> m16_37  [color=green, key=2, style=dotted];
m16_20 -> m16_52  [color=green, key=1, label="lambda expression", style=dashed];
m16_20 -> m16_25  [color=green, key=1, label=taken, style=dashed];
m16_20 -> m16_29  [color=green, key=1, label=taken, style=dashed];
m16_25 -> m16_28  [color=green, key=0, style=solid];
m16_25 -> m16_26  [key=0, style=solid];
m16_25 -> m16_44  [key=2, style=dotted];
m16_25 -> m16_45  [key=2, style=dotted];
m16_25 -> m16_46  [key=2, style=dotted];
m16_25 -> m16_41  [key=2, style=dotted];
m16_25 -> m16_47  [key=2, style=dotted];
m16_29 -> m16_4  [key=2, style=dotted];
m16_29 -> m16_30  [key=0, style=solid];
m16_29 -> m16_31  [key=0, style=solid];
m16_29 -> m16_41  [key=2, style=dotted];
m16_29 -> m16_46  [key=2, style=dotted];
m16_21 -> m16_22  [key=0, style=solid];
m16_21 -> m16_24  [key=0, style=solid];
m16_21 -> m16_38  [key=2, style=dotted];
m16_17 -> m16_19  [key=0, style=solid];
m16_17 -> m16_18  [key=0, style=solid];
m16_17 -> m16_32  [key=2, style=dotted];
m16_18 -> m16_19  [key=0, style=solid];
m16_22 -> m16_40  [key=2, style=dotted];
m16_22 -> m16_23  [key=0, style=solid];
m16_22 -> m16_39  [key=2, style=dotted];
m16_23 -> m16_24  [key=0, style=solid];
m16_26 -> m16_27  [key=0, style=solid];
m16_26 -> m16_49  [key=2, style=dotted];
m16_26 -> m16_40  [key=2, style=dotted];
m16_26 -> m16_48  [key=2, style=dotted];
m16_30 -> m16_29  [key=0, style=solid];
m16_24 -> m16_25  [key=0, style=solid];
m16_24 -> m16_41  [key=2, style=dotted];
m16_24 -> m16_42  [key=2, style=dotted];
m16_24 -> m16_43  [key=2, style=dotted];
m16_24 -> m16_55  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m16_31 -> m16_4  [color=blue, key=0, style=bold];
m16_14 -> m16_15  [key=0, style=solid];
m16_59 -> m16_60  [key=0, style=solid];
m16_52 -> m16_53  [color=green, key=0, style=solid];
m16_53 -> m16_54  [color=green, key=0, style=solid];
m16_54 -> m16_52  [color=blue, key=0, style=bold];
m16_60 -> m16_40  [key=2, style=dotted];
m16_60 -> m16_61  [key=0, style=solid];
m16_60 -> m16_62  [key=2, style=dotted];
m16_60 -> m16_63  [key=2, style=dotted];
m16_60 -> m16_64  [key=2, style=dotted];
m16_61 -> m16_59  [color=blue, key=0, style=bold];
m16_55 -> m16_56  [key=0, style=solid];
m16_8 -> m16_9  [key=0, style=solid];
m16_11 -> m16_12  [key=0, style=solid];
m16_57 -> m16_55  [color=blue, key=0, style=bold];
m16_56 -> m16_57  [key=0, style=solid];
m16_56 -> m16_58  [key=2, style=dotted];
m16_10 -> m16_8  [color=blue, key=0, style=bold];
m16_9 -> m16_10  [key=0, style=solid];
m16_13 -> m16_11  [color=blue, key=0, style=bold];
m16_12 -> m16_13  [key=0, style=solid];
m16_15 -> m16_16  [key=0, style=solid];
m16_16 -> m16_14  [color=blue, key=0, style=bold];
m16_75 -> m16_76  [key=0, style=solid];
m16_76 -> m16_49  [key=2, style=dotted];
m16_76 -> m16_44  [key=2, style=dotted];
m16_76 -> m16_77  [key=0, style=solid];
m16_76 -> m16_48  [key=2, style=dotted];
m16_76 -> m16_64  [key=2, style=dotted];
m16_77 -> m16_75  [color=blue, key=0, style=bold];
m16_65 -> m16_71  [color=green, key=1, label="CommandLine.Core.Specification", style=dashed];
m16_65 -> m16_66  [key=0, style=solid];
m16_65 -> m16_70  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m16_71 -> m16_73  [color=green, key=0, style=solid];
m16_71 -> m16_74  [color=green, key=2, style=dotted];
m16_71 -> m16_49  [color=green, key=2, style=dotted];
m16_70 -> m16_71  [color=green, key=0, style=solid];
m16_70 -> m16_72  [key=0, style=solid];
m16_70 -> m16_44  [key=2, style=dotted];
m16_68 -> m16_49  [key=2, style=dotted];
m16_68 -> m16_73  [key=0, style=solid];
m16_66 -> m16_67  [key=0, style=solid];
m16_66 -> m16_69  [key=0, style=solid];
m16_69 -> m16_70  [key=0, style=solid];
m16_72 -> m16_73  [key=0, style=solid];
m16_72 -> m16_64  [key=2, style=dotted];
m16_67 -> m16_68  [key=0, style=solid];
m16_73 -> m16_65  [color=blue, key=0, style=bold];
m16_78 -> m16_60  [color=darkseagreen4, key=1, label=pt, style=dashed];
}
