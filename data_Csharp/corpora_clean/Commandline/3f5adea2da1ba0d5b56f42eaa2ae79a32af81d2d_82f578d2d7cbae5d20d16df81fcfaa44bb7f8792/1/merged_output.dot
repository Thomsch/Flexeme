digraph  {
n148 [label="CSharpx.Maybe<System.Func<T>>", span=""];
n149 [label=specProps, span=""];
n150 [label=makeDefault, span=""];
n151 [label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>", span=""];
n152 [label="System.Collections.Generic.IEnumerable<string>", span=""];
n153 [label=optionSpecs, span=""];
n154 [label="System.StringComparer", span=""];
n155 [label="System.Globalization.CultureInfo", span=""];
n156 [label=typeInfo, span=""];
n157 [label="System.Collections.Generic.IEnumerable<CommandLine.ErrorType>", span=""];
n158 [label=token, span=""];
n159 [label=specPropsWithValue, span=""];
n0 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="14-14"];
n1 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var typeInfo = factory.MapValueOrDefault(f => f().GetType(), typeof(T))", span="22-22"];
n5 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="Func<T> makeDefault = () =>\r\n                typeof(T).IsMutable()\r\n                    ? factory.MapValueOrDefault(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="33-37"];
n33 [cluster="lambda expression", label="typeof(T).IsMutable()\r\n                    ? factory.MapValueOrDefault(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="34-37"];
n7 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", color=red, community=0, label="0: Func<ParserResult<T>> buildUp = () =>\r\n            {\r\n                var tokenizerResult = tokenizer(arguments, optionSpecs);\r\n\r\n                var tokens = tokenizerResult.SucceededWith();\r\n\r\n                var partitions = TokenPartitioner.Partition(\r\n                    tokens,\r\n                    name => TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer));\r\n\r\n                var optionSpecPropsResult =\r\n                    OptionMapper.MapValues(\r\n                        (from pt in specProps where pt.Specification.IsOption() select pt),\r\n                        partitions.Options,\r\n                        (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture),\r\n                        nameComparer);\r\n\r\n                var valueSpecPropsResult =\r\n                    ValueMapper.MapValues(\r\n                        (from pt in specProps where pt.Specification.IsValue() select pt),\r\n                        partitions.Values,\r\n                        (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture));\r\n\r\n                var missingValueErrors = from token in partitions.Errors\r\n                    select\r\n                        new MissingValueOptionError(\r\n                            optionSpecs.Single(o => token.Text.MatchName(o.ShortName, o.LongName, nameComparer))\r\n                                .FromOptionSpecification());\r\n\r\n                var specPropsWithValue =\r\n                    optionSpecPropsResult.SucceededWith().Concat(valueSpecPropsResult.SucceededWith());\r\n\r\n                Func<T> buildMutable = () =>\r\n                {\r\n                    var mutable = factory.MapValueOrDefault(f => f(), Activator.CreateInstance<T>());\r\n                    mutable =\r\n                        mutable.SetProperties(specPropsWithValue, sp => sp.Value.IsJust(), sp => sp.Value.FromJustOrFail())\r\n                            .SetProperties(\r\n                                specPropsWithValue,\r\n                                sp => sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust(),\r\n                                sp => sp.Specification.DefaultValue.FromJustOrFail())\r\n                            .SetProperties(\r\n                                specPropsWithValue,\r\n                                sp =>\r\n                                    sp.Value.IsNothing() && sp.Specification.TargetType == TargetType.Sequence\r\n                                    && sp.Specification.DefaultValue.MatchNothing(),\r\n                                sp => sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray());\r\n                    return mutable;\r\n                };\r\n\r\n                Func<T> buildImmutable = () =>\r\n                {\r\n                    var ctor = typeInfo.GetConstructor((from sp in specProps select sp.Property.PropertyType).ToArray());\r\n                    var values = (from prms in ctor.GetParameters()\r\n                        join sp in specPropsWithValue on prms.Name.ToLower() equals sp.Property.Name.ToLower()\r\n                        select\r\n                            sp.Value.MapValueOrDefault(\r\n                                v => v,\r\n                                sp.Specification.DefaultValue.MapValueOrDefault(\r\n                                    d => d,\r\n                                    sp.Specification.ConversionType.CreateDefaultForImmutable()))).ToArray();\r\n                    var immutable = (T)ctor.Invoke(values);\r\n                    return immutable;\r\n                };\r\n\r\n                var instance = typeInfo.IsMutable() ? buildMutable() : buildImmutable();\r\n\r\n                var validationErrors = specPropsWithValue.Validate(SpecificationPropertyRules.Lookup(tokens));\r\n\r\n                var allErrors =\r\n                    tokenizerResult.SuccessfulMessages()\r\n                        .Concat(missingValueErrors)\r\n                        .Concat(optionSpecPropsResult.SuccessfulMessages())\r\n                        .Concat(valueSpecPropsResult.SuccessfulMessages())\r\n                        .Concat(validationErrors)\r\n                        .Memorize();\r\n\r\n                var warnings = from e in allErrors where nonFatalErrors.Contains(e.Tag) select e;\r\n\r\n                return allErrors.Except(warnings).ToParserResult(instance);\r\n            }", span="42-122"];
n48 [cluster="lambda expression", label="var tokenizerResult = tokenizer(arguments, optionSpecs)", span="44-44"];
n50 [cluster="lambda expression", label="var partitions = TokenPartitioner.Partition(\r\n                    tokens,\r\n                    name => TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer))", span="48-50"];
n82 [cluster="lambda expression", label="TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer)", span="50-50"];
n51 [cluster="lambda expression", color=red, community=0, label="0: var optionSpecPropsResult =\r\n                    OptionMapper.MapValues(\r\n                        (from pt in specProps where pt.Specification.IsOption() select pt),\r\n                        partitions.Options,\r\n                        (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture),\r\n                        nameComparer)", span="52-57"];
n86 [cluster="lambda expression", label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="56-56"];
n52 [cluster="lambda expression", color=red, community=0, label="0: var valueSpecPropsResult =\r\n                    ValueMapper.MapValues(\r\n                        (from pt in specProps where pt.Specification.IsValue() select pt),\r\n                        partitions.Values,\r\n                        (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture))", span="59-63"];
n90 [cluster="lambda expression", label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="63-63"];
n53 [cluster="lambda expression", color=red, community=0, label="0: var missingValueErrors = from token in partitions.Errors\r\n                    select\r\n                        new MissingValueOptionError(\r\n                            optionSpecs.Single(o => token.Text.MatchName(o.ShortName, o.LongName, nameComparer))\r\n                                .FromOptionSpecification())", span="65-69"];
n93 [cluster="lambda expression", label="token.Text.MatchName(o.ShortName, o.LongName, nameComparer)", span="68-68"];
n55 [cluster="lambda expression", label="Func<T> buildMutable = () =>\r\n                {\r\n                    var mutable = factory.MapValueOrDefault(f => f(), Activator.CreateInstance<T>());\r\n                    mutable =\r\n                        mutable.SetProperties(specPropsWithValue, sp => sp.Value.IsJust(), sp => sp.Value.FromJustOrFail())\r\n                            .SetProperties(\r\n                                specPropsWithValue,\r\n                                sp => sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust(),\r\n                                sp => sp.Specification.DefaultValue.FromJustOrFail())\r\n                            .SetProperties(\r\n                                specPropsWithValue,\r\n                                sp =>\r\n                                    sp.Value.IsNothing() && sp.Specification.TargetType == TargetType.Sequence\r\n                                    && sp.Specification.DefaultValue.MatchNothing(),\r\n                                sp => sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray());\r\n                    return mutable;\r\n                }", span="74-90"];
n97 [cluster="lambda expression", label="var mutable = factory.MapValueOrDefault(f => f(), Activator.CreateInstance<T>())", span="76-76"];
n60 [cluster="lambda expression", label="var warnings = from e in allErrors where nonFatalErrors.Contains(e.Tag) select e", span="119-119"];
n8 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var preprocessorErrors = arguments.Any()\r\n                ? arguments.Preprocess(PreprocessorGuards.Lookup(nameComparer))\r\n                : Enumerable.Empty<Error>()", span="124-126"];
n9 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var result = arguments.Any()\r\n                ? preprocessorErrors.Any()\r\n                    ? notParsed(preprocessorErrors)\r\n                    : buildUp()\r\n                : buildUp()", span="128-132"];
n2 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var specProps = typeInfo.GetSpecifications(pi => SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>()))", span="24-25"];
n12 [cluster="CSharpx.Maybe<T1>.MapValueOrDefault<T1, T2>(System.Func<T1, T2>, T2)", label="Entry CSharpx.Maybe<T1>.MapValueOrDefault<T1, T2>(System.Func<T1, T2>, T2)", span="377-377"];
n22 [cluster="lambda expression", label="Entry lambda expression", span="22-22"];
n56 [cluster="lambda expression", label="Func<T> buildImmutable = () =>\r\n                {\r\n                    var ctor = typeInfo.GetConstructor((from sp in specProps select sp.Property.PropertyType).ToArray());\r\n                    var values = (from prms in ctor.GetParameters()\r\n                        join sp in specPropsWithValue on prms.Name.ToLower() equals sp.Property.Name.ToLower()\r\n                        select\r\n                            sp.Value.MapValueOrDefault(\r\n                                v => v,\r\n                                sp.Specification.DefaultValue.MapValueOrDefault(\r\n                                    d => d,\r\n                                    sp.Specification.ConversionType.CreateDefaultForImmutable()))).ToArray();\r\n                    var immutable = (T)ctor.Invoke(values);\r\n                    return immutable;\r\n                }", span="92-105"];
n131 [cluster="lambda expression", label="var ctor = typeInfo.GetConstructor((from sp in specProps select sp.Property.PropertyType).ToArray())", span="94-94"];
n57 [cluster="lambda expression", label="var instance = typeInfo.IsMutable() ? buildMutable() : buildImmutable()", span="107-107"];
n3 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var specs = from pt in specProps select pt.Specification", span="27-27"];
n13 [cluster="System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", label="Entry System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", span="16-16"];
n26 [cluster="lambda expression", label="Entry lambda expression", span="24-25"];
n4 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var optionSpecs = specs\r\n                .ThrowingValidate(SpecificationGuards.Lookup)\r\n                .OfType<OptionSpecification>()", span="29-31"];
n14 [cluster="Unk.ThrowingValidate", label="Entry Unk.ThrowingValidate", span=""];
n15 [cluster="System.Collections.IEnumerable.OfType<TResult>()", label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0"];
n6 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="Func<IEnumerable<Error>, ParserResult<T>> notParsed =\r\n                errs => new NotParsed<T>(makeDefault().GetType().ToTypeInfo(), errs)", span="39-40"];
n43 [cluster="lambda expression", label="new NotParsed<T>(makeDefault().GetType().ToTypeInfo(), errs)", span="40-40"];
n16 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
n17 [cluster="CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)", label="Entry CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)", span="11-11"];
n18 [cluster="System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", label="Entry System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="11-11"];
n19 [cluster="System.Linq.Enumerable.Empty<TResult>()", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
n10 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="return result;", span="134-134"];
n20 [cluster="System.Func<T, TResult>.Invoke(T)", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
n21 [cluster="System.Func<TResult>.Invoke()", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
n11 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="Exit CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="14-14"];
n23 [cluster="lambda expression", label="f().GetType()", span="22-22"];
n24 [cluster="lambda expression", label="Exit lambda expression", span="22-22"];
n25 [cluster="object.GetType()", label="Entry object.GetType()", span="0-0"];
n27 [cluster="lambda expression", label="SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>())", span="24-25"];
n28 [cluster="lambda expression", label="Exit lambda expression", span="24-25"];
n29 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", label="Entry CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="103-103"];
n30 [cluster="CSharpx.Maybe.Nothing<T>()", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
n31 [cluster="CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)", label="Entry CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)", span="21-21"];
n32 [cluster="lambda expression", label="Entry lambda expression", span="33-37"];
n34 [cluster="lambda expression", label="Exit lambda expression", span="33-37"];
n35 [cluster="System.Type.IsMutable()", label="Entry System.Type.IsMutable()", span="139-139"];
n36 [cluster="System.Activator.CreateInstance<T>()", label="Entry System.Activator.CreateInstance<T>()", span="0-0"];
n37 [cluster="Unk.ToArray", label="Entry Unk.ToArray", span=""];
n38 [cluster="Unk.>", label="Entry Unk.>", span=""];
n39 [cluster="lambda expression", label="Entry lambda expression", span="35-35"];
n40 [cluster="lambda expression", label="f()", span="35-35"];
n41 [cluster="lambda expression", label="Exit lambda expression", span="35-35"];
n42 [cluster="lambda expression", label="Entry lambda expression", span="40-40"];
n44 [cluster="lambda expression", label="Exit lambda expression", span="40-40"];
n45 [cluster="CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", label="Entry CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="163-163"];
n46 [cluster="System.Type.ToTypeInfo()", label="Entry System.Type.ToTypeInfo()", span="174-174"];
n47 [cluster="lambda expression", label="Entry lambda expression", span="42-122"];
n49 [cluster="lambda expression", label="var tokens = tokenizerResult.SucceededWith()", span="46-46"];
n63 [cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0"];
n59 [cluster="lambda expression", label="var allErrors =\r\n                    tokenizerResult.SuccessfulMessages()\r\n                        .Concat(missingValueErrors)\r\n                        .Concat(optionSpecPropsResult.SuccessfulMessages())\r\n                        .Concat(valueSpecPropsResult.SuccessfulMessages())\r\n                        .Concat(validationErrors)\r\n                        .Memorize()", span="111-117"];
n64 [cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()", label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()", span="653-653"];
n58 [cluster="lambda expression", label="var validationErrors = specPropsWithValue.Validate(SpecificationPropertyRules.Lookup(tokens))", span="109-109"];
n65 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="16-16"];
n81 [cluster="lambda expression", label="Entry lambda expression", span="50-50"];
n66 [cluster="CommandLine.Core.Specification.IsOption()", label="Entry CommandLine.Core.Specification.IsOption()", span="10-10"];
n67 [cluster="Unk.MapValues", label="Entry Unk.MapValues", span=""];
n85 [cluster="lambda expression", label="Entry lambda expression", span="56-56"];
n54 [cluster="lambda expression", label="var specPropsWithValue =\r\n                    optionSpecPropsResult.SucceededWith().Concat(valueSpecPropsResult.SucceededWith())", span="71-72"];
n68 [cluster="CommandLine.Core.Specification.IsValue()", label="Entry CommandLine.Core.Specification.IsValue()", span="15-15"];
n89 [cluster="lambda expression", label="Entry lambda expression", span="63-63"];
n69 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="294-294"];
n70 [cluster="Unk.Single", label="Entry Unk.Single", span=""];
n71 [cluster="Unk.FromOptionSpecification", label="Entry Unk.FromOptionSpecification", span=""];
n92 [cluster="lambda expression", label="Entry lambda expression", span="68-68"];
n72 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
n98 [cluster="lambda expression", label="mutable =\r\n                        mutable.SetProperties(specPropsWithValue, sp => sp.Value.IsJust(), sp => sp.Value.FromJustOrFail())\r\n                            .SetProperties(\r\n                                specPropsWithValue,\r\n                                sp => sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust(),\r\n                                sp => sp.Specification.DefaultValue.FromJustOrFail())\r\n                            .SetProperties(\r\n                                specPropsWithValue,\r\n                                sp =>\r\n                                    sp.Value.IsNothing() && sp.Specification.TargetType == TargetType.Sequence\r\n                                    && sp.Specification.DefaultValue.MatchNothing(),\r\n                                sp => sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray())", span="77-88"];
n132 [cluster="lambda expression", label="var values = (from prms in ctor.GetParameters()\r\n                        join sp in specPropsWithValue on prms.Name.ToLower() equals sp.Property.Name.ToLower()\r\n                        select\r\n                            sp.Value.MapValueOrDefault(\r\n                                v => v,\r\n                                sp.Specification.DefaultValue.MapValueOrDefault(\r\n                                    d => d,\r\n                                    sp.Specification.ConversionType.CreateDefaultForImmutable()))).ToArray()", span="95-102"];
n61 [cluster="lambda expression", label="return allErrors.Except(warnings).ToParserResult(instance);", span="121-121"];
n73 [cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", label="Entry CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12"];
n74 [cluster="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", label="Entry System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="40-40"];
n75 [cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SuccessfulMessages<TSuccess, TMessage>()", label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SuccessfulMessages<TSuccess, TMessage>()", span="15-15"];
n76 [cluster="Unk.Concat", label="Entry Unk.Concat", span=""];
n77 [cluster="Unk.Memorize", label="Entry Unk.Memorize", span=""];
n78 [cluster="Unk.Contains", label="Entry Unk.Contains", span=""];
n62 [cluster="lambda expression", label="Exit lambda expression", span="42-122"];
n79 [cluster="Unk.Except", label="Entry Unk.Except", span=""];
n80 [cluster="Unk.ToParserResult", label="Entry Unk.ToParserResult", span=""];
n83 [cluster="lambda expression", label="Exit lambda expression", span="50-50"];
n84 [cluster="CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", label="Entry CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
n87 [cluster="lambda expression", label="Exit lambda expression", span="56-56"];
n88 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="14-14"];
n91 [cluster="lambda expression", label="Exit lambda expression", span="63-63"];
n94 [cluster="lambda expression", label="Exit lambda expression", span="68-68"];
n95 [cluster="Unk.MatchName", label="Entry Unk.MatchName", span=""];
n96 [cluster="lambda expression", label="Entry lambda expression", span="74-90"];
n102 [cluster="lambda expression", label="Entry lambda expression", span="76-76"];
n99 [cluster="lambda expression", label="return mutable;", span="89-89"];
n101 [cluster="T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", label="Entry T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="82-82"];
n105 [cluster="lambda expression", label="Entry lambda expression", span="78-78"];
n109 [cluster="lambda expression", label="Entry lambda expression", span="78-78"];
n113 [cluster="lambda expression", label="Entry lambda expression", span="81-81"];
n117 [cluster="lambda expression", label="Entry lambda expression", span="82-82"];
n120 [cluster="lambda expression", label="Entry lambda expression", span="85-87"];
n124 [cluster="lambda expression", label="Entry lambda expression", span="88-88"];
n100 [cluster="lambda expression", label="Exit lambda expression", span="74-90"];
n103 [cluster="lambda expression", label="f()", span="76-76"];
n104 [cluster="lambda expression", label="Exit lambda expression", span="76-76"];
n106 [cluster="lambda expression", label="sp.Value.IsJust()", span="78-78"];
n107 [cluster="lambda expression", label="Exit lambda expression", span="78-78"];
n108 [cluster="CSharpx.Maybe<T>.IsJust<T>()", label="Entry CSharpx.Maybe<T>.IsJust<T>()", span="326-326"];
n110 [cluster="lambda expression", label="sp.Value.FromJustOrFail()", span="78-78"];
n111 [cluster="lambda expression", label="Exit lambda expression", span="78-78"];
n112 [cluster="CSharpx.Maybe<T>.FromJustOrFail<T>(System.Exception)", label="Entry CSharpx.Maybe<T>.FromJustOrFail<T>(System.Exception)", span="355-355"];
n114 [cluster="lambda expression", label="sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust()", span="81-81"];
n115 [cluster="lambda expression", label="Exit lambda expression", span="81-81"];
n116 [cluster="CSharpx.Maybe<T>.IsNothing<T>()", label="Entry CSharpx.Maybe<T>.IsNothing<T>()", span="334-334"];
n118 [cluster="lambda expression", label="sp.Specification.DefaultValue.FromJustOrFail()", span="82-82"];
n119 [cluster="lambda expression", label="Exit lambda expression", span="82-82"];
n121 [cluster="lambda expression", label="sp.Value.IsNothing() && sp.Specification.TargetType == TargetType.Sequence\r\n                                    && sp.Specification.DefaultValue.MatchNothing()", span="86-87"];
n122 [cluster="lambda expression", label="Exit lambda expression", span="85-87"];
n123 [cluster="CSharpx.Maybe<T>.MatchNothing()", label="Entry CSharpx.Maybe<T>.MatchNothing()", span="57-57"];
n125 [cluster="lambda expression", label="sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray()", span="88-88"];
n126 [cluster="lambda expression", label="Exit lambda expression", span="88-88"];
n127 [cluster="System.Type.GetGenericArguments()", label="Entry System.Type.GetGenericArguments()", span="0-0"];
n128 [cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0"];
n129 [cluster="System.Type.CreateEmptyArray()", label="Entry System.Type.CreateEmptyArray()", span="125-125"];
n130 [cluster="lambda expression", label="Entry lambda expression", span="92-105"];
n136 [cluster="Unk.GetConstructor", label="Entry Unk.GetConstructor", span=""];
n133 [cluster="lambda expression", label="var immutable = (T)ctor.Invoke(values)", span="103-103"];
n137 [cluster="System.Reflection.MethodBase.GetParameters()", label="Entry System.Reflection.MethodBase.GetParameters()", span="0-0"];
n138 [cluster="string.ToLower()", label="Entry string.ToLower()", span="0-0"];
n139 [cluster="System.Type.CreateDefaultForImmutable()", label="Entry System.Type.CreateDefaultForImmutable()", span="149-149"];
n140 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", span="0-0"];
n142 [cluster="lambda expression", label="Entry lambda expression", span="99-99"];
n145 [cluster="lambda expression", label="Entry lambda expression", span="101-101"];
n134 [cluster="lambda expression", label="return immutable;", span="104-104"];
n141 [cluster="System.Reflection.ConstructorInfo.Invoke(object[])", label="Entry System.Reflection.ConstructorInfo.Invoke(object[])", span="0-0"];
n135 [cluster="lambda expression", label="Exit lambda expression", span="92-105"];
n143 [cluster="lambda expression", label=v, span="99-99"];
n144 [cluster="lambda expression", label="Exit lambda expression", span="99-99"];
n146 [cluster="lambda expression", label=d, span="101-101"];
n147 [cluster="lambda expression", label="Exit lambda expression", span="101-101"];
d7 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", color=green, community=0, label="0: Func<ParserResult<T>> buildUp = () =>\r\n            {\r\n                var tokenizerResult = tokenizer(arguments, optionSpecs);\r\n\r\n                var tokens = tokenizerResult.SucceededWith();\r\n\r\n                var partitions = TokenPartitioner.Partition(\r\n                    tokens,\r\n                    name => TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer));\r\n\r\n                var optionSpecPropsResult =\r\n                    OptionMapper.MapValues(\r\n                        (from pt in specProps where pt.Specification.IsOption() select pt),\r\n                        partitions.Options,\r\n                        (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture),\r\n                        nameComparer);\r\n\r\n                var valueSpecPropsResult =\r\n                    ValueMapper.MapValues(\r\n                        (from pt in specProps where pt.Specification.IsValue() select pt),\r\n                        partitions.Values,\r\n                        (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture));\r\n\r\n                var missingValueErrors = from token in partitions.Errors\r\n                    select\r\n                        new MissingValueOptionError(\r\n                            optionSpecs.Single(o => token.Text.MatchName(o.ShortName, o.LongName, nameComparer))\r\n                                .FromOptionSpecification());\r\n\r\n                var specPropsWithValue =\r\n                    optionSpecPropsResult.SucceededWith().Concat(valueSpecPropsResult.SucceededWith());\r\n\r\n                Func<T> buildMutable = () =>\r\n                {\r\n                    var mutable = factory.MapValueOrDefault(f => f(), Activator.CreateInstance<T>());\r\n                    mutable =\r\n                        mutable.SetProperties(specPropsWithValue, sp => sp.Value.IsJust(), sp => sp.Value.FromJustOrFail())\r\n                            .SetProperties(\r\n                                specPropsWithValue,\r\n                                sp => sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust(),\r\n                                sp => sp.Specification.DefaultValue.FromJustOrFail())\r\n                            .SetProperties(\r\n                                specPropsWithValue,\r\n                                sp =>\r\n                                    sp.Value.IsNothing() && sp.Specification.TargetType == TargetType.Sequence\r\n                                    && sp.Specification.DefaultValue.MatchNothing(),\r\n                                sp => sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray());\r\n                    return mutable;\r\n                };\r\n\r\n                Func<T> buildImmutable = () =>\r\n                {\r\n                    var ctor = typeInfo.GetConstructor((from sp in specProps select sp.Property.PropertyType).ToArray());\r\n                    var values = (from prms in ctor.GetParameters()\r\n                        join sp in specPropsWithValue on prms.Name.ToLower() equals sp.Property.Name.ToLower()\r\n                        select\r\n                            sp.Value.MapValueOrDefault(\r\n                                v => v,\r\n                                sp.Specification.DefaultValue.MapValueOrDefault(\r\n                                    d => d,\r\n                                    sp.Specification.ConversionType.CreateDefaultForImmutable()))).ToArray();\r\n                    var immutable = (T)ctor.Invoke(values);\r\n                    return immutable;\r\n                };\r\n\r\n                var instance = typeInfo.IsMutable() ? buildMutable() : buildImmutable();\r\n\r\n                var validationErrors = specPropsWithValue.Validate(SpecificationPropertyRules.Lookup(tokens));\r\n\r\n                var allErrors =\r\n                    tokenizerResult.SuccessfulMessages()\r\n                        .Concat(missingValueErrors)\r\n                        .Concat(optionSpecPropsResult.SuccessfulMessages())\r\n                        .Concat(valueSpecPropsResult.SuccessfulMessages())\r\n                        .Concat(validationErrors)\r\n                        .Memorize();\r\n\r\n                var warnings = from e in allErrors where nonFatalErrors.Contains(e.Tag) select e;\r\n\r\n                return allErrors.Except(warnings).ToParserResult(instance);\r\n            }", span="42-122"];
d0 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="14-14"];
d51 [cluster="lambda expression", color=green, community=0, label="0: var optionSpecPropsResult =\r\n                    OptionMapper.MapValues(\r\n                        (from pt in specProps where pt.Specification.IsOption() select pt),\r\n                        partitions.Options,\r\n                        (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture),\r\n                        nameComparer)", span="52-57"];
d52 [cluster="lambda expression", label="var valueSpecPropsResult =\r\n                    ValueMapper.MapValues(\r\n                        (from pt in specProps where pt.Specification.IsValue() select pt),\r\n                        partitions.Values,\r\n                        (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture))", span="59-63"];
d53 [cluster="lambda expression", color=green, community=0, label="0: var missingValueErrors = from token in partitions.Errors\r\n                    select\r\n                        new MissingValueOptionError(\r\n                            optionSpecs.Single(o => token.Text.MatchName(o.ShortName, o.LongName, nameComparer))\r\n                                .FromOptionSpecification())", span="65-69"];
d93 [cluster="lambda expression", color=green, community=0, label="0: token.Text.MatchName(o.ShortName, o.LongName, nameComparer)", span="68-68"];
m0_1 [cluster="CommandLine.Core.StatePair<T>.StatePair(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", color=green, community=0, file="TokenPartitioner.cs", label="0: object.Equals(value, default(T))", span="15-15"];
m0_2 [cluster="CommandLine.Core.StatePair<T>.StatePair(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", color=green, community=0, file="TokenPartitioner.cs", label="0: throw new ArgumentNullException(''value'');", span="15-15"];
m0_3 [cluster="CommandLine.Core.StatePair<T>.StatePair(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="TokenPartitioner.cs", label="errors == null", span="16-16"];
m0_4 [cluster="CommandLine.Core.StatePair<T>.StatePair(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="TokenPartitioner.cs", label="throw new ArgumentNullException(''errors'');", span="16-16"];
m0_5 [cluster="CommandLine.Core.StatePair<T>.StatePair(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="TokenPartitioner.cs", label="this.value = value", span="18-18"];
m0_8 [cluster="object.Equals(object, object)", file="TokenPartitioner.cs", label="Entry object.Equals(object, object)", span="0-0"];
m0_6 [cluster="CommandLine.Core.StatePair<T>.StatePair(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="TokenPartitioner.cs", label="this.errors = errors", span="19-19"];
m0_7 [cluster="CommandLine.Core.StatePair<T>.StatePair(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="TokenPartitioner.cs", label="Exit CommandLine.Core.StatePair<T>.StatePair(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="13-13"];
m0_9 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="TokenPartitioner.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m0_26 [cluster="Unk.SequenceEqual", file="TokenPartitioner.cs", label="Entry Unk.SequenceEqual", span=""];
m0_12 [cluster="CommandLine.Core.StatePair<T>.Equals(object)", file="TokenPartitioner.cs", label="other != null", span="35-35"];
m0_18 [cluster="CommandLine.Core.StatePair<T>.GetHashCode()", file="TokenPartitioner.cs", label="Entry CommandLine.Core.StatePair<T>.GetHashCode()", span="43-43"];
m0_37 [cluster="System.Func<T, TResult>.Invoke(T)", file="TokenPartitioner.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m0_0 [cluster="CommandLine.Core.StatePair<T>.StatePair(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.StatePair<T>.StatePair(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="13-13"];
m0_14 [cluster="CommandLine.Core.StatePair<T>.Equals(object)", file="TokenPartitioner.cs", label="return base.Equals(obj);", span="40-40"];
m0_22 [cluster="CommandLine.Core.StatePair<T>.Equals(CommandLine.Core.StatePair<T>)", file="TokenPartitioner.cs", label="other == null", span="50-50"];
m0_34 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="28-28"];
m0_35 [cluster="lambda expression", file="TokenPartitioner.cs", label="v.IsValue()", span="28-28"];
m0_36 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="28-28"];
m0_30 [cluster="CommandLine.Core.StatePair.Create<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="TokenPartitioner.cs", label="errors == null", span="64-64"];
m0_16 [cluster="CommandLine.Core.StatePair<T>.Equals(CommandLine.Core.StatePair<T>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.StatePair<T>.Equals(CommandLine.Core.StatePair<T>)", span="48-48"];
m0_38 [cluster="lambda expression", file="TokenPartitioner.cs", label="CommandLine.Core.StatePair<T>", span=""];
m0_24 [cluster="CommandLine.Core.StatePair<T>.Equals(CommandLine.Core.StatePair<T>)", file="TokenPartitioner.cs", label="return this.Value.Equals(other.Value) && this.Errors.SequenceEqual(other.Errors);", span="55-55"];
m0_28 [cluster="CommandLine.Core.StatePair.Create<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="TokenPartitioner.cs", label="object.Equals(value, default(T))", span="63-63"];
m0_32 [cluster="CommandLine.Core.StatePair.Create<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="TokenPartitioner.cs", label="return new StatePair<T>(value, errors);", span="66-66"];
m0_23 [cluster="CommandLine.Core.StatePair<T>.Equals(CommandLine.Core.StatePair<T>)", file="TokenPartitioner.cs", label="return false;", span="52-52"];
m0_27 [cluster="CommandLine.Core.StatePair.Create<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.StatePair.Create<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="61-61"];
m0_31 [cluster="CommandLine.Core.StatePair.Create<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="TokenPartitioner.cs", label="throw new ArgumentNullException(''errors'');", span="64-64"];
m0_25 [cluster="CommandLine.Core.StatePair<T>.Equals(CommandLine.Core.StatePair<T>)", file="TokenPartitioner.cs", label="Exit CommandLine.Core.StatePair<T>.Equals(CommandLine.Core.StatePair<T>)", span="48-48"];
m0_29 [cluster="CommandLine.Core.StatePair.Create<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="TokenPartitioner.cs", label="throw new ArgumentNullException(''value'');", span="63-63"];
m0_33 [cluster="CommandLine.Core.StatePair.Create<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="TokenPartitioner.cs", label="Exit CommandLine.Core.StatePair.Create<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="61-61"];
m0_39 [cluster="lambda expression", file="TokenPartitioner.cs", label="t.Text", span="35-35"];
m0_40 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="35-35"];
m0_21 [cluster="Unk.Select", file="TokenPartitioner.cs", label="Entry Unk.Select", span=""];
m0_13 [cluster="CommandLine.Core.StatePair<T>.Equals(object)", file="TokenPartitioner.cs", label="return this.Equals(other);", span="37-37"];
m0_15 [cluster="CommandLine.Core.StatePair<T>.Equals(object)", file="TokenPartitioner.cs", label="Exit CommandLine.Core.StatePair<T>.Equals(object)", span="32-32"];
m0_10 [cluster="CommandLine.Core.StatePair<T>.Equals(object)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.StatePair<T>.Equals(object)", span="32-32"];
m0_17 [cluster="object.Equals(object)", file="TokenPartitioner.cs", label="Entry object.Equals(object)", span="0-0"];
m0_11 [cluster="CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11"];
m0_20 [cluster="CommandLine.Core.StatePair<T>.GetHashCode()", file="TokenPartitioner.cs", label="Exit CommandLine.Core.StatePair<T>.GetHashCode()", span="43-43"];
m0_19 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="TokenPartitioner.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
m0_41 [file="TokenPartitioner.cs", label=switches, span=""];
m0_42 [file="TokenPartitioner.cs", label=scalars, span=""];
m0_43 [file="TokenPartitioner.cs", label=sequences, span=""];
m2_8 [cluster="CommandLine.Core.ReflectionExtensions.ToDescriptor(System.Type)", file="TokenPartitions.cs", label="Entry CommandLine.Core.ReflectionExtensions.ToDescriptor(System.Type)", span="22-22"];
m2_9 [cluster="CommandLine.Core.ReflectionExtensions.ToDescriptor(System.Type)", color=red, community=0, file="TokenPartitions.cs", label="1: type == null", span="24-24"];
m2_11 [cluster="CommandLine.Core.ReflectionExtensions.ToDescriptor(System.Type)", color=red, community=0, file="TokenPartitions.cs", label="0: return type == typeof(bool)\r\n                       ? DescriptorType.Boolean\r\n                       : type == typeof(string)\r\n                             ? DescriptorType.Scalar\r\n                             : type.IsArray || typeof(IEnumerable).IsAssignableFrom(type)\r\n                                   ? DescriptorType.Sequence\r\n                                   : DescriptorType.Scalar;", span="26-32"];
m2_10 [cluster="CommandLine.Core.ReflectionExtensions.ToDescriptor(System.Type)", color=red, community=0, file="TokenPartitions.cs", label="0: throw new ArgumentNullException(''type'');", span="24-24"];
m2_12 [cluster="CommandLine.Core.ReflectionExtensions.ToDescriptor(System.Type)", file="TokenPartitions.cs", label="Exit CommandLine.Core.ReflectionExtensions.ToDescriptor(System.Type)", span="22-22"];
m2_43 [cluster="System.Action<T>.Invoke(T)", file="TokenPartitions.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m2_6 [cluster="Unk.Any", file="TokenPartitions.cs", label="Entry Unk.Any", span=""];
m2_23 [cluster="Unk.Where", file="TokenPartitions.cs", label="Entry Unk.Where", span=""];
m2_29 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="TokenPartitions.cs", label="Entry CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", span="55-55"];
m2_30 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="TokenPartitions.cs", label="Action<Exception> fail = inner => { throw new ApplicationException(''Cannot set value to target instance.'', inner); }", span="57-57"];
m2_31 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="TokenPartitions.cs", label="property.SetValue(instance, value, null)", span="61-61"];
m2_40 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="TokenPartitions.cs", label="return instance;", span="80-80"];
m2_33 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="TokenPartitions.cs", label="fail(e)", span="65-65"];
m2_35 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="TokenPartitions.cs", label="fail(e)", span="69-69"];
m2_37 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="TokenPartitions.cs", label="fail(e)", span="73-73"];
m2_39 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="TokenPartitions.cs", label="fail(e)", span="77-77"];
m2_32 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="TokenPartitions.cs", label=TargetException, span="63-63"];
m2_34 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="TokenPartitions.cs", label=TargetParameterCountException, span="67-67"];
m2_36 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="TokenPartitions.cs", label=MethodAccessException, span="71-71"];
m2_38 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="TokenPartitions.cs", label=TargetInvocationException, span="75-75"];
m2_41 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="TokenPartitions.cs", label="Exit CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", span="55-55"];
m2_47 [cluster="System.ApplicationException.ApplicationException(string, System.Exception)", file="TokenPartitions.cs", label="Entry System.ApplicationException.ApplicationException(string, System.Exception)", span="0-0"];
m2_53 [cluster="System.Array.CreateInstance(System.Type, int)", file="TokenPartitions.cs", label="Entry System.Array.CreateInstance(System.Type, int)", span="0-0"];
m2_7 [cluster="Unk.selector", file="TokenPartitions.cs", label="Entry Unk.selector", span=""];
m2_44 [cluster="lambda expression", file="TokenPartitions.cs", label="Entry lambda expression", span="57-57"];
m2_26 [cluster="lambda expression", file="TokenPartitions.cs", label="specProp.Property.SetValue(current, selector(specProp))", span="52-52"];
m2_25 [cluster="lambda expression", file="TokenPartitions.cs", label="Entry lambda expression", span="51-52"];
m2_27 [cluster="lambda expression", file="TokenPartitions.cs", label="Exit lambda expression", span="51-52"];
m2_45 [cluster="lambda expression", file="TokenPartitions.cs", label="throw new ApplicationException(''Cannot set value to target instance.'', inner);", span="57-57"];
m2_46 [cluster="lambda expression", file="TokenPartitions.cs", label="Exit lambda expression", span="57-57"];
m2_42 [cluster="System.Reflection.PropertyInfo.SetValue(object, object, object[])", file="TokenPartitions.cs", label="Entry System.Reflection.PropertyInfo.SetValue(object, object, object[])", span="0-0"];
m2_14 [cluster="System.Type.IsAssignableFrom(System.Type)", file="TokenPartitions.cs", label="Entry System.Type.IsAssignableFrom(System.Type)", span="0-0"];
m2_3 [cluster="System.Type.GetProperties()", file="TokenPartitions.cs", label="Entry System.Type.GetProperties()", span="0-0"];
m2_0 [cluster="CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", file="TokenPartitions.cs", label="Entry CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", span="12-12"];
m2_1 [cluster="CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", color=red, community=0, file="TokenPartitions.cs", label="0: return from pi in type.GetProperties()\r\n                   let attrs = pi.GetCustomAttributes(true)\r\n                   where\r\n                        attrs.OfType<OptionAttribute>().Any() ||\r\n                        attrs.OfType<ValueAttribute>().Any()\r\n                   select selector(pi);", span="14-19"];
m2_2 [cluster="CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", file="TokenPartitions.cs", label="Exit CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", span="12-12"];
m2_4 [cluster="System.Reflection.MemberInfo.GetCustomAttributes(bool)", file="TokenPartitions.cs", label="Entry System.Reflection.MemberInfo.GetCustomAttributes(bool)", span="0-0"];
m2_24 [cluster="Unk.Aggregate", file="TokenPartitions.cs", label="Entry Unk.Aggregate", span=""];
m2_48 [cluster="CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", file="TokenPartitions.cs", label="Entry CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", span="83-83"];
m2_49 [cluster="CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", file="TokenPartitions.cs", label="type == null", span="85-85"];
m2_51 [cluster="CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", file="TokenPartitions.cs", label="return Array.CreateInstance(type, 0);", span="87-87"];
m2_50 [cluster="CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", file="TokenPartitions.cs", label="throw new ArgumentNullException(''type'');", span="85-85"];
m2_52 [cluster="CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", file="TokenPartitions.cs", label="Exit CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", span="83-83"];
m2_20 [cluster="CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", file="TokenPartitions.cs", label="Entry CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="42-42"];
m2_21 [cluster="CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", file="TokenPartitions.cs", label="return specProps.Where(predicate)\r\n                .Aggregate(\r\n                    instance,\r\n                    (current, specProp) =>\r\n                        specProp.Property.SetValue(current, selector(specProp)));", span="48-52"];
m2_22 [cluster="CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", file="TokenPartitions.cs", label="Exit CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="42-42"];
m2_28 [cluster="Unk.SetValue", file="TokenPartitions.cs", label="Entry Unk.SetValue", span=""];
m2_13 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="TokenPartitions.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m2_15 [cluster="CommandLine.Core.ReflectionExtensions.IsScalar(System.Type)", file="TokenPartitions.cs", label="Entry CommandLine.Core.ReflectionExtensions.IsScalar(System.Type)", span="35-35"];
m2_16 [cluster="CommandLine.Core.ReflectionExtensions.IsScalar(System.Type)", color=red, community=0, file="TokenPartitions.cs", label="1: type == null", span="37-37"];
m2_18 [cluster="CommandLine.Core.ReflectionExtensions.IsScalar(System.Type)", color=red, community=0, file="TokenPartitions.cs", label="0: return type == typeof(string) || !type.IsArray && !typeof(IEnumerable).IsAssignableFrom(type);", span="39-39"];
m2_17 [cluster="CommandLine.Core.ReflectionExtensions.IsScalar(System.Type)", color=red, community=0, file="TokenPartitions.cs", label="0: throw new ArgumentNullException(''type'');", span="37-37"];
m2_19 [cluster="CommandLine.Core.ReflectionExtensions.IsScalar(System.Type)", file="TokenPartitions.cs", label="Exit CommandLine.Core.ReflectionExtensions.IsScalar(System.Type)", span="35-35"];
m2_54 [file="TokenPartitions.cs", label="System.Func<CommandLine.Core.SpecificationProperty, object>", span=""];
n148 -> n33  [color=darkseagreen4, key=1, label="CSharpx.Maybe<System.Func<T>>", style=dashed];
n148 -> n55  [color=darkseagreen4, key=1, label="CSharpx.Maybe<System.Func<T>>", style=dashed];
n148 -> n97  [color=darkseagreen4, key=1, label="CSharpx.Maybe<System.Func<T>>", style=dashed];
n149 -> n33  [color=darkseagreen4, key=1, label=specProps, style=dashed];
n149 -> n51  [color=red, key=1, label=specProps, style=dashed];
n149 -> n52  [color=red, key=1, label=specProps, style=dashed];
n149 -> n56  [color=darkseagreen4, key=1, label=specProps, style=dashed];
n149 -> n131  [color=darkseagreen4, key=1, label=specProps, style=dashed];
n149 -> d51  [color=green, key=1, label=specProps, style=dashed];
n149 -> d52  [color=darkseagreen4, key=1, label=specProps, style=dashed];
n150 -> n43  [color=darkseagreen4, key=1, label=makeDefault, style=dashed];
n151 -> n48  [color=darkseagreen4, key=1, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>", style=dashed];
n152 -> n48  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
n153 -> n48  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
n153 -> n50  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
n153 -> n82  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
n153 -> n53  [color=red, key=1, label=optionSpecs, style=dashed];
n153 -> d53  [color=green, key=1, label=optionSpecs, style=dashed];
n154 -> n50  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n154 -> n82  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n154 -> n51  [color=red, key=1, label="System.StringComparer", style=dashed];
n154 -> n53  [color=red, key=1, label="System.StringComparer", style=dashed];
n154 -> n93  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n154 -> d51  [color=green, key=1, label="System.StringComparer", style=dashed];
n154 -> d53  [color=green, key=1, label="System.StringComparer", style=dashed];
n154 -> d93  [color=green, key=1, label="System.StringComparer", style=dashed];
n155 -> n51  [color=red, key=1, label="System.Globalization.CultureInfo", style=dashed];
n155 -> n86  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
n155 -> n52  [color=red, key=1, label="System.Globalization.CultureInfo", style=dashed];
n155 -> n90  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
n155 -> d51  [color=green, key=1, label="System.Globalization.CultureInfo", style=dashed];
n155 -> d52  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
n156 -> n56  [color=darkseagreen4, key=1, label=typeInfo, style=dashed];
n156 -> n131  [color=darkseagreen4, key=1, label=typeInfo, style=dashed];
n156 -> n57  [color=darkseagreen4, key=1, label=typeInfo, style=dashed];
n157 -> n60  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.ErrorType>", style=dashed];
n158 -> n93  [color=darkseagreen4, key=1, label=token, style=dashed];
n158 -> d93  [color=green, key=1, label=token, style=dashed];
n159 -> n98  [color=darkseagreen4, key=1, label=specPropsWithValue, style=dashed];
n159 -> n132  [color=darkseagreen4, key=1, label=specPropsWithValue, style=dashed];
n0 -> n1  [key=0, style=solid];
n0 -> n5  [color=darkseagreen4, key=1, label="CSharpx.Maybe<System.Func<T>>", style=dashed];
n0 -> n33  [color=darkseagreen4, key=1, label="CSharpx.Maybe<System.Func<T>>", style=dashed];
n0 -> n7  [color=red, key=1, label="CSharpx.Maybe<System.Func<T>>", style=dashed];
n0 -> n48  [color=darkseagreen4, key=1, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>", style=dashed];
n0 -> n50  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n0 -> n82  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n0 -> n51  [color=red, key=1, label="System.StringComparer", style=dashed];
n0 -> n86  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
n0 -> n52  [color=red, key=1, label="System.Globalization.CultureInfo", style=dashed];
n0 -> n90  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
n0 -> n53  [color=red, key=1, label="System.StringComparer", style=dashed];
n0 -> n93  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n0 -> n55  [color=darkseagreen4, key=1, label="CSharpx.Maybe<System.Func<T>>", style=dashed];
n0 -> n97  [color=darkseagreen4, key=1, label="CSharpx.Maybe<System.Func<T>>", style=dashed];
n0 -> n60  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.ErrorType>", style=dashed];
n0 -> n8  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
n0 -> n9  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
n1 -> n2  [key=0, style=solid];
n1 -> n12  [key=2, style=dotted];
n1 -> n22  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n1 -> n7  [color=red, key=1, label=typeInfo, style=dashed];
n1 -> n56  [color=darkseagreen4, key=1, label=typeInfo, style=dashed];
n1 -> n131  [color=darkseagreen4, key=1, label=typeInfo, style=dashed];
n1 -> n57  [color=darkseagreen4, key=1, label=typeInfo, style=dashed];
n1 -> d7  [color=green, key=1, label=typeInfo, style=dashed];
n5 -> n6  [key=0, style=solid];
n5 -> n43  [color=darkseagreen4, key=1, label=makeDefault, style=dashed];
n5 -> n5  [color=darkorchid, key=3, label="Local variable System.Func<T> makeDefault", style=bold];
n33 -> n34  [key=0, style=solid];
n33 -> n35  [key=2, style=dotted];
n33 -> n36  [key=2, style=dotted];
n33 -> n12  [key=2, style=dotted];
n33 -> n37  [key=2, style=dotted];
n33 -> n38  [key=2, style=dotted];
n33 -> n39  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n33 -> n33  [color=darkseagreen4, key=1, label=p, style=dashed];
n7 -> n8  [color=red, key=0, style=solid];
n7 -> n9  [color=red, key=1, label=buildUp, style=dashed];
n7 -> n7  [color=red, key=3, label="Local variable System.Func<CommandLine.ParserResult<T>> buildUp", style=bold];
n48 -> n49  [key=0, style=solid];
n48 -> n63  [key=2, style=dotted];
n48 -> n59  [color=darkseagreen4, key=1, label=tokenizerResult, style=dashed];
n50 -> n51  [color=red, key=0, style=solid];
n50 -> n65  [key=2, style=dotted];
n50 -> n81  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n50 -> n52  [color=red, key=1, label=partitions, style=dashed];
n50 -> n53  [color=red, key=1, label=partitions, style=dashed];
n50 -> d51  [color=green, key=0, style=solid];
n50 -> d53  [color=green, key=1, label=partitions, style=dashed];
n50 -> d52  [color=darkseagreen4, key=1, label=partitions, style=dashed];
n82 -> n83  [key=0, style=solid];
n82 -> n84  [key=2, style=dotted];
n51 -> n52  [color=red, key=0, style=solid];
n51 -> n66  [color=red, key=2, style=dotted];
n51 -> n67  [color=red, key=2, style=dotted];
n51 -> n51  [color=red, key=1, label=pt, style=dashed];
n51 -> n85  [color=red, key=1, label="lambda expression", style=dashed];
n51 -> n54  [color=red, key=1, label=optionSpecPropsResult, style=dashed];
n51 -> n59  [color=red, key=1, label=optionSpecPropsResult, style=dashed];
n86 -> n87  [key=0, style=solid];
n86 -> n88  [key=2, style=dotted];
n52 -> n53  [color=red, key=0, style=solid];
n52 -> n68  [color=red, key=2, style=dotted];
n52 -> n67  [color=red, key=2, style=dotted];
n52 -> n52  [color=red, key=1, label=pt, style=dashed];
n52 -> n89  [color=red, key=1, label="lambda expression", style=dashed];
n52 -> n54  [color=red, key=1, label=valueSpecPropsResult, style=dashed];
n52 -> n59  [color=red, key=1, label=valueSpecPropsResult, style=dashed];
n90 -> n91  [key=0, style=solid];
n90 -> n88  [key=2, style=dotted];
n53 -> n54  [color=red, key=0, style=solid];
n53 -> n69  [color=red, key=2, style=dotted];
n53 -> n70  [color=red, key=2, style=dotted];
n53 -> n71  [color=red, key=2, style=dotted];
n53 -> n53  [color=red, key=1, label=token, style=dashed];
n53 -> n92  [color=red, key=1, label="lambda expression", style=dashed];
n53 -> n93  [color=red, key=1, label=token, style=dashed];
n53 -> n59  [color=red, key=1, label=missingValueErrors, style=dashed];
n93 -> n94  [key=0, style=solid];
n93 -> n95  [key=2, style=dotted];
n55 -> n56  [key=0, style=solid];
n55 -> n57  [color=darkseagreen4, key=1, label=buildMutable, style=dashed];
n97 -> n98  [key=0, style=solid];
n97 -> n36  [key=2, style=dotted];
n97 -> n12  [key=2, style=dotted];
n97 -> n102  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n60 -> n61  [key=0, style=solid];
n60 -> n78  [key=2, style=dotted];
n60 -> n60  [color=darkseagreen4, key=1, label=e, style=dashed];
n8 -> n9  [key=0, style=solid];
n8 -> n16  [key=2, style=dotted];
n8 -> n17  [key=2, style=dotted];
n8 -> n18  [key=2, style=dotted];
n8 -> n19  [key=2, style=dotted];
n9 -> n10  [key=0, style=solid];
n9 -> n16  [key=2, style=dotted];
n9 -> n20  [key=2, style=dotted];
n9 -> n21  [key=2, style=dotted];
n2 -> n3  [key=0, style=solid];
n2 -> n13  [key=2, style=dotted];
n2 -> n26  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n2 -> n5  [color=darkseagreen4, key=1, label=specProps, style=dashed];
n2 -> n33  [color=darkseagreen4, key=1, label=specProps, style=dashed];
n2 -> n7  [color=red, key=1, label=specProps, style=dashed];
n2 -> n51  [color=red, key=1, label=specProps, style=dashed];
n2 -> n52  [color=red, key=1, label=specProps, style=dashed];
n2 -> n56  [color=darkseagreen4, key=1, label=specProps, style=dashed];
n2 -> n131  [color=darkseagreen4, key=1, label=specProps, style=dashed];
n2 -> d7  [color=green, key=1, label=specProps, style=dashed];
n2 -> d51  [color=green, key=1, label=specProps, style=dashed];
n2 -> d52  [color=darkseagreen4, key=1, label=specProps, style=dashed];
n22 -> n23  [key=0, style=solid];
n56 -> n57  [key=0, style=solid];
n131 -> n132  [key=0, style=solid];
n131 -> n37  [key=2, style=dotted];
n131 -> n136  [key=2, style=dotted];
n131 -> n131  [color=darkseagreen4, key=1, label=sp, style=dashed];
n131 -> n133  [color=darkseagreen4, key=1, label=ctor, style=dashed];
n57 -> n58  [key=0, style=solid];
n57 -> n35  [key=2, style=dotted];
n57 -> n21  [key=2, style=dotted];
n57 -> n61  [color=darkseagreen4, key=1, label=instance, style=dashed];
n3 -> n4  [key=0, style=solid];
n3 -> n3  [color=darkseagreen4, key=1, label=pt, style=dashed];
n26 -> n27  [key=0, style=solid];
n4 -> n5  [key=0, style=solid];
n4 -> n14  [key=2, style=dotted];
n4 -> n15  [key=2, style=dotted];
n4 -> n7  [color=red, key=1, label=optionSpecs, style=dashed];
n4 -> n48  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
n4 -> n50  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
n4 -> n82  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
n4 -> n53  [color=red, key=1, label=optionSpecs, style=dashed];
n4 -> d7  [color=green, key=1, label=optionSpecs, style=dashed];
n4 -> d53  [color=green, key=1, label=optionSpecs, style=dashed];
n6 -> n7  [color=red, key=0, style=solid];
n6 -> n43  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Error>", style=dashed];
n6 -> n9  [color=darkseagreen4, key=1, label=notParsed, style=dashed];
n6 -> n6  [color=darkorchid, key=3, label="Local variable System.Func<System.Collections.Generic.IEnumerable<CommandLine.Error>, CommandLine.ParserResult<T>> notParsed", style=bold];
n6 -> d7  [color=green, key=0, style=solid];
n43 -> n44  [key=0, style=solid];
n43 -> n45  [key=2, style=dotted];
n43 -> n21  [key=2, style=dotted];
n43 -> n25  [key=2, style=dotted];
n43 -> n46  [key=2, style=dotted];
n10 -> n11  [key=0, style=solid];
n11 -> n0  [color=blue, key=0, style=bold];
n11 -> d0  [color=blue, key=0, style=bold];
n23 -> n24  [key=0, style=solid];
n23 -> n21  [key=2, style=dotted];
n23 -> n25  [key=2, style=dotted];
n24 -> n22  [color=blue, key=0, style=bold];
n27 -> n28  [key=0, style=solid];
n27 -> n29  [key=2, style=dotted];
n27 -> n30  [key=2, style=dotted];
n27 -> n31  [key=2, style=dotted];
n28 -> n26  [color=blue, key=0, style=bold];
n32 -> n33  [key=0, style=solid];
n34 -> n32  [color=blue, key=0, style=bold];
n39 -> n40  [key=0, style=solid];
n40 -> n41  [key=0, style=solid];
n40 -> n21  [key=2, style=dotted];
n41 -> n39  [color=blue, key=0, style=bold];
n42 -> n43  [key=0, style=solid];
n44 -> n42  [color=blue, key=0, style=bold];
n47 -> n48  [key=0, style=solid];
n49 -> n50  [key=0, style=solid];
n49 -> n64  [key=2, style=dotted];
n49 -> n58  [color=darkseagreen4, key=1, label=tokens, style=dashed];
n59 -> n60  [key=0, style=solid];
n59 -> n75  [key=2, style=dotted];
n59 -> n76  [key=2, style=dotted];
n59 -> n77  [key=2, style=dotted];
n59 -> n61  [color=darkseagreen4, key=1, label=allErrors, style=dashed];
n58 -> n59  [key=0, style=solid];
n58 -> n73  [key=2, style=dotted];
n58 -> n74  [key=2, style=dotted];
n81 -> n82  [key=0, style=solid];
n85 -> n86  [key=0, style=solid];
n54 -> n55  [key=0, style=solid];
n54 -> n64  [key=2, style=dotted];
n54 -> n72  [key=2, style=dotted];
n54 -> n98  [color=darkseagreen4, key=1, label=specPropsWithValue, style=dashed];
n54 -> n56  [color=darkseagreen4, key=1, label=specPropsWithValue, style=dashed];
n54 -> n132  [color=darkseagreen4, key=1, label=specPropsWithValue, style=dashed];
n54 -> n58  [color=darkseagreen4, key=1, label=specPropsWithValue, style=dashed];
n89 -> n90  [key=0, style=solid];
n92 -> n93  [key=0, style=solid];
n92 -> d93  [color=green, key=0, style=solid];
n98 -> n99  [key=0, style=solid];
n98 -> n101  [key=2, style=dotted];
n98 -> n98  [color=darkseagreen4, key=1, label=mutable, style=dashed];
n98 -> n105  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n98 -> n109  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n98 -> n113  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n98 -> n117  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n98 -> n120  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n98 -> n124  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n132 -> n133  [key=0, style=solid];
n132 -> n137  [key=2, style=dotted];
n132 -> n138  [key=2, style=dotted];
n132 -> n139  [key=2, style=dotted];
n132 -> n12  [key=2, style=dotted];
n132 -> n140  [key=2, style=dotted];
n132 -> n132  [color=darkseagreen4, key=1, label=prms, style=dashed];
n132 -> n142  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n132 -> n145  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n61 -> n62  [key=0, style=solid];
n61 -> n79  [key=2, style=dotted];
n61 -> n80  [key=2, style=dotted];
n62 -> n47  [color=blue, key=0, style=bold];
n83 -> n81  [color=blue, key=0, style=bold];
n87 -> n85  [color=blue, key=0, style=bold];
n91 -> n89  [color=blue, key=0, style=bold];
n94 -> n92  [color=blue, key=0, style=bold];
n96 -> n97  [key=0, style=solid];
n102 -> n103  [key=0, style=solid];
n99 -> n100  [key=0, style=solid];
n105 -> n106  [key=0, style=solid];
n109 -> n110  [key=0, style=solid];
n113 -> n114  [key=0, style=solid];
n117 -> n118  [key=0, style=solid];
n120 -> n121  [key=0, style=solid];
n124 -> n125  [key=0, style=solid];
n100 -> n96  [color=blue, key=0, style=bold];
n103 -> n104  [key=0, style=solid];
n103 -> n21  [key=2, style=dotted];
n104 -> n102  [color=blue, key=0, style=bold];
n106 -> n107  [key=0, style=solid];
n106 -> n108  [key=2, style=dotted];
n107 -> n105  [color=blue, key=0, style=bold];
n110 -> n111  [key=0, style=solid];
n110 -> n112  [key=2, style=dotted];
n111 -> n109  [color=blue, key=0, style=bold];
n114 -> n115  [key=0, style=solid];
n114 -> n116  [key=2, style=dotted];
n114 -> n108  [key=2, style=dotted];
n115 -> n113  [color=blue, key=0, style=bold];
n118 -> n119  [key=0, style=solid];
n118 -> n112  [key=2, style=dotted];
n119 -> n117  [color=blue, key=0, style=bold];
n121 -> n122  [key=0, style=solid];
n121 -> n116  [key=2, style=dotted];
n121 -> n123  [key=2, style=dotted];
n122 -> n120  [color=blue, key=0, style=bold];
n125 -> n126  [key=0, style=solid];
n125 -> n127  [key=2, style=dotted];
n125 -> n128  [key=2, style=dotted];
n125 -> n129  [key=2, style=dotted];
n126 -> n124  [color=blue, key=0, style=bold];
n130 -> n131  [key=0, style=solid];
n133 -> n134  [key=0, style=solid];
n133 -> n141  [key=2, style=dotted];
n142 -> n143  [key=0, style=solid];
n145 -> n146  [key=0, style=solid];
n134 -> n135  [key=0, style=solid];
n135 -> n130  [color=blue, key=0, style=bold];
n143 -> n144  [key=0, style=solid];
n144 -> n142  [color=blue, key=0, style=bold];
n146 -> n147  [key=0, style=solid];
n147 -> n145  [color=blue, key=0, style=bold];
d7 -> d7  [color=green, key=3, label="Local variable System.Func<CommandLine.ParserResult<T>> buildUp", style=bold];
d7 -> n8  [color=green, key=0, style=solid];
d7 -> n9  [color=green, key=1, label=buildUp, style=dashed];
d0 -> d7  [color=green, key=1, label="CSharpx.Maybe<System.Func<T>>", style=dashed];
d0 -> d51  [color=green, key=1, label="System.StringComparer", style=dashed];
d0 -> d53  [color=green, key=1, label="System.StringComparer", style=dashed];
d0 -> d93  [color=green, key=1, label="System.StringComparer", style=dashed];
d0 -> n1  [key=0, style=solid];
d0 -> n5  [color=darkseagreen4, key=1, label="CSharpx.Maybe<System.Func<T>>", style=dashed];
d0 -> n33  [color=darkseagreen4, key=1, label="CSharpx.Maybe<System.Func<T>>", style=dashed];
d0 -> n48  [color=darkseagreen4, key=1, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>", style=dashed];
d0 -> n50  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d0 -> n82  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d0 -> n86  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
d0 -> d52  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
d0 -> n90  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
d0 -> n55  [color=darkseagreen4, key=1, label="CSharpx.Maybe<System.Func<T>>", style=dashed];
d0 -> n97  [color=darkseagreen4, key=1, label="CSharpx.Maybe<System.Func<T>>", style=dashed];
d0 -> n60  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.ErrorType>", style=dashed];
d0 -> n8  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
d0 -> n9  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
d51 -> d51  [color=green, key=1, label=pt, style=dashed];
d51 -> d52  [color=green, key=0, style=solid];
d51 -> n66  [color=green, key=2, style=dotted];
d51 -> n67  [color=green, key=2, style=dotted];
d51 -> n85  [color=green, key=1, label="lambda expression", style=dashed];
d51 -> n54  [color=green, key=1, label=optionSpecPropsResult, style=dashed];
d51 -> n59  [color=green, key=1, label=optionSpecPropsResult, style=dashed];
d52 -> d53  [color=green, key=0, style=solid];
d52 -> d52  [color=darkseagreen4, key=1, label=pt, style=dashed];
d52 -> n68  [key=2, style=dotted];
d52 -> n67  [key=2, style=dotted];
d52 -> n89  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d52 -> n54  [color=darkseagreen4, key=1, label=valueSpecPropsResult, style=dashed];
d52 -> n59  [color=darkseagreen4, key=1, label=valueSpecPropsResult, style=dashed];
d53 -> d53  [color=green, key=1, label=token, style=dashed];
d53 -> n54  [color=green, key=0, style=solid];
d53 -> n69  [color=green, key=2, style=dotted];
d53 -> n70  [color=green, key=2, style=dotted];
d53 -> n71  [color=green, key=2, style=dotted];
d53 -> n92  [color=green, key=1, label="lambda expression", style=dashed];
d53 -> d93  [color=green, key=1, label=token, style=dashed];
d53 -> n59  [color=green, key=1, label=missingValueErrors, style=dashed];
d93 -> n94  [color=green, key=0, style=solid];
d93 -> n95  [color=green, key=2, style=dotted];
m0_1 -> m0_2  [color=green, key=0, style=solid];
m0_1 -> m0_10  [key=2, style=dotted];
m0_1 -> m0_3  [color=darkseagreen4, key=1, label=tokenList, style=dashed];
m0_1 -> m0_4  [color=darkseagreen4, key=1, label=tokenList, style=dashed];
m0_1 -> m0_5  [color=darkseagreen4, key=1, label=tokenList, style=dashed];
m0_1 -> m0_8  [color=green, key=2, style=dotted];
m0_2 -> m0_3  [key=0, style=solid];
m0_2 -> m0_11  [key=2, style=dotted];
m0_2 -> m0_10  [key=2, style=dotted];
m0_2 -> m0_5  [color=darkseagreen4, key=1, label=switches, style=dashed];
m0_2 -> m0_24  [color=darkseagreen4, key=1, label=switches, style=dashed];
m0_2 -> m0_8  [color=darkseagreen4, key=1, label=switches, style=dashed];
m0_2 -> m0_7  [color=green, key=0, style=solid];
m0_2 -> m0_9  [color=green, key=2, style=dotted];
m0_3 -> m0_4  [key=0, style=solid];
m0_3 -> m0_12  [key=2, style=dotted];
m0_3 -> m0_10  [key=2, style=dotted];
m0_3 -> m0_5  [color=darkseagreen4, key=1, label=scalars, style=dashed];
m0_3 -> m0_28  [color=darkseagreen4, key=1, label=scalars, style=dashed];
m0_3 -> m0_8  [color=darkseagreen4, key=1, label=scalars, style=dashed];
m0_4 -> m0_5  [key=0, style=solid];
m0_4 -> m0_13  [key=2, style=dotted];
m0_4 -> m0_10  [key=2, style=dotted];
m0_4 -> m0_32  [color=darkseagreen4, key=1, label=sequences, style=dashed];
m0_4 -> m0_8  [color=darkseagreen4, key=1, label=sequences, style=dashed];
m0_4 -> m0_7  [key=0, style=solid];
m0_4 -> m0_9  [key=2, style=dotted];
m0_5 -> m0_6  [key=0, style=solid];
m0_5 -> m0_14  [key=2, style=dotted];
m0_5 -> m0_15  [key=2, style=dotted];
m0_5 -> m0_23  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_5 -> m0_27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_5 -> m0_31  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_5 -> m0_7  [color=darkseagreen4, key=1, label=nonOptions, style=dashed];
m0_8 -> m0_9  [key=0, style=solid];
m0_8 -> m0_17  [key=2, style=dotted];
m0_8 -> m0_18  [key=2, style=dotted];
m0_8 -> m0_19  [key=2, style=dotted];
m0_8 -> m0_20  [key=2, style=dotted];
m0_8 -> m0_21  [key=2, style=dotted];
m0_8 -> m0_22  [key=2, style=dotted];
m0_8 -> m0_38  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_6 -> m0_7  [key=0, style=solid];
m0_6 -> m0_14  [key=2, style=dotted];
m0_6 -> m0_15  [key=2, style=dotted];
m0_6 -> m0_34  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_6 -> m0_8  [color=darkseagreen4, key=1, label=values, style=dashed];
m0_7 -> m0_8  [key=0, style=solid];
m0_7 -> m0_16  [key=2, style=dotted];
m0_7 -> m0_10  [key=2, style=dotted];
m0_7 -> m0_0  [color=blue, key=0, style=bold];
m0_9 -> n65  [color=blue, key=0, style=bold];
m0_12 -> m0_13  [key=0, style=solid];
m0_12 -> m0_14  [key=0, style=solid];
m0_18 -> m0_19  [key=0, style=solid];
m0_0 -> m0_1  [color=green, key=0, style=solid];
m0_0 -> m0_3  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Error>", style=dashed];
m0_0 -> m0_5  [color=darkseagreen4, key=1, label=T, style=dashed];
m0_0 -> m0_6  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Error>", style=dashed];
m0_14 -> m0_15  [key=0, style=solid];
m0_14 -> m0_17  [key=2, style=dotted];
m0_22 -> m0_24  [key=0, style=solid];
m0_22 -> m0_23  [key=0, style=solid];
m0_34 -> m0_35  [key=0, style=solid];
m0_35 -> m0_0  [key=2, style=dotted];
m0_35 -> m0_36  [key=0, style=solid];
m0_35 -> m0_37  [key=2, style=dotted];
m0_36 -> m0_34  [color=blue, key=0, style=bold];
m0_30 -> m0_32  [key=0, style=solid];
m0_30 -> m0_31  [key=0, style=solid];
m0_16 -> m0_24  [color=darkseagreen4, key=1, label="CommandLine.Core.StatePair<T>", style=dashed];
m0_16 -> m0_22  [key=0, style=solid];
m0_38 -> m0_39  [key=0, style=solid];
m0_38 -> m0_5  [color=darkseagreen4, key=1, label="CommandLine.Core.StatePair<T>", style=dashed];
m0_38 -> m0_6  [color=darkseagreen4, key=1, label="CommandLine.Core.StatePair<T>", style=dashed];
m0_38 -> m0_13  [color=darkseagreen4, key=1, label="CommandLine.Core.StatePair<T>", style=dashed];
m0_38 -> m0_14  [color=darkseagreen4, key=1, label="CommandLine.Core.StatePair<T>", style=dashed];
m0_38 -> m0_19  [color=darkseagreen4, key=1, label="CommandLine.Core.StatePair<T>", style=dashed];
m0_38 -> m0_24  [color=darkseagreen4, key=1, label="CommandLine.Core.StatePair<T>", style=dashed];
m0_24 -> m0_25  [key=0, style=solid];
m0_24 -> m0_26  [key=2, style=dotted];
m0_24 -> m0_17  [key=2, style=dotted];
m0_28 -> m0_29  [key=0, style=solid];
m0_28 -> m0_30  [key=2, style=dotted];
m0_28 -> m0_8  [key=2, style=dotted];
m0_32 -> m0_33  [key=0, style=solid];
m0_32 -> m0_30  [key=2, style=dotted];
m0_32 -> m0_0  [key=2, style=dotted];
m0_23 -> m0_24  [key=0, style=solid];
m0_23 -> m0_25  [key=0, style=solid];
m0_27 -> m0_28  [key=0, style=solid];
m0_27 -> m0_32  [color=darkseagreen4, key=1, label=T, style=dashed];
m0_27 -> m0_30  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Error>", style=dashed];
m0_31 -> m0_32  [key=0, style=solid];
m0_31 -> m0_9  [key=2, style=dotted];
m0_31 -> m0_33  [key=0, style=solid];
m0_25 -> m0_23  [color=blue, key=0, style=bold];
m0_25 -> m0_16  [color=blue, key=0, style=bold];
m0_29 -> m0_27  [color=blue, key=0, style=bold];
m0_29 -> m0_9  [key=2, style=dotted];
m0_29 -> m0_33  [key=0, style=solid];
m0_33 -> m0_31  [color=blue, key=0, style=bold];
m0_33 -> m0_27  [color=blue, key=0, style=bold];
m0_39 -> m0_40  [key=0, style=solid];
m0_40 -> m0_38  [color=blue, key=0, style=bold];
m0_13 -> m0_15  [key=0, style=solid];
m0_13 -> m0_16  [key=2, style=dotted];
m0_15 -> m0_10  [color=blue, key=0, style=bold];
m0_10 -> m0_14  [color=darkseagreen4, key=1, label=object, style=dashed];
m0_10 -> m0_11  [key=0, style=solid];
m0_11 -> m0_13  [color=darkseagreen4, key=1, label=other, style=dashed];
m0_11 -> m0_12  [key=0, style=solid];
m0_20 -> m0_18  [color=blue, key=0, style=bold];
m0_19 -> m0_20  [key=0, style=solid];
m0_19 -> m0_21  [key=2, style=dotted];
m0_41 -> m0_24  [color=darkseagreen4, key=1, label=switches, style=dashed];
m0_42 -> m0_28  [color=darkseagreen4, key=1, label=scalars, style=dashed];
m0_43 -> m0_32  [color=darkseagreen4, key=1, label=sequences, style=dashed];
m2_8 -> m2_9  [color=red, key=0, style=solid];
m2_8 -> m2_11  [color=red, key=1, label="System.Type", style=dashed];
m2_9 -> m2_10  [color=red, key=0, style=solid];
m2_9 -> m2_11  [color=red, key=0, style=solid];
m2_11 -> m2_12  [color=red, key=0, style=solid];
m2_11 -> m2_14  [color=red, key=2, style=dotted];
m2_10 -> m2_12  [color=red, key=0, style=solid];
m2_10 -> m2_13  [color=red, key=2, style=dotted];
m2_12 -> m2_8  [color=blue, key=0, style=bold];
m2_29 -> m2_30  [key=0, style=solid];
m2_29 -> m2_31  [color=darkseagreen4, key=1, label="System.Reflection.PropertyInfo", style=dashed];
m2_29 -> m2_40  [color=darkseagreen4, key=1, label=T, style=dashed];
m2_30 -> m2_31  [key=0, style=solid];
m2_30 -> m2_45  [color=darkseagreen4, key=1, label="System.Exception", style=dashed];
m2_30 -> m2_33  [color=darkseagreen4, key=1, label=fail, style=dashed];
m2_30 -> m2_35  [color=darkseagreen4, key=1, label=fail, style=dashed];
m2_30 -> m2_37  [color=darkseagreen4, key=1, label=fail, style=dashed];
m2_30 -> m2_39  [color=darkseagreen4, key=1, label=fail, style=dashed];
m2_31 -> m2_32  [key=0, style=solid];
m2_31 -> m2_34  [key=0, style=solid];
m2_31 -> m2_36  [key=0, style=solid];
m2_31 -> m2_38  [key=0, style=solid];
m2_31 -> m2_40  [key=0, style=solid];
m2_31 -> m2_42  [key=2, style=dotted];
m2_40 -> m2_41  [key=0, style=solid];
m2_33 -> m2_40  [key=0, style=solid];
m2_33 -> m2_43  [key=2, style=dotted];
m2_35 -> m2_40  [key=0, style=solid];
m2_35 -> m2_43  [key=2, style=dotted];
m2_37 -> m2_40  [key=0, style=solid];
m2_37 -> m2_43  [key=2, style=dotted];
m2_39 -> m2_40  [key=0, style=solid];
m2_39 -> m2_43  [key=2, style=dotted];
m2_32 -> m2_33  [key=0, style=solid];
m2_34 -> m2_35  [key=0, style=solid];
m2_36 -> m2_37  [key=0, style=solid];
m2_38 -> m2_39  [key=0, style=solid];
m2_41 -> m2_29  [color=blue, key=0, style=bold];
m2_44 -> m2_45  [key=0, style=solid];
m2_26 -> m2_27  [key=0, style=solid];
m2_26 -> m2_7  [key=2, style=dotted];
m2_26 -> m2_28  [key=2, style=dotted];
m2_25 -> m2_26  [key=0, style=solid];
m2_27 -> m2_25  [color=blue, key=0, style=bold];
m2_45 -> m2_46  [key=0, style=solid];
m2_45 -> m2_47  [key=2, style=dotted];
m2_46 -> m2_44  [color=blue, key=0, style=bold];
m2_0 -> m2_1  [color=red, key=0, style=solid];
m2_1 -> m2_2  [color=red, key=0, style=solid];
m2_1 -> m2_3  [color=red, key=2, style=dotted];
m2_1 -> m2_4  [color=red, key=2, style=dotted];
m2_1 -> n38  [color=red, key=2, style=dotted];
m2_1 -> m2_6  [color=red, key=2, style=dotted];
m2_1 -> m2_7  [color=red, key=2, style=dotted];
m2_1 -> m2_1  [color=red, key=1, label=pi, style=dashed];
m2_2 -> m2_0  [color=blue, key=0, style=bold];
m2_48 -> m2_49  [key=0, style=solid];
m2_48 -> m2_51  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m2_49 -> m2_50  [key=0, style=solid];
m2_49 -> m2_51  [key=0, style=solid];
m2_51 -> m2_52  [key=0, style=solid];
m2_51 -> m2_53  [key=2, style=dotted];
m2_50 -> m2_52  [key=0, style=solid];
m2_50 -> m2_13  [key=2, style=dotted];
m2_52 -> m2_48  [color=blue, key=0, style=bold];
m2_20 -> m2_21  [key=0, style=solid];
m2_20 -> m2_26  [color=darkseagreen4, key=1, label="System.Func<CommandLine.Core.SpecificationProperty, object>", style=dashed];
m2_21 -> m2_22  [key=0, style=solid];
m2_21 -> m2_23  [key=2, style=dotted];
m2_21 -> m2_24  [key=2, style=dotted];
m2_21 -> m2_25  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_22 -> m2_20  [color=blue, key=0, style=bold];
m2_15 -> m2_16  [color=red, key=0, style=solid];
m2_15 -> m2_18  [color=red, key=1, label="System.Type", style=dashed];
m2_16 -> m2_17  [color=red, key=0, style=solid];
m2_16 -> m2_18  [color=red, key=0, style=solid];
m2_18 -> m2_19  [color=red, key=0, style=solid];
m2_18 -> m2_14  [color=red, key=2, style=dotted];
m2_17 -> m2_19  [color=red, key=0, style=solid];
m2_17 -> m2_13  [color=red, key=2, style=dotted];
m2_19 -> m2_15  [color=blue, key=0, style=bold];
m2_54 -> m2_26  [color=darkseagreen4, key=1, label="System.Func<CommandLine.Core.SpecificationProperty, object>", style=dashed];
}
