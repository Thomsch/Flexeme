digraph  {
m0_12 [label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63", cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="OptionMapper.cs"];
m0_6 [label="Entry Unk.Create", span="", cluster="Unk.Create", file="OptionMapper.cs"];
m0_30 [label="Entry CommandLine.Core.SpecificationProperty.WithValue(CommandLine.Infrastructure.Maybe<object>)", span="18-18", cluster="CommandLine.Core.SpecificationProperty.WithValue(CommandLine.Infrastructure.Maybe<object>)", file="OptionMapper.cs"];
m0_25 [label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68", cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="OptionMapper.cs"];
m0_4 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="OptionMapper.cs"];
m0_0 [label="Entry CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>, System.StringComparer)", span="13-13", cluster="CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>, System.StringComparer)", file="OptionMapper.cs"];
m0_1 [label="var sequencesAndErrors = propertyTuples\r\n                .Select(pt =>\r\n                    options.FirstOrDefault(\r\n                            s =>\r\n                            s.Key.MatchName(((OptionSpecification)pt.Specification).ShortName, ((OptionSpecification)pt.Specification).LongName, comparer))\r\n                               .ToMaybe()\r\n                               .Return(sequence =>\r\n                                    converter(sequence.Value, pt.Property.PropertyType, pt.Specification.TargetType != TargetType.Sequence)\r\n                                    .Return(converted =>\r\n                                            Tuple.Create(\r\n                                                pt.WithValue(Maybe.Just(converted)),\r\n                                                Maybe.Nothing<Error>()),\r\n                                            Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                                                pt,\r\n                                                Maybe.Just<Error>(new BadFormatConversionError(NameExtensions.FromOptionSpecification((OptionSpecification)pt.Specification))))),\r\n                                Tuple.Create(pt, Maybe.Nothing<Error>()))\r\n                )", span="19-35", cluster="CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>, System.StringComparer)", color=green, community=0, file="OptionMapper.cs"];
m0_2 [label="return StatePair.Create(\r\n                sequencesAndErrors.Select(se => se.Item1),\r\n                sequencesAndErrors.Select(se => se.Item2).OfType<Just<Error>>().Select(se => se.Value));", span="36-38", cluster="CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>, System.StringComparer)", file="OptionMapper.cs"];
m0_3 [label="Exit CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>, System.StringComparer)", span="13-13", cluster="CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>, System.StringComparer)", file="OptionMapper.cs"];
m0_18 [label="Entry string.MatchName(string, string, System.StringComparer)", span="8-8", cluster="string.MatchName(string, string, System.StringComparer)", file="OptionMapper.cs"];
m0_23 [label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="313-313", cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="OptionMapper.cs"];
m0_11 [label="Entry Unk.ToMaybe", span="", cluster="Unk.ToMaybe", file="OptionMapper.cs"];
m0_10 [label="Entry Unk.FirstOrDefault", span="", cluster="Unk.FirstOrDefault", file="OptionMapper.cs"];
m0_13 [label="Entry System.Tuple.Create<T1, T2>(T1, T2)", span="0-0", cluster="System.Tuple.Create<T1, T2>(T1, T2)", file="OptionMapper.cs"];
m0_37 [label="Entry lambda expression", span="38-38", cluster="lambda expression", file="OptionMapper.cs"];
m0_7 [label="Entry lambda expression", span="20-34", cluster="lambda expression", file="OptionMapper.cs"];
m0_8 [label="options.FirstOrDefault(\r\n                            s =>\r\n                            s.Key.MatchName(((OptionSpecification)pt.Specification).ShortName, ((OptionSpecification)pt.Specification).LongName, comparer))\r\n                               .ToMaybe()\r\n                               .Return(sequence =>\r\n                                    converter(sequence.Value, pt.Property.PropertyType, pt.Specification.TargetType != TargetType.Sequence)\r\n                                    .Return(converted =>\r\n                                            Tuple.Create(\r\n                                                pt.WithValue(Maybe.Just(converted)),\r\n                                                Maybe.Nothing<Error>()),\r\n                                            Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                                                pt,\r\n                                                Maybe.Just<Error>(new BadFormatConversionError(NameExtensions.FromOptionSpecification((OptionSpecification)pt.Specification))))),\r\n                                Tuple.Create(pt, Maybe.Nothing<Error>()))", span="21-34", cluster="lambda expression", color=green, community=0, file="OptionMapper.cs"];
m0_9 [label="Exit lambda expression", span="20-34", cluster="lambda expression", file="OptionMapper.cs"];
m0_15 [label="Entry lambda expression", span="22-23", cluster="lambda expression", file="OptionMapper.cs"];
m0_19 [label="Entry lambda expression", span="25-33", cluster="lambda expression", file="OptionMapper.cs"];
m0_20 [label="converter(sequence.Value, pt.Property.PropertyType, pt.Specification.TargetType != TargetType.Sequence)\r\n                                    .Return(converted =>\r\n                                            Tuple.Create(\r\n                                                pt.WithValue(Maybe.Just(converted)),\r\n                                                Maybe.Nothing<Error>()),\r\n                                            Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                                                pt,\r\n                                                Maybe.Just<Error>(new BadFormatConversionError(NameExtensions.FromOptionSpecification((OptionSpecification)pt.Specification)))))", span="26-33", cluster="lambda expression", color=green, community=0, file="OptionMapper.cs"];
m0_21 [label="Exit lambda expression", span="25-33", cluster="lambda expression", file="OptionMapper.cs"];
m0_27 [label="Entry lambda expression", span="27-30", cluster="lambda expression", file="OptionMapper.cs"];
m0_16 [label="s.Key.MatchName(((OptionSpecification)pt.Specification).ShortName, ((OptionSpecification)pt.Specification).LongName, comparer)", span="23-23", cluster="lambda expression", file="OptionMapper.cs"];
m0_31 [label="Entry lambda expression", span="37-37", cluster="lambda expression", file="OptionMapper.cs"];
m0_34 [label="Entry lambda expression", span="38-38", cluster="lambda expression", file="OptionMapper.cs"];
m0_28 [label="Tuple.Create(\r\n                                                pt.WithValue(Maybe.Just(converted)),\r\n                                                Maybe.Nothing<Error>())", span="28-30", cluster="lambda expression", file="OptionMapper.cs"];
m0_17 [label="Exit lambda expression", span="22-23", cluster="lambda expression", file="OptionMapper.cs"];
m0_29 [label="Exit lambda expression", span="27-30", cluster="lambda expression", file="OptionMapper.cs"];
m0_33 [label="Exit lambda expression", span="37-37", cluster="lambda expression", file="OptionMapper.cs"];
m0_32 [label="se.Item1", span="37-37", cluster="lambda expression", file="OptionMapper.cs"];
m0_36 [label="Exit lambda expression", span="38-38", cluster="lambda expression", file="OptionMapper.cs"];
m0_35 [label="se.Item2", span="38-38", cluster="lambda expression", file="OptionMapper.cs"];
m0_38 [label="se.Value", span="38-38", cluster="lambda expression", file="OptionMapper.cs"];
m0_39 [label="Exit lambda expression", span="38-38", cluster="lambda expression", file="OptionMapper.cs"];
m0_14 [label="Entry Unk.Return", span="", cluster="Unk.Return", file="OptionMapper.cs"];
m0_22 [label="Entry Unk.converter", span="", cluster="Unk.converter", file="OptionMapper.cs"];
m0_5 [label="Entry Unk.>", span="", cluster="Unk.>", file="OptionMapper.cs"];
m0_26 [label="Entry CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", span="100-100", cluster="CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", file="OptionMapper.cs"];
m0_24 [label="Entry CommandLine.Core.NameExtensions.FromOptionSpecification(CommandLine.Core.OptionSpecification)", span="15-15", cluster="CommandLine.Core.NameExtensions.FromOptionSpecification(CommandLine.Core.OptionSpecification)", file="OptionMapper.cs"];
m0_40 [label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>", span="", file="OptionMapper.cs"];
m0_41 [label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>", span="", file="OptionMapper.cs"];
m0_42 [label="System.StringComparer", span="", file="OptionMapper.cs"];
m0_43 [label="CommandLine.Core.SpecificationProperty", span="", file="OptionMapper.cs"];
m0_0 -> m0_1  [key=0, style=solid, color=green];
m0_0 -> m0_8  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>"];
m0_0 -> m0_20  [key=1, style=dashed, color=green, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>"];
m0_0 -> m0_16  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_1 -> m0_2  [key=0, style=solid, color=green];
m0_1 -> m0_4  [key=2, style=dotted, color=green];
m0_1 -> m0_7  [key=1, style=dashed, color=green, label="lambda expression"];
m0_2 -> m0_3  [key=0, style=solid];
m0_2 -> m0_4  [key=2, style=dotted];
m0_2 -> m0_5  [key=2, style=dotted];
m0_2 -> m0_6  [key=2, style=dotted];
m0_2 -> m0_31  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_2 -> m0_34  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_2 -> m0_37  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_3 -> m0_0  [key=0, style=bold, color=blue];
m0_37 -> m0_38  [key=0, style=solid];
m0_7 -> m0_8  [key=0, style=solid, color=green];
m0_7 -> m0_20  [key=1, style=dashed, color=green, label="CommandLine.Core.SpecificationProperty"];
m0_7 -> m0_16  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.SpecificationProperty"];
m0_7 -> m0_28  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.SpecificationProperty"];
m0_8 -> m0_9  [key=0, style=solid, color=green];
m0_8 -> m0_10  [key=2, style=dotted, color=green];
m0_8 -> m0_11  [key=2, style=dotted, color=green];
m0_8 -> m0_12  [key=2, style=dotted, color=green];
m0_8 -> m0_13  [key=2, style=dotted, color=green];
m0_8 -> m0_14  [key=2, style=dotted, color=green];
m0_8 -> m0_15  [key=1, style=dashed, color=green, label="lambda expression"];
m0_8 -> m0_19  [key=1, style=dashed, color=green, label="lambda expression"];
m0_9 -> m0_7  [key=0, style=bold, color=blue];
m0_15 -> m0_16  [key=0, style=solid];
m0_19 -> m0_20  [key=0, style=solid, color=green];
m0_20 -> m0_21  [key=0, style=solid, color=green];
m0_20 -> m0_22  [key=2, style=dotted, color=green];
m0_20 -> m0_23  [key=2, style=dotted, color=green];
m0_20 -> m0_24  [key=2, style=dotted, color=green];
m0_20 -> m0_25  [key=2, style=dotted, color=green];
m0_20 -> m0_13  [key=2, style=dotted, color=green];
m0_20 -> m0_26  [key=2, style=dotted, color=green];
m0_20 -> m0_27  [key=1, style=dashed, color=green, label="lambda expression"];
m0_21 -> m0_19  [key=0, style=bold, color=blue];
m0_27 -> m0_28  [key=0, style=solid];
m0_16 -> m0_16  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>"];
m0_16 -> m0_17  [key=0, style=solid];
m0_16 -> m0_18  [key=2, style=dotted];
m0_31 -> m0_32  [key=0, style=solid];
m0_34 -> m0_35  [key=0, style=solid];
m0_28 -> m0_12  [key=2, style=dotted];
m0_28 -> m0_13  [key=2, style=dotted];
m0_28 -> m0_25  [key=2, style=dotted];
m0_28 -> m0_29  [key=0, style=solid];
m0_28 -> m0_30  [key=2, style=dotted];
m0_17 -> m0_15  [key=0, style=bold, color=blue];
m0_29 -> m0_27  [key=0, style=bold, color=blue];
m0_33 -> m0_31  [key=0, style=bold, color=blue];
m0_32 -> m0_33  [key=0, style=solid];
m0_36 -> m0_34  [key=0, style=bold, color=blue];
m0_35 -> m0_36  [key=0, style=solid];
m0_38 -> m0_39  [key=0, style=solid];
m0_39 -> m0_37  [key=0, style=bold, color=blue];
m0_40 -> m0_8  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>"];
m0_41 -> m0_8  [key=1, style=dashed, color=green, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>"];
m0_41 -> m0_20  [key=1, style=dashed, color=green, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>"];
m0_42 -> m0_8  [key=1, style=dashed, color=green, label="System.StringComparer"];
m0_42 -> m0_16  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_43 -> m0_20  [key=1, style=dashed, color=green, label="CommandLine.Core.SpecificationProperty"];
m0_43 -> m0_16  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.SpecificationProperty"];
m0_43 -> m0_28  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.SpecificationProperty"];
}
