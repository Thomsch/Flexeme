digraph  {
m1_45 [cluster="CSharpx.MaybeExtensions.Do<T>(CSharpx.Maybe<T>, System.Action<T>)", file="LongOptionParser.cs", label="maybe.MatchJust(out value)", span="137-137"];
m1_48 [cluster="CommandLine.Parsing.ArgumentParser.IsInputValue(string)", file="LongOptionParser.cs", label="Entry CommandLine.Parsing.ArgumentParser.IsInputValue(string)", span="84-84"];
m1_12 [cluster="CommandLine.Parsing.LongOptionParser.Parse(CommandLine.Parsing.IArgumentEnumerator, CommandLine.Parsing.OptionMap, object)", file="LongOptionParser.cs", label="parts.Length == 1 && (argumentEnumerator.IsLast || !ArgumentParser.IsInputValue(argumentEnumerator.Next))", span="51-51"];
m1_13 [cluster="CommandLine.Parsing.LongOptionParser.Parse(CommandLine.Parsing.IArgumentEnumerator, CommandLine.Parsing.OptionMap, object)", file="LongOptionParser.cs", label="return PresentParserState.Failure;", span="53-53"];
m1_14 [cluster="CommandLine.Parsing.LongOptionParser.Parse(CommandLine.Parsing.IArgumentEnumerator, CommandLine.Parsing.OptionMap, object)", file="LongOptionParser.cs", label="parts.Length == 2", span="56-56"];
m1_52 [cluster="CSharpx.Maybe<T1>.Map<T1, T2>(System.Func<T1, T2>)", file="LongOptionParser.cs", label="Entry CSharpx.Maybe<T1>.Map<T1, T2>(System.Func<T1, T2>)", span="118-118"];
m1_34 [cluster="CommandLine.Parsing.LongOptionParser.Parse(CommandLine.Parsing.IArgumentEnumerator, CommandLine.Parsing.OptionMap, object)", file="LongOptionParser.cs", label="valueSetting = option.SetValue(items, options)", span="99-99"];
m1_70 [cluster="System.ArgumentException.ArgumentException(string)", file="LongOptionParser.cs", label="Entry System.ArgumentException.ArgumentException(string)", span="0-0"];
m1_56 [cluster="CommandLine.Parsing.ArgumentParser.BooleanToParserState(bool, bool)", file="LongOptionParser.cs", label="Entry CommandLine.Parsing.ArgumentParser.BooleanToParserState(bool, bool)", span="140-140"];
m1_3 [cluster="CSharpx.Maybe<T>.MatchNothing()", file="LongOptionParser.cs", label="Entry CSharpx.Maybe<T>.MatchNothing()", span="29-29"];
m1_6 [cluster="CSharpx.Maybe<T>.MatchJust(out T)", color=green, community=0, file="LongOptionParser.cs", label="Entry CSharpx.Maybe<T>.MatchJust(out T)", prediction=0, span="34-34"];
m1_5 [cluster="CSharpx.Maybe<T>.MatchNothing()", file="LongOptionParser.cs", label="Exit CSharpx.Maybe<T>.MatchNothing()", span="29-29"];
m1_7 [cluster="CSharpx.Maybe<T>.MatchJust(out T)", file="LongOptionParser.cs", label="value = Tag == MaybeType.Just\r\n                ? ((Just<T>)this).Value\r\n                : default(T)", span="36-38"];
m1_11 [cluster="CSharpx.Nothing<T>.Nothing()", color=green, community=0, file="LongOptionParser.cs", label="Exit CSharpx.Nothing<T>.Nothing()", prediction=1, span="48-48"];
m1_10 [cluster="CSharpx.Nothing<T>.Nothing()", file="LongOptionParser.cs", label="Entry CSharpx.Nothing<T>.Nothing()", span="48-48"];
m1_38 [cluster="CSharpx.MaybeExtensions.Map<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>)", file="LongOptionParser.cs", label="Exit CSharpx.MaybeExtensions.Map<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>)", span="118-118"];
m1_4 [cluster="CSharpx.Maybe<T>.MatchNothing()", file="LongOptionParser.cs", label="return Tag == MaybeType.Nothing;", span="31-31"];
m1_9 [cluster="CSharpx.Maybe<T>.MatchJust(out T)", file="LongOptionParser.cs", label="Exit CSharpx.Maybe<T>.MatchJust(out T)", span="34-34"];
m1_15 [cluster="CSharpx.Maybe.Nothing<T>()", file="LongOptionParser.cs", label="Entry CSharpx.Maybe.Nothing<T>()", span="75-75"];
m1_16 [cluster="CSharpx.Maybe.Nothing<T>()", file="LongOptionParser.cs", label="return new Nothing<T>();", span="77-77"];
m1_18 [cluster="CSharpx.Maybe.Just<T>(T)", file="LongOptionParser.cs", label="Entry CSharpx.Maybe.Just<T>(T)", span="80-80"];
m1_20 [cluster="CSharpx.Maybe.Just<T>(T)", file="LongOptionParser.cs", label="Exit CSharpx.Maybe.Just<T>(T)", span="80-80"];
m1_23 [cluster="CSharpx.Maybe.OfEither<T1, T2>(CSharpx.Either<T1, T2>)", file="LongOptionParser.cs", label="return new Just<T1>(((Either1Of2<T1, T2>)either).Value);", span="93-93"];
m1_25 [cluster="CSharpx.Maybe.OfEither<T1, T2>(CSharpx.Either<T1, T2>)", file="LongOptionParser.cs", label="Exit CSharpx.Maybe.OfEither<T1, T2>(CSharpx.Either<T1, T2>)", span="89-89"];
m1_27 [cluster="CSharpx.MaybeExtensions.ToMaybe<T>(T)", file="LongOptionParser.cs", label="return Equals(value, default(T)) ? Maybe.Nothing<T>() : Maybe.Just(value);", span="107-107"];
m1_28 [cluster="CSharpx.MaybeExtensions.ToMaybe<T>(T)", file="LongOptionParser.cs", label="Exit CSharpx.MaybeExtensions.ToMaybe<T>(T)", span="105-105"];
m1_30 [cluster="CSharpx.MaybeExtensions.Bind<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, CSharpx.Maybe<T2>>)", file="LongOptionParser.cs", label="Entry CSharpx.MaybeExtensions.Bind<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, CSharpx.Maybe<T2>>)", span="110-110"];
m1_32 [cluster="CSharpx.MaybeExtensions.Bind<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, CSharpx.Maybe<T2>>)", file="LongOptionParser.cs", label="return maybe.MatchJust(out value1)\r\n                ? func(value1)\r\n                : Maybe.Nothing<T2>();", span="113-115"];
m1_36 [cluster="CSharpx.MaybeExtensions.Map<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>)", file="LongOptionParser.cs", label="T1 value1", span="120-120"];
m1_40 [cluster="CSharpx.MaybeExtensions.Return<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>, T2)", file="LongOptionParser.cs", label="T1 value1", span="128-128"];
m1_42 [cluster="CSharpx.MaybeExtensions.Return<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>, T2)", file="LongOptionParser.cs", label="Exit CSharpx.MaybeExtensions.Return<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>, T2)", span="126-126"];
m1_8 [cluster="CSharpx.Maybe<T>.MatchJust(out T)", file="LongOptionParser.cs", label="return Tag == MaybeType.Just;", span="39-39"];
m1_39 [cluster="CSharpx.MaybeExtensions.Return<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>, T2)", file="LongOptionParser.cs", label="Entry CSharpx.MaybeExtensions.Return<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>, T2)", span="126-126"];
m1_21 [cluster="CSharpx.Maybe.OfEither<T1, T2>(CSharpx.Either<T1, T2>)", file="LongOptionParser.cs", label="Entry CSharpx.Maybe.OfEither<T1, T2>(CSharpx.Either<T1, T2>)", span="89-89"];
m1_33 [cluster="CSharpx.MaybeExtensions.Bind<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, CSharpx.Maybe<T2>>)", file="LongOptionParser.cs", label="Exit CSharpx.MaybeExtensions.Bind<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, CSharpx.Maybe<T2>>)", span="110-110"];
m1_22 [cluster="CSharpx.Maybe.OfEither<T1, T2>(CSharpx.Either<T1, T2>)", file="LongOptionParser.cs", label="either.Tag == Either2Type.Either1Of2", span="91-91"];
m1_17 [cluster="CSharpx.Maybe.Nothing<T>()", file="LongOptionParser.cs", label="Exit CSharpx.Maybe.Nothing<T>()", span="75-75"];
m1_19 [cluster="CSharpx.Maybe.Just<T>(T)", file="LongOptionParser.cs", label="return new Just<T>(value);", span="82-82"];
m1_24 [cluster="CSharpx.Maybe.OfEither<T1, T2>(CSharpx.Either<T1, T2>)", file="LongOptionParser.cs", label="return new Nothing<T1>();", span="95-95"];
m1_26 [cluster="CSharpx.MaybeExtensions.ToMaybe<T>(T)", file="LongOptionParser.cs", label="Entry CSharpx.MaybeExtensions.ToMaybe<T>(T)", span="105-105"];
m1_29 [cluster="object.Equals(object, object)", file="LongOptionParser.cs", label="Entry object.Equals(object, object)", span="0-0"];
m1_31 [cluster="CSharpx.MaybeExtensions.Bind<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, CSharpx.Maybe<T2>>)", file="LongOptionParser.cs", label="T1 value1", span="112-112"];
m1_35 [cluster="CSharpx.MaybeExtensions.Map<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>)", file="LongOptionParser.cs", label="Entry CSharpx.MaybeExtensions.Map<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>)", span="118-118"];
m1_37 [cluster="CSharpx.MaybeExtensions.Map<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>)", file="LongOptionParser.cs", label="return maybe.MatchJust(out value1)\r\n                ? Maybe.Just(func(value1))\r\n                : Maybe.Nothing<T2>();", span="121-123"];
m1_41 [cluster="CSharpx.MaybeExtensions.Return<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>, T2)", file="LongOptionParser.cs", label="return maybe.MatchJust(out value1)\r\n                ? func(value1)\r\n                : noneValue;", span="129-131"];
m1_43 [cluster="CSharpx.MaybeExtensions.Do<T>(CSharpx.Maybe<T>, System.Action<T>)", file="LongOptionParser.cs", label="Entry CSharpx.MaybeExtensions.Do<T>(CSharpx.Maybe<T>, System.Action<T>)", span="134-134"];
m1_44 [cluster="CSharpx.MaybeExtensions.Do<T>(CSharpx.Maybe<T>, System.Action<T>)", file="LongOptionParser.cs", label="T value", span="136-136"];
m1_49 [cluster="CommandLine.Parsing.OptionInfo.SetValue(string, object)", file="LongOptionParser.cs", label="Entry CommandLine.Parsing.OptionInfo.SetValue(string, object)", span="165-165"];
m1_50 [cluster="CommandLine.Parsing.ArgumentParser.DefineOptionThatViolatesFormat(CommandLine.Parsing.OptionInfo)", file="LongOptionParser.cs", label="Entry CommandLine.Parsing.ArgumentParser.DefineOptionThatViolatesFormat(CommandLine.Parsing.OptionInfo)", span="171-171"];
m1_51 [cluster="CommandLine.Parsing.ArgumentParser.BooleanToParserState(bool)", file="LongOptionParser.cs", label="Entry CommandLine.Parsing.ArgumentParser.BooleanToParserState(bool)", span="135-135"];
m1_64 [cluster="CSharpx.MaybeExtensions.FromJust<T>(CSharpx.Maybe<T>, System.Exception)", file="LongOptionParser.cs", label="Entry CSharpx.MaybeExtensions.FromJust<T>(CSharpx.Maybe<T>, System.Exception)", span="160-160"];
m1_65 [cluster="CSharpx.MaybeExtensions.FromJust<T>(CSharpx.Maybe<T>, System.Exception)", file="LongOptionParser.cs", label="T value", span="162-162"];
m1_66 [cluster="CSharpx.MaybeExtensions.FromJust<T>(CSharpx.Maybe<T>, System.Exception)", file="LongOptionParser.cs", label="maybe.MatchJust(out value)", span="163-163"];
m1_68 [cluster="CSharpx.MaybeExtensions.FromJust<T>(CSharpx.Maybe<T>, System.Exception)", file="LongOptionParser.cs", label="throw exceptionToThrow ?? new ArgumentException(''Value empty.'');", span="167-167"];
m1_67 [cluster="CSharpx.MaybeExtensions.FromJust<T>(CSharpx.Maybe<T>, System.Exception)", file="LongOptionParser.cs", label="return value;", span="165-165"];
m1_69 [cluster="CSharpx.MaybeExtensions.FromJust<T>(CSharpx.Maybe<T>, System.Exception)", file="LongOptionParser.cs", label="Exit CSharpx.MaybeExtensions.FromJust<T>(CSharpx.Maybe<T>, System.Exception)", span="160-160"];
m1_57 [cluster="lambda expression", file="LongOptionParser.cs", label="Entry lambda expression", span="155-157"];
m1_0 [cluster="CSharpx.Maybe<T>.Maybe(CSharpx.MaybeType)", file="LongOptionParser.cs", label="Entry CSharpx.Maybe<T>.Maybe(CSharpx.MaybeType)", span="19-19"];
m1_1 [cluster="CSharpx.Maybe<T>.Maybe(CSharpx.MaybeType)", file="LongOptionParser.cs", label="this.tag = tag", span="21-21"];
m1_2 [cluster="CSharpx.Maybe<T>.Maybe(CSharpx.MaybeType)", file="LongOptionParser.cs", label="Exit CSharpx.Maybe<T>.Maybe(CSharpx.MaybeType)", span="19-19"];
m1_60 [cluster="lambda expression", file="LongOptionParser.cs", label="Entry lambda expression", span="157-157"];
m1_58 [cluster="lambda expression", file="LongOptionParser.cs", label="CommandLine.Parsing.LongOptionParser", span=""];
m1_61 [cluster="lambda expression", file="LongOptionParser.cs", label="resultSelector(sourceValue, resultValue)", span="157-157"];
m1_59 [cluster="lambda expression", file="LongOptionParser.cs", label="Exit lambda expression", span="155-157"];
m1_62 [cluster="lambda expression", file="LongOptionParser.cs", label="Exit lambda expression", span="157-157"];
m1_54 [cluster="CSharpx.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CSharpx.Maybe<TSource>, System.Func<TSource, CSharpx.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)", file="LongOptionParser.cs", label="return maybe.Bind(\r\n                sourceValue => valueSelector(sourceValue)\r\n                    .Map(\r\n                        resultValue => resultSelector(sourceValue, resultValue)));", span="154-157"];
m1_74 [cluster="CSharpx.MaybeExtensions.IsJust<T>(CSharpx.Maybe<T>)", file="LongOptionParser.cs", label="Entry CSharpx.MaybeExtensions.IsJust<T>(CSharpx.Maybe<T>)", span="175-175"];
m1_75 [cluster="CSharpx.MaybeExtensions.IsJust<T>(CSharpx.Maybe<T>)", file="LongOptionParser.cs", label="return maybe.Tag == MaybeType.Just;", span="177-177"];
m1_76 [cluster="CSharpx.MaybeExtensions.IsJust<T>(CSharpx.Maybe<T>)", file="LongOptionParser.cs", label="Exit CSharpx.MaybeExtensions.IsJust<T>(CSharpx.Maybe<T>)", span="175-175"];
m1_55 [cluster="CSharpx.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CSharpx.Maybe<TSource>, System.Func<TSource, CSharpx.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)", file="LongOptionParser.cs", label="Exit CSharpx.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CSharpx.Maybe<TSource>, System.Func<TSource, CSharpx.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)", span="149-149"];
m1_71 [cluster="CSharpx.MaybeExtensions.IsNothing<T>(CSharpx.Maybe<T>)", file="LongOptionParser.cs", label="Entry CSharpx.MaybeExtensions.IsNothing<T>(CSharpx.Maybe<T>)", span="170-170"];
m1_72 [cluster="CSharpx.MaybeExtensions.IsNothing<T>(CSharpx.Maybe<T>)", file="LongOptionParser.cs", label="return maybe.Tag == MaybeType.Nothing;", span="172-172"];
m1_73 [cluster="CSharpx.MaybeExtensions.IsNothing<T>(CSharpx.Maybe<T>)", file="LongOptionParser.cs", label="Exit CSharpx.MaybeExtensions.IsNothing<T>(CSharpx.Maybe<T>)", span="170-170"];
m1_46 [cluster="CSharpx.MaybeExtensions.Do<T>(CSharpx.Maybe<T>, System.Action<T>)", file="LongOptionParser.cs", label="action(value)", span="139-139"];
m1_53 [cluster="CSharpx.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CSharpx.Maybe<TSource>, System.Func<TSource, CSharpx.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)", file="LongOptionParser.cs", label="Entry CSharpx.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CSharpx.Maybe<TSource>, System.Func<TSource, CSharpx.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)", span="149-149"];
m1_47 [cluster="CommandLine.Parsing.ArgumentParser.EnsureOptionArrayAttributeIsNotBoundToScalar(CommandLine.Parsing.OptionInfo)", file="LongOptionParser.cs", label="Entry CommandLine.Parsing.ArgumentParser.EnsureOptionArrayAttributeIsNotBoundToScalar(CommandLine.Parsing.OptionInfo)", span="163-163"];
m1_63 [cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", file="LongOptionParser.cs", label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0"];
m1_77 [file="LongOptionParser.cs", label="CSharpx.Maybe<T>", span=""];
m1_78 [file="LongOptionParser.cs", label="CSharpx.Just<T>", span=""];
m1_79 [file="LongOptionParser.cs", label="System.Func<TSource, CSharpx.Maybe<TValue>>", span=""];
m1_80 [file="LongOptionParser.cs", label="System.Func<TSource, TValue, TResult>", span=""];
m1_81 [file="LongOptionParser.cs", label=TSource, span=""];
m2_0 [cluster="CommandLine.Tests.MyClass.MyClass()", file="MyClass.cs", label="Entry CommandLine.Tests.MyClass.MyClass()", span="5-5"];
m2_1 [cluster="CommandLine.Tests.MyClass.MyClass()", file="MyClass.cs", label="Exit CommandLine.Tests.MyClass.MyClass()", span="5-5"];
m3_9 [cluster="CommandLine.OptionAttribute.CreateOptionInfo()", file="OptionAttribute.cs", label="Entry CommandLine.OptionAttribute.CreateOptionInfo()", span="78-78"];
m3_10 [cluster="CommandLine.OptionAttribute.CreateOptionInfo()", file="OptionAttribute.cs", label="return new OptionInfo(ShortName, LongName);", span="80-80"];
m3_11 [cluster="CommandLine.OptionAttribute.CreateOptionInfo()", file="OptionAttribute.cs", label="Exit CommandLine.OptionAttribute.CreateOptionInfo()", span="78-78"];
m3_12 [cluster="CommandLine.Parsing.OptionInfo.OptionInfo(char?, string)", file="OptionAttribute.cs", label="Entry CommandLine.Parsing.OptionInfo.OptionInfo(char?, string)", span="78-78"];
m3_3 [cluster="CommandLine.OptionAttribute.OptionAttribute(char)", file="OptionAttribute.cs", label="Entry CommandLine.OptionAttribute.OptionAttribute(char)", span="50-50"];
m3_4 [cluster="CommandLine.OptionAttribute.OptionAttribute(char)", file="OptionAttribute.cs", label="Exit CommandLine.OptionAttribute.OptionAttribute(char)", span="50-50"];
m3_7 [cluster="CommandLine.OptionAttribute.OptionAttribute(char, string)", file="OptionAttribute.cs", label="Entry CommandLine.OptionAttribute.OptionAttribute(char, string)", span="69-69"];
m3_8 [cluster="CommandLine.OptionAttribute.OptionAttribute(char, string)", file="OptionAttribute.cs", label="Exit CommandLine.OptionAttribute.OptionAttribute(char, string)", span="69-69"];
m3_0 [cluster="CommandLine.OptionAttribute.OptionAttribute()", file="OptionAttribute.cs", label="Entry CommandLine.OptionAttribute.OptionAttribute()", span="41-41"];
m3_1 [cluster="CommandLine.OptionAttribute.OptionAttribute()", file="OptionAttribute.cs", label="AutoLongName = true", span="43-43"];
m3_2 [cluster="CommandLine.OptionAttribute.OptionAttribute()", file="OptionAttribute.cs", label="Exit CommandLine.OptionAttribute.OptionAttribute()", span="41-41"];
m3_5 [cluster="CommandLine.OptionAttribute.OptionAttribute(string)", file="OptionAttribute.cs", label="Entry CommandLine.OptionAttribute.OptionAttribute(string)", span="59-59"];
m3_6 [cluster="CommandLine.OptionAttribute.OptionAttribute(string)", file="OptionAttribute.cs", label="Exit CommandLine.OptionAttribute.OptionAttribute(string)", span="59-59"];
m3_13 [file="OptionAttribute.cs", label="CommandLine.OptionAttribute", span=""];
m4_86 [cluster="System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", file="OptionGroupParser.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", span="0-0"];
m4_17 [cluster="CommandLine.Tests.Unit.Core.InstanceChooserTests.Explicit_help_request_for_a_valid_verb_generates_HelpVerbRequestedError_with_appropriate_data()", file="OptionGroupParser.cs", label="((NotParsed<object>)result).Errors.ShouldBeEquivalentTo(expectedErrors)", span="66-66"];
m4_31 [cluster="Unk.>", file="OptionGroupParser.cs", label="Entry Unk.>", span=""];
m4_18 [cluster="CommandLine.Tests.Unit.Core.InstanceChooserTests.Explicit_help_request_for_a_valid_verb_generates_HelpVerbRequestedError_with_appropriate_data()", file="OptionGroupParser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceChooserTests.Explicit_help_request_for_a_valid_verb_generates_HelpVerbRequestedError_with_appropriate_data()", span="53-53"];
m4_88 [cluster="CommandLine.UnParserExtensions.SeperatorOrSpace(CommandLine.Core.Specification)", file="OptionGroupParser.cs", label="Entry CommandLine.UnParserExtensions.SeperatorOrSpace(CommandLine.Core.Specification)", span="90-90"];
m4_90 [cluster="CommandLine.UnParserExtensions.SeperatorOrSpace(CommandLine.Core.Specification)", file="OptionGroupParser.cs", label="Exit CommandLine.UnParserExtensions.SeperatorOrSpace(CommandLine.Core.Specification)", span="90-90"];
m4_51 [cluster="CommandLine.Tests.Unit.Core.InstanceChooserTests.Parse_sequence_verb_with_separator_returns_verb_instance(string[], string[])", file="OptionGroupParser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceChooserTests.Parse_sequence_verb_with_separator_returns_verb_instance(string[], string[])", span="152-152"];
m4_52 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="OptionGroupParser.cs", label="var builder = new StringBuilder()", span="60-60"];
m4_55 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="OptionGroupParser.cs", label="builder.Append(FormatWithQuotesIfString(value))", span="64-64"];
m4_57 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="OptionGroupParser.cs", label="var sep = spec.SeperatorOrSpace()", span="67-67"];
m4_59 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="OptionGroupParser.cs", label="var e = ((IEnumerable)value).GetEnumerator()", span="70-70"];
m4_61 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="OptionGroupParser.cs", label="builder.Append(fmtWithQuotesIfStr(e.Current)).Append(sep)", span="72-72"];
m4_62 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="OptionGroupParser.cs", label="builder.TrimEndIfMatch(' ')", span="73-73"];
m4_63 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="OptionGroupParser.cs", label="return builder.ToString();", span="76-76"];
m4_54 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="OptionGroupParser.cs", label="TargetType.Scalar", span="63-63"];
m4_56 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="OptionGroupParser.cs", label="TargetType.Sequence", span="66-66"];
m4_58 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="OptionGroupParser.cs", label="Func<object, object> fmtWithQuotesIfStr = v\r\n                        => sep == ' ' ? FormatWithQuotesIfString(v) : v", span="68-69"];
m4_60 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="OptionGroupParser.cs", label="e.MoveNext()", span="71-71"];
m4_64 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="OptionGroupParser.cs", label="Exit CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", span="58-58"];
m4_68 [cluster="System.Collections.IEnumerable.GetEnumerator()", file="OptionGroupParser.cs", label="Entry System.Collections.IEnumerable.GetEnumerator()", span="0-0"];
m4_32 [cluster="lambda expression", file="OptionGroupParser.cs", label="Entry lambda expression", span="37-37"];
m4_34 [cluster="lambda expression", file="OptionGroupParser.cs", label="Exit lambda expression", span="37-37"];
m4_35 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="OptionGroupParser.cs", label="Entry CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="105-105"];
m4_36 [cluster="System.Reflection.PropertyInfo.GetValue(object, object[])", file="OptionGroupParser.cs", label="Entry System.Reflection.PropertyInfo.GetValue(object, object[])", span="0-0"];
m4_33 [cluster="lambda expression", file="OptionGroupParser.cs", label="new { Specification = Specification.FromProperty(pi), Value = pi.GetValue(options, null) }", span="37-37"];
m4_37 [cluster="lambda expression", file="OptionGroupParser.cs", label="Entry lambda expression", span="40-40"];
m4_20 [cluster="CommandLine.Tests.Unit.Core.InstanceChooserTests.Explicit_help_request_for_an_invalid_verb_generates_HelpVerbRequestedError_with_Matched_set_to_false()", color=green, community=0, file="OptionGroupParser.cs", label="var expectedErrors = new[] { new HelpVerbRequestedError(null, null, false) }", prediction=2, span="75-75"];
m4_70 [cluster="System.Func<T, TResult>.Invoke(T)", file="OptionGroupParser.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m4_102 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", file="OptionGroupParser.cs", label="Entry CommandLine.UnParserExtensions.IsEmpty(object)", span="111-111"];
m4_105 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", file="OptionGroupParser.cs", label="value is ValueType && value.Equals(value.GetType().GetDefaultValue())", span="114-114"];
m4_109 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", file="OptionGroupParser.cs", label="value is IEnumerable && !((IEnumerable)value).GetEnumerator().MoveNext()", span="116-116"];
m4_106 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", file="OptionGroupParser.cs", label="return true;", span="114-114"];
m4_110 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", file="OptionGroupParser.cs", label="return true;", span="116-116"];
m4_111 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", file="OptionGroupParser.cs", label="return false;", span="117-117"];
m4_112 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", file="OptionGroupParser.cs", label="Exit CommandLine.UnParserExtensions.IsEmpty(object)", span="111-111"];
m4_21 [cluster="CommandLine.Tests.Unit.Core.InstanceChooserTests.Explicit_help_request_for_an_invalid_verb_generates_HelpVerbRequestedError_with_Matched_set_to_false()", file="OptionGroupParser.cs", label="var result = InstanceChooser.Choose(\r\n                new[] { typeof(AddOptions), typeof(CommitOptions), typeof(CloneOptions) },\r\n                new[] { ''help'', ''earthunderalienattack'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="78-82"];
m4_82 [cluster="string.Replace(string, string)", file="OptionGroupParser.cs", label="Entry string.Replace(string, string)", span="0-0"];
m4_39 [cluster="lambda expression", file="OptionGroupParser.cs", label="Exit lambda expression", span="40-40"];
m4_41 [cluster="lambda expression", file="OptionGroupParser.cs", label="i.Specification.Tag == SpecificationType.Value", span="45-45"];
m4_42 [cluster="lambda expression", file="OptionGroupParser.cs", label="Exit lambda expression", span="45-45"];
m4_43 [cluster="lambda expression", file="OptionGroupParser.cs", label="Entry lambda expression", span="50-50"];
m4_40 [cluster="lambda expression", file="OptionGroupParser.cs", label="Entry lambda expression", span="45-45"];
m4_44 [cluster="lambda expression", file="OptionGroupParser.cs", label="builder.Append(FormatOption((OptionSpecification)opt.Specification, opt.Value)).Append(' ')", span="50-50"];
m4_13 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)", file="OptionGroupParser.cs", label="Exit CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)", span="24-24"];
m4_14 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="OptionGroupParser.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m4_16 [cluster="System.Text.StringBuilder.StringBuilder()", color=green, community=0, file="OptionGroupParser.cs", label="Entry System.Text.StringBuilder.StringBuilder()", prediction=3, span="0-0"];
m4_15 [cluster="object.GetType()", file="OptionGroupParser.cs", label="Entry object.GetType()", span="0-0"];
m4_94 [cluster="CommandLine.UnParserExtensions.FormatOption(CommandLine.Core.OptionSpecification, object)", file="OptionGroupParser.cs", label="Entry CommandLine.UnParserExtensions.FormatOption(CommandLine.Core.OptionSpecification, object)", span="96-96"];
m4_96 [cluster="CommandLine.UnParserExtensions.FormatOption(CommandLine.Core.OptionSpecification, object)", file="OptionGroupParser.cs", label="Exit CommandLine.UnParserExtensions.FormatOption(CommandLine.Core.OptionSpecification, object)", span="96-96"];
m4_19 [cluster="CommandLine.Tests.Unit.Core.InstanceChooserTests.Explicit_help_request_for_an_invalid_verb_generates_HelpVerbRequestedError_with_Matched_set_to_false()", file="OptionGroupParser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceChooserTests.Explicit_help_request_for_an_invalid_verb_generates_HelpVerbRequestedError_with_Matched_set_to_false()", span="72-72"];
m4_77 [cluster="T.ToMaybe<T>()", file="OptionGroupParser.cs", label="Entry T.ToMaybe<T>()", span="105-105"];
m4_81 [cluster="string.Contains(string)", file="OptionGroupParser.cs", label="Entry string.Contains(string)", span="0-0"];
m4_91 [cluster="lambda expression", file="OptionGroupParser.cs", label="Entry lambda expression", span="93-93"];
m4_28 [cluster="CommandLine.Tests.Unit.Core.InstanceChooserTests.Parse_existing_verb_returns_verb_instance()", file="OptionGroupParser.cs", label="expected.ShouldBeEquivalentTo(((Parsed<object>)result).Value)", span="105-105"];
m4_48 [cluster="CommandLine.Tests.Unit.Core.InstanceChooserTests.Parse_sequence_verb_with_separator_returns_verb_instance(string[], string[])", file="OptionGroupParser.cs", label="var result = InstanceChooser.Choose(\r\n                new[] { typeof(AddOptions), typeof(CommitOptions), typeof(CloneOptions), typeof(SequenceOptions) },\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="158-162"];
m4_27 [cluster="CommandLine.Tests.Unit.Core.InstanceChooserTests.Parse_existing_verb_returns_verb_instance()", color=green, community=0, file="OptionGroupParser.cs", label="Assert.IsType<AddOptions>(((Parsed<object>)result).Value)", prediction=4, span="104-104"];
m4_47 [cluster="CommandLine.Tests.Unit.Core.InstanceChooserTests.Parse_sequence_verb_with_separator_returns_verb_instance(string[], string[])", file="OptionGroupParser.cs", label="var expected = new SequenceOptions { LongSequence = new long[] { }, StringSequence = expectedString }", span="155-155"];
m4_29 [cluster="CommandLine.Tests.Unit.Core.InstanceChooserTests.Parse_existing_verb_returns_verb_instance()", file="OptionGroupParser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceChooserTests.Parse_existing_verb_returns_verb_instance()", span="91-91"];
m4_45 [cluster="CommandLine.Tests.Fakes.SequenceOptions.SequenceOptions()", file="OptionGroupParser.cs", label="Entry CommandLine.Tests.Fakes.SequenceOptions.SequenceOptions()", span="48-48"];
m4_49 [cluster="CommandLine.Tests.Unit.Core.InstanceChooserTests.Parse_sequence_verb_with_separator_returns_verb_instance(string[], string[])", file="OptionGroupParser.cs", label="Assert.IsType<SequenceOptions>(((Parsed<object>)result).Value)", span="165-165"];
m4_72 [cluster="lambda expression", file="OptionGroupParser.cs", label="sep == ' ' ? FormatWithQuotesIfString(v) : v", span="69-69"];
m4_71 [cluster="lambda expression", file="OptionGroupParser.cs", label="Entry lambda expression", span="68-69"];
m4_73 [cluster="lambda expression", file="OptionGroupParser.cs", label="Exit lambda expression", span="68-69"];
m4_79 [cluster="lambda expression", file="OptionGroupParser.cs", label="v.Contains(''\'''') ? v.Replace(''\'''', ''\\\'''') : v", span="82-82"];
m4_84 [cluster="lambda expression", file="OptionGroupParser.cs", label="v.Contains(' ') || v.Contains(''\'''')\r\n                    ? ''\''''.JoinTo(doubQt(v), ''\'''') : v", span="86-87"];
m4_83 [cluster="lambda expression", file="OptionGroupParser.cs", label="Entry lambda expression", span="86-87"];
m4_78 [cluster="lambda expression", file="OptionGroupParser.cs", label="Entry lambda expression", span="81-82"];
m4_80 [cluster="lambda expression", file="OptionGroupParser.cs", label="Exit lambda expression", span="81-82"];
m4_85 [cluster="lambda expression", file="OptionGroupParser.cs", label="Exit lambda expression", span="86-87"];
m4_92 [cluster="lambda expression", file="OptionGroupParser.cs", label="o.Separator != '\0' ? o.Separator : ' '", span="93-93"];
m4_93 [cluster="lambda expression", file="OptionGroupParser.cs", label="Exit lambda expression", span="93-93"];
m4_24 [cluster="System.Text.StringBuilder.TrimEndIfMatch(char)", file="OptionGroupParser.cs", label="Entry System.Text.StringBuilder.TrimEndIfMatch(char)", span="87-87"];
m4_25 [cluster="System.Text.StringBuilder.ToString()", color=green, community=0, file="OptionGroupParser.cs", label="Entry System.Text.StringBuilder.ToString()", prediction=5, span="0-0"];
m4_26 [cluster="string.TrimEnd(params char[])", color=green, community=0, file="OptionGroupParser.cs", label="Entry string.TrimEnd(params char[])", prediction=6, span="0-0"];
m4_98 [cluster="System.Text.StringBuilder.AppendWhen(bool, params string[])", file="OptionGroupParser.cs", label="Entry System.Text.StringBuilder.AppendWhen(bool, params string[])", span="9-9"];
m4_8 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)", file="OptionGroupParser.cs", label="var valSpecs = from info in specs.Where(i => i.Specification.Tag == SpecificationType.Value)\r\n                let v = (ValueSpecification)info.Specification\r\n                orderby v.Index\r\n                select info", span="45-48"];
m4_9 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)", color=green, community=0, file="OptionGroupParser.cs", label="optSpecs.ForEach(opt => builder.Append(FormatOption((OptionSpecification)opt.Specification, opt.Value)).Append(' '))", prediction=7, span="50-50"];
m4_10 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)", color=green, community=0, file="OptionGroupParser.cs", label="builder.TrimEndIfMatch(' ')", prediction=7, span="51-51"];
m4_11 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)", file="OptionGroupParser.cs", label="valSpecs.ForEach(val => builder.Append(FormatValue(val.Specification, val.Value)).Append(' '))", span="52-52"];
m4_46 [cluster="Unk.FormatOption", file="OptionGroupParser.cs", label="Entry Unk.FormatOption", span=""];
m4_50 [cluster="Unk.FormatValue", file="OptionGroupParser.cs", label="Entry Unk.FormatValue", span=""];
m4_113 [cluster="System.Type.GetDefaultValue()", file="OptionGroupParser.cs", label="Entry System.Type.GetDefaultValue()", span="119-119"];
m4_6 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)", file="OptionGroupParser.cs", label="var specs =\r\n                from info in\r\n                    type.GetSpecifications(\r\n                        pi => new { Specification = Specification.FromProperty(pi), Value = pi.GetValue(options, null) })\r\n                where !info.Value.IsEmpty()\r\n                select info", span="34-39"];
m4_22 [cluster="CommandLine.Tests.Unit.Core.InstanceChooserTests.Explicit_help_request_for_an_invalid_verb_generates_HelpVerbRequestedError_with_Matched_set_to_false()", file="OptionGroupParser.cs", label="((NotParsed<object>)result).Errors.ShouldBeEquivalentTo(expectedErrors)", span="85-85"];
m4_5 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)", file="OptionGroupParser.cs", label="type.GetVerbSpecification()\r\n                .Return(verb => builder.Append(verb.Name).Append(' '), builder)", span="31-32"];
m4_87 [cluster="string.JoinTo(params string[])", file="OptionGroupParser.cs", label="Entry string.JoinTo(params string[])", span="45-45"];
m4_30 [cluster="System.Text.StringBuilder.Append(string)", file="OptionGroupParser.cs", label="Entry System.Text.StringBuilder.Append(string)", span="0-0"];
m4_67 [cluster="CommandLine.Core.Specification.SeperatorOrSpace()", file="OptionGroupParser.cs", label="Entry CommandLine.Core.Specification.SeperatorOrSpace()", span="90-90"];
m4_97 [cluster="CommandLine.Core.OptionSpecification.FormatName()", file="OptionGroupParser.cs", label="Entry CommandLine.Core.OptionSpecification.FormatName()", span="105-105"];
m4_65 [cluster="CommandLine.UnParserExtensions.FormatWithQuotesIfString(object)", file="OptionGroupParser.cs", label="Entry CommandLine.UnParserExtensions.FormatWithQuotesIfString(object)", span="79-79"];
m4_74 [cluster="CommandLine.UnParserExtensions.FormatWithQuotesIfString(object)", file="OptionGroupParser.cs", label="Func<string, string> doubQt = v\r\n                => v.Contains(''\'''') ? v.Replace(''\'''', ''\\\'''') : v", span="81-82"];
m4_75 [cluster="CommandLine.UnParserExtensions.FormatWithQuotesIfString(object)", file="OptionGroupParser.cs", label="return (value as string)\r\n                .ToMaybe()\r\n                .Return(v => v.Contains(' ') || v.Contains(''\'''')\r\n                    ? ''\''''.JoinTo(doubQt(v), ''\'''') : v, value);", span="84-87"];
m4_76 [cluster="CommandLine.UnParserExtensions.FormatWithQuotesIfString(object)", file="OptionGroupParser.cs", label="Exit CommandLine.UnParserExtensions.FormatWithQuotesIfString(object)", span="79-79"];
m4_23 [cluster="CommandLine.Tests.Unit.Core.InstanceChooserTests.Explicit_help_request_for_an_invalid_verb_generates_HelpVerbRequestedError_with_Matched_set_to_false()", file="OptionGroupParser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceChooserTests.Explicit_help_request_for_an_invalid_verb_generates_HelpVerbRequestedError_with_Matched_set_to_false()", span="72-72"];
m4_66 [cluster="System.Text.StringBuilder.Append(object)", file="OptionGroupParser.cs", label="Entry System.Text.StringBuilder.Append(object)", span="0-0"];
m4_114 [cluster="object.Equals(object)", file="OptionGroupParser.cs", label="Entry object.Equals(object)", span="0-0"];
m4_69 [cluster="System.Collections.IEnumerator.MoveNext()", file="OptionGroupParser.cs", label="Entry System.Collections.IEnumerator.MoveNext()", span="0-0"];
m4_99 [cluster="CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification)", file="OptionGroupParser.cs", label="Entry CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification)", span="105-105"];
m4_101 [cluster="CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification)", file="OptionGroupParser.cs", label="Exit CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification)", span="105-105"];
m4_0 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)", file="OptionGroupParser.cs", label="Entry CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)", span="24-24"];
m4_2 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)", file="OptionGroupParser.cs", label="throw new ArgumentNullException(''options'');", span="26-26"];
m4_3 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)", file="OptionGroupParser.cs", label="var type = options.GetType()", span="28-28"];
m4_1 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)", file="OptionGroupParser.cs", label="options == null", span="26-26"];
m4_4 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)", file="OptionGroupParser.cs", label="var builder = new StringBuilder()", span="29-29"];
m4_115 [file="OptionGroupParser.cs", label=builder, span=""];
m4_116 [file="OptionGroupParser.cs", label=T, span=""];
m4_117 [file="OptionGroupParser.cs", label=sep, span=""];
m4_118 [file="OptionGroupParser.cs", label=doubQt, span=""];
m6_31 [cluster="CommandLine.Core.TokenExtensions.IsValue(CommandLine.Core.Token)", file="ParserSettings.cs", label="Entry CommandLine.Core.TokenExtensions.IsValue(CommandLine.Core.Token)", span="73-73"];
m6_32 [cluster="CommandLine.Core.TokenExtensions.IsValue(CommandLine.Core.Token)", file="ParserSettings.cs", label="return token.Tag == TokenType.Value;", span="75-75"];
m6_33 [cluster="CommandLine.Core.TokenExtensions.IsValue(CommandLine.Core.Token)", file="ParserSettings.cs", label="Exit CommandLine.Core.TokenExtensions.IsValue(CommandLine.Core.Token)", span="73-73"];
m6_28 [cluster="CommandLine.Core.TokenExtensions.IsName(CommandLine.Core.Token)", file="ParserSettings.cs", label="Entry CommandLine.Core.TokenExtensions.IsName(CommandLine.Core.Token)", span="68-68"];
m6_29 [cluster="CommandLine.Core.TokenExtensions.IsName(CommandLine.Core.Token)", file="ParserSettings.cs", label="return token.Tag == TokenType.Name;", span="70-70"];
m6_30 [cluster="CommandLine.Core.TokenExtensions.IsName(CommandLine.Core.Token)", file="ParserSettings.cs", label="Exit CommandLine.Core.TokenExtensions.IsName(CommandLine.Core.Token)", span="68-68"];
m6_21 [cluster="object.GetHashCode()", file="ParserSettings.cs", label="Entry object.GetHashCode()", span="0-0"];
m6_0 [cluster="CommandLine.Core.Token.Token(CommandLine.Core.TokenType, string)", file="ParserSettings.cs", label="Entry CommandLine.Core.Token.Token(CommandLine.Core.TokenType, string)", span="13-13"];
m6_1 [cluster="CommandLine.Core.Token.Token(CommandLine.Core.TokenType, string)", file="ParserSettings.cs", label="this.tag = tag", span="15-15"];
m6_2 [cluster="CommandLine.Core.Token.Token(CommandLine.Core.TokenType, string)", file="ParserSettings.cs", label="this.text = text", span="16-16"];
m6_3 [cluster="CommandLine.Core.Token.Token(CommandLine.Core.TokenType, string)", file="ParserSettings.cs", label="Exit CommandLine.Core.Token.Token(CommandLine.Core.TokenType, string)", span="13-13"];
m6_17 [cluster="object.Equals(object)", file="ParserSettings.cs", label="Entry object.Equals(object)", span="0-0"];
m6_26 [cluster="System.Enum.Equals(object)", file="ParserSettings.cs", label="Entry System.Enum.Equals(object)", span="0-0"];
m6_27 [cluster="string.Equals(string)", file="ParserSettings.cs", label="Entry string.Equals(string)", span="0-0"];
m6_16 [cluster="CommandLine.Core.Token.Equals(CommandLine.Core.Token)", file="ParserSettings.cs", label="Entry CommandLine.Core.Token.Equals(CommandLine.Core.Token)", span="55-55"];
m6_22 [cluster="CommandLine.Core.Token.Equals(CommandLine.Core.Token)", file="ParserSettings.cs", label="other == null", span="57-57"];
m6_24 [cluster="CommandLine.Core.Token.Equals(CommandLine.Core.Token)", file="ParserSettings.cs", label="return Tag.Equals(other.Tag) && Text.Equals(other.Text);", span="62-62"];
m6_23 [cluster="CommandLine.Core.Token.Equals(CommandLine.Core.Token)", file="ParserSettings.cs", label="return false;", span="59-59"];
m6_25 [cluster="CommandLine.Core.Token.Equals(CommandLine.Core.Token)", file="ParserSettings.cs", label="Exit CommandLine.Core.Token.Equals(CommandLine.Core.Token)", span="55-55"];
m6_4 [cluster="CommandLine.Core.Token.Name(string)", file="ParserSettings.cs", label="Entry CommandLine.Core.Token.Name(string)", span="19-19"];
m6_5 [cluster="CommandLine.Core.Token.Name(string)", file="ParserSettings.cs", label="return new Token(TokenType.Name, text);", span="21-21"];
m6_6 [cluster="CommandLine.Core.Token.Name(string)", file="ParserSettings.cs", label="Exit CommandLine.Core.Token.Name(string)", span="19-19"];
m6_18 [cluster="CommandLine.Core.Token.GetHashCode()", file="ParserSettings.cs", label="Entry CommandLine.Core.Token.GetHashCode()", span="50-50"];
m6_19 [cluster="CommandLine.Core.Token.GetHashCode()", file="ParserSettings.cs", label="return new {Tag, Text}.GetHashCode();", span="52-52"];
m6_20 [cluster="CommandLine.Core.Token.GetHashCode()", file="ParserSettings.cs", label="Exit CommandLine.Core.Token.GetHashCode()", span="50-50"];
m6_7 [cluster="CommandLine.Core.Token.Value(string)", file="ParserSettings.cs", label="Entry CommandLine.Core.Token.Value(string)", span="24-24"];
m6_8 [cluster="CommandLine.Core.Token.Value(string)", file="ParserSettings.cs", label="return new Token(TokenType.Value, text);", span="26-26"];
m6_9 [cluster="CommandLine.Core.Token.Value(string)", file="ParserSettings.cs", label="Exit CommandLine.Core.Token.Value(string)", span="24-24"];
m6_10 [cluster="CommandLine.Core.Token.Equals(object)", file="ParserSettings.cs", label="Entry CommandLine.Core.Token.Equals(object)", span="39-39"];
m6_11 [cluster="CommandLine.Core.Token.Equals(object)", file="ParserSettings.cs", label="var other = obj as Token", span="41-41"];
m6_14 [cluster="CommandLine.Core.Token.Equals(object)", file="ParserSettings.cs", label="return base.Equals(obj);", span="47-47"];
m6_12 [cluster="CommandLine.Core.Token.Equals(object)", file="ParserSettings.cs", label="other != null", span="42-42"];
m6_13 [cluster="CommandLine.Core.Token.Equals(object)", file="ParserSettings.cs", label="return Equals(other);", span="44-44"];
m6_15 [cluster="CommandLine.Core.Token.Equals(object)", file="ParserSettings.cs", label="Exit CommandLine.Core.Token.Equals(object)", span="39-39"];
m6_34 [file="ParserSettings.cs", label="CommandLine.Core.Token", span=""];
m11_4 [cluster="CommandLine.Extensions.StringExtensions.IsNumeric(string)", file="StringExtensions.cs", label="Entry CommandLine.Extensions.StringExtensions.IsNumeric(string)", span="40-40"];
m11_5 [cluster="CommandLine.Extensions.StringExtensions.IsNumeric(string)", file="StringExtensions.cs", label="decimal temporary", span="42-42"];
m11_6 [cluster="CommandLine.Extensions.StringExtensions.IsNumeric(string)", file="StringExtensions.cs", label="return decimal.TryParse(value, out temporary);", span="43-43"];
m11_7 [cluster="CommandLine.Extensions.StringExtensions.IsNumeric(string)", file="StringExtensions.cs", label="Exit CommandLine.Extensions.StringExtensions.IsNumeric(string)", span="40-40"];
m11_8 [cluster="decimal.TryParse(string, out decimal)", file="StringExtensions.cs", label="Entry decimal.TryParse(string, out decimal)", span="0-0"];
m11_13 [cluster="CommandLine.Extensions.StringExtensions.FormatLocal(string, params object[])", file="StringExtensions.cs", label="Entry CommandLine.Extensions.StringExtensions.FormatLocal(string, params object[])", span="51-51"];
m11_14 [cluster="CommandLine.Extensions.StringExtensions.FormatLocal(string, params object[])", file="StringExtensions.cs", label="return string.Format(CultureInfo.CurrentCulture, value, arguments);", span="53-53"];
m11_15 [cluster="CommandLine.Extensions.StringExtensions.FormatLocal(string, params object[])", file="StringExtensions.cs", label="Exit CommandLine.Extensions.StringExtensions.FormatLocal(string, params object[])", span="51-51"];
m11_28 [cluster="CommandLine.Extensions.StringExtensions.IsShortOption(string)", file="StringExtensions.cs", label="Entry CommandLine.Extensions.StringExtensions.IsShortOption(string)", span="71-71"];
m11_30 [cluster="CommandLine.Extensions.StringExtensions.IsShortOption(string)", file="StringExtensions.cs", label="Exit CommandLine.Extensions.StringExtensions.IsShortOption(string)", span="71-71"];
m11_3 [cluster="string.String(char, int)", file="StringExtensions.cs", label="Entry string.String(char, int)", span="0-0"];
m11_9 [cluster="CommandLine.Extensions.StringExtensions.FormatInvariant(string, params object[])", file="StringExtensions.cs", label="Entry CommandLine.Extensions.StringExtensions.FormatInvariant(string, params object[])", span="46-46"];
m11_10 [cluster="CommandLine.Extensions.StringExtensions.FormatInvariant(string, params object[])", file="StringExtensions.cs", label="return string.Format(CultureInfo.InvariantCulture, value, arguments);", span="48-48"];
m11_11 [cluster="CommandLine.Extensions.StringExtensions.FormatInvariant(string, params object[])", file="StringExtensions.cs", label="Exit CommandLine.Extensions.StringExtensions.FormatInvariant(string, params object[])", span="46-46"];
m11_24 [cluster="CommandLine.Extensions.StringExtensions.IsDash(string)", file="StringExtensions.cs", label="Entry CommandLine.Extensions.StringExtensions.IsDash(string)", span="66-66"];
m11_26 [cluster="CommandLine.Extensions.StringExtensions.IsDash(string)", file="StringExtensions.cs", label="Exit CommandLine.Extensions.StringExtensions.IsDash(string)", span="66-66"];
m11_27 [cluster="string.CompareOrdinal(string, string)", file="StringExtensions.cs", label="Entry string.CompareOrdinal(string, string)", span="0-0"];
m11_19 [cluster="string.Concat(string, string)", file="StringExtensions.cs", label="Entry string.Concat(string, string)", span="0-0"];
m11_16 [cluster="CommandLine.Extensions.StringExtensions.ToOption(string)", file="StringExtensions.cs", label="Entry CommandLine.Extensions.StringExtensions.ToOption(string)", span="56-56"];
m11_18 [cluster="CommandLine.Extensions.StringExtensions.ToOption(string)", file="StringExtensions.cs", label="Exit CommandLine.Extensions.StringExtensions.ToOption(string)", span="56-56"];
m11_31 [cluster="CommandLine.Extensions.StringExtensions.IsLongOption(string)", file="StringExtensions.cs", label="Entry CommandLine.Extensions.StringExtensions.IsLongOption(string)", span="76-76"];
m11_33 [cluster="CommandLine.Extensions.StringExtensions.IsLongOption(string)", file="StringExtensions.cs", label="Exit CommandLine.Extensions.StringExtensions.IsLongOption(string)", span="76-76"];
m11_0 [cluster="CommandLine.Extensions.StringExtensions.Spaces(int)", file="StringExtensions.cs", label="Entry CommandLine.Extensions.StringExtensions.Spaces(int)", span="35-35"];
m11_1 [cluster="CommandLine.Extensions.StringExtensions.Spaces(int)", file="StringExtensions.cs", label="return new string(' ', value);", span="37-37"];
m11_2 [cluster="CommandLine.Extensions.StringExtensions.Spaces(int)", file="StringExtensions.cs", label="Exit CommandLine.Extensions.StringExtensions.Spaces(int)", span="35-35"];
m11_23 [cluster="string.Concat(object, object)", file="StringExtensions.cs", label="Entry string.Concat(object, object)", span="0-0"];
m11_20 [cluster="CommandLine.Extensions.StringExtensions.ToOption(char?)", file="StringExtensions.cs", label="Entry CommandLine.Extensions.StringExtensions.ToOption(char?)", span="61-61"];
m11_22 [cluster="CommandLine.Extensions.StringExtensions.ToOption(char?)", file="StringExtensions.cs", label="Exit CommandLine.Extensions.StringExtensions.ToOption(char?)", span="61-61"];
m11_12 [cluster="string.Format(System.IFormatProvider, string, params object[])", file="StringExtensions.cs", label="Entry string.Format(System.IFormatProvider, string, params object[])", span="0-0"];
m1_34 -> m1_37  [color=darkseagreen4, key=1, label=valueSetting, style=dashed];
m1_3 -> m1_5  [color=darkseagreen4, key=1, label="CommandLine.Parsing.OptionMap", style=dashed];
m1_3 -> m1_12  [color=darkseagreen4, key=1, label="CommandLine.Parsing.IArgumentEnumerator", style=dashed];
m1_3 -> m1_16  [color=darkseagreen4, key=1, label=object, style=dashed];
m1_3 -> m1_21  [color=darkseagreen4, key=1, label="CommandLine.Parsing.IArgumentEnumerator", style=dashed];
m1_3 -> m1_23  [color=darkseagreen4, key=1, label=object, style=dashed];
m1_3 -> m1_28  [color=darkseagreen4, key=1, label="CommandLine.Parsing.IArgumentEnumerator", style=dashed];
m1_3 -> m1_33  [color=darkseagreen4, key=1, label="CommandLine.Parsing.IArgumentEnumerator", style=dashed];
m1_3 -> m1_40  [color=darkseagreen4, key=1, label=object, style=dashed];
m1_5 -> m1_11  [color=green, key=1, label=option, style=dashed];
m1_5 -> m1_9  [color=darkseagreen4, key=1, label=option, style=dashed];
m1_5 -> m1_10  [color=darkseagreen4, key=1, label=option, style=dashed];
m1_5 -> m1_15  [color=darkseagreen4, key=1, label=option, style=dashed];
m1_5 -> m1_16  [color=darkseagreen4, key=1, label=option, style=dashed];
m1_5 -> m1_18  [color=darkseagreen4, key=1, label=option, style=dashed];
m1_5 -> m1_20  [color=darkseagreen4, key=1, label=option, style=dashed];
m1_5 -> m1_23  [color=darkseagreen4, key=1, label=option, style=dashed];
m1_5 -> m1_25  [color=darkseagreen4, key=1, label=option, style=dashed];
m1_5 -> m1_27  [color=darkseagreen4, key=1, label=option, style=dashed];
m1_5 -> m1_28  [color=darkseagreen4, key=1, label=option, style=dashed];
m1_5 -> m1_30  [color=darkseagreen4, key=1, label=option, style=dashed];
m1_5 -> m1_32  [color=darkseagreen4, key=1, label=option, style=dashed];
m1_5 -> m1_36  [color=darkseagreen4, key=1, label=option, style=dashed];
m1_5 -> m1_40  [color=darkseagreen4, key=1, label=option, style=dashed];
m1_5 -> m1_42  [color=darkseagreen4, key=1, label=option, style=dashed];
m1_4 -> m1_12  [color=darkseagreen4, key=1, label=parts, style=dashed];
m1_4 -> m1_38  [color=darkseagreen4, key=1, label=parts, style=dashed];
m1_4 -> m1_14  [color=darkseagreen4, key=1, label=parts, style=dashed];
m1_4 -> m1_16  [color=darkseagreen4, key=1, label=parts, style=dashed];
m1_4 -> m1_22  [color=darkseagreen4, key=1, label=parts, style=dashed];
m1_16 -> m1_19  [color=darkseagreen4, key=1, label=valueSetting, style=dashed];
m1_23 -> m1_26  [color=darkseagreen4, key=1, label=valueSetting, style=dashed];
m1_28 -> m1_31  [color=darkseagreen4, key=1, label=valueSetting, style=dashed];
m1_30 -> m1_32  [color=darkseagreen4, key=1, label="CSharpx.Maybe<T1>", style=dashed];
m1_32 -> m1_32  [color=darkseagreen4, key=1, label=value1, style=dashed];
m1_40 -> m1_43  [color=darkseagreen4, key=1, label=valueSetting, style=dashed];
m1_39 -> m1_41  [color=darkseagreen4, key=1, label="CSharpx.Maybe<T1>", style=dashed];
m1_21 -> m1_23  [color=darkseagreen4, key=1, label="CSharpx.Either<T1, T2>", style=dashed];
m1_37 -> m1_37  [color=darkseagreen4, key=1, label=value1, style=dashed];
m1_41 -> m1_41  [color=darkseagreen4, key=1, label=value1, style=dashed];
m1_43 -> m1_45  [color=darkseagreen4, key=1, label="CSharpx.Maybe<T>", style=dashed];
m1_43 -> m1_46  [color=darkseagreen4, key=1, label="System.Action<T>", style=dashed];
m1_64 -> m1_66  [color=darkseagreen4, key=1, label="CSharpx.Maybe<T>", style=dashed];
m1_64 -> m1_68  [color=darkseagreen4, key=1, label="System.Exception", style=dashed];
m1_57 -> m1_61  [color=darkseagreen4, key=1, label=TSource, style=dashed];
m1_58 -> m1_60  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_58 -> m1_18  [color=darkseagreen4, key=1, label="CommandLine.Parsing.LongOptionParser", style=dashed];
m1_58 -> m1_25  [color=darkseagreen4, key=1, label="CommandLine.Parsing.LongOptionParser", style=dashed];
m1_58 -> m1_30  [color=darkseagreen4, key=1, label="CommandLine.Parsing.LongOptionParser", style=dashed];
m1_58 -> m1_36  [color=darkseagreen4, key=1, label="CommandLine.Parsing.LongOptionParser", style=dashed];
m1_58 -> m1_42  [color=darkseagreen4, key=1, label="CommandLine.Parsing.LongOptionParser", style=dashed];
m1_58 -> m1_8  [color=darkseagreen4, key=1, label="CommandLine.Parsing.LongOptionParser", style=dashed];
m1_54 -> m1_57  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_53 -> m1_58  [color=darkseagreen4, key=1, label="System.Func<TSource, CSharpx.Maybe<TValue>>", style=dashed];
m1_53 -> m1_61  [color=darkseagreen4, key=1, label="System.Func<TSource, TValue, TResult>", style=dashed];
m1_77 -> m1_4  [color=darkseagreen4, key=1, label="CSharpx.Maybe<T>", style=dashed];
m1_77 -> m1_8  [color=darkseagreen4, key=1, label="CSharpx.Maybe<T>", style=dashed];
m1_78 -> m1_13  [color=darkseagreen4, key=1, label="CSharpx.Just<T>", style=dashed];
m1_79 -> m1_58  [color=darkseagreen4, key=1, label="System.Func<TSource, CSharpx.Maybe<TValue>>", style=dashed];
m1_80 -> m1_58  [color=darkseagreen4, key=1, label="System.Func<TSource, TValue, TResult>", style=dashed];
m1_80 -> m1_61  [color=darkseagreen4, key=1, label="System.Func<TSource, TValue, TResult>", style=dashed];
m1_81 -> m1_61  [color=darkseagreen4, key=1, label=TSource, style=dashed];
m3_13 -> m3_10  [color=darkseagreen4, key=1, label="CommandLine.OptionAttribute", style=dashed];
m4_51 -> m4_55  [color=darkseagreen4, key=1, label=object, style=dashed];
m4_52 -> m4_55  [color=darkseagreen4, key=1, label=builder, style=dashed];
m4_52 -> m4_61  [color=darkseagreen4, key=1, label=builder, style=dashed];
m4_52 -> m4_62  [color=darkseagreen4, key=1, label=builder, style=dashed];
m4_52 -> m4_63  [color=darkseagreen4, key=1, label=builder, style=dashed];
m4_57 -> m4_72  [color=darkseagreen4, key=1, label=sep, style=dashed];
m4_57 -> m4_61  [color=darkseagreen4, key=1, label=sep, style=dashed];
m4_59 -> m4_61  [color=darkseagreen4, key=1, label=e, style=dashed];
m4_58 -> m4_72  [color=darkseagreen4, key=1, label=object, style=dashed];
m4_58 -> m4_61  [color=darkseagreen4, key=1, label=fmtWithQuotesIfStr, style=dashed];
m4_34 -> m4_36  [color=darkseagreen4, key=1, label=result, style=dashed];
m4_33 -> m4_36  [color=darkseagreen4, key=1, label=expected, style=dashed];
m4_20 -> m4_22  [color=green, key=1, label=expectedErrors, style=dashed];
m4_102 -> m4_105  [color=darkseagreen4, key=1, label=object, style=dashed];
m4_102 -> m4_109  [color=darkseagreen4, key=1, label=object, style=dashed];
m4_41 -> m4_43  [color=darkseagreen4, key=1, label=result, style=dashed];
m4_40 -> m4_43  [color=darkseagreen4, key=1, label=expected, style=dashed];
m4_15 -> m4_17  [color=darkseagreen4, key=1, label=expectedErrors, style=dashed];
m4_47 -> m4_50  [color=darkseagreen4, key=1, label=expected, style=dashed];
m4_25 -> m4_28  [color=green, key=1, label=expected, style=dashed];
m4_26 -> m4_28  [color=green, key=1, label=result, style=dashed];
m4_8 -> m4_40  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_8 -> m4_11  [color=darkseagreen4, key=1, label=valSpecs, style=dashed];
m4_9 -> m4_11  [color=green, key=1, label=expectedErrors, style=dashed];
m4_9 -> m4_43  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_6 -> m4_32  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_5 -> m4_27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_65 -> m4_75  [color=darkseagreen4, key=1, label=object, style=dashed];
m4_74 -> m4_79  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_74 -> m4_84  [color=darkseagreen4, key=1, label=doubQt, style=dashed];
m4_75 -> m4_83  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_3 -> m4_5  [color=darkseagreen4, key=1, label=type, style=dashed];
m4_4 -> m4_28  [color=darkseagreen4, key=1, label=builder, style=dashed];
m4_4 -> m4_9  [color=darkseagreen4, key=1, label=builder, style=dashed];
m4_4 -> m4_44  [color=darkseagreen4, key=1, label=builder, style=dashed];
m4_4 -> m4_10  [color=darkseagreen4, key=1, label=builder, style=dashed];
m4_4 -> m4_11  [color=darkseagreen4, key=1, label=builder, style=dashed];
m4_115 -> m4_28  [color=darkseagreen4, key=1, label=builder, style=dashed];
m4_115 -> m4_44  [color=darkseagreen4, key=1, label=builder, style=dashed];
m4_117 -> m4_72  [color=darkseagreen4, key=1, label=sep, style=dashed];
m4_118 -> m4_84  [color=darkseagreen4, key=1, label=doubQt, style=dashed];
m6_16 -> m6_24  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m6_10 -> m6_14  [color=darkseagreen4, key=1, label=object, style=dashed];
m6_11 -> m6_13  [color=darkseagreen4, key=1, label=other, style=dashed];
m6_34 -> m6_13  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m6_34 -> m6_14  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m6_34 -> m6_19  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m6_34 -> m6_24  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m11_4 -> m11_6  [color=darkseagreen4, key=1, label=string, style=dashed];
}
