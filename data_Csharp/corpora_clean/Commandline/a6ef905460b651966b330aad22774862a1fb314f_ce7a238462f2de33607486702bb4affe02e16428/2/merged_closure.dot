digraph  {
n57 [label="CommandLine.Text.CopyrightInfo", span=""];
n0 [cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(string, int)", label="Entry CommandLine.Text.CopyrightInfo.CopyrightInfo(string, int)", span="32-32"];
n1 [cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(string, int)", label="Exit CommandLine.Text.CopyrightInfo.CopyrightInfo(string, int)", span="32-32"];
n2 [cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(string, params int[])", label="Entry CommandLine.Text.CopyrightInfo.CopyrightInfo(string, params int[])", span="45-45"];
n3 [cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(string, params int[])", label="Exit CommandLine.Text.CopyrightInfo.CopyrightInfo(string, params int[])", span="45-45"];
n4 [cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])", label="Entry CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])", span="59-59"];
n5 [cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])", label="string.IsNullOrWhiteSpace(author)", span="61-61"];
n7 [cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])", label="copyrightYears.Length == 0", span="62-62"];
n10 [cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])", label="this.isSymbolUpper = isSymbolUpper", span="65-65"];
n11 [cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])", label="this.author = author", span="66-66"];
n12 [cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])", label="this.copyrightYears = copyrightYears", span="67-67"];
n13 [cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])", label="this.builderSize = 12 + author.Length + (4 * copyrightYears.Length) + ExtraLength", span="68-68"];
n6 [cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])", label="throw new ArgumentException(''author'');", span="61-61"];
n15 [cluster="string.IsNullOrWhiteSpace(string)", label="Entry string.IsNullOrWhiteSpace(string)", span="0-0"];
n8 [cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])", label="throw new ArgumentOutOfRangeException(''copyrightYears'');", span="62-62"];
n9 [cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])", label="int ExtraLength = 10", span="64-64"];
n14 [cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])", label="Exit CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])", span="59-59"];
n17 [cluster="System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", label="Entry System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", span="0-0"];
n16 [cluster="System.ArgumentException.ArgumentException(string)", label="Entry System.ArgumentException.ArgumentException(string)", span="0-0"];
n18 [cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo()", label="Entry CommandLine.Text.CopyrightInfo.CopyrightInfo()", span="74-74"];
n19 [cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo()", label="Exit CommandLine.Text.CopyrightInfo.CopyrightInfo()", span="74-74"];
n20 [cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(System.Reflection.AssemblyCopyrightAttribute)", label="Entry CommandLine.Text.CopyrightInfo.CopyrightInfo(System.Reflection.AssemblyCopyrightAttribute)", span="83-83"];
n21 [cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(System.Reflection.AssemblyCopyrightAttribute)", label="this.attribute = attribute", span="85-85"];
n22 [cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(System.Reflection.AssemblyCopyrightAttribute)", label="Exit CommandLine.Text.CopyrightInfo.CopyrightInfo(System.Reflection.AssemblyCopyrightAttribute)", span="83-83"];
n23 [cluster="CommandLine.Text.CopyrightInfo.implicit operator string(CommandLine.Text.CopyrightInfo)", label="Entry CommandLine.Text.CopyrightInfo.implicit operator string(CommandLine.Text.CopyrightInfo)", span="128-128"];
n24 [cluster="CommandLine.Text.CopyrightInfo.implicit operator string(CommandLine.Text.CopyrightInfo)", label="return info.ToString();", span="130-130"];
n25 [cluster="CommandLine.Text.CopyrightInfo.implicit operator string(CommandLine.Text.CopyrightInfo)", label="Exit CommandLine.Text.CopyrightInfo.implicit operator string(CommandLine.Text.CopyrightInfo)", span="128-128"];
n26 [cluster="CommandLine.Text.CopyrightInfo.ToString()", label="Entry CommandLine.Text.CopyrightInfo.ToString()", span="137-137"];
n27 [cluster="CommandLine.Text.CopyrightInfo.ToString()", label="this.attribute != null", span="139-139"];
n28 [cluster="CommandLine.Text.CopyrightInfo.ToString()", label="return this.attribute.Copyright;", span="141-141"];
n29 [cluster="CommandLine.Text.CopyrightInfo.ToString()", label="var builder = new StringBuilder(this.builderSize)", span="144-144"];
n30 [cluster="CommandLine.Text.CopyrightInfo.ToString()", label="builder.Append(CopyrightWord)", span="145-145"];
n39 [cluster="System.Text.StringBuilder.StringBuilder(int)", label="Entry System.Text.StringBuilder.StringBuilder(int)", span="0-0"];
n31 [cluster="CommandLine.Text.CopyrightInfo.ToString()", label="builder.Append(' ')", span="146-146"];
n32 [cluster="CommandLine.Text.CopyrightInfo.ToString()", label="builder.Append(this.isSymbolUpper ? SymbolUpper : SymbolLower)", span="147-147"];
n33 [cluster="CommandLine.Text.CopyrightInfo.ToString()", label="builder.Append(' ')", span="148-148"];
n34 [cluster="CommandLine.Text.CopyrightInfo.ToString()", label="builder.Append(FormatYears(this.copyrightYears))", span="149-149"];
n35 [cluster="CommandLine.Text.CopyrightInfo.ToString()", label="builder.Append(' ')", span="150-150"];
n36 [cluster="CommandLine.Text.CopyrightInfo.ToString()", label="builder.Append(this.author)", span="151-151"];
n37 [cluster="CommandLine.Text.CopyrightInfo.ToString()", label="return builder.ToString();", span="152-152"];
n40 [cluster="System.Text.StringBuilder.Append(string)", label="Entry System.Text.StringBuilder.Append(string)", span="0-0"];
n41 [cluster="System.Text.StringBuilder.Append(char)", label="Entry System.Text.StringBuilder.Append(char)", span="0-0"];
n42 [cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])", label="Entry CommandLine.Text.CopyrightInfo.FormatYears(int[])", span="161-161"];
n38 [cluster="CommandLine.Text.CopyrightInfo.ToString()", label="Exit CommandLine.Text.CopyrightInfo.ToString()", span="137-137"];
n43 [cluster="System.Text.StringBuilder.ToString()", label="Entry System.Text.StringBuilder.ToString()", span="0-0"];
n44 [cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])", label="years.Length == 1", span="163-163"];
n45 [cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])", label="return years[0].ToString(CultureInfo.InvariantCulture);", span="165-165"];
n46 [cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])", label="var yearsPart = new StringBuilder(years.Length * 6)", span="168-168"];
n48 [cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])", label="i < years.Length", span="169-169"];
n49 [cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])", label="yearsPart.Append(years[i].ToString(CultureInfo.InvariantCulture))", span="171-171"];
n51 [cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])", label="next < years.Length", span="173-173"];
n52 [cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])", label="yearsPart.Append(years[next] - years[i] > 1 ? '' - '' : '', '')", span="175-175"];
n47 [cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])", label="int i = 0", span="169-169"];
n54 [cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])", label="return yearsPart.ToString();", span="179-179"];
n50 [cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])", label="int next = i + 1", span="172-172"];
n53 [cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])", label="i++", span="169-169"];
n56 [cluster="int.ToString(System.IFormatProvider)", label="Entry int.ToString(System.IFormatProvider)", span="0-0"];
n55 [cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])", label="Exit CommandLine.Text.CopyrightInfo.FormatYears(int[])", span="161-161"];
d6 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedLengthTruncator(string, int, string)", color=green, community=0, label="Assert.Equal(expectedOutput, input.Truncate(length, Truncator.FixedLength))", prediction=0, span="28-28"];
d5 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedLengthTruncator(string, int, string)", label="Entry Humanizer.Tests.TruncatorTests.TruncateWithFixedLengthTruncator(string, int, string)", span="26-26"];
d7 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedLengthTruncator(string, int, string)", label="Exit Humanizer.Tests.TruncatorTests.TruncateWithFixedLengthTruncator(string, int, string)", span="26-26"];
d8 [cluster="string.Truncate(int, Humanizer.ITruncator)", label="Entry string.Truncate(int, Humanizer.ITruncator)", span="27-27"];
d4 [cluster="Unk.Equal", label="Entry Unk.Equal", span=""];
d10 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfCharactersTruncator(string, int, string)", label="Assert.Equal(expectedOutput, input.Truncate(length, Truncator.FixedNumberOfCharacters))", span="40-40"];
d13 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfWordsTruncator(string, int, string)", label="Assert.Equal(expectedOutput, input.Truncate(length, Truncator.FixedNumberOfWords))", span="53-53"];
d1 [cluster="Humanizer.Tests.TruncatorTests.Truncate(string, int, string)", label="Assert.Equal(expectedOutput, input.Truncate(length))", span="16-16"];
d16 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationString(string, int, string, string)", label="Assert.Equal(expectedOutput, input.Truncate(length, truncationString))", span="67-67"];
d20 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedLengthTruncator(string, int, string, string)", label="Assert.Equal(expectedOutput, input.Truncate(length, truncationString, Truncator.FixedLength))", span="82-82"];
d24 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfCharactersTruncator(string, int, string, string)", label="Assert.Equal(expectedOutput, input.Truncate(length, truncationString, Truncator.FixedNumberOfCharacters))", span="97-97"];
d27 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfWordsTruncator(string, int, string, string)", label="Assert.Equal(expectedOutput, input.Truncate(length, truncationString, Truncator.FixedNumberOfWords))", span="112-112"];
d9 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfCharactersTruncator(string, int, string)", label="Entry Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfCharactersTruncator(string, int, string)", span="38-38"];
d11 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfCharactersTruncator(string, int, string)", label="Exit Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfCharactersTruncator(string, int, string)", span="38-38"];
d12 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfWordsTruncator(string, int, string)", label="Entry Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfWordsTruncator(string, int, string)", span="51-51"];
d14 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfWordsTruncator(string, int, string)", label="Exit Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfWordsTruncator(string, int, string)", span="51-51"];
d0 [cluster="Humanizer.Tests.TruncatorTests.Truncate(string, int, string)", label="Entry Humanizer.Tests.TruncatorTests.Truncate(string, int, string)", span="14-14"];
d2 [cluster="Humanizer.Tests.TruncatorTests.Truncate(string, int, string)", label="Exit Humanizer.Tests.TruncatorTests.Truncate(string, int, string)", span="14-14"];
d3 [cluster="string.Truncate(int)", label="Entry string.Truncate(int)", span="15-15"];
d15 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationString(string, int, string, string)", label="Entry Humanizer.Tests.TruncatorTests.TruncateWithTruncationString(string, int, string, string)", span="65-65"];
d17 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationString(string, int, string, string)", label="Exit Humanizer.Tests.TruncatorTests.TruncateWithTruncationString(string, int, string, string)", span="65-65"];
d18 [cluster="string.Truncate(int, string)", label="Entry string.Truncate(int, string)", span="39-39"];
d19 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedLengthTruncator(string, int, string, string)", label="Entry Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedLengthTruncator(string, int, string, string)", span="80-80"];
d21 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedLengthTruncator(string, int, string, string)", label="Exit Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedLengthTruncator(string, int, string, string)", span="80-80"];
d22 [cluster="string.Truncate(int, string, Humanizer.ITruncator)", label="Entry string.Truncate(int, string, Humanizer.ITruncator)", span="52-52"];
d23 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfCharactersTruncator(string, int, string, string)", label="Entry Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfCharactersTruncator(string, int, string, string)", span="95-95"];
d25 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfCharactersTruncator(string, int, string, string)", label="Exit Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfCharactersTruncator(string, int, string, string)", span="95-95"];
d26 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfWordsTruncator(string, int, string, string)", label="Entry Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfWordsTruncator(string, int, string, string)", span="110-110"];
d28 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfWordsTruncator(string, int, string, string)", label="Exit Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfWordsTruncator(string, int, string, string)", span="110-110"];
m0_4 [cluster="CommandLine.Parser.FormatCommandLine<T>(T)", file="UnParserExtensionsTests.cs", label="Entry CommandLine.Parser.FormatCommandLine<T>(T)", span="17-17"];
m0_0 [cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line(CommandLine.Tests.Fakes.FakeOptions, string)", file="UnParserExtensionsTests.cs", label="Entry CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line(CommandLine.Tests.Fakes.FakeOptions, string)", span="21-21"];
m0_1 [cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line(CommandLine.Tests.Fakes.FakeOptions, string)", color=green, community=1, file="UnParserExtensionsTests.cs", label="new Parser()\r                .FormatCommandLine(options)\r                .ShouldBeEquivalentTo(result)", prediction=1, span="23-25"];
m0_2 [cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line(CommandLine.Tests.Fakes.FakeOptions, string)", file="UnParserExtensionsTests.cs", label="Exit CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line(CommandLine.Tests.Fakes.FakeOptions, string)", span="21-21"];
m0_5 [cluster="Unk.ShouldBeEquivalentTo", file="UnParserExtensionsTests.cs", label="Entry Unk.ShouldBeEquivalentTo", span=""];
m0_3 [cluster="CommandLine.Parser.Parser()", file="UnParserExtensionsTests.cs", label="Entry CommandLine.Parser.Parser()", span="26-26"];
n57 -> n27  [color=darkseagreen4, key=1, label="CommandLine.Text.CopyrightInfo", style=dashed];
n57 -> n28  [color=darkseagreen4, key=1, label="CommandLine.Text.CopyrightInfo", style=dashed];
n57 -> n30  [color=darkseagreen4, key=1, label="CommandLine.Text.CopyrightInfo", style=dashed];
n57 -> n32  [color=darkseagreen4, key=1, label="CommandLine.Text.CopyrightInfo", style=dashed];
n57 -> n34  [color=darkseagreen4, key=1, label="CommandLine.Text.CopyrightInfo", style=dashed];
n57 -> n36  [color=darkseagreen4, key=1, label="CommandLine.Text.CopyrightInfo", style=dashed];
n4 -> n7  [color=darkseagreen4, key=1, label="params int[]", style=dashed];
n29 -> n31  [color=darkseagreen4, key=1, label=builder, style=dashed];
n29 -> n32  [color=darkseagreen4, key=1, label=builder, style=dashed];
n29 -> n33  [color=darkseagreen4, key=1, label=builder, style=dashed];
n29 -> n34  [color=darkseagreen4, key=1, label=builder, style=dashed];
n29 -> n35  [color=darkseagreen4, key=1, label=builder, style=dashed];
n29 -> n36  [color=darkseagreen4, key=1, label=builder, style=dashed];
n29 -> n37  [color=darkseagreen4, key=1, label=builder, style=dashed];
n42 -> n45  [color=darkseagreen4, key=1, label="int[]", style=dashed];
n42 -> n48  [color=darkseagreen4, key=1, label="int[]", style=dashed];
n42 -> n49  [color=darkseagreen4, key=1, label="int[]", style=dashed];
n42 -> n51  [color=darkseagreen4, key=1, label="int[]", style=dashed];
n42 -> n52  [color=darkseagreen4, key=1, label="int[]", style=dashed];
n46 -> n49  [color=darkseagreen4, key=1, label=yearsPart, style=dashed];
n46 -> n52  [color=darkseagreen4, key=1, label=yearsPart, style=dashed];
n46 -> n54  [color=darkseagreen4, key=1, label=yearsPart, style=dashed];
n47 -> n49  [color=darkseagreen4, key=1, label=i, style=dashed];
n47 -> n52  [color=darkseagreen4, key=1, label=i, style=dashed];
n47 -> n53  [color=darkseagreen4, key=1, label=i, style=dashed];
n50 -> n52  [color=darkseagreen4, key=1, label=next, style=dashed];
n53 -> n53  [color=darkseagreen4, key=1, label=i, style=dashed];
}
