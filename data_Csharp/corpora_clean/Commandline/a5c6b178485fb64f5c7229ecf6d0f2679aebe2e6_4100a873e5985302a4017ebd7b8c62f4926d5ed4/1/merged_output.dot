digraph  {
m0_13 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="InstanceBuilder.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m0_0 [cluster="CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)", span="13-13"];
m0_1 [cluster="CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)", file="InstanceBuilder.cs", label="return new List<Func<IEnumerable<string>, IEnumerable<Error>>>\r\n                {\r\n                    HelpCommand(nameComparer)\r\n                };", span="15-18"];
m0_2 [cluster="CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)", file="InstanceBuilder.cs", label="Exit CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)", span="13-13"];
m0_11 [cluster="System.StringComparer.Equals(string, string)", file="InstanceBuilder.cs", label="Entry System.StringComparer.Equals(string, string)", span="0-0"];
m0_7 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="24-27"];
m0_8 [cluster="lambda expression", file="InstanceBuilder.cs", label="nameComparer.Equals(''--help'', arguments.First())\r\n                        ? new Error[] { new HelpRequestedError() }\r\n                        : Enumerable.Empty<Error>()", span="25-27"];
m0_9 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="24-27"];
m0_10 [cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="InstanceBuilder.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0"];
m0_12 [cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="InstanceBuilder.cs", label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="357-357"];
m0_4 [cluster="CommandLine.Core.PreprocessorGuards.HelpCommand(System.StringComparer)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.PreprocessorGuards.HelpCommand(System.StringComparer)", span="21-21"];
m0_5 [cluster="CommandLine.Core.PreprocessorGuards.HelpCommand(System.StringComparer)", color=red, community=0, file="InstanceBuilder.cs", label="4: return\r\n                arguments =>\r\n                    nameComparer.Equals(''--help'', arguments.First())\r\n                        ? new Error[] { new HelpRequestedError() }\r\n                        : Enumerable.Empty<Error>();", span="23-27"];
m0_6 [cluster="CommandLine.Core.PreprocessorGuards.HelpCommand(System.StringComparer)", file="InstanceBuilder.cs", label="Exit CommandLine.Core.PreprocessorGuards.HelpCommand(System.StringComparer)", span="21-21"];
m0_3 [cluster="System.Collections.Generic.List<T>.List()", file="InstanceBuilder.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m0_14 [file="InstanceBuilder.cs", label="System.StringComparer", span=""];
m1_40 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="82-82"];
m1_41 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range()", span="94-94"];
m1_42 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { 10, 20, 30, 40 }", span="97-97"];
m1_43 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-i'', ''10'', ''20'', ''30'', ''40'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="100-104"];
m1_62 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="6-6"];
m1_151 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="386-386"];
m1_152 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="391-395"];
m1_153 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="InstanceBuilderTests.cs", label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="398-398"];
m1_154 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="386-386"];
m1_54 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", span="113-113"];
m1_266 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="637-637"];
m1_267 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="642-646"];
m1_268 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="InstanceBuilderTests.cs", label="Assert.True(expected.Equals(result.Value.StringValue))", span="649-649"];
m1_269 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="637-637"];
m1_307 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="741-741"];
m1_308 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithNullables(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="746-750"];
m1_309 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="InstanceBuilderTests.cs", label="expected.ShouldBeEquivalentTo(result.Value.NullableLong)", span="753-753"];
m1_310 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="741-741"];
m1_78 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316"];
m1_166 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="429-429"];
m1_167 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="432-438"];
m1_168 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs", label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="439-439"];
m1_170 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="452-452"];
m1_169 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="442-449"];
m1_171 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="429-429"];
m1_93 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue(),\r\n                new[] { ''one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="240-244"];
m1_90 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="222-222"];
m1_92 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="237-237"];
m1_94 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="247-247"];
m1_258 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="616-616"];
m1_259 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="619-619"];
m1_260 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="622-626"];
m1_261 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="629-629"];
m1_262 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="616-616"];
m1_55 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="158-158"];
m1_108 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="11-11"];
m1_203 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", span="4-4"];
m1_73 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceWithoutRange(),\r\n                new[] { ''1'', ''2'', ''3'', ''4'', ''5'', ''6'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="169-173"];
m1_74 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", file="InstanceBuilderTests.cs", label="expectedResult.ShouldHave().AllProperties().EqualTo(result.Value)", span="176-176"];
m1_75 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", span="160-160"];
m1_76 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="208-208"];
m1_77 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="170-170"];
m1_246 [cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", file="InstanceBuilderTests.cs", label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="272-272"];
m1_91 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="234-234"];
m1_95 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="234-234"];
m1_183 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11"];
m1_314 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="761-761"];
m1_315 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithFSharpOption(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="766-770"];
m1_317 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="InstanceBuilderTests.cs", label="expectedValue.ShouldBeEquivalentTo(result.Value.FileName.Value)", span="775-775"];
m1_318 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="InstanceBuilderTests.cs", label="expectedSome.ShouldBeEquivalentTo(FSharpOption<string>.get_IsSome(result.Value.FileName))", span="777-777"];
m1_316 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="InstanceBuilderTests.cs", label="result.Value.FileName != null", span="773-773"];
m1_319 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="761-761"];
m1_298 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", span="9-9"];
m1_306 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", span="4-4"];
m1_58 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="158-158"];
m1_6 [cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6"];
m1_250 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="597-597"];
m1_251 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="600-600"];
m1_252 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="603-607"];
m1_253 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="610-610"];
m1_254 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="597-597"];
m1_109 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="277-277"];
m1_110 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="280-280"];
m1_111 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''3'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="283-287"];
m1_112 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="290-290"];
m1_113 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="277-277"];
m1_7 [cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="338-338"];
m1_104 [cluster="Unk.ShouldBeEquivalentTo", file="InstanceBuilderTests.cs", label="Entry Unk.ShouldBeEquivalentTo", span=""];
m1_172 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33"];
m1_341 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="827-827"];
m1_342 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithScalarValueAndSequenceStringAdjacent(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="832-836"];
m1_343 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="InstanceBuilderTests.cs", label="expected.ShouldBeEquivalentTo(result.Value)", span="839-839"];
m1_344 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="827-827"];
m1_82 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator()", color=green, community=0, file="InstanceBuilderTests.cs", label="5: var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                new[] { ''--long-seq'', ''1;1234;59678'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="191-195"];
m1_143 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="364-364"];
m1_144 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceWithoutRange(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="369-373"];
m1_145 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="InstanceBuilderTests.cs", label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="376-376"];
m1_146 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="364-364"];
m1_56 [cluster="Unk.ShouldHave", file="InstanceBuilderTests.cs", label="Entry Unk.ShouldHave", span=""];
m1_57 [cluster="Unk.AllProperties", file="InstanceBuilderTests.cs", label="Entry Unk.AllProperties", span=""];
m1_31 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="91-91"];
m1_32 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequence(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="96-100"];
m1_33 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_double_value()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_double_value()", span="75-75"];
m1_34 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_double_value()", file="InstanceBuilderTests.cs", label="var expectedResult = -.123D", span="78-78"];
m1_13 [cluster="lambda expression", file="InstanceBuilderTests.cs", label=fakeOptions, span="29-29"];
m1_12 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="29-29"];
m1_14 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="29-29"];
m1_20 [cluster="Unk.Equal", file="InstanceBuilderTests.cs", label="Entry Unk.Equal", span=""];
m1_21 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="44-44"];
m1_22 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="50-50"];
m1_27 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value()", file="InstanceBuilderTests.cs", label="Assert.Equal(expectedResult, result.Value.DoubleValue)", span="69-69"];
m1_28 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value()", span="56-56"];
m1_29 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="63-63"];
m1_36 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_double_value()", file="InstanceBuilderTests.cs", label="Assert.Equal(expectedResult, result.Value.DoubleValue)", span="88-88"];
m1_37 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_double_value()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_double_value()", span="75-75"];
m1_38 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="82-82"];
m1_44 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Value.IntSequence))", span="107-107"];
m1_45 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range()", span="94-94"];
m1_46 [cluster="Unk.SequenceEqual", file="InstanceBuilderTests.cs", label="Entry Unk.SequenceEqual", span=""];
m1_51 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", file="InstanceBuilderTests.cs", label="var expectedResult = new FakeOptionsWithEnum\r\n                {\r\n                    Colors = Colors.Green\r\n                }", span="116-119"];
m1_52 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''Green'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="122-126"];
m1_53 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", file="InstanceBuilderTests.cs", label="expectedResult.ShouldHave().AllProperties().EqualTo(result.Value)", span="129-129"];
m1_59 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="123-123"];
m1_60 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="164-164"];
m1_61 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="164-164"];
m1_70 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="183-183"];
m1_71 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", span="160-160"];
m1_72 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", file="InstanceBuilderTests.cs", label="var expectedResult = new FakeOptionsWithSequenceWithoutRange\r\n                {\r\n                    LongSequence = new[] { 1L, 2L, 3L, 4L, 5L, 6L }\r\n                }", span="163-166"];
m1_79 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="202-202"];
m1_80 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator()", span="182-182"];
m1_81 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator()", color=green, community=0, file="InstanceBuilderTests.cs", label="4: var expectedResult = new FakeOptionsWithSequenceAndSeparator\r\n                {\r\n                    LongSequence = new[] { 1L, 1234L, 59678L }\r\n                }", span="185-188"];
m1_88 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="222-222"];
m1_89 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="222-222"];
m1_96 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="241-241"];
m1_97 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="241-241"];
m1_98 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="241-241"];
m1_105 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="265-265"];
m1_106 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithEnum()", span="265-265"];
m1_107 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="265-265"];
m1_115 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="284-284"];
m1_116 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithEnum()", span="284-284"];
m1_117 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="284-284"];
m1_123 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceBuilderTests.cs", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = null\r\n            }", span="261-264"];
m1_124 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="266-270"];
m1_125 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceBuilderTests.cs", label="expectedResult.ShouldHave().AllProperties().EqualTo(result.Value)", span="273-273"];
m1_131 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="322-322"];
m1_132 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="281-284"];
m1_133 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="286-290"];
m1_140 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="347-347"];
m1_141 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithValues()", span="347-347"];
m1_142 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="347-347"];
m1_147 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="370-370"];
m1_148 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSequenceWithoutRange()", span="370-370"];
m1_149 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="370-370"];
m1_155 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="392-392"];
m1_156 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSequenceAndSeparator()", span="392-392"];
m1_157 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="392-392"];
m1_163 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="414-414"];
m1_164 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSequenceAndSeparator()", span="414-414"];
m1_165 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="414-414"];
m1_173 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="443-443"];
m1_176 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="444-446"];
m1_174 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithValues()", span="443-443"];
m1_175 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="443-443"];
m1_177 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="445-446"];
m1_181 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="446-446"];
m1_185 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="446-446"];
m1_178 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="444-446"];
m1_180 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="446-446"];
m1_182 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="446-446"];
m1_184 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="446-446"];
m1_186 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="446-446"];
m1_194 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="469-469"];
m1_195 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSets()", span="469-469"];
m1_196 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="469-469"];
m1_204 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="489-489"];
m1_205 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionWithRequiredAndSet()", span="489-489"];
m1_206 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="489-489"];
m1_212 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="509-509"];
m1_213 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionWithRequiredAndSet()", span="509-509"];
m1_214 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="509-509"];
m1_221 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="529-529"];
m1_222 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionWithRequiredAndSet()", span="529-529"];
m1_223 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="529-529"];
m1_229 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="547-547"];
m1_230 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionWithRequired()", span="547-547"];
m1_231 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="547-547"];
m1_238 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="566-566"];
m1_239 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptions()", span="566-566"];
m1_240 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="566-566"];
m1_247 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="585-585"];
m1_248 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptions()", span="585-585"];
m1_249 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="585-585"];
m1_255 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="604-604"];
m1_256 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptions()", span="604-604"];
m1_257 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="604-604"];
m1_263 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="623-623"];
m1_264 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptions()", span="623-623"];
m1_265 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="623-623"];
m1_271 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="643-643"];
m1_272 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptions()", span="643-643"];
m1_273 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="643-643"];
m1_279 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="662-662"];
m1_280 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithRequiredValue()", span="662-662"];
m1_281 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="662-662"];
m1_287 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="684-684"];
m1_288 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptions()", span="684-684"];
m1_289 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="684-684"];
m1_295 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="703-703"];
m1_296 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSequenceMinMaxEqual()", span="703-703"];
m1_297 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="703-703"];
m1_303 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="725-725"];
m1_304 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithNullables()", span="725-725"];
m1_305 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="725-725"];
m1_311 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="747-747"];
m1_312 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithNullables()", span="747-747"];
m1_313 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="747-747"];
m1_321 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="767-767"];
m1_322 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithFSharpOption()", span="767-767"];
m1_323 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="767-767"];
m1_331 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="791-791"];
m1_332 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithFSharpOption()", span="791-791"];
m1_333 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="791-791"];
m1_338 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="814-814"];
m1_339 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithRequiredValue()", span="814-814"];
m1_340 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="814-814"];
m1_345 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="833-833"];
m1_346 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="833-833"];
m1_347 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="833-833"];
m1_86 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="228-228"];
m1_47 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="136-136"];
m1_39 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", span="6-6"];
m1_10 [cluster="CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", file="InstanceBuilderTests.cs", label="Entry CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", span="87-87"];
m1_30 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", span="4-4"];
m1_85 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="221-225"];
m1_158 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="6-6"];
m1_179 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="31-31"];
m1_193 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294"];
m1_232 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4"];
m1_48 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="141-145"];
m1_49 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="InstanceBuilderTests.cs", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="148-148"];
m1_50 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", span="113-113"];
m1_15 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="44-44"];
m1_17 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="InstanceBuilderTests.cs", label="Assert.Equal(expected, result.Value.LongValue)", span="56-56"];
m1_16 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="49-53"];
m1_18 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="44-44"];
m1_19 [cluster="Unk.Equal", file="InstanceBuilderTests.cs", label="Entry Unk.Equal", span=""];
m1_118 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="296-296"];
m1_119 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="299-299"];
m1_120 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''Yellow'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="302-306"];
m1_121 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="309-309"];
m1_122 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="296-296"];
m1_139 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6"];
m1_23 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="67-67"];
m1_24 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value()", span="56-56"];
m1_25 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value()", file="InstanceBuilderTests.cs", label="var expectedResult = .123D", span="59-59"];
m1_26 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithDouble(),\r\n                new[] { ''0.123'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="62-66"];
m1_282 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", span="4-4"];
m1_11 [cluster="Unk.True", file="InstanceBuilderTests.cs", label="Entry Unk.True", span=""];
m1_274 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="655-655"];
m1_275 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new MissingRequiredOptionError(NameInfo.EmptyName) }", span="658-658"];
m1_276 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithRequiredValue(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="661-665"];
m1_277 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="668-668"];
m1_278 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="655-655"];
m1_233 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="559-559"];
m1_234 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="562-562"];
m1_235 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="565-569"];
m1_236 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="572-572"];
m1_237 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="559-559"];
m1_324 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()", span="6-6"];
m1_320 [cluster="Unk.get_IsSome", file="InstanceBuilderTests.cs", label="Entry Unk.get_IsSome", span=""];
m1_187 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
m1_0 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="19-19"];
m1_1 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs", label="var fakeOptions = new FakeOptions()", span="22-22"];
m1_2 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs", label="var expectedResult = ParserResult.Create(\r\n                ParserResultType.Options,\r\n                fakeOptions, new Error[] { new HelpRequestedError() })", span="23-25"];
m1_3 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => fakeOptions,\r\n                new[] { ''--help'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="28-32"];
m1_4 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.Equals(result))", span="35-35"];
m1_5 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="19-19"];
m1_224 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="540-540"];
m1_225 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="543-543"];
m1_226 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequired(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="546-550"];
m1_227 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="553-553"];
m1_228 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="540-540"];
m1_215 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="520-520"];
m1_216 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs", label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="522-526"];
m1_217 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="528-532"];
m1_218 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="535-535"];
m1_219 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="520-520"];
m1_35 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_double_value()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithDouble(),\r\n                new[] { ''-0.123'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="81-85"];
m1_126 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="259-259"];
m1_127 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="318-318"];
m1_128 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''RED'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="321-325"];
m1_129 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="328-328"];
m1_130 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="315-315"];
m1_68 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="261-261"];
m1_334 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="808-808"];
m1_335 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithRequiredValue(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="813-817"];
m1_336 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="InstanceBuilderTests.cs", label="expected.ShouldBeEquivalentTo(result.Value)", span="820-820"];
m1_337 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="808-808"];
m1_83 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="215-215"];
m1_84 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="218-218"];
m1_87 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="215-215"];
m1_63 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="138-144"];
m1_64 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="147-151"];
m1_65 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", color=red, community=0, file="InstanceBuilderTests.cs", label="5: expectedResult.ShouldHave().AllProperties().EqualTo(result.Value)", span="154-154"];
m1_66 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="135-135"];
m1_67 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="176-176"];
m1_134 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs", label="expectedResult.ShouldHave().AllProperties().EqualTo(result.Value)", span="293-293"];
m1_135 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="279-279"];
m1_136 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="346-350"];
m1_137 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="353-353"];
m1_138 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="334-334"];
m1_348 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="6-6"];
m1_197 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4"];
m1_270 [cluster="string.Equals(string)", file="InstanceBuilderTests.cs", label="Entry string.Equals(string)", span="0-0"];
m1_69 [cluster="CommandLine.NameInfo.NameInfo(string, string)", file="InstanceBuilderTests.cs", label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20"];
m1_325 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="785-785"];
m1_326 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithFSharpOption(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="790-794"];
m1_328 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="InstanceBuilderTests.cs", label="expectedValue.ShouldBeEquivalentTo(result.Value.Offset.Value)", span="799-799"];
m1_329 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="InstanceBuilderTests.cs", label="expectedSome.ShouldBeEquivalentTo(FSharpOption<int>.get_IsSome(result.Value.Offset))", span="801-801"];
m1_327 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="InstanceBuilderTests.cs", label="result.Value.Offset != null", span="797-797"];
m1_330 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="785-785"];
m1_9 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12"];
m1_150 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="6-6"];
m1_159 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="408-408"];
m1_160 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="413-417"];
m1_161 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="InstanceBuilderTests.cs", label="expected.ShouldBeEquivalentTo(result.Value.StringSequence)", span="420-420"];
m1_162 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="408-408"];
m1_220 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283"];
m1_299 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="719-719"];
m1_300 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithNullables(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="724-728"];
m1_301 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="InstanceBuilderTests.cs", label="expected.ShouldBeEquivalentTo(result.Value.NullableInt)", span="731-731"];
m1_302 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="719-719"];
m1_241 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="578-578"];
m1_242 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="581-581"];
m1_243 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="584-588"];
m1_244 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="591-591"];
m1_245 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="578-578"];
m1_207 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="501-501"];
m1_208 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="503-506"];
m1_209 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="508-512"];
m1_210 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="515-515"];
m1_211 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="501-501"];
m1_290 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="696-696"];
m1_291 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="699-699"];
m1_292 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceMinMaxEqual(),\r\n                new[] { ''one'', ''two'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="702-706"];
m1_293 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="709-709"];
m1_294 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="696-696"];
m1_8 [cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="InstanceBuilderTests.cs", label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="100-100"];
m1_100 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="259-259"];
m1_101 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="264-268"];
m1_102 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="InstanceBuilderTests.cs", label="expected.ShouldBeEquivalentTo(result.Value.Colors)", span="271-271"];
m1_103 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="259-259"];
m1_99 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="6-6"];
m1_283 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="678-678"];
m1_284 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="683-687"];
m1_285 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="InstanceBuilderTests.cs", label="expected.ShouldBeEquivalentTo(result.Value.StringValue)", span="690-690"];
m1_286 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="678-678"];
m1_114 [cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs", label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="305-305"];
m1_198 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="481-481"];
m1_199 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceBuilderTests.cs", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = null\r\n            }", span="483-486"];
m1_200 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="488-492"];
m1_201 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceBuilderTests.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="495-495"];
m1_202 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="481-481"];
m1_188 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="458-458"];
m1_189 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl'')),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''))\r\n                }", span="461-465"];
m1_190 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSets(),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="468-472"];
m1_191 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="475-475"];
m1_192 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="458-458"];
m1_349 [file="InstanceBuilderTests.cs", label=fakeOptions, span=""];
m1_350 [file="InstanceBuilderTests.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
m2_43 [cluster="Humanizer.Tests.InflectorTests.Underscore(string, string)", file="Tokenizer.cs", label="Entry Humanizer.Tests.InflectorTests.Underscore(string, string)", span="146-146"];
m2_44 [cluster="Humanizer.Tests.InflectorTests.Underscore(string, string)", file="Tokenizer.cs", label="Assert.Equal(expectedOuput, input.Underscore())", span="148-148"];
m2_45 [cluster="Humanizer.Tests.InflectorTests.Underscore(string, string)", file="Tokenizer.cs", label="Exit Humanizer.Tests.InflectorTests.Underscore(string, string)", span="146-146"];
m2_5 [cluster="Humanizer.Tests.InflectorTests.PluralizeAlreadyPluralWord(string, string)", file="Tokenizer.cs", label="Entry Humanizer.Tests.InflectorTests.PluralizeAlreadyPluralWord(string, string)", span="43-43"];
m2_6 [cluster="Humanizer.Tests.InflectorTests.PluralizeAlreadyPluralWord(string, string)", file="Tokenizer.cs", label="Assert.Equal(plural, plural.Pluralize(Plurality.Plural))", span="45-45"];
m2_7 [cluster="Humanizer.Tests.InflectorTests.PluralizeAlreadyPluralWord(string, string)", file="Tokenizer.cs", label="Exit Humanizer.Tests.InflectorTests.PluralizeAlreadyPluralWord(string, string)", span="43-43"];
m2_12 [cluster="Humanizer.Tests.InflectorTests.Singularize(string, string)", file="Tokenizer.cs", label="Entry Humanizer.Tests.InflectorTests.Singularize(string, string)", span="58-58"];
m2_13 [cluster="Humanizer.Tests.InflectorTests.Singularize(string, string)", color=red, community=0, file="Tokenizer.cs", label="1: Assert.Equal(singular, plural.Singularize())", span="60-60"];
m2_14 [cluster="Humanizer.Tests.InflectorTests.Singularize(string, string)", file="Tokenizer.cs", label="Exit Humanizer.Tests.InflectorTests.Singularize(string, string)", span="58-58"];
m2_47 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="Entry Humanizer.Tests.PluralTestSource.GetEnumerator()", span="154-154"];
m2_48 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''search'', ''searches''};", span="156-156"];
m2_49 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''switch'', ''switches''};", span="157-157"];
m2_50 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''fix'', ''fixes''};", span="158-158"];
m2_51 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''box'', ''boxes''};", span="159-159"];
m2_52 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''process'', ''processes''};", span="160-160"];
m2_53 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''address'', ''addresses''};", span="161-161"];
m2_54 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''case'', ''cases''};", span="162-162"];
m2_55 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''stack'', ''stacks''};", span="163-163"];
m2_56 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''wish'', ''wishes''};", span="164-164"];
m2_57 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''fish'', ''fish''};", span="165-165"];
m2_58 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''category'', ''categories''};", span="167-167"];
m2_59 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''query'', ''queries''};", span="168-168"];
m2_60 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''ability'', ''abilities''};", span="169-169"];
m2_61 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''agency'', ''agencies''};", span="170-170"];
m2_62 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''movie'', ''movies''};", span="171-171"];
m2_63 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''archive'', ''archives''};", span="173-173"];
m2_64 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''index'', ''indices''};", span="175-175"];
m2_65 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''wife'', ''wives''};", span="177-177"];
m2_66 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''safe'', ''saves''};", span="178-178"];
m2_67 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''half'', ''halves''};", span="179-179"];
m2_68 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''move'', ''moves''};", span="181-181"];
m2_69 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''salesperson'', ''salespeople''};", span="183-183"];
m2_70 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''person'', ''people''};", span="184-184"];
m2_71 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''spokesman'', ''spokesmen''};", span="186-186"];
m2_72 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''man'', ''men''};", span="187-187"];
m2_73 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''woman'', ''women''};", span="188-188"];
m2_74 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''basis'', ''bases''};", span="190-190"];
m2_75 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''diagnosis'', ''diagnoses''};", span="191-191"];
m2_76 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''datum'', ''data''};", span="193-193"];
m2_77 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''medium'', ''media''};", span="194-194"];
m2_78 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''analysis'', ''analyses''};", span="195-195"];
m2_79 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''node_child'', ''node_children''};", span="197-197"];
m2_80 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''child'', ''children''};", span="198-198"];
m2_81 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''experience'', ''experiences''};", span="200-200"];
m2_82 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''day'', ''days''};", span="201-201"];
m2_83 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''comment'', ''comments''};", span="203-203"];
m2_84 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''foobar'', ''foobars''};", span="204-204"];
m2_85 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''newsletter'', ''newsletters''};", span="205-205"];
m2_86 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''old_news'', ''old_news''};", span="207-207"];
m2_87 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''news'', ''news''};", span="208-208"];
m2_88 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''series'', ''series''};", span="210-210"];
m2_89 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''species'', ''species''};", span="211-211"];
m2_90 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''quiz'', ''quizzes''};", span="213-213"];
m2_91 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''perspective'', ''perspectives''};", span="215-215"];
m2_92 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''ox'', ''oxen''};", span="217-217"];
m2_93 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''photo'', ''photos''};", span="218-218"];
m2_94 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''buffalo'', ''buffaloes''};", span="219-219"];
m2_95 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''tomato'', ''tomatoes''};", span="220-220"];
m2_96 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''dwarf'', ''dwarves''};", span="221-221"];
m2_97 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''elf'', ''elves''};", span="222-222"];
m2_98 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''information'', ''information''};", span="223-223"];
m2_99 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''equipment'', ''equipment''};", span="224-224"];
m2_100 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''bus'', ''buses''};", span="225-225"];
m2_101 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''status'', ''statuses''};", span="226-226"];
m2_102 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''status_code'', ''status_codes''};", span="227-227"];
m2_103 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''mouse'', ''mice''};", span="228-228"];
m2_104 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''louse'', ''lice''};", span="230-230"];
m2_105 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''house'', ''houses''};", span="231-231"];
m2_106 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''octopus'', ''octopi''};", span="232-232"];
m2_107 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''virus'', ''viri''};", span="233-233"];
m2_108 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''alias'', ''aliases''};", span="234-234"];
m2_109 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''portfolio'', ''portfolios''};", span="235-235"];
m2_110 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''vertex'', ''vertices''};", span="237-237"];
m2_111 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''matrix'', ''matrices''};", span="238-238"];
m2_112 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''axis'', ''axes''};", span="240-240"];
m2_113 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''testis'', ''testes''};", span="241-241"];
m2_114 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''crisis'', ''crises''};", span="242-242"];
m2_115 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''rice'', ''rice''};", span="244-244"];
m2_116 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''shoe'', ''shoes''};", span="245-245"];
m2_117 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''horse'', ''horses''};", span="247-247"];
m2_118 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''prize'', ''prizes''};", span="248-248"];
m2_119 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''edge'', ''edges''};", span="249-249"];
m2_120 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''goose'', ''geese''};", span="252-252"];
m2_121 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''deer'', ''deer''};", span="253-253"];
m2_122 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''sheep'', ''sheep''};", span="254-254"];
m2_123 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''wolf'', ''wolves''};", span="255-255"];
m2_124 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''volcano'', ''volcanoes''};", span="256-256"];
m2_125 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''aircraft'', ''aircraft''};", span="257-257"];
m2_126 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''alumna'', ''alumnae''};", span="258-258"];
m2_127 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''alumnus'', ''alumni''};", span="259-259"];
m2_128 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="yield return new object[] {''fungus'', ''fungi''};", span="260-260"];
m2_129 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="Tokenizer.cs", label="Exit Humanizer.Tests.PluralTestSource.GetEnumerator()", span="154-154"];
m2_27 [cluster="Humanizer.Tests.InflectorTests.Dasherize(string, string)", file="Tokenizer.cs", label="Entry Humanizer.Tests.InflectorTests.Dasherize(string, string)", span="96-96"];
m2_28 [cluster="Humanizer.Tests.InflectorTests.Dasherize(string, string)", file="Tokenizer.cs", label="Assert.Equal(input.Dasherize(), expectedOutput)", span="98-98"];
m2_29 [cluster="Humanizer.Tests.InflectorTests.Dasherize(string, string)", file="Tokenizer.cs", label="Exit Humanizer.Tests.InflectorTests.Dasherize(string, string)", span="96-96"];
m2_8 [cluster="Humanizer.Tests.InflectorTests.PluralizeWordsWithUnknownPlurality(string, string)", file="Tokenizer.cs", label="Entry Humanizer.Tests.InflectorTests.PluralizeWordsWithUnknownPlurality(string, string)", span="50-50"];
m2_9 [cluster="Humanizer.Tests.InflectorTests.PluralizeWordsWithUnknownPlurality(string, string)", file="Tokenizer.cs", label="Assert.Equal(plural, plural.Pluralize(Plurality.CouldBeEither))", span="52-52"];
m2_10 [cluster="Humanizer.Tests.InflectorTests.PluralizeWordsWithUnknownPlurality(string, string)", file="Tokenizer.cs", label="Assert.Equal(plural, singular.Pluralize(Plurality.CouldBeEither))", span="53-53"];
m2_11 [cluster="Humanizer.Tests.InflectorTests.PluralizeWordsWithUnknownPlurality(string, string)", file="Tokenizer.cs", label="Exit Humanizer.Tests.InflectorTests.PluralizeWordsWithUnknownPlurality(string, string)", span="50-50"];
m2_16 [cluster="Humanizer.Tests.InflectorTests.SingularizeAlreadySingularWord(string, string)", file="Tokenizer.cs", label="Entry Humanizer.Tests.InflectorTests.SingularizeAlreadySingularWord(string, string)", span="65-65"];
m2_17 [cluster="Humanizer.Tests.InflectorTests.SingularizeAlreadySingularWord(string, string)", color=red, community=0, file="Tokenizer.cs", label="4: Assert.Equal(singular, singular.Singularize(Plurality.Singular))", span="67-67"];
m2_18 [cluster="Humanizer.Tests.InflectorTests.SingularizeAlreadySingularWord(string, string)", file="Tokenizer.cs", label="Exit Humanizer.Tests.InflectorTests.SingularizeAlreadySingularWord(string, string)", span="65-65"];
m2_3 [cluster="string.Pluralize(Humanizer.Plurality)", file="Tokenizer.cs", label="Entry string.Pluralize(Humanizer.Plurality)", span="170-170"];
m2_26 [cluster="string.Titleize()", file="Tokenizer.cs", label="Entry string.Titleize()", span="239-239"];
m2_35 [cluster="Humanizer.Tests.InflectorTests.Pascalize(string, string)", file="Tokenizer.cs", label="Entry Humanizer.Tests.InflectorTests.Pascalize(string, string)", span="119-119"];
m2_36 [cluster="Humanizer.Tests.InflectorTests.Pascalize(string, string)", file="Tokenizer.cs", label="Assert.Equal(expectedOutput, input.Pascalize())", span="121-121"];
m2_37 [cluster="Humanizer.Tests.InflectorTests.Pascalize(string, string)", file="Tokenizer.cs", label="Exit Humanizer.Tests.InflectorTests.Pascalize(string, string)", span="119-119"];
m2_30 [cluster="string.Dasherize()", file="Tokenizer.cs", label="Entry string.Dasherize()", span="282-282"];
m2_46 [cluster="string.Underscore()", file="Tokenizer.cs", label="Entry string.Underscore()", span="270-270"];
m2_0 [cluster="Humanizer.Tests.InflectorTests.Pluralize(string, string)", file="Tokenizer.cs", label="Entry Humanizer.Tests.InflectorTests.Pluralize(string, string)", span="36-36"];
m2_1 [cluster="Humanizer.Tests.InflectorTests.Pluralize(string, string)", file="Tokenizer.cs", label="Assert.Equal(plural, singular.Pluralize())", span="38-38"];
m2_2 [cluster="Humanizer.Tests.InflectorTests.Pluralize(string, string)", file="Tokenizer.cs", label="Exit Humanizer.Tests.InflectorTests.Pluralize(string, string)", span="36-36"];
m2_15 [cluster="string.Singularize(Humanizer.Plurality)", file="Tokenizer.cs", label="Entry string.Singularize(Humanizer.Plurality)", span="194-194"];
m2_23 [cluster="Humanizer.Tests.InflectorTests.Titleize(string, string)", file="Tokenizer.cs", label="Entry Humanizer.Tests.InflectorTests.Titleize(string, string)", span="86-86"];
m2_24 [cluster="Humanizer.Tests.InflectorTests.Titleize(string, string)", file="Tokenizer.cs", label="Assert.Equal(expectedOuput, input.Titleize())", span="88-88"];
m2_25 [cluster="Humanizer.Tests.InflectorTests.Titleize(string, string)", file="Tokenizer.cs", label="Exit Humanizer.Tests.InflectorTests.Titleize(string, string)", span="86-86"];
m2_39 [cluster="Humanizer.Tests.InflectorTests.Camelize(string, string)", file="Tokenizer.cs", label="Entry Humanizer.Tests.InflectorTests.Camelize(string, string)", span="133-133"];
m2_40 [cluster="Humanizer.Tests.InflectorTests.Camelize(string, string)", file="Tokenizer.cs", label="Assert.Equal(expectedOutput, input.Camelize())", span="135-135"];
m2_41 [cluster="Humanizer.Tests.InflectorTests.Camelize(string, string)", file="Tokenizer.cs", label="Exit Humanizer.Tests.InflectorTests.Camelize(string, string)", span="133-133"];
m2_31 [cluster="Humanizer.Tests.InflectorTests.Hyphenate(string, string)", file="Tokenizer.cs", label="Entry Humanizer.Tests.InflectorTests.Hyphenate(string, string)", span="106-106"];
m2_32 [cluster="Humanizer.Tests.InflectorTests.Hyphenate(string, string)", file="Tokenizer.cs", label="Assert.Equal(input.Hyphenate(), expectedOutput)", span="108-108"];
m2_33 [cluster="Humanizer.Tests.InflectorTests.Hyphenate(string, string)", file="Tokenizer.cs", label="Exit Humanizer.Tests.InflectorTests.Hyphenate(string, string)", span="106-106"];
m2_130 [cluster="Humanizer.Tests.PluralTestSource.System.Collections.IEnumerable.GetEnumerator()", file="Tokenizer.cs", label="Entry Humanizer.Tests.PluralTestSource.System.Collections.IEnumerable.GetEnumerator()", span="263-263"];
m2_131 [cluster="Humanizer.Tests.PluralTestSource.System.Collections.IEnumerable.GetEnumerator()", file="Tokenizer.cs", label="return GetEnumerator();", span="265-265"];
m2_132 [cluster="Humanizer.Tests.PluralTestSource.System.Collections.IEnumerable.GetEnumerator()", file="Tokenizer.cs", label="Exit Humanizer.Tests.PluralTestSource.System.Collections.IEnumerable.GetEnumerator()", span="263-263"];
m2_38 [cluster="string.Pascalize()", file="Tokenizer.cs", label="Entry string.Pascalize()", span="249-249"];
m2_42 [cluster="string.Camelize()", file="Tokenizer.cs", label="Entry string.Camelize()", span="259-259"];
m2_19 [cluster="Humanizer.Tests.InflectorTests.SingularizeWordsWithUnknownSingularity(string, string)", file="Tokenizer.cs", label="Entry Humanizer.Tests.InflectorTests.SingularizeWordsWithUnknownSingularity(string, string)", span="72-72"];
m2_20 [cluster="Humanizer.Tests.InflectorTests.SingularizeWordsWithUnknownSingularity(string, string)", file="Tokenizer.cs", label="Assert.Equal(singular, singular.Singularize(Plurality.CouldBeEither))", span="74-74"];
m2_21 [cluster="Humanizer.Tests.InflectorTests.SingularizeWordsWithUnknownSingularity(string, string)", file="Tokenizer.cs", label="Assert.Equal(singular, plural.Singularize(Plurality.CouldBeEither))", span="75-75"];
m2_22 [cluster="Humanizer.Tests.InflectorTests.SingularizeWordsWithUnknownSingularity(string, string)", file="Tokenizer.cs", label="Exit Humanizer.Tests.InflectorTests.SingularizeWordsWithUnknownSingularity(string, string)", span="72-72"];
m2_4 [cluster="Unk.Equal", file="Tokenizer.cs", label="Entry Unk.Equal", span=""];
m2_34 [cluster="string.Hyphenate()", file="Tokenizer.cs", label="Entry string.Hyphenate()", span="292-292"];
m2_133 [file="Tokenizer.cs", label="Humanizer.Tests.PluralTestSource", span=""];
m3_37 [cluster="System.Collections.Generic.List<T>.ToArray()", file="TokenizerTests.cs", label="Entry System.Collections.Generic.List<T>.ToArray()", span="0-0"];
m3_35 [cluster="string.Format(string, params object[])", file="TokenizerTests.cs", label="Entry string.Format(string, params object[])", span="0-0"];
m3_36 [cluster="System.Collections.Generic.List<T>.Add(T)", file="TokenizerTests.cs", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
m3_39 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.ConvertToOrdinal(int, Humanizer.GrammaticalGender)", file="TokenizerTests.cs", label="Entry Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.ConvertToOrdinal(int, Humanizer.GrammaticalGender)", span="94-94"];
m3_42 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.ConvertToOrdinal(int, Humanizer.GrammaticalGender)", file="TokenizerTests.cs", label="towords = Convert(number)", span="98-98"];
m3_41 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.ConvertToOrdinal(int, Humanizer.GrammaticalGender)", file="TokenizerTests.cs", label="!Ordinals.TryGetValue(number, out towords)", span="97-97"];
m3_43 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.ConvertToOrdinal(int, Humanizer.GrammaticalGender)", file="TokenizerTests.cs", label="gender == GrammaticalGender.Feminine", span="100-100"];
m3_44 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.ConvertToOrdinal(int, Humanizer.GrammaticalGender)", file="TokenizerTests.cs", label="towords = towords.TrimEnd('o') + ''a''", span="101-101"];
m3_46 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.ConvertToOrdinal(int, Humanizer.GrammaticalGender)", file="TokenizerTests.cs", label="towords = towords.TrimEnd('o')", span="103-103"];
m3_47 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.ConvertToOrdinal(int, Humanizer.GrammaticalGender)", file="TokenizerTests.cs", label="return towords;", span="105-105"];
m3_40 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.ConvertToOrdinal(int, Humanizer.GrammaticalGender)", file="TokenizerTests.cs", label="string towords", span="96-96"];
m3_45 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.ConvertToOrdinal(int, Humanizer.GrammaticalGender)", file="TokenizerTests.cs", label="number % 10 == 1 || number % 10 == 3", span="102-102"];
m3_48 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.ConvertToOrdinal(int, Humanizer.GrammaticalGender)", file="TokenizerTests.cs", label="Exit Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.ConvertToOrdinal(int, Humanizer.GrammaticalGender)", span="94-94"];
m3_33 [cluster="string.Format(string, object)", file="TokenizerTests.cs", label="Entry string.Format(string, object)", span="0-0"];
m3_32 [cluster="System.Math.Abs(int)", file="TokenizerTests.cs", label="Entry System.Math.Abs(int)", span="0-0"];
m3_38 [cluster="string.Join(string, params string[])", file="TokenizerTests.cs", label="Entry string.Join(string, params string[])", span="0-0"];
m3_49 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.TryGetValue(TKey, out TValue)", file="TokenizerTests.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.TryGetValue(TKey, out TValue)", span="0-0"];
m3_0 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="TokenizerTests.cs", label="Entry Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", span="27-27"];
m3_1 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", color=green, community=0, file="TokenizerTests.cs", label="0: number == 0", span="29-29"];
m3_2 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", color=green, community=0, file="TokenizerTests.cs", label="0: return ''cero'';", span="30-30"];
m3_3 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", color=green, community=0, file="TokenizerTests.cs", label="0: number < 0", span="32-32"];
m3_4 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", color=green, community=0, file="TokenizerTests.cs", label="0: return string.Format(''menos {0}'', Convert(Math.Abs(number)));", span="33-33"];
m3_5 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", color=green, community=0, file="TokenizerTests.cs", label="1: var parts = new List<string>()", span="35-35"];
m3_6 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", color=green, community=0, file="TokenizerTests.cs", label="0: (number / 1000000000) > 0", span="37-37"];
m3_7 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", color=green, community=0, file="TokenizerTests.cs", label="0: parts.Add(number / 1000000000 == 1\r\n                    ? string.Format(''mil millones'')\r\n                    : string.Format(''{0} mil millones'', Convert(number / 1000000000)))", span="39-41"];
m3_9 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", color=green, community=0, file="TokenizerTests.cs", label="0: (number / 1000000) > 0", span="46-46"];
m3_8 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", color=green, community=0, file="TokenizerTests.cs", label="0: number %= 1000000000", span="43-43"];
m3_10 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", color=green, community=0, file="TokenizerTests.cs", label="0: parts.Add(number / 1000000 == 1\r\n                    ? string.Format(''un millón'')\r\n                    : string.Format(''{0} millones'', Convert(number / 1000000)))", span="48-50"];
m3_11 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", color=green, community=0, file="TokenizerTests.cs", label="0: number %= 1000000", span="52-52"];
m3_12 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="TokenizerTests.cs", label="(number / 1000) > 0", span="55-55"];
m3_13 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="TokenizerTests.cs", label="parts.Add(number / 1000 == 1\r\n                    ? string.Format(''mil'')\r\n                    : string.Format(''{0} mil'', Convert(number / 1000)))", span="57-59"];
m3_14 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="TokenizerTests.cs", label="number %= 1000", span="61-61"];
m3_15 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="TokenizerTests.cs", label="(number / 100) > 0", span="64-64"];
m3_16 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="TokenizerTests.cs", label="parts.Add(number == 100 ? string.Format(''cien'') : HundredsMap[(number / 100)])", span="66-66"];
m3_17 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="TokenizerTests.cs", label="number %= 100", span="67-67"];
m3_18 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="TokenizerTests.cs", label="number > 0", span="70-70"];
m3_19 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="TokenizerTests.cs", label="number < 30", span="72-72"];
m3_20 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="TokenizerTests.cs", label="parts.Add(UnitsMap[number])", span="73-73"];
m3_21 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="TokenizerTests.cs", label="number > 20 && number < 30", span="74-74"];
m3_22 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="TokenizerTests.cs", label="var lastPart = TensMap[number / 10]", span="75-75"];
m3_23 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="TokenizerTests.cs", label="(number % 10) > 0", span="76-76"];
m3_24 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="TokenizerTests.cs", label="lastPart += string.Format('' {0}'', UnitsMap[number % 10])", span="77-77"];
m3_26 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="TokenizerTests.cs", label="var lastPart = TensMap[number / 10]", span="83-83"];
m3_27 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="TokenizerTests.cs", label="(number % 10) > 0", span="84-84"];
m3_28 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="TokenizerTests.cs", label="lastPart += string.Format('' y {0}'', UnitsMap[number % 10])", span="85-85"];
m3_25 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="TokenizerTests.cs", label="parts.Add(lastPart)", span="79-79"];
m3_29 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="TokenizerTests.cs", label="parts.Add(lastPart)", span="87-87"];
m3_30 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="TokenizerTests.cs", label="return string.Join('' '', parts.ToArray());", span="91-91"];
m3_31 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="TokenizerTests.cs", label="Exit Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", span="27-27"];
m3_50 [cluster="string.TrimEnd(params char[])", file="TokenizerTests.cs", label="Entry string.TrimEnd(params char[])", span="0-0"];
m3_34 [cluster="System.Collections.Generic.List<T>.List()", file="TokenizerTests.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m3_51 [file="TokenizerTests.cs", label="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter", span=""];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_3  [key=2, style=dotted];
m0_1 -> m0_4  [key=2, style=dotted];
m0_2 -> m0_0  [color=blue, key=0, style=bold];
m0_7 -> m0_8  [key=0, style=solid];
m0_8 -> m0_9  [key=0, style=solid];
m0_8 -> m0_10  [key=2, style=dotted];
m0_8 -> m0_11  [key=2, style=dotted];
m0_8 -> m0_12  [key=2, style=dotted];
m0_8 -> m0_13  [key=2, style=dotted];
m0_9 -> m0_7  [color=blue, key=0, style=bold];
m0_4 -> m0_5  [color=red, key=0, style=solid];
m0_4 -> m0_8  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_5 -> m0_6  [color=red, key=0, style=solid];
m0_5 -> m0_8  [color=red, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m0_6 -> m0_4  [color=blue, key=0, style=bold];
m0_14 -> m0_8  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_40 -> m1_41  [key=0, style=solid];
m1_40 -> m1_42  [color=darkseagreen4, key=1, label="int[]", style=dashed];
m1_40 -> m1_38  [color=blue, key=0, style=bold];
m1_41 -> m1_42  [key=0, style=solid];
m1_41 -> m1_9  [key=2, style=dotted];
m1_41 -> m1_44  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_42 -> m1_43  [key=0, style=solid];
m1_42 -> m1_35  [key=2, style=dotted];
m1_42 -> m1_11  [key=2, style=dotted];
m1_42 -> m1_44  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_43 -> m1_40  [color=blue, key=0, style=bold];
m1_43 -> m1_9  [key=2, style=dotted];
m1_43 -> m1_44  [key=0, style=solid];
m1_43 -> m1_47  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_151 -> m1_152  [key=0, style=solid];
m1_151 -> m1_153  [color=darkseagreen4, key=1, label="long[]", style=dashed];
m1_152 -> m1_153  [key=0, style=solid];
m1_152 -> m1_9  [key=2, style=dotted];
m1_152 -> m1_155  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_153 -> m1_154  [key=0, style=solid];
m1_153 -> m1_104  [key=2, style=dotted];
m1_154 -> m1_151  [color=blue, key=0, style=bold];
m1_54 -> m1_50  [color=blue, key=0, style=bold];
m1_266 -> m1_267  [key=0, style=solid];
m1_266 -> m1_268  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_267 -> m1_268  [key=0, style=solid];
m1_267 -> m1_9  [key=2, style=dotted];
m1_267 -> m1_271  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_268 -> m1_269  [key=0, style=solid];
m1_268 -> m1_270  [key=2, style=dotted];
m1_268 -> m1_11  [key=2, style=dotted];
m1_269 -> m1_266  [color=blue, key=0, style=bold];
m1_307 -> m1_308  [key=0, style=solid];
m1_307 -> m1_309  [color=darkseagreen4, key=1, label="long?", style=dashed];
m1_308 -> m1_309  [key=0, style=solid];
m1_308 -> m1_9  [key=2, style=dotted];
m1_308 -> m1_311  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_309 -> m1_310  [key=0, style=solid];
m1_309 -> m1_104  [key=2, style=dotted];
m1_310 -> m1_307  [color=blue, key=0, style=bold];
m1_166 -> m1_167  [key=0, style=solid];
m1_166 -> m1_90  [key=0, style=solid];
m1_167 -> m1_168  [key=0, style=solid];
m1_167 -> m1_139  [key=2, style=dotted];
m1_167 -> m1_170  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_168 -> m1_169  [key=0, style=solid];
m1_168 -> m1_92  [key=0, style=solid];
m1_170 -> m1_171  [key=0, style=solid];
m1_170 -> m1_104  [key=2, style=dotted];
m1_169 -> m1_170  [key=0, style=solid];
m1_169 -> m1_172  [key=2, style=dotted];
m1_169 -> m1_173  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_169 -> m1_176  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_171 -> m1_166  [color=blue, key=0, style=bold];
m1_93 -> m1_56  [key=2, style=dotted];
m1_93 -> m1_57  [key=2, style=dotted];
m1_93 -> m1_58  [key=2, style=dotted];
m1_93 -> m1_94  [key=0, style=solid];
m1_93 -> m1_9  [key=2, style=dotted];
m1_93 -> m1_96  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_90 -> m1_93  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_90 -> m1_168  [key=0, style=solid];
m1_90 -> m1_139  [key=2, style=dotted];
m1_90 -> m1_88  [color=blue, key=0, style=bold];
m1_92 -> m1_93  [key=0, style=solid];
m1_92 -> m1_172  [key=2, style=dotted];
m1_92 -> m1_173  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_92 -> m1_176  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_92 -> m1_78  [key=2, style=dotted];
m1_92 -> m1_94  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_94 -> m1_166  [color=blue, key=0, style=bold];
m1_94 -> m1_95  [key=0, style=solid];
m1_94 -> m1_35  [key=2, style=dotted];
m1_94 -> m1_11  [key=2, style=dotted];
m1_258 -> m1_259  [key=0, style=solid];
m1_259 -> m1_260  [key=0, style=solid];
m1_259 -> m1_246  [key=2, style=dotted];
m1_259 -> m1_261  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_260 -> m1_261  [key=0, style=solid];
m1_260 -> m1_9  [key=2, style=dotted];
m1_260 -> m1_263  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_261 -> m1_262  [key=0, style=solid];
m1_261 -> m1_35  [key=2, style=dotted];
m1_261 -> m1_11  [key=2, style=dotted];
m1_261 -> m1_46  [key=2, style=dotted];
m1_262 -> m1_258  [color=blue, key=0, style=bold];
m1_55 -> m1_56  [key=0, style=solid];
m1_55 -> m1_57  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m1_73 -> m1_74  [key=0, style=solid];
m1_73 -> m1_9  [key=2, style=dotted];
m1_73 -> m1_77  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_74 -> m1_75  [key=0, style=solid];
m1_74 -> m1_78  [key=2, style=dotted];
m1_74 -> m1_76  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_74 -> m1_56  [key=2, style=dotted];
m1_74 -> m1_57  [key=2, style=dotted];
m1_74 -> m1_58  [key=2, style=dotted];
m1_75 -> m1_76  [key=0, style=solid];
m1_75 -> m1_9  [key=2, style=dotted];
m1_75 -> m1_79  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_75 -> m1_71  [color=blue, key=0, style=bold];
m1_76 -> m1_77  [key=0, style=solid];
m1_76 -> m1_35  [key=2, style=dotted];
m1_76 -> m1_11  [key=2, style=dotted];
m1_77 -> m1_73  [color=blue, key=0, style=bold];
m1_77 -> m1_148  [key=0, style=solid];
m1_91 -> m1_92  [key=0, style=solid];
m1_95 -> m1_91  [color=blue, key=0, style=bold];
m1_314 -> m1_315  [key=0, style=solid];
m1_314 -> m1_317  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_314 -> m1_318  [color=darkseagreen4, key=1, label=bool, style=dashed];
m1_315 -> m1_316  [key=0, style=solid];
m1_315 -> m1_9  [key=2, style=dotted];
m1_315 -> m1_321  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_315 -> m1_317  [color=darkseagreen4, key=1, label=result, style=dashed];
m1_315 -> m1_318  [color=darkseagreen4, key=1, label=result, style=dashed];
m1_317 -> m1_318  [key=0, style=solid];
m1_317 -> m1_104  [key=2, style=dotted];
m1_318 -> m1_319  [key=0, style=solid];
m1_318 -> m1_320  [key=2, style=dotted];
m1_318 -> m1_104  [key=2, style=dotted];
m1_316 -> m1_317  [key=0, style=solid];
m1_316 -> m1_318  [key=0, style=solid];
m1_319 -> m1_314  [color=blue, key=0, style=bold];
m1_58 -> m1_55  [color=blue, key=0, style=bold];
m1_250 -> m1_251  [key=0, style=solid];
m1_251 -> m1_252  [key=0, style=solid];
m1_251 -> m1_246  [key=2, style=dotted];
m1_251 -> m1_253  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_252 -> m1_253  [key=0, style=solid];
m1_252 -> m1_9  [key=2, style=dotted];
m1_252 -> m1_255  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_253 -> m1_254  [key=0, style=solid];
m1_253 -> m1_35  [key=2, style=dotted];
m1_253 -> m1_11  [key=2, style=dotted];
m1_253 -> m1_46  [key=2, style=dotted];
m1_254 -> m1_250  [color=blue, key=0, style=bold];
m1_109 -> m1_110  [key=0, style=solid];
m1_110 -> m1_111  [key=0, style=solid];
m1_110 -> m1_114  [key=2, style=dotted];
m1_110 -> m1_69  [key=2, style=dotted];
m1_110 -> m1_112  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_111 -> m1_112  [key=0, style=solid];
m1_111 -> m1_9  [key=2, style=dotted];
m1_111 -> m1_115  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_112 -> m1_113  [key=0, style=solid];
m1_112 -> m1_35  [key=2, style=dotted];
m1_112 -> m1_11  [key=2, style=dotted];
m1_113 -> m1_109  [color=blue, key=0, style=bold];
m1_341 -> m1_342  [key=0, style=solid];
m1_341 -> m1_343  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent", style=dashed];
m1_342 -> m1_343  [key=0, style=solid];
m1_342 -> m1_9  [key=2, style=dotted];
m1_342 -> m1_345  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_343 -> m1_344  [key=0, style=solid];
m1_343 -> m1_104  [key=2, style=dotted];
m1_344 -> m1_341  [color=blue, key=0, style=bold];
m1_82 -> m1_83  [color=green, key=0, style=solid];
m1_82 -> m1_9  [color=green, key=2, style=dotted];
m1_82 -> m1_86  [color=green, key=1, label="lambda expression", style=dashed];
m1_143 -> m1_144  [key=0, style=solid];
m1_143 -> m1_145  [color=darkseagreen4, key=1, label="long[]", style=dashed];
m1_144 -> m1_145  [key=0, style=solid];
m1_144 -> m1_9  [key=2, style=dotted];
m1_144 -> m1_147  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_145 -> m1_146  [key=0, style=solid];
m1_145 -> m1_104  [key=2, style=dotted];
m1_146 -> m1_143  [color=blue, key=0, style=bold];
m1_56 -> m1_57  [key=0, style=solid];
m1_56 -> m1_9  [key=2, style=dotted];
m1_56 -> m1_59  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_57 -> m1_58  [key=0, style=solid];
m1_57 -> m1_35  [key=2, style=dotted];
m1_57 -> m1_11  [key=2, style=dotted];
m1_31 -> m1_32  [key=0, style=solid];
m1_31 -> m1_33  [color=darkseagreen4, key=1, label="int[]", style=dashed];
m1_32 -> m1_33  [key=0, style=solid];
m1_32 -> m1_9  [key=2, style=dotted];
m1_32 -> m1_36  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_33 -> m1_34  [key=0, style=solid];
m1_33 -> m1_35  [key=2, style=dotted];
m1_33 -> m1_11  [key=2, style=dotted];
m1_34 -> m1_31  [color=blue, key=0, style=bold];
m1_34 -> m1_35  [key=0, style=solid];
m1_34 -> m1_34  [color=darkorchid, key=3, label="Local variable double expectedResult", style=bold];
m1_34 -> m1_36  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_13 -> m1_14  [key=0, style=solid];
m1_12 -> m1_13  [key=0, style=solid];
m1_14 -> m1_12  [color=blue, key=0, style=bold];
m1_20 -> m1_21  [key=0, style=solid];
m1_21 -> m1_22  [key=0, style=solid];
m1_21 -> m1_6  [key=2, style=dotted];
m1_21 -> m1_21  [key=0, style=solid];
m1_22 -> m1_20  [color=blue, key=0, style=bold];
m1_22 -> m1_21  [color=blue, key=0, style=bold];
m1_27 -> m1_28  [key=0, style=solid];
m1_27 -> m1_20  [key=2, style=dotted];
m1_28 -> m1_29  [key=0, style=solid];
m1_28 -> m1_30  [key=2, style=dotted];
m1_28 -> m1_24  [color=blue, key=0, style=bold];
m1_29 -> m1_27  [color=blue, key=0, style=bold];
m1_29 -> m1_29  [color=blue, key=0, style=bold];
m1_29 -> m1_28  [key=0, style=solid];
m1_36 -> m1_37  [key=0, style=solid];
m1_36 -> m1_20  [key=2, style=dotted];
m1_37 -> m1_38  [key=0, style=solid];
m1_37 -> m1_39  [key=2, style=dotted];
m1_37 -> m1_33  [color=blue, key=0, style=bold];
m1_38 -> m1_36  [color=blue, key=0, style=bold];
m1_38 -> m1_39  [key=0, style=solid];
m1_44 -> m1_45  [key=0, style=solid];
m1_44 -> m1_46  [key=2, style=dotted];
m1_44 -> m1_11  [key=2, style=dotted];
m1_45 -> m1_46  [key=0, style=solid];
m1_45 -> m1_6  [key=2, style=dotted];
m1_45 -> m1_41  [color=blue, key=0, style=bold];
m1_46 -> m1_44  [color=blue, key=0, style=bold];
m1_46 -> m1_47  [color=blue, key=0, style=bold];
m1_51 -> m1_52  [key=0, style=solid];
m1_51 -> m1_53  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_51 -> m1_55  [key=2, style=dotted];
m1_52 -> m1_53  [key=0, style=solid];
m1_52 -> m1_54  [key=2, style=dotted];
m1_52 -> m1_9  [key=2, style=dotted];
m1_52 -> m1_59  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_53 -> m1_51  [color=blue, key=0, style=bold];
m1_53 -> m1_56  [key=2, style=dotted];
m1_53 -> m1_57  [key=2, style=dotted];
m1_53 -> m1_58  [key=2, style=dotted];
m1_53 -> m1_54  [key=0, style=solid];
m1_59 -> m1_60  [key=0, style=solid];
m1_59 -> m1_106  [key=0, style=solid];
m1_60 -> m1_61  [key=0, style=solid];
m1_60 -> m1_62  [key=2, style=dotted];
m1_61 -> m1_59  [color=blue, key=0, style=bold];
m1_70 -> m1_71  [key=0, style=solid];
m1_71 -> m1_72  [key=0, style=solid];
m1_71 -> m1_54  [key=2, style=dotted];
m1_72 -> m1_70  [color=blue, key=0, style=bold];
m1_72 -> m1_73  [key=0, style=solid];
m1_72 -> m1_74  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_72 -> m1_150  [key=2, style=dotted];
m1_79 -> m1_80  [key=0, style=solid];
m1_80 -> m1_81  [color=green, key=0, style=solid];
m1_80 -> m1_82  [key=2, style=dotted];
m1_81 -> m1_79  [color=blue, key=0, style=bold];
m1_81 -> m1_82  [color=green, key=0, style=solid];
m1_81 -> m1_85  [color=green, key=2, style=dotted];
m1_81 -> m1_83  [color=green, key=1, label=expectedResult, style=dashed];
m1_88 -> m1_89  [key=0, style=solid];
m1_89 -> m1_90  [key=0, style=solid];
m1_89 -> m1_62  [key=2, style=dotted];
m1_96 -> m1_97  [key=0, style=solid];
m1_97 -> m1_98  [key=0, style=solid];
m1_97 -> m1_99  [key=2, style=dotted];
m1_98 -> m1_96  [color=blue, key=0, style=bold];
m1_105 -> m1_106  [key=0, style=solid];
m1_106 -> m1_107  [key=0, style=solid];
m1_106 -> m1_108  [key=2, style=dotted];
m1_106 -> m1_55  [key=2, style=dotted];
m1_107 -> m1_105  [color=blue, key=0, style=bold];
m1_107 -> m1_59  [color=blue, key=0, style=bold];
m1_115 -> m1_116  [key=0, style=solid];
m1_116 -> m1_117  [key=0, style=solid];
m1_116 -> m1_108  [key=2, style=dotted];
m1_117 -> m1_115  [color=blue, key=0, style=bold];
m1_123 -> m1_124  [key=0, style=solid];
m1_123 -> m1_125  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_123 -> m1_203  [key=2, style=dotted];
m1_124 -> m1_125  [key=0, style=solid];
m1_124 -> m1_108  [key=2, style=dotted];
m1_124 -> m1_9  [key=2, style=dotted];
m1_124 -> m1_204  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_125 -> m1_123  [color=blue, key=0, style=bold];
m1_125 -> m1_56  [key=2, style=dotted];
m1_125 -> m1_57  [key=2, style=dotted];
m1_125 -> m1_58  [key=2, style=dotted];
m1_125 -> m1_126  [key=0, style=solid];
m1_131 -> m1_132  [key=0, style=solid];
m1_132 -> m1_133  [key=0, style=solid];
m1_132 -> m1_108  [key=2, style=dotted];
m1_132 -> m1_134  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_132 -> m1_203  [key=2, style=dotted];
m1_133 -> m1_131  [color=blue, key=0, style=bold];
m1_133 -> m1_9  [key=2, style=dotted];
m1_133 -> m1_134  [key=0, style=solid];
m1_133 -> m1_212  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_140 -> m1_141  [key=0, style=solid];
m1_141 -> m1_142  [key=0, style=solid];
m1_141 -> m1_139  [key=2, style=dotted];
m1_142 -> m1_140  [color=blue, key=0, style=bold];
m1_147 -> m1_148  [key=0, style=solid];
m1_148 -> m1_149  [key=0, style=solid];
m1_148 -> m1_150  [key=2, style=dotted];
m1_149 -> m1_147  [color=blue, key=0, style=bold];
m1_149 -> m1_77  [color=blue, key=0, style=bold];
m1_155 -> m1_156  [key=0, style=solid];
m1_156 -> m1_157  [key=0, style=solid];
m1_156 -> m1_158  [key=2, style=dotted];
m1_156 -> m1_85  [key=2, style=dotted];
m1_157 -> m1_155  [color=blue, key=0, style=bold];
m1_157 -> m1_86  [color=blue, key=0, style=bold];
m1_163 -> m1_164  [key=0, style=solid];
m1_164 -> m1_165  [key=0, style=solid];
m1_164 -> m1_158  [key=2, style=dotted];
m1_165 -> m1_163  [color=blue, key=0, style=bold];
m1_173 -> m1_174  [key=0, style=solid];
m1_176 -> m1_177  [key=0, style=solid];
m1_176 -> m1_181  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_176 -> m1_185  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_174 -> m1_175  [key=0, style=solid];
m1_174 -> m1_139  [key=2, style=dotted];
m1_175 -> m1_173  [color=blue, key=0, style=bold];
m1_177 -> m1_178  [key=0, style=solid];
m1_177 -> m1_179  [key=2, style=dotted];
m1_177 -> m1_180  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_181 -> m1_182  [key=0, style=solid];
m1_181 -> m1_183  [key=2, style=dotted];
m1_181 -> m1_184  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_185 -> m1_186  [key=0, style=solid];
m1_185 -> m1_187  [key=2, style=dotted];
m1_178 -> m1_176  [color=blue, key=0, style=bold];
m1_180 -> m1_181  [key=0, style=solid];
m1_182 -> m1_180  [color=blue, key=0, style=bold];
m1_184 -> m1_185  [key=0, style=solid];
m1_186 -> m1_184  [color=blue, key=0, style=bold];
m1_194 -> m1_195  [key=0, style=solid];
m1_195 -> m1_196  [key=0, style=solid];
m1_195 -> m1_197  [key=2, style=dotted];
m1_196 -> m1_194  [color=blue, key=0, style=bold];
m1_204 -> m1_205  [key=0, style=solid];
m1_205 -> m1_206  [key=0, style=solid];
m1_205 -> m1_203  [key=2, style=dotted];
m1_206 -> m1_204  [color=blue, key=0, style=bold];
m1_212 -> m1_213  [key=0, style=solid];
m1_213 -> m1_214  [key=0, style=solid];
m1_213 -> m1_203  [key=2, style=dotted];
m1_214 -> m1_212  [color=blue, key=0, style=bold];
m1_221 -> m1_222  [key=0, style=solid];
m1_222 -> m1_223  [key=0, style=solid];
m1_222 -> m1_203  [key=2, style=dotted];
m1_223 -> m1_221  [color=blue, key=0, style=bold];
m1_229 -> m1_230  [key=0, style=solid];
m1_230 -> m1_231  [key=0, style=solid];
m1_230 -> m1_232  [key=2, style=dotted];
m1_231 -> m1_229  [color=blue, key=0, style=bold];
m1_238 -> m1_239  [key=0, style=solid];
m1_239 -> m1_240  [key=0, style=solid];
m1_239 -> m1_6  [key=2, style=dotted];
m1_240 -> m1_238  [color=blue, key=0, style=bold];
m1_247 -> m1_248  [key=0, style=solid];
m1_248 -> m1_249  [key=0, style=solid];
m1_248 -> m1_6  [key=2, style=dotted];
m1_249 -> m1_247  [color=blue, key=0, style=bold];
m1_255 -> m1_256  [key=0, style=solid];
m1_256 -> m1_257  [key=0, style=solid];
m1_256 -> m1_6  [key=2, style=dotted];
m1_257 -> m1_255  [color=blue, key=0, style=bold];
m1_263 -> m1_264  [key=0, style=solid];
m1_264 -> m1_265  [key=0, style=solid];
m1_264 -> m1_6  [key=2, style=dotted];
m1_265 -> m1_263  [color=blue, key=0, style=bold];
m1_271 -> m1_272  [key=0, style=solid];
m1_272 -> m1_273  [key=0, style=solid];
m1_272 -> m1_6  [key=2, style=dotted];
m1_273 -> m1_271  [color=blue, key=0, style=bold];
m1_279 -> m1_280  [key=0, style=solid];
m1_280 -> m1_281  [key=0, style=solid];
m1_280 -> m1_282  [key=2, style=dotted];
m1_281 -> m1_279  [color=blue, key=0, style=bold];
m1_287 -> m1_288  [key=0, style=solid];
m1_288 -> m1_289  [key=0, style=solid];
m1_288 -> m1_6  [key=2, style=dotted];
m1_289 -> m1_287  [color=blue, key=0, style=bold];
m1_295 -> m1_296  [key=0, style=solid];
m1_296 -> m1_297  [key=0, style=solid];
m1_296 -> m1_298  [key=2, style=dotted];
m1_297 -> m1_295  [color=blue, key=0, style=bold];
m1_303 -> m1_304  [key=0, style=solid];
m1_304 -> m1_305  [key=0, style=solid];
m1_304 -> m1_306  [key=2, style=dotted];
m1_305 -> m1_303  [color=blue, key=0, style=bold];
m1_311 -> m1_312  [key=0, style=solid];
m1_312 -> m1_313  [key=0, style=solid];
m1_312 -> m1_306  [key=2, style=dotted];
m1_313 -> m1_311  [color=blue, key=0, style=bold];
m1_321 -> m1_322  [key=0, style=solid];
m1_322 -> m1_323  [key=0, style=solid];
m1_322 -> m1_324  [key=2, style=dotted];
m1_323 -> m1_321  [color=blue, key=0, style=bold];
m1_331 -> m1_332  [key=0, style=solid];
m1_332 -> m1_333  [key=0, style=solid];
m1_332 -> m1_324  [key=2, style=dotted];
m1_333 -> m1_331  [color=blue, key=0, style=bold];
m1_338 -> m1_339  [key=0, style=solid];
m1_339 -> m1_340  [key=0, style=solid];
m1_339 -> m1_282  [key=2, style=dotted];
m1_340 -> m1_338  [color=blue, key=0, style=bold];
m1_345 -> m1_346  [key=0, style=solid];
m1_346 -> m1_347  [key=0, style=solid];
m1_346 -> m1_348  [key=2, style=dotted];
m1_347 -> m1_345  [color=blue, key=0, style=bold];
m1_86 -> m1_156  [key=0, style=solid];
m1_86 -> m1_87  [key=0, style=solid];
m1_86 -> m1_35  [key=2, style=dotted];
m1_86 -> m1_11  [key=2, style=dotted];
m1_47 -> m1_45  [key=0, style=solid];
m1_47 -> m1_48  [key=0, style=solid];
m1_47 -> m1_49  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m1_39 -> m1_40  [key=0, style=solid];
m1_39 -> m1_30  [key=2, style=dotted];
m1_85 -> m1_86  [key=0, style=solid];
m1_85 -> m1_9  [key=2, style=dotted];
m1_85 -> m1_88  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_48 -> m1_49  [key=0, style=solid];
m1_48 -> m1_9  [key=2, style=dotted];
m1_48 -> m1_51  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_49 -> m1_50  [key=0, style=solid];
m1_49 -> m1_35  [key=2, style=dotted];
m1_49 -> m1_11  [key=2, style=dotted];
m1_50 -> m1_47  [color=blue, key=0, style=bold];
m1_50 -> m1_51  [key=0, style=solid];
m1_15 -> m1_16  [key=0, style=solid];
m1_15 -> m1_17  [color=darkseagreen4, key=1, label=long, style=dashed];
m1_17 -> m1_9  [key=2, style=dotted];
m1_17 -> m1_18  [key=0, style=solid];
m1_17 -> m1_21  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_17 -> m1_19  [key=2, style=dotted];
m1_16 -> m1_17  [key=0, style=solid];
m1_16 -> m1_16  [color=darkorchid, key=3, label="Local variable int expectedResult", style=bold];
m1_16 -> m1_18  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_16 -> m1_9  [key=2, style=dotted];
m1_16 -> m1_20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_18 -> m1_19  [key=0, style=solid];
m1_18 -> m1_20  [key=2, style=dotted];
m1_18 -> m1_15  [color=blue, key=0, style=bold];
m1_19 -> m1_15  [color=blue, key=0, style=bold];
m1_118 -> m1_119  [key=0, style=solid];
m1_119 -> m1_120  [key=0, style=solid];
m1_119 -> m1_114  [key=2, style=dotted];
m1_119 -> m1_69  [key=2, style=dotted];
m1_119 -> m1_121  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_120 -> m1_121  [key=0, style=solid];
m1_120 -> m1_9  [key=2, style=dotted];
m1_120 -> m1_123  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_121 -> m1_122  [key=0, style=solid];
m1_121 -> m1_35  [key=2, style=dotted];
m1_121 -> m1_11  [key=2, style=dotted];
m1_122 -> m1_118  [color=blue, key=0, style=bold];
m1_23 -> m1_24  [key=0, style=solid];
m1_23 -> m1_25  [color=darkseagreen4, key=1, label=double, style=dashed];
m1_24 -> m1_25  [key=0, style=solid];
m1_24 -> m1_9  [key=2, style=dotted];
m1_24 -> m1_27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_25 -> m1_26  [key=0, style=solid];
m1_25 -> m1_19  [key=2, style=dotted];
m1_25 -> m1_25  [color=darkorchid, key=3, label="Local variable double expectedResult", style=bold];
m1_25 -> m1_27  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_26 -> m1_23  [color=blue, key=0, style=bold];
m1_26 -> m1_9  [key=2, style=dotted];
m1_26 -> m1_27  [key=0, style=solid];
m1_26 -> m1_29  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_274 -> m1_275  [key=0, style=solid];
m1_275 -> m1_276  [key=0, style=solid];
m1_275 -> m1_220  [key=2, style=dotted];
m1_275 -> m1_277  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_276 -> m1_277  [key=0, style=solid];
m1_276 -> m1_9  [key=2, style=dotted];
m1_276 -> m1_279  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_277 -> m1_278  [key=0, style=solid];
m1_277 -> m1_35  [key=2, style=dotted];
m1_277 -> m1_11  [key=2, style=dotted];
m1_278 -> m1_274  [color=blue, key=0, style=bold];
m1_233 -> m1_234  [key=0, style=solid];
m1_234 -> m1_235  [key=0, style=solid];
m1_234 -> m1_78  [key=2, style=dotted];
m1_234 -> m1_69  [key=2, style=dotted];
m1_234 -> m1_236  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_235 -> m1_236  [key=0, style=solid];
m1_235 -> m1_9  [key=2, style=dotted];
m1_235 -> m1_238  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_236 -> m1_237  [key=0, style=solid];
m1_236 -> m1_35  [key=2, style=dotted];
m1_236 -> m1_11  [key=2, style=dotted];
m1_236 -> m1_46  [key=2, style=dotted];
m1_237 -> m1_233  [color=blue, key=0, style=bold];
m1_0 -> m1_1  [key=0, style=solid];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_6  [key=2, style=dotted];
m1_1 -> m1_3  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m1_1 -> m1_13  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m1_2 -> m1_3  [key=0, style=solid];
m1_2 -> m1_7  [key=2, style=dotted];
m1_2 -> m1_8  [key=2, style=dotted];
m1_2 -> m1_4  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_3 -> m1_4  [key=0, style=solid];
m1_3 -> m1_9  [key=2, style=dotted];
m1_3 -> m1_12  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_4 -> m1_5  [key=0, style=solid];
m1_4 -> m1_10  [key=2, style=dotted];
m1_4 -> m1_11  [key=2, style=dotted];
m1_5 -> m1_0  [color=blue, key=0, style=bold];
m1_224 -> m1_225  [key=0, style=solid];
m1_225 -> m1_226  [key=0, style=solid];
m1_225 -> m1_220  [key=2, style=dotted];
m1_225 -> m1_69  [key=2, style=dotted];
m1_225 -> m1_227  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_226 -> m1_227  [key=0, style=solid];
m1_226 -> m1_9  [key=2, style=dotted];
m1_226 -> m1_229  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_227 -> m1_228  [key=0, style=solid];
m1_227 -> m1_35  [key=2, style=dotted];
m1_227 -> m1_11  [key=2, style=dotted];
m1_227 -> m1_46  [key=2, style=dotted];
m1_228 -> m1_224  [color=blue, key=0, style=bold];
m1_215 -> m1_216  [key=0, style=solid];
m1_216 -> m1_217  [key=0, style=solid];
m1_216 -> m1_220  [key=2, style=dotted];
m1_216 -> m1_69  [key=2, style=dotted];
m1_216 -> m1_218  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_217 -> m1_218  [key=0, style=solid];
m1_217 -> m1_9  [key=2, style=dotted];
m1_217 -> m1_221  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_218 -> m1_219  [key=0, style=solid];
m1_218 -> m1_35  [key=2, style=dotted];
m1_218 -> m1_11  [key=2, style=dotted];
m1_218 -> m1_46  [key=2, style=dotted];
m1_219 -> m1_215  [color=blue, key=0, style=bold];
m1_35 -> m1_9  [key=2, style=dotted];
m1_35 -> m1_36  [key=0, style=solid];
m1_35 -> m1_38  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_126 -> m1_127  [key=0, style=solid];
m1_126 -> m1_198  [color=blue, key=0, style=bold];
m1_127 -> m1_128  [key=0, style=solid];
m1_127 -> m1_114  [key=2, style=dotted];
m1_127 -> m1_69  [key=2, style=dotted];
m1_127 -> m1_129  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_128 -> m1_129  [key=0, style=solid];
m1_128 -> m1_9  [key=2, style=dotted];
m1_128 -> m1_131  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_129 -> m1_130  [key=0, style=solid];
m1_129 -> m1_35  [key=2, style=dotted];
m1_129 -> m1_11  [key=2, style=dotted];
m1_130 -> m1_126  [color=blue, key=0, style=bold];
m1_334 -> m1_335  [key=0, style=solid];
m1_334 -> m1_336  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue", style=dashed];
m1_335 -> m1_336  [key=0, style=solid];
m1_335 -> m1_9  [key=2, style=dotted];
m1_335 -> m1_338  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_336 -> m1_337  [key=0, style=solid];
m1_336 -> m1_104  [key=2, style=dotted];
m1_337 -> m1_334  [color=blue, key=0, style=bold];
m1_83 -> m1_84  [key=0, style=solid];
m1_83 -> m1_56  [key=2, style=dotted];
m1_83 -> m1_57  [key=2, style=dotted];
m1_83 -> m1_58  [key=2, style=dotted];
m1_84 -> m1_80  [color=blue, key=0, style=bold];
m1_84 -> m1_85  [key=0, style=solid];
m1_84 -> m1_78  [key=2, style=dotted];
m1_84 -> m1_69  [key=2, style=dotted];
m1_84 -> m1_86  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_87 -> m1_83  [color=blue, key=0, style=bold];
m1_63 -> m1_64  [key=0, style=solid];
m1_63 -> m1_65  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_63 -> m1_139  [key=2, style=dotted];
m1_64 -> m1_65  [color=red, key=0, style=solid];
m1_64 -> m1_68  [key=2, style=dotted];
m1_64 -> m1_69  [key=2, style=dotted];
m1_64 -> m1_66  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_64 -> m1_9  [key=2, style=dotted];
m1_64 -> m1_140  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_65 -> m1_66  [color=red, key=0, style=solid];
m1_65 -> m1_9  [color=red, key=2, style=dotted];
m1_65 -> m1_70  [color=red, key=1, label="lambda expression", style=dashed];
m1_65 -> m1_56  [key=2, style=dotted];
m1_65 -> m1_57  [key=2, style=dotted];
m1_65 -> m1_58  [key=2, style=dotted];
m1_66 -> m1_67  [key=0, style=solid];
m1_66 -> m1_35  [key=2, style=dotted];
m1_66 -> m1_11  [key=2, style=dotted];
m1_66 -> m1_134  [color=blue, key=0, style=bold];
m1_67 -> m1_63  [color=blue, key=0, style=bold];
m1_134 -> m1_135  [key=0, style=solid];
m1_134 -> m1_63  [key=0, style=solid];
m1_134 -> m1_56  [key=2, style=dotted];
m1_134 -> m1_57  [key=2, style=dotted];
m1_134 -> m1_58  [key=2, style=dotted];
m1_135 -> m1_136  [key=0, style=solid];
m1_135 -> m1_139  [key=2, style=dotted];
m1_135 -> m1_137  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_135 -> m1_207  [color=blue, key=0, style=bold];
m1_136 -> m1_137  [key=0, style=solid];
m1_136 -> m1_9  [key=2, style=dotted];
m1_136 -> m1_140  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_137 -> m1_138  [key=0, style=solid];
m1_137 -> m1_104  [key=2, style=dotted];
m1_138 -> m1_134  [color=blue, key=0, style=bold];
m1_325 -> m1_326  [key=0, style=solid];
m1_325 -> m1_328  [color=darkseagreen4, key=1, label=int, style=dashed];
m1_325 -> m1_329  [color=darkseagreen4, key=1, label=bool, style=dashed];
m1_326 -> m1_327  [key=0, style=solid];
m1_326 -> m1_9  [key=2, style=dotted];
m1_326 -> m1_331  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_326 -> m1_328  [color=darkseagreen4, key=1, label=result, style=dashed];
m1_326 -> m1_329  [color=darkseagreen4, key=1, label=result, style=dashed];
m1_328 -> m1_329  [key=0, style=solid];
m1_328 -> m1_104  [key=2, style=dotted];
m1_329 -> m1_330  [key=0, style=solid];
m1_329 -> m1_320  [key=2, style=dotted];
m1_329 -> m1_104  [key=2, style=dotted];
m1_327 -> m1_328  [key=0, style=solid];
m1_327 -> m1_329  [key=0, style=solid];
m1_330 -> m1_325  [color=blue, key=0, style=bold];
m1_159 -> m1_160  [key=0, style=solid];
m1_159 -> m1_161  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m1_160 -> m1_161  [key=0, style=solid];
m1_160 -> m1_9  [key=2, style=dotted];
m1_160 -> m1_163  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_161 -> m1_162  [key=0, style=solid];
m1_161 -> m1_104  [key=2, style=dotted];
m1_162 -> m1_159  [color=blue, key=0, style=bold];
m1_299 -> m1_300  [key=0, style=solid];
m1_299 -> m1_301  [color=darkseagreen4, key=1, label="int?", style=dashed];
m1_300 -> m1_301  [key=0, style=solid];
m1_300 -> m1_9  [key=2, style=dotted];
m1_300 -> m1_303  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_301 -> m1_302  [key=0, style=solid];
m1_301 -> m1_104  [key=2, style=dotted];
m1_302 -> m1_299  [color=blue, key=0, style=bold];
m1_241 -> m1_242  [key=0, style=solid];
m1_242 -> m1_243  [key=0, style=solid];
m1_242 -> m1_246  [key=2, style=dotted];
m1_242 -> m1_244  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_243 -> m1_244  [key=0, style=solid];
m1_243 -> m1_9  [key=2, style=dotted];
m1_243 -> m1_247  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_244 -> m1_245  [key=0, style=solid];
m1_244 -> m1_35  [key=2, style=dotted];
m1_244 -> m1_11  [key=2, style=dotted];
m1_244 -> m1_46  [key=2, style=dotted];
m1_245 -> m1_241  [color=blue, key=0, style=bold];
m1_207 -> m1_208  [key=0, style=solid];
m1_207 -> m1_132  [key=0, style=solid];
m1_208 -> m1_209  [key=0, style=solid];
m1_208 -> m1_203  [key=2, style=dotted];
m1_208 -> m1_210  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_209 -> m1_210  [key=0, style=solid];
m1_209 -> m1_9  [key=2, style=dotted];
m1_209 -> m1_212  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_210 -> m1_211  [key=0, style=solid];
m1_210 -> m1_104  [key=2, style=dotted];
m1_211 -> m1_207  [color=blue, key=0, style=bold];
m1_290 -> m1_291  [key=0, style=solid];
m1_291 -> m1_292  [key=0, style=solid];
m1_291 -> m1_78  [key=2, style=dotted];
m1_291 -> m1_293  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_292 -> m1_293  [key=0, style=solid];
m1_292 -> m1_9  [key=2, style=dotted];
m1_292 -> m1_295  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_293 -> m1_294  [key=0, style=solid];
m1_293 -> m1_35  [key=2, style=dotted];
m1_293 -> m1_11  [key=2, style=dotted];
m1_294 -> m1_290  [color=blue, key=0, style=bold];
m1_100 -> m1_101  [key=0, style=solid];
m1_100 -> m1_102  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
m1_101 -> m1_102  [key=0, style=solid];
m1_101 -> m1_9  [key=2, style=dotted];
m1_101 -> m1_105  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_102 -> m1_103  [key=0, style=solid];
m1_102 -> m1_104  [key=2, style=dotted];
m1_102 -> m1_102  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
m1_103 -> m1_100  [color=blue, key=0, style=bold];
m1_283 -> m1_284  [key=0, style=solid];
m1_283 -> m1_285  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_284 -> m1_285  [key=0, style=solid];
m1_284 -> m1_9  [key=2, style=dotted];
m1_284 -> m1_287  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_285 -> m1_286  [key=0, style=solid];
m1_285 -> m1_104  [key=2, style=dotted];
m1_286 -> m1_283  [color=blue, key=0, style=bold];
m1_198 -> m1_199  [key=0, style=solid];
m1_198 -> m1_123  [key=0, style=solid];
m1_199 -> m1_200  [key=0, style=solid];
m1_199 -> m1_203  [key=2, style=dotted];
m1_199 -> m1_201  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_200 -> m1_201  [key=0, style=solid];
m1_200 -> m1_9  [key=2, style=dotted];
m1_200 -> m1_204  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_201 -> m1_202  [key=0, style=solid];
m1_201 -> m1_104  [key=2, style=dotted];
m1_202 -> m1_198  [color=blue, key=0, style=bold];
m1_188 -> m1_189  [key=0, style=solid];
m1_189 -> m1_190  [key=0, style=solid];
m1_189 -> m1_193  [key=2, style=dotted];
m1_189 -> m1_69  [key=2, style=dotted];
m1_189 -> m1_191  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_190 -> m1_191  [key=0, style=solid];
m1_190 -> m1_9  [key=2, style=dotted];
m1_190 -> m1_194  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_191 -> m1_192  [key=0, style=solid];
m1_191 -> m1_35  [key=2, style=dotted];
m1_191 -> m1_11  [key=2, style=dotted];
m1_191 -> m1_46  [key=2, style=dotted];
m1_192 -> m1_188  [color=blue, key=0, style=bold];
m1_349 -> m1_13  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m1_350 -> m1_181  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_350 -> m1_185  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m2_43 -> m2_44  [key=0, style=solid];
m2_44 -> m2_45  [key=0, style=solid];
m2_44 -> m2_46  [key=2, style=dotted];
m2_44 -> m2_4  [key=2, style=dotted];
m2_45 -> m2_43  [color=blue, key=0, style=bold];
m2_5 -> m2_6  [key=0, style=solid];
m2_6 -> m2_7  [key=0, style=solid];
m2_6 -> m2_3  [key=2, style=dotted];
m2_6 -> m2_4  [key=2, style=dotted];
m2_7 -> m2_5  [color=blue, key=0, style=bold];
m2_12 -> m2_13  [color=red, key=0, style=solid];
m2_13 -> m2_14  [color=red, key=0, style=solid];
m2_13 -> m2_15  [color=red, key=2, style=dotted];
m2_13 -> m2_4  [color=red, key=2, style=dotted];
m2_14 -> m2_12  [color=blue, key=0, style=bold];
m2_47 -> m2_48  [key=0, style=solid];
m2_47 -> m2_49  [color=crimson, key=0, style=bold];
m2_47 -> m2_50  [color=crimson, key=0, style=bold];
m2_47 -> m2_51  [color=crimson, key=0, style=bold];
m2_47 -> m2_52  [color=crimson, key=0, style=bold];
m2_47 -> m2_53  [color=crimson, key=0, style=bold];
m2_47 -> m2_54  [color=crimson, key=0, style=bold];
m2_47 -> m2_55  [color=crimson, key=0, style=bold];
m2_47 -> m2_56  [color=crimson, key=0, style=bold];
m2_47 -> m2_57  [color=crimson, key=0, style=bold];
m2_47 -> m2_58  [color=crimson, key=0, style=bold];
m2_47 -> m2_59  [color=crimson, key=0, style=bold];
m2_47 -> m2_60  [color=crimson, key=0, style=bold];
m2_47 -> m2_61  [color=crimson, key=0, style=bold];
m2_47 -> m2_62  [color=crimson, key=0, style=bold];
m2_47 -> m2_63  [color=crimson, key=0, style=bold];
m2_47 -> m2_64  [color=crimson, key=0, style=bold];
m2_47 -> m2_65  [color=crimson, key=0, style=bold];
m2_47 -> m2_66  [color=crimson, key=0, style=bold];
m2_47 -> m2_67  [color=crimson, key=0, style=bold];
m2_47 -> m2_68  [color=crimson, key=0, style=bold];
m2_47 -> m2_69  [color=crimson, key=0, style=bold];
m2_47 -> m2_70  [color=crimson, key=0, style=bold];
m2_47 -> m2_71  [color=crimson, key=0, style=bold];
m2_47 -> m2_72  [color=crimson, key=0, style=bold];
m2_47 -> m2_73  [color=crimson, key=0, style=bold];
m2_47 -> m2_74  [color=crimson, key=0, style=bold];
m2_47 -> m2_75  [color=crimson, key=0, style=bold];
m2_47 -> m2_76  [color=crimson, key=0, style=bold];
m2_47 -> m2_77  [color=crimson, key=0, style=bold];
m2_47 -> m2_78  [color=crimson, key=0, style=bold];
m2_47 -> m2_79  [color=crimson, key=0, style=bold];
m2_47 -> m2_80  [color=crimson, key=0, style=bold];
m2_47 -> m2_81  [color=crimson, key=0, style=bold];
m2_47 -> m2_82  [color=crimson, key=0, style=bold];
m2_47 -> m2_83  [color=crimson, key=0, style=bold];
m2_47 -> m2_84  [color=crimson, key=0, style=bold];
m2_47 -> m2_85  [color=crimson, key=0, style=bold];
m2_47 -> m2_86  [color=crimson, key=0, style=bold];
m2_47 -> m2_87  [color=crimson, key=0, style=bold];
m2_47 -> m2_88  [color=crimson, key=0, style=bold];
m2_47 -> m2_89  [color=crimson, key=0, style=bold];
m2_47 -> m2_90  [color=crimson, key=0, style=bold];
m2_47 -> m2_91  [color=crimson, key=0, style=bold];
m2_47 -> m2_92  [color=crimson, key=0, style=bold];
m2_47 -> m2_93  [color=crimson, key=0, style=bold];
m2_47 -> m2_94  [color=crimson, key=0, style=bold];
m2_47 -> m2_95  [color=crimson, key=0, style=bold];
m2_47 -> m2_96  [color=crimson, key=0, style=bold];
m2_47 -> m2_97  [color=crimson, key=0, style=bold];
m2_47 -> m2_98  [color=crimson, key=0, style=bold];
m2_47 -> m2_99  [color=crimson, key=0, style=bold];
m2_47 -> m2_100  [color=crimson, key=0, style=bold];
m2_47 -> m2_101  [color=crimson, key=0, style=bold];
m2_47 -> m2_102  [color=crimson, key=0, style=bold];
m2_47 -> m2_103  [color=crimson, key=0, style=bold];
m2_47 -> m2_104  [color=crimson, key=0, style=bold];
m2_47 -> m2_105  [color=crimson, key=0, style=bold];
m2_47 -> m2_106  [color=crimson, key=0, style=bold];
m2_47 -> m2_107  [color=crimson, key=0, style=bold];
m2_47 -> m2_108  [color=crimson, key=0, style=bold];
m2_47 -> m2_109  [color=crimson, key=0, style=bold];
m2_47 -> m2_110  [color=crimson, key=0, style=bold];
m2_47 -> m2_111  [color=crimson, key=0, style=bold];
m2_47 -> m2_112  [color=crimson, key=0, style=bold];
m2_47 -> m2_113  [color=crimson, key=0, style=bold];
m2_47 -> m2_114  [color=crimson, key=0, style=bold];
m2_47 -> m2_115  [color=crimson, key=0, style=bold];
m2_47 -> m2_116  [color=crimson, key=0, style=bold];
m2_47 -> m2_117  [color=crimson, key=0, style=bold];
m2_47 -> m2_118  [color=crimson, key=0, style=bold];
m2_47 -> m2_119  [color=crimson, key=0, style=bold];
m2_47 -> m2_120  [color=crimson, key=0, style=bold];
m2_47 -> m2_121  [color=crimson, key=0, style=bold];
m2_47 -> m2_122  [color=crimson, key=0, style=bold];
m2_47 -> m2_123  [color=crimson, key=0, style=bold];
m2_47 -> m2_124  [color=crimson, key=0, style=bold];
m2_47 -> m2_125  [color=crimson, key=0, style=bold];
m2_47 -> m2_126  [color=crimson, key=0, style=bold];
m2_47 -> m2_127  [color=crimson, key=0, style=bold];
m2_47 -> m2_128  [color=crimson, key=0, style=bold];
m2_48 -> m2_49  [key=0, style=solid];
m2_49 -> m2_50  [key=0, style=solid];
m2_50 -> m2_51  [key=0, style=solid];
m2_51 -> m2_52  [key=0, style=solid];
m2_52 -> m2_53  [key=0, style=solid];
m2_53 -> m2_54  [key=0, style=solid];
m2_54 -> m2_55  [key=0, style=solid];
m2_55 -> m2_56  [key=0, style=solid];
m2_56 -> m2_57  [key=0, style=solid];
m2_57 -> m2_58  [key=0, style=solid];
m2_58 -> m2_59  [key=0, style=solid];
m2_59 -> m2_60  [key=0, style=solid];
m2_60 -> m2_61  [key=0, style=solid];
m2_61 -> m2_62  [key=0, style=solid];
m2_62 -> m2_63  [key=0, style=solid];
m2_63 -> m2_64  [key=0, style=solid];
m2_64 -> m2_65  [key=0, style=solid];
m2_65 -> m2_66  [key=0, style=solid];
m2_66 -> m2_67  [key=0, style=solid];
m2_67 -> m2_68  [key=0, style=solid];
m2_68 -> m2_69  [key=0, style=solid];
m2_69 -> m2_70  [key=0, style=solid];
m2_70 -> m2_71  [key=0, style=solid];
m2_71 -> m2_72  [key=0, style=solid];
m2_72 -> m2_73  [key=0, style=solid];
m2_73 -> m2_74  [key=0, style=solid];
m2_74 -> m2_75  [key=0, style=solid];
m2_75 -> m2_76  [key=0, style=solid];
m2_76 -> m2_77  [key=0, style=solid];
m2_77 -> m2_78  [key=0, style=solid];
m2_78 -> m2_79  [key=0, style=solid];
m2_79 -> m2_80  [key=0, style=solid];
m2_80 -> m2_81  [key=0, style=solid];
m2_81 -> m2_82  [key=0, style=solid];
m2_82 -> m2_83  [key=0, style=solid];
m2_83 -> m2_84  [key=0, style=solid];
m2_84 -> m2_85  [key=0, style=solid];
m2_85 -> m2_86  [key=0, style=solid];
m2_86 -> m2_87  [key=0, style=solid];
m2_87 -> m2_88  [key=0, style=solid];
m2_88 -> m2_89  [key=0, style=solid];
m2_89 -> m2_90  [key=0, style=solid];
m2_90 -> m2_91  [key=0, style=solid];
m2_91 -> m2_92  [key=0, style=solid];
m2_92 -> m2_93  [key=0, style=solid];
m2_93 -> m2_94  [key=0, style=solid];
m2_94 -> m2_95  [key=0, style=solid];
m2_95 -> m2_96  [key=0, style=solid];
m2_96 -> m2_97  [key=0, style=solid];
m2_97 -> m2_98  [key=0, style=solid];
m2_98 -> m2_99  [key=0, style=solid];
m2_99 -> m2_100  [key=0, style=solid];
m2_100 -> m2_101  [key=0, style=solid];
m2_101 -> m2_102  [key=0, style=solid];
m2_102 -> m2_103  [key=0, style=solid];
m2_103 -> m2_104  [key=0, style=solid];
m2_104 -> m2_105  [key=0, style=solid];
m2_105 -> m2_106  [key=0, style=solid];
m2_106 -> m2_107  [key=0, style=solid];
m2_107 -> m2_108  [key=0, style=solid];
m2_108 -> m2_109  [key=0, style=solid];
m2_109 -> m2_110  [key=0, style=solid];
m2_110 -> m2_111  [key=0, style=solid];
m2_111 -> m2_112  [key=0, style=solid];
m2_112 -> m2_113  [key=0, style=solid];
m2_113 -> m2_114  [key=0, style=solid];
m2_114 -> m2_115  [key=0, style=solid];
m2_115 -> m2_116  [key=0, style=solid];
m2_116 -> m2_117  [key=0, style=solid];
m2_117 -> m2_118  [key=0, style=solid];
m2_118 -> m2_119  [key=0, style=solid];
m2_119 -> m2_120  [key=0, style=solid];
m2_120 -> m2_121  [key=0, style=solid];
m2_121 -> m2_122  [key=0, style=solid];
m2_122 -> m2_123  [key=0, style=solid];
m2_123 -> m2_124  [key=0, style=solid];
m2_124 -> m2_125  [key=0, style=solid];
m2_125 -> m2_126  [key=0, style=solid];
m2_126 -> m2_127  [key=0, style=solid];
m2_127 -> m2_128  [key=0, style=solid];
m2_128 -> m2_129  [key=0, style=solid];
m2_129 -> m2_47  [color=blue, key=0, style=bold];
m2_27 -> m2_28  [key=0, style=solid];
m2_28 -> m2_29  [key=0, style=solid];
m2_28 -> m2_30  [key=2, style=dotted];
m2_28 -> m2_4  [key=2, style=dotted];
m2_29 -> m2_27  [color=blue, key=0, style=bold];
m2_8 -> m2_9  [key=0, style=solid];
m2_8 -> m2_10  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_9 -> m2_10  [key=0, style=solid];
m2_9 -> m2_3  [key=2, style=dotted];
m2_9 -> m2_4  [key=2, style=dotted];
m2_10 -> m2_11  [key=0, style=solid];
m2_10 -> m2_3  [key=2, style=dotted];
m2_10 -> m2_4  [key=2, style=dotted];
m2_11 -> m2_8  [color=blue, key=0, style=bold];
m2_16 -> m2_17  [color=red, key=0, style=solid];
m2_17 -> m2_18  [color=red, key=0, style=solid];
m2_17 -> m2_15  [color=red, key=2, style=dotted];
m2_17 -> m2_4  [color=red, key=2, style=dotted];
m2_18 -> m2_16  [color=blue, key=0, style=bold];
m2_35 -> m2_36  [key=0, style=solid];
m2_36 -> m2_37  [key=0, style=solid];
m2_36 -> m2_38  [key=2, style=dotted];
m2_36 -> m2_4  [key=2, style=dotted];
m2_37 -> m2_35  [color=blue, key=0, style=bold];
m2_0 -> m2_1  [key=0, style=solid];
m2_1 -> m2_2  [key=0, style=solid];
m2_1 -> m2_3  [key=2, style=dotted];
m2_1 -> m2_4  [key=2, style=dotted];
m2_2 -> m2_0  [color=blue, key=0, style=bold];
m2_23 -> m2_24  [key=0, style=solid];
m2_24 -> m2_25  [key=0, style=solid];
m2_24 -> m2_26  [key=2, style=dotted];
m2_24 -> m2_4  [key=2, style=dotted];
m2_25 -> m2_23  [color=blue, key=0, style=bold];
m2_39 -> m2_40  [key=0, style=solid];
m2_40 -> m2_41  [key=0, style=solid];
m2_40 -> m2_42  [key=2, style=dotted];
m2_40 -> m2_4  [key=2, style=dotted];
m2_41 -> m2_39  [color=blue, key=0, style=bold];
m2_31 -> m2_32  [key=0, style=solid];
m2_32 -> m2_33  [key=0, style=solid];
m2_32 -> m2_34  [key=2, style=dotted];
m2_32 -> m2_4  [key=2, style=dotted];
m2_33 -> m2_31  [color=blue, key=0, style=bold];
m2_130 -> m2_131  [key=0, style=solid];
m2_131 -> m2_132  [key=0, style=solid];
m2_131 -> m2_47  [key=2, style=dotted];
m2_132 -> m2_130  [color=blue, key=0, style=bold];
m2_19 -> m2_20  [key=0, style=solid];
m2_19 -> m2_21  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_20 -> m2_21  [key=0, style=solid];
m2_20 -> m2_15  [key=2, style=dotted];
m2_20 -> m2_4  [key=2, style=dotted];
m2_21 -> m2_22  [key=0, style=solid];
m2_21 -> m2_15  [key=2, style=dotted];
m2_21 -> m2_4  [key=2, style=dotted];
m2_22 -> m2_19  [color=blue, key=0, style=bold];
m2_133 -> m2_131  [color=darkseagreen4, key=1, label="Humanizer.Tests.PluralTestSource", style=dashed];
m3_39 -> m3_42  [color=darkseagreen4, key=1, label=int, style=dashed];
m3_39 -> m3_40  [key=0, style=solid];
m3_39 -> m3_41  [color=darkseagreen4, key=1, label=int, style=dashed];
m3_39 -> m3_43  [color=darkseagreen4, key=1, label="Humanizer.GrammaticalGender", style=dashed];
m3_39 -> m3_45  [color=darkseagreen4, key=1, label=int, style=dashed];
m3_42 -> m3_0  [key=2, style=dotted];
m3_42 -> m3_43  [key=0, style=solid];
m3_42 -> m3_44  [color=darkseagreen4, key=1, label=towords, style=dashed];
m3_42 -> m3_46  [color=darkseagreen4, key=1, label=towords, style=dashed];
m3_42 -> m3_47  [color=darkseagreen4, key=1, label=towords, style=dashed];
m3_41 -> m3_42  [key=0, style=solid];
m3_41 -> m3_43  [key=0, style=solid];
m3_41 -> m3_49  [key=2, style=dotted];
m3_41 -> m3_44  [color=darkseagreen4, key=1, label=towords, style=dashed];
m3_41 -> m3_46  [color=darkseagreen4, key=1, label=towords, style=dashed];
m3_41 -> m3_47  [color=darkseagreen4, key=1, label=towords, style=dashed];
m3_43 -> m3_44  [key=0, style=solid];
m3_43 -> m3_45  [key=0, style=solid];
m3_44 -> m3_44  [color=darkseagreen4, key=1, label=towords, style=dashed];
m3_44 -> m3_47  [key=0, style=solid];
m3_44 -> m3_50  [key=2, style=dotted];
m3_46 -> m3_46  [color=darkseagreen4, key=1, label=towords, style=dashed];
m3_46 -> m3_47  [key=0, style=solid];
m3_46 -> m3_50  [key=2, style=dotted];
m3_47 -> m3_48  [key=0, style=solid];
m3_40 -> m3_41  [key=0, style=solid];
m3_45 -> m3_46  [key=0, style=solid];
m3_45 -> m3_47  [key=0, style=solid];
m3_48 -> m3_39  [color=blue, key=0, style=bold];
m3_0 -> m3_1  [color=green, key=0, style=solid];
m3_0 -> m3_3  [color=green, key=1, label=int, style=dashed];
m3_0 -> m3_4  [color=green, key=1, label=int, style=dashed];
m3_0 -> m3_6  [color=green, key=1, label=int, style=dashed];
m3_0 -> m3_7  [color=green, key=1, label=int, style=dashed];
m3_0 -> m3_8  [color=green, key=1, label=int, style=dashed];
m3_0 -> m3_9  [color=green, key=1, label=int, style=dashed];
m3_0 -> m3_10  [color=green, key=1, label=int, style=dashed];
m3_0 -> m3_11  [color=green, key=1, label=int, style=dashed];
m3_0 -> m3_12  [color=darkseagreen4, key=1, label=int, style=dashed];
m3_0 -> m3_13  [color=darkseagreen4, key=1, label=int, style=dashed];
m3_0 -> m3_14  [color=darkseagreen4, key=1, label=int, style=dashed];
m3_0 -> m3_15  [color=darkseagreen4, key=1, label=int, style=dashed];
m3_0 -> m3_16  [color=darkseagreen4, key=1, label=int, style=dashed];
m3_0 -> m3_17  [color=darkseagreen4, key=1, label=int, style=dashed];
m3_0 -> m3_18  [color=darkseagreen4, key=1, label=int, style=dashed];
m3_0 -> m3_19  [color=darkseagreen4, key=1, label=int, style=dashed];
m3_0 -> m3_20  [color=darkseagreen4, key=1, label=int, style=dashed];
m3_0 -> m3_21  [color=darkseagreen4, key=1, label=int, style=dashed];
m3_0 -> m3_22  [color=darkseagreen4, key=1, label=int, style=dashed];
m3_0 -> m3_23  [color=darkseagreen4, key=1, label=int, style=dashed];
m3_0 -> m3_24  [color=darkseagreen4, key=1, label=int, style=dashed];
m3_0 -> m3_26  [color=darkseagreen4, key=1, label=int, style=dashed];
m3_0 -> m3_27  [color=darkseagreen4, key=1, label=int, style=dashed];
m3_0 -> m3_28  [color=darkseagreen4, key=1, label=int, style=dashed];
m3_1 -> m3_2  [color=green, key=0, style=solid];
m3_1 -> m3_3  [color=green, key=0, style=solid];
m3_2 -> m3_31  [color=green, key=0, style=solid];
m3_3 -> m3_4  [color=green, key=0, style=solid];
m3_3 -> m3_5  [color=green, key=0, style=solid];
m3_4 -> m3_31  [color=green, key=0, style=solid];
m3_4 -> m3_32  [color=green, key=2, style=dotted];
m3_4 -> m3_0  [color=green, key=2, style=dotted];
m3_4 -> m3_33  [color=green, key=2, style=dotted];
m3_5 -> m3_6  [color=green, key=0, style=solid];
m3_5 -> m3_7  [color=green, key=1, label=parts, style=dashed];
m3_5 -> m3_10  [color=green, key=1, label=parts, style=dashed];
m3_5 -> m3_34  [color=green, key=2, style=dotted];
m3_5 -> m3_13  [color=green, key=1, label=parts, style=dashed];
m3_5 -> m3_16  [color=green, key=1, label=parts, style=dashed];
m3_5 -> m3_20  [color=green, key=1, label=parts, style=dashed];
m3_5 -> m3_25  [color=green, key=1, label=parts, style=dashed];
m3_5 -> m3_29  [color=green, key=1, label=parts, style=dashed];
m3_5 -> m3_30  [color=green, key=1, label=parts, style=dashed];
m3_6 -> m3_7  [color=green, key=0, style=solid];
m3_6 -> m3_9  [color=green, key=0, style=solid];
m3_7 -> m3_8  [color=green, key=0, style=solid];
m3_7 -> m3_35  [color=green, key=2, style=dotted];
m3_7 -> m3_0  [color=green, key=2, style=dotted];
m3_7 -> m3_33  [color=green, key=2, style=dotted];
m3_7 -> m3_36  [color=green, key=2, style=dotted];
m3_9 -> m3_10  [color=green, key=0, style=solid];
m3_9 -> m3_12  [color=green, key=0, style=solid];
m3_8 -> m3_8  [color=green, key=1, label=int, style=dashed];
m3_8 -> m3_9  [color=green, key=0, style=solid];
m3_8 -> m3_10  [color=green, key=1, label=int, style=dashed];
m3_8 -> m3_11  [color=green, key=1, label=int, style=dashed];
m3_8 -> m3_12  [color=green, key=1, label=int, style=dashed];
m3_8 -> m3_13  [color=green, key=1, label=int, style=dashed];
m3_8 -> m3_14  [color=green, key=1, label=int, style=dashed];
m3_8 -> m3_15  [color=green, key=1, label=int, style=dashed];
m3_8 -> m3_16  [color=green, key=1, label=int, style=dashed];
m3_8 -> m3_17  [color=green, key=1, label=int, style=dashed];
m3_8 -> m3_18  [color=green, key=1, label=int, style=dashed];
m3_8 -> m3_19  [color=green, key=1, label=int, style=dashed];
m3_8 -> m3_20  [color=green, key=1, label=int, style=dashed];
m3_8 -> m3_21  [color=green, key=1, label=int, style=dashed];
m3_8 -> m3_22  [color=green, key=1, label=int, style=dashed];
m3_8 -> m3_23  [color=green, key=1, label=int, style=dashed];
m3_8 -> m3_24  [color=green, key=1, label=int, style=dashed];
m3_8 -> m3_26  [color=green, key=1, label=int, style=dashed];
m3_8 -> m3_27  [color=green, key=1, label=int, style=dashed];
m3_8 -> m3_28  [color=green, key=1, label=int, style=dashed];
m3_10 -> m3_11  [color=green, key=0, style=solid];
m3_10 -> m3_35  [color=green, key=2, style=dotted];
m3_10 -> m3_0  [color=green, key=2, style=dotted];
m3_10 -> m3_33  [color=green, key=2, style=dotted];
m3_10 -> m3_36  [color=green, key=2, style=dotted];
m3_11 -> m3_11  [color=green, key=1, label=int, style=dashed];
m3_11 -> m3_12  [color=green, key=0, style=solid];
m3_11 -> m3_13  [color=green, key=1, label=int, style=dashed];
m3_11 -> m3_14  [color=green, key=1, label=int, style=dashed];
m3_11 -> m3_15  [color=green, key=1, label=int, style=dashed];
m3_11 -> m3_16  [color=green, key=1, label=int, style=dashed];
m3_11 -> m3_17  [color=green, key=1, label=int, style=dashed];
m3_11 -> m3_18  [color=green, key=1, label=int, style=dashed];
m3_11 -> m3_19  [color=green, key=1, label=int, style=dashed];
m3_11 -> m3_20  [color=green, key=1, label=int, style=dashed];
m3_11 -> m3_21  [color=green, key=1, label=int, style=dashed];
m3_11 -> m3_22  [color=green, key=1, label=int, style=dashed];
m3_11 -> m3_23  [color=green, key=1, label=int, style=dashed];
m3_11 -> m3_24  [color=green, key=1, label=int, style=dashed];
m3_11 -> m3_26  [color=green, key=1, label=int, style=dashed];
m3_11 -> m3_27  [color=green, key=1, label=int, style=dashed];
m3_11 -> m3_28  [color=green, key=1, label=int, style=dashed];
m3_12 -> m3_13  [key=0, style=solid];
m3_12 -> m3_15  [key=0, style=solid];
m3_13 -> m3_0  [key=2, style=dotted];
m3_13 -> m3_33  [key=2, style=dotted];
m3_13 -> m3_35  [key=2, style=dotted];
m3_13 -> m3_36  [key=2, style=dotted];
m3_13 -> m3_14  [key=0, style=solid];
m3_14 -> m3_14  [color=darkseagreen4, key=1, label=int, style=dashed];
m3_14 -> m3_15  [key=0, style=solid];
m3_14 -> m3_16  [color=darkseagreen4, key=1, label=int, style=dashed];
m3_14 -> m3_17  [color=darkseagreen4, key=1, label=int, style=dashed];
m3_14 -> m3_18  [color=darkseagreen4, key=1, label=int, style=dashed];
m3_14 -> m3_19  [color=darkseagreen4, key=1, label=int, style=dashed];
m3_14 -> m3_20  [color=darkseagreen4, key=1, label=int, style=dashed];
m3_14 -> m3_21  [color=darkseagreen4, key=1, label=int, style=dashed];
m3_14 -> m3_22  [color=darkseagreen4, key=1, label=int, style=dashed];
m3_14 -> m3_23  [color=darkseagreen4, key=1, label=int, style=dashed];
m3_14 -> m3_24  [color=darkseagreen4, key=1, label=int, style=dashed];
m3_14 -> m3_26  [color=darkseagreen4, key=1, label=int, style=dashed];
m3_14 -> m3_27  [color=darkseagreen4, key=1, label=int, style=dashed];
m3_14 -> m3_28  [color=darkseagreen4, key=1, label=int, style=dashed];
m3_15 -> m3_16  [key=0, style=solid];
m3_15 -> m3_18  [key=0, style=solid];
m3_16 -> m3_35  [key=2, style=dotted];
m3_16 -> m3_36  [key=2, style=dotted];
m3_16 -> m3_17  [key=0, style=solid];
m3_17 -> m3_17  [color=darkseagreen4, key=1, label=int, style=dashed];
m3_17 -> m3_18  [key=0, style=solid];
m3_17 -> m3_19  [color=darkseagreen4, key=1, label=int, style=dashed];
m3_17 -> m3_20  [color=darkseagreen4, key=1, label=int, style=dashed];
m3_17 -> m3_21  [color=darkseagreen4, key=1, label=int, style=dashed];
m3_17 -> m3_22  [color=darkseagreen4, key=1, label=int, style=dashed];
m3_17 -> m3_23  [color=darkseagreen4, key=1, label=int, style=dashed];
m3_17 -> m3_24  [color=darkseagreen4, key=1, label=int, style=dashed];
m3_17 -> m3_26  [color=darkseagreen4, key=1, label=int, style=dashed];
m3_17 -> m3_27  [color=darkseagreen4, key=1, label=int, style=dashed];
m3_17 -> m3_28  [color=darkseagreen4, key=1, label=int, style=dashed];
m3_18 -> m3_19  [key=0, style=solid];
m3_18 -> m3_30  [key=0, style=solid];
m3_19 -> m3_20  [key=0, style=solid];
m3_19 -> m3_21  [key=0, style=solid];
m3_20 -> m3_36  [key=2, style=dotted];
m3_20 -> m3_30  [key=0, style=solid];
m3_21 -> m3_22  [key=0, style=solid];
m3_21 -> m3_26  [key=0, style=solid];
m3_22 -> m3_23  [key=0, style=solid];
m3_22 -> m3_24  [color=darkseagreen4, key=1, label=lastPart, style=dashed];
m3_22 -> m3_25  [color=darkseagreen4, key=1, label=lastPart, style=dashed];
m3_23 -> m3_24  [key=0, style=solid];
m3_23 -> m3_25  [key=0, style=solid];
m3_24 -> m3_33  [key=2, style=dotted];
m3_24 -> m3_24  [color=darkseagreen4, key=1, label=lastPart, style=dashed];
m3_24 -> m3_25  [key=0, style=solid];
m3_26 -> m3_27  [key=0, style=solid];
m3_26 -> m3_28  [color=darkseagreen4, key=1, label=lastPart, style=dashed];
m3_26 -> m3_29  [color=darkseagreen4, key=1, label=lastPart, style=dashed];
m3_27 -> m3_28  [key=0, style=solid];
m3_27 -> m3_29  [key=0, style=solid];
m3_28 -> m3_33  [key=2, style=dotted];
m3_28 -> m3_28  [color=darkseagreen4, key=1, label=lastPart, style=dashed];
m3_28 -> m3_29  [key=0, style=solid];
m3_25 -> m3_36  [key=2, style=dotted];
m3_25 -> m3_30  [key=0, style=solid];
m3_29 -> m3_36  [key=2, style=dotted];
m3_29 -> m3_30  [key=0, style=solid];
m3_30 -> m3_31  [key=0, style=solid];
m3_30 -> m3_37  [key=2, style=dotted];
m3_30 -> m3_38  [key=2, style=dotted];
m3_31 -> m3_0  [color=blue, key=0, style=bold];
m3_51 -> m3_4  [color=green, key=1, label="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter", style=dashed];
m3_51 -> m3_7  [color=green, key=1, label="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter", style=dashed];
m3_51 -> m3_10  [color=green, key=1, label="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter", style=dashed];
m3_51 -> m3_13  [color=darkseagreen4, key=1, label="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter", style=dashed];
m3_51 -> m3_42  [color=darkseagreen4, key=1, label="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter", style=dashed];
}
