digraph  {
m0_109 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="7-7", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", file="InstanceBuilderTests.cs"];
m0_41 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence()", span="94-94", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence()", file="InstanceBuilderTests.cs"];
m0_42 [label="var expectedResult = new[] { 1, 20, 300, 4000 }", span="97-97", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence()", file="InstanceBuilderTests.cs"];
m0_43 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequence(),\r\n                new[] { ''--int-seq'', ''1'', ''20'', ''300'', ''4000'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="100-104", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence()", file="InstanceBuilderTests.cs"];
m0_44 [label="Assert.True(expectedResult.SequenceEqual(result.Value.IntSequence))", span="107-107", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence()", file="InstanceBuilderTests.cs"];
m0_45 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence()", span="94-94", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence()", file="InstanceBuilderTests.cs"];
m0_136 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilderTests.cs"];
m0_33 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_double_value()", span="75-75", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_double_value()", file="InstanceBuilderTests.cs"];
m0_34 [label="var expectedResult = -.123D", span="78-78", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_double_value()", file="InstanceBuilderTests.cs"];
m0_35 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithDouble(),\r\n                new[] { ''-0.123'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="81-85", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_double_value()", file="InstanceBuilderTests.cs"];
m0_36 [label="Assert.Equal(expectedResult, result.Value.DoubleValue)", span="88-88", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_double_value()", file="InstanceBuilderTests.cs"];
m0_37 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_double_value()", span="75-75", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_double_value()", file="InstanceBuilderTests.cs"];
m0_104 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", span="243-243", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", file="InstanceBuilderTests.cs"];
m0_105 [label="var expectedResult = new FakeOptionsWithSequenceWithoutRange\r\n                {\r\n                    LongSequence = new[] { 1L, 2L, 3L, 4L, 5L, 6L }\r\n                }", span="246-249", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", file="InstanceBuilderTests.cs"];
m0_106 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceWithoutRange(),\r\n                new[] { ''1'', ''2'', ''3'', ''4'', ''5'', ''6'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="252-256", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", file="InstanceBuilderTests.cs"];
m0_107 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="259-259", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", file="InstanceBuilderTests.cs"];
m0_108 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", span="243-243", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", file="InstanceBuilderTests.cs"];
m0_11 [label="Entry Unk.True", span="", cluster="Unk.True", file="InstanceBuilderTests.cs"];
m0_197 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="444-444", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_198 [label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="447-447", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_199 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="450-454", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_200 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="457-457", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_201 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="444-444", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_184 [label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283", cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs"];
m0_74 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="7-7", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", file="InstanceBuilderTests.cs"];
m0_206 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="463-463", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_207 [label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="466-466", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_208 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="469-473", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_209 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="476-476", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_210 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="463-463", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_67 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="159-159", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="InstanceBuilderTests.cs"];
m0_68 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="164-168", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", color=red, community=1, file="InstanceBuilderTests.cs"];
m0_69 [label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="171-171", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", color=red, community=0, file="InstanceBuilderTests.cs"];
m0_70 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="159-159", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="InstanceBuilderTests.cs"];
m0_66 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", span="7-7", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", file="InstanceBuilderTests.cs"];
m0_171 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="386-386", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs"];
m0_172 [label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="388-391", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs"];
m0_173 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="393-397", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs"];
m0_174 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="400-400", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs"];
m0_175 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="386-386", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs"];
m0_151 [label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="12-12", cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="InstanceBuilderTests.cs"];
m0_0 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="15-15", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs"];
m0_1 [label="var fakeOptions = new FakeOptions()", span="18-18", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs"];
m0_2 [label="var expectedResult = ParserResult.Create(\r\n                ParserResultType.Options,\r\n                fakeOptions, new Error[] { new HelpRequestedError() })", span="19-21", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs"];
m0_3 [label="var result = InstanceBuilder.Build(\r\n                () => fakeOptions,\r\n                new[] { ''--help'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="24-28", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs"];
m0_4 [label="Assert.True(expectedResult.Equals(result))", span="31-31", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs"];
m0_5 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="15-15", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs"];
m0_188 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="425-425", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs"];
m0_189 [label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="428-428", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs"];
m0_190 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequired(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="431-435", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs"];
m0_191 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="438-438", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs"];
m0_192 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="425-425", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs"];
m0_8 [label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="103-103", cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="InstanceBuilderTests.cs"];
m0_202 [label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316", cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs"];
m0_228 [label="Entry lambda expression", span="508-508", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_13 [label=fakeOptions, span="25-25", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_12 [label="Entry lambda expression", span="25-25", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_14 [label="Exit lambda expression", span="25-25", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_21 [label="Entry lambda expression", span="44-44", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_22 [label="new FakeOptions()", span="44-44", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_23 [label="Exit lambda expression", span="44-44", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_29 [label="Entry lambda expression", span="63-63", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_30 [label="new FakeOptionsWithDouble()", span="63-63", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_31 [label="Exit lambda expression", span="63-63", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_38 [label="Entry lambda expression", span="82-82", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_39 [label="new FakeOptionsWithDouble()", span="82-82", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_40 [label="Exit lambda expression", span="82-82", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_47 [label="Entry lambda expression", span="101-101", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_48 [label="new FakeOptionsWithSequence()", span="101-101", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_49 [label="Exit lambda expression", span="101-101", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_56 [label="Entry lambda expression", span="120-120", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_57 [label="new FakeOptions()", span="120-120", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_58 [label="Exit lambda expression", span="120-120", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_63 [label="Entry lambda expression", span="143-143", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_64 [label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="143-143", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_65 [label="Exit lambda expression", span="143-143", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_71 [label="Entry lambda expression", span="165-165", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_72 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="165-165", cluster="lambda expression", color=red, community=0, file="InstanceBuilderTests.cs"];
m0_73 [label="Exit lambda expression", span="165-165", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_82 [label="Entry lambda expression", span="184-184", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_83 [label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="184-184", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_84 [label="Exit lambda expression", span="184-184", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_92 [label="Entry lambda expression", span="206-206", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_93 [label="new FakeOptionsWithEnum()", span="206-206", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_94 [label="Exit lambda expression", span="206-206", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_101 [label="Entry lambda expression", span="231-231", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_102 [label="new FakeOptionsWithValues()", span="231-231", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_103 [label="Exit lambda expression", span="231-231", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_110 [label="Entry lambda expression", span="253-253", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_111 [label="new FakeOptionsWithSequenceWithoutRange()", span="253-253", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_112 [label="Exit lambda expression", span="253-253", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_119 [label="Entry lambda expression", span="276-276", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_120 [label="new FakeOptionsWithSequenceAndSeparator()", span="276-276", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_121 [label="Exit lambda expression", span="276-276", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_127 [label="Entry lambda expression", span="299-299", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_128 [label="new FakeOptionsWithSequenceAndSeparator()", span="299-299", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_129 [label="Exit lambda expression", span="299-299", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_137 [label="Entry lambda expression", span="328-328", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_140 [label="Entry lambda expression", span="329-331", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_138 [label="new FakeOptionsWithValues()", span="328-328", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_139 [label="Exit lambda expression", span="328-328", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_141 [label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="330-331", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_145 [label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="331-331", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_149 [label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="331-331", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_142 [label="Exit lambda expression", span="329-331", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_144 [label="Entry lambda expression", span="331-331", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_146 [label="Exit lambda expression", span="331-331", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_148 [label="Entry lambda expression", span="331-331", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_150 [label="Exit lambda expression", span="331-331", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_158 [label="Entry lambda expression", span="354-354", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_159 [label="new FakeOptionsWithSets()", span="354-354", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_160 [label="Exit lambda expression", span="354-354", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_168 [label="Entry lambda expression", span="374-374", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_169 [label="new FakeOptionWithRequiredAndSet()", span="374-374", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_170 [label="Exit lambda expression", span="374-374", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_176 [label="Entry lambda expression", span="394-394", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_177 [label="new FakeOptionWithRequiredAndSet()", span="394-394", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_178 [label="Exit lambda expression", span="394-394", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_185 [label="Entry lambda expression", span="414-414", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_186 [label="new FakeOptionWithRequiredAndSet()", span="414-414", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_187 [label="Exit lambda expression", span="414-414", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_193 [label="Entry lambda expression", span="432-432", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_194 [label="new FakeOptionWithRequired()", span="432-432", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_195 [label="Exit lambda expression", span="432-432", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_203 [label="Entry lambda expression", span="451-451", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_204 [label="new FakeOptions()", span="451-451", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_205 [label="Exit lambda expression", span="451-451", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_212 [label="Entry lambda expression", span="470-470", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_213 [label="new FakeOptions()", span="470-470", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_214 [label="Exit lambda expression", span="470-470", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_220 [label="Entry lambda expression", span="489-489", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_221 [label="new FakeOptions()", span="489-489", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_222 [label="Exit lambda expression", span="489-489", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_229 [label="new FakeOptions()", span="508-508", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_230 [label="Exit lambda expression", span="508-508", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_179 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="405-405", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs"];
m0_180 [label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="407-411", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs"];
m0_181 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="413-417", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs"];
m0_182 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="420-420", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs"];
m0_183 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="405-405", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs"];
m0_46 [label="Entry Unk.SequenceEqual", span="", cluster="Unk.SequenceEqual", file="InstanceBuilderTests.cs"];
m0_130 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="314-314", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs"];
m0_131 [label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="317-323", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs"];
m0_132 [label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="324-324", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs"];
m0_134 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="337-337", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs"];
m0_133 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="327-334", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs"];
m0_135 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="314-314", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs"];
m0_80 [label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="261-261", cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs"];
m0_113 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator()", span="265-265", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator()", file="InstanceBuilderTests.cs"];
m0_114 [label="var expectedResult = new FakeOptionsWithSequenceAndSeparator\r\n                {\r\n                    LongSequence = new[] { 1L, 1234L, 59678L },\r\n                    StringSequence = new string[] { }\r\n                }", span="268-272", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator()", file="InstanceBuilderTests.cs"];
m0_115 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                new[] { ''--long-seq'', ''1;1234;59678'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="275-279", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator()", file="InstanceBuilderTests.cs"];
m0_116 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="282-282", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator()", file="InstanceBuilderTests.cs"];
m0_117 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator()", span="265-265", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator()", file="InstanceBuilderTests.cs"];
m0_223 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="501-501", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_224 [label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="504-504", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_225 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="507-511", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_226 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="514-514", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_227 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="501-501", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_10 [label="Entry CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", span="90-90", cluster="CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", file="InstanceBuilderTests.cs"];
m0_32 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", span="7-7", cluster="CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", file="InstanceBuilderTests.cs"];
m0_75 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="177-177", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceBuilderTests.cs"];
m0_76 [label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="180-180", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceBuilderTests.cs"];
m0_77 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                new[] { ''-s'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="183-187", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceBuilderTests.cs"];
m0_78 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="190-190", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceBuilderTests.cs"];
m0_79 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="177-177", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceBuilderTests.cs"];
m0_90 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="14-14", cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", file="InstanceBuilderTests.cs"];
m0_95 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="218-218", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs"];
m0_96 [label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="221-227", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs"];
m0_97 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="230-234", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs"];
m0_98 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="237-237", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs"];
m0_99 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="218-218", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs"];
m0_167 [label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", span="2-2", cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", file="InstanceBuilderTests.cs"];
m0_211 [label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="272-272", cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", file="InstanceBuilderTests.cs"];
m0_118 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="7-7", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", file="InstanceBuilderTests.cs"];
m0_147 [label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="InstanceBuilderTests.cs"];
m0_143 [label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="33-33", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="InstanceBuilderTests.cs"];
m0_162 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="366-366", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceBuilderTests.cs"];
m0_163 [label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = null\r\n            }", span="368-371", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceBuilderTests.cs"];
m0_164 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="373-377", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceBuilderTests.cs"];
m0_165 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="380-380", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceBuilderTests.cs"];
m0_166 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="366-366", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceBuilderTests.cs"];
m0_161 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", file="InstanceBuilderTests.cs"];
m0_122 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator()", span="288-288", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator()", file="InstanceBuilderTests.cs"];
m0_123 [label="var expectedResult = new FakeOptionsWithSequenceAndSeparator\r\n            {\r\n                LongSequence = new long[] {},\r\n                StringSequence = new[] { ''eml1@xyz.com'', ''test@unit.org'', ''xyz@srv.it'' }\r\n            }", span="291-295", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator()", file="InstanceBuilderTests.cs"];
m0_124 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                new[] { ''-s'', ''eml1@xyz.com,test@unit.org,xyz@srv.it'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="298-302", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator()", file="InstanceBuilderTests.cs"];
m0_125 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="305-305", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator()", file="InstanceBuilderTests.cs"];
m0_126 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator()", span="288-288", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator()", file="InstanceBuilderTests.cs"];
m0_157 [label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294", cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs"];
m0_152 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="343-343", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs"];
m0_153 [label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl'')),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''))\r\n                }", span="346-350", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs"];
m0_154 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSets(),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="353-357", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs"];
m0_155 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="360-360", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs"];
m0_156 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="343-343", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs"];
m0_24 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value()", span="56-56", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value()", file="InstanceBuilderTests.cs"];
m0_25 [label="var expectedResult = .123D", span="59-59", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value()", file="InstanceBuilderTests.cs"];
m0_26 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithDouble(),\r\n                new[] { ''0.123'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="62-66", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value()", file="InstanceBuilderTests.cs"];
m0_27 [label="Assert.Equal(expectedResult, result.Value.DoubleValue)", span="69-69", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value()", file="InstanceBuilderTests.cs"];
m0_28 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value()", span="56-56", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value()", file="InstanceBuilderTests.cs"];
m0_196 [label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", file="InstanceBuilderTests.cs"];
m0_81 [label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20", cluster="CommandLine.NameInfo.NameInfo(string, string)", file="InstanceBuilderTests.cs"];
m0_59 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="137-137", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="InstanceBuilderTests.cs"];
m0_60 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="142-146", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="InstanceBuilderTests.cs"];
m0_61 [label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="149-149", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="InstanceBuilderTests.cs"];
m0_62 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="137-137", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="InstanceBuilderTests.cs"];
m0_50 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", span="7-7", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", file="InstanceBuilderTests.cs"];
m0_6 [label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", file="InstanceBuilderTests.cs"];
m0_15 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_int_value()", span="37-37", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_int_value()", file="InstanceBuilderTests.cs"];
m0_16 [label="var expectedResult = -123", span="40-40", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_int_value()", file="InstanceBuilderTests.cs"];
m0_17 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-123'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="43-47", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_int_value()", file="InstanceBuilderTests.cs"];
m0_18 [label="Assert.Equal(expectedResult, result.Value.LongValue)", span="50-50", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_int_value()", file="InstanceBuilderTests.cs"];
m0_19 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_int_value()", span="37-37", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_int_value()", file="InstanceBuilderTests.cs"];
m0_215 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="482-482", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_216 [label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="485-485", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_217 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="488-492", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_218 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="495-495", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_219 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="482-482", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_85 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", span="196-196", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", file="InstanceBuilderTests.cs"];
m0_86 [label="var expectedResult = new FakeOptionsWithEnum\r\n                {\r\n                    Colors = Colors.Green\r\n                }", span="199-202", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", file="InstanceBuilderTests.cs"];
m0_87 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''Green'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="205-209", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", file="InstanceBuilderTests.cs"];
m0_88 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="212-212", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", file="InstanceBuilderTests.cs"];
m0_89 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", span="196-196", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", file="InstanceBuilderTests.cs"];
m0_100 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", file="InstanceBuilderTests.cs"];
m0_7 [label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="338-338", cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="InstanceBuilderTests.cs"];
m0_20 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="InstanceBuilderTests.cs"];
m0_51 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range()", span="113-113", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range()", file="InstanceBuilderTests.cs"];
m0_52 [label="var expectedResult = new[] { 10, 20, 30, 40 }", span="116-116", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range()", file="InstanceBuilderTests.cs"];
m0_53 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-i'', ''10'', ''20'', ''30'', ''40'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="119-123", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range()", file="InstanceBuilderTests.cs"];
m0_54 [label="Assert.True(expectedResult.SequenceEqual(result.Value.IntSequence))", span="126-126", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range()", file="InstanceBuilderTests.cs"];
m0_55 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range()", span="113-113", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range()", file="InstanceBuilderTests.cs"];
m0_91 [label="Entry Unk.ShouldBeEquivalentTo", span="", cluster="Unk.ShouldBeEquivalentTo", file="InstanceBuilderTests.cs"];
m0_9 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilderTests.cs"];
m0_231 [label=fakeOptions, span="", file="InstanceBuilderTests.cs"];
m0_232 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span="", file="InstanceBuilderTests.cs"];
m0_41 -> m0_42  [key=0, style=solid];
m0_42 -> m0_43  [key=0, style=solid];
m0_42 -> m0_44  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_43 -> m0_44  [key=0, style=solid];
m0_43 -> m0_9  [key=2, style=dotted];
m0_43 -> m0_47  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_44 -> m0_45  [key=0, style=solid];
m0_44 -> m0_46  [key=2, style=dotted];
m0_44 -> m0_11  [key=2, style=dotted];
m0_45 -> m0_41  [key=0, style=bold, color=blue];
m0_33 -> m0_34  [key=0, style=solid];
m0_34 -> m0_35  [key=0, style=solid];
m0_34 -> m0_36  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_34 -> m0_34  [key=3, color=darkorchid, style=bold, label="Local variable double expectedResult"];
m0_35 -> m0_36  [key=0, style=solid];
m0_35 -> m0_9  [key=2, style=dotted];
m0_35 -> m0_38  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_36 -> m0_37  [key=0, style=solid];
m0_36 -> m0_20  [key=2, style=dotted];
m0_37 -> m0_33  [key=0, style=bold, color=blue];
m0_104 -> m0_105  [key=0, style=solid];
m0_105 -> m0_106  [key=0, style=solid];
m0_105 -> m0_109  [key=2, style=dotted];
m0_105 -> m0_107  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_106 -> m0_107  [key=0, style=solid];
m0_106 -> m0_9  [key=2, style=dotted];
m0_106 -> m0_110  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_107 -> m0_108  [key=0, style=solid];
m0_107 -> m0_91  [key=2, style=dotted];
m0_108 -> m0_104  [key=0, style=bold, color=blue];
m0_197 -> m0_198  [key=0, style=solid];
m0_198 -> m0_199  [key=0, style=solid];
m0_198 -> m0_202  [key=2, style=dotted];
m0_198 -> m0_81  [key=2, style=dotted];
m0_198 -> m0_200  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_199 -> m0_200  [key=0, style=solid];
m0_199 -> m0_9  [key=2, style=dotted];
m0_199 -> m0_203  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_200 -> m0_201  [key=0, style=solid];
m0_200 -> m0_46  [key=2, style=dotted];
m0_200 -> m0_11  [key=2, style=dotted];
m0_201 -> m0_197  [key=0, style=bold, color=blue];
m0_206 -> m0_207  [key=0, style=solid];
m0_207 -> m0_208  [key=0, style=solid];
m0_207 -> m0_211  [key=2, style=dotted];
m0_207 -> m0_209  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_208 -> m0_209  [key=0, style=solid];
m0_208 -> m0_9  [key=2, style=dotted];
m0_208 -> m0_212  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_209 -> m0_210  [key=0, style=solid];
m0_209 -> m0_46  [key=2, style=dotted];
m0_209 -> m0_11  [key=2, style=dotted];
m0_210 -> m0_206  [key=0, style=bold, color=blue];
m0_67 -> m0_68  [key=0, style=solid, color=red];
m0_67 -> m0_69  [key=1, style=dashed, color=red, label="string[]"];
m0_68 -> m0_69  [key=0, style=solid, color=red];
m0_68 -> m0_9  [key=2, style=dotted, color=red];
m0_68 -> m0_71  [key=1, style=dashed, color=red, label="lambda expression"];
m0_69 -> m0_70  [key=0, style=solid, color=red];
m0_69 -> m0_46  [key=2, style=dotted, color=red];
m0_69 -> m0_11  [key=2, style=dotted, color=red];
m0_70 -> m0_67  [key=0, style=bold, color=blue];
m0_171 -> m0_172  [key=0, style=solid];
m0_172 -> m0_173  [key=0, style=solid];
m0_172 -> m0_167  [key=2, style=dotted];
m0_172 -> m0_174  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_173 -> m0_174  [key=0, style=solid];
m0_173 -> m0_9  [key=2, style=dotted];
m0_173 -> m0_176  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_174 -> m0_175  [key=0, style=solid];
m0_174 -> m0_91  [key=2, style=dotted];
m0_175 -> m0_171  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_6  [key=2, style=dotted];
m0_1 -> m0_3  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
m0_1 -> m0_13  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
m0_2 -> m0_3  [key=0, style=solid];
m0_2 -> m0_7  [key=2, style=dotted];
m0_2 -> m0_8  [key=2, style=dotted];
m0_2 -> m0_4  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_3 -> m0_4  [key=0, style=solid];
m0_3 -> m0_9  [key=2, style=dotted];
m0_3 -> m0_12  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_4 -> m0_5  [key=0, style=solid];
m0_4 -> m0_10  [key=2, style=dotted];
m0_4 -> m0_11  [key=2, style=dotted];
m0_5 -> m0_0  [key=0, style=bold, color=blue];
m0_188 -> m0_189  [key=0, style=solid];
m0_189 -> m0_190  [key=0, style=solid];
m0_189 -> m0_184  [key=2, style=dotted];
m0_189 -> m0_81  [key=2, style=dotted];
m0_189 -> m0_191  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_190 -> m0_191  [key=0, style=solid];
m0_190 -> m0_9  [key=2, style=dotted];
m0_190 -> m0_193  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_191 -> m0_192  [key=0, style=solid];
m0_191 -> m0_46  [key=2, style=dotted];
m0_191 -> m0_11  [key=2, style=dotted];
m0_192 -> m0_188  [key=0, style=bold, color=blue];
m0_228 -> m0_229  [key=0, style=solid];
m0_13 -> m0_14  [key=0, style=solid];
m0_12 -> m0_13  [key=0, style=solid];
m0_14 -> m0_12  [key=0, style=bold, color=blue];
m0_21 -> m0_22  [key=0, style=solid];
m0_22 -> m0_23  [key=0, style=solid];
m0_22 -> m0_6  [key=2, style=dotted];
m0_23 -> m0_21  [key=0, style=bold, color=blue];
m0_29 -> m0_30  [key=0, style=solid];
m0_30 -> m0_31  [key=0, style=solid];
m0_30 -> m0_32  [key=2, style=dotted];
m0_31 -> m0_29  [key=0, style=bold, color=blue];
m0_38 -> m0_39  [key=0, style=solid];
m0_39 -> m0_40  [key=0, style=solid];
m0_39 -> m0_32  [key=2, style=dotted];
m0_40 -> m0_38  [key=0, style=bold, color=blue];
m0_47 -> m0_48  [key=0, style=solid];
m0_48 -> m0_49  [key=0, style=solid];
m0_48 -> m0_50  [key=2, style=dotted];
m0_49 -> m0_47  [key=0, style=bold, color=blue];
m0_56 -> m0_57  [key=0, style=solid];
m0_57 -> m0_58  [key=0, style=solid];
m0_57 -> m0_6  [key=2, style=dotted];
m0_58 -> m0_56  [key=0, style=bold, color=blue];
m0_63 -> m0_64  [key=0, style=solid];
m0_64 -> m0_65  [key=0, style=solid];
m0_64 -> m0_66  [key=2, style=dotted];
m0_65 -> m0_63  [key=0, style=bold, color=blue];
m0_71 -> m0_72  [key=0, style=solid, color=red];
m0_72 -> m0_73  [key=0, style=solid, color=red];
m0_72 -> m0_74  [key=2, style=dotted, color=red];
m0_73 -> m0_71  [key=0, style=bold, color=blue];
m0_82 -> m0_83  [key=0, style=solid];
m0_83 -> m0_84  [key=0, style=solid];
m0_83 -> m0_66  [key=2, style=dotted];
m0_84 -> m0_82  [key=0, style=bold, color=blue];
m0_92 -> m0_93  [key=0, style=solid];
m0_93 -> m0_94  [key=0, style=solid];
m0_93 -> m0_90  [key=2, style=dotted];
m0_94 -> m0_92  [key=0, style=bold, color=blue];
m0_101 -> m0_102  [key=0, style=solid];
m0_102 -> m0_103  [key=0, style=solid];
m0_102 -> m0_100  [key=2, style=dotted];
m0_103 -> m0_101  [key=0, style=bold, color=blue];
m0_110 -> m0_111  [key=0, style=solid];
m0_111 -> m0_112  [key=0, style=solid];
m0_111 -> m0_109  [key=2, style=dotted];
m0_112 -> m0_110  [key=0, style=bold, color=blue];
m0_119 -> m0_120  [key=0, style=solid];
m0_120 -> m0_121  [key=0, style=solid];
m0_120 -> m0_118  [key=2, style=dotted];
m0_121 -> m0_119  [key=0, style=bold, color=blue];
m0_127 -> m0_128  [key=0, style=solid];
m0_128 -> m0_129  [key=0, style=solid];
m0_128 -> m0_118  [key=2, style=dotted];
m0_129 -> m0_127  [key=0, style=bold, color=blue];
m0_137 -> m0_138  [key=0, style=solid];
m0_140 -> m0_141  [key=0, style=solid];
m0_140 -> m0_145  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m0_140 -> m0_149  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m0_138 -> m0_139  [key=0, style=solid];
m0_138 -> m0_100  [key=2, style=dotted];
m0_139 -> m0_137  [key=0, style=bold, color=blue];
m0_141 -> m0_142  [key=0, style=solid];
m0_141 -> m0_143  [key=2, style=dotted];
m0_141 -> m0_144  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_145 -> m0_146  [key=0, style=solid];
m0_145 -> m0_147  [key=2, style=dotted];
m0_145 -> m0_148  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_149 -> m0_150  [key=0, style=solid];
m0_149 -> m0_151  [key=2, style=dotted];
m0_142 -> m0_140  [key=0, style=bold, color=blue];
m0_144 -> m0_145  [key=0, style=solid];
m0_146 -> m0_144  [key=0, style=bold, color=blue];
m0_148 -> m0_149  [key=0, style=solid];
m0_150 -> m0_148  [key=0, style=bold, color=blue];
m0_158 -> m0_159  [key=0, style=solid];
m0_159 -> m0_160  [key=0, style=solid];
m0_159 -> m0_161  [key=2, style=dotted];
m0_160 -> m0_158  [key=0, style=bold, color=blue];
m0_168 -> m0_169  [key=0, style=solid];
m0_169 -> m0_170  [key=0, style=solid];
m0_169 -> m0_167  [key=2, style=dotted];
m0_170 -> m0_168  [key=0, style=bold, color=blue];
m0_176 -> m0_177  [key=0, style=solid];
m0_177 -> m0_178  [key=0, style=solid];
m0_177 -> m0_167  [key=2, style=dotted];
m0_178 -> m0_176  [key=0, style=bold, color=blue];
m0_185 -> m0_186  [key=0, style=solid];
m0_186 -> m0_187  [key=0, style=solid];
m0_186 -> m0_167  [key=2, style=dotted];
m0_187 -> m0_185  [key=0, style=bold, color=blue];
m0_193 -> m0_194  [key=0, style=solid];
m0_194 -> m0_195  [key=0, style=solid];
m0_194 -> m0_196  [key=2, style=dotted];
m0_195 -> m0_193  [key=0, style=bold, color=blue];
m0_203 -> m0_204  [key=0, style=solid];
m0_204 -> m0_205  [key=0, style=solid];
m0_204 -> m0_6  [key=2, style=dotted];
m0_205 -> m0_203  [key=0, style=bold, color=blue];
m0_212 -> m0_213  [key=0, style=solid];
m0_213 -> m0_214  [key=0, style=solid];
m0_213 -> m0_6  [key=2, style=dotted];
m0_214 -> m0_212  [key=0, style=bold, color=blue];
m0_220 -> m0_221  [key=0, style=solid];
m0_221 -> m0_222  [key=0, style=solid];
m0_221 -> m0_6  [key=2, style=dotted];
m0_222 -> m0_220  [key=0, style=bold, color=blue];
m0_229 -> m0_230  [key=0, style=solid];
m0_229 -> m0_6  [key=2, style=dotted];
m0_230 -> m0_228  [key=0, style=bold, color=blue];
m0_179 -> m0_180  [key=0, style=solid];
m0_180 -> m0_181  [key=0, style=solid];
m0_180 -> m0_184  [key=2, style=dotted];
m0_180 -> m0_81  [key=2, style=dotted];
m0_180 -> m0_182  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_181 -> m0_182  [key=0, style=solid];
m0_181 -> m0_9  [key=2, style=dotted];
m0_181 -> m0_185  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_182 -> m0_183  [key=0, style=solid];
m0_182 -> m0_46  [key=2, style=dotted];
m0_182 -> m0_11  [key=2, style=dotted];
m0_183 -> m0_179  [key=0, style=bold, color=blue];
m0_130 -> m0_131  [key=0, style=solid];
m0_131 -> m0_132  [key=0, style=solid];
m0_131 -> m0_100  [key=2, style=dotted];
m0_131 -> m0_134  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_132 -> m0_133  [key=0, style=solid];
m0_134 -> m0_135  [key=0, style=solid];
m0_134 -> m0_91  [key=2, style=dotted];
m0_133 -> m0_134  [key=0, style=solid];
m0_133 -> m0_136  [key=2, style=dotted];
m0_133 -> m0_137  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_133 -> m0_140  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_135 -> m0_130  [key=0, style=bold, color=blue];
m0_113 -> m0_114  [key=0, style=solid];
m0_114 -> m0_115  [key=0, style=solid];
m0_114 -> m0_118  [key=2, style=dotted];
m0_114 -> m0_116  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_115 -> m0_116  [key=0, style=solid];
m0_115 -> m0_9  [key=2, style=dotted];
m0_115 -> m0_119  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_116 -> m0_117  [key=0, style=solid];
m0_116 -> m0_91  [key=2, style=dotted];
m0_117 -> m0_113  [key=0, style=bold, color=blue];
m0_223 -> m0_224  [key=0, style=solid];
m0_224 -> m0_225  [key=0, style=solid];
m0_224 -> m0_211  [key=2, style=dotted];
m0_224 -> m0_226  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_225 -> m0_226  [key=0, style=solid];
m0_225 -> m0_9  [key=2, style=dotted];
m0_225 -> m0_228  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_226 -> m0_227  [key=0, style=solid];
m0_226 -> m0_46  [key=2, style=dotted];
m0_226 -> m0_11  [key=2, style=dotted];
m0_227 -> m0_223  [key=0, style=bold, color=blue];
m0_75 -> m0_76  [key=0, style=solid];
m0_76 -> m0_77  [key=0, style=solid];
m0_76 -> m0_80  [key=2, style=dotted];
m0_76 -> m0_81  [key=2, style=dotted];
m0_76 -> m0_78  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_77 -> m0_78  [key=0, style=solid];
m0_77 -> m0_9  [key=2, style=dotted];
m0_77 -> m0_82  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_78 -> m0_79  [key=0, style=solid];
m0_78 -> m0_46  [key=2, style=dotted];
m0_78 -> m0_11  [key=2, style=dotted];
m0_79 -> m0_75  [key=0, style=bold, color=blue];
m0_95 -> m0_96  [key=0, style=solid];
m0_96 -> m0_97  [key=0, style=solid];
m0_96 -> m0_100  [key=2, style=dotted];
m0_96 -> m0_98  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_97 -> m0_98  [key=0, style=solid];
m0_97 -> m0_9  [key=2, style=dotted];
m0_97 -> m0_101  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_98 -> m0_99  [key=0, style=solid];
m0_98 -> m0_91  [key=2, style=dotted];
m0_99 -> m0_95  [key=0, style=bold, color=blue];
m0_162 -> m0_163  [key=0, style=solid];
m0_163 -> m0_164  [key=0, style=solid];
m0_163 -> m0_167  [key=2, style=dotted];
m0_163 -> m0_165  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_164 -> m0_165  [key=0, style=solid];
m0_164 -> m0_9  [key=2, style=dotted];
m0_164 -> m0_168  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_165 -> m0_166  [key=0, style=solid];
m0_165 -> m0_91  [key=2, style=dotted];
m0_166 -> m0_162  [key=0, style=bold, color=blue];
m0_122 -> m0_123  [key=0, style=solid];
m0_123 -> m0_124  [key=0, style=solid];
m0_123 -> m0_118  [key=2, style=dotted];
m0_123 -> m0_125  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_124 -> m0_125  [key=0, style=solid];
m0_124 -> m0_9  [key=2, style=dotted];
m0_124 -> m0_127  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_125 -> m0_126  [key=0, style=solid];
m0_125 -> m0_91  [key=2, style=dotted];
m0_126 -> m0_122  [key=0, style=bold, color=blue];
m0_152 -> m0_153  [key=0, style=solid];
m0_153 -> m0_154  [key=0, style=solid];
m0_153 -> m0_157  [key=2, style=dotted];
m0_153 -> m0_81  [key=2, style=dotted];
m0_153 -> m0_155  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_154 -> m0_155  [key=0, style=solid];
m0_154 -> m0_9  [key=2, style=dotted];
m0_154 -> m0_158  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_155 -> m0_156  [key=0, style=solid];
m0_155 -> m0_46  [key=2, style=dotted];
m0_155 -> m0_11  [key=2, style=dotted];
m0_156 -> m0_152  [key=0, style=bold, color=blue];
m0_24 -> m0_25  [key=0, style=solid];
m0_25 -> m0_26  [key=0, style=solid];
m0_25 -> m0_27  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_25 -> m0_25  [key=3, color=darkorchid, style=bold, label="Local variable double expectedResult"];
m0_26 -> m0_27  [key=0, style=solid];
m0_26 -> m0_9  [key=2, style=dotted];
m0_26 -> m0_29  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_27 -> m0_28  [key=0, style=solid];
m0_27 -> m0_20  [key=2, style=dotted];
m0_28 -> m0_24  [key=0, style=bold, color=blue];
m0_59 -> m0_60  [key=0, style=solid];
m0_59 -> m0_61  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m0_60 -> m0_61  [key=0, style=solid];
m0_60 -> m0_9  [key=2, style=dotted];
m0_60 -> m0_63  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_61 -> m0_62  [key=0, style=solid];
m0_61 -> m0_46  [key=2, style=dotted];
m0_61 -> m0_11  [key=2, style=dotted];
m0_62 -> m0_59  [key=0, style=bold, color=blue];
m0_15 -> m0_16  [key=0, style=solid];
m0_16 -> m0_17  [key=0, style=solid];
m0_16 -> m0_18  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_16 -> m0_16  [key=3, color=darkorchid, style=bold, label="Local variable int expectedResult"];
m0_17 -> m0_18  [key=0, style=solid];
m0_17 -> m0_9  [key=2, style=dotted];
m0_17 -> m0_21  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_18 -> m0_19  [key=0, style=solid];
m0_18 -> m0_20  [key=2, style=dotted];
m0_19 -> m0_15  [key=0, style=bold, color=blue];
m0_215 -> m0_216  [key=0, style=solid];
m0_216 -> m0_217  [key=0, style=solid];
m0_216 -> m0_211  [key=2, style=dotted];
m0_216 -> m0_218  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_217 -> m0_218  [key=0, style=solid];
m0_217 -> m0_9  [key=2, style=dotted];
m0_217 -> m0_220  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_218 -> m0_219  [key=0, style=solid];
m0_218 -> m0_46  [key=2, style=dotted];
m0_218 -> m0_11  [key=2, style=dotted];
m0_219 -> m0_215  [key=0, style=bold, color=blue];
m0_85 -> m0_86  [key=0, style=solid];
m0_86 -> m0_87  [key=0, style=solid];
m0_86 -> m0_90  [key=2, style=dotted];
m0_86 -> m0_88  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_87 -> m0_88  [key=0, style=solid];
m0_87 -> m0_9  [key=2, style=dotted];
m0_87 -> m0_92  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_88 -> m0_89  [key=0, style=solid];
m0_88 -> m0_91  [key=2, style=dotted];
m0_89 -> m0_85  [key=0, style=bold, color=blue];
m0_51 -> m0_52  [key=0, style=solid];
m0_52 -> m0_53  [key=0, style=solid];
m0_52 -> m0_54  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_53 -> m0_54  [key=0, style=solid];
m0_53 -> m0_9  [key=2, style=dotted];
m0_53 -> m0_56  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_54 -> m0_55  [key=0, style=solid];
m0_54 -> m0_46  [key=2, style=dotted];
m0_54 -> m0_11  [key=2, style=dotted];
m0_55 -> m0_51  [key=0, style=bold, color=blue];
m0_231 -> m0_13  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
m0_232 -> m0_145  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m0_232 -> m0_149  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
}
