digraph  {
m20_15 [cluster="CommandLine.Tests.ValueListAttributeFixture.MockSpecializedList.MockSpecializedList()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.ValueListAttributeFixture.MockSpecializedList.MockSpecializedList()", span="41-41"];
m20_3 [cluster="CommandLine.ValueListAttribute.ValueListAttribute(System.Type)", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.ValueListAttribute.ValueListAttribute(System.Type)", span="304-304"];
m20_12 [cluster="CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfStringSubType()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfStringSubType()", span="73-73"];
m20_13 [cluster="CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfStringSubType()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="0: new ValueListAttribute(new MockSpecializedList().GetType())", span="75-75"];
m20_14 [cluster="CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfStringSubType()", file="OptionArrayAttributeParsingFixture.cs", label="Exit CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfStringSubType()", span="73-73"];
m20_22 [cluster="CommandLine.Tests.ValueListAttributeFixture.MockOptions.MockOptions()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.ValueListAttributeFixture.MockOptions.MockOptions()", span="45-45"];
m20_27 [cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", span="89-89"];
m20_28 [cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="0: var options = new MockOptions()", span="91-91"];
m20_29 [cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="0: var values = ValueListAttribute.GetReference(options)", span="93-93"];
m20_33 [cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="0: base.ElementsShouldBeEqual(new string[] { ''value0'', ''value1'', ''value2'' }, options.Values)", span="98-98"];
m20_30 [cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="0: values.Add(''value0'')", span="94-94"];
m20_31 [cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="0: values.Add(''value1'')", span="95-95"];
m20_32 [cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="0: values.Add(''value2'')", span="96-96"];
m20_34 [cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", file="OptionArrayAttributeParsingFixture.cs", label="Exit CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", span="89-89"];
m20_16 [cluster="CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", span="79-79"];
m20_17 [cluster="CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="0: var options = new MockOptions()", span="81-81"];
m20_18 [cluster="CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="0: IList<string> values = ValueListAttribute.GetReference(options)", span="83-83"];
m20_19 [cluster="CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="0: values.Should().Not.Be.Null()", span="84-84"];
m20_20 [cluster="CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="0: values.GetType().Should().Equal(typeof(List<string>))", span="85-85"];
m20_21 [cluster="CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", file="OptionArrayAttributeParsingFixture.cs", label="Exit CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", span="79-79"];
m20_4 [cluster="CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsIncompatible()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsIncompatible()", span="61-61"];
m20_5 [cluster="CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsIncompatible()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="0: new ValueListAttribute(new List<object>().GetType())", span="63-63"];
m20_6 [cluster="CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsIncompatible()", file="OptionArrayAttributeParsingFixture.cs", label="Exit CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsIncompatible()", span="61-61"];
m20_35 [cluster="System.Collections.Generic.ICollection<T>.Add(T)", file="OptionArrayAttributeParsingFixture.cs", label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0"];
m20_23 [cluster="CommandLine.ValueListAttribute.GetReference(object)", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.ValueListAttribute.GetReference(object)", span="328-328"];
m20_8 [cluster="object.GetType()", file="OptionArrayAttributeParsingFixture.cs", label="Entry object.GetType()", span="0-0"];
m20_25 [cluster="Unk.Null", file="OptionArrayAttributeParsingFixture.cs", label="Entry Unk.Null", span=""];
m20_36 [cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual(string[], System.Collections.Generic.IList<string>)", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.BaseFixture.ElementsShouldBeEqual(string[], System.Collections.Generic.IList<string>)", span="48-48"];
m20_0 [cluster="CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsNull()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsNull()", span="54-54"];
m20_1 [cluster="CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsNull()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="0: new ValueListAttribute(null)", span="56-56"];
m20_2 [cluster="CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsNull()", file="OptionArrayAttributeParsingFixture.cs", label="Exit CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsNull()", span="54-54"];
m20_26 [cluster="Unk.Equal", file="OptionArrayAttributeParsingFixture.cs", label="Entry Unk.Equal", span=""];
m20_24 [cluster="Unk.Should", file="OptionArrayAttributeParsingFixture.cs", label="Entry Unk.Should", span=""];
m20_9 [cluster="CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfString()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfString()", span="67-67"];
m20_10 [cluster="CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfString()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs", label="0: new ValueListAttribute(new List<string>().GetType())", span="69-69"];
m20_11 [cluster="CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfString()", file="OptionArrayAttributeParsingFixture.cs", label="Exit CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfString()", span="67-67"];
m20_7 [cluster="System.Collections.Generic.List<T>.List()", file="OptionArrayAttributeParsingFixture.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m20_37 [file="OptionArrayAttributeParsingFixture.cs", label="CommandLine.Tests.ValueListAttributeFixture", span=""];
m21_10 [cluster="string.IsNullOrEmpty(string)", file="OptionAttribute.cs", label="Entry string.IsNullOrEmpty(string)", span="0-0"];
m21_0 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", file="OptionAttribute.cs", label="Entry CommandLine.OptionAttribute.OptionAttribute(string, string)", span="52-52"];
m21_1 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", file="OptionAttribute.cs", label="!string.IsNullOrEmpty(shortName)", span="54-54"];
m21_2 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", file="OptionAttribute.cs", label="_uniqueName = shortName", span="55-55"];
m21_3 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", file="OptionAttribute.cs", label="!string.IsNullOrEmpty(longName)", span="56-56"];
m21_4 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", file="OptionAttribute.cs", label="_uniqueName = longName", span="57-57"];
m21_7 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", file="OptionAttribute.cs", label="base.ShortName = shortName", span="62-62"];
m21_8 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", file="OptionAttribute.cs", label="base.LongName = longName", span="63-63"];
m21_5 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", file="OptionAttribute.cs", label="_uniqueName == null", span="59-59"];
m21_6 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", file="OptionAttribute.cs", label="throw new InvalidOperationException();", span="60-60"];
m21_9 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", file="OptionAttribute.cs", label="Exit CommandLine.OptionAttribute.OptionAttribute(string, string)", span="52-52"];
m21_11 [cluster="System.InvalidOperationException.InvalidOperationException()", file="OptionAttribute.cs", label="Entry System.InvalidOperationException.InvalidOperationException()", span="0-0"];
m21_12 [file="OptionAttribute.cs", label="CommandLine.OptionAttribute", span=""];
m30_40 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="113-113"];
m30_41 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", color=green, community=0, file="Program.cs", label="0: var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="118-122"];
m30_42 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="Program.cs", label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="125-125"];
m30_43 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="113-113"];
m30_150 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", file="Program.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="6-6"];
m30_172 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="Program.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33"];
m30_341 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="827-827"];
m30_342 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithScalarValueAndSequenceStringAdjacent(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="832-836"];
m30_343 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="Program.cs", label="expected.ShouldBeEquivalentTo(result.Value)", span="839-839"];
m30_344 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="827-827"];
m30_11 [cluster="Unk.True", file="Program.cs", label="Entry Unk.True", span=""];
m30_325 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="785-785"];
m30_326 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithFSharpOption(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="790-794"];
m30_327 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="Program.cs", label="result.Value.Offset != null", span="797-797"];
m30_328 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="Program.cs", label="expectedValue.ShouldBeEquivalentTo(result.Value.Offset.Value)", span="799-799"];
m30_329 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="Program.cs", label="expectedSome.ShouldBeEquivalentTo(FSharpOption<int>.get_IsSome(result.Value.Offset))", span="801-801"];
m30_330 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="785-785"];
m30_159 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="408-408"];
m30_160 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="413-417"];
m30_161 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="Program.cs", label="expected.ShouldBeEquivalentTo(result.Value.StringSequence)", span="420-420"];
m30_162 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="408-408"];
m30_233 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="559-559"];
m30_235 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="565-569"];
m30_236 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="Program.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="572-572"];
m30_234 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="Program.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="562-562"];
m30_237 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="559-559"];
m30_274 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="655-655"];
m30_276 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithRequiredValue(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="661-665"];
m30_277 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="Program.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="668-668"];
m30_275 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="Program.cs", label="var expectedResult = new[] { new MissingRequiredOptionError(NameInfo.EmptyName) }", span="658-658"];
m30_278 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="655-655"];
m30_220 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="Program.cs", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283"];
m30_320 [cluster="Unk.get_IsSome", file="Program.cs", label="Entry Unk.get_IsSome", span=""];
m30_82 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", file="Program.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="6-6"];
m30_151 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="386-386"];
m30_152 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="391-395"];
m30_153 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="Program.cs", label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="398-398"];
m30_154 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="386-386"];
m30_62 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", file="Program.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="6-6"];
m30_143 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="364-364"];
m30_144 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceWithoutRange(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="369-373"];
m30_145 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="Program.cs", label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="376-376"];
m30_146 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="364-364"];
m30_241 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="578-578"];
m30_243 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="584-588"];
m30_244 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="Program.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="591-591"];
m30_242 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="Program.cs", label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="581-581"];
m30_245 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="578-578"];
m30_55 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="158-158"];
m30_56 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="163-167"];
m30_57 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="Program.cs", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="170-170"];
m30_58 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="158-158"];
m30_54 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", file="Program.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", span="6-6"];
m30_266 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="637-637"];
m30_267 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="642-646"];
m30_268 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="Program.cs", label="Assert.True(expected.Equals(result.Value.StringValue))", span="649-649"];
m30_269 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="637-637"];
m30_299 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="719-719"];
m30_300 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithNullables(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="724-728"];
m30_301 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="Program.cs", label="expected.ShouldBeEquivalentTo(result.Value.NullableInt)", span="731-731"];
m30_302 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="719-719"];
m30_207 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="501-501"];
m30_209 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="508-512"];
m30_208 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="Program.cs", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="503-506"];
m30_210 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="Program.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="515-515"];
m30_211 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="501-501"];
m30_187 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="Program.cs", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
m30_31 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="91-91"];
m30_32 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", color=green, community=0, file="Program.cs", label="0: var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequence(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="96-100"];
m30_33 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", color=green, community=0, file="Program.cs", label="0: Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="103-103"];
m30_34 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="91-91"];
m30_0 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="19-19"];
m30_3 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", color=green, community=0, file="Program.cs", label="0: var result = InstanceBuilder.Build(\r\n                () => fakeOptions,\r\n                new[] { ''--help'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="28-32"];
m30_1 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="Program.cs", label="var fakeOptions = new FakeOptions()", span="22-22"];
m30_2 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="Program.cs", label="var expectedResult = ParserResult.Create(\r\n                ParserResultType.Options,\r\n                fakeOptions, new Error[] { new HelpRequestedError() })", span="23-25"];
m30_4 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="Program.cs", label="Assert.True(expectedResult.Equals(result))", span="35-35"];
m30_5 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="19-19"];
m30_224 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="540-540"];
m30_226 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequired(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="546-550"];
m30_227 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="Program.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="553-553"];
m30_225 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="Program.cs", label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="543-543"];
m30_228 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="540-540"];
m30_8 [cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="Program.cs", label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="100-100"];
m30_290 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="696-696"];
m30_292 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceMinMaxEqual(),\r\n                new[] { ''one'', ''two'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="702-706"];
m30_293 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="Program.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="709-709"];
m30_291 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="Program.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="699-699"];
m30_294 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="696-696"];
m30_307 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="741-741"];
m30_308 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithNullables(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="746-750"];
m30_309 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="Program.cs", label="expected.ShouldBeEquivalentTo(result.Value.NullableLong)", span="753-753"];
m30_310 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="741-741"];
m30_78 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="Program.cs", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316"];
m30_184 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="446-446"];
m30_12 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="29-29"];
m30_27 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="73-73"];
m30_28 [cluster="lambda expression", color=green, community=0, file="Program.cs", label="0: new FakeOptionsWithDouble()", span="73-73"];
m30_29 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="73-73"];
m30_36 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="97-97"];
m30_44 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="119-119"];
m30_51 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="142-142"];
m30_52 [cluster="lambda expression", color=green, community=0, file="Program.cs", label="0: new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="142-142"];
m30_53 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="142-142"];
m30_13 [cluster="lambda expression", file="Program.cs", label=fakeOptions, span="29-29"];
m30_14 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="29-29"];
m30_38 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="97-97"];
m30_37 [cluster="lambda expression", file="Program.cs", label="new FakeOptionsWithSequence()", span="97-97"];
m30_46 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="119-119"];
m30_45 [cluster="lambda expression", file="Program.cs", label="new FakeOptions()", span="119-119"];
m30_71 [cluster="lambda expression", file="Program.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="183-183"];
m30_21 [cluster="lambda expression", file="Program.cs", label="new FakeOptions()", span="50-50"];
m30_239 [cluster="lambda expression", file="Program.cs", label="new FakeOptions()", span="566-566"];
m30_248 [cluster="lambda expression", file="Program.cs", label="new FakeOptions()", span="585-585"];
m30_256 [cluster="lambda expression", file="Program.cs", label="new FakeOptions()", span="604-604"];
m30_264 [cluster="lambda expression", file="Program.cs", label="new FakeOptions()", span="623-623"];
m30_272 [cluster="lambda expression", file="Program.cs", label="new FakeOptions()", span="643-643"];
m30_288 [cluster="lambda expression", file="Program.cs", label="new FakeOptions()", span="684-684"];
m30_20 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="50-50"];
m30_59 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="164-164"];
m30_70 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="183-183"];
m30_79 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="202-202"];
m30_88 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="222-222"];
m30_96 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="241-241"];
m30_105 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="265-265"];
m30_115 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="284-284"];
m30_123 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="303-303"];
m30_131 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="322-322"];
m30_140 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="347-347"];
m30_147 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="370-370"];
m30_155 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="392-392"];
m30_163 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="414-414"];
m30_194 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="469-469"];
m30_204 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="489-489"];
m30_212 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="509-509"];
m30_221 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="529-529"];
m30_229 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="547-547"];
m30_238 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="566-566"];
m30_247 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="585-585"];
m30_255 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="604-604"];
m30_263 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="623-623"];
m30_271 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="643-643"];
m30_279 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="662-662"];
m30_287 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="684-684"];
m30_295 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="703-703"];
m30_303 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="725-725"];
m30_311 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="747-747"];
m30_321 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="767-767"];
m30_331 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="791-791"];
m30_338 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="814-814"];
m30_345 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="833-833"];
m30_72 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="183-183"];
m30_22 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="50-50"];
m30_240 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="566-566"];
m30_249 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="585-585"];
m30_257 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="604-604"];
m30_265 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="623-623"];
m30_273 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="643-643"];
m30_289 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="684-684"];
m30_61 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="164-164"];
m30_60 [cluster="lambda expression", file="Program.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="164-164"];
m30_81 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="202-202"];
m30_80 [cluster="lambda expression", file="Program.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="202-202"];
m30_90 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="222-222"];
m30_89 [cluster="lambda expression", file="Program.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="222-222"];
m30_98 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="241-241"];
m30_97 [cluster="lambda expression", file="Program.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="241-241"];
m30_107 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="265-265"];
m30_106 [cluster="lambda expression", file="Program.cs", label="new FakeOptionsWithEnum()", span="265-265"];
m30_117 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="284-284"];
m30_116 [cluster="lambda expression", file="Program.cs", label="new FakeOptionsWithEnum()", span="284-284"];
m30_125 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="303-303"];
m30_124 [cluster="lambda expression", file="Program.cs", label="new FakeOptionsWithEnum()", span="303-303"];
m30_133 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="322-322"];
m30_132 [cluster="lambda expression", file="Program.cs", label="new FakeOptionsWithEnum()", span="322-322"];
m30_142 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="347-347"];
m30_141 [cluster="lambda expression", file="Program.cs", label="new FakeOptionsWithValues()", span="347-347"];
m30_149 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="370-370"];
m30_148 [cluster="lambda expression", file="Program.cs", label="new FakeOptionsWithSequenceWithoutRange()", span="370-370"];
m30_157 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="392-392"];
m30_156 [cluster="lambda expression", file="Program.cs", label="new FakeOptionsWithSequenceAndSeparator()", span="392-392"];
m30_165 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="414-414"];
m30_164 [cluster="lambda expression", file="Program.cs", label="new FakeOptionsWithSequenceAndSeparator()", span="414-414"];
m30_196 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="469-469"];
m30_195 [cluster="lambda expression", file="Program.cs", label="new FakeOptionsWithSets()", span="469-469"];
m30_206 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="489-489"];
m30_205 [cluster="lambda expression", file="Program.cs", label="new FakeOptionWithRequiredAndSet()", span="489-489"];
m30_214 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="509-509"];
m30_213 [cluster="lambda expression", file="Program.cs", label="new FakeOptionWithRequiredAndSet()", span="509-509"];
m30_223 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="529-529"];
m30_222 [cluster="lambda expression", file="Program.cs", label="new FakeOptionWithRequiredAndSet()", span="529-529"];
m30_231 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="547-547"];
m30_230 [cluster="lambda expression", file="Program.cs", label="new FakeOptionWithRequired()", span="547-547"];
m30_281 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="662-662"];
m30_280 [cluster="lambda expression", file="Program.cs", label="new FakeOptionsWithRequiredValue()", span="662-662"];
m30_297 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="703-703"];
m30_296 [cluster="lambda expression", file="Program.cs", label="new FakeOptionsWithSequenceMinMaxEqual()", span="703-703"];
m30_305 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="725-725"];
m30_304 [cluster="lambda expression", file="Program.cs", label="new FakeOptionsWithNullables()", span="725-725"];
m30_313 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="747-747"];
m30_312 [cluster="lambda expression", file="Program.cs", label="new FakeOptionsWithNullables()", span="747-747"];
m30_323 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="767-767"];
m30_322 [cluster="lambda expression", file="Program.cs", label="new FakeOptionsWithFSharpOption()", span="767-767"];
m30_333 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="791-791"];
m30_332 [cluster="lambda expression", file="Program.cs", label="new FakeOptionsWithFSharpOption()", span="791-791"];
m30_340 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="814-814"];
m30_339 [cluster="lambda expression", file="Program.cs", label="new FakeOptionsWithRequiredValue()", span="814-814"];
m30_347 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="833-833"];
m30_346 [cluster="lambda expression", file="Program.cs", label="new FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="833-833"];
m30_174 [cluster="lambda expression", file="Program.cs", label="new FakeOptionsWithValues()", span="443-443"];
m30_173 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="443-443"];
m30_175 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="443-443"];
m30_176 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="444-446"];
m30_178 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="444-446"];
m30_177 [cluster="lambda expression", file="Program.cs", label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="445-446"];
m30_181 [cluster="lambda expression", file="Program.cs", label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="446-446"];
m30_185 [cluster="lambda expression", file="Program.cs", label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="446-446"];
m30_180 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="446-446"];
m30_182 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="446-446"];
m30_186 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="446-446"];
m30_215 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="520-520"];
m30_217 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="528-532"];
m30_218 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="Program.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="535-535"];
m30_216 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="Program.cs", label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="522-526"];
m30_219 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="520-520"];
m30_100 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="259-259"];
m30_101 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="264-268"];
m30_102 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="Program.cs", label="expected.ShouldBeEquivalentTo(result.Value.Colors)", span="271-271"];
m30_103 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="259-259"];
m30_35 [cluster="Unk.SequenceEqual", file="Program.cs", label="Entry Unk.SequenceEqual", span=""];
m30_126 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="315-315"];
m30_128 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''RED'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="321-325"];
m30_129 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="Program.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="328-328"];
m30_127 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="Program.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="318-318"];
m30_130 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="315-315"];
m30_68 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="Program.cs", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="261-261"];
m30_334 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="808-808"];
m30_335 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithRequiredValue(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="813-817"];
m30_336 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="Program.cs", label="expected.ShouldBeEquivalentTo(result.Value)", span="820-820"];
m30_337 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="808-808"];
m30_99 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", file="Program.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="6-6"];
m30_83 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="215-215"];
m30_85 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="221-225"];
m30_86 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="Program.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="228-228"];
m30_84 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="Program.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="218-218"];
m30_87 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="215-215"];
m30_166 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="429-429"];
m30_170 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="Program.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="452-452"];
m30_167 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="Program.cs", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="432-438"];
m30_169 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="442-449"];
m30_168 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="Program.cs", label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="439-439"];
m30_171 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="429-429"];
m30_258 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="616-616"];
m30_260 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="622-626"];
m30_261 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="Program.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="629-629"];
m30_259 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="Program.cs", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="619-619"];
m30_262 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="616-616"];
m30_10 [cluster="CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", file="Program.cs", label="Entry CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", span="87-87"];
m30_30 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", file="Program.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", span="4-4"];
m30_63 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="176-176"];
m30_65 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                new[] { ''-s'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="182-186"];
m30_66 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="Program.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="189-189"];
m30_64 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="Program.cs", label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="179-179"];
m30_67 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="176-176"];
m30_134 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="334-334"];
m30_136 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="346-350"];
m30_135 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="Program.cs", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="337-343"];
m30_137 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="Program.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="353-353"];
m30_138 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="334-334"];
m30_283 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="678-678"];
m30_284 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="683-687"];
m30_285 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="Program.cs", label="expected.ShouldBeEquivalentTo(result.Value.StringValue)", span="690-690"];
m30_286 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="678-678"];
m30_108 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", file="Program.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="11-11"];
m30_348 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", file="Program.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="6-6"];
m30_203 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", file="Program.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", span="4-4"];
m30_73 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="195-195"];
m30_75 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="201-205"];
m30_76 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="Program.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="208-208"];
m30_74 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="Program.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="198-198"];
m30_77 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="195-195"];
m30_246 [cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", file="Program.cs", label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="272-272"];
m30_91 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="234-234"];
m30_93 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue(),\r\n                new[] { ''one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="240-244"];
m30_94 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="Program.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="247-247"];
m30_92 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="Program.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="237-237"];
m30_95 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="234-234"];
m30_198 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="481-481"];
m30_200 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="488-492"];
m30_199 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="Program.cs", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = null\r\n            }", span="483-486"];
m30_201 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="Program.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="495-495"];
m30_202 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="481-481"];
m30_114 [cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="Program.cs", label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="305-305"];
m30_158 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", file="Program.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="6-6"];
m30_179 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="Program.cs", label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="31-31"];
m30_183 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="Program.cs", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11"];
m30_270 [cluster="string.Equals(string)", file="Program.cs", label="Entry string.Equals(string)", span="0-0"];
m30_197 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", file="Program.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4"];
m30_193 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="Program.cs", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294"];
m30_314 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="761-761"];
m30_315 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithFSharpOption(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="766-770"];
m30_316 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="Program.cs", label="result.Value.FileName != null", span="773-773"];
m30_317 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="Program.cs", label="expectedValue.ShouldBeEquivalentTo(result.Value.FileName.Value)", span="775-775"];
m30_318 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="Program.cs", label="expectedSome.ShouldBeEquivalentTo(FSharpOption<string>.get_IsSome(result.Value.FileName))", span="777-777"];
m30_319 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="761-761"];
m30_298 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", file="Program.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", span="9-9"];
m30_232 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", file="Program.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4"];
m30_69 [cluster="CommandLine.NameInfo.NameInfo(string, string)", file="Program.cs", label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20"];
m30_47 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="136-136"];
m30_48 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", color=green, community=0, file="Program.cs", label="0: var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="141-145"];
m30_49 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="Program.cs", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="148-148"];
m30_50 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="136-136"];
m30_306 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", file="Program.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", span="4-4"];
m30_15 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="44-44"];
m30_16 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="49-53"];
m30_17 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="Program.cs", label="Assert.Equal(expected, result.Value.LongValue)", span="56-56"];
m30_18 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="44-44"];
m30_39 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", file="Program.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", span="6-6"];
m30_6 [cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", file="Program.cs", label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6"];
m30_250 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="597-597"];
m30_252 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="603-607"];
m30_253 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="Program.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="610-610"];
m30_251 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="Program.cs", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="600-600"];
m30_254 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="597-597"];
m30_118 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="296-296"];
m30_120 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''Yellow'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="302-306"];
m30_121 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="Program.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="309-309"];
m30_119 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="Program.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="299-299"];
m30_122 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="296-296"];
m30_109 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="277-277"];
m30_111 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''3'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="283-287"];
m30_112 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="Program.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="290-290"];
m30_110 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="Program.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="280-280"];
m30_113 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="277-277"];
m30_23 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="67-67"];
m30_24 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", color=green, community=0, file="Program.cs", label="0: var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithDouble(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="72-76"];
m30_25 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", color=green, community=0, file="Program.cs", label="0: Assert.Equal(expected, result.Value.DoubleValue)", span="79-79"];
m30_26 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="67-67"];
m30_139 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", file="Program.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6"];
m30_282 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", file="Program.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", span="4-4"];
m30_7 [cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="Program.cs", label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="338-338"];
m30_19 [cluster="Unk.Equal", file="Program.cs", label="Entry Unk.Equal", span=""];
m30_188 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="458-458"];
m30_190 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="Program.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSets(),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="468-472"];
m30_191 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="Program.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="475-475"];
m30_189 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="Program.cs", label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl'')),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''))\r\n                }", span="461-465"];
m30_192 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="458-458"];
m30_104 [cluster="Unk.ShouldBeEquivalentTo", file="Program.cs", label="Entry Unk.ShouldBeEquivalentTo", span=""];
m30_324 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()", file="Program.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()", span="6-6"];
m30_9 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="Program.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12"];
m30_349 [file="Program.cs", label=fakeOptions, span=""];
m30_350 [file="Program.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
m42_34 [cluster="CommandLine.ReflectionUtil.RetrieveFieldList<TAttribute>(object)", file="ValueListAttribute.cs", label="Entry CommandLine.ReflectionUtil.RetrieveFieldList<TAttribute>(object)", span="38-38"];
m42_21 [cluster="CommandLine.ValueListAttribute.GetField(object, out System.Type)", file="ValueListAttribute.cs", label="Entry CommandLine.ValueListAttribute.GetField(object, out System.Type)", span="109-109"];
m42_37 [cluster="CommandLine.ValueListAttribute.GetField(object, out System.Type)", color=green, community=0, file="ValueListAttribute.cs", label="0: var list = ReflectionUtil.RetrieveFieldList<ValueListAttribute>(target)", span="113-113"];
m42_36 [cluster="CommandLine.ValueListAttribute.GetField(object, out System.Type)", file="ValueListAttribute.cs", label="concreteType = null", span="111-111"];
m42_38 [cluster="CommandLine.ValueListAttribute.GetField(object, out System.Type)", color=green, community=0, file="ValueListAttribute.cs", label="0: list.Count == 0", span="114-114"];
m42_40 [cluster="CommandLine.ValueListAttribute.GetField(object, out System.Type)", file="ValueListAttribute.cs", label="list.Count > 1", span="117-117"];
m42_42 [cluster="CommandLine.ValueListAttribute.GetField(object, out System.Type)", file="ValueListAttribute.cs", label="var pairZero = list[0]", span="120-120"];
m42_39 [cluster="CommandLine.ValueListAttribute.GetField(object, out System.Type)", file="ValueListAttribute.cs", label="return null;", span="115-115"];
m42_41 [cluster="CommandLine.ValueListAttribute.GetField(object, out System.Type)", file="ValueListAttribute.cs", label="throw new InvalidOperationException();", span="118-118"];
m42_43 [cluster="CommandLine.ValueListAttribute.GetField(object, out System.Type)", file="ValueListAttribute.cs", label="concreteType = pairZero.Right.ConcreteType", span="121-121"];
m42_44 [cluster="CommandLine.ValueListAttribute.GetField(object, out System.Type)", file="ValueListAttribute.cs", label="return pairZero.Left;", span="123-123"];
m42_45 [cluster="CommandLine.ValueListAttribute.GetField(object, out System.Type)", file="ValueListAttribute.cs", label="Exit CommandLine.ValueListAttribute.GetField(object, out System.Type)", span="109-109"];
m42_25 [cluster="CommandLine.ValueListAttribute.GetAttribute(object)", file="ValueListAttribute.cs", label="Entry CommandLine.ValueListAttribute.GetAttribute(object)", span="95-95"];
m42_26 [cluster="CommandLine.ValueListAttribute.GetAttribute(object)", color=green, community=0, file="ValueListAttribute.cs", label="0: var list = ReflectionUtil.RetrieveFieldList<ValueListAttribute>(target)", span="97-97"];
m42_27 [cluster="CommandLine.ValueListAttribute.GetAttribute(object)", color=green, community=0, file="ValueListAttribute.cs", label="0: list.Count == 0", span="98-98"];
m42_29 [cluster="CommandLine.ValueListAttribute.GetAttribute(object)", file="ValueListAttribute.cs", label="list.Count > 1", span="101-101"];
m42_31 [cluster="CommandLine.ValueListAttribute.GetAttribute(object)", file="ValueListAttribute.cs", label="var pairZero = list[0]", span="104-104"];
m42_28 [cluster="CommandLine.ValueListAttribute.GetAttribute(object)", file="ValueListAttribute.cs", label="return null;", span="99-99"];
m42_30 [cluster="CommandLine.ValueListAttribute.GetAttribute(object)", file="ValueListAttribute.cs", label="throw new InvalidOperationException();", span="102-102"];
m42_32 [cluster="CommandLine.ValueListAttribute.GetAttribute(object)", file="ValueListAttribute.cs", label="return pairZero.Right;", span="106-106"];
m42_33 [cluster="CommandLine.ValueListAttribute.GetAttribute(object)", file="ValueListAttribute.cs", label="Exit CommandLine.ValueListAttribute.GetAttribute(object)", span="95-95"];
m42_13 [cluster="CommandLine.ValueListAttribute.GetReference(object)", file="ValueListAttribute.cs", label="Entry CommandLine.ValueListAttribute.GetReference(object)", span="82-82"];
m42_15 [cluster="CommandLine.ValueListAttribute.GetReference(object)", color=green, community=0, file="ValueListAttribute.cs", label="0: var field = GetField(target, out concreteType)", span="85-85"];
m42_14 [cluster="CommandLine.ValueListAttribute.GetReference(object)", file="ValueListAttribute.cs", label="Type concreteType", span="84-84"];
m42_16 [cluster="CommandLine.ValueListAttribute.GetReference(object)", color=green, community=0, file="ValueListAttribute.cs", label="0: field == null", span="87-87"];
m42_18 [cluster="CommandLine.ValueListAttribute.GetReference(object)", color=green, community=0, file="ValueListAttribute.cs", label="0: field.SetValue(target, Activator.CreateInstance(concreteType))", span="90-90"];
m42_19 [cluster="CommandLine.ValueListAttribute.GetReference(object)", color=green, community=0, file="ValueListAttribute.cs", label="0: return (IList<string>)field.GetValue(target);", span="92-92"];
m42_17 [cluster="CommandLine.ValueListAttribute.GetReference(object)", file="ValueListAttribute.cs", label="return null;", span="88-88"];
m42_20 [cluster="CommandLine.ValueListAttribute.GetReference(object)", file="ValueListAttribute.cs", label="Exit CommandLine.ValueListAttribute.GetReference(object)", span="82-82"];
m42_24 [cluster="System.Reflection.FieldInfo.GetValue(object)", file="ValueListAttribute.cs", label="Entry System.Reflection.FieldInfo.GetValue(object)", span="0-0"];
m42_22 [cluster="System.Activator.CreateInstance(System.Type)", file="ValueListAttribute.cs", label="Entry System.Activator.CreateInstance(System.Type)", span="0-0"];
m42_23 [cluster="System.Reflection.FieldInfo.SetValue(object, object)", file="ValueListAttribute.cs", label="Entry System.Reflection.FieldInfo.SetValue(object, object)", span="0-0"];
m42_35 [cluster="System.InvalidOperationException.InvalidOperationException()", file="ValueListAttribute.cs", label="Entry System.InvalidOperationException.InvalidOperationException()", span="0-0"];
m20_12 -> m20_13  [color=red, key=0, style=solid];
m20_13 -> m20_14  [color=red, key=0, style=solid];
m20_13 -> m20_3  [color=red, key=2, style=dotted];
m20_13 -> m20_15  [color=red, key=2, style=dotted];
m20_13 -> m20_8  [color=red, key=2, style=dotted];
m20_14 -> m20_12  [color=blue, key=0, style=bold];
m20_27 -> m20_28  [color=red, key=0, style=solid];
m20_28 -> m20_29  [color=red, key=0, style=solid];
m20_28 -> m20_22  [color=red, key=2, style=dotted];
m20_28 -> m20_33  [color=red, key=1, label=options, style=dashed];
m20_29 -> m20_30  [color=red, key=0, style=solid];
m20_29 -> m20_23  [color=red, key=2, style=dotted];
m20_29 -> m20_31  [color=red, key=1, label=values, style=dashed];
m20_29 -> m20_32  [color=red, key=1, label=values, style=dashed];
m20_33 -> m20_34  [color=red, key=0, style=solid];
m20_33 -> m20_36  [color=red, key=2, style=dotted];
m20_30 -> m20_31  [color=red, key=0, style=solid];
m20_30 -> m20_35  [color=red, key=2, style=dotted];
m20_31 -> m20_32  [color=red, key=0, style=solid];
m20_31 -> m20_35  [color=red, key=2, style=dotted];
m20_32 -> m20_33  [color=red, key=0, style=solid];
m20_32 -> m20_35  [color=red, key=2, style=dotted];
m20_34 -> m20_27  [color=blue, key=0, style=bold];
m20_16 -> m20_17  [color=red, key=0, style=solid];
m20_17 -> m20_18  [color=red, key=0, style=solid];
m20_17 -> m20_22  [color=red, key=2, style=dotted];
m20_18 -> m20_19  [color=red, key=0, style=solid];
m20_18 -> m20_23  [color=red, key=2, style=dotted];
m20_18 -> m20_20  [color=red, key=1, label=values, style=dashed];
m20_19 -> m20_20  [color=red, key=0, style=solid];
m20_19 -> m20_24  [color=red, key=2, style=dotted];
m20_19 -> m20_25  [color=red, key=2, style=dotted];
m20_20 -> m20_21  [color=red, key=0, style=solid];
m20_20 -> m20_8  [color=red, key=2, style=dotted];
m20_20 -> m20_24  [color=red, key=2, style=dotted];
m20_20 -> m20_26  [color=red, key=2, style=dotted];
m20_21 -> m20_16  [color=blue, key=0, style=bold];
m20_4 -> m20_5  [color=red, key=0, style=solid];
m20_5 -> m20_6  [color=red, key=0, style=solid];
m20_5 -> m20_3  [color=red, key=2, style=dotted];
m20_5 -> m20_7  [color=red, key=2, style=dotted];
m20_5 -> m20_8  [color=red, key=2, style=dotted];
m20_6 -> m20_4  [color=blue, key=0, style=bold];
m20_0 -> m20_1  [color=red, key=0, style=solid];
m20_1 -> m20_2  [color=red, key=0, style=solid];
m20_1 -> m20_3  [color=red, key=2, style=dotted];
m20_2 -> m20_0  [color=blue, key=0, style=bold];
m20_9 -> m20_10  [color=red, key=0, style=solid];
m20_10 -> m20_11  [color=red, key=0, style=solid];
m20_10 -> m20_3  [color=red, key=2, style=dotted];
m20_10 -> m20_7  [color=red, key=2, style=dotted];
m20_10 -> m20_8  [color=red, key=2, style=dotted];
m20_11 -> m20_9  [color=blue, key=0, style=bold];
m20_37 -> m20_33  [color=red, key=1, label="CommandLine.Tests.ValueListAttributeFixture", style=dashed];
m21_0 -> m21_1  [key=0, style=solid];
m21_0 -> m21_2  [color=darkseagreen4, key=1, label=string, style=dashed];
m21_0 -> m21_3  [color=darkseagreen4, key=1, label=string, style=dashed];
m21_0 -> m21_4  [color=darkseagreen4, key=1, label=string, style=dashed];
m21_0 -> m21_7  [color=darkseagreen4, key=1, label=string, style=dashed];
m21_0 -> m21_8  [color=darkseagreen4, key=1, label=string, style=dashed];
m21_1 -> m21_2  [key=0, style=solid];
m21_1 -> m21_3  [key=0, style=solid];
m21_1 -> m21_10  [key=2, style=dotted];
m21_2 -> m21_5  [key=0, style=solid];
m21_3 -> m21_4  [key=0, style=solid];
m21_3 -> m21_5  [key=0, style=solid];
m21_3 -> m21_10  [key=2, style=dotted];
m21_4 -> m21_5  [key=0, style=solid];
m21_7 -> m21_8  [key=0, style=solid];
m21_8 -> m21_9  [key=0, style=solid];
m21_5 -> m21_6  [key=0, style=solid];
m21_5 -> m21_7  [key=0, style=solid];
m21_6 -> m21_9  [key=0, style=solid];
m21_6 -> m21_11  [key=2, style=dotted];
m21_9 -> m21_0  [color=blue, key=0, style=bold];
m21_12 -> m21_2  [color=darkseagreen4, key=1, label="CommandLine.OptionAttribute", style=dashed];
m21_12 -> m21_4  [color=darkseagreen4, key=1, label="CommandLine.OptionAttribute", style=dashed];
m21_12 -> m21_5  [color=darkseagreen4, key=1, label="CommandLine.OptionAttribute", style=dashed];
m21_12 -> m21_7  [color=darkseagreen4, key=1, label="CommandLine.OptionAttribute", style=dashed];
m21_12 -> m21_8  [color=darkseagreen4, key=1, label="CommandLine.OptionAttribute", style=dashed];
m30_40 -> m30_41  [color=green, key=0, style=solid];
m30_40 -> m30_42  [color=darkseagreen4, key=1, label="int[]", style=dashed];
m30_41 -> m30_42  [color=green, key=0, style=solid];
m30_41 -> m30_9  [color=green, key=2, style=dotted];
m30_41 -> m30_44  [color=green, key=1, label="lambda expression", style=dashed];
m30_42 -> m30_35  [key=2, style=dotted];
m30_42 -> m30_11  [key=2, style=dotted];
m30_42 -> m30_43  [key=0, style=solid];
m30_43 -> m30_40  [color=blue, key=0, style=bold];
m30_341 -> m30_342  [key=0, style=solid];
m30_341 -> m30_343  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent", style=dashed];
m30_342 -> m30_9  [key=2, style=dotted];
m30_342 -> m30_343  [key=0, style=solid];
m30_342 -> m30_345  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m30_343 -> m30_344  [key=0, style=solid];
m30_343 -> m30_104  [key=2, style=dotted];
m30_344 -> m30_341  [color=blue, key=0, style=bold];
m30_325 -> m30_326  [key=0, style=solid];
m30_325 -> m30_328  [color=darkseagreen4, key=1, label=int, style=dashed];
m30_325 -> m30_329  [color=darkseagreen4, key=1, label=bool, style=dashed];
m30_326 -> m30_9  [key=2, style=dotted];
m30_326 -> m30_327  [key=0, style=solid];
m30_326 -> m30_331  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m30_326 -> m30_328  [color=darkseagreen4, key=1, label=result, style=dashed];
m30_326 -> m30_329  [color=darkseagreen4, key=1, label=result, style=dashed];
m30_327 -> m30_328  [key=0, style=solid];
m30_327 -> m30_329  [key=0, style=solid];
m30_328 -> m30_329  [key=0, style=solid];
m30_328 -> m30_104  [key=2, style=dotted];
m30_329 -> m30_330  [key=0, style=solid];
m30_329 -> m30_320  [key=2, style=dotted];
m30_329 -> m30_104  [key=2, style=dotted];
m30_330 -> m30_325  [color=blue, key=0, style=bold];
m30_159 -> m30_160  [key=0, style=solid];
m30_159 -> m30_161  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m30_160 -> m30_9  [key=2, style=dotted];
m30_160 -> m30_161  [key=0, style=solid];
m30_160 -> m30_163  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m30_161 -> m30_162  [key=0, style=solid];
m30_161 -> m30_104  [key=2, style=dotted];
m30_162 -> m30_159  [color=blue, key=0, style=bold];
m30_233 -> m30_234  [key=0, style=solid];
m30_235 -> m30_9  [key=2, style=dotted];
m30_235 -> m30_236  [key=0, style=solid];
m30_235 -> m30_238  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m30_236 -> m30_35  [key=2, style=dotted];
m30_236 -> m30_11  [key=2, style=dotted];
m30_236 -> m30_237  [key=0, style=solid];
m30_234 -> m30_235  [key=0, style=solid];
m30_234 -> m30_236  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m30_234 -> m30_78  [key=2, style=dotted];
m30_234 -> m30_69  [key=2, style=dotted];
m30_237 -> m30_233  [color=blue, key=0, style=bold];
m30_274 -> m30_275  [key=0, style=solid];
m30_276 -> m30_9  [key=2, style=dotted];
m30_276 -> m30_277  [key=0, style=solid];
m30_276 -> m30_279  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m30_277 -> m30_35  [key=2, style=dotted];
m30_277 -> m30_11  [key=2, style=dotted];
m30_277 -> m30_278  [key=0, style=solid];
m30_275 -> m30_276  [key=0, style=solid];
m30_275 -> m30_277  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m30_275 -> m30_220  [key=2, style=dotted];
m30_278 -> m30_274  [color=blue, key=0, style=bold];
m30_151 -> m30_152  [key=0, style=solid];
m30_151 -> m30_153  [color=darkseagreen4, key=1, label="long[]", style=dashed];
m30_152 -> m30_9  [key=2, style=dotted];
m30_152 -> m30_153  [key=0, style=solid];
m30_152 -> m30_155  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m30_153 -> m30_154  [key=0, style=solid];
m30_153 -> m30_104  [key=2, style=dotted];
m30_154 -> m30_151  [color=blue, key=0, style=bold];
m30_143 -> m30_144  [key=0, style=solid];
m30_143 -> m30_145  [color=darkseagreen4, key=1, label="long[]", style=dashed];
m30_144 -> m30_9  [key=2, style=dotted];
m30_144 -> m30_145  [key=0, style=solid];
m30_144 -> m30_147  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m30_145 -> m30_146  [key=0, style=solid];
m30_145 -> m30_104  [key=2, style=dotted];
m30_146 -> m30_143  [color=blue, key=0, style=bold];
m30_241 -> m30_242  [key=0, style=solid];
m30_243 -> m30_9  [key=2, style=dotted];
m30_243 -> m30_244  [key=0, style=solid];
m30_243 -> m30_247  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m30_244 -> m30_35  [key=2, style=dotted];
m30_244 -> m30_11  [key=2, style=dotted];
m30_244 -> m30_245  [key=0, style=solid];
m30_242 -> m30_243  [key=0, style=solid];
m30_242 -> m30_244  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m30_242 -> m30_246  [key=2, style=dotted];
m30_245 -> m30_241  [color=blue, key=0, style=bold];
m30_55 -> m30_56  [key=0, style=solid];
m30_55 -> m30_57  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m30_56 -> m30_9  [key=2, style=dotted];
m30_56 -> m30_57  [key=0, style=solid];
m30_56 -> m30_59  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m30_57 -> m30_35  [key=2, style=dotted];
m30_57 -> m30_11  [key=2, style=dotted];
m30_57 -> m30_58  [key=0, style=solid];
m30_58 -> m30_55  [color=blue, key=0, style=bold];
m30_266 -> m30_267  [key=0, style=solid];
m30_266 -> m30_268  [color=darkseagreen4, key=1, label=string, style=dashed];
m30_267 -> m30_9  [key=2, style=dotted];
m30_267 -> m30_268  [key=0, style=solid];
m30_267 -> m30_271  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m30_268 -> m30_11  [key=2, style=dotted];
m30_268 -> m30_269  [key=0, style=solid];
m30_268 -> m30_270  [key=2, style=dotted];
m30_269 -> m30_266  [color=blue, key=0, style=bold];
m30_299 -> m30_300  [key=0, style=solid];
m30_299 -> m30_301  [color=darkseagreen4, key=1, label="int?", style=dashed];
m30_300 -> m30_9  [key=2, style=dotted];
m30_300 -> m30_301  [key=0, style=solid];
m30_300 -> m30_303  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m30_301 -> m30_302  [key=0, style=solid];
m30_301 -> m30_104  [key=2, style=dotted];
m30_302 -> m30_299  [color=blue, key=0, style=bold];
m30_207 -> m30_208  [key=0, style=solid];
m30_209 -> m30_9  [key=2, style=dotted];
m30_209 -> m30_210  [key=0, style=solid];
m30_209 -> m30_212  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m30_208 -> m30_209  [key=0, style=solid];
m30_208 -> m30_203  [key=2, style=dotted];
m30_208 -> m30_210  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m30_210 -> m30_211  [key=0, style=solid];
m30_210 -> m30_104  [key=2, style=dotted];
m30_211 -> m30_207  [color=blue, key=0, style=bold];
m30_31 -> m30_32  [color=green, key=0, style=solid];
m30_31 -> m30_33  [color=green, key=1, label="int[]", style=dashed];
m30_32 -> m30_33  [color=green, key=0, style=solid];
m30_32 -> m30_9  [color=green, key=2, style=dotted];
m30_32 -> m30_36  [color=green, key=1, label="lambda expression", style=dashed];
m30_33 -> m30_34  [color=green, key=0, style=solid];
m30_33 -> m30_35  [color=green, key=2, style=dotted];
m30_33 -> m30_11  [color=green, key=2, style=dotted];
m30_34 -> m30_31  [color=blue, key=0, style=bold];
m30_0 -> m30_1  [key=0, style=solid];
m30_3 -> m30_4  [color=green, key=0, style=solid];
m30_3 -> m30_9  [color=green, key=2, style=dotted];
m30_3 -> m30_12  [color=green, key=1, label="lambda expression", style=dashed];
m30_1 -> m30_3  [color=green, key=1, label=fakeOptions, style=dashed];
m30_1 -> m30_2  [key=0, style=solid];
m30_1 -> m30_6  [key=2, style=dotted];
m30_1 -> m30_13  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m30_2 -> m30_3  [color=green, key=0, style=solid];
m30_2 -> m30_7  [key=2, style=dotted];
m30_2 -> m30_8  [key=2, style=dotted];
m30_2 -> m30_4  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m30_4 -> m30_5  [key=0, style=solid];
m30_4 -> m30_10  [key=2, style=dotted];
m30_4 -> m30_11  [key=2, style=dotted];
m30_5 -> m30_0  [color=blue, key=0, style=bold];
m30_224 -> m30_225  [key=0, style=solid];
m30_226 -> m30_9  [key=2, style=dotted];
m30_226 -> m30_227  [key=0, style=solid];
m30_226 -> m30_229  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m30_227 -> m30_35  [key=2, style=dotted];
m30_227 -> m30_11  [key=2, style=dotted];
m30_227 -> m30_228  [key=0, style=solid];
m30_225 -> m30_226  [key=0, style=solid];
m30_225 -> m30_227  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m30_225 -> m30_220  [key=2, style=dotted];
m30_225 -> m30_69  [key=2, style=dotted];
m30_228 -> m30_224  [color=blue, key=0, style=bold];
m30_290 -> m30_291  [key=0, style=solid];
m30_292 -> m30_9  [key=2, style=dotted];
m30_292 -> m30_293  [key=0, style=solid];
m30_292 -> m30_295  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m30_293 -> m30_35  [key=2, style=dotted];
m30_293 -> m30_11  [key=2, style=dotted];
m30_293 -> m30_294  [key=0, style=solid];
m30_291 -> m30_292  [key=0, style=solid];
m30_291 -> m30_293  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m30_291 -> m30_78  [key=2, style=dotted];
m30_294 -> m30_290  [color=blue, key=0, style=bold];
m30_307 -> m30_308  [key=0, style=solid];
m30_307 -> m30_309  [color=darkseagreen4, key=1, label="long?", style=dashed];
m30_308 -> m30_9  [key=2, style=dotted];
m30_308 -> m30_309  [key=0, style=solid];
m30_308 -> m30_311  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m30_309 -> m30_310  [key=0, style=solid];
m30_309 -> m30_104  [key=2, style=dotted];
m30_310 -> m30_307  [color=blue, key=0, style=bold];
m30_184 -> m30_185  [key=0, style=solid];
m30_12 -> m30_13  [key=0, style=solid];
m30_27 -> m30_28  [color=green, key=0, style=solid];
m30_28 -> m30_29  [color=green, key=0, style=solid];
m30_28 -> m30_30  [color=green, key=2, style=dotted];
m30_29 -> m30_27  [color=blue, key=0, style=bold];
m30_36 -> m30_37  [key=0, style=solid];
m30_44 -> m30_45  [key=0, style=solid];
m30_51 -> m30_52  [color=green, key=0, style=solid];
m30_52 -> m30_53  [color=green, key=0, style=solid];
m30_52 -> m30_54  [color=green, key=2, style=dotted];
m30_53 -> m30_51  [color=blue, key=0, style=bold];
m30_13 -> m30_14  [key=0, style=solid];
m30_14 -> m30_12  [color=blue, key=0, style=bold];
m30_38 -> m30_36  [color=blue, key=0, style=bold];
m30_37 -> m30_38  [key=0, style=solid];
m30_37 -> m30_39  [key=2, style=dotted];
m30_46 -> m30_44  [color=blue, key=0, style=bold];
m30_45 -> m30_6  [key=2, style=dotted];
m30_45 -> m30_46  [key=0, style=solid];
m30_71 -> m30_54  [key=2, style=dotted];
m30_71 -> m30_72  [key=0, style=solid];
m30_21 -> m30_6  [key=2, style=dotted];
m30_21 -> m30_22  [key=0, style=solid];
m30_239 -> m30_6  [key=2, style=dotted];
m30_239 -> m30_240  [key=0, style=solid];
m30_248 -> m30_6  [key=2, style=dotted];
m30_248 -> m30_249  [key=0, style=solid];
m30_256 -> m30_6  [key=2, style=dotted];
m30_256 -> m30_257  [key=0, style=solid];
m30_264 -> m30_6  [key=2, style=dotted];
m30_264 -> m30_265  [key=0, style=solid];
m30_272 -> m30_6  [key=2, style=dotted];
m30_272 -> m30_273  [key=0, style=solid];
m30_288 -> m30_6  [key=2, style=dotted];
m30_288 -> m30_289  [key=0, style=solid];
m30_20 -> m30_21  [key=0, style=solid];
m30_59 -> m30_60  [key=0, style=solid];
m30_70 -> m30_71  [key=0, style=solid];
m30_79 -> m30_80  [key=0, style=solid];
m30_88 -> m30_89  [key=0, style=solid];
m30_96 -> m30_97  [key=0, style=solid];
m30_105 -> m30_106  [key=0, style=solid];
m30_115 -> m30_116  [key=0, style=solid];
m30_123 -> m30_124  [key=0, style=solid];
m30_131 -> m30_132  [key=0, style=solid];
m30_140 -> m30_141  [key=0, style=solid];
m30_147 -> m30_148  [key=0, style=solid];
m30_155 -> m30_156  [key=0, style=solid];
m30_163 -> m30_164  [key=0, style=solid];
m30_194 -> m30_195  [key=0, style=solid];
m30_204 -> m30_205  [key=0, style=solid];
m30_212 -> m30_213  [key=0, style=solid];
m30_221 -> m30_222  [key=0, style=solid];
m30_229 -> m30_230  [key=0, style=solid];
m30_238 -> m30_239  [key=0, style=solid];
m30_247 -> m30_248  [key=0, style=solid];
m30_255 -> m30_256  [key=0, style=solid];
m30_263 -> m30_264  [key=0, style=solid];
m30_271 -> m30_272  [key=0, style=solid];
m30_279 -> m30_280  [key=0, style=solid];
m30_287 -> m30_288  [key=0, style=solid];
m30_295 -> m30_296  [key=0, style=solid];
m30_303 -> m30_304  [key=0, style=solid];
m30_311 -> m30_312  [key=0, style=solid];
m30_321 -> m30_322  [key=0, style=solid];
m30_331 -> m30_332  [key=0, style=solid];
m30_338 -> m30_339  [key=0, style=solid];
m30_345 -> m30_346  [key=0, style=solid];
m30_72 -> m30_70  [color=blue, key=0, style=bold];
m30_22 -> m30_20  [color=blue, key=0, style=bold];
m30_240 -> m30_238  [color=blue, key=0, style=bold];
m30_249 -> m30_247  [color=blue, key=0, style=bold];
m30_257 -> m30_255  [color=blue, key=0, style=bold];
m30_265 -> m30_263  [color=blue, key=0, style=bold];
m30_273 -> m30_271  [color=blue, key=0, style=bold];
m30_289 -> m30_287  [color=blue, key=0, style=bold];
m30_61 -> m30_59  [color=blue, key=0, style=bold];
m30_60 -> m30_61  [key=0, style=solid];
m30_60 -> m30_62  [key=2, style=dotted];
m30_81 -> m30_79  [color=blue, key=0, style=bold];
m30_80 -> m30_81  [key=0, style=solid];
m30_80 -> m30_82  [key=2, style=dotted];
m30_90 -> m30_88  [color=blue, key=0, style=bold];
m30_89 -> m30_90  [key=0, style=solid];
m30_89 -> m30_62  [key=2, style=dotted];
m30_98 -> m30_96  [color=blue, key=0, style=bold];
m30_97 -> m30_98  [key=0, style=solid];
m30_97 -> m30_99  [key=2, style=dotted];
m30_107 -> m30_105  [color=blue, key=0, style=bold];
m30_106 -> m30_107  [key=0, style=solid];
m30_106 -> m30_108  [key=2, style=dotted];
m30_117 -> m30_115  [color=blue, key=0, style=bold];
m30_116 -> m30_117  [key=0, style=solid];
m30_116 -> m30_108  [key=2, style=dotted];
m30_125 -> m30_123  [color=blue, key=0, style=bold];
m30_124 -> m30_125  [key=0, style=solid];
m30_124 -> m30_108  [key=2, style=dotted];
m30_133 -> m30_131  [color=blue, key=0, style=bold];
m30_132 -> m30_133  [key=0, style=solid];
m30_132 -> m30_108  [key=2, style=dotted];
m30_142 -> m30_140  [color=blue, key=0, style=bold];
m30_141 -> m30_139  [key=2, style=dotted];
m30_141 -> m30_142  [key=0, style=solid];
m30_149 -> m30_147  [color=blue, key=0, style=bold];
m30_148 -> m30_149  [key=0, style=solid];
m30_148 -> m30_150  [key=2, style=dotted];
m30_157 -> m30_155  [color=blue, key=0, style=bold];
m30_156 -> m30_157  [key=0, style=solid];
m30_156 -> m30_158  [key=2, style=dotted];
m30_165 -> m30_163  [color=blue, key=0, style=bold];
m30_164 -> m30_165  [key=0, style=solid];
m30_164 -> m30_158  [key=2, style=dotted];
m30_196 -> m30_194  [color=blue, key=0, style=bold];
m30_195 -> m30_196  [key=0, style=solid];
m30_195 -> m30_197  [key=2, style=dotted];
m30_206 -> m30_204  [color=blue, key=0, style=bold];
m30_205 -> m30_203  [key=2, style=dotted];
m30_205 -> m30_206  [key=0, style=solid];
m30_214 -> m30_212  [color=blue, key=0, style=bold];
m30_213 -> m30_203  [key=2, style=dotted];
m30_213 -> m30_214  [key=0, style=solid];
m30_223 -> m30_221  [color=blue, key=0, style=bold];
m30_222 -> m30_203  [key=2, style=dotted];
m30_222 -> m30_223  [key=0, style=solid];
m30_231 -> m30_229  [color=blue, key=0, style=bold];
m30_230 -> m30_231  [key=0, style=solid];
m30_230 -> m30_232  [key=2, style=dotted];
m30_281 -> m30_279  [color=blue, key=0, style=bold];
m30_280 -> m30_281  [key=0, style=solid];
m30_280 -> m30_282  [key=2, style=dotted];
m30_297 -> m30_295  [color=blue, key=0, style=bold];
m30_296 -> m30_297  [key=0, style=solid];
m30_296 -> m30_298  [key=2, style=dotted];
m30_305 -> m30_303  [color=blue, key=0, style=bold];
m30_304 -> m30_305  [key=0, style=solid];
m30_304 -> m30_306  [key=2, style=dotted];
m30_313 -> m30_311  [color=blue, key=0, style=bold];
m30_312 -> m30_313  [key=0, style=solid];
m30_312 -> m30_306  [key=2, style=dotted];
m30_323 -> m30_321  [color=blue, key=0, style=bold];
m30_322 -> m30_323  [key=0, style=solid];
m30_322 -> m30_324  [key=2, style=dotted];
m30_333 -> m30_331  [color=blue, key=0, style=bold];
m30_332 -> m30_333  [key=0, style=solid];
m30_332 -> m30_324  [key=2, style=dotted];
m30_340 -> m30_338  [color=blue, key=0, style=bold];
m30_339 -> m30_340  [key=0, style=solid];
m30_339 -> m30_282  [key=2, style=dotted];
m30_347 -> m30_345  [color=blue, key=0, style=bold];
m30_346 -> m30_347  [key=0, style=solid];
m30_346 -> m30_348  [key=2, style=dotted];
m30_174 -> m30_139  [key=2, style=dotted];
m30_174 -> m30_175  [key=0, style=solid];
m30_173 -> m30_174  [key=0, style=solid];
m30_175 -> m30_173  [color=blue, key=0, style=bold];
m30_176 -> m30_177  [key=0, style=solid];
m30_176 -> m30_181  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m30_176 -> m30_185  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m30_178 -> m30_176  [color=blue, key=0, style=bold];
m30_177 -> m30_178  [key=0, style=solid];
m30_177 -> m30_179  [key=2, style=dotted];
m30_177 -> m30_180  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m30_181 -> m30_182  [key=0, style=solid];
m30_181 -> m30_183  [key=2, style=dotted];
m30_181 -> m30_184  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m30_185 -> m30_186  [key=0, style=solid];
m30_185 -> m30_187  [key=2, style=dotted];
m30_180 -> m30_181  [key=0, style=solid];
m30_182 -> m30_180  [color=blue, key=0, style=bold];
m30_186 -> m30_184  [color=blue, key=0, style=bold];
m30_215 -> m30_216  [key=0, style=solid];
m30_217 -> m30_9  [key=2, style=dotted];
m30_217 -> m30_218  [key=0, style=solid];
m30_217 -> m30_221  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m30_218 -> m30_35  [key=2, style=dotted];
m30_218 -> m30_11  [key=2, style=dotted];
m30_218 -> m30_219  [key=0, style=solid];
m30_216 -> m30_217  [key=0, style=solid];
m30_216 -> m30_218  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m30_216 -> m30_220  [key=2, style=dotted];
m30_216 -> m30_69  [key=2, style=dotted];
m30_219 -> m30_215  [color=blue, key=0, style=bold];
m30_100 -> m30_101  [key=0, style=solid];
m30_100 -> m30_102  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
m30_101 -> m30_9  [key=2, style=dotted];
m30_101 -> m30_102  [key=0, style=solid];
m30_101 -> m30_105  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m30_102 -> m30_102  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
m30_102 -> m30_103  [key=0, style=solid];
m30_102 -> m30_104  [key=2, style=dotted];
m30_103 -> m30_100  [color=blue, key=0, style=bold];
m30_126 -> m30_127  [key=0, style=solid];
m30_128 -> m30_9  [key=2, style=dotted];
m30_128 -> m30_129  [key=0, style=solid];
m30_128 -> m30_131  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m30_129 -> m30_35  [key=2, style=dotted];
m30_129 -> m30_11  [key=2, style=dotted];
m30_129 -> m30_130  [key=0, style=solid];
m30_127 -> m30_128  [key=0, style=solid];
m30_127 -> m30_129  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m30_127 -> m30_114  [key=2, style=dotted];
m30_127 -> m30_69  [key=2, style=dotted];
m30_130 -> m30_126  [color=blue, key=0, style=bold];
m30_334 -> m30_335  [key=0, style=solid];
m30_334 -> m30_336  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue", style=dashed];
m30_335 -> m30_9  [key=2, style=dotted];
m30_335 -> m30_336  [key=0, style=solid];
m30_335 -> m30_338  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m30_336 -> m30_337  [key=0, style=solid];
m30_336 -> m30_104  [key=2, style=dotted];
m30_337 -> m30_334  [color=blue, key=0, style=bold];
m30_83 -> m30_84  [key=0, style=solid];
m30_85 -> m30_9  [key=2, style=dotted];
m30_85 -> m30_86  [key=0, style=solid];
m30_85 -> m30_88  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m30_86 -> m30_35  [key=2, style=dotted];
m30_86 -> m30_11  [key=2, style=dotted];
m30_86 -> m30_87  [key=0, style=solid];
m30_84 -> m30_85  [key=0, style=solid];
m30_84 -> m30_86  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m30_84 -> m30_78  [key=2, style=dotted];
m30_84 -> m30_69  [key=2, style=dotted];
m30_87 -> m30_83  [color=blue, key=0, style=bold];
m30_166 -> m30_167  [key=0, style=solid];
m30_170 -> m30_104  [key=2, style=dotted];
m30_170 -> m30_171  [key=0, style=solid];
m30_167 -> m30_139  [key=2, style=dotted];
m30_167 -> m30_170  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m30_167 -> m30_168  [key=0, style=solid];
m30_169 -> m30_170  [key=0, style=solid];
m30_169 -> m30_172  [key=2, style=dotted];
m30_169 -> m30_173  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m30_169 -> m30_176  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m30_168 -> m30_169  [key=0, style=solid];
m30_171 -> m30_166  [color=blue, key=0, style=bold];
m30_258 -> m30_259  [key=0, style=solid];
m30_260 -> m30_9  [key=2, style=dotted];
m30_260 -> m30_261  [key=0, style=solid];
m30_260 -> m30_263  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m30_261 -> m30_35  [key=2, style=dotted];
m30_261 -> m30_11  [key=2, style=dotted];
m30_261 -> m30_262  [key=0, style=solid];
m30_259 -> m30_260  [key=0, style=solid];
m30_259 -> m30_261  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m30_259 -> m30_246  [key=2, style=dotted];
m30_262 -> m30_258  [color=blue, key=0, style=bold];
m30_63 -> m30_64  [key=0, style=solid];
m30_65 -> m30_9  [key=2, style=dotted];
m30_65 -> m30_66  [key=0, style=solid];
m30_65 -> m30_70  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m30_66 -> m30_35  [key=2, style=dotted];
m30_66 -> m30_11  [key=2, style=dotted];
m30_66 -> m30_67  [key=0, style=solid];
m30_64 -> m30_65  [key=0, style=solid];
m30_64 -> m30_66  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m30_64 -> m30_68  [key=2, style=dotted];
m30_64 -> m30_69  [key=2, style=dotted];
m30_67 -> m30_63  [color=blue, key=0, style=bold];
m30_134 -> m30_135  [key=0, style=solid];
m30_136 -> m30_9  [key=2, style=dotted];
m30_136 -> m30_137  [key=0, style=solid];
m30_136 -> m30_140  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m30_135 -> m30_136  [key=0, style=solid];
m30_135 -> m30_139  [key=2, style=dotted];
m30_135 -> m30_137  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m30_137 -> m30_138  [key=0, style=solid];
m30_137 -> m30_104  [key=2, style=dotted];
m30_138 -> m30_134  [color=blue, key=0, style=bold];
m30_283 -> m30_284  [key=0, style=solid];
m30_283 -> m30_285  [color=darkseagreen4, key=1, label=string, style=dashed];
m30_284 -> m30_9  [key=2, style=dotted];
m30_284 -> m30_285  [key=0, style=solid];
m30_284 -> m30_287  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m30_285 -> m30_286  [key=0, style=solid];
m30_285 -> m30_104  [key=2, style=dotted];
m30_286 -> m30_283  [color=blue, key=0, style=bold];
m30_73 -> m30_74  [key=0, style=solid];
m30_75 -> m30_9  [key=2, style=dotted];
m30_75 -> m30_76  [key=0, style=solid];
m30_75 -> m30_79  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m30_76 -> m30_35  [key=2, style=dotted];
m30_76 -> m30_11  [key=2, style=dotted];
m30_76 -> m30_77  [key=0, style=solid];
m30_74 -> m30_75  [key=0, style=solid];
m30_74 -> m30_76  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m30_74 -> m30_78  [key=2, style=dotted];
m30_77 -> m30_73  [color=blue, key=0, style=bold];
m30_91 -> m30_92  [key=0, style=solid];
m30_93 -> m30_9  [key=2, style=dotted];
m30_93 -> m30_94  [key=0, style=solid];
m30_93 -> m30_96  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m30_94 -> m30_35  [key=2, style=dotted];
m30_94 -> m30_11  [key=2, style=dotted];
m30_94 -> m30_95  [key=0, style=solid];
m30_92 -> m30_93  [key=0, style=solid];
m30_92 -> m30_94  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m30_92 -> m30_78  [key=2, style=dotted];
m30_95 -> m30_91  [color=blue, key=0, style=bold];
m30_198 -> m30_199  [key=0, style=solid];
m30_200 -> m30_9  [key=2, style=dotted];
m30_200 -> m30_201  [key=0, style=solid];
m30_200 -> m30_204  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m30_199 -> m30_200  [key=0, style=solid];
m30_199 -> m30_203  [key=2, style=dotted];
m30_199 -> m30_201  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m30_201 -> m30_202  [key=0, style=solid];
m30_201 -> m30_104  [key=2, style=dotted];
m30_202 -> m30_198  [color=blue, key=0, style=bold];
m30_314 -> m30_315  [key=0, style=solid];
m30_314 -> m30_317  [color=darkseagreen4, key=1, label=string, style=dashed];
m30_314 -> m30_318  [color=darkseagreen4, key=1, label=bool, style=dashed];
m30_315 -> m30_9  [key=2, style=dotted];
m30_315 -> m30_316  [key=0, style=solid];
m30_315 -> m30_321  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m30_315 -> m30_317  [color=darkseagreen4, key=1, label=result, style=dashed];
m30_315 -> m30_318  [color=darkseagreen4, key=1, label=result, style=dashed];
m30_316 -> m30_317  [key=0, style=solid];
m30_316 -> m30_318  [key=0, style=solid];
m30_317 -> m30_318  [key=0, style=solid];
m30_317 -> m30_104  [key=2, style=dotted];
m30_318 -> m30_319  [key=0, style=solid];
m30_318 -> m30_320  [key=2, style=dotted];
m30_318 -> m30_104  [key=2, style=dotted];
m30_319 -> m30_314  [color=blue, key=0, style=bold];
m30_47 -> m30_48  [color=green, key=0, style=solid];
m30_47 -> m30_49  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m30_48 -> m30_49  [color=green, key=0, style=solid];
m30_48 -> m30_9  [color=green, key=2, style=dotted];
m30_48 -> m30_51  [color=green, key=1, label="lambda expression", style=dashed];
m30_49 -> m30_35  [key=2, style=dotted];
m30_49 -> m30_11  [key=2, style=dotted];
m30_49 -> m30_50  [key=0, style=solid];
m30_50 -> m30_47  [color=blue, key=0, style=bold];
m30_15 -> m30_16  [key=0, style=solid];
m30_15 -> m30_17  [color=darkseagreen4, key=1, label=long, style=dashed];
m30_16 -> m30_9  [key=2, style=dotted];
m30_16 -> m30_17  [key=0, style=solid];
m30_16 -> m30_20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m30_17 -> m30_19  [key=2, style=dotted];
m30_17 -> m30_18  [key=0, style=solid];
m30_18 -> m30_15  [color=blue, key=0, style=bold];
m30_250 -> m30_251  [key=0, style=solid];
m30_252 -> m30_9  [key=2, style=dotted];
m30_252 -> m30_253  [key=0, style=solid];
m30_252 -> m30_255  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m30_253 -> m30_35  [key=2, style=dotted];
m30_253 -> m30_11  [key=2, style=dotted];
m30_253 -> m30_254  [key=0, style=solid];
m30_251 -> m30_252  [key=0, style=solid];
m30_251 -> m30_253  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m30_251 -> m30_246  [key=2, style=dotted];
m30_254 -> m30_250  [color=blue, key=0, style=bold];
m30_118 -> m30_119  [key=0, style=solid];
m30_120 -> m30_9  [key=2, style=dotted];
m30_120 -> m30_121  [key=0, style=solid];
m30_120 -> m30_123  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m30_121 -> m30_35  [key=2, style=dotted];
m30_121 -> m30_11  [key=2, style=dotted];
m30_121 -> m30_122  [key=0, style=solid];
m30_119 -> m30_120  [key=0, style=solid];
m30_119 -> m30_121  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m30_119 -> m30_114  [key=2, style=dotted];
m30_119 -> m30_69  [key=2, style=dotted];
m30_122 -> m30_118  [color=blue, key=0, style=bold];
m30_109 -> m30_110  [key=0, style=solid];
m30_111 -> m30_9  [key=2, style=dotted];
m30_111 -> m30_112  [key=0, style=solid];
m30_111 -> m30_115  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m30_112 -> m30_35  [key=2, style=dotted];
m30_112 -> m30_11  [key=2, style=dotted];
m30_112 -> m30_113  [key=0, style=solid];
m30_110 -> m30_111  [key=0, style=solid];
m30_110 -> m30_112  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m30_110 -> m30_114  [key=2, style=dotted];
m30_110 -> m30_69  [key=2, style=dotted];
m30_113 -> m30_109  [color=blue, key=0, style=bold];
m30_23 -> m30_24  [color=green, key=0, style=solid];
m30_23 -> m30_25  [color=green, key=1, label=double, style=dashed];
m30_24 -> m30_24  [color=green, key=3, label="Field variable int? VerboseLevel", style=bold];
m30_24 -> m30_25  [color=green, key=0, style=solid];
m30_24 -> m30_9  [color=green, key=2, style=dotted];
m30_24 -> m30_27  [color=green, key=1, label="lambda expression", style=dashed];
m30_25 -> m30_26  [color=green, key=0, style=solid];
m30_25 -> m30_19  [color=green, key=2, style=dotted];
m30_26 -> m30_23  [color=blue, key=0, style=bold];
m30_188 -> m30_189  [key=0, style=solid];
m30_190 -> m30_9  [key=2, style=dotted];
m30_190 -> m30_191  [key=0, style=solid];
m30_190 -> m30_194  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m30_191 -> m30_35  [key=2, style=dotted];
m30_191 -> m30_11  [key=2, style=dotted];
m30_191 -> m30_192  [key=0, style=solid];
m30_189 -> m30_190  [key=0, style=solid];
m30_189 -> m30_191  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m30_189 -> m30_193  [key=2, style=dotted];
m30_189 -> m30_69  [key=2, style=dotted];
m30_192 -> m30_188  [color=blue, key=0, style=bold];
m30_349 -> m30_13  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m30_350 -> m30_181  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m30_350 -> m30_185  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m42_21 -> m42_37  [color=green, key=1, label=object, style=dashed];
m42_21 -> m42_13  [color=darkorchid, key=3, label="Parameter variable object target", style=bold];
m42_21 -> m42_14  [color=darkorchid, key=3, label="Parameter variable System.Type concreteType", style=bold];
m42_21 -> m42_36  [key=0, style=solid];
m42_21 -> m42_17  [color=darkorchid, key=3, label="method methodReturn System.Reflection.FieldInfo GetField", style=bold];
m42_37 -> m42_38  [color=green, key=0, style=solid];
m42_37 -> m42_34  [color=green, key=2, style=dotted];
m42_37 -> m42_40  [color=green, key=1, label=list, style=dashed];
m42_37 -> m42_42  [color=green, key=1, label=list, style=dashed];
m42_36 -> m42_37  [color=green, key=0, style=solid];
m42_38 -> m42_39  [color=green, key=0, style=solid];
m42_38 -> m42_40  [color=green, key=0, style=solid];
m42_40 -> m42_41  [key=0, style=solid];
m42_40 -> m42_42  [key=0, style=solid];
m42_42 -> m42_43  [key=0, style=solid];
m42_42 -> m42_44  [color=darkseagreen4, key=1, label=pairZero, style=dashed];
m42_39 -> m42_45  [key=0, style=solid];
m42_41 -> m42_45  [key=0, style=solid];
m42_41 -> m42_35  [key=2, style=dotted];
m42_43 -> m42_45  [color=darkseagreen4, key=1, label="out System.Type", style=dashed];
m42_43 -> m42_44  [key=0, style=solid];
m42_44 -> m42_45  [key=0, style=solid];
m42_45 -> m42_21  [color=blue, key=0, style=bold];
m42_25 -> m42_26  [color=green, key=0, style=solid];
m42_25 -> m42_17  [color=darkorchid, key=3, label="method methodReturn CommandLine.ValueListAttribute GetAttribute", style=bold];
m42_26 -> m42_27  [color=green, key=0, style=solid];
m42_26 -> m42_34  [color=green, key=2, style=dotted];
m42_26 -> m42_29  [color=green, key=1, label=list, style=dashed];
m42_26 -> m42_31  [color=green, key=1, label=list, style=dashed];
m42_27 -> m42_28  [color=green, key=0, style=solid];
m42_27 -> m42_29  [color=green, key=0, style=solid];
m42_29 -> m42_30  [key=0, style=solid];
m42_29 -> m42_31  [key=0, style=solid];
m42_31 -> m42_32  [key=0, style=solid];
m42_28 -> m42_33  [key=0, style=solid];
m42_30 -> m42_33  [key=0, style=solid];
m42_30 -> m42_35  [key=2, style=dotted];
m42_32 -> m42_33  [key=0, style=solid];
m42_33 -> m42_25  [color=blue, key=0, style=bold];
m42_13 -> m42_15  [color=green, key=1, label=object, style=dashed];
m42_13 -> m42_18  [color=green, key=1, label=object, style=dashed];
m42_13 -> m42_19  [color=green, key=1, label=object, style=dashed];
m42_13 -> m42_14  [key=0, style=solid];
m42_13 -> m42_17  [color=darkorchid, key=3, label="method methodReturn System.Collections.Generic.IList<string> GetReference", style=bold];
m42_15 -> m42_16  [color=green, key=0, style=solid];
m42_15 -> m42_21  [color=green, key=2, style=dotted];
m42_15 -> m42_18  [color=green, key=1, label=concreteType, style=dashed];
m42_15 -> m42_19  [color=green, key=1, label=field, style=dashed];
m42_14 -> m42_15  [color=green, key=0, style=solid];
m42_16 -> m42_18  [color=green, key=0, style=solid];
m42_16 -> m42_17  [color=green, key=0, style=solid];
m42_18 -> m42_19  [color=green, key=0, style=solid];
m42_18 -> m42_22  [color=green, key=2, style=dotted];
m42_18 -> m42_23  [color=green, key=2, style=dotted];
m42_19 -> m42_20  [color=green, key=0, style=solid];
m42_19 -> m42_24  [color=green, key=2, style=dotted];
m42_17 -> m42_20  [key=0, style=solid];
m42_20 -> m42_13  [color=blue, key=0, style=bold];
}
