digraph  {
n170 [label="System.StringComparer", span=""];
n171 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
n172 [label="CSharpx.Maybe<System.Func<T>>", span=""];
n173 [label=specProps, span=""];
n174 [label=makeDefault, span=""];
n175 [label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>", span=""];
n176 [label="System.Collections.Generic.IEnumerable<string>", span=""];
n177 [label=optionSpecs, span=""];
n178 [label="System.StringComparer", span=""];
n179 [label="System.Globalization.CultureInfo", span=""];
n180 [label=typeInfo, span=""];
n181 [label="System.Collections.Generic.IEnumerable<CommandLine.ErrorType>", span=""];
n182 [label=token, span=""];
n183 [label=specPropsWithValue, span=""];
n0 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="14-14"];
n2 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="Exit CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="14-14"];
n3 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="37-37"];
n4 [cluster="lambda expression", label="Entry lambda expression", span="23-30"];
n9 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>)", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>)", span="13-13"];
n11 [cluster="lambda expression", label="Entry lambda expression", span="25-25"];
n10 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", span="57-57"];
n15 [cluster="lambda expression", label="Entry lambda expression", span="28-28"];
n8 [cluster="lambda expression", label="Exit lambda expression", span="23-30"];
n13 [cluster="lambda expression", label="Exit lambda expression", span="25-25"];
n14 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="18-18"];
n17 [cluster="lambda expression", label="Exit lambda expression", span="28-28"];
n18 [cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="27-27"];
n19 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var typeInfo = factory.Return(f => f().GetType(), typeof(T))", span="45-45"];
n23 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="Func<T> makeDefault = () =>\r\n                typeof(T).IsMutable()\r\n                    ? factory.Return(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="56-60"];
n52 [cluster="lambda expression", label="typeof(T).IsMutable()\r\n                    ? factory.Return(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="57-60"];
n25 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="Func<ParserResult<T>> buildUp = () =>\r\n            {\r\n                var tokenizerResult = tokenizer(arguments, optionSpecs);\r\n\r\n                var tokens = tokenizerResult.SucceededWith();\r\n\r\n                var partitions = TokenPartitioner.Partition(\r\n                    tokens,\r\n                    name => TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer));\r\n\r\n                var optionSpecPropsResult =\r\n                    OptionMapper.MapValues(\r\n                        (from pt in specProps where pt.Specification.IsOption() select pt),\r\n                        partitions.Options,\r\n                        (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture),\r\n                        nameComparer);\r\n\r\n                var valueSpecPropsResult =\r\n                    ValueMapper.MapValues(\r\n                        (from pt in specProps where pt.Specification.IsValue() select pt),\r\n                        partitions.Values,\r\n                        (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture));\r\n\r\n                var missingValueErrors = from token in partitions.Errors\r\n                    select\r\n                        new MissingValueOptionError(\r\n                            optionSpecs.Single(o => token.Text.MatchName(o.ShortName, o.LongName, nameComparer))\r\n                                .FromOptionSpecification());\r\n\r\n                var specPropsWithValue =\r\n                    optionSpecPropsResult.SucceededWith().Concat(valueSpecPropsResult.SucceededWith());\r\n\r\n                Func<T> buildMutable = () =>\r\n                {\r\n                    var mutable = factory.Return(f => f(), Activator.CreateInstance<T>());\r\n                    mutable =\r\n                        mutable.SetProperties(specPropsWithValue, sp => sp.Value.IsJust(), sp => sp.Value.FromJust())\r\n                            .SetProperties(\r\n                                specPropsWithValue,\r\n                                sp => sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust(),\r\n                                sp => sp.Specification.DefaultValue.FromJust())\r\n                            .SetProperties(\r\n                                specPropsWithValue,\r\n                                sp =>\r\n                                    sp.Value.IsNothing() && sp.Specification.TargetType == TargetType.Sequence\r\n                                    && sp.Specification.DefaultValue.MatchNothing(),\r\n                                sp => sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray());\r\n                    return mutable;\r\n                };\r\n\r\n                Func<T> buildImmutable = () =>\r\n                {\r\n                    var ctor = typeInfo.GetConstructor((from sp in specProps select sp.Property.PropertyType).ToArray());\r\n                    var values = (from prms in ctor.GetParameters()\r\n                        join sp in specPropsWithValue on prms.Name.ToLower() equals sp.Property.Name.ToLower()\r\n                        select\r\n                            sp.Value.Return(\r\n                                v => v,\r\n                                sp.Specification.DefaultValue.Return(\r\n                                    d => d,\r\n                                    sp.Specification.ConversionType.CreateDefaultForImmutable()))).ToArray();\r\n                    var immutable = (T)ctor.Invoke(values);\r\n                    return immutable;\r\n                };\r\n\r\n                var instance = typeInfo.IsMutable() ? buildMutable() : buildImmutable();\r\n\r\n                var validationErrors = specPropsWithValue.Validate(SpecificationPropertyRules.Lookup(tokens));\r\n\r\n                var allErrors =\r\n                    tokenizerResult.SuccessfulMessages()\r\n                        .Concat(missingValueErrors)\r\n                        .Concat(optionSpecPropsResult.SuccessfulMessages())\r\n                        .Concat(valueSpecPropsResult.SuccessfulMessages())\r\n                        .Concat(validationErrors)\r\n                        .Memorize();\r\n\r\n                var warnings = from e in allErrors where nonFatalErrors.Contains(e.Tag) select e;\r\n\r\n                return allErrors.Except(warnings).ToParserResult(instance);\r\n            }", span="65-145"];
n68 [cluster="lambda expression", label="var tokenizerResult = tokenizer(arguments, optionSpecs)", span="67-67"];
n70 [cluster="lambda expression", label="var partitions = TokenPartitioner.Partition(\r\n                    tokens,\r\n                    name => TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer))", span="71-73"];
n103 [cluster="lambda expression", label="TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer)", span="73-73"];
n71 [cluster="lambda expression", label="var optionSpecPropsResult =\r\n                    OptionMapper.MapValues(\r\n                        (from pt in specProps where pt.Specification.IsOption() select pt),\r\n                        partitions.Options,\r\n                        (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture),\r\n                        nameComparer)", span="75-80"];
n107 [cluster="lambda expression", label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="79-79"];
n72 [cluster="lambda expression", label="var valueSpecPropsResult =\r\n                    ValueMapper.MapValues(\r\n                        (from pt in specProps where pt.Specification.IsValue() select pt),\r\n                        partitions.Values,\r\n                        (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture))", span="82-86"];
n111 [cluster="lambda expression", label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="86-86"];
n73 [cluster="lambda expression", label="var missingValueErrors = from token in partitions.Errors\r\n                    select\r\n                        new MissingValueOptionError(\r\n                            optionSpecs.Single(o => token.Text.MatchName(o.ShortName, o.LongName, nameComparer))\r\n                                .FromOptionSpecification())", span="88-92"];
n114 [cluster="lambda expression", label="token.Text.MatchName(o.ShortName, o.LongName, nameComparer)", span="91-91"];
n75 [cluster="lambda expression", label="Func<T> buildMutable = () =>\r\n                {\r\n                    var mutable = factory.Return(f => f(), Activator.CreateInstance<T>());\r\n                    mutable =\r\n                        mutable.SetProperties(specPropsWithValue, sp => sp.Value.IsJust(), sp => sp.Value.FromJust())\r\n                            .SetProperties(\r\n                                specPropsWithValue,\r\n                                sp => sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust(),\r\n                                sp => sp.Specification.DefaultValue.FromJust())\r\n                            .SetProperties(\r\n                                specPropsWithValue,\r\n                                sp =>\r\n                                    sp.Value.IsNothing() && sp.Specification.TargetType == TargetType.Sequence\r\n                                    && sp.Specification.DefaultValue.MatchNothing(),\r\n                                sp => sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray());\r\n                    return mutable;\r\n                }", span="97-113"];
n118 [cluster="lambda expression", label="var mutable = factory.Return(f => f(), Activator.CreateInstance<T>())", span="99-99"];
n80 [cluster="lambda expression", label="var warnings = from e in allErrors where nonFatalErrors.Contains(e.Tag) select e", span="142-142"];
n26 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var preprocessorErrors = arguments.Any()\r\n                ? arguments.Preprocess(PreprocessorGuards.Lookup(nameComparer))\r\n                : Enumerable.Empty<Error>()", span="147-149"];
n27 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var result = arguments.Any()\r\n                ? preprocessorErrors.Any()\r\n                    ? notParsed(preprocessorErrors)\r\n                    : buildUp()\r\n                : buildUp()", span="151-155"];
n20 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var specProps = typeInfo.GetSpecifications(pi => SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>()))", span="47-48"];
n30 [cluster="Unk.Return", label="Entry Unk.Return", span=""];
n40 [cluster="lambda expression", label="Entry lambda expression", span="45-45"];
n76 [cluster="lambda expression", label="Func<T> buildImmutable = () =>\r\n                {\r\n                    var ctor = typeInfo.GetConstructor((from sp in specProps select sp.Property.PropertyType).ToArray());\r\n                    var values = (from prms in ctor.GetParameters()\r\n                        join sp in specPropsWithValue on prms.Name.ToLower() equals sp.Property.Name.ToLower()\r\n                        select\r\n                            sp.Value.Return(\r\n                                v => v,\r\n                                sp.Specification.DefaultValue.Return(\r\n                                    d => d,\r\n                                    sp.Specification.ConversionType.CreateDefaultForImmutable()))).ToArray();\r\n                    var immutable = (T)ctor.Invoke(values);\r\n                    return immutable;\r\n                }", span="115-128"];
n153 [cluster="lambda expression", label="var ctor = typeInfo.GetConstructor((from sp in specProps select sp.Property.PropertyType).ToArray())", span="117-117"];
n77 [cluster="lambda expression", label="var instance = typeInfo.IsMutable() ? buildMutable() : buildImmutable()", span="130-130"];
n21 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var specs = from pt in specProps select pt.Specification", span="50-50"];
n31 [cluster="Unk.GetSpecifications", label="Entry Unk.GetSpecifications", span=""];
n45 [cluster="lambda expression", label="Entry lambda expression", span="47-48"];
n22 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var optionSpecs = specs\r\n                .ThrowingValidate(SpecificationGuards.Lookup)\r\n                .OfType<OptionSpecification>()", span="52-54"];
n32 [cluster="Unk.ThrowingValidate", label="Entry Unk.ThrowingValidate", span=""];
n33 [cluster="System.Collections.IEnumerable.OfType<TResult>()", label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0"];
n24 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="Func<IEnumerable<Error>, ParserResult<T>> notParsed =\r\n                errs => new NotParsed<T>(makeDefault().GetType().ToTypeInfo(), errs)", span="62-63"];
n62 [cluster="lambda expression", label="new NotParsed<T>(makeDefault().GetType().ToTypeInfo(), errs)", span="63-63"];
n34 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
n35 [cluster="CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)", label="Entry CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)", span="11-11"];
n36 [cluster="System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", label="Entry System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="11-11"];
n37 [cluster="System.Linq.Enumerable.Empty<TResult>()", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
n28 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="return result;", span="157-157"];
n38 [cluster="System.Func<T, TResult>.Invoke(T)", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
n39 [cluster="System.Func<TResult>.Invoke()", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
n29 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="Exit CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="37-37"];
n41 [cluster="lambda expression", label="f().GetType()", span="45-45"];
n42 [cluster="lambda expression", label="Exit lambda expression", span="45-45"];
n43 [cluster="Unk.f", label="Entry Unk.f", span=""];
n44 [cluster="Unk.GetType", label="Entry Unk.GetType", span=""];
n46 [cluster="lambda expression", label="SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>())", span="47-48"];
n47 [cluster="lambda expression", label="Exit lambda expression", span="47-48"];
n48 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", label="Entry CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="103-103"];
n49 [cluster="CSharpx.Maybe.Nothing<T>()", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
n50 [cluster="CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)", label="Entry CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)", span="21-21"];
n51 [cluster="lambda expression", label="Entry lambda expression", span="56-60"];
n53 [cluster="lambda expression", label="Exit lambda expression", span="56-60"];
n54 [cluster="System.Type.IsMutable()", label="Entry System.Type.IsMutable()", span="139-139"];
n55 [cluster="System.Activator.CreateInstance<T>()", label="Entry System.Activator.CreateInstance<T>()", span="0-0"];
n56 [cluster="Unk.ToArray", label="Entry Unk.ToArray", span=""];
n57 [cluster="Unk.>", label="Entry Unk.>", span=""];
n58 [cluster="lambda expression", label="Entry lambda expression", span="58-58"];
n59 [cluster="lambda expression", label="f()", span="58-58"];
n60 [cluster="lambda expression", label="Exit lambda expression", span="58-58"];
n61 [cluster="lambda expression", label="Entry lambda expression", span="63-63"];
n63 [cluster="lambda expression", label="Exit lambda expression", span="63-63"];
n64 [cluster="CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", label="Entry CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="163-163"];
n65 [cluster="object.GetType()", label="Entry object.GetType()", span="0-0"];
n66 [cluster="System.Type.ToTypeInfo()", label="Entry System.Type.ToTypeInfo()", span="174-174"];
n67 [cluster="lambda expression", label="Entry lambda expression", span="65-145"];
n69 [cluster="lambda expression", label="var tokens = tokenizerResult.SucceededWith()", span="69-69"];
n83 [cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0"];
n79 [cluster="lambda expression", label="var allErrors =\r\n                    tokenizerResult.SuccessfulMessages()\r\n                        .Concat(missingValueErrors)\r\n                        .Concat(optionSpecPropsResult.SuccessfulMessages())\r\n                        .Concat(valueSpecPropsResult.SuccessfulMessages())\r\n                        .Concat(validationErrors)\r\n                        .Memorize()", span="134-140"];
n84 [cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()", label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()", span="653-653"];
n78 [cluster="lambda expression", label="var validationErrors = specPropsWithValue.Validate(SpecificationPropertyRules.Lookup(tokens))", span="132-132"];
n85 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12"];
n102 [cluster="lambda expression", label="Entry lambda expression", span="73-73"];
n86 [cluster="CommandLine.Core.Specification.IsOption()", label="Entry CommandLine.Core.Specification.IsOption()", span="10-10"];
n87 [cluster="Unk.MapValues", label="Entry Unk.MapValues", span=""];
n106 [cluster="lambda expression", label="Entry lambda expression", span="79-79"];
n74 [cluster="lambda expression", label="var specPropsWithValue =\r\n                    optionSpecPropsResult.SucceededWith().Concat(valueSpecPropsResult.SucceededWith())", span="94-95"];
n88 [cluster="CommandLine.Core.Specification.IsValue()", label="Entry CommandLine.Core.Specification.IsValue()", span="15-15"];
n110 [cluster="lambda expression", label="Entry lambda expression", span="86-86"];
n89 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="294-294"];
n90 [cluster="Unk.Single", label="Entry Unk.Single", span=""];
n91 [cluster="Unk.FromOptionSpecification", label="Entry Unk.FromOptionSpecification", span=""];
n113 [cluster="lambda expression", label="Entry lambda expression", span="91-91"];
n92 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
n119 [cluster="lambda expression", label="mutable =\r\n                        mutable.SetProperties(specPropsWithValue, sp => sp.Value.IsJust(), sp => sp.Value.FromJust())\r\n                            .SetProperties(\r\n                                specPropsWithValue,\r\n                                sp => sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust(),\r\n                                sp => sp.Specification.DefaultValue.FromJust())\r\n                            .SetProperties(\r\n                                specPropsWithValue,\r\n                                sp =>\r\n                                    sp.Value.IsNothing() && sp.Specification.TargetType == TargetType.Sequence\r\n                                    && sp.Specification.DefaultValue.MatchNothing(),\r\n                                sp => sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray())", span="100-111"];
n154 [cluster="lambda expression", label="var values = (from prms in ctor.GetParameters()\r\n                        join sp in specPropsWithValue on prms.Name.ToLower() equals sp.Property.Name.ToLower()\r\n                        select\r\n                            sp.Value.Return(\r\n                                v => v,\r\n                                sp.Specification.DefaultValue.Return(\r\n                                    d => d,\r\n                                    sp.Specification.ConversionType.CreateDefaultForImmutable()))).ToArray()", span="118-125"];
n93 [cluster="Unk.IsMutable", label="Entry Unk.IsMutable", span=""];
n81 [cluster="lambda expression", label="return allErrors.Except(warnings).ToParserResult(instance);", span="144-144"];
n94 [cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", label="Entry CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12"];
n95 [cluster="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", label="Entry System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="40-40"];
n96 [cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SuccessfulMessages<TSuccess, TMessage>()", label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SuccessfulMessages<TSuccess, TMessage>()", span="15-15"];
n97 [cluster="Unk.Concat", label="Entry Unk.Concat", span=""];
n98 [cluster="Unk.Memorize", label="Entry Unk.Memorize", span=""];
n99 [cluster="Unk.Contains", label="Entry Unk.Contains", span=""];
n82 [cluster="lambda expression", label="Exit lambda expression", span="65-145"];
n100 [cluster="Unk.Except", label="Entry Unk.Except", span=""];
n101 [cluster="Unk.ToParserResult", label="Entry Unk.ToParserResult", span=""];
n104 [cluster="lambda expression", label="Exit lambda expression", span="73-73"];
n105 [cluster="CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", label="Entry CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="23-23"];
n108 [cluster="lambda expression", label="Exit lambda expression", span="79-79"];
n109 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="14-14"];
n112 [cluster="lambda expression", label="Exit lambda expression", span="86-86"];
n115 [cluster="lambda expression", label="Exit lambda expression", span="91-91"];
n116 [cluster="string.MatchName(string, string, System.StringComparer)", label="Entry string.MatchName(string, string, System.StringComparer)", span="8-8"];
n117 [cluster="lambda expression", label="Entry lambda expression", span="97-113"];
n124 [cluster="lambda expression", label="Entry lambda expression", span="99-99"];
n120 [cluster="lambda expression", label="return mutable;", span="112-112"];
n122 [cluster="Unk.SetProperties", label="Entry Unk.SetProperties", span=""];
n123 [cluster="T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", label="Entry T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="82-82"];
n127 [cluster="lambda expression", label="Entry lambda expression", span="101-101"];
n131 [cluster="lambda expression", label="Entry lambda expression", span="101-101"];
n135 [cluster="lambda expression", label="Entry lambda expression", span="104-104"];
n139 [cluster="lambda expression", label="Entry lambda expression", span="105-105"];
n142 [cluster="lambda expression", label="Entry lambda expression", span="108-110"];
n146 [cluster="lambda expression", label="Entry lambda expression", span="111-111"];
n121 [cluster="lambda expression", label="Exit lambda expression", span="97-113"];
n125 [cluster="lambda expression", label="f()", span="99-99"];
n126 [cluster="lambda expression", label="Exit lambda expression", span="99-99"];
n128 [cluster="lambda expression", label="sp.Value.IsJust()", span="101-101"];
n129 [cluster="lambda expression", label="Exit lambda expression", span="101-101"];
n130 [cluster="CSharpx.Maybe<T>.IsJust<T>()", label="Entry CSharpx.Maybe<T>.IsJust<T>()", span="326-326"];
n132 [cluster="lambda expression", label="sp.Value.FromJust()", span="101-101"];
n133 [cluster="lambda expression", label="Exit lambda expression", span="101-101"];
n134 [cluster="CSharpx.Maybe<T>.FromJust<T>()", label="Entry CSharpx.Maybe<T>.FromJust<T>()", span="342-342"];
n136 [cluster="lambda expression", label="sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust()", span="104-104"];
n137 [cluster="lambda expression", label="Exit lambda expression", span="104-104"];
n138 [cluster="CSharpx.Maybe<T>.IsNothing<T>()", label="Entry CSharpx.Maybe<T>.IsNothing<T>()", span="334-334"];
n140 [cluster="lambda expression", label="sp.Specification.DefaultValue.FromJust()", span="105-105"];
n141 [cluster="lambda expression", label="Exit lambda expression", span="105-105"];
n143 [cluster="lambda expression", label="sp.Value.IsNothing() && sp.Specification.TargetType == TargetType.Sequence\r\n                                    && sp.Specification.DefaultValue.MatchNothing()", span="109-110"];
n144 [cluster="lambda expression", label="Exit lambda expression", span="108-110"];
n145 [cluster="CSharpx.Maybe<T>.MatchNothing()", label="Entry CSharpx.Maybe<T>.MatchNothing()", span="57-57"];
n147 [cluster="lambda expression", label="sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray()", span="111-111"];
n148 [cluster="lambda expression", label="Exit lambda expression", span="111-111"];
n149 [cluster="System.Type.GetGenericArguments()", label="Entry System.Type.GetGenericArguments()", span="0-0"];
n150 [cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0"];
n151 [cluster="System.Type.CreateEmptyArray()", label="Entry System.Type.CreateEmptyArray()", span="125-125"];
n152 [cluster="lambda expression", label="Entry lambda expression", span="115-128"];
n158 [cluster="Unk.GetConstructor", label="Entry Unk.GetConstructor", span=""];
n155 [cluster="lambda expression", label="var immutable = (T)ctor.Invoke(values)", span="126-126"];
n159 [cluster="Unk.GetParameters", label="Entry Unk.GetParameters", span=""];
n160 [cluster="Unk.ToLower", label="Entry Unk.ToLower", span=""];
n161 [cluster="string.ToLower()", label="Entry string.ToLower()", span="0-0"];
n162 [cluster="Unk.CreateDefaultForImmutable", label="Entry Unk.CreateDefaultForImmutable", span=""];
n164 [cluster="lambda expression", label="Entry lambda expression", span="122-122"];
n167 [cluster="lambda expression", label="Entry lambda expression", span="124-124"];
n156 [cluster="lambda expression", label="return immutable;", span="127-127"];
n163 [cluster="Unk.Invoke", label="Entry Unk.Invoke", span=""];
n157 [cluster="lambda expression", label="Exit lambda expression", span="115-128"];
n165 [cluster="lambda expression", label=v, span="122-122"];
n166 [cluster="lambda expression", label="Exit lambda expression", span="122-122"];
n168 [cluster="lambda expression", label=d, span="124-124"];
n169 [cluster="lambda expression", label="Exit lambda expression", span="124-124"];
m0_78 [cluster="System.Type.GetGenericTypeDefinition()", file="InstanceBuilderTests.cs", label="Entry System.Type.GetGenericTypeDefinition()", span="0-0"];
m0_51 [cluster="CommandLine.Internal.ReflectionUtil.GetAttribute<TAttribute>()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Internal.ReflectionUtil.GetAttribute<TAttribute>()", span="137-137"];
m0_52 [cluster="CommandLine.Internal.ReflectionUtil.GetAttribute<TAttribute>()", file="InstanceBuilderTests.cs", label="object[] a = AssemblyFromWhichToPullInformation.GetCustomAttributes(typeof(TAttribute), false)", span="140-140"];
m0_53 [cluster="CommandLine.Internal.ReflectionUtil.GetAttribute<TAttribute>()", file="InstanceBuilderTests.cs", label="a.Length <= 0", span="141-141"];
m0_55 [cluster="CommandLine.Internal.ReflectionUtil.GetAttribute<TAttribute>()", file="InstanceBuilderTests.cs", label="return (TAttribute)a[0];", span="143-143"];
m0_54 [cluster="CommandLine.Internal.ReflectionUtil.GetAttribute<TAttribute>()", file="InstanceBuilderTests.cs", label="return null;", span="141-141"];
m0_56 [cluster="CommandLine.Internal.ReflectionUtil.GetAttribute<TAttribute>()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Internal.ReflectionUtil.GetAttribute<TAttribute>()", span="137-137"];
m0_39 [cluster="CommandLine.Internal.ReflectionUtil.RetrievePropertyAttributeList<TAttribute>(object)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Internal.ReflectionUtil.RetrievePropertyAttributeList<TAttribute>(object)", span="112-112"];
m0_40 [cluster="CommandLine.Internal.ReflectionUtil.RetrievePropertyAttributeList<TAttribute>(object)", file="InstanceBuilderTests.cs", label="IList<TAttribute> list = new List<TAttribute>()", span="115-115"];
m0_41 [cluster="CommandLine.Internal.ReflectionUtil.RetrievePropertyAttributeList<TAttribute>(object)", file="InstanceBuilderTests.cs", label="var info = target.GetType().GetProperties()", span="116-116"];
m0_49 [cluster="CommandLine.Internal.ReflectionUtil.RetrievePropertyAttributeList<TAttribute>(object)", file="InstanceBuilderTests.cs", label="return list;", span="134-134"];
m0_42 [cluster="CommandLine.Internal.ReflectionUtil.RetrievePropertyAttributeList<TAttribute>(object)", file="InstanceBuilderTests.cs", label=info, span="118-118"];
m0_43 [cluster="CommandLine.Internal.ReflectionUtil.RetrievePropertyAttributeList<TAttribute>(object)", file="InstanceBuilderTests.cs", label="property != null && (property.CanRead && property.CanWrite)", span="120-120"];
m0_44 [cluster="CommandLine.Internal.ReflectionUtil.RetrievePropertyAttributeList<TAttribute>(object)", file="InstanceBuilderTests.cs", label="var setMethod = property.GetSetMethod()", span="122-122"];
m0_46 [cluster="CommandLine.Internal.ReflectionUtil.RetrievePropertyAttributeList<TAttribute>(object)", file="InstanceBuilderTests.cs", label="var attribute = Attribute.GetCustomAttribute(property, typeof(TAttribute), false)", span="125-125"];
m0_45 [cluster="CommandLine.Internal.ReflectionUtil.RetrievePropertyAttributeList<TAttribute>(object)", file="InstanceBuilderTests.cs", label="setMethod != null && !setMethod.IsStatic", span="123-123"];
m0_47 [cluster="CommandLine.Internal.ReflectionUtil.RetrievePropertyAttributeList<TAttribute>(object)", file="InstanceBuilderTests.cs", label="attribute != null", span="126-126"];
m0_50 [cluster="CommandLine.Internal.ReflectionUtil.RetrievePropertyAttributeList<TAttribute>(object)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Internal.ReflectionUtil.RetrievePropertyAttributeList<TAttribute>(object)", span="112-112"];
m0_17 [cluster="System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, bool)", file="InstanceBuilderTests.cs", label="Entry System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, bool)", span="0-0"];
m0_20 [cluster="CommandLine.Internal.ReflectionUtil.RetrieveMethod<TAttribute>(object)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Internal.ReflectionUtil.RetrieveMethod<TAttribute>(object)", span="70-70"];
m0_21 [cluster="CommandLine.Internal.ReflectionUtil.RetrieveMethod<TAttribute>(object)", file="InstanceBuilderTests.cs", label="var info = target.GetType().GetMethods()", span="73-73"];
m0_22 [cluster="CommandLine.Internal.ReflectionUtil.RetrieveMethod<TAttribute>(object)", file="InstanceBuilderTests.cs", label=info, span="75-75"];
m0_23 [cluster="CommandLine.Internal.ReflectionUtil.RetrieveMethod<TAttribute>(object)", file="InstanceBuilderTests.cs", label="!method.IsStatic", span="77-77"];
m0_27 [cluster="CommandLine.Internal.ReflectionUtil.RetrieveMethod<TAttribute>(object)", file="InstanceBuilderTests.cs", label="return null;", span="88-88"];
m0_28 [cluster="CommandLine.Internal.ReflectionUtil.RetrieveMethod<TAttribute>(object)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Internal.ReflectionUtil.RetrieveMethod<TAttribute>(object)", span="70-70"];
m0_30 [cluster="CommandLine.Internal.ReflectionUtil.RetrieveMethodAttributeOnly<TAttribute>(object)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Internal.ReflectionUtil.RetrieveMethodAttributeOnly<TAttribute>(object)", span="91-91"];
m0_31 [cluster="CommandLine.Internal.ReflectionUtil.RetrieveMethodAttributeOnly<TAttribute>(object)", file="InstanceBuilderTests.cs", label="var info = target.GetType().GetMethods()", span="94-94"];
m0_32 [cluster="CommandLine.Internal.ReflectionUtil.RetrieveMethodAttributeOnly<TAttribute>(object)", file="InstanceBuilderTests.cs", label=info, span="96-96"];
m0_33 [cluster="CommandLine.Internal.ReflectionUtil.RetrieveMethodAttributeOnly<TAttribute>(object)", file="InstanceBuilderTests.cs", label="!method.IsStatic", span="98-98"];
m0_34 [cluster="CommandLine.Internal.ReflectionUtil.RetrieveMethodAttributeOnly<TAttribute>(object)", file="InstanceBuilderTests.cs", label="Attribute attribute =\r\n                        Attribute.GetCustomAttribute(method, typeof(TAttribute), false)", span="100-101"];
m0_35 [cluster="CommandLine.Internal.ReflectionUtil.RetrieveMethodAttributeOnly<TAttribute>(object)", file="InstanceBuilderTests.cs", label="attribute != null", span="102-102"];
m0_38 [cluster="CommandLine.Internal.ReflectionUtil.RetrieveMethodAttributeOnly<TAttribute>(object)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Internal.ReflectionUtil.RetrieveMethodAttributeOnly<TAttribute>(object)", span="91-91"];
m0_18 [cluster="CommandLine.Internal.Pair<TLeft, TRight>.Pair(TLeft, TRight)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Internal.Pair<TLeft, TRight>.Pair(TLeft, TRight)", span="37-37"];
m0_57 [cluster="System.Reflection.Assembly.GetCustomAttributes(System.Type, bool)", file="InstanceBuilderTests.cs", label="Entry System.Reflection.Assembly.GetCustomAttributes(System.Type, bool)", span="0-0"];
m0_74 [cluster="string.CompareOrdinal(string, string)", file="InstanceBuilderTests.cs", label="Entry string.CompareOrdinal(string, string)", span="0-0"];
m0_16 [cluster="System.Reflection.PropertyInfo.GetSetMethod()", file="InstanceBuilderTests.cs", label="Entry System.Reflection.PropertyInfo.GetSetMethod()", span="0-0"];
m0_19 [cluster="System.Collections.Generic.ICollection<T>.Add(T)", file="InstanceBuilderTests.cs", label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0"];
m0_58 [cluster="CommandLine.Internal.ReflectionUtil.RetrieveOptionProperty<TAttribute>(object, string)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Internal.ReflectionUtil.RetrieveOptionProperty<TAttribute>(object, string)", span="151-151"];
m0_69 [cluster="CommandLine.Internal.ReflectionUtil.RetrieveOptionProperty<TAttribute>(object, string)", file="InstanceBuilderTests.cs", label="optionAttr != null && string.CompareOrdinal(uniqueName, optionAttr.UniqueName) == 0", span="167-167"];
m0_63 [cluster="CommandLine.Internal.ReflectionUtil.RetrieveOptionProperty<TAttribute>(object, string)", file="InstanceBuilderTests.cs", label=propertiesInfo, span="158-158"];
m0_64 [cluster="CommandLine.Internal.ReflectionUtil.RetrieveOptionProperty<TAttribute>(object, string)", file="InstanceBuilderTests.cs", label="property != null && (property.CanRead && property.CanWrite)", span="160-160"];
m0_65 [cluster="CommandLine.Internal.ReflectionUtil.RetrieveOptionProperty<TAttribute>(object, string)", file="InstanceBuilderTests.cs", label="var setMethod = property.GetSetMethod()", span="162-162"];
m0_67 [cluster="CommandLine.Internal.ReflectionUtil.RetrieveOptionProperty<TAttribute>(object, string)", file="InstanceBuilderTests.cs", label="var attribute = Attribute.GetCustomAttribute(property, typeof(TAttribute), false)", span="165-165"];
m0_70 [cluster="CommandLine.Internal.ReflectionUtil.RetrieveOptionProperty<TAttribute>(object, string)", file="InstanceBuilderTests.cs", label="found = new Pair<PropertyInfo, TAttribute>(property, (TAttribute)attribute)", span="169-169"];
m0_66 [cluster="CommandLine.Internal.ReflectionUtil.RetrieveOptionProperty<TAttribute>(object, string)", file="InstanceBuilderTests.cs", label="setMethod != null && !setMethod.IsStatic", span="163-163"];
m0_68 [cluster="CommandLine.Internal.ReflectionUtil.RetrieveOptionProperty<TAttribute>(object, string)", file="InstanceBuilderTests.cs", label="var optionAttr = (TAttribute)attribute", span="166-166"];
m0_71 [cluster="CommandLine.Internal.ReflectionUtil.RetrieveOptionProperty<TAttribute>(object, string)", file="InstanceBuilderTests.cs", label="return found;", span="170-170"];
m0_73 [cluster="CommandLine.Internal.ReflectionUtil.RetrieveOptionProperty<TAttribute>(object, string)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Internal.ReflectionUtil.RetrieveOptionProperty<TAttribute>(object, string)", span="151-151"];
m0_75 [cluster="CommandLine.Internal.ReflectionUtil.IsNullableType(System.Type)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Internal.ReflectionUtil.IsNullableType(System.Type)", span="178-178"];
m0_76 [cluster="CommandLine.Internal.ReflectionUtil.IsNullableType(System.Type)", file="InstanceBuilderTests.cs", label="return type.IsGenericType && type.GetGenericTypeDefinition() == typeof(Nullable<>);", span="180-180"];
m0_77 [cluster="CommandLine.Internal.ReflectionUtil.IsNullableType(System.Type)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Internal.ReflectionUtil.IsNullableType(System.Type)", span="178-178"];
m0_0 [cluster="CommandLine.Internal.ReflectionUtil.RetrievePropertyList<TAttribute>(object)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Internal.ReflectionUtil.RetrievePropertyList<TAttribute>(object)", span="43-43"];
m0_1 [cluster="CommandLine.Internal.ReflectionUtil.RetrievePropertyList<TAttribute>(object)", file="InstanceBuilderTests.cs", label="IList<Pair<PropertyInfo, TAttribute>> list = new List<Pair<PropertyInfo, TAttribute>>()", span="46-46"];
m0_2 [cluster="CommandLine.Internal.ReflectionUtil.RetrievePropertyList<TAttribute>(object)", file="InstanceBuilderTests.cs", label="target != null", span="47-47"];
m0_3 [cluster="CommandLine.Internal.ReflectionUtil.RetrievePropertyList<TAttribute>(object)", file="InstanceBuilderTests.cs", label="var propertiesInfo = target.GetType().GetProperties()", span="49-49"];
m0_10 [cluster="CommandLine.Internal.ReflectionUtil.RetrievePropertyList<TAttribute>(object)", file="InstanceBuilderTests.cs", label="list.Add(new Pair<PropertyInfo, TAttribute>(property, (TAttribute)attribute))", span="61-61"];
m0_11 [cluster="CommandLine.Internal.ReflectionUtil.RetrievePropertyList<TAttribute>(object)", file="InstanceBuilderTests.cs", label="return list;", span="67-67"];
m0_4 [cluster="CommandLine.Internal.ReflectionUtil.RetrievePropertyList<TAttribute>(object)", file="InstanceBuilderTests.cs", label=propertiesInfo, span="51-51"];
m0_5 [cluster="CommandLine.Internal.ReflectionUtil.RetrievePropertyList<TAttribute>(object)", file="InstanceBuilderTests.cs", label="property != null && (property.CanRead && property.CanWrite)", span="53-53"];
m0_12 [cluster="CommandLine.Internal.ReflectionUtil.RetrievePropertyList<TAttribute>(object)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Internal.ReflectionUtil.RetrievePropertyList<TAttribute>(object)", span="43-43"];
m0_29 [cluster="System.Type.GetMethods()", file="InstanceBuilderTests.cs", label="Entry System.Type.GetMethods()", span="0-0"];
m0_15 [cluster="System.Type.GetProperties()", file="InstanceBuilderTests.cs", label="Entry System.Type.GetProperties()", span="0-0"];
m0_13 [cluster="System.Collections.Generic.List<T>.List()", file="InstanceBuilderTests.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m1_0 [cluster="CommandLine.Infrastructure.ReflectionHelper.GetAttribute<TAttribute>()", file="InstanceChooserTests.cs", label="Entry CommandLine.Infrastructure.ReflectionHelper.GetAttribute<TAttribute>()", span="12-12"];
m1_1 [cluster="CommandLine.Infrastructure.ReflectionHelper.GetAttribute<TAttribute>()", color=green, community=0, file="InstanceChooserTests.cs", label="var assembly = GetExecutingOrEntryAssembly()", prediction=0, span="15-15"];
m1_2 [cluster="CommandLine.Infrastructure.ReflectionHelper.GetAttribute<TAttribute>()", file="InstanceChooserTests.cs", label="Exit CommandLine.Infrastructure.ReflectionHelper.GetAttribute<TAttribute>()", span="12-12"];
m1_3 [cluster="Unk.GetExecutingOrEntryAssembly", file="InstanceChooserTests.cs", label="Entry Unk.GetExecutingOrEntryAssembly", span=""];
m2_88 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>)", file="Parser.cs", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>)", span="20-20"];
m2_132 [cluster="CSharpx.Maybe<System.Tuple<T1, T2>>.Do<T1, T2>(System.Action<T1, T2>)", file="Parser.cs", label="Entry CSharpx.Maybe<System.Tuple<T1, T2>>.Do<T1, T2>(System.Action<T1, T2>)", span="312-312"];
m2_8 [cluster="CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)", file="Parser.cs", label="Entry CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)", span="37-37"];
m2_9 [cluster="CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)", file="Parser.cs", label="configuration == null", span="39-39"];
m2_12 [cluster="CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)", file="Parser.cs", label="configuration(settings)", span="42-42"];
m2_10 [cluster="CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)", file="Parser.cs", label="throw new ArgumentNullException(''configuration'');", span="39-39"];
m2_11 [cluster="CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)", file="Parser.cs", label="settings = new ParserSettings()", span="41-41"];
m2_13 [cluster="CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)", file="Parser.cs", label="settings.Consumed = true", span="43-43"];
m2_14 [cluster="CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)", file="Parser.cs", label="Exit CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)", span="37-37"];
m2_37 [cluster="CommandLine.Parser.HandleUnknownArguments(bool)", file="Parser.cs", label="Entry CommandLine.Parser.HandleUnknownArguments(bool)", span="198-198"];
m2_118 [cluster="CommandLine.Parser.HandleUnknownArguments(bool)", file="Parser.cs", label="return ignoreUnknownArguments\r\n                ? Enumerable.Empty<ErrorType>().Concat(ErrorType.UnknownOptionError)\r\n                : Enumerable.Empty<ErrorType>();", span="200-202"];
m2_119 [cluster="CommandLine.Parser.HandleUnknownArguments(bool)", file="Parser.cs", label="Exit CommandLine.Parser.HandleUnknownArguments(bool)", span="198-198"];
m2_87 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", file="Parser.cs", label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", span="44-44"];
m2_93 [cluster="CommandLine.Core.Tokenizer.Normalize(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, bool>)", file="Parser.cs", label="Entry CommandLine.Core.Tokenizer.Normalize(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, bool>)", span="78-78"];
m2_20 [cluster="CommandLine.Parser.~Parser()", file="Parser.cs", label="Entry CommandLine.Parser.~Parser()", span="55-55"];
m2_21 [cluster="CommandLine.Parser.~Parser()", file="Parser.cs", label="Dispose(false)", span="57-57"];
m2_22 [cluster="CommandLine.Parser.~Parser()", file="Parser.cs", label="Exit CommandLine.Parser.~Parser()", span="55-55"];
m2_86 [cluster="Func<IEnumerable<Token>, IEnumerable<Token>>.cstr", file="Parser.cs", label="Entry Func<IEnumerable<Token>, IEnumerable<Token>>.cstr", span=""];
m2_89 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="Parser.cs", label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", span="57-57"];
m2_16 [cluster="System.Action<T>.Invoke(T)", file="Parser.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m2_59 [cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="Parser.cs", label="Entry CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", span="144-144"];
m2_60 [cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="Parser.cs", label="args == null", span="146-146"];
m2_62 [cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="Parser.cs", label="types == null", span="147-147"];
m2_64 [cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="Parser.cs", label="types.Length == 0", span="148-148"];
m2_66 [cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="Parser.cs", label="return MakeParserResult(\r\n                () => InstanceChooser.Choose(\r\n                    (arguments, optionSpecs) => Tokenize(arguments, optionSpecs, settings),\r\n                    types,\r\n                    args,\r\n                    settings.NameComparer,\r\n                    settings.ParsingCulture,\r\n                    HandleUnknownArguments(settings.IgnoreUnknownArguments)),\r\n                settings);", span="150-158"];
m2_61 [cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="Parser.cs", label="throw new ArgumentNullException(''args'');", span="146-146"];
m2_63 [cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="Parser.cs", label="throw new ArgumentNullException(''types'');", span="147-147"];
m2_65 [cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="Parser.cs", label="throw new ArgumentOutOfRangeException(''types'');", span="148-148"];
m2_67 [cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="Parser.cs", label="Exit CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", span="144-144"];
m2_3 [cluster="CommandLine.Parser.Parser(CommandLine.ParserSettings)", file="Parser.cs", label="Entry CommandLine.Parser.Parser(CommandLine.ParserSettings)", span="46-46"];
m2_17 [cluster="CommandLine.Parser.Parser(CommandLine.ParserSettings)", file="Parser.cs", label="this.settings = settings", span="48-48"];
m2_18 [cluster="CommandLine.Parser.Parser(CommandLine.ParserSettings)", file="Parser.cs", label="this.settings.Consumed = true", span="49-49"];
m2_19 [cluster="CommandLine.Parser.Parser(CommandLine.ParserSettings)", file="Parser.cs", label="Exit CommandLine.Parser.Parser(CommandLine.ParserSettings)", span="46-46"];
m2_68 [cluster="System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", file="Parser.cs", label="Entry System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", span="0-0"];
m2_43 [cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", file="Parser.cs", label="Entry CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", span="114-114"];
m2_44 [cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", file="Parser.cs", label="factory == null", span="117-117"];
m2_48 [cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", file="Parser.cs", label="args == null", span="119-119"];
m2_50 [cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", file="Parser.cs", label="return MakeParserResult(\r\n                () => InstanceBuilder.Build(\r\n                    Maybe.Just(factory),\r\n                    (arguments, optionSpecs) => Tokenize(arguments, optionSpecs, settings),\r\n                    args,\r\n                    settings.NameComparer,\r\n                    settings.ParsingCulture,\r\n                    HandleUnknownArguments(settings.IgnoreUnknownArguments)),\r\n                settings);", span="121-129"];
m2_45 [cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", file="Parser.cs", label="throw new ArgumentNullException(''factory'');", span="117-117"];
m2_46 [cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", file="Parser.cs", label="!typeof(T).IsMutable()", span="118-118"];
m2_47 [cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", file="Parser.cs", label="throw new ArgumentException(''factory'');", span="118-118"];
m2_49 [cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", file="Parser.cs", label="throw new ArgumentNullException(''args'');", span="119-119"];
m2_51 [cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", file="Parser.cs", label="Exit CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", span="114-114"];
m2_113 [cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="Parser.cs", label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="27-27"];
m2_52 [cluster="System.ArgumentException.ArgumentException(string)", file="Parser.cs", label="Entry System.ArgumentException.ArgumentException(string)", span="0-0"];
m2_120 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="Parser.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m2_4 [cluster="CommandLine.ParserSettings.ParserSettings()", file="Parser.cs", label="Entry CommandLine.ParserSettings.ParserSettings()", span="25-25"];
m2_97 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="Parser.cs", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="18-18"];
m2_5 [cluster="CommandLine.Parser.Parser()", file="Parser.cs", label="Entry CommandLine.Parser.Parser()", span="26-26"];
m2_6 [cluster="CommandLine.Parser.Parser()", file="Parser.cs", label="settings = new ParserSettings { Consumed = true }", span="28-28"];
m2_7 [cluster="CommandLine.Parser.Parser()", file="Parser.cs", label="Exit CommandLine.Parser.Parser()", span="26-26"];
m2_31 [cluster="CSharpx.Maybe.Just<T>(T)", file="Parser.cs", label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124"];
m2_116 [cluster="System.Func<TResult>.Invoke()", file="Parser.cs", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
m2_117 [cluster="CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", file="Parser.cs", label="Entry CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", span="205-205"];
m2_122 [cluster="CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", file="Parser.cs", label="parserResult.WithNotParsed(\r\n                errors =>\r\n                    Maybe.Merge(errors.ToMaybe(), helpWriter.ToMaybe())\r\n                        .Do((_, writer) => writer.Write(HelpText.AutoBuild(parserResult)))\r\n                )", span="207-211"];
m2_123 [cluster="CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", file="Parser.cs", label="return parserResult;", span="213-213"];
m2_124 [cluster="CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", file="Parser.cs", label="Exit CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", span="205-205"];
m2_133 [cluster="lambda expression", file="Parser.cs", label="Entry lambda expression", span="210-210"];
m2_0 [cluster="lambda expression", file="Parser.cs", label="Entry lambda expression", span="21-21"];
m2_1 [cluster="lambda expression", file="Parser.cs", label="new Parser(new ParserSettings { HelpWriter = Console.Error })", span="21-21"];
m2_2 [cluster="lambda expression", file="Parser.cs", label="Exit lambda expression", span="21-21"];
m2_35 [cluster="lambda expression", file="Parser.cs", label="InstanceBuilder.Build(\r\n                    factory,\r\n                    (arguments, optionSpecs) => Tokenize(arguments, optionSpecs, settings),\r\n                    args,\r\n                    settings.NameComparer,\r\n                    settings.ParsingCulture,\r\n                    HandleUnknownArguments(settings.IgnoreUnknownArguments))", span="94-100"];
m2_34 [cluster="lambda expression", file="Parser.cs", label="Entry lambda expression", span="94-100"];
m2_36 [cluster="lambda expression", file="Parser.cs", label="Exit lambda expression", span="94-100"];
m2_39 [cluster="lambda expression", file="Parser.cs", label="Entry lambda expression", span="96-96"];
m2_40 [cluster="lambda expression", file="Parser.cs", label="Tokenize(arguments, optionSpecs, settings)", span="96-96"];
m2_41 [cluster="lambda expression", file="Parser.cs", label="Exit lambda expression", span="96-96"];
m2_54 [cluster="lambda expression", file="Parser.cs", label="InstanceBuilder.Build(\r\n                    Maybe.Just(factory),\r\n                    (arguments, optionSpecs) => Tokenize(arguments, optionSpecs, settings),\r\n                    args,\r\n                    settings.NameComparer,\r\n                    settings.ParsingCulture,\r\n                    HandleUnknownArguments(settings.IgnoreUnknownArguments))", span="122-128"];
m2_53 [cluster="lambda expression", file="Parser.cs", label="Entry lambda expression", span="122-128"];
m2_55 [cluster="lambda expression", file="Parser.cs", label="Exit lambda expression", span="122-128"];
m2_56 [cluster="lambda expression", file="Parser.cs", label="Entry lambda expression", span="124-124"];
m2_57 [cluster="lambda expression", file="Parser.cs", label="Tokenize(arguments, optionSpecs, settings)", span="124-124"];
m2_58 [cluster="lambda expression", file="Parser.cs", label="Exit lambda expression", span="124-124"];
m2_70 [cluster="lambda expression", file="Parser.cs", label="InstanceChooser.Choose(\r\n                    (arguments, optionSpecs) => Tokenize(arguments, optionSpecs, settings),\r\n                    types,\r\n                    args,\r\n                    settings.NameComparer,\r\n                    settings.ParsingCulture,\r\n                    HandleUnknownArguments(settings.IgnoreUnknownArguments))", span="151-157"];
m2_69 [cluster="lambda expression", file="Parser.cs", label="Entry lambda expression", span="151-157"];
m2_71 [cluster="lambda expression", file="Parser.cs", label="Exit lambda expression", span="151-157"];
m2_73 [cluster="lambda expression", file="Parser.cs", label="Entry lambda expression", span="152-152"];
m2_74 [cluster="lambda expression", file="Parser.cs", label="Tokenize(arguments, optionSpecs, settings)", span="152-152"];
m2_75 [cluster="lambda expression", file="Parser.cs", label="Exit lambda expression", span="152-152"];
m2_101 [cluster="lambda expression", file="Parser.cs", label="Entry lambda expression", span="184-185"];
m2_107 [cluster="lambda expression", file="Parser.cs", label="Entry lambda expression", span="186-186"];
m2_110 [cluster="lambda expression", file="Parser.cs", label="Entry lambda expression", span="187-187"];
m2_90 [cluster="lambda expression", file="Parser.cs", label="Entry lambda expression", span="177-178"];
m2_92 [cluster="lambda expression", file="Parser.cs", label="Exit lambda expression", span="177-178"];
m2_94 [cluster="lambda expression", file="Parser.cs", label="Entry lambda expression", span="178-178"];
m2_96 [cluster="lambda expression", file="Parser.cs", label="Exit lambda expression", span="178-178"];
m2_98 [cluster="lambda expression", file="Parser.cs", label="Entry lambda expression", span="179-179"];
m2_100 [cluster="lambda expression", file="Parser.cs", label="Exit lambda expression", span="179-179"];
m2_103 [cluster="lambda expression", file="Parser.cs", label="Exit lambda expression", span="184-185"];
m2_104 [cluster="lambda expression", file="Parser.cs", label="Entry lambda expression", span="185-185"];
m2_106 [cluster="lambda expression", file="Parser.cs", label="Exit lambda expression", span="185-185"];
m2_109 [cluster="lambda expression", file="Parser.cs", label="Exit lambda expression", span="186-186"];
m2_112 [cluster="lambda expression", file="Parser.cs", label="Exit lambda expression", span="187-187"];
m2_127 [cluster="lambda expression", file="Parser.cs", label="Maybe.Merge(errors.ToMaybe(), helpWriter.ToMaybe())\r\n                        .Do((_, writer) => writer.Write(HelpText.AutoBuild(parserResult)))", span="209-210"];
m2_134 [cluster="lambda expression", file="Parser.cs", label="writer.Write(HelpText.AutoBuild(parserResult))", span="210-210"];
m2_126 [cluster="lambda expression", file="Parser.cs", label="Entry lambda expression", span="208-210"];
m2_128 [cluster="lambda expression", file="Parser.cs", label="Exit lambda expression", span="208-210"];
m2_135 [cluster="lambda expression", file="Parser.cs", label="Exit lambda expression", span="210-210"];
m2_130 [cluster="T.ToMaybe<T>()", file="Parser.cs", label="Entry T.ToMaybe<T>()", span="249-249"];
m2_121 [cluster="System.Collections.Generic.IEnumerable<T>.Concat<T>(T)", file="Parser.cs", label="Entry System.Collections.Generic.IEnumerable<T>.Concat<T>(T)", span="94-94"];
m2_129 [cluster="System.Collections.Generic.IEnumerable<T>.ToMaybe<T>()", file="Parser.cs", label="Entry System.Collections.Generic.IEnumerable<T>.ToMaybe<T>()", span="331-331"];
m2_136 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", file="Parser.cs", label="Entry CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", span="260-260"];
m2_80 [cluster="System.GC.SuppressFinalize(object)", file="Parser.cs", label="Entry System.GC.SuppressFinalize(object)", span="0-0"];
m2_32 [cluster="CSharpx.Maybe.Nothing<T>()", file="Parser.cs", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
m2_125 [cluster="CommandLine.ParserResult<T>.WithNotParsed<T>(System.Action<System.Collections.Generic.IEnumerable<CommandLine.Error>>)", file="Parser.cs", label="Entry CommandLine.ParserResult<T>.WithNotParsed<T>(System.Action<System.Collections.Generic.IEnumerable<CommandLine.Error>>)", span="58-58"];
m2_72 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="Parser.cs", label="Entry CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="35-35"];
m2_145 [cluster="CommandLine.ParserSettings.Dispose()", file="Parser.cs", label="Entry CommandLine.ParserSettings.Dispose()", span="119-119"];
m2_30 [cluster="System.Type.IsMutable()", file="Parser.cs", label="Entry System.Type.IsMutable()", span="139-139"];
m2_33 [cluster="CommandLine.Parser.MakeParserResult<T>(System.Func<CommandLine.ParserResult<T>>, CommandLine.ParserSettings)", file="Parser.cs", label="Entry CommandLine.Parser.MakeParserResult<T>(System.Func<CommandLine.ParserResult<T>>, CommandLine.ParserSettings)", span="191-191"];
m2_114 [cluster="CommandLine.Parser.MakeParserResult<T>(System.Func<CommandLine.ParserResult<T>>, CommandLine.ParserSettings)", file="Parser.cs", label="return DisplayHelp(\r\n                parseFunc(),\r\n                settings.HelpWriter);", span="193-195"];
m2_115 [cluster="CommandLine.Parser.MakeParserResult<T>(System.Func<CommandLine.ParserResult<T>>, CommandLine.ParserSettings)", file="Parser.cs", label="Exit CommandLine.Parser.MakeParserResult<T>(System.Func<CommandLine.ParserResult<T>>, CommandLine.ParserSettings)", span="191-191"];
m2_76 [cluster="CommandLine.Parser.Dispose()", file="Parser.cs", label="Entry CommandLine.Parser.Dispose()", span="164-164"];
m2_77 [cluster="CommandLine.Parser.Dispose()", file="Parser.cs", label="Dispose(true)", span="166-166"];
m2_78 [cluster="CommandLine.Parser.Dispose()", file="Parser.cs", label="GC.SuppressFinalize(this)", span="168-168"];
m2_79 [cluster="CommandLine.Parser.Dispose()", file="Parser.cs", label="Exit CommandLine.Parser.Dispose()", span="164-164"];
m2_24 [cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", file="Parser.cs", label="Entry CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", span="85-85"];
m2_25 [cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", file="Parser.cs", label="args == null", span="87-87"];
m2_28 [cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", file="Parser.cs", label="return MakeParserResult(\r\n                () => InstanceBuilder.Build(\r\n                    factory,\r\n                    (arguments, optionSpecs) => Tokenize(arguments, optionSpecs, settings),\r\n                    args,\r\n                    settings.NameComparer,\r\n                    settings.ParsingCulture,\r\n                    HandleUnknownArguments(settings.IgnoreUnknownArguments)),\r\n                settings);", span="93-101"];
m2_26 [cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", file="Parser.cs", label="throw new ArgumentNullException(''args'');", span="87-87"];
m2_27 [cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", file="Parser.cs", label="var factory = typeof(T).IsMutable()\r\n                ? Maybe.Just<Func<T>>(Activator.CreateInstance<T>)\r\n                : Maybe.Nothing<Func<T>>()", span="89-91"];
m2_29 [cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", file="Parser.cs", label="Exit CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", span="85-85"];
m2_42 [cluster="CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)", file="Parser.cs", label="Entry CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)", span="171-171"];
m2_81 [cluster="CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)", color=green, community=1, file="Parser.cs", label="return\r\n                Tokenizer.ConfigureTokenizer(\r\n                    settings.NameComparer,\r\n                    settings.IgnoreUnknownArguments,\r\n                    settings.EnableDashDash)(arguments, optionSpecs);", prediction=1, span="176-180"];
m2_85 [cluster="CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)", file="Parser.cs", label="Exit CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)", span="171-171"];
m2_23 [cluster="CommandLine.Parser.Dispose(bool)", file="Parser.cs", label="Entry CommandLine.Parser.Dispose(bool)", span="216-216"];
m2_138 [cluster="CommandLine.Parser.Dispose(bool)", file="Parser.cs", label=disposed, span="218-218"];
m2_140 [cluster="CommandLine.Parser.Dispose(bool)", file="Parser.cs", label=disposing, span="220-220"];
m2_139 [cluster="CommandLine.Parser.Dispose(bool)", file="Parser.cs", label="return;", span="218-218"];
m2_141 [cluster="CommandLine.Parser.Dispose(bool)", file="Parser.cs", label="settings != null", span="222-222"];
m2_142 [cluster="CommandLine.Parser.Dispose(bool)", file="Parser.cs", label="settings.Dispose()", span="223-223"];
m2_143 [cluster="CommandLine.Parser.Dispose(bool)", file="Parser.cs", label="disposed = true", span="225-225"];
m2_144 [cluster="CommandLine.Parser.Dispose(bool)", file="Parser.cs", label="Exit CommandLine.Parser.Dispose(bool)", span="216-216"];
m2_131 [cluster="CSharpx.Maybe.Merge<T1, T2>(CSharpx.Maybe<T1>, CSharpx.Maybe<T2>)", file="Parser.cs", label="Entry CSharpx.Maybe.Merge<T1, T2>(CSharpx.Maybe<T1>, CSharpx.Maybe<T2>)", span="163-163"];
m2_15 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="Parser.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m2_137 [cluster="System.IO.TextWriter.Write(string)", file="Parser.cs", label="Entry System.IO.TextWriter.Write(string)", span="0-0"];
m2_146 [file="Parser.cs", label="CommandLine.Parser", span=""];
m2_147 [file="Parser.cs", label="System.Collections.Generic.IEnumerable<string>", span=""];
m2_148 [file="Parser.cs", label=factory, span=""];
m2_149 [file="Parser.cs", label="System.Func<T>", span=""];
m2_150 [file="Parser.cs", label="System.Collections.Generic.IEnumerable<string>", span=""];
m2_151 [file="Parser.cs", label="System.Collections.Generic.IEnumerable<string>", span=""];
m2_152 [file="Parser.cs", label="params System.Type[]", span=""];
m2_153 [file="Parser.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
m2_154 [file="Parser.cs", label="CommandLine.ParserSettings", span=""];
m2_155 [file="Parser.cs", label=normalize, span=""];
m2_156 [file="Parser.cs", label="CommandLine.ParserResult<T>", span=""];
m2_157 [file="Parser.cs", label="System.IO.TextWriter", span=""];
n172 -> n52  [color=darkseagreen4, key=1, label="CSharpx.Maybe<System.Func<T>>", style=dashed];
n173 -> n52  [color=darkseagreen4, key=1, label=specProps, style=dashed];
n173 -> n71  [color=darkseagreen4, key=1, label=specProps, style=dashed];
n173 -> n72  [color=darkseagreen4, key=1, label=specProps, style=dashed];
n174 -> n62  [color=darkseagreen4, key=1, label=makeDefault, style=dashed];
n177 -> n103  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
n178 -> n103  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n178 -> n71  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n178 -> n114  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n179 -> n71  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
n179 -> n107  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
n179 -> n72  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
n179 -> n111  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
n182 -> n114  [color=darkseagreen4, key=1, label=token, style=dashed];
n183 -> n119  [color=darkseagreen4, key=1, label=specPropsWithValue, style=dashed];
n3 -> n52  [color=darkseagreen4, key=1, label="CSharpx.Maybe<System.Func<T>>", style=dashed];
n3 -> n103  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n3 -> n71  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n3 -> n107  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
n3 -> n72  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
n3 -> n111  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
n3 -> n114  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n19 -> n40  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n23 -> n62  [color=darkseagreen4, key=1, label=makeDefault, style=dashed];
n52 -> n58  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n52 -> n52  [color=darkseagreen4, key=1, label=p, style=dashed];
n68 -> n79  [color=darkseagreen4, key=1, label=tokenizerResult, style=dashed];
n70 -> n102  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n70 -> n72  [color=darkseagreen4, key=1, label=partitions, style=dashed];
n71 -> n71  [color=darkseagreen4, key=1, label=pt, style=dashed];
n71 -> n106  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n71 -> n74  [color=darkseagreen4, key=1, label=optionSpecPropsResult, style=dashed];
n71 -> n79  [color=darkseagreen4, key=1, label=optionSpecPropsResult, style=dashed];
n72 -> n72  [color=darkseagreen4, key=1, label=pt, style=dashed];
n72 -> n110  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n72 -> n74  [color=darkseagreen4, key=1, label=valueSpecPropsResult, style=dashed];
n72 -> n79  [color=darkseagreen4, key=1, label=valueSpecPropsResult, style=dashed];
n73 -> n113  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n73 -> n114  [color=darkseagreen4, key=1, label=token, style=dashed];
n73 -> n79  [color=darkseagreen4, key=1, label=missingValueErrors, style=dashed];
n118 -> n124  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n20 -> n45  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n20 -> n52  [color=darkseagreen4, key=1, label=specProps, style=dashed];
n20 -> n71  [color=darkseagreen4, key=1, label=specProps, style=dashed];
n20 -> n72  [color=darkseagreen4, key=1, label=specProps, style=dashed];
n77 -> n81  [color=darkseagreen4, key=1, label=instance, style=dashed];
n22 -> n103  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
n24 -> n62  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Error>", style=dashed];
n79 -> n81  [color=darkseagreen4, key=1, label=allErrors, style=dashed];
n74 -> n119  [color=darkseagreen4, key=1, label=specPropsWithValue, style=dashed];
n119 -> n119  [color=darkseagreen4, key=1, label=mutable, style=dashed];
n119 -> n127  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n119 -> n131  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n119 -> n135  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n119 -> n139  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n119 -> n142  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n119 -> n146  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n154 -> n164  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n154 -> n167  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_52 -> m0_55  [color=darkseagreen4, key=1, label=a, style=dashed];
m0_40 -> m0_49  [color=darkseagreen4, key=1, label=list, style=dashed];
m0_32 -> m0_34  [color=darkseagreen4, key=1, label=method, style=dashed];
m0_58 -> m0_69  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_0 -> m0_2  [color=darkseagreen4, key=1, label=object, style=dashed];
m0_1 -> m0_10  [color=darkseagreen4, key=1, label=list, style=dashed];
m0_1 -> m0_11  [color=darkseagreen4, key=1, label=list, style=dashed];
m0_4 -> m0_10  [color=darkseagreen4, key=1, label=property, style=dashed];
m2_8 -> m2_12  [color=darkseagreen4, key=1, label="System.Action<CommandLine.ParserSettings>", style=dashed];
m2_59 -> m2_62  [color=darkseagreen4, key=1, label="params System.Type[]", style=dashed];
m2_59 -> m2_64  [color=darkseagreen4, key=1, label="params System.Type[]", style=dashed];
m2_59 -> m2_66  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m2_59 -> m2_70  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m2_66 -> m2_69  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_43 -> m2_48  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m2_43 -> m2_50  [color=darkseagreen4, key=1, label="System.Func<T>", style=dashed];
m2_43 -> m2_54  [color=darkseagreen4, key=1, label="System.Func<T>", style=dashed];
m2_50 -> m2_53  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_117 -> m2_127  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
m2_117 -> m2_134  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
m2_117 -> m2_123  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
m2_122 -> m2_126  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_122 -> m2_101  [color=green, key=1, label="lambda expression", style=dashed];
m2_35 -> m2_39  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_54 -> m2_56  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_70 -> m2_73  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_127 -> m2_133  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_127 -> m2_107  [color=green, key=1, label="lambda expression", style=dashed];
m2_24 -> m2_28  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m2_24 -> m2_35  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m2_28 -> m2_34  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_27 -> m2_35  [color=darkseagreen4, key=1, label=factory, style=dashed];
m2_23 -> m2_140  [color=darkseagreen4, key=1, label=bool, style=dashed];
m2_146 -> m2_12  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m2_146 -> m2_21  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m2_146 -> m2_28  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m2_146 -> m2_35  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m2_146 -> m2_40  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m2_146 -> m2_50  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m2_146 -> m2_54  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m2_146 -> m2_57  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m2_146 -> m2_66  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m2_146 -> m2_70  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m2_146 -> m2_74  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m2_146 -> m2_77  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m2_146 -> m2_78  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m2_146 -> m2_138  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m2_146 -> m2_141  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m2_146 -> m2_142  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m2_147 -> m2_35  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m2_148 -> m2_35  [color=darkseagreen4, key=1, label=factory, style=dashed];
m2_149 -> m2_54  [color=darkseagreen4, key=1, label="System.Func<T>", style=dashed];
m2_150 -> m2_54  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m2_151 -> m2_70  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m2_152 -> m2_70  [color=darkseagreen4, key=1, label="params System.Type[]", style=dashed];
m2_156 -> m2_127  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
m2_156 -> m2_134  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
m2_157 -> m2_127  [color=darkseagreen4, key=1, label="System.IO.TextWriter", style=dashed];
}
