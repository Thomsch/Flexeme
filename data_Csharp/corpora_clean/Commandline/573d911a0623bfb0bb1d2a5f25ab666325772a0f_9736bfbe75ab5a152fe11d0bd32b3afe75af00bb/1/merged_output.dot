digraph  {
n8 [label="CommandLine.Demo.Program.Options", span=""];
n0 [cluster="CommandLine.Demo.Program.Options.GetUsage()", label="Entry CommandLine.Demo.Program.Options.GetUsage()", span="91-91"];
n1 [cluster="CommandLine.Demo.Program.Options.GetUsage()", label="return HelpText.AutoBuild(this, (HelpText current) => HelpText.DefaultParsingErrorsHandler(this, current));", span="93-93"];
n2 [cluster="CommandLine.Demo.Program.Options.GetUsage()", label="Exit CommandLine.Demo.Program.Options.GetUsage()", span="91-91"];
n3 [cluster="CommandLine.Text.HelpText.AutoBuild(object, CommandLine.Text.HandleParsingErrorsDelegate, bool)", label="Entry CommandLine.Text.HelpText.AutoBuild(object, CommandLine.Text.HandleParsingErrorsDelegate, bool)", span="215-215"];
n4 [cluster="lambda expression", label="Entry lambda expression", span="93-93"];
n5 [cluster="lambda expression", label="HelpText.DefaultParsingErrorsHandler(this, current)", span="93-93"];
n6 [cluster="lambda expression", label="Exit lambda expression", span="93-93"];
n7 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler(object, CommandLine.Text.HelpText)", label="Entry CommandLine.Text.HelpText.DefaultParsingErrorsHandler(object, CommandLine.Text.HelpText)", span="254-254"];
d67 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<string>>)", color=green, community=0, label="18: var expandedTokens = tokens.Value.Pairwise<Token, IEnumerable<Token>>(\r\n                (f, s) =>\r\n                    {\r\n                        string separator;\r\n                        if (f.IsName() && optionSequenceWithSeparatorLookup(f.Text).MatchJust(out separator))\r\n                        {\r\n                            var parts = s.Text.Split(Convert.ToChar(separator));\r\n                            return new[] { f }.Concat(parts.Select(str => Token.Value(str)));\r\n                        }\r\n                        return new[] { f, s };\r\n                    })", span="59-69"];
d62 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<string>>)", label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<string>>)", span="48-48"];
d65 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<string>>)", label="tokens.Errors.Any() || tokens.Value.Count() == 1", span="54-54"];
d68 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<string>>)", label="return StatePair.Create(expandedTokens.SelectMany(x => x), tokens.Errors);", span="71-71"];
d72 [cluster="Unk.>", label="Entry Unk.>", span=""];
d75 [cluster="lambda expression", label="Entry lambda expression", span="60-69"];
d76 [cluster="lambda expression", color=green, community=0, label="9: string separator", span="62-62"];
d77 [cluster="lambda expression", label="f.IsName() && optionSequenceWithSeparatorLookup(f.Text).MatchJust(out separator)", span="63-63"];
d69 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<string>>)", label="Exit CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<string>>)", span="48-48"];
d63 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<string>>)", label="tokens == null", span="52-52"];
d66 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<string>>)", label="return tokens;", span="56-56"];
d70 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
d71 [cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0"];
d73 [cluster="System.Collections.Generic.IEnumerable<TSource>.SelectMany<TSource, TResult>(System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)", label="Entry System.Collections.Generic.IEnumerable<TSource>.SelectMany<TSource, TResult>(System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)", span="0-0"];
d74 [cluster="CommandLine.Core.StatePair.Create<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", label="Entry CommandLine.Core.StatePair.Create<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="61-61"];
d89 [cluster="lambda expression", label="Entry lambda expression", span="71-71"];
d81 [cluster="lambda expression", label="Exit lambda expression", span="60-69"];
d78 [cluster="lambda expression", label="var parts = s.Text.Split(Convert.ToChar(separator))", span="65-65"];
d79 [cluster="lambda expression", label="return new[] { f }.Concat(parts.Select(str => Token.Value(str)));", span="66-66"];
d80 [cluster="lambda expression", label="return new[] { f, s };", span="68-68"];
d140 [label="System.Func<string, CommandLine.Infrastructure.Maybe<string>>", span=""];
d82 [cluster="CommandLine.Core.Token.IsName()", label="Entry CommandLine.Core.Token.IsName()", span="72-72"];
d41 [cluster="System.Func<T, TResult>.Invoke(T)", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
d83 [cluster="CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)", label="Entry CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)", span="31-31"];
d64 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<string>>)", label="throw new ArgumentNullException(''tokens'');", span="52-52"];
d111 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", label="yield return Token.Value(text.Substring(seen.Count()));", span="119-119"];
d110 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", label="seen.Count() < text.Length", span="117-117"];
d91 [cluster="lambda expression", label="Exit lambda expression", span="71-71"];
d90 [cluster="lambda expression", label=x, span="71-71"];
d84 [cluster="System.Convert.ToChar(string)", label="Entry System.Convert.ToChar(string)", span="0-0"];
d85 [cluster="string.Split(params char[])", label="Entry string.Split(params char[])", span="0-0"];
d44 [cluster="Unk.Select", label="Entry Unk.Select", span=""];
d20 [cluster="Unk.Concat", label="Entry Unk.Concat", span=""];
d86 [cluster="lambda expression", label="Entry lambda expression", span="66-66"];
d34 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", label="var tokenizerResult = tokenizer(arguments.TakeWhile(arg => !arg.EqualsOrdinal(''--'')))", span="41-41"];
d37 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", label="return tokenizer(arguments);", span="45-45"];
d107 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", label="!seen.Contains(c) && nameLookup(n)", span="107-107"];
d9 [cluster="System.ArgumentNullException.ArgumentNullException(string)", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
d14 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", label="Entry CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", span="74-74"];
d95 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", label="var text = value.Substring(1)", span="85-85"];
d104 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", label="var seen = new List<char> { first[0] }", span="102-102"];
d112 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", label="Exit CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", span="74-74"];
d113 [cluster="string.Substring(int)", label="Entry string.Substring(int)", span="0-0"];
d12 [cluster="CommandLine.Core.Token.Value(string)", label="Entry CommandLine.Core.Token.Value(string)", span="26-26"];
d105 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", label="text.Substring(1)", span="104-104"];
d130 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", label="var parts = text.Split('=')", span="147-147"];
d35 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", label="var values = arguments.SkipWhile(arg => !arg.EqualsOrdinal(''--'')).Skip(1).Select(t => Token.Value(t))", span="42-42"];
d7 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", label="return StatePair.Create(tokens.Where(x=>!unkTokens.Contains(x)), errors.Concat(from t in unkTokens select new UnknownOptionError(t.Text)));", span="30-30"];
d60 [cluster="lambda expression", label="tokens.Concat(values)", span="43-43"];
d88 [cluster="lambda expression", label="Exit lambda expression", span="66-66"];
d87 [cluster="lambda expression", label="Token.Value(str)", span="66-66"];
d30 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="33-33"];
d33 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", label="arguments.Any(arg => arg.EqualsOrdinal(''--''))", span="39-39"];
d40 [cluster="System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", label="Entry System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", span="0-0"];
d50 [cluster="lambda expression", label="Entry lambda expression", span="41-41"];
d36 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", label="return tokenizerResult.MapValue(tokens => tokens.Concat(values));", span="43-43"];
d38 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", label="Exit CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="33-33"];
d106 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", label="var n = new string(c, 1)", span="106-106"];
d108 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", label="seen.Add(c)", span="109-109"];
d118 [cluster="System.Collections.Generic.List<T>.Contains(T)", label="Entry System.Collections.Generic.List<T>.Contains(T)", span="0-0"];
d2 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", label="throw new ArgumentNullException(''arguments'');", span="15-15"];
d32 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", label="throw new ArgumentNullException(''arguments'');", span="37-37"];
d93 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", label="throw new ArgumentNullException(''value'');", span="80-80"];
d120 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", label="throw new ArgumentNullException(''value'');", span="130-130"];
d5 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", label="var tokens = (from arg in arguments\r\n                          from token in !arg.StartsWith(''-'', StringComparison.Ordinal)\r\n                               ? new Token[] { Token.Value(arg) }\r\n                               : arg.StartsWith(''--'', StringComparison.Ordinal)\r\n                                     ? TokenizeLongName(arg, onError)\r\n                                     : TokenizeShortName(arg, nameLookup)\r\n                          select token).ToList()", span="20-26"];
d92 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", label="value == null", span="78-78"];
d97 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", label="yield return Token.Value(value);", span="89-89"];
d98 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", label="yield break;", span="90-90"];
d100 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", label="yield return Token.Name(text);", span="95-95"];
d101 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", label="yield break;", span="96-96"];
d103 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", label="yield return Token.Name(first);", span="100-100"];
d109 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", label="yield return Token.Name(n);", span="110-110"];
d94 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", label="value.Length > 1 || value[0] == '-' || value[1] != '-'", span="83-83"];
d99 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", label="value.Length == 2", span="93-93"];
d96 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", label="char.IsDigit(text[0])", span="87-87"];
d102 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", label="var first = text.Substring(0, 1)", span="99-99"];
d10 [cluster="System.Collections.Generic.List<T>.List()", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
d122 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", label="var text = value.Substring(2)", span="135-135"];
d57 [cluster="lambda expression", label="Token.Value(t)", span="42-42"];
d132 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", label="yield return Token.Value(parts[1]);", span="149-149"];
d129 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", label="yield break;", span="145-145"];
d127 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", label="equalIndex == 1", span="142-142"];
d131 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", label="yield return Token.Name(parts[0]);", span="148-148"];
d42 [cluster="System.Collections.Generic.IEnumerable<TSource>.SkipWhile<TSource>(System.Func<TSource, bool>)", label="Entry System.Collections.Generic.IEnumerable<TSource>.SkipWhile<TSource>(System.Func<TSource, bool>)", span="0-0"];
d43 [cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0"];
d53 [cluster="lambda expression", label="Entry lambda expression", span="42-42"];
d56 [cluster="lambda expression", label="Entry lambda expression", span="42-42"];
d6 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", label="var unkTokens = (from t in tokens where t.IsName() && !nameLookup(t.Text) select t).ToList()", span="28-28"];
d3 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", label="var errors = new List<Error>()", span="17-17"];
d8 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", label="Exit CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11"];
d18 [cluster="Unk.Where", label="Entry Unk.Where", span=""];
d19 [cluster="UnknownOptionError.cstr", label="Entry UnknownOptionError.cstr", span=""];
d21 [cluster="Unk.Create", label="Entry Unk.Create", span=""];
d26 [cluster="lambda expression", label="Entry lambda expression", span="30-30"];
d139 [label=values, span=""];
d59 [cluster="lambda expression", label="Entry lambda expression", span="43-43"];
d61 [cluster="lambda expression", label="Exit lambda expression", span="43-43"];
d31 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", label="arguments == null", span="37-37"];
d39 [cluster="Unk.Any", label="Entry Unk.Any", span=""];
d46 [cluster="lambda expression", label="Entry lambda expression", span="39-39"];
d52 [cluster="lambda expression", label="Exit lambda expression", span="41-41"];
d51 [cluster="lambda expression", label="!arg.EqualsOrdinal(''--'')", span="41-41"];
d45 [cluster="CommandLine.Core.StatePair<T1>.MapValue<T1, T2>(System.Func<T1, T2>)", label="Entry CommandLine.Core.StatePair<T1>.MapValue<T1, T2>(System.Func<T1, T2>)", span="69-69"];
d117 [cluster="string.String(char, int)", label="Entry string.String(char, int)", span="0-0"];
d25 [cluster="System.Collections.Generic.List<T>.Add(T)", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
d1 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", label="arguments == null", span="15-15"];
d119 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", label="value == null", span="128-128"];
d133 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", label="Exit CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", span="124-124"];
d0 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11"];
d4 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", label="Action<Error> onError = e => errors.Add(e)", span="18-18"];
d11 [cluster="string.StartsWith(string, System.StringComparison)", label="Entry string.StartsWith(string, System.StringComparison)", span="0-0"];
d13 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", label="Entry CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", span="124-124"];
d15 [cluster="Unk.ToList", label="Entry Unk.ToList", span=""];
d115 [cluster="CommandLine.Core.Token.Name(string)", label="Entry CommandLine.Core.Token.Name(string)", span="19-19"];
d114 [cluster="char.IsDigit(char)", label="Entry char.IsDigit(char)", span="0-0"];
d116 [cluster="string.Substring(int, int)", label="Entry string.Substring(int, int)", span="0-0"];
d121 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", label="value.Length > 2 && value.StartsWith(''--'', StringComparison.Ordinal)", span="133-133"];
d123 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", label="var equalIndex = text.IndexOf('=')", span="136-136"];
d125 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", label="yield return Token.Name(text);", span="139-139"];
d58 [cluster="lambda expression", label="Exit lambda expression", span="42-42"];
d128 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", label="onError(new BadFormatTokenError(value))", span="144-144"];
d126 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", label="yield break;", span="140-140"];
d124 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", label="equalIndex <= 0", span="137-137"];
d55 [cluster="lambda expression", label="Exit lambda expression", span="42-42"];
d54 [cluster="lambda expression", label="!arg.EqualsOrdinal(''--'')", span="42-42"];
d16 [cluster="Unk.IsName", label="Entry Unk.IsName", span=""];
d17 [cluster="Unk.nameLookup", label="Entry Unk.nameLookup", span=""];
d27 [cluster="lambda expression", label="!unkTokens.Contains(x)", span="30-30"];
d23 [cluster="lambda expression", label="errors.Add(e)", span="18-18"];
d28 [cluster="lambda expression", label="Exit lambda expression", span="30-30"];
d48 [cluster="lambda expression", label="Exit lambda expression", span="39-39"];
d47 [cluster="lambda expression", label="arg.EqualsOrdinal(''--'')", span="39-39"];
d49 [cluster="string.EqualsOrdinal(string)", label="Entry string.EqualsOrdinal(string)", span="34-34"];
d134 [cluster="string.IndexOf(char)", label="Entry string.IndexOf(char)", span="0-0"];
d135 [cluster="CommandLine.BadFormatTokenError.BadFormatTokenError(string)", label="Entry CommandLine.BadFormatTokenError.BadFormatTokenError(string)", span="188-188"];
d136 [cluster="System.Action<T>.Invoke(T)", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
d138 [label=unkTokens, span=""];
d29 [cluster="Unk.Contains", label="Entry Unk.Contains", span=""];
d137 [label=errors, span=""];
d22 [cluster="lambda expression", label="Entry lambda expression", span="18-18"];
d24 [cluster="lambda expression", label="Exit lambda expression", span="18-18"];
n8 -> n1  [color=darkseagreen4, key=1, label="CommandLine.Demo.Program.Options", style=dashed];
n8 -> n5  [color=darkseagreen4, key=1, label="CommandLine.Demo.Program.Options", style=dashed];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=2, style=dotted];
n1 -> n4  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n2 -> n0  [color=blue, key=0, style=bold];
n4 -> n5  [key=0, style=solid];
n5 -> n6  [key=0, style=solid];
n5 -> n7  [key=2, style=dotted];
n6 -> n4  [color=blue, key=0, style=bold];
d67 -> d68  [color=green, key=0, style=solid];
d67 -> d72  [color=green, key=2, style=dotted];
d67 -> d75  [color=green, key=1, label="lambda expression", style=dashed];
d62 -> d67  [color=green, key=1, label="CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>", style=dashed];
d62 -> d63  [key=0, style=solid];
d62 -> d65  [color=darkseagreen4, key=1, label="CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>", style=dashed];
d62 -> d66  [color=darkseagreen4, key=1, label="CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>", style=dashed];
d62 -> d77  [color=darkseagreen4, key=1, label="System.Func<string, CommandLine.Infrastructure.Maybe<string>>", style=dashed];
d62 -> d68  [color=darkseagreen4, key=1, label="CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>", style=dashed];
d65 -> d67  [color=green, key=0, style=solid];
d65 -> d66  [key=0, style=solid];
d65 -> d70  [key=2, style=dotted];
d65 -> d71  [key=2, style=dotted];
d68 -> d69  [key=0, style=solid];
d68 -> d73  [key=2, style=dotted];
d68 -> d74  [key=2, style=dotted];
d68 -> d89  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d75 -> d76  [color=green, key=0, style=solid];
d75 -> d77  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
d75 -> d78  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
d75 -> d79  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
d75 -> d80  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
d76 -> d77  [color=green, key=0, style=solid];
d77 -> d78  [key=0, style=solid];
d77 -> d80  [key=0, style=solid];
d77 -> d82  [key=2, style=dotted];
d77 -> d41  [key=2, style=dotted];
d77 -> d83  [key=2, style=dotted];
d69 -> d62  [color=blue, key=0, style=bold];
d63 -> d65  [key=0, style=solid];
d63 -> d64  [key=0, style=solid];
d66 -> d69  [key=0, style=solid];
d89 -> d90  [key=0, style=solid];
d81 -> d75  [color=blue, key=0, style=bold];
d78 -> d79  [key=0, style=solid];
d78 -> d84  [key=2, style=dotted];
d78 -> d85  [key=2, style=dotted];
d79 -> d81  [key=0, style=solid];
d79 -> d44  [key=2, style=dotted];
d79 -> d20  [key=2, style=dotted];
d79 -> d86  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d80 -> d81  [key=0, style=solid];
d140 -> d77  [color=darkseagreen4, key=1, label="System.Func<string, CommandLine.Infrastructure.Maybe<string>>", style=dashed];
d64 -> d69  [key=0, style=solid];
d64 -> d9  [key=2, style=dotted];
d111 -> d71  [key=2, style=dotted];
d111 -> d112  [key=0, style=solid];
d111 -> d113  [key=2, style=dotted];
d111 -> d12  [key=2, style=dotted];
d110 -> d71  [key=2, style=dotted];
d110 -> d111  [key=0, style=solid];
d110 -> d112  [key=0, style=solid];
d91 -> d89  [color=blue, key=0, style=bold];
d90 -> d91  [key=0, style=solid];
d86 -> d87  [key=0, style=solid];
d34 -> d41  [key=2, style=dotted];
d34 -> d35  [key=0, style=solid];
d34 -> d40  [key=2, style=dotted];
d34 -> d50  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d34 -> d36  [color=darkseagreen4, key=1, label=tokenizerResult, style=dashed];
d37 -> d41  [key=2, style=dotted];
d37 -> d38  [key=0, style=solid];
d107 -> d41  [key=2, style=dotted];
d107 -> d110  [key=0, style=solid];
d107 -> d108  [key=0, style=solid];
d107 -> d118  [key=2, style=dotted];
d14 -> d111  [color=crimson, key=0, style=bold];
d14 -> d107  [color=darkseagreen4, key=1, label="System.Func<string, bool>", style=dashed];
d14 -> d92  [key=0, style=solid];
d14 -> d97  [color=crimson, key=0, style=bold];
d14 -> d98  [color=crimson, key=0, style=bold];
d14 -> d100  [color=crimson, key=0, style=bold];
d14 -> d101  [color=crimson, key=0, style=bold];
d14 -> d103  [color=crimson, key=0, style=bold];
d14 -> d109  [color=crimson, key=0, style=bold];
d14 -> d94  [color=darkseagreen4, key=1, label=string, style=dashed];
d14 -> d95  [color=darkseagreen4, key=1, label=string, style=dashed];
d14 -> d99  [color=darkseagreen4, key=1, label=string, style=dashed];
d95 -> d111  [color=darkseagreen4, key=1, label=text, style=dashed];
d95 -> d110  [color=darkseagreen4, key=1, label=text, style=dashed];
d95 -> d96  [key=0, style=solid];
d95 -> d113  [key=2, style=dotted];
d95 -> d100  [color=darkseagreen4, key=1, label=text, style=dashed];
d95 -> d102  [color=darkseagreen4, key=1, label=text, style=dashed];
d95 -> d105  [color=darkseagreen4, key=1, label=text, style=dashed];
d104 -> d111  [color=darkseagreen4, key=1, label=seen, style=dashed];
d104 -> d110  [color=darkseagreen4, key=1, label=seen, style=dashed];
d104 -> d107  [color=darkseagreen4, key=1, label=seen, style=dashed];
d104 -> d105  [key=0, style=solid];
d104 -> d10  [key=2, style=dotted];
d104 -> d108  [color=darkseagreen4, key=1, label=seen, style=dashed];
d112 -> d14  [color=blue, key=0, style=bold];
d105 -> d110  [key=0, style=solid];
d105 -> d107  [color=darkseagreen4, key=1, label=c, style=dashed];
d105 -> d113  [key=2, style=dotted];
d105 -> d106  [key=0, style=solid];
d105 -> d108  [color=darkseagreen4, key=1, label=c, style=dashed];
d130 -> d85  [key=2, style=dotted];
d130 -> d131  [key=0, style=solid];
d130 -> d132  [color=darkseagreen4, key=1, label=parts, style=dashed];
d35 -> d44  [key=2, style=dotted];
d35 -> d36  [key=0, style=solid];
d35 -> d42  [key=2, style=dotted];
d35 -> d43  [key=2, style=dotted];
d35 -> d53  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d35 -> d56  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d35 -> d60  [color=darkseagreen4, key=1, label=values, style=dashed];
d7 -> d20  [key=2, style=dotted];
d7 -> d7  [color=darkseagreen4, key=1, label=t, style=dashed];
d7 -> d8  [key=0, style=solid];
d7 -> d18  [key=2, style=dotted];
d7 -> d19  [key=2, style=dotted];
d7 -> d21  [key=2, style=dotted];
d7 -> d26  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d60 -> d20  [key=2, style=dotted];
d60 -> d61  [key=0, style=solid];
d88 -> d86  [color=blue, key=0, style=bold];
d87 -> d12  [key=2, style=dotted];
d87 -> d88  [key=0, style=solid];
d30 -> d34  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
d30 -> d37  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
d30 -> d35  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
d30 -> d31  [key=0, style=solid];
d30 -> d33  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
d33 -> d34  [key=0, style=solid];
d33 -> d37  [key=0, style=solid];
d33 -> d39  [key=2, style=dotted];
d33 -> d46  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d50 -> d51  [key=0, style=solid];
d36 -> d38  [key=0, style=solid];
d36 -> d45  [key=2, style=dotted];
d36 -> d59  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d38 -> d30  [color=blue, key=0, style=bold];
d106 -> d107  [key=0, style=solid];
d106 -> d117  [key=2, style=dotted];
d106 -> d109  [color=darkseagreen4, key=1, label=n, style=dashed];
d108 -> d109  [key=0, style=solid];
d108 -> d25  [key=2, style=dotted];
d2 -> d9  [key=2, style=dotted];
d2 -> d8  [key=0, style=solid];
d32 -> d9  [key=2, style=dotted];
d32 -> d38  [key=0, style=solid];
d93 -> d9  [key=2, style=dotted];
d93 -> d112  [key=0, style=solid];
d120 -> d9  [key=2, style=dotted];
d120 -> d133  [key=0, style=solid];
d5 -> d14  [key=2, style=dotted];
d5 -> d12  [key=2, style=dotted];
d5 -> d7  [color=darkseagreen4, key=1, label=tokens, style=dashed];
d5 -> d5  [color=darkseagreen4, key=1, label=arg, style=dashed];
d5 -> d6  [key=0, style=solid];
d5 -> d11  [key=2, style=dotted];
d5 -> d13  [key=2, style=dotted];
d5 -> d15  [key=2, style=dotted];
d92 -> d93  [key=0, style=solid];
d92 -> d94  [key=0, style=solid];
d97 -> d12  [key=2, style=dotted];
d97 -> d98  [key=0, style=solid];
d98 -> d99  [key=0, style=solid];
d100 -> d101  [key=0, style=solid];
d100 -> d115  [key=2, style=dotted];
d101 -> d102  [key=0, style=solid];
d103 -> d104  [key=0, style=solid];
d103 -> d115  [key=2, style=dotted];
d109 -> d105  [key=0, style=solid];
d109 -> d115  [key=2, style=dotted];
d94 -> d95  [key=0, style=solid];
d94 -> d112  [key=0, style=solid];
d99 -> d100  [key=0, style=solid];
d99 -> d102  [key=0, style=solid];
d96 -> d97  [key=0, style=solid];
d96 -> d99  [key=0, style=solid];
d96 -> d114  [key=2, style=dotted];
d102 -> d104  [color=darkseagreen4, key=1, label=first, style=dashed];
d102 -> d103  [key=0, style=solid];
d102 -> d116  [key=2, style=dotted];
d122 -> d113  [key=2, style=dotted];
d122 -> d130  [color=darkseagreen4, key=1, label=text, style=dashed];
d122 -> d123  [key=0, style=solid];
d122 -> d125  [color=darkseagreen4, key=1, label=text, style=dashed];
d57 -> d12  [key=2, style=dotted];
d57 -> d58  [key=0, style=solid];
d132 -> d12  [key=2, style=dotted];
d132 -> d133  [key=0, style=solid];
d129 -> d130  [key=0, style=solid];
d127 -> d130  [key=0, style=solid];
d127 -> d128  [key=0, style=solid];
d131 -> d132  [key=0, style=solid];
d131 -> d115  [key=2, style=dotted];
d53 -> d54  [key=0, style=solid];
d56 -> d57  [key=0, style=solid];
d6 -> d7  [key=0, style=solid];
d6 -> d6  [color=darkseagreen4, key=1, label=t, style=dashed];
d6 -> d16  [key=2, style=dotted];
d6 -> d17  [key=2, style=dotted];
d6 -> d15  [key=2, style=dotted];
d6 -> d27  [color=darkseagreen4, key=1, label=unkTokens, style=dashed];
d3 -> d7  [color=darkseagreen4, key=1, label=errors, style=dashed];
d3 -> d10  [key=2, style=dotted];
d3 -> d4  [key=0, style=solid];
d3 -> d23  [color=darkseagreen4, key=1, label=errors, style=dashed];
d8 -> d0  [color=blue, key=0, style=bold];
d26 -> d27  [key=0, style=solid];
d139 -> d60  [color=darkseagreen4, key=1, label=values, style=dashed];
d59 -> d60  [key=0, style=solid];
d61 -> d59  [color=blue, key=0, style=bold];
d31 -> d33  [key=0, style=solid];
d31 -> d32  [key=0, style=solid];
d46 -> d47  [key=0, style=solid];
d52 -> d50  [color=blue, key=0, style=bold];
d51 -> d52  [key=0, style=solid];
d51 -> d49  [key=2, style=dotted];
d1 -> d2  [key=0, style=solid];
d1 -> d3  [key=0, style=solid];
d119 -> d120  [key=0, style=solid];
d119 -> d121  [key=0, style=solid];
d133 -> d13  [color=blue, key=0, style=bold];
d0 -> d5  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
d0 -> d6  [color=darkseagreen4, key=1, label="System.Func<string, bool>", style=dashed];
d0 -> d1  [key=0, style=solid];
d4 -> d5  [key=0, style=solid];
d4 -> d23  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
d13 -> d122  [color=darkseagreen4, key=1, label=string, style=dashed];
d13 -> d132  [color=crimson, key=0, style=bold];
d13 -> d129  [color=crimson, key=0, style=bold];
d13 -> d131  [color=crimson, key=0, style=bold];
d13 -> d119  [key=0, style=solid];
d13 -> d125  [color=crimson, key=0, style=bold];
d13 -> d126  [color=crimson, key=0, style=bold];
d13 -> d121  [color=darkseagreen4, key=1, label=string, style=dashed];
d13 -> d128  [color=darkseagreen4, key=1, label=string, style=dashed];
d121 -> d122  [key=0, style=solid];
d121 -> d133  [key=0, style=solid];
d121 -> d11  [key=2, style=dotted];
d123 -> d127  [color=darkseagreen4, key=1, label=equalIndex, style=dashed];
d123 -> d124  [key=0, style=solid];
d123 -> d134  [key=2, style=dotted];
d125 -> d115  [key=2, style=dotted];
d125 -> d126  [key=0, style=solid];
d58 -> d56  [color=blue, key=0, style=bold];
d128 -> d129  [key=0, style=solid];
d128 -> d135  [key=2, style=dotted];
d128 -> d136  [key=2, style=dotted];
d126 -> d127  [key=0, style=solid];
d124 -> d127  [key=0, style=solid];
d124 -> d125  [key=0, style=solid];
d55 -> d53  [color=blue, key=0, style=bold];
d54 -> d55  [key=0, style=solid];
d54 -> d49  [key=2, style=dotted];
d27 -> d28  [key=0, style=solid];
d27 -> d29  [key=2, style=dotted];
d23 -> d25  [key=2, style=dotted];
d23 -> d24  [key=0, style=solid];
d28 -> d26  [color=blue, key=0, style=bold];
d48 -> d46  [color=blue, key=0, style=bold];
d47 -> d48  [key=0, style=solid];
d47 -> d49  [key=2, style=dotted];
d138 -> d27  [color=darkseagreen4, key=1, label=unkTokens, style=dashed];
d137 -> d23  [color=darkseagreen4, key=1, label=errors, style=dashed];
d22 -> d23  [key=0, style=solid];
d24 -> d22  [color=blue, key=0, style=bold];
}
