digraph  {
n122 [label="CommandLine.CommandLineParser", span=""];
n0 [label="Entry CommandLine.CommandLineParser.CommandLineParser()", span="46-46", cluster="CommandLine.CommandLineParser.CommandLineParser()"];
n1 [label="_settings = new CommandLineParserSettings()", span="48-48", cluster="CommandLine.CommandLineParser.CommandLineParser()"];
n2 [label="Exit CommandLine.CommandLineParser.CommandLineParser()", span="46-46", cluster="CommandLine.CommandLineParser.CommandLineParser()"];
n3 [label="Entry CommandLine.CommandLineParserSettings.CommandLineParserSettings()", span="52-52", cluster="CommandLine.CommandLineParserSettings.CommandLineParserSettings()"];
n4 [label="Entry CommandLine.CommandLineParser.CommandLineParser(bool)", span="52-52", cluster="CommandLine.CommandLineParser.CommandLineParser(bool)"];
n5 [label="_settings = new CommandLineParserSettings(false, false, Console.Error)", span="54-54", cluster="CommandLine.CommandLineParser.CommandLineParser(bool)"];
n6 [label="Exit CommandLine.CommandLineParser.CommandLineParser(bool)", span="52-52", cluster="CommandLine.CommandLineParser.CommandLineParser(bool)"];
n7 [label="Entry CommandLine.CommandLineParserSettings.CommandLineParserSettings(bool, bool, System.IO.TextWriter)", span="112-112", cluster="CommandLine.CommandLineParserSettings.CommandLineParserSettings(bool, bool, System.IO.TextWriter)"];
n8 [label="Entry CommandLine.CommandLineParser.CommandLineParser(CommandLine.CommandLineParserSettings)", span="63-63", cluster="CommandLine.CommandLineParser.CommandLineParser(CommandLine.CommandLineParserSettings)"];
n9 [label="Assumes.NotNull(settings, ''settings'', SR.ArgumentNullException_CommandLineParserSettingsInstanceCannotBeNull)", span="65-65", cluster="CommandLine.CommandLineParser.CommandLineParser(CommandLine.CommandLineParserSettings)"];
n10 [label="_settings = settings", span="66-66", cluster="CommandLine.CommandLineParser.CommandLineParser(CommandLine.CommandLineParserSettings)"];
n12 [label="Entry CommandLine.Internal.Assumes.NotNull<T>(T, string, string)", span="52-52", cluster="CommandLine.Internal.Assumes.NotNull<T>(T, string, string)"];
n11 [label="Exit CommandLine.CommandLineParser.CommandLineParser(CommandLine.CommandLineParserSettings)", span="63-63", cluster="CommandLine.CommandLineParser.CommandLineParser(CommandLine.CommandLineParserSettings)"];
n13 [label="Entry CommandLine.CommandLineParser.ParseArguments(string[], object)", span="87-87", cluster="CommandLine.CommandLineParser.ParseArguments(string[], object)"];
n14 [label="Assumes.NotNull(args, ''args'', SR.ArgumentNullException_ArgsStringArrayCannotBeNull)", span="89-89", cluster="CommandLine.CommandLineParser.ParseArguments(string[], object)"];
n15 [label="Assumes.NotNull(options, ''options'', SR.ArgumentNullException_OptionsInstanceCannotBeNull)", span="90-90", cluster="CommandLine.CommandLineParser.ParseArguments(string[], object)"];
n16 [label="return DoParseArguments(args, options);", span="92-92", cluster="CommandLine.CommandLineParser.ParseArguments(string[], object)"];
n17 [label="Exit CommandLine.CommandLineParser.ParseArguments(string[], object)", span="87-87", cluster="CommandLine.CommandLineParser.ParseArguments(string[], object)"];
n18 [label="Entry CommandLine.CommandLineParser.DoParseArguments(string[], object)", span="117-117", cluster="CommandLine.CommandLineParser.DoParseArguments(string[], object)"];
n19 [label="Entry CommandLine.CommandLineParser.ParseArguments(string[], object, System.IO.TextWriter)", span="108-108", cluster="CommandLine.CommandLineParser.ParseArguments(string[], object, System.IO.TextWriter)"];
n20 [label="Assumes.NotNull(args, ''args'', SR.ArgumentNullException_ArgsStringArrayCannotBeNull)", span="110-110", cluster="CommandLine.CommandLineParser.ParseArguments(string[], object, System.IO.TextWriter)"];
n21 [label="Assumes.NotNull(options, ''options'', SR.ArgumentNullException_OptionsInstanceCannotBeNull)", span="111-111", cluster="CommandLine.CommandLineParser.ParseArguments(string[], object, System.IO.TextWriter)"];
n22 [label="_settings.HelpWriter = helpWriter", span="113-113", cluster="CommandLine.CommandLineParser.ParseArguments(string[], object, System.IO.TextWriter)"];
n23 [label="return DoParseArguments(args, options);", span="114-114", cluster="CommandLine.CommandLineParser.ParseArguments(string[], object, System.IO.TextWriter)"];
n24 [label="Exit CommandLine.CommandLineParser.ParseArguments(string[], object, System.IO.TextWriter)", span="108-108", cluster="CommandLine.CommandLineParser.ParseArguments(string[], object, System.IO.TextWriter)"];
n25 [label="var pair = ReflectionUtil.RetrieveMethod<HelpOptionAttribute>(options)", span="119-119", cluster="CommandLine.CommandLineParser.DoParseArguments(string[], object)"];
n27 [label="_args = args", span="123-123", cluster="CommandLine.CommandLineParser.DoParseArguments(string[], object)"];
n29 [label="ParseHelp(args, pair.Right) || !DoParseArgumentsUsingVerbs(args, options)", span="128-128", cluster="CommandLine.CommandLineParser.DoParseArguments(string[], object)"];
n31 [label="HelpOptionAttribute.InvokeMethod(options, pair, out helpText)", span="131-131", cluster="CommandLine.CommandLineParser.DoParseArguments(string[], object)"];
n35 [label="return DoParseArgumentsUsingVerbs(args, options);", span="138-138", cluster="CommandLine.CommandLineParser.DoParseArguments(string[], object)"];
n26 [label="var helpWriter = _settings.HelpWriter", span="120-120", cluster="CommandLine.CommandLineParser.DoParseArguments(string[], object)"];
n37 [label="Entry CommandLine.Internal.ReflectionUtil.RetrieveMethod<TAttribute>(object)", span="70-70", cluster="CommandLine.Internal.ReflectionUtil.RetrieveMethod<TAttribute>(object)"];
n28 [label="pair != null && helpWriter != null", span="125-125", cluster="CommandLine.CommandLineParser.DoParseArguments(string[], object)"];
n32 [label="helpWriter.Write(helpText)", span="132-132", cluster="CommandLine.CommandLineParser.DoParseArguments(string[], object)"];
n30 [label="string helpText", span="130-130", cluster="CommandLine.CommandLineParser.DoParseArguments(string[], object)"];
n34 [label="return true;", span="135-135", cluster="CommandLine.CommandLineParser.DoParseArguments(string[], object)"];
n38 [label="Entry CommandLine.CommandLineParser.ParseHelp(string[], CommandLine.HelpOptionAttribute)", span="183-183", cluster="CommandLine.CommandLineParser.ParseHelp(string[], CommandLine.HelpOptionAttribute)"];
n39 [label="Entry CommandLine.CommandLineParser.DoParseArgumentsUsingVerbs(string[], object)", span="79-79", cluster="CommandLine.CommandLineParser.DoParseArgumentsUsingVerbs(string[], object)"];
n40 [label="Entry CommandLine.HelpOptionAttribute.InvokeMethod(object, CommandLine.Internal.Pair<System.Reflection.MethodInfo, CommandLine.HelpOptionAttribute>, out string)", span="103-103", cluster="CommandLine.HelpOptionAttribute.InvokeMethod(object, CommandLine.Internal.Pair<System.Reflection.MethodInfo, CommandLine.HelpOptionAttribute>, out string)"];
n33 [label="return false;", span="133-133", cluster="CommandLine.CommandLineParser.DoParseArguments(string[], object)"];
n41 [label="Entry System.IO.TextWriter.Write(string)", span="0-0", cluster="System.IO.TextWriter.Write(string)"];
n36 [label="Exit CommandLine.CommandLineParser.DoParseArguments(string[], object)", span="117-117", cluster="CommandLine.CommandLineParser.DoParseArguments(string[], object)"];
n42 [label="Entry CommandLine.CommandLineParser.DoParseArgumentsCore(string[], object)", span="141-141", cluster="CommandLine.CommandLineParser.DoParseArgumentsCore(string[], object)"];
n43 [label="bool hadError = false", span="143-143", cluster="CommandLine.CommandLineParser.DoParseArgumentsCore(string[], object)"];
n44 [label="var optionMap = OptionInfo.CreateMap(options, _settings)", span="144-144", cluster="CommandLine.CommandLineParser.DoParseArgumentsCore(string[], object)"];
n46 [label="var target = new TargetWrapper(options)", span="146-146", cluster="CommandLine.CommandLineParser.DoParseArgumentsCore(string[], object)"];
n47 [label="IArgumentEnumerator arguments = new StringArrayEnumerator(args)", span="148-148", cluster="CommandLine.CommandLineParser.DoParseArgumentsCore(string[], object)"];
n53 [label="Internal.ParserState result = parser.Parse(arguments, optionMap, options)", span="157-157", cluster="CommandLine.CommandLineParser.DoParseArgumentsCore(string[], object)"];
n55 [label="SetParserStateIfNeeded(options, parser.PostParsingState)", span="160-160", cluster="CommandLine.CommandLineParser.DoParseArgumentsCore(string[], object)"];
n62 [label="hadError |= !optionMap.EnforceRules()", span="178-178", cluster="CommandLine.CommandLineParser.DoParseArgumentsCore(string[], object)"];
n45 [label="optionMap.SetDefaults()", span="145-145", cluster="CommandLine.CommandLineParser.DoParseArgumentsCore(string[], object)"];
n65 [label="Entry CommandLine.Internal.OptionInfo.CreateMap(object, CommandLine.CommandLineParserSettings)", span="74-74", cluster="CommandLine.Internal.OptionInfo.CreateMap(object, CommandLine.CommandLineParserSettings)"];
n66 [label="Entry CommandLine.Internal.OptionMap.SetDefaults()", span="120-120", cluster="CommandLine.Internal.OptionMap.SetDefaults()"];
n67 [label="Entry CommandLine.Internal.TargetWrapper.TargetWrapper(object)", span="43-43", cluster="CommandLine.Internal.TargetWrapper.TargetWrapper(object)"];
n59 [label="target.IsValueListDefined", span="168-168", cluster="CommandLine.CommandLineParser.DoParseArgumentsCore(string[], object)"];
n60 [label="!target.AddValueItemIfAllowed(argument)", span="170-170", cluster="CommandLine.CommandLineParser.DoParseArgumentsCore(string[], object)"];
n48 [label="arguments.MoveNext()", span="149-149", cluster="CommandLine.CommandLineParser.DoParseArgumentsCore(string[], object)"];
n68 [label="Entry CommandLine.Internal.StringArrayEnumerator.StringArrayEnumerator(string[])", span="47-47", cluster="CommandLine.Internal.StringArrayEnumerator.StringArrayEnumerator(string[])"];
n49 [label="string argument = arguments.Current", span="151-151", cluster="CommandLine.CommandLineParser.DoParseArgumentsCore(string[], object)"];
n58 [label="arguments.MoveNext()", span="166-166", cluster="CommandLine.CommandLineParser.DoParseArgumentsCore(string[], object)"];
n69 [label="Entry CommandLine.Internal.IArgumentEnumerator.MoveNext()", span="48-48", cluster="CommandLine.Internal.IArgumentEnumerator.MoveNext()"];
n50 [label="!string.IsNullOrEmpty(argument)", span="152-152", cluster="CommandLine.CommandLineParser.DoParseArgumentsCore(string[], object)"];
n51 [label="ArgumentParser parser = ArgumentParser.Create(argument, _settings.IgnoreUnknownArguments)", span="154-154", cluster="CommandLine.CommandLineParser.DoParseArgumentsCore(string[], object)"];
n70 [label="Entry string.IsNullOrEmpty(string)", span="0-0", cluster="string.IsNullOrEmpty(string)"];
n52 [label="parser != null", span="155-155", cluster="CommandLine.CommandLineParser.DoParseArgumentsCore(string[], object)"];
n71 [label="Entry CommandLine.Internal.ArgumentParser.Create(string, bool)", span="58-58", cluster="CommandLine.Internal.ArgumentParser.Create(string, bool)"];
n54 [label="(result & Internal.ParserState.Failure) == Internal.ParserState.Failure", span="158-158", cluster="CommandLine.CommandLineParser.DoParseArgumentsCore(string[], object)"];
n72 [label="Entry CommandLine.Internal.ArgumentParser.Parse(CommandLine.Internal.IArgumentEnumerator, CommandLine.Internal.OptionMap, object)", span="49-49", cluster="CommandLine.Internal.ArgumentParser.Parse(CommandLine.Internal.IArgumentEnumerator, CommandLine.Internal.OptionMap, object)"];
n57 [label="(result & Internal.ParserState.MoveOnNextElement) == Internal.ParserState.MoveOnNextElement", span="165-165", cluster="CommandLine.CommandLineParser.DoParseArgumentsCore(string[], object)"];
n56 [label="hadError = true", span="161-161", cluster="CommandLine.CommandLineParser.DoParseArgumentsCore(string[], object)"];
n73 [label="Entry CommandLine.CommandLineParser.SetParserStateIfNeeded(object, System.Collections.Generic.IEnumerable<CommandLine.ParsingError>)", span="209-209", cluster="CommandLine.CommandLineParser.SetParserStateIfNeeded(object, System.Collections.Generic.IEnumerable<CommandLine.ParsingError>)"];
n61 [label="hadError = true", span="172-172", cluster="CommandLine.CommandLineParser.DoParseArgumentsCore(string[], object)"];
n74 [label="Entry CommandLine.Internal.TargetWrapper.AddValueItemIfAllowed(string)", span="55-55", cluster="CommandLine.Internal.TargetWrapper.AddValueItemIfAllowed(string)"];
n63 [label="return !hadError;", span="180-180", cluster="CommandLine.CommandLineParser.DoParseArgumentsCore(string[], object)"];
n75 [label="Entry CommandLine.Internal.OptionMap.EnforceRules()", span="115-115", cluster="CommandLine.Internal.OptionMap.EnforceRules()"];
n64 [label="Exit CommandLine.CommandLineParser.DoParseArgumentsCore(string[], object)", span="141-141", cluster="CommandLine.CommandLineParser.DoParseArgumentsCore(string[], object)"];
n76 [label="bool caseSensitive = _settings.CaseSensitive", span="185-185", cluster="CommandLine.CommandLineParser.ParseHelp(string[], CommandLine.HelpOptionAttribute)"];
n78 [label="i < args.Length", span="187-187", cluster="CommandLine.CommandLineParser.ParseHelp(string[], CommandLine.HelpOptionAttribute)"];
n79 [label="helpOption.ShortName != null", span="189-189", cluster="CommandLine.CommandLineParser.ParseHelp(string[], CommandLine.HelpOptionAttribute)"];
n80 [label="ArgumentParser.CompareShort(args[i], helpOption.ShortName, caseSensitive)", span="191-191", cluster="CommandLine.CommandLineParser.ParseHelp(string[], CommandLine.HelpOptionAttribute)"];
n82 [label="!string.IsNullOrEmpty(helpOption.LongName)", span="197-197", cluster="CommandLine.CommandLineParser.ParseHelp(string[], CommandLine.HelpOptionAttribute)"];
n83 [label="ArgumentParser.CompareLong(args[i], helpOption.LongName, caseSensitive)", span="199-199", cluster="CommandLine.CommandLineParser.ParseHelp(string[], CommandLine.HelpOptionAttribute)"];
n77 [label="int i = 0", span="187-187", cluster="CommandLine.CommandLineParser.ParseHelp(string[], CommandLine.HelpOptionAttribute)"];
n85 [label="i++", span="187-187", cluster="CommandLine.CommandLineParser.ParseHelp(string[], CommandLine.HelpOptionAttribute)"];
n86 [label="return false;", span="206-206", cluster="CommandLine.CommandLineParser.ParseHelp(string[], CommandLine.HelpOptionAttribute)"];
n81 [label="return true;", span="193-193", cluster="CommandLine.CommandLineParser.ParseHelp(string[], CommandLine.HelpOptionAttribute)"];
n88 [label="Entry CommandLine.Internal.ArgumentParser.CompareShort(string, char?, bool)", span="100-100", cluster="CommandLine.Internal.ArgumentParser.CompareShort(string, char?, bool)"];
n84 [label="return true;", span="201-201", cluster="CommandLine.CommandLineParser.ParseHelp(string[], CommandLine.HelpOptionAttribute)"];
n89 [label="Entry CommandLine.Internal.ArgumentParser.CompareLong(string, string, bool)", span="108-108", cluster="CommandLine.Internal.ArgumentParser.CompareLong(string, string, bool)"];
n87 [label="Exit CommandLine.CommandLineParser.ParseHelp(string[], CommandLine.HelpOptionAttribute)", span="183-183", cluster="CommandLine.CommandLineParser.ParseHelp(string[], CommandLine.HelpOptionAttribute)"];
n90 [label="var list = ReflectionUtil.RetrievePropertyList<ParserStateAttribute>(options)", span="211-211", cluster="CommandLine.CommandLineParser.SetParserStateIfNeeded(object, System.Collections.Generic.IEnumerable<CommandLine.ParsingError>)"];
n94 [label="property.GetValue(options, null) == null", span="218-218", cluster="CommandLine.CommandLineParser.SetParserStateIfNeeded(object, System.Collections.Generic.IEnumerable<CommandLine.ParsingError>)"];
n95 [label="property.SetValue(options, new CommandLine.ParserState(), null)", span="221-221", cluster="CommandLine.CommandLineParser.SetParserStateIfNeeded(object, System.Collections.Generic.IEnumerable<CommandLine.ParsingError>)"];
n96 [label="var parserState = (IParserState) property.GetValue(options, null)", span="223-223", cluster="CommandLine.CommandLineParser.SetParserStateIfNeeded(object, System.Collections.Generic.IEnumerable<CommandLine.ParsingError>)"];
n97 [label=errors, span="224-224", cluster="CommandLine.CommandLineParser.SetParserStateIfNeeded(object, System.Collections.Generic.IEnumerable<CommandLine.ParsingError>)"];
n91 [label="list.Count == 0", span="212-212", cluster="CommandLine.CommandLineParser.SetParserStateIfNeeded(object, System.Collections.Generic.IEnumerable<CommandLine.ParsingError>)"];
n100 [label="Entry CommandLine.Internal.ReflectionUtil.RetrievePropertyList<TAttribute>(object)", span="43-43", cluster="CommandLine.Internal.ReflectionUtil.RetrievePropertyList<TAttribute>(object)"];
n93 [label="var property = list[0].Left", span="216-216", cluster="CommandLine.CommandLineParser.SetParserStateIfNeeded(object, System.Collections.Generic.IEnumerable<CommandLine.ParsingError>)"];
n92 [label="return;", span="214-214", cluster="CommandLine.CommandLineParser.SetParserStateIfNeeded(object, System.Collections.Generic.IEnumerable<CommandLine.ParsingError>)"];
n101 [label="Entry System.Reflection.PropertyInfo.GetValue(object, object[])", span="0-0", cluster="System.Reflection.PropertyInfo.GetValue(object, object[])"];
n102 [label="Entry CommandLine.ParserState.ParserState()", span="47-47", cluster="CommandLine.ParserState.ParserState()"];
n103 [label="Entry System.Reflection.PropertyInfo.SetValue(object, object, object[])", span="0-0", cluster="System.Reflection.PropertyInfo.SetValue(object, object, object[])"];
n98 [label="parserState.Errors.Add(error)", span="226-226", cluster="CommandLine.CommandLineParser.SetParserStateIfNeeded(object, System.Collections.Generic.IEnumerable<CommandLine.ParsingError>)"];
n99 [label="Exit CommandLine.CommandLineParser.SetParserStateIfNeeded(object, System.Collections.Generic.IEnumerable<CommandLine.ParsingError>)", span="209-209", cluster="CommandLine.CommandLineParser.SetParserStateIfNeeded(object, System.Collections.Generic.IEnumerable<CommandLine.ParsingError>)"];
n104 [label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.ICollection<T>.Add(T)"];
n105 [label="Entry CommandLine.CommandLineParser.Dispose()", span="230-230", cluster="CommandLine.CommandLineParser.Dispose()"];
n106 [label="Dispose(true)", span="232-232", cluster="CommandLine.CommandLineParser.Dispose()"];
n107 [label="GC.SuppressFinalize(this)", span="234-234", cluster="CommandLine.CommandLineParser.Dispose()"];
n109 [label="Entry CommandLine.CommandLineParser.Dispose(bool)", span="237-237", cluster="CommandLine.CommandLineParser.Dispose(bool)"];
n108 [label="Exit CommandLine.CommandLineParser.Dispose()", span="230-230", cluster="CommandLine.CommandLineParser.Dispose()"];
n110 [label="Entry System.GC.SuppressFinalize(object)", span="0-0", cluster="System.GC.SuppressFinalize(object)"];
n111 [label=_disposed, span="239-239", cluster="CommandLine.CommandLineParser.Dispose(bool)"];
n113 [label=disposing, span="243-243", cluster="CommandLine.CommandLineParser.Dispose(bool)"];
n112 [label="return;", span="241-241", cluster="CommandLine.CommandLineParser.Dispose(bool)"];
n114 [label="_settings != null", span="245-245", cluster="CommandLine.CommandLineParser.Dispose(bool)"];
n117 [label="Exit CommandLine.CommandLineParser.Dispose(bool)", span="237-237", cluster="CommandLine.CommandLineParser.Dispose(bool)"];
n115 [label="_settings.Dispose()", span="247-247", cluster="CommandLine.CommandLineParser.Dispose(bool)"];
n116 [label="_disposed = true", span="249-249", cluster="CommandLine.CommandLineParser.Dispose(bool)"];
n118 [label="Entry CommandLine.CommandLineParserSettings.Dispose()", span="167-167", cluster="CommandLine.CommandLineParserSettings.Dispose()"];
n119 [label="Entry CommandLine.CommandLineParser.~CommandLineParser()", span="253-253", cluster="CommandLine.CommandLineParser.~CommandLineParser()"];
n120 [label="Dispose(false)", span="255-255", cluster="CommandLine.CommandLineParser.~CommandLineParser()"];
n121 [label="Exit CommandLine.CommandLineParser.~CommandLineParser()", span="253-253", cluster="CommandLine.CommandLineParser.~CommandLineParser()"];
m0_41 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="111-111", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="InstanceBuilderTests.cs"];
m0_42 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="116-120", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="InstanceBuilderTests.cs"];
m0_43 [label="Assert.True(expected.SequenceEqual(((Parsed<FakeOptions>)result).Value.IntSequence))", span="123-123", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="InstanceBuilderTests.cs"];
m0_44 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="111-111", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="InstanceBuilderTests.cs"];
m0_441 [label="Entry CommandLine.Tests.Fakes.FakeOptionWithTwoRequired.FakeOptionWithTwoRequired()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionWithTwoRequired.FakeOptionWithTwoRequired()", file="InstanceBuilderTests.cs"];
m0_350 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", span="835-835", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="InstanceBuilderTests.cs"];
m0_351 [label="Action test = () => InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinMaxZero>>(() => new FakeOptionsWithMinMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="838-842", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="InstanceBuilderTests.cs"];
m0_352 [label="Assert.Throws<ApplicationException>(test)", span="845-845", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="InstanceBuilderTests.cs"];
m0_353 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", span="835-835", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="InstanceBuilderTests.cs"];
m0_173 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="35-35", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilderTests.cs"];
m0_331 [label="Entry Unk.>", span="", cluster="Unk.>", file="InstanceBuilderTests.cs"];
m0_63 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", file="InstanceBuilderTests.cs"];
m0_152 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="383-383", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="InstanceBuilderTests.cs"];
m0_153 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndSeparator>>(() => new FakeOptionsWithSequenceAndSeparator()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="388-392", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="InstanceBuilderTests.cs"];
m0_154 [label="expected.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithSequenceAndSeparator>)result).Value.LongSequence)", span="395-395", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="InstanceBuilderTests.cs"];
m0_155 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="383-383", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="InstanceBuilderTests.cs"];
m0_55 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", file="InstanceBuilderTests.cs"];
m0_259 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="636-636", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="InstanceBuilderTests.cs"];
m0_260 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="641-645", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="InstanceBuilderTests.cs"];
m0_261 [label="Assert.True(expected.Equals(((Parsed<FakeOptions>)result).Value.StringValue))", span="648-648", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="InstanceBuilderTests.cs"];
m0_262 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="636-636", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="InstanceBuilderTests.cs"];
m0_327 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", span="807-807", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="InstanceBuilderTests.cs"];
m0_328 [label="Action test = () => InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinZero>>(() => new FakeOptionsWithMinZero()),\r\n                new string[] {},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="810-814", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="InstanceBuilderTests.cs"];
m0_329 [label="Assert.Throws<ApplicationException>(test)", span="817-817", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="InstanceBuilderTests.cs"];
m0_330 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", span="807-807", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="InstanceBuilderTests.cs"];
m0_300 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="740-740", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="InstanceBuilderTests.cs"];
m0_301 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNullables>>(() => new FakeOptionsWithNullables()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="745-749", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="InstanceBuilderTests.cs"];
m0_302 [label="expected.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithNullables>)result).Value.NullableLong)", span="752-752", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="InstanceBuilderTests.cs"];
m0_303 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="740-740", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="InstanceBuilderTests.cs"];
m0_79 [label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="335-335", cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs"];
m0_167 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="426-426", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs"];
m0_168 [label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="429-435", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs"];
m0_169 [label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="436-436", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs"];
m0_171 [label="expectedResult.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithValues>)result).Value)", span="449-449", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs"];
m0_170 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithValues>>(() => new FakeOptionsWithValues()),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="439-446", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs"];
m0_172 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="426-426", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs"];
m0_251 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="615-615", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_252 [label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="618-618", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_253 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="621-625", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_254 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptions>)result).Errors))", span="628-628", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_255 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="615-615", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_387 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", span="892-892", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", file="InstanceBuilderTests.cs"];
m0_388 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeInterfaceOptions>>(() => new FakeInterfaceOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="895-899", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", file="InstanceBuilderTests.cs"];
m0_389 [label="expected.ShouldBeEquivalentTo(((Parsed<FakeInterfaceOptions>)result).Value.InputFile)", span="902-902", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", file="InstanceBuilderTests.cs"];
m0_390 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", span="892-892", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", file="InstanceBuilderTests.cs"];
m0_109 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="11-11", cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", file="InstanceBuilderTests.cs"];
m0_204 [label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", file="InstanceBuilderTests.cs"];
m0_74 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="193-193", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_75 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="196-196", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_76 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraintAsValue>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="199-203", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_77 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionsWithSequenceAndOnlyMinConstraintAsValue>)result).Errors))", span="206-206", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_78 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="193-193", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_239 [label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="280-280", cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", file="InstanceBuilderTests.cs"];
m0_92 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="231-231", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_93 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="234-234", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_94 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()),\r\n                new[] { ''one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="237-241", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_95 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue>)result).Errors))", span="244-244", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_96 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="231-231", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_184 [label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="13-13", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="InstanceBuilderTests.cs"];
m0_449 [label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116", cluster="CSharpx.Maybe.Nothing<T>()", file="InstanceBuilderTests.cs"];
m0_307 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="760-760", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="InstanceBuilderTests.cs"];
m0_308 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithFSharpOption>>(() => new FakeOptionsWithFSharpOption()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="765-769", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="InstanceBuilderTests.cs"];
m0_310 [label="expectedValue.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithFSharpOption>)result).Value.FileName.Value)", span="774-774", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="InstanceBuilderTests.cs"];
m0_311 [label="expectedSome.ShouldBeEquivalentTo(FSharpOption<string>.get_IsSome(((Parsed<FakeOptionsWithFSharpOption>)result).Value.FileName))", span="776-776", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="InstanceBuilderTests.cs"];
m0_309 [label="((Parsed<FakeOptionsWithFSharpOption>)result).Value.FileName != null", span="772-772", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="InstanceBuilderTests.cs"];
m0_312 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="760-760", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="InstanceBuilderTests.cs"];
m0_291 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", file="InstanceBuilderTests.cs"];
m0_299 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", file="InstanceBuilderTests.cs"];
m0_432 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", span="997-997", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", file="InstanceBuilderTests.cs"];
m0_433 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithTwoRequired>>(() => new FakeOptionWithTwoRequired()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="1000-1004", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", file="InstanceBuilderTests.cs"];
m0_435 [label="errors.OfType<MissingRequiredOptionError>().Should().HaveCount(x => x == expected)", span="1008-1008", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", file="InstanceBuilderTests.cs"];
m0_434 [label="var errors = ((NotParsed<FakeOptionWithTwoRequired>)result).Errors", span="1007-1007", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", file="InstanceBuilderTests.cs"];
m0_436 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", span="997-997", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", file="InstanceBuilderTests.cs"];
m0_6 [label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", file="InstanceBuilderTests.cs"];
m0_243 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="596-596", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_244 [label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="599-599", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_245 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="602-606", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_246 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptions>)result).Errors))", span="609-609", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_247 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="596-596", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_110 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="274-274", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_111 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="277-277", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_112 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''3'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="280-284", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_113 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionsWithEnum>)result).Errors))", span="287-287", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_114 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="274-274", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_8 [label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="368-368", cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="InstanceBuilderTests.cs"];
m0_373 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithNamedAndEmptySets.FakeOptionsWithNamedAndEmptySets()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithNamedAndEmptySets.FakeOptionsWithNamedAndEmptySets()", file="InstanceBuilderTests.cs"];
m0_105 [label="Entry Unk.ShouldBeEquivalentTo", span="", cluster="Unk.ShouldBeEquivalentTo", file="InstanceBuilderTests.cs"];
m0_416 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="954-954", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="InstanceBuilderTests.cs"];
m0_417 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithScalarValueAndSequenceStringAdjacent>>(() => new FakeOptionsWithScalarValueAndSequenceStringAdjacent()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="959-963", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="InstanceBuilderTests.cs"];
m0_418 [label="expected.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithScalarValueAndSequenceStringAdjacent>)result).Value)", span="966-966", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="InstanceBuilderTests.cs"];
m0_419 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="954-954", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="InstanceBuilderTests.cs"];
m0_83 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", file="InstanceBuilderTests.cs"];
m0_144 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="361-361", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="InstanceBuilderTests.cs"];
m0_145 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceWithoutRange>>(() => new FakeOptionsWithSequenceWithoutRange()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="366-370", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="InstanceBuilderTests.cs"];
m0_146 [label="expected.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithSequenceWithoutRange>)result).Value.LongSequence)", span="373-373", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="InstanceBuilderTests.cs"];
m0_147 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="361-361", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="InstanceBuilderTests.cs"];
m0_56 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="156-156", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="InstanceBuilderTests.cs"];
m0_57 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraint()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="161-165", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="InstanceBuilderTests.cs"];
m0_58 [label="Assert.True(expected.SequenceEqual(((Parsed<FakeOptionsWithSequenceAndOnlyMaxConstraint>)result).Value.StringSequence))", span="168-168", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="InstanceBuilderTests.cs"];
m0_59 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="156-156", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="InstanceBuilderTests.cs"];
m0_361 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", span="854-854", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", file="InstanceBuilderTests.cs"];
m0_362 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNamedAndEmptySets>>(() => new FakeOptionsWithNamedAndEmptySets()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="857-861", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", file="InstanceBuilderTests.cs"];
m0_363 [label="type == ParserResultType.NotParsed", span="864-864", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", file="InstanceBuilderTests.cs"];
m0_364 [label="((NotParsed<FakeOptionsWithNamedAndEmptySets>)result).Errors.Should().HaveCount(x => x == expected)", span="866-866", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", file="InstanceBuilderTests.cs"];
m0_365 [label="type == ParserResultType.Parsed", span="868-868", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", file="InstanceBuilderTests.cs"];
m0_366 [label="result.Should().BeOfType<Parsed<FakeOptionsWithNamedAndEmptySets>>()", span="870-870", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", file="InstanceBuilderTests.cs"];
m0_367 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", span="854-854", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", file="InstanceBuilderTests.cs"];
m0_32 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="89-89", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="InstanceBuilderTests.cs"];
m0_33 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequence>>(() => new FakeOptionsWithSequence()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="94-98", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="InstanceBuilderTests.cs"];
m0_34 [label="Assert.True(expected.SequenceEqual(((Parsed<FakeOptionsWithSequence>)result).Value.IntSequence))", span="101-101", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="InstanceBuilderTests.cs"];
m0_35 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="89-89", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="InstanceBuilderTests.cs"];
m0_442 [label="Entry lambda expression", span="1008-1008", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_14 [label=fakeOptions, span="27-27", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_13 [label="Entry lambda expression", span="27-27", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_15 [label="Exit lambda expression", span="27-27", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_21 [label="Entry lambda expression", span="48-48", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_22 [label="new FakeOptions()", span="48-48", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_23 [label="Exit lambda expression", span="48-48", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_28 [label="Entry lambda expression", span="71-71", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_29 [label="new FakeOptionsWithDouble()", span="71-71", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_30 [label="Exit lambda expression", span="71-71", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_37 [label="Entry lambda expression", span="95-95", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_38 [label="new FakeOptionsWithSequence()", span="95-95", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_39 [label="Exit lambda expression", span="95-95", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_45 [label="Entry lambda expression", span="117-117", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_46 [label="new FakeOptions()", span="117-117", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_47 [label="Exit lambda expression", span="117-117", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_52 [label="Entry lambda expression", span="140-140", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_53 [label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="140-140", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_54 [label="Exit lambda expression", span="140-140", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_60 [label="Entry lambda expression", span="162-162", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_61 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="162-162", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_62 [label="Exit lambda expression", span="162-162", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_71 [label="Entry lambda expression", span="181-181", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_72 [label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="181-181", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_73 [label="Exit lambda expression", span="181-181", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_80 [label="Entry lambda expression", span="200-200", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_81 [label="new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="200-200", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_82 [label="Exit lambda expression", span="200-200", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_89 [label="Entry lambda expression", span="219-219", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_90 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="219-219", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_91 [label="Exit lambda expression", span="219-219", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_97 [label="Entry lambda expression", span="238-238", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_98 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="238-238", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_99 [label="Exit lambda expression", span="238-238", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_106 [label="Entry lambda expression", span="262-262", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_107 [label="new FakeOptionsWithEnum()", span="262-262", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_108 [label="Exit lambda expression", span="262-262", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_116 [label="Entry lambda expression", span="281-281", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_117 [label="new FakeOptionsWithEnum()", span="281-281", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_118 [label="Exit lambda expression", span="281-281", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_124 [label="Entry lambda expression", span="300-300", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_125 [label="new FakeOptionsWithEnum()", span="300-300", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_126 [label="Exit lambda expression", span="300-300", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_132 [label="Entry lambda expression", span="319-319", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_133 [label="new FakeOptionsWithEnum()", span="319-319", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_134 [label="Exit lambda expression", span="319-319", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_141 [label="Entry lambda expression", span="344-344", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_142 [label="new FakeOptionsWithValues()", span="344-344", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_143 [label="Exit lambda expression", span="344-344", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_148 [label="Entry lambda expression", span="367-367", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_149 [label="new FakeOptionsWithSequenceWithoutRange()", span="367-367", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_150 [label="Exit lambda expression", span="367-367", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_156 [label="Entry lambda expression", span="389-389", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_157 [label="new FakeOptionsWithSequenceAndSeparator()", span="389-389", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_158 [label="Exit lambda expression", span="389-389", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_164 [label="Entry lambda expression", span="411-411", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_165 [label="new FakeOptionsWithSequenceAndSeparator()", span="411-411", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_166 [label="Exit lambda expression", span="411-411", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_174 [label="Entry lambda expression", span="440-440", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_177 [label="Entry lambda expression", span="441-443", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_175 [label="new FakeOptionsWithValues()", span="440-440", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_176 [label="Exit lambda expression", span="440-440", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_178 [label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="442-443", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_182 [label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="443-443", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_186 [label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="443-443", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_179 [label="Exit lambda expression", span="441-443", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_181 [label="Entry lambda expression", span="443-443", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_183 [label="Exit lambda expression", span="443-443", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_185 [label="Entry lambda expression", span="443-443", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_187 [label="Exit lambda expression", span="443-443", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_195 [label="Entry lambda expression", span="466-466", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_196 [label="new FakeOptionsWithSets()", span="466-466", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_197 [label="Exit lambda expression", span="466-466", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_205 [label="Entry lambda expression", span="507-507", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_206 [label="new FakeOptionWithRequiredAndSet()", span="507-507", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_207 [label="Exit lambda expression", span="507-507", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_214 [label="Entry lambda expression", span="527-527", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_215 [label="new FakeOptionWithRequiredAndSet()", span="527-527", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_216 [label="Exit lambda expression", span="527-527", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_222 [label="Entry lambda expression", span="546-546", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_223 [label="new FakeOptionWithRequired()", span="546-546", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_224 [label="Exit lambda expression", span="546-546", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_231 [label="Entry lambda expression", span="565-565", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_232 [label="new FakeOptions()", span="565-565", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_233 [label="Exit lambda expression", span="565-565", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_240 [label="Entry lambda expression", span="584-584", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_241 [label="new FakeOptions()", span="584-584", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_242 [label="Exit lambda expression", span="584-584", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_248 [label="Entry lambda expression", span="603-603", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_249 [label="new FakeOptions()", span="603-603", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_250 [label="Exit lambda expression", span="603-603", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_256 [label="Entry lambda expression", span="622-622", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_257 [label="new FakeOptions()", span="622-622", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_258 [label="Exit lambda expression", span="622-622", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_264 [label="Entry lambda expression", span="642-642", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_265 [label="new FakeOptions()", span="642-642", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_266 [label="Exit lambda expression", span="642-642", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_272 [label="Entry lambda expression", span="661-661", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_273 [label="new FakeOptionsWithRequiredValue()", span="661-661", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_274 [label="Exit lambda expression", span="661-661", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_280 [label="Entry lambda expression", span="683-683", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_281 [label="new FakeOptions()", span="683-683", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_282 [label="Exit lambda expression", span="683-683", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_288 [label="Entry lambda expression", span="702-702", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_289 [label="new FakeOptionsWithSequenceMinMaxEqual()", span="702-702", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_290 [label="Exit lambda expression", span="702-702", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_296 [label="Entry lambda expression", span="724-724", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_297 [label="new FakeOptionsWithNullables()", span="724-724", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_298 [label="Exit lambda expression", span="724-724", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_304 [label="Entry lambda expression", span="746-746", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_305 [label="new FakeOptionsWithNullables()", span="746-746", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_306 [label="Exit lambda expression", span="746-746", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_314 [label="Entry lambda expression", span="766-766", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_315 [label="new FakeOptionsWithFSharpOption()", span="766-766", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_316 [label="Exit lambda expression", span="766-766", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_324 [label="Entry lambda expression", span="790-790", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_325 [label="new FakeOptionsWithFSharpOption()", span="790-790", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_326 [label="Exit lambda expression", span="790-790", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_332 [label="Entry lambda expression", span="810-814", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_333 [label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinZero>>(() => new FakeOptionsWithMinZero()),\r\n                new string[] {},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="810-814", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_334 [label="Exit lambda expression", span="810-814", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_335 [label="Entry lambda expression", span="811-811", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_336 [label="new FakeOptionsWithMinZero()", span="811-811", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_337 [label="Exit lambda expression", span="811-811", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_343 [label="Entry lambda expression", span="824-828", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_344 [label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMaxZero>>(() => new FakeOptionsWithMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="824-828", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_345 [label="Exit lambda expression", span="824-828", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_346 [label="Entry lambda expression", span="825-825", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_347 [label="new FakeOptionsWithMaxZero()", span="825-825", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_348 [label="Exit lambda expression", span="825-825", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_354 [label="Entry lambda expression", span="838-842", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_355 [label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinMaxZero>>(() => new FakeOptionsWithMinMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="838-842", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_356 [label="Exit lambda expression", span="838-842", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_357 [label="Entry lambda expression", span="839-839", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_358 [label="new FakeOptionsWithMinMaxZero()", span="839-839", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_359 [label="Exit lambda expression", span="839-839", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_375 [label="x == expected", span="866-866", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_370 [label="Entry lambda expression", span="858-858", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_374 [label="Entry lambda expression", span="866-866", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_371 [label="new FakeOptionsWithNamedAndEmptySets()", span="858-858", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_372 [label="Exit lambda expression", span="858-858", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_376 [label="Exit lambda expression", span="866-866", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_385 [label="x == expected", span="886-886", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_381 [label="Entry lambda expression", span="880-880", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_384 [label="Entry lambda expression", span="886-886", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_382 [label="new FakeOptions()", span="880-880", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_383 [label="Exit lambda expression", span="880-880", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_386 [label="Exit lambda expression", span="886-886", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_391 [label="Entry lambda expression", span="896-896", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_392 [label="new FakeInterfaceOptions()", span="896-896", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_393 [label="Exit lambda expression", span="896-896", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_407 [label="x == expected", span="925-925", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_402 [label="Entry lambda expression", span="917-917", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_406 [label="Entry lambda expression", span="925-925", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_403 [label="new FakeOptionsWithTwoRequiredAndSets()", span="917-917", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_404 [label="Exit lambda expression", span="917-917", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_408 [label="Exit lambda expression", span="925-925", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_413 [label="Entry lambda expression", span="941-941", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_414 [label="new FakeOptionsWithRequiredValue()", span="941-941", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_415 [label="Exit lambda expression", span="941-941", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_420 [label="Entry lambda expression", span="960-960", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_421 [label="new FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="960-960", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_422 [label="Exit lambda expression", span="960-960", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_429 [label="Entry lambda expression", span="979-979", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_430 [label="new FakeOptions()", span="979-979", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_431 [label="Exit lambda expression", span="979-979", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_443 [label="x == expected", span="1008-1008", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_438 [label="Entry lambda expression", span="1001-1001", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_439 [label="new FakeOptionWithTwoRequired()", span="1001-1001", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_440 [label="Exit lambda expression", span="1001-1001", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_444 [label="Exit lambda expression", span="1008-1008", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_10 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="14-14", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilderTests.cs"];
m0_31 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", file="InstanceBuilderTests.cs"];
m0_159 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", file="InstanceBuilderTests.cs"];
m0_377 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", span="876-876", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="InstanceBuilderTests.cs"];
m0_378 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="879-883", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="InstanceBuilderTests.cs"];
m0_379 [label="((NotParsed<FakeOptions>)result).Errors.Should().HaveCount(x => x == expected)", span="886-886", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="InstanceBuilderTests.cs"];
m0_380 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", span="876-876", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="InstanceBuilderTests.cs"];
m0_395 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", span="913-913", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", file="InstanceBuilderTests.cs"];
m0_396 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithTwoRequiredAndSets>>(() => new FakeOptionsWithTwoRequiredAndSets()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="916-920", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", file="InstanceBuilderTests.cs"];
m0_397 [label="type == ParserResultType.NotParsed", span="923-923", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", file="InstanceBuilderTests.cs"];
m0_398 [label="((NotParsed<FakeOptionsWithTwoRequiredAndSets>)result).Errors.Should().HaveCount(x => x == expected)", span="925-925", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", file="InstanceBuilderTests.cs"];
m0_399 [label="type == ParserResultType.Parsed", span="927-927", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", file="InstanceBuilderTests.cs"];
m0_400 [label="result.Should().BeOfType<Parsed<FakeOptionsWithTwoRequiredAndSets>>()", span="929-929", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", file="InstanceBuilderTests.cs"];
m0_401 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", span="913-913", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", file="InstanceBuilderTests.cs"];
m0_225 [label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", file="InstanceBuilderTests.cs"];
m0_48 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="134-134", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="InstanceBuilderTests.cs"];
m0_49 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraint()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="139-143", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="InstanceBuilderTests.cs"];
m0_50 [label="Assert.True(expected.SequenceEqual(((Parsed<FakeOptionsWithSequenceAndOnlyMinConstraint>)result).Value.StringSequence))", span="146-146", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="InstanceBuilderTests.cs"];
m0_51 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="134-134", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="InstanceBuilderTests.cs"];
m0_119 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="293-293", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_120 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="296-296", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_121 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''Yellow'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="299-303", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_122 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionsWithEnum>)result).Errors))", span="306-306", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_123 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="293-293", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_140 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", file="InstanceBuilderTests.cs"];
m0_24 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="65-65", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="InstanceBuilderTests.cs"];
m0_25 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithDouble>>(() => new FakeOptionsWithDouble()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="70-74", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="InstanceBuilderTests.cs"];
m0_26 [label="Assert.Equal(expected, ((Parsed<FakeOptionsWithDouble>)result).Value.DoubleValue)", span="77-77", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="InstanceBuilderTests.cs"];
m0_27 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="65-65", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="InstanceBuilderTests.cs"];
m0_275 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", file="InstanceBuilderTests.cs"];
m0_360 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMinMaxZero.FakeOptionsWithMinMaxZero()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithMinMaxZero.FakeOptionsWithMinMaxZero()", file="InstanceBuilderTests.cs"];
m0_12 [label="Entry Unk.True", span="", cluster="Unk.True", file="InstanceBuilderTests.cs"];
m0_267 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="654-654", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs"];
m0_268 [label="var expectedResult = new[] { new MissingRequiredOptionError(NameInfo.EmptyName) }", span="657-657", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs"];
m0_269 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithRequiredValue>>(() => new FakeOptionsWithRequiredValue()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="660-664", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs"];
m0_270 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionsWithRequiredValue>)result).Errors))", span="667-667", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs"];
m0_271 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="654-654", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs"];
m0_226 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="558-558", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_227 [label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="561-561", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_228 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="564-568", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_229 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptions>)result).Errors))", span="571-571", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_230 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="558-558", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_317 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()", file="InstanceBuilderTests.cs"];
m0_313 [label="Entry Unk.get_IsSome", span="", cluster="Unk.get_IsSome", file="InstanceBuilderTests.cs"];
m0_188 [label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11", cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="InstanceBuilderTests.cs"];
m0_0 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="18-18", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs"];
m0_1 [label="var fakeOptions = new FakeOptions()", span="21-21", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs"];
m0_2 [label="var expectedResult = new NotParsed<FakeOptions>(\r\n                typeof(FakeOptions), new Error[] { new HelpRequestedError() })", span="22-23", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs"];
m0_3 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => fakeOptions),\r\n                new[] { ''--help'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="26-30", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs"];
m0_4 [label="Assert.True(expectedResult.Equals(result))", span="33-33", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs"];
m0_5 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="18-18", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs"];
m0_217 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="539-539", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs"];
m0_218 [label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="542-542", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs"];
m0_219 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequired>>(() => new FakeOptionWithRequired()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="545-549", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs"];
m0_220 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionWithRequired>)result).Errors))", span="552-552", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs"];
m0_221 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="539-539", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs"];
m0_208 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="518-518", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs"];
m0_209 [label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="520-524", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs"];
m0_210 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="526-530", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs"];
m0_211 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionWithRequiredAndSet>)result).Errors))", span="533-533", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs"];
m0_212 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="518-518", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs"];
m0_11 [label="Entry CommandLine.NotParsed<T>.Equals(object)", span="179-179", cluster="CommandLine.NotParsed<T>.Equals(object)", file="InstanceBuilderTests.cs"];
m0_36 [label="Entry Unk.SequenceEqual", span="", cluster="Unk.SequenceEqual", file="InstanceBuilderTests.cs"];
m0_127 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="312-312", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_128 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="315-315", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_129 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''RED'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="318-322", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_130 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionsWithEnum>)result).Errors))", span="325-325", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_131 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="312-312", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_69 [label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="269-269", cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs"];
m0_409 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="935-935", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="InstanceBuilderTests.cs"];
m0_410 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithRequiredValue>>(() => new FakeOptionsWithRequiredValue()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="940-944", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="InstanceBuilderTests.cs"];
m0_411 [label="expected.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithRequiredValue>)result).Value)", span="947-947", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="InstanceBuilderTests.cs"];
m0_412 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="935-935", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="InstanceBuilderTests.cs"];
m0_84 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="212-212", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_85 [label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="215-215", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_86 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraint()),\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="218-222", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_87 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionsWithSequenceAndOnlyMaxConstraint>)result).Errors))", span="225-225", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_88 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="212-212", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_64 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="174-174", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceBuilderTests.cs"];
m0_65 [label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="177-177", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceBuilderTests.cs"];
m0_66 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraint()),\r\n                new[] { ''-s'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="180-184", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceBuilderTests.cs"];
m0_67 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionsWithSequenceAndOnlyMinConstraint>)result).Errors))", span="187-187", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceBuilderTests.cs"];
m0_68 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="174-174", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceBuilderTests.cs"];
m0_135 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="331-331", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs"];
m0_136 [label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="334-340", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs"];
m0_137 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithValues>>(() => new FakeOptionsWithValues()),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="343-347", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs"];
m0_138 [label="expectedResult.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithValues>)result).Value)", span="350-350", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs"];
m0_139 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="331-331", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs"];
m0_423 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", file="InstanceBuilderTests.cs"];
m0_349 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMaxZero.FakeOptionsWithMaxZero()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithMaxZero.FakeOptionsWithMaxZero()", file="InstanceBuilderTests.cs"];
m0_369 [label="Entry Unk.HaveCount", span="", cluster="Unk.HaveCount", file="InstanceBuilderTests.cs"];
m0_198 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", file="InstanceBuilderTests.cs"];
m0_263 [label="Entry string.Equals(string)", span="0-0", cluster="string.Equals(string)", file="InstanceBuilderTests.cs"];
m0_70 [label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20", cluster="CommandLine.NameInfo.NameInfo(string, string)", file="InstanceBuilderTests.cs"];
m0_16 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="42-42", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="InstanceBuilderTests.cs"];
m0_17 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="47-51", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="InstanceBuilderTests.cs"];
m0_18 [label="Assert.Equal(expected, ((Parsed<FakeOptions>)result).Value.LongValue)", span="54-54", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="InstanceBuilderTests.cs"];
m0_19 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="42-42", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="InstanceBuilderTests.cs"];
m0_394 [label="Entry CommandLine.Tests.Fakes.FakeInterfaceOptions.FakeInterfaceOptions()", span="2-2", cluster="CommandLine.Tests.Fakes.FakeInterfaceOptions.FakeInterfaceOptions()", file="InstanceBuilderTests.cs"];
m0_20 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="InstanceBuilderTests.cs"];
m0_318 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="784-784", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="InstanceBuilderTests.cs"];
m0_319 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithFSharpOption>>(() => new FakeOptionsWithFSharpOption()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="789-793", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="InstanceBuilderTests.cs"];
m0_321 [label="expectedValue.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithFSharpOption>)result).Value.Offset.Value)", span="798-798", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="InstanceBuilderTests.cs"];
m0_322 [label="expectedSome.ShouldBeEquivalentTo(FSharpOption<int>.get_IsSome(((Parsed<FakeOptionsWithFSharpOption>)result).Value.Offset))", span="800-800", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="InstanceBuilderTests.cs"];
m0_320 [label="((Parsed<FakeOptionsWithFSharpOption>)result).Value.Offset != null", span="796-796", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="InstanceBuilderTests.cs"];
m0_323 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="784-784", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="InstanceBuilderTests.cs"];
m0_424 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", span="972-972", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="InstanceBuilderTests.cs"];
m0_425 [label="var expectedResult = new FakeOptions { StringValue=''strval0'', IntSequence=new[] { 9, 7, 8 }, BoolValue = true,  LongValue = 9876543210L }", span="975-975", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="InstanceBuilderTests.cs"];
m0_426 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''--stringvalue=strval0'', ''-i'', ''9'', ''7'', ''8'', ''-x'', ''9876543210'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="978-982", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="InstanceBuilderTests.cs"];
m0_427 [label="expectedResult.ShouldBeEquivalentTo(((Parsed<FakeOptions>)result).Value)", span="985-985", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="InstanceBuilderTests.cs"];
m0_428 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", span="972-972", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="InstanceBuilderTests.cs"];
m0_151 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", file="InstanceBuilderTests.cs"];
m0_194 [label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo, string)", span="304-304", cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo, string)", file="InstanceBuilderTests.cs"];
m0_180 [label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", span="33-33", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", file="InstanceBuilderTests.cs"];
m0_160 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="405-405", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="InstanceBuilderTests.cs"];
m0_161 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndSeparator>>(() => new FakeOptionsWithSequenceAndSeparator()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="410-414", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="InstanceBuilderTests.cs"];
m0_162 [label="expected.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithSequenceAndSeparator>)result).Value.StringSequence)", span="417-417", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="InstanceBuilderTests.cs"];
m0_163 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="405-405", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="InstanceBuilderTests.cs"];
m0_213 [label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="291-291", cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs"];
m0_292 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="718-718", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="InstanceBuilderTests.cs"];
m0_293 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNullables>>(() => new FakeOptionsWithNullables()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="723-727", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="InstanceBuilderTests.cs"];
m0_294 [label="expected.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithNullables>)result).Value.NullableInt)", span="730-730", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="InstanceBuilderTests.cs"];
m0_295 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="718-718", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="InstanceBuilderTests.cs"];
m0_234 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="577-577", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_235 [label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="580-580", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_236 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="583-587", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_237 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptions>)result).Errors))", span="590-590", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_238 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="577-577", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_199 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="499-499", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs"];
m0_200 [label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="501-504", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs"];
m0_201 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="506-510", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs"];
m0_202 [label="expectedResult.ShouldBeEquivalentTo(((Parsed<FakeOptionWithRequiredAndSet>)result).Value)", span="513-513", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs"];
m0_203 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="499-499", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs"];
m0_283 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="695-695", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_284 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="698-698", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_285 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceMinMaxEqual>>(() => new FakeOptionsWithSequenceMinMaxEqual()),\r\n                new[] { ''one'', ''two'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="701-705", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_286 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionsWithSequenceMinMaxEqual>)result).Errors))", span="708-708", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_287 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="695-695", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_9 [label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124", cluster="CSharpx.Maybe.Just<T>(T)", file="InstanceBuilderTests.cs"];
m0_405 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithTwoRequiredAndSets.FakeOptionsWithTwoRequiredAndSets()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithTwoRequiredAndSets.FakeOptionsWithTwoRequiredAndSets()", file="InstanceBuilderTests.cs"];
m0_101 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="256-256", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="InstanceBuilderTests.cs"];
m0_102 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="261-265", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="InstanceBuilderTests.cs"];
m0_103 [label="expected.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithEnum>)result).Value.Colors)", span="268-268", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="InstanceBuilderTests.cs"];
m0_104 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="256-256", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="InstanceBuilderTests.cs"];
m0_445 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", span="1013-1013", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="InstanceBuilderTests.cs"];
m0_446 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Nothing<Func<FakeImmutableOptions>>(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="1018-1022", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="InstanceBuilderTests.cs"];
m0_447 [label="expected.ShouldBeEquivalentTo(((Parsed<FakeImmutableOptions>)result).Value)", span="1025-1025", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="InstanceBuilderTests.cs"];
m0_448 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", span="1013-1013", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="InstanceBuilderTests.cs"];
m0_100 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", file="InstanceBuilderTests.cs"];
m0_368 [label="Entry Unk.Should", span="", cluster="Unk.Should", file="InstanceBuilderTests.cs"];
m0_276 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="677-677", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="InstanceBuilderTests.cs"];
m0_277 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="682-686", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="InstanceBuilderTests.cs"];
m0_278 [label="expected.ShouldBeEquivalentTo(((Parsed<FakeOptions>)result).Value.StringValue)", span="689-689", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="InstanceBuilderTests.cs"];
m0_279 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="677-677", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="InstanceBuilderTests.cs"];
m0_7 [label="Entry CommandLine.NotParsed<T>.NotParsed(System.Type, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="160-160", cluster="CommandLine.NotParsed<T>.NotParsed(System.Type, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="InstanceBuilderTests.cs"];
m0_115 [label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="324-324", cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs"];
m0_437 [label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0", cluster="System.Collections.IEnumerable.OfType<TResult>()", file="InstanceBuilderTests.cs"];
m0_40 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", file="InstanceBuilderTests.cs"];
m0_338 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMinZero.FakeOptionsWithMinZero()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithMinZero.FakeOptionsWithMinZero()", file="InstanceBuilderTests.cs"];
m0_339 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", span="821-821", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="InstanceBuilderTests.cs"];
m0_340 [label="Action test = () => InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMaxZero>>(() => new FakeOptionsWithMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="824-828", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="InstanceBuilderTests.cs"];
m0_341 [label="Assert.Throws<ApplicationException>(test)", span="831-831", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="InstanceBuilderTests.cs"];
m0_342 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", span="821-821", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="InstanceBuilderTests.cs"];
m0_189 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="455-455", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs"];
m0_190 [label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl''), string.Empty),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''), string.Empty)\r\n                }", span="458-462", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs"];
m0_191 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSets>>(() => new FakeOptionsWithSets()),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="465-469", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs"];
m0_192 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionsWithSets>)result).Errors))", span="472-472", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs"];
m0_193 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="455-455", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs"];
m0_450 [label=fakeOptions, span="", file="InstanceBuilderTests.cs"];
m0_451 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span="", file="InstanceBuilderTests.cs"];
m0_452 [label=int, span="", file="InstanceBuilderTests.cs"];
m0_453 [label=int, span="", file="InstanceBuilderTests.cs"];
m0_454 [label=int, span="", file="InstanceBuilderTests.cs"];
m0_455 [label=int, span="", file="InstanceBuilderTests.cs"];
m1_66 [label="Entry Unk.SingleOrDefault", span="", cluster="Unk.SingleOrDefault", file="InstanceChooser.cs"];
m1_28 [label="Entry CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", span="95-95", cluster="CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", file="InstanceChooser.cs"];
m1_77 [label="return new NotParsed<object>(typeof(NullInstance), types, errors);", span="97-97", cluster="CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", color=green, community=0, file="InstanceChooser.cs"];
m1_78 [label="Exit CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", span="95-95", cluster="CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", file="InstanceChooser.cs"];
m1_46 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="35-35", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceChooser.cs"];
m1_26 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", span="31-31", cluster="System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", file="InstanceChooser.cs"];
m1_10 [label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", span="46-46", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="InstanceChooser.cs"];
m1_45 [label="Entry Unk.>", span="", cluster="Unk.>", file="InstanceChooser.cs"];
m1_49 [label="Entry Unk.MakeNotParsed", span="", cluster="Unk.MakeNotParsed", file="InstanceChooser.cs"];
m1_44 [label="Entry Unk.Any", span="", cluster="Unk.Any", file="InstanceChooser.cs"];
m1_18 [label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16", cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="InstanceChooser.cs"];
m1_31 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)", file="InstanceChooser.cs"];
m1_36 [label="Entry CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="62-62", cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceChooser.cs"];
m1_42 [label="return verbs.Any(a => nameComparer.Equals(a.Item1.Name, arguments.First()))\r\n                ? InstanceBuilder.Build(\r\n                    Maybe.Just<Func<object>>(\r\n                        () =>\r\n                            verbs.Single(v => nameComparer.Equals(v.Item1.Name, arguments.First())).Item2.AutoDefault()),\r\n                    tokenizer,\r\n                    arguments.Skip(1),\r\n                    nameComparer,\r\n                    parsingCulture)\r\n                : MakeNotParsed(verbs.Select(v => v.Item2), new BadVerbSelectedError(arguments.First()));", span="69-78", cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, file="InstanceChooser.cs"];
m1_43 [label="Exit CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="62-62", cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceChooser.cs"];
m1_48 [label="Entry CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", span="357-357", cluster="CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", file="InstanceChooser.cs"];
m1_68 [label="Entry CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", span="383-383", cluster="CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", file="InstanceChooser.cs"];
m1_14 [label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11", cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="InstanceChooser.cs"];
m1_35 [label="Entry CommandLine.VersionRequestedError.VersionRequestedError()", span="432-432", cluster="CommandLine.VersionRequestedError.VersionRequestedError()", file="InstanceChooser.cs"];
m1_40 [label="Entry System.StringComparer.Equals(string, string)", span="0-0", cluster="System.StringComparer.Equals(string, string)", file="InstanceChooser.cs"];
m1_67 [label="Entry Unk.ToMaybe", span="", cluster="Unk.ToMaybe", file="InstanceChooser.cs"];
m1_56 [label="Entry Unk.Single", span="", cluster="Unk.Single", file="InstanceChooser.cs"];
m1_41 [label="Entry string.Concat(string, string)", span="0-0", cluster="string.Concat(string, string)", file="InstanceChooser.cs"];
m1_15 [label="Entry lambda expression", span="24-24", cluster="lambda expression", file="InstanceChooser.cs"];
m1_50 [label="Entry lambda expression", span="69-69", cluster="lambda expression", file="InstanceChooser.cs"];
m1_53 [label="Entry lambda expression", span="72-73", cluster="lambda expression", file="InstanceChooser.cs"];
m1_61 [label="Entry lambda expression", span="78-78", cluster="lambda expression", file="InstanceChooser.cs"];
m1_62 [label="v.Item2", span="78-78", cluster="lambda expression", color=green, community=0, file="InstanceChooser.cs"];
m1_63 [label="Exit lambda expression", span="78-78", cluster="lambda expression", file="InstanceChooser.cs"];
m1_38 [label="nameComparer.Equals(command, firstArg) ||\r\n                    nameComparer.Equals(string.Concat(''--'', command), firstArg)", span="48-49", cluster="lambda expression", file="InstanceChooser.cs"];
m1_71 [label="nameComparer.Equals(v.Item1.Name, verb)", span="87-87", cluster="lambda expression", file="InstanceChooser.cs"];
m1_51 [label="nameComparer.Equals(a.Item1.Name, arguments.First())", span="69-69", cluster="lambda expression", file="InstanceChooser.cs"];
m1_54 [label="verbs.Single(v => nameComparer.Equals(v.Item1.Name, arguments.First())).Item2.AutoDefault()", span="73-73", cluster="lambda expression", file="InstanceChooser.cs"];
m1_59 [label="nameComparer.Equals(v.Item1.Name, arguments.First())", span="73-73", cluster="lambda expression", file="InstanceChooser.cs"];
m1_52 [label="Exit lambda expression", span="69-69", cluster="lambda expression", file="InstanceChooser.cs"];
m1_55 [label="Exit lambda expression", span="72-73", cluster="lambda expression", file="InstanceChooser.cs"];
m1_5 [label="var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer))", span="23-23", cluster="lambda expression", file="InstanceChooser.cs"];
m1_12 [label="NameLookup.Contains(name, optionSpecs, nameComparer)", span="23-23", cluster="lambda expression", file="InstanceChooser.cs"];
m1_6 [label="var explodedTokens = Tokenizer.ExplodeOptionList(tokens, name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer))", span="24-24", cluster="lambda expression", file="InstanceChooser.cs"];
m1_16 [label="NameLookup.HavingSeparator(name, optionSpecs, nameComparer)", span="24-24", cluster="lambda expression", file="InstanceChooser.cs"];
m1_4 [label="Entry lambda expression", span="21-26", cluster="lambda expression", file="InstanceChooser.cs"];
m1_37 [label="Entry lambda expression", span="47-49", cluster="lambda expression", file="InstanceChooser.cs"];
m1_39 [label="Exit lambda expression", span="47-49", cluster="lambda expression", file="InstanceChooser.cs"];
m1_70 [label="Entry lambda expression", span="87-87", cluster="lambda expression", file="InstanceChooser.cs"];
m1_73 [label="Entry lambda expression", span="90-90", cluster="lambda expression", file="InstanceChooser.cs"];
m1_72 [label="Exit lambda expression", span="87-87", cluster="lambda expression", file="InstanceChooser.cs"];
m1_58 [label="Entry lambda expression", span="73-73", cluster="lambda expression", file="InstanceChooser.cs"];
m1_60 [label="Exit lambda expression", span="73-73", cluster="lambda expression", file="InstanceChooser.cs"];
m1_11 [label="Entry lambda expression", span="23-23", cluster="lambda expression", file="InstanceChooser.cs"];
m1_13 [label="Exit lambda expression", span="23-23", cluster="lambda expression", file="InstanceChooser.cs"];
m1_7 [label="return explodedTokens;", span="25-25", cluster="lambda expression", file="InstanceChooser.cs"];
m1_17 [label="Exit lambda expression", span="24-24", cluster="lambda expression", file="InstanceChooser.cs"];
m1_8 [label="Exit lambda expression", span="21-26", cluster="lambda expression", file="InstanceChooser.cs"];
m1_74 [label="new HelpVerbRequestedError(v.Item1.Name, v.Item2, true)", span="90-90", cluster="lambda expression", file="InstanceChooser.cs"];
m1_75 [label="Exit lambda expression", span="90-90", cluster="lambda expression", file="InstanceChooser.cs"];
m1_29 [label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="InstanceChooser.cs"];
m1_32 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="InstanceChooser.cs"];
m1_79 [label="Entry CommandLine.NotParsed<T>.NotParsed(System.Type, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="184-184", cluster="CommandLine.NotParsed<T>.NotParsed(System.Type, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="InstanceChooser.cs"];
m1_34 [label="Entry CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", span="81-81", cluster="CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", file="InstanceChooser.cs"];
m1_64 [label="return verb.Length > 0\r\n                ? verbs.SingleOrDefault(v => nameComparer.Equals(v.Item1.Name, verb))\r\n                        .ToMaybe()\r\n                        .Return(\r\n                            v => new HelpVerbRequestedError(v.Item1.Name, v.Item2, true),\r\n                            new HelpVerbRequestedError(null, null, false))\r\n                : new HelpVerbRequestedError(null, null, false);", span="86-92", cluster="CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", file="InstanceChooser.cs"];
m1_65 [label="Exit CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", span="81-81", cluster="CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", file="InstanceChooser.cs"];
m1_47 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="InstanceChooser.cs"];
m1_27 [label="Entry CommandLine.NoVerbSelectedError.NoVerbSelectedError()", span="421-421", cluster="CommandLine.NoVerbSelectedError.NoVerbSelectedError()", file="InstanceChooser.cs"];
m1_3 [label="Entry CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33", cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceChooser.cs"];
m1_20 [label="return MakeNotParsed(types, new NoVerbSelectedError());", span="42-42", cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, file="InstanceChooser.cs"];
m1_19 [label="arguments.Empty()", span="40-40", cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceChooser.cs"];
m1_24 [label="return preprocCompare(''help'')\r\n                ? MakeNotParsed(types,\r\n                    MakeHelpVerbRequestedError(verbs,\r\n                        arguments.Skip(1).SingleOrDefault() ?? string.Empty, nameComparer))\r\n                : preprocCompare(''version'')\r\n                    ? MakeNotParsed(types, new VersionRequestedError())\r\n                    : MatchVerb(tokenizer, verbs, arguments, nameComparer, parsingCulture);", span="53-59", cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, file="InstanceChooser.cs"];
m1_22 [label="Func<string, bool> preprocCompare = command =>\r\n                    nameComparer.Equals(command, firstArg) ||\r\n                    nameComparer.Equals(string.Concat(''--'', command), firstArg)", span="47-49", cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceChooser.cs"];
m1_23 [label="var verbs = Verb.SelectFromTypes(types)", span="51-51", cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceChooser.cs"];
m1_21 [label="var firstArg = arguments.First()", span="45-45", cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceChooser.cs"];
m1_25 [label="Exit CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33", cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceChooser.cs"];
m1_0 [label="Entry CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="14-14", cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceChooser.cs"];
m1_1 [label="return Choose(\r\n                (args, optionSpecs) =>\r\n                    {\r\n                        var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer));\r\n                        var explodedTokens = Tokenizer.ExplodeOptionList(tokens, name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer));\r\n                        return explodedTokens;\r\n                    },\r\n                types,\r\n                arguments,\r\n                nameComparer,\r\n                parsingCulture);", span="20-30", cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceChooser.cs"];
m1_2 [label="Exit CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="14-14", cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceChooser.cs"];
m1_9 [label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="13-13", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="InstanceChooser.cs"];
m1_69 [label="Entry Unk.Return", span="", cluster="Unk.Return", file="InstanceChooser.cs"];
m1_57 [label="Entry Unk.AutoDefault", span="", cluster="Unk.AutoDefault", file="InstanceChooser.cs"];
m1_30 [label="Entry CommandLine.Core.Verb.SelectFromTypes(System.Collections.Generic.IEnumerable<System.Type>)", span="40-40", cluster="CommandLine.Core.Verb.SelectFromTypes(System.Collections.Generic.IEnumerable<System.Type>)", file="InstanceChooser.cs"];
m1_33 [label="Entry System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", file="InstanceChooser.cs"];
m1_76 [label="Entry HelpVerbRequestedError.cstr", span="", cluster="HelpVerbRequestedError.cstr", file="InstanceChooser.cs"];
m1_82 [label="System.StringComparer", span="", file="InstanceChooser.cs"];
m1_83 [label=firstArg, span="", file="InstanceChooser.cs"];
m1_87 [label=string, span="", file="InstanceChooser.cs"];
m1_88 [label="System.StringComparer", span="", file="InstanceChooser.cs"];
m1_84 [label="System.Collections.Generic.IEnumerable<string>", span="", file="InstanceChooser.cs"];
m1_85 [label="System.StringComparer", span="", file="InstanceChooser.cs"];
m1_86 [label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>", span="", file="InstanceChooser.cs"];
m1_80 [label="System.StringComparer", span="", file="InstanceChooser.cs"];
m1_81 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span="", file="InstanceChooser.cs"];
n122 -> n1  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.CommandLineParser"];
n122 -> n5  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.CommandLineParser"];
n122 -> n10  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.CommandLineParser"];
n122 -> n16  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.CommandLineParser"];
n122 -> n22  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.CommandLineParser"];
n122 -> n23  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.CommandLineParser"];
n122 -> n26  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.CommandLineParser"];
n122 -> n27  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.CommandLineParser"];
n122 -> n29  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.CommandLineParser"];
n122 -> n35  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.CommandLineParser"];
n122 -> n44  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.CommandLineParser"];
n122 -> n51  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.CommandLineParser"];
n122 -> n76  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.CommandLineParser"];
n122 -> n106  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.CommandLineParser"];
n122 -> n107  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.CommandLineParser"];
n122 -> n111  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.CommandLineParser"];
n122 -> n114  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.CommandLineParser"];
n122 -> n115  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.CommandLineParser"];
n122 -> n116  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.CommandLineParser"];
n122 -> n120  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.CommandLineParser"];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=2, style=dotted];
n2 -> n0  [key=0, style=bold, color=blue];
n4 -> n5  [key=0, style=solid];
n5 -> n6  [key=0, style=solid];
n5 -> n7  [key=2, style=dotted];
n6 -> n4  [key=0, style=bold, color=blue];
n8 -> n9  [key=0, style=solid];
n8 -> n10  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.CommandLineParserSettings"];
n9 -> n10  [key=0, style=solid];
n9 -> n12  [key=2, style=dotted];
n10 -> n11  [key=0, style=solid];
n11 -> n8  [key=0, style=bold, color=blue];
n13 -> n14  [key=0, style=solid];
n13 -> n15  [key=1, style=dashed, color=darkseagreen4, label=object];
n13 -> n16  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
n14 -> n15  [key=0, style=solid];
n14 -> n12  [key=2, style=dotted];
n15 -> n16  [key=0, style=solid];
n15 -> n12  [key=2, style=dotted];
n16 -> n17  [key=0, style=solid];
n16 -> n18  [key=2, style=dotted];
n17 -> n13  [key=0, style=bold, color=blue];
n18 -> n25  [key=0, style=solid];
n18 -> n27  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
n18 -> n29  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
n18 -> n31  [key=1, style=dashed, color=darkseagreen4, label=object];
n18 -> n35  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
n19 -> n20  [key=0, style=solid];
n19 -> n21  [key=1, style=dashed, color=darkseagreen4, label=object];
n19 -> n22  [key=1, style=dashed, color=darkseagreen4, label="System.IO.TextWriter"];
n19 -> n23  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
n20 -> n21  [key=0, style=solid];
n20 -> n12  [key=2, style=dotted];
n21 -> n22  [key=0, style=solid];
n21 -> n12  [key=2, style=dotted];
n22 -> n23  [key=0, style=solid];
n23 -> n24  [key=0, style=solid];
n23 -> n18  [key=2, style=dotted];
n24 -> n19  [key=0, style=bold, color=blue];
n25 -> n26  [key=0, style=solid];
n25 -> n37  [key=2, style=dotted];
n25 -> n28  [key=1, style=dashed, color=darkseagreen4, label=pair];
n25 -> n29  [key=1, style=dashed, color=darkseagreen4, label=pair];
n25 -> n31  [key=1, style=dashed, color=darkseagreen4, label=pair];
n27 -> n28  [key=0, style=solid];
n29 -> n30  [key=0, style=solid];
n29 -> n34  [key=0, style=solid];
n29 -> n38  [key=2, style=dotted];
n29 -> n39  [key=2, style=dotted];
n31 -> n32  [key=0, style=solid];
n31 -> n40  [key=2, style=dotted];
n35 -> n36  [key=0, style=solid];
n35 -> n39  [key=2, style=dotted];
n26 -> n27  [key=0, style=solid];
n26 -> n28  [key=1, style=dashed, color=darkseagreen4, label=helpWriter];
n26 -> n32  [key=1, style=dashed, color=darkseagreen4, label=helpWriter];
n28 -> n29  [key=0, style=solid];
n28 -> n35  [key=0, style=solid];
n32 -> n33  [key=0, style=solid];
n32 -> n41  [key=2, style=dotted];
n30 -> n31  [key=0, style=solid];
n34 -> n36  [key=0, style=solid];
n38 -> n76  [key=0, style=solid];
n38 -> n78  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
n38 -> n79  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.HelpOptionAttribute"];
n38 -> n80  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
n38 -> n82  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.HelpOptionAttribute"];
n38 -> n83  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
n33 -> n36  [key=0, style=solid];
n36 -> n18  [key=0, style=bold, color=blue];
n42 -> n43  [key=0, style=solid];
n42 -> n44  [key=1, style=dashed, color=darkseagreen4, label=object];
n42 -> n46  [key=1, style=dashed, color=darkseagreen4, label=object];
n42 -> n47  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
n42 -> n53  [key=1, style=dashed, color=darkseagreen4, label=object];
n42 -> n55  [key=1, style=dashed, color=darkseagreen4, label=object];
n43 -> n44  [key=0, style=solid];
n43 -> n62  [key=1, style=dashed, color=darkseagreen4, label=hadError];
n44 -> n45  [key=0, style=solid];
n44 -> n65  [key=2, style=dotted];
n44 -> n53  [key=1, style=dashed, color=darkseagreen4, label=optionMap];
n44 -> n62  [key=1, style=dashed, color=darkseagreen4, label=optionMap];
n46 -> n47  [key=0, style=solid];
n46 -> n67  [key=2, style=dotted];
n46 -> n59  [key=1, style=dashed, color=darkseagreen4, label=target];
n46 -> n60  [key=1, style=dashed, color=darkseagreen4, label=target];
n47 -> n48  [key=0, style=solid];
n47 -> n68  [key=2, style=dotted];
n47 -> n49  [key=1, style=dashed, color=darkseagreen4, label=arguments];
n47 -> n53  [key=1, style=dashed, color=darkseagreen4, label=arguments];
n47 -> n58  [key=1, style=dashed, color=darkseagreen4, label=arguments];
n53 -> n54  [key=0, style=solid];
n53 -> n72  [key=2, style=dotted];
n53 -> n57  [key=1, style=dashed, color=darkseagreen4, label=result];
n55 -> n56  [key=0, style=solid];
n55 -> n73  [key=2, style=dotted];
n62 -> n63  [key=0, style=solid];
n62 -> n75  [key=2, style=dotted];
n62 -> n62  [key=1, style=dashed, color=darkseagreen4, label=hadError];
n45 -> n46  [key=0, style=solid];
n45 -> n66  [key=2, style=dotted];
n59 -> n60  [key=0, style=solid];
n59 -> n48  [key=0, style=solid];
n60 -> n61  [key=0, style=solid];
n60 -> n48  [key=0, style=solid];
n60 -> n74  [key=2, style=dotted];
n48 -> n49  [key=0, style=solid];
n48 -> n62  [key=0, style=solid];
n48 -> n69  [key=2, style=dotted];
n49 -> n50  [key=0, style=solid];
n49 -> n51  [key=1, style=dashed, color=darkseagreen4, label=argument];
n49 -> n60  [key=1, style=dashed, color=darkseagreen4, label=argument];
n58 -> n48  [key=0, style=solid];
n58 -> n69  [key=2, style=dotted];
n50 -> n51  [key=0, style=solid];
n50 -> n48  [key=0, style=solid];
n50 -> n70  [key=2, style=dotted];
n51 -> n52  [key=0, style=solid];
n51 -> n71  [key=2, style=dotted];
n51 -> n53  [key=1, style=dashed, color=darkseagreen4, label=parser];
n51 -> n55  [key=1, style=dashed, color=darkseagreen4, label=parser];
n52 -> n53  [key=0, style=solid];
n52 -> n59  [key=0, style=solid];
n54 -> n55  [key=0, style=solid];
n54 -> n57  [key=0, style=solid];
n57 -> n58  [key=0, style=solid];
n57 -> n48  [key=0, style=solid];
n56 -> n48  [key=0, style=solid];
n56 -> n62  [key=1, style=dashed, color=darkseagreen4, label=hadError];
n73 -> n90  [key=0, style=solid];
n73 -> n94  [key=1, style=dashed, color=darkseagreen4, label=object];
n73 -> n95  [key=1, style=dashed, color=darkseagreen4, label=object];
n73 -> n96  [key=1, style=dashed, color=darkseagreen4, label=object];
n73 -> n97  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.ParsingError>"];
n61 -> n48  [key=0, style=solid];
n61 -> n62  [key=1, style=dashed, color=darkseagreen4, label=hadError];
n63 -> n64  [key=0, style=solid];
n64 -> n42  [key=0, style=bold, color=blue];
n76 -> n77  [key=0, style=solid];
n76 -> n80  [key=1, style=dashed, color=darkseagreen4, label=caseSensitive];
n76 -> n83  [key=1, style=dashed, color=darkseagreen4, label=caseSensitive];
n78 -> n79  [key=0, style=solid];
n78 -> n86  [key=0, style=solid];
n79 -> n80  [key=0, style=solid];
n79 -> n82  [key=0, style=solid];
n80 -> n81  [key=0, style=solid];
n80 -> n82  [key=0, style=solid];
n80 -> n88  [key=2, style=dotted];
n82 -> n83  [key=0, style=solid];
n82 -> n85  [key=0, style=solid];
n82 -> n70  [key=2, style=dotted];
n83 -> n84  [key=0, style=solid];
n83 -> n85  [key=0, style=solid];
n83 -> n89  [key=2, style=dotted];
n77 -> n78  [key=0, style=solid];
n77 -> n80  [key=1, style=dashed, color=darkseagreen4, label=i];
n77 -> n83  [key=1, style=dashed, color=darkseagreen4, label=i];
n77 -> n85  [key=1, style=dashed, color=darkseagreen4, label=i];
n85 -> n78  [key=0, style=solid];
n85 -> n85  [key=1, style=dashed, color=darkseagreen4, label=i];
n86 -> n87  [key=0, style=solid];
n81 -> n87  [key=0, style=solid];
n84 -> n87  [key=0, style=solid];
n87 -> n38  [key=0, style=bold, color=blue];
n90 -> n91  [key=0, style=solid];
n90 -> n100  [key=2, style=dotted];
n90 -> n93  [key=1, style=dashed, color=darkseagreen4, label=list];
n94 -> n95  [key=0, style=solid];
n94 -> n96  [key=0, style=solid];
n94 -> n101  [key=2, style=dotted];
n95 -> n96  [key=0, style=solid];
n95 -> n102  [key=2, style=dotted];
n95 -> n103  [key=2, style=dotted];
n96 -> n97  [key=0, style=solid];
n96 -> n101  [key=2, style=dotted];
n96 -> n98  [key=1, style=dashed, color=darkseagreen4, label=parserState];
n97 -> n98  [key=0, style=solid];
n97 -> n99  [key=0, style=solid];
n91 -> n92  [key=0, style=solid];
n91 -> n93  [key=0, style=solid];
n93 -> n94  [key=0, style=solid];
n93 -> n95  [key=1, style=dashed, color=darkseagreen4, label=property];
n93 -> n96  [key=1, style=dashed, color=darkseagreen4, label=property];
n92 -> n99  [key=0, style=solid];
n98 -> n97  [key=0, style=solid];
n98 -> n104  [key=2, style=dotted];
n99 -> n73  [key=0, style=bold, color=blue];
n105 -> n106  [key=0, style=solid];
n106 -> n107  [key=0, style=solid];
n106 -> n109  [key=2, style=dotted];
n107 -> n108  [key=0, style=solid];
n107 -> n110  [key=2, style=dotted];
n109 -> n111  [key=0, style=solid];
n109 -> n113  [key=1, style=dashed, color=darkseagreen4, label=bool];
n108 -> n105  [key=0, style=bold, color=blue];
n111 -> n112  [key=0, style=solid];
n111 -> n113  [key=0, style=solid];
n113 -> n114  [key=0, style=solid];
n113 -> n117  [key=0, style=solid];
n112 -> n117  [key=0, style=solid];
n114 -> n115  [key=0, style=solid];
n114 -> n116  [key=0, style=solid];
n117 -> n109  [key=0, style=bold, color=blue];
n115 -> n116  [key=0, style=solid];
n115 -> n118  [key=2, style=dotted];
n116 -> n117  [key=0, style=solid];
n119 -> n120  [key=0, style=solid];
n120 -> n121  [key=0, style=solid];
n120 -> n109  [key=2, style=dotted];
n121 -> n119  [key=0, style=bold, color=blue];
m0_41 -> m0_42  [key=0, style=solid];
m0_41 -> m0_43  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
m0_42 -> m0_43  [key=0, style=solid];
m0_42 -> m0_9  [key=2, style=dotted];
m0_42 -> m0_10  [key=2, style=dotted];
m0_42 -> m0_45  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_43 -> m0_44  [key=0, style=solid];
m0_43 -> m0_36  [key=2, style=dotted];
m0_43 -> m0_12  [key=2, style=dotted];
m0_44 -> m0_41  [key=0, style=bold, color=blue];
m0_350 -> m0_351  [key=0, style=solid];
m0_351 -> m0_352  [key=0, style=solid];
m0_351 -> m0_351  [key=3, color=darkorchid, style=bold, label="Local variable System.Action test"];
m0_352 -> m0_353  [key=0, style=solid];
m0_352 -> m0_331  [key=2, style=dotted];
m0_353 -> m0_350  [key=0, style=bold, color=blue];
m0_152 -> m0_153  [key=0, style=solid];
m0_152 -> m0_154  [key=1, style=dashed, color=darkseagreen4, label="long[]"];
m0_153 -> m0_154  [key=0, style=solid];
m0_153 -> m0_9  [key=2, style=dotted];
m0_153 -> m0_10  [key=2, style=dotted];
m0_153 -> m0_156  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_154 -> m0_155  [key=0, style=solid];
m0_154 -> m0_105  [key=2, style=dotted];
m0_155 -> m0_152  [key=0, style=bold, color=blue];
m0_259 -> m0_260  [key=0, style=solid];
m0_259 -> m0_261  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_260 -> m0_261  [key=0, style=solid];
m0_260 -> m0_9  [key=2, style=dotted];
m0_260 -> m0_10  [key=2, style=dotted];
m0_260 -> m0_264  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_261 -> m0_262  [key=0, style=solid];
m0_261 -> m0_263  [key=2, style=dotted];
m0_261 -> m0_12  [key=2, style=dotted];
m0_262 -> m0_259  [key=0, style=bold, color=blue];
m0_327 -> m0_328  [key=0, style=solid];
m0_328 -> m0_329  [key=0, style=solid];
m0_328 -> m0_328  [key=3, color=darkorchid, style=bold, label="Local variable System.Action test"];
m0_329 -> m0_330  [key=0, style=solid];
m0_329 -> m0_331  [key=2, style=dotted];
m0_330 -> m0_327  [key=0, style=bold, color=blue];
m0_300 -> m0_301  [key=0, style=solid];
m0_300 -> m0_302  [key=1, style=dashed, color=darkseagreen4, label="long?"];
m0_301 -> m0_302  [key=0, style=solid];
m0_301 -> m0_9  [key=2, style=dotted];
m0_301 -> m0_10  [key=2, style=dotted];
m0_301 -> m0_304  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_302 -> m0_303  [key=0, style=solid];
m0_302 -> m0_105  [key=2, style=dotted];
m0_303 -> m0_300  [key=0, style=bold, color=blue];
m0_167 -> m0_168  [key=0, style=solid];
m0_168 -> m0_169  [key=0, style=solid];
m0_168 -> m0_140  [key=2, style=dotted];
m0_168 -> m0_171  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_169 -> m0_170  [key=0, style=solid];
m0_171 -> m0_172  [key=0, style=solid];
m0_171 -> m0_105  [key=2, style=dotted];
m0_170 -> m0_171  [key=0, style=solid];
m0_170 -> m0_9  [key=2, style=dotted];
m0_170 -> m0_173  [key=2, style=dotted];
m0_170 -> m0_174  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_170 -> m0_177  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_172 -> m0_167  [key=0, style=bold, color=blue];
m0_251 -> m0_252  [key=0, style=solid];
m0_252 -> m0_253  [key=0, style=solid];
m0_252 -> m0_239  [key=2, style=dotted];
m0_252 -> m0_254  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_253 -> m0_254  [key=0, style=solid];
m0_253 -> m0_9  [key=2, style=dotted];
m0_253 -> m0_10  [key=2, style=dotted];
m0_253 -> m0_256  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_254 -> m0_255  [key=0, style=solid];
m0_254 -> m0_36  [key=2, style=dotted];
m0_254 -> m0_12  [key=2, style=dotted];
m0_255 -> m0_251  [key=0, style=bold, color=blue];
m0_387 -> m0_388  [key=0, style=solid];
m0_387 -> m0_389  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_388 -> m0_389  [key=0, style=solid];
m0_388 -> m0_9  [key=2, style=dotted];
m0_388 -> m0_10  [key=2, style=dotted];
m0_388 -> m0_391  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_389 -> m0_390  [key=0, style=solid];
m0_389 -> m0_105  [key=2, style=dotted];
m0_390 -> m0_387  [key=0, style=bold, color=blue];
m0_74 -> m0_75  [key=0, style=solid];
m0_75 -> m0_76  [key=0, style=solid];
m0_75 -> m0_79  [key=2, style=dotted];
m0_75 -> m0_77  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_76 -> m0_77  [key=0, style=solid];
m0_76 -> m0_9  [key=2, style=dotted];
m0_76 -> m0_10  [key=2, style=dotted];
m0_76 -> m0_80  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_77 -> m0_78  [key=0, style=solid];
m0_77 -> m0_36  [key=2, style=dotted];
m0_77 -> m0_12  [key=2, style=dotted];
m0_78 -> m0_74  [key=0, style=bold, color=blue];
m0_92 -> m0_93  [key=0, style=solid];
m0_93 -> m0_94  [key=0, style=solid];
m0_93 -> m0_79  [key=2, style=dotted];
m0_93 -> m0_95  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_94 -> m0_95  [key=0, style=solid];
m0_94 -> m0_9  [key=2, style=dotted];
m0_94 -> m0_10  [key=2, style=dotted];
m0_94 -> m0_97  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_95 -> m0_96  [key=0, style=solid];
m0_95 -> m0_36  [key=2, style=dotted];
m0_95 -> m0_12  [key=2, style=dotted];
m0_96 -> m0_92  [key=0, style=bold, color=blue];
m0_307 -> m0_308  [key=0, style=solid];
m0_307 -> m0_310  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_307 -> m0_311  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_308 -> m0_309  [key=0, style=solid];
m0_308 -> m0_9  [key=2, style=dotted];
m0_308 -> m0_10  [key=2, style=dotted];
m0_308 -> m0_314  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_308 -> m0_310  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_308 -> m0_311  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_310 -> m0_311  [key=0, style=solid];
m0_310 -> m0_105  [key=2, style=dotted];
m0_311 -> m0_312  [key=0, style=solid];
m0_311 -> m0_313  [key=2, style=dotted];
m0_311 -> m0_105  [key=2, style=dotted];
m0_309 -> m0_310  [key=0, style=solid];
m0_309 -> m0_311  [key=0, style=solid];
m0_312 -> m0_307  [key=0, style=bold, color=blue];
m0_432 -> m0_433  [key=0, style=solid];
m0_432 -> m0_435  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_432 -> m0_443  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_433 -> m0_434  [key=0, style=solid];
m0_433 -> m0_9  [key=2, style=dotted];
m0_433 -> m0_10  [key=2, style=dotted];
m0_433 -> m0_438  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_435 -> m0_436  [key=0, style=solid];
m0_435 -> m0_437  [key=2, style=dotted];
m0_435 -> m0_368  [key=2, style=dotted];
m0_435 -> m0_369  [key=2, style=dotted];
m0_435 -> m0_442  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_434 -> m0_435  [key=0, style=solid];
m0_436 -> m0_432  [key=0, style=bold, color=blue];
m0_243 -> m0_244  [key=0, style=solid];
m0_244 -> m0_245  [key=0, style=solid];
m0_244 -> m0_239  [key=2, style=dotted];
m0_244 -> m0_246  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_245 -> m0_246  [key=0, style=solid];
m0_245 -> m0_9  [key=2, style=dotted];
m0_245 -> m0_10  [key=2, style=dotted];
m0_245 -> m0_248  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_246 -> m0_247  [key=0, style=solid];
m0_246 -> m0_36  [key=2, style=dotted];
m0_246 -> m0_12  [key=2, style=dotted];
m0_247 -> m0_243  [key=0, style=bold, color=blue];
m0_110 -> m0_111  [key=0, style=solid];
m0_111 -> m0_112  [key=0, style=solid];
m0_111 -> m0_115  [key=2, style=dotted];
m0_111 -> m0_70  [key=2, style=dotted];
m0_111 -> m0_113  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_112 -> m0_113  [key=0, style=solid];
m0_112 -> m0_9  [key=2, style=dotted];
m0_112 -> m0_10  [key=2, style=dotted];
m0_112 -> m0_116  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_113 -> m0_114  [key=0, style=solid];
m0_113 -> m0_36  [key=2, style=dotted];
m0_113 -> m0_12  [key=2, style=dotted];
m0_114 -> m0_110  [key=0, style=bold, color=blue];
m0_416 -> m0_417  [key=0, style=solid];
m0_416 -> m0_418  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent"];
m0_417 -> m0_418  [key=0, style=solid];
m0_417 -> m0_9  [key=2, style=dotted];
m0_417 -> m0_10  [key=2, style=dotted];
m0_417 -> m0_420  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_418 -> m0_419  [key=0, style=solid];
m0_418 -> m0_105  [key=2, style=dotted];
m0_419 -> m0_416  [key=0, style=bold, color=blue];
m0_144 -> m0_145  [key=0, style=solid];
m0_144 -> m0_146  [key=1, style=dashed, color=darkseagreen4, label="long[]"];
m0_145 -> m0_146  [key=0, style=solid];
m0_145 -> m0_9  [key=2, style=dotted];
m0_145 -> m0_10  [key=2, style=dotted];
m0_145 -> m0_148  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_146 -> m0_147  [key=0, style=solid];
m0_146 -> m0_105  [key=2, style=dotted];
m0_147 -> m0_144  [key=0, style=bold, color=blue];
m0_56 -> m0_57  [key=0, style=solid];
m0_56 -> m0_58  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m0_57 -> m0_58  [key=0, style=solid];
m0_57 -> m0_9  [key=2, style=dotted];
m0_57 -> m0_10  [key=2, style=dotted];
m0_57 -> m0_60  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_58 -> m0_59  [key=0, style=solid];
m0_58 -> m0_36  [key=2, style=dotted];
m0_58 -> m0_12  [key=2, style=dotted];
m0_59 -> m0_56  [key=0, style=bold, color=blue];
m0_361 -> m0_362  [key=0, style=solid];
m0_361 -> m0_363  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResultType"];
m0_361 -> m0_364  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_361 -> m0_375  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_361 -> m0_365  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResultType"];
m0_362 -> m0_363  [key=0, style=solid];
m0_362 -> m0_9  [key=2, style=dotted];
m0_362 -> m0_10  [key=2, style=dotted];
m0_362 -> m0_370  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_362 -> m0_364  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_362 -> m0_366  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_363 -> m0_364  [key=0, style=solid];
m0_363 -> m0_365  [key=0, style=solid];
m0_364 -> m0_367  [key=0, style=solid];
m0_364 -> m0_368  [key=2, style=dotted];
m0_364 -> m0_369  [key=2, style=dotted];
m0_364 -> m0_374  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_365 -> m0_366  [key=0, style=solid];
m0_365 -> m0_367  [key=0, style=solid];
m0_366 -> m0_367  [key=0, style=solid];
m0_366 -> m0_368  [key=2, style=dotted];
m0_366 -> m0_331  [key=2, style=dotted];
m0_367 -> m0_361  [key=0, style=bold, color=blue];
m0_32 -> m0_33  [key=0, style=solid];
m0_32 -> m0_34  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
m0_33 -> m0_34  [key=0, style=solid];
m0_33 -> m0_9  [key=2, style=dotted];
m0_33 -> m0_10  [key=2, style=dotted];
m0_33 -> m0_37  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_34 -> m0_35  [key=0, style=solid];
m0_34 -> m0_36  [key=2, style=dotted];
m0_34 -> m0_12  [key=2, style=dotted];
m0_35 -> m0_32  [key=0, style=bold, color=blue];
m0_442 -> m0_443  [key=0, style=solid];
m0_14 -> m0_15  [key=0, style=solid];
m0_13 -> m0_14  [key=0, style=solid];
m0_15 -> m0_13  [key=0, style=bold, color=blue];
m0_21 -> m0_22  [key=0, style=solid];
m0_22 -> m0_23  [key=0, style=solid];
m0_22 -> m0_6  [key=2, style=dotted];
m0_23 -> m0_21  [key=0, style=bold, color=blue];
m0_28 -> m0_29  [key=0, style=solid];
m0_29 -> m0_30  [key=0, style=solid];
m0_29 -> m0_31  [key=2, style=dotted];
m0_30 -> m0_28  [key=0, style=bold, color=blue];
m0_37 -> m0_38  [key=0, style=solid];
m0_38 -> m0_39  [key=0, style=solid];
m0_38 -> m0_40  [key=2, style=dotted];
m0_39 -> m0_37  [key=0, style=bold, color=blue];
m0_45 -> m0_46  [key=0, style=solid];
m0_46 -> m0_47  [key=0, style=solid];
m0_46 -> m0_6  [key=2, style=dotted];
m0_47 -> m0_45  [key=0, style=bold, color=blue];
m0_52 -> m0_53  [key=0, style=solid];
m0_53 -> m0_54  [key=0, style=solid];
m0_53 -> m0_55  [key=2, style=dotted];
m0_54 -> m0_52  [key=0, style=bold, color=blue];
m0_60 -> m0_61  [key=0, style=solid];
m0_61 -> m0_62  [key=0, style=solid];
m0_61 -> m0_63  [key=2, style=dotted];
m0_62 -> m0_60  [key=0, style=bold, color=blue];
m0_71 -> m0_72  [key=0, style=solid];
m0_72 -> m0_73  [key=0, style=solid];
m0_72 -> m0_55  [key=2, style=dotted];
m0_73 -> m0_71  [key=0, style=bold, color=blue];
m0_80 -> m0_81  [key=0, style=solid];
m0_81 -> m0_82  [key=0, style=solid];
m0_81 -> m0_83  [key=2, style=dotted];
m0_82 -> m0_80  [key=0, style=bold, color=blue];
m0_89 -> m0_90  [key=0, style=solid];
m0_90 -> m0_91  [key=0, style=solid];
m0_90 -> m0_63  [key=2, style=dotted];
m0_91 -> m0_89  [key=0, style=bold, color=blue];
m0_97 -> m0_98  [key=0, style=solid];
m0_98 -> m0_99  [key=0, style=solid];
m0_98 -> m0_100  [key=2, style=dotted];
m0_99 -> m0_97  [key=0, style=bold, color=blue];
m0_106 -> m0_107  [key=0, style=solid];
m0_107 -> m0_108  [key=0, style=solid];
m0_107 -> m0_109  [key=2, style=dotted];
m0_108 -> m0_106  [key=0, style=bold, color=blue];
m0_116 -> m0_117  [key=0, style=solid];
m0_117 -> m0_118  [key=0, style=solid];
m0_117 -> m0_109  [key=2, style=dotted];
m0_118 -> m0_116  [key=0, style=bold, color=blue];
m0_124 -> m0_125  [key=0, style=solid];
m0_125 -> m0_126  [key=0, style=solid];
m0_125 -> m0_109  [key=2, style=dotted];
m0_126 -> m0_124  [key=0, style=bold, color=blue];
m0_132 -> m0_133  [key=0, style=solid];
m0_133 -> m0_134  [key=0, style=solid];
m0_133 -> m0_109  [key=2, style=dotted];
m0_134 -> m0_132  [key=0, style=bold, color=blue];
m0_141 -> m0_142  [key=0, style=solid];
m0_142 -> m0_143  [key=0, style=solid];
m0_142 -> m0_140  [key=2, style=dotted];
m0_143 -> m0_141  [key=0, style=bold, color=blue];
m0_148 -> m0_149  [key=0, style=solid];
m0_149 -> m0_150  [key=0, style=solid];
m0_149 -> m0_151  [key=2, style=dotted];
m0_150 -> m0_148  [key=0, style=bold, color=blue];
m0_156 -> m0_157  [key=0, style=solid];
m0_157 -> m0_158  [key=0, style=solid];
m0_157 -> m0_159  [key=2, style=dotted];
m0_158 -> m0_156  [key=0, style=bold, color=blue];
m0_164 -> m0_165  [key=0, style=solid];
m0_165 -> m0_166  [key=0, style=solid];
m0_165 -> m0_159  [key=2, style=dotted];
m0_166 -> m0_164  [key=0, style=bold, color=blue];
m0_174 -> m0_175  [key=0, style=solid];
m0_177 -> m0_178  [key=0, style=solid];
m0_177 -> m0_182  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m0_177 -> m0_186  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m0_175 -> m0_176  [key=0, style=solid];
m0_175 -> m0_140  [key=2, style=dotted];
m0_176 -> m0_174  [key=0, style=bold, color=blue];
m0_178 -> m0_179  [key=0, style=solid];
m0_178 -> m0_180  [key=2, style=dotted];
m0_178 -> m0_181  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_182 -> m0_183  [key=0, style=solid];
m0_182 -> m0_184  [key=2, style=dotted];
m0_182 -> m0_185  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_186 -> m0_187  [key=0, style=solid];
m0_186 -> m0_188  [key=2, style=dotted];
m0_179 -> m0_177  [key=0, style=bold, color=blue];
m0_181 -> m0_182  [key=0, style=solid];
m0_183 -> m0_181  [key=0, style=bold, color=blue];
m0_185 -> m0_186  [key=0, style=solid];
m0_187 -> m0_185  [key=0, style=bold, color=blue];
m0_195 -> m0_196  [key=0, style=solid];
m0_196 -> m0_197  [key=0, style=solid];
m0_196 -> m0_198  [key=2, style=dotted];
m0_197 -> m0_195  [key=0, style=bold, color=blue];
m0_205 -> m0_206  [key=0, style=solid];
m0_206 -> m0_207  [key=0, style=solid];
m0_206 -> m0_204  [key=2, style=dotted];
m0_207 -> m0_205  [key=0, style=bold, color=blue];
m0_214 -> m0_215  [key=0, style=solid];
m0_215 -> m0_216  [key=0, style=solid];
m0_215 -> m0_204  [key=2, style=dotted];
m0_216 -> m0_214  [key=0, style=bold, color=blue];
m0_222 -> m0_223  [key=0, style=solid];
m0_223 -> m0_224  [key=0, style=solid];
m0_223 -> m0_225  [key=2, style=dotted];
m0_224 -> m0_222  [key=0, style=bold, color=blue];
m0_231 -> m0_232  [key=0, style=solid];
m0_232 -> m0_233  [key=0, style=solid];
m0_232 -> m0_6  [key=2, style=dotted];
m0_233 -> m0_231  [key=0, style=bold, color=blue];
m0_240 -> m0_241  [key=0, style=solid];
m0_241 -> m0_242  [key=0, style=solid];
m0_241 -> m0_6  [key=2, style=dotted];
m0_242 -> m0_240  [key=0, style=bold, color=blue];
m0_248 -> m0_249  [key=0, style=solid];
m0_249 -> m0_250  [key=0, style=solid];
m0_249 -> m0_6  [key=2, style=dotted];
m0_250 -> m0_248  [key=0, style=bold, color=blue];
m0_256 -> m0_257  [key=0, style=solid];
m0_257 -> m0_258  [key=0, style=solid];
m0_257 -> m0_6  [key=2, style=dotted];
m0_258 -> m0_256  [key=0, style=bold, color=blue];
m0_264 -> m0_265  [key=0, style=solid];
m0_265 -> m0_266  [key=0, style=solid];
m0_265 -> m0_6  [key=2, style=dotted];
m0_266 -> m0_264  [key=0, style=bold, color=blue];
m0_272 -> m0_273  [key=0, style=solid];
m0_273 -> m0_274  [key=0, style=solid];
m0_273 -> m0_275  [key=2, style=dotted];
m0_274 -> m0_272  [key=0, style=bold, color=blue];
m0_280 -> m0_281  [key=0, style=solid];
m0_281 -> m0_282  [key=0, style=solid];
m0_281 -> m0_6  [key=2, style=dotted];
m0_282 -> m0_280  [key=0, style=bold, color=blue];
m0_288 -> m0_289  [key=0, style=solid];
m0_289 -> m0_290  [key=0, style=solid];
m0_289 -> m0_291  [key=2, style=dotted];
m0_290 -> m0_288  [key=0, style=bold, color=blue];
m0_296 -> m0_297  [key=0, style=solid];
m0_297 -> m0_298  [key=0, style=solid];
m0_297 -> m0_299  [key=2, style=dotted];
m0_298 -> m0_296  [key=0, style=bold, color=blue];
m0_304 -> m0_305  [key=0, style=solid];
m0_305 -> m0_306  [key=0, style=solid];
m0_305 -> m0_299  [key=2, style=dotted];
m0_306 -> m0_304  [key=0, style=bold, color=blue];
m0_314 -> m0_315  [key=0, style=solid];
m0_315 -> m0_316  [key=0, style=solid];
m0_315 -> m0_317  [key=2, style=dotted];
m0_316 -> m0_314  [key=0, style=bold, color=blue];
m0_324 -> m0_325  [key=0, style=solid];
m0_325 -> m0_326  [key=0, style=solid];
m0_325 -> m0_317  [key=2, style=dotted];
m0_326 -> m0_324  [key=0, style=bold, color=blue];
m0_332 -> m0_333  [key=0, style=solid];
m0_333 -> m0_334  [key=0, style=solid];
m0_333 -> m0_9  [key=2, style=dotted];
m0_333 -> m0_10  [key=2, style=dotted];
m0_333 -> m0_335  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_334 -> m0_332  [key=0, style=bold, color=blue];
m0_335 -> m0_336  [key=0, style=solid];
m0_336 -> m0_337  [key=0, style=solid];
m0_336 -> m0_338  [key=2, style=dotted];
m0_337 -> m0_335  [key=0, style=bold, color=blue];
m0_343 -> m0_344  [key=0, style=solid];
m0_344 -> m0_345  [key=0, style=solid];
m0_344 -> m0_9  [key=2, style=dotted];
m0_344 -> m0_10  [key=2, style=dotted];
m0_344 -> m0_346  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_345 -> m0_343  [key=0, style=bold, color=blue];
m0_346 -> m0_347  [key=0, style=solid];
m0_347 -> m0_348  [key=0, style=solid];
m0_347 -> m0_349  [key=2, style=dotted];
m0_348 -> m0_346  [key=0, style=bold, color=blue];
m0_354 -> m0_355  [key=0, style=solid];
m0_355 -> m0_356  [key=0, style=solid];
m0_355 -> m0_9  [key=2, style=dotted];
m0_355 -> m0_10  [key=2, style=dotted];
m0_355 -> m0_357  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_356 -> m0_354  [key=0, style=bold, color=blue];
m0_357 -> m0_358  [key=0, style=solid];
m0_358 -> m0_359  [key=0, style=solid];
m0_358 -> m0_360  [key=2, style=dotted];
m0_359 -> m0_357  [key=0, style=bold, color=blue];
m0_375 -> m0_376  [key=0, style=solid];
m0_370 -> m0_371  [key=0, style=solid];
m0_374 -> m0_375  [key=0, style=solid];
m0_371 -> m0_372  [key=0, style=solid];
m0_371 -> m0_373  [key=2, style=dotted];
m0_372 -> m0_370  [key=0, style=bold, color=blue];
m0_376 -> m0_374  [key=0, style=bold, color=blue];
m0_385 -> m0_386  [key=0, style=solid];
m0_381 -> m0_382  [key=0, style=solid];
m0_384 -> m0_385  [key=0, style=solid];
m0_382 -> m0_383  [key=0, style=solid];
m0_382 -> m0_6  [key=2, style=dotted];
m0_383 -> m0_381  [key=0, style=bold, color=blue];
m0_386 -> m0_384  [key=0, style=bold, color=blue];
m0_391 -> m0_392  [key=0, style=solid];
m0_392 -> m0_393  [key=0, style=solid];
m0_392 -> m0_394  [key=2, style=dotted];
m0_393 -> m0_391  [key=0, style=bold, color=blue];
m0_407 -> m0_408  [key=0, style=solid];
m0_402 -> m0_403  [key=0, style=solid];
m0_406 -> m0_407  [key=0, style=solid];
m0_403 -> m0_404  [key=0, style=solid];
m0_403 -> m0_405  [key=2, style=dotted];
m0_404 -> m0_402  [key=0, style=bold, color=blue];
m0_408 -> m0_406  [key=0, style=bold, color=blue];
m0_413 -> m0_414  [key=0, style=solid];
m0_414 -> m0_415  [key=0, style=solid];
m0_414 -> m0_275  [key=2, style=dotted];
m0_415 -> m0_413  [key=0, style=bold, color=blue];
m0_420 -> m0_421  [key=0, style=solid];
m0_421 -> m0_422  [key=0, style=solid];
m0_421 -> m0_423  [key=2, style=dotted];
m0_422 -> m0_420  [key=0, style=bold, color=blue];
m0_429 -> m0_430  [key=0, style=solid];
m0_430 -> m0_431  [key=0, style=solid];
m0_430 -> m0_6  [key=2, style=dotted];
m0_431 -> m0_429  [key=0, style=bold, color=blue];
m0_443 -> m0_444  [key=0, style=solid];
m0_438 -> m0_439  [key=0, style=solid];
m0_439 -> m0_440  [key=0, style=solid];
m0_439 -> m0_441  [key=2, style=dotted];
m0_440 -> m0_438  [key=0, style=bold, color=blue];
m0_444 -> m0_442  [key=0, style=bold, color=blue];
m0_377 -> m0_378  [key=0, style=solid];
m0_377 -> m0_379  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_377 -> m0_385  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_378 -> m0_379  [key=0, style=solid];
m0_378 -> m0_9  [key=2, style=dotted];
m0_378 -> m0_10  [key=2, style=dotted];
m0_378 -> m0_381  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_379 -> m0_380  [key=0, style=solid];
m0_379 -> m0_368  [key=2, style=dotted];
m0_379 -> m0_369  [key=2, style=dotted];
m0_379 -> m0_384  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_380 -> m0_377  [key=0, style=bold, color=blue];
m0_395 -> m0_396  [key=0, style=solid];
m0_395 -> m0_397  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResultType"];
m0_395 -> m0_398  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_395 -> m0_407  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_395 -> m0_399  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResultType"];
m0_396 -> m0_397  [key=0, style=solid];
m0_396 -> m0_9  [key=2, style=dotted];
m0_396 -> m0_10  [key=2, style=dotted];
m0_396 -> m0_402  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_396 -> m0_398  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_396 -> m0_400  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_397 -> m0_398  [key=0, style=solid];
m0_397 -> m0_399  [key=0, style=solid];
m0_398 -> m0_401  [key=0, style=solid];
m0_398 -> m0_368  [key=2, style=dotted];
m0_398 -> m0_369  [key=2, style=dotted];
m0_398 -> m0_406  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_399 -> m0_400  [key=0, style=solid];
m0_399 -> m0_401  [key=0, style=solid];
m0_400 -> m0_401  [key=0, style=solid];
m0_400 -> m0_368  [key=2, style=dotted];
m0_400 -> m0_331  [key=2, style=dotted];
m0_401 -> m0_395  [key=0, style=bold, color=blue];
m0_48 -> m0_49  [key=0, style=solid];
m0_48 -> m0_50  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m0_49 -> m0_50  [key=0, style=solid];
m0_49 -> m0_9  [key=2, style=dotted];
m0_49 -> m0_10  [key=2, style=dotted];
m0_49 -> m0_52  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_50 -> m0_51  [key=0, style=solid];
m0_50 -> m0_36  [key=2, style=dotted];
m0_50 -> m0_12  [key=2, style=dotted];
m0_51 -> m0_48  [key=0, style=bold, color=blue];
m0_119 -> m0_120  [key=0, style=solid];
m0_120 -> m0_121  [key=0, style=solid];
m0_120 -> m0_115  [key=2, style=dotted];
m0_120 -> m0_70  [key=2, style=dotted];
m0_120 -> m0_122  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_121 -> m0_122  [key=0, style=solid];
m0_121 -> m0_9  [key=2, style=dotted];
m0_121 -> m0_10  [key=2, style=dotted];
m0_121 -> m0_124  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_122 -> m0_123  [key=0, style=solid];
m0_122 -> m0_36  [key=2, style=dotted];
m0_122 -> m0_12  [key=2, style=dotted];
m0_123 -> m0_119  [key=0, style=bold, color=blue];
m0_24 -> m0_25  [key=0, style=solid];
m0_24 -> m0_26  [key=1, style=dashed, color=darkseagreen4, label=double];
m0_25 -> m0_26  [key=0, style=solid];
m0_25 -> m0_9  [key=2, style=dotted];
m0_25 -> m0_10  [key=2, style=dotted];
m0_25 -> m0_28  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_26 -> m0_27  [key=0, style=solid];
m0_26 -> m0_20  [key=2, style=dotted];
m0_27 -> m0_24  [key=0, style=bold, color=blue];
m0_267 -> m0_268  [key=0, style=solid];
m0_268 -> m0_269  [key=0, style=solid];
m0_268 -> m0_213  [key=2, style=dotted];
m0_268 -> m0_270  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_269 -> m0_270  [key=0, style=solid];
m0_269 -> m0_9  [key=2, style=dotted];
m0_269 -> m0_10  [key=2, style=dotted];
m0_269 -> m0_272  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_270 -> m0_271  [key=0, style=solid];
m0_270 -> m0_36  [key=2, style=dotted];
m0_270 -> m0_12  [key=2, style=dotted];
m0_271 -> m0_267  [key=0, style=bold, color=blue];
m0_226 -> m0_227  [key=0, style=solid];
m0_227 -> m0_228  [key=0, style=solid];
m0_227 -> m0_79  [key=2, style=dotted];
m0_227 -> m0_70  [key=2, style=dotted];
m0_227 -> m0_229  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_228 -> m0_229  [key=0, style=solid];
m0_228 -> m0_9  [key=2, style=dotted];
m0_228 -> m0_10  [key=2, style=dotted];
m0_228 -> m0_231  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_229 -> m0_230  [key=0, style=solid];
m0_229 -> m0_36  [key=2, style=dotted];
m0_229 -> m0_12  [key=2, style=dotted];
m0_230 -> m0_226  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_6  [key=2, style=dotted];
m0_1 -> m0_3  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
m0_1 -> m0_14  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
m0_2 -> m0_3  [key=0, style=solid];
m0_2 -> m0_7  [key=2, style=dotted];
m0_2 -> m0_8  [key=2, style=dotted];
m0_2 -> m0_4  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_3 -> m0_4  [key=0, style=solid];
m0_3 -> m0_9  [key=2, style=dotted];
m0_3 -> m0_10  [key=2, style=dotted];
m0_3 -> m0_13  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_4 -> m0_5  [key=0, style=solid];
m0_4 -> m0_11  [key=2, style=dotted];
m0_4 -> m0_12  [key=2, style=dotted];
m0_5 -> m0_0  [key=0, style=bold, color=blue];
m0_217 -> m0_218  [key=0, style=solid];
m0_218 -> m0_219  [key=0, style=solid];
m0_218 -> m0_213  [key=2, style=dotted];
m0_218 -> m0_70  [key=2, style=dotted];
m0_218 -> m0_220  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_219 -> m0_220  [key=0, style=solid];
m0_219 -> m0_9  [key=2, style=dotted];
m0_219 -> m0_10  [key=2, style=dotted];
m0_219 -> m0_222  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_220 -> m0_221  [key=0, style=solid];
m0_220 -> m0_36  [key=2, style=dotted];
m0_220 -> m0_12  [key=2, style=dotted];
m0_221 -> m0_217  [key=0, style=bold, color=blue];
m0_208 -> m0_209  [key=0, style=solid];
m0_209 -> m0_210  [key=0, style=solid];
m0_209 -> m0_213  [key=2, style=dotted];
m0_209 -> m0_70  [key=2, style=dotted];
m0_209 -> m0_211  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_210 -> m0_211  [key=0, style=solid];
m0_210 -> m0_9  [key=2, style=dotted];
m0_210 -> m0_10  [key=2, style=dotted];
m0_210 -> m0_214  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_211 -> m0_212  [key=0, style=solid];
m0_211 -> m0_36  [key=2, style=dotted];
m0_211 -> m0_12  [key=2, style=dotted];
m0_212 -> m0_208  [key=0, style=bold, color=blue];
m0_127 -> m0_128  [key=0, style=solid];
m0_128 -> m0_129  [key=0, style=solid];
m0_128 -> m0_115  [key=2, style=dotted];
m0_128 -> m0_70  [key=2, style=dotted];
m0_128 -> m0_130  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_129 -> m0_130  [key=0, style=solid];
m0_129 -> m0_9  [key=2, style=dotted];
m0_129 -> m0_10  [key=2, style=dotted];
m0_129 -> m0_132  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_130 -> m0_131  [key=0, style=solid];
m0_130 -> m0_36  [key=2, style=dotted];
m0_130 -> m0_12  [key=2, style=dotted];
m0_131 -> m0_127  [key=0, style=bold, color=blue];
m0_409 -> m0_410  [key=0, style=solid];
m0_409 -> m0_411  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue"];
m0_410 -> m0_411  [key=0, style=solid];
m0_410 -> m0_9  [key=2, style=dotted];
m0_410 -> m0_10  [key=2, style=dotted];
m0_410 -> m0_413  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_411 -> m0_412  [key=0, style=solid];
m0_411 -> m0_105  [key=2, style=dotted];
m0_412 -> m0_409  [key=0, style=bold, color=blue];
m0_84 -> m0_85  [key=0, style=solid];
m0_85 -> m0_86  [key=0, style=solid];
m0_85 -> m0_79  [key=2, style=dotted];
m0_85 -> m0_70  [key=2, style=dotted];
m0_85 -> m0_87  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_86 -> m0_87  [key=0, style=solid];
m0_86 -> m0_9  [key=2, style=dotted];
m0_86 -> m0_10  [key=2, style=dotted];
m0_86 -> m0_89  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_87 -> m0_88  [key=0, style=solid];
m0_87 -> m0_36  [key=2, style=dotted];
m0_87 -> m0_12  [key=2, style=dotted];
m0_88 -> m0_84  [key=0, style=bold, color=blue];
m0_64 -> m0_65  [key=0, style=solid];
m0_65 -> m0_66  [key=0, style=solid];
m0_65 -> m0_69  [key=2, style=dotted];
m0_65 -> m0_70  [key=2, style=dotted];
m0_65 -> m0_67  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_66 -> m0_67  [key=0, style=solid];
m0_66 -> m0_9  [key=2, style=dotted];
m0_66 -> m0_10  [key=2, style=dotted];
m0_66 -> m0_71  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_67 -> m0_68  [key=0, style=solid];
m0_67 -> m0_36  [key=2, style=dotted];
m0_67 -> m0_12  [key=2, style=dotted];
m0_68 -> m0_64  [key=0, style=bold, color=blue];
m0_135 -> m0_136  [key=0, style=solid];
m0_136 -> m0_137  [key=0, style=solid];
m0_136 -> m0_140  [key=2, style=dotted];
m0_136 -> m0_138  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_137 -> m0_138  [key=0, style=solid];
m0_137 -> m0_9  [key=2, style=dotted];
m0_137 -> m0_10  [key=2, style=dotted];
m0_137 -> m0_141  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_138 -> m0_139  [key=0, style=solid];
m0_138 -> m0_105  [key=2, style=dotted];
m0_139 -> m0_135  [key=0, style=bold, color=blue];
m0_16 -> m0_17  [key=0, style=solid];
m0_16 -> m0_18  [key=1, style=dashed, color=darkseagreen4, label=long];
m0_17 -> m0_18  [key=0, style=solid];
m0_17 -> m0_9  [key=2, style=dotted];
m0_17 -> m0_10  [key=2, style=dotted];
m0_17 -> m0_21  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_18 -> m0_19  [key=0, style=solid];
m0_18 -> m0_20  [key=2, style=dotted];
m0_19 -> m0_16  [key=0, style=bold, color=blue];
m0_318 -> m0_319  [key=0, style=solid];
m0_318 -> m0_321  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_318 -> m0_322  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_319 -> m0_320  [key=0, style=solid];
m0_319 -> m0_9  [key=2, style=dotted];
m0_319 -> m0_10  [key=2, style=dotted];
m0_319 -> m0_324  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_319 -> m0_321  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_319 -> m0_322  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_321 -> m0_322  [key=0, style=solid];
m0_321 -> m0_105  [key=2, style=dotted];
m0_322 -> m0_323  [key=0, style=solid];
m0_322 -> m0_313  [key=2, style=dotted];
m0_322 -> m0_105  [key=2, style=dotted];
m0_320 -> m0_321  [key=0, style=solid];
m0_320 -> m0_322  [key=0, style=solid];
m0_323 -> m0_318  [key=0, style=bold, color=blue];
m0_424 -> m0_425  [key=0, style=solid];
m0_425 -> m0_426  [key=0, style=solid];
m0_425 -> m0_6  [key=2, style=dotted];
m0_425 -> m0_427  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_426 -> m0_427  [key=0, style=solid];
m0_426 -> m0_9  [key=2, style=dotted];
m0_426 -> m0_10  [key=2, style=dotted];
m0_426 -> m0_429  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_427 -> m0_428  [key=0, style=solid];
m0_427 -> m0_105  [key=2, style=dotted];
m0_428 -> m0_424  [key=0, style=bold, color=blue];
m0_160 -> m0_161  [key=0, style=solid];
m0_160 -> m0_162  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m0_161 -> m0_162  [key=0, style=solid];
m0_161 -> m0_9  [key=2, style=dotted];
m0_161 -> m0_10  [key=2, style=dotted];
m0_161 -> m0_164  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_162 -> m0_163  [key=0, style=solid];
m0_162 -> m0_105  [key=2, style=dotted];
m0_163 -> m0_160  [key=0, style=bold, color=blue];
m0_292 -> m0_293  [key=0, style=solid];
m0_292 -> m0_294  [key=1, style=dashed, color=darkseagreen4, label="int?"];
m0_293 -> m0_294  [key=0, style=solid];
m0_293 -> m0_9  [key=2, style=dotted];
m0_293 -> m0_10  [key=2, style=dotted];
m0_293 -> m0_296  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_294 -> m0_295  [key=0, style=solid];
m0_294 -> m0_105  [key=2, style=dotted];
m0_295 -> m0_292  [key=0, style=bold, color=blue];
m0_234 -> m0_235  [key=0, style=solid];
m0_235 -> m0_236  [key=0, style=solid];
m0_235 -> m0_239  [key=2, style=dotted];
m0_235 -> m0_237  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_236 -> m0_237  [key=0, style=solid];
m0_236 -> m0_9  [key=2, style=dotted];
m0_236 -> m0_10  [key=2, style=dotted];
m0_236 -> m0_240  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_237 -> m0_238  [key=0, style=solid];
m0_237 -> m0_36  [key=2, style=dotted];
m0_237 -> m0_12  [key=2, style=dotted];
m0_238 -> m0_234  [key=0, style=bold, color=blue];
m0_199 -> m0_200  [key=0, style=solid];
m0_200 -> m0_201  [key=0, style=solid];
m0_200 -> m0_204  [key=2, style=dotted];
m0_200 -> m0_202  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_201 -> m0_202  [key=0, style=solid];
m0_201 -> m0_9  [key=2, style=dotted];
m0_201 -> m0_10  [key=2, style=dotted];
m0_201 -> m0_205  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_202 -> m0_203  [key=0, style=solid];
m0_202 -> m0_105  [key=2, style=dotted];
m0_203 -> m0_199  [key=0, style=bold, color=blue];
m0_283 -> m0_284  [key=0, style=solid];
m0_284 -> m0_285  [key=0, style=solid];
m0_284 -> m0_79  [key=2, style=dotted];
m0_284 -> m0_286  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_285 -> m0_286  [key=0, style=solid];
m0_285 -> m0_9  [key=2, style=dotted];
m0_285 -> m0_10  [key=2, style=dotted];
m0_285 -> m0_288  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_286 -> m0_287  [key=0, style=solid];
m0_286 -> m0_36  [key=2, style=dotted];
m0_286 -> m0_12  [key=2, style=dotted];
m0_287 -> m0_283  [key=0, style=bold, color=blue];
m0_101 -> m0_102  [key=0, style=solid];
m0_101 -> m0_103  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Colors"];
m0_102 -> m0_103  [key=0, style=solid];
m0_102 -> m0_9  [key=2, style=dotted];
m0_102 -> m0_10  [key=2, style=dotted];
m0_102 -> m0_106  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_103 -> m0_104  [key=0, style=solid];
m0_103 -> m0_105  [key=2, style=dotted];
m0_103 -> m0_103  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Colors"];
m0_104 -> m0_101  [key=0, style=bold, color=blue];
m0_445 -> m0_446  [key=0, style=solid];
m0_445 -> m0_447  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.FakeImmutableOptions"];
m0_446 -> m0_447  [key=0, style=solid];
m0_446 -> m0_449  [key=2, style=dotted];
m0_446 -> m0_10  [key=2, style=dotted];
m0_447 -> m0_448  [key=0, style=solid];
m0_447 -> m0_105  [key=2, style=dotted];
m0_448 -> m0_445  [key=0, style=bold, color=blue];
m0_276 -> m0_277  [key=0, style=solid];
m0_276 -> m0_278  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_277 -> m0_278  [key=0, style=solid];
m0_277 -> m0_9  [key=2, style=dotted];
m0_277 -> m0_10  [key=2, style=dotted];
m0_277 -> m0_280  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_278 -> m0_279  [key=0, style=solid];
m0_278 -> m0_105  [key=2, style=dotted];
m0_279 -> m0_276  [key=0, style=bold, color=blue];
m0_339 -> m0_340  [key=0, style=solid];
m0_340 -> m0_341  [key=0, style=solid];
m0_340 -> m0_340  [key=3, color=darkorchid, style=bold, label="Local variable System.Action test"];
m0_341 -> m0_342  [key=0, style=solid];
m0_341 -> m0_331  [key=2, style=dotted];
m0_342 -> m0_339  [key=0, style=bold, color=blue];
m0_189 -> m0_190  [key=0, style=solid];
m0_190 -> m0_191  [key=0, style=solid];
m0_190 -> m0_194  [key=2, style=dotted];
m0_190 -> m0_70  [key=2, style=dotted];
m0_190 -> m0_192  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_191 -> m0_192  [key=0, style=solid];
m0_191 -> m0_9  [key=2, style=dotted];
m0_191 -> m0_10  [key=2, style=dotted];
m0_191 -> m0_195  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_192 -> m0_193  [key=0, style=solid];
m0_192 -> m0_36  [key=2, style=dotted];
m0_192 -> m0_12  [key=2, style=dotted];
m0_193 -> m0_189  [key=0, style=bold, color=blue];
m0_450 -> m0_14  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
m0_451 -> m0_182  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m0_451 -> m0_186  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m0_452 -> m0_375  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_453 -> m0_385  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_454 -> m0_407  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_455 -> m0_443  [key=1, style=dashed, color=darkseagreen4, label=int];
m1_28 -> m1_77  [key=0, style=solid, color=green];
m1_28 -> m1_46  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Collections.Generic.IEnumerable<System.Type> types"];
m1_28 -> m1_34  [key=3, color=darkorchid, style=bold, label="Parameter variable CommandLine.Error[] errors"];
m1_77 -> m1_78  [key=0, style=solid, color=green];
m1_77 -> m1_79  [key=2, style=dotted, color=green];
m1_78 -> m1_28  [key=0, style=bold, color=blue];
m1_36 -> m1_42  [key=0, style=solid, color=green];
m1_36 -> m1_51  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m1_36 -> m1_54  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>"];
m1_36 -> m1_59  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m1_42 -> m1_43  [key=0, style=solid, color=green];
m1_42 -> m1_44  [key=2, style=dotted, color=green];
m1_42 -> m1_45  [key=2, style=dotted, color=green];
m1_42 -> m1_32  [key=2, style=dotted, color=green];
m1_42 -> m1_46  [key=2, style=dotted, color=green];
m1_42 -> m1_47  [key=2, style=dotted, color=green];
m1_42 -> m1_48  [key=2, style=dotted, color=green];
m1_42 -> m1_29  [key=2, style=dotted, color=green];
m1_42 -> m1_49  [key=2, style=dotted, color=green];
m1_42 -> m1_50  [key=1, style=dashed, color=green, label="lambda expression"];
m1_42 -> m1_53  [key=1, style=dashed, color=green, label="lambda expression"];
m1_42 -> m1_61  [key=1, style=dashed, color=green, label="lambda expression"];
m1_43 -> m1_36  [key=0, style=bold, color=blue];
m1_15 -> m1_16  [key=0, style=solid];
m1_50 -> m1_51  [key=0, style=solid];
m1_53 -> m1_54  [key=0, style=solid];
m1_61 -> m1_62  [key=0, style=solid, color=green];
m1_62 -> m1_63  [key=0, style=solid, color=green];
m1_63 -> m1_61  [key=0, style=bold, color=blue];
m1_38 -> m1_39  [key=0, style=solid];
m1_38 -> m1_40  [key=2, style=dotted];
m1_38 -> m1_41  [key=2, style=dotted];
m1_71 -> m1_72  [key=0, style=solid];
m1_71 -> m1_40  [key=2, style=dotted];
m1_51 -> m1_29  [key=2, style=dotted];
m1_51 -> m1_52  [key=0, style=solid];
m1_51 -> m1_40  [key=2, style=dotted];
m1_54 -> m1_55  [key=0, style=solid];
m1_54 -> m1_56  [key=2, style=dotted];
m1_54 -> m1_57  [key=2, style=dotted];
m1_54 -> m1_58  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_59 -> m1_29  [key=2, style=dotted];
m1_59 -> m1_60  [key=0, style=solid];
m1_59 -> m1_40  [key=2, style=dotted];
m1_52 -> m1_50  [key=0, style=bold, color=blue];
m1_55 -> m1_53  [key=0, style=bold, color=blue];
m1_5 -> m1_6  [key=0, style=solid];
m1_5 -> m1_9  [key=2, style=dotted];
m1_5 -> m1_11  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_12 -> m1_13  [key=0, style=solid];
m1_12 -> m1_14  [key=2, style=dotted];
m1_6 -> m1_7  [key=0, style=solid];
m1_6 -> m1_10  [key=2, style=dotted];
m1_6 -> m1_15  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_16 -> m1_17  [key=0, style=solid];
m1_16 -> m1_18  [key=2, style=dotted];
m1_4 -> m1_5  [key=0, style=solid];
m1_4 -> m1_12  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_4 -> m1_6  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_4 -> m1_16  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_37 -> m1_38  [key=0, style=solid];
m1_39 -> m1_37  [key=0, style=bold, color=blue];
m1_70 -> m1_71  [key=0, style=solid];
m1_73 -> m1_74  [key=0, style=solid];
m1_72 -> m1_70  [key=0, style=bold, color=blue];
m1_58 -> m1_59  [key=0, style=solid];
m1_60 -> m1_58  [key=0, style=bold, color=blue];
m1_11 -> m1_12  [key=0, style=solid];
m1_13 -> m1_11  [key=0, style=bold, color=blue];
m1_7 -> m1_8  [key=0, style=solid];
m1_17 -> m1_15  [key=0, style=bold, color=blue];
m1_8 -> m1_4  [key=0, style=bold, color=blue];
m1_74 -> m1_75  [key=0, style=solid];
m1_74 -> m1_76  [key=2, style=dotted];
m1_75 -> m1_73  [key=0, style=bold, color=blue];
m1_34 -> m1_64  [key=0, style=solid];
m1_34 -> m1_71  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_64 -> m1_65  [key=0, style=solid];
m1_64 -> m1_66  [key=2, style=dotted];
m1_64 -> m1_67  [key=2, style=dotted];
m1_64 -> m1_68  [key=2, style=dotted];
m1_64 -> m1_69  [key=2, style=dotted];
m1_64 -> m1_70  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_64 -> m1_73  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_65 -> m1_34  [key=0, style=bold, color=blue];
m1_3 -> m1_20  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<System.Type>"];
m1_3 -> m1_24  [key=1, style=dashed, color=green, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>"];
m1_3 -> m1_19  [key=0, style=solid];
m1_3 -> m1_21  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m1_3 -> m1_22  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_3 -> m1_38  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_3 -> m1_23  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<System.Type>"];
m1_3 -> m1_28  [key=3, color=darkorchid, style=bold, label="method methodReturn CommandLine.ParserResult<object> Choose"];
m1_20 -> m1_25  [key=0, style=solid, color=green];
m1_20 -> m1_27  [key=2, style=dotted, color=green];
m1_20 -> m1_28  [key=2, style=dotted, color=green];
m1_19 -> m1_20  [key=0, style=solid, color=green];
m1_19 -> m1_21  [key=0, style=solid];
m1_19 -> m1_26  [key=2, style=dotted];
m1_24 -> m1_25  [key=0, style=solid, color=green];
m1_24 -> m1_31  [key=2, style=dotted, color=green];
m1_24 -> m1_32  [key=2, style=dotted, color=green];
m1_24 -> m1_33  [key=2, style=dotted, color=green];
m1_24 -> m1_34  [key=2, style=dotted, color=green];
m1_24 -> m1_28  [key=2, style=dotted, color=green];
m1_24 -> m1_35  [key=2, style=dotted, color=green];
m1_24 -> m1_36  [key=2, style=dotted, color=green];
m1_22 -> m1_24  [key=1, style=dashed, color=green, label=preprocCompare];
m1_22 -> m1_22  [key=3, color=darkorchid, style=bold, label="Local variable System.Func<string, bool> preprocCompare"];
m1_22 -> m1_23  [key=0, style=solid];
m1_22 -> m1_38  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_23 -> m1_24  [key=0, style=solid, color=green];
m1_23 -> m1_30  [key=2, style=dotted];
m1_21 -> m1_22  [key=0, style=solid];
m1_21 -> m1_29  [key=2, style=dotted];
m1_21 -> m1_38  [key=1, style=dashed, color=darkseagreen4, label=firstArg];
m1_25 -> m1_3  [key=0, style=bold, color=blue];
m1_0 -> m1_3  [key=3, color=darkorchid, style=bold, label="method methodReturn CommandLine.ParserResult<object> Choose"];
m1_0 -> m1_1  [key=0, style=solid];
m1_0 -> m1_5  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_0 -> m1_12  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_0 -> m1_6  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_0 -> m1_16  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_1 -> m1_3  [key=2, style=dotted];
m1_1 -> m1_1  [key=3, color=darkorchid, style=bold, label="method methodReturn RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error> "];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_4  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_2 -> m1_0  [key=0, style=bold, color=blue];
m1_82 -> m1_38  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_83 -> m1_38  [key=1, style=dashed, color=darkseagreen4, label=firstArg];
m1_87 -> m1_71  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_88 -> m1_71  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_84 -> m1_51  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m1_84 -> m1_54  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m1_84 -> m1_59  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m1_85 -> m1_51  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_85 -> m1_54  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_85 -> m1_59  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_86 -> m1_54  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>"];
m1_80 -> m1_5  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_80 -> m1_12  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_80 -> m1_6  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_80 -> m1_16  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_81 -> m1_12  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_81 -> m1_16  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
}
