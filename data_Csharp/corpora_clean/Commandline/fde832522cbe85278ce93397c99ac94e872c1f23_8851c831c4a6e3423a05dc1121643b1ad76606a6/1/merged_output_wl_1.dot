digraph  {
m0_41 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="112-112"];
m0_42 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="117-121"];
m0_43 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="InstanceBuilderTests.cs", label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="124-124"];
m0_44 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="112-112"];
m0_152 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="385-385"];
m0_153 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndSeparator>>(() => new FakeOptionsWithSequenceAndSeparator()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="390-394"];
m0_154 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="InstanceBuilderTests.cs", label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="397-397"];
m0_155 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="385-385"];
m0_63 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="6-6"];
m0_55 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", span="6-6"];
m0_266 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="636-636"];
m0_267 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="641-645"];
m0_268 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="InstanceBuilderTests.cs", label="Assert.True(expected.Equals(result.Value.StringValue))", span="648-648"];
m0_269 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="636-636"];
m0_305 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="740-740"];
m0_306 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNullables>>(() => new FakeOptionsWithNullables()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="745-749"];
m0_307 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="InstanceBuilderTests.cs", label="expected.ShouldBeEquivalentTo(result.Value.NullableLong)", span="752-752"];
m0_308 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="740-740"];
m0_79 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="320-320"];
m0_167 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="428-428"];
m0_170 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithValues>>(() => new FakeOptionsWithValues()),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="441-448"];
m0_169 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs", label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="438-438"];
m0_171 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="451-451"];
m0_168 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="431-437"];
m0_172 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="428-428"];
m0_258 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="615-615"];
m0_260 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="621-625"];
m0_261 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="628-628"];
m0_259 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="618-618"];
m0_262 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="615-615"];
m0_109 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="11-11"];
m0_9 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68"];
m0_203 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", span="4-4"];
m0_74 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="194-194"];
m0_76 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraintAsValue>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="200-204"];
m0_75 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="197-197"];
m0_77 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="207-207"];
m0_78 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="194-194"];
m0_246 [cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", file="InstanceBuilderTests.cs", label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="276-276"];
m0_92 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="233-233"];
m0_94 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()),\r\n                new[] { ''one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="239-243"];
m0_93 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="236-236"];
m0_95 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="246-246"];
m0_96 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="233-233"];
m0_183 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11"];
m0_312 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="760-760"];
m0_313 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithFSharpOption>>(() => new FakeOptionsWithFSharpOption()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="765-769"];
m0_314 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="InstanceBuilderTests.cs", label="result.Value.FileName != null", span="772-772"];
m0_315 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="InstanceBuilderTests.cs", label="expectedValue.ShouldBeEquivalentTo(result.Value.FileName.Value)", span="774-774"];
m0_316 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="InstanceBuilderTests.cs", label="expectedSome.ShouldBeEquivalentTo(FSharpOption<string>.get_IsSome(result.Value.FileName))", span="776-776"];
m0_317 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="760-760"];
m0_304 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", span="4-4"];
m0_6 [cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6"];
m0_250 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="596-596"];
m0_252 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="602-606"];
m0_253 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="609-609"];
m0_251 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="599-599"];
m0_254 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="596-596"];
m0_110 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="276-276"];
m0_112 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''3'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="282-286"];
m0_113 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="289-289"];
m0_111 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="279-279"];
m0_114 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="276-276"];
m0_366 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", span="854-854"];
m0_367 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNamedAndEmptySets>>(() => new FakeOptionsWithNamedAndEmptySets()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="857-861"];
m0_368 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", file="InstanceBuilderTests.cs", label="result.Errors.Should().HaveCount(x => x == expected)", span="864-864"];
m0_369 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", span="854-854"];
m0_7 [cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="353-353"];
m0_375 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithNamedAndEmptySets.FakeOptionsWithNamedAndEmptySets()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithNamedAndEmptySets.FakeOptionsWithNamedAndEmptySets()", span="4-4"];
m0_105 [cluster="Unk.ShouldBeEquivalentTo", file="InstanceBuilderTests.cs", label="Entry Unk.ShouldBeEquivalentTo", span=""];
m0_396 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="903-903"];
m0_397 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithScalarValueAndSequenceStringAdjacent>>(() => new FakeOptionsWithScalarValueAndSequenceStringAdjacent()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="908-912"];
m0_398 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="InstanceBuilderTests.cs", label="expected.ShouldBeEquivalentTo(result.Value)", span="915-915"];
m0_399 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="903-903"];
m0_83 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="6-6"];
m0_144 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="363-363"];
m0_145 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceWithoutRange>>(() => new FakeOptionsWithSequenceWithoutRange()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="368-372"];
m0_146 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="InstanceBuilderTests.cs", label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="375-375"];
m0_147 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="363-363"];
m0_56 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="157-157"];
m0_57 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraint()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="162-166"];
m0_58 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="InstanceBuilderTests.cs", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="169-169"];
m0_59 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="157-157"];
m0_32 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="90-90"];
m0_33 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequence>>(() => new FakeOptionsWithSequence()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="95-99"];
m0_34 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="InstanceBuilderTests.cs", label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="102-102"];
m0_35 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="90-90"];
m0_184 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="445-445"];
m0_294 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="702-702"];
m0_295 [cluster="lambda expression", color=green, community=0, file="InstanceBuilderTests.cs", label="0: new FakeOptions()", span="702-702"];
m0_296 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="702-702"];
m0_338 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinZero>>(() => new FakeOptionsWithMinZero()),\r\n                new string[] {},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="810-814"];
m0_349 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMaxZero>>(() => new FakeOptionsWithMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="824-828"];
m0_360 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinMaxZero>>(() => new FakeOptionsWithMinMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="838-842"];
m0_22 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptions()", span="49-49"];
m0_46 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptions()", span="118-118"];
m0_239 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptions()", span="565-565"];
m0_248 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptions()", span="584-584"];
m0_256 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptions()", span="603-603"];
m0_264 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptions()", span="622-622"];
m0_271 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptions()", span="642-642"];
m0_287 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptions()", span="683-683"];
m0_384 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptions()", span="873-873"];
m0_13 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="28-28"];
m0_21 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="49-49"];
m0_28 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="72-72"];
m0_37 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="96-96"];
m0_45 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="118-118"];
m0_52 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="141-141"];
m0_60 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="163-163"];
m0_71 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="182-182"];
m0_80 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="201-201"];
m0_89 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="221-221"];
m0_97 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="240-240"];
m0_106 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="264-264"];
m0_116 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="283-283"];
m0_124 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="302-302"];
m0_132 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="321-321"];
m0_141 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="346-346"];
m0_148 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="369-369"];
m0_156 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="391-391"];
m0_164 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="413-413"];
m0_173 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="442-442"];
m0_176 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="443-445"];
m0_194 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="468-468"];
m0_204 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="488-488"];
m0_212 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="508-508"];
m0_221 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="528-528"];
m0_229 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="546-546"];
m0_238 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="565-565"];
m0_247 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="584-584"];
m0_255 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="603-603"];
m0_263 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="622-622"];
m0_270 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="642-642"];
m0_278 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="661-661"];
m0_286 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="683-683"];
m0_301 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="724-724"];
m0_309 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="746-746"];
m0_319 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="766-766"];
m0_329 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="790-790"];
m0_337 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="810-814"];
m0_339 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="810-814"];
m0_340 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="811-811"];
m0_348 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="824-828"];
m0_350 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="824-828"];
m0_351 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="825-825"];
m0_359 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="838-842"];
m0_361 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="838-842"];
m0_362 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="839-839"];
m0_372 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="858-858"];
m0_383 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="873-873"];
m0_393 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="890-890"];
m0_400 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="909-909"];
m0_14 [cluster="lambda expression", file="InstanceBuilderTests.cs", label=fakeOptions, span="28-28"];
m0_23 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="49-49"];
m0_47 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="118-118"];
m0_240 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="565-565"];
m0_249 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="584-584"];
m0_257 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="603-603"];
m0_265 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="622-622"];
m0_272 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="642-642"];
m0_288 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="683-683"];
m0_385 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="873-873"];
m0_15 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="28-28"];
m0_30 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="72-72"];
m0_29 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithDouble()", span="72-72"];
m0_39 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="96-96"];
m0_38 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSequence()", span="96-96"];
m0_54 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="141-141"];
m0_53 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="141-141"];
m0_62 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="163-163"];
m0_61 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="163-163"];
m0_73 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="182-182"];
m0_72 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="182-182"];
m0_82 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="201-201"];
m0_81 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="201-201"];
m0_91 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="221-221"];
m0_90 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="221-221"];
m0_99 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="240-240"];
m0_98 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="240-240"];
m0_108 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="264-264"];
m0_107 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithEnum()", span="264-264"];
m0_118 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="283-283"];
m0_117 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithEnum()", span="283-283"];
m0_126 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="302-302"];
m0_125 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithEnum()", span="302-302"];
m0_134 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="321-321"];
m0_133 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithEnum()", span="321-321"];
m0_143 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="346-346"];
m0_142 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithValues()", span="346-346"];
m0_150 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="369-369"];
m0_149 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSequenceWithoutRange()", span="369-369"];
m0_158 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="391-391"];
m0_157 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSequenceAndSeparator()", span="391-391"];
m0_166 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="413-413"];
m0_165 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSequenceAndSeparator()", span="413-413"];
m0_175 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="442-442"];
m0_174 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithValues()", span="442-442"];
m0_178 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="443-445"];
m0_177 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="444-445"];
m0_181 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="445-445"];
m0_185 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="445-445"];
m0_196 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="468-468"];
m0_195 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSets()", span="468-468"];
m0_206 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="488-488"];
m0_205 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionWithRequiredAndSet()", span="488-488"];
m0_214 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="508-508"];
m0_213 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionWithRequiredAndSet()", span="508-508"];
m0_223 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="528-528"];
m0_222 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionWithRequiredAndSet()", span="528-528"];
m0_231 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="546-546"];
m0_230 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionWithRequired()", span="546-546"];
m0_280 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="661-661"];
m0_279 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithRequiredValue()", span="661-661"];
m0_303 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="724-724"];
m0_302 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithNullables()", span="724-724"];
m0_311 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="746-746"];
m0_310 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithNullables()", span="746-746"];
m0_321 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="766-766"];
m0_320 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithFSharpOption()", span="766-766"];
m0_331 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="790-790"];
m0_330 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithFSharpOption()", span="790-790"];
m0_342 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="811-811"];
m0_341 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithMinZero()", span="811-811"];
m0_353 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="825-825"];
m0_352 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithMaxZero()", span="825-825"];
m0_364 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="839-839"];
m0_363 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithMinMaxZero()", span="839-839"];
m0_377 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="x == expected", span="864-864"];
m0_376 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="864-864"];
m0_374 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="858-858"];
m0_373 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithNamedAndEmptySets()", span="858-858"];
m0_387 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="x == expected", span="879-879"];
m0_386 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="879-879"];
m0_395 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="890-890"];
m0_394 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithRequiredValue()", span="890-890"];
m0_402 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="909-909"];
m0_401 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="909-909"];
m0_180 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="445-445"];
m0_182 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="445-445"];
m0_186 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="445-445"];
m0_378 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="864-864"];
m0_388 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="879-879"];
m0_11 [cluster="Unk.Equals", file="InstanceBuilderTests.cs", label="Entry Unk.Equals", span=""];
m0_31 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", span="4-4"];
m0_159 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="6-6"];
m0_179 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="31-31"];
m0_379 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", span="869-869"];
m0_380 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="872-876"];
m0_381 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="InstanceBuilderTests.cs", label="result.Errors.Should().HaveCount(x => x == expected)", span="879-879"];
m0_382 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", span="869-869"];
m0_193 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="298-298"];
m0_232 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4"];
m0_48 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="135-135"];
m0_49 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraint()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="140-144"];
m0_50 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="InstanceBuilderTests.cs", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="147-147"];
m0_51 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="135-135"];
m0_119 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="295-295"];
m0_121 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''Yellow'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="301-305"];
m0_122 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="308-308"];
m0_120 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="298-298"];
m0_123 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="295-295"];
m0_140 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6"];
m0_24 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="66-66"];
m0_25 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithDouble>>(() => new FakeOptionsWithDouble()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="71-75"];
m0_26 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="InstanceBuilderTests.cs", label="Assert.Equal(expected, result.Value.DoubleValue)", span="78-78"];
m0_27 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="66-66"];
m0_281 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", span="4-4"];
m0_365 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithMinMaxZero.FakeOptionsWithMinMaxZero()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMinMaxZero.FakeOptionsWithMinMaxZero()", span="6-6"];
m0_12 [cluster="Unk.True", file="InstanceBuilderTests.cs", label="Entry Unk.True", span=""];
m0_273 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="654-654"];
m0_275 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithRequiredValue>>(() => new FakeOptionsWithRequiredValue()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="660-664"];
m0_276 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="667-667"];
m0_274 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new MissingRequiredOptionError(NameInfo.EmptyName) }", span="657-657"];
m0_277 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="654-654"];
m0_233 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="558-558"];
m0_235 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="564-568"];
m0_234 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="561-561"];
m0_236 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="571-571"];
m0_237 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="558-558"];
m0_322 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()", span="6-6"];
m0_318 [cluster="Unk.get_IsSome", file="InstanceBuilderTests.cs", label="Entry Unk.get_IsSome", span=""];
m0_187 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
m0_0 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="18-18"];
m0_3 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => fakeOptions),\r\n                new[] { ''--help'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="27-31"];
m0_1 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs", label="var fakeOptions = new FakeOptions()", span="21-21"];
m0_4 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.Equals(result))", span="34-34"];
m0_2 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs", label="var expectedResult = ParserResult.Create(\r\n                ParserResultType.Options,\r\n                fakeOptions, new Error[] { new HelpRequestedError() })", span="22-24"];
m0_5 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="18-18"];
m0_224 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="539-539"];
m0_226 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequired>>(() => new FakeOptionWithRequired()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="545-549"];
m0_227 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="552-552"];
m0_225 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="542-542"];
m0_228 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="539-539"];
m0_215 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="519-519"];
m0_217 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="527-531"];
m0_218 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="534-534"];
m0_216 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs", label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="521-525"];
m0_219 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="519-519"];
m0_36 [cluster="Unk.SequenceEqual", file="InstanceBuilderTests.cs", label="Entry Unk.SequenceEqual", span=""];
m0_127 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="314-314"];
m0_129 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''RED'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="320-324"];
m0_130 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="327-327"];
m0_128 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="317-317"];
m0_131 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="314-314"];
m0_69 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="265-265"];
m0_389 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="884-884"];
m0_390 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithRequiredValue>>(() => new FakeOptionsWithRequiredValue()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="889-893"];
m0_391 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="InstanceBuilderTests.cs", label="expected.ShouldBeEquivalentTo(result.Value)", span="896-896"];
m0_392 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="884-884"];
m0_84 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="214-214"];
m0_86 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraint()),\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="220-224"];
m0_85 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="217-217"];
m0_87 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="227-227"];
m0_88 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="214-214"];
m0_64 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="175-175"];
m0_66 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraint()),\r\n                new[] { ''-s'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="181-185"];
m0_67 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="188-188"];
m0_65 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="178-178"];
m0_68 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="175-175"];
m0_135 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="333-333"];
m0_137 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithValues>>(() => new FakeOptionsWithValues()),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="345-349"];
m0_136 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="336-342"];
m0_138 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="352-352"];
m0_139 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="333-333"];
m0_403 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="6-6"];
m0_354 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithMaxZero.FakeOptionsWithMaxZero()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMaxZero.FakeOptionsWithMaxZero()", span="6-6"];
m0_371 [cluster="Unk.HaveCount", file="InstanceBuilderTests.cs", label="Entry Unk.HaveCount", span=""];
m0_197 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4"];
m0_70 [cluster="CommandLine.NameInfo.NameInfo(string, string)", file="InstanceBuilderTests.cs", label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20"];
m0_16 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="43-43"];
m0_17 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="48-52"];
m0_18 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="InstanceBuilderTests.cs", label="Assert.Equal(expected, result.Value.LongValue)", span="55-55"];
m0_19 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="43-43"];
m0_20 [cluster="Unk.Equal", file="InstanceBuilderTests.cs", label="Entry Unk.Equal", span=""];
m0_323 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="784-784"];
m0_324 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithFSharpOption>>(() => new FakeOptionsWithFSharpOption()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="789-793"];
m0_325 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="InstanceBuilderTests.cs", label="result.Value.Offset != null", span="796-796"];
m0_326 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="InstanceBuilderTests.cs", label="expectedValue.ShouldBeEquivalentTo(result.Value.Offset.Value)", span="798-798"];
m0_327 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="InstanceBuilderTests.cs", label="expectedSome.ShouldBeEquivalentTo(FSharpOption<int>.get_IsSome(result.Value.Offset))", span="800-800"];
m0_328 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="784-784"];
m0_151 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="6-6"];
m0_160 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="407-407"];
m0_161 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndSeparator>>(() => new FakeOptionsWithSequenceAndSeparator()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="412-416"];
m0_162 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="InstanceBuilderTests.cs", label="expected.ShouldBeEquivalentTo(result.Value.StringSequence)", span="419-419"];
m0_163 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="407-407"];
m0_220 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="287-287"];
m0_297 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="718-718"];
m0_298 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNullables>>(() => new FakeOptionsWithNullables()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="723-727"];
m0_299 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="InstanceBuilderTests.cs", label="expected.ShouldBeEquivalentTo(result.Value.NullableInt)", span="730-730"];
m0_300 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="718-718"];
m0_241 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="577-577"];
m0_243 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="583-587"];
m0_244 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="590-590"];
m0_242 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="580-580"];
m0_245 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="577-577"];
m0_207 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="500-500"];
m0_209 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="507-511"];
m0_208 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="502-505"];
m0_210 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="514-514"];
m0_211 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="500-500"];
m0_289 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="695-695"];
m0_291 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", color=green, community=0, file="InstanceBuilderTests.cs", label="0: var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''one'', ''two'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="701-705"];
m0_290 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="698-698"];
m0_292 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="708-708"];
m0_293 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="695-695"];
m0_8 [cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="InstanceBuilderTests.cs", label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="100-100"];
m0_101 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="258-258"];
m0_102 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="263-267"];
m0_103 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="InstanceBuilderTests.cs", label="expected.ShouldBeEquivalentTo(result.Value.Colors)", span="270-270"];
m0_104 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="258-258"];
m0_370 [cluster="Unk.Should", file="InstanceBuilderTests.cs", label="Entry Unk.Should", span=""];
m0_100 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="6-6"];
m0_282 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="677-677"];
m0_283 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="682-686"];
m0_284 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="InstanceBuilderTests.cs", label="expected.ShouldBeEquivalentTo(result.Value.StringValue)", span="689-689"];
m0_285 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="677-677"];
m0_115 [cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs", label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="309-309"];
m0_198 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="480-480"];
m0_200 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] { ''--ftpurl'', ''str1''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="487-491"];
m0_199 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceBuilderTests.cs", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = null\r\n            }", span="482-485"];
m0_201 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceBuilderTests.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="494-494"];
m0_202 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="480-480"];
m0_40 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", span="6-6"];
m0_343 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithMinZero.FakeOptionsWithMinZero()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMinZero.FakeOptionsWithMinZero()", span="6-6"];
m0_10 [cluster="Unk.Build", file="InstanceBuilderTests.cs", label="Entry Unk.Build", span=""];
m0_188 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="457-457"];
m0_190 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSets>>(() => new FakeOptionsWithSets()),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="467-471"];
m0_191 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="474-474"];
m0_189 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl'')),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''))\r\n                }", span="460-464"];
m0_192 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="457-457"];
m0_404 [file="InstanceBuilderTests.cs", label=fakeOptions, span=""];
m0_405 [file="InstanceBuilderTests.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
m0_406 [file="InstanceBuilderTests.cs", label=int, span=""];
m0_407 [file="InstanceBuilderTests.cs", label=int, span=""];
m1_9 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="InstanceBuilder_new.cs", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="66-66"];
m1_1 [cluster="CommandLine.Infrastructure.ReflectionHelper.GetAttribute<TAttribute>()", color=red, community=0, file="InstanceBuilder_new.cs", label="0: var assembly = Assembly.GetEntryAssembly() ?? Assembly.GetExecutingAssembly()", span="12-12"];
m1_0 [cluster="CommandLine.Infrastructure.ReflectionHelper.GetAttribute<TAttribute>()", file="InstanceBuilder_new.cs", label="Entry CommandLine.Infrastructure.ReflectionHelper.GetAttribute<TAttribute>()", span="9-9"];
m1_2 [cluster="CommandLine.Infrastructure.ReflectionHelper.GetAttribute<TAttribute>()", color=red, community=0, file="InstanceBuilder_new.cs", label="0: var attributes = assembly.GetCustomAttributes(typeof(TAttribute), false)", span="13-13"];
m1_3 [cluster="CommandLine.Infrastructure.ReflectionHelper.GetAttribute<TAttribute>()", color=red, community=0, file="InstanceBuilder_new.cs", label="0: return attributes.Length > 0\r\n                ? Maybe.Just((TAttribute)attributes[0])\r\n                : Maybe.Nothing<TAttribute>();", span="15-17"];
m1_4 [cluster="CommandLine.Infrastructure.ReflectionHelper.GetAttribute<TAttribute>()", file="InstanceBuilder_new.cs", label="Exit CommandLine.Infrastructure.ReflectionHelper.GetAttribute<TAttribute>()", span="9-9"];
m1_8 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="InstanceBuilder_new.cs", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="71-71"];
m1_7 [cluster="System.Reflection.Assembly.GetCustomAttributes(System.Type, bool)", file="InstanceBuilder_new.cs", label="Entry System.Reflection.Assembly.GetCustomAttributes(System.Type, bool)", span="0-0"];
m1_6 [cluster="System.Reflection.Assembly.GetExecutingAssembly()", file="InstanceBuilder_new.cs", label="Entry System.Reflection.Assembly.GetExecutingAssembly()", span="0-0"];
m1_5 [cluster="System.Reflection.Assembly.GetEntryAssembly()", file="InstanceBuilder_new.cs", label="Entry System.Reflection.Assembly.GetEntryAssembly()", span="0-0"];
m1_14 [cluster="System.Reflection.Assembly.GetName()", file="InstanceBuilder_new.cs", label="Entry System.Reflection.Assembly.GetName()", span="0-0"];
m1_16 [cluster="CommandLine.Infrastructure.ReflectionHelper.GetAssemblyVersion()", color=red, community=0, file="InstanceBuilder_new.cs", label="0: var assembly = Assembly.GetEntryAssembly() ?? Assembly.GetExecutingAssembly()", span="28-28"];
m1_15 [cluster="CommandLine.Infrastructure.ReflectionHelper.GetAssemblyVersion()", file="InstanceBuilder_new.cs", label="Entry CommandLine.Infrastructure.ReflectionHelper.GetAssemblyVersion()", span="26-26"];
m1_17 [cluster="CommandLine.Infrastructure.ReflectionHelper.GetAssemblyVersion()", color=red, community=0, file="InstanceBuilder_new.cs", label="0: return assembly.GetName().Version.ToStringInvariant();", span="29-29"];
m1_18 [cluster="CommandLine.Infrastructure.ReflectionHelper.GetAssemblyVersion()", file="InstanceBuilder_new.cs", label="Exit CommandLine.Infrastructure.ReflectionHelper.GetAssemblyVersion()", span="26-26"];
m1_19 [cluster="T.ToStringInvariant<T>()", file="InstanceBuilder_new.cs", label="Entry T.ToStringInvariant<T>()", span="14-14"];
m1_11 [cluster="CommandLine.Infrastructure.ReflectionHelper.GetAssemblyName()", color=red, community=0, file="InstanceBuilder_new.cs", label="0: var assembly = Assembly.GetEntryAssembly() ?? Assembly.GetExecutingAssembly()", span="22-22"];
m1_10 [cluster="CommandLine.Infrastructure.ReflectionHelper.GetAssemblyName()", file="InstanceBuilder_new.cs", label="Entry CommandLine.Infrastructure.ReflectionHelper.GetAssemblyName()", span="20-20"];
m1_12 [cluster="CommandLine.Infrastructure.ReflectionHelper.GetAssemblyName()", color=red, community=0, file="InstanceBuilder_new.cs", label="0: return assembly.GetName().Name;", span="23-23"];
m1_13 [cluster="CommandLine.Infrastructure.ReflectionHelper.GetAssemblyName()", file="InstanceBuilder_new.cs", label="Exit CommandLine.Infrastructure.ReflectionHelper.GetAssemblyName()", span="20-20"];
m0_41 -> m0_42  [key=0, style=solid];
m0_41 -> m0_43  [color=darkseagreen4, key=1, label="int[]", style=dashed];
m0_42 -> m0_9  [key=2, style=dotted];
m0_42 -> m0_10  [key=2, style=dotted];
m0_42 -> m0_43  [key=0, style=solid];
m0_42 -> m0_45  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_43 -> m0_36  [key=2, style=dotted];
m0_43 -> m0_12  [key=2, style=dotted];
m0_43 -> m0_44  [key=0, style=solid];
m0_44 -> m0_41  [color=blue, key=0, style=bold];
m0_152 -> m0_153  [key=0, style=solid];
m0_152 -> m0_154  [color=darkseagreen4, key=1, label="long[]", style=dashed];
m0_153 -> m0_9  [key=2, style=dotted];
m0_153 -> m0_10  [key=2, style=dotted];
m0_153 -> m0_154  [key=0, style=solid];
m0_153 -> m0_156  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_154 -> m0_155  [key=0, style=solid];
m0_154 -> m0_105  [key=2, style=dotted];
m0_155 -> m0_152  [color=blue, key=0, style=bold];
m0_266 -> m0_267  [key=0, style=solid];
m0_266 -> m0_268  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_267 -> m0_9  [key=2, style=dotted];
m0_267 -> m0_10  [key=2, style=dotted];
m0_267 -> m0_268  [key=0, style=solid];
m0_267 -> m0_270  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_268 -> m0_12  [key=2, style=dotted];
m0_268 -> m0_269  [key=0, style=solid];
m0_268 -> m0_11  [key=2, style=dotted];
m0_269 -> m0_266  [color=blue, key=0, style=bold];
m0_305 -> m0_306  [key=0, style=solid];
m0_305 -> m0_307  [color=darkseagreen4, key=1, label="long?", style=dashed];
m0_306 -> m0_9  [key=2, style=dotted];
m0_306 -> m0_10  [key=2, style=dotted];
m0_306 -> m0_307  [key=0, style=solid];
m0_306 -> m0_309  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_307 -> m0_308  [key=0, style=solid];
m0_307 -> m0_105  [key=2, style=dotted];
m0_308 -> m0_305  [color=blue, key=0, style=bold];
m0_167 -> m0_168  [key=0, style=solid];
m0_170 -> m0_9  [key=2, style=dotted];
m0_170 -> m0_10  [key=2, style=dotted];
m0_170 -> m0_171  [key=0, style=solid];
m0_170 -> m0_173  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_170 -> m0_176  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_169 -> m0_170  [key=0, style=solid];
m0_171 -> m0_172  [key=0, style=solid];
m0_171 -> m0_105  [key=2, style=dotted];
m0_168 -> m0_169  [key=0, style=solid];
m0_168 -> m0_171  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_168 -> m0_140  [key=2, style=dotted];
m0_172 -> m0_167  [color=blue, key=0, style=bold];
m0_258 -> m0_259  [key=0, style=solid];
m0_260 -> m0_9  [key=2, style=dotted];
m0_260 -> m0_10  [key=2, style=dotted];
m0_260 -> m0_261  [key=0, style=solid];
m0_260 -> m0_263  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_261 -> m0_36  [key=2, style=dotted];
m0_261 -> m0_12  [key=2, style=dotted];
m0_261 -> m0_262  [key=0, style=solid];
m0_259 -> m0_260  [key=0, style=solid];
m0_259 -> m0_261  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_259 -> m0_246  [key=2, style=dotted];
m0_262 -> m0_258  [color=blue, key=0, style=bold];
m0_74 -> m0_75  [key=0, style=solid];
m0_76 -> m0_9  [key=2, style=dotted];
m0_76 -> m0_10  [key=2, style=dotted];
m0_76 -> m0_77  [key=0, style=solid];
m0_76 -> m0_80  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_75 -> m0_79  [key=2, style=dotted];
m0_75 -> m0_76  [key=0, style=solid];
m0_75 -> m0_77  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_77 -> m0_36  [key=2, style=dotted];
m0_77 -> m0_12  [key=2, style=dotted];
m0_77 -> m0_78  [key=0, style=solid];
m0_78 -> m0_74  [color=blue, key=0, style=bold];
m0_92 -> m0_93  [key=0, style=solid];
m0_94 -> m0_9  [key=2, style=dotted];
m0_94 -> m0_10  [key=2, style=dotted];
m0_94 -> m0_95  [key=0, style=solid];
m0_94 -> m0_97  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_93 -> m0_79  [key=2, style=dotted];
m0_93 -> m0_94  [key=0, style=solid];
m0_93 -> m0_95  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_95 -> m0_36  [key=2, style=dotted];
m0_95 -> m0_12  [key=2, style=dotted];
m0_95 -> m0_96  [key=0, style=solid];
m0_96 -> m0_92  [color=blue, key=0, style=bold];
m0_312 -> m0_313  [key=0, style=solid];
m0_312 -> m0_315  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_312 -> m0_316  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_313 -> m0_9  [key=2, style=dotted];
m0_313 -> m0_10  [key=2, style=dotted];
m0_313 -> m0_314  [key=0, style=solid];
m0_313 -> m0_319  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_313 -> m0_315  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_313 -> m0_316  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_314 -> m0_315  [key=0, style=solid];
m0_314 -> m0_316  [key=0, style=solid];
m0_315 -> m0_316  [key=0, style=solid];
m0_315 -> m0_105  [key=2, style=dotted];
m0_316 -> m0_317  [key=0, style=solid];
m0_316 -> m0_318  [key=2, style=dotted];
m0_316 -> m0_105  [key=2, style=dotted];
m0_317 -> m0_312  [color=blue, key=0, style=bold];
m0_250 -> m0_251  [key=0, style=solid];
m0_252 -> m0_9  [key=2, style=dotted];
m0_252 -> m0_10  [key=2, style=dotted];
m0_252 -> m0_253  [key=0, style=solid];
m0_252 -> m0_255  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_253 -> m0_36  [key=2, style=dotted];
m0_253 -> m0_12  [key=2, style=dotted];
m0_253 -> m0_254  [key=0, style=solid];
m0_251 -> m0_252  [key=0, style=solid];
m0_251 -> m0_253  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_251 -> m0_246  [key=2, style=dotted];
m0_254 -> m0_250  [color=blue, key=0, style=bold];
m0_110 -> m0_111  [key=0, style=solid];
m0_112 -> m0_9  [key=2, style=dotted];
m0_112 -> m0_10  [key=2, style=dotted];
m0_112 -> m0_113  [key=0, style=solid];
m0_112 -> m0_116  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_113 -> m0_36  [key=2, style=dotted];
m0_113 -> m0_12  [key=2, style=dotted];
m0_113 -> m0_114  [key=0, style=solid];
m0_111 -> m0_112  [key=0, style=solid];
m0_111 -> m0_113  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_111 -> m0_115  [key=2, style=dotted];
m0_111 -> m0_70  [key=2, style=dotted];
m0_114 -> m0_110  [color=blue, key=0, style=bold];
m0_366 -> m0_367  [key=0, style=solid];
m0_366 -> m0_368  [color=darkseagreen4, key=1, label=int, style=dashed];
m0_366 -> m0_377  [color=darkseagreen4, key=1, label=int, style=dashed];
m0_367 -> m0_9  [key=2, style=dotted];
m0_367 -> m0_10  [key=2, style=dotted];
m0_367 -> m0_368  [key=0, style=solid];
m0_367 -> m0_372  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_368 -> m0_369  [key=0, style=solid];
m0_368 -> m0_370  [key=2, style=dotted];
m0_368 -> m0_371  [key=2, style=dotted];
m0_368 -> m0_376  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_369 -> m0_366  [color=blue, key=0, style=bold];
m0_396 -> m0_397  [key=0, style=solid];
m0_396 -> m0_398  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent", style=dashed];
m0_397 -> m0_9  [key=2, style=dotted];
m0_397 -> m0_10  [key=2, style=dotted];
m0_397 -> m0_398  [key=0, style=solid];
m0_397 -> m0_400  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_398 -> m0_399  [key=0, style=solid];
m0_398 -> m0_105  [key=2, style=dotted];
m0_399 -> m0_396  [color=blue, key=0, style=bold];
m0_144 -> m0_145  [key=0, style=solid];
m0_144 -> m0_146  [color=darkseagreen4, key=1, label="long[]", style=dashed];
m0_145 -> m0_9  [key=2, style=dotted];
m0_145 -> m0_10  [key=2, style=dotted];
m0_145 -> m0_146  [key=0, style=solid];
m0_145 -> m0_148  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_146 -> m0_147  [key=0, style=solid];
m0_146 -> m0_105  [key=2, style=dotted];
m0_147 -> m0_144  [color=blue, key=0, style=bold];
m0_56 -> m0_57  [key=0, style=solid];
m0_56 -> m0_58  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m0_57 -> m0_9  [key=2, style=dotted];
m0_57 -> m0_10  [key=2, style=dotted];
m0_57 -> m0_58  [key=0, style=solid];
m0_57 -> m0_60  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_58 -> m0_36  [key=2, style=dotted];
m0_58 -> m0_12  [key=2, style=dotted];
m0_58 -> m0_59  [key=0, style=solid];
m0_59 -> m0_56  [color=blue, key=0, style=bold];
m0_32 -> m0_33  [key=0, style=solid];
m0_32 -> m0_34  [color=darkseagreen4, key=1, label="int[]", style=dashed];
m0_33 -> m0_9  [key=2, style=dotted];
m0_33 -> m0_10  [key=2, style=dotted];
m0_33 -> m0_33  [color=darkorchid, key=3, label="method methodReturn object ToEnum", style=bold];
m0_33 -> m0_34  [key=0, style=solid];
m0_33 -> m0_37  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_34 -> m0_36  [key=2, style=dotted];
m0_34 -> m0_12  [key=2, style=dotted];
m0_34 -> m0_35  [key=0, style=solid];
m0_35 -> m0_32  [color=blue, key=0, style=bold];
m0_184 -> m0_185  [key=0, style=solid];
m0_294 -> m0_295  [color=green, key=0, style=solid];
m0_295 -> m0_296  [color=green, key=0, style=solid];
m0_295 -> m0_6  [color=green, key=2, style=dotted];
m0_296 -> m0_294  [color=blue, key=0, style=bold];
m0_338 -> m0_9  [key=2, style=dotted];
m0_338 -> m0_10  [key=2, style=dotted];
m0_338 -> m0_339  [key=0, style=solid];
m0_338 -> m0_340  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_349 -> m0_9  [key=2, style=dotted];
m0_349 -> m0_10  [key=2, style=dotted];
m0_349 -> m0_350  [key=0, style=solid];
m0_349 -> m0_351  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_360 -> m0_9  [key=2, style=dotted];
m0_360 -> m0_10  [key=2, style=dotted];
m0_360 -> m0_361  [key=0, style=solid];
m0_360 -> m0_362  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_22 -> m0_6  [key=2, style=dotted];
m0_22 -> m0_23  [key=0, style=solid];
m0_46 -> m0_6  [key=2, style=dotted];
m0_46 -> m0_47  [key=0, style=solid];
m0_239 -> m0_6  [key=2, style=dotted];
m0_239 -> m0_240  [key=0, style=solid];
m0_248 -> m0_6  [key=2, style=dotted];
m0_248 -> m0_249  [key=0, style=solid];
m0_256 -> m0_6  [key=2, style=dotted];
m0_256 -> m0_257  [key=0, style=solid];
m0_264 -> m0_6  [key=2, style=dotted];
m0_264 -> m0_265  [key=0, style=solid];
m0_271 -> m0_6  [key=2, style=dotted];
m0_271 -> m0_272  [key=0, style=solid];
m0_287 -> m0_6  [key=2, style=dotted];
m0_287 -> m0_288  [key=0, style=solid];
m0_384 -> m0_6  [key=2, style=dotted];
m0_384 -> m0_385  [key=0, style=solid];
m0_13 -> m0_14  [key=0, style=solid];
m0_21 -> m0_22  [key=0, style=solid];
m0_28 -> m0_29  [key=0, style=solid];
m0_37 -> m0_38  [key=0, style=solid];
m0_45 -> m0_46  [key=0, style=solid];
m0_52 -> m0_53  [key=0, style=solid];
m0_60 -> m0_61  [key=0, style=solid];
m0_71 -> m0_72  [key=0, style=solid];
m0_80 -> m0_81  [key=0, style=solid];
m0_89 -> m0_90  [key=0, style=solid];
m0_97 -> m0_98  [key=0, style=solid];
m0_106 -> m0_107  [key=0, style=solid];
m0_116 -> m0_117  [key=0, style=solid];
m0_124 -> m0_125  [key=0, style=solid];
m0_132 -> m0_133  [key=0, style=solid];
m0_141 -> m0_142  [key=0, style=solid];
m0_148 -> m0_149  [key=0, style=solid];
m0_156 -> m0_157  [key=0, style=solid];
m0_164 -> m0_165  [key=0, style=solid];
m0_173 -> m0_174  [key=0, style=solid];
m0_176 -> m0_177  [key=0, style=solid];
m0_176 -> m0_181  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_176 -> m0_185  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_194 -> m0_195  [key=0, style=solid];
m0_204 -> m0_205  [key=0, style=solid];
m0_212 -> m0_213  [key=0, style=solid];
m0_221 -> m0_222  [key=0, style=solid];
m0_229 -> m0_230  [key=0, style=solid];
m0_238 -> m0_239  [key=0, style=solid];
m0_247 -> m0_248  [key=0, style=solid];
m0_255 -> m0_256  [key=0, style=solid];
m0_263 -> m0_264  [key=0, style=solid];
m0_270 -> m0_271  [key=0, style=solid];
m0_278 -> m0_279  [key=0, style=solid];
m0_286 -> m0_287  [key=0, style=solid];
m0_301 -> m0_302  [key=0, style=solid];
m0_309 -> m0_310  [key=0, style=solid];
m0_319 -> m0_320  [key=0, style=solid];
m0_329 -> m0_330  [key=0, style=solid];
m0_337 -> m0_338  [key=0, style=solid];
m0_339 -> m0_337  [color=blue, key=0, style=bold];
m0_340 -> m0_341  [key=0, style=solid];
m0_348 -> m0_349  [key=0, style=solid];
m0_350 -> m0_348  [color=blue, key=0, style=bold];
m0_351 -> m0_352  [key=0, style=solid];
m0_359 -> m0_360  [key=0, style=solid];
m0_361 -> m0_359  [color=blue, key=0, style=bold];
m0_362 -> m0_363  [key=0, style=solid];
m0_372 -> m0_373  [key=0, style=solid];
m0_383 -> m0_384  [key=0, style=solid];
m0_393 -> m0_394  [key=0, style=solid];
m0_400 -> m0_401  [key=0, style=solid];
m0_14 -> m0_15  [key=0, style=solid];
m0_23 -> m0_21  [color=blue, key=0, style=bold];
m0_47 -> m0_45  [color=blue, key=0, style=bold];
m0_240 -> m0_238  [color=blue, key=0, style=bold];
m0_249 -> m0_247  [color=blue, key=0, style=bold];
m0_257 -> m0_255  [color=blue, key=0, style=bold];
m0_265 -> m0_263  [color=blue, key=0, style=bold];
m0_272 -> m0_270  [color=blue, key=0, style=bold];
m0_288 -> m0_286  [color=blue, key=0, style=bold];
m0_385 -> m0_383  [color=blue, key=0, style=bold];
m0_15 -> m0_13  [color=blue, key=0, style=bold];
m0_30 -> m0_28  [color=blue, key=0, style=bold];
m0_29 -> m0_30  [key=0, style=solid];
m0_29 -> m0_31  [key=2, style=dotted];
m0_39 -> m0_37  [color=blue, key=0, style=bold];
m0_38 -> m0_39  [key=0, style=solid];
m0_38 -> m0_40  [key=2, style=dotted];
m0_54 -> m0_52  [color=blue, key=0, style=bold];
m0_53 -> m0_54  [key=0, style=solid];
m0_53 -> m0_55  [key=2, style=dotted];
m0_62 -> m0_60  [color=blue, key=0, style=bold];
m0_61 -> m0_62  [key=0, style=solid];
m0_61 -> m0_63  [key=2, style=dotted];
m0_73 -> m0_71  [color=blue, key=0, style=bold];
m0_72 -> m0_73  [key=0, style=solid];
m0_72 -> m0_55  [key=2, style=dotted];
m0_82 -> m0_80  [color=blue, key=0, style=bold];
m0_81 -> m0_82  [key=0, style=solid];
m0_81 -> m0_83  [key=2, style=dotted];
m0_91 -> m0_89  [color=blue, key=0, style=bold];
m0_90 -> m0_91  [key=0, style=solid];
m0_90 -> m0_63  [key=2, style=dotted];
m0_99 -> m0_97  [color=blue, key=0, style=bold];
m0_98 -> m0_99  [key=0, style=solid];
m0_98 -> m0_100  [key=2, style=dotted];
m0_108 -> m0_106  [color=blue, key=0, style=bold];
m0_107 -> m0_108  [key=0, style=solid];
m0_107 -> m0_109  [key=2, style=dotted];
m0_118 -> m0_116  [color=blue, key=0, style=bold];
m0_117 -> m0_118  [key=0, style=solid];
m0_117 -> m0_109  [key=2, style=dotted];
m0_126 -> m0_124  [color=blue, key=0, style=bold];
m0_125 -> m0_126  [key=0, style=solid];
m0_125 -> m0_109  [key=2, style=dotted];
m0_134 -> m0_132  [color=blue, key=0, style=bold];
m0_133 -> m0_134  [key=0, style=solid];
m0_133 -> m0_109  [key=2, style=dotted];
m0_143 -> m0_141  [color=blue, key=0, style=bold];
m0_142 -> m0_140  [key=2, style=dotted];
m0_142 -> m0_143  [key=0, style=solid];
m0_150 -> m0_148  [color=blue, key=0, style=bold];
m0_149 -> m0_150  [key=0, style=solid];
m0_149 -> m0_151  [key=2, style=dotted];
m0_158 -> m0_156  [color=blue, key=0, style=bold];
m0_157 -> m0_158  [key=0, style=solid];
m0_157 -> m0_159  [key=2, style=dotted];
m0_166 -> m0_164  [color=blue, key=0, style=bold];
m0_165 -> m0_166  [key=0, style=solid];
m0_165 -> m0_159  [key=2, style=dotted];
m0_175 -> m0_173  [color=blue, key=0, style=bold];
m0_174 -> m0_140  [key=2, style=dotted];
m0_174 -> m0_175  [key=0, style=solid];
m0_178 -> m0_176  [color=blue, key=0, style=bold];
m0_177 -> m0_178  [key=0, style=solid];
m0_177 -> m0_179  [key=2, style=dotted];
m0_177 -> m0_180  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_181 -> m0_182  [key=0, style=solid];
m0_181 -> m0_183  [key=2, style=dotted];
m0_181 -> m0_184  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_185 -> m0_186  [key=0, style=solid];
m0_185 -> m0_187  [key=2, style=dotted];
m0_196 -> m0_194  [color=blue, key=0, style=bold];
m0_195 -> m0_196  [key=0, style=solid];
m0_195 -> m0_197  [key=2, style=dotted];
m0_206 -> m0_204  [color=blue, key=0, style=bold];
m0_205 -> m0_203  [key=2, style=dotted];
m0_205 -> m0_206  [key=0, style=solid];
m0_214 -> m0_212  [color=blue, key=0, style=bold];
m0_213 -> m0_203  [key=2, style=dotted];
m0_213 -> m0_214  [key=0, style=solid];
m0_223 -> m0_221  [color=blue, key=0, style=bold];
m0_222 -> m0_203  [key=2, style=dotted];
m0_222 -> m0_223  [key=0, style=solid];
m0_231 -> m0_229  [color=blue, key=0, style=bold];
m0_230 -> m0_231  [key=0, style=solid];
m0_230 -> m0_232  [key=2, style=dotted];
m0_280 -> m0_278  [color=blue, key=0, style=bold];
m0_279 -> m0_280  [key=0, style=solid];
m0_279 -> m0_281  [key=2, style=dotted];
m0_303 -> m0_301  [color=blue, key=0, style=bold];
m0_302 -> m0_303  [key=0, style=solid];
m0_302 -> m0_304  [key=2, style=dotted];
m0_311 -> m0_309  [color=blue, key=0, style=bold];
m0_310 -> m0_311  [key=0, style=solid];
m0_310 -> m0_304  [key=2, style=dotted];
m0_321 -> m0_319  [color=blue, key=0, style=bold];
m0_320 -> m0_321  [key=0, style=solid];
m0_320 -> m0_322  [key=2, style=dotted];
m0_331 -> m0_329  [color=blue, key=0, style=bold];
m0_330 -> m0_331  [key=0, style=solid];
m0_330 -> m0_322  [key=2, style=dotted];
m0_342 -> m0_340  [color=blue, key=0, style=bold];
m0_341 -> m0_342  [key=0, style=solid];
m0_341 -> m0_343  [key=2, style=dotted];
m0_353 -> m0_351  [color=blue, key=0, style=bold];
m0_352 -> m0_353  [key=0, style=solid];
m0_352 -> m0_354  [key=2, style=dotted];
m0_364 -> m0_362  [color=blue, key=0, style=bold];
m0_363 -> m0_364  [key=0, style=solid];
m0_363 -> m0_365  [key=2, style=dotted];
m0_377 -> m0_378  [key=0, style=solid];
m0_376 -> m0_377  [key=0, style=solid];
m0_374 -> m0_372  [color=blue, key=0, style=bold];
m0_373 -> m0_374  [key=0, style=solid];
m0_373 -> m0_375  [key=2, style=dotted];
m0_387 -> m0_388  [key=0, style=solid];
m0_386 -> m0_387  [key=0, style=solid];
m0_395 -> m0_393  [color=blue, key=0, style=bold];
m0_394 -> m0_395  [key=0, style=solid];
m0_394 -> m0_281  [key=2, style=dotted];
m0_402 -> m0_400  [color=blue, key=0, style=bold];
m0_401 -> m0_402  [key=0, style=solid];
m0_401 -> m0_403  [key=2, style=dotted];
m0_180 -> m0_181  [key=0, style=solid];
m0_182 -> m0_180  [color=blue, key=0, style=bold];
m0_186 -> m0_184  [color=blue, key=0, style=bold];
m0_378 -> m0_376  [color=blue, key=0, style=bold];
m0_388 -> m0_386  [color=blue, key=0, style=bold];
m0_379 -> m0_380  [key=0, style=solid];
m0_379 -> m0_381  [color=darkseagreen4, key=1, label=int, style=dashed];
m0_379 -> m0_387  [color=darkseagreen4, key=1, label=int, style=dashed];
m0_380 -> m0_9  [key=2, style=dotted];
m0_380 -> m0_10  [key=2, style=dotted];
m0_380 -> m0_381  [key=0, style=solid];
m0_380 -> m0_383  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_381 -> m0_382  [key=0, style=solid];
m0_381 -> m0_370  [key=2, style=dotted];
m0_381 -> m0_371  [key=2, style=dotted];
m0_381 -> m0_386  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_382 -> m0_379  [color=blue, key=0, style=bold];
m0_48 -> m0_49  [key=0, style=solid];
m0_48 -> m0_50  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m0_49 -> m0_9  [key=2, style=dotted];
m0_49 -> m0_10  [key=2, style=dotted];
m0_49 -> m0_50  [key=0, style=solid];
m0_49 -> m0_52  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_50 -> m0_36  [key=2, style=dotted];
m0_50 -> m0_12  [key=2, style=dotted];
m0_50 -> m0_51  [key=0, style=solid];
m0_51 -> m0_48  [color=blue, key=0, style=bold];
m0_119 -> m0_120  [key=0, style=solid];
m0_121 -> m0_9  [key=2, style=dotted];
m0_121 -> m0_10  [key=2, style=dotted];
m0_121 -> m0_122  [key=0, style=solid];
m0_121 -> m0_124  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_122 -> m0_36  [key=2, style=dotted];
m0_122 -> m0_12  [key=2, style=dotted];
m0_122 -> m0_123  [key=0, style=solid];
m0_120 -> m0_121  [key=0, style=solid];
m0_120 -> m0_122  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_120 -> m0_115  [key=2, style=dotted];
m0_120 -> m0_70  [key=2, style=dotted];
m0_123 -> m0_119  [color=blue, key=0, style=bold];
m0_24 -> m0_25  [key=0, style=solid];
m0_24 -> m0_24  [color=darkorchid, key=3, label="Local variable System.Func<object> empty", style=bold];
m0_24 -> m0_26  [color=darkseagreen4, key=1, label=double, style=dashed];
m0_25 -> m0_9  [key=2, style=dotted];
m0_25 -> m0_10  [key=2, style=dotted];
m0_25 -> m0_26  [key=0, style=solid];
m0_25 -> m0_28  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_26 -> m0_27  [key=0, style=solid];
m0_26 -> m0_20  [key=2, style=dotted];
m0_27 -> m0_24  [color=blue, key=0, style=bold];
m0_273 -> m0_274  [key=0, style=solid];
m0_275 -> m0_9  [key=2, style=dotted];
m0_275 -> m0_10  [key=2, style=dotted];
m0_275 -> m0_276  [key=0, style=solid];
m0_275 -> m0_278  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_276 -> m0_36  [key=2, style=dotted];
m0_276 -> m0_12  [key=2, style=dotted];
m0_276 -> m0_277  [key=0, style=solid];
m0_274 -> m0_275  [key=0, style=solid];
m0_274 -> m0_276  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_274 -> m0_220  [key=2, style=dotted];
m0_277 -> m0_273  [color=blue, key=0, style=bold];
m0_233 -> m0_234  [key=0, style=solid];
m0_235 -> m0_9  [key=2, style=dotted];
m0_235 -> m0_10  [key=2, style=dotted];
m0_235 -> m0_236  [key=0, style=solid];
m0_235 -> m0_238  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_234 -> m0_79  [key=2, style=dotted];
m0_234 -> m0_235  [key=0, style=solid];
m0_234 -> m0_70  [key=2, style=dotted];
m0_234 -> m0_236  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_236 -> m0_36  [key=2, style=dotted];
m0_236 -> m0_12  [key=2, style=dotted];
m0_236 -> m0_237  [key=0, style=solid];
m0_237 -> m0_233  [color=blue, key=0, style=bold];
m0_0 -> m0_1  [key=0, style=solid];
m0_3 -> m0_9  [key=2, style=dotted];
m0_3 -> m0_10  [key=2, style=dotted];
m0_3 -> m0_4  [key=0, style=solid];
m0_3 -> m0_13  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_1 -> m0_6  [key=2, style=dotted];
m0_1 -> m0_3  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_14  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m0_4 -> m0_12  [key=2, style=dotted];
m0_4 -> m0_5  [key=0, style=solid];
m0_4 -> m0_11  [key=2, style=dotted];
m0_2 -> m0_3  [key=0, style=solid];
m0_2 -> m0_4  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_2 -> m0_7  [key=2, style=dotted];
m0_2 -> m0_8  [key=2, style=dotted];
m0_5 -> m0_0  [color=blue, key=0, style=bold];
m0_224 -> m0_225  [key=0, style=solid];
m0_226 -> m0_9  [key=2, style=dotted];
m0_226 -> m0_10  [key=2, style=dotted];
m0_226 -> m0_227  [key=0, style=solid];
m0_226 -> m0_229  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_227 -> m0_36  [key=2, style=dotted];
m0_227 -> m0_12  [key=2, style=dotted];
m0_227 -> m0_228  [key=0, style=solid];
m0_225 -> m0_226  [key=0, style=solid];
m0_225 -> m0_227  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_225 -> m0_220  [key=2, style=dotted];
m0_225 -> m0_70  [key=2, style=dotted];
m0_228 -> m0_224  [color=blue, key=0, style=bold];
m0_215 -> m0_216  [key=0, style=solid];
m0_217 -> m0_9  [key=2, style=dotted];
m0_217 -> m0_10  [key=2, style=dotted];
m0_217 -> m0_218  [key=0, style=solid];
m0_217 -> m0_221  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_218 -> m0_36  [key=2, style=dotted];
m0_218 -> m0_12  [key=2, style=dotted];
m0_218 -> m0_219  [key=0, style=solid];
m0_216 -> m0_217  [key=0, style=solid];
m0_216 -> m0_218  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_216 -> m0_220  [key=2, style=dotted];
m0_216 -> m0_70  [key=2, style=dotted];
m0_219 -> m0_215  [color=blue, key=0, style=bold];
m0_127 -> m0_128  [key=0, style=solid];
m0_129 -> m0_9  [key=2, style=dotted];
m0_129 -> m0_10  [key=2, style=dotted];
m0_129 -> m0_130  [key=0, style=solid];
m0_129 -> m0_132  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_130 -> m0_36  [key=2, style=dotted];
m0_130 -> m0_12  [key=2, style=dotted];
m0_130 -> m0_131  [key=0, style=solid];
m0_128 -> m0_129  [key=0, style=solid];
m0_128 -> m0_130  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_128 -> m0_115  [key=2, style=dotted];
m0_128 -> m0_70  [key=2, style=dotted];
m0_131 -> m0_127  [color=blue, key=0, style=bold];
m0_389 -> m0_390  [key=0, style=solid];
m0_389 -> m0_391  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue", style=dashed];
m0_390 -> m0_9  [key=2, style=dotted];
m0_390 -> m0_10  [key=2, style=dotted];
m0_390 -> m0_391  [key=0, style=solid];
m0_390 -> m0_393  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_391 -> m0_392  [key=0, style=solid];
m0_391 -> m0_105  [key=2, style=dotted];
m0_392 -> m0_389  [color=blue, key=0, style=bold];
m0_84 -> m0_85  [key=0, style=solid];
m0_86 -> m0_9  [key=2, style=dotted];
m0_86 -> m0_10  [key=2, style=dotted];
m0_86 -> m0_87  [key=0, style=solid];
m0_86 -> m0_89  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_85 -> m0_79  [key=2, style=dotted];
m0_85 -> m0_86  [key=0, style=solid];
m0_85 -> m0_70  [key=2, style=dotted];
m0_85 -> m0_87  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_87 -> m0_36  [key=2, style=dotted];
m0_87 -> m0_12  [key=2, style=dotted];
m0_87 -> m0_88  [key=0, style=solid];
m0_88 -> m0_84  [color=blue, key=0, style=bold];
m0_64 -> m0_65  [key=0, style=solid];
m0_66 -> m0_9  [key=2, style=dotted];
m0_66 -> m0_10  [key=2, style=dotted];
m0_66 -> m0_67  [key=0, style=solid];
m0_66 -> m0_71  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_67 -> m0_36  [key=2, style=dotted];
m0_67 -> m0_12  [key=2, style=dotted];
m0_67 -> m0_68  [key=0, style=solid];
m0_65 -> m0_66  [key=0, style=solid];
m0_65 -> m0_67  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_65 -> m0_69  [key=2, style=dotted];
m0_65 -> m0_70  [key=2, style=dotted];
m0_68 -> m0_64  [color=blue, key=0, style=bold];
m0_135 -> m0_136  [key=0, style=solid];
m0_137 -> m0_9  [key=2, style=dotted];
m0_137 -> m0_10  [key=2, style=dotted];
m0_137 -> m0_138  [key=0, style=solid];
m0_137 -> m0_141  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_136 -> m0_137  [key=0, style=solid];
m0_136 -> m0_140  [key=2, style=dotted];
m0_136 -> m0_138  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_138 -> m0_139  [key=0, style=solid];
m0_138 -> m0_105  [key=2, style=dotted];
m0_139 -> m0_135  [color=blue, key=0, style=bold];
m0_16 -> m0_17  [key=0, style=solid];
m0_16 -> m0_18  [color=darkseagreen4, key=1, label=long, style=dashed];
m0_17 -> m0_9  [key=2, style=dotted];
m0_17 -> m0_10  [key=2, style=dotted];
m0_17 -> m0_17  [color=darkorchid, key=3, label="Local variable System.Func<object> safeChangeType", style=bold];
m0_17 -> m0_18  [key=0, style=solid];
m0_17 -> m0_21  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_18 -> m0_19  [key=0, style=solid];
m0_18 -> m0_20  [key=2, style=dotted];
m0_19 -> m0_16  [color=blue, key=0, style=bold];
m0_323 -> m0_324  [key=0, style=solid];
m0_323 -> m0_326  [color=darkseagreen4, key=1, label=int, style=dashed];
m0_323 -> m0_327  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_324 -> m0_9  [key=2, style=dotted];
m0_324 -> m0_10  [key=2, style=dotted];
m0_324 -> m0_325  [key=0, style=solid];
m0_324 -> m0_329  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_324 -> m0_326  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_324 -> m0_327  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_325 -> m0_326  [key=0, style=solid];
m0_325 -> m0_327  [key=0, style=solid];
m0_326 -> m0_327  [key=0, style=solid];
m0_326 -> m0_105  [key=2, style=dotted];
m0_327 -> m0_328  [key=0, style=solid];
m0_327 -> m0_318  [key=2, style=dotted];
m0_327 -> m0_105  [key=2, style=dotted];
m0_328 -> m0_323  [color=blue, key=0, style=bold];
m0_160 -> m0_161  [key=0, style=solid];
m0_160 -> m0_162  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m0_161 -> m0_9  [key=2, style=dotted];
m0_161 -> m0_10  [key=2, style=dotted];
m0_161 -> m0_162  [key=0, style=solid];
m0_161 -> m0_164  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_162 -> m0_163  [key=0, style=solid];
m0_162 -> m0_105  [key=2, style=dotted];
m0_163 -> m0_160  [color=blue, key=0, style=bold];
m0_297 -> m0_298  [key=0, style=solid];
m0_297 -> m0_299  [color=darkseagreen4, key=1, label="int?", style=dashed];
m0_298 -> m0_9  [key=2, style=dotted];
m0_298 -> m0_10  [key=2, style=dotted];
m0_298 -> m0_299  [key=0, style=solid];
m0_298 -> m0_301  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_299 -> m0_300  [key=0, style=solid];
m0_299 -> m0_105  [key=2, style=dotted];
m0_300 -> m0_297  [color=blue, key=0, style=bold];
m0_241 -> m0_242  [key=0, style=solid];
m0_243 -> m0_9  [key=2, style=dotted];
m0_243 -> m0_10  [key=2, style=dotted];
m0_243 -> m0_244  [key=0, style=solid];
m0_243 -> m0_247  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_244 -> m0_36  [key=2, style=dotted];
m0_244 -> m0_12  [key=2, style=dotted];
m0_244 -> m0_245  [key=0, style=solid];
m0_242 -> m0_243  [key=0, style=solid];
m0_242 -> m0_244  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_242 -> m0_246  [key=2, style=dotted];
m0_245 -> m0_241  [color=blue, key=0, style=bold];
m0_207 -> m0_208  [key=0, style=solid];
m0_209 -> m0_9  [key=2, style=dotted];
m0_209 -> m0_10  [key=2, style=dotted];
m0_209 -> m0_210  [key=0, style=solid];
m0_209 -> m0_212  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_208 -> m0_209  [key=0, style=solid];
m0_208 -> m0_203  [key=2, style=dotted];
m0_208 -> m0_210  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_210 -> m0_211  [key=0, style=solid];
m0_210 -> m0_105  [key=2, style=dotted];
m0_211 -> m0_207  [color=blue, key=0, style=bold];
m0_289 -> m0_290  [key=0, style=solid];
m0_291 -> m0_292  [color=green, key=0, style=solid];
m0_291 -> m0_9  [color=green, key=2, style=dotted];
m0_291 -> m0_10  [color=green, key=2, style=dotted];
m0_291 -> m0_294  [color=green, key=1, label="lambda expression", style=dashed];
m0_290 -> m0_291  [color=green, key=0, style=solid];
m0_290 -> m0_79  [key=2, style=dotted];
m0_290 -> m0_292  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_292 -> m0_293  [key=0, style=solid];
m0_292 -> m0_36  [key=2, style=dotted];
m0_292 -> m0_12  [key=2, style=dotted];
m0_293 -> m0_289  [color=blue, key=0, style=bold];
m0_101 -> m0_102  [key=0, style=solid];
m0_101 -> m0_103  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
m0_102 -> m0_9  [key=2, style=dotted];
m0_102 -> m0_10  [key=2, style=dotted];
m0_102 -> m0_103  [key=0, style=solid];
m0_102 -> m0_106  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_103 -> m0_103  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
m0_103 -> m0_104  [key=0, style=solid];
m0_103 -> m0_105  [key=2, style=dotted];
m0_104 -> m0_101  [color=blue, key=0, style=bold];
m0_282 -> m0_283  [key=0, style=solid];
m0_282 -> m0_284  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_283 -> m0_9  [key=2, style=dotted];
m0_283 -> m0_10  [key=2, style=dotted];
m0_283 -> m0_284  [key=0, style=solid];
m0_283 -> m0_286  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_284 -> m0_285  [key=0, style=solid];
m0_284 -> m0_105  [key=2, style=dotted];
m0_285 -> m0_282  [color=blue, key=0, style=bold];
m0_198 -> m0_199  [key=0, style=solid];
m0_200 -> m0_9  [key=2, style=dotted];
m0_200 -> m0_10  [key=2, style=dotted];
m0_200 -> m0_201  [key=0, style=solid];
m0_200 -> m0_204  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_199 -> m0_200  [key=0, style=solid];
m0_199 -> m0_203  [key=2, style=dotted];
m0_199 -> m0_201  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_201 -> m0_202  [key=0, style=solid];
m0_201 -> m0_105  [key=2, style=dotted];
m0_202 -> m0_198  [color=blue, key=0, style=bold];
m0_188 -> m0_189  [key=0, style=solid];
m0_190 -> m0_9  [key=2, style=dotted];
m0_190 -> m0_10  [key=2, style=dotted];
m0_190 -> m0_191  [key=0, style=solid];
m0_190 -> m0_194  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_191 -> m0_36  [key=2, style=dotted];
m0_191 -> m0_12  [key=2, style=dotted];
m0_191 -> m0_192  [key=0, style=solid];
m0_189 -> m0_190  [key=0, style=solid];
m0_189 -> m0_191  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_189 -> m0_193  [key=2, style=dotted];
m0_189 -> m0_70  [key=2, style=dotted];
m0_192 -> m0_188  [color=blue, key=0, style=bold];
m0_404 -> m0_14  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m0_405 -> m0_181  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_405 -> m0_185  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_406 -> m0_377  [color=darkseagreen4, key=1, label=int, style=dashed];
m0_407 -> m0_387  [color=darkseagreen4, key=1, label=int, style=dashed];
m1_1 -> m1_2  [color=red, key=0, style=solid];
m1_1 -> m1_5  [color=red, key=2, style=dotted];
m1_1 -> m1_6  [color=red, key=2, style=dotted];
m1_0 -> m1_1  [color=red, key=0, style=solid];
m1_2 -> m1_3  [color=red, key=0, style=solid];
m1_2 -> m1_7  [color=red, key=2, style=dotted];
m1_3 -> m1_4  [color=red, key=0, style=solid];
m1_3 -> m1_8  [color=red, key=2, style=dotted];
m1_3 -> m1_9  [color=red, key=2, style=dotted];
m1_4 -> m1_0  [color=blue, key=0, style=bold];
m1_16 -> m1_17  [color=red, key=0, style=solid];
m1_16 -> m1_5  [color=red, key=2, style=dotted];
m1_16 -> m1_6  [color=red, key=2, style=dotted];
m1_15 -> m1_16  [color=red, key=0, style=solid];
m1_17 -> m1_18  [color=red, key=0, style=solid];
m1_17 -> m1_14  [color=red, key=2, style=dotted];
m1_17 -> m1_19  [color=red, key=2, style=dotted];
m1_18 -> m1_15  [color=blue, key=0, style=bold];
m1_11 -> m1_12  [color=red, key=0, style=solid];
m1_11 -> m1_5  [color=red, key=2, style=dotted];
m1_11 -> m1_6  [color=red, key=2, style=dotted];
m1_10 -> m1_11  [color=red, key=0, style=solid];
m1_12 -> m1_13  [color=red, key=0, style=solid];
m1_12 -> m1_14  [color=red, key=2, style=dotted];
m1_13 -> m1_10  [color=blue, key=0, style=bold];
}
