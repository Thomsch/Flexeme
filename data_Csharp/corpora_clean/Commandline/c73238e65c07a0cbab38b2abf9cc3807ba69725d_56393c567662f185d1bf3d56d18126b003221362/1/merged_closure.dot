digraph  {
n0 [cluster="CommandLine.Text.SentenceBuilder.CreateDefault()", label="Entry CommandLine.Text.SentenceBuilder.CreateDefault()", span="17-17"];
n1 [cluster="CommandLine.Text.SentenceBuilder.CreateDefault()", label="return new DefaultSentenceBuilder();", span="19-19"];
n2 [cluster="CommandLine.Text.SentenceBuilder.CreateDefault()", label="Exit CommandLine.Text.SentenceBuilder.CreateDefault()", span="17-17"];
n3 [cluster="CommandLine.Text.SentenceBuilder.DefaultSentenceBuilder.DefaultSentenceBuilder()", label="Entry CommandLine.Text.SentenceBuilder.DefaultSentenceBuilder.DefaultSentenceBuilder()", span="44-44"];
n4 [cluster="lambda expression", label="Entry lambda expression", span="50-50"];
n5 [cluster="lambda expression", label="''Required.''", span="50-50"];
n6 [cluster="lambda expression", label="Exit lambda expression", span="50-50"];
n7 [cluster="lambda expression", label="Entry lambda expression", span="58-58"];
n8 [cluster="lambda expression", label="''ERROR(S):''", span="58-58"];
n9 [cluster="lambda expression", label="Exit lambda expression", span="58-58"];
n10 [cluster="lambda expression", label="Entry lambda expression", span="66-68"];
n11 [cluster="lambda expression", label="isOption\r\n                        ? ''Display this help screen.''\r\n                        : ''Display more information on a specific command.''", span="66-68"];
n12 [cluster="lambda expression", label="Exit lambda expression", span="66-68"];
n13 [cluster="lambda expression", label="Entry lambda expression", span="76-110"];
n14 [cluster="lambda expression", label="error.Tag", span="78-78"];
n16 [cluster="lambda expression", label="return ''Token ''' + ((BadFormatTokenError)error).Token + ''' is not recognized.'';", span="81-81"];
n18 [cluster="lambda expression", label="return ''Option ''' + ((MissingValueOptionError)error).NameInfo.NameText\r\n                                                      + ''' has no value.'';", span="83-84"];
n20 [cluster="lambda expression", label="return ''Option ''' + ((UnknownOptionError)error).Token + ''' is unknown.'';", span="86-86"];
n22 [cluster="lambda expression", label="var errMisssing = ((MissingRequiredOptionError)error)", span="88-88"];
n25 [cluster="lambda expression", label="return ''Option ''' + ((MutuallyExclusiveSetError)error).NameInfo.NameText + ''' is defined along with an incompatible one.'';", span="93-93"];
n27 [cluster="lambda expression", label="var badFormat = ((BadFormatConversionError)error)", span="95-95"];
n30 [cluster="lambda expression", label="var seqOutRange = ((SequenceOutOfRangeError)error)", span="100-100"];
n33 [cluster="lambda expression", label="return ''Verb ''' + ((BadVerbSelectedError)error).Token + ''' is not recognized.'';", span="105-105"];
n15 [cluster="lambda expression", label="ErrorType.BadFormatTokenError", span="80-80"];
n17 [cluster="lambda expression", label="ErrorType.MissingValueOptionError", span="82-82"];
n19 [cluster="lambda expression", label="ErrorType.UnknownOptionError", span="85-85"];
n21 [cluster="lambda expression", label="ErrorType.MissingRequiredOptionError", span="87-87"];
n24 [cluster="lambda expression", label="ErrorType.MutuallyExclusiveSetError", span="92-92"];
n26 [cluster="lambda expression", label="ErrorType.BadFormatConversionError", span="94-94"];
n29 [cluster="lambda expression", label="ErrorType.SequenceOutOfRangeError", span="99-99"];
n32 [cluster="lambda expression", label="ErrorType.BadVerbSelectedError", span="104-104"];
n34 [cluster="lambda expression", label="ErrorType.NoVerbSelectedError", span="106-106"];
n23 [cluster="lambda expression", label="return errMisssing.NameInfo == NameInfo.EmptyName\r\n                                               ? ''A required value not bound to option name is missing.''\r\n                                               : ''Required option ''' + errMisssing.NameInfo.NameText + ''' is missing.'';", span="89-91"];
n28 [cluster="lambda expression", label="return badFormat.NameInfo == NameInfo.EmptyName\r\n                                               ? ''A value not bound to option name is defined with a bad format.''\r\n                                               : ''Option ''' + badFormat.NameInfo.NameText + ''' is defined with a bad format.'';", span="96-98"];
n31 [cluster="lambda expression", label="return seqOutRange.NameInfo == NameInfo.EmptyName\r\n                                               ? ''A sequence value not bound to option name is defined with few items than required.''\r\n                                               : ''A sequence option ''' + seqOutRange.NameInfo.NameText + ''' is defined with few items than required.'';", span="101-103"];
n36 [cluster="lambda expression", label="Exit lambda expression", span="76-110"];
n37 [cluster="lambda expression", label="throw new InvalidOperationException();", span="109-109"];
n38 [cluster="System.InvalidOperationException.InvalidOperationException()", label="Entry System.InvalidOperationException.InvalidOperationException()", span="0-0"];
m1_0 [cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Sequence.cs", label="Entry CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11"];
m1_2 [cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Sequence.cs", label="Exit CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11"];
m1_3 [cluster="System.Collections.Generic.IEnumerable<TSource>.Pairwise<TSource, TResult>(System.Func<TSource, TSource, TResult>)", file="Sequence.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Pairwise<TSource, TResult>(System.Func<TSource, TSource, TResult>)", span="10-10"];
m1_4 [cluster="lambda expression", file="Sequence.cs", label="Entry lambda expression", span="16-22"];
m1_6 [cluster="lambda expression", file="Sequence.cs", label="Exit lambda expression", span="16-22"];
m1_7 [cluster="CommandLine.Core.Token.IsName()", file="Sequence.cs", label="Entry CommandLine.Core.Token.IsName()", span="68-68"];
m1_8 [cluster="CommandLine.Core.Token.IsValue()", color=green, community=0, file="Sequence.cs", label="Entry CommandLine.Core.Token.IsValue()", prediction=0, span="73-73"];
m1_9 [cluster="System.Func<T, TResult>.Invoke(T)", file="Sequence.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m1_26 [cluster="lambda expression", file="Sequence.cs", label="t.Equals(nameToken)", span="29-29"];
m1_28 [cluster="lambda expression", file="Sequence.cs", label="!scalars.Contains(t)", span="26-26"];
m1_18 [cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token)", file="Sequence.cs", label="nameIndex >= 0", span="30-30"];
m1_37 [cluster="Unk.IsValue", file="Sequence.cs", label="Entry Unk.IsValue", span=""];
m1_14 [cluster="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>.OfSequence(CommandLine.Core.Token)", file="Sequence.cs", label="Entry System.Collections.Generic.IEnumerable<CommandLine.Core.Token>.OfSequence(CommandLine.Core.Token)", span="27-27"];
m1_22 [cluster="System.Collections.Generic.IEnumerable<TSource>.IndexOf<TSource>(System.Func<TSource, bool>)", file="Sequence.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.IndexOf<TSource>(System.Func<TSource, bool>)", span="36-36"];
m1_16 [cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token)", file="Sequence.cs", label="Entry CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token)", span="27-27"];
m1_34 [cluster="lambda expression", file="Sequence.cs", label="CommandLine.Core.Token", span=""];
m1_11 [cluster="CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Sequence.cs", label="Entry CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11"];
m1_13 [cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Sequence.cs", label="Entry CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12"];
m1_25 [cluster="lambda expression", file="Sequence.cs", label="Entry lambda expression", span="29-29"];
m1_29 [cluster="lambda expression", file="Sequence.cs", label="Entry lambda expression", span="32-32"];
m1_27 [cluster="lambda expression", file="Sequence.cs", label="Exit lambda expression", span="29-29"];
m1_31 [cluster="lambda expression", file="Sequence.cs", label="Exit lambda expression", span="32-32"];
m1_38 [cluster="lambda expression", file="Sequence.cs", label="Entry lambda expression", span="35-35"];
m1_32 [cluster="lambda expression", color=green, community=0, file="Sequence.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", prediction=0, span=""];
m1_24 [cluster="System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", file="Sequence.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", span="0-0"];
m1_39 [cluster="lambda expression", file="Sequence.cs", label="t.Text", span="35-35"];
m1_35 [cluster="lambda expression", file="Sequence.cs", label="CommandLine.Core.Token", span=""];
m1_40 [cluster="lambda expression", file="Sequence.cs", label="Exit lambda expression", span="35-35"];
m1_23 [cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="Sequence.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0"];
m1_21 [cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token)", file="Sequence.cs", label="Exit CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token)", span="27-27"];
m1_15 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="Sequence.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
m1_10 [cluster="CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", file="Sequence.cs", label="Entry CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", span="100-100"];
m1_17 [cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token)", file="Sequence.cs", label="var nameIndex = tokens.IndexOf(t => t.Equals(nameToken))", span="29-29"];
m1_20 [cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token)", file="Sequence.cs", label="return new Token[] { };", span="34-34"];
m1_33 [file="Sequence.cs", label="System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>", span=""];
m1_43 [file="Sequence.cs", label=sequences, span=""];
m1_41 [file="Sequence.cs", label=switches, span=""];
m1_42 [file="Sequence.cs", label=scalars, span=""];
m2_65 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12"];
m2_14 [cluster="Unk.ThrowingValidate", file="TokenPartitioner.cs", label="Entry Unk.ThrowingValidate", span=""];
m2_101 [cluster="T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", file="TokenPartitioner.cs", label="Entry T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="82-82"];
m2_95 [cluster="string.MatchName(string, string, System.StringComparer)", file="TokenPartitioner.cs", label="Entry string.MatchName(string, string, System.StringComparer)", span="8-8"];
m2_140 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", file="TokenPartitioner.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", span="0-0"];
m2_88 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="14-14"];
m2_0 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="14-14"];
m2_5 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="TokenPartitioner.cs", label="Func<T> makeDefault = () =>\r\n                typeof(T).IsMutable()\r\n                    ? factory.MapValueOrDefault(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="33-37"];
m2_7 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="TokenPartitioner.cs", label="Func<ParserResult<T>> buildUp = () =>\r\n            {\r\n                var tokenizerResult = tokenizer(arguments, optionSpecs);\r\n\r\n                var tokens = tokenizerResult.SucceededWith();\r\n\r\n                var partitions = TokenPartitioner.Partition(\r\n                    tokens,\r\n                    name => TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer));\r\n\r\n                var optionSpecPropsResult =\r\n                    OptionMapper.MapValues(\r\n                        (from pt in specProps where pt.Specification.IsOption() select pt),\r\n                        partitions.Options,\r\n                        (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture),\r\n                        nameComparer);\r\n\r\n                var valueSpecPropsResult =\r\n                    ValueMapper.MapValues(\r\n                        (from pt in specProps where pt.Specification.IsValue() select pt),\r\n                        partitions.Values,\r\n                        (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture));\r\n\r\n                var missingValueErrors = from token in partitions.Errors\r\n                    select\r\n                        new MissingValueOptionError(\r\n                            optionSpecs.Single(o => token.Text.MatchName(o.ShortName, o.LongName, nameComparer))\r\n                                .FromOptionSpecification());\r\n\r\n                var specPropsWithValue =\r\n                    optionSpecPropsResult.SucceededWith().Concat(valueSpecPropsResult.SucceededWith());\r\n\r\n                Func<T> buildMutable = () =>\r\n                {\r\n                    var mutable = factory.MapValueOrDefault(f => f(), Activator.CreateInstance<T>());\r\n                    mutable =\r\n                        mutable.SetProperties(specPropsWithValue, sp => sp.Value.IsJust(), sp => sp.Value.FromJustOrFail())\r\n                            .SetProperties(\r\n                                specPropsWithValue,\r\n                                sp => sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust(),\r\n                                sp => sp.Specification.DefaultValue.FromJustOrFail())\r\n                            .SetProperties(\r\n                                specPropsWithValue,\r\n                                sp =>\r\n                                    sp.Value.IsNothing() && sp.Specification.TargetType == TargetType.Sequence\r\n                                    && sp.Specification.DefaultValue.MatchNothing(),\r\n                                sp => sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray());\r\n                    return mutable;\r\n                };\r\n\r\n                Func<T> buildImmutable = () =>\r\n                {\r\n                    var ctor = typeInfo.GetConstructor((from sp in specProps select sp.Property.PropertyType).ToArray());\r\n                    var values = (from prms in ctor.GetParameters()\r\n                        join sp in specPropsWithValue on prms.Name.ToLower() equals sp.Property.Name.ToLower()\r\n                        select\r\n                            sp.Value.MapValueOrDefault(\r\n                                v => v,\r\n                                sp.Specification.DefaultValue.MapValueOrDefault(\r\n                                    d => d,\r\n                                    sp.Specification.ConversionType.CreateDefaultForImmutable()))).ToArray();\r\n                    var immutable = (T)ctor.Invoke(values);\r\n                    return immutable;\r\n                };\r\n\r\n                var instance = typeInfo.IsMutable() ? buildMutable() : buildImmutable();\r\n\r\n                var validationErrors = specPropsWithValue.Validate(SpecificationPropertyRules.Lookup(tokens));\r\n\r\n                var allErrors =\r\n                    tokenizerResult.SuccessfulMessages()\r\n                        .Concat(missingValueErrors)\r\n                        .Concat(optionSpecPropsResult.SuccessfulMessages())\r\n                        .Concat(valueSpecPropsResult.SuccessfulMessages())\r\n                        .Concat(validationErrors)\r\n                        .Memorize();\r\n\r\n                var warnings = from e in allErrors where nonFatalErrors.Contains(e.Tag) select e;\r\n\r\n                return allErrors.Except(warnings).ToParserResult(instance);\r\n            }", span="42-122"];
m2_8 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="TokenPartitioner.cs", label="var preprocessorErrors = arguments.Any()\r\n                ? arguments.Preprocess(PreprocessorGuards.Lookup(nameComparer))\r\n                : Enumerable.Empty<Error>()", span="124-126"];
m2_9 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="TokenPartitioner.cs", label="var result = arguments.Any()\r\n                ? preprocessorErrors.Any()\r\n                    ? notParsed(preprocessorErrors)\r\n                    : buildUp()\r\n                : buildUp()", span="128-132"];
m2_3 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="TokenPartitioner.cs", label="var specs = from pt in specProps select pt.Specification", span="27-27"];
m2_4 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="TokenPartitioner.cs", label="var optionSpecs = specs\r\n                .ThrowingValidate(SpecificationGuards.Lookup)\r\n                .OfType<OptionSpecification>()", span="29-31"];
m2_6 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="TokenPartitioner.cs", label="Func<IEnumerable<Error>, ParserResult<T>> notParsed =\r\n                errs => new NotParsed<T>(makeDefault().GetType().ToTypeInfo(), errs)", span="39-40"];
m2_10 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="TokenPartitioner.cs", label="return result;", span="134-134"];
m2_11 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="TokenPartitioner.cs", label="Exit CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="14-14"];
m2_38 [cluster="Unk.>", file="TokenPartitioner.cs", label="Entry Unk.>", span=""];
m2_46 [cluster="System.Type.ToTypeInfo()", file="TokenPartitioner.cs", label="Entry System.Type.ToTypeInfo()", span="174-174"];
m2_20 [cluster="System.Func<T, TResult>.Invoke(T)", file="TokenPartitioner.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m2_68 [cluster="CommandLine.Core.Specification.IsValue()", file="TokenPartitioner.cs", label="Entry CommandLine.Core.Specification.IsValue()", span="15-15"];
m2_74 [cluster="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", file="TokenPartitioner.cs", label="Entry System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="40-40"];
m2_19 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="TokenPartitioner.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m2_137 [cluster="System.Reflection.MethodBase.GetParameters()", file="TokenPartitioner.cs", label="Entry System.Reflection.MethodBase.GetParameters()", span="0-0"];
m2_45 [cluster="CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="TokenPartitioner.cs", label="Entry CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="163-163"];
m2_139 [cluster="System.Type.CreateDefaultForImmutable()", file="TokenPartitioner.cs", label="Entry System.Type.CreateDefaultForImmutable()", span="149-149"];
m2_136 [cluster="Unk.GetConstructor", file="TokenPartitioner.cs", label="Entry Unk.GetConstructor", span=""];
m2_70 [cluster="Unk.Single", file="TokenPartitioner.cs", label="Entry Unk.Single", span=""];
m2_13 [cluster="System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", file="TokenPartitioner.cs", label="Entry System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", span="16-16"];
m2_78 [cluster="Unk.Contains", file="TokenPartitioner.cs", label="Entry Unk.Contains", span=""];
m2_16 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="TokenPartitioner.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
m2_21 [cluster="System.Func<TResult>.Invoke()", file="TokenPartitioner.cs", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
m2_25 [cluster="object.GetType()", file="TokenPartitioner.cs", label="Entry object.GetType()", span="0-0"];
m2_145 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="101-101"];
m2_33 [cluster="lambda expression", file="TokenPartitioner.cs", label="typeof(T).IsMutable()\r\n                    ? factory.MapValueOrDefault(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="34-37"];
m2_48 [cluster="lambda expression", file="TokenPartitioner.cs", label="var tokenizerResult = tokenizer(arguments, optionSpecs)", span="44-44"];
m2_50 [cluster="lambda expression", file="TokenPartitioner.cs", label="var partitions = TokenPartitioner.Partition(\r\n                    tokens,\r\n                    name => TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer))", span="48-50"];
m2_82 [cluster="lambda expression", file="TokenPartitioner.cs", label="TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer)", span="50-50"];
m2_51 [cluster="lambda expression", file="TokenPartitioner.cs", label="var optionSpecPropsResult =\r\n                    OptionMapper.MapValues(\r\n                        (from pt in specProps where pt.Specification.IsOption() select pt),\r\n                        partitions.Options,\r\n                        (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture),\r\n                        nameComparer)", span="52-57"];
m2_86 [cluster="lambda expression", file="TokenPartitioner.cs", label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="56-56"];
m2_52 [cluster="lambda expression", file="TokenPartitioner.cs", label="var valueSpecPropsResult =\r\n                    ValueMapper.MapValues(\r\n                        (from pt in specProps where pt.Specification.IsValue() select pt),\r\n                        partitions.Values,\r\n                        (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture))", span="59-63"];
m2_90 [cluster="lambda expression", file="TokenPartitioner.cs", label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="63-63"];
m2_53 [cluster="lambda expression", file="TokenPartitioner.cs", label="var missingValueErrors = from token in partitions.Errors\r\n                    select\r\n                        new MissingValueOptionError(\r\n                            optionSpecs.Single(o => token.Text.MatchName(o.ShortName, o.LongName, nameComparer))\r\n                                .FromOptionSpecification())", span="65-69"];
m2_93 [cluster="lambda expression", file="TokenPartitioner.cs", label="token.Text.MatchName(o.ShortName, o.LongName, nameComparer)", span="68-68"];
m2_55 [cluster="lambda expression", file="TokenPartitioner.cs", label="Func<T> buildMutable = () =>\r\n                {\r\n                    var mutable = factory.MapValueOrDefault(f => f(), Activator.CreateInstance<T>());\r\n                    mutable =\r\n                        mutable.SetProperties(specPropsWithValue, sp => sp.Value.IsJust(), sp => sp.Value.FromJustOrFail())\r\n                            .SetProperties(\r\n                                specPropsWithValue,\r\n                                sp => sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust(),\r\n                                sp => sp.Specification.DefaultValue.FromJustOrFail())\r\n                            .SetProperties(\r\n                                specPropsWithValue,\r\n                                sp =>\r\n                                    sp.Value.IsNothing() && sp.Specification.TargetType == TargetType.Sequence\r\n                                    && sp.Specification.DefaultValue.MatchNothing(),\r\n                                sp => sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray());\r\n                    return mutable;\r\n                }", span="74-90"];
m2_97 [cluster="lambda expression", file="TokenPartitioner.cs", label="var mutable = factory.MapValueOrDefault(f => f(), Activator.CreateInstance<T>())", span="76-76"];
m2_60 [cluster="lambda expression", file="TokenPartitioner.cs", label="var warnings = from e in allErrors where nonFatalErrors.Contains(e.Tag) select e", span="119-119"];
m2_22 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="22-22"];
m2_56 [cluster="lambda expression", file="TokenPartitioner.cs", label="Func<T> buildImmutable = () =>\r\n                {\r\n                    var ctor = typeInfo.GetConstructor((from sp in specProps select sp.Property.PropertyType).ToArray());\r\n                    var values = (from prms in ctor.GetParameters()\r\n                        join sp in specPropsWithValue on prms.Name.ToLower() equals sp.Property.Name.ToLower()\r\n                        select\r\n                            sp.Value.MapValueOrDefault(\r\n                                v => v,\r\n                                sp.Specification.DefaultValue.MapValueOrDefault(\r\n                                    d => d,\r\n                                    sp.Specification.ConversionType.CreateDefaultForImmutable()))).ToArray();\r\n                    var immutable = (T)ctor.Invoke(values);\r\n                    return immutable;\r\n                }", span="92-105"];
m2_131 [cluster="lambda expression", file="TokenPartitioner.cs", label="var ctor = typeInfo.GetConstructor((from sp in specProps select sp.Property.PropertyType).ToArray())", span="94-94"];
m2_57 [cluster="lambda expression", file="TokenPartitioner.cs", label="var instance = typeInfo.IsMutable() ? buildMutable() : buildImmutable()", span="107-107"];
m2_26 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="24-25"];
m2_43 [cluster="lambda expression", file="TokenPartitioner.cs", label="new NotParsed<T>(makeDefault().GetType().ToTypeInfo(), errs)", span="40-40"];
m2_24 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="22-22"];
m2_28 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="24-25"];
m2_32 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="33-37"];
m2_34 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="33-37"];
m2_39 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="35-35"];
m2_40 [cluster="lambda expression", file="TokenPartitioner.cs", label="f()", span="35-35"];
m2_41 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="35-35"];
m2_42 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="40-40"];
m2_44 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="40-40"];
m2_47 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="42-122"];
m2_49 [cluster="lambda expression", file="TokenPartitioner.cs", label="var tokens = tokenizerResult.SucceededWith()", span="46-46"];
m2_59 [cluster="lambda expression", file="TokenPartitioner.cs", label="var allErrors =\r\n                    tokenizerResult.SuccessfulMessages()\r\n                        .Concat(missingValueErrors)\r\n                        .Concat(optionSpecPropsResult.SuccessfulMessages())\r\n                        .Concat(valueSpecPropsResult.SuccessfulMessages())\r\n                        .Concat(validationErrors)\r\n                        .Memorize()", span="111-117"];
m2_58 [cluster="lambda expression", file="TokenPartitioner.cs", label="var validationErrors = specPropsWithValue.Validate(SpecificationPropertyRules.Lookup(tokens))", span="109-109"];
m2_81 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="50-50"];
m2_85 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="56-56"];
m2_54 [cluster="lambda expression", file="TokenPartitioner.cs", label="var specPropsWithValue =\r\n                    optionSpecPropsResult.SucceededWith().Concat(valueSpecPropsResult.SucceededWith())", span="71-72"];
m2_89 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="63-63"];
m2_92 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="68-68"];
m2_98 [cluster="lambda expression", file="TokenPartitioner.cs", label="mutable =\r\n                        mutable.SetProperties(specPropsWithValue, sp => sp.Value.IsJust(), sp => sp.Value.FromJustOrFail())\r\n                            .SetProperties(\r\n                                specPropsWithValue,\r\n                                sp => sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust(),\r\n                                sp => sp.Specification.DefaultValue.FromJustOrFail())\r\n                            .SetProperties(\r\n                                specPropsWithValue,\r\n                                sp =>\r\n                                    sp.Value.IsNothing() && sp.Specification.TargetType == TargetType.Sequence\r\n                                    && sp.Specification.DefaultValue.MatchNothing(),\r\n                                sp => sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray())", span="77-88"];
m2_132 [cluster="lambda expression", file="TokenPartitioner.cs", label="var values = (from prms in ctor.GetParameters()\r\n                        join sp in specPropsWithValue on prms.Name.ToLower() equals sp.Property.Name.ToLower()\r\n                        select\r\n                            sp.Value.MapValueOrDefault(\r\n                                v => v,\r\n                                sp.Specification.DefaultValue.MapValueOrDefault(\r\n                                    d => d,\r\n                                    sp.Specification.ConversionType.CreateDefaultForImmutable()))).ToArray()", span="95-102"];
m2_61 [cluster="lambda expression", file="TokenPartitioner.cs", label="return allErrors.Except(warnings).ToParserResult(instance);", span="121-121"];
m2_62 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="42-122"];
m2_83 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="50-50"];
m2_87 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="56-56"];
m2_91 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="63-63"];
m2_94 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="68-68"];
m2_96 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="74-90"];
m2_102 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="76-76"];
m2_99 [cluster="lambda expression", file="TokenPartitioner.cs", label="return mutable;", span="89-89"];
m2_105 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="78-78"];
m2_109 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="78-78"];
m2_113 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="81-81"];
m2_117 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="82-82"];
m2_120 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="85-87"];
m2_124 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="88-88"];
m2_100 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="74-90"];
m2_103 [cluster="lambda expression", file="TokenPartitioner.cs", label="f()", span="76-76"];
m2_104 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="76-76"];
m2_106 [cluster="lambda expression", file="TokenPartitioner.cs", label="sp.Value.IsJust()", span="78-78"];
m2_107 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="78-78"];
m2_110 [cluster="lambda expression", file="TokenPartitioner.cs", label="sp.Value.FromJustOrFail()", span="78-78"];
m2_111 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="78-78"];
m2_114 [cluster="lambda expression", file="TokenPartitioner.cs", label="sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust()", span="81-81"];
m2_115 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="81-81"];
m2_118 [cluster="lambda expression", file="TokenPartitioner.cs", label="sp.Specification.DefaultValue.FromJustOrFail()", span="82-82"];
m2_119 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="82-82"];
m2_121 [cluster="lambda expression", file="TokenPartitioner.cs", label="sp.Value.IsNothing() && sp.Specification.TargetType == TargetType.Sequence\r\n                                    && sp.Specification.DefaultValue.MatchNothing()", span="86-87"];
m2_122 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="85-87"];
m2_125 [cluster="lambda expression", file="TokenPartitioner.cs", label="sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray()", span="88-88"];
m2_126 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="88-88"];
m2_130 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="92-105"];
m2_133 [cluster="lambda expression", file="TokenPartitioner.cs", label="var immutable = (T)ctor.Invoke(values)", span="103-103"];
m2_142 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="99-99"];
m2_134 [cluster="lambda expression", file="TokenPartitioner.cs", label="return immutable;", span="104-104"];
m2_135 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="92-105"];
m2_143 [cluster="lambda expression", file="TokenPartitioner.cs", label=v, span="99-99"];
m2_144 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="99-99"];
m2_146 [cluster="lambda expression", file="TokenPartitioner.cs", label=d, span="101-101"];
m2_147 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="101-101"];
m2_73 [cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12"];
m2_18 [cluster="System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", file="TokenPartitioner.cs", label="Entry System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="11-11"];
m2_69 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="TokenPartitioner.cs", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="294-294"];
m2_75 [cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SuccessfulMessages<TSuccess, TMessage>()", file="TokenPartitioner.cs", label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SuccessfulMessages<TSuccess, TMessage>()", span="15-15"];
m2_76 [cluster="Unk.Concat", file="TokenPartitioner.cs", label="Entry Unk.Concat", span=""];
m2_128 [cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", file="TokenPartitioner.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0"];
m2_129 [cluster="System.Type.CreateEmptyArray()", file="TokenPartitioner.cs", label="Entry System.Type.CreateEmptyArray()", span="125-125"];
m2_127 [cluster="System.Type.GetGenericArguments()", file="TokenPartitioner.cs", label="Entry System.Type.GetGenericArguments()", span="0-0"];
m2_77 [cluster="Unk.Memorize", file="TokenPartitioner.cs", label="Entry Unk.Memorize", span=""];
m2_138 [cluster="string.ToLower()", file="TokenPartitioner.cs", label="Entry string.ToLower()", span="0-0"];
m2_79 [cluster="Unk.Except", file="TokenPartitioner.cs", label="Entry Unk.Except", span=""];
m2_80 [cluster="Unk.ToParserResult", file="TokenPartitioner.cs", label="Entry Unk.ToParserResult", span=""];
m2_84 [cluster="CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
m2_30 [cluster="CSharpx.Maybe.Nothing<T>()", file="TokenPartitioner.cs", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
m2_36 [cluster="System.Activator.CreateInstance<T>()", file="TokenPartitioner.cs", label="Entry System.Activator.CreateInstance<T>()", span="0-0"];
m2_64 [cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()", file="TokenPartitioner.cs", label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()", span="653-653"];
m2_12 [cluster="CSharpx.Maybe<T1>.MapValueOrDefault<T1, T2>(System.Func<T1, T2>, T2)", file="TokenPartitioner.cs", label="Entry CSharpx.Maybe<T1>.MapValueOrDefault<T1, T2>(System.Func<T1, T2>, T2)", span="377-377"];
m2_66 [cluster="CommandLine.Core.Specification.IsOption()", file="TokenPartitioner.cs", label="Entry CommandLine.Core.Specification.IsOption()", span="10-10"];
m2_116 [cluster="CSharpx.Maybe<T>.IsNothing<T>()", file="TokenPartitioner.cs", label="Entry CSharpx.Maybe<T>.IsNothing<T>()", span="334-334"];
m2_123 [cluster="CSharpx.Maybe<T>.MatchNothing()", file="TokenPartitioner.cs", label="Entry CSharpx.Maybe<T>.MatchNothing()", span="57-57"];
m2_35 [cluster="System.Type.IsMutable()", file="TokenPartitioner.cs", label="Entry System.Type.IsMutable()", span="139-139"];
m2_31 [cluster="CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)", span="21-21"];
m2_112 [cluster="CSharpx.Maybe<T>.FromJustOrFail<T>(System.Exception)", file="TokenPartitioner.cs", label="Entry CSharpx.Maybe<T>.FromJustOrFail<T>(System.Exception)", span="355-355"];
m2_71 [cluster="Unk.FromOptionSpecification", file="TokenPartitioner.cs", label="Entry Unk.FromOptionSpecification", span=""];
m2_15 [cluster="System.Collections.IEnumerable.OfType<TResult>()", file="TokenPartitioner.cs", label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0"];
m2_17 [cluster="CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)", span="11-11"];
m2_141 [cluster="System.Reflection.ConstructorInfo.Invoke(object[])", file="TokenPartitioner.cs", label="Entry System.Reflection.ConstructorInfo.Invoke(object[])", span="0-0"];
m2_37 [cluster="Unk.ToArray", file="TokenPartitioner.cs", label="Entry Unk.ToArray", span=""];
m2_108 [cluster="CSharpx.Maybe<T>.IsJust<T>()", file="TokenPartitioner.cs", label="Entry CSharpx.Maybe<T>.IsJust<T>()", span="326-326"];
m2_29 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="103-103"];
m2_63 [cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", file="TokenPartitioner.cs", label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0"];
m2_72 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="TokenPartitioner.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
m2_67 [cluster="Unk.MapValues", file="TokenPartitioner.cs", label="Entry Unk.MapValues", span=""];
m2_148 [file="TokenPartitioner.cs", label="CSharpx.Maybe<System.Func<T>>", span=""];
m2_149 [file="TokenPartitioner.cs", label=specProps, span=""];
m2_150 [file="TokenPartitioner.cs", label=makeDefault, span=""];
m2_151 [file="TokenPartitioner.cs", label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>", span=""];
m2_152 [file="TokenPartitioner.cs", label="System.Collections.Generic.IEnumerable<string>", span=""];
m2_153 [file="TokenPartitioner.cs", label=optionSpecs, span=""];
m2_154 [file="TokenPartitioner.cs", label="System.StringComparer", span=""];
m2_155 [file="TokenPartitioner.cs", label="System.Globalization.CultureInfo", span=""];
m2_156 [file="TokenPartitioner.cs", label=typeInfo, span=""];
m2_157 [file="TokenPartitioner.cs", label="System.Collections.Generic.IEnumerable<CommandLine.ErrorType>", span=""];
m2_158 [file="TokenPartitioner.cs", label=token, span=""];
m2_159 [file="TokenPartitioner.cs", label=specPropsWithValue, span=""];
n13 -> n16  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
n13 -> n18  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
n13 -> n20  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
n13 -> n25  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
n13 -> n33  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
m1_0 -> m1_2  [color=darkseagreen4, key=1, label="System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>", style=dashed];
m1_0 -> m1_3  [color=darkseagreen4, key=1, label="System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>", style=dashed];
m1_0 -> m1_4  [color=darkseagreen4, key=1, label="System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>", style=dashed];
m1_2 -> m1_8  [color=green, key=1, label=switches, style=dashed];
m1_2 -> m1_24  [color=darkseagreen4, key=1, label=switches, style=dashed];
m1_3 -> m1_8  [color=green, key=1, label=scalars, style=dashed];
m1_3 -> m1_28  [color=darkseagreen4, key=1, label=scalars, style=dashed];
m1_4 -> m1_8  [color=green, key=1, label=sequences, style=dashed];
m1_4 -> m1_32  [color=green, key=1, label=sequences, style=dashed];
m1_6 -> m1_8  [color=green, key=1, label=values, style=dashed];
m1_6 -> m1_34  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_8 -> m1_38  [color=green, key=1, label="lambda expression", style=dashed];
m1_16 -> m1_26  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m1_35 -> m1_26  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m1_17 -> m1_25  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_43 -> m1_32  [color=green, key=1, label=sequences, style=dashed];
m1_41 -> m1_24  [color=darkseagreen4, key=1, label=switches, style=dashed];
m1_42 -> m1_28  [color=darkseagreen4, key=1, label=scalars, style=dashed];
m2_0 -> m2_33  [color=darkseagreen4, key=1, label="CSharpx.Maybe<System.Func<T>>", style=dashed];
m2_0 -> m2_82  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m2_0 -> m2_51  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m2_0 -> m2_86  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m2_0 -> m2_52  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m2_0 -> m2_90  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m2_0 -> m2_93  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m2_5 -> m2_43  [color=darkseagreen4, key=1, label=makeDefault, style=dashed];
m2_4 -> m2_82  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
m2_6 -> m2_43  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Error>", style=dashed];
m2_33 -> m2_39  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_33 -> m2_33  [color=darkseagreen4, key=1, label=p, style=dashed];
m2_48 -> m2_59  [color=darkseagreen4, key=1, label=tokenizerResult, style=dashed];
m2_50 -> m2_81  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_50 -> m2_52  [color=darkseagreen4, key=1, label=partitions, style=dashed];
m2_51 -> m2_51  [color=darkseagreen4, key=1, label=pt, style=dashed];
m2_51 -> m2_85  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_51 -> m2_54  [color=darkseagreen4, key=1, label=optionSpecPropsResult, style=dashed];
m2_51 -> m2_59  [color=darkseagreen4, key=1, label=optionSpecPropsResult, style=dashed];
m2_52 -> m2_52  [color=darkseagreen4, key=1, label=pt, style=dashed];
m2_52 -> m2_89  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_52 -> m2_54  [color=darkseagreen4, key=1, label=valueSpecPropsResult, style=dashed];
m2_52 -> m2_59  [color=darkseagreen4, key=1, label=valueSpecPropsResult, style=dashed];
m2_53 -> m2_92  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_53 -> m2_93  [color=darkseagreen4, key=1, label=token, style=dashed];
m2_53 -> m2_59  [color=darkseagreen4, key=1, label=missingValueErrors, style=dashed];
m2_97 -> m2_102  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_57 -> m2_61  [color=darkseagreen4, key=1, label=instance, style=dashed];
m2_59 -> m2_61  [color=darkseagreen4, key=1, label=allErrors, style=dashed];
m2_54 -> m2_98  [color=darkseagreen4, key=1, label=specPropsWithValue, style=dashed];
m2_98 -> m2_98  [color=darkseagreen4, key=1, label=mutable, style=dashed];
m2_98 -> m2_105  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_98 -> m2_109  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_98 -> m2_113  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_98 -> m2_117  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_98 -> m2_120  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_98 -> m2_124  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_132 -> m2_142  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_132 -> m2_145  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_148 -> m2_33  [color=darkseagreen4, key=1, label="CSharpx.Maybe<System.Func<T>>", style=dashed];
m2_149 -> m2_33  [color=darkseagreen4, key=1, label=specProps, style=dashed];
m2_149 -> m2_51  [color=darkseagreen4, key=1, label=specProps, style=dashed];
m2_149 -> m2_52  [color=darkseagreen4, key=1, label=specProps, style=dashed];
m2_150 -> m2_43  [color=darkseagreen4, key=1, label=makeDefault, style=dashed];
m2_153 -> m2_82  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
m2_154 -> m2_82  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m2_154 -> m2_51  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m2_154 -> m2_93  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m2_155 -> m2_51  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m2_155 -> m2_86  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m2_155 -> m2_52  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m2_155 -> m2_90  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m2_158 -> m2_93  [color=darkseagreen4, key=1, label=token, style=dashed];
m2_159 -> m2_98  [color=darkseagreen4, key=1, label=specPropsWithValue, style=dashed];
}
