digraph  {
n77 [label="CSharpx.Maybe<T>", span=""];
n78 [label="CSharpx.Just<T>", span=""];
n79 [label="System.Func<TSource, CSharpx.Maybe<TValue>>", span=""];
n80 [label="System.Func<TSource, TValue, TResult>", span=""];
n81 [label=TSource, span=""];
n0 [cluster="CSharpx.Maybe<T>.Maybe(CSharpx.MaybeType)", label="Entry CSharpx.Maybe<T>.Maybe(CSharpx.MaybeType)", span="19-19"];
n1 [cluster="CSharpx.Maybe<T>.Maybe(CSharpx.MaybeType)", label="this.tag = tag", span="21-21"];
n2 [cluster="CSharpx.Maybe<T>.Maybe(CSharpx.MaybeType)", label="Exit CSharpx.Maybe<T>.Maybe(CSharpx.MaybeType)", span="19-19"];
n3 [cluster="CSharpx.Maybe<T>.MatchNothing()", label="Entry CSharpx.Maybe<T>.MatchNothing()", span="29-29"];
n4 [cluster="CSharpx.Maybe<T>.MatchNothing()", label="return Tag == MaybeType.Nothing;", span="31-31"];
n5 [cluster="CSharpx.Maybe<T>.MatchNothing()", label="Exit CSharpx.Maybe<T>.MatchNothing()", span="29-29"];
n6 [cluster="CSharpx.Maybe<T>.MatchJust(out T)", label="Entry CSharpx.Maybe<T>.MatchJust(out T)", span="34-34"];
n7 [cluster="CSharpx.Maybe<T>.MatchJust(out T)", label="value = Tag == MaybeType.Just\r\n                ? ((Just<T>)this).Value\r\n                : default(T)", span="36-38"];
n8 [cluster="CSharpx.Maybe<T>.MatchJust(out T)", label="return Tag == MaybeType.Just;", span="39-39"];
n9 [cluster="CSharpx.Maybe<T>.MatchJust(out T)", label="Exit CSharpx.Maybe<T>.MatchJust(out T)", span="34-34"];
n10 [cluster="CSharpx.Nothing<T>.Nothing()", label="Entry CSharpx.Nothing<T>.Nothing()", span="48-48"];
n11 [cluster="CSharpx.Nothing<T>.Nothing()", label="Exit CSharpx.Nothing<T>.Nothing()", span="48-48"];
n12 [cluster="CSharpx.Just<T>.Just(T)", label="Entry CSharpx.Just<T>.Just(T)", span="58-58"];
n13 [cluster="CSharpx.Just<T>.Just(T)", label="this.value = value", span="61-61"];
n14 [cluster="CSharpx.Just<T>.Just(T)", label="Exit CSharpx.Just<T>.Just(T)", span="58-58"];
n15 [cluster="CSharpx.Maybe.Nothing<T>()", label="Entry CSharpx.Maybe.Nothing<T>()", span="75-75"];
n16 [cluster="CSharpx.Maybe.Nothing<T>()", label="return new Nothing<T>();", span="77-77"];
n17 [cluster="CSharpx.Maybe.Nothing<T>()", label="Exit CSharpx.Maybe.Nothing<T>()", span="75-75"];
n18 [cluster="CSharpx.Maybe.Just<T>(T)", label="Entry CSharpx.Maybe.Just<T>(T)", span="80-80"];
n19 [cluster="CSharpx.Maybe.Just<T>(T)", label="return new Just<T>(value);", span="82-82"];
n20 [cluster="CSharpx.Maybe.Just<T>(T)", label="Exit CSharpx.Maybe.Just<T>(T)", span="80-80"];
n21 [cluster="CSharpx.Maybe.OfEither<T1, T2>(CSharpx.Either<T1, T2>)", label="Entry CSharpx.Maybe.OfEither<T1, T2>(CSharpx.Either<T1, T2>)", span="89-89"];
n22 [cluster="CSharpx.Maybe.OfEither<T1, T2>(CSharpx.Either<T1, T2>)", label="either.Tag == Either2Type.Either1Of2", span="91-91"];
n23 [cluster="CSharpx.Maybe.OfEither<T1, T2>(CSharpx.Either<T1, T2>)", label="return new Just<T1>(((Either1Of2<T1, T2>)either).Value);", span="93-93"];
n24 [cluster="CSharpx.Maybe.OfEither<T1, T2>(CSharpx.Either<T1, T2>)", label="return new Nothing<T1>();", span="95-95"];
n25 [cluster="CSharpx.Maybe.OfEither<T1, T2>(CSharpx.Either<T1, T2>)", label="Exit CSharpx.Maybe.OfEither<T1, T2>(CSharpx.Either<T1, T2>)", span="89-89"];
n26 [cluster="CSharpx.MaybeExtensions.ToMaybe<T>(T)", label="Entry CSharpx.MaybeExtensions.ToMaybe<T>(T)", span="105-105"];
n27 [cluster="CSharpx.MaybeExtensions.ToMaybe<T>(T)", label="return Equals(value, default(T)) ? Maybe.Nothing<T>() : Maybe.Just(value);", span="107-107"];
n28 [cluster="CSharpx.MaybeExtensions.ToMaybe<T>(T)", label="Exit CSharpx.MaybeExtensions.ToMaybe<T>(T)", span="105-105"];
n29 [cluster="object.Equals(object, object)", label="Entry object.Equals(object, object)", span="0-0"];
n30 [cluster="CSharpx.MaybeExtensions.Bind<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, CSharpx.Maybe<T2>>)", label="Entry CSharpx.MaybeExtensions.Bind<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, CSharpx.Maybe<T2>>)", span="110-110"];
n31 [cluster="CSharpx.MaybeExtensions.Bind<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, CSharpx.Maybe<T2>>)", label="T1 value1", span="112-112"];
n32 [cluster="CSharpx.MaybeExtensions.Bind<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, CSharpx.Maybe<T2>>)", label="return maybe.MatchJust(out value1)\r\n                ? func(value1)\r\n                : Maybe.Nothing<T2>();", span="113-115"];
n33 [cluster="CSharpx.MaybeExtensions.Bind<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, CSharpx.Maybe<T2>>)", label="Exit CSharpx.MaybeExtensions.Bind<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, CSharpx.Maybe<T2>>)", span="110-110"];
n34 [cluster="System.Func<T, TResult>.Invoke(T)", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
n35 [cluster="CSharpx.MaybeExtensions.Map<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>)", label="Entry CSharpx.MaybeExtensions.Map<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>)", span="118-118"];
n36 [cluster="CSharpx.MaybeExtensions.Map<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>)", label="T1 value1", span="120-120"];
n37 [cluster="CSharpx.MaybeExtensions.Map<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>)", label="return maybe.MatchJust(out value1)\r\n                ? Maybe.Just(func(value1))\r\n                : Maybe.Nothing<T2>();", span="121-123"];
n38 [cluster="CSharpx.MaybeExtensions.Map<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>)", label="Exit CSharpx.MaybeExtensions.Map<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>)", span="118-118"];
n39 [cluster="CSharpx.MaybeExtensions.Return<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>, T2)", label="Entry CSharpx.MaybeExtensions.Return<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>, T2)", span="126-126"];
n40 [cluster="CSharpx.MaybeExtensions.Return<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>, T2)", label="T1 value1", span="128-128"];
n41 [cluster="CSharpx.MaybeExtensions.Return<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>, T2)", label="return maybe.MatchJust(out value1)\r\n                ? func(value1)\r\n                : noneValue;", span="129-131"];
n42 [cluster="CSharpx.MaybeExtensions.Return<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>, T2)", label="Exit CSharpx.MaybeExtensions.Return<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>, T2)", span="126-126"];
n43 [cluster="CSharpx.MaybeExtensions.Do<T>(CSharpx.Maybe<T>, System.Action<T>)", label="Entry CSharpx.MaybeExtensions.Do<T>(CSharpx.Maybe<T>, System.Action<T>)", span="134-134"];
n44 [cluster="CSharpx.MaybeExtensions.Do<T>(CSharpx.Maybe<T>, System.Action<T>)", label="T value", span="136-136"];
n45 [cluster="CSharpx.MaybeExtensions.Do<T>(CSharpx.Maybe<T>, System.Action<T>)", label="maybe.MatchJust(out value)", span="137-137"];
n46 [cluster="CSharpx.MaybeExtensions.Do<T>(CSharpx.Maybe<T>, System.Action<T>)", label="action(value)", span="139-139"];
n47 [cluster="CSharpx.MaybeExtensions.Do<T>(CSharpx.Maybe<T>, System.Action<T>)", label="Exit CSharpx.MaybeExtensions.Do<T>(CSharpx.Maybe<T>, System.Action<T>)", span="134-134"];
n48 [cluster="System.Action<T>.Invoke(T)", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
n49 [cluster="CSharpx.MaybeExtensions.Select<TSource, TResult>(CSharpx.Maybe<TSource>, System.Func<TSource, TResult>)", label="Entry CSharpx.MaybeExtensions.Select<TSource, TResult>(CSharpx.Maybe<TSource>, System.Func<TSource, TResult>)", span="143-143"];
n50 [cluster="CSharpx.MaybeExtensions.Select<TSource, TResult>(CSharpx.Maybe<TSource>, System.Func<TSource, TResult>)", label="return maybe.Map(selector);", span="146-146"];
n51 [cluster="CSharpx.MaybeExtensions.Select<TSource, TResult>(CSharpx.Maybe<TSource>, System.Func<TSource, TResult>)", label="Exit CSharpx.MaybeExtensions.Select<TSource, TResult>(CSharpx.Maybe<TSource>, System.Func<TSource, TResult>)", span="143-143"];
n52 [cluster="CSharpx.Maybe<T1>.Map<T1, T2>(System.Func<T1, T2>)", label="Entry CSharpx.Maybe<T1>.Map<T1, T2>(System.Func<T1, T2>)", span="118-118"];
n53 [cluster="CSharpx.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CSharpx.Maybe<TSource>, System.Func<TSource, CSharpx.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)", label="Entry CSharpx.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CSharpx.Maybe<TSource>, System.Func<TSource, CSharpx.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)", span="149-149"];
n54 [cluster="CSharpx.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CSharpx.Maybe<TSource>, System.Func<TSource, CSharpx.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)", label="return maybe.Bind(\r\n                sourceValue => valueSelector(sourceValue)\r\n                    .Map(\r\n                        resultValue => resultSelector(sourceValue, resultValue)));", span="154-157"];
n58 [cluster="lambda expression", label="valueSelector(sourceValue)\r\n                    .Map(\r\n                        resultValue => resultSelector(sourceValue, resultValue))", span="155-157"];
n61 [cluster="lambda expression", label="resultSelector(sourceValue, resultValue)", span="157-157"];
n55 [cluster="CSharpx.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CSharpx.Maybe<TSource>, System.Func<TSource, CSharpx.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)", label="Exit CSharpx.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CSharpx.Maybe<TSource>, System.Func<TSource, CSharpx.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)", span="149-149"];
n56 [cluster="CSharpx.Maybe<T1>.Bind<T1, T2>(System.Func<T1, CSharpx.Maybe<T2>>)", label="Entry CSharpx.Maybe<T1>.Bind<T1, T2>(System.Func<T1, CSharpx.Maybe<T2>>)", span="110-110"];
n57 [cluster="lambda expression", label="Entry lambda expression", span="155-157"];
n59 [cluster="lambda expression", label="Exit lambda expression", span="155-157"];
n60 [cluster="lambda expression", label="Entry lambda expression", span="157-157"];
n62 [cluster="lambda expression", label="Exit lambda expression", span="157-157"];
n63 [cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0"];
n64 [cluster="CSharpx.MaybeExtensions.FromJust<T>(CSharpx.Maybe<T>, System.Exception)", label="Entry CSharpx.MaybeExtensions.FromJust<T>(CSharpx.Maybe<T>, System.Exception)", span="160-160"];
n65 [cluster="CSharpx.MaybeExtensions.FromJust<T>(CSharpx.Maybe<T>, System.Exception)", label="T value", span="162-162"];
n66 [cluster="CSharpx.MaybeExtensions.FromJust<T>(CSharpx.Maybe<T>, System.Exception)", label="maybe.MatchJust(out value)", span="163-163"];
n68 [cluster="CSharpx.MaybeExtensions.FromJust<T>(CSharpx.Maybe<T>, System.Exception)", label="throw exceptionToThrow ?? new ArgumentException(''Value empty.'');", span="167-167"];
n67 [cluster="CSharpx.MaybeExtensions.FromJust<T>(CSharpx.Maybe<T>, System.Exception)", label="return value;", span="165-165"];
n69 [cluster="CSharpx.MaybeExtensions.FromJust<T>(CSharpx.Maybe<T>, System.Exception)", label="Exit CSharpx.MaybeExtensions.FromJust<T>(CSharpx.Maybe<T>, System.Exception)", span="160-160"];
n70 [cluster="System.ArgumentException.ArgumentException(string)", label="Entry System.ArgumentException.ArgumentException(string)", span="0-0"];
n71 [cluster="CSharpx.MaybeExtensions.IsNothing<T>(CSharpx.Maybe<T>)", label="Entry CSharpx.MaybeExtensions.IsNothing<T>(CSharpx.Maybe<T>)", span="170-170"];
n72 [cluster="CSharpx.MaybeExtensions.IsNothing<T>(CSharpx.Maybe<T>)", label="return maybe.Tag == MaybeType.Nothing;", span="172-172"];
n73 [cluster="CSharpx.MaybeExtensions.IsNothing<T>(CSharpx.Maybe<T>)", label="Exit CSharpx.MaybeExtensions.IsNothing<T>(CSharpx.Maybe<T>)", span="170-170"];
n74 [cluster="CSharpx.MaybeExtensions.IsJust<T>(CSharpx.Maybe<T>)", label="Entry CSharpx.MaybeExtensions.IsJust<T>(CSharpx.Maybe<T>)", span="175-175"];
n75 [cluster="CSharpx.MaybeExtensions.IsJust<T>(CSharpx.Maybe<T>)", label="return maybe.Tag == MaybeType.Just;", span="177-177"];
n76 [cluster="CSharpx.MaybeExtensions.IsJust<T>(CSharpx.Maybe<T>)", label="Exit CSharpx.MaybeExtensions.IsJust<T>(CSharpx.Maybe<T>)", span="175-175"];
m0_57 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12"];
m0_80 [cluster="NotParsed<T>.cstr", file="InstanceBuilder.cs", label="Entry NotParsed<T>.cstr", span=""];
m0_48 [cluster="Unk.ThrowingValidate", file="InstanceBuilder.cs", label="Entry Unk.ThrowingValidate", span=""];
m0_67 [cluster="T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", file="InstanceBuilder.cs", label="Entry T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="71-71"];
m0_115 [cluster="string.MatchName(string, string, System.StringComparer)", file="InstanceBuilder.cs", label="Entry string.MatchName(string, string, System.StringComparer)", span="8-8"];
m0_53 [cluster="CommandLine.NotParsed<T>.NotParsed(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="InstanceBuilder.cs", label="Entry CommandLine.NotParsed<T>.NotParsed(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="142-142"];
m0_3 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="35-35"];
m0_43 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, file="InstanceBuilder.cs", label="var allErrors = tokenizerResult.Messages()\r\n                .Concat(missingValueErrors)\r\n                .Concat(optionSpecProps.Messages())\r\n                .Concat(valueSpecProps.Messages())\r\n                .Concat(validationErrors)", prediction=0, span="125-129"];
m0_28 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="var tokenizerResult = tokenizer(arguments, optionSpecs)", span="68-68"];
m0_31 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="var optionSpecProps = OptionMapper.MapValues(\r\n                (from pt in specProps where pt.Specification.IsOption() select pt),\r\n                partitions.Options,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture),\r\n                nameComparer)", span="76-80"];
m0_32 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="var valueSpecProps = ValueMapper.MapValues(\r\n                (from pt in specProps where pt.Specification.IsValue() select pt),\r\n                    partitions.Values,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture))", span="82-85"];
m0_33 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="var missingValueErrors = from token in partitions.Errors\r\n                                     select new MissingValueOptionError(\r\n                                         optionSpecs.Single(o => token.Text.MatchName(o.ShortName, o.LongName, nameComparer)).FromOptionSpecification())", span="87-89"];
m0_42 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="var validationErrors = specPropsWithValue.Validate(\r\n                SpecificationPropertyRules.Lookup(tokens))", span="122-123"];
m0_44 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="return allErrors.Any()\r\n                ? (ParserResult<T>)new NotParsed<T>(instance, allErrors)\r\n                : (ParserResult<T>)new Parsed<T>(instance);", span="131-133"];
m0_24 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="arguments.Any()", span="59-59"];
m0_22 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="var optionSpecs = specs\r\n                .ThrowingValidate(SpecificationGuards.Lookup)\r\n                .OfType<OptionSpecification>()", span="49-51"];
m0_26 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="preprocessorErrors.Any()", span="62-62"];
m0_29 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="var tokens = tokenizerResult.SucceededWith()", span="70-70"];
m0_30 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="var partitions = TokenPartitioner.Partition(\r\n                tokens,\r\n                name => TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer))", span="72-74"];
m0_20 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="var specProps = typeInfo.GetSpecifications(pi => SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>()))", span="44-45"];
m0_34 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="var specPropsWithValue = optionSpecProps.SucceededWith()\r\n                .Concat(valueSpecProps.SucceededWith())", span="91-92"];
m0_38 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="instance = instance\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsJust(),\r\n                        sp => sp.Value.FromJust())\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust(),\r\n                        sp => sp.Specification.DefaultValue.FromJust())\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsNothing()\r\n                            && sp.Specification.TargetType == TargetType.Sequence\r\n                            && sp.Specification.DefaultValue.MatchNothing(),\r\n                        sp => sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray())", span="98-109"];
m0_41 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="instance = (T)ctor.Invoke(values)", span="119-119"];
m0_19 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="var typeInfo = factory.Return(f => f().GetType(), typeof(T))", span="42-42"];
m0_23 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="Func<T> makeDefault = () =>\r\n                typeof(T).IsMutable()\r\n                    ? factory.Return(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="53-57"];
m0_25 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="var preprocessorErrors = arguments.Preprocess(PreprocessorGuards.Lookup(nameComparer))", span="61-61"];
m0_37 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="instance = factory.Return(f => f(), Activator.CreateInstance<T>())", span="97-97"];
m0_21 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="var specs = from pt in specProps select pt.Specification", span="47-47"];
m0_27 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="return new NotParsed<T>(makeDefault(), preprocessorErrors);", span="64-64"];
m0_39 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="var ctor = typeInfo.GetConstructor((from sp in specProps select sp.Property.PropertyType).ToArray())", span="113-113"];
m0_35 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="T instance", span="94-94"];
m0_40 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="var values = (from prms in ctor.GetParameters()\r\n                              join sp in specPropsWithValue on prms.Name.ToLower() equals sp.Property.Name.ToLower()\r\n                              select sp.Value.Return(v => v,\r\n                                    sp.Specification.DefaultValue.Return(d => d,\r\n                                        sp.Specification.ConversionType.CreateDefaultForImmutable()))).ToArray()", span="114-118"];
m0_36 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="typeInfo.IsMutable()", span="95-95"];
m0_45 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="Exit CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="35-35"];
m0_86 [cluster="Unk.GetType", file="InstanceBuilder.cs", label="Entry Unk.GetType", span=""];
m0_70 [cluster="Unk.GetParameters", file="InstanceBuilder.cs", label="Entry Unk.GetParameters", span=""];
m0_108 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="13-13"];
m0_10 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", span="46-46"];
m0_97 [cluster="Unk.>", file="InstanceBuilder.cs", label="Entry Unk.>", span=""];
m0_79 [cluster="Unk.Any", file="InstanceBuilder.cs", label="Entry Unk.Any", span=""];
m0_18 [cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16"];
m0_60 [cluster="CommandLine.Core.Specification.IsValue()", file="InstanceBuilder.cs", label="Entry CommandLine.Core.Specification.IsValue()", span="15-15"];
m0_76 [cluster="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", file="InstanceBuilder.cs", label="Entry System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="40-40"];
m0_77 [cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.Messages<TSuccess, TMessage>()", file="InstanceBuilder.cs", label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.Messages<TSuccess, TMessage>()", span="10-10"];
m0_14 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
m0_69 [cluster="Unk.GetConstructor", file="InstanceBuilder.cs", label="Entry Unk.GetConstructor", span=""];
m0_62 [cluster="Unk.Single", file="InstanceBuilder.cs", label="Entry Unk.Single", span=""];
m0_74 [cluster="Unk.Invoke", file="InstanceBuilder.cs", label="Entry Unk.Invoke", span=""];
m0_50 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="InstanceBuilder.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
m0_54 [cluster="System.Func<TResult>.Invoke()", file="InstanceBuilder.cs", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
m0_75 [cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12"];
m0_15 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="27-27"];
m0_105 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="79-79"];
m0_109 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="85-85"];
m0_112 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="89-89"];
m0_113 [cluster="lambda expression", file="InstanceBuilder.cs", label="token.Text.MatchName(o.ShortName, o.LongName, nameComparer)", span="89-89"];
m0_94 [cluster="lambda expression", file="InstanceBuilder.cs", label="typeof(T).IsMutable()\r\n                    ? factory.Return(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="54-57"];
m0_102 [cluster="lambda expression", file="InstanceBuilder.cs", label="TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer)", span="74-74"];
m0_106 [cluster="lambda expression", file="InstanceBuilder.cs", label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="79-79"];
m0_110 [cluster="lambda expression", file="InstanceBuilder.cs", label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="85-85"];
m0_101 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="74-74"];
m0_87 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="44-45"];
m0_107 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="79-79"];
m0_111 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="85-85"];
m0_114 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="89-89"];
m0_119 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="100-100"];
m0_123 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="101-101"];
m0_127 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="103-103"];
m0_131 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="104-104"];
m0_134 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="106-108"];
m0_138 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="109-109"];
m0_5 [cluster="lambda expression", file="InstanceBuilder.cs", label="var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer))", span="24-24"];
m0_12 [cluster="lambda expression", file="InstanceBuilder.cs", label="NameLookup.Contains(name, optionSpecs, nameComparer)", span="24-24"];
m0_6 [cluster="lambda expression", file="InstanceBuilder.cs", label="var explodedTokens = Tokenizer.ExplodeOptionList(\r\n                            tokens,\r\n                            name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer))", span="25-27"];
m0_16 [cluster="lambda expression", file="InstanceBuilder.cs", label="NameLookup.HavingSeparator(name, optionSpecs, nameComparer)", span="27-27"];
m0_4 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="22-29"];
m0_82 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="42-42"];
m0_93 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="53-57"];
m0_95 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="53-57"];
m0_98 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="55-55"];
m0_103 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="74-74"];
m0_116 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="97-97"];
m0_89 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="44-45"];
m0_88 [cluster="lambda expression", file="InstanceBuilder.cs", label="SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>())", span="44-45"];
m0_144 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="116-116"];
m0_147 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="117-117"];
m0_121 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="100-100"];
m0_120 [cluster="lambda expression", file="InstanceBuilder.cs", label="sp.Value.IsJust()", span="100-100"];
m0_125 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="101-101"];
m0_124 [cluster="lambda expression", file="InstanceBuilder.cs", label="sp.Value.FromJust()", span="101-101"];
m0_129 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="103-103"];
m0_128 [cluster="lambda expression", file="InstanceBuilder.cs", label="sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust()", span="103-103"];
m0_133 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="104-104"];
m0_132 [cluster="lambda expression", file="InstanceBuilder.cs", label="sp.Specification.DefaultValue.FromJust()", span="104-104"];
m0_136 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="106-108"];
m0_135 [cluster="lambda expression", file="InstanceBuilder.cs", label="sp.Value.IsNothing()\r\n                            && sp.Specification.TargetType == TargetType.Sequence\r\n                            && sp.Specification.DefaultValue.MatchNothing()", span="106-108"];
m0_140 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="109-109"];
m0_139 [cluster="lambda expression", file="InstanceBuilder.cs", label="sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray()", span="109-109"];
m0_11 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="24-24"];
m0_13 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="24-24"];
m0_7 [cluster="lambda expression", file="InstanceBuilder.cs", label="return explodedTokens;", span="28-28"];
m0_17 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="27-27"];
m0_8 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="22-29"];
m0_84 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="42-42"];
m0_83 [cluster="lambda expression", file="InstanceBuilder.cs", label="f().GetType()", span="42-42"];
m0_100 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="55-55"];
m0_99 [cluster="lambda expression", file="InstanceBuilder.cs", label="f()", span="55-55"];
m0_118 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="97-97"];
m0_117 [cluster="lambda expression", file="InstanceBuilder.cs", label="f()", span="97-97"];
m0_146 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="116-116"];
m0_145 [cluster="lambda expression", file="InstanceBuilder.cs", label=v, span="116-116"];
m0_148 [cluster="lambda expression", file="InstanceBuilder.cs", label=d, span="117-117"];
m0_149 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="117-117"];
m0_52 [cluster="System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", file="InstanceBuilder.cs", label="Entry System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="11-11"];
m0_0 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="14-14"];
m0_1 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="return Build(\r\n                factory,\r\n                (args, optionSpecs) =>\r\n                    {\r\n                        var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer));\r\n                        var explodedTokens = Tokenizer.ExplodeOptionList(\r\n                            tokens,\r\n                            name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer));\r\n                        return explodedTokens;\r\n                    },\r\n                arguments,\r\n                nameComparer,\r\n                parsingCulture);", span="20-32"];
m0_2 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="Exit CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="14-14"];
m0_61 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="InstanceBuilder.cs", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="269-269"];
m0_78 [cluster="Unk.Concat", file="InstanceBuilder.cs", label="Entry Unk.Concat", span=""];
m0_81 [cluster="CommandLine.Parsed<T>.Parsed(T)", file="InstanceBuilder.cs", label="Entry CommandLine.Parsed<T>.Parsed(T)", span="72-72"];
m0_47 [cluster="Unk.GetSpecifications", file="InstanceBuilder.cs", label="Entry Unk.GetSpecifications", span=""];
m0_73 [cluster="Unk.CreateDefaultForImmutable", file="InstanceBuilder.cs", label="Entry Unk.CreateDefaultForImmutable", span=""];
m0_142 [cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", file="InstanceBuilder.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0"];
m0_143 [cluster="System.Type.CreateEmptyArray()", file="InstanceBuilder.cs", label="Entry System.Type.CreateEmptyArray()", span="114-114"];
m0_72 [cluster="string.ToLower()", file="InstanceBuilder.cs", label="Entry string.ToLower()", span="0-0"];
m0_141 [cluster="System.Type.GetGenericArguments()", file="InstanceBuilder.cs", label="Entry System.Type.GetGenericArguments()", span="0-0"];
m0_9 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="13-13"];
m0_46 [cluster="Unk.Return", file="InstanceBuilder.cs", label="Entry Unk.Return", span=""];
m0_104 [cluster="CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="23-23"];
m0_90 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="105-105"];
m0_66 [cluster="System.Activator.CreateInstance<T>()", file="InstanceBuilder.cs", label="Entry System.Activator.CreateInstance<T>()", span="0-0"];
m0_56 [cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()", file="InstanceBuilder.cs", label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()", span="653-653"];
m0_58 [cluster="CommandLine.Core.Specification.IsOption()", file="InstanceBuilder.cs", label="Entry CommandLine.Core.Specification.IsOption()", span="10-10"];
m0_126 [cluster="CSharpx.Maybe<T>.FromJust<T>()", file="InstanceBuilder.cs", label="Entry CSharpx.Maybe<T>.FromJust<T>()", span="342-342"];
m0_130 [cluster="CSharpx.Maybe<T>.IsNothing<T>()", file="InstanceBuilder.cs", label="Entry CSharpx.Maybe<T>.IsNothing<T>()", span="334-334"];
m0_137 [cluster="CSharpx.Maybe<T>.MatchNothing()", file="InstanceBuilder.cs", label="Entry CSharpx.Maybe<T>.MatchNothing()", span="57-57"];
m0_85 [cluster="Unk.f", file="InstanceBuilder.cs", label="Entry Unk.f", span=""];
m0_96 [cluster="System.Type.IsMutable()", file="InstanceBuilder.cs", label="Entry System.Type.IsMutable()", span="128-128"];
m0_92 [cluster="CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)", span="21-21"];
m0_71 [cluster="Unk.ToLower", file="InstanceBuilder.cs", label="Entry Unk.ToLower", span=""];
m0_49 [cluster="System.Collections.IEnumerable.OfType<TResult>()", file="InstanceBuilder.cs", label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0"];
m0_51 [cluster="CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)", span="11-11"];
m0_65 [cluster="Unk.IsMutable", file="InstanceBuilder.cs", label="Entry Unk.IsMutable", span=""];
m0_68 [cluster="Unk.ToArray", file="InstanceBuilder.cs", label="Entry Unk.ToArray", span=""];
m0_122 [cluster="CSharpx.Maybe<T>.IsJust<T>()", file="InstanceBuilder.cs", label="Entry CSharpx.Maybe<T>.IsJust<T>()", span="326-326"];
m0_63 [cluster="Unk.FromOptionSpecification", file="InstanceBuilder.cs", label="Entry Unk.FromOptionSpecification", span=""];
m0_55 [cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", file="InstanceBuilder.cs", label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0"];
m0_64 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="InstanceBuilder.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
m0_59 [cluster="Unk.MapValues", file="InstanceBuilder.cs", label="Entry Unk.MapValues", span=""];
m0_154 [file="InstanceBuilder.cs", label="System.StringComparer", span=""];
m0_157 [file="InstanceBuilder.cs", label=token, span=""];
m0_152 [file="InstanceBuilder.cs", label="CSharpx.Maybe<System.Func<T>>", span=""];
m0_153 [file="InstanceBuilder.cs", label=specProps, span=""];
m0_155 [file="InstanceBuilder.cs", label=optionSpecs, span=""];
m0_156 [file="InstanceBuilder.cs", label="System.Globalization.CultureInfo", span=""];
m0_150 [file="InstanceBuilder.cs", label="System.StringComparer", span=""];
m0_151 [file="InstanceBuilder.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
m2_0 [cluster="CommandLine.Infrastructure.ResultExtensions.Messages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ResultExtensions.cs", label="Entry CommandLine.Infrastructure.ResultExtensions.Messages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", span="10-10"];
m2_1 [cluster="CommandLine.Infrastructure.ResultExtensions.Messages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", color=green, community=0, file="ResultExtensions.cs", label="result.Tag == ResultType.Ok", prediction=1, span="12-12"];
m2_2 [cluster="CommandLine.Infrastructure.ResultExtensions.Messages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ResultExtensions.cs", label="var ok = (Ok<TSuccess, TMessage>)result", span="14-14"];
m2_3 [cluster="CommandLine.Infrastructure.ResultExtensions.Messages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ResultExtensions.cs", label="return ok.Value.Messages;", span="15-15"];
m2_6 [cluster="CommandLine.Infrastructure.ResultExtensions.Messages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ResultExtensions.cs", label="Exit CommandLine.Infrastructure.ResultExtensions.Messages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", span="10-10"];
m3_62 [cluster="Unk.Just", file="ValueMapper.cs", label="Entry Unk.Just", span=""];
m3_38 [cluster="Unk.Empty", file="ValueMapper.cs", label="Entry Unk.Empty", span=""];
m3_32 [cluster="System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", file="ValueMapper.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", span="31-31"];
m3_0 [cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="Entry CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="14-14"];
m3_1 [cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="var propAndErrors = MapValuesImpl(specProps, values, converter)", span="19-19"];
m3_2 [cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="return Result.Succeed(\r\n                propAndErrors.Select(pe => pe.Item1),\r\n                propAndErrors.Select(pe => pe.Item2)\r\n                    .OfType<Just<Error>>().Select(e => e.Value)\r\n                );", span="21-25"];
m3_3 [cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="Exit CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="14-14"];
m3_50 [cluster="Unk.converter", file="ValueMapper.cs", label="Entry Unk.converter", span=""];
m3_6 [cluster="Unk.>", file="ValueMapper.cs", label="Entry Unk.>", span=""];
m3_4 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="Entry CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="28-28"];
m3_17 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="specProps.Empty()", span="33-33"];
m3_18 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="yield break;", span="35-35"];
m3_22 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="yield return\r\n                    Tuple.Create(pt, pt.Specification.MakeErrorInCaseOfMinConstraint());", span="41-42"];
m3_23 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="yield break;", span="43-43"];
m3_26 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="yield return\r\n                    Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                        pt, Maybe.Just<Error>(new SequenceOutOfRangeError(NameInfo.EmptyName)));", span="51-53"];
m3_27 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="yield break;", span="54-54"];
m3_28 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="yield return\r\n                converter(taken, pt.Property.PropertyType, pt.Specification.TargetType != TargetType.Sequence)\r\n                    .Return(\r\n                        converted => Tuple.Create(pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>()),\r\n                        Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                            pt, Maybe.Just<Error>(new BadFormatConversionError(NameInfo.EmptyName))));", span="57-62"];
m3_30 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="yield return value;", span="66-66"];
m3_19 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="var pt = specProps.First()", span="37-37"];
m3_20 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="var taken = values.Take(pt.Specification.CountOfMaxNumberOfValues().Return(n => n, values.Count()))", span="38-38"];
m3_24 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="var next = specProps.Skip(1).FirstOrDefault(s => s.Specification.IsValue()).ToMaybe()", span="46-46"];
m3_25 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="pt.Specification.Max.IsJust()\r\n                && next.IsNothing()\r\n                && values.Skip(taken.Count()).Any()", span="47-49"];
m3_29 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="MapValuesImpl(specProps.Skip(1), values.Skip(taken.Count()), converter)", span="64-64"];
m3_21 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="taken.Empty()", span="39-39"];
m3_31 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs", label="Exit CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="28-28"];
m3_34 [cluster="CommandLine.Core.Specification.CountOfMaxNumberOfValues()", file="ValueMapper.cs", label="Entry CommandLine.Core.Specification.CountOfMaxNumberOfValues()", span="70-70"];
m3_58 [cluster="CommandLine.Core.Specification.IsValue()", file="ValueMapper.cs", label="Entry CommandLine.Core.Specification.IsValue()", span="15-15"];
m3_45 [cluster="Unk.IsNothing", file="ValueMapper.cs", label="Entry Unk.IsNothing", span=""];
m3_37 [cluster="Unk.Take", file="ValueMapper.cs", label="Entry Unk.Take", span=""];
m3_43 [cluster="Unk.ToMaybe", file="ValueMapper.cs", label="Entry Unk.ToMaybe", span=""];
m3_47 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="ValueMapper.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
m3_40 [cluster="System.Tuple.Create<T1, T2>(T1, T2)", file="ValueMapper.cs", label="Entry System.Tuple.Create<T1, T2>(T1, T2)", span="0-0"];
m3_48 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="ValueMapper.cs", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="335-335"];
m3_59 [cluster="lambda expression", file="ValueMapper.cs", label="Entry lambda expression", span="60-60"];
m3_8 [cluster="lambda expression", file="ValueMapper.cs", label="Entry lambda expression", span="22-22"];
m3_11 [cluster="lambda expression", file="ValueMapper.cs", label="Entry lambda expression", span="23-23"];
m3_14 [cluster="lambda expression", file="ValueMapper.cs", label="Entry lambda expression", span="24-24"];
m3_9 [cluster="lambda expression", file="ValueMapper.cs", label="pe.Item1", span="22-22"];
m3_10 [cluster="lambda expression", file="ValueMapper.cs", label="Exit lambda expression", span="22-22"];
m3_12 [cluster="lambda expression", file="ValueMapper.cs", label="pe.Item2", span="23-23"];
m3_13 [cluster="lambda expression", file="ValueMapper.cs", label="Exit lambda expression", span="23-23"];
m3_15 [cluster="lambda expression", file="ValueMapper.cs", label="e.Value", span="24-24"];
m3_16 [cluster="lambda expression", file="ValueMapper.cs", label="Exit lambda expression", span="24-24"];
m3_60 [cluster="lambda expression", file="ValueMapper.cs", label="Tuple.Create(pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>())", span="60-60"];
m3_52 [cluster="lambda expression", file="ValueMapper.cs", label="Entry lambda expression", span="38-38"];
m3_55 [cluster="lambda expression", file="ValueMapper.cs", label="Entry lambda expression", span="46-46"];
m3_53 [cluster="lambda expression", file="ValueMapper.cs", label=n, span="38-38"];
m3_54 [cluster="lambda expression", file="ValueMapper.cs", label="Exit lambda expression", span="38-38"];
m3_56 [cluster="lambda expression", file="ValueMapper.cs", label="s.Specification.IsValue()", span="46-46"];
m3_57 [cluster="lambda expression", file="ValueMapper.cs", label="Exit lambda expression", span="46-46"];
m3_61 [cluster="lambda expression", file="ValueMapper.cs", label="Exit lambda expression", span="60-60"];
m3_33 [cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="ValueMapper.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0"];
m3_41 [cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="ValueMapper.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0"];
m3_75 [cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", file="ValueMapper.cs", label="Entry CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", span="86-86"];
m3_76 [cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", file="ValueMapper.cs", label="return specification.Min.IsJust()\r\n                ? Maybe.Just<Error>(new SequenceOutOfRangeError(NameInfo.EmptyName))\r\n                : Maybe.Nothing<Error>();", span="88-90"];
m3_77 [cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", file="ValueMapper.cs", label="Exit CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", span="86-86"];
m3_5 [cluster="Unk.Select", file="ValueMapper.cs", label="Entry Unk.Select", span=""];
m3_51 [cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="ValueMapper.cs", label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="324-324"];
m3_39 [cluster="CommandLine.Core.Specification.MakeErrorInCaseOfMinConstraint()", file="ValueMapper.cs", label="Entry CommandLine.Core.Specification.MakeErrorInCaseOfMinConstraint()", span="86-86"];
m3_36 [cluster="Unk.Return", file="ValueMapper.cs", label="Entry Unk.Return", span=""];
m3_74 [cluster="CSharpx.Maybe<T>.FromJust<T>()", file="ValueMapper.cs", label="Entry CSharpx.Maybe<T>.FromJust<T>()", span="342-342"];
m3_64 [cluster="CSharpx.Maybe.Nothing<T>()", file="ValueMapper.cs", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
m3_63 [cluster="Unk.WithValue", file="ValueMapper.cs", label="Entry Unk.WithValue", span=""];
m3_35 [cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="ValueMapper.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0"];
m3_65 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs", label="Entry CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", span="70-70"];
m3_66 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs", label="specification.TargetType", span="72-72"];
m3_70 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs", label="specification.Max.IsJust()", span="77-77"];
m3_71 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs", label="return Maybe.Just(specification.Max.FromJust());", span="79-79"];
m3_67 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs", label="TargetType.Scalar", span="74-74"];
m3_69 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs", label="TargetType.Sequence", span="76-76"];
m3_68 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs", label="return Maybe.Just(1);", span="75-75"];
m3_72 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs", label="return Maybe.Nothing<int>();", span="83-83"];
m3_73 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs", label="Exit CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", span="70-70"];
m3_42 [cluster="Unk.FirstOrDefault", file="ValueMapper.cs", label="Entry Unk.FirstOrDefault", span=""];
m3_44 [cluster="CSharpx.Maybe<T>.IsJust<T>()", file="ValueMapper.cs", label="Entry CSharpx.Maybe<T>.IsJust<T>()", span="326-326"];
m3_46 [cluster="Unk.Count", file="ValueMapper.cs", label="Entry Unk.Count", span=""];
m3_7 [cluster="Unk.Succeed", file="ValueMapper.cs", label="Entry Unk.Succeed", span=""];
m3_78 [file="ValueMapper.cs", label=pt, span=""];
n77 -> n4  [color=darkseagreen4, key=1, label="CSharpx.Maybe<T>", style=dashed];
n77 -> n8  [color=darkseagreen4, key=1, label="CSharpx.Maybe<T>", style=dashed];
n79 -> n58  [color=darkseagreen4, key=1, label="System.Func<TSource, CSharpx.Maybe<TValue>>", style=dashed];
n80 -> n58  [color=darkseagreen4, key=1, label="System.Func<TSource, TValue, TResult>", style=dashed];
n80 -> n61  [color=darkseagreen4, key=1, label="System.Func<TSource, TValue, TResult>", style=dashed];
n81 -> n61  [color=darkseagreen4, key=1, label=TSource, style=dashed];
n7 -> n9  [color=darkseagreen4, key=1, label="out T", style=dashed];
n21 -> n23  [color=darkseagreen4, key=1, label="CSharpx.Either<T1, T2>", style=dashed];
n30 -> n32  [color=darkseagreen4, key=1, label="CSharpx.Maybe<T1>", style=dashed];
n32 -> n32  [color=darkseagreen4, key=1, label=value1, style=dashed];
n35 -> n37  [color=darkseagreen4, key=1, label="CSharpx.Maybe<T1>", style=dashed];
n37 -> n37  [color=darkseagreen4, key=1, label=value1, style=dashed];
n39 -> n41  [color=darkseagreen4, key=1, label="CSharpx.Maybe<T1>", style=dashed];
n41 -> n41  [color=darkseagreen4, key=1, label=value1, style=dashed];
n43 -> n45  [color=darkseagreen4, key=1, label="CSharpx.Maybe<T>", style=dashed];
n43 -> n46  [color=darkseagreen4, key=1, label="System.Action<T>", style=dashed];
n53 -> n58  [color=darkseagreen4, key=1, label="System.Func<TSource, CSharpx.Maybe<TValue>>", style=dashed];
n53 -> n61  [color=darkseagreen4, key=1, label="System.Func<TSource, TValue, TResult>", style=dashed];
n54 -> n57  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n58 -> n60  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n57 -> n61  [color=darkseagreen4, key=1, label=TSource, style=dashed];
n64 -> n66  [color=darkseagreen4, key=1, label="CSharpx.Maybe<T>", style=dashed];
n64 -> n68  [color=darkseagreen4, key=1, label="System.Exception", style=dashed];
m0_3 -> m0_94  [color=darkseagreen4, key=1, label="CSharpx.Maybe<System.Func<T>>", style=dashed];
m0_3 -> m0_24  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m0_3 -> m0_102  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_3 -> m0_106  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m0_3 -> m0_110  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m0_3 -> m0_113  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_31 -> m0_105  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_32 -> m0_109  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_33 -> m0_112  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_33 -> m0_113  [color=darkseagreen4, key=1, label=token, style=dashed];
m0_22 -> m0_102  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
m0_30 -> m0_101  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_20 -> m0_87  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_20 -> m0_94  [color=darkseagreen4, key=1, label=specProps, style=dashed];
m0_38 -> m0_44  [color=darkseagreen4, key=1, label=instance, style=dashed];
m0_38 -> m0_119  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_38 -> m0_123  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_38 -> m0_127  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_38 -> m0_131  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_38 -> m0_134  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_38 -> m0_138  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_41 -> m0_44  [color=darkseagreen4, key=1, label=instance, style=dashed];
m0_19 -> m0_82  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_19 -> m0_36  [color=darkseagreen4, key=1, label=typeInfo, style=dashed];
m0_23 -> m0_27  [color=darkseagreen4, key=1, label=makeDefault, style=dashed];
m0_25 -> m0_27  [color=darkseagreen4, key=1, label=preprocessorErrors, style=dashed];
m0_37 -> m0_116  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_40 -> m0_144  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_40 -> m0_147  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_94 -> m0_94  [color=darkseagreen4, key=1, label=p, style=dashed];
m0_94 -> m0_98  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_5 -> m0_11  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_6 -> m0_15  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_4 -> m0_12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_4 -> m0_16  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_0 -> m0_12  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_0 -> m0_16  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_1 -> m0_4  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_154 -> m0_113  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_154 -> m0_102  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_157 -> m0_113  [color=darkseagreen4, key=1, label=token, style=dashed];
m0_152 -> m0_94  [color=darkseagreen4, key=1, label="CSharpx.Maybe<System.Func<T>>", style=dashed];
m0_153 -> m0_94  [color=darkseagreen4, key=1, label=specProps, style=dashed];
m0_155 -> m0_102  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
m0_156 -> m0_106  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m0_156 -> m0_110  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m0_150 -> m0_12  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_150 -> m0_16  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_151 -> m0_12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_151 -> m0_16  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m3_2 -> m3_8  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_2 -> m3_11  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_2 -> m3_14  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_4 -> m3_25  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m3_4 -> m3_29  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m3_28 -> m3_59  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_19 -> m3_22  [color=darkseagreen4, key=1, label=pt, style=dashed];
m3_19 -> m3_25  [color=darkseagreen4, key=1, label=pt, style=dashed];
m3_19 -> m3_26  [color=darkseagreen4, key=1, label=pt, style=dashed];
m3_19 -> m3_28  [color=darkseagreen4, key=1, label=pt, style=dashed];
m3_19 -> m3_60  [color=darkseagreen4, key=1, label=pt, style=dashed];
m3_20 -> m3_52  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_20 -> m3_25  [color=darkseagreen4, key=1, label=taken, style=dashed];
m3_20 -> m3_28  [color=darkseagreen4, key=1, label=taken, style=dashed];
m3_20 -> m3_29  [color=darkseagreen4, key=1, label=taken, style=dashed];
m3_24 -> m3_55  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_65 -> m3_70  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m3_65 -> m3_71  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m3_78 -> m3_60  [color=darkseagreen4, key=1, label=pt, style=dashed];
}
