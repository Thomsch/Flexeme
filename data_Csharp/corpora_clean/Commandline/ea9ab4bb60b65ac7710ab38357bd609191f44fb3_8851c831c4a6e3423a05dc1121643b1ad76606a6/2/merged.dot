digraph  {
m0_3 [label="Entry System.Type.GetGenericArguments()", span="0-0", cluster="System.Type.GetGenericArguments()", file="FSharpOptionHelper.cs"];
m0_16 [label="Entry CommandLine.Infrastructure.FSharpOptionHelper.ValueOf(object)", span="39-39", cluster="CommandLine.Infrastructure.FSharpOptionHelper.ValueOf(object)", file="FSharpOptionHelper.cs"];
m0_17 [label="var optionType = typeof(FSharpOption<>)", span="41-41", cluster="CommandLine.Infrastructure.FSharpOptionHelper.ValueOf(object)", color=green, community=0, file="FSharpOptionHelper.cs"];
m0_18 [label="var typedType = optionType.MakeGenericType(GetUnderlyingType(value.GetType()))", span="42-42", cluster="CommandLine.Infrastructure.FSharpOptionHelper.ValueOf(object)", color=green, community=0, file="FSharpOptionHelper.cs"];
m0_19 [label="return typedType.InvokeMember(\r\n                ''Value'',\r\n                BindingFlags.GetProperty | BindingFlags.Public | BindingFlags.Instance,\r\n                null,\r\n                value,\r\n                new object[] { });", span="44-49", cluster="CommandLine.Infrastructure.FSharpOptionHelper.ValueOf(object)", color=green, community=1, file="FSharpOptionHelper.cs"];
m0_20 [label="Exit CommandLine.Infrastructure.FSharpOptionHelper.ValueOf(object)", span="39-39", cluster="CommandLine.Infrastructure.FSharpOptionHelper.ValueOf(object)", file="FSharpOptionHelper.cs"];
m0_22 [label="Entry CommandLine.Infrastructure.FSharpOptionHelper.IsSome(object)", span="52-52", cluster="CommandLine.Infrastructure.FSharpOptionHelper.IsSome(object)", file="FSharpOptionHelper.cs"];
m0_23 [label="var optionType = typeof(FSharpOption<>)", span="54-54", cluster="CommandLine.Infrastructure.FSharpOptionHelper.IsSome(object)", color=green, community=0, file="FSharpOptionHelper.cs"];
m0_24 [label="var typedType = optionType.MakeGenericType(GetUnderlyingType(value.GetType()))", span="55-55", cluster="CommandLine.Infrastructure.FSharpOptionHelper.IsSome(object)", color=green, community=0, file="FSharpOptionHelper.cs"];
m0_25 [label="return (bool)typedType.InvokeMember(\r\n                ''get_IsSome'',\r\n                BindingFlags.InvokeMethod | BindingFlags.Public | BindingFlags.Static,\r\n                null,\r\n                null,\r\n                new [] { value });", span="57-62", cluster="CommandLine.Infrastructure.FSharpOptionHelper.IsSome(object)", color=green, community=1, file="FSharpOptionHelper.cs"];
m0_26 [label="Exit CommandLine.Infrastructure.FSharpOptionHelper.IsSome(object)", span="52-52", cluster="CommandLine.Infrastructure.FSharpOptionHelper.IsSome(object)", file="FSharpOptionHelper.cs"];
m0_21 [label="Entry object.GetType()", span="0-0", cluster="object.GetType()", file="FSharpOptionHelper.cs"];
m0_10 [label="Entry System.Type.InvokeMember(string, System.Reflection.BindingFlags, System.Reflection.Binder, object, object[])", span="0-0", cluster="System.Type.InvokeMember(string, System.Reflection.BindingFlags, System.Reflection.Binder, object, object[])", file="FSharpOptionHelper.cs"];
m0_4 [label="Entry CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)", span="13-13", cluster="CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)", file="FSharpOptionHelper.cs"];
m0_5 [label="var optionType = typeof(FSharpOption<>)", span="15-15", cluster="CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)", file="FSharpOptionHelper.cs"];
m0_6 [label="var typedType = optionType.MakeGenericType(type)", span="16-16", cluster="CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)", file="FSharpOptionHelper.cs"];
m0_7 [label="return typedType.InvokeMember(\r\n                ''Some'',\r\n                BindingFlags.InvokeMethod | BindingFlags.Public | BindingFlags.Static,\r\n                null,\r\n                null,\r\n                new [] { value });", span="18-23", cluster="CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)", file="FSharpOptionHelper.cs"];
m0_8 [label="Exit CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)", span="13-13", cluster="CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)", file="FSharpOptionHelper.cs"];
m0_11 [label="Entry CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)", span="26-26", cluster="CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)", file="FSharpOptionHelper.cs"];
m0_12 [label="var optionType = typeof(FSharpOption<>)", span="28-28", cluster="CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)", file="FSharpOptionHelper.cs"];
m0_13 [label="var typedType = optionType.MakeGenericType(type)", span="29-29", cluster="CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)", file="FSharpOptionHelper.cs"];
m0_14 [label="return typedType.InvokeMember(\r\n                ''None'',\r\n                BindingFlags.GetProperty | BindingFlags.Public | BindingFlags.Static,\r\n                null,\r\n                null,\r\n                new object[] {});", span="31-36", cluster="CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)", file="FSharpOptionHelper.cs"];
m0_15 [label="Exit CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)", span="26-26", cluster="CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)", file="FSharpOptionHelper.cs"];
m0_9 [label="Entry System.Type.MakeGenericType(params System.Type[])", span="0-0", cluster="System.Type.MakeGenericType(params System.Type[])", file="FSharpOptionHelper.cs"];
m0_0 [label="Entry CommandLine.Infrastructure.FSharpOptionHelper.GetUnderlyingType(System.Type)", span="8-8", cluster="CommandLine.Infrastructure.FSharpOptionHelper.GetUnderlyingType(System.Type)", file="FSharpOptionHelper.cs"];
m0_1 [label="return type.GetGenericArguments()[0];", span="10-10", cluster="CommandLine.Infrastructure.FSharpOptionHelper.GetUnderlyingType(System.Type)", file="FSharpOptionHelper.cs"];
m0_2 [label="Exit CommandLine.Infrastructure.FSharpOptionHelper.GetUnderlyingType(System.Type)", span="8-8", cluster="CommandLine.Infrastructure.FSharpOptionHelper.GetUnderlyingType(System.Type)", file="FSharpOptionHelper.cs"];
m1_40 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="113-113", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="UnParserExtensions.cs"];
m1_41 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="118-122", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="UnParserExtensions.cs"];
m1_42 [label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="125-125", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="UnParserExtensions.cs"];
m1_43 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="113-113", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="UnParserExtensions.cs"];
m1_62 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", file="UnParserExtensions.cs"];
m1_151 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="386-386", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="UnParserExtensions.cs"];
m1_152 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="391-395", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="UnParserExtensions.cs"];
m1_153 [label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="398-398", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="UnParserExtensions.cs"];
m1_154 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="386-386", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="UnParserExtensions.cs"];
m1_54 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", file="UnParserExtensions.cs"];
m1_266 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="637-637", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="UnParserExtensions.cs"];
m1_267 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="642-646", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="UnParserExtensions.cs"];
m1_268 [label="Assert.True(expected.Equals(result.Value.StringValue))", span="649-649", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="UnParserExtensions.cs"];
m1_269 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="637-637", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="UnParserExtensions.cs"];
m1_307 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="741-741", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="UnParserExtensions.cs"];
m1_308 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithNullables(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="746-750", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="UnParserExtensions.cs"];
m1_309 [label="expected.ShouldBeEquivalentTo(result.Value.NullableLong)", span="753-753", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="UnParserExtensions.cs"];
m1_310 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="741-741", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="UnParserExtensions.cs"];
m1_78 [label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316", cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="UnParserExtensions.cs"];
m1_166 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="429-429", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="UnParserExtensions.cs"];
m1_167 [label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="432-438", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="UnParserExtensions.cs"];
m1_168 [label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="439-439", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="UnParserExtensions.cs"];
m1_170 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="452-452", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="UnParserExtensions.cs"];
m1_169 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="442-449", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="UnParserExtensions.cs"];
m1_171 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="429-429", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="UnParserExtensions.cs"];
m1_258 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="616-616", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="UnParserExtensions.cs"];
m1_259 [label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="619-619", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="UnParserExtensions.cs"];
m1_260 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="622-626", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="UnParserExtensions.cs"];
m1_261 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="629-629", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="UnParserExtensions.cs"];
m1_262 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="616-616", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="UnParserExtensions.cs"];
m1_108 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="11-11", cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", file="UnParserExtensions.cs"];
m1_203 [label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", file="UnParserExtensions.cs"];
m1_73 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="195-195", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="UnParserExtensions.cs"];
m1_74 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="198-198", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="UnParserExtensions.cs"];
m1_75 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="201-205", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="UnParserExtensions.cs"];
m1_76 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="208-208", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="UnParserExtensions.cs"];
m1_77 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="195-195", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="UnParserExtensions.cs"];
m1_246 [label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="272-272", cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", file="UnParserExtensions.cs"];
m1_91 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="234-234", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="UnParserExtensions.cs"];
m1_92 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="237-237", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="UnParserExtensions.cs"];
m1_93 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue(),\r\n                new[] { ''one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="240-244", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="UnParserExtensions.cs"];
m1_94 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="247-247", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="UnParserExtensions.cs"];
m1_95 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="234-234", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="UnParserExtensions.cs"];
m1_183 [label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="UnParserExtensions.cs"];
m1_314 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="760-760", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="UnParserExtensions.cs"];
m1_315 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithFSharpOption(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="765-769", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="UnParserExtensions.cs"];
m1_316 [label="expectedValue.ShouldBeEquivalentTo(result.Value.FileName.Value)", span="772-772", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="UnParserExtensions.cs"];
m1_317 [label="expectedSome.ShouldBeEquivalentTo(FSharpOption<string>.get_IsSome(result.Value.FileName))", span="773-773", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="UnParserExtensions.cs"];
m1_318 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="760-760", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="UnParserExtensions.cs"];
m1_298 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", file="UnParserExtensions.cs"];
m1_306 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", file="UnParserExtensions.cs"];
m1_6 [label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", file="UnParserExtensions.cs"];
m1_250 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="597-597", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="UnParserExtensions.cs"];
m1_251 [label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="600-600", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="UnParserExtensions.cs"];
m1_252 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="603-607", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="UnParserExtensions.cs"];
m1_253 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="610-610", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="UnParserExtensions.cs"];
m1_254 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="597-597", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="UnParserExtensions.cs"];
m1_109 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="277-277", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="UnParserExtensions.cs"];
m1_110 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="280-280", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="UnParserExtensions.cs"];
m1_111 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''3'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="283-287", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="UnParserExtensions.cs"];
m1_112 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="290-290", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="UnParserExtensions.cs"];
m1_113 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="277-277", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="UnParserExtensions.cs"];
m1_7 [label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="338-338", cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="UnParserExtensions.cs"];
m1_104 [label="Entry Unk.ShouldBeEquivalentTo", span="", cluster="Unk.ShouldBeEquivalentTo", file="UnParserExtensions.cs"];
m1_172 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="UnParserExtensions.cs"];
m1_332 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="799-799", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="UnParserExtensions.cs"];
m1_333 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithScalarValueAndSequenceStringAdjacent(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="804-808", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="UnParserExtensions.cs"];
m1_334 [label="expected.ShouldBeEquivalentTo(result.Value)", span="811-811", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="UnParserExtensions.cs"];
m1_335 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="799-799", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="UnParserExtensions.cs"];
m1_82 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", file="UnParserExtensions.cs"];
m1_143 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="364-364", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="UnParserExtensions.cs"];
m1_144 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceWithoutRange(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="369-373", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="UnParserExtensions.cs"];
m1_145 [label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="376-376", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="UnParserExtensions.cs"];
m1_146 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="364-364", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="UnParserExtensions.cs"];
m1_55 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="158-158", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="UnParserExtensions.cs"];
m1_56 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="163-167", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="UnParserExtensions.cs"];
m1_57 [label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="170-170", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="UnParserExtensions.cs"];
m1_58 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="158-158", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="UnParserExtensions.cs"];
m1_31 [label="Entry System.Text.StringBuilder.StringBuilder(string)", span="0-0", cluster="System.Text.StringBuilder.StringBuilder(string)", file="UnParserExtensions.cs"];
m1_32 [label="Entry System.Text.StringBuilder.Append(string)", span="0-0", cluster="System.Text.StringBuilder.Append(string)", file="UnParserExtensions.cs"];
m1_33 [label="Entry System.Text.StringBuilder.ToString()", span="0-0", cluster="System.Text.StringBuilder.ToString()", file="UnParserExtensions.cs"];
m1_34 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="91-91", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="UnParserExtensions.cs"];
m1_336 [label="Entry lambda expression", span="805-805", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_13 [label=fakeOptions, span="29-29", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_12 [label="Entry lambda expression", span="29-29", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_14 [label="Exit lambda expression", span="29-29", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_20 [label="Exit CommandLine.Infrastructure.StringExtensions.EqualsOrdinal(string, string)", span="35-35", cluster="CommandLine.Infrastructure.StringExtensions.EqualsOrdinal(string, string)", file="UnParserExtensions.cs"];
m1_21 [label="Entry string.CompareOrdinal(string, string)", span="0-0", cluster="string.CompareOrdinal(string, string)", color=red, community=0, file="UnParserExtensions.cs"];
m1_22 [label="Exit lambda expression", span="50-50", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_27 [label=others, span="48-48", cluster="CommandLine.Infrastructure.StringExtensions.JoinTo(string, params string[])", file="UnParserExtensions.cs"];
m1_28 [label="builder.Append(v)", span="50-50", cluster="CommandLine.Infrastructure.StringExtensions.JoinTo(string, params string[])", file="UnParserExtensions.cs"];
m1_29 [label="return builder.ToString();", span="52-52", cluster="CommandLine.Infrastructure.StringExtensions.JoinTo(string, params string[])", file="UnParserExtensions.cs", color=green, community=0];
m1_36 [label="Entry lambda expression", span="97-97", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_37 [label="new FakeOptionsWithSequence()", span="97-97", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_38 [label="Exit lambda expression", span="97-97", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_44 [label="Entry lambda expression", span="119-119", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_45 [label="new FakeOptions()", span="119-119", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_46 [label="Exit lambda expression", span="119-119", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_51 [label="Entry lambda expression", span="142-142", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_52 [label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="142-142", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_53 [label="Exit lambda expression", span="142-142", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_59 [label="Entry lambda expression", span="164-164", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_60 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="164-164", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_61 [label="Exit lambda expression", span="164-164", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_70 [label="Entry lambda expression", span="183-183", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_71 [label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="183-183", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_72 [label="Exit lambda expression", span="183-183", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_79 [label="Entry lambda expression", span="202-202", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_80 [label="new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="202-202", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_81 [label="Exit lambda expression", span="202-202", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_88 [label="Entry lambda expression", span="222-222", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_89 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="222-222", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_90 [label="Exit lambda expression", span="222-222", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_96 [label="Entry lambda expression", span="241-241", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_97 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="241-241", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_98 [label="Exit lambda expression", span="241-241", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_105 [label="Entry lambda expression", span="265-265", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_106 [label="new FakeOptionsWithEnum()", span="265-265", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_107 [label="Exit lambda expression", span="265-265", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_115 [label="Entry lambda expression", span="284-284", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_116 [label="new FakeOptionsWithEnum()", span="284-284", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_117 [label="Exit lambda expression", span="284-284", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_123 [label="Entry lambda expression", span="303-303", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_124 [label="new FakeOptionsWithEnum()", span="303-303", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_125 [label="Exit lambda expression", span="303-303", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_131 [label="Entry lambda expression", span="322-322", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_132 [label="new FakeOptionsWithEnum()", span="322-322", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_133 [label="Exit lambda expression", span="322-322", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_140 [label="Entry lambda expression", span="347-347", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_141 [label="new FakeOptionsWithValues()", span="347-347", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_142 [label="Exit lambda expression", span="347-347", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_147 [label="Entry lambda expression", span="370-370", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_148 [label="new FakeOptionsWithSequenceWithoutRange()", span="370-370", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_149 [label="Exit lambda expression", span="370-370", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_155 [label="Entry lambda expression", span="392-392", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_156 [label="new FakeOptionsWithSequenceAndSeparator()", span="392-392", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_157 [label="Exit lambda expression", span="392-392", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_163 [label="Entry lambda expression", span="414-414", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_164 [label="new FakeOptionsWithSequenceAndSeparator()", span="414-414", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_165 [label="Exit lambda expression", span="414-414", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_173 [label="Entry lambda expression", span="443-443", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_176 [label="Entry lambda expression", span="444-446", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_174 [label="new FakeOptionsWithValues()", span="443-443", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_175 [label="Exit lambda expression", span="443-443", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_177 [label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="445-446", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_181 [label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="446-446", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_185 [label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="446-446", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_178 [label="Exit lambda expression", span="444-446", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_180 [label="Entry lambda expression", span="446-446", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_182 [label="Exit lambda expression", span="446-446", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_184 [label="Entry lambda expression", span="446-446", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_186 [label="Exit lambda expression", span="446-446", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_194 [label="Entry lambda expression", span="469-469", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_195 [label="new FakeOptionsWithSets()", span="469-469", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_196 [label="Exit lambda expression", span="469-469", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_204 [label="Entry lambda expression", span="489-489", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_205 [label="new FakeOptionWithRequiredAndSet()", span="489-489", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_206 [label="Exit lambda expression", span="489-489", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_212 [label="Entry lambda expression", span="509-509", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_213 [label="new FakeOptionWithRequiredAndSet()", span="509-509", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_214 [label="Exit lambda expression", span="509-509", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_221 [label="Entry lambda expression", span="529-529", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_222 [label="new FakeOptionWithRequiredAndSet()", span="529-529", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_223 [label="Exit lambda expression", span="529-529", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_229 [label="Entry lambda expression", span="547-547", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_230 [label="new FakeOptionWithRequired()", span="547-547", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_231 [label="Exit lambda expression", span="547-547", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_238 [label="Entry lambda expression", span="566-566", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_239 [label="new FakeOptions()", span="566-566", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_240 [label="Exit lambda expression", span="566-566", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_247 [label="Entry lambda expression", span="585-585", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_248 [label="new FakeOptions()", span="585-585", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_249 [label="Exit lambda expression", span="585-585", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_255 [label="Entry lambda expression", span="604-604", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_256 [label="new FakeOptions()", span="604-604", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_257 [label="Exit lambda expression", span="604-604", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_263 [label="Entry lambda expression", span="623-623", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_264 [label="new FakeOptions()", span="623-623", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_265 [label="Exit lambda expression", span="623-623", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_271 [label="Entry lambda expression", span="643-643", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_272 [label="new FakeOptions()", span="643-643", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_273 [label="Exit lambda expression", span="643-643", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_279 [label="Entry lambda expression", span="662-662", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_280 [label="new FakeOptionsWithRequiredValue()", span="662-662", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_281 [label="Exit lambda expression", span="662-662", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_287 [label="Entry lambda expression", span="684-684", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_288 [label="new FakeOptions()", span="684-684", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_289 [label="Exit lambda expression", span="684-684", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_295 [label="Entry lambda expression", span="703-703", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_296 [label="new FakeOptionsWithSequenceMinMaxEqual()", span="703-703", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_297 [label="Exit lambda expression", span="703-703", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_303 [label="Entry lambda expression", span="725-725", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_304 [label="new FakeOptionsWithNullables()", span="725-725", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_305 [label="Exit lambda expression", span="725-725", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_311 [label="Entry lambda expression", span="747-747", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_312 [label="new FakeOptionsWithNullables()", span="747-747", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_313 [label="Exit lambda expression", span="747-747", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_321 [label="Entry lambda expression", span="766-766", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_322 [label="new FakeOptionsWithFSharpOption()", span="766-766", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_323 [label="Exit lambda expression", span="766-766", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_329 [label="Entry lambda expression", span="786-786", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_330 [label="new FakeOptionsWithRequiredValue()", span="786-786", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_331 [label="Exit lambda expression", span="786-786", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_337 [label="new FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="805-805", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_338 [label="Exit lambda expression", span="805-805", cluster="lambda expression", file="UnParserExtensions.cs"];
m1_10 [label="Entry CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", span="87-87", cluster="CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", file="UnParserExtensions.cs"];
m1_30 [label="Exit CommandLine.Infrastructure.StringExtensions.JoinTo(string, params string[])", span="45-45", cluster="CommandLine.Infrastructure.StringExtensions.JoinTo(string, params string[])", file="UnParserExtensions.cs"];
m1_158 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", file="UnParserExtensions.cs"];
m1_179 [label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="31-31", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="UnParserExtensions.cs"];
m1_193 [label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294", cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="UnParserExtensions.cs"];
m1_232 [label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", file="UnParserExtensions.cs"];
m1_47 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="136-136", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="UnParserExtensions.cs"];
m1_48 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="141-145", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="UnParserExtensions.cs"];
m1_49 [label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="148-148", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="UnParserExtensions.cs"];
m1_50 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="136-136", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="UnParserExtensions.cs"];
m1_118 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="296-296", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="UnParserExtensions.cs"];
m1_119 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="299-299", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="UnParserExtensions.cs"];
m1_120 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''Yellow'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="302-306", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="UnParserExtensions.cs"];
m1_121 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="309-309", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="UnParserExtensions.cs"];
m1_122 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="296-296", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="UnParserExtensions.cs"];
m1_139 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", file="UnParserExtensions.cs"];
m1_23 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="67-67", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="UnParserExtensions.cs"];
m1_24 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithDouble(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="72-76", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="UnParserExtensions.cs"];
m1_25 [label="Entry CommandLine.Infrastructure.StringExtensions.JoinTo(string, params string[])", span="45-45", cluster="CommandLine.Infrastructure.StringExtensions.JoinTo(string, params string[])", file="UnParserExtensions.cs"];
m1_26 [label="var builder = new StringBuilder(value)", span="47-47", cluster="CommandLine.Infrastructure.StringExtensions.JoinTo(string, params string[])", file="UnParserExtensions.cs"];
m1_282 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", file="UnParserExtensions.cs"];
m1_324 [label="Entry FakeOptionsWithFSharpOption.cstr", span="", cluster="FakeOptionsWithFSharpOption.cstr", file="UnParserExtensions.cs"];
m1_11 [label="Entry Unk.True", span="", cluster="Unk.True", file="UnParserExtensions.cs"];
m1_274 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="655-655", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="UnParserExtensions.cs"];
m1_275 [label="var expectedResult = new[] { new MissingRequiredOptionError(NameInfo.EmptyName) }", span="658-658", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="UnParserExtensions.cs"];
m1_276 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithRequiredValue(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="661-665", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="UnParserExtensions.cs"];
m1_277 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="668-668", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="UnParserExtensions.cs"];
m1_278 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="655-655", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="UnParserExtensions.cs"];
m1_233 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="559-559", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="UnParserExtensions.cs"];
m1_234 [label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="562-562", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="UnParserExtensions.cs"];
m1_235 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="565-569", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="UnParserExtensions.cs"];
m1_236 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="572-572", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="UnParserExtensions.cs"];
m1_237 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="559-559", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="UnParserExtensions.cs"];
m1_320 [label="Entry Unk.get_IsSome", span="", cluster="Unk.get_IsSome", file="UnParserExtensions.cs"];
m1_187 [label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11", cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="UnParserExtensions.cs"];
m1_0 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="19-19", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="UnParserExtensions.cs"];
m1_1 [label="var fakeOptions = new FakeOptions()", span="22-22", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="UnParserExtensions.cs"];
m1_2 [label="var expectedResult = ParserResult.Create(\r\n                ParserResultType.Options,\r\n                fakeOptions, new Error[] { new HelpRequestedError() })", span="23-25", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="UnParserExtensions.cs"];
m1_3 [label="var result = InstanceBuilder.Build(\r\n                () => fakeOptions,\r\n                new[] { ''--help'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="28-32", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="UnParserExtensions.cs"];
m1_4 [label="Assert.True(expectedResult.Equals(result))", span="35-35", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="UnParserExtensions.cs"];
m1_5 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="19-19", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="UnParserExtensions.cs"];
m1_224 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="540-540", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="UnParserExtensions.cs"];
m1_225 [label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="543-543", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="UnParserExtensions.cs"];
m1_226 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequired(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="546-550", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="UnParserExtensions.cs"];
m1_227 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="553-553", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="UnParserExtensions.cs"];
m1_228 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="540-540", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="UnParserExtensions.cs"];
m1_215 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="520-520", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="UnParserExtensions.cs"];
m1_216 [label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="522-526", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="UnParserExtensions.cs"];
m1_217 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="528-532", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="UnParserExtensions.cs"];
m1_218 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="535-535", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="UnParserExtensions.cs"];
m1_219 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="520-520", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="UnParserExtensions.cs"];
m1_35 [label="Entry Unk.SequenceEqual", span="", cluster="Unk.SequenceEqual", file="UnParserExtensions.cs"];
m1_126 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="315-315", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="UnParserExtensions.cs"];
m1_127 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="318-318", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="UnParserExtensions.cs"];
m1_128 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''RED'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="321-325", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="UnParserExtensions.cs"];
m1_129 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="328-328", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="UnParserExtensions.cs"];
m1_130 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="315-315", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="UnParserExtensions.cs"];
m1_68 [label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="261-261", cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="UnParserExtensions.cs"];
m1_325 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="780-780", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="UnParserExtensions.cs"];
m1_326 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithRequiredValue(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="785-789", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="UnParserExtensions.cs"];
m1_327 [label="expected.ShouldBeEquivalentTo(result.Value)", span="792-792", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="UnParserExtensions.cs"];
m1_328 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="780-780", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="UnParserExtensions.cs"];
m1_83 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="215-215", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="UnParserExtensions.cs"];
m1_84 [label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="218-218", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="UnParserExtensions.cs"];
m1_85 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="221-225", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="UnParserExtensions.cs"];
m1_86 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="228-228", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="UnParserExtensions.cs"];
m1_87 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="215-215", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="UnParserExtensions.cs"];
m1_63 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="176-176", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="UnParserExtensions.cs"];
m1_64 [label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="179-179", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="UnParserExtensions.cs"];
m1_65 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                new[] { ''-s'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="182-186", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="UnParserExtensions.cs"];
m1_66 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="189-189", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="UnParserExtensions.cs"];
m1_67 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="176-176", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="UnParserExtensions.cs"];
m1_134 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="334-334", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="UnParserExtensions.cs"];
m1_135 [label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="337-343", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="UnParserExtensions.cs"];
m1_136 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="346-350", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="UnParserExtensions.cs"];
m1_137 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="353-353", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="UnParserExtensions.cs"];
m1_138 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="334-334", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="UnParserExtensions.cs"];
m1_339 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", file="UnParserExtensions.cs"];
m1_197 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", file="UnParserExtensions.cs"];
m1_270 [label="Entry string.Equals(string)", span="0-0", cluster="string.Equals(string)", file="UnParserExtensions.cs"];
m1_69 [label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20", cluster="CommandLine.NameInfo.NameInfo(string, string)", file="UnParserExtensions.cs"];
m1_15 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="44-44", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="UnParserExtensions.cs"];
m1_16 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="49-53", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", color=red, community=0, file="UnParserExtensions.cs"];
m1_17 [label="Assert.Equal(expected, result.Value.LongValue)", span="56-56", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="UnParserExtensions.cs"];
m1_18 [label="Entry CommandLine.Infrastructure.StringExtensions.EqualsOrdinal(string, string)", span="35-35", cluster="CommandLine.Infrastructure.StringExtensions.EqualsOrdinal(string, string)", file="UnParserExtensions.cs"];
m1_19 [label="return string.CompareOrdinal(strA, strB) == 0;", span="37-37", cluster="CommandLine.Infrastructure.StringExtensions.EqualsOrdinal(string, string)", file="UnParserExtensions.cs", color=green, community=0];
m1_9 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="UnParserExtensions.cs"];
m1_150 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", file="UnParserExtensions.cs"];
m1_159 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="408-408", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="UnParserExtensions.cs"];
m1_160 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="413-417", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="UnParserExtensions.cs"];
m1_161 [label="expected.ShouldBeEquivalentTo(result.Value.StringSequence)", span="420-420", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="UnParserExtensions.cs"];
m1_162 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="408-408", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="UnParserExtensions.cs"];
m1_220 [label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283", cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="UnParserExtensions.cs"];
m1_299 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="719-719", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="UnParserExtensions.cs"];
m1_300 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithNullables(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="724-728", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="UnParserExtensions.cs"];
m1_301 [label="expected.ShouldBeEquivalentTo(result.Value.NullableInt)", span="731-731", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="UnParserExtensions.cs"];
m1_302 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="719-719", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="UnParserExtensions.cs"];
m1_241 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="578-578", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="UnParserExtensions.cs"];
m1_242 [label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="581-581", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="UnParserExtensions.cs"];
m1_243 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="584-588", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="UnParserExtensions.cs"];
m1_244 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="591-591", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="UnParserExtensions.cs"];
m1_245 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="578-578", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="UnParserExtensions.cs"];
m1_207 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="501-501", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="UnParserExtensions.cs"];
m1_208 [label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="503-506", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="UnParserExtensions.cs"];
m1_209 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="508-512", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="UnParserExtensions.cs"];
m1_210 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="515-515", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="UnParserExtensions.cs"];
m1_211 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="501-501", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="UnParserExtensions.cs"];
m1_290 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="696-696", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="UnParserExtensions.cs"];
m1_291 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="699-699", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="UnParserExtensions.cs"];
m1_292 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceMinMaxEqual(),\r\n                new[] { ''one'', ''two'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="702-706", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="UnParserExtensions.cs"];
m1_293 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="709-709", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="UnParserExtensions.cs"];
m1_294 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="696-696", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="UnParserExtensions.cs"];
m1_8 [label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="100-100", cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="UnParserExtensions.cs"];
m1_100 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="259-259", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="UnParserExtensions.cs"];
m1_101 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="264-268", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="UnParserExtensions.cs"];
m1_102 [label="expected.ShouldBeEquivalentTo(result.Value.Colors)", span="271-271", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="UnParserExtensions.cs"];
m1_103 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="259-259", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="UnParserExtensions.cs"];
m1_99 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", file="UnParserExtensions.cs"];
m1_283 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="678-678", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="UnParserExtensions.cs"];
m1_284 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="683-687", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="UnParserExtensions.cs"];
m1_285 [label="expected.ShouldBeEquivalentTo(result.Value.StringValue)", span="690-690", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="UnParserExtensions.cs"];
m1_286 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="678-678", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="UnParserExtensions.cs"];
m1_114 [label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="305-305", cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="UnParserExtensions.cs"];
m1_198 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="481-481", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="UnParserExtensions.cs"];
m1_199 [label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = null\r\n            }", span="483-486", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="UnParserExtensions.cs"];
m1_200 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="488-492", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="UnParserExtensions.cs"];
m1_201 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="495-495", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="UnParserExtensions.cs"];
m1_202 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="481-481", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="UnParserExtensions.cs"];
m1_39 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", file="UnParserExtensions.cs"];
m1_319 [label="Entry Unk.Build", span="", cluster="Unk.Build", file="UnParserExtensions.cs"];
m1_188 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="458-458", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="UnParserExtensions.cs"];
m1_189 [label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl'')),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''))\r\n                }", span="461-465", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="UnParserExtensions.cs"];
m1_190 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSets(),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="468-472", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="UnParserExtensions.cs"];
m1_191 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="475-475", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="UnParserExtensions.cs"];
m1_192 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="458-458", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="UnParserExtensions.cs"];
m1_340 [label=fakeOptions, span="", file="UnParserExtensions.cs"];
m1_341 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span="", file="UnParserExtensions.cs"];
m2_4 [label="object matchedValue", span="29-29", cluster="CommandLine.Tests.Unit.Core.TypeConverterTests.ChangeType_scalars(string, System.Type, bool, object)", file="UnParserExtensionsTests.cs"];
m2_0 [label="Entry CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line(CommandLine.Tests.Fakes.FakeOptions, string)", span="21-21", cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line(CommandLine.Tests.Fakes.FakeOptions, string)", file="UnParserExtensionsTests.cs"];
m2_1 [label="new Parser()\r                .FormatCommandLine(options)\r                .ShouldBeEquivalentTo(result)", span="23-25", cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line(CommandLine.Tests.Fakes.FakeOptions, string)", file="UnParserExtensionsTests.cs"];
m2_2 [label="Exit CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line(CommandLine.Tests.Fakes.FakeOptions, string)", span="21-21", cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line(CommandLine.Tests.Fakes.FakeOptions, string)", file="UnParserExtensionsTests.cs"];
m2_6 [label="Entry CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line_for_verbs(CommandLine.Tests.Fakes.AddOptions, string)", span="30-30", cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line_for_verbs(CommandLine.Tests.Fakes.AddOptions, string)", file="UnParserExtensionsTests.cs"];
m2_3 [label="Entry CommandLine.Parser.Parser()", span="26-26", cluster="CommandLine.Parser.Parser()", file="UnParserExtensionsTests.cs"];
m2_5 [label="Entry Unk.ShouldBeEquivalentTo", span="", cluster="Unk.ShouldBeEquivalentTo", file="UnParserExtensionsTests.cs"];
m2_7 [label="new Parser()\r\n                .FormatCommandLine(options)\r\n                .ShouldBeEquivalentTo(result)", span="32-34", cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line_for_verbs(CommandLine.Tests.Fakes.AddOptions, string)", file="UnParserExtensionsTests.cs", color=green, community=0];
m2_11 [label="Exit CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_immutable_instance_returns_command_line(CommandLine.Tests.Fakes.FakeImmutableOptions, string)", span="39-39", cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_immutable_instance_returns_command_line(CommandLine.Tests.Fakes.FakeImmutableOptions, string)", file="UnParserExtensionsTests.cs"];
m2_8 [label="Exit CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line_for_verbs(CommandLine.Tests.Fakes.AddOptions, string)", span="30-30", cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line_for_verbs(CommandLine.Tests.Fakes.AddOptions, string)", file="UnParserExtensionsTests.cs"];
m2_12 [label="Entry CSharpx.Maybe<T>.MatchJust(out T)", span="48-48", cluster="CSharpx.Maybe<T>.MatchJust(out T)", file="UnParserExtensionsTests.cs"];
m2_13 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="UnParserExtensionsTests.cs"];
m2_14 [label="Exit CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_with_fsharp_option_returns_command_line(CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption, string)", span="48-48", cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_with_fsharp_option_returns_command_line(CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption, string)", file="UnParserExtensionsTests.cs"];
m2_9 [label="Entry CSharpx.Maybe<T>.MatchNothing()", span="57-57", cluster="CSharpx.Maybe<T>.MatchNothing()", file="UnParserExtensionsTests.cs"];
m2_10 [label="Entry Unk.Should", span="", cluster="Unk.Should", color=green, community=0, file="UnParserExtensionsTests.cs"];
m0_16 -> m0_17  [key=0, style=solid, color=green];
m0_16 -> m0_18  [key=1, style=dashed, color=green, label=object];
m0_16 -> m0_19  [key=1, style=dashed, color=green, label=object];
m0_17 -> m0_18  [key=0, style=solid, color=green];
m0_18 -> m0_19  [key=0, style=solid, color=green];
m0_18 -> m0_21  [key=2, style=dotted, color=green];
m0_18 -> m0_0  [key=2, style=dotted, color=green];
m0_18 -> m0_9  [key=2, style=dotted, color=green];
m0_19 -> m0_20  [key=0, style=solid, color=green];
m0_19 -> m0_10  [key=2, style=dotted, color=green];
m0_20 -> m0_16  [key=0, style=bold, color=blue];
m0_22 -> m0_23  [key=0, style=solid, color=green];
m0_22 -> m0_24  [key=1, style=dashed, color=green, label=object];
m0_22 -> m0_25  [key=1, style=dashed, color=green, label=object];
m0_23 -> m0_24  [key=0, style=solid, color=green];
m0_24 -> m0_25  [key=0, style=solid, color=green];
m0_24 -> m0_21  [key=2, style=dotted, color=green];
m0_24 -> m0_0  [key=2, style=dotted, color=green];
m0_24 -> m0_9  [key=2, style=dotted, color=green];
m0_25 -> m0_26  [key=0, style=solid, color=green];
m0_25 -> m0_10  [key=2, style=dotted, color=green];
m0_26 -> m0_22  [key=0, style=bold, color=blue];
m0_4 -> m0_5  [key=0, style=solid];
m0_4 -> m0_6  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m0_4 -> m0_7  [key=1, style=dashed, color=darkseagreen4, label=object];
m0_5 -> m0_6  [key=0, style=solid];
m0_6 -> m0_7  [key=0, style=solid];
m0_6 -> m0_9  [key=2, style=dotted];
m0_7 -> m0_8  [key=0, style=solid];
m0_7 -> m0_10  [key=2, style=dotted];
m0_8 -> m0_4  [key=0, style=bold, color=blue];
m0_11 -> m0_12  [key=0, style=solid];
m0_11 -> m0_13  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m0_12 -> m0_13  [key=0, style=solid];
m0_13 -> m0_14  [key=0, style=solid];
m0_13 -> m0_9  [key=2, style=dotted];
m0_14 -> m0_15  [key=0, style=solid];
m0_14 -> m0_10  [key=2, style=dotted];
m0_15 -> m0_11  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_3  [key=2, style=dotted];
m0_2 -> m0_0  [key=0, style=bold, color=blue];
m1_40 -> m1_41  [key=0, style=solid];
m1_40 -> m1_42  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
m1_41 -> m1_42  [key=0, style=solid];
m1_41 -> m1_9  [key=2, style=dotted];
m1_41 -> m1_44  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_42 -> m1_43  [key=0, style=solid];
m1_42 -> m1_35  [key=2, style=dotted];
m1_42 -> m1_11  [key=2, style=dotted];
m1_43 -> m1_40  [key=0, style=bold, color=blue];
m1_151 -> m1_152  [key=0, style=solid];
m1_151 -> m1_153  [key=1, style=dashed, color=darkseagreen4, label="long[]"];
m1_152 -> m1_153  [key=0, style=solid];
m1_152 -> m1_9  [key=2, style=dotted];
m1_152 -> m1_155  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_153 -> m1_154  [key=0, style=solid];
m1_153 -> m1_104  [key=2, style=dotted];
m1_154 -> m1_151  [key=0, style=bold, color=blue];
m1_266 -> m1_267  [key=0, style=solid];
m1_266 -> m1_268  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_267 -> m1_268  [key=0, style=solid];
m1_267 -> m1_9  [key=2, style=dotted];
m1_267 -> m1_271  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_268 -> m1_269  [key=0, style=solid];
m1_268 -> m1_270  [key=2, style=dotted];
m1_268 -> m1_11  [key=2, style=dotted];
m1_269 -> m1_266  [key=0, style=bold, color=blue];
m1_307 -> m1_308  [key=0, style=solid];
m1_307 -> m1_309  [key=1, style=dashed, color=darkseagreen4, label="long?"];
m1_308 -> m1_309  [key=0, style=solid];
m1_308 -> m1_9  [key=2, style=dotted];
m1_308 -> m1_311  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_309 -> m1_310  [key=0, style=solid];
m1_309 -> m1_104  [key=2, style=dotted];
m1_310 -> m1_307  [key=0, style=bold, color=blue];
m1_166 -> m1_167  [key=0, style=solid];
m1_167 -> m1_168  [key=0, style=solid];
m1_167 -> m1_139  [key=2, style=dotted];
m1_167 -> m1_170  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_168 -> m1_169  [key=0, style=solid];
m1_170 -> m1_171  [key=0, style=solid];
m1_170 -> m1_104  [key=2, style=dotted];
m1_169 -> m1_170  [key=0, style=solid];
m1_169 -> m1_172  [key=2, style=dotted];
m1_169 -> m1_173  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_169 -> m1_176  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_171 -> m1_166  [key=0, style=bold, color=blue];
m1_258 -> m1_259  [key=0, style=solid];
m1_259 -> m1_260  [key=0, style=solid];
m1_259 -> m1_246  [key=2, style=dotted];
m1_259 -> m1_261  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_260 -> m1_261  [key=0, style=solid];
m1_260 -> m1_9  [key=2, style=dotted];
m1_260 -> m1_263  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_261 -> m1_262  [key=0, style=solid];
m1_261 -> m1_35  [key=2, style=dotted];
m1_261 -> m1_11  [key=2, style=dotted];
m1_262 -> m1_258  [key=0, style=bold, color=blue];
m1_73 -> m1_74  [key=0, style=solid];
m1_74 -> m1_75  [key=0, style=solid];
m1_74 -> m1_78  [key=2, style=dotted];
m1_74 -> m1_76  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_75 -> m1_76  [key=0, style=solid];
m1_75 -> m1_9  [key=2, style=dotted];
m1_75 -> m1_79  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_76 -> m1_77  [key=0, style=solid];
m1_76 -> m1_35  [key=2, style=dotted];
m1_76 -> m1_11  [key=2, style=dotted];
m1_77 -> m1_73  [key=0, style=bold, color=blue];
m1_91 -> m1_92  [key=0, style=solid];
m1_92 -> m1_93  [key=0, style=solid];
m1_92 -> m1_78  [key=2, style=dotted];
m1_92 -> m1_94  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_93 -> m1_94  [key=0, style=solid];
m1_93 -> m1_9  [key=2, style=dotted];
m1_93 -> m1_96  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_94 -> m1_95  [key=0, style=solid];
m1_94 -> m1_35  [key=2, style=dotted];
m1_94 -> m1_11  [key=2, style=dotted];
m1_95 -> m1_91  [key=0, style=bold, color=blue];
m1_314 -> m1_315  [key=0, style=solid];
m1_314 -> m1_316  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_314 -> m1_317  [key=1, style=dashed, color=darkseagreen4, label=bool];
m1_315 -> m1_316  [key=0, style=solid];
m1_315 -> m1_319  [key=2, style=dotted];
m1_315 -> m1_321  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_315 -> m1_317  [key=1, style=dashed, color=darkseagreen4, label=result];
m1_316 -> m1_317  [key=0, style=solid];
m1_316 -> m1_104  [key=2, style=dotted];
m1_317 -> m1_318  [key=0, style=solid];
m1_317 -> m1_320  [key=2, style=dotted];
m1_317 -> m1_104  [key=2, style=dotted];
m1_318 -> m1_314  [key=0, style=bold, color=blue];
m1_250 -> m1_251  [key=0, style=solid];
m1_251 -> m1_252  [key=0, style=solid];
m1_251 -> m1_246  [key=2, style=dotted];
m1_251 -> m1_253  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_252 -> m1_253  [key=0, style=solid];
m1_252 -> m1_9  [key=2, style=dotted];
m1_252 -> m1_255  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_253 -> m1_254  [key=0, style=solid];
m1_253 -> m1_35  [key=2, style=dotted];
m1_253 -> m1_11  [key=2, style=dotted];
m1_254 -> m1_250  [key=0, style=bold, color=blue];
m1_109 -> m1_110  [key=0, style=solid];
m1_110 -> m1_111  [key=0, style=solid];
m1_110 -> m1_114  [key=2, style=dotted];
m1_110 -> m1_69  [key=2, style=dotted];
m1_110 -> m1_112  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_111 -> m1_112  [key=0, style=solid];
m1_111 -> m1_9  [key=2, style=dotted];
m1_111 -> m1_115  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_112 -> m1_113  [key=0, style=solid];
m1_112 -> m1_35  [key=2, style=dotted];
m1_112 -> m1_11  [key=2, style=dotted];
m1_113 -> m1_109  [key=0, style=bold, color=blue];
m1_332 -> m1_333  [key=0, style=solid];
m1_332 -> m1_334  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent"];
m1_333 -> m1_334  [key=0, style=solid];
m1_333 -> m1_9  [key=2, style=dotted];
m1_333 -> m1_336  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_334 -> m1_335  [key=0, style=solid];
m1_334 -> m1_104  [key=2, style=dotted];
m1_335 -> m1_332  [key=0, style=bold, color=blue];
m1_143 -> m1_144  [key=0, style=solid];
m1_143 -> m1_145  [key=1, style=dashed, color=darkseagreen4, label="long[]"];
m1_144 -> m1_145  [key=0, style=solid];
m1_144 -> m1_9  [key=2, style=dotted];
m1_144 -> m1_147  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_145 -> m1_146  [key=0, style=solid];
m1_145 -> m1_104  [key=2, style=dotted];
m1_146 -> m1_143  [key=0, style=bold, color=blue];
m1_55 -> m1_56  [key=0, style=solid];
m1_55 -> m1_57  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m1_56 -> m1_57  [key=0, style=solid];
m1_56 -> m1_9  [key=2, style=dotted];
m1_56 -> m1_59  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_57 -> m1_58  [key=0, style=solid];
m1_57 -> m1_35  [key=2, style=dotted];
m1_57 -> m1_11  [key=2, style=dotted];
m1_58 -> m1_55  [key=0, style=bold, color=blue];
m1_31 -> m1_32  [key=0, style=solid];
m1_31 -> m1_33  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
m1_32 -> m1_33  [key=0, style=solid];
m1_32 -> m1_9  [key=2, style=dotted];
m1_32 -> m1_36  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_33 -> m1_34  [key=0, style=solid];
m1_33 -> m1_35  [key=2, style=dotted];
m1_33 -> m1_11  [key=2, style=dotted];
m1_34 -> m1_31  [key=0, style=bold, color=blue];
m1_336 -> m1_337  [key=0, style=solid];
m1_13 -> m1_14  [key=0, style=solid];
m1_12 -> m1_13  [key=0, style=solid];
m1_14 -> m1_12  [key=0, style=bold, color=blue];
m1_20 -> m1_21  [key=0, style=solid, color=red];
m1_20 -> m1_18  [key=0, style=bold, color=blue];
m1_21 -> m1_22  [key=0, style=solid, color=red];
m1_21 -> m1_6  [key=2, style=dotted, color=red];
m1_22 -> m1_20  [key=0, style=bold, color=blue];
m1_27 -> m1_28  [key=0, style=solid];
m1_27 -> m1_29  [key=0, style=solid, color=green];
m1_28 -> m1_29  [key=0, style=solid];
m1_28 -> m1_30  [key=2, style=dotted];
m1_28 -> m1_27  [key=0, style=solid];
m1_28 -> m1_32  [key=2, style=dotted];
m1_29 -> m1_27  [key=0, style=bold, color=blue];
m1_29 -> m1_30  [key=0, style=solid, color=green];
m1_29 -> m1_33  [key=2, style=dotted, color=green];
m1_36 -> m1_37  [key=0, style=solid];
m1_37 -> m1_38  [key=0, style=solid];
m1_37 -> m1_39  [key=2, style=dotted];
m1_38 -> m1_36  [key=0, style=bold, color=blue];
m1_44 -> m1_45  [key=0, style=solid];
m1_45 -> m1_46  [key=0, style=solid];
m1_45 -> m1_6  [key=2, style=dotted];
m1_46 -> m1_44  [key=0, style=bold, color=blue];
m1_51 -> m1_52  [key=0, style=solid];
m1_52 -> m1_53  [key=0, style=solid];
m1_52 -> m1_54  [key=2, style=dotted];
m1_53 -> m1_51  [key=0, style=bold, color=blue];
m1_59 -> m1_60  [key=0, style=solid];
m1_60 -> m1_61  [key=0, style=solid];
m1_60 -> m1_62  [key=2, style=dotted];
m1_61 -> m1_59  [key=0, style=bold, color=blue];
m1_70 -> m1_71  [key=0, style=solid];
m1_71 -> m1_72  [key=0, style=solid];
m1_71 -> m1_54  [key=2, style=dotted];
m1_72 -> m1_70  [key=0, style=bold, color=blue];
m1_79 -> m1_80  [key=0, style=solid];
m1_80 -> m1_81  [key=0, style=solid];
m1_80 -> m1_82  [key=2, style=dotted];
m1_81 -> m1_79  [key=0, style=bold, color=blue];
m1_88 -> m1_89  [key=0, style=solid];
m1_89 -> m1_90  [key=0, style=solid];
m1_89 -> m1_62  [key=2, style=dotted];
m1_90 -> m1_88  [key=0, style=bold, color=blue];
m1_96 -> m1_97  [key=0, style=solid];
m1_97 -> m1_98  [key=0, style=solid];
m1_97 -> m1_99  [key=2, style=dotted];
m1_98 -> m1_96  [key=0, style=bold, color=blue];
m1_105 -> m1_106  [key=0, style=solid];
m1_106 -> m1_107  [key=0, style=solid];
m1_106 -> m1_108  [key=2, style=dotted];
m1_107 -> m1_105  [key=0, style=bold, color=blue];
m1_115 -> m1_116  [key=0, style=solid];
m1_116 -> m1_117  [key=0, style=solid];
m1_116 -> m1_108  [key=2, style=dotted];
m1_117 -> m1_115  [key=0, style=bold, color=blue];
m1_123 -> m1_124  [key=0, style=solid];
m1_124 -> m1_125  [key=0, style=solid];
m1_124 -> m1_108  [key=2, style=dotted];
m1_125 -> m1_123  [key=0, style=bold, color=blue];
m1_131 -> m1_132  [key=0, style=solid];
m1_132 -> m1_133  [key=0, style=solid];
m1_132 -> m1_108  [key=2, style=dotted];
m1_133 -> m1_131  [key=0, style=bold, color=blue];
m1_140 -> m1_141  [key=0, style=solid];
m1_141 -> m1_142  [key=0, style=solid];
m1_141 -> m1_139  [key=2, style=dotted];
m1_142 -> m1_140  [key=0, style=bold, color=blue];
m1_147 -> m1_148  [key=0, style=solid];
m1_148 -> m1_149  [key=0, style=solid];
m1_148 -> m1_150  [key=2, style=dotted];
m1_149 -> m1_147  [key=0, style=bold, color=blue];
m1_155 -> m1_156  [key=0, style=solid];
m1_156 -> m1_157  [key=0, style=solid];
m1_156 -> m1_158  [key=2, style=dotted];
m1_157 -> m1_155  [key=0, style=bold, color=blue];
m1_163 -> m1_164  [key=0, style=solid];
m1_164 -> m1_165  [key=0, style=solid];
m1_164 -> m1_158  [key=2, style=dotted];
m1_165 -> m1_163  [key=0, style=bold, color=blue];
m1_173 -> m1_174  [key=0, style=solid];
m1_176 -> m1_177  [key=0, style=solid];
m1_176 -> m1_181  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_176 -> m1_185  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_174 -> m1_175  [key=0, style=solid];
m1_174 -> m1_139  [key=2, style=dotted];
m1_175 -> m1_173  [key=0, style=bold, color=blue];
m1_177 -> m1_178  [key=0, style=solid];
m1_177 -> m1_179  [key=2, style=dotted];
m1_177 -> m1_180  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_181 -> m1_182  [key=0, style=solid];
m1_181 -> m1_183  [key=2, style=dotted];
m1_181 -> m1_184  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_185 -> m1_186  [key=0, style=solid];
m1_185 -> m1_187  [key=2, style=dotted];
m1_178 -> m1_176  [key=0, style=bold, color=blue];
m1_180 -> m1_181  [key=0, style=solid];
m1_182 -> m1_180  [key=0, style=bold, color=blue];
m1_184 -> m1_185  [key=0, style=solid];
m1_186 -> m1_184  [key=0, style=bold, color=blue];
m1_194 -> m1_195  [key=0, style=solid];
m1_195 -> m1_196  [key=0, style=solid];
m1_195 -> m1_197  [key=2, style=dotted];
m1_196 -> m1_194  [key=0, style=bold, color=blue];
m1_204 -> m1_205  [key=0, style=solid];
m1_205 -> m1_206  [key=0, style=solid];
m1_205 -> m1_203  [key=2, style=dotted];
m1_206 -> m1_204  [key=0, style=bold, color=blue];
m1_212 -> m1_213  [key=0, style=solid];
m1_213 -> m1_214  [key=0, style=solid];
m1_213 -> m1_203  [key=2, style=dotted];
m1_214 -> m1_212  [key=0, style=bold, color=blue];
m1_221 -> m1_222  [key=0, style=solid];
m1_222 -> m1_223  [key=0, style=solid];
m1_222 -> m1_203  [key=2, style=dotted];
m1_223 -> m1_221  [key=0, style=bold, color=blue];
m1_229 -> m1_230  [key=0, style=solid];
m1_230 -> m1_231  [key=0, style=solid];
m1_230 -> m1_232  [key=2, style=dotted];
m1_231 -> m1_229  [key=0, style=bold, color=blue];
m1_238 -> m1_239  [key=0, style=solid];
m1_239 -> m1_240  [key=0, style=solid];
m1_239 -> m1_6  [key=2, style=dotted];
m1_240 -> m1_238  [key=0, style=bold, color=blue];
m1_247 -> m1_248  [key=0, style=solid];
m1_248 -> m1_249  [key=0, style=solid];
m1_248 -> m1_6  [key=2, style=dotted];
m1_249 -> m1_247  [key=0, style=bold, color=blue];
m1_255 -> m1_256  [key=0, style=solid];
m1_256 -> m1_257  [key=0, style=solid];
m1_256 -> m1_6  [key=2, style=dotted];
m1_257 -> m1_255  [key=0, style=bold, color=blue];
m1_263 -> m1_264  [key=0, style=solid];
m1_264 -> m1_265  [key=0, style=solid];
m1_264 -> m1_6  [key=2, style=dotted];
m1_265 -> m1_263  [key=0, style=bold, color=blue];
m1_271 -> m1_272  [key=0, style=solid];
m1_272 -> m1_273  [key=0, style=solid];
m1_272 -> m1_6  [key=2, style=dotted];
m1_273 -> m1_271  [key=0, style=bold, color=blue];
m1_279 -> m1_280  [key=0, style=solid];
m1_280 -> m1_281  [key=0, style=solid];
m1_280 -> m1_282  [key=2, style=dotted];
m1_281 -> m1_279  [key=0, style=bold, color=blue];
m1_287 -> m1_288  [key=0, style=solid];
m1_288 -> m1_289  [key=0, style=solid];
m1_288 -> m1_6  [key=2, style=dotted];
m1_289 -> m1_287  [key=0, style=bold, color=blue];
m1_295 -> m1_296  [key=0, style=solid];
m1_296 -> m1_297  [key=0, style=solid];
m1_296 -> m1_298  [key=2, style=dotted];
m1_297 -> m1_295  [key=0, style=bold, color=blue];
m1_303 -> m1_304  [key=0, style=solid];
m1_304 -> m1_305  [key=0, style=solid];
m1_304 -> m1_306  [key=2, style=dotted];
m1_305 -> m1_303  [key=0, style=bold, color=blue];
m1_311 -> m1_312  [key=0, style=solid];
m1_312 -> m1_313  [key=0, style=solid];
m1_312 -> m1_306  [key=2, style=dotted];
m1_313 -> m1_311  [key=0, style=bold, color=blue];
m1_321 -> m1_322  [key=0, style=solid];
m1_322 -> m1_323  [key=0, style=solid];
m1_322 -> m1_324  [key=2, style=dotted];
m1_323 -> m1_321  [key=0, style=bold, color=blue];
m1_329 -> m1_330  [key=0, style=solid];
m1_330 -> m1_331  [key=0, style=solid];
m1_330 -> m1_282  [key=2, style=dotted];
m1_331 -> m1_329  [key=0, style=bold, color=blue];
m1_337 -> m1_338  [key=0, style=solid];
m1_337 -> m1_339  [key=2, style=dotted];
m1_338 -> m1_336  [key=0, style=bold, color=blue];
m1_30 -> m1_25  [key=0, style=bold, color=blue];
m1_47 -> m1_48  [key=0, style=solid];
m1_47 -> m1_49  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m1_48 -> m1_49  [key=0, style=solid];
m1_48 -> m1_9  [key=2, style=dotted];
m1_48 -> m1_51  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_49 -> m1_50  [key=0, style=solid];
m1_49 -> m1_35  [key=2, style=dotted];
m1_49 -> m1_11  [key=2, style=dotted];
m1_50 -> m1_47  [key=0, style=bold, color=blue];
m1_118 -> m1_119  [key=0, style=solid];
m1_119 -> m1_120  [key=0, style=solid];
m1_119 -> m1_114  [key=2, style=dotted];
m1_119 -> m1_69  [key=2, style=dotted];
m1_119 -> m1_121  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_120 -> m1_121  [key=0, style=solid];
m1_120 -> m1_9  [key=2, style=dotted];
m1_120 -> m1_123  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_121 -> m1_122  [key=0, style=solid];
m1_121 -> m1_35  [key=2, style=dotted];
m1_121 -> m1_11  [key=2, style=dotted];
m1_122 -> m1_118  [key=0, style=bold, color=blue];
m1_23 -> m1_24  [key=0, style=solid];
m1_23 -> m1_25  [key=1, style=dashed, color=darkseagreen4, label=double];
m1_24 -> m1_25  [key=0, style=solid];
m1_24 -> m1_9  [key=2, style=dotted];
m1_24 -> m1_27  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_25 -> m1_26  [key=0, style=solid];
m1_25 -> m1_19  [key=2, style=dotted];
m1_25 -> m1_27  [key=1, style=dashed, color=darkseagreen4, label="params string[]"];
m1_26 -> m1_23  [key=0, style=bold, color=blue];
m1_26 -> m1_29  [key=1, style=dashed, color=green, label=builder];
m1_26 -> m1_27  [key=0, style=solid];
m1_26 -> m1_31  [key=2, style=dotted];
m1_26 -> m1_28  [key=1, style=dashed, color=darkseagreen4, label=builder];
m1_274 -> m1_275  [key=0, style=solid];
m1_275 -> m1_276  [key=0, style=solid];
m1_275 -> m1_220  [key=2, style=dotted];
m1_275 -> m1_277  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_276 -> m1_277  [key=0, style=solid];
m1_276 -> m1_9  [key=2, style=dotted];
m1_276 -> m1_279  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_277 -> m1_278  [key=0, style=solid];
m1_277 -> m1_35  [key=2, style=dotted];
m1_277 -> m1_11  [key=2, style=dotted];
m1_278 -> m1_274  [key=0, style=bold, color=blue];
m1_233 -> m1_234  [key=0, style=solid];
m1_234 -> m1_235  [key=0, style=solid];
m1_234 -> m1_78  [key=2, style=dotted];
m1_234 -> m1_69  [key=2, style=dotted];
m1_234 -> m1_236  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_235 -> m1_236  [key=0, style=solid];
m1_235 -> m1_9  [key=2, style=dotted];
m1_235 -> m1_238  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_236 -> m1_237  [key=0, style=solid];
m1_236 -> m1_35  [key=2, style=dotted];
m1_236 -> m1_11  [key=2, style=dotted];
m1_237 -> m1_233  [key=0, style=bold, color=blue];
m1_0 -> m1_1  [key=0, style=solid];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_6  [key=2, style=dotted];
m1_1 -> m1_3  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
m1_1 -> m1_13  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
m1_2 -> m1_3  [key=0, style=solid];
m1_2 -> m1_7  [key=2, style=dotted];
m1_2 -> m1_8  [key=2, style=dotted];
m1_2 -> m1_4  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_3 -> m1_4  [key=0, style=solid];
m1_3 -> m1_9  [key=2, style=dotted];
m1_3 -> m1_12  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_4 -> m1_5  [key=0, style=solid];
m1_4 -> m1_10  [key=2, style=dotted];
m1_4 -> m1_11  [key=2, style=dotted];
m1_5 -> m1_0  [key=0, style=bold, color=blue];
m1_224 -> m1_225  [key=0, style=solid];
m1_225 -> m1_226  [key=0, style=solid];
m1_225 -> m1_220  [key=2, style=dotted];
m1_225 -> m1_69  [key=2, style=dotted];
m1_225 -> m1_227  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_226 -> m1_227  [key=0, style=solid];
m1_226 -> m1_9  [key=2, style=dotted];
m1_226 -> m1_229  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_227 -> m1_228  [key=0, style=solid];
m1_227 -> m1_35  [key=2, style=dotted];
m1_227 -> m1_11  [key=2, style=dotted];
m1_228 -> m1_224  [key=0, style=bold, color=blue];
m1_215 -> m1_216  [key=0, style=solid];
m1_216 -> m1_217  [key=0, style=solid];
m1_216 -> m1_220  [key=2, style=dotted];
m1_216 -> m1_69  [key=2, style=dotted];
m1_216 -> m1_218  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_217 -> m1_218  [key=0, style=solid];
m1_217 -> m1_9  [key=2, style=dotted];
m1_217 -> m1_221  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_218 -> m1_219  [key=0, style=solid];
m1_218 -> m1_35  [key=2, style=dotted];
m1_218 -> m1_11  [key=2, style=dotted];
m1_219 -> m1_215  [key=0, style=bold, color=blue];
m1_126 -> m1_127  [key=0, style=solid];
m1_127 -> m1_128  [key=0, style=solid];
m1_127 -> m1_114  [key=2, style=dotted];
m1_127 -> m1_69  [key=2, style=dotted];
m1_127 -> m1_129  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_128 -> m1_129  [key=0, style=solid];
m1_128 -> m1_9  [key=2, style=dotted];
m1_128 -> m1_131  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_129 -> m1_130  [key=0, style=solid];
m1_129 -> m1_35  [key=2, style=dotted];
m1_129 -> m1_11  [key=2, style=dotted];
m1_130 -> m1_126  [key=0, style=bold, color=blue];
m1_325 -> m1_326  [key=0, style=solid];
m1_325 -> m1_327  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue"];
m1_326 -> m1_327  [key=0, style=solid];
m1_326 -> m1_9  [key=2, style=dotted];
m1_326 -> m1_329  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_327 -> m1_328  [key=0, style=solid];
m1_327 -> m1_104  [key=2, style=dotted];
m1_328 -> m1_325  [key=0, style=bold, color=blue];
m1_83 -> m1_84  [key=0, style=solid];
m1_84 -> m1_85  [key=0, style=solid];
m1_84 -> m1_78  [key=2, style=dotted];
m1_84 -> m1_69  [key=2, style=dotted];
m1_84 -> m1_86  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_85 -> m1_86  [key=0, style=solid];
m1_85 -> m1_9  [key=2, style=dotted];
m1_85 -> m1_88  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_86 -> m1_87  [key=0, style=solid];
m1_86 -> m1_35  [key=2, style=dotted];
m1_86 -> m1_11  [key=2, style=dotted];
m1_87 -> m1_83  [key=0, style=bold, color=blue];
m1_63 -> m1_64  [key=0, style=solid];
m1_64 -> m1_65  [key=0, style=solid];
m1_64 -> m1_68  [key=2, style=dotted];
m1_64 -> m1_69  [key=2, style=dotted];
m1_64 -> m1_66  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_65 -> m1_66  [key=0, style=solid];
m1_65 -> m1_9  [key=2, style=dotted];
m1_65 -> m1_70  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_66 -> m1_67  [key=0, style=solid];
m1_66 -> m1_35  [key=2, style=dotted];
m1_66 -> m1_11  [key=2, style=dotted];
m1_67 -> m1_63  [key=0, style=bold, color=blue];
m1_134 -> m1_135  [key=0, style=solid];
m1_135 -> m1_136  [key=0, style=solid];
m1_135 -> m1_139  [key=2, style=dotted];
m1_135 -> m1_137  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_136 -> m1_137  [key=0, style=solid];
m1_136 -> m1_9  [key=2, style=dotted];
m1_136 -> m1_140  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_137 -> m1_138  [key=0, style=solid];
m1_137 -> m1_104  [key=2, style=dotted];
m1_138 -> m1_134  [key=0, style=bold, color=blue];
m1_15 -> m1_16  [key=0, style=solid, color=red];
m1_15 -> m1_17  [key=1, style=dashed, color=darkseagreen4, label=long];
m1_16 -> m1_17  [key=0, style=solid, color=red];
m1_16 -> m1_9  [key=2, style=dotted, color=red];
m1_16 -> m1_20  [key=1, style=dashed, color=red, label="lambda expression"];
m1_17 -> m1_18  [key=0, style=solid];
m1_17 -> m1_19  [key=2, style=dotted];
m1_18 -> m1_15  [key=0, style=bold, color=blue];
m1_18 -> m1_19  [key=0, style=solid, color=green];
m1_19 -> m1_20  [key=0, style=solid, color=green];
m1_19 -> m1_21  [key=2, style=dotted, color=green];
m1_159 -> m1_160  [key=0, style=solid];
m1_159 -> m1_161  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m1_160 -> m1_161  [key=0, style=solid];
m1_160 -> m1_9  [key=2, style=dotted];
m1_160 -> m1_163  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_161 -> m1_162  [key=0, style=solid];
m1_161 -> m1_104  [key=2, style=dotted];
m1_162 -> m1_159  [key=0, style=bold, color=blue];
m1_299 -> m1_300  [key=0, style=solid];
m1_299 -> m1_301  [key=1, style=dashed, color=darkseagreen4, label="int?"];
m1_300 -> m1_301  [key=0, style=solid];
m1_300 -> m1_9  [key=2, style=dotted];
m1_300 -> m1_303  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_301 -> m1_302  [key=0, style=solid];
m1_301 -> m1_104  [key=2, style=dotted];
m1_302 -> m1_299  [key=0, style=bold, color=blue];
m1_241 -> m1_242  [key=0, style=solid];
m1_242 -> m1_243  [key=0, style=solid];
m1_242 -> m1_246  [key=2, style=dotted];
m1_242 -> m1_244  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_243 -> m1_244  [key=0, style=solid];
m1_243 -> m1_9  [key=2, style=dotted];
m1_243 -> m1_247  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_244 -> m1_245  [key=0, style=solid];
m1_244 -> m1_35  [key=2, style=dotted];
m1_244 -> m1_11  [key=2, style=dotted];
m1_245 -> m1_241  [key=0, style=bold, color=blue];
m1_207 -> m1_208  [key=0, style=solid];
m1_208 -> m1_209  [key=0, style=solid];
m1_208 -> m1_203  [key=2, style=dotted];
m1_208 -> m1_210  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_209 -> m1_210  [key=0, style=solid];
m1_209 -> m1_9  [key=2, style=dotted];
m1_209 -> m1_212  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_210 -> m1_211  [key=0, style=solid];
m1_210 -> m1_104  [key=2, style=dotted];
m1_211 -> m1_207  [key=0, style=bold, color=blue];
m1_290 -> m1_291  [key=0, style=solid];
m1_291 -> m1_292  [key=0, style=solid];
m1_291 -> m1_78  [key=2, style=dotted];
m1_291 -> m1_293  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_292 -> m1_293  [key=0, style=solid];
m1_292 -> m1_9  [key=2, style=dotted];
m1_292 -> m1_295  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_293 -> m1_294  [key=0, style=solid];
m1_293 -> m1_35  [key=2, style=dotted];
m1_293 -> m1_11  [key=2, style=dotted];
m1_294 -> m1_290  [key=0, style=bold, color=blue];
m1_100 -> m1_101  [key=0, style=solid];
m1_100 -> m1_102  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Colors"];
m1_101 -> m1_102  [key=0, style=solid];
m1_101 -> m1_9  [key=2, style=dotted];
m1_101 -> m1_105  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_102 -> m1_103  [key=0, style=solid];
m1_102 -> m1_104  [key=2, style=dotted];
m1_102 -> m1_102  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Colors"];
m1_103 -> m1_100  [key=0, style=bold, color=blue];
m1_283 -> m1_284  [key=0, style=solid];
m1_283 -> m1_285  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_284 -> m1_285  [key=0, style=solid];
m1_284 -> m1_9  [key=2, style=dotted];
m1_284 -> m1_287  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_285 -> m1_286  [key=0, style=solid];
m1_285 -> m1_104  [key=2, style=dotted];
m1_286 -> m1_283  [key=0, style=bold, color=blue];
m1_198 -> m1_199  [key=0, style=solid];
m1_199 -> m1_200  [key=0, style=solid];
m1_199 -> m1_203  [key=2, style=dotted];
m1_199 -> m1_201  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_200 -> m1_201  [key=0, style=solid];
m1_200 -> m1_9  [key=2, style=dotted];
m1_200 -> m1_204  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_201 -> m1_202  [key=0, style=solid];
m1_201 -> m1_104  [key=2, style=dotted];
m1_202 -> m1_198  [key=0, style=bold, color=blue];
m1_188 -> m1_189  [key=0, style=solid];
m1_189 -> m1_190  [key=0, style=solid];
m1_189 -> m1_193  [key=2, style=dotted];
m1_189 -> m1_69  [key=2, style=dotted];
m1_189 -> m1_191  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_190 -> m1_191  [key=0, style=solid];
m1_190 -> m1_9  [key=2, style=dotted];
m1_190 -> m1_194  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_191 -> m1_192  [key=0, style=solid];
m1_191 -> m1_35  [key=2, style=dotted];
m1_191 -> m1_11  [key=2, style=dotted];
m1_192 -> m1_188  [key=0, style=bold, color=blue];
m1_340 -> m1_13  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
m1_341 -> m1_181  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_341 -> m1_185  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m2_4 -> m2_5  [key=0, style=solid];
m2_0 -> m2_1  [key=0, style=solid];
m2_0 -> m2_2  [key=1, style=dashed, color=darkseagreen4, label=bool];
m2_0 -> m2_6  [key=1, style=dashed, color=darkseagreen4, label=object];
m2_1 -> m2_2  [key=0, style=solid];
m2_1 -> m2_8  [key=2, style=dotted];
m2_1 -> m2_3  [key=1, style=dashed, color=darkseagreen4, label=result];
m2_1 -> m2_5  [key=1, style=dashed, color=darkseagreen4, label=result];
m2_1 -> m2_4  [key=2, style=dotted];
m2_2 -> m2_3  [key=0, style=solid];
m2_2 -> m2_4  [key=0, style=solid];
m2_2 -> m2_0  [key=0, style=bold, color=blue];
m2_6 -> m2_7  [key=0, style=solid, color=green];
m2_6 -> m2_13  [key=2, style=dotted];
m2_3 -> m2_7  [key=0, style=solid];
m2_3 -> m2_9  [key=2, style=dotted];
m2_3 -> m2_10  [key=2, style=dotted];
m2_3 -> m2_11  [key=2, style=dotted];
m2_5 -> m2_6  [key=0, style=solid];
m2_5 -> m2_12  [key=2, style=dotted];
m2_5 -> m2_10  [key=2, style=dotted];
m2_5 -> m2_11  [key=2, style=dotted];
m2_7 -> m2_0  [key=0, style=bold, color=blue];
m2_7 -> m2_8  [key=0, style=solid, color=green];
m2_7 -> m2_3  [key=2, style=dotted, color=green];
m2_7 -> m2_4  [key=2, style=dotted, color=green];
m2_7 -> m2_5  [key=2, style=dotted, color=green];
m2_11 -> m2_9  [key=0, style=bold, color=blue];
m2_8 -> m2_6  [key=0, style=bold, color=blue];
m2_12 -> m2_13  [key=0, style=solid];
m2_13 -> m2_3  [key=2, style=dotted];
m2_13 -> m2_4  [key=2, style=dotted];
m2_13 -> m2_5  [key=2, style=dotted];
m2_13 -> m2_14  [key=0, style=solid];
m2_14 -> m2_12  [key=0, style=bold, color=blue];
m2_9 -> m2_10  [key=0, style=solid, color=green];
m2_10 -> m2_11  [key=0, style=solid, color=green];
m2_10 -> m2_3  [key=2, style=dotted, color=green];
m2_10 -> m2_4  [key=2, style=dotted, color=green];
m2_10 -> m2_5  [key=2, style=dotted, color=green];
}
