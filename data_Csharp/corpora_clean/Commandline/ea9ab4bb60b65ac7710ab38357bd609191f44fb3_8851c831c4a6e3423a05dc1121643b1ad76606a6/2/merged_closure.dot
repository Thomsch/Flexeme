digraph  {
m0_3 [cluster="System.Type.GetGenericArguments()", file="FSharpOptionHelper.cs", label="Entry System.Type.GetGenericArguments()", span="0-0"];
m0_16 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.ValueOf(object)", file="FSharpOptionHelper.cs", label="Entry CommandLine.Infrastructure.FSharpOptionHelper.ValueOf(object)", span="39-39"];
m0_17 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.ValueOf(object)", color=green, community=0, file="FSharpOptionHelper.cs", label="var optionType = typeof(FSharpOption<>)", prediction=0, span="41-41"];
m0_18 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.ValueOf(object)", color=green, community=0, file="FSharpOptionHelper.cs", label="var typedType = optionType.MakeGenericType(GetUnderlyingType(value.GetType()))", prediction=1, span="42-42"];
m0_19 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.ValueOf(object)", color=green, community=1, file="FSharpOptionHelper.cs", label="return typedType.InvokeMember(\r\n                ''Value'',\r\n                BindingFlags.GetProperty | BindingFlags.Public | BindingFlags.Instance,\r\n                null,\r\n                value,\r\n                new object[] { });", prediction=2, span="44-49"];
m0_20 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.ValueOf(object)", file="FSharpOptionHelper.cs", label="Exit CommandLine.Infrastructure.FSharpOptionHelper.ValueOf(object)", span="39-39"];
m0_22 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.IsSome(object)", file="FSharpOptionHelper.cs", label="Entry CommandLine.Infrastructure.FSharpOptionHelper.IsSome(object)", span="52-52"];
m0_23 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.IsSome(object)", color=green, community=0, file="FSharpOptionHelper.cs", label="var optionType = typeof(FSharpOption<>)", prediction=3, span="54-54"];
m0_24 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.IsSome(object)", color=green, community=0, file="FSharpOptionHelper.cs", label="var typedType = optionType.MakeGenericType(GetUnderlyingType(value.GetType()))", prediction=4, span="55-55"];
m0_25 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.IsSome(object)", color=green, community=1, file="FSharpOptionHelper.cs", label="return (bool)typedType.InvokeMember(\r\n                ''get_IsSome'',\r\n                BindingFlags.InvokeMethod | BindingFlags.Public | BindingFlags.Static,\r\n                null,\r\n                null,\r\n                new [] { value });", prediction=5, span="57-62"];
m0_26 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.IsSome(object)", file="FSharpOptionHelper.cs", label="Exit CommandLine.Infrastructure.FSharpOptionHelper.IsSome(object)", span="52-52"];
m0_21 [cluster="object.GetType()", file="FSharpOptionHelper.cs", label="Entry object.GetType()", span="0-0"];
m0_10 [cluster="System.Type.InvokeMember(string, System.Reflection.BindingFlags, System.Reflection.Binder, object, object[])", file="FSharpOptionHelper.cs", label="Entry System.Type.InvokeMember(string, System.Reflection.BindingFlags, System.Reflection.Binder, object, object[])", span="0-0"];
m0_4 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)", file="FSharpOptionHelper.cs", label="Entry CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)", span="13-13"];
m0_5 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)", file="FSharpOptionHelper.cs", label="var optionType = typeof(FSharpOption<>)", span="15-15"];
m0_6 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)", file="FSharpOptionHelper.cs", label="var typedType = optionType.MakeGenericType(type)", span="16-16"];
m0_7 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)", file="FSharpOptionHelper.cs", label="return typedType.InvokeMember(\r\n                ''Some'',\r\n                BindingFlags.InvokeMethod | BindingFlags.Public | BindingFlags.Static,\r\n                null,\r\n                null,\r\n                new [] { value });", span="18-23"];
m0_8 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)", file="FSharpOptionHelper.cs", label="Exit CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)", span="13-13"];
m0_11 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)", file="FSharpOptionHelper.cs", label="Entry CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)", span="26-26"];
m0_12 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)", file="FSharpOptionHelper.cs", label="var optionType = typeof(FSharpOption<>)", span="28-28"];
m0_13 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)", file="FSharpOptionHelper.cs", label="var typedType = optionType.MakeGenericType(type)", span="29-29"];
m0_14 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)", file="FSharpOptionHelper.cs", label="return typedType.InvokeMember(\r\n                ''None'',\r\n                BindingFlags.GetProperty | BindingFlags.Public | BindingFlags.Static,\r\n                null,\r\n                null,\r\n                new object[] {});", span="31-36"];
m0_15 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)", file="FSharpOptionHelper.cs", label="Exit CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)", span="26-26"];
m0_9 [cluster="System.Type.MakeGenericType(params System.Type[])", file="FSharpOptionHelper.cs", label="Entry System.Type.MakeGenericType(params System.Type[])", span="0-0"];
m0_0 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.GetUnderlyingType(System.Type)", file="FSharpOptionHelper.cs", label="Entry CommandLine.Infrastructure.FSharpOptionHelper.GetUnderlyingType(System.Type)", span="8-8"];
m0_1 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.GetUnderlyingType(System.Type)", file="FSharpOptionHelper.cs", label="return type.GetGenericArguments()[0];", span="10-10"];
m0_2 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.GetUnderlyingType(System.Type)", file="FSharpOptionHelper.cs", label="Exit CommandLine.Infrastructure.FSharpOptionHelper.GetUnderlyingType(System.Type)", span="8-8"];
m1_40 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="113-113"];
m1_41 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="UnParserExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="118-122"];
m1_42 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="UnParserExtensions.cs", label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="125-125"];
m1_43 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="UnParserExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="113-113"];
m1_62 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="6-6"];
m1_151 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="386-386"];
m1_152 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="UnParserExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="391-395"];
m1_153 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="UnParserExtensions.cs", label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="398-398"];
m1_154 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="UnParserExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="386-386"];
m1_54 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", span="6-6"];
m1_266 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="637-637"];
m1_267 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="UnParserExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="642-646"];
m1_268 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="UnParserExtensions.cs", label="Assert.True(expected.Equals(result.Value.StringValue))", span="649-649"];
m1_269 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="UnParserExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="637-637"];
m1_307 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="741-741"];
m1_308 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="UnParserExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithNullables(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="746-750"];
m1_309 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="UnParserExtensions.cs", label="expected.ShouldBeEquivalentTo(result.Value.NullableLong)", span="753-753"];
m1_310 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="UnParserExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="741-741"];
m1_78 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="UnParserExtensions.cs", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316"];
m1_166 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="429-429"];
m1_167 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="UnParserExtensions.cs", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="432-438"];
m1_168 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="UnParserExtensions.cs", label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="439-439"];
m1_170 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="UnParserExtensions.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="452-452"];
m1_169 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="UnParserExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="442-449"];
m1_171 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="UnParserExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="429-429"];
m1_258 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="616-616"];
m1_259 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="UnParserExtensions.cs", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="619-619"];
m1_260 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="UnParserExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="622-626"];
m1_261 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="UnParserExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="629-629"];
m1_262 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="UnParserExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="616-616"];
m1_108 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="11-11"];
m1_203 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", span="4-4"];
m1_73 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="195-195"];
m1_74 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="UnParserExtensions.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="198-198"];
m1_75 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="UnParserExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="201-205"];
m1_76 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="UnParserExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="208-208"];
m1_77 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="UnParserExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="195-195"];
m1_246 [cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", file="UnParserExtensions.cs", label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="272-272"];
m1_91 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="234-234"];
m1_92 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="UnParserExtensions.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="237-237"];
m1_93 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="UnParserExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue(),\r\n                new[] { ''one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="240-244"];
m1_94 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="UnParserExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="247-247"];
m1_95 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="UnParserExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="234-234"];
m1_183 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="UnParserExtensions.cs", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11"];
m1_314 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="760-760"];
m1_315 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="UnParserExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithFSharpOption(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="765-769"];
m1_316 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="UnParserExtensions.cs", label="expectedValue.ShouldBeEquivalentTo(result.Value.FileName.Value)", span="772-772"];
m1_317 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="UnParserExtensions.cs", label="expectedSome.ShouldBeEquivalentTo(FSharpOption<string>.get_IsSome(result.Value.FileName))", span="773-773"];
m1_318 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="UnParserExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="760-760"];
m1_298 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", span="9-9"];
m1_306 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", span="4-4"];
m1_6 [cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6"];
m1_250 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="597-597"];
m1_251 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="UnParserExtensions.cs", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="600-600"];
m1_252 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="UnParserExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="603-607"];
m1_253 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="UnParserExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="610-610"];
m1_254 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="UnParserExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="597-597"];
m1_109 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="277-277"];
m1_110 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="UnParserExtensions.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="280-280"];
m1_111 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="UnParserExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''3'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="283-287"];
m1_112 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="UnParserExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="290-290"];
m1_113 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="UnParserExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="277-277"];
m1_7 [cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="UnParserExtensions.cs", label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="338-338"];
m1_104 [cluster="Unk.ShouldBeEquivalentTo", file="UnParserExtensions.cs", label="Entry Unk.ShouldBeEquivalentTo", span=""];
m1_172 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="UnParserExtensions.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33"];
m1_332 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="799-799"];
m1_333 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="UnParserExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithScalarValueAndSequenceStringAdjacent(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="804-808"];
m1_334 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="UnParserExtensions.cs", label="expected.ShouldBeEquivalentTo(result.Value)", span="811-811"];
m1_335 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="UnParserExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="799-799"];
m1_82 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="6-6"];
m1_143 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="364-364"];
m1_144 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="UnParserExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceWithoutRange(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="369-373"];
m1_145 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="UnParserExtensions.cs", label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="376-376"];
m1_146 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="UnParserExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="364-364"];
m1_55 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="158-158"];
m1_56 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="UnParserExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="163-167"];
m1_57 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="UnParserExtensions.cs", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="170-170"];
m1_58 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="UnParserExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="158-158"];
m1_31 [cluster="System.Text.StringBuilder.StringBuilder(string)", file="UnParserExtensions.cs", label="Entry System.Text.StringBuilder.StringBuilder(string)", span="0-0"];
m1_32 [cluster="System.Text.StringBuilder.Append(string)", file="UnParserExtensions.cs", label="Entry System.Text.StringBuilder.Append(string)", span="0-0"];
m1_33 [cluster="System.Text.StringBuilder.ToString()", file="UnParserExtensions.cs", label="Entry System.Text.StringBuilder.ToString()", span="0-0"];
m1_34 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="UnParserExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="91-91"];
m1_336 [cluster="lambda expression", file="UnParserExtensions.cs", label="Entry lambda expression", span="805-805"];
m1_13 [cluster="lambda expression", file="UnParserExtensions.cs", label=fakeOptions, span="29-29"];
m1_12 [cluster="lambda expression", file="UnParserExtensions.cs", label="Entry lambda expression", span="29-29"];
m1_14 [cluster="lambda expression", file="UnParserExtensions.cs", label="Exit lambda expression", span="29-29"];
m1_20 [cluster="CommandLine.Infrastructure.StringExtensions.EqualsOrdinal(string, string)", file="UnParserExtensions.cs", label="Exit CommandLine.Infrastructure.StringExtensions.EqualsOrdinal(string, string)", span="35-35"];
m1_22 [cluster="lambda expression", file="UnParserExtensions.cs", label="Exit lambda expression", span="50-50"];
m1_27 [cluster="CommandLine.Infrastructure.StringExtensions.JoinTo(string, params string[])", file="UnParserExtensions.cs", label=others, span="48-48"];
m1_28 [cluster="CommandLine.Infrastructure.StringExtensions.JoinTo(string, params string[])", file="UnParserExtensions.cs", label="builder.Append(v)", span="50-50"];
m1_29 [cluster="CommandLine.Infrastructure.StringExtensions.JoinTo(string, params string[])", color=green, community=0, file="UnParserExtensions.cs", label="return builder.ToString();", prediction=6, span="52-52"];
m1_36 [cluster="lambda expression", file="UnParserExtensions.cs", label="Entry lambda expression", span="97-97"];
m1_37 [cluster="lambda expression", file="UnParserExtensions.cs", label="new FakeOptionsWithSequence()", span="97-97"];
m1_38 [cluster="lambda expression", file="UnParserExtensions.cs", label="Exit lambda expression", span="97-97"];
m1_44 [cluster="lambda expression", file="UnParserExtensions.cs", label="Entry lambda expression", span="119-119"];
m1_45 [cluster="lambda expression", file="UnParserExtensions.cs", label="new FakeOptions()", span="119-119"];
m1_46 [cluster="lambda expression", file="UnParserExtensions.cs", label="Exit lambda expression", span="119-119"];
m1_51 [cluster="lambda expression", file="UnParserExtensions.cs", label="Entry lambda expression", span="142-142"];
m1_52 [cluster="lambda expression", file="UnParserExtensions.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="142-142"];
m1_53 [cluster="lambda expression", file="UnParserExtensions.cs", label="Exit lambda expression", span="142-142"];
m1_59 [cluster="lambda expression", file="UnParserExtensions.cs", label="Entry lambda expression", span="164-164"];
m1_60 [cluster="lambda expression", file="UnParserExtensions.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="164-164"];
m1_61 [cluster="lambda expression", file="UnParserExtensions.cs", label="Exit lambda expression", span="164-164"];
m1_70 [cluster="lambda expression", file="UnParserExtensions.cs", label="Entry lambda expression", span="183-183"];
m1_71 [cluster="lambda expression", file="UnParserExtensions.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="183-183"];
m1_72 [cluster="lambda expression", file="UnParserExtensions.cs", label="Exit lambda expression", span="183-183"];
m1_79 [cluster="lambda expression", file="UnParserExtensions.cs", label="Entry lambda expression", span="202-202"];
m1_80 [cluster="lambda expression", file="UnParserExtensions.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="202-202"];
m1_81 [cluster="lambda expression", file="UnParserExtensions.cs", label="Exit lambda expression", span="202-202"];
m1_88 [cluster="lambda expression", file="UnParserExtensions.cs", label="Entry lambda expression", span="222-222"];
m1_89 [cluster="lambda expression", file="UnParserExtensions.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="222-222"];
m1_90 [cluster="lambda expression", file="UnParserExtensions.cs", label="Exit lambda expression", span="222-222"];
m1_96 [cluster="lambda expression", file="UnParserExtensions.cs", label="Entry lambda expression", span="241-241"];
m1_97 [cluster="lambda expression", file="UnParserExtensions.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="241-241"];
m1_98 [cluster="lambda expression", file="UnParserExtensions.cs", label="Exit lambda expression", span="241-241"];
m1_105 [cluster="lambda expression", file="UnParserExtensions.cs", label="Entry lambda expression", span="265-265"];
m1_106 [cluster="lambda expression", file="UnParserExtensions.cs", label="new FakeOptionsWithEnum()", span="265-265"];
m1_107 [cluster="lambda expression", file="UnParserExtensions.cs", label="Exit lambda expression", span="265-265"];
m1_115 [cluster="lambda expression", file="UnParserExtensions.cs", label="Entry lambda expression", span="284-284"];
m1_116 [cluster="lambda expression", file="UnParserExtensions.cs", label="new FakeOptionsWithEnum()", span="284-284"];
m1_117 [cluster="lambda expression", file="UnParserExtensions.cs", label="Exit lambda expression", span="284-284"];
m1_123 [cluster="lambda expression", file="UnParserExtensions.cs", label="Entry lambda expression", span="303-303"];
m1_124 [cluster="lambda expression", file="UnParserExtensions.cs", label="new FakeOptionsWithEnum()", span="303-303"];
m1_125 [cluster="lambda expression", file="UnParserExtensions.cs", label="Exit lambda expression", span="303-303"];
m1_131 [cluster="lambda expression", file="UnParserExtensions.cs", label="Entry lambda expression", span="322-322"];
m1_132 [cluster="lambda expression", file="UnParserExtensions.cs", label="new FakeOptionsWithEnum()", span="322-322"];
m1_133 [cluster="lambda expression", file="UnParserExtensions.cs", label="Exit lambda expression", span="322-322"];
m1_140 [cluster="lambda expression", file="UnParserExtensions.cs", label="Entry lambda expression", span="347-347"];
m1_141 [cluster="lambda expression", file="UnParserExtensions.cs", label="new FakeOptionsWithValues()", span="347-347"];
m1_142 [cluster="lambda expression", file="UnParserExtensions.cs", label="Exit lambda expression", span="347-347"];
m1_147 [cluster="lambda expression", file="UnParserExtensions.cs", label="Entry lambda expression", span="370-370"];
m1_148 [cluster="lambda expression", file="UnParserExtensions.cs", label="new FakeOptionsWithSequenceWithoutRange()", span="370-370"];
m1_149 [cluster="lambda expression", file="UnParserExtensions.cs", label="Exit lambda expression", span="370-370"];
m1_155 [cluster="lambda expression", file="UnParserExtensions.cs", label="Entry lambda expression", span="392-392"];
m1_156 [cluster="lambda expression", file="UnParserExtensions.cs", label="new FakeOptionsWithSequenceAndSeparator()", span="392-392"];
m1_157 [cluster="lambda expression", file="UnParserExtensions.cs", label="Exit lambda expression", span="392-392"];
m1_163 [cluster="lambda expression", file="UnParserExtensions.cs", label="Entry lambda expression", span="414-414"];
m1_164 [cluster="lambda expression", file="UnParserExtensions.cs", label="new FakeOptionsWithSequenceAndSeparator()", span="414-414"];
m1_165 [cluster="lambda expression", file="UnParserExtensions.cs", label="Exit lambda expression", span="414-414"];
m1_173 [cluster="lambda expression", file="UnParserExtensions.cs", label="Entry lambda expression", span="443-443"];
m1_176 [cluster="lambda expression", file="UnParserExtensions.cs", label="Entry lambda expression", span="444-446"];
m1_174 [cluster="lambda expression", file="UnParserExtensions.cs", label="new FakeOptionsWithValues()", span="443-443"];
m1_175 [cluster="lambda expression", file="UnParserExtensions.cs", label="Exit lambda expression", span="443-443"];
m1_177 [cluster="lambda expression", file="UnParserExtensions.cs", label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="445-446"];
m1_181 [cluster="lambda expression", file="UnParserExtensions.cs", label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="446-446"];
m1_185 [cluster="lambda expression", file="UnParserExtensions.cs", label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="446-446"];
m1_178 [cluster="lambda expression", file="UnParserExtensions.cs", label="Exit lambda expression", span="444-446"];
m1_180 [cluster="lambda expression", file="UnParserExtensions.cs", label="Entry lambda expression", span="446-446"];
m1_182 [cluster="lambda expression", file="UnParserExtensions.cs", label="Exit lambda expression", span="446-446"];
m1_184 [cluster="lambda expression", file="UnParserExtensions.cs", label="Entry lambda expression", span="446-446"];
m1_186 [cluster="lambda expression", file="UnParserExtensions.cs", label="Exit lambda expression", span="446-446"];
m1_194 [cluster="lambda expression", file="UnParserExtensions.cs", label="Entry lambda expression", span="469-469"];
m1_195 [cluster="lambda expression", file="UnParserExtensions.cs", label="new FakeOptionsWithSets()", span="469-469"];
m1_196 [cluster="lambda expression", file="UnParserExtensions.cs", label="Exit lambda expression", span="469-469"];
m1_204 [cluster="lambda expression", file="UnParserExtensions.cs", label="Entry lambda expression", span="489-489"];
m1_205 [cluster="lambda expression", file="UnParserExtensions.cs", label="new FakeOptionWithRequiredAndSet()", span="489-489"];
m1_206 [cluster="lambda expression", file="UnParserExtensions.cs", label="Exit lambda expression", span="489-489"];
m1_212 [cluster="lambda expression", file="UnParserExtensions.cs", label="Entry lambda expression", span="509-509"];
m1_213 [cluster="lambda expression", file="UnParserExtensions.cs", label="new FakeOptionWithRequiredAndSet()", span="509-509"];
m1_214 [cluster="lambda expression", file="UnParserExtensions.cs", label="Exit lambda expression", span="509-509"];
m1_221 [cluster="lambda expression", file="UnParserExtensions.cs", label="Entry lambda expression", span="529-529"];
m1_222 [cluster="lambda expression", file="UnParserExtensions.cs", label="new FakeOptionWithRequiredAndSet()", span="529-529"];
m1_223 [cluster="lambda expression", file="UnParserExtensions.cs", label="Exit lambda expression", span="529-529"];
m1_229 [cluster="lambda expression", file="UnParserExtensions.cs", label="Entry lambda expression", span="547-547"];
m1_230 [cluster="lambda expression", file="UnParserExtensions.cs", label="new FakeOptionWithRequired()", span="547-547"];
m1_231 [cluster="lambda expression", file="UnParserExtensions.cs", label="Exit lambda expression", span="547-547"];
m1_238 [cluster="lambda expression", file="UnParserExtensions.cs", label="Entry lambda expression", span="566-566"];
m1_239 [cluster="lambda expression", file="UnParserExtensions.cs", label="new FakeOptions()", span="566-566"];
m1_240 [cluster="lambda expression", file="UnParserExtensions.cs", label="Exit lambda expression", span="566-566"];
m1_247 [cluster="lambda expression", file="UnParserExtensions.cs", label="Entry lambda expression", span="585-585"];
m1_248 [cluster="lambda expression", file="UnParserExtensions.cs", label="new FakeOptions()", span="585-585"];
m1_249 [cluster="lambda expression", file="UnParserExtensions.cs", label="Exit lambda expression", span="585-585"];
m1_255 [cluster="lambda expression", file="UnParserExtensions.cs", label="Entry lambda expression", span="604-604"];
m1_256 [cluster="lambda expression", file="UnParserExtensions.cs", label="new FakeOptions()", span="604-604"];
m1_257 [cluster="lambda expression", file="UnParserExtensions.cs", label="Exit lambda expression", span="604-604"];
m1_263 [cluster="lambda expression", file="UnParserExtensions.cs", label="Entry lambda expression", span="623-623"];
m1_264 [cluster="lambda expression", file="UnParserExtensions.cs", label="new FakeOptions()", span="623-623"];
m1_265 [cluster="lambda expression", file="UnParserExtensions.cs", label="Exit lambda expression", span="623-623"];
m1_271 [cluster="lambda expression", file="UnParserExtensions.cs", label="Entry lambda expression", span="643-643"];
m1_272 [cluster="lambda expression", file="UnParserExtensions.cs", label="new FakeOptions()", span="643-643"];
m1_273 [cluster="lambda expression", file="UnParserExtensions.cs", label="Exit lambda expression", span="643-643"];
m1_279 [cluster="lambda expression", file="UnParserExtensions.cs", label="Entry lambda expression", span="662-662"];
m1_280 [cluster="lambda expression", file="UnParserExtensions.cs", label="new FakeOptionsWithRequiredValue()", span="662-662"];
m1_281 [cluster="lambda expression", file="UnParserExtensions.cs", label="Exit lambda expression", span="662-662"];
m1_287 [cluster="lambda expression", file="UnParserExtensions.cs", label="Entry lambda expression", span="684-684"];
m1_288 [cluster="lambda expression", file="UnParserExtensions.cs", label="new FakeOptions()", span="684-684"];
m1_289 [cluster="lambda expression", file="UnParserExtensions.cs", label="Exit lambda expression", span="684-684"];
m1_295 [cluster="lambda expression", file="UnParserExtensions.cs", label="Entry lambda expression", span="703-703"];
m1_296 [cluster="lambda expression", file="UnParserExtensions.cs", label="new FakeOptionsWithSequenceMinMaxEqual()", span="703-703"];
m1_297 [cluster="lambda expression", file="UnParserExtensions.cs", label="Exit lambda expression", span="703-703"];
m1_303 [cluster="lambda expression", file="UnParserExtensions.cs", label="Entry lambda expression", span="725-725"];
m1_304 [cluster="lambda expression", file="UnParserExtensions.cs", label="new FakeOptionsWithNullables()", span="725-725"];
m1_305 [cluster="lambda expression", file="UnParserExtensions.cs", label="Exit lambda expression", span="725-725"];
m1_311 [cluster="lambda expression", file="UnParserExtensions.cs", label="Entry lambda expression", span="747-747"];
m1_312 [cluster="lambda expression", file="UnParserExtensions.cs", label="new FakeOptionsWithNullables()", span="747-747"];
m1_313 [cluster="lambda expression", file="UnParserExtensions.cs", label="Exit lambda expression", span="747-747"];
m1_321 [cluster="lambda expression", file="UnParserExtensions.cs", label="Entry lambda expression", span="766-766"];
m1_322 [cluster="lambda expression", file="UnParserExtensions.cs", label="new FakeOptionsWithFSharpOption()", span="766-766"];
m1_323 [cluster="lambda expression", file="UnParserExtensions.cs", label="Exit lambda expression", span="766-766"];
m1_329 [cluster="lambda expression", file="UnParserExtensions.cs", label="Entry lambda expression", span="786-786"];
m1_330 [cluster="lambda expression", file="UnParserExtensions.cs", label="new FakeOptionsWithRequiredValue()", span="786-786"];
m1_331 [cluster="lambda expression", file="UnParserExtensions.cs", label="Exit lambda expression", span="786-786"];
m1_337 [cluster="lambda expression", file="UnParserExtensions.cs", label="new FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="805-805"];
m1_338 [cluster="lambda expression", file="UnParserExtensions.cs", label="Exit lambda expression", span="805-805"];
m1_10 [cluster="CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", file="UnParserExtensions.cs", label="Entry CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", span="87-87"];
m1_30 [cluster="CommandLine.Infrastructure.StringExtensions.JoinTo(string, params string[])", file="UnParserExtensions.cs", label="Exit CommandLine.Infrastructure.StringExtensions.JoinTo(string, params string[])", span="45-45"];
m1_158 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="6-6"];
m1_179 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="UnParserExtensions.cs", label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="31-31"];
m1_193 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="UnParserExtensions.cs", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294"];
m1_232 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4"];
m1_47 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="136-136"];
m1_48 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="UnParserExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="141-145"];
m1_49 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="UnParserExtensions.cs", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="148-148"];
m1_50 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="UnParserExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="136-136"];
m1_118 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="296-296"];
m1_119 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="UnParserExtensions.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="299-299"];
m1_120 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="UnParserExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''Yellow'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="302-306"];
m1_121 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="UnParserExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="309-309"];
m1_122 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="UnParserExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="296-296"];
m1_139 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6"];
m1_23 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="67-67"];
m1_24 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="UnParserExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithDouble(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="72-76"];
m1_25 [cluster="CommandLine.Infrastructure.StringExtensions.JoinTo(string, params string[])", file="UnParserExtensions.cs", label="Entry CommandLine.Infrastructure.StringExtensions.JoinTo(string, params string[])", span="45-45"];
m1_26 [cluster="CommandLine.Infrastructure.StringExtensions.JoinTo(string, params string[])", file="UnParserExtensions.cs", label="var builder = new StringBuilder(value)", span="47-47"];
m1_282 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", span="4-4"];
m1_324 [cluster="FakeOptionsWithFSharpOption.cstr", file="UnParserExtensions.cs", label="Entry FakeOptionsWithFSharpOption.cstr", span=""];
m1_11 [cluster="Unk.True", file="UnParserExtensions.cs", label="Entry Unk.True", span=""];
m1_274 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="655-655"];
m1_275 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="UnParserExtensions.cs", label="var expectedResult = new[] { new MissingRequiredOptionError(NameInfo.EmptyName) }", span="658-658"];
m1_276 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="UnParserExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithRequiredValue(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="661-665"];
m1_277 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="UnParserExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="668-668"];
m1_278 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="UnParserExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="655-655"];
m1_233 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="559-559"];
m1_234 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="UnParserExtensions.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="562-562"];
m1_235 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="UnParserExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="565-569"];
m1_236 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="UnParserExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="572-572"];
m1_237 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="UnParserExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="559-559"];
m1_320 [cluster="Unk.get_IsSome", file="UnParserExtensions.cs", label="Entry Unk.get_IsSome", span=""];
m1_187 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="UnParserExtensions.cs", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
m1_0 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="19-19"];
m1_1 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="UnParserExtensions.cs", label="var fakeOptions = new FakeOptions()", span="22-22"];
m1_2 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="UnParserExtensions.cs", label="var expectedResult = ParserResult.Create(\r\n                ParserResultType.Options,\r\n                fakeOptions, new Error[] { new HelpRequestedError() })", span="23-25"];
m1_3 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="UnParserExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => fakeOptions,\r\n                new[] { ''--help'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="28-32"];
m1_4 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="UnParserExtensions.cs", label="Assert.True(expectedResult.Equals(result))", span="35-35"];
m1_5 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="UnParserExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="19-19"];
m1_224 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="540-540"];
m1_225 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="UnParserExtensions.cs", label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="543-543"];
m1_226 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="UnParserExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequired(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="546-550"];
m1_227 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="UnParserExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="553-553"];
m1_228 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="UnParserExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="540-540"];
m1_215 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="520-520"];
m1_216 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="UnParserExtensions.cs", label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="522-526"];
m1_217 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="UnParserExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="528-532"];
m1_218 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="UnParserExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="535-535"];
m1_219 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="UnParserExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="520-520"];
m1_35 [cluster="Unk.SequenceEqual", file="UnParserExtensions.cs", label="Entry Unk.SequenceEqual", span=""];
m1_126 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="315-315"];
m1_127 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="UnParserExtensions.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="318-318"];
m1_128 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="UnParserExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''RED'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="321-325"];
m1_129 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="UnParserExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="328-328"];
m1_130 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="UnParserExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="315-315"];
m1_68 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="UnParserExtensions.cs", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="261-261"];
m1_325 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="780-780"];
m1_326 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="UnParserExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithRequiredValue(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="785-789"];
m1_327 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="UnParserExtensions.cs", label="expected.ShouldBeEquivalentTo(result.Value)", span="792-792"];
m1_328 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="UnParserExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="780-780"];
m1_83 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="215-215"];
m1_84 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="UnParserExtensions.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="218-218"];
m1_85 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="UnParserExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="221-225"];
m1_86 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="UnParserExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="228-228"];
m1_87 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="UnParserExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="215-215"];
m1_63 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="176-176"];
m1_64 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="UnParserExtensions.cs", label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="179-179"];
m1_65 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="UnParserExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                new[] { ''-s'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="182-186"];
m1_66 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="UnParserExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="189-189"];
m1_67 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="UnParserExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="176-176"];
m1_134 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="334-334"];
m1_135 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="UnParserExtensions.cs", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="337-343"];
m1_136 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="UnParserExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="346-350"];
m1_137 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="UnParserExtensions.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="353-353"];
m1_138 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="UnParserExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="334-334"];
m1_339 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="6-6"];
m1_197 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4"];
m1_270 [cluster="string.Equals(string)", file="UnParserExtensions.cs", label="Entry string.Equals(string)", span="0-0"];
m1_69 [cluster="CommandLine.NameInfo.NameInfo(string, string)", file="UnParserExtensions.cs", label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20"];
m1_15 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="44-44"];
m1_17 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="UnParserExtensions.cs", label="Assert.Equal(expected, result.Value.LongValue)", span="56-56"];
m1_18 [cluster="CommandLine.Infrastructure.StringExtensions.EqualsOrdinal(string, string)", file="UnParserExtensions.cs", label="Entry CommandLine.Infrastructure.StringExtensions.EqualsOrdinal(string, string)", span="35-35"];
m1_19 [cluster="CommandLine.Infrastructure.StringExtensions.EqualsOrdinal(string, string)", color=green, community=0, file="UnParserExtensions.cs", label="return string.CompareOrdinal(strA, strB) == 0;", prediction=7, span="37-37"];
m1_9 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="UnParserExtensions.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12"];
m1_150 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="6-6"];
m1_159 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="408-408"];
m1_160 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="UnParserExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="413-417"];
m1_161 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="UnParserExtensions.cs", label="expected.ShouldBeEquivalentTo(result.Value.StringSequence)", span="420-420"];
m1_162 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="UnParserExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="408-408"];
m1_220 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="UnParserExtensions.cs", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283"];
m1_299 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="719-719"];
m1_300 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="UnParserExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithNullables(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="724-728"];
m1_301 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="UnParserExtensions.cs", label="expected.ShouldBeEquivalentTo(result.Value.NullableInt)", span="731-731"];
m1_302 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="UnParserExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="719-719"];
m1_241 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="578-578"];
m1_242 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="UnParserExtensions.cs", label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="581-581"];
m1_243 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="UnParserExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="584-588"];
m1_244 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="UnParserExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="591-591"];
m1_245 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="UnParserExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="578-578"];
m1_207 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="501-501"];
m1_208 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="UnParserExtensions.cs", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="503-506"];
m1_209 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="UnParserExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="508-512"];
m1_210 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="UnParserExtensions.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="515-515"];
m1_211 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="UnParserExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="501-501"];
m1_290 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="696-696"];
m1_291 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="UnParserExtensions.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="699-699"];
m1_292 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="UnParserExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceMinMaxEqual(),\r\n                new[] { ''one'', ''two'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="702-706"];
m1_293 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="UnParserExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="709-709"];
m1_294 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="UnParserExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="696-696"];
m1_8 [cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="UnParserExtensions.cs", label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="100-100"];
m1_100 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="259-259"];
m1_101 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="UnParserExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="264-268"];
m1_102 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="UnParserExtensions.cs", label="expected.ShouldBeEquivalentTo(result.Value.Colors)", span="271-271"];
m1_103 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="UnParserExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="259-259"];
m1_99 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="6-6"];
m1_283 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="678-678"];
m1_284 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="UnParserExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="683-687"];
m1_285 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="UnParserExtensions.cs", label="expected.ShouldBeEquivalentTo(result.Value.StringValue)", span="690-690"];
m1_286 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="UnParserExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="678-678"];
m1_114 [cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="UnParserExtensions.cs", label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="305-305"];
m1_198 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="481-481"];
m1_199 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="UnParserExtensions.cs", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = null\r\n            }", span="483-486"];
m1_200 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="UnParserExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="488-492"];
m1_201 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="UnParserExtensions.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="495-495"];
m1_202 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="UnParserExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="481-481"];
m1_39 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", span="6-6"];
m1_319 [cluster="Unk.Build", file="UnParserExtensions.cs", label="Entry Unk.Build", span=""];
m1_188 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="458-458"];
m1_189 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="UnParserExtensions.cs", label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl'')),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''))\r\n                }", span="461-465"];
m1_190 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="UnParserExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSets(),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="468-472"];
m1_191 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="UnParserExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="475-475"];
m1_192 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="UnParserExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="458-458"];
m1_340 [file="UnParserExtensions.cs", label=fakeOptions, span=""];
m1_341 [file="UnParserExtensions.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
m2_4 [cluster="CommandLine.Tests.Unit.Core.TypeConverterTests.ChangeType_scalars(string, System.Type, bool, object)", file="UnParserExtensionsTests.cs", label="object matchedValue", span="29-29"];
m2_0 [cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line(CommandLine.Tests.Fakes.FakeOptions, string)", file="UnParserExtensionsTests.cs", label="Entry CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line(CommandLine.Tests.Fakes.FakeOptions, string)", span="21-21"];
m2_1 [cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line(CommandLine.Tests.Fakes.FakeOptions, string)", file="UnParserExtensionsTests.cs", label="new Parser()\r                .FormatCommandLine(options)\r                .ShouldBeEquivalentTo(result)", span="23-25"];
m2_2 [cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line(CommandLine.Tests.Fakes.FakeOptions, string)", file="UnParserExtensionsTests.cs", label="Exit CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line(CommandLine.Tests.Fakes.FakeOptions, string)", span="21-21"];
m2_6 [cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line_for_verbs(CommandLine.Tests.Fakes.AddOptions, string)", file="UnParserExtensionsTests.cs", label="Entry CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line_for_verbs(CommandLine.Tests.Fakes.AddOptions, string)", span="30-30"];
m2_3 [cluster="CommandLine.Parser.Parser()", file="UnParserExtensionsTests.cs", label="Entry CommandLine.Parser.Parser()", span="26-26"];
m2_5 [cluster="Unk.ShouldBeEquivalentTo", file="UnParserExtensionsTests.cs", label="Entry Unk.ShouldBeEquivalentTo", span=""];
m2_7 [cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line_for_verbs(CommandLine.Tests.Fakes.AddOptions, string)", color=green, community=0, file="UnParserExtensionsTests.cs", label="new Parser()\r\n                .FormatCommandLine(options)\r\n                .ShouldBeEquivalentTo(result)", prediction=8, span="32-34"];
m2_11 [cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_immutable_instance_returns_command_line(CommandLine.Tests.Fakes.FakeImmutableOptions, string)", file="UnParserExtensionsTests.cs", label="Exit CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_immutable_instance_returns_command_line(CommandLine.Tests.Fakes.FakeImmutableOptions, string)", span="39-39"];
m2_8 [cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line_for_verbs(CommandLine.Tests.Fakes.AddOptions, string)", file="UnParserExtensionsTests.cs", label="Exit CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line_for_verbs(CommandLine.Tests.Fakes.AddOptions, string)", span="30-30"];
m2_12 [cluster="CSharpx.Maybe<T>.MatchJust(out T)", file="UnParserExtensionsTests.cs", label="Entry CSharpx.Maybe<T>.MatchJust(out T)", span="48-48"];
m2_13 [cluster="Unk.Equal", file="UnParserExtensionsTests.cs", label="Entry Unk.Equal", span=""];
m2_14 [cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_with_fsharp_option_returns_command_line(CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption, string)", file="UnParserExtensionsTests.cs", label="Exit CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_with_fsharp_option_returns_command_line(CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption, string)", span="48-48"];
m2_9 [cluster="CSharpx.Maybe<T>.MatchNothing()", file="UnParserExtensionsTests.cs", label="Entry CSharpx.Maybe<T>.MatchNothing()", span="57-57"];
m2_10 [cluster="Unk.Should", color=green, community=0, file="UnParserExtensionsTests.cs", label="Entry Unk.Should", prediction=9, span=""];
m0_16 -> m0_19  [color=green, key=1, label=object, style=dashed];
m0_22 -> m0_25  [color=green, key=1, label=object, style=dashed];
m0_4 -> m0_7  [color=darkseagreen4, key=1, label=object, style=dashed];
m1_40 -> m1_42  [color=darkseagreen4, key=1, label="int[]", style=dashed];
m1_41 -> m1_44  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_151 -> m1_153  [color=darkseagreen4, key=1, label="long[]", style=dashed];
m1_152 -> m1_155  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_266 -> m1_268  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_267 -> m1_271  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_307 -> m1_309  [color=darkseagreen4, key=1, label="long?", style=dashed];
m1_308 -> m1_311  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_167 -> m1_170  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_169 -> m1_173  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_169 -> m1_176  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_259 -> m1_261  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_260 -> m1_263  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_74 -> m1_76  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_75 -> m1_79  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_92 -> m1_94  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_93 -> m1_96  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_314 -> m1_316  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_314 -> m1_317  [color=darkseagreen4, key=1, label=bool, style=dashed];
m1_315 -> m1_321  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_315 -> m1_317  [color=darkseagreen4, key=1, label=result, style=dashed];
m1_251 -> m1_253  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_252 -> m1_255  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_110 -> m1_112  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_111 -> m1_115  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_332 -> m1_334  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent", style=dashed];
m1_333 -> m1_336  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_143 -> m1_145  [color=darkseagreen4, key=1, label="long[]", style=dashed];
m1_144 -> m1_147  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_55 -> m1_57  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m1_56 -> m1_59  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_31 -> m1_33  [color=darkseagreen4, key=1, label="int[]", style=dashed];
m1_32 -> m1_36  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_176 -> m1_181  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_176 -> m1_185  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_177 -> m1_180  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_181 -> m1_184  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_47 -> m1_49  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m1_48 -> m1_51  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_119 -> m1_121  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_120 -> m1_123  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_23 -> m1_25  [color=darkseagreen4, key=1, label=double, style=dashed];
m1_24 -> m1_27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_25 -> m1_27  [color=darkseagreen4, key=1, label="params string[]", style=dashed];
m1_26 -> m1_29  [color=green, key=1, label=builder, style=dashed];
m1_26 -> m1_28  [color=darkseagreen4, key=1, label=builder, style=dashed];
m1_275 -> m1_277  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_276 -> m1_279  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_234 -> m1_236  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_235 -> m1_238  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_1 -> m1_13  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m1_2 -> m1_4  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_3 -> m1_12  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_225 -> m1_227  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_226 -> m1_229  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_216 -> m1_218  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_217 -> m1_221  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_127 -> m1_129  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_128 -> m1_131  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_325 -> m1_327  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue", style=dashed];
m1_326 -> m1_329  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_84 -> m1_86  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_85 -> m1_88  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_64 -> m1_66  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_65 -> m1_70  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_135 -> m1_137  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_136 -> m1_140  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_15 -> m1_17  [color=darkseagreen4, key=1, label=long, style=dashed];
m1_159 -> m1_161  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m1_160 -> m1_163  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_299 -> m1_301  [color=darkseagreen4, key=1, label="int?", style=dashed];
m1_300 -> m1_303  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_242 -> m1_244  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_243 -> m1_247  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_208 -> m1_210  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_209 -> m1_212  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_291 -> m1_293  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_292 -> m1_295  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_100 -> m1_102  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
m1_101 -> m1_105  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_102 -> m1_102  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
m1_283 -> m1_285  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_284 -> m1_287  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_199 -> m1_201  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_200 -> m1_204  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_189 -> m1_191  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_190 -> m1_194  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_340 -> m1_13  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m1_341 -> m1_181  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_341 -> m1_185  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m2_0 -> m2_2  [color=darkseagreen4, key=1, label=bool, style=dashed];
m2_0 -> m2_6  [color=darkseagreen4, key=1, label=object, style=dashed];
m2_1 -> m2_3  [color=darkseagreen4, key=1, label=result, style=dashed];
m2_1 -> m2_5  [color=darkseagreen4, key=1, label=result, style=dashed];
}
