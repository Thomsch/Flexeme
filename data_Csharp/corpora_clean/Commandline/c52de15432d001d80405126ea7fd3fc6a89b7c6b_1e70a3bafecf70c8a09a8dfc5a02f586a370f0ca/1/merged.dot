digraph  {
n72 [label="CommandLine.Infrastructure.Maybe<T>", span=""];
n73 [label="CommandLine.Infrastructure.Just<T>", span=""];
n74 [label="System.Func<TSource, CommandLine.Infrastructure.Maybe<TValue>>", span=""];
n75 [label="System.Func<TSource, TValue, TResult>", span=""];
n76 [label=TSource, span=""];
n0 [label="Entry CommandLine.Infrastructure.Maybe<T>.Maybe(CommandLine.Infrastructure.MaybeType)", span="16-16", cluster="CommandLine.Infrastructure.Maybe<T>.Maybe(CommandLine.Infrastructure.MaybeType)"];
n1 [label="this.tag = tag", span="18-18", cluster="CommandLine.Infrastructure.Maybe<T>.Maybe(CommandLine.Infrastructure.MaybeType)"];
n2 [label="Exit CommandLine.Infrastructure.Maybe<T>.Maybe(CommandLine.Infrastructure.MaybeType)", span="16-16", cluster="CommandLine.Infrastructure.Maybe<T>.Maybe(CommandLine.Infrastructure.MaybeType)"];
n3 [label="Entry CommandLine.Infrastructure.Maybe<T>.MatchNothing()", span="26-26", cluster="CommandLine.Infrastructure.Maybe<T>.MatchNothing()"];
n4 [label="return this.Tag == MaybeType.Nothing;", span="28-28", cluster="CommandLine.Infrastructure.Maybe<T>.MatchNothing()"];
n5 [label="Exit CommandLine.Infrastructure.Maybe<T>.MatchNothing()", span="26-26", cluster="CommandLine.Infrastructure.Maybe<T>.MatchNothing()"];
n6 [label="Entry CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)", span="31-31", cluster="CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)"];
n7 [label="value = this.Tag == MaybeType.Just\r\n                ? ((Just<T>)this).Value\r\n                : default(T)", span="33-35", cluster="CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)"];
n8 [label="return this.Tag == MaybeType.Just;", span="36-36", cluster="CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)"];
n9 [label="Exit CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)", span="31-31", cluster="CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)"];
n10 [label="Entry CommandLine.Infrastructure.Nothing<T>.Nothing()", span="42-42", cluster="CommandLine.Infrastructure.Nothing<T>.Nothing()"];
n11 [label="Exit CommandLine.Infrastructure.Nothing<T>.Nothing()", span="42-42", cluster="CommandLine.Infrastructure.Nothing<T>.Nothing()"];
n12 [label="Entry CommandLine.Infrastructure.Just<T>.Just(T)", span="49-49", cluster="CommandLine.Infrastructure.Just<T>.Just(T)"];
n13 [label="this.value = value", span="52-52", cluster="CommandLine.Infrastructure.Just<T>.Just(T)"];
n14 [label="Exit CommandLine.Infrastructure.Just<T>.Just(T)", span="49-49", cluster="CommandLine.Infrastructure.Just<T>.Just(T)"];
n15 [label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="66-66", cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()"];
n16 [label="return new Nothing<T>();", span="68-68", cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()"];
n17 [label="Exit CommandLine.Infrastructure.Maybe.Nothing<T>()", span="66-66", cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()"];
n18 [label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="71-71", cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)"];
n19 [label="return new Just<T>(value);", span="73-73", cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)"];
n20 [label="Exit CommandLine.Infrastructure.Maybe.Just<T>(T)", span="71-71", cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)"];
n21 [label="Entry CommandLine.Infrastructure.MaybeExtensions.ToMaybe<T>(T)", span="82-82", cluster="CommandLine.Infrastructure.MaybeExtensions.ToMaybe<T>(T)"];
n22 [label="return object.Equals(value, default(T)) ? Maybe.Nothing<T>() : Maybe.Just(value);", span="84-84", cluster="CommandLine.Infrastructure.MaybeExtensions.ToMaybe<T>(T)"];
n23 [label="Exit CommandLine.Infrastructure.MaybeExtensions.ToMaybe<T>(T)", span="82-82", cluster="CommandLine.Infrastructure.MaybeExtensions.ToMaybe<T>(T)"];
n24 [label="Entry object.Equals(object, object)", span="0-0", cluster="object.Equals(object, object)"];
n25 [label="Entry CommandLine.Infrastructure.MaybeExtensions.Bind<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, CommandLine.Infrastructure.Maybe<T2>>)", span="87-87", cluster="CommandLine.Infrastructure.MaybeExtensions.Bind<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, CommandLine.Infrastructure.Maybe<T2>>)"];
n26 [label="T1 value1", span="89-89", cluster="CommandLine.Infrastructure.MaybeExtensions.Bind<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, CommandLine.Infrastructure.Maybe<T2>>)"];
n27 [label="return maybe.MatchJust(out value1)\r\n                ? func(value1)\r\n                : Maybe.Nothing<T2>();", span="90-92", cluster="CommandLine.Infrastructure.MaybeExtensions.Bind<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, CommandLine.Infrastructure.Maybe<T2>>)"];
n28 [label="Exit CommandLine.Infrastructure.MaybeExtensions.Bind<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, CommandLine.Infrastructure.Maybe<T2>>)", span="87-87", cluster="CommandLine.Infrastructure.MaybeExtensions.Bind<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, CommandLine.Infrastructure.Maybe<T2>>)"];
n29 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)"];
n30 [label="Entry CommandLine.Infrastructure.MaybeExtensions.Map<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>)", span="95-95", cluster="CommandLine.Infrastructure.MaybeExtensions.Map<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>)"];
n31 [label="T1 value1", span="97-97", cluster="CommandLine.Infrastructure.MaybeExtensions.Map<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>)"];
n32 [label="return maybe.MatchJust(out value1)\r\n                ? Maybe.Just(func(value1))\r\n                : Maybe.Nothing<T2>();", span="98-100", cluster="CommandLine.Infrastructure.MaybeExtensions.Map<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>)"];
n33 [label="Exit CommandLine.Infrastructure.MaybeExtensions.Map<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>)", span="95-95", cluster="CommandLine.Infrastructure.MaybeExtensions.Map<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>)"];
n34 [label="Entry CommandLine.Infrastructure.MaybeExtensions.Return<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>, T2)", span="103-103", cluster="CommandLine.Infrastructure.MaybeExtensions.Return<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>, T2)"];
n35 [label="T1 value1", span="105-105", cluster="CommandLine.Infrastructure.MaybeExtensions.Return<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>, T2)"];
n36 [label="return maybe.MatchJust(out value1)\r\n                ? func(value1)\r\n                : noneValue;", span="106-108", cluster="CommandLine.Infrastructure.MaybeExtensions.Return<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>, T2)"];
n37 [label="Exit CommandLine.Infrastructure.MaybeExtensions.Return<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>, T2)", span="103-103", cluster="CommandLine.Infrastructure.MaybeExtensions.Return<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>, T2)"];
n38 [label="Entry CommandLine.Infrastructure.MaybeExtensions.Do<T>(CommandLine.Infrastructure.Maybe<T>, System.Action<T>)", span="111-111", cluster="CommandLine.Infrastructure.MaybeExtensions.Do<T>(CommandLine.Infrastructure.Maybe<T>, System.Action<T>)"];
n39 [label="T value", span="113-113", cluster="CommandLine.Infrastructure.MaybeExtensions.Do<T>(CommandLine.Infrastructure.Maybe<T>, System.Action<T>)"];
n40 [label="maybe.MatchJust(out value)", span="114-114", cluster="CommandLine.Infrastructure.MaybeExtensions.Do<T>(CommandLine.Infrastructure.Maybe<T>, System.Action<T>)"];
n41 [label="action(value)", span="116-116", cluster="CommandLine.Infrastructure.MaybeExtensions.Do<T>(CommandLine.Infrastructure.Maybe<T>, System.Action<T>)"];
n42 [label="Exit CommandLine.Infrastructure.MaybeExtensions.Do<T>(CommandLine.Infrastructure.Maybe<T>, System.Action<T>)", span="111-111", cluster="CommandLine.Infrastructure.MaybeExtensions.Do<T>(CommandLine.Infrastructure.Maybe<T>, System.Action<T>)"];
n43 [label="Entry System.Action<T>.Invoke(T)", span="0-0", cluster="System.Action<T>.Invoke(T)"];
n44 [label="Entry CommandLine.Infrastructure.MaybeExtensions.Select<TSource, TResult>(CommandLine.Infrastructure.Maybe<TSource>, System.Func<TSource, TResult>)", span="120-120", cluster="CommandLine.Infrastructure.MaybeExtensions.Select<TSource, TResult>(CommandLine.Infrastructure.Maybe<TSource>, System.Func<TSource, TResult>)"];
n45 [label="return maybe.Map(selector);", span="123-123", cluster="CommandLine.Infrastructure.MaybeExtensions.Select<TSource, TResult>(CommandLine.Infrastructure.Maybe<TSource>, System.Func<TSource, TResult>)"];
n46 [label="Exit CommandLine.Infrastructure.MaybeExtensions.Select<TSource, TResult>(CommandLine.Infrastructure.Maybe<TSource>, System.Func<TSource, TResult>)", span="120-120", cluster="CommandLine.Infrastructure.MaybeExtensions.Select<TSource, TResult>(CommandLine.Infrastructure.Maybe<TSource>, System.Func<TSource, TResult>)"];
n47 [label="Entry CommandLine.Infrastructure.Maybe<T1>.Map<T1, T2>(System.Func<T1, T2>)", span="95-95", cluster="CommandLine.Infrastructure.Maybe<T1>.Map<T1, T2>(System.Func<T1, T2>)"];
n48 [label="Entry CommandLine.Infrastructure.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CommandLine.Infrastructure.Maybe<TSource>, System.Func<TSource, CommandLine.Infrastructure.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)", span="126-126", cluster="CommandLine.Infrastructure.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CommandLine.Infrastructure.Maybe<TSource>, System.Func<TSource, CommandLine.Infrastructure.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)"];
n49 [label="return maybe.Bind(\r\n                sourceValue => valueSelector(sourceValue)\r\n                    .Map(\r\n                        resultValue => resultSelector(sourceValue, resultValue)));", span="131-134", cluster="CommandLine.Infrastructure.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CommandLine.Infrastructure.Maybe<TSource>, System.Func<TSource, CommandLine.Infrastructure.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)"];
n53 [label="valueSelector(sourceValue)\r\n                    .Map(\r\n                        resultValue => resultSelector(sourceValue, resultValue))", span="132-134", cluster="lambda expression"];
n56 [label="resultSelector(sourceValue, resultValue)", span="134-134", cluster="lambda expression"];
n50 [label="Exit CommandLine.Infrastructure.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CommandLine.Infrastructure.Maybe<TSource>, System.Func<TSource, CommandLine.Infrastructure.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)", span="126-126", cluster="CommandLine.Infrastructure.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CommandLine.Infrastructure.Maybe<TSource>, System.Func<TSource, CommandLine.Infrastructure.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)"];
n51 [label="Entry CommandLine.Infrastructure.Maybe<T1>.Bind<T1, T2>(System.Func<T1, CommandLine.Infrastructure.Maybe<T2>>)", span="87-87", cluster="CommandLine.Infrastructure.Maybe<T1>.Bind<T1, T2>(System.Func<T1, CommandLine.Infrastructure.Maybe<T2>>)"];
n52 [label="Entry lambda expression", span="132-134", cluster="lambda expression"];
n54 [label="Exit lambda expression", span="132-134", cluster="lambda expression"];
n55 [label="Entry lambda expression", span="134-134", cluster="lambda expression"];
n57 [label="Exit lambda expression", span="134-134", cluster="lambda expression"];
n58 [label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0", cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)"];
n59 [label="Entry CommandLine.Infrastructure.MaybeExtensions.FromJust<T>(CommandLine.Infrastructure.Maybe<T>, System.Exception)", span="137-137", cluster="CommandLine.Infrastructure.MaybeExtensions.FromJust<T>(CommandLine.Infrastructure.Maybe<T>, System.Exception)"];
n60 [label="T value", span="139-139", cluster="CommandLine.Infrastructure.MaybeExtensions.FromJust<T>(CommandLine.Infrastructure.Maybe<T>, System.Exception)"];
n61 [label="maybe.MatchJust(out value)", span="140-140", cluster="CommandLine.Infrastructure.MaybeExtensions.FromJust<T>(CommandLine.Infrastructure.Maybe<T>, System.Exception)", color=red, community=0];
n63 [label="throw exceptionToThrow ?? new ArgumentException(''Value empty.'');", span="144-144", cluster="CommandLine.Infrastructure.MaybeExtensions.FromJust<T>(CommandLine.Infrastructure.Maybe<T>, System.Exception)", color=red, community=0];
n62 [label="return value;", span="142-142", cluster="CommandLine.Infrastructure.MaybeExtensions.FromJust<T>(CommandLine.Infrastructure.Maybe<T>, System.Exception)", color=red, community=0];
n64 [label="Exit CommandLine.Infrastructure.MaybeExtensions.FromJust<T>(CommandLine.Infrastructure.Maybe<T>, System.Exception)", span="137-137", cluster="CommandLine.Infrastructure.MaybeExtensions.FromJust<T>(CommandLine.Infrastructure.Maybe<T>, System.Exception)"];
n65 [label="Entry System.ArgumentException.ArgumentException(string)", span="0-0", cluster="System.ArgumentException.ArgumentException(string)"];
n66 [label="Entry CommandLine.Infrastructure.MaybeExtensions.IsNothing<T>(CommandLine.Infrastructure.Maybe<T>)", span="147-147", cluster="CommandLine.Infrastructure.MaybeExtensions.IsNothing<T>(CommandLine.Infrastructure.Maybe<T>)"];
n67 [label="return maybe.Tag == MaybeType.Nothing;", span="149-149", cluster="CommandLine.Infrastructure.MaybeExtensions.IsNothing<T>(CommandLine.Infrastructure.Maybe<T>)"];
n68 [label="Exit CommandLine.Infrastructure.MaybeExtensions.IsNothing<T>(CommandLine.Infrastructure.Maybe<T>)", span="147-147", cluster="CommandLine.Infrastructure.MaybeExtensions.IsNothing<T>(CommandLine.Infrastructure.Maybe<T>)"];
n69 [label="Entry CommandLine.Infrastructure.MaybeExtensions.IsJust<T>(CommandLine.Infrastructure.Maybe<T>)", span="152-152", cluster="CommandLine.Infrastructure.MaybeExtensions.IsJust<T>(CommandLine.Infrastructure.Maybe<T>)"];
n70 [label="return maybe.Tag == MaybeType.Just;", span="154-154", cluster="CommandLine.Infrastructure.MaybeExtensions.IsJust<T>(CommandLine.Infrastructure.Maybe<T>)"];
n71 [label="Exit CommandLine.Infrastructure.MaybeExtensions.IsJust<T>(CommandLine.Infrastructure.Maybe<T>)", span="152-152", cluster="CommandLine.Infrastructure.MaybeExtensions.IsJust<T>(CommandLine.Infrastructure.Maybe<T>)"];
d5 [label="''Required.''", span="63-63", cluster="lambda expression", color=green, community=0];
d4 [label="Entry lambda expression", span="63-63", cluster="lambda expression"];
d6 [label="Exit lambda expression", span="63-63", cluster="lambda expression"];
d42 [label="var bySet = from e in errors\r\n                                group e by e.SetName into g\r\n                                select new { SetName = g.Key, Errors = g.ToList() }", span="142-144", cluster="lambda expression", color=green, community=0];
d41 [label="Entry lambda expression", span="140-170", cluster="lambda expression"];
d43 [label="var msgs = bySet.Select(\r\n                            set =>\r\n                            {\r\n                                var names = string.Join(\r\n                                    string.Empty,\r\n                                    (from e in set.Errors select ''''' + e.NameInfo.NameText + ''', '').ToArray());\r\n                                var namesCount = set.Errors.Count();\r\n\r\n                                var incompat = string.Join(\r\n                                    string.Empty,\r\n                                    (from e in set.Errors\r\n                                        where !e.SetName.Equals(set.SetName)\r\n                                        select ''''' + e.NameInfo.NameText + ''', '').ToArray());\r\n                                return\r\n                                    new StringBuilder(''Option'').AppendWhen(namesCount > 1, ''s'')\r\n                                        .Append('': '')\r\n                                        .Append(names.Substring(0, names.Length - 3))\r\n                                        .AppendIf(namesCount > 1, ''are'', ''is'')\r\n                                        .Append('' not compatible with: '')\r\n                                        .Append(incompat.Substring(0, incompat.Length - 3))\r\n                                        .Append('.')\r\n                                        .ToString();\r\n                            }).ToArray()", span="146-168", cluster="lambda expression", color=green, community=0];
d46 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()"];
d44 [label="return string.Join(Environment.NewLine, msgs);", span="169-169", cluster="lambda expression"];
d47 [label="Entry Unk.Select", span="", cluster="Unk.Select"];
d48 [label="Entry Unk.ToArray", span="", cluster="Unk.ToArray"];
d50 [label="Entry lambda expression", span="147-168", cluster="lambda expression"];
d54 [label="return\r\n                                    new StringBuilder(''Option'').AppendWhen(namesCount > 1, ''s'')\r\n                                        .Append('': '')\r\n                                        .Append(names.Substring(0, names.Length - 3))\r\n                                        .AppendIf(namesCount > 1, ''are'', ''is'')\r\n                                        .Append('' not compatible with: '')\r\n                                        .Append(incompat.Substring(0, incompat.Length - 3))\r\n                                        .Append('.')\r\n                                        .ToString();", span="159-167", cluster="lambda expression", color=green, community=0];
d51 [label="var names = string.Join(\r\n                                    string.Empty,\r\n                                    (from e in set.Errors select ''''' + e.NameInfo.NameText + ''', '').ToArray())", span="149-151", cluster="lambda expression"];
d52 [label="var namesCount = set.Errors.Count()", span="152-152", cluster="lambda expression"];
d53 [label="var incompat = string.Join(\r\n                                    string.Empty,\r\n                                    (from e in set.Errors\r\n                                        where !e.SetName.Equals(set.SetName)\r\n                                        select ''''' + e.NameInfo.NameText + ''', '').ToArray())", span="154-158", cluster="lambda expression"];
d55 [label="Exit lambda expression", span="147-168", cluster="lambda expression"];
d58 [label="Entry System.Text.StringBuilder.StringBuilder(string)", span="0-0", cluster="System.Text.StringBuilder.StringBuilder(string)"];
d59 [label="Entry System.Text.StringBuilder.AppendWhen(bool, params string[])", span="9-9", cluster="System.Text.StringBuilder.AppendWhen(bool, params string[])"];
d60 [label="Entry System.Text.StringBuilder.Append(string)", span="0-0", cluster="System.Text.StringBuilder.Append(string)"];
d61 [label="Entry string.Substring(int, int)", span="0-0", cluster="string.Substring(int, int)"];
d62 [label="Entry System.Text.StringBuilder.AppendIf(bool, string, string)", span="42-42", cluster="System.Text.StringBuilder.AppendIf(bool, string, string)"];
d63 [label="Entry System.Text.StringBuilder.Append(char)", span="0-0", cluster="System.Text.StringBuilder.Append(char)"];
d64 [label="Entry System.Text.StringBuilder.ToString()", span="0-0", cluster="System.Text.StringBuilder.ToString()"];
d45 [label="Exit lambda expression", span="140-170", cluster="lambda expression"];
d49 [label="Entry Unk.Join", span="", cluster="Unk.Join"];
d56 [label="Entry Unk.Count", span="", cluster="Unk.Count"];
d57 [label="Entry Unk.Equals", span="", cluster="Unk.Equals"];
n72 -> n1  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.Maybe<T>"];
n72 -> n4  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.Maybe<T>"];
n72 -> n7  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.Maybe<T>"];
n72 -> n8  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.Maybe<T>"];
n73 -> n13  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.Just<T>"];
n74 -> n53  [key=1, style=dashed, color=darkseagreen4, label="System.Func<TSource, CommandLine.Infrastructure.Maybe<TValue>>"];
n75 -> n53  [key=1, style=dashed, color=darkseagreen4, label="System.Func<TSource, TValue, TResult>"];
n75 -> n56  [key=1, style=dashed, color=darkseagreen4, label="System.Func<TSource, TValue, TResult>"];
n76 -> n56  [key=1, style=dashed, color=darkseagreen4, label=TSource];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n2 -> n0  [key=0, style=bold, color=blue];
n3 -> n4  [key=0, style=solid];
n4 -> n5  [key=0, style=solid];
n5 -> n3  [key=0, style=bold, color=blue];
n6 -> n7  [key=0, style=solid];
n7 -> n8  [key=0, style=solid];
n7 -> n9  [key=1, style=dashed, color=darkseagreen4, label="out T"];
n8 -> n9  [key=0, style=solid];
n9 -> n6  [key=0, style=bold, color=blue];
n10 -> n11  [key=0, style=solid];
n11 -> n10  [key=0, style=bold, color=blue];
n12 -> n13  [key=0, style=solid];
n13 -> n14  [key=0, style=solid];
n14 -> n12  [key=0, style=bold, color=blue];
n15 -> n16  [key=0, style=solid];
n16 -> n17  [key=0, style=solid];
n16 -> n10  [key=2, style=dotted];
n17 -> n15  [key=0, style=bold, color=blue];
n18 -> n19  [key=0, style=solid];
n19 -> n20  [key=0, style=solid];
n19 -> n12  [key=2, style=dotted];
n20 -> n18  [key=0, style=bold, color=blue];
n21 -> n22  [key=0, style=solid];
n22 -> n23  [key=0, style=solid];
n22 -> n24  [key=2, style=dotted];
n22 -> n15  [key=2, style=dotted];
n22 -> n18  [key=2, style=dotted];
n23 -> n21  [key=0, style=bold, color=blue];
n25 -> n26  [key=0, style=solid];
n25 -> n27  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.Maybe<T1>"];
n26 -> n27  [key=0, style=solid];
n27 -> n28  [key=0, style=solid];
n27 -> n6  [key=2, style=dotted];
n27 -> n29  [key=2, style=dotted];
n27 -> n15  [key=2, style=dotted];
n27 -> n27  [key=1, style=dashed, color=darkseagreen4, label=value1];
n28 -> n25  [key=0, style=bold, color=blue];
n30 -> n31  [key=0, style=solid];
n30 -> n32  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.Maybe<T1>"];
n31 -> n32  [key=0, style=solid];
n32 -> n33  [key=0, style=solid];
n32 -> n6  [key=2, style=dotted];
n32 -> n29  [key=2, style=dotted];
n32 -> n18  [key=2, style=dotted];
n32 -> n15  [key=2, style=dotted];
n32 -> n32  [key=1, style=dashed, color=darkseagreen4, label=value1];
n33 -> n30  [key=0, style=bold, color=blue];
n34 -> n35  [key=0, style=solid];
n34 -> n36  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.Maybe<T1>"];
n35 -> n36  [key=0, style=solid];
n36 -> n37  [key=0, style=solid];
n36 -> n6  [key=2, style=dotted];
n36 -> n29  [key=2, style=dotted];
n36 -> n36  [key=1, style=dashed, color=darkseagreen4, label=value1];
n37 -> n34  [key=0, style=bold, color=blue];
n38 -> n39  [key=0, style=solid];
n38 -> n40  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.Maybe<T>"];
n38 -> n41  [key=1, style=dashed, color=darkseagreen4, label="System.Action<T>"];
n39 -> n40  [key=0, style=solid];
n40 -> n41  [key=0, style=solid];
n40 -> n42  [key=0, style=solid];
n40 -> n6  [key=2, style=dotted];
n41 -> n42  [key=0, style=solid];
n41 -> n43  [key=2, style=dotted];
n42 -> n38  [key=0, style=bold, color=blue];
n44 -> n45  [key=0, style=solid];
n45 -> n46  [key=0, style=solid];
n45 -> n47  [key=2, style=dotted];
n46 -> n44  [key=0, style=bold, color=blue];
n48 -> n49  [key=0, style=solid];
n48 -> n53  [key=1, style=dashed, color=darkseagreen4, label="System.Func<TSource, CommandLine.Infrastructure.Maybe<TValue>>"];
n48 -> n56  [key=1, style=dashed, color=darkseagreen4, label="System.Func<TSource, TValue, TResult>"];
n49 -> n50  [key=0, style=solid];
n49 -> n51  [key=2, style=dotted];
n49 -> n52  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n53 -> n54  [key=0, style=solid];
n53 -> n29  [key=2, style=dotted];
n53 -> n47  [key=2, style=dotted];
n53 -> n55  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n56 -> n57  [key=0, style=solid];
n56 -> n58  [key=2, style=dotted];
n50 -> n48  [key=0, style=bold, color=blue];
n52 -> n53  [key=0, style=solid];
n52 -> n56  [key=1, style=dashed, color=darkseagreen4, label=TSource];
n54 -> n52  [key=0, style=bold, color=blue];
n55 -> n56  [key=0, style=solid];
n57 -> n55  [key=0, style=bold, color=blue];
n59 -> n60  [key=0, style=solid];
n59 -> n61  [key=1, style=dashed, color=red, label="CommandLine.Infrastructure.Maybe<T>"];
n59 -> n63  [key=1, style=dashed, color=red, label="System.Exception"];
n60 -> n61  [key=0, style=solid, color=red];
n61 -> n62  [key=0, style=solid, color=red];
n61 -> n63  [key=0, style=solid, color=red];
n61 -> n6  [key=2, style=dotted, color=red];
n63 -> n64  [key=0, style=solid, color=red];
n63 -> n65  [key=2, style=dotted, color=red];
n62 -> n64  [key=0, style=solid, color=red];
n64 -> n59  [key=0, style=bold, color=blue];
n66 -> n67  [key=0, style=solid];
n67 -> n68  [key=0, style=solid];
n68 -> n66  [key=0, style=bold, color=blue];
n69 -> n70  [key=0, style=solid];
n70 -> n71  [key=0, style=solid];
n71 -> n69  [key=0, style=bold, color=blue];
d5 -> d6  [key=0, style=solid, color=green];
d4 -> d5  [key=0, style=solid, color=green];
d6 -> d4  [key=0, style=bold, color=blue];
d42 -> d42  [key=1, style=dashed, color=green, label=e];
d42 -> d43  [key=0, style=solid, color=green];
d42 -> d46  [key=2, style=dotted, color=green];
d41 -> d42  [key=0, style=solid, color=green];
d43 -> d44  [key=0, style=solid, color=green];
d43 -> d47  [key=2, style=dotted, color=green];
d43 -> d48  [key=2, style=dotted, color=green];
d43 -> d50  [key=1, style=dashed, color=green, label="lambda expression"];
d44 -> d45  [key=0, style=solid];
d44 -> d49  [key=2, style=dotted];
d50 -> d51  [key=0, style=solid];
d50 -> d52  [key=1, style=dashed, color=darkseagreen4, label="?"];
d50 -> d53  [key=1, style=dashed, color=darkseagreen4, label="?"];
d54 -> d55  [key=0, style=solid, color=green];
d54 -> d58  [key=2, style=dotted, color=green];
d54 -> d59  [key=2, style=dotted, color=green];
d54 -> d60  [key=2, style=dotted, color=green];
d54 -> d61  [key=2, style=dotted, color=green];
d54 -> d62  [key=2, style=dotted, color=green];
d54 -> d63  [key=2, style=dotted, color=green];
d54 -> d64  [key=2, style=dotted, color=green];
d51 -> d54  [key=1, style=dashed, color=green, label=names];
d51 -> d48  [key=2, style=dotted];
d51 -> d51  [key=1, style=dashed, color=darkseagreen4, label=e];
d51 -> d52  [key=0, style=solid];
d51 -> d49  [key=2, style=dotted];
d52 -> d54  [key=1, style=dashed, color=green, label=namesCount];
d52 -> d53  [key=0, style=solid];
d52 -> d56  [key=2, style=dotted];
d53 -> d54  [key=0, style=solid, color=green];
d53 -> d48  [key=2, style=dotted];
d53 -> d53  [key=1, style=dashed, color=darkseagreen4, label=e];
d53 -> d57  [key=2, style=dotted];
d53 -> d49  [key=2, style=dotted];
d55 -> d50  [key=0, style=bold, color=blue];
d62 -> d62  [key=3, color=darkorchid, style=bold, label="Local variable System.Func<CommandLine.ParserResult<T>> buildUp"];
d45 -> d41  [key=0, style=bold, color=blue];
}
