digraph  {
n72 [label="CommandLine.Infrastructure.Maybe<T>", span=""];
n73 [label="CommandLine.Infrastructure.Just<T>", span=""];
n74 [label="System.Func<TSource, CommandLine.Infrastructure.Maybe<TValue>>", span=""];
n75 [label="System.Func<TSource, TValue, TResult>", span=""];
n76 [label=TSource, span=""];
n0 [cluster="CommandLine.Infrastructure.Maybe<T>.Maybe(CommandLine.Infrastructure.MaybeType)", label="Entry CommandLine.Infrastructure.Maybe<T>.Maybe(CommandLine.Infrastructure.MaybeType)", span="16-16"];
n1 [cluster="CommandLine.Infrastructure.Maybe<T>.Maybe(CommandLine.Infrastructure.MaybeType)", label="this.tag = tag", span="18-18"];
n2 [cluster="CommandLine.Infrastructure.Maybe<T>.Maybe(CommandLine.Infrastructure.MaybeType)", label="Exit CommandLine.Infrastructure.Maybe<T>.Maybe(CommandLine.Infrastructure.MaybeType)", span="16-16"];
n3 [cluster="CommandLine.Infrastructure.Maybe<T>.MatchNothing()", label="Entry CommandLine.Infrastructure.Maybe<T>.MatchNothing()", span="26-26"];
n4 [cluster="CommandLine.Infrastructure.Maybe<T>.MatchNothing()", label="return this.Tag == MaybeType.Nothing;", span="28-28"];
n5 [cluster="CommandLine.Infrastructure.Maybe<T>.MatchNothing()", label="Exit CommandLine.Infrastructure.Maybe<T>.MatchNothing()", span="26-26"];
n6 [cluster="CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)", label="Entry CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)", span="31-31"];
n7 [cluster="CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)", label="value = this.Tag == MaybeType.Just\r\n                ? ((Just<T>)this).Value\r\n                : default(T)", span="33-35"];
n8 [cluster="CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)", label="return this.Tag == MaybeType.Just;", span="36-36"];
n9 [cluster="CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)", label="Exit CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)", span="31-31"];
n10 [cluster="CommandLine.Infrastructure.Nothing<T>.Nothing()", label="Entry CommandLine.Infrastructure.Nothing<T>.Nothing()", span="42-42"];
n11 [cluster="CommandLine.Infrastructure.Nothing<T>.Nothing()", label="Exit CommandLine.Infrastructure.Nothing<T>.Nothing()", span="42-42"];
n12 [cluster="CommandLine.Infrastructure.Just<T>.Just(T)", label="Entry CommandLine.Infrastructure.Just<T>.Just(T)", span="49-49"];
n13 [cluster="CommandLine.Infrastructure.Just<T>.Just(T)", label="this.value = value", span="52-52"];
n14 [cluster="CommandLine.Infrastructure.Just<T>.Just(T)", label="Exit CommandLine.Infrastructure.Just<T>.Just(T)", span="49-49"];
n15 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="66-66"];
n16 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", label="return new Nothing<T>();", span="68-68"];
n17 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", label="Exit CommandLine.Infrastructure.Maybe.Nothing<T>()", span="66-66"];
n18 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="71-71"];
n19 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", label="return new Just<T>(value);", span="73-73"];
n20 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", label="Exit CommandLine.Infrastructure.Maybe.Just<T>(T)", span="71-71"];
n21 [cluster="CommandLine.Infrastructure.MaybeExtensions.ToMaybe<T>(T)", label="Entry CommandLine.Infrastructure.MaybeExtensions.ToMaybe<T>(T)", span="82-82"];
n22 [cluster="CommandLine.Infrastructure.MaybeExtensions.ToMaybe<T>(T)", label="return object.Equals(value, default(T)) ? Maybe.Nothing<T>() : Maybe.Just(value);", span="84-84"];
n23 [cluster="CommandLine.Infrastructure.MaybeExtensions.ToMaybe<T>(T)", label="Exit CommandLine.Infrastructure.MaybeExtensions.ToMaybe<T>(T)", span="82-82"];
n24 [cluster="object.Equals(object, object)", label="Entry object.Equals(object, object)", span="0-0"];
n25 [cluster="CommandLine.Infrastructure.MaybeExtensions.Bind<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, CommandLine.Infrastructure.Maybe<T2>>)", label="Entry CommandLine.Infrastructure.MaybeExtensions.Bind<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, CommandLine.Infrastructure.Maybe<T2>>)", span="87-87"];
n26 [cluster="CommandLine.Infrastructure.MaybeExtensions.Bind<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, CommandLine.Infrastructure.Maybe<T2>>)", label="T1 value1", span="89-89"];
n27 [cluster="CommandLine.Infrastructure.MaybeExtensions.Bind<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, CommandLine.Infrastructure.Maybe<T2>>)", label="return maybe.MatchJust(out value1)\r\n                ? func(value1)\r\n                : Maybe.Nothing<T2>();", span="90-92"];
n28 [cluster="CommandLine.Infrastructure.MaybeExtensions.Bind<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, CommandLine.Infrastructure.Maybe<T2>>)", label="Exit CommandLine.Infrastructure.MaybeExtensions.Bind<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, CommandLine.Infrastructure.Maybe<T2>>)", span="87-87"];
n29 [cluster="System.Func<T, TResult>.Invoke(T)", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
n30 [cluster="CommandLine.Infrastructure.MaybeExtensions.Map<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>)", label="Entry CommandLine.Infrastructure.MaybeExtensions.Map<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>)", span="95-95"];
n31 [cluster="CommandLine.Infrastructure.MaybeExtensions.Map<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>)", label="T1 value1", span="97-97"];
n32 [cluster="CommandLine.Infrastructure.MaybeExtensions.Map<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>)", label="return maybe.MatchJust(out value1)\r\n                ? Maybe.Just(func(value1))\r\n                : Maybe.Nothing<T2>();", span="98-100"];
n33 [cluster="CommandLine.Infrastructure.MaybeExtensions.Map<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>)", label="Exit CommandLine.Infrastructure.MaybeExtensions.Map<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>)", span="95-95"];
n34 [cluster="CommandLine.Infrastructure.MaybeExtensions.Return<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>, T2)", label="Entry CommandLine.Infrastructure.MaybeExtensions.Return<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>, T2)", span="103-103"];
n35 [cluster="CommandLine.Infrastructure.MaybeExtensions.Return<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>, T2)", label="T1 value1", span="105-105"];
n36 [cluster="CommandLine.Infrastructure.MaybeExtensions.Return<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>, T2)", label="return maybe.MatchJust(out value1)\r\n                ? func(value1)\r\n                : noneValue;", span="106-108"];
n37 [cluster="CommandLine.Infrastructure.MaybeExtensions.Return<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>, T2)", label="Exit CommandLine.Infrastructure.MaybeExtensions.Return<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>, T2)", span="103-103"];
n38 [cluster="CommandLine.Infrastructure.MaybeExtensions.Do<T>(CommandLine.Infrastructure.Maybe<T>, System.Action<T>)", label="Entry CommandLine.Infrastructure.MaybeExtensions.Do<T>(CommandLine.Infrastructure.Maybe<T>, System.Action<T>)", span="111-111"];
n39 [cluster="CommandLine.Infrastructure.MaybeExtensions.Do<T>(CommandLine.Infrastructure.Maybe<T>, System.Action<T>)", label="T value", span="113-113"];
n40 [cluster="CommandLine.Infrastructure.MaybeExtensions.Do<T>(CommandLine.Infrastructure.Maybe<T>, System.Action<T>)", label="maybe.MatchJust(out value)", span="114-114"];
n41 [cluster="CommandLine.Infrastructure.MaybeExtensions.Do<T>(CommandLine.Infrastructure.Maybe<T>, System.Action<T>)", label="action(value)", span="116-116"];
n42 [cluster="CommandLine.Infrastructure.MaybeExtensions.Do<T>(CommandLine.Infrastructure.Maybe<T>, System.Action<T>)", label="Exit CommandLine.Infrastructure.MaybeExtensions.Do<T>(CommandLine.Infrastructure.Maybe<T>, System.Action<T>)", span="111-111"];
n43 [cluster="System.Action<T>.Invoke(T)", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
n44 [cluster="CommandLine.Infrastructure.MaybeExtensions.Select<TSource, TResult>(CommandLine.Infrastructure.Maybe<TSource>, System.Func<TSource, TResult>)", label="Entry CommandLine.Infrastructure.MaybeExtensions.Select<TSource, TResult>(CommandLine.Infrastructure.Maybe<TSource>, System.Func<TSource, TResult>)", span="120-120"];
n45 [cluster="CommandLine.Infrastructure.MaybeExtensions.Select<TSource, TResult>(CommandLine.Infrastructure.Maybe<TSource>, System.Func<TSource, TResult>)", label="return maybe.Map(selector);", span="123-123"];
n46 [cluster="CommandLine.Infrastructure.MaybeExtensions.Select<TSource, TResult>(CommandLine.Infrastructure.Maybe<TSource>, System.Func<TSource, TResult>)", label="Exit CommandLine.Infrastructure.MaybeExtensions.Select<TSource, TResult>(CommandLine.Infrastructure.Maybe<TSource>, System.Func<TSource, TResult>)", span="120-120"];
n47 [cluster="CommandLine.Infrastructure.Maybe<T1>.Map<T1, T2>(System.Func<T1, T2>)", label="Entry CommandLine.Infrastructure.Maybe<T1>.Map<T1, T2>(System.Func<T1, T2>)", span="95-95"];
n48 [cluster="CommandLine.Infrastructure.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CommandLine.Infrastructure.Maybe<TSource>, System.Func<TSource, CommandLine.Infrastructure.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)", label="Entry CommandLine.Infrastructure.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CommandLine.Infrastructure.Maybe<TSource>, System.Func<TSource, CommandLine.Infrastructure.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)", span="126-126"];
n49 [cluster="CommandLine.Infrastructure.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CommandLine.Infrastructure.Maybe<TSource>, System.Func<TSource, CommandLine.Infrastructure.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)", label="return maybe.Bind(\r\n                sourceValue => valueSelector(sourceValue)\r\n                    .Map(\r\n                        resultValue => resultSelector(sourceValue, resultValue)));", span="131-134"];
n53 [cluster="lambda expression", label="valueSelector(sourceValue)\r\n                    .Map(\r\n                        resultValue => resultSelector(sourceValue, resultValue))", span="132-134"];
n56 [cluster="lambda expression", label="resultSelector(sourceValue, resultValue)", span="134-134"];
n50 [cluster="CommandLine.Infrastructure.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CommandLine.Infrastructure.Maybe<TSource>, System.Func<TSource, CommandLine.Infrastructure.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)", label="Exit CommandLine.Infrastructure.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CommandLine.Infrastructure.Maybe<TSource>, System.Func<TSource, CommandLine.Infrastructure.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)", span="126-126"];
n51 [cluster="CommandLine.Infrastructure.Maybe<T1>.Bind<T1, T2>(System.Func<T1, CommandLine.Infrastructure.Maybe<T2>>)", label="Entry CommandLine.Infrastructure.Maybe<T1>.Bind<T1, T2>(System.Func<T1, CommandLine.Infrastructure.Maybe<T2>>)", span="87-87"];
n52 [cluster="lambda expression", label="Entry lambda expression", span="132-134"];
n54 [cluster="lambda expression", label="Exit lambda expression", span="132-134"];
n55 [cluster="lambda expression", label="Entry lambda expression", span="134-134"];
n57 [cluster="lambda expression", label="Exit lambda expression", span="134-134"];
n58 [cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0"];
n59 [cluster="CommandLine.Infrastructure.MaybeExtensions.FromJust<T>(CommandLine.Infrastructure.Maybe<T>, System.Exception)", label="Entry CommandLine.Infrastructure.MaybeExtensions.FromJust<T>(CommandLine.Infrastructure.Maybe<T>, System.Exception)", span="137-137"];
n60 [cluster="CommandLine.Infrastructure.MaybeExtensions.FromJust<T>(CommandLine.Infrastructure.Maybe<T>, System.Exception)", label="T value", span="139-139"];
n61 [cluster="CommandLine.Infrastructure.MaybeExtensions.FromJust<T>(CommandLine.Infrastructure.Maybe<T>, System.Exception)", color=red, community=0, label="14: maybe.MatchJust(out value)", span="140-140"];
n63 [cluster="CommandLine.Infrastructure.MaybeExtensions.FromJust<T>(CommandLine.Infrastructure.Maybe<T>, System.Exception)", color=red, community=0, label="1: throw exceptionToThrow ?? new ArgumentException(''Value empty.'');", span="144-144"];
n62 [cluster="CommandLine.Infrastructure.MaybeExtensions.FromJust<T>(CommandLine.Infrastructure.Maybe<T>, System.Exception)", color=red, community=0, label="1: return value;", span="142-142"];
n64 [cluster="CommandLine.Infrastructure.MaybeExtensions.FromJust<T>(CommandLine.Infrastructure.Maybe<T>, System.Exception)", label="Exit CommandLine.Infrastructure.MaybeExtensions.FromJust<T>(CommandLine.Infrastructure.Maybe<T>, System.Exception)", span="137-137"];
n65 [cluster="System.ArgumentException.ArgumentException(string)", label="Entry System.ArgumentException.ArgumentException(string)", span="0-0"];
n66 [cluster="CommandLine.Infrastructure.MaybeExtensions.IsNothing<T>(CommandLine.Infrastructure.Maybe<T>)", label="Entry CommandLine.Infrastructure.MaybeExtensions.IsNothing<T>(CommandLine.Infrastructure.Maybe<T>)", span="147-147"];
n67 [cluster="CommandLine.Infrastructure.MaybeExtensions.IsNothing<T>(CommandLine.Infrastructure.Maybe<T>)", label="return maybe.Tag == MaybeType.Nothing;", span="149-149"];
n68 [cluster="CommandLine.Infrastructure.MaybeExtensions.IsNothing<T>(CommandLine.Infrastructure.Maybe<T>)", label="Exit CommandLine.Infrastructure.MaybeExtensions.IsNothing<T>(CommandLine.Infrastructure.Maybe<T>)", span="147-147"];
n69 [cluster="CommandLine.Infrastructure.MaybeExtensions.IsJust<T>(CommandLine.Infrastructure.Maybe<T>)", label="Entry CommandLine.Infrastructure.MaybeExtensions.IsJust<T>(CommandLine.Infrastructure.Maybe<T>)", span="152-152"];
n70 [cluster="CommandLine.Infrastructure.MaybeExtensions.IsJust<T>(CommandLine.Infrastructure.Maybe<T>)", label="return maybe.Tag == MaybeType.Just;", span="154-154"];
n71 [cluster="CommandLine.Infrastructure.MaybeExtensions.IsJust<T>(CommandLine.Infrastructure.Maybe<T>)", label="Exit CommandLine.Infrastructure.MaybeExtensions.IsJust<T>(CommandLine.Infrastructure.Maybe<T>)", span="152-152"];
d5 [cluster="lambda expression", color=green, community=0, label="4: ''Required.''", span="63-63"];
d4 [cluster="lambda expression", label="Entry lambda expression", span="63-63"];
d6 [cluster="lambda expression", label="Exit lambda expression", span="63-63"];
d42 [cluster="lambda expression", color=green, community=0, label="19: var bySet = from e in errors\r\n                                group e by e.SetName into g\r\n                                select new { SetName = g.Key, Errors = g.ToList() }", span="142-144"];
d41 [cluster="lambda expression", label="Entry lambda expression", span="140-170"];
d43 [cluster="lambda expression", color=green, community=0, label="13: var msgs = bySet.Select(\r\n                            set =>\r\n                            {\r\n                                var names = string.Join(\r\n                                    string.Empty,\r\n                                    (from e in set.Errors select ''''' + e.NameInfo.NameText + ''', '').ToArray());\r\n                                var namesCount = set.Errors.Count();\r\n\r\n                                var incompat = string.Join(\r\n                                    string.Empty,\r\n                                    (from e in set.Errors\r\n                                        where !e.SetName.Equals(set.SetName)\r\n                                        select ''''' + e.NameInfo.NameText + ''', '').ToArray());\r\n                                return\r\n                                    new StringBuilder(''Option'').AppendWhen(namesCount > 1, ''s'')\r\n                                        .Append('': '')\r\n                                        .Append(names.Substring(0, names.Length - 3))\r\n                                        .AppendIf(namesCount > 1, ''are'', ''is'')\r\n                                        .Append('' not compatible with: '')\r\n                                        .Append(incompat.Substring(0, incompat.Length - 3))\r\n                                        .Append('.')\r\n                                        .ToString();\r\n                            }).ToArray()", span="146-168"];
d46 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", span="0-0"];
d44 [cluster="lambda expression", label="return string.Join(Environment.NewLine, msgs);", span="169-169"];
d47 [cluster="Unk.Select", label="Entry Unk.Select", span=""];
d48 [cluster="Unk.ToArray", label="Entry Unk.ToArray", span=""];
d50 [cluster="lambda expression", label="Entry lambda expression", span="147-168"];
d54 [cluster="lambda expression", color=green, community=0, label="0: return\r\n                                    new StringBuilder(''Option'').AppendWhen(namesCount > 1, ''s'')\r\n                                        .Append('': '')\r\n                                        .Append(names.Substring(0, names.Length - 3))\r\n                                        .AppendIf(namesCount > 1, ''are'', ''is'')\r\n                                        .Append('' not compatible with: '')\r\n                                        .Append(incompat.Substring(0, incompat.Length - 3))\r\n                                        .Append('.')\r\n                                        .ToString();", span="159-167"];
d51 [cluster="lambda expression", label="var names = string.Join(\r\n                                    string.Empty,\r\n                                    (from e in set.Errors select ''''' + e.NameInfo.NameText + ''', '').ToArray())", span="149-151"];
d52 [cluster="lambda expression", label="var namesCount = set.Errors.Count()", span="152-152"];
d53 [cluster="lambda expression", label="var incompat = string.Join(\r\n                                    string.Empty,\r\n                                    (from e in set.Errors\r\n                                        where !e.SetName.Equals(set.SetName)\r\n                                        select ''''' + e.NameInfo.NameText + ''', '').ToArray())", span="154-158"];
d55 [cluster="lambda expression", label="Exit lambda expression", span="147-168"];
d58 [cluster="System.Text.StringBuilder.StringBuilder(string)", label="Entry System.Text.StringBuilder.StringBuilder(string)", span="0-0"];
d59 [cluster="System.Text.StringBuilder.AppendWhen(bool, params string[])", label="Entry System.Text.StringBuilder.AppendWhen(bool, params string[])", span="9-9"];
d60 [cluster="System.Text.StringBuilder.Append(string)", label="Entry System.Text.StringBuilder.Append(string)", span="0-0"];
d61 [cluster="string.Substring(int, int)", label="Entry string.Substring(int, int)", span="0-0"];
d62 [cluster="System.Text.StringBuilder.AppendIf(bool, string, string)", label="Entry System.Text.StringBuilder.AppendIf(bool, string, string)", span="42-42"];
d63 [cluster="System.Text.StringBuilder.Append(char)", label="Entry System.Text.StringBuilder.Append(char)", span="0-0"];
d64 [cluster="System.Text.StringBuilder.ToString()", label="Entry System.Text.StringBuilder.ToString()", span="0-0"];
d45 [cluster="lambda expression", label="Exit lambda expression", span="140-170"];
d49 [cluster="Unk.Join", label="Entry Unk.Join", span=""];
d56 [cluster="Unk.Count", label="Entry Unk.Count", span=""];
d57 [cluster="Unk.Equals", label="Entry Unk.Equals", span=""];
n72 -> n1  [color=darkseagreen4, key=1, label="CommandLine.Infrastructure.Maybe<T>", style=dashed];
n72 -> n4  [color=darkseagreen4, key=1, label="CommandLine.Infrastructure.Maybe<T>", style=dashed];
n72 -> n7  [color=darkseagreen4, key=1, label="CommandLine.Infrastructure.Maybe<T>", style=dashed];
n72 -> n8  [color=darkseagreen4, key=1, label="CommandLine.Infrastructure.Maybe<T>", style=dashed];
n73 -> n13  [color=darkseagreen4, key=1, label="CommandLine.Infrastructure.Just<T>", style=dashed];
n74 -> n53  [color=darkseagreen4, key=1, label="System.Func<TSource, CommandLine.Infrastructure.Maybe<TValue>>", style=dashed];
n75 -> n53  [color=darkseagreen4, key=1, label="System.Func<TSource, TValue, TResult>", style=dashed];
n75 -> n56  [color=darkseagreen4, key=1, label="System.Func<TSource, TValue, TResult>", style=dashed];
n76 -> n56  [color=darkseagreen4, key=1, label=TSource, style=dashed];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n2 -> n0  [color=blue, key=0, style=bold];
n3 -> n4  [key=0, style=solid];
n4 -> n5  [key=0, style=solid];
n5 -> n3  [color=blue, key=0, style=bold];
n6 -> n7  [key=0, style=solid];
n7 -> n8  [key=0, style=solid];
n7 -> n9  [color=darkseagreen4, key=1, label="out T", style=dashed];
n8 -> n9  [key=0, style=solid];
n9 -> n6  [color=blue, key=0, style=bold];
n10 -> n11  [key=0, style=solid];
n11 -> n10  [color=blue, key=0, style=bold];
n12 -> n13  [key=0, style=solid];
n13 -> n14  [key=0, style=solid];
n14 -> n12  [color=blue, key=0, style=bold];
n15 -> n16  [key=0, style=solid];
n16 -> n17  [key=0, style=solid];
n16 -> n10  [key=2, style=dotted];
n17 -> n15  [color=blue, key=0, style=bold];
n18 -> n19  [key=0, style=solid];
n19 -> n20  [key=0, style=solid];
n19 -> n12  [key=2, style=dotted];
n20 -> n18  [color=blue, key=0, style=bold];
n21 -> n22  [key=0, style=solid];
n22 -> n23  [key=0, style=solid];
n22 -> n24  [key=2, style=dotted];
n22 -> n15  [key=2, style=dotted];
n22 -> n18  [key=2, style=dotted];
n23 -> n21  [color=blue, key=0, style=bold];
n25 -> n26  [key=0, style=solid];
n25 -> n27  [color=darkseagreen4, key=1, label="CommandLine.Infrastructure.Maybe<T1>", style=dashed];
n26 -> n27  [key=0, style=solid];
n27 -> n28  [key=0, style=solid];
n27 -> n6  [key=2, style=dotted];
n27 -> n29  [key=2, style=dotted];
n27 -> n15  [key=2, style=dotted];
n27 -> n27  [color=darkseagreen4, key=1, label=value1, style=dashed];
n28 -> n25  [color=blue, key=0, style=bold];
n30 -> n31  [key=0, style=solid];
n30 -> n32  [color=darkseagreen4, key=1, label="CommandLine.Infrastructure.Maybe<T1>", style=dashed];
n31 -> n32  [key=0, style=solid];
n32 -> n33  [key=0, style=solid];
n32 -> n6  [key=2, style=dotted];
n32 -> n29  [key=2, style=dotted];
n32 -> n18  [key=2, style=dotted];
n32 -> n15  [key=2, style=dotted];
n32 -> n32  [color=darkseagreen4, key=1, label=value1, style=dashed];
n33 -> n30  [color=blue, key=0, style=bold];
n34 -> n35  [key=0, style=solid];
n34 -> n36  [color=darkseagreen4, key=1, label="CommandLine.Infrastructure.Maybe<T1>", style=dashed];
n35 -> n36  [key=0, style=solid];
n36 -> n37  [key=0, style=solid];
n36 -> n6  [key=2, style=dotted];
n36 -> n29  [key=2, style=dotted];
n36 -> n36  [color=darkseagreen4, key=1, label=value1, style=dashed];
n37 -> n34  [color=blue, key=0, style=bold];
n38 -> n39  [key=0, style=solid];
n38 -> n40  [color=darkseagreen4, key=1, label="CommandLine.Infrastructure.Maybe<T>", style=dashed];
n38 -> n41  [color=darkseagreen4, key=1, label="System.Action<T>", style=dashed];
n39 -> n40  [key=0, style=solid];
n40 -> n41  [key=0, style=solid];
n40 -> n42  [key=0, style=solid];
n40 -> n6  [key=2, style=dotted];
n41 -> n42  [key=0, style=solid];
n41 -> n43  [key=2, style=dotted];
n42 -> n38  [color=blue, key=0, style=bold];
n44 -> n45  [key=0, style=solid];
n45 -> n46  [key=0, style=solid];
n45 -> n47  [key=2, style=dotted];
n46 -> n44  [color=blue, key=0, style=bold];
n48 -> n49  [key=0, style=solid];
n48 -> n53  [color=darkseagreen4, key=1, label="System.Func<TSource, CommandLine.Infrastructure.Maybe<TValue>>", style=dashed];
n48 -> n56  [color=darkseagreen4, key=1, label="System.Func<TSource, TValue, TResult>", style=dashed];
n49 -> n50  [key=0, style=solid];
n49 -> n51  [key=2, style=dotted];
n49 -> n52  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n53 -> n54  [key=0, style=solid];
n53 -> n29  [key=2, style=dotted];
n53 -> n47  [key=2, style=dotted];
n53 -> n55  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n56 -> n57  [key=0, style=solid];
n56 -> n58  [key=2, style=dotted];
n50 -> n48  [color=blue, key=0, style=bold];
n52 -> n53  [key=0, style=solid];
n52 -> n56  [color=darkseagreen4, key=1, label=TSource, style=dashed];
n54 -> n52  [color=blue, key=0, style=bold];
n55 -> n56  [key=0, style=solid];
n57 -> n55  [color=blue, key=0, style=bold];
n59 -> n60  [key=0, style=solid];
n59 -> n61  [color=red, key=1, label="CommandLine.Infrastructure.Maybe<T>", style=dashed];
n59 -> n63  [color=red, key=1, label="System.Exception", style=dashed];
n60 -> n61  [color=red, key=0, style=solid];
n61 -> n62  [color=red, key=0, style=solid];
n61 -> n63  [color=red, key=0, style=solid];
n61 -> n6  [color=red, key=2, style=dotted];
n63 -> n64  [color=red, key=0, style=solid];
n63 -> n65  [color=red, key=2, style=dotted];
n62 -> n64  [color=red, key=0, style=solid];
n64 -> n59  [color=blue, key=0, style=bold];
n66 -> n67  [key=0, style=solid];
n67 -> n68  [key=0, style=solid];
n68 -> n66  [color=blue, key=0, style=bold];
n69 -> n70  [key=0, style=solid];
n70 -> n71  [key=0, style=solid];
n71 -> n69  [color=blue, key=0, style=bold];
d5 -> d6  [color=green, key=0, style=solid];
d4 -> d5  [color=green, key=0, style=solid];
d6 -> d4  [color=blue, key=0, style=bold];
d42 -> d42  [color=green, key=1, label=e, style=dashed];
d42 -> d43  [color=green, key=0, style=solid];
d42 -> d46  [color=green, key=2, style=dotted];
d41 -> d42  [color=green, key=0, style=solid];
d43 -> d44  [color=green, key=0, style=solid];
d43 -> d47  [color=green, key=2, style=dotted];
d43 -> d48  [color=green, key=2, style=dotted];
d43 -> d50  [color=green, key=1, label="lambda expression", style=dashed];
d44 -> d45  [key=0, style=solid];
d44 -> d49  [key=2, style=dotted];
d50 -> d51  [key=0, style=solid];
d50 -> d52  [color=darkseagreen4, key=1, label="?", style=dashed];
d50 -> d53  [color=darkseagreen4, key=1, label="?", style=dashed];
d54 -> d55  [color=green, key=0, style=solid];
d54 -> d58  [color=green, key=2, style=dotted];
d54 -> d59  [color=green, key=2, style=dotted];
d54 -> d60  [color=green, key=2, style=dotted];
d54 -> d61  [color=green, key=2, style=dotted];
d54 -> d62  [color=green, key=2, style=dotted];
d54 -> d63  [color=green, key=2, style=dotted];
d54 -> d64  [color=green, key=2, style=dotted];
d51 -> d54  [color=green, key=1, label=names, style=dashed];
d51 -> d48  [key=2, style=dotted];
d51 -> d51  [color=darkseagreen4, key=1, label=e, style=dashed];
d51 -> d52  [key=0, style=solid];
d51 -> d49  [key=2, style=dotted];
d52 -> d54  [color=green, key=1, label=namesCount, style=dashed];
d52 -> d53  [key=0, style=solid];
d52 -> d56  [key=2, style=dotted];
d53 -> d54  [color=green, key=0, style=solid];
d53 -> d48  [key=2, style=dotted];
d53 -> d53  [color=darkseagreen4, key=1, label=e, style=dashed];
d53 -> d57  [key=2, style=dotted];
d53 -> d49  [key=2, style=dotted];
d55 -> d50  [color=blue, key=0, style=bold];
d62 -> d62  [color=darkorchid, key=3, label="Local variable System.Func<CommandLine.ParserResult<T>> buildUp", style=bold];
d45 -> d41  [color=blue, key=0, style=bold];
}
