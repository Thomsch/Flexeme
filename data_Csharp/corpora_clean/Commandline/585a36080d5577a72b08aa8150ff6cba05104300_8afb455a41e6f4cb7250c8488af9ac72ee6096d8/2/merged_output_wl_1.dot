digraph  {
n665 [label="CommandLine.HelpOptionAttribute", span=""];
n666 [label="CommandLine.OptionAttribute", span=""];
n667 [label="CommandLine.OptionListAttribute", span=""];
n668 [label="CommandLine.ValueListAttribute", span=""];
n669 [label="CommandLine.ArgumentParser", span=""];
n670 [label="CommandLine.BadOptionInfo", span=""];
n671 [label="CommandLine.LongOptionParser", span=""];
n672 [label="CommandLine.OneCharStringEnumerator", span=""];
n673 [label="CommandLine.OptionGroupParser", span=""];
n674 [label="CommandLine.OptionInfo", span=""];
n675 [label="CommandLine.OptionMap.MutuallyExclusiveInfo", span=""];
n676 [label="CommandLine.OptionMap", span=""];
n677 [label="CommandLine.Pair<TLeft, TRight>", span=""];
n678 [label="CommandLine.ParsingError", span=""];
n679 [label="CommandLine.PostParsingState", span=""];
n680 [label="CommandLine.StringArrayEnumerator", span=""];
n681 [label="CommandLine.TargetWrapper", span=""];
n682 [label="CommandLine.CommandLineOptionsBase", span=""];
n683 [label="CommandLine.CommandLineParserSettings", span=""];
n684 [label="CommandLine.CommandLineParser", span=""];
n0 [cluster="CommandLine.HelpOptionAttribute.HelpOptionAttribute()", label="Entry CommandLine.HelpOptionAttribute.HelpOptionAttribute()", span="103-103"];
n1 [cluster="CommandLine.HelpOptionAttribute.HelpOptionAttribute()", label="Exit CommandLine.HelpOptionAttribute.HelpOptionAttribute()", span="103-103"];
n2 [cluster="CommandLine.HelpOptionAttribute.HelpOptionAttribute(string, string)", label="Entry CommandLine.HelpOptionAttribute.HelpOptionAttribute(string, string)", span="114-114"];
n3 [cluster="CommandLine.HelpOptionAttribute.HelpOptionAttribute(string, string)", color=red, community=0, label="0: base.ShortName = shortName", span="116-116"];
n4 [cluster="CommandLine.HelpOptionAttribute.HelpOptionAttribute(string, string)", color=red, community=0, label="0: base.LongName = longName", span="117-117"];
n5 [cluster="CommandLine.HelpOptionAttribute.HelpOptionAttribute(string, string)", label="Exit CommandLine.HelpOptionAttribute.HelpOptionAttribute(string, string)", span="114-114"];
n6 [cluster="CommandLine.HelpOptionAttribute.InvokeMethod(object, CommandLine.Pair<System.Reflection.MethodInfo, CommandLine.HelpOptionAttribute>, out string)", label="Entry CommandLine.HelpOptionAttribute.InvokeMethod(object, CommandLine.Pair<System.Reflection.MethodInfo, CommandLine.HelpOptionAttribute>, out string)", span="131-131"];
n7 [cluster="CommandLine.HelpOptionAttribute.InvokeMethod(object, CommandLine.Pair<System.Reflection.MethodInfo, CommandLine.HelpOptionAttribute>, out string)", color=red, community=0, label="0: text = null", span="134-134"];
n8 [cluster="CommandLine.HelpOptionAttribute.InvokeMethod(object, CommandLine.Pair<System.Reflection.MethodInfo, CommandLine.HelpOptionAttribute>, out string)", color=red, community=0, label="0: var method = pair.Left", span="136-136"];
n11 [cluster="CommandLine.HelpOptionAttribute.InvokeMethod(object, CommandLine.Pair<System.Reflection.MethodInfo, CommandLine.HelpOptionAttribute>, out string)", color=red, community=0, label="0: text = (string)method.Invoke(target, null)", span="140-140"];
n9 [cluster="CommandLine.HelpOptionAttribute.InvokeMethod(object, CommandLine.Pair<System.Reflection.MethodInfo, CommandLine.HelpOptionAttribute>, out string)", color=red, community=0, label="0: !CheckMethodSignature(method)", span="137-137"];
n10 [cluster="CommandLine.HelpOptionAttribute.InvokeMethod(object, CommandLine.Pair<System.Reflection.MethodInfo, CommandLine.HelpOptionAttribute>, out string)", color=red, community=0, label="0: throw new MemberAccessException();", span="138-138"];
n13 [cluster="CommandLine.HelpOptionAttribute.CheckMethodSignature(System.Reflection.MethodInfo)", label="Entry CommandLine.HelpOptionAttribute.CheckMethodSignature(System.Reflection.MethodInfo)", span="143-143"];
n12 [cluster="CommandLine.HelpOptionAttribute.InvokeMethod(object, CommandLine.Pair<System.Reflection.MethodInfo, CommandLine.HelpOptionAttribute>, out string)", label="Exit CommandLine.HelpOptionAttribute.InvokeMethod(object, CommandLine.Pair<System.Reflection.MethodInfo, CommandLine.HelpOptionAttribute>, out string)", span="131-131"];
n14 [cluster="System.MemberAccessException.MemberAccessException()", label="Entry System.MemberAccessException.MemberAccessException()", span="0-0"];
n15 [cluster="System.Reflection.MethodBase.Invoke(object, object[])", label="Entry System.Reflection.MethodBase.Invoke(object, object[])", span="0-0"];
n16 [cluster="CommandLine.HelpOptionAttribute.CheckMethodSignature(System.Reflection.MethodInfo)", color=red, community=0, label="0: return value.ReturnType == typeof(string) && value.GetParameters().Length == 0;", span="145-145"];
n17 [cluster="CommandLine.HelpOptionAttribute.CheckMethodSignature(System.Reflection.MethodInfo)", label="Exit CommandLine.HelpOptionAttribute.CheckMethodSignature(System.Reflection.MethodInfo)", span="143-143"];
n18 [cluster="System.Reflection.MethodBase.GetParameters()", label="Entry System.Reflection.MethodBase.GetParameters()", span="0-0"];
n19 [cluster="CommandLine.OptionArrayAttribute.OptionArrayAttribute(string, string)", label="Entry CommandLine.OptionArrayAttribute.OptionArrayAttribute(string, string)", span="159-159"];
n20 [cluster="CommandLine.OptionArrayAttribute.OptionArrayAttribute(string, string)", label="Exit CommandLine.OptionArrayAttribute.OptionArrayAttribute(string, string)", span="159-159"];
n21 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", label="Entry CommandLine.OptionAttribute.OptionAttribute(string, string)", span="181-181"];
n22 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", color=red, community=0, label="0: !string.IsNullOrEmpty(shortName)", span="183-183"];
n23 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", color=red, community=0, label="0: _uniqueName = shortName", span="184-184"];
n24 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", color=red, community=0, label="0: !string.IsNullOrEmpty(longName)", span="185-185"];
n25 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", color=red, community=0, label="0: _uniqueName = longName", span="186-186"];
n28 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", color=red, community=0, label="0: base.ShortName = shortName", span="191-191"];
n29 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", color=red, community=0, label="0: base.LongName = longName", span="192-192"];
n31 [cluster="string.IsNullOrEmpty(string)", label="Entry string.IsNullOrEmpty(string)", span="0-0"];
n26 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", color=red, community=0, label="0: _uniqueName == null", span="188-188"];
n27 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", color=red, community=0, label="0: throw new InvalidOperationException();", span="189-189"];
n30 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", label="Exit CommandLine.OptionAttribute.OptionAttribute(string, string)", span="181-181"];
n32 [cluster="System.InvalidOperationException.InvalidOperationException()", label="Entry System.InvalidOperationException.InvalidOperationException()", span="0-0"];
n33 [cluster="CommandLine.OptionListAttribute.OptionListAttribute(string, string)", label="Entry CommandLine.OptionListAttribute.OptionListAttribute(string, string)", span="235-235"];
n34 [cluster="CommandLine.OptionListAttribute.OptionListAttribute(string, string)", color=red, community=0, label="0: Separator = ':'", span="238-238"];
n35 [cluster="CommandLine.OptionListAttribute.OptionListAttribute(string, string)", label="Exit CommandLine.OptionListAttribute.OptionListAttribute(string, string)", span="235-235"];
n36 [cluster="CommandLine.OptionListAttribute.OptionListAttribute(string, string, char)", label="Entry CommandLine.OptionListAttribute.OptionListAttribute(string, string, char)", span="247-247"];
n37 [cluster="CommandLine.OptionListAttribute.OptionListAttribute(string, string, char)", color=red, community=0, label="0: Separator = separator", span="250-250"];
n38 [cluster="CommandLine.OptionListAttribute.OptionListAttribute(string, string, char)", label="Exit CommandLine.OptionListAttribute.OptionListAttribute(string, string, char)", span="247-247"];
n39 [cluster="CommandLine.ValueListAttribute.ValueListAttribute()", label="Entry CommandLine.ValueListAttribute.ValueListAttribute()", span="271-271"];
n40 [cluster="CommandLine.ValueListAttribute.ValueListAttribute()", color=red, community=0, label="0: MaximumElements = -1", span="273-273"];
n41 [cluster="CommandLine.ValueListAttribute.ValueListAttribute()", label="Exit CommandLine.ValueListAttribute.ValueListAttribute()", span="271-271"];
n42 [cluster="CommandLine.ValueListAttribute.ValueListAttribute(System.Type)", label="Entry CommandLine.ValueListAttribute.ValueListAttribute(System.Type)", span="281-281"];
n43 [cluster="CommandLine.ValueListAttribute.ValueListAttribute(System.Type)", color=red, community=0, label="0: concreteType == null", span="284-284"];
n45 [cluster="CommandLine.ValueListAttribute.ValueListAttribute(System.Type)", color=red, community=0, label="0: !typeof(IList<string>).IsAssignableFrom(concreteType)", span="287-287"];
n47 [cluster="CommandLine.ValueListAttribute.ValueListAttribute(System.Type)", color=red, community=0, label="0: _concreteType = concreteType", span="290-290"];
n44 [cluster="CommandLine.ValueListAttribute.ValueListAttribute(System.Type)", color=red, community=0, label="0: throw new ArgumentNullException(''concreteType'');", span="285-285"];
n46 [cluster="CommandLine.ValueListAttribute.ValueListAttribute(System.Type)", color=red, community=0, label="0: throw new CommandLineParserException(''The types are incompatible.'');", span="288-288"];
n50 [cluster="System.Type.IsAssignableFrom(System.Type)", label="Entry System.Type.IsAssignableFrom(System.Type)", span="0-0"];
n48 [cluster="CommandLine.ValueListAttribute.ValueListAttribute(System.Type)", label="Exit CommandLine.ValueListAttribute.ValueListAttribute(System.Type)", span="281-281"];
n49 [cluster="System.ArgumentNullException.ArgumentNullException(string)", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
n51 [cluster="CommandLine.CommandLineParserException.CommandLineParserException(string)", label="Entry CommandLine.CommandLineParserException.CommandLineParserException(string)", span="1470-1470"];
n52 [cluster="CommandLine.ValueListAttribute.GetReference(object)", label="Entry CommandLine.ValueListAttribute.GetReference(object)", span="305-305"];
n53 [cluster="CommandLine.ValueListAttribute.GetReference(object)", color=red, community=0, label="0: Type concreteType", span="307-307"];
n54 [cluster="CommandLine.ValueListAttribute.GetReference(object)", color=red, community=0, label="0: var property = GetProperty(target, out concreteType)", span="308-308"];
n57 [cluster="CommandLine.ValueListAttribute.GetReference(object)", color=red, community=0, label="0: property.SetValue(target, Activator.CreateInstance(concreteType), null)", span="313-313"];
n58 [cluster="CommandLine.ValueListAttribute.GetReference(object)", color=red, community=0, label="0: return (IList<string>)property.GetValue(target, null);", span="315-315"];
n55 [cluster="CommandLine.ValueListAttribute.GetReference(object)", color=red, community=0, label="0: property == null || concreteType == null", span="310-310"];
n60 [cluster="CommandLine.ValueListAttribute.GetProperty(object, out System.Type)", label="Entry CommandLine.ValueListAttribute.GetProperty(object, out System.Type)", span="332-332"];
n56 [cluster="CommandLine.ValueListAttribute.GetReference(object)", color=red, community=0, label="0: return null;", span="311-311"];
n61 [cluster="System.Activator.CreateInstance(System.Type)", label="Entry System.Activator.CreateInstance(System.Type)", span="0-0"];
n62 [cluster="System.Reflection.PropertyInfo.SetValue(object, object, object[])", label="Entry System.Reflection.PropertyInfo.SetValue(object, object, object[])", span="0-0"];
n59 [cluster="CommandLine.ValueListAttribute.GetReference(object)", label="Exit CommandLine.ValueListAttribute.GetReference(object)", span="305-305"];
n63 [cluster="System.Reflection.PropertyInfo.GetValue(object, object[])", label="Entry System.Reflection.PropertyInfo.GetValue(object, object[])", span="0-0"];
n64 [cluster="CommandLine.ValueListAttribute.GetAttribute(object)", label="Entry CommandLine.ValueListAttribute.GetAttribute(object)", span="318-318"];
n65 [cluster="CommandLine.ValueListAttribute.GetAttribute(object)", color=red, community=0, label="0: var list = ReflectionUtil.RetrievePropertyList<ValueListAttribute>(target)", span="320-320"];
n66 [cluster="CommandLine.ValueListAttribute.GetAttribute(object)", color=red, community=0, label="0: list == null || list.Count == 0", span="321-321"];
n73 [cluster="CommandLine.ReflectionUtil.RetrievePropertyList<TAttribute>(object)", label="Entry CommandLine.ReflectionUtil.RetrievePropertyList<TAttribute>(object)", span="1760-1760"];
n68 [cluster="CommandLine.ValueListAttribute.GetAttribute(object)", color=red, community=0, label="0: list.Count > 1", span="324-324"];
n70 [cluster="CommandLine.ValueListAttribute.GetAttribute(object)", color=red, community=0, label="0: var pairZero = list[0]", span="327-327"];
n67 [cluster="CommandLine.ValueListAttribute.GetAttribute(object)", color=red, community=0, label="0: return null;", span="322-322"];
n69 [cluster="CommandLine.ValueListAttribute.GetAttribute(object)", color=red, community=0, label="0: throw new InvalidOperationException();", span="325-325"];
n71 [cluster="CommandLine.ValueListAttribute.GetAttribute(object)", color=red, community=0, label="0: return pairZero.Right;", span="329-329"];
n72 [cluster="CommandLine.ValueListAttribute.GetAttribute(object)", label="Exit CommandLine.ValueListAttribute.GetAttribute(object)", span="318-318"];
n74 [cluster="CommandLine.ValueListAttribute.GetProperty(object, out System.Type)", color=red, community=0, label="0: concreteType = null", span="334-334"];
n75 [cluster="CommandLine.ValueListAttribute.GetProperty(object, out System.Type)", color=red, community=0, label="0: var list = ReflectionUtil.RetrievePropertyList<ValueListAttribute>(target)", span="336-336"];
n76 [cluster="CommandLine.ValueListAttribute.GetProperty(object, out System.Type)", color=red, community=0, label="0: list == null || list.Count == 0", span="337-337"];
n78 [cluster="CommandLine.ValueListAttribute.GetProperty(object, out System.Type)", color=red, community=0, label="0: list.Count > 1", span="340-340"];
n80 [cluster="CommandLine.ValueListAttribute.GetProperty(object, out System.Type)", color=red, community=0, label="0: var pairZero = list[0]", span="343-343"];
n77 [cluster="CommandLine.ValueListAttribute.GetProperty(object, out System.Type)", color=red, community=0, label="0: return null;", span="338-338"];
n79 [cluster="CommandLine.ValueListAttribute.GetProperty(object, out System.Type)", color=red, community=0, label="0: throw new InvalidOperationException();", span="341-341"];
n81 [cluster="CommandLine.ValueListAttribute.GetProperty(object, out System.Type)", color=red, community=0, label="0: concreteType = pairZero.Right.ConcreteType", span="344-344"];
n82 [cluster="CommandLine.ValueListAttribute.GetProperty(object, out System.Type)", color=red, community=0, label="0: return pairZero.Left;", span="346-346"];
n83 [cluster="CommandLine.ValueListAttribute.GetProperty(object, out System.Type)", label="Exit CommandLine.ValueListAttribute.GetProperty(object, out System.Type)", span="332-332"];
n84 [cluster="CommandLine.ArgumentParser.ArgumentParser()", label="Entry CommandLine.ArgumentParser.ArgumentParser()", span="362-362"];
n85 [cluster="CommandLine.ArgumentParser.ArgumentParser()", color=red, community=0, label="0: this.PostParsingState = new List<ParsingError>()", span="364-364"];
n86 [cluster="CommandLine.ArgumentParser.ArgumentParser()", label="Exit CommandLine.ArgumentParser.ArgumentParser()", span="362-362"];
n87 [cluster="System.Collections.Generic.List<T>.List()", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
n88 [cluster="CommandLine.ArgumentParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", label="Entry CommandLine.ArgumentParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", span="367-367"];
n89 [cluster="CommandLine.ArgumentParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", label="Exit CommandLine.ArgumentParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", span="367-367"];
n90 [cluster="CommandLine.ArgumentParser.DefineOptionThatViolatesFormat(CommandLine.OptionInfo)", label="Entry CommandLine.ArgumentParser.DefineOptionThatViolatesFormat(CommandLine.OptionInfo)", span="371-371"];
n91 [cluster="CommandLine.ArgumentParser.DefineOptionThatViolatesFormat(CommandLine.OptionInfo)", color=red, community=0, label="0: this.PostParsingState.Add(new ParsingError(option.ShortName, option.LongName, true))", span="375-375"];
n92 [cluster="CommandLine.ArgumentParser.DefineOptionThatViolatesFormat(CommandLine.OptionInfo)", label="Exit CommandLine.ArgumentParser.DefineOptionThatViolatesFormat(CommandLine.OptionInfo)", span="371-371"];
n93 [cluster="CommandLine.ParsingError.ParsingError(string, string, bool)", label="Entry CommandLine.ParsingError.ParsingError(string, string, bool)", span="1219-1219"];
n94 [cluster="System.Collections.Generic.List<T>.Add(T)", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
n95 [cluster="CommandLine.ArgumentParser.Create(string)", label="Entry CommandLine.ArgumentParser.Create(string)", span="378-378"];
n96 [cluster="CommandLine.ArgumentParser.Create(string)", color=red, community=0, label="0: argument.Equals(''-'', StringComparison.InvariantCulture)", span="380-380"];
n98 [cluster="CommandLine.ArgumentParser.Create(string)", color=red, community=0, label="0: argument[0] == '-' && argument[1] == '-'", span="383-383"];
n100 [cluster="CommandLine.ArgumentParser.Create(string)", color=red, community=0, label="0: argument[0] == '-'", span="386-386"];
n97 [cluster="CommandLine.ArgumentParser.Create(string)", color=red, community=0, label="0: return null;", span="381-381"];
n104 [cluster="string.Equals(string, System.StringComparison)", label="Entry string.Equals(string, System.StringComparison)", span="0-0"];
n99 [cluster="CommandLine.ArgumentParser.Create(string)", color=red, community=0, label="0: return new LongOptionParser();", span="384-384"];
n101 [cluster="CommandLine.ArgumentParser.Create(string)", color=red, community=0, label="0: return new OptionGroupParser();", span="387-387"];
n102 [cluster="CommandLine.ArgumentParser.Create(string)", color=red, community=0, label="0: return null;", span="389-389"];
n103 [cluster="CommandLine.ArgumentParser.Create(string)", label="Exit CommandLine.ArgumentParser.Create(string)", span="378-378"];
n105 [cluster="CommandLine.LongOptionParser.LongOptionParser()", label="Entry CommandLine.LongOptionParser.LongOptionParser()", span="517-517"];
n106 [cluster="CommandLine.OptionGroupParser.OptionGroupParser()", label="Entry CommandLine.OptionGroupParser.OptionGroupParser()", span="691-691"];
n107 [cluster="CommandLine.ArgumentParser.IsInputValue(string)", label="Entry CommandLine.ArgumentParser.IsInputValue(string)", span="392-392"];
n108 [cluster="CommandLine.ArgumentParser.IsInputValue(string)", color=red, community=0, label="0: argument.Length > 0", span="394-394"];
n109 [cluster="CommandLine.ArgumentParser.IsInputValue(string)", color=red, community=0, label="0: return argument.Equals(''-'', StringComparison.InvariantCulture) || argument[0] != '-';", span="395-395"];
n110 [cluster="CommandLine.ArgumentParser.IsInputValue(string)", color=red, community=0, label="0: return true;", span="397-397"];
n111 [cluster="CommandLine.ArgumentParser.IsInputValue(string)", label="Exit CommandLine.ArgumentParser.IsInputValue(string)", span="392-392"];
n112 [cluster="CommandLine.ArgumentParser.GetNextInputValues(CommandLine.IArgumentEnumerator)", label="Entry CommandLine.ArgumentParser.GetNextInputValues(CommandLine.IArgumentEnumerator)", span="407-407"];
n113 [cluster="CommandLine.ArgumentParser.GetNextInputValues(CommandLine.IArgumentEnumerator)", color=red, community=0, label="0: IList<string> list = new List<string>()", span="409-409"];
n114 [cluster="CommandLine.ArgumentParser.GetNextInputValues(CommandLine.IArgumentEnumerator)", color=red, community=0, label="0: ae.MoveNext()", span="411-411"];
n115 [cluster="CommandLine.ArgumentParser.GetNextInputValues(CommandLine.IArgumentEnumerator)", color=red, community=0, label="0: IsInputValue(ae.Current)", span="413-413"];
n116 [cluster="CommandLine.ArgumentParser.GetNextInputValues(CommandLine.IArgumentEnumerator)", color=red, community=0, label="0: list.Add(ae.Current)", span="414-414"];
n117 [cluster="CommandLine.ArgumentParser.GetNextInputValues(CommandLine.IArgumentEnumerator)", color=red, community=0, label="0: !ae.MovePrevious()", span="418-418"];
n119 [cluster="CommandLine.ArgumentParser.GetNextInputValues(CommandLine.IArgumentEnumerator)", color=red, community=0, label="0: return list;", span="421-421"];
n121 [cluster="CommandLine.IArgumentEnumerator.MoveNext()", label="Entry CommandLine.IArgumentEnumerator.MoveNext()", span="508-508"];
n122 [cluster="System.Collections.Generic.ICollection<T>.Add(T)", label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0"];
n118 [cluster="CommandLine.ArgumentParser.GetNextInputValues(CommandLine.IArgumentEnumerator)", color=red, community=0, label="0: throw new CommandLineParserException();", span="419-419"];
n123 [cluster="CommandLine.IArgumentEnumerator.MovePrevious()", label="Entry CommandLine.IArgumentEnumerator.MovePrevious()", span="510-510"];
n120 [cluster="CommandLine.ArgumentParser.GetNextInputValues(CommandLine.IArgumentEnumerator)", label="Exit CommandLine.ArgumentParser.GetNextInputValues(CommandLine.IArgumentEnumerator)", span="407-407"];
n124 [cluster="CommandLine.CommandLineParserException.CommandLineParserException()", label="Entry CommandLine.CommandLineParserException.CommandLineParserException()", span="1465-1465"];
n125 [cluster="CommandLine.ArgumentParser.CompareShort(string, string, bool)", label="Entry CommandLine.ArgumentParser.CompareShort(string, string, bool)", span="424-424"];
n126 [cluster="CommandLine.ArgumentParser.CompareShort(string, string, bool)", color=red, community=0, label="0: return string.Compare(argument, ''-'' + option, !caseSensitive) == 0;", span="426-426"];
n127 [cluster="CommandLine.ArgumentParser.CompareShort(string, string, bool)", label="Exit CommandLine.ArgumentParser.CompareShort(string, string, bool)", span="424-424"];
n128 [cluster="string.Compare(string, string, bool)", label="Entry string.Compare(string, string, bool)", span="0-0"];
n129 [cluster="CommandLine.ArgumentParser.CompareLong(string, string, bool)", label="Entry CommandLine.ArgumentParser.CompareLong(string, string, bool)", span="429-429"];
n130 [cluster="CommandLine.ArgumentParser.CompareLong(string, string, bool)", color=red, community=0, label="0: return string.Compare(argument, ''--'' + option, !caseSensitive) == 0;", span="431-431"];
n131 [cluster="CommandLine.ArgumentParser.CompareLong(string, string, bool)", label="Exit CommandLine.ArgumentParser.CompareLong(string, string, bool)", span="429-429"];
n132 [cluster="CommandLine.ArgumentParser.BooleanToParserState(bool)", label="Entry CommandLine.ArgumentParser.BooleanToParserState(bool)", span="434-434"];
n133 [cluster="CommandLine.ArgumentParser.BooleanToParserState(bool)", color=red, community=0, label="0: return BooleanToParserState(value, false);", span="436-436"];
n134 [cluster="CommandLine.ArgumentParser.BooleanToParserState(bool)", label="Exit CommandLine.ArgumentParser.BooleanToParserState(bool)", span="434-434"];
n135 [cluster="CommandLine.ArgumentParser.BooleanToParserState(bool, bool)", label="Entry CommandLine.ArgumentParser.BooleanToParserState(bool, bool)", span="439-439"];
n136 [cluster="CommandLine.ArgumentParser.BooleanToParserState(bool, bool)", color=red, community=0, label="0: value && !addMoveNextIfTrue", span="441-441"];
n138 [cluster="CommandLine.ArgumentParser.BooleanToParserState(bool, bool)", color=red, community=0, label="0: value && addMoveNextIfTrue", span="443-443"];
n137 [cluster="CommandLine.ArgumentParser.BooleanToParserState(bool, bool)", color=red, community=0, label="0: return ParserState.Success;", span="442-442"];
n139 [cluster="CommandLine.ArgumentParser.BooleanToParserState(bool, bool)", color=red, community=0, label="0: return ParserState.Success | ParserState.MoveOnNextElement;", span="444-444"];
n140 [cluster="CommandLine.ArgumentParser.BooleanToParserState(bool, bool)", color=red, community=0, label="0: return ParserState.Failure;", span="446-446"];
n141 [cluster="CommandLine.ArgumentParser.BooleanToParserState(bool, bool)", label="Exit CommandLine.ArgumentParser.BooleanToParserState(bool, bool)", span="439-439"];
n142 [cluster="CommandLine.ArgumentParser.EnsureOptionAttributeIsArrayCompatible(CommandLine.OptionInfo)", label="Entry CommandLine.ArgumentParser.EnsureOptionAttributeIsArrayCompatible(CommandLine.OptionInfo)", span="449-449"];
n143 [cluster="CommandLine.ArgumentParser.EnsureOptionAttributeIsArrayCompatible(CommandLine.OptionInfo)", color=red, community=0, label="0: !option.IsAttributeArrayCompatible", span="451-451"];
n144 [cluster="CommandLine.ArgumentParser.EnsureOptionAttributeIsArrayCompatible(CommandLine.OptionInfo)", color=red, community=0, label="0: throw new CommandLineParserException();", span="452-452"];
n145 [cluster="CommandLine.ArgumentParser.EnsureOptionAttributeIsArrayCompatible(CommandLine.OptionInfo)", label="Exit CommandLine.ArgumentParser.EnsureOptionAttributeIsArrayCompatible(CommandLine.OptionInfo)", span="449-449"];
n146 [cluster="CommandLine.ArgumentParser.EnsureOptionArrayAttributeIsNotBoundToScalar(CommandLine.OptionInfo)", label="Entry CommandLine.ArgumentParser.EnsureOptionArrayAttributeIsNotBoundToScalar(CommandLine.OptionInfo)", span="455-455"];
n147 [cluster="CommandLine.ArgumentParser.EnsureOptionArrayAttributeIsNotBoundToScalar(CommandLine.OptionInfo)", color=red, community=0, label="0: !option.IsArray && option.IsAttributeArrayCompatible", span="457-457"];
n148 [cluster="CommandLine.ArgumentParser.EnsureOptionArrayAttributeIsNotBoundToScalar(CommandLine.OptionInfo)", color=red, community=0, label="0: throw new CommandLineParserException();", span="458-458"];
n149 [cluster="CommandLine.ArgumentParser.EnsureOptionArrayAttributeIsNotBoundToScalar(CommandLine.OptionInfo)", label="Exit CommandLine.ArgumentParser.EnsureOptionArrayAttributeIsNotBoundToScalar(CommandLine.OptionInfo)", span="455-455"];
n150 [cluster="CommandLine.BadOptionInfo.BadOptionInfo()", label="Entry CommandLine.BadOptionInfo.BadOptionInfo()", span="467-467"];
n151 [cluster="CommandLine.BadOptionInfo.BadOptionInfo()", label="Exit CommandLine.BadOptionInfo.BadOptionInfo()", span="467-467"];
n152 [cluster="CommandLine.BadOptionInfo.BadOptionInfo(string, string)", label="Entry CommandLine.BadOptionInfo.BadOptionInfo(string, string)", span="471-471"];
n153 [cluster="CommandLine.BadOptionInfo.BadOptionInfo(string, string)", color=red, community=0, label="0: ShortName = shortName", span="473-473"];
n154 [cluster="CommandLine.BadOptionInfo.BadOptionInfo(string, string)", color=red, community=0, label="0: LongName = longName", span="474-474"];
n155 [cluster="CommandLine.BadOptionInfo.BadOptionInfo(string, string)", label="Exit CommandLine.BadOptionInfo.BadOptionInfo(string, string)", span="471-471"];
n156 [cluster="CommandLine.IArgumentEnumerator.GetRemainingFromNext()", label="Entry CommandLine.IArgumentEnumerator.GetRemainingFromNext()", span="503-503"];
n157 [cluster="CommandLine.IArgumentEnumerator.GetRemainingFromNext()", label="Exit CommandLine.IArgumentEnumerator.GetRemainingFromNext()", span="503-503"];
n158 [cluster="CommandLine.IArgumentEnumerator.MoveNext()", label="Exit CommandLine.IArgumentEnumerator.MoveNext()", span="508-508"];
n159 [cluster="CommandLine.IArgumentEnumerator.MovePrevious()", label="Exit CommandLine.IArgumentEnumerator.MovePrevious()", span="510-510"];
n160 [cluster="CommandLine.LongOptionParser.LongOptionParser()", label="Exit CommandLine.LongOptionParser.LongOptionParser()", span="517-517"];
n161 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", label="Entry CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", span="522-522"];
n162 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: var parts = argumentEnumerator.Current.Substring(2).Split(new char[] { '=' }, 2)", span="524-524"];
n163 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: var option = map[parts[0]]", span="525-525"];
n170 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: parts.Length == 1 && (argumentEnumerator.IsLast || !ArgumentParser.IsInputValue(argumentEnumerator.Next))", span="537-537"];
n174 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: valueSetting = option.SetValue(parts[1], options)", span="544-544"];
n179 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: var items = ArgumentParser.GetNextInputValues(argumentEnumerator)", span="554-554"];
n181 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: valueSetting = option.SetValue(items, options)", span="557-557"];
n186 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: valueSetting = option.SetValue(argumentEnumerator.Next, options)", span="568-568"];
n191 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: var items = ArgumentParser.GetNextInputValues(argumentEnumerator)", span="578-578"];
n192 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: valueSetting = option.SetValue(items, options)", span="580-580"];
n198 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: valueSetting = option.SetValue(true, options)", span="593-593"];
n203 [cluster="string.Substring(int)", label="Entry string.Substring(int)", span="0-0"];
n204 [cluster="string.Split(char[], int)", label="Entry string.Split(char[], int)", span="0-0"];
n172 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: parts.Length == 2", span="540-540"];
n180 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: items.Insert(0, parts[1])", span="555-555"];
n196 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: parts.Length == 2", span="590-590"];
n164 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: var valueSetting = false", span="526-526"];
n165 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: option == null", span="528-528"];
n167 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: option.IsDefined = true", span="531-531"];
n168 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: ArgumentParser.EnsureOptionArrayAttributeIsNotBoundToScalar(option)", span="533-533"];
n169 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: !option.IsBoolean", span="535-535"];
n173 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: !option.IsArray", span="542-542"];
n176 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: this.DefineOptionThatViolatesFormat(option)", span="546-546"];
n178 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: ArgumentParser.EnsureOptionAttributeIsArrayCompatible(option)", span="552-552"];
n183 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: this.DefineOptionThatViolatesFormat(option)", span="559-559"];
n185 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: !option.IsArray", span="566-566"];
n188 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: this.DefineOptionThatViolatesFormat(option)", span="570-570"];
n190 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: ArgumentParser.EnsureOptionAttributeIsArrayCompatible(option)", span="576-576"];
n194 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: this.DefineOptionThatViolatesFormat(option)", span="582-582"];
n200 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: this.DefineOptionThatViolatesFormat(option)", span="595-595"];
n166 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: return ParserState.Failure;", span="529-529"];
n171 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: return ParserState.Failure;", span="538-538"];
n175 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: !valueSetting", span="545-545"];
n205 [cluster="CommandLine.OptionInfo.SetValue(string, object)", label="Entry CommandLine.OptionInfo.SetValue(string, object)", span="839-839"];
n177 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: return ArgumentParser.BooleanToParserState(valueSetting);", span="548-548"];
n206 [cluster="System.Collections.Generic.IList<T>.Insert(int, T)", label="Entry System.Collections.Generic.IList<T>.Insert(int, T)", span="0-0"];
n182 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: !valueSetting", span="558-558"];
n207 [cluster="CommandLine.OptionInfo.SetValue(System.Collections.Generic.IList<string>, object)", label="Entry CommandLine.OptionInfo.SetValue(System.Collections.Generic.IList<string>, object)", span="850-850"];
n184 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: return ArgumentParser.BooleanToParserState(valueSetting);", span="561-561"];
n187 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: !valueSetting", span="569-569"];
n189 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: return ArgumentParser.BooleanToParserState(valueSetting, true);", span="572-572"];
n193 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: !valueSetting", span="581-581"];
n195 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: return ArgumentParser.BooleanToParserState(valueSetting, true);", span="584-584"];
n197 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: return ParserState.Failure;", span="591-591"];
n199 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: !valueSetting", span="594-594"];
n208 [cluster="CommandLine.OptionInfo.SetValue(bool, object)", label="Entry CommandLine.OptionInfo.SetValue(bool, object)", span="930-930"];
n201 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: return ArgumentParser.BooleanToParserState(valueSetting);", span="597-597"];
n202 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", label="Exit CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", span="522-522"];
n209 [cluster="CommandLine.OneCharStringEnumerator.OneCharStringEnumerator(string)", label="Entry CommandLine.OneCharStringEnumerator.OneCharStringEnumerator(string)", span="608-608"];
n210 [cluster="CommandLine.OneCharStringEnumerator.OneCharStringEnumerator(string)", color=red, community=0, label="0: Assumes.NotNullOrEmpty(value, ''value'')", span="610-610"];
n211 [cluster="CommandLine.OneCharStringEnumerator.OneCharStringEnumerator(string)", color=red, community=0, label="0: _data = value", span="612-612"];
n214 [cluster="CommandLine.Assumes.NotNullOrEmpty(string, string)", label="Entry CommandLine.Assumes.NotNullOrEmpty(string, string)", span="1745-1745"];
n212 [cluster="CommandLine.OneCharStringEnumerator.OneCharStringEnumerator(string)", color=red, community=0, label="0: _index = -1", span="613-613"];
n213 [cluster="CommandLine.OneCharStringEnumerator.OneCharStringEnumerator(string)", label="Exit CommandLine.OneCharStringEnumerator.OneCharStringEnumerator(string)", span="608-608"];
n215 [cluster="CommandLine.OneCharStringEnumerator.Reset()", label="Entry CommandLine.OneCharStringEnumerator.Reset()", span="652-652"];
n216 [cluster="CommandLine.OneCharStringEnumerator.Reset()", color=red, community=0, label="0: _index = -1", span="654-654"];
n217 [cluster="CommandLine.OneCharStringEnumerator.Reset()", label="Exit CommandLine.OneCharStringEnumerator.Reset()", span="652-652"];
n218 [cluster="CommandLine.OneCharStringEnumerator.MoveNext()", label="Entry CommandLine.OneCharStringEnumerator.MoveNext()", span="657-657"];
n219 [cluster="CommandLine.OneCharStringEnumerator.MoveNext()", color=red, community=0, label="0: _index < (_data.Length - 1)", span="659-659"];
n220 [cluster="CommandLine.OneCharStringEnumerator.MoveNext()", color=red, community=0, label="0: _index++", span="661-661"];
n223 [cluster="CommandLine.OneCharStringEnumerator.MoveNext()", color=red, community=0, label="0: _index = _data.Length", span="665-665"];
n221 [cluster="CommandLine.OneCharStringEnumerator.MoveNext()", color=red, community=0, label="0: _currentElement = _data.Substring(_index, 1)", span="662-662"];
n222 [cluster="CommandLine.OneCharStringEnumerator.MoveNext()", color=red, community=0, label="0: return true;", span="663-663"];
n226 [cluster="string.Substring(int, int)", label="Entry string.Substring(int, int)", span="0-0"];
n224 [cluster="CommandLine.OneCharStringEnumerator.MoveNext()", color=red, community=0, label="0: return false;", span="667-667"];
n225 [cluster="CommandLine.OneCharStringEnumerator.MoveNext()", label="Exit CommandLine.OneCharStringEnumerator.MoveNext()", span="657-657"];
n227 [cluster="CommandLine.OneCharStringEnumerator.GetRemainingFromNext()", label="Entry CommandLine.OneCharStringEnumerator.GetRemainingFromNext()", span="670-670"];
n228 [cluster="CommandLine.OneCharStringEnumerator.GetRemainingFromNext()", color=red, community=0, label="0: _index == -1", span="672-672"];
n229 [cluster="CommandLine.OneCharStringEnumerator.GetRemainingFromNext()", color=red, community=0, label="0: throw new InvalidOperationException();", span="673-673"];
n230 [cluster="CommandLine.OneCharStringEnumerator.GetRemainingFromNext()", color=red, community=0, label="0: _index > _data.Length", span="675-675"];
n231 [cluster="CommandLine.OneCharStringEnumerator.GetRemainingFromNext()", color=red, community=0, label="0: throw new InvalidOperationException();", span="676-676"];
n232 [cluster="CommandLine.OneCharStringEnumerator.GetRemainingFromNext()", color=red, community=0, label="0: return _data.Substring(_index + 1);", span="678-678"];
n233 [cluster="CommandLine.OneCharStringEnumerator.GetRemainingFromNext()", label="Exit CommandLine.OneCharStringEnumerator.GetRemainingFromNext()", span="670-670"];
n234 [cluster="CommandLine.OneCharStringEnumerator.MovePrevious()", label="Entry CommandLine.OneCharStringEnumerator.MovePrevious()", span="681-681"];
n235 [cluster="CommandLine.OneCharStringEnumerator.MovePrevious()", color=red, community=0, label="0: throw new NotSupportedException();", span="683-683"];
n236 [cluster="CommandLine.OneCharStringEnumerator.MovePrevious()", label="Exit CommandLine.OneCharStringEnumerator.MovePrevious()", span="681-681"];
n237 [cluster="System.NotSupportedException.NotSupportedException()", label="Entry System.NotSupportedException.NotSupportedException()", span="0-0"];
n238 [cluster="CommandLine.OneCharStringEnumerator.System.IDisposable.Dispose()", label="Entry CommandLine.OneCharStringEnumerator.System.IDisposable.Dispose()", span="686-686"];
n239 [cluster="CommandLine.OneCharStringEnumerator.System.IDisposable.Dispose()", label="Exit CommandLine.OneCharStringEnumerator.System.IDisposable.Dispose()", span="686-686"];
n240 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", label="Entry CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", span="693-693"];
n241 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: var valueSetting = false", span="695-695"];
n242 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: IArgumentEnumerator group = new OneCharStringEnumerator(argumentEnumerator.Current.Substring(1))", span="697-697"];
n244 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: var option = map[group.Current]", span="700-700"];
n250 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: argumentEnumerator.IsLast && group.IsLast", span="710-710"];
n254 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: valueSetting = option.SetValue(group.GetRemainingFromNext(), options)", span="717-717"];
n259 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: var items = ArgumentParser.GetNextInputValues(argumentEnumerator)", span="727-727"];
n261 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: valueSetting = option.SetValue(items, options)", span="730-730"];
n265 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: !argumentEnumerator.IsLast && !ArgumentParser.IsInputValue(argumentEnumerator.Next)", span="738-738"];
n268 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: valueSetting = option.SetValue(argumentEnumerator.Next, options)", span="744-744"];
n273 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: var items = ArgumentParser.GetNextInputValues(argumentEnumerator)", span="754-754"];
n274 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: valueSetting = option.SetValue(items, options)", span="756-756"];
n278 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: !group.IsLast && map[group.Next] == null", span="766-766"];
n280 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: !option.SetValue(true, options)", span="769-769"];
n243 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: group.MoveNext()", span="698-698"];
n252 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: !group.IsLast", span="713-713"];
n260 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: items.Insert(0, group.GetRemainingFromNext())", span="728-728"];
n282 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: return ParserState.Success;", span="774-774"];
n245 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: option == null", span="701-701"];
n247 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: option.IsDefined = true", span="704-704"];
n248 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: ArgumentParser.EnsureOptionArrayAttributeIsNotBoundToScalar(option)", span="706-706"];
n249 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: !option.IsBoolean", span="708-708"];
n253 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: !option.IsArray", span="715-715"];
n256 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: this.DefineOptionThatViolatesFormat(option)", span="719-719"];
n258 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: ArgumentParser.EnsureOptionAttributeIsArrayCompatible(option)", span="725-725"];
n263 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: this.DefineOptionThatViolatesFormat(option)", span="732-732"];
n267 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: !option.IsArray", span="742-742"];
n270 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: this.DefineOptionThatViolatesFormat(option)", span="746-746"];
n272 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: ArgumentParser.EnsureOptionAttributeIsArrayCompatible(option)", span="752-752"];
n276 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: this.DefineOptionThatViolatesFormat(option)", span="758-758"];
n246 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: return ParserState.Failure;", span="702-702"];
n251 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: return ParserState.Failure;", span="711-711"];
n255 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: !valueSetting", span="718-718"];
n257 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: return ArgumentParser.BooleanToParserState(valueSetting);", span="721-721"];
n262 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: !valueSetting", span="731-731"];
n264 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: return ArgumentParser.BooleanToParserState(valueSetting, true);", span="734-734"];
n266 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: return ParserState.Failure;", span="739-739"];
n269 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: !valueSetting", span="745-745"];
n271 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: return ArgumentParser.BooleanToParserState(valueSetting, true);", span="748-748"];
n275 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: !valueSetting", span="757-757"];
n277 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: return ArgumentParser.BooleanToParserState(valueSetting);", span="760-760"];
n279 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: return ParserState.Failure;", span="767-767"];
n281 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=red, community=0, label="0: return ParserState.Failure;", span="770-770"];
n283 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", label="Exit CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", span="693-693"];
n284 [cluster="CommandLine.OptionInfo.OptionInfo(CommandLine.OptionAttribute, System.Reflection.PropertyInfo)", label="Entry CommandLine.OptionInfo.OptionInfo(CommandLine.OptionAttribute, System.Reflection.PropertyInfo)", span="790-790"];
n285 [cluster="CommandLine.OptionInfo.OptionInfo(CommandLine.OptionAttribute, System.Reflection.PropertyInfo)", color=red, community=0, label="0: attribute != null", span="792-792"];
n286 [cluster="CommandLine.OptionInfo.OptionInfo(CommandLine.OptionAttribute, System.Reflection.PropertyInfo)", color=red, community=0, label="0: _required = attribute.Required", span="794-794"];
n287 [cluster="CommandLine.OptionInfo.OptionInfo(CommandLine.OptionAttribute, System.Reflection.PropertyInfo)", color=red, community=0, label="0: _helpText = attribute.HelpText", span="795-795"];
n288 [cluster="CommandLine.OptionInfo.OptionInfo(CommandLine.OptionAttribute, System.Reflection.PropertyInfo)", color=red, community=0, label="0: _shortName = attribute.ShortName", span="796-796"];
n289 [cluster="CommandLine.OptionInfo.OptionInfo(CommandLine.OptionAttribute, System.Reflection.PropertyInfo)", color=red, community=0, label="0: _longName = attribute.LongName", span="797-797"];
n290 [cluster="CommandLine.OptionInfo.OptionInfo(CommandLine.OptionAttribute, System.Reflection.PropertyInfo)", color=red, community=0, label="0: _mutuallyExclusiveSet = attribute.MutuallyExclusiveSet", span="798-798"];
n291 [cluster="CommandLine.OptionInfo.OptionInfo(CommandLine.OptionAttribute, System.Reflection.PropertyInfo)", color=red, community=0, label="0: _attribute = attribute", span="799-799"];
n293 [cluster="CommandLine.OptionInfo.OptionInfo(CommandLine.OptionAttribute, System.Reflection.PropertyInfo)", color=red, community=0, label="0: property != null", span="804-804"];
n294 [cluster="CommandLine.OptionInfo.OptionInfo(CommandLine.OptionAttribute, System.Reflection.PropertyInfo)", color=red, community=0, label="0: _property = property", span="805-805"];
n292 [cluster="CommandLine.OptionInfo.OptionInfo(CommandLine.OptionAttribute, System.Reflection.PropertyInfo)", color=red, community=0, label="0: throw new ArgumentNullException(''attribute'', ''The attribute is mandatory'');", span="802-802"];
n295 [cluster="CommandLine.OptionInfo.OptionInfo(CommandLine.OptionAttribute, System.Reflection.PropertyInfo)", color=red, community=0, label="0: throw new ArgumentNullException(''property'', ''The property is mandatory'');", span="807-807"];
n296 [cluster="CommandLine.OptionInfo.OptionInfo(CommandLine.OptionAttribute, System.Reflection.PropertyInfo)", label="Exit CommandLine.OptionInfo.OptionInfo(CommandLine.OptionAttribute, System.Reflection.PropertyInfo)", span="790-790"];
n297 [cluster="System.ArgumentNullException.ArgumentNullException(string, string)", label="Entry System.ArgumentNullException.ArgumentNullException(string, string)", span="0-0"];
n298 [cluster="CommandLine.OptionInfo.CreateMap(object, CommandLine.CommandLineParserSettings)", label="Entry CommandLine.OptionInfo.CreateMap(object, CommandLine.CommandLineParserSettings)", span="818-818"];
n299 [cluster="CommandLine.OptionInfo.CreateMap(object, CommandLine.CommandLineParserSettings)", color=red, community=0, label="0: var list = ReflectionUtil.RetrievePropertyList<OptionAttribute>(target)", span="820-820"];
n301 [cluster="CommandLine.OptionInfo.CreateMap(object, CommandLine.CommandLineParserSettings)", color=red, community=0, label="0: var map = new OptionMap(list.Count, settings)", span="823-823"];
n305 [cluster="CommandLine.OptionInfo.CreateMap(object, CommandLine.CommandLineParserSettings)", color=red, community=0, label="0: map.RawOptions = target", span="831-831"];
n300 [cluster="CommandLine.OptionInfo.CreateMap(object, CommandLine.CommandLineParserSettings)", color=red, community=0, label="0: list != null", span="821-821"];
n302 [cluster="CommandLine.OptionInfo.CreateMap(object, CommandLine.CommandLineParserSettings)", color=red, community=0, label="0: list", span="825-825"];
n307 [cluster="CommandLine.OptionInfo.CreateMap(object, CommandLine.CommandLineParserSettings)", color=red, community=0, label="0: return null;", span="836-836"];
n309 [cluster="CommandLine.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", label="Entry CommandLine.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", span="1043-1043"];
n304 [cluster="CommandLine.OptionInfo.CreateMap(object, CommandLine.CommandLineParserSettings)", color=red, community=0, label="0: map[pair.Right.UniqueName] = new OptionInfo(pair.Right, pair.Left)", span="828-828"];
n306 [cluster="CommandLine.OptionInfo.CreateMap(object, CommandLine.CommandLineParserSettings)", color=red, community=0, label="0: return map;", span="833-833"];
n303 [cluster="CommandLine.OptionInfo.CreateMap(object, CommandLine.CommandLineParserSettings)", color=red, community=0, label="0: pair != null && pair.Right != null", span="827-827"];
n308 [cluster="CommandLine.OptionInfo.CreateMap(object, CommandLine.CommandLineParserSettings)", label="Exit CommandLine.OptionInfo.CreateMap(object, CommandLine.CommandLineParserSettings)", span="818-818"];
n310 [cluster="CommandLine.OptionInfo.SetValue(string, object)", color=red, community=0, label="0: _attribute is OptionListAttribute", span="841-841"];
n311 [cluster="CommandLine.OptionInfo.SetValue(string, object)", color=red, community=0, label="0: return SetValueList(value, options);", span="842-842"];
n313 [cluster="CommandLine.OptionInfo.SetValue(string, object)", color=red, community=0, label="0: return SetNullableValue(value, options);", span="845-845"];
n314 [cluster="CommandLine.OptionInfo.SetValue(string, object)", color=red, community=0, label="0: return SetValueScalar(value, options);", span="847-847"];
n312 [cluster="CommandLine.OptionInfo.SetValue(string, object)", color=red, community=0, label="0: ReflectionUtil.IsNullableType(_property.PropertyType)", span="844-844"];
n317 [cluster="CommandLine.ReflectionUtil.IsNullableType(System.Type)", label="Entry CommandLine.ReflectionUtil.IsNullableType(System.Type)", span="1847-1847"];
n315 [cluster="CommandLine.OptionInfo.SetValue(string, object)", label="Exit CommandLine.OptionInfo.SetValue(string, object)", span="839-839"];
n319 [cluster="CommandLine.OptionInfo.SetValueScalar(string, object)", label="Entry CommandLine.OptionInfo.SetValueScalar(string, object)", span="874-874"];
n316 [cluster="CommandLine.OptionInfo.SetValueList(string, object)", label="Entry CommandLine.OptionInfo.SetValueList(string, object)", span="940-940"];
n318 [cluster="CommandLine.OptionInfo.SetNullableValue(string, object)", label="Entry CommandLine.OptionInfo.SetNullableValue(string, object)", span="909-909"];
n320 [cluster="CommandLine.OptionInfo.SetValue(System.Collections.Generic.IList<string>, object)", color=red, community=0, label="0: Type elementType = _property.PropertyType.GetElementType()", span="852-852"];
n321 [cluster="CommandLine.OptionInfo.SetValue(System.Collections.Generic.IList<string>, object)", color=red, community=0, label="0: Array array = Array.CreateInstance(elementType, values.Count)", span="853-853"];
n325 [cluster="CommandLine.OptionInfo.SetValue(System.Collections.Generic.IList<string>, object)", color=red, community=0, label="0: array.SetValue(Convert.ChangeType(values[i], elementType, CultureInfo.InvariantCulture), i)", span="861-861"];
n326 [cluster="CommandLine.OptionInfo.SetValue(System.Collections.Generic.IList<string>, object)", color=red, community=0, label="0: _property.SetValue(options, array, null)", span="862-862"];
n332 [cluster="System.Type.GetElementType()", label="Entry System.Type.GetElementType()", span="0-0"];
n322 [cluster="CommandLine.OptionInfo.SetValue(System.Collections.Generic.IList<string>, object)", color=red, community=0, label="1: int i = 0", span="855-855"];
n333 [cluster="System.Array.CreateInstance(System.Type, int)", label="Entry System.Array.CreateInstance(System.Type, int)", span="0-0"];
n323 [cluster="CommandLine.OptionInfo.SetValue(System.Collections.Generic.IList<string>, object)", color=red, community=0, label="0: i < array.Length", span="855-855"];
n329 [cluster="CommandLine.OptionInfo.SetValue(System.Collections.Generic.IList<string>, object)", color=red, community=0, label="0: i++", span="855-855"];
n324 [cluster="CommandLine.OptionInfo.SetValue(System.Collections.Generic.IList<string>, object)", color=red, community=0, label="0: _setValueLock", span="859-859"];
n330 [cluster="CommandLine.OptionInfo.SetValue(System.Collections.Generic.IList<string>, object)", color=red, community=0, label="0: return true;", span="871-871"];
n334 [cluster="System.Convert.ChangeType(object, System.Type, System.IFormatProvider)", label="Entry System.Convert.ChangeType(object, System.Type, System.IFormatProvider)", span="0-0"];
n335 [cluster="System.Array.SetValue(object, int)", label="Entry System.Array.SetValue(object, int)", span="0-0"];
n327 [cluster="CommandLine.OptionInfo.SetValue(System.Collections.Generic.IList<string>, object)", color=red, community=0, label="0: FormatException", span="865-865"];
n328 [cluster="CommandLine.OptionInfo.SetValue(System.Collections.Generic.IList<string>, object)", color=red, community=0, label="0: return false;", span="867-867"];
n331 [cluster="CommandLine.OptionInfo.SetValue(System.Collections.Generic.IList<string>, object)", label="Exit CommandLine.OptionInfo.SetValue(System.Collections.Generic.IList<string>, object)", span="850-850"];
n336 [cluster="CommandLine.OptionInfo.SetValueScalar(string, object)", color=red, community=0, label="0: _property.PropertyType.IsEnum", span="878-878"];
n338 [cluster="CommandLine.OptionInfo.SetValueScalar(string, object)", color=red, community=0, label="0: _property.SetValue(options, Enum.Parse(_property.PropertyType, value, true), null)", span="882-882"];
n340 [cluster="CommandLine.OptionInfo.SetValueScalar(string, object)", color=red, community=0, label="0: _property.SetValue(options, Convert.ChangeType(value, _property.PropertyType, CultureInfo.InvariantCulture), null)", span="889-889"];
n337 [cluster="CommandLine.OptionInfo.SetValueScalar(string, object)", color=red, community=0, label="0: _setValueLock", span="880-880"];
n339 [cluster="CommandLine.OptionInfo.SetValueScalar(string, object)", color=red, community=0, label="0: _setValueLock", span="887-887"];
n341 [cluster="CommandLine.OptionInfo.SetValueScalar(string, object)", color=red, community=0, label="0: InvalidCastException", span="893-893"];
n343 [cluster="CommandLine.OptionInfo.SetValueScalar(string, object)", color=red, community=0, label="0: FormatException", span="897-897"];
n345 [cluster="CommandLine.OptionInfo.SetValueScalar(string, object)", color=red, community=0, label="0: ArgumentException", span="901-901"];
n347 [cluster="CommandLine.OptionInfo.SetValueScalar(string, object)", color=red, community=0, label="0: return true;", span="906-906"];
n349 [cluster="System.Enum.Parse(System.Type, string, bool)", label="Entry System.Enum.Parse(System.Type, string, bool)", span="0-0"];
n342 [cluster="CommandLine.OptionInfo.SetValueScalar(string, object)", color=red, community=0, label="0: return false;", span="895-895"];
n344 [cluster="CommandLine.OptionInfo.SetValueScalar(string, object)", color=red, community=0, label="0: return false;", span="899-899"];
n346 [cluster="CommandLine.OptionInfo.SetValueScalar(string, object)", color=red, community=0, label="0: return false;", span="903-903"];
n348 [cluster="CommandLine.OptionInfo.SetValueScalar(string, object)", label="Exit CommandLine.OptionInfo.SetValueScalar(string, object)", span="874-874"];
n350 [cluster="CommandLine.OptionInfo.SetNullableValue(string, object)", color=red, community=0, label="0: var nc = new NullableConverter(_property.PropertyType)", span="911-911"];
n352 [cluster="CommandLine.OptionInfo.SetNullableValue(string, object)", color=red, community=0, label="0: _property.SetValue(options, nc.ConvertFromString(null, CultureInfo.InvariantCulture, value), null)", span="917-917"];
n351 [cluster="CommandLine.OptionInfo.SetNullableValue(string, object)", color=red, community=0, label="0: _setValueLock", span="915-915"];
n357 [cluster="System.ComponentModel.NullableConverter.NullableConverter(System.Type)", label="Entry System.ComponentModel.NullableConverter.NullableConverter(System.Type)", span="0-0"];
n353 [cluster="CommandLine.OptionInfo.SetNullableValue(string, object)", color=red, community=1, label="0: Exception", span="922-922"];
n355 [cluster="CommandLine.OptionInfo.SetNullableValue(string, object)", color=red, community=0, label="0: return true;", span="927-927"];
n358 [cluster="System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, string)", label="Entry System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, string)", span="0-0"];
n354 [cluster="CommandLine.OptionInfo.SetNullableValue(string, object)", color=red, community=0, label="0: return false;", span="924-924"];
n356 [cluster="CommandLine.OptionInfo.SetNullableValue(string, object)", label="Exit CommandLine.OptionInfo.SetNullableValue(string, object)", span="909-909"];
n359 [cluster="CommandLine.OptionInfo.SetValue(bool, object)", color=red, community=0, label="0: _setValueLock", span="932-932"];
n360 [cluster="CommandLine.OptionInfo.SetValue(bool, object)", color=red, community=0, label="0: _property.SetValue(options, value, null)", span="934-934"];
n361 [cluster="CommandLine.OptionInfo.SetValue(bool, object)", color=red, community=0, label="0: return true;", span="936-936"];
n362 [cluster="CommandLine.OptionInfo.SetValue(bool, object)", label="Exit CommandLine.OptionInfo.SetValue(bool, object)", span="930-930"];
n363 [cluster="CommandLine.OptionInfo.SetValueList(string, object)", color=red, community=0, label="0: _setValueLock", span="942-942"];
n364 [cluster="CommandLine.OptionInfo.SetValueList(string, object)", color=red, community=0, label="0: _property.SetValue(options, new List<string>(), null)", span="944-944"];
n365 [cluster="CommandLine.OptionInfo.SetValueList(string, object)", color=red, community=0, label="0: var fieldRef = (IList<string>)_property.GetValue(options, null)", span="946-946"];
n366 [cluster="CommandLine.OptionInfo.SetValueList(string, object)", color=red, community=0, label="0: var values = value.Split(((OptionListAttribute)_attribute).Separator)", span="947-947"];
n369 [cluster="CommandLine.OptionInfo.SetValueList(string, object)", color=red, community=0, label="0: fieldRef.Add(values[i])", span="951-951"];
n367 [cluster="CommandLine.OptionInfo.SetValueList(string, object)", color=red, community=0, label="1: int i = 0", span="949-949"];
n373 [cluster="string.Split(params char[])", label="Entry string.Split(params char[])", span="0-0"];
n368 [cluster="CommandLine.OptionInfo.SetValueList(string, object)", color=red, community=0, label="0: i < values.Length", span="949-949"];
n370 [cluster="CommandLine.OptionInfo.SetValueList(string, object)", color=red, community=0, label="0: i++", span="949-949"];
n371 [cluster="CommandLine.OptionInfo.SetValueList(string, object)", color=red, community=0, label="0: return true;", span="954-954"];
n372 [cluster="CommandLine.OptionInfo.SetValueList(string, object)", label="Exit CommandLine.OptionInfo.SetValueList(string, object)", span="940-940"];
n374 [cluster="CommandLine.OptionMap.MutuallyExclusiveInfo.MutuallyExclusiveInfo(CommandLine.OptionInfo)", label="Entry CommandLine.OptionMap.MutuallyExclusiveInfo.MutuallyExclusiveInfo(CommandLine.OptionInfo)", span="1023-1023"];
n375 [cluster="CommandLine.OptionMap.MutuallyExclusiveInfo.MutuallyExclusiveInfo(CommandLine.OptionInfo)", color=red, community=0, label="0: BadOption = option", span="1026-1026"];
n376 [cluster="CommandLine.OptionMap.MutuallyExclusiveInfo.MutuallyExclusiveInfo(CommandLine.OptionInfo)", label="Exit CommandLine.OptionMap.MutuallyExclusiveInfo.MutuallyExclusiveInfo(CommandLine.OptionInfo)", span="1023-1023"];
n377 [cluster="CommandLine.OptionMap.MutuallyExclusiveInfo.IncrementOccurrence()", label="Entry CommandLine.OptionMap.MutuallyExclusiveInfo.IncrementOccurrence()", span="1032-1032"];
n378 [cluster="CommandLine.OptionMap.MutuallyExclusiveInfo.IncrementOccurrence()", color=red, community=0, label="0: ++count", span="1032-1032"];
n379 [cluster="CommandLine.OptionMap.MutuallyExclusiveInfo.IncrementOccurrence()", label="Exit CommandLine.OptionMap.MutuallyExclusiveInfo.IncrementOccurrence()", span="1032-1032"];
n380 [cluster="CommandLine.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", color=red, community=0, label="0: _settings = settings", span="1045-1045"];
n385 [cluster="CommandLine.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", color=red, community=0, label="0: _names = new Dictionary<string, string>(capacity, comparer)", span="1053-1053"];
n386 [cluster="CommandLine.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", color=red, community=0, label="0: _map = new Dictionary<string, OptionInfo>(capacity * 2, comparer)", span="1054-1054"];
n388 [cluster="CommandLine.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", color=red, community=0, label="0: _mutuallyExclusiveSetMap = new Dictionary<string, MutuallyExclusiveInfo>(capacity, StringComparer.OrdinalIgnoreCase)", span="1059-1059"];
n381 [cluster="CommandLine.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", color=red, community=0, label="0: IEqualityComparer<string> comparer", span="1047-1047"];
n382 [cluster="CommandLine.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", color=red, community=0, label="0: _settings.CaseSensitive", span="1048-1048"];
n383 [cluster="CommandLine.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", color=red, community=0, label="0: comparer = StringComparer.Ordinal", span="1049-1049"];
n384 [cluster="CommandLine.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", color=red, community=0, label="0: comparer = StringComparer.OrdinalIgnoreCase", span="1051-1051"];
n390 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(int, System.Collections.Generic.IEqualityComparer<TKey>)", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(int, System.Collections.Generic.IEqualityComparer<TKey>)", span="0-0"];
n387 [cluster="CommandLine.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", color=red, community=0, label="0: _settings.MutuallyExclusive", span="1056-1056"];
n389 [cluster="CommandLine.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", label="Exit CommandLine.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", span="1043-1043"];
n391 [cluster="CommandLine.OptionMap.EnforceRules()", label="Entry CommandLine.OptionMap.EnforceRules()", span="1094-1094"];
n392 [cluster="CommandLine.OptionMap.EnforceRules()", color=red, community=0, label="0: return EnforceMutuallyExclusiveMap() && EnforceRequiredRule();", span="1096-1096"];
n393 [cluster="CommandLine.OptionMap.EnforceRules()", label="Exit CommandLine.OptionMap.EnforceRules()", span="1094-1094"];
n394 [cluster="CommandLine.OptionMap.EnforceMutuallyExclusiveMap()", label="Entry CommandLine.OptionMap.EnforceMutuallyExclusiveMap()", span="1112-1112"];
n395 [cluster="CommandLine.OptionMap.EnforceRequiredRule()", label="Entry CommandLine.OptionMap.EnforceRequiredRule()", span="1099-1099"];
n396 [cluster="CommandLine.OptionMap.EnforceRequiredRule()", color=red, community=0, label="0: _map.Values", span="1101-1101"];
n397 [cluster="CommandLine.OptionMap.EnforceRequiredRule()", color=red, community=0, label="0: option.Required && !option.IsDefined", span="1103-1103"];
n400 [cluster="CommandLine.OptionMap.EnforceRequiredRule()", color=red, community=0, label="0: return true;", span="1109-1109"];
n398 [cluster="CommandLine.OptionMap.EnforceRequiredRule()", color=red, community=0, label="0: BuildAndSetPostParsingStateIfNeeded(this.RawOptions, option, true, null)", span="1105-1105"];
n399 [cluster="CommandLine.OptionMap.EnforceRequiredRule()", color=red, community=0, label="0: return false;", span="1106-1106"];
n402 [cluster="CommandLine.OptionMap.BuildAndSetPostParsingStateIfNeeded(object, CommandLine.OptionInfo, bool?, bool?)", label="Entry CommandLine.OptionMap.BuildAndSetPostParsingStateIfNeeded(object, CommandLine.OptionInfo, bool?, bool?)", span="1151-1151"];
n401 [cluster="CommandLine.OptionMap.EnforceRequiredRule()", label="Exit CommandLine.OptionMap.EnforceRequiredRule()", span="1099-1099"];
n403 [cluster="CommandLine.OptionMap.EnforceMutuallyExclusiveMap()", color=red, community=0, label="0: !_settings.MutuallyExclusive", span="1114-1114"];
n404 [cluster="CommandLine.OptionMap.EnforceMutuallyExclusiveMap()", color=red, community=0, label="0: return true;", span="1115-1115"];
n405 [cluster="CommandLine.OptionMap.EnforceMutuallyExclusiveMap()", color=red, community=0, label="0: _map.Values", span="1117-1117"];
n406 [cluster="CommandLine.OptionMap.EnforceMutuallyExclusiveMap()", color=red, community=0, label="0: option.IsDefined && option.MutuallyExclusiveSet != null", span="1119-1119"];
n408 [cluster="CommandLine.OptionMap.EnforceMutuallyExclusiveMap()", color=red, community=1, label="0: _mutuallyExclusiveSetMap.Values", span="1124-1124"];
n407 [cluster="CommandLine.OptionMap.EnforceMutuallyExclusiveMap()", color=red, community=0, label="0: BuildMutuallyExclusiveMap(option)", span="1120-1120"];
n414 [cluster="CommandLine.OptionMap.BuildMutuallyExclusiveMap(CommandLine.OptionInfo)", label="Entry CommandLine.OptionMap.BuildMutuallyExclusiveMap(CommandLine.OptionInfo)", span="1137-1137"];
n409 [cluster="CommandLine.OptionMap.EnforceMutuallyExclusiveMap()", color=red, community=0, label="0: info.Occurrence > 1", span="1126-1126"];
n412 [cluster="CommandLine.OptionMap.EnforceMutuallyExclusiveMap()", color=red, community=0, label="0: return true;", span="1134-1134"];
n410 [cluster="CommandLine.OptionMap.EnforceMutuallyExclusiveMap()", color=red, community=0, label="0: BuildAndSetPostParsingStateIfNeeded(this.RawOptions, info.BadOption, null, true)", span="1129-1129"];
n411 [cluster="CommandLine.OptionMap.EnforceMutuallyExclusiveMap()", color=red, community=0, label="0: return false;", span="1130-1130"];
n413 [cluster="CommandLine.OptionMap.EnforceMutuallyExclusiveMap()", label="Exit CommandLine.OptionMap.EnforceMutuallyExclusiveMap()", span="1112-1112"];
n415 [cluster="CommandLine.OptionMap.BuildMutuallyExclusiveMap(CommandLine.OptionInfo)", color=red, community=0, label="0: var setName = option.MutuallyExclusiveSet", span="1139-1139"];
n417 [cluster="CommandLine.OptionMap.BuildMutuallyExclusiveMap(CommandLine.OptionInfo)", color=red, community=0, label="0: _mutuallyExclusiveSetMap.Add(setName, new MutuallyExclusiveInfo(option))", span="1144-1144"];
n416 [cluster="CommandLine.OptionMap.BuildMutuallyExclusiveMap(CommandLine.OptionInfo)", color=red, community=0, label="0: !_mutuallyExclusiveSetMap.ContainsKey(setName)", span="1141-1141"];
n418 [cluster="CommandLine.OptionMap.BuildMutuallyExclusiveMap(CommandLine.OptionInfo)", color=red, community=0, label="0: _mutuallyExclusiveSetMap[setName].IncrementOccurrence()", span="1148-1148"];
n420 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0"];
n421 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0"];
n419 [cluster="CommandLine.OptionMap.BuildMutuallyExclusiveMap(CommandLine.OptionInfo)", label="Exit CommandLine.OptionMap.BuildMutuallyExclusiveMap(CommandLine.OptionInfo)", span="1137-1137"];
n422 [cluster="CommandLine.OptionMap.BuildAndSetPostParsingStateIfNeeded(object, CommandLine.OptionInfo, bool?, bool?)", color=red, community=0, label="0: options is CommandLineOptionsBase", span="1153-1153"];
n424 [cluster="CommandLine.OptionMap.BuildAndSetPostParsingStateIfNeeded(object, CommandLine.OptionInfo, bool?, bool?)", color=red, community=0, label="0: error.BadOption.ShortName = option.ShortName", span="1158-1158"];
n425 [cluster="CommandLine.OptionMap.BuildAndSetPostParsingStateIfNeeded(object, CommandLine.OptionInfo, bool?, bool?)", color=red, community=0, label="0: error.BadOption.LongName = option.LongName", span="1159-1159"];
n426 [cluster="CommandLine.OptionMap.BuildAndSetPostParsingStateIfNeeded(object, CommandLine.OptionInfo, bool?, bool?)", color=red, community=0, label="0: required != null", span="1161-1161"];
n427 [cluster="CommandLine.OptionMap.BuildAndSetPostParsingStateIfNeeded(object, CommandLine.OptionInfo, bool?, bool?)", color=red, community=0, label="0: error.ViolatesRequired = required.Value", span="1161-1161"];
n428 [cluster="CommandLine.OptionMap.BuildAndSetPostParsingStateIfNeeded(object, CommandLine.OptionInfo, bool?, bool?)", color=red, community=0, label="0: mutualExclusiveness != null", span="1162-1162"];
n429 [cluster="CommandLine.OptionMap.BuildAndSetPostParsingStateIfNeeded(object, CommandLine.OptionInfo, bool?, bool?)", color=red, community=0, label="0: error.ViolatesMutualExclusiveness = mutualExclusiveness.Value", span="1162-1162"];
n430 [cluster="CommandLine.OptionMap.BuildAndSetPostParsingStateIfNeeded(object, CommandLine.OptionInfo, bool?, bool?)", color=red, community=0, label="0: ((CommandLineOptionsBase)options).InternalLastPostParsingState.Errors.Add(error)", span="1164-1164"];
n423 [cluster="CommandLine.OptionMap.BuildAndSetPostParsingStateIfNeeded(object, CommandLine.OptionInfo, bool?, bool?)", color=red, community=0, label="0: ParsingError error = new ParsingError()", span="1155-1155"];
n431 [cluster="CommandLine.OptionMap.BuildAndSetPostParsingStateIfNeeded(object, CommandLine.OptionInfo, bool?, bool?)", label="Exit CommandLine.OptionMap.BuildAndSetPostParsingStateIfNeeded(object, CommandLine.OptionInfo, bool?, bool?)", span="1151-1151"];
n432 [cluster="CommandLine.ParsingError.ParsingError()", label="Entry CommandLine.ParsingError.ParsingError()", span="1214-1214"];
n433 [cluster="CommandLine.Pair<TLeft, TRight>.Pair(TLeft, TRight)", label="Entry CommandLine.Pair<TLeft, TRight>.Pair(TLeft, TRight)", span="1174-1174"];
n434 [cluster="CommandLine.Pair<TLeft, TRight>.Pair(TLeft, TRight)", color=red, community=0, label="0: _left = left", span="1176-1176"];
n435 [cluster="CommandLine.Pair<TLeft, TRight>.Pair(TLeft, TRight)", color=red, community=0, label="0: _right = right", span="1177-1177"];
n436 [cluster="CommandLine.Pair<TLeft, TRight>.Pair(TLeft, TRight)", label="Exit CommandLine.Pair<TLeft, TRight>.Pair(TLeft, TRight)", span="1174-1174"];
n437 [cluster="CommandLine.Pair<TLeft, TRight>.GetHashCode()", label="Entry CommandLine.Pair<TLeft, TRight>.GetHashCode()", span="1190-1190"];
n438 [cluster="CommandLine.Pair<TLeft, TRight>.GetHashCode()", color=red, community=0, label="0: int leftHash = (_left == null ? 0 : _left.GetHashCode())", span="1192-1192"];
n439 [cluster="CommandLine.Pair<TLeft, TRight>.GetHashCode()", color=red, community=0, label="0: int rightHash = (_right == null ? 0 : _right.GetHashCode())", span="1193-1193"];
n442 [cluster="object.GetHashCode()", label="Entry object.GetHashCode()", span="0-0"];
n440 [cluster="CommandLine.Pair<TLeft, TRight>.GetHashCode()", color=red, community=0, label="0: return leftHash ^ rightHash;", span="1195-1195"];
n441 [cluster="CommandLine.Pair<TLeft, TRight>.GetHashCode()", label="Exit CommandLine.Pair<TLeft, TRight>.GetHashCode()", span="1190-1190"];
n443 [cluster="CommandLine.Pair<TLeft, TRight>.Equals(object)", label="Entry CommandLine.Pair<TLeft, TRight>.Equals(object)", span="1198-1198"];
n444 [cluster="CommandLine.Pair<TLeft, TRight>.Equals(object)", color=red, community=0, label="0: var other = obj as Pair<TLeft, TRight>", span="1200-1200"];
n445 [cluster="CommandLine.Pair<TLeft, TRight>.Equals(object)", color=red, community=0, label="0: other == null", span="1202-1202"];
n447 [cluster="CommandLine.Pair<TLeft, TRight>.Equals(object)", color=red, community=0, label="0: return Equals(_left, other._left) && Equals(_right, other._right);", span="1205-1205"];
n446 [cluster="CommandLine.Pair<TLeft, TRight>.Equals(object)", color=red, community=0, label="0: return false;", span="1203-1203"];
n448 [cluster="CommandLine.Pair<TLeft, TRight>.Equals(object)", label="Exit CommandLine.Pair<TLeft, TRight>.Equals(object)", span="1198-1198"];
n449 [cluster="object.Equals(object, object)", label="Entry object.Equals(object, object)", span="0-0"];
n450 [cluster="CommandLine.ParsingError.ParsingError()", color=red, community=0, label="0: this.BadOption = new BadOptionInfo()", span="1216-1216"];
n451 [cluster="CommandLine.ParsingError.ParsingError()", label="Exit CommandLine.ParsingError.ParsingError()", span="1214-1214"];
n452 [cluster="CommandLine.ParsingError.ParsingError(string, string, bool)", color=red, community=0, label="0: this.BadOption = new BadOptionInfo(shortName, longName)", span="1223-1223"];
n453 [cluster="CommandLine.ParsingError.ParsingError(string, string, bool)", color=red, community=0, label="0: this.ViolatesFormat = format", span="1225-1225"];
n454 [cluster="CommandLine.ParsingError.ParsingError(string, string, bool)", label="Exit CommandLine.ParsingError.ParsingError(string, string, bool)", span="1219-1219"];
n455 [cluster="CommandLine.PostParsingState.PostParsingState()", label="Entry CommandLine.PostParsingState.PostParsingState()", span="1267-1267"];
n456 [cluster="CommandLine.PostParsingState.PostParsingState()", color=red, community=0, label="0: Errors = new List<ParsingError>()", span="1269-1269"];
n457 [cluster="CommandLine.PostParsingState.PostParsingState()", label="Exit CommandLine.PostParsingState.PostParsingState()", span="1267-1267"];
n458 [cluster="CommandLine.StringArrayEnumerator.StringArrayEnumerator(string[])", label="Entry CommandLine.StringArrayEnumerator.StringArrayEnumerator(string[])", span="1287-1287"];
n459 [cluster="CommandLine.StringArrayEnumerator.StringArrayEnumerator(string[])", color=red, community=0, label="0: Assumes.NotNull(value, ''value'')", span="1289-1289"];
n460 [cluster="CommandLine.StringArrayEnumerator.StringArrayEnumerator(string[])", color=red, community=0, label="0: _data = value", span="1291-1291"];
n462 [cluster="CommandLine.StringArrayEnumerator.StringArrayEnumerator(string[])", color=red, community=0, label="0: _endIndex = value.Length", span="1293-1293"];
n464 [cluster="CommandLine.Assumes.NotNull<T>(T, string)", label="Entry CommandLine.Assumes.NotNull<T>(T, string)", span="1738-1738"];
n461 [cluster="CommandLine.StringArrayEnumerator.StringArrayEnumerator(string[])", color=red, community=0, label="0: _index = -1", span="1292-1292"];
n463 [cluster="CommandLine.StringArrayEnumerator.StringArrayEnumerator(string[])", label="Exit CommandLine.StringArrayEnumerator.StringArrayEnumerator(string[])", span="1287-1287"];
n465 [cluster="CommandLine.StringArrayEnumerator.Reset()", label="Entry CommandLine.StringArrayEnumerator.Reset()", span="1337-1337"];
n466 [cluster="CommandLine.StringArrayEnumerator.Reset()", color=red, community=0, label="0: _index = -1", span="1339-1339"];
n467 [cluster="CommandLine.StringArrayEnumerator.Reset()", label="Exit CommandLine.StringArrayEnumerator.Reset()", span="1337-1337"];
n468 [cluster="CommandLine.StringArrayEnumerator.MoveNext()", label="Entry CommandLine.StringArrayEnumerator.MoveNext()", span="1342-1342"];
n469 [cluster="CommandLine.StringArrayEnumerator.MoveNext()", color=red, community=0, label="0: _index < _endIndex", span="1344-1344"];
n470 [cluster="CommandLine.StringArrayEnumerator.MoveNext()", color=red, community=0, label="0: _index++", span="1346-1346"];
n472 [cluster="CommandLine.StringArrayEnumerator.MoveNext()", color=red, community=0, label="0: return false;", span="1349-1349"];
n471 [cluster="CommandLine.StringArrayEnumerator.MoveNext()", color=red, community=0, label="0: return _index < _endIndex;", span="1347-1347"];
n473 [cluster="CommandLine.StringArrayEnumerator.MoveNext()", label="Exit CommandLine.StringArrayEnumerator.MoveNext()", span="1342-1342"];
n474 [cluster="CommandLine.StringArrayEnumerator.GetRemainingFromNext()", label="Entry CommandLine.StringArrayEnumerator.GetRemainingFromNext()", span="1352-1352"];
n475 [cluster="CommandLine.StringArrayEnumerator.GetRemainingFromNext()", color=red, community=0, label="0: throw new NotSupportedException();", span="1354-1354"];
n476 [cluster="CommandLine.StringArrayEnumerator.GetRemainingFromNext()", label="Exit CommandLine.StringArrayEnumerator.GetRemainingFromNext()", span="1352-1352"];
n477 [cluster="CommandLine.StringArrayEnumerator.MovePrevious()", label="Entry CommandLine.StringArrayEnumerator.MovePrevious()", span="1357-1357"];
n478 [cluster="CommandLine.StringArrayEnumerator.MovePrevious()", color=red, community=0, label="0: _index <= 0", span="1359-1359"];
n479 [cluster="CommandLine.StringArrayEnumerator.MovePrevious()", color=red, community=0, label="0: throw new InvalidOperationException();", span="1361-1361"];
n480 [cluster="CommandLine.StringArrayEnumerator.MovePrevious()", color=red, community=0, label="0: _index <= _endIndex", span="1363-1363"];
n481 [cluster="CommandLine.StringArrayEnumerator.MovePrevious()", color=red, community=0, label="0: _index--", span="1365-1365"];
n483 [cluster="CommandLine.StringArrayEnumerator.MovePrevious()", color=red, community=0, label="0: return false;", span="1368-1368"];
n482 [cluster="CommandLine.StringArrayEnumerator.MovePrevious()", color=red, community=0, label="0: return _index <= _endIndex;", span="1366-1366"];
n484 [cluster="CommandLine.StringArrayEnumerator.MovePrevious()", label="Exit CommandLine.StringArrayEnumerator.MovePrevious()", span="1357-1357"];
n485 [cluster="CommandLine.StringArrayEnumerator.System.IDisposable.Dispose()", label="Entry CommandLine.StringArrayEnumerator.System.IDisposable.Dispose()", span="1371-1371"];
n486 [cluster="CommandLine.StringArrayEnumerator.System.IDisposable.Dispose()", label="Exit CommandLine.StringArrayEnumerator.System.IDisposable.Dispose()", span="1371-1371"];
n487 [cluster="CommandLine.TargetWrapper.TargetWrapper(object)", label="Entry CommandLine.TargetWrapper.TargetWrapper(object)", span="1382-1382"];
n488 [cluster="CommandLine.TargetWrapper.TargetWrapper(object)", color=red, community=0, label="0: _target = target", span="1384-1384"];
n489 [cluster="CommandLine.TargetWrapper.TargetWrapper(object)", color=red, community=0, label="0: _vla = ValueListAttribute.GetAttribute(_target)", span="1385-1385"];
n490 [cluster="CommandLine.TargetWrapper.TargetWrapper(object)", color=red, community=0, label="0: IsValueListDefined", span="1386-1386"];
n491 [cluster="CommandLine.TargetWrapper.TargetWrapper(object)", color=red, community=0, label="0: _valueList = ValueListAttribute.GetReference(_target)", span="1387-1387"];
n492 [cluster="CommandLine.TargetWrapper.TargetWrapper(object)", label="Exit CommandLine.TargetWrapper.TargetWrapper(object)", span="1382-1382"];
n493 [cluster="CommandLine.TargetWrapper.AddValueItemIfAllowed(string)", label="Entry CommandLine.TargetWrapper.AddValueItemIfAllowed(string)", span="1392-1392"];
n494 [cluster="CommandLine.TargetWrapper.AddValueItemIfAllowed(string)", color=red, community=0, label="0: _vla.MaximumElements == 0 || _valueList.Count == _vla.MaximumElements", span="1394-1394"];
n497 [cluster="CommandLine.TargetWrapper.AddValueItemIfAllowed(string)", color=red, community=0, label="0: _valueList.Add(item)", span="1399-1399"];
n495 [cluster="CommandLine.TargetWrapper.AddValueItemIfAllowed(string)", color=red, community=0, label="0: return false;", span="1395-1395"];
n496 [cluster="CommandLine.TargetWrapper.AddValueItemIfAllowed(string)", color=red, community=0, label="0: this", span="1397-1397"];
n498 [cluster="CommandLine.TargetWrapper.AddValueItemIfAllowed(string)", color=red, community=0, label="0: return true;", span="1402-1402"];
n499 [cluster="CommandLine.TargetWrapper.AddValueItemIfAllowed(string)", label="Exit CommandLine.TargetWrapper.AddValueItemIfAllowed(string)", span="1392-1392"];
n500 [cluster="CommandLine.ICommandLineParser.ParseArguments(string[], object)", label="Entry CommandLine.ICommandLineParser.ParseArguments(string[], object)", span="1423-1423"];
n501 [cluster="CommandLine.ICommandLineParser.ParseArguments(string[], object)", label="Exit CommandLine.ICommandLineParser.ParseArguments(string[], object)", span="1423-1423"];
n502 [cluster="CommandLine.ICommandLineParser.ParseArguments(string[], object, System.IO.TextWriter)", label="Entry CommandLine.ICommandLineParser.ParseArguments(string[], object, System.IO.TextWriter)", span="1438-1438"];
n503 [cluster="CommandLine.ICommandLineParser.ParseArguments(string[], object, System.IO.TextWriter)", label="Exit CommandLine.ICommandLineParser.ParseArguments(string[], object, System.IO.TextWriter)", span="1438-1438"];
n504 [cluster="CommandLine.CommandLineOptionsBase.CommandLineOptionsBase()", label="Entry CommandLine.CommandLineOptionsBase.CommandLineOptionsBase()", span="1446-1446"];
n505 [cluster="CommandLine.CommandLineOptionsBase.CommandLineOptionsBase()", color=red, community=0, label="0: LastPostParsingState = new PostParsingState()", span="1448-1448"];
n506 [cluster="CommandLine.CommandLineOptionsBase.CommandLineOptionsBase()", label="Exit CommandLine.CommandLineOptionsBase.CommandLineOptionsBase()", span="1446-1446"];
n507 [cluster="CommandLine.CommandLineParserException.CommandLineParserException()", label="Exit CommandLine.CommandLineParserException.CommandLineParserException()", span="1465-1465"];
n508 [cluster="CommandLine.CommandLineParserException.CommandLineParserException(string)", label="Exit CommandLine.CommandLineParserException.CommandLineParserException(string)", span="1470-1470"];
n509 [cluster="CommandLine.CommandLineParserException.CommandLineParserException(string, System.Exception)", label="Entry CommandLine.CommandLineParserException.CommandLineParserException(string, System.Exception)", span="1475-1475"];
n510 [cluster="CommandLine.CommandLineParserException.CommandLineParserException(string, System.Exception)", label="Exit CommandLine.CommandLineParserException.CommandLineParserException(string, System.Exception)", span="1475-1475"];
n511 [cluster="CommandLine.CommandLineParserException.CommandLineParserException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)", label="Entry CommandLine.CommandLineParserException.CommandLineParserException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)", span="1480-1480"];
n512 [cluster="CommandLine.CommandLineParserException.CommandLineParserException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)", label="Exit CommandLine.CommandLineParserException.CommandLineParserException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)", span="1480-1480"];
n513 [cluster="CommandLine.CommandLineParserSettings.CommandLineParserSettings()", label="Entry CommandLine.CommandLineParserSettings.CommandLineParserSettings()", span="1496-1496"];
n514 [cluster="CommandLine.CommandLineParserSettings.CommandLineParserSettings()", label="Exit CommandLine.CommandLineParserSettings.CommandLineParserSettings()", span="1496-1496"];
n515 [cluster="CommandLine.CommandLineParserSettings.CommandLineParserSettings(bool)", label="Entry CommandLine.CommandLineParserSettings.CommandLineParserSettings(bool)", span="1506-1506"];
n516 [cluster="CommandLine.CommandLineParserSettings.CommandLineParserSettings(bool)", color=red, community=0, label="0: CaseSensitive = caseSensitive", span="1508-1508"];
n517 [cluster="CommandLine.CommandLineParserSettings.CommandLineParserSettings(bool)", label="Exit CommandLine.CommandLineParserSettings.CommandLineParserSettings(bool)", span="1506-1506"];
n518 [cluster="CommandLine.CommandLineParserSettings.CommandLineParserSettings(System.IO.TextWriter)", label="Entry CommandLine.CommandLineParserSettings.CommandLineParserSettings(System.IO.TextWriter)", span="1517-1517"];
n519 [cluster="CommandLine.CommandLineParserSettings.CommandLineParserSettings(System.IO.TextWriter)", color=red, community=0, label="0: HelpWriter = helpWriter", span="1520-1520"];
n520 [cluster="CommandLine.CommandLineParserSettings.CommandLineParserSettings(System.IO.TextWriter)", label="Exit CommandLine.CommandLineParserSettings.CommandLineParserSettings(System.IO.TextWriter)", span="1517-1517"];
n521 [cluster="CommandLine.CommandLineParserSettings.CommandLineParserSettings(bool, System.IO.TextWriter)", label="Entry CommandLine.CommandLineParserSettings.CommandLineParserSettings(bool, System.IO.TextWriter)", span="1530-1530"];
n522 [cluster="CommandLine.CommandLineParserSettings.CommandLineParserSettings(bool, System.IO.TextWriter)", color=red, community=0, label="0: CaseSensitive = caseSensitive", span="1532-1532"];
n523 [cluster="CommandLine.CommandLineParserSettings.CommandLineParserSettings(bool, System.IO.TextWriter)", color=red, community=0, label="0: HelpWriter = helpWriter", span="1533-1533"];
n524 [cluster="CommandLine.CommandLineParserSettings.CommandLineParserSettings(bool, System.IO.TextWriter)", label="Exit CommandLine.CommandLineParserSettings.CommandLineParserSettings(bool, System.IO.TextWriter)", span="1530-1530"];
n525 [cluster="CommandLine.CommandLineParserSettings.CommandLineParserSettings(bool, bool)", label="Entry CommandLine.CommandLineParserSettings.CommandLineParserSettings(bool, bool)", span="1542-1542"];
n526 [cluster="CommandLine.CommandLineParserSettings.CommandLineParserSettings(bool, bool)", color=red, community=0, label="0: CaseSensitive = caseSensitive", span="1544-1544"];
n527 [cluster="CommandLine.CommandLineParserSettings.CommandLineParserSettings(bool, bool)", color=red, community=0, label="0: MutuallyExclusive = mutuallyExclusive", span="1545-1545"];
n528 [cluster="CommandLine.CommandLineParserSettings.CommandLineParserSettings(bool, bool)", label="Exit CommandLine.CommandLineParserSettings.CommandLineParserSettings(bool, bool)", span="1542-1542"];
n529 [cluster="CommandLine.CommandLineParserSettings.CommandLineParserSettings(bool, bool, System.IO.TextWriter)", label="Entry CommandLine.CommandLineParserSettings.CommandLineParserSettings(bool, bool, System.IO.TextWriter)", span="1556-1556"];
n530 [cluster="CommandLine.CommandLineParserSettings.CommandLineParserSettings(bool, bool, System.IO.TextWriter)", color=red, community=0, label="0: CaseSensitive = caseSensitive", span="1558-1558"];
n531 [cluster="CommandLine.CommandLineParserSettings.CommandLineParserSettings(bool, bool, System.IO.TextWriter)", color=red, community=0, label="0: MutuallyExclusive = mutuallyExclusive", span="1559-1559"];
n532 [cluster="CommandLine.CommandLineParserSettings.CommandLineParserSettings(bool, bool, System.IO.TextWriter)", color=red, community=0, label="0: HelpWriter = helpWriter", span="1560-1560"];
n533 [cluster="CommandLine.CommandLineParserSettings.CommandLineParserSettings(bool, bool, System.IO.TextWriter)", label="Exit CommandLine.CommandLineParserSettings.CommandLineParserSettings(bool, bool, System.IO.TextWriter)", span="1556-1556"];
n534 [cluster="CommandLine.CommandLineParser.CommandLineParser()", label="Entry CommandLine.CommandLineParser.CommandLineParser()", span="1593-1593"];
n535 [cluster="CommandLine.CommandLineParser.CommandLineParser()", color=red, community=0, label="0: _settings = new CommandLineParserSettings()", span="1595-1595"];
n536 [cluster="CommandLine.CommandLineParser.CommandLineParser()", label="Exit CommandLine.CommandLineParser.CommandLineParser()", span="1593-1593"];
n537 [cluster="CommandLine.CommandLineParser.CommandLineParser(CommandLine.CommandLineParserSettings)", label="Entry CommandLine.CommandLineParser.CommandLineParser(CommandLine.CommandLineParserSettings)", span="1604-1604"];
n538 [cluster="CommandLine.CommandLineParser.CommandLineParser(CommandLine.CommandLineParserSettings)", color=red, community=0, label="0: Assumes.NotNull(settings, ''settings'')", span="1606-1606"];
n539 [cluster="CommandLine.CommandLineParser.CommandLineParser(CommandLine.CommandLineParserSettings)", color=red, community=0, label="0: _settings = settings", span="1608-1608"];
n540 [cluster="CommandLine.CommandLineParser.CommandLineParser(CommandLine.CommandLineParserSettings)", label="Exit CommandLine.CommandLineParser.CommandLineParser(CommandLine.CommandLineParserSettings)", span="1604-1604"];
n541 [cluster="CommandLine.CommandLineParser.ParseArguments(string[], object)", label="Entry CommandLine.CommandLineParser.ParseArguments(string[], object)", span="1621-1621"];
n542 [cluster="CommandLine.CommandLineParser.ParseArguments(string[], object)", color=red, community=0, label="0: return ParseArguments(args, options, _settings.HelpWriter);", span="1623-1623"];
n543 [cluster="CommandLine.CommandLineParser.ParseArguments(string[], object)", label="Exit CommandLine.CommandLineParser.ParseArguments(string[], object)", span="1621-1621"];
n544 [cluster="CommandLine.CommandLineParser.ParseArguments(string[], object, System.IO.TextWriter)", label="Entry CommandLine.CommandLineParser.ParseArguments(string[], object, System.IO.TextWriter)", span="1639-1639"];
n545 [cluster="CommandLine.CommandLineParser.ParseArguments(string[], object, System.IO.TextWriter)", color=red, community=0, label="0: Assumes.NotNull(args, ''args'')", span="1641-1641"];
n546 [cluster="CommandLine.CommandLineParser.ParseArguments(string[], object, System.IO.TextWriter)", color=red, community=0, label="0: Assumes.NotNull(options, ''options'')", span="1642-1642"];
n547 [cluster="CommandLine.CommandLineParser.ParseArguments(string[], object, System.IO.TextWriter)", color=red, community=0, label="0: var pair = ReflectionUtil.RetrieveMethod<HelpOptionAttribute>(options)", span="1644-1644"];
n548 [cluster="CommandLine.CommandLineParser.ParseArguments(string[], object, System.IO.TextWriter)", color=red, community=0, label="0: pair != null && helpWriter != null", span="1646-1646"];
n549 [cluster="CommandLine.CommandLineParser.ParseArguments(string[], object, System.IO.TextWriter)", color=red, community=0, label="0: ParseHelp(args, pair.Right) || !DoParseArguments(args, options)", span="1648-1648"];
n551 [cluster="CommandLine.CommandLineParser.ParseArguments(string[], object, System.IO.TextWriter)", color=red, community=0, label="0: HelpOptionAttribute.InvokeMethod(options, pair, out helpText)", span="1651-1651"];
n552 [cluster="CommandLine.CommandLineParser.ParseArguments(string[], object, System.IO.TextWriter)", color=red, community=0, label="0: helpWriter.Write(helpText)", span="1652-1652"];
n555 [cluster="CommandLine.CommandLineParser.ParseArguments(string[], object, System.IO.TextWriter)", color=red, community=0, label="0: return DoParseArguments(args, options);", span="1658-1658"];
n557 [cluster="CommandLine.ReflectionUtil.RetrieveMethod<TAttribute>(object)", label="Entry CommandLine.ReflectionUtil.RetrieveMethod<TAttribute>(object)", span="1786-1786"];
n550 [cluster="CommandLine.CommandLineParser.ParseArguments(string[], object, System.IO.TextWriter)", color=red, community=0, label="0: string helpText", span="1650-1650"];
n554 [cluster="CommandLine.CommandLineParser.ParseArguments(string[], object, System.IO.TextWriter)", color=red, community=0, label="0: return true;", span="1655-1655"];
n558 [cluster="CommandLine.CommandLineParser.ParseHelp(string[], CommandLine.HelpOptionAttribute)", label="Entry CommandLine.CommandLineParser.ParseHelp(string[], CommandLine.HelpOptionAttribute)", span="1704-1704"];
n559 [cluster="CommandLine.CommandLineParser.DoParseArguments(string[], object)", label="Entry CommandLine.CommandLineParser.DoParseArguments(string[], object)", span="1661-1661"];
n553 [cluster="CommandLine.CommandLineParser.ParseArguments(string[], object, System.IO.TextWriter)", color=red, community=0, label="0: return false;", span="1653-1653"];
n560 [cluster="System.IO.TextWriter.Write(string)", label="Entry System.IO.TextWriter.Write(string)", span="0-0"];
n556 [cluster="CommandLine.CommandLineParser.ParseArguments(string[], object, System.IO.TextWriter)", label="Exit CommandLine.CommandLineParser.ParseArguments(string[], object, System.IO.TextWriter)", span="1639-1639"];
n561 [cluster="CommandLine.CommandLineParser.DoParseArguments(string[], object)", color=red, community=0, label="0: bool hadError = false", span="1663-1663"];
n562 [cluster="CommandLine.CommandLineParser.DoParseArguments(string[], object)", color=red, community=0, label="0: var optionMap = OptionInfo.CreateMap(options, _settings)", span="1664-1664"];
n563 [cluster="CommandLine.CommandLineParser.DoParseArguments(string[], object)", color=red, community=0, label="0: var target = new TargetWrapper(options)", span="1665-1665"];
n564 [cluster="CommandLine.CommandLineParser.DoParseArguments(string[], object)", color=red, community=0, label="0: IArgumentEnumerator arguments = new StringArrayEnumerator(args)", span="1667-1667"];
n570 [cluster="CommandLine.CommandLineParser.DoParseArguments(string[], object)", color=red, community=0, label="0: ParserState result = parser.Parse(arguments, optionMap, options)", span="1676-1676"];
n572 [cluster="CommandLine.CommandLineParser.DoParseArguments(string[], object)", color=red, community=0, label="0: SetPostParsingStateIfNeeded(options, parser.PostParsingState)", span="1679-1679"];
n579 [cluster="CommandLine.CommandLineParser.DoParseArguments(string[], object)", color=red, community=0, label="0: hadError |= !optionMap.EnforceRules()", span="1699-1699"];
n576 [cluster="CommandLine.CommandLineParser.DoParseArguments(string[], object)", color=red, community=0, label="0: target.IsValueListDefined", span="1687-1687"];
n577 [cluster="CommandLine.CommandLineParser.DoParseArguments(string[], object)", color=red, community=0, label="0: !target.AddValueItemIfAllowed(argument)", span="1689-1689"];
n565 [cluster="CommandLine.CommandLineParser.DoParseArguments(string[], object)", color=red, community=0, label="0: arguments.MoveNext()", span="1668-1668"];
n566 [cluster="CommandLine.CommandLineParser.DoParseArguments(string[], object)", color=red, community=0, label="0: string argument = arguments.Current", span="1670-1670"];
n575 [cluster="CommandLine.CommandLineParser.DoParseArguments(string[], object)", color=red, community=0, label="0: arguments.MoveNext()", span="1685-1685"];
n567 [cluster="CommandLine.CommandLineParser.DoParseArguments(string[], object)", color=red, community=0, label="0: argument != null && argument.Length > 0", span="1671-1671"];
n568 [cluster="CommandLine.CommandLineParser.DoParseArguments(string[], object)", color=red, community=0, label="0: ArgumentParser parser = ArgumentParser.Create(argument)", span="1673-1673"];
n569 [cluster="CommandLine.CommandLineParser.DoParseArguments(string[], object)", color=red, community=0, label="0: parser != null", span="1674-1674"];
n571 [cluster="CommandLine.CommandLineParser.DoParseArguments(string[], object)", color=red, community=0, label="0: (result & ParserState.Failure) == ParserState.Failure", span="1677-1677"];
n574 [cluster="CommandLine.CommandLineParser.DoParseArguments(string[], object)", color=red, community=0, label="0: (result & ParserState.MoveOnNextElement) == ParserState.MoveOnNextElement", span="1684-1684"];
n573 [cluster="CommandLine.CommandLineParser.DoParseArguments(string[], object)", color=red, community=0, label="0: hadError = true", span="1680-1680"];
n582 [cluster="CommandLine.CommandLineParser.SetPostParsingStateIfNeeded(object, System.Collections.Generic.List<CommandLine.ParsingError>)", label="Entry CommandLine.CommandLineParser.SetPostParsingStateIfNeeded(object, System.Collections.Generic.List<CommandLine.ParsingError>)", span="1727-1727"];
n578 [cluster="CommandLine.CommandLineParser.DoParseArguments(string[], object)", color=red, community=0, label="0: hadError = true", span="1691-1691"];
n580 [cluster="CommandLine.CommandLineParser.DoParseArguments(string[], object)", color=red, community=0, label="0: return !hadError;", span="1701-1701"];
n581 [cluster="CommandLine.CommandLineParser.DoParseArguments(string[], object)", label="Exit CommandLine.CommandLineParser.DoParseArguments(string[], object)", span="1661-1661"];
n583 [cluster="CommandLine.CommandLineParser.ParseHelp(string[], CommandLine.HelpOptionAttribute)", color=red, community=0, label="1: bool caseSensitive = _settings.CaseSensitive", span="1706-1706"];
n585 [cluster="CommandLine.CommandLineParser.ParseHelp(string[], CommandLine.HelpOptionAttribute)", color=red, community=0, label="0: i < args.Length", span="1708-1708"];
n586 [cluster="CommandLine.CommandLineParser.ParseHelp(string[], CommandLine.HelpOptionAttribute)", color=red, community=0, label="0: !string.IsNullOrEmpty(helpOption.ShortName)", span="1710-1710"];
n587 [cluster="CommandLine.CommandLineParser.ParseHelp(string[], CommandLine.HelpOptionAttribute)", color=red, community=0, label="0: ArgumentParser.CompareShort(args[i], helpOption.ShortName, caseSensitive)", span="1712-1712"];
n589 [cluster="CommandLine.CommandLineParser.ParseHelp(string[], CommandLine.HelpOptionAttribute)", color=red, community=0, label="0: !string.IsNullOrEmpty(helpOption.LongName)", span="1716-1716"];
n590 [cluster="CommandLine.CommandLineParser.ParseHelp(string[], CommandLine.HelpOptionAttribute)", color=red, community=0, label="0: ArgumentParser.CompareLong(args[i], helpOption.LongName, caseSensitive)", span="1718-1718"];
n584 [cluster="CommandLine.CommandLineParser.ParseHelp(string[], CommandLine.HelpOptionAttribute)", color=red, community=0, label="0: int i = 0", span="1708-1708"];
n592 [cluster="CommandLine.CommandLineParser.ParseHelp(string[], CommandLine.HelpOptionAttribute)", color=red, community=0, label="0: i++", span="1708-1708"];
n593 [cluster="CommandLine.CommandLineParser.ParseHelp(string[], CommandLine.HelpOptionAttribute)", color=red, community=0, label="0: return false;", span="1723-1723"];
n588 [cluster="CommandLine.CommandLineParser.ParseHelp(string[], CommandLine.HelpOptionAttribute)", color=red, community=0, label="0: return true;", span="1713-1713"];
n591 [cluster="CommandLine.CommandLineParser.ParseHelp(string[], CommandLine.HelpOptionAttribute)", color=red, community=0, label="0: return true;", span="1719-1719"];
n594 [cluster="CommandLine.CommandLineParser.ParseHelp(string[], CommandLine.HelpOptionAttribute)", label="Exit CommandLine.CommandLineParser.ParseHelp(string[], CommandLine.HelpOptionAttribute)", span="1704-1704"];
n595 [cluster="CommandLine.CommandLineParser.SetPostParsingStateIfNeeded(object, System.Collections.Generic.List<CommandLine.ParsingError>)", color=red, community=0, label="0: options is CommandLineOptionsBase", span="1729-1729"];
n596 [cluster="CommandLine.CommandLineParser.SetPostParsingStateIfNeeded(object, System.Collections.Generic.List<CommandLine.ParsingError>)", color=red, community=0, label="0: ((CommandLineOptionsBase)options).InternalLastPostParsingState.Errors.AddRange(state)", span="1730-1730"];
n597 [cluster="CommandLine.CommandLineParser.SetPostParsingStateIfNeeded(object, System.Collections.Generic.List<CommandLine.ParsingError>)", label="Exit CommandLine.CommandLineParser.SetPostParsingStateIfNeeded(object, System.Collections.Generic.List<CommandLine.ParsingError>)", span="1727-1727"];
n598 [cluster="System.Collections.Generic.List<T>.AddRange(System.Collections.Generic.IEnumerable<T>)", label="Entry System.Collections.Generic.List<T>.AddRange(System.Collections.Generic.IEnumerable<T>)", span="0-0"];
n599 [cluster="CommandLine.Assumes.NotNull<T>(T, string)", color=red, community=0, label="0: value == null", span="1741-1741"];
n600 [cluster="CommandLine.Assumes.NotNull<T>(T, string)", color=red, community=0, label="0: throw new ArgumentNullException(paramName);", span="1742-1742"];
n601 [cluster="CommandLine.Assumes.NotNull<T>(T, string)", label="Exit CommandLine.Assumes.NotNull<T>(T, string)", span="1738-1738"];
n602 [cluster="CommandLine.Assumes.NotNullOrEmpty(string, string)", color=red, community=0, label="0: string.IsNullOrEmpty(value)", span="1747-1747"];
n603 [cluster="CommandLine.Assumes.NotNullOrEmpty(string, string)", color=red, community=0, label="0: throw new ArgumentException(paramName);", span="1748-1748"];
n604 [cluster="CommandLine.Assumes.NotNullOrEmpty(string, string)", label="Exit CommandLine.Assumes.NotNullOrEmpty(string, string)", span="1745-1745"];
n605 [cluster="System.ArgumentException.ArgumentException(string)", label="Entry System.ArgumentException.ArgumentException(string)", span="0-0"];
n606 [cluster="CommandLine.Assumes.NotZeroLength<T>(T[], string)", label="Entry CommandLine.Assumes.NotZeroLength<T>(T[], string)", span="1751-1751"];
n607 [cluster="CommandLine.Assumes.NotZeroLength<T>(T[], string)", color=red, community=0, label="0: array.Length == 0", span="1753-1753"];
n608 [cluster="CommandLine.Assumes.NotZeroLength<T>(T[], string)", color=red, community=0, label="0: throw new ArgumentOutOfRangeException(paramName);", span="1754-1754"];
n609 [cluster="CommandLine.Assumes.NotZeroLength<T>(T[], string)", label="Exit CommandLine.Assumes.NotZeroLength<T>(T[], string)", span="1751-1751"];
n610 [cluster="System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", label="Entry System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", span="0-0"];
n611 [cluster="CommandLine.ReflectionUtil.RetrievePropertyList<TAttribute>(object)", color=red, community=0, label="0: IList<Pair<PropertyInfo, TAttribute>> list = new List<Pair<PropertyInfo, TAttribute>>()", span="1763-1763"];
n612 [cluster="CommandLine.ReflectionUtil.RetrievePropertyList<TAttribute>(object)", color=red, community=0, label="0: target != null", span="1764-1764"];
n613 [cluster="CommandLine.ReflectionUtil.RetrievePropertyList<TAttribute>(object)", color=red, community=0, label="0: var propertiesInfo = target.GetType().GetProperties()", span="1766-1766"];
n620 [cluster="CommandLine.ReflectionUtil.RetrievePropertyList<TAttribute>(object)", color=red, community=0, label="0: list.Add(new Pair<PropertyInfo, TAttribute>(property, (TAttribute)attribute))", span="1777-1777"];
n621 [cluster="CommandLine.ReflectionUtil.RetrievePropertyList<TAttribute>(object)", color=red, community=0, label="0: return list;", span="1783-1783"];
n614 [cluster="CommandLine.ReflectionUtil.RetrievePropertyList<TAttribute>(object)", color=red, community=0, label="0: propertiesInfo", span="1768-1768"];
n623 [cluster="object.GetType()", label="Entry object.GetType()", span="0-0"];
n624 [cluster="System.Type.GetProperties()", label="Entry System.Type.GetProperties()", span="0-0"];
n615 [cluster="CommandLine.ReflectionUtil.RetrievePropertyList<TAttribute>(object)", color=red, community=0, label="0: property != null && (property.CanRead && property.CanWrite)", span="1770-1770"];
n616 [cluster="CommandLine.ReflectionUtil.RetrievePropertyList<TAttribute>(object)", color=red, community=0, label="0: var setMethod = property.GetSetMethod()", span="1772-1772"];
n618 [cluster="CommandLine.ReflectionUtil.RetrievePropertyList<TAttribute>(object)", color=red, community=0, label="0: var attribute = Attribute.GetCustomAttribute(property, typeof(TAttribute), false)", span="1775-1775"];
n617 [cluster="CommandLine.ReflectionUtil.RetrievePropertyList<TAttribute>(object)", color=red, community=0, label="0: setMethod != null && !setMethod.IsStatic", span="1773-1773"];
n625 [cluster="System.Reflection.PropertyInfo.GetSetMethod()", label="Entry System.Reflection.PropertyInfo.GetSetMethod()", span="0-0"];
n619 [cluster="CommandLine.ReflectionUtil.RetrievePropertyList<TAttribute>(object)", color=red, community=0, label="0: attribute != null", span="1776-1776"];
n626 [cluster="System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, bool)", label="Entry System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, bool)", span="0-0"];
n622 [cluster="CommandLine.ReflectionUtil.RetrievePropertyList<TAttribute>(object)", label="Exit CommandLine.ReflectionUtil.RetrievePropertyList<TAttribute>(object)", span="1760-1760"];
n627 [cluster="CommandLine.ReflectionUtil.RetrieveMethod<TAttribute>(object)", color=red, community=0, label="0: var info = target.GetType().GetMethods()", span="1789-1789"];
n628 [cluster="CommandLine.ReflectionUtil.RetrieveMethod<TAttribute>(object)", color=red, community=0, label="0: info", span="1791-1791"];
n635 [cluster="System.Type.GetMethods()", label="Entry System.Type.GetMethods()", span="0-0"];
n629 [cluster="CommandLine.ReflectionUtil.RetrieveMethod<TAttribute>(object)", color=red, community=0, label="0: !method.IsStatic", span="1793-1793"];
n633 [cluster="CommandLine.ReflectionUtil.RetrieveMethod<TAttribute>(object)", color=red, community=0, label="0: return null;", span="1802-1802"];
n630 [cluster="CommandLine.ReflectionUtil.RetrieveMethod<TAttribute>(object)", color=red, community=1, label="0: Attribute attribute =\r\n                        Attribute.GetCustomAttribute(method, typeof(TAttribute), false)", span="1795-1796"];
n632 [cluster="CommandLine.ReflectionUtil.RetrieveMethod<TAttribute>(object)", color=red, community=0, label="0: return new Pair<MethodInfo, TAttribute>(method, (TAttribute)attribute);", span="1798-1798"];
n631 [cluster="CommandLine.ReflectionUtil.RetrieveMethod<TAttribute>(object)", color=red, community=0, label="0: attribute != null", span="1797-1797"];
n634 [cluster="CommandLine.ReflectionUtil.RetrieveMethod<TAttribute>(object)", label="Exit CommandLine.ReflectionUtil.RetrieveMethod<TAttribute>(object)", span="1786-1786"];
n636 [cluster="CommandLine.ReflectionUtil.RetrieveMethodAttributeOnly<TAttribute>(object)", label="Entry CommandLine.ReflectionUtil.RetrieveMethodAttributeOnly<TAttribute>(object)", span="1805-1805"];
n637 [cluster="CommandLine.ReflectionUtil.RetrieveMethodAttributeOnly<TAttribute>(object)", color=red, community=0, label="0: var info = target.GetType().GetMethods()", span="1808-1808"];
n638 [cluster="CommandLine.ReflectionUtil.RetrieveMethodAttributeOnly<TAttribute>(object)", color=red, community=0, label="0: info", span="1810-1810"];
n639 [cluster="CommandLine.ReflectionUtil.RetrieveMethodAttributeOnly<TAttribute>(object)", color=red, community=0, label="0: !method.IsStatic", span="1812-1812"];
n643 [cluster="CommandLine.ReflectionUtil.RetrieveMethodAttributeOnly<TAttribute>(object)", color=red, community=0, label="0: return null;", span="1821-1821"];
n640 [cluster="CommandLine.ReflectionUtil.RetrieveMethodAttributeOnly<TAttribute>(object)", color=red, community=1, label="0: Attribute attribute =\r\n                        Attribute.GetCustomAttribute(method, typeof(TAttribute), false)", span="1814-1815"];
n641 [cluster="CommandLine.ReflectionUtil.RetrieveMethodAttributeOnly<TAttribute>(object)", color=red, community=0, label="0: attribute != null", span="1816-1816"];
n642 [cluster="CommandLine.ReflectionUtil.RetrieveMethodAttributeOnly<TAttribute>(object)", color=red, community=0, label="0: return (TAttribute)attribute;", span="1817-1817"];
n644 [cluster="CommandLine.ReflectionUtil.RetrieveMethodAttributeOnly<TAttribute>(object)", label="Exit CommandLine.ReflectionUtil.RetrieveMethodAttributeOnly<TAttribute>(object)", span="1805-1805"];
n645 [cluster="CommandLine.ReflectionUtil.RetrievePropertyAttributeList<TAttribute>(object)", label="Entry CommandLine.ReflectionUtil.RetrievePropertyAttributeList<TAttribute>(object)", span="1824-1824"];
n646 [cluster="CommandLine.ReflectionUtil.RetrievePropertyAttributeList<TAttribute>(object)", color=red, community=0, label="0: IList<TAttribute> list = new List<TAttribute>()", span="1827-1827"];
n647 [cluster="CommandLine.ReflectionUtil.RetrievePropertyAttributeList<TAttribute>(object)", color=red, community=0, label="0: var info = target.GetType().GetProperties()", span="1828-1828"];
n654 [cluster="CommandLine.ReflectionUtil.RetrievePropertyAttributeList<TAttribute>(object)", color=red, community=0, label="0: list.Add((TAttribute)attribute)", span="1839-1839"];
n655 [cluster="CommandLine.ReflectionUtil.RetrievePropertyAttributeList<TAttribute>(object)", color=red, community=0, label="0: return list;", span="1844-1844"];
n648 [cluster="CommandLine.ReflectionUtil.RetrievePropertyAttributeList<TAttribute>(object)", color=red, community=0, label="0: info", span="1830-1830"];
n649 [cluster="CommandLine.ReflectionUtil.RetrievePropertyAttributeList<TAttribute>(object)", color=red, community=0, label="0: property != null && (property.CanRead && property.CanWrite)", span="1832-1832"];
n650 [cluster="CommandLine.ReflectionUtil.RetrievePropertyAttributeList<TAttribute>(object)", color=red, community=0, label="0: var setMethod = property.GetSetMethod()", span="1834-1834"];
n652 [cluster="CommandLine.ReflectionUtil.RetrievePropertyAttributeList<TAttribute>(object)", color=red, community=0, label="0: var attribute = Attribute.GetCustomAttribute(property, typeof(TAttribute), false)", span="1837-1837"];
n651 [cluster="CommandLine.ReflectionUtil.RetrievePropertyAttributeList<TAttribute>(object)", color=red, community=0, label="0: setMethod != null && !setMethod.IsStatic", span="1835-1835"];
n653 [cluster="CommandLine.ReflectionUtil.RetrievePropertyAttributeList<TAttribute>(object)", color=red, community=0, label="0: attribute != null", span="1838-1838"];
n656 [cluster="CommandLine.ReflectionUtil.RetrievePropertyAttributeList<TAttribute>(object)", label="Exit CommandLine.ReflectionUtil.RetrievePropertyAttributeList<TAttribute>(object)", span="1824-1824"];
n657 [cluster="CommandLine.ReflectionUtil.IsNullableType(System.Type)", color=red, community=0, label="0: return type.IsGenericType && type.GetGenericTypeDefinition().Equals(typeof(Nullable<>));", span="1849-1849"];
n658 [cluster="CommandLine.ReflectionUtil.IsNullableType(System.Type)", label="Exit CommandLine.ReflectionUtil.IsNullableType(System.Type)", span="1847-1847"];
n659 [cluster="System.Type.GetGenericTypeDefinition()", label="Entry System.Type.GetGenericTypeDefinition()", span="0-0"];
n660 [cluster="System.Type.Equals(System.Type)", label="Entry System.Type.Equals(System.Type)", span="0-0"];
n661 [cluster="CommandLine.StringUtil.Spaces(int)", label="Entry CommandLine.StringUtil.Spaces(int)", span="1877-1877"];
n662 [cluster="CommandLine.StringUtil.Spaces(int)", color=red, community=0, label="0: return new String(' ', count);", span="1879-1879"];
n663 [cluster="CommandLine.StringUtil.Spaces(int)", label="Exit CommandLine.StringUtil.Spaces(int)", span="1877-1877"];
n664 [cluster="string.String(char, int)", label="Entry string.String(char, int)", span="0-0"];
d3 [cluster="CommandLine.HelpOptionAttribute.HelpOptionAttribute(string, string)", color=green, community=0, label="0: base.ShortName = shortName", span="116-116"];
d4 [cluster="CommandLine.HelpOptionAttribute.HelpOptionAttribute(string, string)", color=green, community=0, label="0: base.LongName = longName", span="117-117"];
d7 [cluster="CommandLine.HelpOptionAttribute.InvokeMethod(object, CommandLine.Pair<System.Reflection.MethodInfo, CommandLine.HelpOptionAttribute>, out string)", color=green, community=0, label="0: text = null", span="134-134"];
d8 [cluster="CommandLine.HelpOptionAttribute.InvokeMethod(object, CommandLine.Pair<System.Reflection.MethodInfo, CommandLine.HelpOptionAttribute>, out string)", color=green, community=0, label="0: var method = pair.Left", span="136-136"];
d9 [cluster="CommandLine.HelpOptionAttribute.InvokeMethod(object, CommandLine.Pair<System.Reflection.MethodInfo, CommandLine.HelpOptionAttribute>, out string)", color=green, community=0, label="0: !CheckMethodSignature(method)", span="137-137"];
d11 [cluster="CommandLine.HelpOptionAttribute.InvokeMethod(object, CommandLine.Pair<System.Reflection.MethodInfo, CommandLine.HelpOptionAttribute>, out string)", color=green, community=0, label="0: text = (string)method.Invoke(target, null)", span="140-140"];
d10 [cluster="CommandLine.HelpOptionAttribute.InvokeMethod(object, CommandLine.Pair<System.Reflection.MethodInfo, CommandLine.HelpOptionAttribute>, out string)", color=green, community=0, label="0: throw new MemberAccessException();", span="138-138"];
d16 [cluster="CommandLine.HelpOptionAttribute.CheckMethodSignature(System.Reflection.MethodInfo)", color=green, community=0, label="0: return value.ReturnType == typeof(string) && value.GetParameters().Length == 0;", span="145-145"];
d22 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", color=green, community=0, label="0: !string.IsNullOrEmpty(shortName)", span="183-183"];
d23 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", color=green, community=0, label="0: _uniqueName = shortName", span="184-184"];
d24 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", color=green, community=0, label="0: !string.IsNullOrEmpty(longName)", span="185-185"];
d26 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", color=green, community=0, label="0: _uniqueName == null", span="188-188"];
d25 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", color=green, community=0, label="0: _uniqueName = longName", span="186-186"];
d28 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", color=green, community=0, label="0: base.ShortName = shortName", span="191-191"];
d29 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", color=green, community=0, label="0: base.LongName = longName", span="192-192"];
d27 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", color=green, community=0, label="0: throw new InvalidOperationException();", span="189-189"];
d34 [cluster="CommandLine.OptionListAttribute.OptionListAttribute(string, string)", color=green, community=0, label="0: Separator = ':'", span="238-238"];
d37 [cluster="CommandLine.OptionListAttribute.OptionListAttribute(string, string, char)", color=green, community=0, label="0: Separator = separator", span="250-250"];
d40 [cluster="CommandLine.ValueListAttribute.ValueListAttribute()", color=green, community=0, label="0: MaximumElements = -1", span="273-273"];
d43 [cluster="CommandLine.ValueListAttribute.ValueListAttribute(System.Type)", color=green, community=0, label="0: concreteType == null", span="284-284"];
d44 [cluster="CommandLine.ValueListAttribute.ValueListAttribute(System.Type)", color=green, community=0, label="0: throw new ArgumentNullException(''concreteType'');", span="285-285"];
d45 [cluster="CommandLine.ValueListAttribute.ValueListAttribute(System.Type)", color=green, community=0, label="0: !typeof(IList<string>).IsAssignableFrom(concreteType)", span="287-287"];
d46 [cluster="CommandLine.ValueListAttribute.ValueListAttribute(System.Type)", color=green, community=0, label="0: throw new CommandLineParserException(''The types are incompatible.'');", span="288-288"];
d47 [cluster="CommandLine.ValueListAttribute.ValueListAttribute(System.Type)", color=green, community=0, label="0: _concreteType = concreteType", span="290-290"];
d53 [cluster="CommandLine.ValueListAttribute.GetReference(object)", color=green, community=0, label="0: Type concreteType", span="307-307"];
d54 [cluster="CommandLine.ValueListAttribute.GetReference(object)", color=green, community=0, label="0: var property = GetProperty(target, out concreteType)", span="308-308"];
d55 [cluster="CommandLine.ValueListAttribute.GetReference(object)", color=green, community=0, label="0: property == null || concreteType == null", span="310-310"];
d57 [cluster="CommandLine.ValueListAttribute.GetReference(object)", color=green, community=0, label="0: property.SetValue(target, Activator.CreateInstance(concreteType), null)", span="313-313"];
d58 [cluster="CommandLine.ValueListAttribute.GetReference(object)", color=green, community=0, label="0: return (IList<string>)property.GetValue(target, null);", span="315-315"];
d56 [cluster="CommandLine.ValueListAttribute.GetReference(object)", color=green, community=0, label="0: return null;", span="311-311"];
d65 [cluster="CommandLine.ValueListAttribute.GetAttribute(object)", color=green, community=0, label="0: var list = ReflectionUtil.RetrievePropertyList<ValueListAttribute>(target)", span="320-320"];
d66 [cluster="CommandLine.ValueListAttribute.GetAttribute(object)", color=green, community=0, label="0: list == null || list.Count == 0", span="321-321"];
d68 [cluster="CommandLine.ValueListAttribute.GetAttribute(object)", color=green, community=0, label="0: list.Count > 1", span="324-324"];
d70 [cluster="CommandLine.ValueListAttribute.GetAttribute(object)", color=green, community=0, label="0: var pairZero = list[0]", span="327-327"];
d67 [cluster="CommandLine.ValueListAttribute.GetAttribute(object)", color=green, community=0, label="0: return null;", span="322-322"];
d69 [cluster="CommandLine.ValueListAttribute.GetAttribute(object)", color=green, community=0, label="0: throw new InvalidOperationException();", span="325-325"];
d71 [cluster="CommandLine.ValueListAttribute.GetAttribute(object)", color=green, community=0, label="0: return pairZero.Right;", span="329-329"];
d74 [cluster="CommandLine.ValueListAttribute.GetProperty(object, out System.Type)", color=green, community=0, label="0: concreteType = null", span="334-334"];
d75 [cluster="CommandLine.ValueListAttribute.GetProperty(object, out System.Type)", color=green, community=0, label="0: var list = ReflectionUtil.RetrievePropertyList<ValueListAttribute>(target)", span="336-336"];
d76 [cluster="CommandLine.ValueListAttribute.GetProperty(object, out System.Type)", color=green, community=0, label="0: list == null || list.Count == 0", span="337-337"];
d78 [cluster="CommandLine.ValueListAttribute.GetProperty(object, out System.Type)", color=green, community=0, label="0: list.Count > 1", span="340-340"];
d80 [cluster="CommandLine.ValueListAttribute.GetProperty(object, out System.Type)", color=green, community=0, label="0: var pairZero = list[0]", span="343-343"];
d77 [cluster="CommandLine.ValueListAttribute.GetProperty(object, out System.Type)", color=green, community=0, label="0: return null;", span="338-338"];
d79 [cluster="CommandLine.ValueListAttribute.GetProperty(object, out System.Type)", color=green, community=0, label="0: throw new InvalidOperationException();", span="341-341"];
d81 [cluster="CommandLine.ValueListAttribute.GetProperty(object, out System.Type)", color=green, community=0, label="0: concreteType = pairZero.Right.ConcreteType", span="344-344"];
d82 [cluster="CommandLine.ValueListAttribute.GetProperty(object, out System.Type)", color=green, community=0, label="0: return pairZero.Left;", span="346-346"];
d85 [cluster="CommandLine.ArgumentParser.ArgumentParser()", color=green, community=0, label="0: this.PostParsingState = new List<ParsingError>()", span="364-364"];
d91 [cluster="CommandLine.ArgumentParser.DefineOptionThatViolatesFormat(CommandLine.OptionInfo)", color=green, community=0, label="0: this.PostParsingState.Add(new ParsingError(option.ShortName, option.LongName, true))", span="375-375"];
d96 [cluster="CommandLine.ArgumentParser.Create(string)", color=green, community=0, label="0: argument.Equals(''-'', StringComparison.InvariantCulture)", span="380-380"];
d97 [cluster="CommandLine.ArgumentParser.Create(string)", color=green, community=0, label="0: return null;", span="381-381"];
d98 [cluster="CommandLine.ArgumentParser.Create(string)", color=green, community=0, label="0: argument[0] == '-' && argument[1] == '-'", span="383-383"];
d99 [cluster="CommandLine.ArgumentParser.Create(string)", color=green, community=0, label="0: return new LongOptionParser();", span="384-384"];
d100 [cluster="CommandLine.ArgumentParser.Create(string)", color=green, community=0, label="0: argument[0] == '-'", span="386-386"];
d101 [cluster="CommandLine.ArgumentParser.Create(string)", color=green, community=0, label="0: return new OptionGroupParser();", span="387-387"];
d102 [cluster="CommandLine.ArgumentParser.Create(string)", color=green, community=0, label="0: return null;", span="389-389"];
d108 [cluster="CommandLine.ArgumentParser.IsInputValue(string)", color=green, community=0, label="0: argument.Length > 0", span="394-394"];
d109 [cluster="CommandLine.ArgumentParser.IsInputValue(string)", color=green, community=0, label="0: return argument.Equals(''-'', StringComparison.InvariantCulture) || argument[0] != '-';", span="395-395"];
d110 [cluster="CommandLine.ArgumentParser.IsInputValue(string)", color=green, community=0, label="0: return true;", span="397-397"];
d113 [cluster="CommandLine.ArgumentParser.GetNextInputValues(CommandLine.IArgumentEnumerator)", color=green, community=0, label="0: IList<string> list = new List<string>()", span="409-409"];
d114 [cluster="CommandLine.ArgumentParser.GetNextInputValues(CommandLine.IArgumentEnumerator)", color=green, community=0, label="0: ae.MoveNext()", span="411-411"];
d116 [cluster="CommandLine.ArgumentParser.GetNextInputValues(CommandLine.IArgumentEnumerator)", color=green, community=0, label="0: list.Add(ae.Current)", span="414-414"];
d119 [cluster="CommandLine.ArgumentParser.GetNextInputValues(CommandLine.IArgumentEnumerator)", color=green, community=0, label="0: return list;", span="421-421"];
d115 [cluster="CommandLine.ArgumentParser.GetNextInputValues(CommandLine.IArgumentEnumerator)", color=green, community=0, label="0: IsInputValue(ae.Current)", span="413-413"];
d117 [cluster="CommandLine.ArgumentParser.GetNextInputValues(CommandLine.IArgumentEnumerator)", color=green, community=0, label="0: !ae.MovePrevious()", span="418-418"];
d118 [cluster="CommandLine.ArgumentParser.GetNextInputValues(CommandLine.IArgumentEnumerator)", color=green, community=0, label="0: throw new CommandLineParserException();", span="419-419"];
d126 [cluster="CommandLine.ArgumentParser.CompareShort(string, string, bool)", color=green, community=0, label="0: return string.Compare(argument, ''-'' + option, !caseSensitive) == 0;", span="426-426"];
d130 [cluster="CommandLine.ArgumentParser.CompareLong(string, string, bool)", color=green, community=0, label="0: return string.Compare(argument, ''--'' + option, !caseSensitive) == 0;", span="431-431"];
d133 [cluster="CommandLine.ArgumentParser.BooleanToParserState(bool)", color=green, community=0, label="0: return BooleanToParserState(value, false);", span="436-436"];
d136 [cluster="CommandLine.ArgumentParser.BooleanToParserState(bool, bool)", color=green, community=0, label="0: value && !addMoveNextIfTrue", span="441-441"];
d137 [cluster="CommandLine.ArgumentParser.BooleanToParserState(bool, bool)", color=green, community=0, label="0: return ParserState.Success;", span="442-442"];
d138 [cluster="CommandLine.ArgumentParser.BooleanToParserState(bool, bool)", color=green, community=0, label="0: value && addMoveNextIfTrue", span="443-443"];
d139 [cluster="CommandLine.ArgumentParser.BooleanToParserState(bool, bool)", color=green, community=0, label="0: return ParserState.Success | ParserState.MoveOnNextElement;", span="444-444"];
d140 [cluster="CommandLine.ArgumentParser.BooleanToParserState(bool, bool)", color=green, community=0, label="0: return ParserState.Failure;", span="446-446"];
d143 [cluster="CommandLine.ArgumentParser.EnsureOptionAttributeIsArrayCompatible(CommandLine.OptionInfo)", color=green, community=0, label="0: !option.IsAttributeArrayCompatible", span="451-451"];
d144 [cluster="CommandLine.ArgumentParser.EnsureOptionAttributeIsArrayCompatible(CommandLine.OptionInfo)", color=green, community=0, label="0: throw new CommandLineParserException();", span="452-452"];
d147 [cluster="CommandLine.ArgumentParser.EnsureOptionArrayAttributeIsNotBoundToScalar(CommandLine.OptionInfo)", color=green, community=0, label="0: !option.IsArray && option.IsAttributeArrayCompatible", span="457-457"];
d148 [cluster="CommandLine.ArgumentParser.EnsureOptionArrayAttributeIsNotBoundToScalar(CommandLine.OptionInfo)", color=green, community=0, label="0: throw new CommandLineParserException();", span="458-458"];
d153 [cluster="CommandLine.BadOptionInfo.BadOptionInfo(string, string)", color=green, community=0, label="0: ShortName = shortName", span="473-473"];
d154 [cluster="CommandLine.BadOptionInfo.BadOptionInfo(string, string)", color=green, community=0, label="0: LongName = longName", span="474-474"];
d162 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: var parts = argumentEnumerator.Current.Substring(2).Split(new char[] { '=' }, 2)", span="524-524"];
d163 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: var option = map[parts[0]]", span="525-525"];
d170 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: parts.Length == 1 && (argumentEnumerator.IsLast || !ArgumentParser.IsInputValue(argumentEnumerator.Next))", span="537-537"];
d172 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: parts.Length == 2", span="540-540"];
d174 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: valueSetting = option.SetValue(parts[1], options)", span="544-544"];
d180 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: items.Insert(0, parts[1])", span="555-555"];
d196 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: parts.Length == 2", span="590-590"];
d164 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: var valueSetting = false", span="526-526"];
d165 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: option == null", span="528-528"];
d167 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: option.IsDefined = true", span="531-531"];
d168 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: ArgumentParser.EnsureOptionArrayAttributeIsNotBoundToScalar(option)", span="533-533"];
d169 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: !option.IsBoolean", span="535-535"];
d173 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: !option.IsArray", span="542-542"];
d176 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: this.DefineOptionThatViolatesFormat(option)", span="546-546"];
d178 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: ArgumentParser.EnsureOptionAttributeIsArrayCompatible(option)", span="552-552"];
d181 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: valueSetting = option.SetValue(items, options)", span="557-557"];
d183 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: this.DefineOptionThatViolatesFormat(option)", span="559-559"];
d185 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: !option.IsArray", span="566-566"];
d186 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: valueSetting = option.SetValue(argumentEnumerator.Next, options)", span="568-568"];
d188 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: this.DefineOptionThatViolatesFormat(option)", span="570-570"];
d190 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: ArgumentParser.EnsureOptionAttributeIsArrayCompatible(option)", span="576-576"];
d192 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: valueSetting = option.SetValue(items, options)", span="580-580"];
d194 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: this.DefineOptionThatViolatesFormat(option)", span="582-582"];
d198 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: valueSetting = option.SetValue(true, options)", span="593-593"];
d200 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: this.DefineOptionThatViolatesFormat(option)", span="595-595"];
d171 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: return ParserState.Failure;", span="538-538"];
d175 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: !valueSetting", span="545-545"];
d177 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: return ArgumentParser.BooleanToParserState(valueSetting);", span="548-548"];
d179 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: var items = ArgumentParser.GetNextInputValues(argumentEnumerator)", span="554-554"];
d182 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: !valueSetting", span="558-558"];
d184 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: return ArgumentParser.BooleanToParserState(valueSetting);", span="561-561"];
d187 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: !valueSetting", span="569-569"];
d189 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: return ArgumentParser.BooleanToParserState(valueSetting, true);", span="572-572"];
d191 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: var items = ArgumentParser.GetNextInputValues(argumentEnumerator)", span="578-578"];
d193 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: !valueSetting", span="581-581"];
d195 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: return ArgumentParser.BooleanToParserState(valueSetting, true);", span="584-584"];
d199 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: !valueSetting", span="594-594"];
d201 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: return ArgumentParser.BooleanToParserState(valueSetting);", span="597-597"];
d197 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: return ParserState.Failure;", span="591-591"];
d166 [cluster="CommandLine.LongOptionParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: return ParserState.Failure;", span="529-529"];
d210 [cluster="CommandLine.OneCharStringEnumerator.OneCharStringEnumerator(string)", color=green, community=0, label="0: Assumes.NotNullOrEmpty(value, ''value'')", span="610-610"];
d211 [cluster="CommandLine.OneCharStringEnumerator.OneCharStringEnumerator(string)", color=green, community=0, label="0: _data = value", span="612-612"];
d212 [cluster="CommandLine.OneCharStringEnumerator.OneCharStringEnumerator(string)", color=green, community=0, label="0: _index = -1", span="613-613"];
d216 [cluster="CommandLine.OneCharStringEnumerator.Reset()", color=green, community=0, label="0: _index = -1", span="654-654"];
d219 [cluster="CommandLine.OneCharStringEnumerator.MoveNext()", color=green, community=0, label="0: _index < (_data.Length - 1)", span="659-659"];
d220 [cluster="CommandLine.OneCharStringEnumerator.MoveNext()", color=green, community=0, label="0: _index++", span="661-661"];
d223 [cluster="CommandLine.OneCharStringEnumerator.MoveNext()", color=green, community=0, label="0: _index = _data.Length", span="665-665"];
d221 [cluster="CommandLine.OneCharStringEnumerator.MoveNext()", color=green, community=0, label="0: _currentElement = _data.Substring(_index, 1)", span="662-662"];
d224 [cluster="CommandLine.OneCharStringEnumerator.MoveNext()", color=green, community=0, label="0: return false;", span="667-667"];
d222 [cluster="CommandLine.OneCharStringEnumerator.MoveNext()", color=green, community=0, label="0: return true;", span="663-663"];
d228 [cluster="CommandLine.OneCharStringEnumerator.GetRemainingFromNext()", color=green, community=0, label="0: _index == -1", span="672-672"];
d229 [cluster="CommandLine.OneCharStringEnumerator.GetRemainingFromNext()", color=green, community=0, label="0: throw new InvalidOperationException();", span="673-673"];
d230 [cluster="CommandLine.OneCharStringEnumerator.GetRemainingFromNext()", color=green, community=0, label="0: _index > _data.Length", span="675-675"];
d231 [cluster="CommandLine.OneCharStringEnumerator.GetRemainingFromNext()", color=green, community=0, label="0: throw new InvalidOperationException();", span="676-676"];
d232 [cluster="CommandLine.OneCharStringEnumerator.GetRemainingFromNext()", color=green, community=0, label="0: return _data.Substring(_index + 1);", span="678-678"];
d235 [cluster="CommandLine.OneCharStringEnumerator.MovePrevious()", color=green, community=0, label="0: throw new NotSupportedException();", span="683-683"];
d241 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: var valueSetting = false", span="695-695"];
d242 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: IArgumentEnumerator group = new OneCharStringEnumerator(argumentEnumerator.Current.Substring(1))", span="697-697"];
d243 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: group.MoveNext()", span="698-698"];
d244 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: var option = map[group.Current]", span="700-700"];
d250 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: argumentEnumerator.IsLast && group.IsLast", span="710-710"];
d252 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: !group.IsLast", span="713-713"];
d254 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: valueSetting = option.SetValue(group.GetRemainingFromNext(), options)", span="717-717"];
d260 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: items.Insert(0, group.GetRemainingFromNext())", span="728-728"];
d278 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: !group.IsLast && map[group.Next] == null", span="766-766"];
d245 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: option == null", span="701-701"];
d247 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: option.IsDefined = true", span="704-704"];
d248 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: ArgumentParser.EnsureOptionArrayAttributeIsNotBoundToScalar(option)", span="706-706"];
d249 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: !option.IsBoolean", span="708-708"];
d253 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: !option.IsArray", span="715-715"];
d256 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: this.DefineOptionThatViolatesFormat(option)", span="719-719"];
d258 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: ArgumentParser.EnsureOptionAttributeIsArrayCompatible(option)", span="725-725"];
d261 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: valueSetting = option.SetValue(items, options)", span="730-730"];
d263 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: this.DefineOptionThatViolatesFormat(option)", span="732-732"];
d267 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: !option.IsArray", span="742-742"];
d268 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: valueSetting = option.SetValue(argumentEnumerator.Next, options)", span="744-744"];
d270 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: this.DefineOptionThatViolatesFormat(option)", span="746-746"];
d272 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: ArgumentParser.EnsureOptionAttributeIsArrayCompatible(option)", span="752-752"];
d274 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: valueSetting = option.SetValue(items, options)", span="756-756"];
d276 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: this.DefineOptionThatViolatesFormat(option)", span="758-758"];
d280 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: !option.SetValue(true, options)", span="769-769"];
d251 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: return ParserState.Failure;", span="711-711"];
d255 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: !valueSetting", span="718-718"];
d257 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: return ArgumentParser.BooleanToParserState(valueSetting);", span="721-721"];
d259 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: var items = ArgumentParser.GetNextInputValues(argumentEnumerator)", span="727-727"];
d262 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: !valueSetting", span="731-731"];
d264 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: return ArgumentParser.BooleanToParserState(valueSetting, true);", span="734-734"];
d265 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: !argumentEnumerator.IsLast && !ArgumentParser.IsInputValue(argumentEnumerator.Next)", span="738-738"];
d266 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: return ParserState.Failure;", span="739-739"];
d269 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: !valueSetting", span="745-745"];
d271 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: return ArgumentParser.BooleanToParserState(valueSetting, true);", span="748-748"];
d273 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: var items = ArgumentParser.GetNextInputValues(argumentEnumerator)", span="754-754"];
d275 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: !valueSetting", span="757-757"];
d277 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: return ArgumentParser.BooleanToParserState(valueSetting);", span="760-760"];
d279 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: return ParserState.Failure;", span="767-767"];
d281 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: return ParserState.Failure;", span="770-770"];
d282 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: return ParserState.Success;", span="774-774"];
d246 [cluster="CommandLine.OptionGroupParser.Parse(CommandLine.IArgumentEnumerator, CommandLine.OptionMap, object)", color=green, community=0, label="0: return ParserState.Failure;", span="702-702"];
d285 [cluster="CommandLine.OptionInfo.OptionInfo(CommandLine.OptionAttribute, System.Reflection.PropertyInfo)", color=green, community=0, label="0: attribute != null", span="792-792"];
d286 [cluster="CommandLine.OptionInfo.OptionInfo(CommandLine.OptionAttribute, System.Reflection.PropertyInfo)", color=green, community=0, label="0: _required = attribute.Required", span="794-794"];
d292 [cluster="CommandLine.OptionInfo.OptionInfo(CommandLine.OptionAttribute, System.Reflection.PropertyInfo)", color=green, community=0, label="0: throw new ArgumentNullException(''attribute'', ''The attribute is mandatory'');", span="802-802"];
d287 [cluster="CommandLine.OptionInfo.OptionInfo(CommandLine.OptionAttribute, System.Reflection.PropertyInfo)", color=green, community=0, label="0: _helpText = attribute.HelpText", span="795-795"];
d288 [cluster="CommandLine.OptionInfo.OptionInfo(CommandLine.OptionAttribute, System.Reflection.PropertyInfo)", color=green, community=0, label="0: _shortName = attribute.ShortName", span="796-796"];
d289 [cluster="CommandLine.OptionInfo.OptionInfo(CommandLine.OptionAttribute, System.Reflection.PropertyInfo)", color=green, community=0, label="0: _longName = attribute.LongName", span="797-797"];
d290 [cluster="CommandLine.OptionInfo.OptionInfo(CommandLine.OptionAttribute, System.Reflection.PropertyInfo)", color=green, community=0, label="0: _mutuallyExclusiveSet = attribute.MutuallyExclusiveSet", span="798-798"];
d291 [cluster="CommandLine.OptionInfo.OptionInfo(CommandLine.OptionAttribute, System.Reflection.PropertyInfo)", color=green, community=0, label="0: _attribute = attribute", span="799-799"];
d293 [cluster="CommandLine.OptionInfo.OptionInfo(CommandLine.OptionAttribute, System.Reflection.PropertyInfo)", color=green, community=0, label="0: property != null", span="804-804"];
d294 [cluster="CommandLine.OptionInfo.OptionInfo(CommandLine.OptionAttribute, System.Reflection.PropertyInfo)", color=green, community=0, label="0: _property = property", span="805-805"];
d295 [cluster="CommandLine.OptionInfo.OptionInfo(CommandLine.OptionAttribute, System.Reflection.PropertyInfo)", color=green, community=0, label="0: throw new ArgumentNullException(''property'', ''The property is mandatory'');", span="807-807"];
d299 [cluster="CommandLine.OptionInfo.CreateMap(object, CommandLine.CommandLineParserSettings)", color=green, community=0, label="0: var list = ReflectionUtil.RetrievePropertyList<OptionAttribute>(target)", span="820-820"];
d300 [cluster="CommandLine.OptionInfo.CreateMap(object, CommandLine.CommandLineParserSettings)", color=green, community=0, label="0: list != null", span="821-821"];
d301 [cluster="CommandLine.OptionInfo.CreateMap(object, CommandLine.CommandLineParserSettings)", color=green, community=0, label="0: var map = new OptionMap(list.Count, settings)", span="823-823"];
d302 [cluster="CommandLine.OptionInfo.CreateMap(object, CommandLine.CommandLineParserSettings)", color=green, community=0, label="0: list", span="825-825"];
d304 [cluster="CommandLine.OptionInfo.CreateMap(object, CommandLine.CommandLineParserSettings)", color=green, community=0, label="0: map[pair.Right.UniqueName] = new OptionInfo(pair.Right, pair.Left)", span="828-828"];
d305 [cluster="CommandLine.OptionInfo.CreateMap(object, CommandLine.CommandLineParserSettings)", color=green, community=0, label="0: map.RawOptions = target", span="831-831"];
d306 [cluster="CommandLine.OptionInfo.CreateMap(object, CommandLine.CommandLineParserSettings)", color=green, community=0, label="0: return map;", span="833-833"];
d307 [cluster="CommandLine.OptionInfo.CreateMap(object, CommandLine.CommandLineParserSettings)", color=green, community=0, label="0: return null;", span="836-836"];
d303 [cluster="CommandLine.OptionInfo.CreateMap(object, CommandLine.CommandLineParserSettings)", color=green, community=0, label="0: pair != null && pair.Right != null", span="827-827"];
d310 [cluster="CommandLine.OptionInfo.SetValue(string, object)", color=green, community=0, label="0: _attribute is OptionListAttribute", span="841-841"];
d311 [cluster="CommandLine.OptionInfo.SetValue(string, object)", color=green, community=0, label="0: return SetValueList(value, options);", span="842-842"];
d312 [cluster="CommandLine.OptionInfo.SetValue(string, object)", color=green, community=0, label="0: ReflectionUtil.IsNullableType(_property.PropertyType)", span="844-844"];
d313 [cluster="CommandLine.OptionInfo.SetValue(string, object)", color=green, community=0, label="0: return SetNullableValue(value, options);", span="845-845"];
d314 [cluster="CommandLine.OptionInfo.SetValue(string, object)", color=green, community=0, label="0: return SetValueScalar(value, options);", span="847-847"];
d320 [cluster="CommandLine.OptionInfo.SetValue(System.Collections.Generic.IList<string>, object)", color=green, community=0, label="0: Type elementType = _property.PropertyType.GetElementType()", span="852-852"];
d321 [cluster="CommandLine.OptionInfo.SetValue(System.Collections.Generic.IList<string>, object)", color=green, community=0, label="0: Array array = Array.CreateInstance(elementType, values.Count)", span="853-853"];
d325 [cluster="CommandLine.OptionInfo.SetValue(System.Collections.Generic.IList<string>, object)", color=green, community=0, label="1: array.SetValue(Convert.ChangeType(values[i], elementType, CultureInfo.InvariantCulture), i)", span="861-861"];
d322 [cluster="CommandLine.OptionInfo.SetValue(System.Collections.Generic.IList<string>, object)", color=green, community=0, label="0: int i = 0", span="855-855"];
d323 [cluster="CommandLine.OptionInfo.SetValue(System.Collections.Generic.IList<string>, object)", color=green, community=0, label="0: i < array.Length", span="855-855"];
d326 [cluster="CommandLine.OptionInfo.SetValue(System.Collections.Generic.IList<string>, object)", color=green, community=0, label="0: _property.SetValue(options, array, null)", span="862-862"];
d324 [cluster="CommandLine.OptionInfo.SetValue(System.Collections.Generic.IList<string>, object)", color=green, community=0, label="0: _setValueLock", span="859-859"];
d327 [cluster="CommandLine.OptionInfo.SetValue(System.Collections.Generic.IList<string>, object)", color=green, community=0, label="0: FormatException", span="865-865"];
d329 [cluster="CommandLine.OptionInfo.SetValue(System.Collections.Generic.IList<string>, object)", color=green, community=0, label="1: i++", span="855-855"];
d367 [cluster="CommandLine.OptionInfo.SetValueList(string, object)", color=green, community=0, label="1: int i = 0", span="949-949"];
d585 [cluster="CommandLine.CommandLineParser.ParseHelp(string[], CommandLine.HelpOptionAttribute)", color=green, community=0, label="0: i < args.Length", span="1708-1708"];
d330 [cluster="CommandLine.OptionInfo.SetValue(System.Collections.Generic.IList<string>, object)", color=green, community=0, label="0: return true;", span="871-871"];
d328 [cluster="CommandLine.OptionInfo.SetValue(System.Collections.Generic.IList<string>, object)", color=green, community=0, label="0: return false;", span="867-867"];
d336 [cluster="CommandLine.OptionInfo.SetValueScalar(string, object)", color=green, community=0, label="0: _property.PropertyType.IsEnum", span="878-878"];
d337 [cluster="CommandLine.OptionInfo.SetValueScalar(string, object)", color=green, community=0, label="0: _setValueLock", span="880-880"];
d339 [cluster="CommandLine.OptionInfo.SetValueScalar(string, object)", color=green, community=0, label="0: _setValueLock", span="887-887"];
d338 [cluster="CommandLine.OptionInfo.SetValueScalar(string, object)", color=green, community=0, label="0: _property.SetValue(options, Enum.Parse(_property.PropertyType, value, true), null)", span="882-882"];
d341 [cluster="CommandLine.OptionInfo.SetValueScalar(string, object)", color=green, community=0, label="0: InvalidCastException", span="893-893"];
d343 [cluster="CommandLine.OptionInfo.SetValueScalar(string, object)", color=green, community=0, label="0: FormatException", span="897-897"];
d345 [cluster="CommandLine.OptionInfo.SetValueScalar(string, object)", color=green, community=0, label="0: ArgumentException", span="901-901"];
d347 [cluster="CommandLine.OptionInfo.SetValueScalar(string, object)", color=green, community=0, label="0: return true;", span="906-906"];
d340 [cluster="CommandLine.OptionInfo.SetValueScalar(string, object)", color=green, community=0, label="0: _property.SetValue(options, Convert.ChangeType(value, _property.PropertyType, CultureInfo.InvariantCulture), null)", span="889-889"];
d342 [cluster="CommandLine.OptionInfo.SetValueScalar(string, object)", color=green, community=0, label="0: return false;", span="895-895"];
d344 [cluster="CommandLine.OptionInfo.SetValueScalar(string, object)", color=green, community=0, label="0: return false;", span="899-899"];
d346 [cluster="CommandLine.OptionInfo.SetValueScalar(string, object)", color=green, community=0, label="0: return false;", span="903-903"];
d350 [cluster="CommandLine.OptionInfo.SetNullableValue(string, object)", color=green, community=0, label="0: var nc = new NullableConverter(_property.PropertyType)", span="911-911"];
d351 [cluster="CommandLine.OptionInfo.SetNullableValue(string, object)", color=green, community=0, label="0: _setValueLock", span="915-915"];
d352 [cluster="CommandLine.OptionInfo.SetNullableValue(string, object)", color=green, community=0, label="0: _property.SetValue(options, nc.ConvertFromString(null, CultureInfo.InvariantCulture, value), null)", span="917-917"];
d353 [cluster="CommandLine.OptionInfo.SetNullableValue(string, object)", color=green, community=1, label="0: Exception", span="922-922"];
d355 [cluster="CommandLine.OptionInfo.SetNullableValue(string, object)", color=green, community=0, label="0: return true;", span="927-927"];
d354 [cluster="CommandLine.OptionInfo.SetNullableValue(string, object)", color=green, community=0, label="0: return false;", span="924-924"];
d359 [cluster="CommandLine.OptionInfo.SetValue(bool, object)", color=green, community=0, label="0: _setValueLock", span="932-932"];
d360 [cluster="CommandLine.OptionInfo.SetValue(bool, object)", color=green, community=0, label="0: _property.SetValue(options, value, null)", span="934-934"];
d361 [cluster="CommandLine.OptionInfo.SetValue(bool, object)", color=green, community=0, label="0: return true;", span="936-936"];
d363 [cluster="CommandLine.OptionInfo.SetValueList(string, object)", color=green, community=0, label="0: _setValueLock", span="942-942"];
d364 [cluster="CommandLine.OptionInfo.SetValueList(string, object)", color=green, community=0, label="0: _property.SetValue(options, new List<string>(), null)", span="944-944"];
d365 [cluster="CommandLine.OptionInfo.SetValueList(string, object)", color=green, community=0, label="0: var fieldRef = (IList<string>)_property.GetValue(options, null)", span="946-946"];
d366 [cluster="CommandLine.OptionInfo.SetValueList(string, object)", color=green, community=0, label="0: var values = value.Split(((OptionListAttribute)_attribute).Separator)", span="947-947"];
d369 [cluster="CommandLine.OptionInfo.SetValueList(string, object)", color=green, community=0, label="0: fieldRef.Add(values[i])", span="951-951"];
d368 [cluster="CommandLine.OptionInfo.SetValueList(string, object)", color=green, community=0, label="0: i < values.Length", span="949-949"];
d370 [cluster="CommandLine.OptionInfo.SetValueList(string, object)", color=green, community=0, label="0: i++", span="949-949"];
d371 [cluster="CommandLine.OptionInfo.SetValueList(string, object)", color=green, community=0, label="0: return true;", span="954-954"];
d375 [cluster="CommandLine.OptionMap.MutuallyExclusiveInfo.MutuallyExclusiveInfo(CommandLine.OptionInfo)", color=green, community=0, label="0: BadOption = option", span="1026-1026"];
d378 [cluster="CommandLine.OptionMap.MutuallyExclusiveInfo.IncrementOccurrence()", color=green, community=0, label="0: ++count", span="1032-1032"];
d380 [cluster="CommandLine.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", color=green, community=0, label="0: _settings = settings", span="1045-1045"];
d381 [cluster="CommandLine.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", color=green, community=0, label="0: IEqualityComparer<string> comparer", span="1047-1047"];
d385 [cluster="CommandLine.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", color=green, community=0, label="0: _names = new Dictionary<string, string>(capacity, comparer)", span="1053-1053"];
d383 [cluster="CommandLine.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", color=green, community=0, label="0: comparer = StringComparer.Ordinal", span="1049-1049"];
d384 [cluster="CommandLine.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", color=green, community=0, label="0: comparer = StringComparer.OrdinalIgnoreCase", span="1051-1051"];
d386 [cluster="CommandLine.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", color=green, community=0, label="0: _map = new Dictionary<string, OptionInfo>(capacity * 2, comparer)", span="1054-1054"];
d387 [cluster="CommandLine.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", color=green, community=0, label="0: _settings.MutuallyExclusive", span="1056-1056"];
d388 [cluster="CommandLine.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", color=green, community=0, label="0: _mutuallyExclusiveSetMap = new Dictionary<string, MutuallyExclusiveInfo>(capacity, StringComparer.OrdinalIgnoreCase)", span="1059-1059"];
d382 [cluster="CommandLine.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", color=green, community=0, label="0: _settings.CaseSensitive", span="1048-1048"];
d392 [cluster="CommandLine.OptionMap.EnforceRules()", color=green, community=0, label="0: return EnforceMutuallyExclusiveMap() && EnforceRequiredRule();", span="1096-1096"];
d396 [cluster="CommandLine.OptionMap.EnforceRequiredRule()", color=green, community=0, label="0: _map.Values", span="1101-1101"];
d397 [cluster="CommandLine.OptionMap.EnforceRequiredRule()", color=green, community=0, label="0: option.Required && !option.IsDefined", span="1103-1103"];
d400 [cluster="CommandLine.OptionMap.EnforceRequiredRule()", color=green, community=0, label="0: return true;", span="1109-1109"];
d398 [cluster="CommandLine.OptionMap.EnforceRequiredRule()", color=green, community=0, label="0: BuildAndSetPostParsingStateIfNeeded(this.RawOptions, option, true, null)", span="1105-1105"];
d399 [cluster="CommandLine.OptionMap.EnforceRequiredRule()", color=green, community=0, label="0: return false;", span="1106-1106"];
d403 [cluster="CommandLine.OptionMap.EnforceMutuallyExclusiveMap()", color=green, community=0, label="0: !_settings.MutuallyExclusive", span="1114-1114"];
d404 [cluster="CommandLine.OptionMap.EnforceMutuallyExclusiveMap()", color=green, community=0, label="0: return true;", span="1115-1115"];
d405 [cluster="CommandLine.OptionMap.EnforceMutuallyExclusiveMap()", color=green, community=0, label="0: _map.Values", span="1117-1117"];
d406 [cluster="CommandLine.OptionMap.EnforceMutuallyExclusiveMap()", color=green, community=0, label="0: option.IsDefined && option.MutuallyExclusiveSet != null", span="1119-1119"];
d407 [cluster="CommandLine.OptionMap.EnforceMutuallyExclusiveMap()", color=green, community=0, label="0: BuildMutuallyExclusiveMap(option)", span="1120-1120"];
d408 [cluster="CommandLine.OptionMap.EnforceMutuallyExclusiveMap()", color=green, community=1, label="0: _mutuallyExclusiveSetMap.Values", span="1124-1124"];
d409 [cluster="CommandLine.OptionMap.EnforceMutuallyExclusiveMap()", color=green, community=0, label="0: info.Occurrence > 1", span="1126-1126"];
d412 [cluster="CommandLine.OptionMap.EnforceMutuallyExclusiveMap()", color=green, community=0, label="0: return true;", span="1134-1134"];
d410 [cluster="CommandLine.OptionMap.EnforceMutuallyExclusiveMap()", color=green, community=0, label="0: BuildAndSetPostParsingStateIfNeeded(this.RawOptions, info.BadOption, null, true)", span="1129-1129"];
d411 [cluster="CommandLine.OptionMap.EnforceMutuallyExclusiveMap()", color=green, community=0, label="0: return false;", span="1130-1130"];
d415 [cluster="CommandLine.OptionMap.BuildMutuallyExclusiveMap(CommandLine.OptionInfo)", color=green, community=0, label="0: var setName = option.MutuallyExclusiveSet", span="1139-1139"];
d416 [cluster="CommandLine.OptionMap.BuildMutuallyExclusiveMap(CommandLine.OptionInfo)", color=green, community=0, label="0: !_mutuallyExclusiveSetMap.ContainsKey(setName)", span="1141-1141"];
d417 [cluster="CommandLine.OptionMap.BuildMutuallyExclusiveMap(CommandLine.OptionInfo)", color=green, community=0, label="0: _mutuallyExclusiveSetMap.Add(setName, new MutuallyExclusiveInfo(option))", span="1144-1144"];
d418 [cluster="CommandLine.OptionMap.BuildMutuallyExclusiveMap(CommandLine.OptionInfo)", color=green, community=0, label="0: _mutuallyExclusiveSetMap[setName].IncrementOccurrence()", span="1148-1148"];
d422 [cluster="CommandLine.OptionMap.BuildAndSetPostParsingStateIfNeeded(object, CommandLine.OptionInfo, bool?, bool?)", color=green, community=0, label="0: options is CommandLineOptionsBase", span="1153-1153"];
d423 [cluster="CommandLine.OptionMap.BuildAndSetPostParsingStateIfNeeded(object, CommandLine.OptionInfo, bool?, bool?)", color=green, community=0, label="0: ParsingError error = new ParsingError()", span="1155-1155"];
d424 [cluster="CommandLine.OptionMap.BuildAndSetPostParsingStateIfNeeded(object, CommandLine.OptionInfo, bool?, bool?)", color=green, community=0, label="0: error.BadOption.ShortName = option.ShortName", span="1158-1158"];
d425 [cluster="CommandLine.OptionMap.BuildAndSetPostParsingStateIfNeeded(object, CommandLine.OptionInfo, bool?, bool?)", color=green, community=0, label="0: error.BadOption.LongName = option.LongName", span="1159-1159"];
d426 [cluster="CommandLine.OptionMap.BuildAndSetPostParsingStateIfNeeded(object, CommandLine.OptionInfo, bool?, bool?)", color=green, community=0, label="0: required != null", span="1161-1161"];
d427 [cluster="CommandLine.OptionMap.BuildAndSetPostParsingStateIfNeeded(object, CommandLine.OptionInfo, bool?, bool?)", color=green, community=0, label="0: error.ViolatesRequired = required.Value", span="1161-1161"];
d428 [cluster="CommandLine.OptionMap.BuildAndSetPostParsingStateIfNeeded(object, CommandLine.OptionInfo, bool?, bool?)", color=green, community=0, label="0: mutualExclusiveness != null", span="1162-1162"];
d429 [cluster="CommandLine.OptionMap.BuildAndSetPostParsingStateIfNeeded(object, CommandLine.OptionInfo, bool?, bool?)", color=green, community=0, label="0: error.ViolatesMutualExclusiveness = mutualExclusiveness.Value", span="1162-1162"];
d430 [cluster="CommandLine.OptionMap.BuildAndSetPostParsingStateIfNeeded(object, CommandLine.OptionInfo, bool?, bool?)", color=green, community=0, label="0: ((CommandLineOptionsBase)options).InternalLastPostParsingState.Errors.Add(error)", span="1164-1164"];
d434 [cluster="CommandLine.Pair<TLeft, TRight>.Pair(TLeft, TRight)", color=green, community=0, label="0: _left = left", span="1176-1176"];
d435 [cluster="CommandLine.Pair<TLeft, TRight>.Pair(TLeft, TRight)", color=green, community=0, label="0: _right = right", span="1177-1177"];
d438 [cluster="CommandLine.Pair<TLeft, TRight>.GetHashCode()", color=green, community=0, label="0: int leftHash = (_left == null ? 0 : _left.GetHashCode())", span="1192-1192"];
d439 [cluster="CommandLine.Pair<TLeft, TRight>.GetHashCode()", color=green, community=0, label="0: int rightHash = (_right == null ? 0 : _right.GetHashCode())", span="1193-1193"];
d440 [cluster="CommandLine.Pair<TLeft, TRight>.GetHashCode()", color=green, community=0, label="0: return leftHash ^ rightHash;", span="1195-1195"];
d444 [cluster="CommandLine.Pair<TLeft, TRight>.Equals(object)", color=green, community=0, label="0: var other = obj as Pair<TLeft, TRight>", span="1200-1200"];
d445 [cluster="CommandLine.Pair<TLeft, TRight>.Equals(object)", color=green, community=0, label="0: other == null", span="1202-1202"];
d447 [cluster="CommandLine.Pair<TLeft, TRight>.Equals(object)", color=green, community=0, label="0: return Equals(_left, other._left) && Equals(_right, other._right);", span="1205-1205"];
d446 [cluster="CommandLine.Pair<TLeft, TRight>.Equals(object)", color=green, community=0, label="0: return false;", span="1203-1203"];
d450 [cluster="CommandLine.ParsingError.ParsingError()", color=green, community=0, label="0: this.BadOption = new BadOptionInfo()", span="1216-1216"];
d452 [cluster="CommandLine.ParsingError.ParsingError(string, string, bool)", color=green, community=0, label="0: this.BadOption = new BadOptionInfo(shortName, longName)", span="1223-1223"];
d453 [cluster="CommandLine.ParsingError.ParsingError(string, string, bool)", color=green, community=0, label="0: this.ViolatesFormat = format", span="1225-1225"];
d456 [cluster="CommandLine.PostParsingState.PostParsingState()", color=green, community=0, label="0: Errors = new List<ParsingError>()", span="1269-1269"];
d459 [cluster="CommandLine.StringArrayEnumerator.StringArrayEnumerator(string[])", color=green, community=0, label="0: Assumes.NotNull(value, ''value'')", span="1289-1289"];
d460 [cluster="CommandLine.StringArrayEnumerator.StringArrayEnumerator(string[])", color=green, community=0, label="0: _data = value", span="1291-1291"];
d461 [cluster="CommandLine.StringArrayEnumerator.StringArrayEnumerator(string[])", color=green, community=0, label="0: _index = -1", span="1292-1292"];
d462 [cluster="CommandLine.StringArrayEnumerator.StringArrayEnumerator(string[])", color=green, community=0, label="0: _endIndex = value.Length", span="1293-1293"];
d466 [cluster="CommandLine.StringArrayEnumerator.Reset()", color=green, community=0, label="0: _index = -1", span="1339-1339"];
d469 [cluster="CommandLine.StringArrayEnumerator.MoveNext()", color=green, community=0, label="0: _index < _endIndex", span="1344-1344"];
d470 [cluster="CommandLine.StringArrayEnumerator.MoveNext()", color=green, community=0, label="0: _index++", span="1346-1346"];
d472 [cluster="CommandLine.StringArrayEnumerator.MoveNext()", color=green, community=0, label="0: return false;", span="1349-1349"];
d471 [cluster="CommandLine.StringArrayEnumerator.MoveNext()", color=green, community=0, label="0: return _index < _endIndex;", span="1347-1347"];
d475 [cluster="CommandLine.StringArrayEnumerator.GetRemainingFromNext()", color=green, community=0, label="0: throw new NotSupportedException();", span="1354-1354"];
d478 [cluster="CommandLine.StringArrayEnumerator.MovePrevious()", color=green, community=0, label="0: _index <= 0", span="1359-1359"];
d479 [cluster="CommandLine.StringArrayEnumerator.MovePrevious()", color=green, community=0, label="0: throw new InvalidOperationException();", span="1361-1361"];
d480 [cluster="CommandLine.StringArrayEnumerator.MovePrevious()", color=green, community=0, label="0: _index <= _endIndex", span="1363-1363"];
d481 [cluster="CommandLine.StringArrayEnumerator.MovePrevious()", color=green, community=0, label="0: _index--", span="1365-1365"];
d483 [cluster="CommandLine.StringArrayEnumerator.MovePrevious()", color=green, community=0, label="0: return false;", span="1368-1368"];
d482 [cluster="CommandLine.StringArrayEnumerator.MovePrevious()", color=green, community=0, label="0: return _index <= _endIndex;", span="1366-1366"];
d488 [cluster="CommandLine.TargetWrapper.TargetWrapper(object)", color=green, community=0, label="0: _target = target", span="1384-1384"];
d489 [cluster="CommandLine.TargetWrapper.TargetWrapper(object)", color=green, community=0, label="0: _vla = ValueListAttribute.GetAttribute(_target)", span="1385-1385"];
d490 [cluster="CommandLine.TargetWrapper.TargetWrapper(object)", color=green, community=0, label="0: IsValueListDefined", span="1386-1386"];
d491 [cluster="CommandLine.TargetWrapper.TargetWrapper(object)", color=green, community=0, label="0: _valueList = ValueListAttribute.GetReference(_target)", span="1387-1387"];
d494 [cluster="CommandLine.TargetWrapper.AddValueItemIfAllowed(string)", color=green, community=0, label="0: _vla.MaximumElements == 0 || _valueList.Count == _vla.MaximumElements", span="1394-1394"];
d495 [cluster="CommandLine.TargetWrapper.AddValueItemIfAllowed(string)", color=green, community=0, label="0: return false;", span="1395-1395"];
d496 [cluster="CommandLine.TargetWrapper.AddValueItemIfAllowed(string)", color=green, community=0, label="0: this", span="1397-1397"];
d497 [cluster="CommandLine.TargetWrapper.AddValueItemIfAllowed(string)", color=green, community=0, label="0: _valueList.Add(item)", span="1399-1399"];
d498 [cluster="CommandLine.TargetWrapper.AddValueItemIfAllowed(string)", color=green, community=0, label="0: return true;", span="1402-1402"];
d505 [cluster="CommandLine.CommandLineOptionsBase.CommandLineOptionsBase()", color=green, community=0, label="0: LastPostParsingState = new PostParsingState()", span="1448-1448"];
d516 [cluster="CommandLine.CommandLineParserSettings.CommandLineParserSettings(bool)", color=green, community=0, label="0: CaseSensitive = caseSensitive", span="1508-1508"];
d519 [cluster="CommandLine.CommandLineParserSettings.CommandLineParserSettings(System.IO.TextWriter)", color=green, community=0, label="0: HelpWriter = helpWriter", span="1520-1520"];
d522 [cluster="CommandLine.CommandLineParserSettings.CommandLineParserSettings(bool, System.IO.TextWriter)", color=green, community=0, label="0: CaseSensitive = caseSensitive", span="1532-1532"];
d523 [cluster="CommandLine.CommandLineParserSettings.CommandLineParserSettings(bool, System.IO.TextWriter)", color=green, community=0, label="0: HelpWriter = helpWriter", span="1533-1533"];
d526 [cluster="CommandLine.CommandLineParserSettings.CommandLineParserSettings(bool, bool)", color=green, community=0, label="0: CaseSensitive = caseSensitive", span="1544-1544"];
d527 [cluster="CommandLine.CommandLineParserSettings.CommandLineParserSettings(bool, bool)", color=green, community=0, label="0: MutuallyExclusive = mutuallyExclusive", span="1545-1545"];
d530 [cluster="CommandLine.CommandLineParserSettings.CommandLineParserSettings(bool, bool, System.IO.TextWriter)", color=green, community=0, label="0: CaseSensitive = caseSensitive", span="1558-1558"];
d531 [cluster="CommandLine.CommandLineParserSettings.CommandLineParserSettings(bool, bool, System.IO.TextWriter)", color=green, community=0, label="0: MutuallyExclusive = mutuallyExclusive", span="1559-1559"];
d532 [cluster="CommandLine.CommandLineParserSettings.CommandLineParserSettings(bool, bool, System.IO.TextWriter)", color=green, community=0, label="0: HelpWriter = helpWriter", span="1560-1560"];
d535 [cluster="CommandLine.CommandLineParser.CommandLineParser()", color=green, community=0, label="0: _settings = new CommandLineParserSettings()", span="1595-1595"];
d538 [cluster="CommandLine.CommandLineParser.CommandLineParser(CommandLine.CommandLineParserSettings)", color=green, community=0, label="0: Assumes.NotNull(settings, ''settings'')", span="1606-1606"];
d539 [cluster="CommandLine.CommandLineParser.CommandLineParser(CommandLine.CommandLineParserSettings)", color=green, community=0, label="0: _settings = settings", span="1608-1608"];
d542 [cluster="CommandLine.CommandLineParser.ParseArguments(string[], object)", color=green, community=0, label="0: return ParseArguments(args, options, _settings.HelpWriter);", span="1623-1623"];
d545 [cluster="CommandLine.CommandLineParser.ParseArguments(string[], object, System.IO.TextWriter)", color=green, community=0, label="0: Assumes.NotNull(args, ''args'')", span="1641-1641"];
d546 [cluster="CommandLine.CommandLineParser.ParseArguments(string[], object, System.IO.TextWriter)", color=green, community=0, label="0: Assumes.NotNull(options, ''options'')", span="1642-1642"];
d547 [cluster="CommandLine.CommandLineParser.ParseArguments(string[], object, System.IO.TextWriter)", color=green, community=0, label="0: var pair = ReflectionUtil.RetrieveMethod<HelpOptionAttribute>(options)", span="1644-1644"];
d548 [cluster="CommandLine.CommandLineParser.ParseArguments(string[], object, System.IO.TextWriter)", color=green, community=0, label="0: pair != null && helpWriter != null", span="1646-1646"];
d549 [cluster="CommandLine.CommandLineParser.ParseArguments(string[], object, System.IO.TextWriter)", color=green, community=0, label="0: ParseHelp(args, pair.Right) || !DoParseArguments(args, options)", span="1648-1648"];
d551 [cluster="CommandLine.CommandLineParser.ParseArguments(string[], object, System.IO.TextWriter)", color=green, community=0, label="0: HelpOptionAttribute.InvokeMethod(options, pair, out helpText)", span="1651-1651"];
d555 [cluster="CommandLine.CommandLineParser.ParseArguments(string[], object, System.IO.TextWriter)", color=green, community=0, label="0: return DoParseArguments(args, options);", span="1658-1658"];
d550 [cluster="CommandLine.CommandLineParser.ParseArguments(string[], object, System.IO.TextWriter)", color=green, community=0, label="0: string helpText", span="1650-1650"];
d554 [cluster="CommandLine.CommandLineParser.ParseArguments(string[], object, System.IO.TextWriter)", color=green, community=0, label="0: return true;", span="1655-1655"];
d552 [cluster="CommandLine.CommandLineParser.ParseArguments(string[], object, System.IO.TextWriter)", color=green, community=0, label="0: helpWriter.Write(helpText)", span="1652-1652"];
d553 [cluster="CommandLine.CommandLineParser.ParseArguments(string[], object, System.IO.TextWriter)", color=green, community=0, label="0: return false;", span="1653-1653"];
d561 [cluster="CommandLine.CommandLineParser.DoParseArguments(string[], object)", color=green, community=0, label="0: bool hadError = false", span="1663-1663"];
d562 [cluster="CommandLine.CommandLineParser.DoParseArguments(string[], object)", color=green, community=0, label="0: var optionMap = OptionInfo.CreateMap(options, _settings)", span="1664-1664"];
d579 [cluster="CommandLine.CommandLineParser.DoParseArguments(string[], object)", color=green, community=0, label="0: hadError |= !optionMap.EnforceRules()", span="1699-1699"];
d563 [cluster="CommandLine.CommandLineParser.DoParseArguments(string[], object)", color=green, community=0, label="0: var target = new TargetWrapper(options)", span="1665-1665"];
d570 [cluster="CommandLine.CommandLineParser.DoParseArguments(string[], object)", color=green, community=0, label="0: ParserState result = parser.Parse(arguments, optionMap, options)", span="1676-1676"];
d564 [cluster="CommandLine.CommandLineParser.DoParseArguments(string[], object)", color=green, community=0, label="0: IArgumentEnumerator arguments = new StringArrayEnumerator(args)", span="1667-1667"];
d576 [cluster="CommandLine.CommandLineParser.DoParseArguments(string[], object)", color=green, community=0, label="0: target.IsValueListDefined", span="1687-1687"];
d577 [cluster="CommandLine.CommandLineParser.DoParseArguments(string[], object)", color=green, community=0, label="0: !target.AddValueItemIfAllowed(argument)", span="1689-1689"];
d565 [cluster="CommandLine.CommandLineParser.DoParseArguments(string[], object)", color=green, community=0, label="0: arguments.MoveNext()", span="1668-1668"];
d566 [cluster="CommandLine.CommandLineParser.DoParseArguments(string[], object)", color=green, community=0, label="0: string argument = arguments.Current", span="1670-1670"];
d575 [cluster="CommandLine.CommandLineParser.DoParseArguments(string[], object)", color=green, community=1, label="0: arguments.MoveNext()", span="1685-1685"];
d568 [cluster="CommandLine.CommandLineParser.DoParseArguments(string[], object)", color=green, community=0, label="0: ArgumentParser parser = ArgumentParser.Create(argument)", span="1673-1673"];
d569 [cluster="CommandLine.CommandLineParser.DoParseArguments(string[], object)", color=green, community=0, label="0: parser != null", span="1674-1674"];
d571 [cluster="CommandLine.CommandLineParser.DoParseArguments(string[], object)", color=green, community=0, label="0: (result & ParserState.Failure) == ParserState.Failure", span="1677-1677"];
d574 [cluster="CommandLine.CommandLineParser.DoParseArguments(string[], object)", color=green, community=0, label="0: (result & ParserState.MoveOnNextElement) == ParserState.MoveOnNextElement", span="1684-1684"];
d572 [cluster="CommandLine.CommandLineParser.DoParseArguments(string[], object)", color=green, community=0, label="0: SetPostParsingStateIfNeeded(options, parser.PostParsingState)", span="1679-1679"];
d573 [cluster="CommandLine.CommandLineParser.DoParseArguments(string[], object)", color=green, community=0, label="0: hadError = true", span="1680-1680"];
d578 [cluster="CommandLine.CommandLineParser.DoParseArguments(string[], object)", color=green, community=0, label="0: hadError = true", span="1691-1691"];
d580 [cluster="CommandLine.CommandLineParser.DoParseArguments(string[], object)", color=green, community=0, label="0: return !hadError;", span="1701-1701"];
d567 [cluster="CommandLine.CommandLineParser.DoParseArguments(string[], object)", color=green, community=0, label="0: argument != null && argument.Length > 0", span="1671-1671"];
d583 [cluster="CommandLine.CommandLineParser.ParseHelp(string[], CommandLine.HelpOptionAttribute)", color=green, community=0, label="0: bool caseSensitive = _settings.CaseSensitive", span="1706-1706"];
d584 [cluster="CommandLine.CommandLineParser.ParseHelp(string[], CommandLine.HelpOptionAttribute)", color=green, community=0, label="0: int i = 0", span="1708-1708"];
d587 [cluster="CommandLine.CommandLineParser.ParseHelp(string[], CommandLine.HelpOptionAttribute)", color=green, community=0, label="0: ArgumentParser.CompareShort(args[i], helpOption.ShortName, caseSensitive)", span="1712-1712"];
d590 [cluster="CommandLine.CommandLineParser.ParseHelp(string[], CommandLine.HelpOptionAttribute)", color=green, community=0, label="0: ArgumentParser.CompareLong(args[i], helpOption.LongName, caseSensitive)", span="1718-1718"];
d592 [cluster="CommandLine.CommandLineParser.ParseHelp(string[], CommandLine.HelpOptionAttribute)", color=green, community=0, label="0: i++", span="1708-1708"];
d586 [cluster="CommandLine.CommandLineParser.ParseHelp(string[], CommandLine.HelpOptionAttribute)", color=green, community=0, label="0: !string.IsNullOrEmpty(helpOption.ShortName)", span="1710-1710"];
d593 [cluster="CommandLine.CommandLineParser.ParseHelp(string[], CommandLine.HelpOptionAttribute)", color=green, community=0, label="0: return false;", span="1723-1723"];
d589 [cluster="CommandLine.CommandLineParser.ParseHelp(string[], CommandLine.HelpOptionAttribute)", color=green, community=0, label="0: !string.IsNullOrEmpty(helpOption.LongName)", span="1716-1716"];
d588 [cluster="CommandLine.CommandLineParser.ParseHelp(string[], CommandLine.HelpOptionAttribute)", color=green, community=0, label="0: return true;", span="1713-1713"];
d591 [cluster="CommandLine.CommandLineParser.ParseHelp(string[], CommandLine.HelpOptionAttribute)", color=green, community=0, label="0: return true;", span="1719-1719"];
d595 [cluster="CommandLine.CommandLineParser.SetPostParsingStateIfNeeded(object, System.Collections.Generic.List<CommandLine.ParsingError>)", color=green, community=0, label="0: options is CommandLineOptionsBase", span="1729-1729"];
d596 [cluster="CommandLine.CommandLineParser.SetPostParsingStateIfNeeded(object, System.Collections.Generic.List<CommandLine.ParsingError>)", color=green, community=0, label="0: ((CommandLineOptionsBase)options).InternalLastPostParsingState.Errors.AddRange(state)", span="1730-1730"];
d599 [cluster="CommandLine.Assumes.NotNull<T>(T, string)", color=green, community=0, label="0: value == null", span="1741-1741"];
d600 [cluster="CommandLine.Assumes.NotNull<T>(T, string)", color=green, community=0, label="0: throw new ArgumentNullException(paramName);", span="1742-1742"];
d602 [cluster="CommandLine.Assumes.NotNullOrEmpty(string, string)", color=green, community=0, label="0: string.IsNullOrEmpty(value)", span="1747-1747"];
d603 [cluster="CommandLine.Assumes.NotNullOrEmpty(string, string)", color=green, community=0, label="0: throw new ArgumentException(paramName);", span="1748-1748"];
d607 [cluster="CommandLine.Assumes.NotZeroLength<T>(T[], string)", color=green, community=0, label="0: array.Length == 0", span="1753-1753"];
d608 [cluster="CommandLine.Assumes.NotZeroLength<T>(T[], string)", color=green, community=0, label="0: throw new ArgumentOutOfRangeException(paramName);", span="1754-1754"];
d611 [cluster="CommandLine.ReflectionUtil.RetrievePropertyList<TAttribute>(object)", color=green, community=0, label="0: IList<Pair<PropertyInfo, TAttribute>> list = new List<Pair<PropertyInfo, TAttribute>>()", span="1763-1763"];
d612 [cluster="CommandLine.ReflectionUtil.RetrievePropertyList<TAttribute>(object)", color=green, community=0, label="0: target != null", span="1764-1764"];
d620 [cluster="CommandLine.ReflectionUtil.RetrievePropertyList<TAttribute>(object)", color=green, community=0, label="0: list.Add(new Pair<PropertyInfo, TAttribute>(property, (TAttribute)attribute))", span="1777-1777"];
d621 [cluster="CommandLine.ReflectionUtil.RetrievePropertyList<TAttribute>(object)", color=green, community=0, label="0: return list;", span="1783-1783"];
d613 [cluster="CommandLine.ReflectionUtil.RetrievePropertyList<TAttribute>(object)", color=green, community=0, label="0: var propertiesInfo = target.GetType().GetProperties()", span="1766-1766"];
d614 [cluster="CommandLine.ReflectionUtil.RetrievePropertyList<TAttribute>(object)", color=green, community=0, label="0: propertiesInfo", span="1768-1768"];
d618 [cluster="CommandLine.ReflectionUtil.RetrievePropertyList<TAttribute>(object)", color=green, community=0, label="0: var attribute = Attribute.GetCustomAttribute(property, typeof(TAttribute), false)", span="1775-1775"];
d619 [cluster="CommandLine.ReflectionUtil.RetrievePropertyList<TAttribute>(object)", color=green, community=0, label="0: attribute != null", span="1776-1776"];
d615 [cluster="CommandLine.ReflectionUtil.RetrievePropertyList<TAttribute>(object)", color=green, community=0, label="0: property != null && (property.CanRead && property.CanWrite)", span="1770-1770"];
d617 [cluster="CommandLine.ReflectionUtil.RetrievePropertyList<TAttribute>(object)", color=green, community=0, label="0: setMethod != null && !setMethod.IsStatic", span="1773-1773"];
d616 [cluster="CommandLine.ReflectionUtil.RetrievePropertyList<TAttribute>(object)", color=green, community=0, label="0: var setMethod = property.GetSetMethod()", span="1772-1772"];
d627 [cluster="CommandLine.ReflectionUtil.RetrieveMethod<TAttribute>(object)", color=green, community=0, label="0: var info = target.GetType().GetMethods()", span="1789-1789"];
d628 [cluster="CommandLine.ReflectionUtil.RetrieveMethod<TAttribute>(object)", color=green, community=0, label="0: info", span="1791-1791"];
d629 [cluster="CommandLine.ReflectionUtil.RetrieveMethod<TAttribute>(object)", color=green, community=0, label="0: !method.IsStatic", span="1793-1793"];
d631 [cluster="CommandLine.ReflectionUtil.RetrieveMethod<TAttribute>(object)", color=green, community=0, label="0: attribute != null", span="1797-1797"];
d633 [cluster="CommandLine.ReflectionUtil.RetrieveMethod<TAttribute>(object)", color=green, community=0, label="0: return null;", span="1802-1802"];
d630 [cluster="CommandLine.ReflectionUtil.RetrieveMethod<TAttribute>(object)", color=green, community=0, label="0: Attribute attribute =\r\n                        Attribute.GetCustomAttribute(method, typeof(TAttribute), false)", span="1795-1796"];
d632 [cluster="CommandLine.ReflectionUtil.RetrieveMethod<TAttribute>(object)", color=green, community=0, label="0: return new Pair<MethodInfo, TAttribute>(method, (TAttribute)attribute);", span="1798-1798"];
d637 [cluster="CommandLine.ReflectionUtil.RetrieveMethodAttributeOnly<TAttribute>(object)", color=green, community=0, label="0: var info = target.GetType().GetMethods()", span="1808-1808"];
d638 [cluster="CommandLine.ReflectionUtil.RetrieveMethodAttributeOnly<TAttribute>(object)", color=green, community=0, label="0: info", span="1810-1810"];
d639 [cluster="CommandLine.ReflectionUtil.RetrieveMethodAttributeOnly<TAttribute>(object)", color=green, community=0, label="0: !method.IsStatic", span="1812-1812"];
d641 [cluster="CommandLine.ReflectionUtil.RetrieveMethodAttributeOnly<TAttribute>(object)", color=green, community=0, label="0: attribute != null", span="1816-1816"];
d643 [cluster="CommandLine.ReflectionUtil.RetrieveMethodAttributeOnly<TAttribute>(object)", color=green, community=0, label="0: return null;", span="1821-1821"];
d640 [cluster="CommandLine.ReflectionUtil.RetrieveMethodAttributeOnly<TAttribute>(object)", color=green, community=0, label="0: Attribute attribute =\r\n                        Attribute.GetCustomAttribute(method, typeof(TAttribute), false)", span="1814-1815"];
d642 [cluster="CommandLine.ReflectionUtil.RetrieveMethodAttributeOnly<TAttribute>(object)", color=green, community=0, label="0: return (TAttribute)attribute;", span="1817-1817"];
d646 [cluster="CommandLine.ReflectionUtil.RetrievePropertyAttributeList<TAttribute>(object)", color=green, community=0, label="0: IList<TAttribute> list = new List<TAttribute>()", span="1827-1827"];
d647 [cluster="CommandLine.ReflectionUtil.RetrievePropertyAttributeList<TAttribute>(object)", color=green, community=0, label="0: var info = target.GetType().GetProperties()", span="1828-1828"];
d654 [cluster="CommandLine.ReflectionUtil.RetrievePropertyAttributeList<TAttribute>(object)", color=green, community=0, label="0: list.Add((TAttribute)attribute)", span="1839-1839"];
d655 [cluster="CommandLine.ReflectionUtil.RetrievePropertyAttributeList<TAttribute>(object)", color=green, community=0, label="0: return list;", span="1844-1844"];
d648 [cluster="CommandLine.ReflectionUtil.RetrievePropertyAttributeList<TAttribute>(object)", color=green, community=0, label="0: info", span="1830-1830"];
d652 [cluster="CommandLine.ReflectionUtil.RetrievePropertyAttributeList<TAttribute>(object)", color=green, community=0, label="0: var attribute = Attribute.GetCustomAttribute(property, typeof(TAttribute), false)", span="1837-1837"];
d653 [cluster="CommandLine.ReflectionUtil.RetrievePropertyAttributeList<TAttribute>(object)", color=green, community=0, label="0: attribute != null", span="1838-1838"];
d649 [cluster="CommandLine.ReflectionUtil.RetrievePropertyAttributeList<TAttribute>(object)", color=green, community=0, label="0: property != null && (property.CanRead && property.CanWrite)", span="1832-1832"];
d651 [cluster="CommandLine.ReflectionUtil.RetrievePropertyAttributeList<TAttribute>(object)", color=green, community=0, label="0: setMethod != null && !setMethod.IsStatic", span="1835-1835"];
d650 [cluster="CommandLine.ReflectionUtil.RetrievePropertyAttributeList<TAttribute>(object)", color=green, community=0, label="0: var setMethod = property.GetSetMethod()", span="1834-1834"];
d657 [cluster="CommandLine.ReflectionUtil.IsNullableType(System.Type)", color=green, community=0, label="0: return type.IsGenericType && type.GetGenericTypeDefinition().Equals(typeof(Nullable<>));", span="1849-1849"];
d662 [cluster="CommandLine.StringUtil.Spaces(int)", color=green, community=0, label="0: return new String(' ', count);", span="1879-1879"];
n6 -> n544  [color=darkorchid, key=3, label="Parameter variable object target", style=bold];
n13 -> n8  [color=red, key=3, label="Parameter variable System.Reflection.MethodInfo value", style=bold];
n13 -> d8  [color=green, key=3, label="Parameter variable System.Reflection.MethodInfo value", style=bold];
n52 -> n56  [color=red, key=3, label="method methodReturn System.Collections.Generic.IList<string> GetReference", style=bold];
n52 -> d56  [color=green, key=3, label="method methodReturn System.Collections.Generic.IList<string> GetReference", style=bold];
n60 -> n52  [color=darkorchid, key=3, label="Parameter variable object target", style=bold];
n60 -> n53  [color=red, key=3, label="Parameter variable System.Type concreteType", style=bold];
n60 -> n56  [color=red, key=3, label="method methodReturn System.Reflection.PropertyInfo GetProperty", style=bold];
n60 -> d53  [color=green, key=3, label="Parameter variable System.Type concreteType", style=bold];
n60 -> d56  [color=green, key=3, label="method methodReturn System.Reflection.PropertyInfo GetProperty", style=bold];
n64 -> n56  [color=red, key=3, label="method methodReturn CommandLine.ValueListAttribute GetAttribute", style=bold];
n64 -> d56  [color=green, key=3, label="method methodReturn CommandLine.ValueListAttribute GetAttribute", style=bold];
n73 -> n64  [color=darkorchid, key=3, label="Parameter variable object target", style=bold];
n73 -> n60  [color=darkorchid, key=3, label="Parameter variable object target", style=bold];
n73 -> n298  [color=darkorchid, key=3, label="Parameter variable object target", style=bold];
n88 -> n161  [color=darkorchid, key=3, label="method methodReturn CommandLine.ParserState Parse", style=bold];
n88 -> n240  [color=darkorchid, key=3, label="method methodReturn CommandLine.ParserState Parse", style=bold];
n88 -> n564  [color=red, key=3, label="Parameter variable CommandLine.IArgumentEnumerator argumentEnumerator", style=bold];
n88 -> n562  [color=red, key=3, label="Parameter variable CommandLine.OptionMap map", style=bold];
n88 -> n559  [color=darkorchid, key=3, label="Parameter variable object options", style=bold];
n88 -> d562  [color=green, key=3, label="Parameter variable CommandLine.OptionMap map", style=bold];
n88 -> d564  [color=green, key=3, label="Parameter variable CommandLine.IArgumentEnumerator argumentEnumerator", style=bold];
n90 -> n163  [color=red, key=3, label="Parameter variable CommandLine.OptionInfo option", style=bold];
n90 -> n244  [color=red, key=3, label="Parameter variable CommandLine.OptionInfo option", style=bold];
n90 -> d163  [color=green, key=3, label="Parameter variable CommandLine.OptionInfo option", style=bold];
n90 -> d244  [color=green, key=3, label="Parameter variable CommandLine.OptionInfo option", style=bold];
n95 -> n56  [color=red, key=3, label="method methodReturn CommandLine.ArgumentParser Create", style=bold];
n95 -> n566  [color=red, key=3, label="Parameter variable string argument", style=bold];
n95 -> d56  [color=green, key=3, label="method methodReturn CommandLine.ArgumentParser Create", style=bold];
n95 -> d566  [color=green, key=3, label="Parameter variable string argument", style=bold];
n107 -> n110  [color=red, key=3, label="method methodReturn bool IsInputValue", style=bold];
n107 -> d110  [color=green, key=3, label="method methodReturn bool IsInputValue", style=bold];
n112 -> n161  [color=darkorchid, key=3, label="Parameter variable CommandLine.IArgumentEnumerator ae", style=bold];
n112 -> n240  [color=darkorchid, key=3, label="Parameter variable CommandLine.IArgumentEnumerator ae", style=bold];
n121 -> n218  [color=darkorchid, key=3, label="method methodReturn bool MoveNext", style=bold];
n121 -> n468  [color=darkorchid, key=3, label="method methodReturn bool MoveNext", style=bold];
n123 -> n234  [color=darkorchid, key=3, label="method methodReturn bool MovePrevious", style=bold];
n123 -> n477  [color=darkorchid, key=3, label="method methodReturn bool MovePrevious", style=bold];
n125 -> n583  [color=red, key=3, label="Parameter variable bool caseSensitive", style=bold];
n125 -> d583  [color=green, key=3, label="Parameter variable bool caseSensitive", style=bold];
n129 -> n583  [color=red, key=3, label="Parameter variable bool caseSensitive", style=bold];
n129 -> d583  [color=green, key=3, label="Parameter variable bool caseSensitive", style=bold];
n132 -> n135  [color=darkorchid, key=3, label="method methodReturn CommandLine.ParserState BooleanToParserState", style=bold];
n132 -> n164  [color=red, key=3, label="Parameter variable bool value", style=bold];
n132 -> n241  [color=red, key=3, label="Parameter variable bool value", style=bold];
n132 -> d164  [color=green, key=3, label="Parameter variable bool value", style=bold];
n132 -> d241  [color=green, key=3, label="Parameter variable bool value", style=bold];
n135 -> n132  [color=darkorchid, key=3, label="Parameter variable bool value", style=bold];
n135 -> n164  [color=red, key=3, label="Parameter variable bool value", style=bold];
n135 -> n241  [color=red, key=3, label="Parameter variable bool value", style=bold];
n135 -> n110  [color=red, key=3, label="Parameter variable bool addMoveNextIfTrue", style=bold];
n135 -> n137  [color=red, key=3, label="method methodReturn CommandLine.ParserState BooleanToParserState", style=bold];
n135 -> n139  [color=red, key=3, label="method methodReturn CommandLine.ParserState BooleanToParserState", style=bold];
n135 -> n140  [color=red, key=3, label="method methodReturn CommandLine.ParserState BooleanToParserState", style=bold];
n135 -> d110  [color=green, key=3, label="Parameter variable bool addMoveNextIfTrue", style=bold];
n135 -> d137  [color=green, key=3, label="method methodReturn CommandLine.ParserState BooleanToParserState", style=bold];
n135 -> d139  [color=green, key=3, label="method methodReturn CommandLine.ParserState BooleanToParserState", style=bold];
n135 -> d140  [color=green, key=3, label="method methodReturn CommandLine.ParserState BooleanToParserState", style=bold];
n135 -> d164  [color=green, key=3, label="Parameter variable bool value", style=bold];
n135 -> d241  [color=green, key=3, label="Parameter variable bool value", style=bold];
n142 -> n163  [color=red, key=3, label="Parameter variable CommandLine.OptionInfo option", style=bold];
n142 -> n244  [color=red, key=3, label="Parameter variable CommandLine.OptionInfo option", style=bold];
n142 -> d163  [color=green, key=3, label="Parameter variable CommandLine.OptionInfo option", style=bold];
n142 -> d244  [color=green, key=3, label="Parameter variable CommandLine.OptionInfo option", style=bold];
n146 -> n163  [color=red, key=3, label="Parameter variable CommandLine.OptionInfo option", style=bold];
n146 -> n244  [color=red, key=3, label="Parameter variable CommandLine.OptionInfo option", style=bold];
n146 -> d163  [color=green, key=3, label="Parameter variable CommandLine.OptionInfo option", style=bold];
n146 -> d244  [color=green, key=3, label="Parameter variable CommandLine.OptionInfo option", style=bold];
n156 -> n227  [color=darkorchid, key=3, label="method methodReturn string GetRemainingFromNext", style=bold];
n156 -> n474  [color=darkorchid, key=3, label="method methodReturn string GetRemainingFromNext", style=bold];
n161 -> n88  [color=darkorchid, key=3, label="Parameter variable object options", style=bold];
n161 -> n140  [color=red, key=3, label="method methodReturn CommandLine.ParserState Parse", style=bold];
n161 -> n132  [color=darkorchid, key=3, label="method methodReturn CommandLine.ParserState Parse", style=bold];
n161 -> n135  [color=darkorchid, key=3, label="method methodReturn CommandLine.ParserState Parse", style=bold];
n161 -> d140  [color=green, key=3, label="method methodReturn CommandLine.ParserState Parse", style=bold];
n164 -> n205  [color=red, key=3, label="Local variable bool valueSetting", style=bold];
n164 -> n207  [color=red, key=3, label="Local variable bool valueSetting", style=bold];
n164 -> n208  [color=red, key=3, label="Local variable bool valueSetting", style=bold];
n205 -> n161  [color=darkorchid, key=3, label="Parameter variable object options", style=bold];
n205 -> n240  [color=darkorchid, key=3, label="Parameter variable object options", style=bold];
n205 -> n156  [color=darkorchid, key=3, label="Parameter variable string value", style=bold];
n205 -> n316  [color=darkorchid, key=3, label="method methodReturn bool SetValue", style=bold];
n205 -> n318  [color=darkorchid, key=3, label="method methodReturn bool SetValue", style=bold];
n205 -> n319  [color=darkorchid, key=3, label="method methodReturn bool SetValue", style=bold];
n207 -> n179  [color=red, key=3, label="Parameter variable System.Collections.Generic.IList<string> values", style=bold];
n207 -> n191  [color=red, key=3, label="Parameter variable System.Collections.Generic.IList<string> values", style=bold];
n207 -> n259  [color=red, key=3, label="Parameter variable System.Collections.Generic.IList<string> values", style=bold];
n207 -> n273  [color=red, key=3, label="Parameter variable System.Collections.Generic.IList<string> values", style=bold];
n207 -> n161  [color=darkorchid, key=3, label="Parameter variable object options", style=bold];
n207 -> n240  [color=darkorchid, key=3, label="Parameter variable object options", style=bold];
n207 -> n110  [color=red, key=3, label="method methodReturn bool SetValue", style=bold];
n207 -> d110  [color=green, key=3, label="method methodReturn bool SetValue", style=bold];
n207 -> d179  [color=green, key=3, label="Parameter variable System.Collections.Generic.IList<string> values", style=bold];
n207 -> d191  [color=green, key=3, label="Parameter variable System.Collections.Generic.IList<string> values", style=bold];
n207 -> d259  [color=green, key=3, label="Parameter variable System.Collections.Generic.IList<string> values", style=bold];
n207 -> d273  [color=green, key=3, label="Parameter variable System.Collections.Generic.IList<string> values", style=bold];
n208 -> n110  [color=red, key=3, label="method methodReturn bool SetValue", style=bold];
n208 -> n161  [color=darkorchid, key=3, label="Parameter variable object options", style=bold];
n208 -> n240  [color=darkorchid, key=3, label="Parameter variable object options", style=bold];
n208 -> d110  [color=green, key=3, label="method methodReturn bool SetValue", style=bold];
n214 -> n209  [color=darkorchid, key=3, label="Parameter variable string value", style=bold];
n214 -> n210  [color=red, key=3, label="Parameter variable string paramName", style=bold];
n214 -> d210  [color=green, key=3, label="Parameter variable string paramName", style=bold];
n218 -> n110  [color=red, key=3, label="method methodReturn bool MoveNext", style=bold];
n218 -> d110  [color=green, key=3, label="method methodReturn bool MoveNext", style=bold];
n240 -> n88  [color=darkorchid, key=3, label="Parameter variable object options", style=bold];
n240 -> n140  [color=red, key=3, label="method methodReturn CommandLine.ParserState Parse", style=bold];
n240 -> n132  [color=darkorchid, key=3, label="method methodReturn CommandLine.ParserState Parse", style=bold];
n240 -> n135  [color=darkorchid, key=3, label="method methodReturn CommandLine.ParserState Parse", style=bold];
n240 -> n137  [color=red, key=3, label="method methodReturn CommandLine.ParserState Parse", style=bold];
n240 -> d137  [color=green, key=3, label="method methodReturn CommandLine.ParserState Parse", style=bold];
n240 -> d140  [color=green, key=3, label="method methodReturn CommandLine.ParserState Parse", style=bold];
n241 -> n205  [color=red, key=3, label="Local variable bool valueSetting", style=bold];
n241 -> n207  [color=red, key=3, label="Local variable bool valueSetting", style=bold];
n298 -> n56  [color=red, key=3, label="method methodReturn CommandLine.OptionMap CreateMap", style=bold];
n298 -> n559  [color=darkorchid, key=3, label="Parameter variable object target", style=bold];
n298 -> d56  [color=green, key=3, label="method methodReturn CommandLine.OptionMap CreateMap", style=bold];
n319 -> n205  [color=darkorchid, key=3, label="Parameter variable object options", style=bold];
n319 -> n110  [color=red, key=3, label="method methodReturn bool SetValueScalar", style=bold];
n319 -> d110  [color=green, key=3, label="method methodReturn bool SetValueScalar", style=bold];
n316 -> n205  [color=darkorchid, key=3, label="Parameter variable object options", style=bold];
n316 -> n110  [color=red, key=3, label="method methodReturn bool SetValueList", style=bold];
n316 -> d110  [color=green, key=3, label="method methodReturn bool SetValueList", style=bold];
n318 -> n205  [color=darkorchid, key=3, label="Parameter variable object options", style=bold];
n318 -> n110  [color=red, key=3, label="method methodReturn bool SetNullableValue", style=bold];
n318 -> d110  [color=green, key=3, label="method methodReturn bool SetNullableValue", style=bold];
n322 -> n322  [color=red, key=3, label="Local variable int i", style=bold];
n367 -> n322  [color=red, key=3, label="Local variable int i", style=bold];
n394 -> n110  [color=red, key=3, label="method methodReturn bool EnforceMutuallyExclusiveMap", style=bold];
n394 -> d110  [color=green, key=3, label="method methodReturn bool EnforceMutuallyExclusiveMap", style=bold];
n395 -> n110  [color=red, key=3, label="method methodReturn bool EnforceRequiredRule", style=bold];
n395 -> d110  [color=green, key=3, label="method methodReturn bool EnforceRequiredRule", style=bold];
n402 -> n396  [color=red, key=3, label="Parameter variable CommandLine.OptionInfo option", style=bold];
n402 -> n110  [color=red, key=3, label="Parameter variable bool? mutualExclusiveness", style=bold];
n402 -> n56  [color=red, key=3, label="Parameter variable bool? mutualExclusiveness", style=bold];
n402 -> d56  [color=green, key=3, label="Parameter variable bool? mutualExclusiveness", style=bold];
n402 -> d110  [color=green, key=3, label="Parameter variable bool? mutualExclusiveness", style=bold];
n402 -> d396  [color=green, key=3, label="Parameter variable CommandLine.OptionInfo option", style=bold];
n414 -> n405  [color=red, key=3, label="Parameter variable CommandLine.OptionInfo option", style=bold];
n414 -> d405  [color=green, key=3, label="Parameter variable CommandLine.OptionInfo option", style=bold];
n464 -> n458  [color=darkorchid, key=3, label="Parameter variable T value", style=bold];
n464 -> n537  [color=darkorchid, key=3, label="Parameter variable T value", style=bold];
n464 -> n544  [color=darkorchid, key=3, label="Parameter variable T value", style=bold];
n464 -> n210  [color=red, key=3, label="Parameter variable string paramName", style=bold];
n464 -> n538  [color=red, key=3, label="Parameter variable string paramName", style=bold];
n464 -> n545  [color=red, key=3, label="Parameter variable string paramName", style=bold];
n464 -> n546  [color=red, key=3, label="Parameter variable string paramName", style=bold];
n464 -> d210  [color=green, key=3, label="Parameter variable string paramName", style=bold];
n464 -> d538  [color=green, key=3, label="Parameter variable string paramName", style=bold];
n464 -> d545  [color=green, key=3, label="Parameter variable string paramName", style=bold];
n464 -> d546  [color=green, key=3, label="Parameter variable string paramName", style=bold];
n493 -> n110  [color=red, key=3, label="method methodReturn bool AddValueItemIfAllowed", style=bold];
n493 -> n566  [color=red, key=3, label="Parameter variable string item", style=bold];
n493 -> d110  [color=green, key=3, label="method methodReturn bool AddValueItemIfAllowed", style=bold];
n493 -> d566  [color=green, key=3, label="Parameter variable string item", style=bold];
n500 -> n541  [color=darkorchid, key=3, label="method methodReturn bool ParseArguments", style=bold];
n502 -> n544  [color=darkorchid, key=3, label="method methodReturn bool ParseArguments", style=bold];
n541 -> n500  [color=darkorchid, key=3, label="Parameter variable object options", style=bold];
n541 -> n544  [color=darkorchid, key=3, label="method methodReturn bool ParseArguments", style=bold];
n544 -> n502  [color=darkorchid, key=3, label="Parameter variable System.IO.TextWriter helpWriter", style=bold];
n544 -> n541  [color=darkorchid, key=3, label="Parameter variable object options", style=bold];
n544 -> n110  [color=red, key=3, label="method methodReturn bool ParseArguments", style=bold];
n544 -> n559  [color=darkorchid, key=3, label="method methodReturn bool ParseArguments", style=bold];
n544 -> d110  [color=green, key=3, label="method methodReturn bool ParseArguments", style=bold];
n557 -> n544  [color=darkorchid, key=3, label="Parameter variable object target", style=bold];
n557 -> n56  [color=red, key=3, label="method methodReturn CommandLine.Pair<System.Reflection.MethodInfo, TAttribute> RetrieveMethod", style=bold];
n557 -> d56  [color=green, key=3, label="method methodReturn CommandLine.Pair<System.Reflection.MethodInfo, TAttribute> RetrieveMethod", style=bold];
n558 -> n544  [color=darkorchid, key=3, label="Parameter variable string[] args", style=bold];
n558 -> n110  [color=red, key=3, label="method methodReturn bool ParseHelp", style=bold];
n558 -> d110  [color=green, key=3, label="method methodReturn bool ParseHelp", style=bold];
n559 -> n544  [color=darkorchid, key=3, label="Parameter variable object options", style=bold];
n582 -> n559  [color=darkorchid, key=3, label="Parameter variable object options", style=bold];
n585 -> n322  [color=red, key=3, label="Local variable int i", style=bold];
n636 -> n640  [color=red, key=3, label="method methodReturn TAttribute RetrieveMethodAttributeOnly", style=bold];
n636 -> n56  [color=red, key=3, label="method methodReturn TAttribute RetrieveMethodAttributeOnly", style=bold];
n636 -> d56  [color=green, key=3, label="method methodReturn TAttribute RetrieveMethodAttributeOnly", style=bold];
n636 -> d640  [color=green, key=3, label="method methodReturn TAttribute RetrieveMethodAttributeOnly", style=bold];
d164 -> n205  [color=green, key=3, label="Local variable bool valueSetting", style=bold];
d164 -> n207  [color=green, key=3, label="Local variable bool valueSetting", style=bold];
d164 -> n208  [color=green, key=3, label="Local variable bool valueSetting", style=bold];
d241 -> n205  [color=green, key=3, label="Local variable bool valueSetting", style=bold];
d241 -> n207  [color=green, key=3, label="Local variable bool valueSetting", style=bold];
d322 -> d322  [color=green, key=3, label="Local variable int i", style=bold];
d367 -> d322  [color=green, key=3, label="Local variable int i", style=bold];
d585 -> d322  [color=green, key=3, label="Local variable int i", style=bold];
}
