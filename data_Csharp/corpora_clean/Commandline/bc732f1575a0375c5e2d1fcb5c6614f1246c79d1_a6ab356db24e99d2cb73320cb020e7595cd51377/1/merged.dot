digraph  {
n165 [label=builder, span=""];
n166 [label=T, span=""];
n167 [label=shortSwitches, span=""];
n168 [label=settings, span=""];
n169 [label=sep, span=""];
n170 [label=doubQt, span=""];
n0 [label="Entry CommandLine.UnParserSettings.WithGroupSwitchesOnly()", span="48-48", cluster="CommandLine.UnParserSettings.WithGroupSwitchesOnly()"];
n1 [label="return new UnParserSettings { GroupSwitches = true };", span="50-50", cluster="CommandLine.UnParserSettings.WithGroupSwitchesOnly()"];
n2 [label="Exit CommandLine.UnParserSettings.WithGroupSwitchesOnly()", span="48-48", cluster="CommandLine.UnParserSettings.WithGroupSwitchesOnly()"];
n3 [label="Entry CommandLine.UnParserSettings.UnParserSettings()", span="15-15", cluster="CommandLine.UnParserSettings.UnParserSettings()"];
n4 [label="Entry CommandLine.UnParserSettings.WithUseEqualTokenOnly()", span="53-53", cluster="CommandLine.UnParserSettings.WithUseEqualTokenOnly()"];
n5 [label="return new UnParserSettings { UseEqualToken = true };", span="55-55", cluster="CommandLine.UnParserSettings.WithUseEqualTokenOnly()"];
n6 [label="Exit CommandLine.UnParserSettings.WithUseEqualTokenOnly()", span="53-53", cluster="CommandLine.UnParserSettings.WithUseEqualTokenOnly()"];
n7 [label="Entry CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)", span="73-73", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)"];
n8 [label="return parser.FormatCommandLine(options, config => {});", span="75-75", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)"];
n9 [label="Exit CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)", span="73-73", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)"];
n10 [label="Entry CommandLine.Parser.FormatCommandLine<T>(T, System.Action<CommandLine.UnParserSettings>)", span="87-87", cluster="CommandLine.Parser.FormatCommandLine<T>(T, System.Action<CommandLine.UnParserSettings>)"];
n11 [label="Entry lambda expression", span="75-75", cluster="lambda expression"];
n12 [label="Exit lambda expression", span="75-75", cluster="lambda expression"];
n13 [label="Entry CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", span="87-87", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n14 [label="options == null", span="89-89", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n17 [label="configuration(settings)", span="92-92", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n19 [label="var type = options.GetType()", span="95-95", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n22 [label="var specs =\r\n                (from info in\r\n                    type.GetSpecifications(\r\n                        pi => new { Specification = Specification.FromProperty(pi),\r\n                            Value = pi.GetValue(options, null).NormalizeValue(), PropertyValue = pi.GetValue(options, null) })\r\n                where !info.PropertyValue.IsEmpty()\r\n                select info)\r\n                    .Memorize()", span="101-108", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n61 [label="new { Specification = Specification.FromProperty(pi),\r\n                            Value = pi.GetValue(options, null).NormalizeValue(), PropertyValue = pi.GetValue(options, null) }", span="104-105", cluster="lambda expression"];
n15 [label="throw new ArgumentNullException(''options'');", span="89-89", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n16 [label="var settings = new UnParserSettings()", span="91-91", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n18 [label="settings.Consumed = true", span="93-93", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n25 [label="var optSpecs = settings.GroupSwitches\r\n                ? allOptSpecs.Where(info => !shortSwitches.Contains(info))\r\n                : allOptSpecs", span="123-125", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n27 [label="builder = settings.GroupSwitches && shortSwitches.Any()\r\n                ? builder.Append('-').Append(string.Join(string.Empty, shortSwitches.Select(\r\n                    info => ((OptionSpecification)info.Specification).ShortName).ToArray())).Append(' ')\r\n                : builder", span="132-135", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n29 [label="optSpecs.ForEach(\r\n                opt => builder.Append(FormatOption((OptionSpecification)opt.Specification, opt.Value, settings)).Append(' '))", span="138-139", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n80 [label="builder.Append(FormatOption((OptionSpecification)opt.Specification, opt.Value, settings)).Append(' ')", span="139-139", cluster="lambda expression"];
n35 [label="Entry System.Action<T>.Invoke(T)", span="0-0", cluster="System.Action<T>.Invoke(T)"];
n20 [label="var builder = new StringBuilder()", span="96-96", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n36 [label="Entry object.GetType()", span="0-0", cluster="object.GetType()"];
n21 [label="type.GetVerbSpecification()\r\n                .Return(verb => builder.Append(verb.Name).Append(' '), builder)", span="98-99", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n37 [label="Entry System.Text.StringBuilder.StringBuilder()", span="0-0", cluster="System.Text.StringBuilder.StringBuilder()"];
n57 [label="builder.Append(verb.Name).Append(' ')", span="99-99", cluster="lambda expression"];
n38 [label="Entry System.Type.GetVerbSpecification()", span="28-28", cluster="System.Type.GetVerbSpecification()"];
n39 [label="Entry Unk.Return", span="", cluster="Unk.Return"];
n56 [label="Entry lambda expression", span="99-99", cluster="lambda expression"];
n23 [label="var allOptSpecs = from info in specs.Where(i => i.Specification.Tag == SpecificationType.Option)\r\n                let o = (OptionSpecification)info.Specification\r\n                where o.TargetType != TargetType.Switch || (o.TargetType == TargetType.Switch && ((bool)info.Value))\r\n                orderby o.UniqueName()\r\n                select info", span="110-114", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n40 [label="Entry System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", span="17-17", cluster="System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)"];
n41 [label="Entry object.IsEmpty()", span="220-220", cluster="object.IsEmpty()"];
n42 [label="Entry Unk.Memorize", span="", cluster="Unk.Memorize"];
n60 [label="Entry lambda expression", span="104-105", cluster="lambda expression"];
n26 [label="var valSpecs = from info in specs.Where(i => i.Specification.Tag == SpecificationType.Value)\r\n                let v = (ValueSpecification)info.Specification\r\n                orderby v.Index\r\n                select info", span="127-130", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n24 [label="var shortSwitches = from info in allOptSpecs\r\n                let o = (OptionSpecification)info.Specification\r\n                where o.TargetType == TargetType.Switch\r\n                where o.ShortName.Length > 0\r\n                orderby o.UniqueName()\r\n                select info", span="116-121", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n43 [label="Entry Unk.Where", span="", cluster="Unk.Where"];
n44 [label="Entry Unk.UniqueName", span="", cluster="Unk.UniqueName"];
n66 [label="Entry lambda expression", span="110-110", cluster="lambda expression"];
n70 [label="!shortSwitches.Contains(info)", span="124-124", cluster="lambda expression"];
n69 [label="Entry lambda expression", span="124-124", cluster="lambda expression"];
n28 [label="builder\r\n                .TrimEndIfMatchWhen(!optSpecs.Any() || builder.TrailingSpaces() > 1, ' ')", span="136-137", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n73 [label="Entry lambda expression", span="127-127", cluster="lambda expression"];
n30 [label="builder\r\n                .TrimEndIfMatchWhen(!valSpecs.Any() || builder.TrailingSpaces() > 1, ' ')", span="140-141", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n31 [label="valSpecs.ForEach(\r\n                val => builder.Append(FormatValue(val.Specification, val.Value)).Append(' '))", span="142-143", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n45 [label="Entry Unk.Any", span="", cluster="Unk.Any"];
n46 [label="Entry System.Text.StringBuilder.Append(char)", span="0-0", cluster="System.Text.StringBuilder.Append(char)"];
n47 [label="Entry Unk.Select", span="", cluster="Unk.Select"];
n48 [label="Entry Unk.ToArray", span="", cluster="Unk.ToArray"];
n49 [label="Entry Unk.Join", span="", cluster="Unk.Join"];
n50 [label="Entry System.Text.StringBuilder.Append(string)", span="0-0", cluster="System.Text.StringBuilder.Append(string)"];
n76 [label="Entry lambda expression", span="134-134", cluster="lambda expression"];
n84 [label="builder.Append(FormatValue(val.Specification, val.Value)).Append(' ')", span="143-143", cluster="lambda expression"];
n32 [label="return builder\r\n                .ToString().TrimEnd(' ');", span="145-146", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n51 [label="Entry System.Text.StringBuilder.TrailingSpaces()", span="101-101", cluster="System.Text.StringBuilder.TrailingSpaces()"];
n52 [label="Entry Unk.TrimEndIfMatchWhen", span="", cluster="Unk.TrimEndIfMatchWhen"];
n53 [label="Entry Unk.ForEach", span="", cluster="Unk.ForEach"];
n79 [label="Entry lambda expression", span="139-139", cluster="lambda expression"];
n83 [label="Entry lambda expression", span="143-143", cluster="lambda expression"];
n33 [label="Exit CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", span="87-87", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n54 [label="Entry System.Text.StringBuilder.ToString()", span="0-0", cluster="System.Text.StringBuilder.ToString()"];
n55 [label="Entry string.TrimEnd(params char[])", span="0-0", cluster="string.TrimEnd(params char[])"];
n34 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)"];
n58 [label="Exit lambda expression", span="99-99", cluster="lambda expression"];
n59 [label="Entry Unk.Append", span="", cluster="Unk.Append"];
n62 [label="Exit lambda expression", span="104-105", cluster="lambda expression"];
n63 [label="Entry CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="105-105", cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)"];
n64 [label="Entry System.Reflection.PropertyInfo.GetValue(object, object[])", span="0-0", cluster="System.Reflection.PropertyInfo.GetValue(object, object[])"];
n65 [label="Entry object.NormalizeValue()", span="209-209", cluster="object.NormalizeValue()"];
n67 [label="i.Specification.Tag == SpecificationType.Option", span="110-110", cluster="lambda expression"];
n68 [label="Exit lambda expression", span="110-110", cluster="lambda expression"];
n71 [label="Exit lambda expression", span="124-124", cluster="lambda expression"];
n72 [label="Entry Unk.Contains", span="", cluster="Unk.Contains"];
n74 [label="i.Specification.Tag == SpecificationType.Value", span="127-127", cluster="lambda expression"];
n75 [label="Exit lambda expression", span="127-127", cluster="lambda expression"];
n77 [label="((OptionSpecification)info.Specification).ShortName", span="134-134", cluster="lambda expression"];
n78 [label="Exit lambda expression", span="134-134", cluster="lambda expression"];
n81 [label="Exit lambda expression", span="139-139", cluster="lambda expression"];
n82 [label="Entry Unk.FormatOption", span="", cluster="Unk.FormatOption"];
n85 [label="Exit lambda expression", span="143-143", cluster="lambda expression"];
n86 [label="Entry Unk.FormatValue", span="", cluster="Unk.FormatValue"];
n87 [label="Entry CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", span="149-149", cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)"];
n88 [label="var builder = new StringBuilder()", span="151-151", cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)"];
n89 [label="spec.TargetType", span="152-152", cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)"];
n91 [label="builder.Append(FormatWithQuotesIfString(value))", span="155-155", cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)"];
n93 [label="var sep = spec.SeperatorOrSpace()", span="158-158", cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)"];
n95 [label="var e = ((IEnumerable)value).GetEnumerator()", span="161-161", cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)"];
n97 [label="builder.Append(format(e.Current)).Append(sep)", span="163-163", cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)"];
n98 [label="builder.TrimEndIfMatch(' ')", span="164-164", cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)"];
n99 [label="return builder.ToString();", span="167-167", cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)"];
n90 [label="TargetType.Scalar", span="154-154", cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)"];
n92 [label="TargetType.Sequence", span="157-157", cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)"];
n94 [label="Func<object, object> format = v\r\n                        => sep == ' ' ? FormatWithQuotesIfString(v) : v", span="159-160", cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)"];
n103 [label="Entry CommandLine.Core.Specification.SeperatorOrSpace()", span="181-181", cluster="CommandLine.Core.Specification.SeperatorOrSpace()"];
n109 [label="sep == ' ' ? FormatWithQuotesIfString(v) : v", span="160-160", cluster="lambda expression"];
n96 [label="e.MoveNext()", span="162-162", cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)"];
n104 [label="Entry System.Collections.IEnumerable.GetEnumerator()", span="0-0", cluster="System.Collections.IEnumerable.GetEnumerator()"];
n105 [label="Entry System.Collections.IEnumerator.MoveNext()", span="0-0", cluster="System.Collections.IEnumerator.MoveNext()"];
n106 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)"];
n102 [label="Entry System.Text.StringBuilder.Append(object)", span="0-0", cluster="System.Text.StringBuilder.Append(object)"];
n107 [label="Entry System.Text.StringBuilder.TrimEndIfMatch(char)", span="85-85", cluster="System.Text.StringBuilder.TrimEndIfMatch(char)"];
n101 [label="Entry CommandLine.UnParserExtensions.FormatWithQuotesIfString(object)", span="170-170", cluster="CommandLine.UnParserExtensions.FormatWithQuotesIfString(object)"];
n100 [label="Exit CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", span="149-149", cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)"];
n108 [label="Entry lambda expression", span="159-160", cluster="lambda expression"];
n110 [label="Exit lambda expression", span="159-160", cluster="lambda expression"];
n111 [label="Func<string, string> doubQt = v\r\n                => v.Contains(''\'''') ? v.Replace(''\'''', ''\\\'''') : v", span="172-173", cluster="CommandLine.UnParserExtensions.FormatWithQuotesIfString(object)"];
n112 [label="return (value as string)\r\n                .ToMaybe()\r\n                .Return(v => v.Contains(' ') || v.Contains(''\'''')\r\n                    ? ''\''''.JoinTo(doubQt(v), ''\'''') : v, value);", span="175-178", cluster="CommandLine.UnParserExtensions.FormatWithQuotesIfString(object)"];
n116 [label="v.Contains(''\'''') ? v.Replace(''\'''', ''\\\'''') : v", span="173-173", cluster="lambda expression"];
n121 [label="v.Contains(' ') || v.Contains(''\'''')\r\n                    ? ''\''''.JoinTo(doubQt(v), ''\'''') : v", span="177-178", cluster="lambda expression"];
n113 [label="Exit CommandLine.UnParserExtensions.FormatWithQuotesIfString(object)", span="170-170", cluster="CommandLine.UnParserExtensions.FormatWithQuotesIfString(object)"];
n114 [label="Entry T.ToMaybe<T>()", span="249-249", cluster="T.ToMaybe<T>()"];
n120 [label="Entry lambda expression", span="177-178", cluster="lambda expression"];
n115 [label="Entry lambda expression", span="172-173", cluster="lambda expression"];
n117 [label="Exit lambda expression", span="172-173", cluster="lambda expression"];
n118 [label="Entry string.Contains(string)", span="0-0", cluster="string.Contains(string)"];
n119 [label="Entry string.Replace(string, string)", span="0-0", cluster="string.Replace(string, string)"];
n122 [label="Exit lambda expression", span="177-178", cluster="lambda expression"];
n123 [label="Entry Unk.doubQt", span="", cluster="Unk.doubQt"];
n124 [label="Entry string.JoinTo(params string[])", span="45-45", cluster="string.JoinTo(params string[])"];
n125 [label="Entry CommandLine.UnParserExtensions.SeperatorOrSpace(CommandLine.Core.Specification)", span="181-181", cluster="CommandLine.UnParserExtensions.SeperatorOrSpace(CommandLine.Core.Specification)"];
n126 [label="return (spec as OptionSpecification).ToMaybe()\r\n                .Return(o => o.Separator != '\0' ? o.Separator : ' ', ' ');", span="183-184", cluster="CommandLine.UnParserExtensions.SeperatorOrSpace(CommandLine.Core.Specification)"];
n127 [label="Exit CommandLine.UnParserExtensions.SeperatorOrSpace(CommandLine.Core.Specification)", span="181-181", cluster="CommandLine.UnParserExtensions.SeperatorOrSpace(CommandLine.Core.Specification)"];
n128 [label="Entry lambda expression", span="184-184", cluster="lambda expression"];
n129 [label="o.Separator != '\0' ? o.Separator : ' '", span="184-184", cluster="lambda expression"];
n130 [label="Exit lambda expression", span="184-184", cluster="lambda expression"];
n131 [label="Entry CommandLine.UnParserExtensions.FormatOption(CommandLine.Core.OptionSpecification, object, CommandLine.UnParserSettings)", span="187-187", cluster="CommandLine.UnParserExtensions.FormatOption(CommandLine.Core.OptionSpecification, object, CommandLine.UnParserSettings)"];
n132 [label="return new StringBuilder()\r\n                    .Append(spec.FormatName(settings))\r\n                    .AppendWhen(spec.TargetType != TargetType.Switch, FormatValue(spec, value))\r\n                .ToString();", span="189-192", cluster="CommandLine.UnParserExtensions.FormatOption(CommandLine.Core.OptionSpecification, object, CommandLine.UnParserSettings)"];
n133 [label="Exit CommandLine.UnParserExtensions.FormatOption(CommandLine.Core.OptionSpecification, object, CommandLine.UnParserSettings)", span="187-187", cluster="CommandLine.UnParserExtensions.FormatOption(CommandLine.Core.OptionSpecification, object, CommandLine.UnParserSettings)"];
n134 [label="Entry CommandLine.Core.OptionSpecification.FormatName(CommandLine.UnParserSettings)", span="195-195", cluster="CommandLine.Core.OptionSpecification.FormatName(CommandLine.UnParserSettings)"];
n135 [label="Entry System.Text.StringBuilder.AppendWhen(bool, params string[])", span="9-9", cluster="System.Text.StringBuilder.AppendWhen(bool, params string[])"];
n136 [label="Entry CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification, CommandLine.UnParserSettings)", span="195-195", cluster="CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification, CommandLine.UnParserSettings)"];
n137 [label="var longName =\r\n                optionSpec.LongName.Length > 0\r\n                && !settings.PreferShortName", span="197-199", cluster="CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification, CommandLine.UnParserSettings)"];
n138 [label="return\r\n                new StringBuilder(longName\r\n                    ? ''--''.JoinTo(optionSpec.LongName)\r\n                    : ''-''.JoinTo(optionSpec.ShortName))\r\n                        .AppendIf(longName && settings.UseEqualToken && optionSpec.ConversionType != typeof(bool), ''='', '' '')\r\n                    .ToString();", span="201-206", cluster="CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification, CommandLine.UnParserSettings)"];
n139 [label="Exit CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification, CommandLine.UnParserSettings)", span="195-195", cluster="CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification, CommandLine.UnParserSettings)"];
n140 [label="Entry System.Text.StringBuilder.StringBuilder(string)", span="0-0", cluster="System.Text.StringBuilder.StringBuilder(string)"];
n141 [label="Entry System.Text.StringBuilder.AppendIf(bool, string, string)", span="34-34", cluster="System.Text.StringBuilder.AppendIf(bool, string, string)"];
n142 [label="Entry CommandLine.UnParserExtensions.NormalizeValue(object)", span="209-209", cluster="CommandLine.UnParserExtensions.NormalizeValue(object)"];
n143 [label="value != null\r\n                && ReflectionHelper.IsFSharpOptionType(value.GetType())\r\n                && FSharpOptionHelper.IsSome(value)", span="211-213", cluster="CommandLine.UnParserExtensions.NormalizeValue(object)"];
n144 [label="return FSharpOptionHelper.ValueOf(value);", span="215-215", cluster="CommandLine.UnParserExtensions.NormalizeValue(object)"];
n145 [label="return value;", span="217-217", cluster="CommandLine.UnParserExtensions.NormalizeValue(object)"];
n147 [label="Entry CommandLine.Infrastructure.ReflectionHelper.IsFSharpOptionType(System.Type)", span="35-35", cluster="CommandLine.Infrastructure.ReflectionHelper.IsFSharpOptionType(System.Type)"];
n148 [label="Entry CommandLine.Infrastructure.FSharpOptionHelper.IsSome(object)", span="38-38", cluster="CommandLine.Infrastructure.FSharpOptionHelper.IsSome(object)"];
n146 [label="Exit CommandLine.UnParserExtensions.NormalizeValue(object)", span="209-209", cluster="CommandLine.UnParserExtensions.NormalizeValue(object)"];
n149 [label="Entry CommandLine.Infrastructure.FSharpOptionHelper.ValueOf(object)", span="30-30", cluster="CommandLine.Infrastructure.FSharpOptionHelper.ValueOf(object)"];
n150 [label="Entry CommandLine.UnParserExtensions.IsEmpty(object)", span="220-220", cluster="CommandLine.UnParserExtensions.IsEmpty(object)"];
n151 [label="value == null", span="222-222", cluster="CommandLine.UnParserExtensions.IsEmpty(object)"];
n153 [label="ReflectionHelper.IsFSharpOptionType(value.GetType()) && !FSharpOptionHelper.IsSome(value)", span="223-223", cluster="CommandLine.UnParserExtensions.IsEmpty(object)"];
n155 [label="value is ValueType && value.Equals(value.GetType().GetDefaultValue())", span="224-224", cluster="CommandLine.UnParserExtensions.IsEmpty(object)"];
n157 [label="value is string && ((string)value).Length == 0", span="225-225", cluster="CommandLine.UnParserExtensions.IsEmpty(object)"];
n159 [label="value is IEnumerable && !((IEnumerable)value).GetEnumerator().MoveNext()", span="226-226", cluster="CommandLine.UnParserExtensions.IsEmpty(object)"];
n152 [label="return true;", span="222-222", cluster="CommandLine.UnParserExtensions.IsEmpty(object)"];
n154 [label="return true;", span="223-223", cluster="CommandLine.UnParserExtensions.IsEmpty(object)"];
n156 [label="return true;", span="224-224", cluster="CommandLine.UnParserExtensions.IsEmpty(object)"];
n163 [label="Entry System.Type.GetDefaultValue()", span="131-131", cluster="System.Type.GetDefaultValue()"];
n164 [label="Entry object.Equals(object)", span="0-0", cluster="object.Equals(object)"];
n158 [label="return true;", span="225-225", cluster="CommandLine.UnParserExtensions.IsEmpty(object)"];
n160 [label="return true;", span="226-226", cluster="CommandLine.UnParserExtensions.IsEmpty(object)"];
n161 [label="return false;", span="227-227", cluster="CommandLine.UnParserExtensions.IsEmpty(object)"];
n162 [label="Exit CommandLine.UnParserExtensions.IsEmpty(object)", span="220-220", cluster="CommandLine.UnParserExtensions.IsEmpty(object)"];
d267 [label="var words = optionHelpText.Split(new[] { ' ' })", span="622-622", cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", color=green, community=0];
d258 [label="var optionHelpText = specification.HelpText", span="600-600", cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)"];
d260 [label="optionHelpText += '' Valid values: '' + string.Join('', '', specification.EnumValues)", span="604-604", cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)"];
d262 [label="optionHelpText = ''(Default: {0}) ''.FormatLocal(specification.DefaultValue.FromJust()) + optionHelpText", span="609-609", cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)"];
d264 [label="optionHelpText = ''{0} ''.FormatInvariant(requiredWord) + optionHelpText", span="614-614", cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)"];
d266 [label="var wordBuffer = 0", span="621-621", cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)"];
d268 [label="var i = 0", span="623-623", cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)"];
d215 [label="Entry string.Split(params char[])", span="0-0", cluster="string.Split(params char[])"];
d269 [label="i < words.Length", span="623-623", cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)"];
d270 [label="words[i].Length < (widthOfHelpText - wordBuffer)", span="625-625", cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)"];
d271 [label="optionsHelp.Append(words[i])", span="627-627", cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)"];
d272 [label="wordBuffer += words[i].Length", span="628-628", cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)"];
d273 [label="(widthOfHelpText - wordBuffer) > 1 && i != words.Length - 1", span="629-629", cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)"];
d276 [label="words[i].Length >= widthOfHelpText && wordBuffer == 0", span="635-635", cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)"];
d277 [label="optionsHelp.Append(words[i].Substring(0, widthOfHelpText))", span="637-637", cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)"];
d247 [label="Entry CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", span="587-587", cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)"];
d257 [label="optionsHelp\r\n                .Append(name.Length < maxLength ? name.ToString().PadRight(maxLength) : name.ToString())\r\n                .Append(''    '')", span="596-598", cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)"];
d259 [label="addEnumValuesToHelpText && specification.EnumValues.Any()", span="602-602", cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)"];
d265 [label="!string.IsNullOrEmpty(optionHelpText)", span="617-617", cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)"];
d280 [label="optionHelpText = optionHelpText.Substring(Math.Min(wordBuffer, optionHelpText.Length)).Trim()", span="647-647", cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)"];
d283 [label="optionsHelp\r\n                .Append(optionHelpText)\r\n                .Append(Environment.NewLine)\r\n                .AppendWhen(additionalNewLineAfterOption, Environment.NewLine)", span="654-657", cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)"];
d261 [label="specification.DefaultValue.IsJust()", span="607-607", cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)"];
d288 [label="Entry string.Join(string, System.Collections.Generic.IEnumerable<string>)", span="0-0", cluster="string.Join(string, System.Collections.Generic.IEnumerable<string>)"];
d263 [label="specification.Required", span="612-612", cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)"];
d50 [label="Entry CSharpx.Maybe<T>.FromJust<T>()", span="342-342", cluster="CSharpx.Maybe<T>.FromJust<T>()"];
d289 [label="Entry string.FormatLocal(params object[])", span="25-25", cluster="string.FormatLocal(params object[])"];
d290 [label="Entry string.FormatInvariant(params object[])", span="20-20", cluster="string.FormatInvariant(params object[])"];
d196 [label="var wordBuffer = 0", span="483-483", cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)"];
d279 [label="i++", span="623-623", cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)"];
d197 [label="var words = value.Split(' ')", span="484-484", cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)"];
d367 [label="CommandLine.Text.HelpText", span=""];
d180 [label="Entry System.Text.StringBuilder.Append(string)", span="0-0", cluster="System.Text.StringBuilder.Append(string)"];
d275 [label="wordBuffer++", span="632-632", cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)"];
d274 [label="optionsHelp.Append('' '')", span="631-631", cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)"];
d278 [label="wordBuffer = widthOfHelpText", span="638-638", cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)"];
d216 [label="Entry string.Substring(int, int)", span="0-0", cluster="string.Substring(int, int)"];
d245 [label="AddOption(requiredWord, maxLength, option, remainingSpace)", span="555-555", cluster="lambda expression"];
d285 [label="Exit CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", span="587-587", cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)"];
d296 [label="Entry CommandLine.Text.HelpText.AddOptionName(int, CommandLine.Core.OptionSpecification)", span="662-662", cluster="CommandLine.Text.HelpText.AddOptionName(int, CommandLine.Core.OptionSpecification)"];
d300 [label="Entry CommandLine.Text.HelpText.AddValueName(int, CommandLine.Core.ValueSpecification)", span="682-682", cluster="CommandLine.Text.HelpText.AddValueName(int, CommandLine.Core.ValueSpecification)"];
d255 [label="optionsHelp.Append(''  '')", span="589-589", cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)"];
d256 [label="var name = new StringBuilder(maxLength)\r\n                .BimapIf(\r\n                    specification.Tag == SpecificationType.Option,\r\n                    it => it.Append(AddOptionName(maxLength, (OptionSpecification)specification)),\r\n                    it => it.Append(AddValueName(maxLength, (ValueSpecification)specification)))", span="590-594", cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)"];
d294 [label="it.Append(AddOptionName(maxLength, (OptionSpecification)specification))", span="593-593", cluster="lambda expression"];
d298 [label="it.Append(AddValueName(maxLength, (ValueSpecification)specification))", span="594-594", cluster="lambda expression"];
d281 [label="optionsHelp.AppendWhen(optionHelpText.Length > 0, Environment.NewLine,\r\n                        new string(' ', maxLength + 6))", span="648-649", cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)"];
d282 [label="optionHelpText.Length > widthOfHelpText", span="651-651", cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)"];
d237 [label="var maxLength = GetMaxLength(specifications)", span="547-547", cluster="CommandLine.Text.HelpText.AddOptionsImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, string, int)"];
d240 [label="specifications.ForEach(\r\n                option =>\r\n                    AddOption(requiredWord, maxLength, option, remainingSpace))", span="553-555", cluster="CommandLine.Text.HelpText.AddOptionsImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, string, int)"];
d239 [label="var remainingSpace = maximumLength - (maxLength + 6)", span="551-551", cluster="CommandLine.Text.HelpText.AddOptionsImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, string, int)"];
d169 [label="Entry System.Text.StringBuilder.ToString()", span="0-0", cluster="System.Text.StringBuilder.ToString()"];
d287 [label="Entry string.PadRight(int)", span="0-0", cluster="string.PadRight(int)"];
d46 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()"];
d110 [label="Entry string.IsNullOrEmpty(string)", span="0-0", cluster="string.IsNullOrEmpty(string)"];
d217 [label="Entry System.Math.Min(int, int)", span="0-0", cluster="System.Math.Min(int, int)"];
d218 [label="Entry string.Substring(int)", span="0-0", cluster="string.Substring(int)"];
d291 [label="Entry string.Trim()", span="0-0", cluster="string.Trim()"];
d284 [label="return this;", span="659-659", cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)"];
d187 [label="Entry System.Text.StringBuilder.AppendWhen(bool, params string[])", span="9-9", cluster="System.Text.StringBuilder.AppendWhen(bool, params string[])"];
d49 [label="Entry CSharpx.Maybe<T>.IsJust<T>()", span="326-326", cluster="CSharpx.Maybe<T>.IsJust<T>()"];
d34 [label="license.FromJust().AddToHelpText(auto, true)", span="220-220", cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)"];
d37 [label="usage.FromJust().AddToHelpText(auto, true)", span="226-226", cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)"];
d10 [label="Entry CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", span="93-93", cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)"];
d194 [label="Entry CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", span="478-478", cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)"];
d195 [label="builder.AppendWhen(builder.Length > 0, Environment.NewLine)", span="480-480", cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)"];
d198 [label="var i = 0", span="485-485", cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)"];
d335 [label="var specLength = 0", span="717-717", cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)"];
d338 [label="var metaLength = 0", span="722-722", cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)"];
d355 [label="var specLength = 0", span="760-760", cluster="CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)"];
d357 [label="var metaLength = 0", span="764-764", cluster="CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)"];
d200 [label="words[i].Length < (maximumLength - wordBuffer)", span="487-487", cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)"];
d202 [label="wordBuffer += words[i].Length", span="490-490", cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)"];
d206 [label="words[i].Length >= maximumLength && wordBuffer == 0", span="497-497", cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)"];
d210 [label="value = value.Substring(Math.Min(wordBuffer, value.Length))", span="508-508", cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)"];
d199 [label="i < words.Length", span="485-485", cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)"];
d201 [label="builder.Append(words[i])", span="489-489", cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)"];
d203 [label="(maximumLength - wordBuffer) > 1 && i != words.Length - 1", span="491-491", cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)"];
d207 [label="builder.Append(words[i].Substring(0, maximumLength))", span="499-499", cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)"];
d17 [label="preOptionsHelp = new StringBuilder(BuilderCapacity)", span="99-99", cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)"];
d18 [label="postOptionsHelp = new StringBuilder(BuilderCapacity)", span="100-100", cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)"];
d19 [label="this.sentenceBuilder = sentenceBuilder", span="102-102", cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)"];
d20 [label="this.heading = heading", span="103-103", cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)"];
d21 [label="this.copyright = copyright", span="104-104", cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)"];
d122 [label="return AddPreOptionsLine(value, MaximumDisplayWidth);", span="332-332", cluster="CommandLine.Text.HelpText.AddPreOptionsLine(string)"];
d126 [label="return AddLine(postOptionsHelp, value);", span="342-342", cluster="CommandLine.Text.HelpText.AddPostOptionsLine(string)"];
d131 [label="return AddOptionsImpl(\r\n                this.GetSpecificationsFromType(result.TypeInfo),\r\n                SentenceBuilder.RequiredWord(),\r\n                MaximumDisplayWidth);", span="355-358", cluster="CommandLine.Text.HelpText.AddOptions<T>(CommandLine.ParserResult<T>)"];
d139 [label="return AddOptionsImpl(\r\n                this.AdaptVerbsToSpecifications(types),\r\n                SentenceBuilder.RequiredWord(),\r\n                MaximumDisplayWidth);", span="372-375", cluster="CommandLine.Text.HelpText.AddVerbs(params System.Type[])"];
d146 [label="return AddOptionsImpl(\r\n                this.GetSpecificationsFromType(result.TypeInfo),\r\n                SentenceBuilder.RequiredWord(),\r\n                maximumLength);", span="389-392", cluster="CommandLine.Text.HelpText.AddOptions<T>(int, CommandLine.ParserResult<T>)"];
d153 [label="return AddOptionsImpl(this.AdaptVerbsToSpecifications(types), SentenceBuilder.RequiredWord(), maximumLength);", span="407-407", cluster="CommandLine.Text.HelpText.AddVerbs(int, params System.Type[])"];
d183 [label="return\r\n                new StringBuilder(\r\n                    heading.SafeLength() + copyright.SafeLength() + preOptionsHelp.SafeLength() +\r\n                        optionsHelp.SafeLength() + ExtraLength).Append(heading)\r\n                    .AppendWhen(!string.IsNullOrEmpty(copyright), Environment.NewLine, copyright)\r\n                    .AppendWhen(preOptionsHelp.Length > 0, Environment.NewLine, preOptionsHelp.ToString())\r\n                    .AppendWhen(\r\n                        optionsHelp != null && optionsHelp.Length > 0,\r\n                        Environment.NewLine,\r\n                        Environment.NewLine,\r\n                        optionsHelp.SafeToString())\r\n                    .AppendWhen(postOptionsHelp.Length > 0, Environment.NewLine, postOptionsHelp.ToString())\r\n                .ToString();", span="458-470", cluster="CommandLine.Text.HelpText.ToString()"];
d220 [label="var optionSpecs = specs\r\n                .OfType<OptionSpecification>()\r\n                .Concat(new[] { this.MakeHelpEntry(), this.MakeVersionEntry() })", span="519-521", cluster="CommandLine.Text.HelpText.GetSpecificationsFromType(System.Type)"];
d232 [label="return (from verbTuple in Verb.SelectFromTypes(types)\r\n                    select\r\n                        OptionSpecification.NewSwitch(\r\n                            string.Empty,\r\n                            verbTuple.Item1.Name,\r\n                            false,\r\n                            verbTuple.Item1.HelpText,\r\n                            string.Empty)).Concat(new[] { this.MakeHelpEntry(), this.MakeVersionEntry() });", span="532-539", cluster="CommandLine.Text.HelpText.AdaptVerbsToSpecifications(System.Collections.Generic.IEnumerable<System.Type>)"];
d238 [label="optionsHelp = new StringBuilder(BuilderCapacity)", span="549-549", cluster="CommandLine.Text.HelpText.AddOptionsImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, string, int)"];
d241 [label="return this;", span="557-557", cluster="CommandLine.Text.HelpText.AddOptionsImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, string, int)"];
d248 [label="return OptionSpecification.NewSwitch(\r\n                string.Empty,\r\n                ''help'',\r\n                false,\r\n                sentenceBuilder.HelpCommandText(AddDashesToOption),\r\n                string.Empty);", span="562-567", cluster="CommandLine.Text.HelpText.MakeHelpEntry()"];
d250 [label="return OptionSpecification.NewSwitch(\r\n                string.Empty,\r\n                ''version'',\r\n                false,\r\n                sentenceBuilder.VersionCommandText(AddDashesToOption),\r\n                string.Empty);", span="572-577", cluster="CommandLine.Text.HelpText.MakeVersionEntry()"];
d252 [label="AddLine(preOptionsHelp, value, maximumLength)", span="582-582", cluster="CommandLine.Text.HelpText.AddPreOptionsLine(string, int)"];
d253 [label="return this;", span="584-584", cluster="CommandLine.Text.HelpText.AddPreOptionsLine(string, int)"];
d301 [label="return\r\n                new StringBuilder(maxLength)\r\n                    .MapIf(\r\n                        specification.ShortName.Length > 0,\r\n                        it => it\r\n                            .AppendWhen(addDashesToOption, '-')\r\n                            .AppendFormat(''{0}'', specification.ShortName)\r\n                            .AppendFormatWhen(specification.MetaValue.Length > 0, '' {0}'', specification.MetaValue)\r\n                            .AppendWhen(specification.LongName.Length > 0, '', ''))\r\n                    .MapIf(\r\n                        specification.LongName.Length > 0,\r\n                        it => it\r\n                            .AppendWhen(addDashesToOption, ''--'')\r\n                            .AppendFormat(''{0}'', specification.LongName)\r\n                            .AppendFormatWhen(specification.MetaValue.Length > 0, ''={0}'', specification.MetaValue))\r\n                    .ToString();", span="664-679", cluster="CommandLine.Text.HelpText.AddOptionName(int, CommandLine.Core.OptionSpecification)"];
d305 [label="it\r\n                            .AppendWhen(addDashesToOption, '-')\r\n                            .AppendFormat(''{0}'', specification.ShortName)\r\n                            .AppendFormatWhen(specification.MetaValue.Length > 0, '' {0}'', specification.MetaValue)\r\n                            .AppendWhen(specification.LongName.Length > 0, '', '')", span="668-672", cluster="lambda expression"];
d311 [label="it\r\n                            .AppendWhen(addDashesToOption, ''--'')\r\n                            .AppendFormat(''{0}'', specification.LongName)\r\n                            .AppendFormatWhen(specification.MetaValue.Length > 0, ''={0}'', specification.MetaValue)", span="675-678", cluster="lambda expression"];
d322 [label="AddLine(builder, value, MaximumDisplayWidth)", span="696-696", cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string)"];
d323 [label="return this;", span="698-698", cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string)"];
d325 [label="return specifications.Aggregate(0,\r\n                (length, spec) =>\r\n                    {\r\n                        var specLength = spec.Tag == SpecificationType.Option\r\n                            ? this.GetMaxOptionLength((OptionSpecification)spec)\r\n                            : this.GetMaxValueLength((ValueSpecification)spec);\r\n\r\n                        return Math.Max(length, specLength);\r\n                    });", span="703-711", cluster="CommandLine.Text.HelpText.GetMaxLength(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>)"];
d329 [label="var specLength = spec.Tag == SpecificationType.Option\r\n                            ? this.GetMaxOptionLength((OptionSpecification)spec)\r\n                            : this.GetMaxValueLength((ValueSpecification)spec)", span="706-708", cluster="lambda expression"];
d343 [label=AddDashesToOption, span="731-731", cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)"];
d348 [label=AddDashesToOption, span="742-742", cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)"];
d174 [label="var line = new StringBuilder(indent.Spaces())\r\n                                .Append(formatError(error))", span="439-440", cluster="lambda expression"];
d204 [label="builder.Append('' '')", span="493-493", cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)"];
d213 [label="builder.Append(value)", span="513-513", cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)"];
d374 [label=string, span=""];
d375 [label=maxLength, span=""];
d376 [label=remainingSpace, span=""];
d134 [label="Entry CommandLine.Text.HelpText.AddOptionsImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, string, int)", span="542-542", cluster="CommandLine.Text.HelpText.AddOptionsImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, string, int)"];
d244 [label="Entry lambda expression", span="554-555", cluster="lambda expression"];
d246 [label="Exit lambda expression", span="554-555", cluster="lambda expression"];
d302 [label="Exit CommandLine.Text.HelpText.AddOptionName(int, CommandLine.Core.OptionSpecification)", span="662-662", cluster="CommandLine.Text.HelpText.AddOptionName(int, CommandLine.Core.OptionSpecification)"];
d314 [label="Exit CommandLine.Text.HelpText.AddValueName(int, CommandLine.Core.ValueSpecification)", span="682-682", cluster="CommandLine.Text.HelpText.AddValueName(int, CommandLine.Core.ValueSpecification)"];
d313 [label="return new StringBuilder(maxLength)\r\n                .BimapIf(\r\n                    specification.MetaName.Length > 0,\r\n                    it => it.AppendFormat(''{0} (pos. {1})'', specification.MetaName, specification.Index),\r\n                    it => it.AppendFormat(''value pos. {0}'', specification.Index))\r\n                .AppendFormatWhen(\r\n                    specification.MetaValue.Length > 0, '' {0}'', specification.MetaValue)\r\n                .ToString();", span="684-691", cluster="CommandLine.Text.HelpText.AddValueName(int, CommandLine.Core.ValueSpecification)"];
d316 [label="it.AppendFormat(''{0} (pos. {1})'', specification.MetaName, specification.Index)", span="687-687", cluster="lambda expression"];
d320 [label="it.AppendFormat(''value pos. {0}'', specification.Index)", span="688-688", cluster="lambda expression"];
d24 [label="Entry System.Text.StringBuilder.StringBuilder(int)", span="0-0", cluster="System.Text.StringBuilder.StringBuilder(int)"];
d286 [label="Entry System.Text.StringBuilder.BimapIf(bool, System.Func<System.Text.StringBuilder, System.Text.StringBuilder>, System.Func<System.Text.StringBuilder, System.Text.StringBuilder>)", span="47-47", cluster="System.Text.StringBuilder.BimapIf(bool, System.Func<System.Text.StringBuilder, System.Text.StringBuilder>, System.Func<System.Text.StringBuilder, System.Text.StringBuilder>)"];
d293 [label="Entry lambda expression", span="593-593", cluster="lambda expression"];
d297 [label="Entry lambda expression", span="594-594", cluster="lambda expression"];
d377 [label=int, span=""];
d378 [label="CommandLine.Core.Specification", span=""];
d295 [label="Exit lambda expression", span="593-593", cluster="lambda expression"];
d299 [label="Exit lambda expression", span="594-594", cluster="lambda expression"];
d292 [label="Entry string.String(char, int)", span="0-0", cluster="string.String(char, int)"];
d243 [label="Entry CommandLine.Text.HelpText.GetMaxLength(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>)", span="701-701", cluster="CommandLine.Text.HelpText.GetMaxLength(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>)"];
d114 [label="Entry System.Collections.Generic.IEnumerable<T>.ForEach<T>(System.Action<T>)", span="231-231", cluster="System.Collections.Generic.IEnumerable<T>.ForEach<T>(System.Action<T>)"];
d175 [label="text.AppendLine(line.ToString())", span="441-441", cluster="lambda expression"];
d163 [label="return text.ToString();", span="448-448", cluster="CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)"];
d38 [label="(verbsIndex && parserResult.VerbTypes.Any()) || errors.Any(e => e.Tag == ErrorType.NoVerbSelectedError)", span="229-229", cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)"];
d30 [label="FilterMeaningfulErrors(errors).Any()", span="211-211", cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)"];
d101 [label="string.IsNullOrEmpty(errors)", span="300-300", cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)"];
d211 [label="builder.AppendWhen(value.Length > 0, Environment.NewLine)", span="509-509", cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)"];
d33 [label="license.IsJust()", span="218-218", cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)"];
d36 [label="usage.IsJust()", span="224-224", cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)"];
d26 [label="var auto = new HelpText {\r\n                Heading = HeadingInfo.Default,\r\n                Copyright = CopyrightInfo.Default,\r\n                AdditionalNewLineAfterOption = true,\r\n                AddDashesToOption = !verbsIndex\r\n            }", span="198-203", cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)"];
d31 [label="auto = onError(auto)", span="213-213", cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)"];
d32 [label="var license = ReflectionHelper.GetAttribute<AssemblyLicenseAttribute>()", span="217-217", cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)"];
d35 [label="var usage = ReflectionHelper.GetAttribute<AssemblyUsageAttribute>()", span="223-223", cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)"];
d51 [label="Entry CommandLine.Text.MultilineTextAttribute.AddToHelpText(CommandLine.Text.HelpText, bool)", span="155-155", cluster="CommandLine.Text.MultilineTextAttribute.AddToHelpText(CommandLine.Text.HelpText, bool)"];
d22 [label="Exit CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", span="93-93", cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)"];
d11 [label="sentenceBuilder == null", span="95-95", cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)"];
d13 [label="heading == null", span="96-96", cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)"];
d15 [label="copyright == null", span="97-97", cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)"];
d214 [label="Exit CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", span="478-478", cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)"];
d208 [label="wordBuffer = maximumLength", span="500-500", cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)"];
d212 [label="value.Length > maximumLength", span="511-511", cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)"];
d128 [label="Entry CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string)", span="694-694", cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string)"];
d124 [label="Entry CommandLine.Text.HelpText.AddPreOptionsLine(string, int)", span="580-580", cluster="CommandLine.Text.HelpText.AddPreOptionsLine(string, int)"];
d209 [label="i++", span="485-485", cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)"];
d332 [label="Entry CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", span="715-715", cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)"];
d336 [label="var hasShort = spec.ShortName.Length > 0", span="719-719", cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)"];
d342 [label="++specLength", span="730-730", cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)"];
d347 [label="specLength += spec.LongName.Length", span="741-741", cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)"];
d352 [label="specLength += 2", span="752-752", cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)"];
d353 [label="return specLength;", span="755-755", cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)"];
d337 [label="var hasLong = spec.LongName.Length > 0", span="720-720", cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)"];
d339 [label="spec.MetaValue.Length > 0", span="723-723", cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)"];
d345 [label="specLength += metaLength", span="736-736", cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)"];
d350 [label="specLength += metaLength", span="747-747", cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)"];
d333 [label="Entry CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)", span="758-758", cluster="CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)"];
d356 [label="var hasMeta = spec.MetaName.Length > 0", span="762-762", cluster="CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)"];
d361 [label="specLength += spec.MetaName.Length + spec.Index.ToStringInvariant().Length + 8", span="772-772", cluster="CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)"];
d362 [label="specLength += spec.Index.ToStringInvariant().Length + 11", span="776-776", cluster="CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)"];
d358 [label="spec.MetaValue.Length > 0", span="765-765", cluster="CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)"];
d363 [label="specLength += metaLength", span="779-779", cluster="CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)"];
d205 [label="wordBuffer++", span="494-494", cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)"];
d74 [label="Entry CommandLine.Text.HelpText.AddPreOptionsLine(string)", span="330-330", cluster="CommandLine.Text.HelpText.AddPreOptionsLine(string)"];
d123 [label="Exit CommandLine.Text.HelpText.AddPreOptionsLine(string)", span="330-330", cluster="CommandLine.Text.HelpText.AddPreOptionsLine(string)"];
d125 [label="Entry CommandLine.Text.HelpText.AddPostOptionsLine(string)", span="340-340", cluster="CommandLine.Text.HelpText.AddPostOptionsLine(string)"];
d127 [label="Exit CommandLine.Text.HelpText.AddPostOptionsLine(string)", span="340-340", cluster="CommandLine.Text.HelpText.AddPostOptionsLine(string)"];
d55 [label="Entry CommandLine.Text.HelpText.AddOptions<T>(CommandLine.ParserResult<T>)", span="350-350", cluster="CommandLine.Text.HelpText.AddOptions<T>(CommandLine.ParserResult<T>)"];
d129 [label="result == null", span="353-353", cluster="CommandLine.Text.HelpText.AddOptions<T>(CommandLine.ParserResult<T>)"];
d132 [label="Exit CommandLine.Text.HelpText.AddOptions<T>(CommandLine.ParserResult<T>)", span="350-350", cluster="CommandLine.Text.HelpText.AddOptions<T>(CommandLine.ParserResult<T>)"];
d133 [label="Entry CommandLine.Text.HelpText.GetSpecificationsFromType(System.Type)", span="516-516", cluster="CommandLine.Text.HelpText.GetSpecificationsFromType(System.Type)"];
d111 [label="Entry System.Func<TResult>.Invoke()", span="0-0", cluster="System.Func<TResult>.Invoke()"];
d54 [label="Entry CommandLine.Text.HelpText.AddVerbs(params System.Type[])", span="367-367", cluster="CommandLine.Text.HelpText.AddVerbs(params System.Type[])"];
d137 [label="types.Length == 0", span="370-370", cluster="CommandLine.Text.HelpText.AddVerbs(params System.Type[])"];
d140 [label="Exit CommandLine.Text.HelpText.AddVerbs(params System.Type[])", span="367-367", cluster="CommandLine.Text.HelpText.AddVerbs(params System.Type[])"];
d142 [label="Entry CommandLine.Text.HelpText.AdaptVerbsToSpecifications(System.Collections.Generic.IEnumerable<System.Type>)", span="530-530", cluster="CommandLine.Text.HelpText.AdaptVerbsToSpecifications(System.Collections.Generic.IEnumerable<System.Type>)"];
d143 [label="Entry CommandLine.Text.HelpText.AddOptions<T>(int, CommandLine.ParserResult<T>)", span="384-384", cluster="CommandLine.Text.HelpText.AddOptions<T>(int, CommandLine.ParserResult<T>)"];
d144 [label="result == null", span="387-387", cluster="CommandLine.Text.HelpText.AddOptions<T>(int, CommandLine.ParserResult<T>)"];
d147 [label="Exit CommandLine.Text.HelpText.AddOptions<T>(int, CommandLine.ParserResult<T>)", span="384-384", cluster="CommandLine.Text.HelpText.AddOptions<T>(int, CommandLine.ParserResult<T>)"];
d148 [label="Entry CommandLine.Text.HelpText.AddVerbs(int, params System.Type[])", span="402-402", cluster="CommandLine.Text.HelpText.AddVerbs(int, params System.Type[])"];
d151 [label="types.Length == 0", span="405-405", cluster="CommandLine.Text.HelpText.AddVerbs(int, params System.Type[])"];
d154 [label="Exit CommandLine.Text.HelpText.AddVerbs(int, params System.Type[])", span="402-402", cluster="CommandLine.Text.HelpText.AddVerbs(int, params System.Type[])"];
d182 [label="int ExtraLength = 10", span="457-457", cluster="CommandLine.Text.HelpText.ToString()"];
d184 [label="Exit CommandLine.Text.HelpText.ToString()", span="455-455", cluster="CommandLine.Text.HelpText.ToString()"];
d185 [label="Entry string.SafeLength()", span="40-40", cluster="string.SafeLength()"];
d186 [label="Entry System.Text.StringBuilder.SafeLength()", span="76-76", cluster="System.Text.StringBuilder.SafeLength()"];
d188 [label="Entry System.Text.StringBuilder.SafeToString()", span="71-71", cluster="System.Text.StringBuilder.SafeToString()"];
d219 [label="var specs = type.GetSpecifications(Specification.FromProperty)", span="518-518", cluster="CommandLine.Text.HelpText.GetSpecificationsFromType(System.Type)"];
d221 [label="var valueSpecs = specs\r\n                .OfType<ValueSpecification>()\r\n                .OrderBy(v => v.Index)", span="522-524", cluster="CommandLine.Text.HelpText.GetSpecificationsFromType(System.Type)"];
d75 [label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0", cluster="System.Collections.IEnumerable.OfType<TResult>()"];
d225 [label="Entry CommandLine.Text.HelpText.MakeHelpEntry()", span="560-560", cluster="CommandLine.Text.HelpText.MakeHelpEntry()"];
d226 [label="Entry CommandLine.Text.HelpText.MakeVersionEntry()", span="570-570", cluster="CommandLine.Text.HelpText.MakeVersionEntry()"];
d227 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)"];
d222 [label="return Enumerable.Empty<Specification>()\r\n                .Concat(optionSpecs)\r\n                .Concat(valueSpecs);", span="525-527", cluster="CommandLine.Text.HelpText.GetSpecificationsFromType(System.Type)"];
d233 [label="Exit CommandLine.Text.HelpText.AdaptVerbsToSpecifications(System.Collections.Generic.IEnumerable<System.Type>)", span="530-530", cluster="CommandLine.Text.HelpText.AdaptVerbsToSpecifications(System.Collections.Generic.IEnumerable<System.Type>)"];
d234 [label="Entry CommandLine.Core.Verb.SelectFromTypes(System.Collections.Generic.IEnumerable<System.Type>)", span="40-40", cluster="CommandLine.Core.Verb.SelectFromTypes(System.Collections.Generic.IEnumerable<System.Type>)"];
d235 [label="Entry CommandLine.Core.OptionSpecification.NewSwitch(string, string, bool, string, string)", span="45-45", cluster="CommandLine.Core.OptionSpecification.NewSwitch(string, string, bool, string, string)"];
d236 [label="Entry Unk.Concat", span="", cluster="Unk.Concat"];
d242 [label="Exit CommandLine.Text.HelpText.AddOptionsImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, string, int)", span="542-542", cluster="CommandLine.Text.HelpText.AddOptionsImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, string, int)"];
d249 [label="Exit CommandLine.Text.HelpText.MakeHelpEntry()", span="560-560", cluster="CommandLine.Text.HelpText.MakeHelpEntry()"];
d47 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)"];
d251 [label="Exit CommandLine.Text.HelpText.MakeVersionEntry()", span="570-570", cluster="CommandLine.Text.HelpText.MakeVersionEntry()"];
d254 [label="Exit CommandLine.Text.HelpText.AddPreOptionsLine(string, int)", span="580-580", cluster="CommandLine.Text.HelpText.AddPreOptionsLine(string, int)"];
d303 [label="Entry System.Text.StringBuilder.MapIf(bool, System.Func<System.Text.StringBuilder, System.Text.StringBuilder>)", span="53-53", cluster="System.Text.StringBuilder.MapIf(bool, System.Func<System.Text.StringBuilder, System.Text.StringBuilder>)"];
d304 [label="Entry lambda expression", span="668-672", cluster="lambda expression"];
d310 [label="Entry lambda expression", span="675-678", cluster="lambda expression"];
d379 [label="CommandLine.Core.OptionSpecification", span=""];
d306 [label="Exit lambda expression", span="668-672", cluster="lambda expression"];
d307 [label="Entry System.Text.StringBuilder.AppendWhen(bool, params char[])", span="21-21", cluster="System.Text.StringBuilder.AppendWhen(bool, params char[])"];
d308 [label="Entry System.Text.StringBuilder.AppendFormat(string, object)", span="0-0", cluster="System.Text.StringBuilder.AppendFormat(string, object)"];
d309 [label="Entry System.Text.StringBuilder.AppendFormatWhen(bool, string, params object[])", span="33-33", cluster="System.Text.StringBuilder.AppendFormatWhen(bool, string, params object[])"];
d312 [label="Exit lambda expression", span="675-678", cluster="lambda expression"];
d324 [label="Exit CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string)", span="694-694", cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string)"];
d326 [label="Exit CommandLine.Text.HelpText.GetMaxLength(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>)", span="701-701", cluster="CommandLine.Text.HelpText.GetMaxLength(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>)"];
d327 [label="Entry Unk.Aggregate", span="", cluster="Unk.Aggregate"];
d328 [label="Entry lambda expression", span="704-711", cluster="lambda expression"];
d330 [label="return Math.Max(length, specLength);", span="710-710", cluster="lambda expression"];
d344 [label="++specLength", span="733-733", cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)"];
d349 [label="specLength += 2", span="744-744", cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)"];
d371 [label="System.Func<CommandLine.Error, string>", span=""];
d372 [label=int, span=""];
d109 [label="Entry CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)", span="418-418", cluster="CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)"];
d173 [label="Entry lambda expression", span="437-442", cluster="lambda expression"];
d177 [label="Entry System.Text.StringBuilder.StringBuilder(string)", span="0-0", cluster="System.Text.StringBuilder.StringBuilder(string)"];
d178 [label="Entry int.Spaces()", span="30-30", cluster="int.Spaces()"];
d179 [label="Entry Unk.formatError", span="", cluster="Unk.formatError"];
d315 [label="Entry lambda expression", span="687-687", cluster="lambda expression"];
d319 [label="Entry lambda expression", span="688-688", cluster="lambda expression"];
d380 [label="CommandLine.Core.ValueSpecification", span=""];
d317 [label="Exit lambda expression", span="687-687", cluster="lambda expression"];
d318 [label="Entry System.Text.StringBuilder.AppendFormat(string, object, object)", span="0-0", cluster="System.Text.StringBuilder.AppendFormat(string, object, object)"];
d321 [label="Exit lambda expression", span="688-688", cluster="lambda expression"];
d105 [label="lines.ForEach(\r\n                line => current.AddPreOptionsLine(line))", span="309-310", cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)"];
d373 [label=text, span=""];
d160 [label="var text = new StringBuilder()", span="433-433", cluster="CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)"];
d176 [label="Exit lambda expression", span="437-442", cluster="lambda expression"];
d181 [label="Entry System.Text.StringBuilder.AppendLine(string)", span="0-0", cluster="System.Text.StringBuilder.AppendLine(string)"];
d162 [label="text.AppendIfNotEmpty(\r\n                formatMutuallyExclusiveSetErrors(\r\n                    meaningfulErrors.OfType<MutuallyExclusiveSetError>()))", span="444-446", cluster="CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)"];
d164 [label="Exit CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)", span="418-418", cluster="CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)"];
d25 [label="Entry CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)", span="193-193", cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)"];
d29 [label="errors = ((NotParsed<T>)parserResult).Errors", span="209-209", cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)"];
d27 [label="var errors = Enumerable.Empty<Error>()", span="205-205", cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)"];
d39 [label="auto.AddDashesToOption = false", span="231-231", cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)"];
d41 [label="auto.AddOptions(parserResult)", span="236-236", cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)"];
d52 [label="Entry Unk.Any", span="", cluster="Unk.Any"];
d56 [label="Entry lambda expression", span="229-229", cluster="lambda expression"];
d45 [label="Entry CommandLine.Text.HelpText.FilterMeaningfulErrors(System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="473-473", cluster="CommandLine.Text.HelpText.FilterMeaningfulErrors(System.Collections.Generic.IEnumerable<CommandLine.Error>)"];
d100 [label="var errors = RenderParsingErrorsText(parserResult,\r\n                current.SentenceBuilder.FormatError,\r\n                current.SentenceBuilder.FormatMutuallyExclusiveSetErrors,\r\n                2)", span="296-299", cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)"];
d102 [label="return current;", span="302-302", cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)"];
d103 [label="current.AddPreOptionsLine(\r\n                string.Concat(Environment.NewLine, current.SentenceBuilder.ErrorsHeadingText()))", span="305-306", cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)"];
d0 [label="Entry CommandLine.Text.HelpText.HelpText()", span="34-34", cluster="CommandLine.Text.HelpText.HelpText()"];
d40 [label="auto.AddVerbs(parserResult.VerbTypes.ToArray())", span="232-232", cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)"];
d42 [label="return auto;", span="239-239", cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)"];
d28 [label="onError != null && parserResult.Tag == ParserResultType.NotParsed", span="207-207", cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)"];
d48 [label="Entry CommandLine.Infrastructure.ReflectionHelper.GetAttribute<TAttribute>()", span="12-12", cluster="CommandLine.Infrastructure.ReflectionHelper.GetAttribute<TAttribute>()"];
d12 [label="throw new ArgumentNullException(''sentenceBuilder'');", span="95-95", cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)"];
d14 [label="throw new ArgumentNullException(''heading'');", span="96-96", cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)"];
d16 [label="throw new ArgumentNullException(''copyright'');", span="97-97", cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)"];
d354 [label="Exit CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", span="715-715", cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)"];
d340 [label="metaLength = spec.MetaValue.Length + 1", span="725-725", cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)"];
d341 [label=hasShort, span="728-728", cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)"];
d351 [label="hasShort && hasLong", span="750-750", cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)"];
d346 [label=hasLong, span="739-739", cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)"];
d365 [label="Exit CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)", span="758-758", cluster="CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)"];
d359 [label="metaLength = spec.MetaValue.Length + 1", span="767-767", cluster="CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)"];
d360 [label=hasMeta, span="770-770", cluster="CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)"];
d366 [label="Entry T.ToStringInvariant<T>()", span="15-15", cluster="T.ToStringInvariant<T>()"];
d364 [label="return specLength;", span="781-781", cluster="CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)"];
d59 [label="Entry CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", span="252-252", cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)"];
d64 [label="return new HelpText(HeadingInfo.Default).AddPreOptionsLine(Environment.NewLine);", span="263-263", cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)"];
d116 [label="current.AddPreOptionsLine(line)", span="310-310", cluster="lambda expression"];
d130 [label="throw new ArgumentNullException(''result'');", span="353-353", cluster="CommandLine.Text.HelpText.AddOptions<T>(CommandLine.ParserResult<T>)"];
d223 [label="Exit CommandLine.Text.HelpText.GetSpecificationsFromType(System.Type)", span="516-516", cluster="CommandLine.Text.HelpText.GetSpecificationsFromType(System.Type)"];
d135 [label="types == null", span="369-369", cluster="CommandLine.Text.HelpText.AddVerbs(params System.Type[])"];
d138 [label="throw new ArgumentOutOfRangeException(''types'');", span="370-370", cluster="CommandLine.Text.HelpText.AddVerbs(params System.Type[])"];
d136 [label="throw new ArgumentNullException(''types'');", span="369-369", cluster="CommandLine.Text.HelpText.AddVerbs(params System.Type[])"];
d145 [label="throw new ArgumentNullException(''result'');", span="387-387", cluster="CommandLine.Text.HelpText.AddOptions<T>(int, CommandLine.ParserResult<T>)"];
d149 [label="types == null", span="404-404", cluster="CommandLine.Text.HelpText.AddVerbs(int, params System.Type[])"];
d152 [label="throw new ArgumentOutOfRangeException(''types'');", span="405-405", cluster="CommandLine.Text.HelpText.AddVerbs(int, params System.Type[])"];
d150 [label="throw new ArgumentNullException(''types'');", span="404-404", cluster="CommandLine.Text.HelpText.AddVerbs(int, params System.Type[])"];
d121 [label="Entry CommandLine.Text.HelpText.ToString()", span="455-455", cluster="CommandLine.Text.HelpText.ToString()"];
d224 [label="Entry System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", span="16-16", cluster="System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)"];
d228 [label="Entry System.Collections.Generic.IEnumerable<TSource>.OrderBy<TSource, TKey>(System.Func<TSource, TKey>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.OrderBy<TSource, TKey>(System.Func<TSource, TKey>)"];
d229 [label="Entry lambda expression", span="524-524", cluster="lambda expression"];
d67 [label="var err = errors.OfType<HelpVerbRequestedError>().Single()", span="271-271", cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)"];
d44 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()"];
d331 [label="Exit lambda expression", span="704-711", cluster="lambda expression"];
d334 [label="Entry System.Math.Max(int, int)", span="0-0", cluster="System.Math.Max(int, int)"];
d155 [label="parserResult == null", span="424-424", cluster="CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)"];
d157 [label="var meaningfulErrors =\r\n                FilterMeaningfulErrors(((NotParsed<T>)parserResult).Errors)", span="426-427", cluster="CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)"];
d161 [label="meaningfulErrors\r\n                .Where(e => e.Tag != ErrorType.MutuallyExclusiveSetError)\r\n                .ForEach(\r\n                    error =>\r\n                        {\r\n                            var line = new StringBuilder(indent.Spaces())\r\n                                .Append(formatError(error)); \r\n                            text.AppendLine(line.ToString());\r\n                        })", span="434-442", cluster="CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)"];
d87 [label="Entry CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", span="286-286", cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)"];
d104 [label="var lines = errors.Split(\r\n                new[] { Environment.NewLine }, StringSplitOptions.None)", span="307-308", cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)"];
d106 [label="return current;", span="312-312", cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)"];
d115 [label="Entry lambda expression", span="310-310", cluster="lambda expression"];
d158 [label="meaningfulErrors.Empty()", span="428-428", cluster="CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)"];
d165 [label="Entry System.Text.StringBuilder.StringBuilder()", span="0-0", cluster="System.Text.StringBuilder.StringBuilder()"];
d168 [label="Entry System.Text.StringBuilder.AppendIfNotEmpty(params string[])", span="59-59", cluster="System.Text.StringBuilder.AppendIfNotEmpty(params string[])"];
d156 [label="throw new ArgumentNullException(''parserResult'');", span="424-424", cluster="CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)"];
d159 [label="return string.Empty;", span="430-430", cluster="CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)"];
d43 [label="Exit CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)", span="193-193", cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)"];
d66 [label="return AutoBuild(parserResult, current => DefaultParsingErrorsHandler(parserResult, current));", span="268-268", cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)"];
d71 [label="return AutoBuild(parserResult, current => DefaultParsingErrorsHandler(parserResult, current), true);", span="278-278", cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)"];
d70 [label="return AutoBuild(pr, current => DefaultParsingErrorsHandler(pr, current));", span="275-275", cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)"];
d63 [label="errors.Any(e => e.Tag == ErrorType.VersionRequestedError)", span="261-261", cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)"];
d65 [label="!errors.Any(e => e.Tag == ErrorType.HelpVerbRequestedError)", span="266-266", cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)"];
d57 [label="e.Tag == ErrorType.NoVerbSelectedError", span="229-229", cluster="lambda expression"];
d98 [label="FilterMeaningfulErrors(((NotParsed<T>)parserResult).Errors).Empty()", span="291-291", cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)"];
d190 [label="Exit CommandLine.Text.HelpText.FilterMeaningfulErrors(System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="473-473", cluster="CommandLine.Text.HelpText.FilterMeaningfulErrors(System.Collections.Generic.IEnumerable<CommandLine.Error>)"];
d189 [label="return errors.Where(e => e.Tag != ErrorType.HelpRequestedError && e.Tag != ErrorType.HelpVerbRequestedError);", span="475-475", cluster="CommandLine.Text.HelpText.FilterMeaningfulErrors(System.Collections.Generic.IEnumerable<CommandLine.Error>)"];
d107 [label="Exit CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", span="286-286", cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)"];
d112 [label="Entry string.Concat(string, string)", span="0-0", cluster="string.Concat(string, string)"];
d1 [label="Exit CommandLine.Text.HelpText.HelpText()", span="34-34", cluster="CommandLine.Text.HelpText.HelpText()"];
d53 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()"];
d23 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)"];
d72 [label="Exit CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", span="252-252", cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)"];
d60 [label="parserResult.Tag != ParserResultType.NotParsed", span="254-254", cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)"];
d62 [label="var errors = ((NotParsed<T>)parserResult).Errors", span="259-259", cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)"];
d85 [label="DefaultParsingErrorsHandler(parserResult, current)", span="268-268", cluster="lambda expression"];
d92 [label="DefaultParsingErrorsHandler(parserResult, current)", span="278-278", cluster="lambda expression"];
d4 [label="Entry CommandLine.Text.HelpText.HelpText(string)", span="57-57", cluster="CommandLine.Text.HelpText.HelpText(string)"];
d370 [label="CommandLine.Text.HelpText", span=""];
d117 [label="Exit lambda expression", span="310-310", cluster="lambda expression"];
d141 [label="Entry System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", span="0-0", cluster="System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)"];
d118 [label="Entry CommandLine.Text.HelpText.implicit operator string(CommandLine.Text.HelpText)", span="320-320", cluster="CommandLine.Text.HelpText.implicit operator string(CommandLine.Text.HelpText)"];
d119 [label="return info.ToString();", span="322-322", cluster="CommandLine.Text.HelpText.implicit operator string(CommandLine.Text.HelpText)"];
d231 [label="Exit lambda expression", span="524-524", cluster="lambda expression"];
d230 [label="v.Index", span="524-524", cluster="lambda expression"];
d68 [label="err.Matched", span="272-272", cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)"];
d76 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()"];
d69 [label="var pr = new NotParsed<object>(err.Type, Enumerable.Empty<Error>())", span="274-274", cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)"];
d166 [label="Entry Unk.Where", span="", cluster="Unk.Where"];
d167 [label="Entry Unk.ForEach", span="", cluster="Unk.ForEach"];
d170 [label="Entry lambda expression", span="435-435", cluster="lambda expression"];
d89 [label="DefaultParsingErrorsHandler(pr, current)", span="275-275", cluster="lambda expression"];
d94 [label="parserResult == null", span="288-288", cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)"];
d96 [label="current == null", span="289-289", cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)"];
d99 [label="return current;", span="293-293", cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)"];
d113 [label="Entry string.Split(string[], System.StringSplitOptions)", span="0-0", cluster="string.Split(string[], System.StringSplitOptions)"];
d108 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", span="31-31", cluster="System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()"];
d84 [label="Entry lambda expression", span="268-268", cluster="lambda expression"];
d91 [label="Entry lambda expression", span="278-278", cluster="lambda expression"];
d88 [label="Entry lambda expression", span="275-275", cluster="lambda expression"];
d78 [label="Entry lambda expression", span="261-261", cluster="lambda expression"];
d81 [label="Entry lambda expression", span="266-266", cluster="lambda expression"];
d191 [label="Entry lambda expression", span="475-475", cluster="lambda expression"];
d95 [label="throw new ArgumentNullException(''parserResult'');", span="288-288", cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)"];
d97 [label="throw new ArgumentNullException(''current'');", span="289-289", cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)"];
d61 [label="throw new InvalidOperationException();", span="256-256", cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)"];
d368 [label="CommandLine.ParserResult<T>", span=""];
d86 [label="Exit lambda expression", span="268-268", cluster="lambda expression"];
d93 [label="Exit lambda expression", span="278-278", cluster="lambda expression"];
d5 [label="Exit CommandLine.Text.HelpText.HelpText(string)", span="57-57", cluster="CommandLine.Text.HelpText.HelpText(string)"];
d120 [label="Exit CommandLine.Text.HelpText.implicit operator string(CommandLine.Text.HelpText)", span="320-320", cluster="CommandLine.Text.HelpText.implicit operator string(CommandLine.Text.HelpText)"];
d77 [label="Entry CommandLine.NotParsed<T>.NotParsed(System.Type, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="192-192", cluster="CommandLine.NotParsed<T>.NotParsed(System.Type, System.Collections.Generic.IEnumerable<CommandLine.Error>)"];
d172 [label="Exit lambda expression", span="435-435", cluster="lambda expression"];
d171 [label="e.Tag != ErrorType.MutuallyExclusiveSetError", span="435-435", cluster="lambda expression"];
d369 [label=pr, span=""];
d90 [label="Exit lambda expression", span="275-275", cluster="lambda expression"];
d80 [label="Exit lambda expression", span="261-261", cluster="lambda expression"];
d79 [label="e.Tag == ErrorType.VersionRequestedError", span="261-261", cluster="lambda expression"];
d83 [label="Exit lambda expression", span="266-266", cluster="lambda expression"];
d82 [label="e.Tag == ErrorType.HelpVerbRequestedError", span="266-266", cluster="lambda expression"];
d193 [label="Exit lambda expression", span="475-475", cluster="lambda expression"];
d192 [label="e.Tag != ErrorType.HelpRequestedError && e.Tag != ErrorType.HelpVerbRequestedError", span="475-475", cluster="lambda expression"];
d73 [label="Entry System.InvalidOperationException.InvalidOperationException()", span="0-0", cluster="System.InvalidOperationException.InvalidOperationException()"];
m0_41 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="111-111", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="InstanceBuilderTests.cs"];
m0_42 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="116-120", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="InstanceBuilderTests.cs"];
m0_43 [label="Assert.True(expected.SequenceEqual(((Parsed<FakeOptions>)result).Value.IntSequence))", span="123-123", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="InstanceBuilderTests.cs"];
m0_44 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="111-111", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="InstanceBuilderTests.cs"];
m0_441 [label="Entry CommandLine.Tests.Fakes.FakeOptionWithTwoRequired.FakeOptionWithTwoRequired()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionWithTwoRequired.FakeOptionWithTwoRequired()", file="InstanceBuilderTests.cs"];
m0_350 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", span="835-835", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="InstanceBuilderTests.cs"];
m0_351 [label="Action test = () => InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinMaxZero>>(() => new FakeOptionsWithMinMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="838-842", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="InstanceBuilderTests.cs"];
m0_352 [label="Assert.Throws<ApplicationException>(test)", span="845-845", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="InstanceBuilderTests.cs"];
m0_353 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", span="835-835", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="InstanceBuilderTests.cs"];
m0_173 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="35-35", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilderTests.cs"];
m0_331 [label="Entry Unk.>", span="", cluster="Unk.>", file="InstanceBuilderTests.cs"];
m0_63 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", file="InstanceBuilderTests.cs"];
m0_152 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="383-383", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="InstanceBuilderTests.cs"];
m0_153 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndSeparator>>(() => new FakeOptionsWithSequenceAndSeparator()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="388-392", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="InstanceBuilderTests.cs"];
m0_154 [label="expected.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithSequenceAndSeparator>)result).Value.LongSequence)", span="395-395", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="InstanceBuilderTests.cs"];
m0_155 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="383-383", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="InstanceBuilderTests.cs"];
m0_55 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", file="InstanceBuilderTests.cs"];
m0_259 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="636-636", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="InstanceBuilderTests.cs"];
m0_260 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="641-645", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="InstanceBuilderTests.cs"];
m0_261 [label="Assert.True(expected.Equals(((Parsed<FakeOptions>)result).Value.StringValue))", span="648-648", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="InstanceBuilderTests.cs"];
m0_262 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="636-636", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="InstanceBuilderTests.cs"];
m0_327 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", span="807-807", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="InstanceBuilderTests.cs"];
m0_328 [label="Action test = () => InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinZero>>(() => new FakeOptionsWithMinZero()),\r\n                new string[] {},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="810-814", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="InstanceBuilderTests.cs"];
m0_329 [label="Assert.Throws<ApplicationException>(test)", span="817-817", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="InstanceBuilderTests.cs"];
m0_330 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", span="807-807", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="InstanceBuilderTests.cs"];
m0_300 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="740-740", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="InstanceBuilderTests.cs"];
m0_301 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNullables>>(() => new FakeOptionsWithNullables()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="745-749", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="InstanceBuilderTests.cs"];
m0_302 [label="expected.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithNullables>)result).Value.NullableLong)", span="752-752", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="InstanceBuilderTests.cs"];
m0_303 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="740-740", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="InstanceBuilderTests.cs"];
m0_79 [label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="335-335", cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs"];
m0_167 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="426-426", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs"];
m0_168 [label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="429-435", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs"];
m0_169 [label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="436-436", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs"];
m0_171 [label="expectedResult.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithValues>)result).Value)", span="449-449", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs"];
m0_170 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithValues>>(() => new FakeOptionsWithValues()),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="439-446", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs"];
m0_172 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="426-426", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs"];
m0_251 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="615-615", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_252 [label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="618-618", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_253 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="621-625", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_254 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptions>)result).Errors))", span="628-628", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_255 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="615-615", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_387 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", span="892-892", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", file="InstanceBuilderTests.cs"];
m0_388 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeInterfaceOptions>>(() => new FakeInterfaceOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="895-899", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", file="InstanceBuilderTests.cs"];
m0_389 [label="expected.ShouldBeEquivalentTo(((Parsed<FakeInterfaceOptions>)result).Value.InputFile)", span="902-902", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", file="InstanceBuilderTests.cs"];
m0_390 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", span="892-892", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", file="InstanceBuilderTests.cs"];
m0_109 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="11-11", cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", file="InstanceBuilderTests.cs"];
m0_204 [label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", file="InstanceBuilderTests.cs"];
m0_74 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="193-193", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_75 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="196-196", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_76 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraintAsValue>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="199-203", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_77 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionsWithSequenceAndOnlyMinConstraintAsValue>)result).Errors))", span="206-206", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_78 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="193-193", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_239 [label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="280-280", cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", file="InstanceBuilderTests.cs"];
m0_92 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="231-231", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_93 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="234-234", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_94 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()),\r\n                new[] { ''one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="237-241", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_95 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue>)result).Errors))", span="244-244", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_96 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="231-231", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_184 [label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="13-13", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="InstanceBuilderTests.cs"];
m0_449 [label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116", cluster="CSharpx.Maybe.Nothing<T>()", file="InstanceBuilderTests.cs"];
m0_307 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="760-760", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="InstanceBuilderTests.cs"];
m0_308 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithFSharpOption>>(() => new FakeOptionsWithFSharpOption()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="765-769", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="InstanceBuilderTests.cs"];
m0_310 [label="expectedValue.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithFSharpOption>)result).Value.FileName.Value)", span="774-774", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="InstanceBuilderTests.cs"];
m0_311 [label="expectedSome.ShouldBeEquivalentTo(FSharpOption<string>.get_IsSome(((Parsed<FakeOptionsWithFSharpOption>)result).Value.FileName))", span="776-776", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="InstanceBuilderTests.cs"];
m0_309 [label="((Parsed<FakeOptionsWithFSharpOption>)result).Value.FileName != null", span="772-772", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="InstanceBuilderTests.cs"];
m0_312 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="760-760", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="InstanceBuilderTests.cs"];
m0_291 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", file="InstanceBuilderTests.cs"];
m0_299 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", file="InstanceBuilderTests.cs"];
m0_432 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", span="997-997", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", file="InstanceBuilderTests.cs"];
m0_433 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithTwoRequired>>(() => new FakeOptionWithTwoRequired()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="1000-1004", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", file="InstanceBuilderTests.cs"];
m0_435 [label="errors.OfType<MissingRequiredOptionError>().Should().HaveCount(x => x == expected)", span="1008-1008", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", file="InstanceBuilderTests.cs"];
m0_434 [label="var errors = ((NotParsed<FakeOptionWithTwoRequired>)result).Errors", span="1007-1007", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", file="InstanceBuilderTests.cs"];
m0_436 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", span="997-997", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", file="InstanceBuilderTests.cs"];
m0_6 [label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", file="InstanceBuilderTests.cs"];
m0_243 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="596-596", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_244 [label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="599-599", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_245 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="602-606", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_246 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptions>)result).Errors))", span="609-609", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_247 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="596-596", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_110 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="274-274", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_111 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="277-277", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_112 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''3'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="280-284", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_113 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionsWithEnum>)result).Errors))", span="287-287", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_114 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="274-274", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_8 [label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="368-368", cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="InstanceBuilderTests.cs"];
m0_373 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithNamedAndEmptySets.FakeOptionsWithNamedAndEmptySets()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithNamedAndEmptySets.FakeOptionsWithNamedAndEmptySets()", file="InstanceBuilderTests.cs"];
m0_105 [label="Entry Unk.ShouldBeEquivalentTo", span="", cluster="Unk.ShouldBeEquivalentTo", file="InstanceBuilderTests.cs"];
m0_416 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="954-954", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="InstanceBuilderTests.cs"];
m0_417 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithScalarValueAndSequenceStringAdjacent>>(() => new FakeOptionsWithScalarValueAndSequenceStringAdjacent()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="959-963", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="InstanceBuilderTests.cs"];
m0_418 [label="expected.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithScalarValueAndSequenceStringAdjacent>)result).Value)", span="966-966", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="InstanceBuilderTests.cs"];
m0_419 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="954-954", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="InstanceBuilderTests.cs"];
m0_83 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", file="InstanceBuilderTests.cs"];
m0_144 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="361-361", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="InstanceBuilderTests.cs"];
m0_145 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceWithoutRange>>(() => new FakeOptionsWithSequenceWithoutRange()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="366-370", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="InstanceBuilderTests.cs"];
m0_146 [label="expected.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithSequenceWithoutRange>)result).Value.LongSequence)", span="373-373", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="InstanceBuilderTests.cs"];
m0_147 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="361-361", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="InstanceBuilderTests.cs"];
m0_56 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="156-156", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="InstanceBuilderTests.cs"];
m0_57 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraint()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="161-165", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="InstanceBuilderTests.cs"];
m0_58 [label="Assert.True(expected.SequenceEqual(((Parsed<FakeOptionsWithSequenceAndOnlyMaxConstraint>)result).Value.StringSequence))", span="168-168", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="InstanceBuilderTests.cs"];
m0_59 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="156-156", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="InstanceBuilderTests.cs"];
m0_361 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", span="854-854", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", file="InstanceBuilderTests.cs"];
m0_362 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNamedAndEmptySets>>(() => new FakeOptionsWithNamedAndEmptySets()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="857-861", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", file="InstanceBuilderTests.cs"];
m0_363 [label="type == ParserResultType.NotParsed", span="864-864", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", file="InstanceBuilderTests.cs"];
m0_364 [label="((NotParsed<FakeOptionsWithNamedAndEmptySets>)result).Errors.Should().HaveCount(x => x == expected)", span="866-866", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", file="InstanceBuilderTests.cs"];
m0_365 [label="type == ParserResultType.Parsed", span="868-868", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", file="InstanceBuilderTests.cs"];
m0_366 [label="result.Should().BeOfType<Parsed<FakeOptionsWithNamedAndEmptySets>>()", span="870-870", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", file="InstanceBuilderTests.cs"];
m0_367 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", span="854-854", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", file="InstanceBuilderTests.cs"];
m0_32 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="89-89", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="InstanceBuilderTests.cs"];
m0_33 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequence>>(() => new FakeOptionsWithSequence()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="94-98", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="InstanceBuilderTests.cs"];
m0_34 [label="Assert.True(expected.SequenceEqual(((Parsed<FakeOptionsWithSequence>)result).Value.IntSequence))", span="101-101", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="InstanceBuilderTests.cs"];
m0_35 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="89-89", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="InstanceBuilderTests.cs"];
m0_442 [label="Entry lambda expression", span="1008-1008", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_14 [label=fakeOptions, span="27-27", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_13 [label="Entry lambda expression", span="27-27", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_15 [label="Exit lambda expression", span="27-27", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_21 [label="Entry lambda expression", span="48-48", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_22 [label="new FakeOptions()", span="48-48", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_23 [label="Exit lambda expression", span="48-48", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_28 [label="Entry lambda expression", span="71-71", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_29 [label="new FakeOptionsWithDouble()", span="71-71", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_30 [label="Exit lambda expression", span="71-71", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_37 [label="Entry lambda expression", span="95-95", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_38 [label="new FakeOptionsWithSequence()", span="95-95", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_39 [label="Exit lambda expression", span="95-95", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_45 [label="Entry lambda expression", span="117-117", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_46 [label="new FakeOptions()", span="117-117", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_47 [label="Exit lambda expression", span="117-117", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_52 [label="Entry lambda expression", span="140-140", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_53 [label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="140-140", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_54 [label="Exit lambda expression", span="140-140", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_60 [label="Entry lambda expression", span="162-162", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_61 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="162-162", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_62 [label="Exit lambda expression", span="162-162", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_71 [label="Entry lambda expression", span="181-181", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_72 [label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="181-181", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_73 [label="Exit lambda expression", span="181-181", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_80 [label="Entry lambda expression", span="200-200", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_81 [label="new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="200-200", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_82 [label="Exit lambda expression", span="200-200", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_89 [label="Entry lambda expression", span="219-219", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_90 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="219-219", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_91 [label="Exit lambda expression", span="219-219", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_97 [label="Entry lambda expression", span="238-238", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_98 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="238-238", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_99 [label="Exit lambda expression", span="238-238", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_106 [label="Entry lambda expression", span="262-262", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_107 [label="new FakeOptionsWithEnum()", span="262-262", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_108 [label="Exit lambda expression", span="262-262", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_116 [label="Entry lambda expression", span="281-281", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_117 [label="new FakeOptionsWithEnum()", span="281-281", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_118 [label="Exit lambda expression", span="281-281", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_124 [label="Entry lambda expression", span="300-300", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_125 [label="new FakeOptionsWithEnum()", span="300-300", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_126 [label="Exit lambda expression", span="300-300", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_132 [label="Entry lambda expression", span="319-319", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_133 [label="new FakeOptionsWithEnum()", span="319-319", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_134 [label="Exit lambda expression", span="319-319", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_141 [label="Entry lambda expression", span="344-344", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_142 [label="new FakeOptionsWithValues()", span="344-344", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_143 [label="Exit lambda expression", span="344-344", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_148 [label="Entry lambda expression", span="367-367", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_149 [label="new FakeOptionsWithSequenceWithoutRange()", span="367-367", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_150 [label="Exit lambda expression", span="367-367", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_156 [label="Entry lambda expression", span="389-389", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_157 [label="new FakeOptionsWithSequenceAndSeparator()", span="389-389", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_158 [label="Exit lambda expression", span="389-389", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_164 [label="Entry lambda expression", span="411-411", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_165 [label="new FakeOptionsWithSequenceAndSeparator()", span="411-411", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_166 [label="Exit lambda expression", span="411-411", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_174 [label="Entry lambda expression", span="440-440", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_177 [label="Entry lambda expression", span="441-443", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_175 [label="new FakeOptionsWithValues()", span="440-440", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_176 [label="Exit lambda expression", span="440-440", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_178 [label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="442-443", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_182 [label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="443-443", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_186 [label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="443-443", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_179 [label="Exit lambda expression", span="441-443", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_181 [label="Entry lambda expression", span="443-443", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_183 [label="Exit lambda expression", span="443-443", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_185 [label="Entry lambda expression", span="443-443", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_187 [label="Exit lambda expression", span="443-443", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_195 [label="Entry lambda expression", span="466-466", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_196 [label="new FakeOptionsWithSets()", span="466-466", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_197 [label="Exit lambda expression", span="466-466", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_205 [label="Entry lambda expression", span="507-507", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_206 [label="new FakeOptionWithRequiredAndSet()", span="507-507", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_207 [label="Exit lambda expression", span="507-507", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_214 [label="Entry lambda expression", span="527-527", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_215 [label="new FakeOptionWithRequiredAndSet()", span="527-527", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_216 [label="Exit lambda expression", span="527-527", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_222 [label="Entry lambda expression", span="546-546", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_223 [label="new FakeOptionWithRequired()", span="546-546", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_224 [label="Exit lambda expression", span="546-546", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_231 [label="Entry lambda expression", span="565-565", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_232 [label="new FakeOptions()", span="565-565", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_233 [label="Exit lambda expression", span="565-565", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_240 [label="Entry lambda expression", span="584-584", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_241 [label="new FakeOptions()", span="584-584", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_242 [label="Exit lambda expression", span="584-584", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_248 [label="Entry lambda expression", span="603-603", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_249 [label="new FakeOptions()", span="603-603", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_250 [label="Exit lambda expression", span="603-603", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_256 [label="Entry lambda expression", span="622-622", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_257 [label="new FakeOptions()", span="622-622", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_258 [label="Exit lambda expression", span="622-622", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_264 [label="Entry lambda expression", span="642-642", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_265 [label="new FakeOptions()", span="642-642", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_266 [label="Exit lambda expression", span="642-642", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_272 [label="Entry lambda expression", span="661-661", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_273 [label="new FakeOptionsWithRequiredValue()", span="661-661", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_274 [label="Exit lambda expression", span="661-661", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_280 [label="Entry lambda expression", span="683-683", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_281 [label="new FakeOptions()", span="683-683", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_282 [label="Exit lambda expression", span="683-683", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_288 [label="Entry lambda expression", span="702-702", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_289 [label="new FakeOptionsWithSequenceMinMaxEqual()", span="702-702", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_290 [label="Exit lambda expression", span="702-702", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_296 [label="Entry lambda expression", span="724-724", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_297 [label="new FakeOptionsWithNullables()", span="724-724", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_298 [label="Exit lambda expression", span="724-724", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_304 [label="Entry lambda expression", span="746-746", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_305 [label="new FakeOptionsWithNullables()", span="746-746", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_306 [label="Exit lambda expression", span="746-746", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_314 [label="Entry lambda expression", span="766-766", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_315 [label="new FakeOptionsWithFSharpOption()", span="766-766", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_316 [label="Exit lambda expression", span="766-766", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_324 [label="Entry lambda expression", span="790-790", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_325 [label="new FakeOptionsWithFSharpOption()", span="790-790", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_326 [label="Exit lambda expression", span="790-790", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_332 [label="Entry lambda expression", span="810-814", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_333 [label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinZero>>(() => new FakeOptionsWithMinZero()),\r\n                new string[] {},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="810-814", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_334 [label="Exit lambda expression", span="810-814", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_335 [label="Entry lambda expression", span="811-811", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_336 [label="new FakeOptionsWithMinZero()", span="811-811", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_337 [label="Exit lambda expression", span="811-811", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_343 [label="Entry lambda expression", span="824-828", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_344 [label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMaxZero>>(() => new FakeOptionsWithMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="824-828", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_345 [label="Exit lambda expression", span="824-828", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_346 [label="Entry lambda expression", span="825-825", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_347 [label="new FakeOptionsWithMaxZero()", span="825-825", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_348 [label="Exit lambda expression", span="825-825", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_354 [label="Entry lambda expression", span="838-842", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_355 [label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinMaxZero>>(() => new FakeOptionsWithMinMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="838-842", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_356 [label="Exit lambda expression", span="838-842", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_357 [label="Entry lambda expression", span="839-839", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_358 [label="new FakeOptionsWithMinMaxZero()", span="839-839", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_359 [label="Exit lambda expression", span="839-839", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_375 [label="x == expected", span="866-866", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_370 [label="Entry lambda expression", span="858-858", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_374 [label="Entry lambda expression", span="866-866", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_371 [label="new FakeOptionsWithNamedAndEmptySets()", span="858-858", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_372 [label="Exit lambda expression", span="858-858", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_376 [label="Exit lambda expression", span="866-866", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_385 [label="x == expected", span="886-886", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_381 [label="Entry lambda expression", span="880-880", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_384 [label="Entry lambda expression", span="886-886", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_382 [label="new FakeOptions()", span="880-880", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_383 [label="Exit lambda expression", span="880-880", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_386 [label="Exit lambda expression", span="886-886", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_391 [label="Entry lambda expression", span="896-896", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_392 [label="new FakeInterfaceOptions()", span="896-896", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_393 [label="Exit lambda expression", span="896-896", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_407 [label="x == expected", span="925-925", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_402 [label="Entry lambda expression", span="917-917", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_406 [label="Entry lambda expression", span="925-925", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_403 [label="new FakeOptionsWithTwoRequiredAndSets()", span="917-917", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_404 [label="Exit lambda expression", span="917-917", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_408 [label="Exit lambda expression", span="925-925", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_413 [label="Entry lambda expression", span="941-941", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_414 [label="new FakeOptionsWithRequiredValue()", span="941-941", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_415 [label="Exit lambda expression", span="941-941", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_420 [label="Entry lambda expression", span="960-960", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_421 [label="new FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="960-960", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_422 [label="Exit lambda expression", span="960-960", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_429 [label="Entry lambda expression", span="979-979", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_430 [label="new FakeOptions()", span="979-979", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_431 [label="Exit lambda expression", span="979-979", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_443 [label="x == expected", span="1008-1008", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_438 [label="Entry lambda expression", span="1001-1001", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_439 [label="new FakeOptionWithTwoRequired()", span="1001-1001", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_440 [label="Exit lambda expression", span="1001-1001", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_444 [label="Exit lambda expression", span="1008-1008", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_10 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="14-14", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilderTests.cs"];
m0_31 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", file="InstanceBuilderTests.cs"];
m0_159 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", file="InstanceBuilderTests.cs"];
m0_377 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", span="876-876", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="InstanceBuilderTests.cs"];
m0_378 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="879-883", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="InstanceBuilderTests.cs"];
m0_379 [label="((NotParsed<FakeOptions>)result).Errors.Should().HaveCount(x => x == expected)", span="886-886", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="InstanceBuilderTests.cs"];
m0_380 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", span="876-876", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="InstanceBuilderTests.cs"];
m0_395 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", span="913-913", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", file="InstanceBuilderTests.cs"];
m0_396 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithTwoRequiredAndSets>>(() => new FakeOptionsWithTwoRequiredAndSets()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="916-920", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", file="InstanceBuilderTests.cs"];
m0_397 [label="type == ParserResultType.NotParsed", span="923-923", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", file="InstanceBuilderTests.cs"];
m0_398 [label="((NotParsed<FakeOptionsWithTwoRequiredAndSets>)result).Errors.Should().HaveCount(x => x == expected)", span="925-925", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", file="InstanceBuilderTests.cs"];
m0_399 [label="type == ParserResultType.Parsed", span="927-927", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", file="InstanceBuilderTests.cs"];
m0_400 [label="result.Should().BeOfType<Parsed<FakeOptionsWithTwoRequiredAndSets>>()", span="929-929", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", file="InstanceBuilderTests.cs"];
m0_401 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", span="913-913", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", file="InstanceBuilderTests.cs"];
m0_225 [label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", file="InstanceBuilderTests.cs"];
m0_48 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="134-134", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="InstanceBuilderTests.cs"];
m0_49 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraint()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="139-143", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="InstanceBuilderTests.cs"];
m0_50 [label="Assert.True(expected.SequenceEqual(((Parsed<FakeOptionsWithSequenceAndOnlyMinConstraint>)result).Value.StringSequence))", span="146-146", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="InstanceBuilderTests.cs"];
m0_51 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="134-134", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="InstanceBuilderTests.cs"];
m0_119 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="293-293", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_120 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="296-296", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_121 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''Yellow'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="299-303", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_122 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionsWithEnum>)result).Errors))", span="306-306", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_123 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="293-293", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_140 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", file="InstanceBuilderTests.cs"];
m0_24 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="65-65", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="InstanceBuilderTests.cs"];
m0_25 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithDouble>>(() => new FakeOptionsWithDouble()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="70-74", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="InstanceBuilderTests.cs"];
m0_26 [label="Assert.Equal(expected, ((Parsed<FakeOptionsWithDouble>)result).Value.DoubleValue)", span="77-77", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="InstanceBuilderTests.cs"];
m0_27 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="65-65", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="InstanceBuilderTests.cs"];
m0_275 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", file="InstanceBuilderTests.cs"];
m0_360 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMinMaxZero.FakeOptionsWithMinMaxZero()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithMinMaxZero.FakeOptionsWithMinMaxZero()", file="InstanceBuilderTests.cs"];
m0_12 [label="Entry Unk.True", span="", cluster="Unk.True", file="InstanceBuilderTests.cs"];
m0_267 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="654-654", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs"];
m0_268 [label="var expectedResult = new[] { new MissingRequiredOptionError(NameInfo.EmptyName) }", span="657-657", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs"];
m0_269 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithRequiredValue>>(() => new FakeOptionsWithRequiredValue()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="660-664", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs"];
m0_270 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionsWithRequiredValue>)result).Errors))", span="667-667", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs"];
m0_271 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="654-654", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs"];
m0_226 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="558-558", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_227 [label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="561-561", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_228 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="564-568", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_229 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptions>)result).Errors))", span="571-571", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_230 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="558-558", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_317 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()", file="InstanceBuilderTests.cs"];
m0_313 [label="Entry Unk.get_IsSome", span="", cluster="Unk.get_IsSome", file="InstanceBuilderTests.cs"];
m0_188 [label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11", cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="InstanceBuilderTests.cs"];
m0_0 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="18-18", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs"];
m0_1 [label="var fakeOptions = new FakeOptions()", span="21-21", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs"];
m0_2 [label="var expectedResult = new NotParsed<FakeOptions>(\r\n                typeof(FakeOptions), new Error[] { new HelpRequestedError() })", span="22-23", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs"];
m0_3 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => fakeOptions),\r\n                new[] { ''--help'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="26-30", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs"];
m0_4 [label="Assert.True(expectedResult.Equals(result))", span="33-33", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs"];
m0_5 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="18-18", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs"];
m0_217 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="539-539", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs"];
m0_218 [label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="542-542", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs"];
m0_219 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequired>>(() => new FakeOptionWithRequired()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="545-549", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs"];
m0_220 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionWithRequired>)result).Errors))", span="552-552", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs"];
m0_221 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="539-539", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs"];
m0_208 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="518-518", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs"];
m0_209 [label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="520-524", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs"];
m0_210 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="526-530", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs"];
m0_211 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionWithRequiredAndSet>)result).Errors))", span="533-533", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs"];
m0_212 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="518-518", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs"];
m0_11 [label="Entry CommandLine.NotParsed<T>.Equals(object)", span="179-179", cluster="CommandLine.NotParsed<T>.Equals(object)", file="InstanceBuilderTests.cs"];
m0_36 [label="Entry Unk.SequenceEqual", span="", cluster="Unk.SequenceEqual", file="InstanceBuilderTests.cs"];
m0_127 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="312-312", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_128 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="315-315", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_129 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''RED'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="318-322", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_130 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionsWithEnum>)result).Errors))", span="325-325", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_131 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="312-312", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_69 [label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="269-269", cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs"];
m0_409 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="935-935", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="InstanceBuilderTests.cs"];
m0_410 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithRequiredValue>>(() => new FakeOptionsWithRequiredValue()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="940-944", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="InstanceBuilderTests.cs"];
m0_411 [label="expected.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithRequiredValue>)result).Value)", span="947-947", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="InstanceBuilderTests.cs"];
m0_412 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="935-935", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="InstanceBuilderTests.cs"];
m0_84 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="212-212", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_85 [label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="215-215", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_86 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraint()),\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="218-222", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_87 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionsWithSequenceAndOnlyMaxConstraint>)result).Errors))", span="225-225", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_88 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="212-212", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_64 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="174-174", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceBuilderTests.cs"];
m0_65 [label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="177-177", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceBuilderTests.cs"];
m0_66 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraint()),\r\n                new[] { ''-s'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="180-184", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceBuilderTests.cs"];
m0_67 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionsWithSequenceAndOnlyMinConstraint>)result).Errors))", span="187-187", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceBuilderTests.cs"];
m0_68 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="174-174", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceBuilderTests.cs"];
m0_135 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="331-331", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs"];
m0_136 [label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="334-340", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs"];
m0_137 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithValues>>(() => new FakeOptionsWithValues()),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="343-347", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs"];
m0_138 [label="expectedResult.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithValues>)result).Value)", span="350-350", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs"];
m0_139 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="331-331", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs"];
m0_423 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", file="InstanceBuilderTests.cs"];
m0_349 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMaxZero.FakeOptionsWithMaxZero()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithMaxZero.FakeOptionsWithMaxZero()", file="InstanceBuilderTests.cs"];
m0_369 [label="Entry Unk.HaveCount", span="", cluster="Unk.HaveCount", file="InstanceBuilderTests.cs"];
m0_198 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", file="InstanceBuilderTests.cs"];
m0_263 [label="Entry string.Equals(string)", span="0-0", cluster="string.Equals(string)", file="InstanceBuilderTests.cs"];
m0_70 [label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20", cluster="CommandLine.NameInfo.NameInfo(string, string)", file="InstanceBuilderTests.cs"];
m0_16 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="42-42", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="InstanceBuilderTests.cs"];
m0_17 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="47-51", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="InstanceBuilderTests.cs"];
m0_18 [label="Assert.Equal(expected, ((Parsed<FakeOptions>)result).Value.LongValue)", span="54-54", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="InstanceBuilderTests.cs"];
m0_19 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="42-42", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="InstanceBuilderTests.cs"];
m0_394 [label="Entry CommandLine.Tests.Fakes.FakeInterfaceOptions.FakeInterfaceOptions()", span="2-2", cluster="CommandLine.Tests.Fakes.FakeInterfaceOptions.FakeInterfaceOptions()", file="InstanceBuilderTests.cs"];
m0_20 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="InstanceBuilderTests.cs"];
m0_318 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="784-784", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="InstanceBuilderTests.cs"];
m0_319 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithFSharpOption>>(() => new FakeOptionsWithFSharpOption()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="789-793", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="InstanceBuilderTests.cs"];
m0_321 [label="expectedValue.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithFSharpOption>)result).Value.Offset.Value)", span="798-798", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="InstanceBuilderTests.cs"];
m0_322 [label="expectedSome.ShouldBeEquivalentTo(FSharpOption<int>.get_IsSome(((Parsed<FakeOptionsWithFSharpOption>)result).Value.Offset))", span="800-800", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="InstanceBuilderTests.cs"];
m0_320 [label="((Parsed<FakeOptionsWithFSharpOption>)result).Value.Offset != null", span="796-796", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="InstanceBuilderTests.cs"];
m0_323 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="784-784", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="InstanceBuilderTests.cs"];
m0_424 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", span="972-972", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="InstanceBuilderTests.cs"];
m0_425 [label="var expectedResult = new FakeOptions { StringValue=''strval0'', IntSequence=new[] { 9, 7, 8 }, BoolValue = true,  LongValue = 9876543210L }", span="975-975", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="InstanceBuilderTests.cs"];
m0_426 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''--stringvalue=strval0'', ''-i'', ''9'', ''7'', ''8'', ''-x'', ''9876543210'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="978-982", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="InstanceBuilderTests.cs"];
m0_427 [label="expectedResult.ShouldBeEquivalentTo(((Parsed<FakeOptions>)result).Value)", span="985-985", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="InstanceBuilderTests.cs"];
m0_428 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", span="972-972", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="InstanceBuilderTests.cs"];
m0_151 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", file="InstanceBuilderTests.cs"];
m0_194 [label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo, string)", span="304-304", cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo, string)", file="InstanceBuilderTests.cs"];
m0_180 [label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", span="33-33", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", file="InstanceBuilderTests.cs"];
m0_160 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="405-405", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="InstanceBuilderTests.cs"];
m0_161 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndSeparator>>(() => new FakeOptionsWithSequenceAndSeparator()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="410-414", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="InstanceBuilderTests.cs"];
m0_162 [label="expected.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithSequenceAndSeparator>)result).Value.StringSequence)", span="417-417", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="InstanceBuilderTests.cs"];
m0_163 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="405-405", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="InstanceBuilderTests.cs"];
m0_213 [label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="291-291", cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs"];
m0_292 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="718-718", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="InstanceBuilderTests.cs"];
m0_293 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNullables>>(() => new FakeOptionsWithNullables()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="723-727", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="InstanceBuilderTests.cs"];
m0_294 [label="expected.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithNullables>)result).Value.NullableInt)", span="730-730", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="InstanceBuilderTests.cs"];
m0_295 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="718-718", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="InstanceBuilderTests.cs"];
m0_234 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="577-577", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_235 [label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="580-580", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_236 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="583-587", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_237 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptions>)result).Errors))", span="590-590", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_238 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="577-577", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_199 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="499-499", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs"];
m0_200 [label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="501-504", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs"];
m0_201 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="506-510", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs"];
m0_202 [label="expectedResult.ShouldBeEquivalentTo(((Parsed<FakeOptionWithRequiredAndSet>)result).Value)", span="513-513", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs"];
m0_203 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="499-499", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs"];
m0_283 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="695-695", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_284 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="698-698", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_285 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceMinMaxEqual>>(() => new FakeOptionsWithSequenceMinMaxEqual()),\r\n                new[] { ''one'', ''two'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="701-705", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_286 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionsWithSequenceMinMaxEqual>)result).Errors))", span="708-708", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_287 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="695-695", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_9 [label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124", cluster="CSharpx.Maybe.Just<T>(T)", file="InstanceBuilderTests.cs"];
m0_405 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithTwoRequiredAndSets.FakeOptionsWithTwoRequiredAndSets()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithTwoRequiredAndSets.FakeOptionsWithTwoRequiredAndSets()", file="InstanceBuilderTests.cs"];
m0_101 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="256-256", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="InstanceBuilderTests.cs"];
m0_102 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="261-265", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="InstanceBuilderTests.cs"];
m0_103 [label="expected.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithEnum>)result).Value.Colors)", span="268-268", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="InstanceBuilderTests.cs"];
m0_104 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="256-256", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="InstanceBuilderTests.cs"];
m0_445 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", span="1013-1013", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="InstanceBuilderTests.cs"];
m0_446 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Nothing<Func<FakeImmutableOptions>>(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="1018-1022", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="InstanceBuilderTests.cs"];
m0_447 [label="expected.ShouldBeEquivalentTo(((Parsed<FakeImmutableOptions>)result).Value)", span="1025-1025", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="InstanceBuilderTests.cs"];
m0_448 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", span="1013-1013", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="InstanceBuilderTests.cs"];
m0_100 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", file="InstanceBuilderTests.cs"];
m0_368 [label="Entry Unk.Should", span="", cluster="Unk.Should", file="InstanceBuilderTests.cs"];
m0_276 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="677-677", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="InstanceBuilderTests.cs"];
m0_277 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="682-686", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="InstanceBuilderTests.cs"];
m0_278 [label="expected.ShouldBeEquivalentTo(((Parsed<FakeOptions>)result).Value.StringValue)", span="689-689", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="InstanceBuilderTests.cs"];
m0_279 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="677-677", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="InstanceBuilderTests.cs"];
m0_115 [label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="324-324", cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs"];
m0_437 [label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0", cluster="System.Collections.IEnumerable.OfType<TResult>()", file="InstanceBuilderTests.cs"];
m0_40 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", file="InstanceBuilderTests.cs"];
m0_338 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMinZero.FakeOptionsWithMinZero()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithMinZero.FakeOptionsWithMinZero()", file="InstanceBuilderTests.cs"];
m0_339 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", span="821-821", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="InstanceBuilderTests.cs"];
m0_340 [label="Action test = () => InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMaxZero>>(() => new FakeOptionsWithMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="824-828", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="InstanceBuilderTests.cs"];
m0_341 [label="Assert.Throws<ApplicationException>(test)", span="831-831", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="InstanceBuilderTests.cs"];
m0_342 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", span="821-821", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="InstanceBuilderTests.cs"];
m0_189 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="455-455", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs"];
m0_190 [label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl''), string.Empty),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''), string.Empty)\r\n                }", span="458-462", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs"];
m0_191 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSets>>(() => new FakeOptionsWithSets()),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="465-469", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs"];
m0_192 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionsWithSets>)result).Errors))", span="472-472", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs"];
m0_193 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="455-455", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs"];
m0_450 [label=fakeOptions, span="", file="InstanceBuilderTests.cs"];
m0_451 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span="", file="InstanceBuilderTests.cs"];
m0_452 [label=int, span="", file="InstanceBuilderTests.cs"];
m0_453 [label=int, span="", file="InstanceBuilderTests.cs"];
m0_454 [label=int, span="", file="InstanceBuilderTests.cs"];
m0_455 [label=int, span="", file="InstanceBuilderTests.cs"];
m1_4 [label="Entry Humanizer.Tests.AmbientCulture.AmbientCulture(string)", span="16-16", cluster="Humanizer.Tests.AmbientCulture.AmbientCulture(string)", file="InstanceChooser.cs"];
m1_5 [label="Exit Humanizer.Tests.AmbientCulture.AmbientCulture(string)", span="16-16", cluster="Humanizer.Tests.AmbientCulture.AmbientCulture(string)", file="InstanceChooser.cs"];
m1_6 [label="Entry Humanizer.Tests.AmbientCulture.Dispose()", span="21-21", cluster="Humanizer.Tests.AmbientCulture.Dispose()", file="InstanceChooser.cs"];
m1_7 [label="Thread.CurrentThread.CurrentUICulture = _culture", span="23-23", cluster="Humanizer.Tests.AmbientCulture.Dispose()", file="InstanceChooser.cs"];
m1_8 [label="Exit Humanizer.Tests.AmbientCulture.Dispose()", span="21-21", cluster="Humanizer.Tests.AmbientCulture.Dispose()", file="InstanceChooser.cs"];
m1_0 [label="Entry Humanizer.Tests.AmbientCulture.AmbientCulture(System.Globalization.CultureInfo)", span="10-10", cluster="Humanizer.Tests.AmbientCulture.AmbientCulture(System.Globalization.CultureInfo)", file="InstanceChooser.cs"];
m1_1 [label="_culture = Thread.CurrentThread.CurrentUICulture", span="12-12", cluster="Humanizer.Tests.AmbientCulture.AmbientCulture(System.Globalization.CultureInfo)", file="InstanceChooser.cs"];
m1_2 [label="Thread.CurrentThread.CurrentUICulture = culture", span="13-13", cluster="Humanizer.Tests.AmbientCulture.AmbientCulture(System.Globalization.CultureInfo)", file="InstanceChooser.cs"];
m1_3 [label="Exit Humanizer.Tests.AmbientCulture.AmbientCulture(System.Globalization.CultureInfo)", span="10-10", cluster="Humanizer.Tests.AmbientCulture.AmbientCulture(System.Globalization.CultureInfo)", file="InstanceChooser.cs"];
m1_9 [label="Humanizer.Tests.AmbientCulture", span="", file="InstanceChooser.cs"];
m2_10 [label="Entry CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", span="38-38", cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", file="ParserResult.cs"];
m2_46 [label="Entry CommandLine.Core.SpecificationExtensions.WithMin(CommandLine.Core.Specification, System.Func<int, bool>)", span="85-85", cluster="CommandLine.Core.SpecificationExtensions.WithMin(CommandLine.Core.Specification, System.Func<int, bool>)", file="ParserResult.cs"];
m2_48 [label="specification.Min.MatchJust(out min)", span="88-88", cluster="CommandLine.Core.SpecificationExtensions.WithMin(CommandLine.Core.Specification, System.Func<int, bool>)", file="ParserResult.cs"];
m2_47 [label="int min", span="87-87", cluster="CommandLine.Core.SpecificationExtensions.WithMin(CommandLine.Core.Specification, System.Func<int, bool>)", file="ParserResult.cs"];
m2_49 [label="return predicate(min);", span="90-90", cluster="CommandLine.Core.SpecificationExtensions.WithMin(CommandLine.Core.Specification, System.Func<int, bool>)", file="ParserResult.cs"];
m2_50 [label="return false;", span="92-92", cluster="CommandLine.Core.SpecificationExtensions.WithMin(CommandLine.Core.Specification, System.Func<int, bool>)", file="ParserResult.cs"];
m2_51 [label="Exit CommandLine.Core.SpecificationExtensions.WithMin(CommandLine.Core.Specification, System.Func<int, bool>)", span="85-85", cluster="CommandLine.Core.SpecificationExtensions.WithMin(CommandLine.Core.Specification, System.Func<int, bool>)", file="ParserResult.cs"];
m2_17 [label="Entry System.ApplicationException.ApplicationException(string)", span="0-0", cluster="System.ApplicationException.ApplicationException(string)", file="ParserResult.cs"];
m2_21 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)", file="ParserResult.cs"];
m2_11 [label="Entry CommandLine.Parser.Parser()", span="55-55", cluster="CommandLine.Parser.Parser()", file="ParserResult.cs"];
m2_12 [label="Entry CommandLine.Parser.ParseArguments(string[], object)", span="134-134", cluster="CommandLine.Parser.ParseArguments(string[], object)", file="ParserResult.cs"];
m2_14 [label="Entry Unk.Be", span="", cluster="Unk.Be", file="ParserResult.cs"];
m2_13 [label="Entry Unk.Should", span="", cluster="Unk.Should", file="ParserResult.cs"];
m2_15 [label="Exit CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", span="38-38", cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", file="ParserResult.cs"];
m2_0 [label="Entry CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)", span="11-11", cluster="CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)", file="ParserResult.cs"];
m2_1 [label="return specification.Tag == SpecificationType.Option;", span="13-13", cluster="CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)", file="ParserResult.cs", color=green, community=0];
m2_2 [label="Exit CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)", span="11-11", cluster="CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)", file="ParserResult.cs"];
m2_4 [label="return specification.Tag == SpecificationType.Value;", span="18-18", cluster="CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", file="ParserResult.cs", color=green, community=0];
m2_6 [label="Entry CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)", span="21-21", cluster="CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)", file="ParserResult.cs"];
m2_7 [label="return new OptionSpecification(\r\n                specification.ShortName,\r\n                newLongName,\r\n                specification.Required,\r\n                specification.SetName,\r\n                specification.Min,\r\n                specification.Max,\r\n                specification.Separator,\r\n                specification.DefaultValue,\r\n                specification.ConversionType,\r\n                specification.HelpText,\r\n                specification.MetaValue,\r\n                specification.EnumValues);", span="23-35", cluster="CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)", file="ParserResult.cs", color=green, community=0];
m2_8 [label="Exit CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)", span="21-21", cluster="CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)", file="ParserResult.cs"];
m2_3 [label="Entry CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", span="16-16", cluster="CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", file="ParserResult.cs"];
m2_5 [label="Exit CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", span="16-16", cluster="CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", file="ParserResult.cs"];
m2_9 [label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", span="17-17", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="ParserResult.cs"];
m2_22 [label="Entry CommandLine.Core.SpecificationExtensions.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", span="51-51", cluster="CommandLine.Core.SpecificationExtensions.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ParserResult.cs"];
m2_29 [label="specification.Min.MatchJust(out min)\r\n                        && specification.Max.MatchJust(out max)", span="60-61", cluster="CommandLine.Core.SpecificationExtensions.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ParserResult.cs"];
m2_28 [label="int max", span="59-59", cluster="CommandLine.Core.SpecificationExtensions.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ParserResult.cs"];
m2_30 [label="min >= 0 && max >= 0", span="63-63", cluster="CommandLine.Core.SpecificationExtensions.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ParserResult.cs"];
m2_32 [label="return Maybe.Nothing<int>();", span="71-71", cluster="CommandLine.Core.SpecificationExtensions.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ParserResult.cs"];
m2_31 [label="return Maybe.Just(max);", span="65-65", cluster="CommandLine.Core.SpecificationExtensions.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ParserResult.cs"];
m2_23 [label="specification.ConversionType.ToDescriptorKind()", span="53-53", cluster="CommandLine.Core.SpecificationExtensions.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ParserResult.cs"];
m2_27 [label="int min", span="58-58", cluster="CommandLine.Core.SpecificationExtensions.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ParserResult.cs"];
m2_25 [label="return Maybe.Just(1);", span="56-56", cluster="CommandLine.Core.SpecificationExtensions.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ParserResult.cs"];
m2_24 [label="TypeDescriptorKind.Scalar", span="55-55", cluster="CommandLine.Core.SpecificationExtensions.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ParserResult.cs"];
m2_26 [label="TypeDescriptorKind.Sequence", span="57-57", cluster="CommandLine.Core.SpecificationExtensions.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ParserResult.cs"];
m2_33 [label="Exit CommandLine.Core.SpecificationExtensions.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", span="51-51", cluster="CommandLine.Core.SpecificationExtensions.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ParserResult.cs"];
m2_18 [label="Entry lambda expression", span="42-42", cluster="lambda expression", file="ParserResult.cs"];
m2_19 [label="guard.Item1(spec)", span="42-42", cluster="lambda expression", file="ParserResult.cs"];
m2_20 [label="Exit lambda expression", span="42-42", cluster="lambda expression", file="ParserResult.cs"];
m2_38 [label="Entry CommandLine.Core.SpecificationExtensions.WithRange(CommandLine.Core.Specification, System.Func<int, int, bool>)", span="74-74", cluster="CommandLine.Core.SpecificationExtensions.WithRange(CommandLine.Core.Specification, System.Func<int, int, bool>)", file="ParserResult.cs"];
m2_42 [label="return predicate(min, max);", span="80-80", cluster="CommandLine.Core.SpecificationExtensions.WithRange(CommandLine.Core.Specification, System.Func<int, int, bool>)", color=green, community=0, file="ParserResult.cs"];
m2_41 [label="specification.Min.MatchJust(out min) && specification.Max.MatchJust(out max)", span="78-78", cluster="CommandLine.Core.SpecificationExtensions.WithRange(CommandLine.Core.Specification, System.Func<int, int, bool>)", file="ParserResult.cs"];
m2_39 [label="int min", span="76-76", cluster="CommandLine.Core.SpecificationExtensions.WithRange(CommandLine.Core.Specification, System.Func<int, int, bool>)", file="ParserResult.cs"];
m2_40 [label="int max", span="77-77", cluster="CommandLine.Core.SpecificationExtensions.WithRange(CommandLine.Core.Specification, System.Func<int, int, bool>)", file="ParserResult.cs"];
m2_43 [label="return false;", span="82-82", cluster="CommandLine.Core.SpecificationExtensions.WithRange(CommandLine.Core.Specification, System.Func<int, int, bool>)", file="ParserResult.cs"];
m2_44 [label="Exit CommandLine.Core.SpecificationExtensions.WithRange(CommandLine.Core.Specification, System.Func<int, int, bool>)", span="74-74", cluster="CommandLine.Core.SpecificationExtensions.WithRange(CommandLine.Core.Specification, System.Func<int, int, bool>)", file="ParserResult.cs"];
m2_35 [label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68", cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="ParserResult.cs"];
m2_34 [label="Entry System.Type.ToDescriptorKind()", span="22-22", cluster="System.Type.ToDescriptorKind()", file="ParserResult.cs"];
m2_52 [label="Entry CommandLine.Core.SpecificationExtensions.WithMax(CommandLine.Core.Specification, System.Func<int, bool>)", span="95-95", cluster="CommandLine.Core.SpecificationExtensions.WithMax(CommandLine.Core.Specification, System.Func<int, bool>)", file="ParserResult.cs"];
m2_54 [label="specification.Max.MatchJust(out max)", span="98-98", cluster="CommandLine.Core.SpecificationExtensions.WithMax(CommandLine.Core.Specification, System.Func<int, bool>)", file="ParserResult.cs"];
m2_53 [label="int max", span="97-97", cluster="CommandLine.Core.SpecificationExtensions.WithMax(CommandLine.Core.Specification, System.Func<int, bool>)", file="ParserResult.cs"];
m2_55 [label="return predicate(max);", span="100-100", cluster="CommandLine.Core.SpecificationExtensions.WithMax(CommandLine.Core.Specification, System.Func<int, bool>)", file="ParserResult.cs"];
m2_56 [label="return false;", span="102-102", cluster="CommandLine.Core.SpecificationExtensions.WithMax(CommandLine.Core.Specification, System.Func<int, bool>)", file="ParserResult.cs"];
m2_57 [label="Exit CommandLine.Core.SpecificationExtensions.WithMax(CommandLine.Core.Specification, System.Func<int, bool>)", span="95-95", cluster="CommandLine.Core.SpecificationExtensions.WithMax(CommandLine.Core.Specification, System.Func<int, bool>)", file="ParserResult.cs"];
m2_36 [label="Entry CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)", span="31-31", cluster="CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)", file="ParserResult.cs"];
m2_37 [label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63", cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="ParserResult.cs"];
m2_45 [label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0", cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", file="ParserResult.cs"];
m2_58 [label=guard, span="", file="ParserResult.cs"];
n165 -> n57  [key=1, style=dashed, color=darkseagreen4, label=builder];
n165 -> n80  [key=1, style=dashed, color=darkseagreen4, label=builder];
n165 -> n84  [key=1, style=dashed, color=darkseagreen4, label=builder];
n166 -> n61  [key=1, style=dashed, color=darkseagreen4, label=T];
n167 -> n70  [key=1, style=dashed, color=darkseagreen4, label=shortSwitches];
n168 -> n80  [key=1, style=dashed, color=darkseagreen4, label=settings];
n169 -> n109  [key=1, style=dashed, color=darkseagreen4, label=sep];
n170 -> n121  [key=1, style=dashed, color=darkseagreen4, label=doubQt];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=2, style=dotted];
n2 -> n0  [key=0, style=bold, color=blue];
n4 -> n5  [key=0, style=solid];
n5 -> n6  [key=0, style=solid];
n5 -> n3  [key=2, style=dotted];
n6 -> n4  [key=0, style=bold, color=blue];
n7 -> n8  [key=0, style=solid];
n8 -> n9  [key=0, style=solid];
n8 -> n10  [key=2, style=dotted];
n8 -> n11  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n9 -> n7  [key=0, style=bold, color=blue];
n11 -> n12  [key=0, style=solid];
n12 -> n11  [key=0, style=bold, color=blue];
n12 -> d56  [key=0, style=bold, color=blue];
n13 -> n14  [key=0, style=solid];
n13 -> n17  [key=1, style=dashed, color=darkseagreen4, label="System.Action<CommandLine.UnParserSettings>"];
n13 -> n19  [key=1, style=dashed, color=darkseagreen4, label=T];
n13 -> n22  [key=1, style=dashed, color=darkseagreen4, label=T];
n13 -> n61  [key=1, style=dashed, color=darkseagreen4, label=T];
n14 -> n15  [key=0, style=solid];
n14 -> n16  [key=0, style=solid];
n17 -> n18  [key=0, style=solid];
n17 -> n35  [key=2, style=dotted];
n19 -> n20  [key=0, style=solid];
n19 -> n36  [key=2, style=dotted];
n19 -> n21  [key=1, style=dashed, color=darkseagreen4, label=type];
n19 -> n22  [key=1, style=dashed, color=darkseagreen4, label=type];
n22 -> n23  [key=0, style=solid];
n22 -> n40  [key=2, style=dotted];
n22 -> n41  [key=2, style=dotted];
n22 -> n42  [key=2, style=dotted];
n22 -> n60  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n22 -> n22  [key=1, style=dashed, color=darkseagreen4, label=info];
n22 -> n26  [key=1, style=dashed, color=darkseagreen4, label=specs];
n61 -> n62  [key=0, style=solid];
n61 -> n63  [key=2, style=dotted];
n61 -> n64  [key=2, style=dotted];
n61 -> n65  [key=2, style=dotted];
n15 -> n33  [key=0, style=solid];
n15 -> n34  [key=2, style=dotted];
n16 -> n17  [key=0, style=solid];
n16 -> n3  [key=2, style=dotted];
n16 -> n18  [key=1, style=dashed, color=darkseagreen4, label=settings];
n16 -> n25  [key=1, style=dashed, color=darkseagreen4, label=settings];
n16 -> n27  [key=1, style=dashed, color=darkseagreen4, label=settings];
n16 -> n29  [key=1, style=dashed, color=darkseagreen4, label=settings];
n16 -> n80  [key=1, style=dashed, color=darkseagreen4, label=settings];
n18 -> n19  [key=0, style=solid];
n25 -> n26  [key=0, style=solid];
n25 -> n43  [key=2, style=dotted];
n25 -> n69  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n25 -> n28  [key=1, style=dashed, color=darkseagreen4, label=optSpecs];
n25 -> n29  [key=1, style=dashed, color=darkseagreen4, label=optSpecs];
n27 -> n28  [key=0, style=solid];
n27 -> n45  [key=2, style=dotted];
n27 -> n46  [key=2, style=dotted];
n27 -> n47  [key=2, style=dotted];
n27 -> n48  [key=2, style=dotted];
n27 -> n49  [key=2, style=dotted];
n27 -> n50  [key=2, style=dotted];
n27 -> n27  [key=1, style=dashed, color=darkseagreen4, label=builder];
n27 -> n76  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n27 -> n29  [key=1, style=dashed, color=darkseagreen4, label=builder];
n27 -> n80  [key=1, style=dashed, color=darkseagreen4, label=builder];
n27 -> n30  [key=1, style=dashed, color=darkseagreen4, label=builder];
n27 -> n31  [key=1, style=dashed, color=darkseagreen4, label=builder];
n27 -> n84  [key=1, style=dashed, color=darkseagreen4, label=builder];
n27 -> n32  [key=1, style=dashed, color=darkseagreen4, label=builder];
n29 -> n30  [key=0, style=solid];
n29 -> n53  [key=2, style=dotted];
n29 -> n79  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n80 -> n81  [key=0, style=solid];
n80 -> n82  [key=2, style=dotted];
n80 -> n50  [key=2, style=dotted];
n80 -> n46  [key=2, style=dotted];
n20 -> n21  [key=0, style=solid];
n20 -> n37  [key=2, style=dotted];
n20 -> n57  [key=1, style=dashed, color=darkseagreen4, label=builder];
n20 -> n27  [key=1, style=dashed, color=darkseagreen4, label=builder];
n21 -> n22  [key=0, style=solid];
n21 -> n38  [key=2, style=dotted];
n21 -> n39  [key=2, style=dotted];
n21 -> n56  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n57 -> n58  [key=0, style=solid];
n57 -> n59  [key=2, style=dotted];
n57 -> n46  [key=2, style=dotted];
n56 -> n57  [key=0, style=solid];
n23 -> n24  [key=0, style=solid];
n23 -> n43  [key=2, style=dotted];
n23 -> n44  [key=2, style=dotted];
n23 -> n66  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n23 -> n23  [key=1, style=dashed, color=darkseagreen4, label=info];
n23 -> n25  [key=1, style=dashed, color=darkseagreen4, label=allOptSpecs];
n60 -> n61  [key=0, style=solid];
n26 -> n27  [key=0, style=solid];
n26 -> n43  [key=2, style=dotted];
n26 -> n73  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n26 -> n26  [key=1, style=dashed, color=darkseagreen4, label=info];
n26 -> n30  [key=1, style=dashed, color=darkseagreen4, label=valSpecs];
n26 -> n31  [key=1, style=dashed, color=darkseagreen4, label=valSpecs];
n24 -> n25  [key=0, style=solid];
n24 -> n44  [key=2, style=dotted];
n24 -> n24  [key=1, style=dashed, color=darkseagreen4, label=info];
n24 -> n70  [key=1, style=dashed, color=darkseagreen4, label=shortSwitches];
n24 -> n27  [key=1, style=dashed, color=darkseagreen4, label=shortSwitches];
n66 -> n67  [key=0, style=solid];
n70 -> n71  [key=0, style=solid];
n70 -> n72  [key=2, style=dotted];
n69 -> n70  [key=0, style=solid];
n28 -> n29  [key=0, style=solid];
n28 -> n45  [key=2, style=dotted];
n28 -> n51  [key=2, style=dotted];
n28 -> n52  [key=2, style=dotted];
n73 -> n74  [key=0, style=solid];
n30 -> n31  [key=0, style=solid];
n30 -> n45  [key=2, style=dotted];
n30 -> n51  [key=2, style=dotted];
n30 -> n52  [key=2, style=dotted];
n31 -> n32  [key=0, style=solid];
n31 -> n53  [key=2, style=dotted];
n31 -> n83  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n76 -> n77  [key=0, style=solid];
n84 -> n85  [key=0, style=solid];
n84 -> n86  [key=2, style=dotted];
n84 -> n50  [key=2, style=dotted];
n84 -> n46  [key=2, style=dotted];
n32 -> n33  [key=0, style=solid];
n32 -> n54  [key=2, style=dotted];
n32 -> n55  [key=2, style=dotted];
n79 -> n80  [key=0, style=solid];
n83 -> n84  [key=0, style=solid];
n33 -> n13  [key=0, style=bold, color=blue];
n58 -> n56  [key=0, style=bold, color=blue];
n62 -> n60  [key=0, style=bold, color=blue];
n67 -> n68  [key=0, style=solid];
n68 -> n66  [key=0, style=bold, color=blue];
n71 -> n69  [key=0, style=bold, color=blue];
n74 -> n75  [key=0, style=solid];
n75 -> n73  [key=0, style=bold, color=blue];
n77 -> n78  [key=0, style=solid];
n78 -> n76  [key=0, style=bold, color=blue];
n81 -> n79  [key=0, style=bold, color=blue];
n85 -> n83  [key=0, style=bold, color=blue];
n87 -> n88  [key=0, style=solid];
n87 -> n89  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
n87 -> n91  [key=1, style=dashed, color=darkseagreen4, label=object];
n87 -> n93  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
n87 -> n95  [key=1, style=dashed, color=darkseagreen4, label=object];
n88 -> n89  [key=0, style=solid];
n88 -> n37  [key=2, style=dotted];
n88 -> n91  [key=1, style=dashed, color=darkseagreen4, label=builder];
n88 -> n97  [key=1, style=dashed, color=darkseagreen4, label=builder];
n88 -> n98  [key=1, style=dashed, color=darkseagreen4, label=builder];
n88 -> n99  [key=1, style=dashed, color=darkseagreen4, label=builder];
n88 -> n38  [key=3, color=darkorchid, style=bold, label="Property variable bool AddDashesToOption"];
n89 -> n90  [key=0, style=solid];
n89 -> n92  [key=0, style=solid];
n91 -> n99  [key=0, style=solid];
n91 -> n101  [key=2, style=dotted];
n91 -> n102  [key=2, style=dotted];
n93 -> n94  [key=0, style=solid];
n93 -> n103  [key=2, style=dotted];
n93 -> n109  [key=1, style=dashed, color=darkseagreen4, label=sep];
n93 -> n97  [key=1, style=dashed, color=darkseagreen4, label=sep];
n95 -> n96  [key=0, style=solid];
n95 -> n104  [key=2, style=dotted];
n95 -> n97  [key=1, style=dashed, color=darkseagreen4, label=e];
n97 -> n96  [key=0, style=solid];
n97 -> n106  [key=2, style=dotted];
n97 -> n102  [key=2, style=dotted];
n97 -> n46  [key=2, style=dotted];
n98 -> n99  [key=0, style=solid];
n98 -> n107  [key=2, style=dotted];
n99 -> n100  [key=0, style=solid];
n99 -> n54  [key=2, style=dotted];
n90 -> n91  [key=0, style=solid];
n92 -> n93  [key=0, style=solid];
n94 -> n95  [key=0, style=solid];
n94 -> n109  [key=1, style=dashed, color=darkseagreen4, label=object];
n94 -> n97  [key=1, style=dashed, color=darkseagreen4, label=format];
n109 -> n110  [key=0, style=solid];
n109 -> n101  [key=2, style=dotted];
n96 -> n97  [key=0, style=solid];
n96 -> n98  [key=0, style=solid];
n96 -> n105  [key=2, style=dotted];
n101 -> n111  [key=0, style=solid];
n101 -> n112  [key=1, style=dashed, color=darkseagreen4, label=object];
n100 -> n87  [key=0, style=bold, color=blue];
n108 -> n109  [key=0, style=solid];
n110 -> n108  [key=0, style=bold, color=blue];
n111 -> n112  [key=0, style=solid];
n111 -> n116  [key=1, style=dashed, color=darkseagreen4, label=string];
n111 -> n121  [key=1, style=dashed, color=darkseagreen4, label=doubQt];
n112 -> n113  [key=0, style=solid];
n112 -> n114  [key=2, style=dotted];
n112 -> n39  [key=2, style=dotted];
n112 -> n120  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n116 -> n117  [key=0, style=solid];
n116 -> n118  [key=2, style=dotted];
n116 -> n119  [key=2, style=dotted];
n121 -> n122  [key=0, style=solid];
n121 -> n72  [key=2, style=dotted];
n121 -> n123  [key=2, style=dotted];
n121 -> n124  [key=2, style=dotted];
n113 -> n101  [key=0, style=bold, color=blue];
n120 -> n121  [key=0, style=solid];
n115 -> n116  [key=0, style=solid];
n117 -> n115  [key=0, style=bold, color=blue];
n122 -> n120  [key=0, style=bold, color=blue];
n125 -> n126  [key=0, style=solid];
n126 -> n127  [key=0, style=solid];
n126 -> n114  [key=2, style=dotted];
n126 -> n39  [key=2, style=dotted];
n126 -> n128  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n127 -> n125  [key=0, style=bold, color=blue];
n128 -> n129  [key=0, style=solid];
n129 -> n130  [key=0, style=solid];
n130 -> n128  [key=0, style=bold, color=blue];
n131 -> n132  [key=0, style=solid];
n132 -> n133  [key=0, style=solid];
n132 -> n37  [key=2, style=dotted];
n132 -> n134  [key=2, style=dotted];
n132 -> n50  [key=2, style=dotted];
n132 -> n87  [key=2, style=dotted];
n132 -> n135  [key=2, style=dotted];
n132 -> n54  [key=2, style=dotted];
n133 -> n131  [key=0, style=bold, color=blue];
n136 -> n137  [key=0, style=solid];
n136 -> n138  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.OptionSpecification"];
n137 -> n138  [key=0, style=solid];
n138 -> n139  [key=0, style=solid];
n138 -> n140  [key=2, style=dotted];
n138 -> n124  [key=2, style=dotted];
n138 -> n141  [key=2, style=dotted];
n138 -> n54  [key=2, style=dotted];
n139 -> n136  [key=0, style=bold, color=blue];
n142 -> n143  [key=0, style=solid];
n142 -> n144  [key=1, style=dashed, color=darkseagreen4, label=object];
n142 -> n145  [key=1, style=dashed, color=darkseagreen4, label=object];
n143 -> n144  [key=0, style=solid];
n143 -> n145  [key=0, style=solid];
n143 -> n36  [key=2, style=dotted];
n143 -> n147  [key=2, style=dotted];
n143 -> n148  [key=2, style=dotted];
n144 -> n146  [key=0, style=solid];
n144 -> n149  [key=2, style=dotted];
n145 -> n146  [key=0, style=solid];
n146 -> n142  [key=0, style=bold, color=blue];
n150 -> n151  [key=0, style=solid];
n150 -> n153  [key=1, style=dashed, color=darkseagreen4, label=object];
n150 -> n155  [key=1, style=dashed, color=darkseagreen4, label=object];
n150 -> n157  [key=1, style=dashed, color=darkseagreen4, label=object];
n150 -> n159  [key=1, style=dashed, color=darkseagreen4, label=object];
n151 -> n152  [key=0, style=solid];
n151 -> n153  [key=0, style=solid];
n153 -> n154  [key=0, style=solid];
n153 -> n155  [key=0, style=solid];
n153 -> n36  [key=2, style=dotted];
n153 -> n147  [key=2, style=dotted];
n153 -> n148  [key=2, style=dotted];
n155 -> n156  [key=0, style=solid];
n155 -> n157  [key=0, style=solid];
n155 -> n36  [key=2, style=dotted];
n155 -> n163  [key=2, style=dotted];
n155 -> n164  [key=2, style=dotted];
n157 -> n158  [key=0, style=solid];
n157 -> n159  [key=0, style=solid];
n159 -> n160  [key=0, style=solid];
n159 -> n161  [key=0, style=solid];
n159 -> n104  [key=2, style=dotted];
n159 -> n105  [key=2, style=dotted];
n152 -> n162  [key=0, style=solid];
n154 -> n162  [key=0, style=solid];
n156 -> n162  [key=0, style=solid];
n158 -> n162  [key=0, style=solid];
n160 -> n162  [key=0, style=solid];
n161 -> n162  [key=0, style=solid];
n162 -> n150  [key=0, style=bold, color=blue];
d267 -> d268  [key=0, style=solid, color=green];
d267 -> d215  [key=2, style=dotted, color=green];
d267 -> d269  [key=1, style=dashed, color=green, label=words];
d267 -> d270  [key=1, style=dashed, color=green, label=words];
d267 -> d271  [key=1, style=dashed, color=green, label=words];
d267 -> d272  [key=1, style=dashed, color=green, label=words];
d267 -> d273  [key=1, style=dashed, color=green, label=words];
d267 -> d276  [key=1, style=dashed, color=green, label=words];
d267 -> d277  [key=1, style=dashed, color=green, label=words];
d258 -> d267  [key=1, style=dashed, color=green, label=optionHelpText];
d258 -> d259  [key=0, style=solid];
d258 -> d260  [key=1, style=dashed, color=darkseagreen4, label=optionHelpText];
d258 -> d262  [key=1, style=dashed, color=darkseagreen4, label=optionHelpText];
d258 -> d264  [key=1, style=dashed, color=darkseagreen4, label=optionHelpText];
d258 -> d265  [key=1, style=dashed, color=darkseagreen4, label=optionHelpText];
d258 -> d280  [key=1, style=dashed, color=darkseagreen4, label=optionHelpText];
d258 -> d283  [key=1, style=dashed, color=darkseagreen4, label=optionHelpText];
d260 -> d267  [key=1, style=dashed, color=green, label=optionHelpText];
d260 -> d260  [key=1, style=dashed, color=darkseagreen4, label=optionHelpText];
d260 -> d261  [key=0, style=solid];
d260 -> d288  [key=2, style=dotted];
d260 -> d262  [key=1, style=dashed, color=darkseagreen4, label=optionHelpText];
d260 -> d264  [key=1, style=dashed, color=darkseagreen4, label=optionHelpText];
d260 -> d265  [key=1, style=dashed, color=darkseagreen4, label=optionHelpText];
d260 -> d280  [key=1, style=dashed, color=darkseagreen4, label=optionHelpText];
d260 -> d283  [key=1, style=dashed, color=darkseagreen4, label=optionHelpText];
d262 -> d267  [key=1, style=dashed, color=green, label=optionHelpText];
d262 -> d262  [key=1, style=dashed, color=darkseagreen4, label=optionHelpText];
d262 -> d263  [key=0, style=solid];
d262 -> d50  [key=2, style=dotted];
d262 -> d289  [key=2, style=dotted];
d262 -> d264  [key=1, style=dashed, color=darkseagreen4, label=optionHelpText];
d262 -> d265  [key=1, style=dashed, color=darkseagreen4, label=optionHelpText];
d262 -> d280  [key=1, style=dashed, color=darkseagreen4, label=optionHelpText];
d262 -> d283  [key=1, style=dashed, color=darkseagreen4, label=optionHelpText];
d264 -> d267  [key=1, style=dashed, color=green, label=optionHelpText];
d264 -> d264  [key=1, style=dashed, color=darkseagreen4, label=optionHelpText];
d264 -> d265  [key=0, style=solid];
d264 -> d290  [key=2, style=dotted];
d264 -> d280  [key=1, style=dashed, color=darkseagreen4, label=optionHelpText];
d264 -> d283  [key=1, style=dashed, color=darkseagreen4, label=optionHelpText];
d266 -> d267  [key=0, style=solid, color=green];
d266 -> d270  [key=1, style=dashed, color=darkseagreen4, label=wordBuffer];
d266 -> d272  [key=1, style=dashed, color=darkseagreen4, label=wordBuffer];
d266 -> d276  [key=1, style=dashed, color=darkseagreen4, label=wordBuffer];
d266 -> d280  [key=1, style=dashed, color=darkseagreen4, label=wordBuffer];
d266 -> d196  [key=3, color=darkorchid, style=bold, label="Local variable int wordBuffer"];
d266 -> d247  [key=3, color=darkorchid, style=bold, label="Local variable int wordBuffer"];
d268 -> d269  [key=0, style=solid];
d268 -> d270  [key=1, style=dashed, color=darkseagreen4, label=i];
d268 -> d271  [key=1, style=dashed, color=darkseagreen4, label=i];
d268 -> d272  [key=1, style=dashed, color=darkseagreen4, label=i];
d268 -> d273  [key=1, style=dashed, color=darkseagreen4, label=i];
d268 -> d276  [key=1, style=dashed, color=darkseagreen4, label=i];
d268 -> d277  [key=1, style=dashed, color=darkseagreen4, label=i];
d268 -> d279  [key=1, style=dashed, color=darkseagreen4, label=i];
d268 -> d196  [key=3, color=darkorchid, style=bold, label="Local variable int i"];
d269 -> d270  [key=0, style=solid];
d269 -> d280  [key=0, style=solid];
d270 -> d271  [key=0, style=solid];
d270 -> d276  [key=0, style=solid];
d271 -> d272  [key=0, style=solid];
d271 -> d180  [key=2, style=dotted];
d272 -> d272  [key=1, style=dashed, color=darkseagreen4, label=wordBuffer];
d272 -> d273  [key=0, style=solid];
d272 -> d275  [key=1, style=dashed, color=darkseagreen4, label=wordBuffer];
d272 -> d280  [key=1, style=dashed, color=darkseagreen4, label=wordBuffer];
d273 -> d274  [key=0, style=solid];
d273 -> d279  [key=0, style=solid];
d276 -> d277  [key=0, style=solid];
d276 -> d280  [key=0, style=solid];
d277 -> d278  [key=0, style=solid];
d277 -> d216  [key=2, style=dotted];
d277 -> d180  [key=2, style=dotted];
d247 -> d258  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
d247 -> d260  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
d247 -> d262  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
d247 -> d264  [key=1, style=dashed, color=darkseagreen4, label=string];
d247 -> d270  [key=1, style=dashed, color=darkseagreen4, label=int];
d247 -> d273  [key=1, style=dashed, color=darkseagreen4, label=int];
d247 -> d276  [key=1, style=dashed, color=darkseagreen4, label=int];
d247 -> d277  [key=1, style=dashed, color=darkseagreen4, label=int];
d247 -> d255  [key=0, style=solid];
d247 -> d256  [key=1, style=dashed, color=darkseagreen4, label=int];
d247 -> d294  [key=1, style=dashed, color=darkseagreen4, label=int];
d247 -> d298  [key=1, style=dashed, color=darkseagreen4, label=int];
d247 -> d257  [key=1, style=dashed, color=darkseagreen4, label=int];
d247 -> d259  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
d247 -> d261  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
d247 -> d263  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
d247 -> d278  [key=1, style=dashed, color=darkseagreen4, label=int];
d247 -> d281  [key=1, style=dashed, color=darkseagreen4, label=int];
d247 -> d282  [key=1, style=dashed, color=darkseagreen4, label=int];
d247 -> d237  [key=3, color=darkorchid, style=bold, label="Parameter variable int maxLength"];
d247 -> d240  [key=3, color=darkorchid, style=bold, label="Parameter variable CommandLine.Core.Specification specification"];
d247 -> d239  [key=3, color=darkorchid, style=bold, label="Parameter variable int widthOfHelpText"];
d257 -> d258  [key=0, style=solid];
d257 -> d169  [key=2, style=dotted];
d257 -> d287  [key=2, style=dotted];
d257 -> d180  [key=2, style=dotted];
d259 -> d260  [key=0, style=solid];
d259 -> d261  [key=0, style=solid];
d259 -> d46  [key=2, style=dotted];
d265 -> d266  [key=0, style=solid];
d265 -> d283  [key=0, style=solid];
d265 -> d110  [key=2, style=dotted];
d280 -> d280  [key=1, style=dashed, color=darkseagreen4, label=optionHelpText];
d280 -> d281  [key=0, style=solid];
d280 -> d217  [key=2, style=dotted];
d280 -> d218  [key=2, style=dotted];
d280 -> d291  [key=2, style=dotted];
d280 -> d282  [key=1, style=dashed, color=darkseagreen4, label=optionHelpText];
d280 -> d283  [key=1, style=dashed, color=darkseagreen4, label=optionHelpText];
d283 -> d284  [key=0, style=solid];
d283 -> d180  [key=2, style=dotted];
d283 -> d187  [key=2, style=dotted];
d261 -> d262  [key=0, style=solid];
d261 -> d263  [key=0, style=solid];
d261 -> d49  [key=2, style=dotted];
d263 -> d264  [key=0, style=solid];
d263 -> d265  [key=0, style=solid];
d289 -> d10  [key=3, color=darkorchid, style=bold, label="Field variable string copyright"];
d196 -> d196  [key=3, color=darkorchid, style=bold, label="Local variable int wordBuffer"];
d196 -> d197  [key=0, style=solid];
d196 -> d200  [key=1, style=dashed, color=darkseagreen4, label=wordBuffer];
d196 -> d202  [key=1, style=dashed, color=darkseagreen4, label=wordBuffer];
d196 -> d206  [key=1, style=dashed, color=darkseagreen4, label=wordBuffer];
d196 -> d210  [key=1, style=dashed, color=darkseagreen4, label=wordBuffer];
d196 -> d194  [key=3, color=darkorchid, style=bold, label="Local variable int wordBuffer"];
d279 -> d269  [key=0, style=solid];
d279 -> d279  [key=1, style=dashed, color=darkseagreen4, label=i];
d197 -> d215  [key=2, style=dotted];
d197 -> d198  [key=0, style=solid];
d197 -> d199  [key=1, style=dashed, color=darkseagreen4, label=words];
d197 -> d200  [key=1, style=dashed, color=darkseagreen4, label=words];
d197 -> d201  [key=1, style=dashed, color=darkseagreen4, label=words];
d197 -> d202  [key=1, style=dashed, color=darkseagreen4, label=words];
d197 -> d203  [key=1, style=dashed, color=darkseagreen4, label=words];
d197 -> d206  [key=1, style=dashed, color=darkseagreen4, label=words];
d197 -> d207  [key=1, style=dashed, color=darkseagreen4, label=words];
d367 -> d271  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HelpText"];
d367 -> d277  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HelpText"];
d367 -> d257  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HelpText"];
d367 -> d259  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HelpText"];
d367 -> d283  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HelpText"];
d367 -> d17  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HelpText"];
d367 -> d18  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HelpText"];
d367 -> d19  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HelpText"];
d367 -> d20  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HelpText"];
d367 -> d21  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HelpText"];
d367 -> d122  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HelpText"];
d367 -> d126  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HelpText"];
d367 -> d131  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HelpText"];
d367 -> d139  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HelpText"];
d367 -> d146  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HelpText"];
d367 -> d153  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HelpText"];
d367 -> d183  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HelpText"];
d367 -> d220  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HelpText"];
d367 -> d232  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HelpText"];
d367 -> d237  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HelpText"];
d367 -> d238  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HelpText"];
d367 -> d240  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HelpText"];
d367 -> d245  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HelpText"];
d367 -> d241  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HelpText"];
d367 -> d248  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HelpText"];
d367 -> d250  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HelpText"];
d367 -> d252  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HelpText"];
d367 -> d253  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HelpText"];
d367 -> d255  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HelpText"];
d367 -> d256  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HelpText"];
d367 -> d294  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HelpText"];
d367 -> d298  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HelpText"];
d367 -> d274  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HelpText"];
d367 -> d281  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HelpText"];
d367 -> d284  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HelpText"];
d367 -> d301  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HelpText"];
d367 -> d305  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HelpText"];
d367 -> d311  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HelpText"];
d367 -> d322  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HelpText"];
d367 -> d323  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HelpText"];
d367 -> d325  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HelpText"];
d367 -> d329  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HelpText"];
d367 -> d343  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HelpText"];
d367 -> d348  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HelpText"];
d275 -> d280  [key=1, style=dashed, color=darkseagreen4, label=wordBuffer];
d275 -> d279  [key=0, style=solid];
d275 -> d275  [key=1, style=dashed, color=darkseagreen4, label=wordBuffer];
d274 -> d180  [key=2, style=dotted];
d274 -> d275  [key=0, style=solid];
d278 -> d280  [key=0, style=solid];
d245 -> d247  [key=2, style=dotted];
d245 -> d246  [key=0, style=solid];
d285 -> d247  [key=0, style=bold, color=blue];
d296 -> d247  [key=3, color=darkorchid, style=bold, label="Parameter variable CommandLine.Core.OptionSpecification specification"];
d296 -> d301  [key=0, style=solid];
d296 -> d305  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.OptionSpecification"];
d296 -> d311  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.OptionSpecification"];
d300 -> d247  [key=3, color=darkorchid, style=bold, label="Parameter variable CommandLine.Core.ValueSpecification specification"];
d300 -> d313  [key=0, style=solid];
d300 -> d316  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.ValueSpecification"];
d300 -> d320  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.ValueSpecification"];
d255 -> d180  [key=2, style=dotted];
d255 -> d256  [key=0, style=solid];
d256 -> d257  [key=0, style=solid];
d256 -> d24  [key=2, style=dotted];
d256 -> d286  [key=2, style=dotted];
d256 -> d293  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d256 -> d297  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d294 -> d180  [key=2, style=dotted];
d294 -> d296  [key=2, style=dotted];
d294 -> d295  [key=0, style=solid];
d298 -> d180  [key=2, style=dotted];
d298 -> d300  [key=2, style=dotted];
d298 -> d299  [key=0, style=solid];
d281 -> d282  [key=0, style=solid];
d281 -> d292  [key=2, style=dotted];
d281 -> d187  [key=2, style=dotted];
d282 -> d265  [key=0, style=solid];
d282 -> d283  [key=0, style=solid];
d237 -> d245  [key=1, style=dashed, color=darkseagreen4, label=maxLength];
d237 -> d238  [key=0, style=solid];
d237 -> d243  [key=2, style=dotted];
d237 -> d239  [key=1, style=dashed, color=darkseagreen4, label=maxLength];
d237 -> d240  [key=1, style=dashed, color=darkseagreen4, label=maxLength];
d240 -> d241  [key=0, style=solid];
d240 -> d114  [key=2, style=dotted];
d240 -> d244  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d239 -> d245  [key=1, style=dashed, color=darkseagreen4, label=remainingSpace];
d239 -> d240  [key=0, style=solid];
d284 -> d285  [key=0, style=solid];
d34 -> d50  [key=2, style=dotted];
d34 -> d35  [key=0, style=solid];
d34 -> d51  [key=2, style=dotted];
d37 -> d50  [key=2, style=dotted];
d37 -> d38  [key=0, style=solid];
d37 -> d51  [key=2, style=dotted];
d10 -> d11  [key=0, style=solid];
d10 -> d13  [key=1, style=dashed, color=darkseagreen4, label=string];
d10 -> d15  [key=1, style=dashed, color=darkseagreen4, label=string];
d10 -> d19  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.SentenceBuilder"];
d10 -> d20  [key=1, style=dashed, color=darkseagreen4, label=string];
d10 -> d21  [key=1, style=dashed, color=darkseagreen4, label=string];
d194 -> d290  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Text.StringBuilder builder"];
d194 -> d197  [key=1, style=dashed, color=darkseagreen4, label=string];
d194 -> d195  [key=0, style=solid];
d194 -> d200  [key=1, style=dashed, color=darkseagreen4, label=int];
d194 -> d201  [key=1, style=dashed, color=darkseagreen4, label="System.Text.StringBuilder"];
d194 -> d203  [key=1, style=dashed, color=darkseagreen4, label=int];
d194 -> d204  [key=1, style=dashed, color=darkseagreen4, label="System.Text.StringBuilder"];
d194 -> d206  [key=1, style=dashed, color=darkseagreen4, label=int];
d194 -> d207  [key=1, style=dashed, color=darkseagreen4, label="System.Text.StringBuilder"];
d194 -> d208  [key=1, style=dashed, color=darkseagreen4, label=int];
d194 -> d210  [key=1, style=dashed, color=darkseagreen4, label=string];
d194 -> d211  [key=1, style=dashed, color=darkseagreen4, label="System.Text.StringBuilder"];
d194 -> d212  [key=1, style=dashed, color=darkseagreen4, label=int];
d194 -> d213  [key=1, style=dashed, color=darkseagreen4, label="System.Text.StringBuilder"];
d194 -> d128  [key=3, color=darkorchid, style=bold, label="Parameter variable string value"];
d194 -> d124  [key=3, color=darkorchid, style=bold, label="Parameter variable int maximumLength"];
d195 -> d196  [key=0, style=solid];
d195 -> d187  [key=2, style=dotted];
d198 -> d196  [key=3, color=darkorchid, style=bold, label="Local variable int i"];
d198 -> d199  [key=0, style=solid];
d198 -> d200  [key=1, style=dashed, color=darkseagreen4, label=i];
d198 -> d201  [key=1, style=dashed, color=darkseagreen4, label=i];
d198 -> d202  [key=1, style=dashed, color=darkseagreen4, label=i];
d198 -> d203  [key=1, style=dashed, color=darkseagreen4, label=i];
d198 -> d206  [key=1, style=dashed, color=darkseagreen4, label=i];
d198 -> d207  [key=1, style=dashed, color=darkseagreen4, label=i];
d198 -> d209  [key=1, style=dashed, color=darkseagreen4, label=i];
d335 -> d196  [key=3, color=darkorchid, style=bold, label="Local variable int specLength"];
d335 -> d336  [key=0, style=solid];
d335 -> d342  [key=1, style=dashed, color=darkseagreen4, label=specLength];
d335 -> d347  [key=1, style=dashed, color=darkseagreen4, label=specLength];
d335 -> d352  [key=1, style=dashed, color=darkseagreen4, label=specLength];
d335 -> d353  [key=1, style=dashed, color=darkseagreen4, label=specLength];
d335 -> d338  [key=3, color=darkorchid, style=bold, label="Local variable int specLength"];
d338 -> d196  [key=3, color=darkorchid, style=bold, label="Local variable int metaLength"];
d338 -> d339  [key=0, style=solid];
d338 -> d345  [key=1, style=dashed, color=darkseagreen4, label=metaLength];
d338 -> d350  [key=1, style=dashed, color=darkseagreen4, label=metaLength];
d355 -> d196  [key=3, color=darkorchid, style=bold, label="Local variable int specLength"];
d355 -> d356  [key=0, style=solid];
d355 -> d361  [key=1, style=dashed, color=darkseagreen4, label=specLength];
d355 -> d362  [key=1, style=dashed, color=darkseagreen4, label=specLength];
d355 -> d357  [key=3, color=darkorchid, style=bold, label="Local variable int specLength"];
d357 -> d196  [key=3, color=darkorchid, style=bold, label="Local variable int metaLength"];
d357 -> d358  [key=0, style=solid];
d357 -> d363  [key=1, style=dashed, color=darkseagreen4, label=metaLength];
d200 -> d201  [key=0, style=solid];
d200 -> d206  [key=0, style=solid];
d202 -> d202  [key=1, style=dashed, color=darkseagreen4, label=wordBuffer];
d202 -> d203  [key=0, style=solid];
d202 -> d205  [key=1, style=dashed, color=darkseagreen4, label=wordBuffer];
d202 -> d210  [key=1, style=dashed, color=darkseagreen4, label=wordBuffer];
d206 -> d207  [key=0, style=solid];
d206 -> d210  [key=0, style=solid];
d210 -> d217  [key=2, style=dotted];
d210 -> d218  [key=2, style=dotted];
d210 -> d210  [key=1, style=dashed, color=darkseagreen4, label=string];
d210 -> d211  [key=0, style=solid];
d210 -> d212  [key=1, style=dashed, color=darkseagreen4, label=string];
d210 -> d213  [key=1, style=dashed, color=darkseagreen4, label=string];
d199 -> d200  [key=0, style=solid];
d199 -> d210  [key=0, style=solid];
d201 -> d180  [key=2, style=dotted];
d201 -> d202  [key=0, style=solid];
d203 -> d204  [key=0, style=solid];
d203 -> d209  [key=0, style=solid];
d207 -> d180  [key=2, style=dotted];
d207 -> d216  [key=2, style=dotted];
d207 -> d208  [key=0, style=solid];
d17 -> d18  [key=0, style=solid];
d17 -> d24  [key=2, style=dotted];
d18 -> d19  [key=0, style=solid];
d18 -> d24  [key=2, style=dotted];
d19 -> d20  [key=0, style=solid];
d20 -> d21  [key=0, style=solid];
d21 -> d22  [key=0, style=solid];
d122 -> d123  [key=0, style=solid];
d122 -> d124  [key=2, style=dotted];
d126 -> d127  [key=0, style=solid];
d126 -> d128  [key=2, style=dotted];
d131 -> d132  [key=0, style=solid];
d131 -> d133  [key=2, style=dotted];
d131 -> d111  [key=2, style=dotted];
d131 -> d134  [key=2, style=dotted];
d139 -> d140  [key=0, style=solid];
d139 -> d142  [key=2, style=dotted];
d139 -> d111  [key=2, style=dotted];
d139 -> d134  [key=2, style=dotted];
d146 -> d147  [key=0, style=solid];
d146 -> d133  [key=2, style=dotted];
d146 -> d111  [key=2, style=dotted];
d146 -> d134  [key=2, style=dotted];
d153 -> d154  [key=0, style=solid];
d153 -> d142  [key=2, style=dotted];
d153 -> d111  [key=2, style=dotted];
d153 -> d134  [key=2, style=dotted];
d183 -> d180  [key=2, style=dotted];
d183 -> d169  [key=2, style=dotted];
d183 -> d110  [key=2, style=dotted];
d183 -> d187  [key=2, style=dotted];
d183 -> d184  [key=0, style=solid];
d183 -> d24  [key=2, style=dotted];
d183 -> d185  [key=2, style=dotted];
d183 -> d186  [key=2, style=dotted];
d183 -> d188  [key=2, style=dotted];
d220 -> d221  [key=0, style=solid];
d220 -> d75  [key=2, style=dotted];
d220 -> d225  [key=2, style=dotted];
d220 -> d226  [key=2, style=dotted];
d220 -> d227  [key=2, style=dotted];
d220 -> d222  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
d232 -> d232  [key=1, style=dashed, color=darkseagreen4, label=verbTuple];
d232 -> d233  [key=0, style=solid];
d232 -> d234  [key=2, style=dotted];
d232 -> d235  [key=2, style=dotted];
d232 -> d225  [key=2, style=dotted];
d232 -> d226  [key=2, style=dotted];
d232 -> d236  [key=2, style=dotted];
d238 -> d239  [key=0, style=solid];
d238 -> d24  [key=2, style=dotted];
d241 -> d242  [key=0, style=solid];
d248 -> d249  [key=0, style=solid];
d248 -> d47  [key=2, style=dotted];
d248 -> d235  [key=2, style=dotted];
d250 -> d251  [key=0, style=solid];
d250 -> d47  [key=2, style=dotted];
d250 -> d235  [key=2, style=dotted];
d252 -> d194  [key=2, style=dotted];
d252 -> d253  [key=0, style=solid];
d253 -> d254  [key=0, style=solid];
d301 -> d169  [key=2, style=dotted];
d301 -> d302  [key=0, style=solid];
d301 -> d24  [key=2, style=dotted];
d301 -> d303  [key=2, style=dotted];
d301 -> d304  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d301 -> d310  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d305 -> d187  [key=2, style=dotted];
d305 -> d306  [key=0, style=solid];
d305 -> d307  [key=2, style=dotted];
d305 -> d308  [key=2, style=dotted];
d305 -> d309  [key=2, style=dotted];
d311 -> d187  [key=2, style=dotted];
d311 -> d312  [key=0, style=solid];
d311 -> d308  [key=2, style=dotted];
d311 -> d309  [key=2, style=dotted];
d322 -> d194  [key=2, style=dotted];
d322 -> d323  [key=0, style=solid];
d323 -> d324  [key=0, style=solid];
d325 -> d326  [key=0, style=solid];
d325 -> d327  [key=2, style=dotted];
d325 -> d328  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d329 -> d330  [key=0, style=solid];
d329 -> d332  [key=2, style=dotted];
d329 -> d333  [key=2, style=dotted];
d343 -> d344  [key=0, style=solid];
d343 -> d345  [key=0, style=solid];
d348 -> d349  [key=0, style=solid];
d348 -> d350  [key=0, style=solid];
d174 -> d180  [key=2, style=dotted];
d174 -> d175  [key=0, style=solid];
d174 -> d177  [key=2, style=dotted];
d174 -> d178  [key=2, style=dotted];
d174 -> d179  [key=2, style=dotted];
d204 -> d180  [key=2, style=dotted];
d204 -> d205  [key=0, style=solid];
d213 -> d180  [key=2, style=dotted];
d213 -> d214  [key=0, style=solid];
d374 -> d245  [key=1, style=dashed, color=darkseagreen4, label=string];
d375 -> d245  [key=1, style=dashed, color=darkseagreen4, label=maxLength];
d376 -> d245  [key=1, style=dashed, color=darkseagreen4, label=remainingSpace];
d134 -> d245  [key=1, style=dashed, color=darkseagreen4, label=string];
d134 -> d237  [key=0, style=solid];
d134 -> d240  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>"];
d134 -> d239  [key=1, style=dashed, color=darkseagreen4, label=int];
d244 -> d245  [key=0, style=solid];
d246 -> d244  [key=0, style=bold, color=blue];
d302 -> d296  [key=0, style=bold, color=blue];
d314 -> d300  [key=0, style=bold, color=blue];
d313 -> d169  [key=2, style=dotted];
d313 -> d314  [key=0, style=solid];
d313 -> d24  [key=2, style=dotted];
d313 -> d286  [key=2, style=dotted];
d313 -> d309  [key=2, style=dotted];
d313 -> d315  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d313 -> d319  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d316 -> d317  [key=0, style=solid];
d316 -> d318  [key=2, style=dotted];
d320 -> d321  [key=0, style=solid];
d320 -> d308  [key=2, style=dotted];
d293 -> d294  [key=0, style=solid];
d297 -> d298  [key=0, style=solid];
d377 -> d294  [key=1, style=dashed, color=darkseagreen4, label=int];
d377 -> d298  [key=1, style=dashed, color=darkseagreen4, label=int];
d378 -> d294  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
d378 -> d298  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
d295 -> d293  [key=0, style=bold, color=blue];
d299 -> d297  [key=0, style=bold, color=blue];
d243 -> d325  [key=0, style=solid];
d175 -> d169  [key=2, style=dotted];
d175 -> d176  [key=0, style=solid];
d175 -> d181  [key=2, style=dotted];
d163 -> d169  [key=2, style=dotted];
d163 -> d164  [key=0, style=solid];
d38 -> d46  [key=2, style=dotted];
d38 -> d39  [key=0, style=solid];
d38 -> d41  [key=0, style=solid];
d38 -> d52  [key=2, style=dotted];
d38 -> d56  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d30 -> d46  [key=2, style=dotted];
d30 -> d31  [key=0, style=solid];
d30 -> d32  [key=0, style=solid];
d30 -> d45  [key=2, style=dotted];
d101 -> d110  [key=2, style=dotted];
d101 -> d102  [key=0, style=solid];
d101 -> d103  [key=0, style=solid];
d211 -> d187  [key=2, style=dotted];
d211 -> d212  [key=0, style=solid];
d33 -> d49  [key=2, style=dotted];
d33 -> d34  [key=0, style=solid];
d33 -> d35  [key=0, style=solid];
d36 -> d49  [key=2, style=dotted];
d36 -> d37  [key=0, style=solid];
d36 -> d38  [key=0, style=solid];
d26 -> d34  [key=1, style=dashed, color=darkseagreen4, label=auto];
d26 -> d37  [key=1, style=dashed, color=darkseagreen4, label=auto];
d26 -> d27  [key=0, style=solid];
d26 -> d0  [key=2, style=dotted];
d26 -> d31  [key=1, style=dashed, color=darkseagreen4, label=auto];
d26 -> d39  [key=1, style=dashed, color=darkseagreen4, label=auto];
d26 -> d40  [key=1, style=dashed, color=darkseagreen4, label=auto];
d26 -> d41  [key=1, style=dashed, color=darkseagreen4, label=auto];
d26 -> d42  [key=1, style=dashed, color=darkseagreen4, label=auto];
d31 -> d34  [key=1, style=dashed, color=darkseagreen4, label=auto];
d31 -> d37  [key=1, style=dashed, color=darkseagreen4, label=auto];
d31 -> d31  [key=1, style=dashed, color=darkseagreen4, label=auto];
d31 -> d32  [key=0, style=solid];
d31 -> d47  [key=2, style=dotted];
d31 -> d39  [key=1, style=dashed, color=darkseagreen4, label=auto];
d31 -> d40  [key=1, style=dashed, color=darkseagreen4, label=auto];
d31 -> d41  [key=1, style=dashed, color=darkseagreen4, label=auto];
d31 -> d42  [key=1, style=dashed, color=darkseagreen4, label=auto];
d32 -> d34  [key=1, style=dashed, color=darkseagreen4, label=license];
d32 -> d33  [key=0, style=solid];
d32 -> d48  [key=2, style=dotted];
d35 -> d37  [key=1, style=dashed, color=darkseagreen4, label=usage];
d35 -> d36  [key=0, style=solid];
d35 -> d48  [key=2, style=dotted];
d22 -> d10  [key=0, style=bold, color=blue];
d11 -> d12  [key=0, style=solid];
d11 -> d13  [key=0, style=solid];
d13 -> d14  [key=0, style=solid];
d13 -> d15  [key=0, style=solid];
d15 -> d17  [key=0, style=solid];
d15 -> d16  [key=0, style=solid];
d214 -> d194  [key=0, style=bold, color=blue];
d208 -> d210  [key=0, style=solid];
d212 -> d195  [key=0, style=solid];
d212 -> d213  [key=0, style=solid];
d128 -> d322  [key=0, style=solid];
d128 -> d307  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Text.StringBuilder builder"];
d128 -> d125  [key=3, color=darkorchid, style=bold, label="Parameter variable string value"];
d124 -> d252  [key=0, style=solid];
d124 -> d74  [key=3, color=darkorchid, style=bold, label="Parameter variable string value"];
d209 -> d199  [key=0, style=solid];
d209 -> d209  [key=1, style=dashed, color=darkseagreen4, label=i];
d332 -> d335  [key=0, style=solid];
d332 -> d325  [key=3, color=darkorchid, style=bold, label="Parameter variable CommandLine.Core.OptionSpecification spec"];
d332 -> d336  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.OptionSpecification"];
d332 -> d337  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.OptionSpecification"];
d332 -> d339  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.OptionSpecification"];
d332 -> d340  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.OptionSpecification"];
d332 -> d347  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.OptionSpecification"];
d336 -> d337  [key=0, style=solid];
d336 -> d341  [key=1, style=dashed, color=darkseagreen4, label=hasShort];
d336 -> d351  [key=1, style=dashed, color=darkseagreen4, label=hasShort];
d342 -> d343  [key=0, style=solid];
d342 -> d342  [key=1, style=dashed, color=darkseagreen4, label=specLength];
d342 -> d344  [key=1, style=dashed, color=darkseagreen4, label=specLength];
d342 -> d345  [key=1, style=dashed, color=darkseagreen4, label=specLength];
d347 -> d348  [key=0, style=solid];
d347 -> d347  [key=1, style=dashed, color=darkseagreen4, label=specLength];
d347 -> d349  [key=1, style=dashed, color=darkseagreen4, label=specLength];
d347 -> d350  [key=1, style=dashed, color=darkseagreen4, label=specLength];
d352 -> d352  [key=1, style=dashed, color=darkseagreen4, label=specLength];
d352 -> d353  [key=0, style=solid];
d353 -> d354  [key=0, style=solid];
d337 -> d338  [key=0, style=solid];
d337 -> d346  [key=1, style=dashed, color=darkseagreen4, label=hasLong];
d337 -> d351  [key=1, style=dashed, color=darkseagreen4, label=hasLong];
d339 -> d340  [key=0, style=solid];
d339 -> d341  [key=0, style=solid];
d345 -> d347  [key=1, style=dashed, color=darkseagreen4, label=specLength];
d345 -> d352  [key=1, style=dashed, color=darkseagreen4, label=specLength];
d345 -> d353  [key=1, style=dashed, color=darkseagreen4, label=specLength];
d345 -> d345  [key=1, style=dashed, color=darkseagreen4, label=specLength];
d345 -> d346  [key=0, style=solid];
d350 -> d352  [key=1, style=dashed, color=darkseagreen4, label=specLength];
d350 -> d353  [key=1, style=dashed, color=darkseagreen4, label=specLength];
d350 -> d350  [key=1, style=dashed, color=darkseagreen4, label=specLength];
d350 -> d351  [key=0, style=solid];
d333 -> d355  [key=0, style=solid];
d333 -> d325  [key=3, color=darkorchid, style=bold, label="Parameter variable CommandLine.Core.ValueSpecification spec"];
d333 -> d356  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.ValueSpecification"];
d333 -> d358  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.ValueSpecification"];
d333 -> d359  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.ValueSpecification"];
d333 -> d361  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.ValueSpecification"];
d333 -> d362  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.ValueSpecification"];
d356 -> d357  [key=0, style=solid];
d356 -> d360  [key=1, style=dashed, color=darkseagreen4, label=hasMeta];
d361 -> d361  [key=1, style=dashed, color=darkseagreen4, label=specLength];
d361 -> d363  [key=0, style=solid];
d361 -> d366  [key=2, style=dotted];
d362 -> d362  [key=1, style=dashed, color=darkseagreen4, label=specLength];
d362 -> d363  [key=0, style=solid];
d362 -> d366  [key=2, style=dotted];
d358 -> d359  [key=0, style=solid];
d358 -> d360  [key=0, style=solid];
d363 -> d363  [key=1, style=dashed, color=darkseagreen4, label=specLength];
d363 -> d364  [key=0, style=solid];
d205 -> d210  [key=1, style=dashed, color=darkseagreen4, label=wordBuffer];
d205 -> d209  [key=0, style=solid];
d205 -> d205  [key=1, style=dashed, color=darkseagreen4, label=wordBuffer];
d74 -> d122  [key=0, style=solid];
d74 -> d124  [key=3, color=darkorchid, style=bold, label="method methodReturn CommandLine.Text.HelpText AddPreOptionsLine"];
d74 -> d105  [key=3, color=darkorchid, style=bold, label="Parameter variable string value"];
d123 -> d74  [key=0, style=bold, color=blue];
d125 -> d126  [key=0, style=solid];
d125 -> d128  [key=3, color=darkorchid, style=bold, label="method methodReturn CommandLine.Text.HelpText AddPostOptionsLine"];
d127 -> d125  [key=0, style=bold, color=blue];
d55 -> d131  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResult<T>"];
d55 -> d134  [key=3, color=darkorchid, style=bold, label="method methodReturn CommandLine.Text.HelpText AddOptions"];
d55 -> d129  [key=0, style=solid];
d129 -> d131  [key=0, style=solid];
d129 -> d130  [key=0, style=solid];
d132 -> d55  [key=0, style=bold, color=blue];
d133 -> d219  [key=0, style=solid];
d54 -> d139  [key=1, style=dashed, color=darkseagreen4, label="params System.Type[]"];
d54 -> d134  [key=3, color=darkorchid, style=bold, label="method methodReturn CommandLine.Text.HelpText AddVerbs"];
d54 -> d135  [key=0, style=solid];
d54 -> d137  [key=1, style=dashed, color=darkseagreen4, label="params System.Type[]"];
d137 -> d139  [key=0, style=solid];
d137 -> d138  [key=0, style=solid];
d140 -> d54  [key=0, style=bold, color=blue];
d142 -> d232  [key=0, style=solid];
d142 -> d54  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Collections.Generic.IEnumerable<System.Type> types"];
d142 -> d148  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Collections.Generic.IEnumerable<System.Type> types"];
d143 -> d146  [key=1, style=dashed, color=darkseagreen4, label=int];
d143 -> d134  [key=3, color=darkorchid, style=bold, label="method methodReturn CommandLine.Text.HelpText AddOptions"];
d143 -> d144  [key=0, style=solid];
d144 -> d146  [key=0, style=solid];
d144 -> d145  [key=0, style=solid];
d147 -> d143  [key=0, style=bold, color=blue];
d148 -> d153  [key=1, style=dashed, color=darkseagreen4, label=int];
d148 -> d134  [key=3, color=darkorchid, style=bold, label="method methodReturn CommandLine.Text.HelpText AddVerbs"];
d148 -> d149  [key=0, style=solid];
d148 -> d151  [key=1, style=dashed, color=darkseagreen4, label="params System.Type[]"];
d151 -> d153  [key=0, style=solid];
d151 -> d152  [key=0, style=solid];
d154 -> d148  [key=0, style=bold, color=blue];
d182 -> d183  [key=0, style=solid];
d182 -> d182  [key=3, color=darkorchid, style=bold, label="Local variable int ExtraLength"];
d184 -> d121  [key=0, style=bold, color=blue];
d219 -> d220  [key=0, style=solid];
d219 -> d224  [key=2, style=dotted];
d219 -> d221  [key=1, style=dashed, color=darkseagreen4, label=specs];
d221 -> d222  [key=0, style=solid];
d221 -> d75  [key=2, style=dotted];
d221 -> d228  [key=2, style=dotted];
d221 -> d229  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d225 -> d248  [key=0, style=solid];
d226 -> d250  [key=0, style=solid];
d222 -> d227  [key=2, style=dotted];
d222 -> d223  [key=0, style=solid];
d222 -> d44  [key=2, style=dotted];
d233 -> d142  [key=0, style=bold, color=blue];
d242 -> d134  [key=0, style=bold, color=blue];
d249 -> d225  [key=0, style=bold, color=blue];
d251 -> d226  [key=0, style=bold, color=blue];
d254 -> d124  [key=0, style=bold, color=blue];
d304 -> d305  [key=0, style=solid];
d310 -> d311  [key=0, style=solid];
d379 -> d305  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.OptionSpecification"];
d379 -> d311  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.OptionSpecification"];
d306 -> d304  [key=0, style=bold, color=blue];
d312 -> d310  [key=0, style=bold, color=blue];
d324 -> d128  [key=0, style=bold, color=blue];
d326 -> d243  [key=0, style=bold, color=blue];
d328 -> d329  [key=0, style=solid];
d328 -> d330  [key=1, style=dashed, color=darkseagreen4, label=int];
d330 -> d331  [key=0, style=solid];
d330 -> d334  [key=2, style=dotted];
d344 -> d345  [key=0, style=solid];
d344 -> d344  [key=1, style=dashed, color=darkseagreen4, label=specLength];
d349 -> d350  [key=0, style=solid];
d349 -> d349  [key=1, style=dashed, color=darkseagreen4, label=specLength];
d371 -> d174  [key=1, style=dashed, color=darkseagreen4, label="System.Func<CommandLine.Error, string>"];
d372 -> d174  [key=1, style=dashed, color=darkseagreen4, label=int];
d109 -> d174  [key=1, style=dashed, color=darkseagreen4, label="System.Func<CommandLine.Error, string>"];
d109 -> d155  [key=0, style=solid];
d109 -> d157  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResult<T>"];
d109 -> d161  [key=1, style=dashed, color=darkseagreen4, label="System.Func<CommandLine.Error, string>"];
d109 -> d162  [key=1, style=dashed, color=darkseagreen4, label="System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>"];
d173 -> d174  [key=0, style=solid];
d315 -> d316  [key=0, style=solid];
d319 -> d320  [key=0, style=solid];
d380 -> d316  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.ValueSpecification"];
d380 -> d320  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.ValueSpecification"];
d317 -> d315  [key=0, style=bold, color=blue];
d321 -> d319  [key=0, style=bold, color=blue];
d105 -> d114  [key=2, style=dotted];
d105 -> d106  [key=0, style=solid];
d105 -> d115  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d373 -> d175  [key=1, style=dashed, color=darkseagreen4, label=text];
d160 -> d175  [key=1, style=dashed, color=darkseagreen4, label=text];
d160 -> d163  [key=1, style=dashed, color=darkseagreen4, label=text];
d160 -> d161  [key=0, style=solid];
d160 -> d165  [key=2, style=dotted];
d160 -> d162  [key=1, style=dashed, color=darkseagreen4, label=text];
d176 -> d173  [key=0, style=bold, color=blue];
d162 -> d163  [key=0, style=solid];
d162 -> d75  [key=2, style=dotted];
d162 -> d47  [key=2, style=dotted];
d162 -> d168  [key=2, style=dotted];
d164 -> d109  [key=0, style=bold, color=blue];
d25 -> d38  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResult<T>"];
d25 -> d26  [key=0, style=solid];
d25 -> d31  [key=1, style=dashed, color=darkseagreen4, label="System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>"];
d25 -> d28  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResult<T>"];
d25 -> d29  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResult<T>"];
d25 -> d40  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResult<T>"];
d25 -> d41  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResult<T>"];
d29 -> d38  [key=1, style=dashed, color=darkseagreen4, label=errors];
d29 -> d30  [key=0, style=solid];
d27 -> d38  [key=1, style=dashed, color=darkseagreen4, label=errors];
d27 -> d28  [key=0, style=solid];
d27 -> d44  [key=2, style=dotted];
d39 -> d40  [key=0, style=solid];
d41 -> d55  [key=2, style=dotted];
d41 -> d42  [key=0, style=solid];
d56 -> d57  [key=0, style=solid];
d45 -> d27  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Collections.Generic.IEnumerable<CommandLine.Error> errors"];
d45 -> d189  [key=0, style=solid];
d100 -> d101  [key=0, style=solid];
d100 -> d109  [key=2, style=dotted];
d100 -> d104  [key=1, style=dashed, color=darkseagreen4, label=errors];
d102 -> d107  [key=0, style=solid];
d103 -> d74  [key=2, style=dotted];
d103 -> d111  [key=2, style=dotted];
d103 -> d104  [key=0, style=solid];
d103 -> d112  [key=2, style=dotted];
d0 -> d1  [key=0, style=solid];
d40 -> d54  [key=2, style=dotted];
d40 -> d42  [key=0, style=solid];
d40 -> d53  [key=2, style=dotted];
d42 -> d43  [key=0, style=solid];
d28 -> d32  [key=0, style=solid];
d28 -> d29  [key=0, style=solid];
d12 -> d22  [key=0, style=solid];
d12 -> d23  [key=2, style=dotted];
d14 -> d22  [key=0, style=solid];
d14 -> d23  [key=2, style=dotted];
d16 -> d22  [key=0, style=solid];
d16 -> d23  [key=2, style=dotted];
d354 -> d332  [key=0, style=bold, color=blue];
d340 -> d345  [key=1, style=dashed, color=darkseagreen4, label=metaLength];
d340 -> d350  [key=1, style=dashed, color=darkseagreen4, label=metaLength];
d340 -> d341  [key=0, style=solid];
d341 -> d342  [key=0, style=solid];
d341 -> d346  [key=0, style=solid];
d351 -> d352  [key=0, style=solid];
d351 -> d353  [key=0, style=solid];
d346 -> d347  [key=0, style=solid];
d346 -> d351  [key=0, style=solid];
d365 -> d333  [key=0, style=bold, color=blue];
d359 -> d363  [key=1, style=dashed, color=darkseagreen4, label=metaLength];
d359 -> d360  [key=0, style=solid];
d360 -> d361  [key=0, style=solid];
d360 -> d362  [key=0, style=solid];
d364 -> d365  [key=0, style=solid];
d59 -> d74  [key=3, color=darkorchid, style=bold, label="method methodReturn CommandLine.Text.HelpText AutoBuild"];
d59 -> d25  [key=3, color=darkorchid, style=bold, label="method methodReturn CommandLine.Text.HelpText AutoBuild"];
d59 -> d60  [key=0, style=solid];
d59 -> d62  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResult<T>"];
d59 -> d66  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResult<T>"];
d59 -> d85  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResult<T>"];
d59 -> d71  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResult<T>"];
d59 -> d92  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResult<T>"];
d64 -> d74  [key=2, style=dotted];
d64 -> d72  [key=0, style=solid];
d64 -> d4  [key=2, style=dotted];
d116 -> d74  [key=2, style=dotted];
d116 -> d117  [key=0, style=solid];
d130 -> d132  [key=0, style=solid];
d130 -> d23  [key=2, style=dotted];
d223 -> d133  [key=0, style=bold, color=blue];
d135 -> d137  [key=0, style=solid];
d135 -> d136  [key=0, style=solid];
d138 -> d140  [key=0, style=solid];
d138 -> d141  [key=2, style=dotted];
d136 -> d140  [key=0, style=solid];
d136 -> d23  [key=2, style=dotted];
d145 -> d147  [key=0, style=solid];
d145 -> d23  [key=2, style=dotted];
d149 -> d151  [key=0, style=solid];
d149 -> d150  [key=0, style=solid];
d152 -> d154  [key=0, style=solid];
d152 -> d141  [key=2, style=dotted];
d150 -> d154  [key=0, style=solid];
d150 -> d23  [key=2, style=dotted];
d121 -> d182  [key=0, style=solid];
d229 -> d230  [key=0, style=solid];
d67 -> d75  [key=2, style=dotted];
d67 -> d68  [key=0, style=solid];
d67 -> d76  [key=2, style=dotted];
d67 -> d69  [key=1, style=dashed, color=darkseagreen4, label=err];
d331 -> d328  [key=0, style=bold, color=blue];
d155 -> d156  [key=0, style=solid];
d155 -> d157  [key=0, style=solid];
d157 -> d162  [key=1, style=dashed, color=darkseagreen4, label=meaningfulErrors];
d157 -> d45  [key=2, style=dotted];
d157 -> d158  [key=0, style=solid];
d157 -> d161  [key=1, style=dashed, color=darkseagreen4, label=meaningfulErrors];
d161 -> d173  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d161 -> d162  [key=0, style=solid];
d161 -> d166  [key=2, style=dotted];
d161 -> d167  [key=2, style=dotted];
d161 -> d170  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d87 -> d105  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HelpText"];
d87 -> d100  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResult<T>"];
d87 -> d102  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HelpText"];
d87 -> d103  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HelpText"];
d87 -> d59  [key=3, color=darkorchid, style=bold, label="Parameter variable CommandLine.ParserResult<T> parserResult"];
d87 -> d116  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HelpText"];
d87 -> d87  [key=3, color=darkorchid, style=bold, label="method methodReturn CommandLine.Text.HelpText DefaultParsingErrorsHandler"];
d87 -> d94  [key=0, style=solid];
d87 -> d96  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HelpText"];
d87 -> d98  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResult<T>"];
d87 -> d99  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HelpText"];
d87 -> d106  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HelpText"];
d87 -> d69  [key=3, color=darkorchid, style=bold, label="Parameter variable CommandLine.ParserResult<T> parserResult"];
d87 -> d66  [key=3, color=darkorchid, style=bold, label="Parameter variable CommandLine.Text.HelpText current"];
d87 -> d70  [key=3, color=darkorchid, style=bold, label="Parameter variable CommandLine.Text.HelpText current"];
d87 -> d71  [key=3, color=darkorchid, style=bold, label="Parameter variable CommandLine.Text.HelpText current"];
d104 -> d105  [key=0, style=solid];
d104 -> d113  [key=2, style=dotted];
d106 -> d107  [key=0, style=solid];
d115 -> d116  [key=0, style=solid];
d158 -> d160  [key=0, style=solid];
d158 -> d159  [key=0, style=solid];
d158 -> d108  [key=2, style=dotted];
d156 -> d164  [key=0, style=solid];
d156 -> d23  [key=2, style=dotted];
d159 -> d164  [key=0, style=solid];
d43 -> d25  [key=0, style=bold, color=blue];
d66 -> d25  [key=2, style=dotted];
d66 -> d72  [key=0, style=solid];
d66 -> d84  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d71 -> d25  [key=2, style=dotted];
d71 -> d72  [key=0, style=solid];
d71 -> d91  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d70 -> d25  [key=2, style=dotted];
d70 -> d72  [key=0, style=solid];
d70 -> d88  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d63 -> d52  [key=2, style=dotted];
d63 -> d64  [key=0, style=solid];
d63 -> d65  [key=0, style=solid];
d63 -> d78  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d65 -> d52  [key=2, style=dotted];
d65 -> d67  [key=0, style=solid];
d65 -> d66  [key=0, style=solid];
d65 -> d81  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d57 -> n12  [key=0, style=solid];
d98 -> d45  [key=2, style=dotted];
d98 -> d100  [key=0, style=solid];
d98 -> d99  [key=0, style=solid];
d98 -> d108  [key=2, style=dotted];
d190 -> d45  [key=0, style=bold, color=blue];
d189 -> d190  [key=0, style=solid];
d189 -> d166  [key=2, style=dotted];
d189 -> d191  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d107 -> d87  [key=0, style=bold, color=blue];
d1 -> d0  [key=0, style=bold, color=blue];
d72 -> d59  [key=0, style=bold, color=blue];
d60 -> d61  [key=0, style=solid];
d60 -> d62  [key=0, style=solid];
d62 -> d67  [key=1, style=dashed, color=darkseagreen4, label=errors];
d62 -> d63  [key=0, style=solid];
d62 -> d65  [key=1, style=dashed, color=darkseagreen4, label=errors];
d85 -> d87  [key=2, style=dotted];
d85 -> d86  [key=0, style=solid];
d92 -> d87  [key=2, style=dotted];
d92 -> d93  [key=0, style=solid];
d4 -> d5  [key=0, style=solid];
d370 -> d116  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.HelpText"];
d117 -> d115  [key=0, style=bold, color=blue];
d118 -> d121  [key=3, color=darkorchid, style=bold, label="method methodReturn string op_Implicit"];
d118 -> d119  [key=0, style=solid];
d119 -> d121  [key=2, style=dotted];
d119 -> d120  [key=0, style=solid];
d231 -> d229  [key=0, style=bold, color=blue];
d230 -> d231  [key=0, style=solid];
d68 -> d71  [key=0, style=solid];
d68 -> d69  [key=0, style=solid];
d69 -> d44  [key=2, style=dotted];
d69 -> d70  [key=0, style=solid];
d69 -> d77  [key=2, style=dotted];
d69 -> d89  [key=1, style=dashed, color=darkseagreen4, label=pr];
d170 -> d171  [key=0, style=solid];
d89 -> d87  [key=2, style=dotted];
d89 -> d90  [key=0, style=solid];
d94 -> d95  [key=0, style=solid];
d94 -> d96  [key=0, style=solid];
d96 -> d98  [key=0, style=solid];
d96 -> d97  [key=0, style=solid];
d99 -> d107  [key=0, style=solid];
d84 -> d85  [key=0, style=solid];
d91 -> d92  [key=0, style=solid];
d88 -> d89  [key=0, style=solid];
d78 -> d79  [key=0, style=solid];
d81 -> d82  [key=0, style=solid];
d191 -> d192  [key=0, style=solid];
d95 -> d107  [key=0, style=solid];
d95 -> d23  [key=2, style=dotted];
d97 -> d107  [key=0, style=solid];
d97 -> d23  [key=2, style=dotted];
d61 -> d72  [key=0, style=solid];
d61 -> d73  [key=2, style=dotted];
d368 -> d85  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResult<T>"];
d368 -> d92  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResult<T>"];
d86 -> d84  [key=0, style=bold, color=blue];
d93 -> d91  [key=0, style=bold, color=blue];
d5 -> d4  [key=0, style=bold, color=blue];
d120 -> d118  [key=0, style=bold, color=blue];
d172 -> d170  [key=0, style=bold, color=blue];
d171 -> d172  [key=0, style=solid];
d369 -> d89  [key=1, style=dashed, color=darkseagreen4, label=pr];
d90 -> d88  [key=0, style=bold, color=blue];
d80 -> d78  [key=0, style=bold, color=blue];
d79 -> d80  [key=0, style=solid];
d83 -> d81  [key=0, style=bold, color=blue];
d82 -> d83  [key=0, style=solid];
d193 -> d191  [key=0, style=bold, color=blue];
d192 -> d193  [key=0, style=solid];
m0_41 -> m0_42  [key=0, style=solid];
m0_41 -> m0_43  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
m0_42 -> m0_43  [key=0, style=solid];
m0_42 -> m0_9  [key=2, style=dotted];
m0_42 -> m0_10  [key=2, style=dotted];
m0_42 -> m0_45  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_43 -> m0_44  [key=0, style=solid];
m0_43 -> m0_36  [key=2, style=dotted];
m0_43 -> m0_12  [key=2, style=dotted];
m0_44 -> m0_41  [key=0, style=bold, color=blue];
m0_350 -> m0_351  [key=0, style=solid];
m0_351 -> m0_352  [key=0, style=solid];
m0_351 -> m0_351  [key=3, color=darkorchid, style=bold, label="Local variable System.Action test"];
m0_352 -> m0_353  [key=0, style=solid];
m0_352 -> m0_331  [key=2, style=dotted];
m0_353 -> m0_350  [key=0, style=bold, color=blue];
m0_152 -> m0_153  [key=0, style=solid];
m0_152 -> m0_154  [key=1, style=dashed, color=darkseagreen4, label="long[]"];
m0_153 -> m0_154  [key=0, style=solid];
m0_153 -> m0_9  [key=2, style=dotted];
m0_153 -> m0_10  [key=2, style=dotted];
m0_153 -> m0_156  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_154 -> m0_155  [key=0, style=solid];
m0_154 -> m0_105  [key=2, style=dotted];
m0_155 -> m0_152  [key=0, style=bold, color=blue];
m0_259 -> m0_260  [key=0, style=solid];
m0_259 -> m0_261  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_260 -> m0_261  [key=0, style=solid];
m0_260 -> m0_9  [key=2, style=dotted];
m0_260 -> m0_10  [key=2, style=dotted];
m0_260 -> m0_264  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_261 -> m0_262  [key=0, style=solid];
m0_261 -> m0_263  [key=2, style=dotted];
m0_261 -> m0_12  [key=2, style=dotted];
m0_262 -> m0_259  [key=0, style=bold, color=blue];
m0_327 -> m0_328  [key=0, style=solid];
m0_328 -> m0_329  [key=0, style=solid];
m0_328 -> m0_328  [key=3, color=darkorchid, style=bold, label="Local variable System.Action test"];
m0_329 -> m0_330  [key=0, style=solid];
m0_329 -> m0_331  [key=2, style=dotted];
m0_330 -> m0_327  [key=0, style=bold, color=blue];
m0_300 -> m0_301  [key=0, style=solid];
m0_300 -> m0_302  [key=1, style=dashed, color=darkseagreen4, label="long?"];
m0_301 -> m0_302  [key=0, style=solid];
m0_301 -> m0_9  [key=2, style=dotted];
m0_301 -> m0_10  [key=2, style=dotted];
m0_301 -> m0_304  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_302 -> m0_303  [key=0, style=solid];
m0_302 -> m0_105  [key=2, style=dotted];
m0_303 -> m0_300  [key=0, style=bold, color=blue];
m0_167 -> m0_168  [key=0, style=solid];
m0_168 -> m0_169  [key=0, style=solid];
m0_168 -> m0_140  [key=2, style=dotted];
m0_168 -> m0_171  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_169 -> m0_170  [key=0, style=solid];
m0_171 -> m0_172  [key=0, style=solid];
m0_171 -> m0_105  [key=2, style=dotted];
m0_170 -> m0_171  [key=0, style=solid];
m0_170 -> m0_9  [key=2, style=dotted];
m0_170 -> m0_173  [key=2, style=dotted];
m0_170 -> m0_174  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_170 -> m0_177  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_172 -> m0_167  [key=0, style=bold, color=blue];
m0_251 -> m0_252  [key=0, style=solid];
m0_252 -> m0_253  [key=0, style=solid];
m0_252 -> m0_239  [key=2, style=dotted];
m0_252 -> m0_254  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_253 -> m0_254  [key=0, style=solid];
m0_253 -> m0_9  [key=2, style=dotted];
m0_253 -> m0_10  [key=2, style=dotted];
m0_253 -> m0_256  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_254 -> m0_255  [key=0, style=solid];
m0_254 -> m0_36  [key=2, style=dotted];
m0_254 -> m0_12  [key=2, style=dotted];
m0_255 -> m0_251  [key=0, style=bold, color=blue];
m0_387 -> m0_388  [key=0, style=solid];
m0_387 -> m0_389  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_388 -> m0_389  [key=0, style=solid];
m0_388 -> m0_9  [key=2, style=dotted];
m0_388 -> m0_10  [key=2, style=dotted];
m0_388 -> m0_391  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_389 -> m0_390  [key=0, style=solid];
m0_389 -> m0_105  [key=2, style=dotted];
m0_390 -> m0_387  [key=0, style=bold, color=blue];
m0_74 -> m0_75  [key=0, style=solid];
m0_75 -> m0_76  [key=0, style=solid];
m0_75 -> m0_79  [key=2, style=dotted];
m0_75 -> m0_77  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_76 -> m0_77  [key=0, style=solid];
m0_76 -> m0_9  [key=2, style=dotted];
m0_76 -> m0_10  [key=2, style=dotted];
m0_76 -> m0_80  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_77 -> m0_78  [key=0, style=solid];
m0_77 -> m0_36  [key=2, style=dotted];
m0_77 -> m0_12  [key=2, style=dotted];
m0_78 -> m0_74  [key=0, style=bold, color=blue];
m0_92 -> m0_93  [key=0, style=solid];
m0_93 -> m0_94  [key=0, style=solid];
m0_93 -> m0_79  [key=2, style=dotted];
m0_93 -> m0_95  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_94 -> m0_95  [key=0, style=solid];
m0_94 -> m0_9  [key=2, style=dotted];
m0_94 -> m0_10  [key=2, style=dotted];
m0_94 -> m0_97  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_95 -> m0_96  [key=0, style=solid];
m0_95 -> m0_36  [key=2, style=dotted];
m0_95 -> m0_12  [key=2, style=dotted];
m0_96 -> m0_92  [key=0, style=bold, color=blue];
m0_307 -> m0_308  [key=0, style=solid];
m0_307 -> m0_310  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_307 -> m0_311  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_308 -> m0_309  [key=0, style=solid];
m0_308 -> m0_9  [key=2, style=dotted];
m0_308 -> m0_10  [key=2, style=dotted];
m0_308 -> m0_314  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_308 -> m0_310  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_308 -> m0_311  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_310 -> m0_311  [key=0, style=solid];
m0_310 -> m0_105  [key=2, style=dotted];
m0_311 -> m0_312  [key=0, style=solid];
m0_311 -> m0_313  [key=2, style=dotted];
m0_311 -> m0_105  [key=2, style=dotted];
m0_309 -> m0_310  [key=0, style=solid];
m0_309 -> m0_311  [key=0, style=solid];
m0_312 -> m0_307  [key=0, style=bold, color=blue];
m0_432 -> m0_433  [key=0, style=solid];
m0_432 -> m0_435  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_432 -> m0_443  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_433 -> m0_434  [key=0, style=solid];
m0_433 -> m0_9  [key=2, style=dotted];
m0_433 -> m0_10  [key=2, style=dotted];
m0_433 -> m0_438  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_435 -> m0_436  [key=0, style=solid];
m0_435 -> m0_437  [key=2, style=dotted];
m0_435 -> m0_368  [key=2, style=dotted];
m0_435 -> m0_369  [key=2, style=dotted];
m0_435 -> m0_442  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_434 -> m0_435  [key=0, style=solid];
m0_436 -> m0_432  [key=0, style=bold, color=blue];
m0_243 -> m0_244  [key=0, style=solid];
m0_244 -> m0_245  [key=0, style=solid];
m0_244 -> m0_239  [key=2, style=dotted];
m0_244 -> m0_246  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_245 -> m0_246  [key=0, style=solid];
m0_245 -> m0_9  [key=2, style=dotted];
m0_245 -> m0_10  [key=2, style=dotted];
m0_245 -> m0_248  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_246 -> m0_247  [key=0, style=solid];
m0_246 -> m0_36  [key=2, style=dotted];
m0_246 -> m0_12  [key=2, style=dotted];
m0_247 -> m0_243  [key=0, style=bold, color=blue];
m0_110 -> m0_111  [key=0, style=solid];
m0_111 -> m0_112  [key=0, style=solid];
m0_111 -> m0_115  [key=2, style=dotted];
m0_111 -> m0_70  [key=2, style=dotted];
m0_111 -> m0_113  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_112 -> m0_113  [key=0, style=solid];
m0_112 -> m0_9  [key=2, style=dotted];
m0_112 -> m0_10  [key=2, style=dotted];
m0_112 -> m0_116  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_113 -> m0_114  [key=0, style=solid];
m0_113 -> m0_36  [key=2, style=dotted];
m0_113 -> m0_12  [key=2, style=dotted];
m0_114 -> m0_110  [key=0, style=bold, color=blue];
m0_416 -> m0_417  [key=0, style=solid];
m0_416 -> m0_418  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent"];
m0_417 -> m0_418  [key=0, style=solid];
m0_417 -> m0_9  [key=2, style=dotted];
m0_417 -> m0_10  [key=2, style=dotted];
m0_417 -> m0_420  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_418 -> m0_419  [key=0, style=solid];
m0_418 -> m0_105  [key=2, style=dotted];
m0_419 -> m0_416  [key=0, style=bold, color=blue];
m0_144 -> m0_145  [key=0, style=solid];
m0_144 -> m0_146  [key=1, style=dashed, color=darkseagreen4, label="long[]"];
m0_145 -> m0_146  [key=0, style=solid];
m0_145 -> m0_9  [key=2, style=dotted];
m0_145 -> m0_10  [key=2, style=dotted];
m0_145 -> m0_148  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_146 -> m0_147  [key=0, style=solid];
m0_146 -> m0_105  [key=2, style=dotted];
m0_147 -> m0_144  [key=0, style=bold, color=blue];
m0_56 -> m0_57  [key=0, style=solid];
m0_56 -> m0_58  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m0_57 -> m0_58  [key=0, style=solid];
m0_57 -> m0_9  [key=2, style=dotted];
m0_57 -> m0_10  [key=2, style=dotted];
m0_57 -> m0_60  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_58 -> m0_59  [key=0, style=solid];
m0_58 -> m0_36  [key=2, style=dotted];
m0_58 -> m0_12  [key=2, style=dotted];
m0_59 -> m0_56  [key=0, style=bold, color=blue];
m0_361 -> m0_362  [key=0, style=solid];
m0_361 -> m0_363  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResultType"];
m0_361 -> m0_364  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_361 -> m0_375  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_361 -> m0_365  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResultType"];
m0_362 -> m0_363  [key=0, style=solid];
m0_362 -> m0_9  [key=2, style=dotted];
m0_362 -> m0_10  [key=2, style=dotted];
m0_362 -> m0_370  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_362 -> m0_364  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_362 -> m0_366  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_363 -> m0_364  [key=0, style=solid];
m0_363 -> m0_365  [key=0, style=solid];
m0_364 -> m0_367  [key=0, style=solid];
m0_364 -> m0_368  [key=2, style=dotted];
m0_364 -> m0_369  [key=2, style=dotted];
m0_364 -> m0_374  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_365 -> m0_366  [key=0, style=solid];
m0_365 -> m0_367  [key=0, style=solid];
m0_366 -> m0_367  [key=0, style=solid];
m0_366 -> m0_368  [key=2, style=dotted];
m0_366 -> m0_331  [key=2, style=dotted];
m0_367 -> m0_361  [key=0, style=bold, color=blue];
m0_32 -> m0_33  [key=0, style=solid];
m0_32 -> m0_34  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
m0_33 -> m0_34  [key=0, style=solid];
m0_33 -> m0_9  [key=2, style=dotted];
m0_33 -> m0_10  [key=2, style=dotted];
m0_33 -> m0_37  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_34 -> m0_35  [key=0, style=solid];
m0_34 -> m0_36  [key=2, style=dotted];
m0_34 -> m0_12  [key=2, style=dotted];
m0_35 -> m0_32  [key=0, style=bold, color=blue];
m0_442 -> m0_443  [key=0, style=solid];
m0_14 -> m0_15  [key=0, style=solid];
m0_13 -> m0_14  [key=0, style=solid];
m0_15 -> m0_13  [key=0, style=bold, color=blue];
m0_21 -> m0_22  [key=0, style=solid];
m0_22 -> m0_23  [key=0, style=solid];
m0_22 -> m0_6  [key=2, style=dotted];
m0_23 -> m0_21  [key=0, style=bold, color=blue];
m0_28 -> m0_29  [key=0, style=solid];
m0_29 -> m0_30  [key=0, style=solid];
m0_29 -> m0_31  [key=2, style=dotted];
m0_30 -> m0_28  [key=0, style=bold, color=blue];
m0_37 -> m0_38  [key=0, style=solid];
m0_38 -> m0_39  [key=0, style=solid];
m0_38 -> m0_40  [key=2, style=dotted];
m0_39 -> m0_37  [key=0, style=bold, color=blue];
m0_45 -> m0_46  [key=0, style=solid];
m0_46 -> m0_47  [key=0, style=solid];
m0_46 -> m0_6  [key=2, style=dotted];
m0_47 -> m0_45  [key=0, style=bold, color=blue];
m0_52 -> m0_53  [key=0, style=solid];
m0_53 -> m0_54  [key=0, style=solid];
m0_53 -> m0_55  [key=2, style=dotted];
m0_54 -> m0_52  [key=0, style=bold, color=blue];
m0_60 -> m0_61  [key=0, style=solid];
m0_61 -> m0_62  [key=0, style=solid];
m0_61 -> m0_63  [key=2, style=dotted];
m0_62 -> m0_60  [key=0, style=bold, color=blue];
m0_71 -> m0_72  [key=0, style=solid];
m0_72 -> m0_73  [key=0, style=solid];
m0_72 -> m0_55  [key=2, style=dotted];
m0_73 -> m0_71  [key=0, style=bold, color=blue];
m0_80 -> m0_81  [key=0, style=solid];
m0_81 -> m0_82  [key=0, style=solid];
m0_81 -> m0_83  [key=2, style=dotted];
m0_82 -> m0_80  [key=0, style=bold, color=blue];
m0_89 -> m0_90  [key=0, style=solid];
m0_90 -> m0_91  [key=0, style=solid];
m0_90 -> m0_63  [key=2, style=dotted];
m0_91 -> m0_89  [key=0, style=bold, color=blue];
m0_97 -> m0_98  [key=0, style=solid];
m0_98 -> m0_99  [key=0, style=solid];
m0_98 -> m0_100  [key=2, style=dotted];
m0_99 -> m0_97  [key=0, style=bold, color=blue];
m0_106 -> m0_107  [key=0, style=solid];
m0_107 -> m0_108  [key=0, style=solid];
m0_107 -> m0_109  [key=2, style=dotted];
m0_108 -> m0_106  [key=0, style=bold, color=blue];
m0_116 -> m0_117  [key=0, style=solid];
m0_117 -> m0_118  [key=0, style=solid];
m0_117 -> m0_109  [key=2, style=dotted];
m0_118 -> m0_116  [key=0, style=bold, color=blue];
m0_124 -> m0_125  [key=0, style=solid];
m0_125 -> m0_126  [key=0, style=solid];
m0_125 -> m0_109  [key=2, style=dotted];
m0_126 -> m0_124  [key=0, style=bold, color=blue];
m0_132 -> m0_133  [key=0, style=solid];
m0_133 -> m0_134  [key=0, style=solid];
m0_133 -> m0_109  [key=2, style=dotted];
m0_134 -> m0_132  [key=0, style=bold, color=blue];
m0_141 -> m0_142  [key=0, style=solid];
m0_142 -> m0_143  [key=0, style=solid];
m0_142 -> m0_140  [key=2, style=dotted];
m0_143 -> m0_141  [key=0, style=bold, color=blue];
m0_148 -> m0_149  [key=0, style=solid];
m0_149 -> m0_150  [key=0, style=solid];
m0_149 -> m0_151  [key=2, style=dotted];
m0_150 -> m0_148  [key=0, style=bold, color=blue];
m0_156 -> m0_157  [key=0, style=solid];
m0_157 -> m0_158  [key=0, style=solid];
m0_157 -> m0_159  [key=2, style=dotted];
m0_158 -> m0_156  [key=0, style=bold, color=blue];
m0_164 -> m0_165  [key=0, style=solid];
m0_165 -> m0_166  [key=0, style=solid];
m0_165 -> m0_159  [key=2, style=dotted];
m0_166 -> m0_164  [key=0, style=bold, color=blue];
m0_174 -> m0_175  [key=0, style=solid];
m0_177 -> m0_178  [key=0, style=solid];
m0_177 -> m0_182  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m0_177 -> m0_186  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m0_175 -> m0_176  [key=0, style=solid];
m0_175 -> m0_140  [key=2, style=dotted];
m0_176 -> m0_174  [key=0, style=bold, color=blue];
m0_178 -> m0_179  [key=0, style=solid];
m0_178 -> m0_180  [key=2, style=dotted];
m0_178 -> m0_181  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_182 -> m0_183  [key=0, style=solid];
m0_182 -> m0_184  [key=2, style=dotted];
m0_182 -> m0_185  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_186 -> m0_187  [key=0, style=solid];
m0_186 -> m0_188  [key=2, style=dotted];
m0_179 -> m0_177  [key=0, style=bold, color=blue];
m0_181 -> m0_182  [key=0, style=solid];
m0_183 -> m0_181  [key=0, style=bold, color=blue];
m0_185 -> m0_186  [key=0, style=solid];
m0_187 -> m0_185  [key=0, style=bold, color=blue];
m0_195 -> m0_196  [key=0, style=solid];
m0_196 -> m0_197  [key=0, style=solid];
m0_196 -> m0_198  [key=2, style=dotted];
m0_197 -> m0_195  [key=0, style=bold, color=blue];
m0_205 -> m0_206  [key=0, style=solid];
m0_206 -> m0_207  [key=0, style=solid];
m0_206 -> m0_204  [key=2, style=dotted];
m0_207 -> m0_205  [key=0, style=bold, color=blue];
m0_214 -> m0_215  [key=0, style=solid];
m0_215 -> m0_216  [key=0, style=solid];
m0_215 -> m0_204  [key=2, style=dotted];
m0_216 -> m0_214  [key=0, style=bold, color=blue];
m0_222 -> m0_223  [key=0, style=solid];
m0_223 -> m0_224  [key=0, style=solid];
m0_223 -> m0_225  [key=2, style=dotted];
m0_224 -> m0_222  [key=0, style=bold, color=blue];
m0_231 -> m0_232  [key=0, style=solid];
m0_232 -> m0_233  [key=0, style=solid];
m0_232 -> m0_6  [key=2, style=dotted];
m0_233 -> m0_231  [key=0, style=bold, color=blue];
m0_240 -> m0_241  [key=0, style=solid];
m0_241 -> m0_242  [key=0, style=solid];
m0_241 -> m0_6  [key=2, style=dotted];
m0_242 -> m0_240  [key=0, style=bold, color=blue];
m0_248 -> m0_249  [key=0, style=solid];
m0_249 -> m0_250  [key=0, style=solid];
m0_249 -> m0_6  [key=2, style=dotted];
m0_250 -> m0_248  [key=0, style=bold, color=blue];
m0_256 -> m0_257  [key=0, style=solid];
m0_257 -> m0_258  [key=0, style=solid];
m0_257 -> m0_6  [key=2, style=dotted];
m0_258 -> m0_256  [key=0, style=bold, color=blue];
m0_264 -> m0_265  [key=0, style=solid];
m0_265 -> m0_266  [key=0, style=solid];
m0_265 -> m0_6  [key=2, style=dotted];
m0_266 -> m0_264  [key=0, style=bold, color=blue];
m0_272 -> m0_273  [key=0, style=solid];
m0_273 -> m0_274  [key=0, style=solid];
m0_273 -> m0_275  [key=2, style=dotted];
m0_274 -> m0_272  [key=0, style=bold, color=blue];
m0_280 -> m0_281  [key=0, style=solid];
m0_281 -> m0_282  [key=0, style=solid];
m0_281 -> m0_6  [key=2, style=dotted];
m0_282 -> m0_280  [key=0, style=bold, color=blue];
m0_288 -> m0_289  [key=0, style=solid];
m0_289 -> m0_290  [key=0, style=solid];
m0_289 -> m0_291  [key=2, style=dotted];
m0_290 -> m0_288  [key=0, style=bold, color=blue];
m0_296 -> m0_297  [key=0, style=solid];
m0_297 -> m0_298  [key=0, style=solid];
m0_297 -> m0_299  [key=2, style=dotted];
m0_298 -> m0_296  [key=0, style=bold, color=blue];
m0_304 -> m0_305  [key=0, style=solid];
m0_305 -> m0_306  [key=0, style=solid];
m0_305 -> m0_299  [key=2, style=dotted];
m0_306 -> m0_304  [key=0, style=bold, color=blue];
m0_314 -> m0_315  [key=0, style=solid];
m0_315 -> m0_316  [key=0, style=solid];
m0_315 -> m0_317  [key=2, style=dotted];
m0_316 -> m0_314  [key=0, style=bold, color=blue];
m0_324 -> m0_325  [key=0, style=solid];
m0_325 -> m0_326  [key=0, style=solid];
m0_325 -> m0_317  [key=2, style=dotted];
m0_326 -> m0_324  [key=0, style=bold, color=blue];
m0_332 -> m0_333  [key=0, style=solid];
m0_333 -> m0_334  [key=0, style=solid];
m0_333 -> m0_9  [key=2, style=dotted];
m0_333 -> m0_10  [key=2, style=dotted];
m0_333 -> m0_335  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_334 -> m0_332  [key=0, style=bold, color=blue];
m0_335 -> m0_336  [key=0, style=solid];
m0_336 -> m0_337  [key=0, style=solid];
m0_336 -> m0_338  [key=2, style=dotted];
m0_337 -> m0_335  [key=0, style=bold, color=blue];
m0_343 -> m0_344  [key=0, style=solid];
m0_344 -> m0_345  [key=0, style=solid];
m0_344 -> m0_9  [key=2, style=dotted];
m0_344 -> m0_10  [key=2, style=dotted];
m0_344 -> m0_346  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_345 -> m0_343  [key=0, style=bold, color=blue];
m0_346 -> m0_347  [key=0, style=solid];
m0_347 -> m0_348  [key=0, style=solid];
m0_347 -> m0_349  [key=2, style=dotted];
m0_348 -> m0_346  [key=0, style=bold, color=blue];
m0_354 -> m0_355  [key=0, style=solid];
m0_355 -> m0_356  [key=0, style=solid];
m0_355 -> m0_9  [key=2, style=dotted];
m0_355 -> m0_10  [key=2, style=dotted];
m0_355 -> m0_357  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_356 -> m0_354  [key=0, style=bold, color=blue];
m0_357 -> m0_358  [key=0, style=solid];
m0_358 -> m0_359  [key=0, style=solid];
m0_358 -> m0_360  [key=2, style=dotted];
m0_359 -> m0_357  [key=0, style=bold, color=blue];
m0_375 -> m0_376  [key=0, style=solid];
m0_370 -> m0_371  [key=0, style=solid];
m0_374 -> m0_375  [key=0, style=solid];
m0_371 -> m0_372  [key=0, style=solid];
m0_371 -> m0_373  [key=2, style=dotted];
m0_372 -> m0_370  [key=0, style=bold, color=blue];
m0_376 -> m0_374  [key=0, style=bold, color=blue];
m0_385 -> m0_386  [key=0, style=solid];
m0_381 -> m0_382  [key=0, style=solid];
m0_384 -> m0_385  [key=0, style=solid];
m0_382 -> m0_383  [key=0, style=solid];
m0_382 -> m0_6  [key=2, style=dotted];
m0_383 -> m0_381  [key=0, style=bold, color=blue];
m0_386 -> m0_384  [key=0, style=bold, color=blue];
m0_391 -> m0_392  [key=0, style=solid];
m0_392 -> m0_393  [key=0, style=solid];
m0_392 -> m0_394  [key=2, style=dotted];
m0_393 -> m0_391  [key=0, style=bold, color=blue];
m0_407 -> m0_408  [key=0, style=solid];
m0_402 -> m0_403  [key=0, style=solid];
m0_406 -> m0_407  [key=0, style=solid];
m0_403 -> m0_404  [key=0, style=solid];
m0_403 -> m0_405  [key=2, style=dotted];
m0_404 -> m0_402  [key=0, style=bold, color=blue];
m0_408 -> m0_406  [key=0, style=bold, color=blue];
m0_413 -> m0_414  [key=0, style=solid];
m0_414 -> m0_415  [key=0, style=solid];
m0_414 -> m0_275  [key=2, style=dotted];
m0_415 -> m0_413  [key=0, style=bold, color=blue];
m0_420 -> m0_421  [key=0, style=solid];
m0_421 -> m0_422  [key=0, style=solid];
m0_421 -> m0_423  [key=2, style=dotted];
m0_422 -> m0_420  [key=0, style=bold, color=blue];
m0_429 -> m0_430  [key=0, style=solid];
m0_430 -> m0_431  [key=0, style=solid];
m0_430 -> m0_6  [key=2, style=dotted];
m0_431 -> m0_429  [key=0, style=bold, color=blue];
m0_443 -> m0_444  [key=0, style=solid];
m0_438 -> m0_439  [key=0, style=solid];
m0_439 -> m0_440  [key=0, style=solid];
m0_439 -> m0_441  [key=2, style=dotted];
m0_440 -> m0_438  [key=0, style=bold, color=blue];
m0_444 -> m0_442  [key=0, style=bold, color=blue];
m0_377 -> m0_378  [key=0, style=solid];
m0_377 -> m0_379  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_377 -> m0_385  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_378 -> m0_379  [key=0, style=solid];
m0_378 -> m0_9  [key=2, style=dotted];
m0_378 -> m0_10  [key=2, style=dotted];
m0_378 -> m0_381  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_379 -> m0_380  [key=0, style=solid];
m0_379 -> m0_368  [key=2, style=dotted];
m0_379 -> m0_369  [key=2, style=dotted];
m0_379 -> m0_384  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_380 -> m0_377  [key=0, style=bold, color=blue];
m0_395 -> m0_396  [key=0, style=solid];
m0_395 -> m0_397  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResultType"];
m0_395 -> m0_398  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_395 -> m0_407  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_395 -> m0_399  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResultType"];
m0_396 -> m0_397  [key=0, style=solid];
m0_396 -> m0_9  [key=2, style=dotted];
m0_396 -> m0_10  [key=2, style=dotted];
m0_396 -> m0_402  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_396 -> m0_398  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_396 -> m0_400  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_397 -> m0_398  [key=0, style=solid];
m0_397 -> m0_399  [key=0, style=solid];
m0_398 -> m0_401  [key=0, style=solid];
m0_398 -> m0_368  [key=2, style=dotted];
m0_398 -> m0_369  [key=2, style=dotted];
m0_398 -> m0_406  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_399 -> m0_400  [key=0, style=solid];
m0_399 -> m0_401  [key=0, style=solid];
m0_400 -> m0_401  [key=0, style=solid];
m0_400 -> m0_368  [key=2, style=dotted];
m0_400 -> m0_331  [key=2, style=dotted];
m0_401 -> m0_395  [key=0, style=bold, color=blue];
m0_48 -> m0_49  [key=0, style=solid];
m0_48 -> m0_50  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m0_49 -> m0_50  [key=0, style=solid];
m0_49 -> m0_9  [key=2, style=dotted];
m0_49 -> m0_10  [key=2, style=dotted];
m0_49 -> m0_52  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_50 -> m0_51  [key=0, style=solid];
m0_50 -> m0_36  [key=2, style=dotted];
m0_50 -> m0_12  [key=2, style=dotted];
m0_51 -> m0_48  [key=0, style=bold, color=blue];
m0_119 -> m0_120  [key=0, style=solid];
m0_120 -> m0_121  [key=0, style=solid];
m0_120 -> m0_115  [key=2, style=dotted];
m0_120 -> m0_70  [key=2, style=dotted];
m0_120 -> m0_122  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_121 -> m0_122  [key=0, style=solid];
m0_121 -> m0_9  [key=2, style=dotted];
m0_121 -> m0_10  [key=2, style=dotted];
m0_121 -> m0_124  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_122 -> m0_123  [key=0, style=solid];
m0_122 -> m0_36  [key=2, style=dotted];
m0_122 -> m0_12  [key=2, style=dotted];
m0_123 -> m0_119  [key=0, style=bold, color=blue];
m0_24 -> m0_25  [key=0, style=solid];
m0_24 -> m0_26  [key=1, style=dashed, color=darkseagreen4, label=double];
m0_25 -> m0_26  [key=0, style=solid];
m0_25 -> m0_9  [key=2, style=dotted];
m0_25 -> m0_10  [key=2, style=dotted];
m0_25 -> m0_28  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_26 -> m0_27  [key=0, style=solid];
m0_26 -> m0_20  [key=2, style=dotted];
m0_27 -> m0_24  [key=0, style=bold, color=blue];
m0_267 -> m0_268  [key=0, style=solid];
m0_268 -> m0_269  [key=0, style=solid];
m0_268 -> m0_213  [key=2, style=dotted];
m0_268 -> m0_270  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_269 -> m0_270  [key=0, style=solid];
m0_269 -> m0_9  [key=2, style=dotted];
m0_269 -> m0_10  [key=2, style=dotted];
m0_269 -> m0_272  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_270 -> m0_271  [key=0, style=solid];
m0_270 -> m0_36  [key=2, style=dotted];
m0_270 -> m0_12  [key=2, style=dotted];
m0_271 -> m0_267  [key=0, style=bold, color=blue];
m0_226 -> m0_227  [key=0, style=solid];
m0_227 -> m0_228  [key=0, style=solid];
m0_227 -> m0_79  [key=2, style=dotted];
m0_227 -> m0_70  [key=2, style=dotted];
m0_227 -> m0_229  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_228 -> m0_229  [key=0, style=solid];
m0_228 -> m0_9  [key=2, style=dotted];
m0_228 -> m0_10  [key=2, style=dotted];
m0_228 -> m0_231  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_229 -> m0_230  [key=0, style=solid];
m0_229 -> m0_36  [key=2, style=dotted];
m0_229 -> m0_12  [key=2, style=dotted];
m0_230 -> m0_226  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_6  [key=2, style=dotted];
m0_1 -> m0_3  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
m0_1 -> m0_14  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
m0_2 -> m0_3  [key=0, style=solid];
m0_2 -> d77  [key=2, style=dotted];
m0_2 -> m0_8  [key=2, style=dotted];
m0_2 -> m0_4  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_3 -> m0_4  [key=0, style=solid];
m0_3 -> m0_9  [key=2, style=dotted];
m0_3 -> m0_10  [key=2, style=dotted];
m0_3 -> m0_13  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_4 -> m0_5  [key=0, style=solid];
m0_4 -> m0_11  [key=2, style=dotted];
m0_4 -> m0_12  [key=2, style=dotted];
m0_5 -> m0_0  [key=0, style=bold, color=blue];
m0_217 -> m0_218  [key=0, style=solid];
m0_218 -> m0_219  [key=0, style=solid];
m0_218 -> m0_213  [key=2, style=dotted];
m0_218 -> m0_70  [key=2, style=dotted];
m0_218 -> m0_220  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_219 -> m0_220  [key=0, style=solid];
m0_219 -> m0_9  [key=2, style=dotted];
m0_219 -> m0_10  [key=2, style=dotted];
m0_219 -> m0_222  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_220 -> m0_221  [key=0, style=solid];
m0_220 -> m0_36  [key=2, style=dotted];
m0_220 -> m0_12  [key=2, style=dotted];
m0_221 -> m0_217  [key=0, style=bold, color=blue];
m0_208 -> m0_209  [key=0, style=solid];
m0_209 -> m0_210  [key=0, style=solid];
m0_209 -> m0_213  [key=2, style=dotted];
m0_209 -> m0_70  [key=2, style=dotted];
m0_209 -> m0_211  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_210 -> m0_211  [key=0, style=solid];
m0_210 -> m0_9  [key=2, style=dotted];
m0_210 -> m0_10  [key=2, style=dotted];
m0_210 -> m0_214  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_211 -> m0_212  [key=0, style=solid];
m0_211 -> m0_36  [key=2, style=dotted];
m0_211 -> m0_12  [key=2, style=dotted];
m0_212 -> m0_208  [key=0, style=bold, color=blue];
m0_127 -> m0_128  [key=0, style=solid];
m0_128 -> m0_129  [key=0, style=solid];
m0_128 -> m0_115  [key=2, style=dotted];
m0_128 -> m0_70  [key=2, style=dotted];
m0_128 -> m0_130  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_129 -> m0_130  [key=0, style=solid];
m0_129 -> m0_9  [key=2, style=dotted];
m0_129 -> m0_10  [key=2, style=dotted];
m0_129 -> m0_132  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_130 -> m0_131  [key=0, style=solid];
m0_130 -> m0_36  [key=2, style=dotted];
m0_130 -> m0_12  [key=2, style=dotted];
m0_131 -> m0_127  [key=0, style=bold, color=blue];
m0_409 -> m0_410  [key=0, style=solid];
m0_409 -> m0_411  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue"];
m0_410 -> m0_411  [key=0, style=solid];
m0_410 -> m0_9  [key=2, style=dotted];
m0_410 -> m0_10  [key=2, style=dotted];
m0_410 -> m0_413  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_411 -> m0_412  [key=0, style=solid];
m0_411 -> m0_105  [key=2, style=dotted];
m0_412 -> m0_409  [key=0, style=bold, color=blue];
m0_84 -> m0_85  [key=0, style=solid];
m0_85 -> m0_86  [key=0, style=solid];
m0_85 -> m0_79  [key=2, style=dotted];
m0_85 -> m0_70  [key=2, style=dotted];
m0_85 -> m0_87  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_86 -> m0_87  [key=0, style=solid];
m0_86 -> m0_9  [key=2, style=dotted];
m0_86 -> m0_10  [key=2, style=dotted];
m0_86 -> m0_89  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_87 -> m0_88  [key=0, style=solid];
m0_87 -> m0_36  [key=2, style=dotted];
m0_87 -> m0_12  [key=2, style=dotted];
m0_88 -> m0_84  [key=0, style=bold, color=blue];
m0_64 -> m0_65  [key=0, style=solid];
m0_65 -> m0_66  [key=0, style=solid];
m0_65 -> m0_69  [key=2, style=dotted];
m0_65 -> m0_70  [key=2, style=dotted];
m0_65 -> m0_67  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_66 -> m0_67  [key=0, style=solid];
m0_66 -> m0_9  [key=2, style=dotted];
m0_66 -> m0_10  [key=2, style=dotted];
m0_66 -> m0_71  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_67 -> m0_68  [key=0, style=solid];
m0_67 -> m0_36  [key=2, style=dotted];
m0_67 -> m0_12  [key=2, style=dotted];
m0_68 -> m0_64  [key=0, style=bold, color=blue];
m0_135 -> m0_136  [key=0, style=solid];
m0_136 -> m0_137  [key=0, style=solid];
m0_136 -> m0_140  [key=2, style=dotted];
m0_136 -> m0_138  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_137 -> m0_138  [key=0, style=solid];
m0_137 -> m0_9  [key=2, style=dotted];
m0_137 -> m0_10  [key=2, style=dotted];
m0_137 -> m0_141  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_138 -> m0_139  [key=0, style=solid];
m0_138 -> m0_105  [key=2, style=dotted];
m0_139 -> m0_135  [key=0, style=bold, color=blue];
m0_16 -> m0_17  [key=0, style=solid];
m0_16 -> m0_18  [key=1, style=dashed, color=darkseagreen4, label=long];
m0_17 -> m0_18  [key=0, style=solid];
m0_17 -> m0_9  [key=2, style=dotted];
m0_17 -> m0_10  [key=2, style=dotted];
m0_17 -> m0_21  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_18 -> m0_19  [key=0, style=solid];
m0_18 -> m0_20  [key=2, style=dotted];
m0_19 -> m0_16  [key=0, style=bold, color=blue];
m0_318 -> m0_319  [key=0, style=solid];
m0_318 -> m0_321  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_318 -> m0_322  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_319 -> m0_320  [key=0, style=solid];
m0_319 -> m0_9  [key=2, style=dotted];
m0_319 -> m0_10  [key=2, style=dotted];
m0_319 -> m0_324  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_319 -> m0_321  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_319 -> m0_322  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_321 -> m0_322  [key=0, style=solid];
m0_321 -> m0_105  [key=2, style=dotted];
m0_322 -> m0_323  [key=0, style=solid];
m0_322 -> m0_313  [key=2, style=dotted];
m0_322 -> m0_105  [key=2, style=dotted];
m0_320 -> m0_321  [key=0, style=solid];
m0_320 -> m0_322  [key=0, style=solid];
m0_323 -> m0_318  [key=0, style=bold, color=blue];
m0_424 -> m0_425  [key=0, style=solid];
m0_425 -> m0_426  [key=0, style=solid];
m0_425 -> m0_6  [key=2, style=dotted];
m0_425 -> m0_427  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_426 -> m0_427  [key=0, style=solid];
m0_426 -> m0_9  [key=2, style=dotted];
m0_426 -> m0_10  [key=2, style=dotted];
m0_426 -> m0_429  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_427 -> m0_428  [key=0, style=solid];
m0_427 -> m0_105  [key=2, style=dotted];
m0_428 -> m0_424  [key=0, style=bold, color=blue];
m0_160 -> m0_161  [key=0, style=solid];
m0_160 -> m0_162  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m0_161 -> m0_162  [key=0, style=solid];
m0_161 -> m0_9  [key=2, style=dotted];
m0_161 -> m0_10  [key=2, style=dotted];
m0_161 -> m0_164  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_162 -> m0_163  [key=0, style=solid];
m0_162 -> m0_105  [key=2, style=dotted];
m0_163 -> m0_160  [key=0, style=bold, color=blue];
m0_292 -> m0_293  [key=0, style=solid];
m0_292 -> m0_294  [key=1, style=dashed, color=darkseagreen4, label="int?"];
m0_293 -> m0_294  [key=0, style=solid];
m0_293 -> m0_9  [key=2, style=dotted];
m0_293 -> m0_10  [key=2, style=dotted];
m0_293 -> m0_296  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_294 -> m0_295  [key=0, style=solid];
m0_294 -> m0_105  [key=2, style=dotted];
m0_295 -> m0_292  [key=0, style=bold, color=blue];
m0_234 -> m0_235  [key=0, style=solid];
m0_235 -> m0_236  [key=0, style=solid];
m0_235 -> m0_239  [key=2, style=dotted];
m0_235 -> m0_237  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_236 -> m0_237  [key=0, style=solid];
m0_236 -> m0_9  [key=2, style=dotted];
m0_236 -> m0_10  [key=2, style=dotted];
m0_236 -> m0_240  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_237 -> m0_238  [key=0, style=solid];
m0_237 -> m0_36  [key=2, style=dotted];
m0_237 -> m0_12  [key=2, style=dotted];
m0_238 -> m0_234  [key=0, style=bold, color=blue];
m0_199 -> m0_200  [key=0, style=solid];
m0_200 -> m0_201  [key=0, style=solid];
m0_200 -> m0_204  [key=2, style=dotted];
m0_200 -> m0_202  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_201 -> m0_202  [key=0, style=solid];
m0_201 -> m0_9  [key=2, style=dotted];
m0_201 -> m0_10  [key=2, style=dotted];
m0_201 -> m0_205  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_202 -> m0_203  [key=0, style=solid];
m0_202 -> m0_105  [key=2, style=dotted];
m0_203 -> m0_199  [key=0, style=bold, color=blue];
m0_283 -> m0_284  [key=0, style=solid];
m0_284 -> m0_285  [key=0, style=solid];
m0_284 -> m0_79  [key=2, style=dotted];
m0_284 -> m0_286  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_285 -> m0_286  [key=0, style=solid];
m0_285 -> m0_9  [key=2, style=dotted];
m0_285 -> m0_10  [key=2, style=dotted];
m0_285 -> m0_288  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_286 -> m0_287  [key=0, style=solid];
m0_286 -> m0_36  [key=2, style=dotted];
m0_286 -> m0_12  [key=2, style=dotted];
m0_287 -> m0_283  [key=0, style=bold, color=blue];
m0_101 -> m0_102  [key=0, style=solid];
m0_101 -> m0_103  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Colors"];
m0_102 -> m0_103  [key=0, style=solid];
m0_102 -> m0_9  [key=2, style=dotted];
m0_102 -> m0_10  [key=2, style=dotted];
m0_102 -> m0_106  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_103 -> m0_104  [key=0, style=solid];
m0_103 -> m0_105  [key=2, style=dotted];
m0_103 -> m0_103  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Colors"];
m0_104 -> m0_101  [key=0, style=bold, color=blue];
m0_445 -> m0_446  [key=0, style=solid];
m0_445 -> m0_447  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.FakeImmutableOptions"];
m0_446 -> m0_447  [key=0, style=solid];
m0_446 -> m0_449  [key=2, style=dotted];
m0_446 -> m0_10  [key=2, style=dotted];
m0_447 -> m0_448  [key=0, style=solid];
m0_447 -> m0_105  [key=2, style=dotted];
m0_448 -> m0_445  [key=0, style=bold, color=blue];
m0_276 -> m0_277  [key=0, style=solid];
m0_276 -> m0_278  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_277 -> m0_278  [key=0, style=solid];
m0_277 -> m0_9  [key=2, style=dotted];
m0_277 -> m0_10  [key=2, style=dotted];
m0_277 -> m0_280  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_278 -> m0_279  [key=0, style=solid];
m0_278 -> m0_105  [key=2, style=dotted];
m0_279 -> m0_276  [key=0, style=bold, color=blue];
m0_339 -> m0_340  [key=0, style=solid];
m0_340 -> m0_341  [key=0, style=solid];
m0_340 -> m0_340  [key=3, color=darkorchid, style=bold, label="Local variable System.Action test"];
m0_341 -> m0_342  [key=0, style=solid];
m0_341 -> m0_331  [key=2, style=dotted];
m0_342 -> m0_339  [key=0, style=bold, color=blue];
m0_189 -> m0_190  [key=0, style=solid];
m0_190 -> m0_191  [key=0, style=solid];
m0_190 -> m0_194  [key=2, style=dotted];
m0_190 -> m0_70  [key=2, style=dotted];
m0_190 -> m0_192  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_191 -> m0_192  [key=0, style=solid];
m0_191 -> m0_9  [key=2, style=dotted];
m0_191 -> m0_10  [key=2, style=dotted];
m0_191 -> m0_195  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_192 -> m0_193  [key=0, style=solid];
m0_192 -> m0_36  [key=2, style=dotted];
m0_192 -> m0_12  [key=2, style=dotted];
m0_193 -> m0_189  [key=0, style=bold, color=blue];
m0_450 -> m0_14  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
m0_451 -> m0_182  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m0_451 -> m0_186  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m0_452 -> m0_375  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_453 -> m0_385  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_454 -> m0_407  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_455 -> m0_443  [key=1, style=dashed, color=darkseagreen4, label=int];
m1_4 -> m1_5  [key=0, style=solid];
m1_5 -> m1_4  [key=0, style=bold, color=blue];
m1_6 -> m1_7  [key=0, style=solid];
m1_7 -> m1_8  [key=0, style=solid];
m1_8 -> m1_6  [key=0, style=bold, color=blue];
m1_0 -> m1_1  [key=0, style=solid];
m1_0 -> m1_2  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m1_1 -> m1_2  [key=0, style=solid];
m1_2 -> m1_3  [key=0, style=solid];
m1_3 -> m1_0  [key=0, style=bold, color=blue];
m1_9 -> m1_1  [key=1, style=dashed, color=darkseagreen4, label="Humanizer.Tests.AmbientCulture"];
m1_9 -> m1_7  [key=1, style=dashed, color=darkseagreen4, label="Humanizer.Tests.AmbientCulture"];
m2_10 -> m2_11  [key=0, style=solid];
m2_10 -> m2_12  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>"];
m2_10 -> m2_14  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>"];
m2_46 -> m2_48  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m2_46 -> m2_47  [key=0, style=solid];
m2_46 -> m2_49  [key=1, style=dashed, color=darkseagreen4, label="System.Func<int, bool>"];
m2_48 -> m2_36  [key=2, style=dotted];
m2_48 -> m2_49  [key=0, style=solid];
m2_48 -> m2_50  [key=0, style=solid];
m2_47 -> m2_48  [key=0, style=solid];
m2_49 -> m2_51  [key=0, style=solid];
m2_49 -> m2_21  [key=2, style=dotted];
m2_50 -> m2_51  [key=0, style=solid];
m2_51 -> m2_46  [key=0, style=bold, color=blue];
m2_11 -> m2_19  [key=1, style=dashed, color=darkseagreen4, label=guard];
m2_11 -> m2_12  [key=0, style=solid];
m2_11 -> m2_14  [key=0, style=solid];
m2_11 -> m2_13  [key=1, style=dashed, color=darkseagreen4, label=guard];
m2_12 -> m2_11  [key=0, style=solid];
m2_12 -> m2_18  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_12 -> m2_13  [key=0, style=solid];
m2_12 -> d52  [key=2, style=dotted];
m2_14 -> m2_15  [key=0, style=solid];
m2_13 -> m2_15  [key=0, style=solid];
m2_13 -> m2_17  [key=2, style=dotted];
m2_15 -> m2_10  [key=0, style=bold, color=blue];
m2_0 -> m2_1  [key=0, style=solid, color=green];
m2_1 -> m2_2  [key=0, style=solid, color=green];
m2_1 -> m2_10  [key=2, style=dotted];
m2_1 -> m2_4  [key=1, style=dashed, color=darkseagreen4, label=options];
m2_1 -> m2_6  [key=1, style=dashed, color=darkseagreen4, label=options];
m2_1 -> m2_7  [key=1, style=dashed, color=darkseagreen4, label=options];
m2_1 -> m2_8  [key=1, style=dashed, color=darkseagreen4, label=options];
m2_2 -> m2_3  [key=0, style=solid];
m2_2 -> m2_11  [key=2, style=dotted];
m2_2 -> m2_4  [key=1, style=dashed, color=darkseagreen4, label=parser];
m2_2 -> m2_0  [key=0, style=bold, color=blue];
m2_4 -> m2_5  [key=0, style=solid, color=green];
m2_4 -> m2_12  [key=2, style=dotted];
m2_6 -> m2_7  [key=0, style=solid, color=green];
m2_6 -> m2_13  [key=2, style=dotted];
m2_6 -> m2_14  [key=2, style=dotted];
m2_7 -> m2_8  [key=0, style=solid, color=green];
m2_7 -> m2_13  [key=2, style=dotted];
m2_7 -> m2_14  [key=2, style=dotted];
m2_7 -> m2_9  [key=2, style=dotted, color=green];
m2_8 -> m2_9  [key=0, style=solid];
m2_8 -> m2_13  [key=2, style=dotted];
m2_8 -> m2_14  [key=2, style=dotted];
m2_8 -> m2_6  [key=0, style=bold, color=blue];
m2_3 -> m2_4  [key=0, style=solid, color=green];
m2_5 -> m2_6  [key=0, style=solid];
m2_5 -> m2_13  [key=2, style=dotted];
m2_5 -> m2_14  [key=2, style=dotted];
m2_5 -> m2_3  [key=0, style=bold, color=blue];
m2_9 -> m2_0  [key=0, style=bold, color=blue];
m2_22 -> m2_29  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m2_22 -> m2_23  [key=0, style=solid];
m2_29 -> m2_36  [key=2, style=dotted];
m2_29 -> m2_30  [key=0, style=solid];
m2_29 -> m2_32  [key=0, style=solid];
m2_29 -> m2_31  [key=1, style=dashed, color=darkseagreen4, label=max];
m2_28 -> m2_29  [key=0, style=solid];
m2_30 -> m2_31  [key=0, style=solid];
m2_30 -> m2_32  [key=0, style=solid];
m2_32 -> m2_33  [key=0, style=solid];
m2_32 -> m2_37  [key=2, style=dotted];
m2_31 -> m2_33  [key=0, style=solid];
m2_31 -> m2_35  [key=2, style=dotted];
m2_23 -> m2_24  [key=0, style=solid];
m2_23 -> m2_26  [key=0, style=solid];
m2_23 -> m2_34  [key=2, style=dotted];
m2_27 -> m2_28  [key=0, style=solid];
m2_25 -> m2_33  [key=0, style=solid];
m2_25 -> m2_35  [key=2, style=dotted];
m2_24 -> m2_25  [key=0, style=solid];
m2_26 -> m2_27  [key=0, style=solid];
m2_33 -> m2_22  [key=0, style=bold, color=blue];
m2_18 -> m2_19  [key=0, style=solid];
m2_19 -> m2_21  [key=2, style=dotted];
m2_19 -> m2_20  [key=0, style=solid];
m2_20 -> m2_18  [key=0, style=bold, color=blue];
m2_38 -> m2_42  [key=1, style=dashed, color=green, label="System.Func<int, int, bool>"];
m2_38 -> m2_39  [key=0, style=solid];
m2_38 -> m2_41  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m2_42 -> m2_44  [key=0, style=solid, color=green];
m2_42 -> m2_45  [key=2, style=dotted, color=green];
m2_41 -> m2_42  [key=0, style=solid, color=green];
m2_41 -> m2_43  [key=0, style=solid];
m2_41 -> m2_36  [key=2, style=dotted];
m2_39 -> m2_40  [key=0, style=solid];
m2_40 -> m2_41  [key=0, style=solid];
m2_43 -> m2_44  [key=0, style=solid];
m2_44 -> m2_38  [key=0, style=bold, color=blue];
m2_52 -> m2_54  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m2_52 -> m2_53  [key=0, style=solid];
m2_52 -> m2_55  [key=1, style=dashed, color=darkseagreen4, label="System.Func<int, bool>"];
m2_54 -> m2_36  [key=2, style=dotted];
m2_54 -> m2_55  [key=0, style=solid];
m2_54 -> m2_56  [key=0, style=solid];
m2_53 -> m2_54  [key=0, style=solid];
m2_55 -> m2_57  [key=0, style=solid];
m2_55 -> m2_21  [key=2, style=dotted];
m2_56 -> m2_57  [key=0, style=solid];
m2_57 -> m2_52  [key=0, style=bold, color=blue];
m2_58 -> m2_19  [key=1, style=dashed, color=darkseagreen4, label=guard];
}
