digraph  {
m0_52 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="140-140", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="FSharpOptionHelper.cs"];
m0_53 [label="var result = InvokeBuild<Simple_Options>(\r\n                arguments)", span="145-146", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="FSharpOptionHelper.cs"];
m0_54 [label="((Parsed<Simple_Options>)result).Value.IntSequence.ShouldBeEquivalentTo(expected)", span="149-149", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="FSharpOptionHelper.cs"];
m0_55 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="140-140", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="FSharpOptionHelper.cs"];
m0_0 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.InvokeBuild<T>(string[])", span="21-21", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.InvokeBuild<T>(string[])", file="FSharpOptionHelper.cs"];
m0_1 [label="return InstanceBuilder.Build(\r\n                Maybe.Just<Func<T>>(() => new T()),\r\n                (args, optionSpecs) => Tokenizer.ConfigureTokenizer(StringComparer.Ordinal, false, false)(args, optionSpecs),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                false,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>());", span="24-31", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.InvokeBuild<T>(string[])", file="FSharpOptionHelper.cs"];
m0_2 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.InvokeBuild<T>(string[])", span="21-21", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.InvokeBuild<T>(string[])", file="FSharpOptionHelper.cs"];
m0_4 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()", file="FSharpOptionHelper.cs"];
m0_3 [label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124", cluster="CSharpx.Maybe.Just<T>(T)", file="FSharpOptionHelper.cs"];
m0_5 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, bool, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="18-18", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, bool, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="FSharpOptionHelper.cs"];
m0_248 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", span="769-769", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="FSharpOptionHelper.cs"];
m0_250 [label="Assert.Throws<InvalidOperationException>(test)", span="776-776", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="FSharpOptionHelper.cs"];
m0_249 [label="Action test = () => InvokeBuild<Options_With_Both_Min_And_Max_Set_To_Zero>(\r\n                new string[] { })", span="772-773", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="FSharpOptionHelper.cs"];
m0_251 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", span="769-769", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="FSharpOptionHelper.cs"];
m0_237 [label="Entry Unk.>", span="", cluster="Unk.>", file="FSharpOptionHelper.cs"];
m0_121 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="394-394", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="FSharpOptionHelper.cs"];
m0_122 [label="var result = InvokeBuild<Options_With_Sequence_Having_Separator_Set>(\r\n                arguments)", span="399-400", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="FSharpOptionHelper.cs"];
m0_123 [label="expected.ShouldBeEquivalentTo(((Parsed<Options_With_Sequence_Having_Separator_Set>)result).Value.LongSequence)", span="403-403", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="FSharpOptionHelper.cs"];
m0_124 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="394-394", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="FSharpOptionHelper.cs"];
m0_161 [label="Entry CommandLine.Tests.Fakes.Options_With_Required_Set_To_True_Within_Same_Set.Options_With_Required_Set_To_True_Within_Same_Set()", span="4-4", cluster="CommandLine.Tests.Fakes.Options_With_Required_Set_To_True_Within_Same_Set.Options_With_Required_Set_To_True_Within_Same_Set()", file="FSharpOptionHelper.cs"];
m0_194 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="598-598", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="FSharpOptionHelper.cs"];
m0_195 [label="var result = InvokeBuild<Simple_Options>(\r\n                arguments)", span="603-604", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="FSharpOptionHelper.cs"];
m0_196 [label="((Parsed<Simple_Options>)result).Value.StringValue.ShouldBeEquivalentTo(expected)", span="607-607", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="FSharpOptionHelper.cs"];
m0_197 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="598-598", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="FSharpOptionHelper.cs"];
m0_233 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", span="747-747", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="FSharpOptionHelper.cs"];
m0_235 [label="Assert.Throws<InvalidOperationException>(test)", span="754-754", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="FSharpOptionHelper.cs"];
m0_234 [label="Action test = () => InvokeBuild<Options_With_Min_Set_To_Zero>(\r\n                new string[] { })", span="750-751", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="FSharpOptionHelper.cs"];
m0_236 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", span="747-747", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="FSharpOptionHelper.cs"];
m0_216 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="687-687", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="FSharpOptionHelper.cs"];
m0_217 [label="var result = InvokeBuild<Options_With_Nullables>(\r\n                arguments)", span="692-693", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="FSharpOptionHelper.cs"];
m0_218 [label="expected.ShouldBeEquivalentTo(((Parsed<Options_With_Nullables>)result).Value.NullableLong)", span="696-696", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="FSharpOptionHelper.cs"];
m0_219 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="687-687", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="FSharpOptionHelper.cs"];
m0_76 [label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="371-371", cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="FSharpOptionHelper.cs"];
m0_37 [label="Entry CommandLine.TypeInfo.Create(System.Type)", span="29-29", cluster="CommandLine.TypeInfo.Create(System.Type)", file="FSharpOptionHelper.cs"];
m0_309 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.Options_With_Required_Set_To_True_For_Values)", span="890-890", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.Options_With_Required_Set_To_True_For_Values)", file="FSharpOptionHelper.cs"];
m0_310 [label="var result = InvokeBuild<Options_With_Required_Set_To_True_For_Values>(\r\n                arguments)", span="895-896", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.Options_With_Required_Set_To_True_For_Values)", file="FSharpOptionHelper.cs"];
m0_311 [label="expected.ShouldBeEquivalentTo(((Parsed<Options_With_Required_Set_To_True_For_Values>)result).Value)", span="899-899", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.Options_With_Required_Set_To_True_For_Values)", file="FSharpOptionHelper.cs"];
m0_312 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.Options_With_Required_Set_To_True_For_Values)", span="890-890", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.Options_With_Required_Set_To_True_For_Values)", file="FSharpOptionHelper.cs"];
m0_129 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="431-431", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="FSharpOptionHelper.cs"];
m0_132 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Simple_Options_With_Values>>(() => new Simple_Options_With_Values()),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                false,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="444-453", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="FSharpOptionHelper.cs"];
m0_131 [label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="441-441", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="FSharpOptionHelper.cs"];
m0_133 [label="expectedResult.ShouldBeEquivalentTo(((Parsed<Simple_Options_With_Values>)result).Value)", span="456-456", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="FSharpOptionHelper.cs"];
m0_130 [label="var expectedResult = new Simple_Options_With_Values\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="434-440", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="FSharpOptionHelper.cs"];
m0_134 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="431-431", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="FSharpOptionHelper.cs"];
m0_288 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_with_mixed_short_long_options_generates_RepeatedOptionError(string[], int)", span="840-840", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_with_mixed_short_long_options_generates_RepeatedOptionError(string[], int)", file="FSharpOptionHelper.cs"];
m0_289 [label="var result = InvokeBuild<Simple_Options>(\r\n                arguments)", span="843-844", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_with_mixed_short_long_options_generates_RepeatedOptionError(string[], int)", file="FSharpOptionHelper.cs"];
m0_290 [label="((NotParsed<Simple_Options>)result).Errors.Should().HaveCount(x => x == expected)", span="847-847", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_with_mixed_short_long_options_generates_RepeatedOptionError(string[], int)", file="FSharpOptionHelper.cs"];
m0_291 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_with_mixed_short_long_options_generates_RepeatedOptionError(string[], int)", span="840-840", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_with_mixed_short_long_options_generates_RepeatedOptionError(string[], int)", file="FSharpOptionHelper.cs"];
m0_189 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="580-580", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="FSharpOptionHelper.cs"];
m0_191 [label="var result = InvokeBuild<Simple_Options>(\r\n                new[] { ''-zx'' })", span="586-587", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="FSharpOptionHelper.cs"];
m0_192 [label="((NotParsed<Simple_Options>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="590-590", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="FSharpOptionHelper.cs"];
m0_190 [label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="583-583", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="FSharpOptionHelper.cs"];
m0_193 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="580-580", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="FSharpOptionHelper.cs"];
m0_295 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", span="853-853", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", file="FSharpOptionHelper.cs"];
m0_296 [label="var result = InvokeBuild<Options_With_Interface>(\r\n                arguments)", span="856-857", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", file="FSharpOptionHelper.cs"];
m0_297 [label="expected.ShouldBeEquivalentTo(((Parsed<Options_With_Interface>)result).Value.InputFile)", span="860-860", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", file="FSharpOptionHelper.cs"];
m0_298 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", span="853-853", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", file="FSharpOptionHelper.cs"];
m0_71 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="210-210", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="FSharpOptionHelper.cs"];
m0_73 [label="var result = InvokeBuild<Options_With_Sequence_And_Only_Min_Constraint_For_Value>(\r\n                new string[] { })", span="216-217", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="FSharpOptionHelper.cs"];
m0_74 [label="((NotParsed<Options_With_Sequence_And_Only_Min_Constraint_For_Value>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="220-220", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="FSharpOptionHelper.cs"];
m0_72 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="213-213", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="FSharpOptionHelper.cs"];
m0_75 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="210-210", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="FSharpOptionHelper.cs"];
m0_183 [label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="316-316", cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", file="FSharpOptionHelper.cs"];
m0_82 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="242-242", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="FSharpOptionHelper.cs"];
m0_84 [label="var result = InvokeBuild<Options_With_Sequence_And_Only_Max_Constraint_For_Value>(\r\n                new[] { ''one'', ''two'', ''three'', ''this-is-too-much'' })", span="248-249", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="FSharpOptionHelper.cs"];
m0_85 [label="((NotParsed<Options_With_Sequence_And_Only_Max_Constraint_For_Value>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="252-252", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="FSharpOptionHelper.cs"];
m0_83 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="245-245", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="FSharpOptionHelper.cs"];
m0_86 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="242-242", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="FSharpOptionHelper.cs"];
m0_27 [label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116", cluster="CSharpx.Maybe.Nothing<T>()", file="FSharpOptionHelper.cs"];
m0_220 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="705-705", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="FSharpOptionHelper.cs"];
m0_221 [label="var result = InvokeBuild<Options_With_FSharpOption>(\r\n                arguments)", span="710-711", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="FSharpOptionHelper.cs"];
m0_223 [label="expectedValue.ShouldBeEquivalentTo(((Parsed<Options_With_FSharpOption>)result).Value.FileName.Value)", span="716-716", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="FSharpOptionHelper.cs"];
m0_224 [label="expectedSome.ShouldBeEquivalentTo(FSharpOption<string>.get_IsSome(((Parsed<Options_With_FSharpOption>)result).Value.FileName))", span="718-718", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="FSharpOptionHelper.cs"];
m0_222 [label="((Parsed<Options_With_FSharpOption>)result).Value.FileName != null", span="714-714", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="FSharpOptionHelper.cs"];
m0_225 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="705-705", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="FSharpOptionHelper.cs"];
m0_323 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", span="943-943", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", file="FSharpOptionHelper.cs"];
m0_324 [label="var result = InvokeBuild<Options_With_Two_Options_Having_Required_Set_To_True>(\r\n                arguments)", span="946-947", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", file="FSharpOptionHelper.cs"];
m0_325 [label="var errors = ((NotParsed<Options_With_Two_Options_Having_Required_Set_To_True>)result).Errors", span="950-950", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", file="FSharpOptionHelper.cs"];
m0_326 [label="errors.OfType<MissingRequiredOptionError>().Should().HaveCount(x => x == expected)", span="951-951", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", file="FSharpOptionHelper.cs"];
m0_327 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", span="943-943", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", file="FSharpOptionHelper.cs"];
m0_145 [label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>)", span="14-14", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>)", file="FSharpOptionHelper.cs"];
m0_184 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="564-564", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="FSharpOptionHelper.cs"];
m0_186 [label="var result = InvokeBuild<Simple_Options>(\r\n                new[] { ''-z'', ''-x'' })", span="570-571", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="FSharpOptionHelper.cs"];
m0_187 [label="((NotParsed<Simple_Options>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="574-574", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="FSharpOptionHelper.cs"];
m0_185 [label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="567-567", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="FSharpOptionHelper.cs"];
m0_188 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="564-564", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="FSharpOptionHelper.cs"];
m0_95 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="300-300", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="FSharpOptionHelper.cs"];
m0_97 [label="var result = InvokeBuild<Simple_Options_With_Enum>(\r\n                new[] { ''--colors'', ''3'' })", span="306-307", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="FSharpOptionHelper.cs"];
m0_98 [label="((NotParsed<Simple_Options_With_Enum>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="310-310", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="FSharpOptionHelper.cs"];
m0_96 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="303-303", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="FSharpOptionHelper.cs"];
m0_99 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="300-300", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="FSharpOptionHelper.cs"];
m0_38 [label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="404-404", cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="FSharpOptionHelper.cs"];
m0_39 [label="Entry Unk.ShouldBeEquivalentTo", span="", cluster="Unk.ShouldBeEquivalentTo", file="FSharpOptionHelper.cs"];
m0_274 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_with_short_options_generates_RepeatedOptionError(string[], int)", span="816-816", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_with_short_options_generates_RepeatedOptionError(string[], int)", file="FSharpOptionHelper.cs"];
m0_275 [label="var result = InvokeBuild<Simple_Options>(\r\n                arguments)", span="819-820", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_with_short_options_generates_RepeatedOptionError(string[], int)", file="FSharpOptionHelper.cs"];
m0_276 [label="((NotParsed<Simple_Options>)result).Errors.Should().HaveCount(x => x == expected)", span="823-823", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_with_short_options_generates_RepeatedOptionError(string[], int)", file="FSharpOptionHelper.cs"];
m0_277 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_with_short_options_generates_RepeatedOptionError(string[], int)", span="816-816", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_with_short_options_generates_RepeatedOptionError(string[], int)", file="FSharpOptionHelper.cs"];
m0_9 [label="Entry T.cstr", span="", cluster="T.cstr", file="FSharpOptionHelper.cs"];
m0_117 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="375-375", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="FSharpOptionHelper.cs"];
m0_118 [label="var result = InvokeBuild<Options_With_Sequence_Without_Range_For_Value>(\r\n                arguments)", span="380-381", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="FSharpOptionHelper.cs"];
m0_119 [label="expected.ShouldBeEquivalentTo(((Parsed<Options_With_Sequence_Without_Range_For_Value>)result).Value.LongSequence)", span="384-384", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="FSharpOptionHelper.cs"];
m0_120 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="375-375", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="FSharpOptionHelper.cs"];
m0_60 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="179-179", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="FSharpOptionHelper.cs"];
m0_61 [label="var result = InvokeBuild<Options_With_Sequence_And_Only_Max_Constraint>(\r\n                arguments)", span="184-185", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="FSharpOptionHelper.cs"];
m0_62 [label="((Parsed<Options_With_Sequence_And_Only_Max_Constraint>)result).Value.StringSequence.ShouldBeEquivalentTo(expected)", span="188-188", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="FSharpOptionHelper.cs"];
m0_63 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="179-179", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="FSharpOptionHelper.cs"];
m0_255 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", span="785-785", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", file="FSharpOptionHelper.cs"];
m0_256 [label="var result = InvokeBuild<Options_With_Named_And_Empty_Sets>(\r\n                arguments)", span="788-789", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", file="FSharpOptionHelper.cs"];
m0_257 [label="type == ParserResultType.NotParsed", span="792-792", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", file="FSharpOptionHelper.cs"];
m0_258 [label="((NotParsed<Options_With_Named_And_Empty_Sets>)result).Errors.Should().HaveCount(x => x == expected)", span="794-794", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", file="FSharpOptionHelper.cs"];
m0_260 [label="result.Should().BeOfType<Parsed<Options_With_Named_And_Empty_Sets>>()", span="798-798", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", file="FSharpOptionHelper.cs"];
m0_259 [label="type == ParserResultType.Parsed", span="796-796", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", file="FSharpOptionHelper.cs"];
m0_261 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", span="785-785", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", file="FSharpOptionHelper.cs"];
m0_48 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="121-121", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="FSharpOptionHelper.cs"];
m0_49 [label="var result = InvokeBuild<Options_With_Sequence>(\r\n                arguments)", span="126-127", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="FSharpOptionHelper.cs"];
m0_50 [label="((Parsed<Options_With_Sequence>)result).Value.IntSequence.ShouldBeEquivalentTo(expected)", span="130-130", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="FSharpOptionHelper.cs"];
m0_51 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="121-121", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="FSharpOptionHelper.cs"];
m0_329 [label="Entry lambda expression", span="951-951", cluster="lambda expression", file="FSharpOptionHelper.cs"];
m0_18 [label="Entry lambda expression", span="38-38", cluster="lambda expression", file="FSharpOptionHelper.cs"];
m0_21 [label="Entry lambda expression", span="39-39", cluster="lambda expression", file="FSharpOptionHelper.cs"];
m0_19 [label="new T()", span="38-38", cluster="lambda expression", color=green, community=0, file="FSharpOptionHelper.cs"];
m0_20 [label="Exit lambda expression", span="38-38", cluster="lambda expression", file="FSharpOptionHelper.cs"];
m0_22 [label="Tokenizer.ConfigureTokenizer(StringComparer.Ordinal, false, false)(args, optionSpecs)", span="39-39", cluster="lambda expression", color=green, community=0, file="FSharpOptionHelper.cs"];
m0_23 [label="Exit lambda expression", span="39-39", cluster="lambda expression", file="FSharpOptionHelper.cs"];
m0_28 [label="Entry lambda expression", span="51-51", cluster="lambda expression", file="FSharpOptionHelper.cs"];
m0_29 [label="Tokenizer.ConfigureTokenizer(StringComparer.Ordinal, false, false)(args, optionSpecs)", span="51-51", cluster="lambda expression", color=green, community=0, file="FSharpOptionHelper.cs"];
m0_30 [label="Exit lambda expression", span="51-51", cluster="lambda expression", file="FSharpOptionHelper.cs"];
m0_7 [label="new T()", span="25-25", cluster="lambda expression", file="FSharpOptionHelper.cs"];
m0_11 [label="Tokenizer.ConfigureTokenizer(StringComparer.Ordinal, false, false)(args, optionSpecs)", span="26-26", cluster="lambda expression", file="FSharpOptionHelper.cs"];
m0_6 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()", file="FSharpOptionHelper.cs"];
m0_10 [label="Entry lambda expression", span="26-26", cluster="lambda expression", file="FSharpOptionHelper.cs"];
m0_135 [label="Entry lambda expression", span="445-445", cluster="lambda expression", file="FSharpOptionHelper.cs"];
m0_138 [label="Entry lambda expression", span="446-448", cluster="lambda expression", file="FSharpOptionHelper.cs"];
m0_8 [label="Exit lambda expression", span="25-25", cluster="lambda expression", file="FSharpOptionHelper.cs"];
m0_12 [label="Exit lambda expression", span="26-26", cluster="lambda expression", file="FSharpOptionHelper.cs"];
m0_239 [label="InvokeBuild<Options_With_Min_Set_To_Zero>(\r\n                new string[] { })", span="750-751", cluster="lambda expression", file="FSharpOptionHelper.cs"];
m0_246 [label="InvokeBuild<Options_With_Max_Set_To_Zero>(\r\n                new string[] { })", span="761-762", cluster="lambda expression", file="FSharpOptionHelper.cs"];
m0_253 [label="InvokeBuild<Options_With_Both_Min_And_Max_Set_To_Zero>(\r\n                new string[] { })", span="772-773", cluster="lambda expression", file="FSharpOptionHelper.cs"];
m0_137 [label="Exit lambda expression", span="445-445", cluster="lambda expression", file="FSharpOptionHelper.cs"];
m0_136 [label="new Simple_Options_With_Values()", span="445-445", cluster="lambda expression", file="FSharpOptionHelper.cs"];
m0_140 [label="Exit lambda expression", span="446-448", cluster="lambda expression", file="FSharpOptionHelper.cs"];
m0_139 [label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="447-448", cluster="lambda expression", file="FSharpOptionHelper.cs"];
m0_143 [label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="448-448", cluster="lambda expression", file="FSharpOptionHelper.cs"];
m0_147 [label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="448-448", cluster="lambda expression", file="FSharpOptionHelper.cs"];
m0_238 [label="Entry lambda expression", span="750-751", cluster="lambda expression", file="FSharpOptionHelper.cs"];
m0_240 [label="Exit lambda expression", span="750-751", cluster="lambda expression", file="FSharpOptionHelper.cs"];
m0_245 [label="Entry lambda expression", span="761-762", cluster="lambda expression", file="FSharpOptionHelper.cs"];
m0_247 [label="Exit lambda expression", span="761-762", cluster="lambda expression", file="FSharpOptionHelper.cs"];
m0_252 [label="Entry lambda expression", span="772-773", cluster="lambda expression", file="FSharpOptionHelper.cs"];
m0_254 [label="Exit lambda expression", span="772-773", cluster="lambda expression", file="FSharpOptionHelper.cs"];
m0_142 [label="Entry lambda expression", span="448-448", cluster="lambda expression", file="FSharpOptionHelper.cs"];
m0_144 [label="Exit lambda expression", span="448-448", cluster="lambda expression", file="FSharpOptionHelper.cs"];
m0_146 [label="Entry lambda expression", span="448-448", cluster="lambda expression", file="FSharpOptionHelper.cs"];
m0_148 [label="Exit lambda expression", span="448-448", cluster="lambda expression", file="FSharpOptionHelper.cs"];
m0_265 [label="x == expected", span="794-794", cluster="lambda expression", file="FSharpOptionHelper.cs"];
m0_264 [label="Entry lambda expression", span="794-794", cluster="lambda expression", file="FSharpOptionHelper.cs"];
m0_272 [label="x == expected", span="811-811", cluster="lambda expression", file="FSharpOptionHelper.cs"];
m0_271 [label="Entry lambda expression", span="811-811", cluster="lambda expression", file="FSharpOptionHelper.cs"];
m0_279 [label="x == expected", span="823-823", cluster="lambda expression", file="FSharpOptionHelper.cs"];
m0_278 [label="Entry lambda expression", span="823-823", cluster="lambda expression", file="FSharpOptionHelper.cs"];
m0_286 [label="x == expected", span="835-835", cluster="lambda expression", file="FSharpOptionHelper.cs"];
m0_285 [label="Entry lambda expression", span="835-835", cluster="lambda expression", file="FSharpOptionHelper.cs"];
m0_293 [label="x == expected", span="847-847", cluster="lambda expression", file="FSharpOptionHelper.cs"];
m0_292 [label="Entry lambda expression", span="847-847", cluster="lambda expression", file="FSharpOptionHelper.cs"];
m0_307 [label="x == expected", span="880-880", cluster="lambda expression", file="FSharpOptionHelper.cs"];
m0_306 [label="Entry lambda expression", span="880-880", cluster="lambda expression", file="FSharpOptionHelper.cs"];
m0_330 [label="x == expected", span="951-951", cluster="lambda expression", file="FSharpOptionHelper.cs"];
m0_266 [label="Exit lambda expression", span="794-794", cluster="lambda expression", file="FSharpOptionHelper.cs"];
m0_273 [label="Exit lambda expression", span="811-811", cluster="lambda expression", file="FSharpOptionHelper.cs"];
m0_280 [label="Exit lambda expression", span="823-823", cluster="lambda expression", file="FSharpOptionHelper.cs"];
m0_287 [label="Exit lambda expression", span="835-835", cluster="lambda expression", file="FSharpOptionHelper.cs"];
m0_294 [label="Exit lambda expression", span="847-847", cluster="lambda expression", file="FSharpOptionHelper.cs"];
m0_308 [label="Exit lambda expression", span="880-880", cluster="lambda expression", file="FSharpOptionHelper.cs"];
m0_331 [label="Exit lambda expression", span="951-951", cluster="lambda expression", file="FSharpOptionHelper.cs"];
m0_332 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.Immutable_Simple_Options)", span="956-956", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.Immutable_Simple_Options)", file="FSharpOptionHelper.cs"];
m0_333 [label="var result = InvokeBuildImmutable<Immutable_Simple_Options>(\r\n                arguments)", span="961-962", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.Immutable_Simple_Options)", file="FSharpOptionHelper.cs"];
m0_334 [label="expected.ShouldBeEquivalentTo(((Parsed<Immutable_Simple_Options>)result).Value)", span="965-965", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.Immutable_Simple_Options)", file="FSharpOptionHelper.cs"];
m0_335 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.Immutable_Simple_Options)", span="956-956", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.Immutable_Simple_Options)", file="FSharpOptionHelper.cs"];
m0_267 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", span="804-804", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="FSharpOptionHelper.cs"];
m0_268 [label="var result = InvokeBuild<Simple_Options>(\r\n                arguments)", span="807-808", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="FSharpOptionHelper.cs"];
m0_269 [label="((NotParsed<Simple_Options>)result).Errors.Should().HaveCount(x => x == expected)", span="811-811", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="FSharpOptionHelper.cs"];
m0_270 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", span="804-804", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="FSharpOptionHelper.cs"];
m0_299 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", span="871-871", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", file="FSharpOptionHelper.cs"];
m0_300 [label="var result = InvokeBuild<Options_With_Two_Option_Required_Set_To_True_And_Two_Sets>(\r\n                arguments)", span="874-875", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", file="FSharpOptionHelper.cs"];
m0_301 [label="type == ParserResultType.NotParsed", span="878-878", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", file="FSharpOptionHelper.cs"];
m0_302 [label="((NotParsed<Options_With_Two_Option_Required_Set_To_True_And_Two_Sets>)result).Errors.Should().HaveCount(x => x == expected)", span="880-880", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", file="FSharpOptionHelper.cs"];
m0_304 [label="result.Should().BeOfType<Parsed<Options_With_Two_Option_Required_Set_To_True_And_Two_Sets>>()", span="884-884", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", file="FSharpOptionHelper.cs"];
m0_303 [label="type == ParserResultType.Parsed", span="882-882", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", file="FSharpOptionHelper.cs"];
m0_305 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", span="871-871", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", file="FSharpOptionHelper.cs"];
m0_56 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="160-160", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="FSharpOptionHelper.cs"];
m0_57 [label="var result = InvokeBuild<Options_With_Sequence_And_Only_Min_Constraint>(\r\n                arguments)", span="165-166", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="FSharpOptionHelper.cs"];
m0_58 [label="((Parsed<Options_With_Sequence_And_Only_Min_Constraint>)result).Value.StringSequence.ShouldBeEquivalentTo(expected)", span="169-169", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="FSharpOptionHelper.cs"];
m0_59 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="160-160", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="FSharpOptionHelper.cs"];
m0_101 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="316-316", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="FSharpOptionHelper.cs"];
m0_103 [label="var result = InvokeBuild<Simple_Options_With_Enum>(\r\n                new[] { ''--colors'', ''Yellow'' })", span="322-323", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="FSharpOptionHelper.cs"];
m0_104 [label="((NotParsed<Simple_Options_With_Enum>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="326-326", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="FSharpOptionHelper.cs"];
m0_102 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="319-319", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="FSharpOptionHelper.cs"];
m0_105 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="316-316", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="FSharpOptionHelper.cs"];
m0_44 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="100-100", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="FSharpOptionHelper.cs"];
m0_45 [label="var result = InvokeBuild<Simple_Options_With_Double_Value>(\r\n                arguments)", span="105-106", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="FSharpOptionHelper.cs"];
m0_46 [label="((Parsed<Simple_Options_With_Double_Value>)result).Value.DoubleValue.ShouldBeEquivalentTo(expected)", span="109-109", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="FSharpOptionHelper.cs"];
m0_47 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="100-100", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="FSharpOptionHelper.cs"];
m0_281 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_with_long_options_generates_RepeatedOptionError(string[], int)", span="828-828", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_with_long_options_generates_RepeatedOptionError(string[], int)", file="FSharpOptionHelper.cs"];
m0_282 [label="var result = InvokeBuild<Simple_Options>(\r\n                arguments)", span="831-832", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_with_long_options_generates_RepeatedOptionError(string[], int)", file="FSharpOptionHelper.cs"];
m0_283 [label="((NotParsed<Simple_Options>)result).Errors.Should().HaveCount(x => x == expected)", span="835-835", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_with_long_options_generates_RepeatedOptionError(string[], int)", file="FSharpOptionHelper.cs"];
m0_284 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_with_long_options_generates_RepeatedOptionError(string[], int)", span="828-828", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_with_long_options_generates_RepeatedOptionError(string[], int)", file="FSharpOptionHelper.cs"];
m0_24 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.InvokeBuildImmutable<T>(string[])", span="47-47", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.InvokeBuildImmutable<T>(string[])", file="FSharpOptionHelper.cs"];
m0_25 [label="return InstanceBuilder.Build(\r\n                Maybe.Nothing<Func<T>>(),\r\n                (args, optionSpecs) => Tokenizer.ConfigureTokenizer(StringComparer.Ordinal, false, false)(args, optionSpecs),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                false,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>());", span="49-56", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.InvokeBuildImmutable<T>(string[])", color=green, community=0, file="FSharpOptionHelper.cs"];
m0_26 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.InvokeBuildImmutable<T>(string[])", span="47-47", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.InvokeBuildImmutable<T>(string[])", file="FSharpOptionHelper.cs"];
m0_91 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_ignore_case(string[], CommandLine.Tests.Fakes.Colors)", span="285-285", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_ignore_case(string[], CommandLine.Tests.Fakes.Colors)", file="FSharpOptionHelper.cs"];
m0_92 [label="var result = InvokeBuildEnumValuesCaseIgnore<Simple_Options_With_Enum>(\r\n                arguments)", span="290-291", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_ignore_case(string[], CommandLine.Tests.Fakes.Colors)", file="FSharpOptionHelper.cs"];
m0_93 [label="expected.ShouldBeEquivalentTo(((Parsed<Simple_Options_With_Enum>)result).Value.Colors)", span="294-294", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_ignore_case(string[], CommandLine.Tests.Fakes.Colors)", file="FSharpOptionHelper.cs"];
m0_94 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_ignore_case(string[], CommandLine.Tests.Fakes.Colors)", span="285-285", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_ignore_case(string[], CommandLine.Tests.Fakes.Colors)", file="FSharpOptionHelper.cs"];
m0_116 [label="Entry CommandLine.Tests.Fakes.Simple_Options_With_Values.Simple_Options_With_Values()", span="6-6", cluster="CommandLine.Tests.Fakes.Simple_Options_With_Values.Simple_Options_With_Values()", file="FSharpOptionHelper.cs"];
m0_341 [label="Entry CommandLine.Tests.Fakes.Options_With_Uri_And_SimpleType.Options_With_Uri_And_SimpleType()", span="23-23", cluster="CommandLine.Tests.Fakes.Options_With_Uri_And_SimpleType.Options_With_Uri_And_SimpleType()", file="FSharpOptionHelper.cs"];
m0_342 [label="Entry System.Uri.Uri(string)", span="0-0", cluster="System.Uri.Uri(string)", file="FSharpOptionHelper.cs"];
m0_198 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="613-613", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="FSharpOptionHelper.cs"];
m0_200 [label="var result = InvokeBuild<Options_With_Required_Set_To_True_For_Values>(\r\n                new string[] { })", span="619-620", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="FSharpOptionHelper.cs"];
m0_201 [label="((NotParsed<Options_With_Required_Set_To_True_For_Values>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="623-623", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="FSharpOptionHelper.cs"];
m0_199 [label="var expectedResult = new[] { new MissingRequiredOptionError(NameInfo.EmptyName) }", span="616-616", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="FSharpOptionHelper.cs"];
m0_202 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="613-613", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="FSharpOptionHelper.cs"];
m0_173 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="532-532", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="FSharpOptionHelper.cs"];
m0_175 [label="var result = InvokeBuild<Simple_Options>(\r\n                new[] { ''-i'', ''10'' })", span="538-539", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="FSharpOptionHelper.cs"];
m0_176 [label="((NotParsed<Simple_Options>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="542-542", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="FSharpOptionHelper.cs"];
m0_174 [label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="535-535", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="FSharpOptionHelper.cs"];
m0_177 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="532-532", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="FSharpOptionHelper.cs"];
m0_226 [label="Entry Unk.get_IsSome", span="", cluster="Unk.get_IsSome", file="FSharpOptionHelper.cs"];
m0_36 [label="Entry CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="163-163", cluster="CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="FSharpOptionHelper.cs"];
m0_149 [label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="18-18", cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="FSharpOptionHelper.cs"];
m0_31 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="60-60", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="FSharpOptionHelper.cs"];
m0_32 [label="var expectedResult = new NotParsed<Simple_Options>(\r\n                TypeInfo.Create(typeof(Simple_Options)), new Error[] { new HelpRequestedError() })", span="63-64", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", color=green, community=0, file="FSharpOptionHelper.cs"];
m0_33 [label="var result = InvokeBuild<Simple_Options>(\r\n                new[] { ''--help'' })", span="67-68", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="FSharpOptionHelper.cs"];
m0_34 [label="result.ShouldBeEquivalentTo(expectedResult)", span="71-71", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="FSharpOptionHelper.cs"];
m0_35 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="60-60", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="FSharpOptionHelper.cs"];
m0_168 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="516-516", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="FSharpOptionHelper.cs"];
m0_170 [label="var result = InvokeBuild<Options_With_Required_Set_To_True>(\r\n                new string[] { })", span="522-523", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="FSharpOptionHelper.cs"];
m0_171 [label="((NotParsed<Options_With_Required_Set_To_True>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="526-526", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="FSharpOptionHelper.cs"];
m0_169 [label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="519-519", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="FSharpOptionHelper.cs"];
m0_172 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="516-516", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="FSharpOptionHelper.cs"];
m0_162 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="498-498", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="FSharpOptionHelper.cs"];
m0_164 [label="var result = InvokeBuild<Options_With_Required_Set_To_True_Within_Same_Set>(\r\n                new string[] { })", span="506-507", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="FSharpOptionHelper.cs"];
m0_165 [label="((NotParsed<Options_With_Required_Set_To_True_Within_Same_Set>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="510-510", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="FSharpOptionHelper.cs"];
m0_163 [label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="500-504", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="FSharpOptionHelper.cs"];
m0_166 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="498-498", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="FSharpOptionHelper.cs"];
m0_106 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="332-332", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="FSharpOptionHelper.cs"];
m0_108 [label="var result = InvokeBuild<Simple_Options_With_Enum>(\r\n                new[] { ''--colors'', ''RED'' })", span="338-339", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="FSharpOptionHelper.cs"];
m0_109 [label="((NotParsed<Simple_Options_With_Enum>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="342-342", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="FSharpOptionHelper.cs"];
m0_107 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="335-335", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="FSharpOptionHelper.cs"];
m0_110 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="332-332", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="FSharpOptionHelper.cs"];
m0_69 [label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="305-305", cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="FSharpOptionHelper.cs"];
m0_77 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="226-226", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="FSharpOptionHelper.cs"];
m0_79 [label="var result = InvokeBuild<Options_With_Sequence_And_Only_Max_Constraint>(\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' })", span="232-233", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="FSharpOptionHelper.cs"];
m0_80 [label="((NotParsed<Options_With_Sequence_And_Only_Max_Constraint>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="236-236", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="FSharpOptionHelper.cs"];
m0_78 [label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="229-229", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="FSharpOptionHelper.cs"];
m0_81 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="226-226", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="FSharpOptionHelper.cs"];
m0_64 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="194-194", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="FSharpOptionHelper.cs"];
m0_66 [label="var result = InvokeBuild<Options_With_Sequence_And_Only_Min_Constraint>(\r\n                new[] { ''-s'' })", span="200-201", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="FSharpOptionHelper.cs"];
m0_67 [label="((NotParsed<Options_With_Sequence_And_Only_Min_Constraint>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="204-204", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="FSharpOptionHelper.cs"];
m0_65 [label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="197-197", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="FSharpOptionHelper.cs"];
m0_68 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="194-194", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="FSharpOptionHelper.cs"];
m0_111 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="348-348", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="FSharpOptionHelper.cs"];
m0_113 [label="var result = InvokeBuild<Simple_Options_With_Values>(\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' })", span="360-361", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="FSharpOptionHelper.cs"];
m0_114 [label="expectedResult.ShouldBeEquivalentTo(((Parsed<Simple_Options_With_Values>)result).Value)", span="364-364", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="FSharpOptionHelper.cs"];
m0_112 [label="var expectedResult = new Simple_Options_With_Values\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="351-357", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="FSharpOptionHelper.cs"];
m0_115 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="348-348", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="FSharpOptionHelper.cs"];
m0_263 [label="Entry Unk.HaveCount", span="", cluster="Unk.HaveCount", file="FSharpOptionHelper.cs"];
m0_15 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.InvokeBuildEnumValuesCaseIgnore<T>(string[])", span="34-34", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.InvokeBuildEnumValuesCaseIgnore<T>(string[])", file="FSharpOptionHelper.cs"];
m0_16 [label="return InstanceBuilder.Build(\r\n                Maybe.Just<Func<T>>(() => new T()),\r\n                (args, optionSpecs) => Tokenizer.ConfigureTokenizer(StringComparer.Ordinal, false, false)(args, optionSpecs),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                true,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>());", span="37-44", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.InvokeBuildEnumValuesCaseIgnore<T>(string[])", color=green, community=0, file="FSharpOptionHelper.cs"];
m0_17 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.InvokeBuildEnumValuesCaseIgnore<T>(string[])", span="34-34", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.InvokeBuildEnumValuesCaseIgnore<T>(string[])", file="FSharpOptionHelper.cs"];
m0_313 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.Options_With_Scalar_Value_And_Adjacent_SequenceString)", span="906-906", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.Options_With_Scalar_Value_And_Adjacent_SequenceString)", file="FSharpOptionHelper.cs"];
m0_314 [label="var result = InvokeBuild<Options_With_Scalar_Value_And_Adjacent_SequenceString>(\r\n                arguments)", span="911-912", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.Options_With_Scalar_Value_And_Adjacent_SequenceString)", file="FSharpOptionHelper.cs"];
m0_315 [label="expected.ShouldBeEquivalentTo(((Parsed<Options_With_Scalar_Value_And_Adjacent_SequenceString>)result).Value)", span="915-915", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.Options_With_Scalar_Value_And_Adjacent_SequenceString)", file="FSharpOptionHelper.cs"];
m0_316 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.Options_With_Scalar_Value_And_Adjacent_SequenceString)", span="906-906", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.Options_With_Scalar_Value_And_Adjacent_SequenceString)", file="FSharpOptionHelper.cs"];
m0_70 [label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20", cluster="CommandLine.NameInfo.NameInfo(string, string)", file="FSharpOptionHelper.cs"];
m0_344 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_with_dashes_except_in_beginning(string[], string)", span="995-995", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_with_dashes_except_in_beginning(string[], string)", file="FSharpOptionHelper.cs"];
m0_345 [label="var result = InvokeBuild<Simple_Options>(\r\n                arguments)", span="1000-1001", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_with_dashes_except_in_beginning(string[], string)", file="FSharpOptionHelper.cs"];
m0_346 [label="expected.ShouldBeEquivalentTo(((Parsed<Simple_Options>)result).Value.StringValue)", span="1004-1004", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_with_dashes_except_in_beginning(string[], string)", file="FSharpOptionHelper.cs"];
m0_347 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_with_dashes_except_in_beginning(string[], string)", span="995-995", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_with_dashes_except_in_beginning(string[], string)", file="FSharpOptionHelper.cs"];
m0_40 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="80-80", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="FSharpOptionHelper.cs"];
m0_41 [label="var result = InvokeBuild<Simple_Options>(\r\n                arguments)", span="85-86", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="FSharpOptionHelper.cs"];
m0_42 [label="((Parsed<Simple_Options>)result).Value.LongValue.ShouldBeEquivalentTo(expected)", span="89-89", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="FSharpOptionHelper.cs"];
m0_43 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="80-80", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="FSharpOptionHelper.cs"];
m0_322 [label="Entry CommandLine.Tests.Fakes.Simple_Options.Simple_Options()", span="6-6", cluster="CommandLine.Tests.Fakes.Simple_Options.Simple_Options()", file="FSharpOptionHelper.cs"];
m0_14 [label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0", cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", file="FSharpOptionHelper.cs"];
m0_227 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="726-726", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="FSharpOptionHelper.cs"];
m0_228 [label="var result = InvokeBuild<Options_With_FSharpOption>(\r\n                arguments)", span="731-732", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="FSharpOptionHelper.cs"];
m0_230 [label="expectedValue.ShouldBeEquivalentTo(((Parsed<Options_With_FSharpOption>)result).Value.Offset.Value)", span="737-737", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="FSharpOptionHelper.cs"];
m0_231 [label="expectedSome.ShouldBeEquivalentTo(FSharpOption<int>.get_IsSome(((Parsed<Options_With_FSharpOption>)result).Value.Offset))", span="739-739", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="FSharpOptionHelper.cs"];
m0_229 [label="((Parsed<Options_With_FSharpOption>)result).Value.Offset != null", span="735-735", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="FSharpOptionHelper.cs"];
m0_232 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="726-726", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="FSharpOptionHelper.cs"];
m0_317 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", span="921-921", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="FSharpOptionHelper.cs"];
m0_319 [label="var result = InvokeBuild<Simple_Options>(\r\n                new[] { ''--stringvalue=strval0'', ''-i'', ''9'', ''7'', ''8'', ''-x'', ''9876543210'' })", span="927-928", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="FSharpOptionHelper.cs"];
m0_320 [label="expectedResult.ShouldBeEquivalentTo(((Parsed<Simple_Options>)result).Value)", span="931-931", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="FSharpOptionHelper.cs"];
m0_318 [label="var expectedResult = new Simple_Options { StringValue=''strval0'', IntSequence=new[] { 9, 7, 8 }, BoolValue = true,  LongValue = 9876543210L }", span="924-924", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="FSharpOptionHelper.cs"];
m0_321 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", span="921-921", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="FSharpOptionHelper.cs"];
m0_155 [label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo, string)", span="340-340", cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo, string)", file="FSharpOptionHelper.cs"];
m0_141 [label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", span="45-45", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", file="FSharpOptionHelper.cs"];
m0_125 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="413-413", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="FSharpOptionHelper.cs"];
m0_126 [label="var result = InvokeBuild<Options_With_Sequence_Having_Separator_Set>(\r\n                arguments)", span="418-419", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="FSharpOptionHelper.cs"];
m0_127 [label="expected.ShouldBeEquivalentTo(((Parsed<Options_With_Sequence_Having_Separator_Set>)result).Value.StringSequence)", span="422-422", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="FSharpOptionHelper.cs"];
m0_128 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="413-413", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="FSharpOptionHelper.cs"];
m0_167 [label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="327-327", cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="FSharpOptionHelper.cs"];
m0_212 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="668-668", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="FSharpOptionHelper.cs"];
m0_213 [label="var result = InvokeBuild<Options_With_Nullables>(\r\n                arguments)", span="673-674", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="FSharpOptionHelper.cs"];
m0_214 [label="expected.ShouldBeEquivalentTo(((Parsed<Options_With_Nullables>)result).Value.NullableInt)", span="677-677", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="FSharpOptionHelper.cs"];
m0_215 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="668-668", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="FSharpOptionHelper.cs"];
m0_178 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="548-548", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="FSharpOptionHelper.cs"];
m0_180 [label="var result = InvokeBuild<Simple_Options>(\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' })", span="554-555", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="FSharpOptionHelper.cs"];
m0_181 [label="((NotParsed<Simple_Options>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="558-558", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="FSharpOptionHelper.cs"];
m0_179 [label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="551-551", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="FSharpOptionHelper.cs"];
m0_182 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="548-548", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="FSharpOptionHelper.cs"];
m0_156 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="482-482", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="FSharpOptionHelper.cs"];
m0_158 [label="var result = InvokeBuild<Options_With_Required_Set_To_True_Within_Same_Set>(\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' })", span="489-490", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="FSharpOptionHelper.cs"];
m0_159 [label="expectedResult.ShouldBeEquivalentTo(((Parsed<Options_With_Required_Set_To_True_Within_Same_Set>)result).Value)", span="493-493", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="FSharpOptionHelper.cs"];
m0_157 [label="var expectedResult = new Options_With_Required_Set_To_True_Within_Same_Set {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="484-487", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="FSharpOptionHelper.cs"];
m0_160 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="482-482", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="FSharpOptionHelper.cs"];
m0_13 [label="Entry CommandLine.Core.Tokenizer.ConfigureTokenizer(System.StringComparer, bool, bool)", span="110-110", cluster="CommandLine.Core.Tokenizer.ConfigureTokenizer(System.StringComparer, bool, bool)", file="FSharpOptionHelper.cs"];
m0_207 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="648-648", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="FSharpOptionHelper.cs"];
m0_209 [label="var result = InvokeBuild<Options_With_Sequence_Having_Both_Min_And_Max_Equal>(\r\n                new[] { ''one'', ''two'', ''this-is-too-much'' })", span="654-655", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="FSharpOptionHelper.cs"];
m0_210 [label="((NotParsed<Options_With_Sequence_Having_Both_Min_And_Max_Equal>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="658-658", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="FSharpOptionHelper.cs"];
m0_208 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="651-651", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="FSharpOptionHelper.cs"];
m0_211 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="648-648", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="FSharpOptionHelper.cs"];
m0_87 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="264-264", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="FSharpOptionHelper.cs"];
m0_88 [label="var result = InvokeBuild<Simple_Options_With_Enum>(\r\n                arguments)", span="269-270", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="FSharpOptionHelper.cs"];
m0_89 [label="expected.ShouldBeEquivalentTo(((Parsed<Simple_Options_With_Enum>)result).Value.Colors)", span="273-273", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="FSharpOptionHelper.cs"];
m0_90 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="264-264", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="FSharpOptionHelper.cs"];
m0_262 [label="Entry Unk.Should", span="", cluster="Unk.Should", file="FSharpOptionHelper.cs"];
m0_343 [label="Entry CommandLine.Tests.Fakes.MySimpleType.MySimpleType(string)", span="12-12", cluster="CommandLine.Tests.Fakes.MySimpleType.MySimpleType(string)", file="FSharpOptionHelper.cs"];
m0_203 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="633-633", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="FSharpOptionHelper.cs"];
m0_204 [label="var result = InvokeBuild<Simple_Options>(\r\n                arguments)", span="638-639", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="FSharpOptionHelper.cs"];
m0_205 [label="expected.ShouldBeEquivalentTo(((Parsed<Simple_Options>)result).Value.StringValue)", span="642-642", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="FSharpOptionHelper.cs"];
m0_206 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="633-633", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="FSharpOptionHelper.cs"];
m0_100 [label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="360-360", cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="FSharpOptionHelper.cs"];
m0_336 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_type_with_single_string_ctor_builds_up_correct_instance()", span="971-971", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_type_with_single_string_ctor_builds_up_correct_instance()", file="FSharpOptionHelper.cs"];
m0_338 [label="var result = InvokeBuild<Options_With_Uri_And_SimpleType>(\r\n                new[] { ''--endpoint=http://localhost/test/'', ''custom-value'' })", span="977-978", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_type_with_single_string_ctor_builds_up_correct_instance()", file="FSharpOptionHelper.cs"];
m0_339 [label="expectedResult.ShouldBeEquivalentTo(((Parsed<Options_With_Uri_And_SimpleType>)result).Value)", span="981-981", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_type_with_single_string_ctor_builds_up_correct_instance()", file="FSharpOptionHelper.cs"];
m0_337 [label="var expectedResult = new Options_With_Uri_And_SimpleType { EndPoint = new Uri(''http://localhost/test/''), MyValue = new MySimpleType(''custom-value'') }", span="974-974", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_type_with_single_string_ctor_builds_up_correct_instance()", file="FSharpOptionHelper.cs"];
m0_340 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_type_with_single_string_ctor_builds_up_correct_instance()", span="971-971", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_type_with_single_string_ctor_builds_up_correct_instance()", file="FSharpOptionHelper.cs"];
m0_328 [label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0", cluster="System.Collections.IEnumerable.OfType<TResult>()", file="FSharpOptionHelper.cs"];
m0_241 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", span="758-758", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="FSharpOptionHelper.cs"];
m0_243 [label="Assert.Throws<InvalidOperationException>(test)", span="765-765", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="FSharpOptionHelper.cs"];
m0_242 [label="Action test = () => InvokeBuild<Options_With_Max_Set_To_Zero>(\r\n                new string[] { })", span="761-762", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="FSharpOptionHelper.cs"];
m0_244 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", span="758-758", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="FSharpOptionHelper.cs"];
m0_348 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_Guid(string[], CommandLine.Tests.Fakes.Options_With_Guid)", span="1011-1011", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_Guid(string[], CommandLine.Tests.Fakes.Options_With_Guid)", file="FSharpOptionHelper.cs"];
m0_349 [label="var result = InvokeBuild<Options_With_Guid>(\r\n                arguments)", span="1016-1017", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_Guid(string[], CommandLine.Tests.Fakes.Options_With_Guid)", file="FSharpOptionHelper.cs"];
m0_350 [label="expected.ShouldBeEquivalentTo(((Parsed<Options_With_Guid>)result).Value)", span="1020-1020", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_Guid(string[], CommandLine.Tests.Fakes.Options_With_Guid)", file="FSharpOptionHelper.cs"];
m0_351 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_Guid(string[], CommandLine.Tests.Fakes.Options_With_Guid)", span="1011-1011", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_Guid(string[], CommandLine.Tests.Fakes.Options_With_Guid)", file="FSharpOptionHelper.cs"];
m0_150 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="462-462", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="FSharpOptionHelper.cs"];
m0_152 [label="var result = InvokeBuild<Options_With_Two_Sets>(\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' })", span="472-473", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="FSharpOptionHelper.cs"];
m0_153 [label="((NotParsed<Options_With_Two_Sets>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="476-476", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="FSharpOptionHelper.cs"];
m0_151 [label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl''), string.Empty),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''), string.Empty)\r\n                }", span="465-469", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="FSharpOptionHelper.cs"];
m0_154 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="462-462", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="FSharpOptionHelper.cs"];
m0_352 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span="", file="FSharpOptionHelper.cs"];
m0_353 [label=int, span="", file="FSharpOptionHelper.cs"];
m0_354 [label=int, span="", file="FSharpOptionHelper.cs"];
m0_355 [label=int, span="", file="FSharpOptionHelper.cs"];
m0_356 [label=int, span="", file="FSharpOptionHelper.cs"];
m0_357 [label=int, span="", file="FSharpOptionHelper.cs"];
m0_358 [label=int, span="", file="FSharpOptionHelper.cs"];
m0_359 [label=int, span="", file="FSharpOptionHelper.cs"];
m2_0 [label="Entry CommandLine.Infrastructure.StringBuilderExtensions.AppendWhen(System.Text.StringBuilder, bool, params string[])", span="9-9", cluster="CommandLine.Infrastructure.StringBuilderExtensions.AppendWhen(System.Text.StringBuilder, bool, params string[])", file="StringBuilderExtensions.cs"];
m2_1 [label=condition, span="11-11", cluster="CommandLine.Infrastructure.StringBuilderExtensions.AppendWhen(System.Text.StringBuilder, bool, params string[])", file="StringBuilderExtensions.cs"];
m2_2 [label=values, span="13-13", cluster="CommandLine.Infrastructure.StringBuilderExtensions.AppendWhen(System.Text.StringBuilder, bool, params string[])", file="StringBuilderExtensions.cs"];
m2_3 [label="builder.Append(value)", span="15-15", cluster="CommandLine.Infrastructure.StringBuilderExtensions.AppendWhen(System.Text.StringBuilder, bool, params string[])", file="StringBuilderExtensions.cs"];
m2_4 [label="return builder;", span="18-18", cluster="CommandLine.Infrastructure.StringBuilderExtensions.AppendWhen(System.Text.StringBuilder, bool, params string[])", file="StringBuilderExtensions.cs"];
m2_5 [label="Exit CommandLine.Infrastructure.StringBuilderExtensions.AppendWhen(System.Text.StringBuilder, bool, params string[])", span="9-9", cluster="CommandLine.Infrastructure.StringBuilderExtensions.AppendWhen(System.Text.StringBuilder, bool, params string[])", file="StringBuilderExtensions.cs"];
m2_19 [label="Entry System.Text.StringBuilder.AppendFormat(string, params object[])", span="0-0", cluster="System.Text.StringBuilder.AppendFormat(string, params object[])", file="StringBuilderExtensions.cs"];
m2_47 [label="Entry CommandLine.Infrastructure.StringBuilderExtensions.TrimEndIfMatch(System.Text.StringBuilder, char)", span="87-87", cluster="CommandLine.Infrastructure.StringBuilderExtensions.TrimEndIfMatch(System.Text.StringBuilder, char)", file="StringBuilderExtensions.cs"];
m2_48 [label="builder.Length > 0", span="89-89", cluster="CommandLine.Infrastructure.StringBuilderExtensions.TrimEndIfMatch(System.Text.StringBuilder, char)", file="StringBuilderExtensions.cs"];
m2_49 [label="builder[builder.Length - 1] == c", span="90-90", cluster="CommandLine.Infrastructure.StringBuilderExtensions.TrimEndIfMatch(System.Text.StringBuilder, char)", file="StringBuilderExtensions.cs"];
m2_50 [label="builder.Remove(builder.Length - 1, 1)", span="91-91", cluster="CommandLine.Infrastructure.StringBuilderExtensions.TrimEndIfMatch(System.Text.StringBuilder, char)", file="StringBuilderExtensions.cs"];
m2_51 [label="return builder;", span="92-92", cluster="CommandLine.Infrastructure.StringBuilderExtensions.TrimEndIfMatch(System.Text.StringBuilder, char)", file="StringBuilderExtensions.cs"];
m2_52 [label="Exit CommandLine.Infrastructure.StringBuilderExtensions.TrimEndIfMatch(System.Text.StringBuilder, char)", span="87-87", cluster="CommandLine.Infrastructure.StringBuilderExtensions.TrimEndIfMatch(System.Text.StringBuilder, char)", file="StringBuilderExtensions.cs"];
m2_14 [label="Entry CommandLine.Infrastructure.StringBuilderExtensions.AppendFormatWhen(System.Text.StringBuilder, bool, string, params object[])", span="33-33", cluster="CommandLine.Infrastructure.StringBuilderExtensions.AppendFormatWhen(System.Text.StringBuilder, bool, string, params object[])", file="StringBuilderExtensions.cs"];
m2_15 [label=condition, span="35-35", cluster="CommandLine.Infrastructure.StringBuilderExtensions.AppendFormatWhen(System.Text.StringBuilder, bool, string, params object[])", file="StringBuilderExtensions.cs"];
m2_16 [label="builder.AppendFormat(format, args)", span="37-37", cluster="CommandLine.Infrastructure.StringBuilderExtensions.AppendFormatWhen(System.Text.StringBuilder, bool, string, params object[])", file="StringBuilderExtensions.cs"];
m2_17 [label="return builder;", span="39-39", cluster="CommandLine.Infrastructure.StringBuilderExtensions.AppendFormatWhen(System.Text.StringBuilder, bool, string, params object[])", file="StringBuilderExtensions.cs"];
m2_18 [label="Exit CommandLine.Infrastructure.StringBuilderExtensions.AppendFormatWhen(System.Text.StringBuilder, bool, string, params object[])", span="33-33", cluster="CommandLine.Infrastructure.StringBuilderExtensions.AppendFormatWhen(System.Text.StringBuilder, bool, string, params object[])", file="StringBuilderExtensions.cs"];
m2_13 [label="Entry System.Text.StringBuilder.Append(char)", span="0-0", cluster="System.Text.StringBuilder.Append(char)", file="StringBuilderExtensions.cs"];
m2_20 [label="Entry CommandLine.Infrastructure.StringBuilderExtensions.AppendIf(System.Text.StringBuilder, bool, string, string)", span="42-42", cluster="CommandLine.Infrastructure.StringBuilderExtensions.AppendIf(System.Text.StringBuilder, bool, string, string)", file="StringBuilderExtensions.cs"];
m2_21 [label="return condition ? builder.Append(ifTrue) : builder.Append(ifFalse);", span="44-44", cluster="CommandLine.Infrastructure.StringBuilderExtensions.AppendIf(System.Text.StringBuilder, bool, string, string)", file="StringBuilderExtensions.cs"];
m2_22 [label="Exit CommandLine.Infrastructure.StringBuilderExtensions.AppendIf(System.Text.StringBuilder, bool, string, string)", span="42-42", cluster="CommandLine.Infrastructure.StringBuilderExtensions.AppendIf(System.Text.StringBuilder, bool, string, string)", file="StringBuilderExtensions.cs"];
m2_7 [label="Entry CommandLine.Infrastructure.StringBuilderExtensions.AppendWhen(System.Text.StringBuilder, bool, params char[])", span="21-21", cluster="CommandLine.Infrastructure.StringBuilderExtensions.AppendWhen(System.Text.StringBuilder, bool, params char[])", file="StringBuilderExtensions.cs"];
m2_8 [label=condition, span="23-23", cluster="CommandLine.Infrastructure.StringBuilderExtensions.AppendWhen(System.Text.StringBuilder, bool, params char[])", file="StringBuilderExtensions.cs"];
m2_9 [label=values, span="25-25", cluster="CommandLine.Infrastructure.StringBuilderExtensions.AppendWhen(System.Text.StringBuilder, bool, params char[])", file="StringBuilderExtensions.cs"];
m2_10 [label="builder.Append(value)", span="27-27", cluster="CommandLine.Infrastructure.StringBuilderExtensions.AppendWhen(System.Text.StringBuilder, bool, params char[])", file="StringBuilderExtensions.cs"];
m2_11 [label="return builder;", span="30-30", cluster="CommandLine.Infrastructure.StringBuilderExtensions.AppendWhen(System.Text.StringBuilder, bool, params char[])", file="StringBuilderExtensions.cs"];
m2_12 [label="Exit CommandLine.Infrastructure.StringBuilderExtensions.AppendWhen(System.Text.StringBuilder, bool, params char[])", span="21-21", cluster="CommandLine.Infrastructure.StringBuilderExtensions.AppendWhen(System.Text.StringBuilder, bool, params char[])", file="StringBuilderExtensions.cs"];
m2_36 [label="Entry CommandLine.Infrastructure.StringBuilderExtensions.SafeToString(System.Text.StringBuilder)", span="71-71", cluster="CommandLine.Infrastructure.StringBuilderExtensions.SafeToString(System.Text.StringBuilder)", file="StringBuilderExtensions.cs"];
m2_37 [label="return builder == null ? string.Empty : builder.ToString();", span="73-73", cluster="CommandLine.Infrastructure.StringBuilderExtensions.SafeToString(System.Text.StringBuilder)", file="StringBuilderExtensions.cs"];
m2_38 [label="Exit CommandLine.Infrastructure.StringBuilderExtensions.SafeToString(System.Text.StringBuilder)", span="71-71", cluster="CommandLine.Infrastructure.StringBuilderExtensions.SafeToString(System.Text.StringBuilder)", file="StringBuilderExtensions.cs"];
m2_46 [label="Entry System.Text.StringBuilder.Remove(int, int)", span="0-0", cluster="System.Text.StringBuilder.Remove(int, int)", file="StringBuilderExtensions.cs"];
m2_30 [label="Entry CommandLine.Infrastructure.StringBuilderExtensions.AppendIfNotEmpty(System.Text.StringBuilder, params string[])", span="59-59", cluster="CommandLine.Infrastructure.StringBuilderExtensions.AppendIfNotEmpty(System.Text.StringBuilder, params string[])", file="StringBuilderExtensions.cs"];
m2_31 [label=values, span="61-61", cluster="CommandLine.Infrastructure.StringBuilderExtensions.AppendIfNotEmpty(System.Text.StringBuilder, params string[])", file="StringBuilderExtensions.cs"];
m2_33 [label="builder.Append(value)", span="65-65", cluster="CommandLine.Infrastructure.StringBuilderExtensions.AppendIfNotEmpty(System.Text.StringBuilder, params string[])", file="StringBuilderExtensions.cs"];
m2_34 [label="return builder;", span="68-68", cluster="CommandLine.Infrastructure.StringBuilderExtensions.AppendIfNotEmpty(System.Text.StringBuilder, params string[])", file="StringBuilderExtensions.cs"];
m2_32 [label="value.Length > 0", span="63-63", cluster="CommandLine.Infrastructure.StringBuilderExtensions.AppendIfNotEmpty(System.Text.StringBuilder, params string[])", file="StringBuilderExtensions.cs"];
m2_35 [label="Exit CommandLine.Infrastructure.StringBuilderExtensions.AppendIfNotEmpty(System.Text.StringBuilder, params string[])", span="59-59", cluster="CommandLine.Infrastructure.StringBuilderExtensions.AppendIfNotEmpty(System.Text.StringBuilder, params string[])", file="StringBuilderExtensions.cs"];
m2_40 [label="Entry CommandLine.Infrastructure.StringBuilderExtensions.SafeLength(System.Text.StringBuilder)", span="76-76", cluster="CommandLine.Infrastructure.StringBuilderExtensions.SafeLength(System.Text.StringBuilder)", file="StringBuilderExtensions.cs"];
m2_41 [label="return builder == null ? 0 : builder.Length;", span="78-78", cluster="CommandLine.Infrastructure.StringBuilderExtensions.SafeLength(System.Text.StringBuilder)", file="StringBuilderExtensions.cs"];
m2_42 [label="Exit CommandLine.Infrastructure.StringBuilderExtensions.SafeLength(System.Text.StringBuilder)", span="76-76", cluster="CommandLine.Infrastructure.StringBuilderExtensions.SafeLength(System.Text.StringBuilder)", file="StringBuilderExtensions.cs"];
m2_43 [label="Entry CommandLine.Infrastructure.StringBuilderExtensions.TrimEnd(System.Text.StringBuilder, char)", span="81-81", cluster="CommandLine.Infrastructure.StringBuilderExtensions.TrimEnd(System.Text.StringBuilder, char)", file="StringBuilderExtensions.cs"];
m2_44 [label="return builder.Length > 0\r\n                ? builder.Remove(builder.Length - 1, 1) : builder;", span="83-84", cluster="CommandLine.Infrastructure.StringBuilderExtensions.TrimEnd(System.Text.StringBuilder, char)", file="StringBuilderExtensions.cs"];
m2_45 [label="Exit CommandLine.Infrastructure.StringBuilderExtensions.TrimEnd(System.Text.StringBuilder, char)", span="81-81", cluster="CommandLine.Infrastructure.StringBuilderExtensions.TrimEnd(System.Text.StringBuilder, char)", file="StringBuilderExtensions.cs"];
m2_23 [label="Entry CommandLine.Infrastructure.StringBuilderExtensions.BimapIf(System.Text.StringBuilder, bool, System.Func<System.Text.StringBuilder, System.Text.StringBuilder>, System.Func<System.Text.StringBuilder, System.Text.StringBuilder>)", span="47-47", cluster="CommandLine.Infrastructure.StringBuilderExtensions.BimapIf(System.Text.StringBuilder, bool, System.Func<System.Text.StringBuilder, System.Text.StringBuilder>, System.Func<System.Text.StringBuilder, System.Text.StringBuilder>)", file="StringBuilderExtensions.cs"];
m2_24 [label="return condition ? ifTrue(builder) : ifFalse(builder);", span="50-50", cluster="CommandLine.Infrastructure.StringBuilderExtensions.BimapIf(System.Text.StringBuilder, bool, System.Func<System.Text.StringBuilder, System.Text.StringBuilder>, System.Func<System.Text.StringBuilder, System.Text.StringBuilder>)", file="StringBuilderExtensions.cs"];
m2_25 [label="Exit CommandLine.Infrastructure.StringBuilderExtensions.BimapIf(System.Text.StringBuilder, bool, System.Func<System.Text.StringBuilder, System.Text.StringBuilder>, System.Func<System.Text.StringBuilder, System.Text.StringBuilder>)", span="47-47", cluster="CommandLine.Infrastructure.StringBuilderExtensions.BimapIf(System.Text.StringBuilder, bool, System.Func<System.Text.StringBuilder, System.Text.StringBuilder>, System.Func<System.Text.StringBuilder, System.Text.StringBuilder>)", file="StringBuilderExtensions.cs"];
m2_6 [label="Entry System.Text.StringBuilder.Append(string)", span="0-0", cluster="System.Text.StringBuilder.Append(string)", file="StringBuilderExtensions.cs"];
m2_39 [label="Entry System.Text.StringBuilder.ToString()", span="0-0", cluster="System.Text.StringBuilder.ToString()", file="StringBuilderExtensions.cs"];
m2_27 [label="Entry CommandLine.Infrastructure.StringBuilderExtensions.MapIf(System.Text.StringBuilder, bool, System.Func<System.Text.StringBuilder, System.Text.StringBuilder>)", span="53-53", cluster="CommandLine.Infrastructure.StringBuilderExtensions.MapIf(System.Text.StringBuilder, bool, System.Func<System.Text.StringBuilder, System.Text.StringBuilder>)", file="StringBuilderExtensions.cs"];
m2_28 [label="return condition ? ifTrue(builder) : builder;", span="56-56", cluster="CommandLine.Infrastructure.StringBuilderExtensions.MapIf(System.Text.StringBuilder, bool, System.Func<System.Text.StringBuilder, System.Text.StringBuilder>)", file="StringBuilderExtensions.cs"];
m2_29 [label="Exit CommandLine.Infrastructure.StringBuilderExtensions.MapIf(System.Text.StringBuilder, bool, System.Func<System.Text.StringBuilder, System.Text.StringBuilder>)", span="53-53", cluster="CommandLine.Infrastructure.StringBuilderExtensions.MapIf(System.Text.StringBuilder, bool, System.Func<System.Text.StringBuilder, System.Text.StringBuilder>)", file="StringBuilderExtensions.cs"];
m2_26 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)", file="StringBuilderExtensions.cs"];
m3_58 [label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="13-13", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="UnParserExtensions.cs"];
m3_50 [label="Entry Unk.ThrowingValidate", span="", cluster="Unk.ThrowingValidate", file="UnParserExtensions.cs"];
m3_68 [label="Entry T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="58-58", cluster="T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", file="UnParserExtensions.cs"];
m3_80 [label="Entry NotParsed<T>.cstr", span="", cluster="NotParsed<T>.cstr", file="UnParserExtensions.cs"];
m3_113 [label="Entry string.MatchName(string, string, System.StringComparer)", span="8-8", cluster="string.MatchName(string, string, System.StringComparer)", file="UnParserExtensions.cs"];
m3_48 [label="Entry CSharpx.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", span="126-126", cluster="CSharpx.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", file="UnParserExtensions.cs"];
m3_55 [label="Entry CommandLine.NotParsed<T>.NotParsed(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="142-142", cluster="CommandLine.NotParsed<T>.NotParsed(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="UnParserExtensions.cs"];
m3_65 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="UnParserExtensions.cs"];
m3_74 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", file="UnParserExtensions.cs"];
m3_106 [label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="13-13", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="UnParserExtensions.cs"];
m3_124 [label="Entry CSharpx.Maybe<T>.FromJust<T>(System.Exception)", span="160-160", cluster="CSharpx.Maybe<T>.FromJust<T>(System.Exception)", file="UnParserExtensions.cs"];
m3_95 [label="Entry Unk.>", span="", cluster="Unk.>", file="UnParserExtensions.cs"];
m3_79 [label="Entry Unk.Any", span="", cluster="Unk.Any", file="UnParserExtensions.cs"];
m3_18 [label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16", cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="UnParserExtensions.cs"];
m3_61 [label="Entry CommandLine.Core.Specification.IsValue()", span="15-15", cluster="CommandLine.Core.Specification.IsValue()", file="UnParserExtensions.cs"];
m3_73 [label="Entry System.Type.CreateDefaultForImmutable()", span="125-125", cluster="System.Type.CreateDefaultForImmutable()", file="UnParserExtensions.cs"];
m3_71 [label="Entry System.Reflection.MethodBase.GetParameters()", span="0-0", cluster="System.Reflection.MethodBase.GetParameters()", file="UnParserExtensions.cs"];
m3_77 [label="Entry System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="40-40", cluster="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", file="UnParserExtensions.cs"];
m3_14 [label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11", cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="UnParserExtensions.cs"];
m3_70 [label="Entry Unk.GetConstructor", span="", cluster="Unk.GetConstructor", file="UnParserExtensions.cs"];
m3_63 [label="Entry Unk.Single", span="", cluster="Unk.Single", file="UnParserExtensions.cs"];
m3_49 [label="Entry System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", span="14-14", cluster="System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", file="UnParserExtensions.cs"];
m3_52 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="UnParserExtensions.cs"];
m3_56 [label="Entry System.Func<TResult>.Invoke()", span="0-0", cluster="System.Func<TResult>.Invoke()", file="UnParserExtensions.cs"];
m3_76 [label="Entry CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12", cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="UnParserExtensions.cs"];
m3_96 [label="Entry lambda expression", span="55-55", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_5 [label="var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer))", span="24-24", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_12 [label="NameLookup.Contains(name, optionSpecs, nameComparer)", span="24-24", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_6 [label="var explodedTokens = Tokenizer.ExplodeOptionList(\r\n                            tokens,\r\n                            name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer))", span="25-27", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_16 [label="NameLookup.HavingSeparator(name, optionSpecs, nameComparer)", span="27-27", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_4 [label="Entry lambda expression", span="22-29", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_11 [label="Entry lambda expression", span="24-24", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_7 [label="return explodedTokens;", span="28-28", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_15 [label="Entry lambda expression", span="27-27", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_8 [label="Exit lambda expression", span="22-29", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_13 [label="Exit lambda expression", span="24-24", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_17 [label="Exit lambda expression", span="27-27", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_93 [label="typeof(T).IsMutable()\r\n                    ? factory.Return(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="54-57", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_100 [label="TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer)", span="74-74", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_104 [label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="79-79", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_108 [label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="85-85", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_111 [label="token.Text.MatchName(o.ShortName, o.LongName, nameComparer)", span="89-89", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_82 [label="Entry lambda expression", span="42-42", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_86 [label="Entry lambda expression", span="44-45", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_99 [label="Entry lambda expression", span="74-74", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_103 [label="Entry lambda expression", span="79-79", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_107 [label="Entry lambda expression", span="85-85", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_110 [label="Entry lambda expression", span="89-89", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_114 [label="Entry lambda expression", span="96-96", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_142 [label="Entry lambda expression", span="115-115", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_145 [label="Entry lambda expression", span="116-116", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_117 [label="Entry lambda expression", span="99-99", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_121 [label="Entry lambda expression", span="100-100", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_125 [label="Entry lambda expression", span="102-102", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_129 [label="Entry lambda expression", span="103-103", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_132 [label="Entry lambda expression", span="105-107", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_136 [label="Entry lambda expression", span="108-108", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_83 [label="f().GetType()", span="42-42", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_84 [label="Exit lambda expression", span="42-42", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_87 [label="SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>())", span="44-45", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_88 [label="Exit lambda expression", span="44-45", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_92 [label="Entry lambda expression", span="53-57", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_94 [label="Exit lambda expression", span="53-57", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_97 [label="f()", span="55-55", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_98 [label="Exit lambda expression", span="55-55", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_101 [label="Exit lambda expression", span="74-74", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_105 [label="Exit lambda expression", span="79-79", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_109 [label="Exit lambda expression", span="85-85", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_112 [label="Exit lambda expression", span="89-89", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_115 [label="f()", span="96-96", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_116 [label="Exit lambda expression", span="96-96", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_118 [label="sp.Value.IsJust()", span="99-99", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_119 [label="Exit lambda expression", span="99-99", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_122 [label="sp.Value.FromJust()", span="100-100", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_123 [label="Exit lambda expression", span="100-100", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_126 [label="sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust()", span="102-102", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_127 [label="Exit lambda expression", span="102-102", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_130 [label="sp.Specification.DefaultValue.FromJust()", span="103-103", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_131 [label="Exit lambda expression", span="103-103", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_133 [label="sp.Value.IsNothing()\r\n                            && sp.Specification.TargetType == TargetType.Sequence\r\n                            && sp.Specification.DefaultValue.MatchNothing()", span="105-107", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_134 [label="Exit lambda expression", span="105-107", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_137 [label="sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray()", span="108-108", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_138 [label="Exit lambda expression", span="108-108", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_143 [label=v, span="115-115", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_144 [label="Exit lambda expression", span="115-115", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_146 [label=d, span="116-116", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_147 [label="Exit lambda expression", span="116-116", cluster="lambda expression", file="UnParserExtensions.cs"];
m3_85 [label="Entry object.GetType()", span="0-0", cluster="object.GetType()", file="UnParserExtensions.cs"];
m3_54 [label="Entry System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="12-12", cluster="System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", file="UnParserExtensions.cs"];
m3_62 [label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="269-269", cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="UnParserExtensions.cs"];
m3_0 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="14-14", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="UnParserExtensions.cs"];
m3_1 [label="return Build(\r\n                factory,\r\n                (args, optionSpecs) =>\r\n                    {\r\n                        var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer));\r\n                        var explodedTokens = Tokenizer.ExplodeOptionList(\r\n                            tokens,\r\n                            name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer));\r\n                        return explodedTokens;\r\n                    },\r\n                arguments,\r\n                nameComparer,\r\n                parsingCulture);", span="20-32", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="UnParserExtensions.cs"];
m3_2 [label="Exit CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="14-14", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="UnParserExtensions.cs"];
m3_78 [label="Entry Unk.Concat", span="", cluster="Unk.Concat", file="UnParserExtensions.cs"];
m3_81 [label="Entry CommandLine.Parsed<T>.Parsed(T)", span="72-72", cluster="CommandLine.Parsed<T>.Parsed(T)", file="UnParserExtensions.cs"];
m3_140 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", file="UnParserExtensions.cs"];
m3_141 [label="Entry System.Type.CreateEmptyArray()", span="101-101", cluster="System.Type.CreateEmptyArray()", file="UnParserExtensions.cs"];
m3_72 [label="Entry string.ToLower()", span="0-0", cluster="string.ToLower()", file="UnParserExtensions.cs"];
m3_139 [label="Entry System.Type.GetGenericArguments()", span="0-0", cluster="System.Type.GetGenericArguments()", file="UnParserExtensions.cs"];
m3_9 [label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="12-12", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="UnParserExtensions.cs"];
m3_89 [label="Entry CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="105-105", cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="UnParserExtensions.cs"];
m3_102 [label="Entry CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="23-23", cluster="CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="UnParserExtensions.cs"];
m3_3 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="35-35", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="UnParserExtensions.cs"];
m3_19 [label="var typeInfo = factory.Return(f => f().GetType(), typeof(T))", span="42-42", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="UnParserExtensions.cs"];
m3_23 [label="Func<T> makeDefault = () =>\r\n                typeof(T).IsMutable()\r\n                    ? factory.Return(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="53-57", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="UnParserExtensions.cs"];
m3_24 [label="arguments.Any()", span="59-59", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="UnParserExtensions.cs"];
m3_25 [label="var preprocessorErrors = arguments.Preprocess(PreprocessorGuards.Lookup(nameComparer))", span="61-61", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="UnParserExtensions.cs"];
m3_28 [label="var tokenizerResult = tokenizer(arguments, optionSpecs)", span="68-68", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="UnParserExtensions.cs"];
m3_30 [label="var partitions = TokenPartitioner.Partition(\r\n                tokens,\r\n                name => TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer))", span="72-74", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="UnParserExtensions.cs"];
m3_31 [label="var optionSpecProps = OptionMapper.MapValues(\r\n                (from pt in specProps where pt.Specification.IsOption() select pt),\r\n                partitions.Options,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture),\r\n                nameComparer)", span="76-80", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="UnParserExtensions.cs"];
m3_32 [label="var valueSpecProps = ValueMapper.MapValues(\r\n                (from pt in specProps where pt.Specification.IsValue() select pt),\r\n                    partitions.Values,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture))", span="82-85", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="UnParserExtensions.cs"];
m3_33 [label="var missingValueErrors = from token in partitions.Errors\r\n                                     select new MissingValueOptionError(\r\n                                         optionSpecs.Single(o => token.Text.MatchName(o.ShortName, o.LongName, nameComparer)).FromOptionSpecification())", span="87-89", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="UnParserExtensions.cs"];
m3_37 [label="instance = factory.Return(f => f(), Activator.CreateInstance<T>())", span="96-96", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="UnParserExtensions.cs"];
m3_20 [label="var specProps = typeInfo.GetSpecifications(pi => SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>()))", span="44-45", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="UnParserExtensions.cs"];
m3_36 [label="typeInfo.IsMutable()", span="94-94", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="UnParserExtensions.cs"];
m3_39 [label="var ctor = typeInfo.GetConstructor((from sp in specProps select sp.Property.PropertyType).ToArray())", span="112-112", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="UnParserExtensions.cs"];
m3_21 [label="var specs = from pt in specProps select pt.Specification", span="47-47", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="UnParserExtensions.cs"];
m3_22 [label="var optionSpecs = specs\r\n                .ThrowingValidate(SpecificationGuards.Lookup)\r\n                .OfType<OptionSpecification>()", span="49-51", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=red, community=0, file="UnParserExtensions.cs"];
m3_27 [label="return new NotParsed<T>(makeDefault(), preprocessorErrors);", span="64-64", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="UnParserExtensions.cs"];
m3_26 [label="preprocessorErrors.Any()", span="62-62", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="UnParserExtensions.cs"];
m3_29 [label="var tokens = tokenizerResult.Value", span="70-70", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="UnParserExtensions.cs"];
m3_43 [label="var allErrors = tokenizerResult.Errors.Concat(missingValueErrors)\r\n                .Concat(optionSpecProps.Errors)\r\n                .Concat(valueSpecProps.Errors)\r\n                .Concat(validationErrors)", span="124-127", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="UnParserExtensions.cs"];
m3_42 [label="var validationErrors = specPropsWithValue.Validate(\r\n                SpecificationPropertyRules.Lookup(tokens))", span="121-122", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="UnParserExtensions.cs"];
m3_34 [label="var specPropsWithValue = optionSpecProps.Value.Concat(valueSpecProps.Value)", span="91-91", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="UnParserExtensions.cs"];
m3_35 [label="T instance", span="93-93", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="UnParserExtensions.cs"];
m3_38 [label="instance = instance\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsJust(),\r\n                        sp => sp.Value.FromJust())\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust(),\r\n                        sp => sp.Specification.DefaultValue.FromJust())\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsNothing()\r\n                            && sp.Specification.TargetType == TargetType.Sequence\r\n                            && sp.Specification.DefaultValue.MatchNothing(),\r\n                        sp => sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray())", span="97-108", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="UnParserExtensions.cs"];
m3_40 [label="var values = (from prms in ctor.GetParameters()\r\n                              join sp in specPropsWithValue on prms.Name.ToLower() equals sp.Property.Name.ToLower()\r\n                              select sp.Value.Return(v => v,\r\n                                    sp.Specification.DefaultValue.Return(d => d,\r\n                                        sp.Specification.ConversionType.CreateDefaultForImmutable()))).ToArray()", span="113-117", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="UnParserExtensions.cs"];
m3_41 [label="instance = (T)ctor.Invoke(values)", span="118-118", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="UnParserExtensions.cs"];
m3_45 [label="return new NotParsed<T>(instance, allErrors);", span="131-131", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="UnParserExtensions.cs"];
m3_46 [label="return new Parsed<T>(instance);", span="133-133", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="UnParserExtensions.cs"];
m3_44 [label="allErrors.Any()", span="129-129", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="UnParserExtensions.cs"];
m3_47 [label="Exit CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="35-35", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="UnParserExtensions.cs"];
m3_67 [label="Entry System.Activator.CreateInstance<T>()", span="0-0", cluster="System.Activator.CreateInstance<T>()", file="UnParserExtensions.cs"];
m3_90 [label="Entry CSharpx.Maybe.Nothing<T>()", span="75-75", cluster="CSharpx.Maybe.Nothing<T>()", file="UnParserExtensions.cs"];
m3_59 [label="Entry CommandLine.Core.Specification.IsOption()", span="10-10", cluster="CommandLine.Core.Specification.IsOption()", file="UnParserExtensions.cs"];
m3_128 [label="Entry CSharpx.Maybe<T>.IsNothing<T>()", span="170-170", cluster="CSharpx.Maybe<T>.IsNothing<T>()", file="UnParserExtensions.cs"];
m3_135 [label="Entry CSharpx.Maybe<T>.MatchNothing()", span="29-29", cluster="CSharpx.Maybe<T>.MatchNothing()", file="UnParserExtensions.cs"];
m3_66 [label="Entry System.Type.IsMutable()", span="115-115", cluster="System.Type.IsMutable()", file="UnParserExtensions.cs"];
m3_91 [label="Entry CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)", span="21-21", cluster="CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)", file="UnParserExtensions.cs"];
m3_51 [label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0", cluster="System.Collections.IEnumerable.OfType<TResult>()", file="UnParserExtensions.cs"];
m3_53 [label="Entry CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)", span="11-11", cluster="CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)", file="UnParserExtensions.cs"];
m3_75 [label="Entry System.Reflection.ConstructorInfo.Invoke(object[])", span="0-0", cluster="System.Reflection.ConstructorInfo.Invoke(object[])", file="UnParserExtensions.cs"];
m3_69 [label="Entry Unk.ToArray", span="", cluster="Unk.ToArray", file="UnParserExtensions.cs"];
m3_120 [label="Entry CSharpx.Maybe<T>.IsJust<T>()", span="175-175", cluster="CSharpx.Maybe<T>.IsJust<T>()", file="UnParserExtensions.cs"];
m3_64 [label="Entry Unk.FromOptionSpecification", span="", cluster="Unk.FromOptionSpecification", file="UnParserExtensions.cs"];
m3_57 [label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0", cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", file="UnParserExtensions.cs"];
m3_10 [label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CSharpx.Maybe<char>>)", span="45-45", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CSharpx.Maybe<char>>)", file="UnParserExtensions.cs"];
m3_60 [label="Entry Unk.MapValues", span="", cluster="Unk.MapValues", file="UnParserExtensions.cs"];
m3_148 [label="System.StringComparer", span="", file="UnParserExtensions.cs"];
m3_149 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span="", file="UnParserExtensions.cs"];
m3_150 [label="CSharpx.Maybe<System.Func<T>>", span="", file="UnParserExtensions.cs"];
m3_151 [label=specProps, span="", file="UnParserExtensions.cs"];
m3_152 [label="System.StringComparer", span="", file="UnParserExtensions.cs"];
m3_153 [label=optionSpecs, span="", file="UnParserExtensions.cs"];
m3_154 [label="System.Globalization.CultureInfo", span="", file="UnParserExtensions.cs"];
m3_155 [label=token, span="", file="UnParserExtensions.cs"];
m4_4 [label="Entry CommandLine.Parser.FormatCommandLine<T>(T)", span="24-24", cluster="CommandLine.Parser.FormatCommandLine<T>(T)", file="UnParserExtensionsTests.cs"];
m4_3 [label="Entry CommandLine.Parser.Parser()", span="26-26", cluster="CommandLine.Parser.Parser()", file="UnParserExtensionsTests.cs"];
m4_6 [label="Entry CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line_for_verbs(CommandLine.Tests.Fakes.AddOptions, string)", span="26-26", cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line_for_verbs(CommandLine.Tests.Fakes.AddOptions, string)", file="UnParserExtensionsTests.cs"];
m4_7 [label="new Parser()\r\n                .FormatCommandLine(options)\r\n                .ShouldBeEquivalentTo(result)", span="28-30", cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line_for_verbs(CommandLine.Tests.Fakes.AddOptions, string)", file="UnParserExtensionsTests.cs"];
m4_8 [label="Exit CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line_for_verbs(CommandLine.Tests.Fakes.AddOptions, string)", span="26-26", cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line_for_verbs(CommandLine.Tests.Fakes.AddOptions, string)", file="UnParserExtensionsTests.cs"];
m4_0 [label="Entry CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line(CommandLine.Tests.Fakes.FakeOptions, string)", span="17-17", cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line(CommandLine.Tests.Fakes.FakeOptions, string)", file="UnParserExtensionsTests.cs"];
m4_1 [label="new Parser()\r                .FormatCommandLine(options)\r                .ShouldBeEquivalentTo(result)", span="19-21", cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line(CommandLine.Tests.Fakes.FakeOptions, string)", file="UnParserExtensionsTests.cs"];
m4_2 [label="Exit CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line(CommandLine.Tests.Fakes.FakeOptions, string)", span="17-17", cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line(CommandLine.Tests.Fakes.FakeOptions, string)", file="UnParserExtensionsTests.cs"];
m4_5 [label="Entry Unk.ShouldBeEquivalentTo", span="", cluster="Unk.ShouldBeEquivalentTo", file="UnParserExtensionsTests.cs"];
m0_52 -> m0_53  [key=0, style=solid];
m0_52 -> m0_54  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
m0_53 -> m0_0  [key=2, style=dotted];
m0_53 -> m0_54  [key=0, style=solid];
m0_54 -> m0_39  [key=2, style=dotted];
m0_54 -> m0_55  [key=0, style=solid];
m0_55 -> m0_52  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_0 -> m0_2  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>"];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_4  [key=0, style=solid];
m0_1 -> m0_3  [key=2, style=dotted];
m0_1 -> m0_5  [key=2, style=dotted];
m0_1 -> m0_6  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_1 -> m0_10  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_2 -> m0_3  [key=0, style=solid];
m0_2 -> m0_0  [key=0, style=bold, color=blue];
m0_4 -> m0_5  [key=0, style=solid];
m0_4 -> m0_6  [key=2, style=dotted];
m0_3 -> m0_5  [key=0, style=solid];
m0_5 -> m0_0  [key=0, style=bold, color=blue];
m0_248 -> m0_249  [key=0, style=solid];
m0_250 -> m0_237  [key=2, style=dotted];
m0_250 -> m0_251  [key=0, style=solid];
m0_249 -> m0_250  [key=0, style=solid];
m0_251 -> m0_248  [key=0, style=bold, color=blue];
m0_121 -> m0_122  [key=0, style=solid];
m0_121 -> m0_123  [key=1, style=dashed, color=darkseagreen4, label="long[]"];
m0_122 -> m0_0  [key=2, style=dotted];
m0_122 -> m0_123  [key=0, style=solid];
m0_123 -> m0_39  [key=2, style=dotted];
m0_123 -> m0_124  [key=0, style=solid];
m0_124 -> m0_121  [key=0, style=bold, color=blue];
m0_194 -> m0_195  [key=0, style=solid];
m0_194 -> m0_196  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_195 -> m0_0  [key=2, style=dotted];
m0_195 -> m0_196  [key=0, style=solid];
m0_196 -> m0_39  [key=2, style=dotted];
m0_196 -> m0_197  [key=0, style=solid];
m0_197 -> m0_194  [key=0, style=bold, color=blue];
m0_233 -> m0_234  [key=0, style=solid];
m0_235 -> m0_237  [key=2, style=dotted];
m0_235 -> m0_236  [key=0, style=solid];
m0_234 -> m0_235  [key=0, style=solid];
m0_236 -> m0_233  [key=0, style=bold, color=blue];
m0_216 -> m0_217  [key=0, style=solid];
m0_216 -> m0_218  [key=1, style=dashed, color=darkseagreen4, label="long?"];
m0_217 -> m0_0  [key=2, style=dotted];
m0_217 -> m0_218  [key=0, style=solid];
m0_218 -> m0_39  [key=2, style=dotted];
m0_218 -> m0_219  [key=0, style=solid];
m0_219 -> m0_216  [key=0, style=bold, color=blue];
m0_309 -> m0_310  [key=0, style=solid];
m0_309 -> m0_311  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Options_With_Required_Set_To_True_For_Values"];
m0_310 -> m0_0  [key=2, style=dotted];
m0_310 -> m0_311  [key=0, style=solid];
m0_311 -> m0_39  [key=2, style=dotted];
m0_311 -> m0_312  [key=0, style=solid];
m0_312 -> m0_309  [key=0, style=bold, color=blue];
m0_129 -> m0_130  [key=0, style=solid];
m0_132 -> m0_3  [key=2, style=dotted];
m0_132 -> m0_4  [key=2, style=dotted];
m0_132 -> m0_5  [key=2, style=dotted];
m0_132 -> m0_133  [key=0, style=solid];
m0_132 -> m0_135  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_132 -> m0_138  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_131 -> m0_132  [key=0, style=solid];
m0_133 -> m0_39  [key=2, style=dotted];
m0_133 -> m0_134  [key=0, style=solid];
m0_130 -> m0_131  [key=0, style=solid];
m0_130 -> m0_133  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_130 -> m0_116  [key=2, style=dotted];
m0_134 -> m0_129  [key=0, style=bold, color=blue];
m0_288 -> m0_289  [key=0, style=solid];
m0_288 -> m0_290  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_288 -> m0_293  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_289 -> m0_0  [key=2, style=dotted];
m0_289 -> m0_290  [key=0, style=solid];
m0_290 -> m0_291  [key=0, style=solid];
m0_290 -> m0_262  [key=2, style=dotted];
m0_290 -> m0_263  [key=2, style=dotted];
m0_290 -> m0_292  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_291 -> m0_288  [key=0, style=bold, color=blue];
m0_189 -> m0_190  [key=0, style=solid];
m0_191 -> m0_0  [key=2, style=dotted];
m0_191 -> m0_192  [key=0, style=solid];
m0_192 -> m0_39  [key=2, style=dotted];
m0_192 -> m0_193  [key=0, style=solid];
m0_190 -> m0_191  [key=0, style=solid];
m0_190 -> m0_192  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_190 -> m0_183  [key=2, style=dotted];
m0_193 -> m0_189  [key=0, style=bold, color=blue];
m0_295 -> m0_296  [key=0, style=solid];
m0_295 -> m0_297  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_296 -> m0_0  [key=2, style=dotted];
m0_296 -> m0_297  [key=0, style=solid];
m0_297 -> m0_39  [key=2, style=dotted];
m0_297 -> m0_298  [key=0, style=solid];
m0_298 -> m0_295  [key=0, style=bold, color=blue];
m0_71 -> m0_72  [key=0, style=solid];
m0_73 -> m0_0  [key=2, style=dotted];
m0_73 -> m0_74  [key=0, style=solid];
m0_74 -> m0_39  [key=2, style=dotted];
m0_74 -> m0_75  [key=0, style=solid];
m0_72 -> m0_73  [key=0, style=solid];
m0_72 -> m0_74  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_72 -> m0_76  [key=2, style=dotted];
m0_75 -> m0_71  [key=0, style=bold, color=blue];
m0_82 -> m0_83  [key=0, style=solid];
m0_84 -> m0_0  [key=2, style=dotted];
m0_84 -> m0_85  [key=0, style=solid];
m0_85 -> m0_39  [key=2, style=dotted];
m0_85 -> m0_86  [key=0, style=solid];
m0_83 -> m0_84  [key=0, style=solid];
m0_83 -> m0_85  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_83 -> m0_76  [key=2, style=dotted];
m0_86 -> m0_82  [key=0, style=bold, color=blue];
m0_220 -> m0_221  [key=0, style=solid];
m0_220 -> m0_223  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_220 -> m0_224  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_221 -> m0_0  [key=2, style=dotted];
m0_221 -> m0_222  [key=0, style=solid];
m0_221 -> m0_223  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_221 -> m0_224  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_223 -> m0_39  [key=2, style=dotted];
m0_223 -> m0_224  [key=0, style=solid];
m0_224 -> m0_39  [key=2, style=dotted];
m0_224 -> m0_225  [key=0, style=solid];
m0_224 -> m0_226  [key=2, style=dotted];
m0_222 -> m0_223  [key=0, style=solid];
m0_222 -> m0_224  [key=0, style=solid];
m0_225 -> m0_220  [key=0, style=bold, color=blue];
m0_323 -> m0_324  [key=0, style=solid];
m0_323 -> m0_326  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_323 -> m0_330  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_324 -> m0_0  [key=2, style=dotted];
m0_324 -> m0_325  [key=0, style=solid];
m0_325 -> m0_326  [key=0, style=solid];
m0_326 -> m0_262  [key=2, style=dotted];
m0_326 -> m0_263  [key=2, style=dotted];
m0_326 -> m0_327  [key=0, style=solid];
m0_326 -> m0_328  [key=2, style=dotted];
m0_326 -> m0_329  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_327 -> m0_323  [key=0, style=bold, color=blue];
m0_184 -> m0_185  [key=0, style=solid];
m0_186 -> m0_0  [key=2, style=dotted];
m0_186 -> m0_187  [key=0, style=solid];
m0_187 -> m0_39  [key=2, style=dotted];
m0_187 -> m0_188  [key=0, style=solid];
m0_185 -> m0_186  [key=0, style=solid];
m0_185 -> m0_187  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_185 -> m0_183  [key=2, style=dotted];
m0_188 -> m0_184  [key=0, style=bold, color=blue];
m0_95 -> m0_96  [key=0, style=solid];
m0_97 -> m0_0  [key=2, style=dotted];
m0_97 -> m0_98  [key=0, style=solid];
m0_98 -> m0_39  [key=2, style=dotted];
m0_98 -> m0_99  [key=0, style=solid];
m0_96 -> m0_97  [key=0, style=solid];
m0_96 -> m0_98  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_96 -> m0_100  [key=2, style=dotted];
m0_96 -> m0_70  [key=2, style=dotted];
m0_99 -> m0_95  [key=0, style=bold, color=blue];
m0_274 -> m0_275  [key=0, style=solid];
m0_274 -> m0_276  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_274 -> m0_279  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_275 -> m0_0  [key=2, style=dotted];
m0_275 -> m0_276  [key=0, style=solid];
m0_276 -> m0_277  [key=0, style=solid];
m0_276 -> m0_262  [key=2, style=dotted];
m0_276 -> m0_263  [key=2, style=dotted];
m0_276 -> m0_278  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_277 -> m0_274  [key=0, style=bold, color=blue];
m0_117 -> m0_118  [key=0, style=solid];
m0_117 -> m0_119  [key=1, style=dashed, color=darkseagreen4, label="long[]"];
m0_118 -> m0_0  [key=2, style=dotted];
m0_118 -> m0_119  [key=0, style=solid];
m0_119 -> m0_39  [key=2, style=dotted];
m0_119 -> m0_120  [key=0, style=solid];
m0_120 -> m0_117  [key=0, style=bold, color=blue];
m0_60 -> m0_61  [key=0, style=solid];
m0_60 -> m0_62  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m0_61 -> m0_0  [key=2, style=dotted];
m0_61 -> m0_62  [key=0, style=solid];
m0_62 -> m0_39  [key=2, style=dotted];
m0_62 -> m0_63  [key=0, style=solid];
m0_63 -> m0_60  [key=0, style=bold, color=blue];
m0_255 -> m0_256  [key=0, style=solid];
m0_255 -> m0_257  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResultType"];
m0_255 -> m0_258  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_255 -> m0_265  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_255 -> m0_259  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResultType"];
m0_256 -> m0_0  [key=2, style=dotted];
m0_256 -> m0_257  [key=0, style=solid];
m0_256 -> m0_258  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_256 -> m0_260  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_257 -> m0_258  [key=0, style=solid];
m0_257 -> m0_259  [key=0, style=solid];
m0_258 -> m0_261  [key=0, style=solid];
m0_258 -> m0_262  [key=2, style=dotted];
m0_258 -> m0_263  [key=2, style=dotted];
m0_258 -> m0_264  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_260 -> m0_261  [key=0, style=solid];
m0_260 -> m0_262  [key=2, style=dotted];
m0_260 -> m0_237  [key=2, style=dotted];
m0_259 -> m0_260  [key=0, style=solid];
m0_259 -> m0_261  [key=0, style=solid];
m0_261 -> m0_255  [key=0, style=bold, color=blue];
m0_48 -> m0_49  [key=0, style=solid];
m0_48 -> m0_50  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
m0_49 -> m0_0  [key=2, style=dotted];
m0_49 -> m0_50  [key=0, style=solid];
m0_50 -> m0_39  [key=2, style=dotted];
m0_50 -> m0_51  [key=0, style=solid];
m0_51 -> m0_48  [key=0, style=bold, color=blue];
m0_329 -> m0_330  [key=0, style=solid];
m0_18 -> m0_19  [key=0, style=solid, color=green];
m0_21 -> m0_22  [key=0, style=solid, color=green];
m0_19 -> m0_20  [key=0, style=solid, color=green];
m0_19 -> m0_9  [key=2, style=dotted, color=green];
m0_20 -> m0_18  [key=0, style=bold, color=blue];
m0_22 -> m0_23  [key=0, style=solid, color=green];
m0_22 -> m0_13  [key=2, style=dotted, color=green];
m0_22 -> m0_14  [key=2, style=dotted, color=green];
m0_23 -> m0_21  [key=0, style=bold, color=blue];
m0_28 -> m0_29  [key=0, style=solid, color=green];
m0_29 -> m0_30  [key=0, style=solid, color=green];
m0_29 -> m0_13  [key=2, style=dotted, color=green];
m0_29 -> m0_14  [key=2, style=dotted, color=green];
m0_30 -> m0_28  [key=0, style=bold, color=blue];
m0_7 -> m0_9  [key=2, style=dotted];
m0_7 -> m0_8  [key=0, style=solid];
m0_11 -> m0_13  [key=2, style=dotted];
m0_11 -> m0_14  [key=2, style=dotted];
m0_11 -> m0_12  [key=0, style=solid];
m0_6 -> m0_7  [key=0, style=solid];
m0_10 -> m0_11  [key=0, style=solid];
m0_135 -> m0_136  [key=0, style=solid];
m0_138 -> m0_139  [key=0, style=solid];
m0_138 -> m0_143  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m0_138 -> m0_147  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m0_8 -> m0_6  [key=0, style=bold, color=blue];
m0_12 -> m0_10  [key=0, style=bold, color=blue];
m0_239 -> m0_0  [key=2, style=dotted];
m0_239 -> m0_240  [key=0, style=solid];
m0_246 -> m0_0  [key=2, style=dotted];
m0_246 -> m0_247  [key=0, style=solid];
m0_253 -> m0_0  [key=2, style=dotted];
m0_253 -> m0_254  [key=0, style=solid];
m0_137 -> m0_135  [key=0, style=bold, color=blue];
m0_136 -> m0_137  [key=0, style=solid];
m0_136 -> m0_116  [key=2, style=dotted];
m0_140 -> m0_138  [key=0, style=bold, color=blue];
m0_139 -> m0_140  [key=0, style=solid];
m0_139 -> m0_141  [key=2, style=dotted];
m0_139 -> m0_142  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_143 -> m0_144  [key=0, style=solid];
m0_143 -> m0_145  [key=2, style=dotted];
m0_143 -> m0_146  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_147 -> m0_148  [key=0, style=solid];
m0_147 -> m0_149  [key=2, style=dotted];
m0_238 -> m0_239  [key=0, style=solid];
m0_240 -> m0_238  [key=0, style=bold, color=blue];
m0_245 -> m0_246  [key=0, style=solid];
m0_247 -> m0_245  [key=0, style=bold, color=blue];
m0_252 -> m0_253  [key=0, style=solid];
m0_254 -> m0_252  [key=0, style=bold, color=blue];
m0_142 -> m0_143  [key=0, style=solid];
m0_144 -> m0_142  [key=0, style=bold, color=blue];
m0_146 -> m0_147  [key=0, style=solid];
m0_148 -> m0_146  [key=0, style=bold, color=blue];
m0_265 -> m0_266  [key=0, style=solid];
m0_264 -> m0_265  [key=0, style=solid];
m0_272 -> m0_273  [key=0, style=solid];
m0_271 -> m0_272  [key=0, style=solid];
m0_279 -> m0_280  [key=0, style=solid];
m0_278 -> m0_279  [key=0, style=solid];
m0_286 -> m0_287  [key=0, style=solid];
m0_285 -> m0_286  [key=0, style=solid];
m0_293 -> m0_294  [key=0, style=solid];
m0_292 -> m0_293  [key=0, style=solid];
m0_307 -> m0_308  [key=0, style=solid];
m0_306 -> m0_307  [key=0, style=solid];
m0_330 -> m0_331  [key=0, style=solid];
m0_266 -> m0_264  [key=0, style=bold, color=blue];
m0_273 -> m0_271  [key=0, style=bold, color=blue];
m0_280 -> m0_278  [key=0, style=bold, color=blue];
m0_287 -> m0_285  [key=0, style=bold, color=blue];
m0_294 -> m0_292  [key=0, style=bold, color=blue];
m0_308 -> m0_306  [key=0, style=bold, color=blue];
m0_331 -> m0_329  [key=0, style=bold, color=blue];
m0_332 -> m0_333  [key=0, style=solid];
m0_332 -> m0_334  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Immutable_Simple_Options"];
m0_333 -> m0_24  [key=2, style=dotted];
m0_333 -> m0_334  [key=0, style=solid];
m0_334 -> m0_39  [key=2, style=dotted];
m0_334 -> m0_335  [key=0, style=solid];
m0_335 -> m0_332  [key=0, style=bold, color=blue];
m0_267 -> m0_268  [key=0, style=solid];
m0_267 -> m0_269  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_267 -> m0_272  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_268 -> m0_0  [key=2, style=dotted];
m0_268 -> m0_269  [key=0, style=solid];
m0_269 -> m0_270  [key=0, style=solid];
m0_269 -> m0_262  [key=2, style=dotted];
m0_269 -> m0_263  [key=2, style=dotted];
m0_269 -> m0_271  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_270 -> m0_267  [key=0, style=bold, color=blue];
m0_299 -> m0_300  [key=0, style=solid];
m0_299 -> m0_301  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResultType"];
m0_299 -> m0_302  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_299 -> m0_307  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_299 -> m0_303  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResultType"];
m0_300 -> m0_0  [key=2, style=dotted];
m0_300 -> m0_301  [key=0, style=solid];
m0_300 -> m0_302  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_300 -> m0_304  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_301 -> m0_302  [key=0, style=solid];
m0_301 -> m0_303  [key=0, style=solid];
m0_302 -> m0_305  [key=0, style=solid];
m0_302 -> m0_262  [key=2, style=dotted];
m0_302 -> m0_263  [key=2, style=dotted];
m0_302 -> m0_306  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_304 -> m0_305  [key=0, style=solid];
m0_304 -> m0_262  [key=2, style=dotted];
m0_304 -> m0_237  [key=2, style=dotted];
m0_303 -> m0_304  [key=0, style=solid];
m0_303 -> m0_305  [key=0, style=solid];
m0_305 -> m0_299  [key=0, style=bold, color=blue];
m0_56 -> m0_57  [key=0, style=solid];
m0_56 -> m0_58  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m0_57 -> m0_0  [key=2, style=dotted];
m0_57 -> m0_58  [key=0, style=solid];
m0_58 -> m0_39  [key=2, style=dotted];
m0_58 -> m0_59  [key=0, style=solid];
m0_59 -> m0_56  [key=0, style=bold, color=blue];
m0_101 -> m0_102  [key=0, style=solid];
m0_103 -> m0_0  [key=2, style=dotted];
m0_103 -> m0_104  [key=0, style=solid];
m0_104 -> m0_39  [key=2, style=dotted];
m0_104 -> m0_105  [key=0, style=solid];
m0_102 -> m0_103  [key=0, style=solid];
m0_102 -> m0_104  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_102 -> m0_100  [key=2, style=dotted];
m0_102 -> m0_70  [key=2, style=dotted];
m0_105 -> m0_101  [key=0, style=bold, color=blue];
m0_44 -> m0_45  [key=0, style=solid];
m0_44 -> m0_46  [key=1, style=dashed, color=darkseagreen4, label=double];
m0_45 -> m0_0  [key=2, style=dotted];
m0_45 -> m0_46  [key=0, style=solid];
m0_46 -> m0_39  [key=2, style=dotted];
m0_46 -> m0_47  [key=0, style=solid];
m0_47 -> m0_44  [key=0, style=bold, color=blue];
m0_281 -> m0_282  [key=0, style=solid];
m0_281 -> m0_283  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_281 -> m0_286  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_282 -> m0_0  [key=2, style=dotted];
m0_282 -> m0_283  [key=0, style=solid];
m0_283 -> m0_284  [key=0, style=solid];
m0_283 -> m0_262  [key=2, style=dotted];
m0_283 -> m0_263  [key=2, style=dotted];
m0_283 -> m0_285  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_284 -> m0_281  [key=0, style=bold, color=blue];
m0_24 -> m0_25  [key=0, style=solid, color=green];
m0_25 -> m0_26  [key=0, style=solid, color=green];
m0_25 -> m0_27  [key=2, style=dotted, color=green];
m0_25 -> m0_4  [key=2, style=dotted, color=green];
m0_25 -> m0_5  [key=2, style=dotted, color=green];
m0_25 -> m0_28  [key=1, style=dashed, color=green, label="lambda expression"];
m0_26 -> m0_24  [key=0, style=bold, color=blue];
m0_91 -> m0_92  [key=0, style=solid];
m0_91 -> m0_93  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Colors"];
m0_92 -> m0_15  [key=2, style=dotted];
m0_92 -> m0_93  [key=0, style=solid];
m0_93 -> m0_39  [key=2, style=dotted];
m0_93 -> m0_93  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Colors"];
m0_93 -> m0_94  [key=0, style=solid];
m0_94 -> m0_91  [key=0, style=bold, color=blue];
m0_198 -> m0_199  [key=0, style=solid];
m0_200 -> m0_0  [key=2, style=dotted];
m0_200 -> m0_201  [key=0, style=solid];
m0_201 -> m0_39  [key=2, style=dotted];
m0_201 -> m0_202  [key=0, style=solid];
m0_199 -> m0_200  [key=0, style=solid];
m0_199 -> m0_201  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_199 -> m0_167  [key=2, style=dotted];
m0_202 -> m0_198  [key=0, style=bold, color=blue];
m0_173 -> m0_174  [key=0, style=solid];
m0_175 -> m0_0  [key=2, style=dotted];
m0_175 -> m0_176  [key=0, style=solid];
m0_176 -> m0_39  [key=2, style=dotted];
m0_176 -> m0_177  [key=0, style=solid];
m0_174 -> m0_175  [key=0, style=solid];
m0_174 -> m0_176  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_174 -> m0_76  [key=2, style=dotted];
m0_174 -> m0_70  [key=2, style=dotted];
m0_177 -> m0_173  [key=0, style=bold, color=blue];
m0_31 -> m0_32  [key=0, style=solid, color=green];
m0_32 -> m0_33  [key=0, style=solid, color=green];
m0_32 -> m0_36  [key=2, style=dotted, color=green];
m0_32 -> m0_37  [key=2, style=dotted, color=green];
m0_32 -> m0_38  [key=2, style=dotted, color=green];
m0_32 -> m0_34  [key=1, style=dashed, color=green, label=expectedResult];
m0_33 -> m0_34  [key=0, style=solid];
m0_33 -> m0_0  [key=2, style=dotted];
m0_34 -> m0_35  [key=0, style=solid];
m0_34 -> m0_39  [key=2, style=dotted];
m0_35 -> m0_31  [key=0, style=bold, color=blue];
m0_168 -> m0_169  [key=0, style=solid];
m0_170 -> m0_0  [key=2, style=dotted];
m0_170 -> m0_171  [key=0, style=solid];
m0_171 -> m0_39  [key=2, style=dotted];
m0_171 -> m0_172  [key=0, style=solid];
m0_169 -> m0_170  [key=0, style=solid];
m0_169 -> m0_171  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_169 -> m0_167  [key=2, style=dotted];
m0_169 -> m0_70  [key=2, style=dotted];
m0_172 -> m0_168  [key=0, style=bold, color=blue];
m0_162 -> m0_163  [key=0, style=solid];
m0_164 -> m0_0  [key=2, style=dotted];
m0_164 -> m0_165  [key=0, style=solid];
m0_165 -> m0_39  [key=2, style=dotted];
m0_165 -> m0_166  [key=0, style=solid];
m0_163 -> m0_164  [key=0, style=solid];
m0_163 -> m0_165  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_163 -> m0_167  [key=2, style=dotted];
m0_163 -> m0_70  [key=2, style=dotted];
m0_166 -> m0_162  [key=0, style=bold, color=blue];
m0_106 -> m0_107  [key=0, style=solid];
m0_108 -> m0_0  [key=2, style=dotted];
m0_108 -> m0_109  [key=0, style=solid];
m0_109 -> m0_39  [key=2, style=dotted];
m0_109 -> m0_110  [key=0, style=solid];
m0_107 -> m0_108  [key=0, style=solid];
m0_107 -> m0_109  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_107 -> m0_100  [key=2, style=dotted];
m0_107 -> m0_70  [key=2, style=dotted];
m0_110 -> m0_106  [key=0, style=bold, color=blue];
m0_77 -> m0_78  [key=0, style=solid];
m0_79 -> m0_0  [key=2, style=dotted];
m0_79 -> m0_80  [key=0, style=solid];
m0_80 -> m0_39  [key=2, style=dotted];
m0_80 -> m0_81  [key=0, style=solid];
m0_78 -> m0_79  [key=0, style=solid];
m0_78 -> m0_80  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_78 -> m0_76  [key=2, style=dotted];
m0_78 -> m0_70  [key=2, style=dotted];
m0_81 -> m0_77  [key=0, style=bold, color=blue];
m0_64 -> m0_65  [key=0, style=solid];
m0_66 -> m0_0  [key=2, style=dotted];
m0_66 -> m0_67  [key=0, style=solid];
m0_67 -> m0_39  [key=2, style=dotted];
m0_67 -> m0_68  [key=0, style=solid];
m0_65 -> m0_66  [key=0, style=solid];
m0_65 -> m0_67  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_65 -> m0_69  [key=2, style=dotted];
m0_65 -> m0_70  [key=2, style=dotted];
m0_68 -> m0_64  [key=0, style=bold, color=blue];
m0_111 -> m0_112  [key=0, style=solid];
m0_113 -> m0_0  [key=2, style=dotted];
m0_113 -> m0_114  [key=0, style=solid];
m0_114 -> m0_39  [key=2, style=dotted];
m0_114 -> m0_115  [key=0, style=solid];
m0_112 -> m0_113  [key=0, style=solid];
m0_112 -> m0_114  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_112 -> m0_116  [key=2, style=dotted];
m0_115 -> m0_111  [key=0, style=bold, color=blue];
m0_15 -> m0_16  [key=0, style=solid, color=green];
m0_16 -> m0_17  [key=0, style=solid, color=green];
m0_16 -> m0_3  [key=2, style=dotted, color=green];
m0_16 -> m0_4  [key=2, style=dotted, color=green];
m0_16 -> m0_5  [key=2, style=dotted, color=green];
m0_16 -> m0_18  [key=1, style=dashed, color=green, label="lambda expression"];
m0_16 -> m0_21  [key=1, style=dashed, color=green, label="lambda expression"];
m0_17 -> m0_15  [key=0, style=bold, color=blue];
m0_313 -> m0_314  [key=0, style=solid];
m0_313 -> m0_315  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Options_With_Scalar_Value_And_Adjacent_SequenceString"];
m0_314 -> m0_0  [key=2, style=dotted];
m0_314 -> m0_315  [key=0, style=solid];
m0_315 -> m0_39  [key=2, style=dotted];
m0_315 -> m0_316  [key=0, style=solid];
m0_316 -> m0_313  [key=0, style=bold, color=blue];
m0_344 -> m0_345  [key=0, style=solid];
m0_344 -> m0_346  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_345 -> m0_0  [key=2, style=dotted];
m0_345 -> m0_346  [key=0, style=solid];
m0_346 -> m0_39  [key=2, style=dotted];
m0_346 -> m0_347  [key=0, style=solid];
m0_347 -> m0_344  [key=0, style=bold, color=blue];
m0_40 -> m0_41  [key=0, style=solid];
m0_40 -> m0_42  [key=1, style=dashed, color=darkseagreen4, label=long];
m0_41 -> m0_0  [key=2, style=dotted];
m0_41 -> m0_42  [key=0, style=solid];
m0_42 -> m0_39  [key=2, style=dotted];
m0_42 -> m0_43  [key=0, style=solid];
m0_43 -> m0_40  [key=0, style=bold, color=blue];
m0_227 -> m0_228  [key=0, style=solid];
m0_227 -> m0_230  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_227 -> m0_231  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_228 -> m0_0  [key=2, style=dotted];
m0_228 -> m0_229  [key=0, style=solid];
m0_228 -> m0_230  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_228 -> m0_231  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_230 -> m0_39  [key=2, style=dotted];
m0_230 -> m0_231  [key=0, style=solid];
m0_231 -> m0_39  [key=2, style=dotted];
m0_231 -> m0_232  [key=0, style=solid];
m0_231 -> m0_226  [key=2, style=dotted];
m0_229 -> m0_230  [key=0, style=solid];
m0_229 -> m0_231  [key=0, style=solid];
m0_232 -> m0_227  [key=0, style=bold, color=blue];
m0_317 -> m0_318  [key=0, style=solid];
m0_319 -> m0_0  [key=2, style=dotted];
m0_319 -> m0_320  [key=0, style=solid];
m0_320 -> m0_39  [key=2, style=dotted];
m0_320 -> m0_321  [key=0, style=solid];
m0_318 -> m0_319  [key=0, style=solid];
m0_318 -> m0_320  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_318 -> m0_322  [key=2, style=dotted];
m0_321 -> m0_317  [key=0, style=bold, color=blue];
m0_125 -> m0_126  [key=0, style=solid];
m0_125 -> m0_127  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m0_126 -> m0_0  [key=2, style=dotted];
m0_126 -> m0_127  [key=0, style=solid];
m0_127 -> m0_39  [key=2, style=dotted];
m0_127 -> m0_128  [key=0, style=solid];
m0_128 -> m0_125  [key=0, style=bold, color=blue];
m0_212 -> m0_213  [key=0, style=solid];
m0_212 -> m0_214  [key=1, style=dashed, color=darkseagreen4, label="int?"];
m0_213 -> m0_0  [key=2, style=dotted];
m0_213 -> m0_214  [key=0, style=solid];
m0_214 -> m0_39  [key=2, style=dotted];
m0_214 -> m0_215  [key=0, style=solid];
m0_215 -> m0_212  [key=0, style=bold, color=blue];
m0_178 -> m0_179  [key=0, style=solid];
m0_180 -> m0_0  [key=2, style=dotted];
m0_180 -> m0_181  [key=0, style=solid];
m0_181 -> m0_39  [key=2, style=dotted];
m0_181 -> m0_182  [key=0, style=solid];
m0_179 -> m0_180  [key=0, style=solid];
m0_179 -> m0_181  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_179 -> m0_183  [key=2, style=dotted];
m0_182 -> m0_178  [key=0, style=bold, color=blue];
m0_156 -> m0_157  [key=0, style=solid];
m0_158 -> m0_0  [key=2, style=dotted];
m0_158 -> m0_159  [key=0, style=solid];
m0_159 -> m0_39  [key=2, style=dotted];
m0_159 -> m0_160  [key=0, style=solid];
m0_157 -> m0_158  [key=0, style=solid];
m0_157 -> m0_159  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_157 -> m0_161  [key=2, style=dotted];
m0_160 -> m0_156  [key=0, style=bold, color=blue];
m0_207 -> m0_208  [key=0, style=solid];
m0_209 -> m0_0  [key=2, style=dotted];
m0_209 -> m0_210  [key=0, style=solid];
m0_210 -> m0_39  [key=2, style=dotted];
m0_210 -> m0_211  [key=0, style=solid];
m0_208 -> m0_209  [key=0, style=solid];
m0_208 -> m0_210  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_208 -> m0_76  [key=2, style=dotted];
m0_211 -> m0_207  [key=0, style=bold, color=blue];
m0_87 -> m0_88  [key=0, style=solid];
m0_87 -> m0_89  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Colors"];
m0_88 -> m0_0  [key=2, style=dotted];
m0_88 -> m0_89  [key=0, style=solid];
m0_89 -> m0_39  [key=2, style=dotted];
m0_89 -> m0_89  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Colors"];
m0_89 -> m0_90  [key=0, style=solid];
m0_90 -> m0_87  [key=0, style=bold, color=blue];
m0_203 -> m0_204  [key=0, style=solid];
m0_203 -> m0_205  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_204 -> m0_0  [key=2, style=dotted];
m0_204 -> m0_205  [key=0, style=solid];
m0_205 -> m0_39  [key=2, style=dotted];
m0_205 -> m0_206  [key=0, style=solid];
m0_206 -> m0_203  [key=0, style=bold, color=blue];
m0_336 -> m0_337  [key=0, style=solid];
m0_338 -> m0_0  [key=2, style=dotted];
m0_338 -> m0_339  [key=0, style=solid];
m0_339 -> m0_39  [key=2, style=dotted];
m0_339 -> m0_340  [key=0, style=solid];
m0_337 -> m0_338  [key=0, style=solid];
m0_337 -> m0_339  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_337 -> m0_341  [key=2, style=dotted];
m0_337 -> m0_342  [key=2, style=dotted];
m0_337 -> m0_343  [key=2, style=dotted];
m0_340 -> m0_336  [key=0, style=bold, color=blue];
m0_241 -> m0_242  [key=0, style=solid];
m0_243 -> m0_237  [key=2, style=dotted];
m0_243 -> m0_244  [key=0, style=solid];
m0_242 -> m0_243  [key=0, style=solid];
m0_244 -> m0_241  [key=0, style=bold, color=blue];
m0_348 -> m0_349  [key=0, style=solid];
m0_348 -> m0_350  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Options_With_Guid"];
m0_349 -> m0_0  [key=2, style=dotted];
m0_349 -> m0_350  [key=0, style=solid];
m0_350 -> m0_39  [key=2, style=dotted];
m0_350 -> m0_351  [key=0, style=solid];
m0_351 -> m0_348  [key=0, style=bold, color=blue];
m0_150 -> m0_151  [key=0, style=solid];
m0_152 -> m0_0  [key=2, style=dotted];
m0_152 -> m0_153  [key=0, style=solid];
m0_153 -> m0_39  [key=2, style=dotted];
m0_153 -> m0_154  [key=0, style=solid];
m0_151 -> m0_152  [key=0, style=solid];
m0_151 -> m0_153  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_151 -> m0_155  [key=2, style=dotted];
m0_151 -> m0_70  [key=2, style=dotted];
m0_154 -> m0_150  [key=0, style=bold, color=blue];
m0_352 -> m0_143  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m0_352 -> m0_147  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m0_353 -> m0_265  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_354 -> m0_272  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_355 -> m0_279  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_356 -> m0_286  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_357 -> m0_293  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_358 -> m0_307  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_359 -> m0_330  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_0 -> m2_1  [key=0, style=solid];
m2_0 -> m2_2  [key=1, style=dashed, color=darkseagreen4, label="params string[]"];
m2_0 -> m2_3  [key=1, style=dashed, color=darkseagreen4, label="System.Text.StringBuilder"];
m2_0 -> m2_4  [key=1, style=dashed, color=darkseagreen4, label="System.Text.StringBuilder"];
m2_0 -> m2_0  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Text.StringBuilder AppendWhen"];
m2_1 -> m2_2  [key=0, style=solid];
m2_1 -> m2_4  [key=0, style=solid];
m2_2 -> m2_3  [key=0, style=solid];
m2_2 -> m2_4  [key=0, style=solid];
m2_3 -> m2_2  [key=0, style=solid];
m2_3 -> m2_6  [key=2, style=dotted];
m2_4 -> m2_5  [key=0, style=solid];
m2_5 -> m2_0  [key=0, style=bold, color=blue];
m2_47 -> m2_48  [key=0, style=solid];
m2_47 -> m2_49  [key=1, style=dashed, color=darkseagreen4, label="System.Text.StringBuilder"];
m2_47 -> m2_50  [key=1, style=dashed, color=darkseagreen4, label="System.Text.StringBuilder"];
m2_47 -> m2_51  [key=1, style=dashed, color=darkseagreen4, label="System.Text.StringBuilder"];
m2_47 -> m2_47  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Text.StringBuilder TrimEndIfMatch"];
m2_48 -> m2_49  [key=0, style=solid];
m2_48 -> m2_51  [key=0, style=solid];
m2_49 -> m2_50  [key=0, style=solid];
m2_49 -> m2_51  [key=0, style=solid];
m2_50 -> m2_51  [key=0, style=solid];
m2_50 -> m2_46  [key=2, style=dotted];
m2_51 -> m2_52  [key=0, style=solid];
m2_52 -> m2_47  [key=0, style=bold, color=blue];
m2_14 -> m2_15  [key=0, style=solid];
m2_14 -> m2_16  [key=1, style=dashed, color=darkseagreen4, label="System.Text.StringBuilder"];
m2_14 -> m2_17  [key=1, style=dashed, color=darkseagreen4, label="System.Text.StringBuilder"];
m2_14 -> m2_14  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Text.StringBuilder AppendFormatWhen"];
m2_15 -> m2_16  [key=0, style=solid];
m2_15 -> m2_17  [key=0, style=solid];
m2_16 -> m2_17  [key=0, style=solid];
m2_16 -> m2_19  [key=2, style=dotted];
m2_17 -> m2_18  [key=0, style=solid];
m2_18 -> m2_14  [key=0, style=bold, color=blue];
m2_20 -> m2_21  [key=0, style=solid];
m2_21 -> m2_22  [key=0, style=solid];
m2_21 -> m2_6  [key=2, style=dotted];
m2_22 -> m2_20  [key=0, style=bold, color=blue];
m2_7 -> m2_8  [key=0, style=solid];
m2_7 -> m2_9  [key=1, style=dashed, color=darkseagreen4, label="params char[]"];
m2_7 -> m2_10  [key=1, style=dashed, color=darkseagreen4, label="System.Text.StringBuilder"];
m2_7 -> m2_11  [key=1, style=dashed, color=darkseagreen4, label="System.Text.StringBuilder"];
m2_7 -> m2_7  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Text.StringBuilder AppendWhen"];
m2_8 -> m2_9  [key=0, style=solid];
m2_8 -> m2_11  [key=0, style=solid];
m2_9 -> m2_10  [key=0, style=solid];
m2_9 -> m2_11  [key=0, style=solid];
m2_10 -> m2_9  [key=0, style=solid];
m2_10 -> m2_13  [key=2, style=dotted];
m2_11 -> m2_12  [key=0, style=solid];
m2_12 -> m2_7  [key=0, style=bold, color=blue];
m2_36 -> m2_37  [key=0, style=solid];
m2_37 -> m2_38  [key=0, style=solid];
m2_37 -> m2_39  [key=2, style=dotted];
m2_38 -> m2_36  [key=0, style=bold, color=blue];
m2_30 -> m2_31  [key=0, style=solid];
m2_30 -> m2_33  [key=1, style=dashed, color=darkseagreen4, label="System.Text.StringBuilder"];
m2_30 -> m2_34  [key=1, style=dashed, color=darkseagreen4, label="System.Text.StringBuilder"];
m2_30 -> m2_30  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Text.StringBuilder AppendIfNotEmpty"];
m2_31 -> m2_32  [key=0, style=solid];
m2_31 -> m2_34  [key=0, style=solid];
m2_31 -> m2_33  [key=1, style=dashed, color=darkseagreen4, label=value];
m2_33 -> m2_31  [key=0, style=solid];
m2_33 -> m2_6  [key=2, style=dotted];
m2_34 -> m2_35  [key=0, style=solid];
m2_32 -> m2_33  [key=0, style=solid];
m2_32 -> m2_31  [key=0, style=solid];
m2_35 -> m2_30  [key=0, style=bold, color=blue];
m2_40 -> m2_41  [key=0, style=solid];
m2_41 -> m2_42  [key=0, style=solid];
m2_42 -> m2_40  [key=0, style=bold, color=blue];
m2_43 -> m2_44  [key=0, style=solid];
m2_44 -> m2_45  [key=0, style=solid];
m2_44 -> m2_46  [key=2, style=dotted];
m2_45 -> m2_43  [key=0, style=bold, color=blue];
m2_23 -> m2_24  [key=0, style=solid];
m2_24 -> m2_25  [key=0, style=solid];
m2_24 -> m2_26  [key=2, style=dotted];
m2_25 -> m2_23  [key=0, style=bold, color=blue];
m2_27 -> m2_28  [key=0, style=solid];
m2_28 -> m2_29  [key=0, style=solid];
m2_28 -> m2_26  [key=2, style=dotted];
m2_29 -> m2_27  [key=0, style=bold, color=blue];
m3_96 -> m3_97  [key=0, style=solid];
m3_5 -> m3_6  [key=0, style=solid];
m3_5 -> m3_9  [key=2, style=dotted];
m3_5 -> m3_11  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_12 -> m3_13  [key=0, style=solid];
m3_12 -> m3_14  [key=2, style=dotted];
m3_6 -> m3_7  [key=0, style=solid];
m3_6 -> m3_10  [key=2, style=dotted];
m3_6 -> m3_15  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_16 -> m3_17  [key=0, style=solid];
m3_16 -> m3_18  [key=2, style=dotted];
m3_4 -> m3_5  [key=0, style=solid];
m3_4 -> m3_12  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m3_4 -> m3_6  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m3_4 -> m3_16  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m3_11 -> m3_12  [key=0, style=solid];
m3_7 -> m3_8  [key=0, style=solid];
m3_15 -> m3_16  [key=0, style=solid];
m3_8 -> m3_4  [key=0, style=bold, color=blue];
m3_13 -> m3_11  [key=0, style=bold, color=blue];
m3_17 -> m3_15  [key=0, style=bold, color=blue];
m3_93 -> m3_94  [key=0, style=solid];
m3_93 -> m3_66  [key=2, style=dotted];
m3_93 -> m3_67  [key=2, style=dotted];
m3_93 -> m3_48  [key=2, style=dotted];
m3_93 -> m3_69  [key=2, style=dotted];
m3_93 -> m3_95  [key=2, style=dotted];
m3_93 -> m3_96  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_93 -> m3_93  [key=1, style=dashed, color=darkseagreen4, label=p];
m3_100 -> m3_101  [key=0, style=solid];
m3_100 -> m3_102  [key=2, style=dotted];
m3_104 -> m3_105  [key=0, style=solid];
m3_104 -> m3_106  [key=2, style=dotted];
m3_108 -> m3_109  [key=0, style=solid];
m3_108 -> m3_106  [key=2, style=dotted];
m3_111 -> m3_112  [key=0, style=solid];
m3_111 -> m3_113  [key=2, style=dotted];
m3_82 -> m3_83  [key=0, style=solid];
m3_86 -> m3_87  [key=0, style=solid];
m3_99 -> m3_100  [key=0, style=solid];
m3_103 -> m3_104  [key=0, style=solid];
m3_107 -> m3_108  [key=0, style=solid];
m3_110 -> m3_111  [key=0, style=solid];
m3_114 -> m3_115  [key=0, style=solid];
m3_142 -> m3_143  [key=0, style=solid];
m3_145 -> m3_146  [key=0, style=solid];
m3_117 -> m3_118  [key=0, style=solid];
m3_121 -> m3_122  [key=0, style=solid];
m3_125 -> m3_126  [key=0, style=solid];
m3_129 -> m3_130  [key=0, style=solid];
m3_132 -> m3_133  [key=0, style=solid];
m3_136 -> m3_137  [key=0, style=solid];
m3_83 -> m3_84  [key=0, style=solid];
m3_83 -> m3_56  [key=2, style=dotted];
m3_83 -> m3_85  [key=2, style=dotted];
m3_84 -> m3_82  [key=0, style=bold, color=blue];
m3_87 -> m3_88  [key=0, style=solid];
m3_87 -> m3_89  [key=2, style=dotted];
m3_87 -> m3_90  [key=2, style=dotted];
m3_87 -> m3_91  [key=2, style=dotted];
m3_88 -> m3_86  [key=0, style=bold, color=blue];
m3_92 -> m3_93  [key=0, style=solid];
m3_94 -> m3_92  [key=0, style=bold, color=blue];
m3_97 -> m3_98  [key=0, style=solid];
m3_97 -> m3_56  [key=2, style=dotted];
m3_98 -> m3_96  [key=0, style=bold, color=blue];
m3_101 -> m3_99  [key=0, style=bold, color=blue];
m3_105 -> m3_103  [key=0, style=bold, color=blue];
m3_109 -> m3_107  [key=0, style=bold, color=blue];
m3_112 -> m3_110  [key=0, style=bold, color=blue];
m3_115 -> m3_116  [key=0, style=solid];
m3_115 -> m3_56  [key=2, style=dotted];
m3_116 -> m3_114  [key=0, style=bold, color=blue];
m3_118 -> m3_119  [key=0, style=solid];
m3_118 -> m3_120  [key=2, style=dotted];
m3_119 -> m3_117  [key=0, style=bold, color=blue];
m3_122 -> m3_123  [key=0, style=solid];
m3_122 -> m3_124  [key=2, style=dotted];
m3_123 -> m3_121  [key=0, style=bold, color=blue];
m3_126 -> m3_127  [key=0, style=solid];
m3_126 -> m3_128  [key=2, style=dotted];
m3_126 -> m3_120  [key=2, style=dotted];
m3_127 -> m3_125  [key=0, style=bold, color=blue];
m3_130 -> m3_131  [key=0, style=solid];
m3_130 -> m3_124  [key=2, style=dotted];
m3_131 -> m3_129  [key=0, style=bold, color=blue];
m3_133 -> m3_134  [key=0, style=solid];
m3_133 -> m3_128  [key=2, style=dotted];
m3_133 -> m3_135  [key=2, style=dotted];
m3_134 -> m3_132  [key=0, style=bold, color=blue];
m3_137 -> m3_138  [key=0, style=solid];
m3_137 -> m3_139  [key=2, style=dotted];
m3_137 -> m3_140  [key=2, style=dotted];
m3_137 -> m3_141  [key=2, style=dotted];
m3_138 -> m3_136  [key=0, style=bold, color=blue];
m3_143 -> m3_144  [key=0, style=solid];
m3_144 -> m3_142  [key=0, style=bold, color=blue];
m3_146 -> m3_147  [key=0, style=solid];
m3_147 -> m3_145  [key=0, style=bold, color=blue];
m3_0 -> m3_1  [key=0, style=solid];
m3_0 -> m3_5  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m3_0 -> m3_12  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m3_0 -> m3_6  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m3_0 -> m3_16  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m3_0 -> m3_3  [key=3, color=darkorchid, style=bold, label="method methodReturn CommandLine.ParserResult<T> Build"];
m3_1 -> m3_2  [key=0, style=solid];
m3_1 -> m3_3  [key=2, style=dotted];
m3_1 -> m3_4  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_1 -> m3_1  [key=3, color=darkorchid, style=bold, label="method methodReturn CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>> "];
m3_2 -> m3_0  [key=0, style=bold, color=blue];
m3_3 -> m3_19  [key=0, style=solid];
m3_3 -> m3_23  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Func<T>>"];
m3_3 -> m3_93  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Func<T>>"];
m3_3 -> m3_24  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m3_3 -> m3_25  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m3_3 -> m3_28  [key=1, style=dashed, color=darkseagreen4, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>"];
m3_3 -> m3_30  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m3_3 -> m3_100  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m3_3 -> m3_31  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m3_3 -> m3_104  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m3_3 -> m3_32  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m3_3 -> m3_108  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m3_3 -> m3_33  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m3_3 -> m3_111  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m3_3 -> m3_37  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Func<T>>"];
m3_19 -> m3_20  [key=0, style=solid];
m3_19 -> m3_48  [key=2, style=dotted];
m3_19 -> m3_82  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_19 -> m3_36  [key=1, style=dashed, color=darkseagreen4, label=typeInfo];
m3_19 -> m3_39  [key=1, style=dashed, color=darkseagreen4, label=typeInfo];
m3_23 -> m3_24  [key=0, style=solid];
m3_23 -> m3_27  [key=1, style=dashed, color=darkseagreen4, label=makeDefault];
m3_23 -> m3_23  [key=3, color=darkorchid, style=bold, label="Local variable System.Func<T> makeDefault"];
m3_24 -> m3_25  [key=0, style=solid];
m3_24 -> m3_28  [key=0, style=solid];
m3_24 -> m3_52  [key=2, style=dotted];
m3_25 -> m3_26  [key=0, style=solid];
m3_25 -> m3_53  [key=2, style=dotted];
m3_25 -> m3_54  [key=2, style=dotted];
m3_25 -> m3_27  [key=1, style=dashed, color=darkseagreen4, label=preprocessorErrors];
m3_28 -> m3_29  [key=0, style=solid];
m3_28 -> m3_57  [key=2, style=dotted];
m3_28 -> m3_43  [key=1, style=dashed, color=darkseagreen4, label=tokenizerResult];
m3_30 -> m3_31  [key=0, style=solid];
m3_30 -> m3_58  [key=2, style=dotted];
m3_30 -> m3_99  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_30 -> m3_32  [key=1, style=dashed, color=darkseagreen4, label=partitions];
m3_30 -> m3_33  [key=1, style=dashed, color=darkseagreen4, label=partitions];
m3_31 -> m3_32  [key=0, style=solid];
m3_31 -> m3_59  [key=2, style=dotted];
m3_31 -> m3_60  [key=2, style=dotted];
m3_31 -> m3_31  [key=1, style=dashed, color=darkseagreen4, label=pt];
m3_31 -> m3_103  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_31 -> m3_34  [key=1, style=dashed, color=darkseagreen4, label=optionSpecProps];
m3_31 -> m3_43  [key=1, style=dashed, color=darkseagreen4, label=optionSpecProps];
m3_32 -> m3_33  [key=0, style=solid];
m3_32 -> m3_61  [key=2, style=dotted];
m3_32 -> m3_60  [key=2, style=dotted];
m3_32 -> m3_32  [key=1, style=dashed, color=darkseagreen4, label=pt];
m3_32 -> m3_107  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_32 -> m3_34  [key=1, style=dashed, color=darkseagreen4, label=valueSpecProps];
m3_32 -> m3_43  [key=1, style=dashed, color=darkseagreen4, label=valueSpecProps];
m3_33 -> m3_34  [key=0, style=solid];
m3_33 -> m3_62  [key=2, style=dotted];
m3_33 -> m3_63  [key=2, style=dotted];
m3_33 -> m3_64  [key=2, style=dotted];
m3_33 -> m3_33  [key=1, style=dashed, color=darkseagreen4, label=token];
m3_33 -> m3_110  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_33 -> m3_111  [key=1, style=dashed, color=darkseagreen4, label=token];
m3_33 -> m3_43  [key=1, style=dashed, color=darkseagreen4, label=missingValueErrors];
m3_37 -> m3_38  [key=0, style=solid];
m3_37 -> m3_67  [key=2, style=dotted];
m3_37 -> m3_48  [key=2, style=dotted];
m3_37 -> m3_114  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_20 -> m3_21  [key=0, style=solid];
m3_20 -> m3_49  [key=2, style=dotted];
m3_20 -> m3_86  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_20 -> m3_23  [key=1, style=dashed, color=darkseagreen4, label=specProps];
m3_20 -> m3_93  [key=1, style=dashed, color=darkseagreen4, label=specProps];
m3_20 -> m3_31  [key=1, style=dashed, color=darkseagreen4, label=specProps];
m3_20 -> m3_32  [key=1, style=dashed, color=darkseagreen4, label=specProps];
m3_20 -> m3_39  [key=1, style=dashed, color=darkseagreen4, label=specProps];
m3_36 -> m3_37  [key=0, style=solid];
m3_36 -> m3_39  [key=0, style=solid];
m3_36 -> m3_66  [key=2, style=dotted];
m3_39 -> m3_40  [key=0, style=solid];
m3_39 -> m3_69  [key=2, style=dotted];
m3_39 -> m3_70  [key=2, style=dotted];
m3_39 -> m3_39  [key=1, style=dashed, color=darkseagreen4, label=sp];
m3_39 -> m3_41  [key=1, style=dashed, color=darkseagreen4, label=ctor];
m3_21 -> m3_22  [key=0, style=solid, color=red];
m3_21 -> m3_21  [key=1, style=dashed, color=darkseagreen4, label=pt];
m3_22 -> m3_23  [key=0, style=solid, color=red];
m3_22 -> m3_50  [key=2, style=dotted, color=red];
m3_22 -> m3_51  [key=2, style=dotted, color=red];
m3_22 -> m3_28  [key=1, style=dashed, color=red, label=optionSpecs];
m3_22 -> m3_30  [key=1, style=dashed, color=red, label=optionSpecs];
m3_22 -> m3_100  [key=1, style=dashed, color=red, label=optionSpecs];
m3_22 -> m3_33  [key=1, style=dashed, color=red, label=optionSpecs];
m3_27 -> m3_47  [key=0, style=solid];
m3_27 -> m3_55  [key=2, style=dotted];
m3_27 -> m3_56  [key=2, style=dotted];
m3_26 -> m3_27  [key=0, style=solid];
m3_26 -> m3_28  [key=0, style=solid];
m3_26 -> m3_52  [key=2, style=dotted];
m3_29 -> m3_30  [key=0, style=solid];
m3_29 -> m3_42  [key=1, style=dashed, color=darkseagreen4, label=tokens];
m3_43 -> m3_44  [key=0, style=solid];
m3_43 -> m3_78  [key=2, style=dotted];
m3_43 -> m3_45  [key=1, style=dashed, color=darkseagreen4, label=allErrors];
m3_42 -> m3_43  [key=0, style=solid];
m3_42 -> m3_76  [key=2, style=dotted];
m3_42 -> m3_77  [key=2, style=dotted];
m3_34 -> m3_35  [key=0, style=solid];
m3_34 -> m3_65  [key=2, style=dotted];
m3_34 -> m3_38  [key=1, style=dashed, color=darkseagreen4, label=specPropsWithValue];
m3_34 -> m3_40  [key=1, style=dashed, color=darkseagreen4, label=specPropsWithValue];
m3_34 -> m3_42  [key=1, style=dashed, color=darkseagreen4, label=specPropsWithValue];
m3_35 -> m3_36  [key=0, style=solid];
m3_38 -> m3_42  [key=0, style=solid];
m3_38 -> m3_68  [key=2, style=dotted];
m3_38 -> m3_38  [key=1, style=dashed, color=darkseagreen4, label=instance];
m3_38 -> m3_117  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_38 -> m3_121  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_38 -> m3_125  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_38 -> m3_129  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_38 -> m3_132  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_38 -> m3_136  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_38 -> m3_45  [key=1, style=dashed, color=darkseagreen4, label=instance];
m3_38 -> m3_46  [key=1, style=dashed, color=darkseagreen4, label=instance];
m3_40 -> m3_41  [key=0, style=solid];
m3_40 -> m3_71  [key=2, style=dotted];
m3_40 -> m3_72  [key=2, style=dotted];
m3_40 -> m3_73  [key=2, style=dotted];
m3_40 -> m3_48  [key=2, style=dotted];
m3_40 -> m3_74  [key=2, style=dotted];
m3_40 -> m3_40  [key=1, style=dashed, color=darkseagreen4, label=prms];
m3_40 -> m3_142  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_40 -> m3_145  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_41 -> m3_42  [key=0, style=solid];
m3_41 -> m3_75  [key=2, style=dotted];
m3_41 -> m3_45  [key=1, style=dashed, color=darkseagreen4, label=instance];
m3_41 -> m3_46  [key=1, style=dashed, color=darkseagreen4, label=instance];
m3_45 -> m3_47  [key=0, style=solid];
m3_45 -> m3_80  [key=2, style=dotted];
m3_46 -> m3_47  [key=0, style=solid];
m3_46 -> m3_81  [key=2, style=dotted];
m3_44 -> m3_45  [key=0, style=solid];
m3_44 -> m3_46  [key=0, style=solid];
m3_44 -> m3_79  [key=2, style=dotted];
m3_47 -> m3_3  [key=0, style=bold, color=blue];
m3_148 -> m3_5  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m3_148 -> m3_12  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m3_148 -> m3_6  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m3_148 -> m3_16  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m3_149 -> m3_12  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m3_149 -> m3_16  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m3_150 -> m3_93  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Func<T>>"];
m3_151 -> m3_93  [key=1, style=dashed, color=darkseagreen4, label=specProps];
m3_152 -> m3_100  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m3_152 -> m3_111  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m3_153 -> m3_100  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
m3_154 -> m3_104  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m3_154 -> m3_108  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m3_155 -> m3_111  [key=1, style=dashed, color=darkseagreen4, label=token];
m4_6 -> m4_7  [key=0, style=solid];
m4_7 -> m4_8  [key=0, style=solid];
m4_7 -> m4_3  [key=2, style=dotted];
m4_7 -> m4_4  [key=2, style=dotted];
m4_7 -> m4_5  [key=2, style=dotted];
m4_8 -> m4_6  [key=0, style=bold, color=blue];
m4_0 -> m4_1  [key=0, style=solid];
m4_1 -> m4_2  [key=0, style=solid];
m4_1 -> m4_3  [key=2, style=dotted];
m4_1 -> m4_4  [key=2, style=dotted];
m4_1 -> m4_5  [key=2, style=dotted];
m4_2 -> m4_0  [key=0, style=bold, color=blue];
}
