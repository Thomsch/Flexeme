digraph  {
n0 [cluster="Humanizer.Tests.StringDehumanizeTests.CanDehumanizeIntoAPascalCaseWord(string, string)", label="Entry Humanizer.Tests.StringDehumanizeTests.CanDehumanizeIntoAPascalCaseWord(string, string)", span="16-16"];
n1 [cluster="Humanizer.Tests.StringDehumanizeTests.CanDehumanizeIntoAPascalCaseWord(string, string)", label="Assert.Equal(expectedResult, input.Dehumanize())", span="18-18"];
n2 [cluster="Humanizer.Tests.StringDehumanizeTests.CanDehumanizeIntoAPascalCaseWord(string, string)", label="Exit Humanizer.Tests.StringDehumanizeTests.CanDehumanizeIntoAPascalCaseWord(string, string)", span="16-16"];
n3 [cluster="string.Dehumanize()", label="Entry string.Dehumanize()", span="14-14"];
n4 [cluster="Unk.Equal", label="Entry Unk.Equal", span=""];
m0_11 [cluster="Humanizer.Tests.ToQuantityTests.ToQuantityWords(string, int, string)", file="SpecificationExtensions.cs", label="Entry Humanizer.Tests.ToQuantityTests.ToQuantityWords(string, int, string)", span="72-72"];
m0_12 [cluster="Humanizer.Tests.ToQuantityTests.ToQuantityWords(string, int, string)", file="SpecificationExtensions.cs", label="Assert.Equal(expected, word.ToQuantity(quatity, ShowQuantityAs.Words))", span="74-74"];
m0_13 [cluster="Humanizer.Tests.ToQuantityTests.ToQuantityWords(string, int, string)", file="SpecificationExtensions.cs", label="Exit Humanizer.Tests.ToQuantityTests.ToQuantityWords(string, int, string)", span="72-72"];
m0_8 [cluster="Humanizer.Tests.ToQuantityTests.ToQuantityNumeric(string, int, string)", file="SpecificationExtensions.cs", label="Entry Humanizer.Tests.ToQuantityTests.ToQuantityNumeric(string, int, string)", span="53-53"];
m0_9 [cluster="Humanizer.Tests.ToQuantityTests.ToQuantityNumeric(string, int, string)", color=red, community=0, file="SpecificationExtensions.cs", label="0: Assert.Equal(expected, word.ToQuantity(quatity, ShowQuantityAs.Numeric))", span="56-56"];
m0_10 [cluster="Humanizer.Tests.ToQuantityTests.ToQuantityNumeric(string, int, string)", file="SpecificationExtensions.cs", label="Exit Humanizer.Tests.ToQuantityTests.ToQuantityNumeric(string, int, string)", span="53-53"];
m0_5 [cluster="Humanizer.Tests.ToQuantityTests.ToQuantityWithNoQuantity(string, int, string)", file="SpecificationExtensions.cs", label="Entry Humanizer.Tests.ToQuantityTests.ToQuantityWithNoQuantity(string, int, string)", span="36-36"];
m0_6 [cluster="Humanizer.Tests.ToQuantityTests.ToQuantityWithNoQuantity(string, int, string)", file="SpecificationExtensions.cs", label="Assert.Equal(expected, word.ToQuantity(quatity, ShowQuantityAs.None))", span="38-38"];
m0_7 [cluster="Humanizer.Tests.ToQuantityTests.ToQuantityWithNoQuantity(string, int, string)", file="SpecificationExtensions.cs", label="Exit Humanizer.Tests.ToQuantityTests.ToQuantityWithNoQuantity(string, int, string)", span="36-36"];
m0_3 [cluster="string.ToQuantity(int, Humanizer.ShowQuantityAs)", file="SpecificationExtensions.cs", label="Entry string.ToQuantity(int, Humanizer.ShowQuantityAs)", span="25-25"];
m0_0 [cluster="Humanizer.Tests.ToQuantityTests.ToQuantity(string, int, string)", file="SpecificationExtensions.cs", label="Entry Humanizer.Tests.ToQuantityTests.ToQuantity(string, int, string)", span="19-19"];
m0_1 [cluster="Humanizer.Tests.ToQuantityTests.ToQuantity(string, int, string)", file="SpecificationExtensions.cs", label="Assert.Equal(expected, word.ToQuantity(quatity))", span="21-21"];
m0_2 [cluster="Humanizer.Tests.ToQuantityTests.ToQuantity(string, int, string)", file="SpecificationExtensions.cs", label="Exit Humanizer.Tests.ToQuantityTests.ToQuantity(string, int, string)", span="19-19"];
m1_11 [cluster="lambda expression", file="ValueMapper.cs", label="Entry lambda expression", span="20-20"];
m1_60 [cluster="CommandLine.Core.SpecificationProperty.WithValue(CommandLine.Infrastructure.Maybe<object>)", file="ValueMapper.cs", label="Entry CommandLine.Core.SpecificationProperty.WithValue(CommandLine.Infrastructure.Maybe<object>)", span="18-18"];
m1_4 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="ValueMapper.cs", label="Entry CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", span="25-25"];
m1_5 [cluster="Unk.Select", file="ValueMapper.cs", label="Entry Unk.Select", span=""];
m1_6 [cluster="Unk.>", file="ValueMapper.cs", label="Entry Unk.>", span=""];
m1_7 [cluster="Unk.Create", file="ValueMapper.cs", label="Entry Unk.Create", span=""];
m1_8 [cluster="lambda expression", file="ValueMapper.cs", label="Entry lambda expression", span="19-19"];
m1_32 [cluster="System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", file="ValueMapper.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", span="62-62"];
m1_43 [cluster="CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", file="ValueMapper.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", span="149-149"];
m1_34 [cluster="CommandLine.Core.Specification.CountOfMaxNumberOfValues()", file="ValueMapper.cs", label="Entry CommandLine.Core.Specification.CountOfMaxNumberOfValues()", span="67-67"];
m1_25 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="ValueMapper.cs", label="pt.Specification.Max.IsJust()\r\n                && next.IsNothing()\r\n                && values.Skip(taken.Count()).Any()", span="44-46"];
m1_0 [cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="ValueMapper.cs", label="Entry CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", span="11-11"];
m1_1 [cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="ValueMapper.cs", label="var propAndErrors = MapValuesImpl(specProps, values, converter)", span="16-16"];
m1_2 [cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="ValueMapper.cs", label="return StatePair.Create(\r\n                propAndErrors.Select(pe => pe.Item1),\r\n                propAndErrors.Select(pe => pe.Item2)\r\n                    .OfType<Just<Error>>().Select(e => e.Value)\r\n                );", span="18-22"];
m1_56 [cluster="CommandLine.Core.Specification.IsValue()", file="ValueMapper.cs", label="Entry CommandLine.Core.Specification.IsValue()", span="15-15"];
m1_71 [cluster="CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", file="ValueMapper.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", span="134-134"];
m1_44 [cluster="CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", file="ValueMapper.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", span="144-144"];
m1_42 [cluster="Unk.ToMaybe", file="ValueMapper.cs", label="Entry Unk.ToMaybe", span=""];
m1_46 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="ValueMapper.cs", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="324-324"];
m1_45 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="ValueMapper.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
m1_39 [cluster="System.Tuple.Create<T1, T2>(T1, T2)", file="ValueMapper.cs", label="Entry System.Tuple.Create<T1, T2>(T1, T2)", span="0-0"];
m1_10 [cluster="lambda expression", file="ValueMapper.cs", label="Exit lambda expression", span="19-19"];
m1_22 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="ValueMapper.cs", label="yield return\r\n                    Tuple.Create(pt, MakeErrorInCaseOfMinConstraint(pt.Specification));", span="38-39"];
m1_14 [cluster="CommandLine.Internal.OptionInfo.CreateMap(object, System.Collections.Generic.IList<CommandLine.Internal.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.CommandLineParserSettings)", file="ValueMapper.cs", label=verbs, span="68-68"];
m1_58 [cluster="lambda expression", file="ValueMapper.cs", label="Tuple.Create(pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>())", span="57-57"];
m1_57 [cluster="lambda expression", file="ValueMapper.cs", label="Entry lambda expression", span="57-57"];
m1_59 [cluster="lambda expression", file="ValueMapper.cs", label="Exit lambda expression", span="57-57"];
m1_50 [cluster="lambda expression", file="ValueMapper.cs", label="Entry lambda expression", span="35-35"];
m1_53 [cluster="lambda expression", file="ValueMapper.cs", label="Entry lambda expression", span="43-43"];
m1_52 [cluster="lambda expression", file="ValueMapper.cs", label="Exit lambda expression", span="35-35"];
m1_51 [cluster="lambda expression", file="ValueMapper.cs", label=n, span="35-35"];
m1_55 [cluster="lambda expression", file="ValueMapper.cs", label="Exit lambda expression", span="43-43"];
m1_54 [cluster="lambda expression", file="ValueMapper.cs", label="s.Specification.IsValue()", span="43-43"];
m1_9 [cluster="System.Activator.CreateInstance(System.Type)", file="ValueMapper.cs", label="Entry System.Activator.CreateInstance(System.Type)", span="0-0"];
m1_13 [cluster="CommandLine.Internal.OptionInfo.CreateMap(object, System.Collections.Generic.IList<CommandLine.Internal.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.CommandLineParserSettings)", file="ValueMapper.cs", label="var map = new OptionMap(verbs.Count, settings)", span="67-67"];
m1_12 [cluster="CommandLine.Internal.OptionInfo.CreateMap(object, System.Collections.Generic.IList<CommandLine.Internal.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.CommandLineParserSettings)", file="ValueMapper.cs", label="Entry CommandLine.Internal.OptionInfo.CreateMap(object, System.Collections.Generic.IList<CommandLine.Internal.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.CommandLineParserSettings)", span="64-64"];
m1_15 [cluster="CommandLine.Internal.OptionInfo.CreateMap(object, System.Collections.Generic.IList<CommandLine.Internal.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.CommandLineParserSettings)", file="ValueMapper.cs", label="var optionInfo = new OptionInfo(verb.Right, verb.Left)\r\n                    {\r\n                        HasParameterLessCtor = verb.Left.PropertyType.GetConstructor(Type.EmptyTypes) != null\r\n\r\n                    }", span="70-74"];
m1_16 [cluster="CommandLine.Internal.OptionInfo.CreateMap(object, System.Collections.Generic.IList<CommandLine.Internal.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.CommandLineParserSettings)", file="ValueMapper.cs", label="!optionInfo.HasParameterLessCtor && verb.Left.GetValue(target, null) == null", span="75-75"];
m1_3 [cluster="System.Reflection.PropertyInfo.GetValue(object, object[])", file="ValueMapper.cs", label="Entry System.Reflection.PropertyInfo.GetValue(object, object[])", span="0-0"];
m1_40 [cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="ValueMapper.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0"];
m1_33 [cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="ValueMapper.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0"];
m1_37 [cluster="System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", file="ValueMapper.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", span="0-0"];
m1_48 [cluster="System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", file="ValueMapper.cs", label="Entry System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", span="0-0"];
m1_38 [cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", file="ValueMapper.cs", label="Entry CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", span="83-83"];
m1_72 [cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", color=green, community=0, file="ValueMapper.cs", label="0: return specification.Min.IsJust()\r\n                ? Maybe.Just<Error>(new SequenceOutOfRangeError(NameInfo.EmptyName))\r\n                : Maybe.Nothing<Error>();", span="85-87"];
m1_73 [cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", file="ValueMapper.cs", label="Exit CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", span="83-83"];
m1_47 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="ValueMapper.cs", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68"];
m1_49 [cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="ValueMapper.cs", label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="313-313"];
m1_23 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="ValueMapper.cs", label="yield break;", span="40-40"];
m1_24 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="ValueMapper.cs", label="var next = specProps.Skip(1).FirstOrDefault(s => s.Specification.IsValue()).ToMaybe()", span="43-43"];
m1_61 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="ValueMapper.cs", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63"];
m1_35 [cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="ValueMapper.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0"];
m1_62 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs", label="Entry CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", span="67-67"];
m1_63 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", color=green, community=0, file="ValueMapper.cs", label="0: specification.TargetType", span="69-69"];
m1_64 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", color=green, community=0, file="ValueMapper.cs", label="0: TargetType.Scalar", span="71-71"];
m1_66 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", color=green, community=0, file="ValueMapper.cs", label="0: TargetType.Sequence", span="73-73"];
m1_67 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", color=green, community=0, file="ValueMapper.cs", label="0: specification.Max.IsJust()", span="74-74"];
m1_68 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", color=green, community=0, file="ValueMapper.cs", label="0: return Maybe.Just(specification.Max.FromJust());", span="76-76"];
m1_69 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", color=green, community=0, file="ValueMapper.cs", label="0: return Maybe.Nothing<int>();", span="80-80"];
m1_65 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", color=green, community=0, file="ValueMapper.cs", label="0: return Maybe.Just(1);", span="72-72"];
m1_70 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs", label="Exit CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", span="67-67"];
m1_41 [cluster="Unk.FirstOrDefault", file="ValueMapper.cs", label="Entry Unk.FirstOrDefault", span=""];
m1_19 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="ValueMapper.cs", label="var pt = specProps.First()", span="34-34"];
m1_18 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="ValueMapper.cs", label="yield break;", span="32-32"];
m1_20 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="ValueMapper.cs", label="var taken = values.Take(pt.Specification.CountOfMaxNumberOfValues().Return(n => n, values.Count()))", span="35-35"];
m1_17 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="ValueMapper.cs", label="specProps.Empty()", span="30-30"];
m1_21 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="ValueMapper.cs", label="taken.Empty()", span="36-36"];
m1_26 [cluster="string.FormatInvariant(params object[])", file="ValueMapper.cs", label="Entry string.FormatInvariant(params object[])", span="58-58"];
m1_28 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="ValueMapper.cs", label="yield return\r\n                converter(taken, pt.Property.PropertyType, pt.Specification.TargetType != TargetType.Sequence)\r\n                    .Return(\r\n                        converted => Tuple.Create(pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>()),\r\n                        Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                            pt, Maybe.Just<Error>(new BadFormatConversionError(NameInfo.EmptyName))));", span="54-59"];
m1_27 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="ValueMapper.cs", label="CommandLine.Internal.OptionInfo", span=""];
m1_29 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="ValueMapper.cs", label="MapValuesImpl(specProps.Skip(1), values.Skip(taken.Count()), converter)", span="61-61"];
m1_30 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="ValueMapper.cs", label="yield return value;", span="63-63"];
m1_31 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="ValueMapper.cs", label="Exit CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", span="25-25"];
m1_36 [cluster="CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", file="ValueMapper.cs", label="Entry CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", span="100-100"];
m1_74 [file="ValueMapper.cs", label=pt, span=""];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=2, style=dotted];
n1 -> n4  [key=2, style=dotted];
n2 -> n0  [color=blue, key=0, style=bold];
m0_11 -> m0_12  [key=0, style=solid];
m0_12 -> m0_13  [key=0, style=solid];
m0_12 -> m0_3  [key=2, style=dotted];
m0_12 -> n4  [key=2, style=dotted];
m0_13 -> m0_11  [color=blue, key=0, style=bold];
m0_8 -> m0_9  [color=red, key=0, style=solid];
m0_9 -> m0_10  [color=red, key=0, style=solid];
m0_9 -> m0_3  [color=red, key=2, style=dotted];
m0_9 -> n4  [color=red, key=2, style=dotted];
m0_10 -> m0_8  [color=blue, key=0, style=bold];
m0_5 -> m0_6  [key=0, style=solid];
m0_6 -> m0_7  [key=0, style=solid];
m0_6 -> m0_3  [key=2, style=dotted];
m0_6 -> n4  [key=2, style=dotted];
m0_7 -> m0_5  [color=blue, key=0, style=bold];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_3  [key=2, style=dotted];
m0_1 -> n4  [key=2, style=dotted];
m0_2 -> m0_0  [color=blue, key=0, style=bold];
m1_11 -> m1_12  [key=0, style=solid];
m1_4 -> m1_5  [key=0, style=solid];
m1_4 -> m1_25  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m1_4 -> m1_26  [color=crimson, key=0, style=bold];
m1_4 -> m1_28  [color=crimson, key=0, style=bold];
m1_4 -> m1_22  [color=crimson, key=0, style=bold];
m1_4 -> m1_17  [key=0, style=solid];
m1_4 -> m1_18  [color=crimson, key=0, style=bold];
m1_4 -> m1_23  [color=crimson, key=0, style=bold];
m1_4 -> m1_27  [color=crimson, key=0, style=bold];
m1_4 -> m1_30  [color=crimson, key=0, style=bold];
m1_4 -> m1_19  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m1_4 -> m1_20  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m1_4 -> m1_24  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m1_4 -> m1_29  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m1_5 -> m1_6  [key=0, style=solid];
m1_5 -> m1_8  [key=0, style=solid];
m1_5 -> m1_9  [key=2, style=dotted];
m1_5 -> m1_10  [key=2, style=dotted];
m1_6 -> m1_7  [key=0, style=solid];
m1_7 -> m1_8  [key=0, style=solid];
m1_7 -> m1_11  [key=2, style=dotted];
m1_8 -> m1_4  [color=blue, key=0, style=bold];
m1_8 -> m1_9  [key=0, style=solid];
m1_25 -> m1_43  [key=2, style=dotted];
m1_25 -> m1_26  [key=0, style=solid];
m1_25 -> m1_28  [key=0, style=solid];
m1_25 -> m1_44  [key=2, style=dotted];
m1_25 -> m1_35  [key=2, style=dotted];
m1_25 -> m1_40  [key=2, style=dotted];
m1_25 -> m1_45  [key=2, style=dotted];
m1_0 -> m1_1  [key=0, style=solid];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_3  [key=2, style=dotted];
m1_1 -> m1_4  [key=2, style=dotted];
m1_2 -> m1_0  [color=blue, key=0, style=bold];
m1_2 -> m1_3  [key=0, style=solid];
m1_2 -> m1_5  [key=2, style=dotted];
m1_2 -> m1_6  [key=2, style=dotted];
m1_2 -> m1_7  [key=2, style=dotted];
m1_2 -> m1_8  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_2 -> m1_11  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_2 -> m1_14  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_10 -> m1_8  [color=blue, key=0, style=bold];
m1_22 -> m1_38  [key=2, style=dotted];
m1_22 -> m1_23  [key=0, style=solid];
m1_22 -> m1_39  [key=2, style=dotted];
m1_14 -> m1_15  [key=0, style=solid];
m1_14 -> m1_19  [key=0, style=solid];
m1_14 -> m1_16  [color=darkseagreen4, key=1, label=verb, style=dashed];
m1_14 -> m1_17  [color=darkseagreen4, key=1, label=verb, style=dashed];
m1_14 -> m1_18  [color=darkseagreen4, key=1, label=verb, style=dashed];
m1_58 -> m1_47  [key=2, style=dotted];
m1_58 -> m1_61  [key=2, style=dotted];
m1_58 -> m1_59  [key=0, style=solid];
m1_58 -> m1_60  [key=2, style=dotted];
m1_58 -> m1_39  [key=2, style=dotted];
m1_57 -> m1_58  [key=0, style=solid];
m1_59 -> m1_57  [color=blue, key=0, style=bold];
m1_50 -> m1_51  [key=0, style=solid];
m1_53 -> m1_54  [key=0, style=solid];
m1_52 -> m1_50  [color=blue, key=0, style=bold];
m1_51 -> m1_52  [key=0, style=solid];
m1_55 -> m1_53  [color=blue, key=0, style=bold];
m1_54 -> m1_55  [key=0, style=solid];
m1_54 -> m1_56  [key=2, style=dotted];
m1_9 -> m1_10  [key=0, style=solid];
m1_13 -> m1_11  [color=blue, key=0, style=bold];
m1_13 -> m1_14  [key=0, style=solid];
m1_13 -> m1_22  [key=2, style=dotted];
m1_13 -> m1_18  [color=darkseagreen4, key=1, label=map, style=dashed];
m1_13 -> m1_19  [color=darkseagreen4, key=1, label=map, style=dashed];
m1_13 -> m1_20  [color=darkseagreen4, key=1, label=map, style=dashed];
m1_12 -> m1_13  [key=0, style=solid];
m1_12 -> m1_14  [color=darkseagreen4, key=1, label="System.Collections.Generic.IList<CommandLine.Internal.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>", style=dashed];
m1_12 -> m1_16  [color=darkseagreen4, key=1, label=object, style=dashed];
m1_12 -> m1_19  [color=darkseagreen4, key=1, label=object, style=dashed];
m1_15 -> m1_16  [key=0, style=solid];
m1_15 -> m1_23  [key=2, style=dotted];
m1_15 -> m1_24  [key=2, style=dotted];
m1_15 -> m1_18  [color=darkseagreen4, key=1, label=optionInfo, style=dashed];
m1_16 -> m1_14  [color=blue, key=0, style=bold];
m1_16 -> m1_17  [key=0, style=solid];
m1_16 -> m1_18  [key=0, style=solid];
m1_16 -> m1_3  [key=2, style=dotted];
m1_3 -> m1_0  [color=blue, key=0, style=bold];
m1_38 -> m1_72  [color=green, key=0, style=solid];
m1_72 -> m1_73  [color=green, key=0, style=solid];
m1_72 -> m1_43  [color=green, key=2, style=dotted];
m1_72 -> m1_46  [color=green, key=2, style=dotted];
m1_72 -> m1_47  [color=green, key=2, style=dotted];
m1_72 -> m1_61  [color=green, key=2, style=dotted];
m1_73 -> m1_38  [color=blue, key=0, style=bold];
m1_23 -> m1_24  [key=0, style=solid];
m1_24 -> m1_25  [key=0, style=solid];
m1_24 -> m1_40  [key=2, style=dotted];
m1_24 -> m1_41  [key=2, style=dotted];
m1_24 -> m1_42  [key=2, style=dotted];
m1_24 -> m1_53  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_62 -> m1_63  [color=green, key=0, style=solid];
m1_62 -> m1_67  [color=green, key=1, label="CommandLine.Core.Specification", style=dashed];
m1_62 -> m1_68  [color=green, key=1, label="CommandLine.Core.Specification", style=dashed];
m1_63 -> m1_64  [color=green, key=0, style=solid];
m1_63 -> m1_66  [color=green, key=0, style=solid];
m1_64 -> m1_65  [color=green, key=0, style=solid];
m1_66 -> m1_67  [color=green, key=0, style=solid];
m1_67 -> m1_68  [color=green, key=0, style=solid];
m1_67 -> m1_69  [color=green, key=0, style=solid];
m1_67 -> m1_43  [color=green, key=2, style=dotted];
m1_68 -> m1_70  [color=green, key=0, style=solid];
m1_68 -> m1_71  [color=green, key=2, style=dotted];
m1_68 -> m1_47  [color=green, key=2, style=dotted];
m1_69 -> m1_70  [color=green, key=0, style=solid];
m1_69 -> m1_61  [color=green, key=2, style=dotted];
m1_65 -> m1_70  [color=green, key=0, style=solid];
m1_65 -> m1_47  [color=green, key=2, style=dotted];
m1_70 -> m1_62  [color=blue, key=0, style=bold];
m1_19 -> m1_20  [key=0, style=solid];
m1_19 -> m1_25  [color=darkseagreen4, key=1, label=pt, style=dashed];
m1_19 -> m1_26  [color=darkseagreen4, key=1, label=pt, style=dashed];
m1_19 -> m1_28  [color=darkseagreen4, key=1, label=pt, style=dashed];
m1_19 -> m1_58  [color=darkseagreen4, key=1, label=pt, style=dashed];
m1_19 -> m1_22  [color=darkseagreen4, key=1, label=pt, style=dashed];
m1_19 -> m1_33  [key=2, style=dotted];
m1_18 -> m1_14  [key=0, style=solid];
m1_18 -> m1_19  [key=0, style=solid];
m1_20 -> m1_21  [key=0, style=solid];
m1_20 -> m1_25  [color=darkseagreen4, key=1, label=taken, style=dashed];
m1_20 -> m1_28  [color=darkseagreen4, key=1, label=taken, style=dashed];
m1_20 -> m1_34  [key=2, style=dotted];
m1_20 -> m1_35  [key=2, style=dotted];
m1_20 -> m1_36  [key=2, style=dotted];
m1_20 -> m1_37  [key=2, style=dotted];
m1_20 -> m1_50  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_20 -> m1_29  [color=darkseagreen4, key=1, label=taken, style=dashed];
m1_17 -> m1_21  [key=0, style=solid];
m1_17 -> m1_25  [key=2, style=dotted];
m1_17 -> m1_26  [key=2, style=dotted];
m1_17 -> m1_19  [key=0, style=solid];
m1_17 -> m1_18  [key=0, style=solid];
m1_17 -> m1_32  [key=2, style=dotted];
m1_21 -> m1_12  [color=blue, key=0, style=bold];
m1_21 -> m1_22  [key=0, style=solid];
m1_21 -> m1_24  [key=0, style=solid];
m1_21 -> m1_32  [key=2, style=dotted];
m1_26 -> m1_47  [key=2, style=dotted];
m1_26 -> m1_46  [key=2, style=dotted];
m1_26 -> m1_27  [key=0, style=solid];
m1_26 -> m1_39  [key=2, style=dotted];
m1_28 -> m1_47  [key=2, style=dotted];
m1_28 -> m1_29  [key=0, style=solid];
m1_28 -> m1_48  [key=2, style=dotted];
m1_28 -> m1_49  [key=2, style=dotted];
m1_28 -> m1_39  [key=2, style=dotted];
m1_28 -> m1_36  [key=2, style=dotted];
m1_28 -> m1_57  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_27 -> m1_28  [key=0, style=solid];
m1_27 -> m1_1  [color=darkseagreen4, key=1, label="CommandLine.Internal.OptionInfo", style=dashed];
m1_27 -> m1_5  [color=darkseagreen4, key=1, label="CommandLine.Internal.OptionInfo", style=dashed];
m1_29 -> m1_4  [key=2, style=dotted];
m1_29 -> m1_35  [key=2, style=dotted];
m1_29 -> m1_40  [key=2, style=dotted];
m1_29 -> m1_30  [key=0, style=solid];
m1_29 -> m1_31  [key=0, style=solid];
m1_30 -> m1_29  [key=0, style=solid];
m1_31 -> m1_4  [color=blue, key=0, style=bold];
m1_74 -> m1_58  [color=darkseagreen4, key=1, label=pt, style=dashed];
}
