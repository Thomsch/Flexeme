digraph  {
n28 [label="CommandLine.Internal.OneCharStringEnumerator", span=""];
n0 [label="Entry CommandLine.Internal.OneCharStringEnumerator.OneCharStringEnumerator(string)", span="37-37", cluster="CommandLine.Internal.OneCharStringEnumerator.OneCharStringEnumerator(string)"];
n1 [label="Assumes.NotNullOrEmpty(value, ''value'')", span="39-39", cluster="CommandLine.Internal.OneCharStringEnumerator.OneCharStringEnumerator(string)"];
n2 [label="_data = value", span="40-40", cluster="CommandLine.Internal.OneCharStringEnumerator.OneCharStringEnumerator(string)", color=red, community=0];
n5 [label="Entry CommandLine.Utils.Assumes.NotNullOrEmpty(string, string)", span="54-54", cluster="CommandLine.Utils.Assumes.NotNullOrEmpty(string, string)"];
n3 [label="_index = -1", span="41-41", cluster="CommandLine.Internal.OneCharStringEnumerator.OneCharStringEnumerator(string)"];
n4 [label="Exit CommandLine.Internal.OneCharStringEnumerator.OneCharStringEnumerator(string)", span="37-37", cluster="CommandLine.Internal.OneCharStringEnumerator.OneCharStringEnumerator(string)"];
n6 [label="Entry CommandLine.Internal.OneCharStringEnumerator.MoveNext()", span="75-75", cluster="CommandLine.Internal.OneCharStringEnumerator.MoveNext()"];
n7 [label="_index < (_data.Length - 1)", span="77-77", cluster="CommandLine.Internal.OneCharStringEnumerator.MoveNext()"];
n8 [label="_index++", span="79-79", cluster="CommandLine.Internal.OneCharStringEnumerator.MoveNext()"];
n11 [label="_index = _data.Length", span="83-83", cluster="CommandLine.Internal.OneCharStringEnumerator.MoveNext()"];
n9 [label="_currentElement = _data.Substring(_index, 1)", span="80-80", cluster="CommandLine.Internal.OneCharStringEnumerator.MoveNext()"];
n10 [label="return true;", span="81-81", cluster="CommandLine.Internal.OneCharStringEnumerator.MoveNext()"];
n14 [label="Entry string.Substring(int, int)", span="0-0", cluster="string.Substring(int, int)"];
n12 [label="return false;", span="84-84", cluster="CommandLine.Internal.OneCharStringEnumerator.MoveNext()"];
n13 [label="Exit CommandLine.Internal.OneCharStringEnumerator.MoveNext()", span="75-75", cluster="CommandLine.Internal.OneCharStringEnumerator.MoveNext()"];
n15 [label="Entry CommandLine.Internal.OneCharStringEnumerator.GetRemainingFromNext()", span="87-87", cluster="CommandLine.Internal.OneCharStringEnumerator.GetRemainingFromNext()"];
n16 [label="_index == -1", span="89-89", cluster="CommandLine.Internal.OneCharStringEnumerator.GetRemainingFromNext()"];
n17 [label="throw new InvalidOperationException();", span="89-89", cluster="CommandLine.Internal.OneCharStringEnumerator.GetRemainingFromNext()"];
n18 [label="_index > _data.Length", span="90-90", cluster="CommandLine.Internal.OneCharStringEnumerator.GetRemainingFromNext()"];
n19 [label="throw new InvalidOperationException();", span="90-90", cluster="CommandLine.Internal.OneCharStringEnumerator.GetRemainingFromNext()"];
n20 [label="return _data.Substring(_index + 1);", span="91-91", cluster="CommandLine.Internal.OneCharStringEnumerator.GetRemainingFromNext()"];
n21 [label="Exit CommandLine.Internal.OneCharStringEnumerator.GetRemainingFromNext()", span="87-87", cluster="CommandLine.Internal.OneCharStringEnumerator.GetRemainingFromNext()"];
n23 [label="Entry string.Substring(int)", span="0-0", cluster="string.Substring(int)"];
n22 [label="Entry System.InvalidOperationException.InvalidOperationException()", span="0-0", cluster="System.InvalidOperationException.InvalidOperationException()"];
n24 [label="Entry CommandLine.Internal.OneCharStringEnumerator.MovePrevious()", span="94-94", cluster="CommandLine.Internal.OneCharStringEnumerator.MovePrevious()"];
n25 [label="throw new NotSupportedException();", span="94-94", cluster="CommandLine.Internal.OneCharStringEnumerator.MovePrevious()"];
n26 [label="Exit CommandLine.Internal.OneCharStringEnumerator.MovePrevious()", span="94-94", cluster="CommandLine.Internal.OneCharStringEnumerator.MovePrevious()"];
n27 [label="Entry System.NotSupportedException.NotSupportedException()", span="0-0", cluster="System.NotSupportedException.NotSupportedException()"];
d33 [label="return specProps =>\r\n            {\r\n                List<string> setsWithTrue =\r\n                    specProps\r\n                        .Where(sp => sp.Specification.IsOption()\r\n                            && sp.Value.IsJust() && sp.Specification.Required)\r\n                        .Select(s => ((OptionSpecification)s.Specification).SetName).ToList();\r\n                \r\n                var requiredButEmpty =\r\n                    specProps\r\n                        .Where(sp => sp.Specification.IsOption())\r\n                        .Where(sp => sp.Value.IsNothing()\r\n                            && sp.Specification.Required\r\n                            && !setsWithTrue.Contains(((OptionSpecification)sp.Specification).SetName))\r\n                    .Concat(specProps\r\n                        .Where(sp => sp.Specification.IsValue()\r\n                            && sp.Value.IsNothing()\r\n                            && sp.Specification.Required)).ToList();\r\n                    if (requiredButEmpty.Any()) {\r\n                        return requiredButEmpty.Select(s => Maybe.Just<Error>(new MissingRequiredOptionError(\r\n                            NameInfo.FromSpecification(s.Specification))));\r\n                    }\r\n                    return Enumerable.Empty<Nothing<Error>>();\r\n                };", span="39-62", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", color=green, community=0];
d32 [label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="37-37", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()"];
d34 [label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="37-37", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()"];
d36 [label="List<string> setsWithTrue =\r\n                    specProps\r\n                        .Where(sp => sp.Specification.IsOption()\r\n                            && sp.Value.IsJust() && sp.Specification.Required)\r\n                        .Select(s => ((OptionSpecification)s.Specification).SetName).ToList()", span="41-45", cluster="lambda expression"];
d37 [label="var requiredButEmpty =\r\n                    specProps\r\n                        .Where(sp => sp.Specification.IsOption())\r\n                        .Where(sp => sp.Value.IsNothing()\r\n                            && sp.Specification.Required\r\n                            && !setsWithTrue.Contains(((OptionSpecification)sp.Specification).SetName))\r\n                    .Concat(specProps\r\n                        .Where(sp => sp.Specification.IsValue()\r\n                            && sp.Value.IsNothing()\r\n                            && sp.Specification.Required)).ToList()", span="47-56", cluster="lambda expression", color=green, community=0];
d35 [label="Entry lambda expression", span="39-62", cluster="lambda expression"];
d38 [label="requiredButEmpty.Any()", span="57-57", cluster="lambda expression", color=green, community=0];
d10 [label="Entry Unk.Where", span="", cluster="Unk.Where"];
d43 [label="Entry Unk.Concat", span="", cluster="Unk.Concat"];
d42 [label="Entry Unk.ToList", span="", cluster="Unk.ToList"];
d52 [label="Entry lambda expression", span="49-49", cluster="lambda expression"];
d55 [label="Entry lambda expression", span="50-52", cluster="lambda expression"];
d60 [label="Entry lambda expression", span="54-56", cluster="lambda expression"];
d39 [label="return requiredButEmpty.Select(s => Maybe.Just<Error>(new MissingRequiredOptionError(\r\n                            NameInfo.FromSpecification(s.Specification))));", span="58-59", cluster="lambda expression", color=green, community=0];
d56 [label="sp.Value.IsNothing()\r\n                            && sp.Specification.Required\r\n                            && !setsWithTrue.Contains(((OptionSpecification)sp.Specification).SetName)", span="50-52", cluster="lambda expression", color=green, community=0];
d87 [label=setsWithTrue, span=""];
d57 [label="Exit lambda expression", span="50-52", cluster="lambda expression"];
d58 [label="Entry Unk.IsNothing", span="", cluster="Unk.IsNothing"];
d59 [label="Entry System.Collections.Generic.List<T>.Contains(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Contains(T)"];
d40 [label="return Enumerable.Empty<Nothing<Error>>();", span="61-61", cluster="lambda expression"];
d44 [label="Entry Unk.Any", span="", cluster="Unk.Any"];
d41 [label="Exit lambda expression", span="39-62", cluster="lambda expression"];
d13 [label="Entry Unk.Select", span="", cluster="Unk.Select"];
d65 [label="Entry lambda expression", span="58-59", cluster="lambda expression"];
d61 [label="sp.Specification.IsValue()\r\n                            && sp.Value.IsNothing()\r\n                            && sp.Specification.Required", span="54-56", cluster="lambda expression", color=green, community=0];
d62 [label="Exit lambda expression", span="54-56", cluster="lambda expression"];
d63 [label="Entry CommandLine.Core.Specification.IsValue()", span="15-15", cluster="CommandLine.Core.Specification.IsValue()"];
d64 [label="Entry CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", span="144-144", cluster="CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()"];
d66 [label="Maybe.Just<Error>(new MissingRequiredOptionError(\r\n                            NameInfo.FromSpecification(s.Specification)))", span="58-59", cluster="lambda expression", color=green, community=0];
d67 [label="Exit lambda expression", span="58-59", cluster="lambda expression"];
d68 [label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283", cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)"];
d69 [label="Entry Unk.FromSpecification", span="", cluster="Unk.FromSpecification"];
d31 [label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68", cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)"];
d45 [label="Entry lambda expression", span="43-44", cluster="lambda expression"];
d49 [label="Entry lambda expression", span="45-45", cluster="lambda expression"];
d4 [label="var options = specProps\r\n                            .Where(sp => sp.Specification.IsOption())\r\n                            .Where(sp => ((OptionSpecification)sp.Specification).SetName.Length > 0\r\n                                   && sp.Value.IsJust())", span="22-25", cluster="lambda expression"];
d74 [label="var options = specProps.Where(\r\n                        sp => sp.Specification.TargetType == TargetType.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min.FromJust())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max.FromJust())\r\n                        )\r\n                    )", span="69-76", cluster="lambda expression"];
d54 [label="Exit lambda expression", span="49-49", cluster="lambda expression"];
d53 [label="sp.Specification.IsOption()", span="49-49", cluster="lambda expression"];
d14 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()"];
d75 [label="options.Any()", span="77-77", cluster="lambda expression"];
d7 [label="return options.Select(s => Maybe.Just<Error>(\r\n                            new MutuallyExclusiveSetError(\r\n                                NameInfo.FromOptionSpecification((OptionSpecification)s.Specification))));", span="29-31", cluster="lambda expression"];
d76 [label="return options.Select(s => Maybe.Just<Error>(new SequenceOutOfRangeError(\r\n                            NameInfo.FromSpecification(s.Specification))));", span="79-80", cluster="lambda expression"];
d84 [label="Maybe.Just<Error>(new SequenceOutOfRangeError(\r\n                            NameInfo.FromSpecification(s.Specification)))", span="79-80", cluster="lambda expression"];
d27 [label="Maybe.Just<Error>(\r\n                            new MutuallyExclusiveSetError(\r\n                                NameInfo.FromOptionSpecification((OptionSpecification)s.Specification)))", span="29-31", cluster="lambda expression"];
d47 [label="Exit lambda expression", span="43-44", cluster="lambda expression"];
d46 [label="sp.Specification.IsOption()\r\n                            && sp.Value.IsJust() && sp.Specification.Required", span="43-44", cluster="lambda expression"];
d51 [label="Exit lambda expression", span="45-45", cluster="lambda expression"];
d50 [label="((OptionSpecification)s.Specification).SetName", span="45-45", cluster="lambda expression"];
d1 [label="return specProps =>\r\n                {\r\n                    var options = specProps\r\n                            .Where(sp => sp.Specification.IsOption())\r\n                            .Where(sp => ((OptionSpecification)sp.Specification).SetName.Length > 0\r\n                                   && sp.Value.IsJust());\r\n                    var groups = options.GroupBy(g => ((OptionSpecification)g.Specification).SetName);\r\n                    if (groups.Count() > 1)\r\n                    {\r\n                        return options.Select(s => Maybe.Just<Error>(\r\n                            new MutuallyExclusiveSetError(\r\n                                NameInfo.FromOptionSpecification((OptionSpecification)s.Specification))));\r\n                    }\r\n                    return Enumerable.Empty<Nothing<Error>>();\r\n                };", span="20-34", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()"];
d3 [label="Entry lambda expression", span="20-34", cluster="lambda expression"];
d5 [label="var groups = options.GroupBy(g => ((OptionSpecification)g.Specification).SetName)", span="26-26", cluster="lambda expression"];
d15 [label="Entry lambda expression", span="23-23", cluster="lambda expression"];
d19 [label="Entry lambda expression", span="24-25", cluster="lambda expression"];
d71 [label="return specProps =>\r\n                {\r\n                    var options = specProps.Where(\r\n                        sp => sp.Specification.TargetType == TargetType.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min.FromJust())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max.FromJust())\r\n                        )\r\n                    );\r\n                    if (options.Any())\r\n                    {\r\n                        return options.Select(s => Maybe.Just<Error>(new SequenceOutOfRangeError(\r\n                            NameInfo.FromSpecification(s.Specification))));\r\n                    }\r\n                    return Enumerable.Empty<Nothing<Error>>();\r\n                };", span="67-83", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()"];
d73 [label="Entry lambda expression", span="67-83", cluster="lambda expression"];
d79 [label="Entry lambda expression", span="70-75", cluster="lambda expression"];
d18 [label="Entry CommandLine.Core.Specification.IsOption()", span="10-10", cluster="CommandLine.Core.Specification.IsOption()"];
d8 [label="return Enumerable.Empty<Nothing<Error>>();", span="33-33", cluster="lambda expression"];
d77 [label="return Enumerable.Empty<Nothing<Error>>();", span="82-82", cluster="lambda expression"];
d6 [label="groups.Count() > 1", span="27-27", cluster="lambda expression"];
d9 [label="Exit lambda expression", span="20-34", cluster="lambda expression"];
d26 [label="Entry lambda expression", span="29-31", cluster="lambda expression"];
d78 [label="Exit lambda expression", span="67-83", cluster="lambda expression"];
d83 [label="Entry lambda expression", span="79-80", cluster="lambda expression"];
d85 [label="Exit lambda expression", span="79-80", cluster="lambda expression"];
d86 [label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316", cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)"];
d28 [label="Exit lambda expression", span="29-31", cluster="lambda expression"];
d29 [label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294", cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)"];
d30 [label="Entry CommandLine.NameInfo.FromOptionSpecification(CommandLine.Core.OptionSpecification)", span="60-60", cluster="CommandLine.NameInfo.FromOptionSpecification(CommandLine.Core.OptionSpecification)"];
d48 [label="Entry CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", span="149-149", cluster="CommandLine.Infrastructure.Maybe<T>.IsJust<T>()"];
d0 [label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="18-18", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()"];
d2 [label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="18-18", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()"];
d11 [label="Entry Unk.GroupBy", span="", cluster="Unk.GroupBy"];
d23 [label="Entry lambda expression", span="26-26", cluster="lambda expression"];
d17 [label="Exit lambda expression", span="23-23", cluster="lambda expression"];
d16 [label="sp.Specification.IsOption()", span="23-23", cluster="lambda expression"];
d21 [label="Exit lambda expression", span="24-25", cluster="lambda expression"];
d20 [label="((OptionSpecification)sp.Specification).SetName.Length > 0\r\n                                   && sp.Value.IsJust()", span="24-25", cluster="lambda expression"];
d70 [label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="65-65", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()"];
d72 [label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="65-65", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()"];
d81 [label="Exit lambda expression", span="70-75", cluster="lambda expression"];
d80 [label="sp.Specification.TargetType == TargetType.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min.FromJust())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max.FromJust())\r\n                        )", span="70-75", cluster="lambda expression"];
d12 [label="Entry Unk.Count", span="", cluster="Unk.Count"];
d25 [label="Exit lambda expression", span="26-26", cluster="lambda expression"];
d24 [label="((OptionSpecification)g.Specification).SetName", span="26-26", cluster="lambda expression"];
d22 [label="Entry Unk.IsJust", span="", cluster="Unk.IsJust"];
d82 [label="Entry CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", span="134-134", cluster="CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)"];
n28 -> n2  [key=1, style=dashed, color=red, label="CommandLine.Internal.OneCharStringEnumerator"];
n28 -> n3  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Internal.OneCharStringEnumerator"];
n28 -> n7  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Internal.OneCharStringEnumerator"];
n28 -> n8  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Internal.OneCharStringEnumerator"];
n28 -> n9  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Internal.OneCharStringEnumerator"];
n28 -> n11  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Internal.OneCharStringEnumerator"];
n28 -> n16  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Internal.OneCharStringEnumerator"];
n28 -> n18  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Internal.OneCharStringEnumerator"];
n28 -> n20  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Internal.OneCharStringEnumerator"];
n0 -> n1  [key=0, style=solid];
n0 -> n2  [key=1, style=dashed, color=red, label=string];
n1 -> n2  [key=0, style=solid, color=red];
n1 -> n5  [key=2, style=dotted];
n2 -> n3  [key=0, style=solid, color=red];
n3 -> n4  [key=0, style=solid];
n4 -> n0  [key=0, style=bold, color=blue];
n6 -> n7  [key=0, style=solid];
n6 -> n8  [key=3, color=darkorchid, style=bold, label="Property variable System.Func<bool, string> HelpCommandText"];
n7 -> n8  [key=0, style=solid];
n7 -> n11  [key=0, style=solid];
n8 -> n9  [key=0, style=solid];
n11 -> n12  [key=0, style=solid];
n9 -> n10  [key=0, style=solid];
n9 -> n14  [key=2, style=dotted];
n10 -> n13  [key=0, style=solid];
n12 -> n13  [key=0, style=solid];
n13 -> n6  [key=0, style=bold, color=blue];
n15 -> n16  [key=0, style=solid];
n16 -> n17  [key=0, style=solid];
n16 -> n18  [key=0, style=solid];
n17 -> n21  [key=0, style=solid];
n17 -> n22  [key=2, style=dotted];
n18 -> n19  [key=0, style=solid];
n18 -> n20  [key=0, style=solid];
n18 -> n24  [key=3, color=darkorchid, style=bold, label="Property variable System.Func<CommandLine.Error, string> FormatError"];
n19 -> n21  [key=0, style=solid];
n19 -> n22  [key=2, style=dotted];
n20 -> n21  [key=0, style=solid];
n20 -> n23  [key=2, style=dotted];
n21 -> n15  [key=0, style=bold, color=blue];
n24 -> n25  [key=0, style=solid];
n25 -> n26  [key=0, style=solid];
n25 -> n27  [key=2, style=dotted];
n26 -> n24  [key=0, style=bold, color=blue];
d33 -> d34  [key=0, style=solid, color=green];
d33 -> d36  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
d33 -> d37  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
d32 -> d33  [key=0, style=solid, color=green];
d34 -> d32  [key=0, style=bold, color=blue];
d36 -> d37  [key=0, style=solid, color=green];
d36 -> d56  [key=1, style=dashed, color=green, label=setsWithTrue];
d36 -> d10  [key=2, style=dotted];
d36 -> d13  [key=2, style=dotted];
d36 -> d42  [key=2, style=dotted];
d36 -> d45  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d36 -> d49  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d37 -> d38  [key=0, style=solid, color=green];
d37 -> d10  [key=2, style=dotted, color=green];
d37 -> d43  [key=2, style=dotted, color=green];
d37 -> d42  [key=2, style=dotted, color=green];
d37 -> d52  [key=1, style=dashed, color=green, label="lambda expression"];
d37 -> d55  [key=1, style=dashed, color=green, label="lambda expression"];
d37 -> d60  [key=1, style=dashed, color=green, label="lambda expression"];
d37 -> d39  [key=1, style=dashed, color=green, label=requiredButEmpty];
d35 -> d37  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
d35 -> d36  [key=0, style=solid];
d38 -> d39  [key=0, style=solid, color=green];
d38 -> d40  [key=0, style=solid, color=green];
d38 -> d44  [key=2, style=dotted, color=green];
d52 -> d53  [key=0, style=solid];
d55 -> d56  [key=0, style=solid, color=green];
d60 -> d61  [key=0, style=solid, color=green];
d39 -> d41  [key=0, style=solid, color=green];
d39 -> d13  [key=2, style=dotted, color=green];
d39 -> d65  [key=1, style=dashed, color=green, label="lambda expression"];
d56 -> d57  [key=0, style=solid, color=green];
d56 -> d58  [key=2, style=dotted, color=green];
d56 -> d59  [key=2, style=dotted, color=green];
d87 -> d56  [key=1, style=dashed, color=green, label=setsWithTrue];
d57 -> d55  [key=0, style=bold, color=blue];
d40 -> d41  [key=0, style=solid];
d40 -> d14  [key=2, style=dotted];
d41 -> d35  [key=0, style=bold, color=blue];
d65 -> d66  [key=0, style=solid, color=green];
d61 -> d62  [key=0, style=solid, color=green];
d61 -> d63  [key=2, style=dotted, color=green];
d61 -> d64  [key=2, style=dotted, color=green];
d62 -> d60  [key=0, style=bold, color=blue];
d66 -> d67  [key=0, style=solid, color=green];
d66 -> d68  [key=2, style=dotted, color=green];
d66 -> d69  [key=2, style=dotted, color=green];
d66 -> d31  [key=2, style=dotted, color=green];
d67 -> d65  [key=0, style=bold, color=blue];
d45 -> d46  [key=0, style=solid];
d49 -> d50  [key=0, style=solid];
d4 -> d10  [key=2, style=dotted];
d4 -> d5  [key=0, style=solid];
d4 -> d15  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d4 -> d19  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d4 -> d7  [key=1, style=dashed, color=darkseagreen4, label=options];
d74 -> d10  [key=2, style=dotted];
d74 -> d75  [key=0, style=solid];
d74 -> d79  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d74 -> d76  [key=1, style=dashed, color=darkseagreen4, label=options];
d54 -> d52  [key=0, style=bold, color=blue];
d53 -> d54  [key=0, style=solid];
d53 -> d18  [key=2, style=dotted];
d75 -> d44  [key=2, style=dotted];
d75 -> d76  [key=0, style=solid];
d75 -> d77  [key=0, style=solid];
d7 -> d13  [key=2, style=dotted];
d7 -> d9  [key=0, style=solid];
d7 -> d26  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d76 -> d13  [key=2, style=dotted];
d76 -> d78  [key=0, style=solid];
d76 -> d83  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d84 -> d69  [key=2, style=dotted];
d84 -> d31  [key=2, style=dotted];
d84 -> d85  [key=0, style=solid];
d84 -> d86  [key=2, style=dotted];
d27 -> d31  [key=2, style=dotted];
d27 -> d28  [key=0, style=solid];
d27 -> d29  [key=2, style=dotted];
d27 -> d30  [key=2, style=dotted];
d47 -> d45  [key=0, style=bold, color=blue];
d46 -> d47  [key=0, style=solid];
d46 -> d18  [key=2, style=dotted];
d46 -> d48  [key=2, style=dotted];
d51 -> d49  [key=0, style=bold, color=blue];
d50 -> d51  [key=0, style=solid];
d1 -> d4  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
d1 -> d2  [key=0, style=solid];
d3 -> d4  [key=0, style=solid];
d5 -> d6  [key=0, style=solid];
d5 -> d11  [key=2, style=dotted];
d5 -> d23  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d15 -> d16  [key=0, style=solid];
d19 -> d20  [key=0, style=solid];
d71 -> d74  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
d71 -> d72  [key=0, style=solid];
d73 -> d74  [key=0, style=solid];
d79 -> d80  [key=0, style=solid];
d8 -> d14  [key=2, style=dotted];
d8 -> d9  [key=0, style=solid];
d77 -> d14  [key=2, style=dotted];
d77 -> d78  [key=0, style=solid];
d6 -> d7  [key=0, style=solid];
d6 -> d8  [key=0, style=solid];
d6 -> d12  [key=2, style=dotted];
d9 -> d3  [key=0, style=bold, color=blue];
d26 -> d27  [key=0, style=solid];
d78 -> d73  [key=0, style=bold, color=blue];
d83 -> d84  [key=0, style=solid];
d85 -> d83  [key=0, style=bold, color=blue];
d28 -> d26  [key=0, style=bold, color=blue];
d0 -> d1  [key=0, style=solid];
d2 -> d0  [key=0, style=bold, color=blue];
d23 -> d24  [key=0, style=solid];
d17 -> d15  [key=0, style=bold, color=blue];
d16 -> d18  [key=2, style=dotted];
d16 -> d17  [key=0, style=solid];
d21 -> d19  [key=0, style=bold, color=blue];
d20 -> d21  [key=0, style=solid];
d20 -> d22  [key=2, style=dotted];
d70 -> d71  [key=0, style=solid];
d72 -> d70  [key=0, style=bold, color=blue];
d81 -> d79  [key=0, style=bold, color=blue];
d80 -> d48  [key=2, style=dotted];
d80 -> d81  [key=0, style=solid];
d80 -> d82  [key=2, style=dotted];
d25 -> d23  [key=0, style=bold, color=blue];
d24 -> d25  [key=0, style=solid];
}
