digraph  {
m0_9 [label="Entry CommandLine.OptionAttribute.CreateOptionInfo()", span="77-77", cluster="CommandLine.OptionAttribute.CreateOptionInfo()", file="InstanceBuilder.cs"];
m0_10 [label="return new OptionInfo(ShortName, LongName);", span="79-79", cluster="CommandLine.OptionAttribute.CreateOptionInfo()", file="InstanceBuilder.cs"];
m0_11 [label="Exit CommandLine.OptionAttribute.CreateOptionInfo()", span="77-77", cluster="CommandLine.OptionAttribute.CreateOptionInfo()", file="InstanceBuilder.cs"];
m0_3 [label="Entry CommandLine.OptionAttribute.OptionAttribute(char)", span="49-49", cluster="CommandLine.OptionAttribute.OptionAttribute(char)", file="InstanceBuilder.cs"];
m0_4 [label="Exit CommandLine.OptionAttribute.OptionAttribute(char)", span="49-49", cluster="CommandLine.OptionAttribute.OptionAttribute(char)", file="InstanceBuilder.cs"];
m0_12 [label="Entry CommandLine.Infrastructure.OptionInfo.OptionInfo(char?, string)", span="77-77", cluster="CommandLine.Infrastructure.OptionInfo.OptionInfo(char?, string)", file="InstanceBuilder.cs"];
m0_7 [label="Entry CommandLine.OptionAttribute.OptionAttribute(char, string)", span="68-68", cluster="CommandLine.OptionAttribute.OptionAttribute(char, string)", file="InstanceBuilder.cs"];
m0_8 [label="Exit CommandLine.OptionAttribute.OptionAttribute(char, string)", span="68-68", cluster="CommandLine.OptionAttribute.OptionAttribute(char, string)", file="InstanceBuilder.cs"];
m0_0 [label="Entry CommandLine.OptionAttribute.OptionAttribute()", span="40-40", cluster="CommandLine.OptionAttribute.OptionAttribute()", file="InstanceBuilder.cs"];
m0_1 [label="AutoLongName = true", span="42-42", cluster="CommandLine.OptionAttribute.OptionAttribute()", file="InstanceBuilder.cs"];
m0_2 [label="Exit CommandLine.OptionAttribute.OptionAttribute()", span="40-40", cluster="CommandLine.OptionAttribute.OptionAttribute()", file="InstanceBuilder.cs"];
m0_5 [label="Entry CommandLine.OptionAttribute.OptionAttribute(string)", span="58-58", cluster="CommandLine.OptionAttribute.OptionAttribute(string)", file="InstanceBuilder.cs"];
m0_6 [label="Exit CommandLine.OptionAttribute.OptionAttribute(string)", span="58-58", cluster="CommandLine.OptionAttribute.OptionAttribute(string)", file="InstanceBuilder.cs"];
m0_13 [label="CommandLine.OptionAttribute", span="", file="InstanceBuilder.cs"];
m1_13 [label="Entry Unk.Where", span="", cluster="Unk.Where", file="OptionMapperTests.cs"];
m1_12 [label="Entry Unk.Create", span="", cluster="Unk.Create", file="OptionMapperTests.cs"];
m1_6 [label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", file="OptionMapperTests.cs"];
m1_11 [label="Entry Unk.Single", span="", cluster="Unk.Single", file="OptionMapperTests.cs"];
m1_15 [label="Entry Unk.NotNull", span="", cluster="Unk.NotNull", file="OptionMapperTests.cs"];
m1_7 [label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", span="16-16", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", file="OptionMapperTests.cs"];
m1_27 [label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="13-13", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="OptionMapperTests.cs"];
m1_16 [label="Entry lambda expression", span="28-28", cluster="lambda expression", file="OptionMapperTests.cs"];
m1_28 [label="Entry lambda expression", span="41-43", cluster="lambda expression", file="OptionMapperTests.cs"];
m1_20 [label="Entry lambda expression", span="34-34", cluster="lambda expression", file="OptionMapperTests.cs"];
m1_24 [label="Entry lambda expression", span="36-36", cluster="lambda expression", file="OptionMapperTests.cs"];
m1_30 [label="Exit lambda expression", span="41-43", cluster="lambda expression", file="OptionMapperTests.cs"];
m1_29 [label="a.Specification.IsOption()\r\n                && ((OptionSpecification)a.Specification).ShortName.Equals(''x'')\r\n                && (bool)((Just<object>)a.Value).Value", span="41-43", cluster="lambda expression", file="OptionMapperTests.cs"];
m1_22 [label="Exit lambda expression", span="34-34", cluster="lambda expression", file="OptionMapperTests.cs"];
m1_21 [label="pt.Specification.IsOption()", span="34-34", cluster="lambda expression", file="OptionMapperTests.cs"];
m1_26 [label="Exit lambda expression", span="36-36", cluster="lambda expression", file="OptionMapperTests.cs"];
m1_25 [label="TypeConverter.ChangeType(vals, type, isScalar, CultureInfo.InvariantCulture)", span="36-36", cluster="lambda expression", file="OptionMapperTests.cs"];
m1_17 [label="p.Name.Equals(''BoolValue'', StringComparison.Ordinal)", span="28-28", cluster="lambda expression", file="OptionMapperTests.cs"];
m1_18 [label="Exit lambda expression", span="28-28", cluster="lambda expression", file="OptionMapperTests.cs"];
m1_0 [label="Entry CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", span="17-17", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="OptionMapperTests.cs"];
m1_4 [label="Assert.NotNull(((Ok<IEnumerable<SpecificationProperty>, Error>)result).Value.Success.Single(\r\n                a => a.Specification.IsOption()\r\n                && ((OptionSpecification)a.Specification).ShortName.Equals(''x'')\r\n                && (bool)((Just<object>)a.Value).Value))", span="40-43", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", color=green, community=1, file="OptionMapperTests.cs"];
m1_3 [label="var result = OptionMapper.MapValues(\r\n                specProps.Where(pt => pt.Specification.IsOption()),\r\n                tokenPartitions,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, CultureInfo.InvariantCulture),\r\n                StringComparer.InvariantCulture)", span="33-37", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="OptionMapperTests.cs"];
m1_1 [label="var tokenPartitions = new[]\r\n                {\r\n                    new KeyValuePair<string, IEnumerable<string>>(''x'', new [] { ''true'' })\r\n                }", span="20-23", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="OptionMapperTests.cs"];
m1_2 [label="var specProps = new[]\r\n                {\r\n                    SpecificationProperty.Create(\r\n                        new OptionSpecification(''x'', string.Empty, false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), '\0', Maybe.Nothing<object>(), string.Empty, string.Empty, new List<string>(), typeof(bool), TargetType.Switch), \r\n                        typeof(FakeOptions).GetProperties().Single(p => p.Name.Equals(''BoolValue'', StringComparison.Ordinal)),\r\n                        Maybe.Nothing<object>())\r\n                }", span="24-30", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="OptionMapperTests.cs"];
m1_5 [label="Exit CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", span="17-17", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="OptionMapperTests.cs"];
m1_31 [label="Entry string.Equals(string)", span="0-0", cluster="string.Equals(string)", file="OptionMapperTests.cs"];
m1_8 [label="Entry CSharpx.Maybe.Nothing<T>()", span="75-75", cluster="CSharpx.Maybe.Nothing<T>()", file="OptionMapperTests.cs"];
m1_19 [label="Entry string.Equals(string, System.StringComparison)", span="0-0", cluster="string.Equals(string, System.StringComparison)", file="OptionMapperTests.cs"];
m1_23 [label="Entry CommandLine.Core.Specification.IsOption()", span="10-10", cluster="CommandLine.Core.Specification.IsOption()", file="OptionMapperTests.cs"];
m1_14 [label="Entry Unk.MapValues", span="", cluster="Unk.MapValues", file="OptionMapperTests.cs"];
m1_10 [label="Entry System.Type.GetProperties()", span="0-0", cluster="System.Type.GetProperties()", file="OptionMapperTests.cs"];
m1_9 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="OptionMapperTests.cs"];
m5_11 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()", file="TokenizerTests.cs"];
m5_10 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="TokenizerTests.cs"];
m5_21 [label="Entry CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", span="38-38", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TokenizerTests.cs"];
m5_24 [label="var result =\r\n                Tokenizer.ExplodeOptionList(\r\n                    StatePair.Create(\r\n                        Enumerable.Empty<Token>().Concat(new[] { Token.Name(''x''),\r\n                            Token.Name(''string-seq''), Token.Value(''aaa,bb,cccc''), Token.Name(''switch'') }),\r\n                        Enumerable.Empty<Error>()),\r\n                        optionName => NameLookup.HavingSeparator(optionName, specs, StringComparer.InvariantCulture))", span="47-53", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", color=green, community=0, file="TokenizerTests.cs"];
m5_23 [label="var specs = new[] { new OptionSpecification(string.Empty, ''string-seq'',\r\n                false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), ',', null, string.Empty, string.Empty, new List<string>(), typeof(IEnumerable<string>), TargetType.Sequence)}", span="43-44", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TokenizerTests.cs"];
m5_25 [label="Assert.True(expectedTokens.SequenceEqual(result.Value))", span="56-56", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TokenizerTests.cs"];
m5_22 [label="var expectedTokens = new[] { Token.Name(''x''), Token.Name(''string-seq''),\r\n                Token.Value(''aaa''), Token.Value(''bb''),  Token.Value(''cccc''), Token.Name(''switch'') }", span="41-42", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TokenizerTests.cs"];
m5_26 [label="Exit CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", span="38-38", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TokenizerTests.cs"];
m5_20 [label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16", cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TokenizerTests.cs"];
m5_8 [label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", span="16-16", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", file="TokenizerTests.cs"];
m5_0 [label="Entry CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", span="14-14", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="TokenizerTests.cs"];
m5_3 [label="var result =\r\n                Tokenizer.ExplodeOptionList(\r\n                    StatePair.Create(\r\n                        Enumerable.Empty<Token>().Concat(new[] { Token.Name(''i''), Token.Value(''10''),\r\n                            Token.Name(''string-seq''), Token.Value(''aaa,bb,cccc''), Token.Name(''switch'') }),\r\n                        Enumerable.Empty<Error>()),\r\n                        optionName => NameLookup.HavingSeparator(optionName, specs, StringComparer.InvariantCulture))", span="23-29", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", color=green, community=0, file="TokenizerTests.cs"];
m5_2 [label="var specs = new[] { new OptionSpecification(string.Empty, ''string-seq'',\r\n                false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), ',', null, string.Empty, string.Empty, new List<string>(), typeof(IEnumerable<string>), TargetType.Sequence)}", span="19-20", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="TokenizerTests.cs"];
m5_4 [label="Assert.True(expectedTokens.SequenceEqual(result.Value))", span="32-32", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="TokenizerTests.cs"];
m5_1 [label="var expectedTokens = new[] { Token.Name(''i''), Token.Value(''10''), Token.Name(''string-seq''),\r\n                Token.Value(''aaa''), Token.Value(''bb''),  Token.Value(''cccc''), Token.Name(''switch'') }", span="17-18", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="TokenizerTests.cs"];
m5_5 [label="Exit CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", span="14-14", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="TokenizerTests.cs"];
m5_16 [label="Entry Unk.True", span="", cluster="Unk.True", file="TokenizerTests.cs"];
m5_27 [label="Entry lambda expression", span="53-53", cluster="lambda expression", file="TokenizerTests.cs"];
m5_17 [label="Entry lambda expression", span="29-29", cluster="lambda expression", file="TokenizerTests.cs"];
m5_18 [label="NameLookup.HavingSeparator(optionName, specs, StringComparer.InvariantCulture)", span="29-29", cluster="lambda expression", file="TokenizerTests.cs"];
m5_19 [label="Exit lambda expression", span="29-29", cluster="lambda expression", file="TokenizerTests.cs"];
m5_28 [label="NameLookup.HavingSeparator(optionName, specs, StringComparer.InvariantCulture)", span="53-53", cluster="lambda expression", file="TokenizerTests.cs"];
m5_29 [label="Exit lambda expression", span="53-53", cluster="lambda expression", file="TokenizerTests.cs"];
m5_14 [label="Entry Unk.ExplodeOptionList", span="", cluster="Unk.ExplodeOptionList", file="TokenizerTests.cs"];
m5_6 [label="Entry CommandLine.Core.Token.Name(string)", span="19-19", cluster="CommandLine.Core.Token.Name(string)", file="TokenizerTests.cs"];
m5_9 [label="Entry CSharpx.Maybe.Nothing<T>()", span="75-75", cluster="CSharpx.Maybe.Nothing<T>()", file="TokenizerTests.cs"];
m5_15 [label="Entry Unk.SequenceEqual", span="", cluster="Unk.SequenceEqual", file="TokenizerTests.cs"];
m5_12 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="TokenizerTests.cs"];
m5_7 [label="Entry CommandLine.Core.Token.Value(string)", span="24-24", cluster="CommandLine.Core.Token.Value(string)", file="TokenizerTests.cs"];
m5_13 [label="Entry CommandLine.Core.StatePair.Create<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="58-58", cluster="CommandLine.Core.StatePair.Create<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="TokenizerTests.cs"];
m5_30 [label=specs, span="", file="TokenizerTests.cs"];
m5_31 [label=specs, span="", file="TokenizerTests.cs"];
m0_9 -> m0_10  [key=0, style=solid];
m0_10 -> m0_11  [key=0, style=solid];
m0_10 -> m0_12  [key=2, style=dotted];
m0_11 -> m0_9  [key=0, style=bold, color=blue];
m0_3 -> m0_4  [key=0, style=solid];
m0_4 -> m0_3  [key=0, style=bold, color=blue];
m0_7 -> m0_8  [key=0, style=solid];
m0_8 -> m0_7  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_2  [key=0, style=solid];
m0_2 -> m0_0  [key=0, style=bold, color=blue];
m0_5 -> m0_6  [key=0, style=solid];
m0_6 -> m0_5  [key=0, style=bold, color=blue];
m0_13 -> m0_1  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.OptionAttribute"];
m0_13 -> m0_10  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.OptionAttribute"];
m1_16 -> m1_17  [key=0, style=solid];
m1_28 -> m1_29  [key=0, style=solid];
m1_20 -> m1_21  [key=0, style=solid];
m1_24 -> m1_25  [key=0, style=solid];
m1_30 -> m1_28  [key=0, style=bold, color=blue];
m1_29 -> m1_30  [key=0, style=solid];
m1_29 -> m1_23  [key=2, style=dotted];
m1_29 -> m1_31  [key=2, style=dotted];
m1_22 -> m1_20  [key=0, style=bold, color=blue];
m1_21 -> m1_22  [key=0, style=solid];
m1_21 -> m1_23  [key=2, style=dotted];
m1_26 -> m1_24  [key=0, style=bold, color=blue];
m1_25 -> m1_26  [key=0, style=solid];
m1_25 -> m1_27  [key=2, style=dotted];
m1_17 -> m1_18  [key=0, style=solid];
m1_17 -> m1_19  [key=2, style=dotted];
m1_18 -> m1_16  [key=0, style=bold, color=blue];
m1_0 -> m1_1  [key=0, style=solid];
m1_4 -> m1_5  [key=0, style=solid, color=green];
m1_4 -> m1_11  [key=2, style=dotted, color=green];
m1_4 -> m1_15  [key=2, style=dotted, color=green];
m1_4 -> m1_28  [key=1, style=dashed, color=green, label="lambda expression"];
m1_3 -> m1_4  [key=0, style=solid, color=green];
m1_3 -> m1_13  [key=2, style=dotted];
m1_3 -> m1_14  [key=2, style=dotted];
m1_3 -> m1_20  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_3 -> m1_24  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_1 -> m1_3  [key=1, style=dashed, color=darkseagreen4, label=tokenPartitions];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_6  [key=2, style=dotted];
m1_2 -> m1_3  [key=0, style=solid];
m1_2 -> m1_11  [key=2, style=dotted];
m1_2 -> m1_7  [key=2, style=dotted];
m1_2 -> m1_8  [key=2, style=dotted];
m1_2 -> m1_9  [key=2, style=dotted];
m1_2 -> m1_10  [key=2, style=dotted];
m1_2 -> m1_12  [key=2, style=dotted];
m1_2 -> m1_16  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_5 -> m1_0  [key=0, style=bold, color=blue];
m5_21 -> m5_22  [key=0, style=solid];
m5_24 -> m5_25  [key=0, style=solid, color=green];
m5_24 -> m5_11  [key=2, style=dotted, color=green];
m5_24 -> m5_6  [key=2, style=dotted, color=green];
m5_24 -> m5_7  [key=2, style=dotted, color=green];
m5_24 -> m5_12  [key=2, style=dotted, color=green];
m5_24 -> m5_13  [key=2, style=dotted, color=green];
m5_24 -> m5_14  [key=2, style=dotted, color=green];
m5_24 -> m5_27  [key=1, style=dashed, color=green, label="lambda expression"];
m5_23 -> m5_24  [key=0, style=solid, color=green];
m5_23 -> m5_8  [key=2, style=dotted];
m5_23 -> m5_9  [key=2, style=dotted];
m5_23 -> m5_10  [key=2, style=dotted];
m5_23 -> m5_28  [key=1, style=dashed, color=darkseagreen4, label=specs];
m5_25 -> m5_26  [key=0, style=solid];
m5_25 -> m5_15  [key=2, style=dotted];
m5_25 -> m5_16  [key=2, style=dotted];
m5_22 -> m5_6  [key=2, style=dotted];
m5_22 -> m5_7  [key=2, style=dotted];
m5_22 -> m5_23  [key=0, style=solid];
m5_22 -> m5_25  [key=1, style=dashed, color=darkseagreen4, label=expectedTokens];
m5_26 -> m5_21  [key=0, style=bold, color=blue];
m5_0 -> m5_1  [key=0, style=solid];
m5_3 -> m5_4  [key=0, style=solid, color=green];
m5_3 -> m5_11  [key=2, style=dotted, color=green];
m5_3 -> m5_6  [key=2, style=dotted, color=green];
m5_3 -> m5_7  [key=2, style=dotted, color=green];
m5_3 -> m5_12  [key=2, style=dotted, color=green];
m5_3 -> m5_13  [key=2, style=dotted, color=green];
m5_3 -> m5_14  [key=2, style=dotted, color=green];
m5_3 -> m5_17  [key=1, style=dashed, color=green, label="lambda expression"];
m5_2 -> m5_3  [key=0, style=solid, color=green];
m5_2 -> m5_8  [key=2, style=dotted];
m5_2 -> m5_9  [key=2, style=dotted];
m5_2 -> m5_10  [key=2, style=dotted];
m5_2 -> m5_18  [key=1, style=dashed, color=darkseagreen4, label=specs];
m5_4 -> m5_5  [key=0, style=solid];
m5_4 -> m5_15  [key=2, style=dotted];
m5_4 -> m5_16  [key=2, style=dotted];
m5_1 -> m5_2  [key=0, style=solid];
m5_1 -> m5_4  [key=1, style=dashed, color=darkseagreen4, label=expectedTokens];
m5_1 -> m5_6  [key=2, style=dotted];
m5_1 -> m5_7  [key=2, style=dotted];
m5_5 -> m5_0  [key=0, style=bold, color=blue];
m5_27 -> m5_28  [key=0, style=solid];
m5_17 -> m5_18  [key=0, style=solid];
m5_18 -> m5_19  [key=0, style=solid];
m5_18 -> m5_20  [key=2, style=dotted];
m5_19 -> m5_17  [key=0, style=bold, color=blue];
m5_28 -> m5_29  [key=0, style=solid];
m5_28 -> m5_20  [key=2, style=dotted];
m5_29 -> m5_27  [key=0, style=bold, color=blue];
m5_30 -> m5_18  [key=1, style=dashed, color=darkseagreen4, label=specs];
m5_31 -> m5_28  [key=1, style=dashed, color=darkseagreen4, label=specs];
}
