digraph  {
m0_149 [label="new FakeOptionsWithSequenceWithoutRange()", span="369-369", cluster="lambda expression", file="InstanceBuilderTests.cs", color=green, community=0];
m0_150 [label="Func<OkPair<TValue, TMessage>, Result<TSuccess, TMessage>> successFunc =\r\n                pair => MergeMessages(pair.Messages, func(pair.Success))", span="555-556", cluster="RailwaySharp.ErrorHandling.Trial.Bind<TValue, TSuccess, TMessage>(System.Func<TValue, RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>>, RailwaySharp.ErrorHandling.Result<TValue, TMessage>)", file="InstanceBuilderTests.cs"];
m0_152 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="385-385", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="InstanceBuilderTests.cs"];
m0_151 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", file="InstanceBuilderTests.cs"];
m0_153 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndSeparator>>(() => new FakeOptionsWithSequenceAndSeparator()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="390-394", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="InstanceBuilderTests.cs", color=green, community=0];
m0_41 [label="throw new ArgumentNullException(''success'');", span="244-244", cluster="RailwaySharp.ErrorHandling.OkPair.Create<TSuccess, TMessage>(TSuccess, System.Collections.Generic.IEnumerable<TMessage>)", file="InstanceBuilderTests.cs"];
m0_42 [label="messages == null", span="245-245", cluster="RailwaySharp.ErrorHandling.OkPair.Create<TSuccess, TMessage>(TSuccess, System.Collections.Generic.IEnumerable<TMessage>)", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_43 [label="throw new ArgumentNullException(''messages'');", span="245-245", cluster="RailwaySharp.ErrorHandling.OkPair.Create<TSuccess, TMessage>(TSuccess, System.Collections.Generic.IEnumerable<TMessage>)", file="InstanceBuilderTests.cs"];
m0_44 [label="return new OkPair<TSuccess, TMessage>(success, messages);", span="247-247", cluster="RailwaySharp.ErrorHandling.OkPair.Create<TSuccess, TMessage>(TSuccess, System.Collections.Generic.IEnumerable<TMessage>)", file="InstanceBuilderTests.cs"];
m0_106 [label="Entry lambda expression", span="264-264", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_107 [label="new FakeOptionsWithEnum()", span="264-264", cluster="lambda expression", file="InstanceBuilderTests.cs", color=green, community=0];
m0_108 [label="Exit lambda expression", span="264-264", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_357 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", span="835-835", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="InstanceBuilderTests.cs"];
m0_358 [label="Action test = () => InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinMaxZero>>(() => new FakeOptionsWithMinMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="838-842", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_359 [label="Assert.Throws<ApplicationException>(test)", span="845-845", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="InstanceBuilderTests.cs"];
m0_360 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", span="835-835", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="InstanceBuilderTests.cs"];
m0_71 [label="Entry lambda expression", span="182-182", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_97 [label="Entry lambda expression", span="240-240", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_98 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="240-240", cluster="lambda expression", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_99 [label="Exit lambda expression", span="240-240", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_100 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", file="InstanceBuilderTests.cs"];
m0_101 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="258-258", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="InstanceBuilderTests.cs"];
m0_338 [label="Entry Unk.>", span="", cluster="Unk.>", file="InstanceBuilderTests.cs"];
m0_63 [label="Exit RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.ToString()", span="293-293", cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.ToString()", file="InstanceBuilderTests.cs"];
m0_154 [label="Entry lambda expression", span="556-556", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_155 [label="MergeMessages(pair.Messages, func(pair.Success))", span="556-556", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_55 [label="Exit RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.Result(RailwaySharp.ErrorHandling.ResultType)", span="283-283", cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.Result(RailwaySharp.ErrorHandling.ResultType)", file="InstanceBuilderTests.cs"];
m0_267 [label="m.ToString()", span="839-839", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_268 [label="Exit lambda expression", span="839-839", cluster="lambda expression", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_269 [label="Entry RailwaySharp.ErrorHandling.ResultExtensions.SucceededWith<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", span="851-851", cluster="RailwaySharp.ErrorHandling.ResultExtensions.SucceededWith<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="InstanceBuilderTests.cs"];
m0_270 [label="result.Tag == ResultType.Ok", span="853-853", cluster="RailwaySharp.ErrorHandling.ResultExtensions.SucceededWith<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="InstanceBuilderTests.cs"];
m0_334 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", span="807-807", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="InstanceBuilderTests.cs"];
m0_335 [label="Action test = () => InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinZero>>(() => new FakeOptionsWithMinZero()),\r\n                new string[] {},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="810-814", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_336 [label="Assert.Throws<ApplicationException>(test)", span="817-817", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="InstanceBuilderTests.cs"];
m0_337 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", span="807-807", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="InstanceBuilderTests.cs"];
m0_188 [label="Entry System.Collections.Generic.IEnumerable<T>.Fold<T, TResult>(System.Func<T, T, TResult>)", span="185-185", cluster="System.Collections.Generic.IEnumerable<T>.Fold<T, TResult>(System.Func<T, T, TResult>)", file="InstanceBuilderTests.cs"];
m0_307 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="740-740", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="InstanceBuilderTests.cs"];
m0_308 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNullables>>(() => new FakeOptionsWithNullables()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="745-749", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_309 [label="expected.ShouldBeEquivalentTo(result.Value.NullableLong)", span="752-752", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="InstanceBuilderTests.cs"];
m0_310 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="740-740", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="InstanceBuilderTests.cs"];
m0_18 [label="Assert.Equal(expected, result.Value.LongValue)", span="55-55", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="InstanceBuilderTests.cs"];
m0_19 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="43-43", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="InstanceBuilderTests.cs"];
m0_20 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="InstanceBuilderTests.cs"];
m0_21 [label="Entry lambda expression", span="49-49", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_79 [label="this.messages = messages", span="351-351", cluster="RailwaySharp.ErrorHandling.Bad<TSuccess, TMessage>.Bad(System.Collections.Generic.IEnumerable<TMessage>)", file="InstanceBuilderTests.cs"];
m0_167 [label="wrappedFunction.Tag == ResultType.Ok && result.Tag == ResultType.Ok", span="587-587", cluster="RailwaySharp.ErrorHandling.Trial.Apply<TValue, TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<System.Func<TValue, TSuccess>, TMessage>, RailwaySharp.ErrorHandling.Result<TValue, TMessage>)", file="InstanceBuilderTests.cs"];
m0_170 [label="return new Ok<TSuccess, TMessage>(new OkPair<TSuccess, TMessage>(\r\n                    ok1.Value.Success(ok2.Value.Success), ok1.Value.Messages.Concat(ok2.Value.Messages)));", span="592-593", cluster="RailwaySharp.ErrorHandling.Trial.Apply<TValue, TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<System.Func<TValue, TSuccess>, TMessage>, RailwaySharp.ErrorHandling.Result<TValue, TMessage>)", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_169 [label="var ok2 = (Ok<TValue, TMessage>)result", span="590-590", cluster="RailwaySharp.ErrorHandling.Trial.Apply<TValue, TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<System.Func<TValue, TSuccess>, TMessage>, RailwaySharp.ErrorHandling.Result<TValue, TMessage>)", file="InstanceBuilderTests.cs"];
m0_171 [label="wrappedFunction.Tag == ResultType.Bad && result.Tag == ResultType.Ok", span="595-595", cluster="RailwaySharp.ErrorHandling.Trial.Apply<TValue, TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<System.Func<TValue, TSuccess>, TMessage>, RailwaySharp.ErrorHandling.Result<TValue, TMessage>)", file="InstanceBuilderTests.cs"];
m0_168 [label="var ok1 = (Ok<Func<TValue, TSuccess>, TMessage>)wrappedFunction", span="589-589", cluster="RailwaySharp.ErrorHandling.Trial.Apply<TValue, TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<System.Func<TValue, TSuccess>, TMessage>, RailwaySharp.ErrorHandling.Result<TValue, TMessage>)", file="InstanceBuilderTests.cs"];
m0_172 [label="return new Bad<TSuccess, TMessage>(((Bad<TValue, TMessage>)result).Messages);", span="597-597", cluster="RailwaySharp.ErrorHandling.Trial.Apply<TValue, TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<System.Func<TValue, TSuccess>, TMessage>, RailwaySharp.ErrorHandling.Result<TValue, TMessage>)", file="InstanceBuilderTests.cs"];
m0_259 [label="Entry RailwaySharp.ErrorHandling.ResultExtensions.FailedWith<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", span="831-831", cluster="RailwaySharp.ErrorHandling.ResultExtensions.FailedWith<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="InstanceBuilderTests.cs"];
m0_261 [label="var ok = (Ok<TSuccess, TMessage>)result", span="835-835", cluster="RailwaySharp.ErrorHandling.ResultExtensions.FailedWith<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_260 [label="result.Tag == ResultType.Ok", span="833-833", cluster="RailwaySharp.ErrorHandling.ResultExtensions.FailedWith<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="InstanceBuilderTests.cs"];
m0_262 [label="throw new Exception(\r\n                    string.Format(''Result was a success: {0} - {1}'',\r\n                    ok.Value.Success,\r\n                    string.Join(Environment.NewLine, ok.Value.Messages.Select(m => m.ToString()))));", span="836-839", cluster="RailwaySharp.ErrorHandling.ResultExtensions.FailedWith<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="InstanceBuilderTests.cs", color=red, community=0];
m0_263 [label="var bad = (Bad<TSuccess, TMessage>)result", span="841-841", cluster="RailwaySharp.ErrorHandling.ResultExtensions.FailedWith<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="InstanceBuilderTests.cs"];
m0_109 [label="Entry RailwaySharp.ErrorHandling.Trial.Warn<TSuccess, TMessage>(TMessage, TSuccess)", span="457-457", cluster="RailwaySharp.ErrorHandling.Trial.Warn<TSuccess, TMessage>(TMessage, TSuccess)", file="InstanceBuilderTests.cs"];
m0_9 [label="Entry RailwaySharp.ErrorHandling.Unit.ToString()", span="148-148", cluster="RailwaySharp.ErrorHandling.Unit.ToString()", file="InstanceBuilderTests.cs"];
m0_204 [label="ok != null", span="698-698", cluster="RailwaySharp.ErrorHandling.ResultExtensions.Match<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>, System.Action<TSuccess, System.Collections.Generic.IEnumerable<TMessage>>, System.Action<System.Collections.Generic.IEnumerable<TMessage>>)", file="InstanceBuilderTests.cs"];
m0_74 [label="Exit lambda expression", span="307-307", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_76 [label="this.value = value", span="327-327", cluster="RailwaySharp.ErrorHandling.Ok<TSuccess, TMessage>.Ok(RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>)", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_75 [label="Entry RailwaySharp.ErrorHandling.Ok<TSuccess, TMessage>.Ok(RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>)", span="324-324", cluster="RailwaySharp.ErrorHandling.Ok<TSuccess, TMessage>.Ok(RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>)", file="InstanceBuilderTests.cs"];
m0_77 [label="Exit RailwaySharp.ErrorHandling.Ok<TSuccess, TMessage>.Ok(RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>)", span="324-324", cluster="RailwaySharp.ErrorHandling.Ok<TSuccess, TMessage>.Ok(RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>)", file="InstanceBuilderTests.cs"];
m0_78 [label="Entry RailwaySharp.ErrorHandling.Bad<TSuccess, TMessage>.Bad(System.Collections.Generic.IEnumerable<TMessage>)", span="348-348", cluster="RailwaySharp.ErrorHandling.Bad<TSuccess, TMessage>.Bad(System.Collections.Generic.IEnumerable<TMessage>)", file="InstanceBuilderTests.cs"];
m0_247 [label="Exit RailwaySharp.ErrorHandling.ResultExtensions.SelectMany<TSuccess, TMessage, TValue, TResult>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>, System.Func<TSuccess, RailwaySharp.ErrorHandling.Result<TValue, TMessage>>, System.Func<TSuccess, TValue, TResult>)", span="798-798", cluster="RailwaySharp.ErrorHandling.ResultExtensions.SelectMany<TSuccess, TMessage, TValue, TResult>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>, System.Func<TSuccess, RailwaySharp.ErrorHandling.Result<TValue, TMessage>>, System.Func<TSuccess, TValue, TResult>)", file="InstanceBuilderTests.cs"];
m0_92 [label="return new Ok<TSuccess, TMessage>(new OkPair<TSuccess, TMessage>(value, new[] { message }));", span="394-394", cluster="RailwaySharp.ErrorHandling.Result.Succeed<TSuccess, TMessage>(TSuccess, TMessage)", file="InstanceBuilderTests.cs"];
m0_94 [label="Entry RailwaySharp.ErrorHandling.Result.Succeed<TSuccess, TMessage>(TSuccess, System.Collections.Generic.IEnumerable<TMessage>)", span="400-400", cluster="RailwaySharp.ErrorHandling.Result.Succeed<TSuccess, TMessage>(TSuccess, System.Collections.Generic.IEnumerable<TMessage>)", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_93 [label="Exit RailwaySharp.ErrorHandling.Result.Succeed<TSuccess, TMessage>(TSuccess, TMessage)", span="392-392", cluster="RailwaySharp.ErrorHandling.Result.Succeed<TSuccess, TMessage>(TSuccess, TMessage)", file="InstanceBuilderTests.cs"];
m0_95 [label="return new Ok<TSuccess, TMessage>(new OkPair<TSuccess, TMessage>(value, messages));", span="402-402", cluster="RailwaySharp.ErrorHandling.Result.Succeed<TSuccess, TMessage>(TSuccess, System.Collections.Generic.IEnumerable<TMessage>)", file="InstanceBuilderTests.cs"];
m0_96 [label="Exit RailwaySharp.ErrorHandling.Result.Succeed<TSuccess, TMessage>(TSuccess, System.Collections.Generic.IEnumerable<TMessage>)", span="400-400", cluster="RailwaySharp.ErrorHandling.Result.Succeed<TSuccess, TMessage>(TSuccess, System.Collections.Generic.IEnumerable<TMessage>)", file="InstanceBuilderTests.cs"];
m0_84 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="214-214", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_85 [label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="217-217", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_86 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraint()),\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="220-224", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", color=green, community=0];
m0_314 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="760-760", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="InstanceBuilderTests.cs"];
m0_315 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithFSharpOption>>(() => new FakeOptionsWithFSharpOption()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="765-769", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_316 [label="result.Value.FileName != null", span="772-772", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="InstanceBuilderTests.cs"];
m0_317 [label="expectedValue.ShouldBeEquivalentTo(result.Value.FileName.Value)", span="774-774", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="InstanceBuilderTests.cs"];
m0_318 [label="expectedSome.ShouldBeEquivalentTo(FSharpOption<string>.get_IsSome(result.Value.FileName))", span="776-776", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="InstanceBuilderTests.cs"];
m0_319 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="760-760", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="InstanceBuilderTests.cs"];
m0_3 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => fakeOptions),\r\n                new[] { ''--help'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="27-31", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs", color=green, community=0];
m0_4 [label="Assert.True(expectedResult.Equals(result))", span="34-34", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", color=red, community=0, file="InstanceBuilderTests.cs"];
m0_5 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="18-18", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs"];
m0_22 [label="new FakeOptions()", span="49-49", cluster="lambda expression", file="InstanceBuilderTests.cs", color=green, community=0];
m0_23 [label="Exit lambda expression", span="49-49", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_26 [label="Assert.Equal(expected, result.Value.DoubleValue)", span="78-78", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="InstanceBuilderTests.cs"];
m0_24 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="66-66", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="InstanceBuilderTests.cs"];
m0_25 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithDouble>>(() => new FakeOptionsWithDouble()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="71-75", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="InstanceBuilderTests.cs", color=green, community=0];
m0_27 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="66-66", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="InstanceBuilderTests.cs"];
m0_271 [label="Entry string.Equals(string)", span="0-0", cluster="string.Equals(string)", file="InstanceBuilderTests.cs"];
m0_273 [label="new FakeOptions()", span="642-642", cluster="lambda expression", file="InstanceBuilderTests.cs", color=green, community=0];
m0_272 [label="Entry lambda expression", span="642-642", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_274 [label="Exit lambda expression", span="642-642", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_275 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="654-654", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs"];
m0_179 [label="Entry RailwaySharp.ErrorHandling.Trial.Lift<TValue, TSuccess, TMessage>(System.Func<TValue, TSuccess>, RailwaySharp.ErrorHandling.Result<TValue, TMessage>)", span="617-617", cluster="RailwaySharp.ErrorHandling.Trial.Lift<TValue, TSuccess, TMessage>(System.Func<TValue, TSuccess>, RailwaySharp.ErrorHandling.Result<TValue, TMessage>)", file="InstanceBuilderTests.cs"];
m0_180 [label="return Apply(Ok<Func<TValue, TSuccess>, TMessage>(func), result);", span="621-621", cluster="RailwaySharp.ErrorHandling.Trial.Lift<TValue, TSuccess, TMessage>(System.Func<TValue, TSuccess>, RailwaySharp.ErrorHandling.Result<TValue, TMessage>)", color=red, community=0, file="InstanceBuilderTests.cs"];
m0_181 [label="Exit RailwaySharp.ErrorHandling.Trial.Lift<TValue, TSuccess, TMessage>(System.Func<TValue, TSuccess>, RailwaySharp.ErrorHandling.Result<TValue, TMessage>)", span="617-617", cluster="RailwaySharp.ErrorHandling.Trial.Lift<TValue, TSuccess, TMessage>(System.Func<TValue, TSuccess>, RailwaySharp.ErrorHandling.Result<TValue, TMessage>)", file="InstanceBuilderTests.cs"];
m0_182 [label="Entry RailwaySharp.ErrorHandling.Trial.Lift2<TSuccess, TMessage, TSuccess1, TMessage1>(System.Func<TSuccess, System.Func<TMessage, TSuccess1>>, RailwaySharp.ErrorHandling.Result<TSuccess, TMessage1>, RailwaySharp.ErrorHandling.Result<TMessage, TMessage1>)", span="630-630", cluster="RailwaySharp.ErrorHandling.Trial.Lift2<TSuccess, TMessage, TSuccess1, TMessage1>(System.Func<TSuccess, System.Func<TMessage, TSuccess1>>, RailwaySharp.ErrorHandling.Result<TSuccess, TMessage1>, RailwaySharp.ErrorHandling.Result<TMessage, TMessage1>)", file="InstanceBuilderTests.cs"];
m0_183 [label="return Apply(Lift(func, a), b);", span="635-635", cluster="RailwaySharp.ErrorHandling.Trial.Lift2<TSuccess, TMessage, TSuccess1, TMessage1>(System.Func<TSuccess, System.Func<TMessage, TSuccess1>>, RailwaySharp.ErrorHandling.Result<TSuccess, TMessage1>, RailwaySharp.ErrorHandling.Result<TMessage, TMessage1>)", file="InstanceBuilderTests.cs"];
m0_184 [label="Exit RailwaySharp.ErrorHandling.Trial.Lift2<TSuccess, TMessage, TSuccess1, TMessage1>(System.Func<TSuccess, System.Func<TMessage, TSuccess1>>, RailwaySharp.ErrorHandling.Result<TSuccess, TMessage1>, RailwaySharp.ErrorHandling.Result<TMessage, TMessage1>)", span="630-630", cluster="RailwaySharp.ErrorHandling.Trial.Lift2<TSuccess, TMessage, TSuccess1, TMessage1>(System.Func<TSuccess, System.Func<TMessage, TSuccess1>>, RailwaySharp.ErrorHandling.Result<TSuccess, TMessage1>, RailwaySharp.ErrorHandling.Result<TMessage, TMessage1>)", file="InstanceBuilderTests.cs"];
m0_306 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", file="InstanceBuilderTests.cs"];
m0_126 [label="Exit lambda expression", span="302-302", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_127 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="314-314", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_128 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="317-317", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_129 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''RED'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="320-324", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs", color=green, community=0];
m0_6 [label="Entry RailwaySharp.ErrorHandling.Unit.GetHashCode()", span="143-143", cluster="RailwaySharp.ErrorHandling.Unit.GetHashCode()", file="InstanceBuilderTests.cs"];
m0_251 [label="mapperFunc(suc, val)", span="803-803", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_253 [label="Entry lambda expression", span="808-808", cluster="lambda expression", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_252 [label="Exit lambda expression", span="803-803", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_254 [label="Trial.Lift2(curriedMapper, a, b)", span="808-808", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_255 [label="Exit lambda expression", span="808-808", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_29 [label="new FakeOptionsWithDouble()", span="72-72", cluster="lambda expression", file="InstanceBuilderTests.cs", color=green, community=0];
m0_110 [label="return new Ok<TSuccess, TMessage>(new OkPair<TSuccess, TMessage>(value, new[] { message }));", span="459-459", cluster="RailwaySharp.ErrorHandling.Trial.Warn<TSuccess, TMessage>(TMessage, TSuccess)", file="InstanceBuilderTests.cs"];
m0_112 [label="Entry RailwaySharp.ErrorHandling.Trial.Fail<TSuccess, TMessage>(TMessage)", span="468-468", cluster="RailwaySharp.ErrorHandling.Trial.Fail<TSuccess, TMessage>(TMessage)", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_111 [label="Exit RailwaySharp.ErrorHandling.Trial.Warn<TSuccess, TMessage>(TMessage, TSuccess)", span="457-457", cluster="RailwaySharp.ErrorHandling.Trial.Warn<TSuccess, TMessage>(TMessage, TSuccess)", file="InstanceBuilderTests.cs"];
m0_113 [label="return new Bad<TSuccess, TMessage>(new[] { message });", span="470-470", cluster="RailwaySharp.ErrorHandling.Trial.Fail<TSuccess, TMessage>(TMessage)", file="InstanceBuilderTests.cs"];
m0_114 [label="Exit RailwaySharp.ErrorHandling.Trial.Fail<TSuccess, TMessage>(TMessage)", span="468-468", cluster="RailwaySharp.ErrorHandling.Trial.Fail<TSuccess, TMessage>(TMessage)", file="InstanceBuilderTests.cs"];
m0_368 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", span="854-854", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", file="InstanceBuilderTests.cs"];
m0_369 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNamedAndEmptySets>>(() => new FakeOptionsWithNamedAndEmptySets()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="857-861", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_370 [label="result.Errors.Should().HaveCount(x => x == expected)", span="864-864", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", file="InstanceBuilderTests.cs"];
m0_371 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", span="854-854", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", file="InstanceBuilderTests.cs"];
m0_0 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="18-18", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs"];
m0_1 [label="var fakeOptions = new FakeOptions()", span="21-21", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs"];
m0_2 [label="var expectedResult = ParserResult.Create(\r\n                ParserResultType.Options,\r\n                fakeOptions, new Error[] { new HelpRequestedError() })", span="22-24", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs"];
m0_7 [label="return 0;", span="145-145", cluster="RailwaySharp.ErrorHandling.Unit.GetHashCode()", file="InstanceBuilderTests.cs"];
m0_46 [label="new FakeOptions()", span="118-118", cluster="lambda expression", file="InstanceBuilderTests.cs", color=green, community=0];
m0_377 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithNamedAndEmptySets.FakeOptionsWithNamedAndEmptySets()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithNamedAndEmptySets.FakeOptionsWithNamedAndEmptySets()", file="InstanceBuilderTests.cs"];
m0_103 [label="expected.ShouldBeEquivalentTo(result.Value.Colors)", span="270-270", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="InstanceBuilderTests.cs"];
m0_104 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="258-258", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="InstanceBuilderTests.cs"];
m0_105 [label="Entry Unk.ShouldBeEquivalentTo", span="", cluster="Unk.ShouldBeEquivalentTo", file="InstanceBuilderTests.cs"];
m0_223 [label="new FakeOptionWithRequiredAndSet()", span="528-528", cluster="lambda expression", file="InstanceBuilderTests.cs", color=green, community=0];
m0_224 [label="Exit lambda expression", span="528-528", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_225 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="539-539", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs"];
m0_398 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="903-903", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="InstanceBuilderTests.cs"];
m0_399 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithScalarValueAndSequenceStringAdjacent>>(() => new FakeOptionsWithScalarValueAndSequenceStringAdjacent()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="908-912", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_400 [label="expected.ShouldBeEquivalentTo(result.Value)", span="915-915", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="InstanceBuilderTests.cs"];
m0_401 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="903-903", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="InstanceBuilderTests.cs"];
m0_83 [label="Exit RailwaySharp.ErrorHandling.Result.FailWith<TSuccess, TMessage>(System.Collections.Generic.IEnumerable<TMessage>)", span="368-368", cluster="RailwaySharp.ErrorHandling.Result.FailWith<TSuccess, TMessage>(System.Collections.Generic.IEnumerable<TMessage>)", file="InstanceBuilderTests.cs"];
m0_144 [label="Exit lambda expression", span="534-536", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_145 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_146 [label="Entry lambda expression", span="539-539", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_147 [label="new Bad<TSuccess, TMessage>(errors.Concat(messages))", span="539-539", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_56 [label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.ToString()", span="293-293", cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.ToString()", file="InstanceBuilderTests.cs"];
m0_57 [label=Tag, span="295-295", cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.ToString()", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_58 [label="ResultType.Ok", span="297-297", cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.ToString()", file="InstanceBuilderTests.cs"];
m0_59 [label="var ok = (Ok<TSuccess, TMessage>)this", span="298-298", cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.ToString()", file="InstanceBuilderTests.cs"];
m0_80 [label="Entry lambda expression", span="201-201", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_226 [label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="542-542", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs"];
m0_227 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequired>>(() => new FakeOptionWithRequired()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="545-549", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs", color=green, community=0];
m0_228 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="552-552", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs"];
m0_236 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="564-568", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", color=green, community=0];
m0_229 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="539-539", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs"];
m0_230 [label="Entry lambda expression", span="546-546", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_231 [label="new FakeOptionWithRequired()", span="546-546", cluster="lambda expression", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_232 [label="Exit lambda expression", span="546-546", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_234 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="558-558", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_233 [label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", file="InstanceBuilderTests.cs"];
m0_235 [label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="561-561", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_237 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="571-571", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_238 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="558-558", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_32 [label="Exit RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>.GetHashCode()", span="216-216", cluster="RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>.GetHashCode()", file="InstanceBuilderTests.cs"];
m0_33 [label="Entry object.GetHashCode()", span="0-0", cluster="object.GetHashCode()", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_34 [label="other == null", span="228-228", cluster="RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>.Equals(RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>)", file="InstanceBuilderTests.cs"];
m0_35 [label="return false;", span="230-230", cluster="RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>.Equals(RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>)", file="InstanceBuilderTests.cs"];
m0_388 [label="Entry lambda expression", span="879-879", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_68 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="175-175", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceBuilderTests.cs"];
m0_72 [label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="182-182", cluster="lambda expression", file="InstanceBuilderTests.cs", color=green, community=0];
m0_69 [label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="265-265", cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs"];
m0_70 [label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20", cluster="CommandLine.NameInfo.NameInfo(string, string)", file="InstanceBuilderTests.cs"];
m0_73 [label="Exit lambda expression", span="182-182", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_131 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="314-314", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_130 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="327-327", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_132 [label="Exit lambda expression", span="513-518", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_134 [label="Entry lambda expression", span="517-517", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_135 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="333-333", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs"];
m0_136 [label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="336-342", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs"];
m0_143 [label="Exit lambda expression", span="346-346", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_142 [label="new FakeOptionsWithValues()", span="346-346", cluster="lambda expression", file="InstanceBuilderTests.cs", color=green, community=0];
m0_148 [label="Entry lambda expression", span="369-369", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_158 [label="new Bad<TSuccess, TMessage>(messages)", span="559-559", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_156 [label="Entry lambda expression", span="391-391", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_157 [label="new FakeOptionsWithSequenceAndSeparator()", span="391-391", cluster="lambda expression", file="InstanceBuilderTests.cs", color=green, community=0];
m0_159 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", file="InstanceBuilderTests.cs"];
m0_163 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="407-407", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="InstanceBuilderTests.cs"];
m0_164 [label="Entry lambda expression", span="413-413", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_165 [label="new FakeOptionsWithSequenceAndSeparator()", span="413-413", cluster="lambda expression", file="InstanceBuilderTests.cs", color=green, community=0];
m0_189 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="457-457", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs"];
m0_190 [label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl'')),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''))\r\n                }", span="460-464", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs"];
m0_191 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSets>>(() => new FakeOptionsWithSets()),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="467-471", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs", color=green, community=0];
m0_192 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="474-474", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs"];
m0_194 [label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="298-298", cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs"];
m0_195 [label="Entry lambda expression", span="468-468", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_196 [label="new FakeOptionsWithSets()", span="468-468", cluster="lambda expression", file="InstanceBuilderTests.cs", color=green, community=0];
m0_198 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", file="InstanceBuilderTests.cs"];
m0_199 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="480-480", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceBuilderTests.cs"];
m0_193 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="457-457", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs"];
m0_197 [label="Exit lambda expression", span="468-468", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_200 [label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = null\r\n            }", span="482-485", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceBuilderTests.cs"];
m0_201 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] { ''--ftpurl'', ''str1''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="487-491", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceBuilderTests.cs", color=green, community=0];
m0_248 [label="Entry lambda expression", span="803-803", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_249 [label="new FakeOptions()", span="584-584", cluster="lambda expression", file="InstanceBuilderTests.cs", color=green, community=0];
m0_250 [label="Entry lambda expression", span="803-803", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_266 [label="Exit lambda expression", span="622-622", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_276 [label="var expectedResult = new[] { new MissingRequiredOptionError(NameInfo.EmptyName) }", span="657-657", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs"];
m0_277 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithRequiredValue>>(() => new FakeOptionsWithRequiredValue()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="660-664", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs", color=green, community=0];
m0_278 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="667-667", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs"];
m0_13 [label="return true;", span="155-155", cluster="RailwaySharp.ErrorHandling.Unit.operator ==(RailwaySharp.ErrorHandling.Unit, RailwaySharp.ErrorHandling.Unit)", file="InstanceBuilderTests.cs"];
m0_14 [label="Exit RailwaySharp.ErrorHandling.Unit.operator ==(RailwaySharp.ErrorHandling.Unit, RailwaySharp.ErrorHandling.Unit)", span="153-153", cluster="RailwaySharp.ErrorHandling.Unit.operator ==(RailwaySharp.ErrorHandling.Unit, RailwaySharp.ErrorHandling.Unit)", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_15 [label="Entry RailwaySharp.ErrorHandling.Unit.operator !=(RailwaySharp.ErrorHandling.Unit, RailwaySharp.ErrorHandling.Unit)", span="158-158", cluster="RailwaySharp.ErrorHandling.Unit.operator !=(RailwaySharp.ErrorHandling.Unit, RailwaySharp.ErrorHandling.Unit)", file="InstanceBuilderTests.cs"];
m0_28 [label="Entry RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>.Equals(RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>)", span="226-226", cluster="RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>.Equals(RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>)", file="InstanceBuilderTests.cs"];
m0_30 [label="Entry RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>.GetHashCode()", span="216-216", cluster="RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>.GetHashCode()", file="InstanceBuilderTests.cs"];
m0_37 [label="Exit RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>.Equals(RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>)", span="226-226", cluster="RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>.Equals(RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>)", file="InstanceBuilderTests.cs"];
m0_38 [label="Entry Unk.SequenceEqual", span="", cluster="Unk.SequenceEqual", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_39 [label="Entry RailwaySharp.ErrorHandling.OkPair.Create<TSuccess, TMessage>(TSuccess, System.Collections.Generic.IEnumerable<TMessage>)", span="242-242", cluster="RailwaySharp.ErrorHandling.OkPair.Create<TSuccess, TMessage>(TSuccess, System.Collections.Generic.IEnumerable<TMessage>)", file="InstanceBuilderTests.cs"];
m0_45 [label="Exit RailwaySharp.ErrorHandling.OkPair.Create<TSuccess, TMessage>(TSuccess, System.Collections.Generic.IEnumerable<TMessage>)", span="242-242", cluster="RailwaySharp.ErrorHandling.OkPair.Create<TSuccess, TMessage>(TSuccess, System.Collections.Generic.IEnumerable<TMessage>)", file="InstanceBuilderTests.cs"];
m0_47 [label="Entry RailwaySharp.ErrorHandling.OkPair.First<TSuccess, TMessage>(RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>)", span="250-250", cluster="RailwaySharp.ErrorHandling.OkPair.First<TSuccess, TMessage>(RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>)", file="InstanceBuilderTests.cs"];
m0_52 [label="Exit RailwaySharp.ErrorHandling.OkPair.Second<TSuccess, TMessage>(RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>)", span="255-255", cluster="RailwaySharp.ErrorHandling.OkPair.Second<TSuccess, TMessage>(RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>)", file="InstanceBuilderTests.cs"];
m0_53 [label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.Result(RailwaySharp.ErrorHandling.ResultType)", span="283-283", cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.Result(RailwaySharp.ErrorHandling.ResultType)", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_54 [label="this.tag = tag", span="285-285", cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.Result(RailwaySharp.ErrorHandling.ResultType)", file="InstanceBuilderTests.cs"];
m0_60 [label="return string.Format(\r\n                        ''OK: {0} - {1}'',\r\n                        ok.Value.Success,\r\n                        string.Join(Environment.NewLine, ok.Value.Messages.Select(v => v.ToString())));", span="299-302", cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.ToString()", file="InstanceBuilderTests.cs", color=red, community=0];
m0_61 [label="var bad = (Bad<TSuccess, TMessage>)this", span="304-304", cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.ToString()", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_62 [label="return string.Format(\r\n                        ''Error: {0}'',\r\n                        string.Join(Environment.NewLine, bad.Messages.Select(v => v.ToString())));", span="305-307", cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.ToString()", file="InstanceBuilderTests.cs"];
m0_81 [label="Entry RailwaySharp.ErrorHandling.Result.FailWith<TSuccess, TMessage>(System.Collections.Generic.IEnumerable<TMessage>)", span="368-368", cluster="RailwaySharp.ErrorHandling.Result.FailWith<TSuccess, TMessage>(System.Collections.Generic.IEnumerable<TMessage>)", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_82 [label="return new Bad<TSuccess, TMessage>(messages);", span="370-370", cluster="RailwaySharp.ErrorHandling.Result.FailWith<TSuccess, TMessage>(System.Collections.Generic.IEnumerable<TMessage>)", file="InstanceBuilderTests.cs"];
m0_89 [label="Exit RailwaySharp.ErrorHandling.Result.Succeed<TSuccess, TMessage>(TSuccess)", span="384-384", cluster="RailwaySharp.ErrorHandling.Result.Succeed<TSuccess, TMessage>(TSuccess)", file="InstanceBuilderTests.cs"];
m0_90 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_91 [label="Entry RailwaySharp.ErrorHandling.Result.Succeed<TSuccess, TMessage>(TSuccess, TMessage)", span="392-392", cluster="RailwaySharp.ErrorHandling.Result.Succeed<TSuccess, TMessage>(TSuccess, TMessage)", file="InstanceBuilderTests.cs"];
m0_116 [label="return result.Tag == ResultType.Bad;", span="481-481", cluster="RailwaySharp.ErrorHandling.Trial.Failed<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="InstanceBuilderTests.cs"];
m0_117 [label="Exit RailwaySharp.ErrorHandling.Trial.Failed<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", span="479-479", cluster="RailwaySharp.ErrorHandling.Trial.Failed<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_118 [label="Entry RailwaySharp.ErrorHandling.Trial.Either<TSuccess, TMessage, TResult>(System.Func<RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>, TResult>, System.Func<System.Collections.Generic.IEnumerable<TMessage>, TResult>, RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", span="490-490", cluster="RailwaySharp.ErrorHandling.Trial.Either<TSuccess, TMessage, TResult>(System.Func<RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>, TResult>, System.Func<System.Collections.Generic.IEnumerable<TMessage>, TResult>, RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="InstanceBuilderTests.cs"];
m0_124 [label="Exit RailwaySharp.ErrorHandling.Trial.Either<TSuccess, TMessage, TResult>(System.Func<RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>, TResult>, System.Func<System.Collections.Generic.IEnumerable<TMessage>, TResult>, RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", span="490-490", cluster="RailwaySharp.ErrorHandling.Trial.Either<TSuccess, TMessage, TResult>(System.Func<RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>, TResult>, System.Func<System.Collections.Generic.IEnumerable<TMessage>, TResult>, RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="InstanceBuilderTests.cs"];
m0_125 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_133 [label="Entry System.Exception.Exception(string)", span="0-0", cluster="System.Exception.Exception(string)", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_141 [label="Exit RailwaySharp.ErrorHandling.Trial.MergeMessages<TSuccess, TMessage>(System.Collections.Generic.IEnumerable<TMessage>, RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", span="529-529", cluster="RailwaySharp.ErrorHandling.Trial.MergeMessages<TSuccess, TMessage>(System.Collections.Generic.IEnumerable<TMessage>, RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="InstanceBuilderTests.cs"];
m0_166 [label="Entry RailwaySharp.ErrorHandling.Trial.Apply<TValue, TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<System.Func<TValue, TSuccess>, TMessage>, RailwaySharp.ErrorHandling.Result<TValue, TMessage>)", span="583-583", cluster="RailwaySharp.ErrorHandling.Trial.Apply<TValue, TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<System.Func<TValue, TSuccess>, TMessage>, RailwaySharp.ErrorHandling.Result<TValue, TMessage>)", file="InstanceBuilderTests.cs"];
m0_174 [label="return new Bad<TSuccess, TMessage>(\r\n                    ((Bad<TValue, TMessage>)result).Messages);", span="601-602", cluster="RailwaySharp.ErrorHandling.Trial.Apply<TValue, TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<System.Func<TValue, TSuccess>, TMessage>, RailwaySharp.ErrorHandling.Result<TValue, TMessage>)", file="InstanceBuilderTests.cs", color=red, community=0];
m0_175 [label="var bad1 = (Bad<Func<TValue, TSuccess>, TMessage>)wrappedFunction", span="605-605", cluster="RailwaySharp.ErrorHandling.Trial.Apply<TValue, TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<System.Func<TValue, TSuccess>, TMessage>, RailwaySharp.ErrorHandling.Result<TValue, TMessage>)", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_176 [label="var bad2 = (Bad<TValue, TMessage>)result", span="606-606", cluster="RailwaySharp.ErrorHandling.Trial.Apply<TValue, TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<System.Func<TValue, TSuccess>, TMessage>, RailwaySharp.ErrorHandling.Result<TValue, TMessage>)", file="InstanceBuilderTests.cs"];
m0_205 [label="ifSuccess(ok.Value.Success, ok.Value.Messages)", span="700-700", cluster="RailwaySharp.ErrorHandling.ResultExtensions.Match<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>, System.Action<TSuccess, System.Collections.Generic.IEnumerable<TMessage>>, System.Action<System.Collections.Generic.IEnumerable<TMessage>>)", file="InstanceBuilderTests.cs"];
m0_206 [label="return;", span="701-701", cluster="RailwaySharp.ErrorHandling.ResultExtensions.Match<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>, System.Action<TSuccess, System.Collections.Generic.IEnumerable<TMessage>>, System.Action<System.Collections.Generic.IEnumerable<TMessage>>)", color=red, community=0, file="InstanceBuilderTests.cs"];
m0_207 [label="var bad = (Bad<TSuccess, TMessage>)result", span="703-703", cluster="RailwaySharp.ErrorHandling.ResultExtensions.Match<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>, System.Action<TSuccess, System.Collections.Generic.IEnumerable<TMessage>>, System.Action<System.Collections.Generic.IEnumerable<TMessage>>)", file="InstanceBuilderTests.cs"];
m0_213 [label="var ok = result as Ok<TSuccess, TMessage>", span="717-717", cluster="RailwaySharp.ErrorHandling.ResultExtensions.Either<TSuccess, TMessage, TResult>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>, System.Func<TSuccess, System.Collections.Generic.IEnumerable<TMessage>, TResult>, System.Func<System.Collections.Generic.IEnumerable<TMessage>, TResult>)", file="InstanceBuilderTests.cs"];
m0_214 [label="ok != null", span="718-718", cluster="RailwaySharp.ErrorHandling.ResultExtensions.Either<TSuccess, TMessage, TResult>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>, System.Func<TSuccess, System.Collections.Generic.IEnumerable<TMessage>, TResult>, System.Func<System.Collections.Generic.IEnumerable<TMessage>, TResult>)", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_215 [label="return ifSuccess(ok.Value.Success, ok.Value.Messages);", span="720-720", cluster="RailwaySharp.ErrorHandling.ResultExtensions.Either<TSuccess, TMessage, TResult>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>, System.Func<TSuccess, System.Collections.Generic.IEnumerable<TMessage>, TResult>, System.Func<System.Collections.Generic.IEnumerable<TMessage>, TResult>)", file="InstanceBuilderTests.cs"];
m0_222 [label="Exit RailwaySharp.ErrorHandling.ResultExtensions.Map<TSuccess, TMessage, TResult>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>, System.Func<TSuccess, TResult>)", span="732-732", cluster="RailwaySharp.ErrorHandling.ResultExtensions.Map<TSuccess, TMessage, TResult>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>, System.Func<TSuccess, TResult>)", file="InstanceBuilderTests.cs"];
m0_239 [label="Entry RailwaySharp.ErrorHandling.ResultExtensions.SelectMany<TSuccess, TMessage, TResult>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>, System.Func<TSuccess, RailwaySharp.ErrorHandling.Result<TResult, TMessage>>)", span="784-784", cluster="RailwaySharp.ErrorHandling.ResultExtensions.SelectMany<TSuccess, TMessage, TResult>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>, System.Func<TSuccess, RailwaySharp.ErrorHandling.Result<TResult, TMessage>>)", file="InstanceBuilderTests.cs"];
m0_240 [label="return Trial.Bind(func, result);", span="787-787", cluster="RailwaySharp.ErrorHandling.ResultExtensions.SelectMany<TSuccess, TMessage, TResult>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>, System.Func<TSuccess, RailwaySharp.ErrorHandling.Result<TResult, TMessage>>)", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_241 [label="Exit RailwaySharp.ErrorHandling.ResultExtensions.SelectMany<TSuccess, TMessage, TResult>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>, System.Func<TSuccess, RailwaySharp.ErrorHandling.Result<TResult, TMessage>>)", span="784-784", cluster="RailwaySharp.ErrorHandling.ResultExtensions.SelectMany<TSuccess, TMessage, TResult>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>, System.Func<TSuccess, RailwaySharp.ErrorHandling.Result<TResult, TMessage>>)", file="InstanceBuilderTests.cs"];
m0_256 [label="Entry RailwaySharp.ErrorHandling.ResultExtensions.Select<TSuccess, TMessage, TResult>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>, System.Func<TSuccess, TResult>)", span="819-819", cluster="RailwaySharp.ErrorHandling.ResultExtensions.Select<TSuccess, TMessage, TResult>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>, System.Func<TSuccess, TResult>)", file="InstanceBuilderTests.cs"];
m0_257 [label="return Trial.Lift(func, result);", span="822-822", cluster="RailwaySharp.ErrorHandling.ResultExtensions.Select<TSuccess, TMessage, TResult>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>, System.Func<TSuccess, TResult>)", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_258 [label="Exit RailwaySharp.ErrorHandling.ResultExtensions.Select<TSuccess, TMessage, TResult>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>, System.Func<TSuccess, TResult>)", span="819-819", cluster="RailwaySharp.ErrorHandling.ResultExtensions.Select<TSuccess, TMessage, TResult>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>, System.Func<TSuccess, TResult>)", file="InstanceBuilderTests.cs"];
m0_265 [label="Exit RailwaySharp.ErrorHandling.ResultExtensions.FailedWith<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", span="831-831", cluster="RailwaySharp.ErrorHandling.ResultExtensions.FailedWith<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_280 [label="result.Tag == ResultType.Ok", span="872-872", cluster="RailwaySharp.ErrorHandling.ResultExtensions.Messages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="InstanceBuilderTests.cs", color=red, community=0];
m0_281 [label="var ok = (Ok<TSuccess, TMessage>)result", span="874-874", cluster="RailwaySharp.ErrorHandling.ResultExtensions.Messages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_282 [label="return ok.Value.Messages;", span="875-875", cluster="RailwaySharp.ErrorHandling.ResultExtensions.Messages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="InstanceBuilderTests.cs"];
m0_288 [label="RailwaySharp.ErrorHandling.Ok<TSuccess, TMessage>", span="", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_289 [label="RailwaySharp.ErrorHandling.Bad<TSuccess, TMessage>", span="", cluster="lambda expression", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_290 [label="System.Collections.Generic.IEnumerable<TMessage>", span="", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_296 [label="Entry lambda expression", span="702-702", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_297 [label="new FakeOptions()", span="702-702", cluster="lambda expression", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_298 [label="Exit lambda expression", span="702-702", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_303 [label="Entry lambda expression", span="724-724", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_304 [label="new FakeOptionsWithNullables()", span="724-724", cluster="lambda expression", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_305 [label="Exit lambda expression", span="724-724", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_311 [label="Entry lambda expression", span="746-746", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_312 [label="new FakeOptionsWithNullables()", span="746-746", cluster="lambda expression", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_313 [label="Exit lambda expression", span="746-746", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_321 [label="Entry lambda expression", span="766-766", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_322 [label="new FakeOptionsWithFSharpOption()", span="766-766", cluster="lambda expression", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_323 [label="Exit lambda expression", span="766-766", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_331 [label="Entry lambda expression", span="790-790", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_332 [label="new FakeOptionsWithFSharpOption()", span="790-790", cluster="lambda expression", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_333 [label="Exit lambda expression", span="790-790", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_340 [label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinZero>>(() => new FakeOptionsWithMinZero()),\r\n                new string[] {},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="810-814", cluster="lambda expression", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_339 [label="Entry lambda expression", span="810-814", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_341 [label="Exit lambda expression", span="810-814", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_342 [label="Entry lambda expression", span="811-811", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_343 [label="new FakeOptionsWithMinZero()", span="811-811", cluster="lambda expression", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_344 [label="Exit lambda expression", span="811-811", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_351 [label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMaxZero>>(() => new FakeOptionsWithMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="824-828", cluster="lambda expression", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_350 [label="Entry lambda expression", span="824-828", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_352 [label="Exit lambda expression", span="824-828", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_353 [label="Entry lambda expression", span="825-825", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_354 [label="new FakeOptionsWithMaxZero()", span="825-825", cluster="lambda expression", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_355 [label="Exit lambda expression", span="825-825", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_362 [label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinMaxZero>>(() => new FakeOptionsWithMinMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="838-842", cluster="lambda expression", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_361 [label="Entry lambda expression", span="838-842", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_363 [label="Exit lambda expression", span="838-842", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_364 [label="Entry lambda expression", span="839-839", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_365 [label="new FakeOptionsWithMinMaxZero()", span="839-839", cluster="lambda expression", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_366 [label="Exit lambda expression", span="839-839", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_374 [label="Entry lambda expression", span="858-858", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_375 [label="new FakeOptionsWithNamedAndEmptySets()", span="858-858", cluster="lambda expression", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_376 [label="Exit lambda expression", span="858-858", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_385 [label="Entry lambda expression", span="873-873", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_386 [label="new FakeOptions()", span="873-873", cluster="lambda expression", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_387 [label="Exit lambda expression", span="873-873", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_395 [label="Entry lambda expression", span="890-890", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_396 [label="new FakeOptionsWithRequiredValue()", span="890-890", cluster="lambda expression", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_397 [label="Exit lambda expression", span="890-890", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_402 [label="Entry lambda expression", span="909-909", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_403 [label="new FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="909-909", cluster="lambda expression", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_404 [label="Exit lambda expression", span="909-909", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_379 [label="x == expected", span="864-864", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_378 [label="Entry lambda expression", span="864-864", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_389 [label="x == expected", span="879-879", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_380 [label="Exit lambda expression", span="864-864", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_390 [label="Exit lambda expression", span="879-879", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_36 [label="Entry Unk.SequenceEqual", span="", cluster="Unk.SequenceEqual", file="InstanceBuilderTests.cs"];
m0_202 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="494-494", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceBuilderTests.cs"];
m0_203 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="480-480", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceBuilderTests.cs"];
m0_208 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="500-500", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs"];
m0_209 [label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="502-505", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs"];
m0_11 [label="Exit RailwaySharp.ErrorHandling.Unit.ToString()", span="148-148", cluster="RailwaySharp.ErrorHandling.Unit.ToString()", file="InstanceBuilderTests.cs"];
m0_31 [label="return new { Success, Messages }.GetHashCode();", span="218-218", cluster="RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>.GetHashCode()", file="InstanceBuilderTests.cs"];
m0_220 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="519-519", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs"];
m0_221 [label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="287-287", cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs"];
m0_185 [label="Entry RailwaySharp.ErrorHandling.Trial.Collect<TSuccess, TMessage>(System.Collections.Generic.IEnumerable<RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>>)", span="645-645", cluster="RailwaySharp.ErrorHandling.Trial.Collect<TSuccess, TMessage>(System.Collections.Generic.IEnumerable<RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>>)", file="InstanceBuilderTests.cs"];
m0_186 [label="return Lift(Enumerable.Reverse, xs.Fold<Result<TSuccess, TMessage>, Result<IEnumerable<TSuccess>, TMessage>>(\r\n                (result, next) =>\r\n                {\r\n                    if (result.Tag == ResultType.Ok && next.Tag == ResultType.Ok)\r\n                    {\r\n                        var ok1 = (Ok<TSuccess, TMessage>)result;\r\n                        var ok2 = (Ok<TSuccess, TMessage>)next;\r\n                        return\r\n                            new Ok<IEnumerable<TSuccess>, TMessage>(\r\n                                new OkPair<IEnumerable<TSuccess>, TMessage>(\r\n                                    new[] { ok2.Value.Success, ok1.Value.Success },\r\n                                    ok1.Value.Messages.Concat(ok2.Value.Messages)));\r\n                    }\r\n                    if ((result.Tag == ResultType.Ok && next.Tag == ResultType.Bad)\r\n                        || (result.Tag == ResultType.Bad && next.Tag == ResultType.Ok))\r\n                    {\r\n                        var m1 = result.Tag == ResultType.Ok\r\n                            ? ((Ok<TSuccess, TMessage>)result).Value.Messages\r\n                            : ((Bad<TSuccess, TMessage>)next).Messages;\r\n                        var m2 = result.Tag == ResultType.Bad\r\n                            ? ((Bad<TSuccess, TMessage>)result).Messages\r\n                            : ((Ok<TSuccess, TMessage>)next).Value.Messages;\r\n                        return new Bad<IEnumerable<TSuccess>, TMessage>(m1.Concat(m2));\r\n                    }\r\n                    var bad1 = (Bad<TSuccess, TMessage>)result;\r\n                    var bad2 = (Bad<TSuccess, TMessage>)next;\r\n                    return new Bad<IEnumerable<TSuccess>, TMessage>(bad1.Messages.Concat(bad2.Messages));\r\n                }));", span="648-675", cluster="RailwaySharp.ErrorHandling.Trial.Collect<TSuccess, TMessage>(System.Collections.Generic.IEnumerable<RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>>)", color=red, community=0, file="InstanceBuilderTests.cs"];
m0_187 [label="Exit RailwaySharp.ErrorHandling.Trial.Collect<TSuccess, TMessage>(System.Collections.Generic.IEnumerable<RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>>)", span="645-645", cluster="RailwaySharp.ErrorHandling.Trial.Collect<TSuccess, TMessage>(System.Collections.Generic.IEnumerable<RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>>)", file="InstanceBuilderTests.cs"];
m0_381 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", span="869-869", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="InstanceBuilderTests.cs"];
m0_382 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="872-876", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_383 [label="result.Errors.Should().HaveCount(x => x == expected)", span="879-879", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="InstanceBuilderTests.cs"];
m0_384 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", span="869-869", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="InstanceBuilderTests.cs"];
m0_160 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="407-407", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="InstanceBuilderTests.cs"];
m0_161 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndSeparator>>(() => new FakeOptionsWithSequenceAndSeparator()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="412-416", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="InstanceBuilderTests.cs", color=green, community=0];
m0_162 [label="expected.ShouldBeEquivalentTo(result.Value.StringSequence)", span="419-419", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="InstanceBuilderTests.cs"];
m0_173 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="35-35", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilderTests.cs"];
m0_177 [label="return new Bad<TSuccess, TMessage>(bad1.Messages.Concat(bad2.Messages));", span="608-608", cluster="RailwaySharp.ErrorHandling.Trial.Apply<TValue, TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<System.Func<TValue, TSuccess>, TMessage>, RailwaySharp.ErrorHandling.Result<TValue, TMessage>)", file="InstanceBuilderTests.cs"];
m0_178 [label="Exit RailwaySharp.ErrorHandling.Trial.Apply<TValue, TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<System.Func<TValue, TSuccess>, TMessage>, RailwaySharp.ErrorHandling.Result<TValue, TMessage>)", span="583-583", cluster="RailwaySharp.ErrorHandling.Trial.Apply<TValue, TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<System.Func<TValue, TSuccess>, TMessage>, RailwaySharp.ErrorHandling.Result<TValue, TMessage>)", file="InstanceBuilderTests.cs"];
m0_48 [label="return okPair.Success;", span="252-252", cluster="RailwaySharp.ErrorHandling.OkPair.First<TSuccess, TMessage>(RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>)", file="InstanceBuilderTests.cs"];
m0_49 [label="Exit RailwaySharp.ErrorHandling.OkPair.First<TSuccess, TMessage>(RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>)", span="250-250", cluster="RailwaySharp.ErrorHandling.OkPair.First<TSuccess, TMessage>(RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>)", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_50 [label="Entry RailwaySharp.ErrorHandling.OkPair.Second<TSuccess, TMessage>(RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>)", span="255-255", cluster="RailwaySharp.ErrorHandling.OkPair.Second<TSuccess, TMessage>(RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>)", file="InstanceBuilderTests.cs"];
m0_51 [label="return okPair.Messages;", span="257-257", cluster="RailwaySharp.ErrorHandling.OkPair.Second<TSuccess, TMessage>(RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>)", file="InstanceBuilderTests.cs"];
m0_10 [label="return ''()'';", span="150-150", cluster="RailwaySharp.ErrorHandling.Unit.ToString()", file="InstanceBuilderTests.cs"];
m0_212 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="500-500", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs"];
m0_216 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="519-519", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs"];
m0_217 [label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="521-525", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", color=red, community=0, file="InstanceBuilderTests.cs"];
m0_218 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="527-531", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs", color=green, community=0];
m0_119 [label="var ok = trialResult as Ok<TSuccess, TMessage>", span="495-495", cluster="RailwaySharp.ErrorHandling.Trial.Either<TSuccess, TMessage, TResult>(System.Func<RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>, TResult>, System.Func<System.Collections.Generic.IEnumerable<TMessage>, TResult>, RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="InstanceBuilderTests.cs"];
m0_121 [label="return successFunc(ok.Value);", span="498-498", cluster="RailwaySharp.ErrorHandling.Trial.Either<TSuccess, TMessage, TResult>(System.Func<RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>, TResult>, System.Func<System.Collections.Generic.IEnumerable<TMessage>, TResult>, RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_120 [label="ok != null", span="496-496", cluster="RailwaySharp.ErrorHandling.Trial.Either<TSuccess, TMessage, TResult>(System.Func<RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>, TResult>, System.Func<System.Collections.Generic.IEnumerable<TMessage>, TResult>, RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="InstanceBuilderTests.cs"];
m0_122 [label="var bad = (Bad<TSuccess, TMessage>)trialResult", span="500-500", cluster="RailwaySharp.ErrorHandling.Trial.Either<TSuccess, TMessage, TResult>(System.Func<RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>, TResult>, System.Func<System.Collections.Generic.IEnumerable<TMessage>, TResult>, RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="InstanceBuilderTests.cs"];
m0_123 [label="return failureFunc(bad.Messages);", span="501-501", cluster="RailwaySharp.ErrorHandling.Trial.Either<TSuccess, TMessage, TResult>(System.Func<RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>, TResult>, System.Func<System.Collections.Generic.IEnumerable<TMessage>, TResult>, RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="InstanceBuilderTests.cs"];
m0_140 [label="return Either(successFunc, failureFunc, result);", span="541-541", cluster="RailwaySharp.ErrorHandling.Trial.MergeMessages<TSuccess, TMessage>(System.Collections.Generic.IEnumerable<TMessage>, RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="InstanceBuilderTests.cs"];
m0_283 [label="var bad = (Bad<TSuccess, TMessage>)result", span="877-877", cluster="RailwaySharp.ErrorHandling.ResultExtensions.Messages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="InstanceBuilderTests.cs"];
m0_367 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMinMaxZero.FakeOptionsWithMinMaxZero()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithMinMaxZero.FakeOptionsWithMinMaxZero()", file="InstanceBuilderTests.cs"];
m0_87 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="227-227", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_88 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="214-214", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_40 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", file="InstanceBuilderTests.cs"];
m0_12 [label="Entry RailwaySharp.ErrorHandling.Unit.operator ==(RailwaySharp.ErrorHandling.Unit, RailwaySharp.ErrorHandling.Unit)", span="153-153", cluster="RailwaySharp.ErrorHandling.Unit.operator ==(RailwaySharp.ErrorHandling.Unit, RailwaySharp.ErrorHandling.Unit)", file="InstanceBuilderTests.cs"];
m0_279 [label="Entry RailwaySharp.ErrorHandling.ResultExtensions.Messages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", span="870-870", cluster="RailwaySharp.ErrorHandling.ResultExtensions.Messages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="InstanceBuilderTests.cs"];
m0_324 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()", file="InstanceBuilderTests.cs"];
m0_320 [label="Entry Unk.get_IsSome", span="", cluster="Unk.get_IsSome", file="InstanceBuilderTests.cs"];
m0_219 [label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0", cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", file="InstanceBuilderTests.cs"];
m0_391 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="884-884", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="InstanceBuilderTests.cs"];
m0_392 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithRequiredValue>>(() => new FakeOptionsWithRequiredValue()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="889-893", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_393 [label="expected.ShouldBeEquivalentTo(result.Value)", span="896-896", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="InstanceBuilderTests.cs"];
m0_394 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="884-884", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="InstanceBuilderTests.cs"];
m0_115 [label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="309-309", cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs"];
m0_64 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="InstanceBuilderTests.cs"];
m0_66 [label="Entry string.Format(string, object, object)", span="0-0", cluster="string.Format(string, object, object)", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_65 [label="Entry Unk.Join", span="", cluster="Unk.Join", file="InstanceBuilderTests.cs"];
m0_67 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="InstanceBuilderTests.cs"];
m0_137 [label="Entry RailwaySharp.ErrorHandling.Trial.MergeMessages<TSuccess, TMessage>(System.Collections.Generic.IEnumerable<TMessage>, RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", span="529-529", cluster="RailwaySharp.ErrorHandling.Trial.MergeMessages<TSuccess, TMessage>(System.Collections.Generic.IEnumerable<TMessage>, RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_138 [label="Func<OkPair<TSuccess, TMessage>, Result<TSuccess, TMessage>> successFunc =\r\n                pair =>\r\n                    new Ok<TSuccess, TMessage>(\r\n                        new OkPair<TSuccess, TMessage>(pair.Success, messages.Concat(pair.Messages)))", span="533-536", cluster="RailwaySharp.ErrorHandling.Trial.MergeMessages<TSuccess, TMessage>(System.Collections.Generic.IEnumerable<TMessage>, RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="InstanceBuilderTests.cs"];
m0_139 [label="Func<IEnumerable<TMessage>, Result<TSuccess, TMessage>> failureFunc =\r\n                errors => new Bad<TSuccess, TMessage>(errors.Concat(messages))", span="538-539", cluster="RailwaySharp.ErrorHandling.Trial.MergeMessages<TSuccess, TMessage>(System.Collections.Generic.IEnumerable<TMessage>, RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="InstanceBuilderTests.cs"];
m0_405 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", file="InstanceBuilderTests.cs"];
m0_356 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMaxZero.FakeOptionsWithMaxZero()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithMaxZero.FakeOptionsWithMaxZero()", file="InstanceBuilderTests.cs"];
m0_373 [label="Entry Unk.HaveCount", span="", cluster="Unk.HaveCount", file="InstanceBuilderTests.cs"];
m0_16 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="43-43", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="InstanceBuilderTests.cs"];
m0_17 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="48-52", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="InstanceBuilderTests.cs", color=green, community=0];
m0_325 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="784-784", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="InstanceBuilderTests.cs"];
m0_326 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithFSharpOption>>(() => new FakeOptionsWithFSharpOption()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="789-793", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_327 [label="result.Value.Offset != null", span="796-796", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="InstanceBuilderTests.cs"];
m0_328 [label="expectedValue.ShouldBeEquivalentTo(result.Value.Offset.Value)", span="798-798", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="InstanceBuilderTests.cs"];
m0_329 [label="expectedSome.ShouldBeEquivalentTo(FSharpOption<int>.get_IsSome(result.Value.Offset))", span="800-800", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="InstanceBuilderTests.cs"];
m0_330 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="784-784", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="InstanceBuilderTests.cs"];
m0_264 [label="return bad.Messages;", span="842-842", cluster="RailwaySharp.ErrorHandling.ResultExtensions.FailedWith<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="InstanceBuilderTests.cs"];
m0_211 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="514-514", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs"];
m0_299 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="718-718", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="InstanceBuilderTests.cs"];
m0_300 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNullables>>(() => new FakeOptionsWithNullables()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="723-727", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_301 [label="expected.ShouldBeEquivalentTo(result.Value.NullableInt)", span="730-730", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="InstanceBuilderTests.cs"];
m0_302 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="718-718", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="InstanceBuilderTests.cs"];
m0_242 [label="Entry RailwaySharp.ErrorHandling.ResultExtensions.SelectMany<TSuccess, TMessage, TValue, TResult>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>, System.Func<TSuccess, RailwaySharp.ErrorHandling.Result<TValue, TMessage>>, System.Func<TSuccess, TValue, TResult>)", span="798-798", cluster="RailwaySharp.ErrorHandling.ResultExtensions.SelectMany<TSuccess, TMessage, TValue, TResult>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>, System.Func<TSuccess, RailwaySharp.ErrorHandling.Result<TValue, TMessage>>, System.Func<TSuccess, TValue, TResult>)", file="InstanceBuilderTests.cs"];
m0_244 [label="Func<\r\n                Result<TSuccess, TMessage>,\r\n                Result<TValue, TMessage>,\r\n                Result<TResult, TMessage>\r\n            > liftedMapper = (a, b) => Trial.Lift2(curriedMapper, a, b)", span="804-808", cluster="RailwaySharp.ErrorHandling.ResultExtensions.SelectMany<TSuccess, TMessage, TValue, TResult>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>, System.Func<TSuccess, RailwaySharp.ErrorHandling.Result<TValue, TMessage>>, System.Func<TSuccess, TValue, TResult>)", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_243 [label="Func<TSuccess, Func<TValue, TResult>> curriedMapper = suc => val => mapperFunc(suc, val)", span="803-803", cluster="RailwaySharp.ErrorHandling.ResultExtensions.SelectMany<TSuccess, TMessage, TValue, TResult>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>, System.Func<TSuccess, RailwaySharp.ErrorHandling.Result<TValue, TMessage>>, System.Func<TSuccess, TValue, TResult>)", file="InstanceBuilderTests.cs"];
m0_245 [label="var v = Trial.Bind(func, result)", span="809-809", cluster="RailwaySharp.ErrorHandling.ResultExtensions.SelectMany<TSuccess, TMessage, TValue, TResult>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>, System.Func<TSuccess, RailwaySharp.ErrorHandling.Result<TValue, TMessage>>, System.Func<TSuccess, TValue, TResult>)", file="InstanceBuilderTests.cs"];
m0_246 [label="return liftedMapper(result, v);", span="810-810", cluster="RailwaySharp.ErrorHandling.ResultExtensions.SelectMany<TSuccess, TMessage, TValue, TResult>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>, System.Func<TSuccess, RailwaySharp.ErrorHandling.Result<TValue, TMessage>>, System.Func<TSuccess, TValue, TResult>)", file="InstanceBuilderTests.cs", color=red, community=0];
m0_210 [label="Entry System.Action<T1, T2>.Invoke(T1, T2)", span="0-0", cluster="System.Action<T1, T2>.Invoke(T1, T2)", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_291 [label="System.Func<TValue, RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>>", span="", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_293 [label=TSuccess, span="", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_292 [label="System.Func<TSuccess, TValue, TResult>", span="", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_294 [label=curriedMapper, span="", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_295 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="695-695", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_8 [label="Exit RailwaySharp.ErrorHandling.Unit.GetHashCode()", span="143-143", cluster="RailwaySharp.ErrorHandling.Unit.GetHashCode()", file="InstanceBuilderTests.cs"];
m0_102 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="263-267", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="InstanceBuilderTests.cs", color=green, community=0];
m0_372 [label="Entry Unk.Should", span="", cluster="Unk.Should", file="InstanceBuilderTests.cs"];
m0_284 [label="return bad.Messages;", span="878-878", cluster="RailwaySharp.ErrorHandling.ResultExtensions.Messages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="InstanceBuilderTests.cs"];
m0_285 [label="Exit RailwaySharp.ErrorHandling.ResultExtensions.Messages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", span="870-870", cluster="RailwaySharp.ErrorHandling.ResultExtensions.Messages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_286 [label="RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>", span="", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="InstanceBuilderTests.cs"];
m0_287 [label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>", span="", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="InstanceBuilderTests.cs"];
m0_345 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMinZero.FakeOptionsWithMinZero()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithMinZero.FakeOptionsWithMinZero()", file="InstanceBuilderTests.cs"];
m0_346 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", span="821-821", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="InstanceBuilderTests.cs"];
m0_347 [label="Action test = () => InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMaxZero>>(() => new FakeOptionsWithMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="824-828", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_348 [label="Assert.Throws<ApplicationException>(test)", span="831-831", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="InstanceBuilderTests.cs"];
m0_349 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", span="821-821", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="InstanceBuilderTests.cs"];
m0_406 [label=fakeOptions, span="", file="InstanceBuilderTests.cs"];
m0_408 [label=int, span="", file="InstanceBuilderTests.cs"];
m0_409 [label=int, span="", file="InstanceBuilderTests.cs"];
m1_51 [label="Entry Unk.SingleOrDefault", span="", cluster="Unk.SingleOrDefault", file="InstanceChooser.cs"];
m1_7 [label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="InstanceChooser.cs"];
m1_33 [label="Entry Unk.Just", span="", cluster="Unk.Just", file="InstanceChooser.cs"];
m1_18 [label="Entry CommandLine.NoVerbSelectedError.NoVerbSelectedError()", span="406-406", cluster="CommandLine.NoVerbSelectedError.NoVerbSelectedError()", file="InstanceChooser.cs"];
m1_19 [label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68", cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="InstanceChooser.cs"];
m1_20 [label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>, CommandLine.Infrastructure.Maybe<System.Collections.Generic.IEnumerable<System.Type>>)", span="105-105", cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>, CommandLine.Infrastructure.Maybe<System.Collections.Generic.IEnumerable<System.Type>>)", file="InstanceChooser.cs"];
m1_16 [label="return new string(' ', value);", span="31-31", cluster="CommandLine.Infrastructure.StringExtensions.Spaces(int)", file="InstanceChooser.cs"];
m1_34 [label="Entry Unk.>", span="", cluster="Unk.>", file="InstanceChooser.cs"];
m1_29 [label="Entry Unk.Any", span="", cluster="Unk.Any", file="InstanceChooser.cs"];
m1_11 [label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11", cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="InstanceChooser.cs"];
m1_25 [label="Entry CommandLine.Core.InstanceChooser.CreateHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", span="69-69", cluster="CommandLine.Core.InstanceChooser.CreateHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", file="InstanceChooser.cs"];
m1_49 [label="return verb.Length > 0\r\n                      ? verbs.SingleOrDefault(v => nameComparer.Equals(v.Item1.Name, verb))\r\n                             .ToMaybe()\r\n                             .Return(\r\n                                 v => new HelpVerbRequestedError(v.Item1.Name, v.Item2, true),\r\n                                 new HelpVerbRequestedError(null, null, false))\r\n                      : new HelpVerbRequestedError(null, null, false);", span="74-80", cluster="CommandLine.Core.InstanceChooser.CreateHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", file="InstanceChooser.cs"];
m1_50 [label="Exit CommandLine.Core.InstanceChooser.CreateHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", span="69-69", cluster="CommandLine.Core.InstanceChooser.CreateHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", file="InstanceChooser.cs"];
m1_12 [label="var verbs = Verb.SelectFromTypes(types)", span="33-33", cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceChooser.cs"];
m1_13 [label="return arguments.Empty()\r\n                ? ParserResult.Create<object>(\r\n                    ParserResultType.Verbs, new NullInstance(), new[] { new NoVerbSelectedError() }, Maybe.Just(types))\r\n                : nameComparer.Equals(''help'', arguments.First())\r\n                   ? ParserResult.Create<object>(\r\n                        ParserResultType.Verbs,\r\n                        new NullInstance(), new[] { CreateHelpVerbRequestedError(\r\n                            verbs,\r\n                            arguments.Skip(1).SingleOrDefault() ?? string.Empty,\r\n                            nameComparer) }, Maybe.Just(types))\r\n                   : MatchVerb(tokenizer, verbs, arguments, nameComparer, parsingCulture);", span="35-45", cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceChooser.cs"];
m1_14 [label="Exit CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="26-26", cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceChooser.cs"];
m1_31 [label="Entry CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", span="342-342", cluster="CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", file="InstanceChooser.cs"];
m1_3 [label="Entry CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="26-26", cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceChooser.cs"];
m1_53 [label="Entry CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", span="368-368", cluster="CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", file="InstanceChooser.cs"];
m1_21 [label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="InstanceChooser.cs"];
m1_8 [label="Entry lambda expression", span="19-19", cluster="lambda expression", file="InstanceChooser.cs"];
m1_9 [label="NameLookup.Contains(name, optionSpecs, nameComparer)", span="19-19", cluster="lambda expression", file="InstanceChooser.cs"];
m1_10 [label="Exit lambda expression", span="19-19", cluster="lambda expression", file="InstanceChooser.cs"];
m1_41 [label="Entry Unk.Single", span="", cluster="Unk.Single", file="InstanceChooser.cs"];
m1_22 [label="Entry System.StringComparer.Equals(string, string)", span="0-0", cluster="System.StringComparer.Equals(string, string)", file="InstanceChooser.cs"];
m1_52 [label="Entry Unk.ToMaybe", span="", cluster="Unk.ToMaybe", file="InstanceChooser.cs"];
m1_35 [label="Entry lambda expression", span="55-55", cluster="lambda expression", file="InstanceChooser.cs"];
m1_38 [label="Entry lambda expression", span="57-57", cluster="lambda expression", file="InstanceChooser.cs"];
m1_46 [label="Entry lambda expression", span="66-66", cluster="lambda expression", file="InstanceChooser.cs"];
m1_39 [label="Activator.CreateInstance(verbs.Single(v => nameComparer.Equals(v.Item1.Name, arguments.First())).Item2)", span="57-57", cluster="lambda expression", color=green, community=0, file="InstanceChooser.cs"];
m1_40 [label="Exit lambda expression", span="57-57", cluster="lambda expression", file="InstanceChooser.cs"];
m1_43 [label="Entry lambda expression", span="57-57", cluster="lambda expression", file="InstanceChooser.cs"];
m1_44 [label="nameComparer.Equals(v.Item1.Name, arguments.First())", span="57-57", cluster="lambda expression", color=green, community=0, file="InstanceChooser.cs"];
m1_45 [label="Exit lambda expression", span="57-57", cluster="lambda expression", file="InstanceChooser.cs"];
m1_36 [label="nameComparer.Equals(a.Item1.Name, arguments.First())", span="55-55", cluster="lambda expression", file="InstanceChooser.cs"];
m1_37 [label="Exit lambda expression", span="55-55", cluster="lambda expression", file="InstanceChooser.cs"];
m1_48 [label="Exit lambda expression", span="66-66", cluster="lambda expression", file="InstanceChooser.cs"];
m1_47 [label="v.Item2", span="66-66", cluster="lambda expression", file="InstanceChooser.cs"];
m1_56 [label="nameComparer.Equals(v.Item1.Name, verb)", span="75-75", cluster="lambda expression", file="InstanceChooser.cs"];
m1_55 [label="Entry lambda expression", span="75-75", cluster="lambda expression", file="InstanceChooser.cs"];
m1_57 [label="Exit lambda expression", span="75-75", cluster="lambda expression", file="InstanceChooser.cs"];
m1_5 [label="return Convert.ToString(value, CultureInfo.InvariantCulture);", span="16-16", cluster="CommandLine.Infrastructure.StringExtensions.ToStringInvariant<T>(T)", file="InstanceChooser.cs"];
m1_4 [label="Entry CommandLine.Infrastructure.StringExtensions.ToStringInvariant<T>(T)", span="14-14", cluster="CommandLine.Infrastructure.StringExtensions.ToStringInvariant<T>(T)", file="InstanceChooser.cs"];
m1_58 [label="Entry lambda expression", span="78-78", cluster="lambda expression", file="InstanceChooser.cs"];
m1_6 [label="Exit CommandLine.Infrastructure.StringExtensions.ToStringInvariant<T>(T)", span="14-14", cluster="CommandLine.Infrastructure.StringExtensions.ToStringInvariant<T>(T)", file="InstanceChooser.cs"];
m1_59 [label="new HelpVerbRequestedError(v.Item1.Name, v.Item2, true)", span="78-78", cluster="lambda expression", file="InstanceChooser.cs"];
m1_60 [label="Exit lambda expression", span="78-78", cluster="lambda expression", file="InstanceChooser.cs"];
m1_23 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="InstanceChooser.cs"];
m1_32 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="InstanceChooser.cs"];
m1_0 [label="Entry CommandLine.Infrastructure.StringExtensions.ToOneCharString(char)", span="9-9", cluster="CommandLine.Infrastructure.StringExtensions.ToOneCharString(char)", file="InstanceChooser.cs"];
m1_1 [label="return new string(c, 1);", span="11-11", cluster="CommandLine.Infrastructure.StringExtensions.ToOneCharString(char)", file="InstanceChooser.cs"];
m1_2 [label="Exit CommandLine.Infrastructure.StringExtensions.ToOneCharString(char)", span="9-9", cluster="CommandLine.Infrastructure.StringExtensions.ToOneCharString(char)", file="InstanceChooser.cs"];
m1_54 [label="Entry Unk.Return", span="", cluster="Unk.Return", file="InstanceChooser.cs"];
m1_26 [label="Entry CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="48-48", cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceChooser.cs"];
m1_27 [label="return verbs.Any(a => nameComparer.Equals(a.Item1.Name, arguments.First()))\r\n                ? InstanceBuilder.Build(\r\n                    () => Activator.CreateInstance(verbs.Single(v => nameComparer.Equals(v.Item1.Name, arguments.First())).Item2),\r\n                    tokenizer,\r\n                    arguments.Skip(1),\r\n                    nameComparer,\r\n                    parsingCulture)\r\n                : ParserResult.Create<object>(\r\n                    ParserResultType.Verbs,\r\n                    new NullInstance(),\r\n                    new[] { new BadVerbSelectedError(arguments.First()) },\r\n                    Maybe.Just(verbs.Select(v => v.Item2)));", span="55-66", cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, file="InstanceChooser.cs"];
m1_28 [label="Exit CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="48-48", cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceChooser.cs"];
m1_15 [label="Entry CommandLine.Core.Verb.SelectFromTypes(System.Collections.Generic.IEnumerable<System.Type>)", span="40-40", cluster="CommandLine.Core.Verb.SelectFromTypes(System.Collections.Generic.IEnumerable<System.Type>)", file="InstanceChooser.cs"];
m1_17 [label="Entry CommandLine.NullInstance.NullInstance()", span="9-9", cluster="CommandLine.NullInstance.NullInstance()", file="InstanceChooser.cs"];
m1_42 [label="Entry Unk.CreateInstance", span="", cluster="Unk.CreateInstance", file="InstanceChooser.cs"];
m1_30 [label="Entry Unk.Build", span="", cluster="Unk.Build", file="InstanceChooser.cs"];
m1_24 [label="Entry System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", file="InstanceChooser.cs"];
m1_61 [label="Entry HelpVerbRequestedError.cstr", span="", cluster="HelpVerbRequestedError.cstr", file="InstanceChooser.cs"];
m1_64 [label="System.Collections.Generic.IEnumerable<string>", span="", file="InstanceChooser.cs"];
m1_65 [label="System.StringComparer", span="", file="InstanceChooser.cs"];
m1_66 [label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>", span="", file="InstanceChooser.cs"];
m1_67 [label=string, span="", file="InstanceChooser.cs"];
m1_68 [label="System.StringComparer", span="", file="InstanceChooser.cs"];
m1_62 [label="System.StringComparer", span="", file="InstanceChooser.cs"];
m1_63 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span="", file="InstanceChooser.cs"];
m2_8 [label="Entry CommandLine.Core.Token.IsValue()", span="133-133", cluster="CommandLine.Core.Token.IsValue()", file="Parser.cs"];
m2_11 [label="Entry lambda expression", span="19-20", cluster="lambda expression", file="Parser.cs"];
m2_12 [label="info.TargetType == TargetType.Scalar ? new[] { f, s } : new Token[] { }", span="20-20", cluster="lambda expression", file="Parser.cs"];
m2_13 [label="Exit lambda expression", span="19-20", cluster="lambda expression", file="Parser.cs"];
m2_9 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)", file="Parser.cs"];
m2_10 [label="Entry Unk.MapMaybeOrDefault", span="", cluster="Unk.MapMaybeOrDefault", file="Parser.cs"];
m2_14 [label="System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>", span="", cluster="CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)", file="Parser.cs"];
m2_20 [label="Entry CommandLine.Parser.~Parser()", span="54-54", cluster="CommandLine.Parser.~Parser()", file="Parser.cs"];
m2_21 [label="Dispose(false)", span="56-56", cluster="CommandLine.Parser.~Parser()", file="Parser.cs"];
m2_22 [label="Exit CommandLine.Parser.~Parser()", span="54-54", cluster="CommandLine.Parser.~Parser()", file="Parser.cs"];
m2_33 [label="Entry T.cstr", span="", cluster="T.cstr", file="Parser.cs"];
m2_0 [label="Entry lambda expression", span="20-20", cluster="lambda expression", file="Parser.cs"];
m2_1 [label="new Parser(new ParserSettings{ HelpWriter = Console.Error })", span="20-20", cluster="lambda expression", file="Parser.cs"];
m2_2 [label="Exit lambda expression", span="20-20", cluster="lambda expression", file="Parser.cs"];
m2_49 [label="Entry CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", span="129-129", cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="Parser.cs"];
m2_56 [label="return MakeParserResult(\r\n                () => InstanceChooser.Choose(\r\n                    (arguments, optionSpecs) => Tokenize(arguments, optionSpecs, settings),\r\n                    types,\r\n                    args,\r\n                    settings.NameComparer,\r\n                    settings.ParsingCulture),\r\n                settings);", span="135-142", cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="Parser.cs"];
m2_54 [label="types.Length == 0", span="133-133", cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="Parser.cs"];
m2_50 [label="args == null", span="131-131", cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="Parser.cs"];
m2_52 [label="types == null", span="132-132", cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="Parser.cs"];
m2_55 [label="throw new ArgumentOutOfRangeException(''types'');", span="133-133", cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="Parser.cs"];
m2_51 [label="throw new ArgumentNullException(''args'');", span="131-131", cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="Parser.cs"];
m2_53 [label="throw new ArgumentNullException(''types'');", span="132-132", cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="Parser.cs"];
m2_57 [label="Exit CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", span="129-129", cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="Parser.cs"];
m2_40 [label="Entry Unk.MakeParserResult", span="", cluster="Unk.MakeParserResult", file="Parser.cs"];
m2_3 [label="Entry Unk.Pairwise", span="", cluster="Unk.Pairwise", file="Parser.cs"];
m2_17 [label="this.settings = settings", span="47-47", cluster="CommandLine.Parser.Parser(CommandLine.ParserSettings)", file="Parser.cs"];
m2_18 [label="this.settings.Consumed = true", span="48-48", cluster="CommandLine.Parser.Parser(CommandLine.ParserSettings)", file="Parser.cs"];
m2_19 [label="Exit CommandLine.Parser.Parser(CommandLine.ParserSettings)", span="45-45", cluster="CommandLine.Parser.Parser(CommandLine.ParserSettings)", file="Parser.cs"];
m2_7 [label="Exit CommandLine.Parser.Parser()", span="25-25", cluster="CommandLine.Parser.Parser()", file="Parser.cs"];
m2_48 [label="Entry Unk.Tokenize", span="", cluster="Unk.Tokenize", file="Parser.cs"];
m2_29 [label="Entry CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", span="102-102", cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", file="Parser.cs"];
m2_38 [label="return MakeParserResult(\r\n                () => InstanceBuilder.Build(\r\n                    factory,\r\n                    (arguments, optionSpecs) => Tokenize(arguments, optionSpecs, settings),\r\n                    args,\r\n                    settings.NameComparer,\r\n                    settings.ParsingCulture),\r\n                settings);", span="107-114", cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", color=green, community=0, file="Parser.cs"];
m2_36 [label="args == null", span="105-105", cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", file="Parser.cs"];
m2_34 [label="factory == null", span="104-104", cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", file="Parser.cs"];
m2_37 [label="throw new ArgumentNullException(''args'');", span="105-105", cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", file="Parser.cs"];
m2_35 [label="throw new ArgumentNullException(''factory'');", span="104-104", cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", file="Parser.cs"];
m2_39 [label="Exit CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", span="102-102", cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", file="Parser.cs"];
m2_16 [label="CommandLine.Core.Token", span="", cluster="System.Action<T>.Invoke(T)", file="Parser.cs"];
m2_58 [label="Entry System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", span="0-0", cluster="System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", file="Parser.cs"];
m2_98 [label="Entry Unk.Where", span="", cluster="Unk.Where", file="Parser.cs"];
m2_4 [label="Entry lambda expression", span="17-21", cluster="lambda expression", file="Parser.cs"];
m2_63 [label="Entry CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="26-26", cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="Parser.cs"];
m2_83 [label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11", cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="Parser.cs"];
m2_5 [label="f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).MapMaybeOrDefault(info =>\r\n                                    info.TargetType == TargetType.Scalar ? new[] { f, s } : new Token[] { }, new Token[] { })\r\n                                    : new Token[] { }", span="18-21", cluster="lambda expression", file="Parser.cs"];
m2_6 [label="Exit lambda expression", span="17-21", cluster="lambda expression", file="Parser.cs"];
m2_89 [label="Entry System.Func<TResult>.Invoke()", span="0-0", cluster="System.Func<TResult>.Invoke()", file="Parser.cs"];
m2_91 [label="Entry CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", span="184-184", cluster="CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", file="Parser.cs"];
m2_102 [label="parserResult.Errors.Any()", span="186-186", cluster="CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", file="Parser.cs"];
m2_103 [label="helpWriter.ToMaybe().Do(writer => writer.Write(HelpText.AutoBuild(parserResult)))", span="188-188", cluster="CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", file="Parser.cs"];
m2_104 [label="return parserResult;", span="191-191", cluster="CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", file="Parser.cs"];
m2_105 [label="Exit CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", span="184-184", cluster="CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", file="Parser.cs"];
m2_106 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="Parser.cs"];
m2_99 [label="Entry lambda expression", span="180-180", cluster="lambda expression", file="Parser.cs"];
m2_41 [label="Entry lambda expression", span="108-113", cluster="lambda expression", file="Parser.cs"];
m2_42 [label="InstanceBuilder.Build(\r\n                    factory,\r\n                    (arguments, optionSpecs) => Tokenize(arguments, optionSpecs, settings),\r\n                    args,\r\n                    settings.NameComparer,\r\n                    settings.ParsingCulture)", span="108-113", cluster="lambda expression", color=green, community=0, file="Parser.cs"];
m2_43 [label="Exit lambda expression", span="108-113", cluster="lambda expression", file="Parser.cs"];
m2_45 [label="Entry lambda expression", span="110-110", cluster="lambda expression", file="Parser.cs"];
m2_46 [label="Tokenize(arguments, optionSpecs, settings)", span="110-110", cluster="lambda expression", color=green, community=0, file="Parser.cs"];
m2_47 [label="Exit lambda expression", span="110-110", cluster="lambda expression", file="Parser.cs"];
m2_61 [label="InstanceChooser.Choose(\r\n                    (arguments, optionSpecs) => Tokenize(arguments, optionSpecs, settings),\r\n                    types,\r\n                    args,\r\n                    settings.NameComparer,\r\n                    settings.ParsingCulture)", span="136-141", cluster="lambda expression", file="Parser.cs"];
m2_65 [label="Tokenize(arguments, optionSpecs, settings)", span="137-137", cluster="lambda expression", file="Parser.cs"];
m2_30 [label="Entry lambda expression", span="89-89", cluster="lambda expression", file="Parser.cs"];
m2_60 [label="Entry lambda expression", span="136-141", cluster="lambda expression", file="Parser.cs"];
m2_62 [label="Exit lambda expression", span="136-141", cluster="lambda expression", file="Parser.cs"];
m2_64 [label="Entry lambda expression", span="137-137", cluster="lambda expression", file="Parser.cs"];
m2_66 [label="Exit lambda expression", span="137-137", cluster="lambda expression", file="Parser.cs"];
m2_32 [label="Exit lambda expression", span="89-89", cluster="lambda expression", file="Parser.cs"];
m2_31 [label="new T()", span="89-89", cluster="lambda expression", file="Parser.cs"];
m2_78 [label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, settings.NameComparer))", span="164-164", cluster="lambda expression", file="Parser.cs"];
m2_81 [label="NameLookup.Contains(name, optionSpecs, settings.NameComparer)", span="164-164", cluster="lambda expression", file="Parser.cs"];
m2_85 [label="NameLookup.Contains(name, optionSpecs, settings.NameComparer)", span="165-165", cluster="lambda expression", file="Parser.cs"];
m2_110 [label="writer.Write(HelpText.AutoBuild(parserResult))", span="188-188", cluster="lambda expression", file="Parser.cs"];
m2_77 [label="Entry lambda expression", span="163-164", cluster="lambda expression", file="Parser.cs"];
m2_84 [label="Entry lambda expression", span="165-165", cluster="lambda expression", file="Parser.cs"];
m2_79 [label="Exit lambda expression", span="163-164", cluster="lambda expression", file="Parser.cs"];
m2_80 [label="Entry lambda expression", span="164-164", cluster="lambda expression", file="Parser.cs"];
m2_82 [label="Exit lambda expression", span="164-164", cluster="lambda expression", file="Parser.cs"];
m2_86 [label="Exit lambda expression", span="165-165", cluster="lambda expression", file="Parser.cs"];
m2_109 [label="Entry lambda expression", span="188-188", cluster="lambda expression", file="Parser.cs"];
m2_111 [label="Exit lambda expression", span="188-188", cluster="lambda expression", file="Parser.cs"];
m2_95 [label="Entry lambda expression", span="180-180", cluster="lambda expression", file="Parser.cs"];
m2_97 [label="Exit lambda expression", span="180-180", cluster="lambda expression", file="Parser.cs"];
m2_96 [label="errs.Where(e => e.Tag != ErrorType.UnknownOptionError)", span="180-180", cluster="lambda expression", file="Parser.cs"];
m2_100 [label="e.Tag != ErrorType.UnknownOptionError", span="180-180", cluster="lambda expression", file="Parser.cs"];
m2_101 [label="Exit lambda expression", span="180-180", cluster="lambda expression", file="Parser.cs"];
m2_107 [label="Entry T.ToMaybe<T>()", span="79-79", cluster="T.ToMaybe<T>()", file="Parser.cs"];
m2_90 [label="Entry CommandLine.Parser.HandleUnknownArguments<T>(CommandLine.ParserResult<T>, bool)", span="177-177", cluster="CommandLine.Parser.HandleUnknownArguments<T>(CommandLine.ParserResult<T>, bool)", file="Parser.cs"];
m2_92 [label="return ignoreUnknownArguments\r\n                       ? parserResult.MapErrors(errs => errs.Where(e => e.Tag != ErrorType.UnknownOptionError))\r\n                       : parserResult;", span="179-181", cluster="CommandLine.Parser.HandleUnknownArguments<T>(CommandLine.ParserResult<T>, bool)", file="Parser.cs"];
m2_93 [label="Exit CommandLine.Parser.HandleUnknownArguments<T>(CommandLine.ParserResult<T>, bool)", span="177-177", cluster="CommandLine.Parser.HandleUnknownArguments<T>(CommandLine.ParserResult<T>, bool)", file="Parser.cs"];
m2_94 [label="Entry Unk.MapErrors", span="", cluster="Unk.MapErrors", file="Parser.cs"];
m2_112 [label="Entry CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", span="252-252", cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", file="Parser.cs"];
m2_108 [label="Entry CommandLine.Infrastructure.Maybe<T>.Do<T>(System.Action<T>)", span="108-108", cluster="CommandLine.Infrastructure.Maybe<T>.Do<T>(System.Action<T>)", file="Parser.cs"];
m2_76 [label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="Parser.cs"];
m2_75 [label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="31-31", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="Parser.cs"];
m2_72 [label="Entry System.GC.SuppressFinalize(object)", span="0-0", cluster="System.GC.SuppressFinalize(object)", file="Parser.cs"];
m2_121 [label="Entry CommandLine.ParserSettings.Dispose()", span="119-119", cluster="CommandLine.ParserSettings.Dispose()", file="Parser.cs"];
m2_59 [label="Entry CommandLine.Parser.MakeParserResult<T>(System.Func<CommandLine.ParserResult<T>>, CommandLine.ParserSettings)", span="168-168", cluster="CommandLine.Parser.MakeParserResult<T>(System.Func<CommandLine.ParserResult<T>>, CommandLine.ParserSettings)", file="Parser.cs"];
m2_87 [label="return DisplayHelp(\r\n                HandleUnknownArguments(\r\n                    parseFunc(),\r\n                    settings.IgnoreUnknownArguments),\r\n                settings.HelpWriter);", span="170-174", cluster="CommandLine.Parser.MakeParserResult<T>(System.Func<CommandLine.ParserResult<T>>, CommandLine.ParserSettings)", file="Parser.cs"];
m2_88 [label="Exit CommandLine.Parser.MakeParserResult<T>(System.Func<CommandLine.ParserResult<T>>, CommandLine.ParserSettings)", span="168-168", cluster="CommandLine.Parser.MakeParserResult<T>(System.Func<CommandLine.ParserResult<T>>, CommandLine.ParserSettings)", file="Parser.cs"];
m2_68 [label="Entry CommandLine.Parser.Dispose()", span="148-148", cluster="CommandLine.Parser.Dispose()", file="Parser.cs"];
m2_69 [label="Dispose(true)", span="150-150", cluster="CommandLine.Parser.Dispose()", file="Parser.cs"];
m2_70 [label="GC.SuppressFinalize(this)", span="152-152", cluster="CommandLine.Parser.Dispose()", file="Parser.cs"];
m2_71 [label="Exit CommandLine.Parser.Dispose()", span="148-148", cluster="CommandLine.Parser.Dispose()", file="Parser.cs"];
m2_24 [label="Entry CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", span="84-84", cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", file="Parser.cs"];
m2_27 [label="return ParseArguments(() => new T(), args);", span="89-89", cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", file="Parser.cs"];
m2_25 [label="args == null", span="87-87", cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", file="Parser.cs"];
m2_26 [label="throw new ArgumentNullException(''args'');", span="87-87", cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", file="Parser.cs"];
m2_28 [label="Exit CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", span="84-84", cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", file="Parser.cs"];
m2_67 [label="Entry CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)", span="155-155", cluster="CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)", file="Parser.cs"];
m2_73 [label="return settings.EnableDashDash\r\n                ? Tokenizer.PreprocessDashDash(\r\n                        arguments,\r\n                        args =>\r\n                            Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, settings.NameComparer)))\r\n                : Tokenizer.Tokenize(arguments, name => NameLookup.Contains(name, optionSpecs, settings.NameComparer));", span="160-165", cluster="CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)", file="Parser.cs"];
m2_74 [label="Exit CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)", span="155-155", cluster="CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)", file="Parser.cs"];
m2_23 [label="Entry CommandLine.Parser.Dispose(bool)", span="194-194", cluster="CommandLine.Parser.Dispose(bool)", file="Parser.cs"];
m2_114 [label=disposed, span="196-196", cluster="CommandLine.Parser.Dispose(bool)", file="Parser.cs"];
m2_117 [label="settings != null", span="203-203", cluster="CommandLine.Parser.Dispose(bool)", file="Parser.cs"];
m2_118 [label="settings.Dispose()", span="205-205", cluster="CommandLine.Parser.Dispose(bool)", file="Parser.cs"];
m2_119 [label="disposed = true", span="208-208", cluster="CommandLine.Parser.Dispose(bool)", file="Parser.cs"];
m2_115 [label="return;", span="198-198", cluster="CommandLine.Parser.Dispose(bool)", file="Parser.cs"];
m2_116 [label=disposing, span="201-201", cluster="CommandLine.Parser.Dispose(bool)", file="Parser.cs"];
m2_120 [label="Exit CommandLine.Parser.Dispose(bool)", span="194-194", cluster="CommandLine.Parser.Dispose(bool)", file="Parser.cs"];
m2_15 [label="CommandLine.Core.Token", span="", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="Parser.cs"];
m2_44 [label="Entry Unk.Build", span="", cluster="Unk.Build", file="Parser.cs"];
m2_113 [label="Entry System.IO.TextWriter.Write(string)", span="0-0", cluster="System.IO.TextWriter.Write(string)", file="Parser.cs"];
m2_122 [label="CommandLine.Parser", span="", file="Parser.cs"];
m2_123 [label="System.Func<T>", span="", file="Parser.cs"];
m2_124 [label="System.Collections.Generic.IEnumerable<string>", span="", file="Parser.cs"];
m2_125 [label="System.Collections.Generic.IEnumerable<string>", span="", file="Parser.cs"];
m2_126 [label="params System.Type[]", span="", file="Parser.cs"];
m2_127 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span="", file="Parser.cs"];
m2_128 [label="CommandLine.ParserSettings", span="", file="Parser.cs"];
m2_129 [label="CommandLine.ParserResult<T>", span="", file="Parser.cs"];
m3_10 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()", file="ReflectionExtensions.cs"];
m3_51 [label="Entry System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, params System.Linq.Expressions.ParameterExpression[])", span="0-0", cluster="System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, params System.Linq.Expressions.ParameterExpression[])", file="ReflectionExtensions.cs"];
m3_12 [label="Entry CommandLine.Core.StatePair.Create<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="61-61", cluster="CommandLine.Core.StatePair.Create<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="ReflectionExtensions.cs"];
m3_20 [label="Entry CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", span="40-40", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="ReflectionExtensions.cs"];
m3_21 [label="var expectedTokens = new[] { Token.Name(''x''), Token.Name(''string-seq''),\r\n                Token.Value(''aaa''), Token.Value(''bb''),  Token.Value(''cccc''), Token.Name(''switch''), }", span="43-44", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="ReflectionExtensions.cs"];
m3_22 [label="var specs = new[] { new OptionSpecification(string.Empty, ''string-seq'',\r\n                false, string.Empty, -1, -1, ',', null, typeof(IEnumerable<string>), string.Empty, string.Empty, new List<string>())}", span="45-46", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="ReflectionExtensions.cs"];
m3_24 [label="Assert.True(expectedTokens.SequenceEqual(result.Value))", span="58-58", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="ReflectionExtensions.cs"];
m3_23 [label="var result =\r\n                Tokenizer.ExplodeOptionList(\r\n                    StatePair.Create(\r\n                        Enumerable.Empty<Token>().Concat(new[] { Token.Name(''x''),\r\n                            Token.Name(''string-seq''), Token.Value(''aaa,bb,cccc''), Token.Name(''switch'') }),\r\n                        Enumerable.Empty<Error>()),\r\n                        optionName => NameLookup.WithSeparator(optionName, specs, StringComparer.InvariantCulture))", span="49-55", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="ReflectionExtensions.cs"];
m3_25 [label="Exit CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", span="40-40", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="ReflectionExtensions.cs"];
m3_19 [label="Entry CommandLine.Core.NameLookup.WithSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="19-19", cluster="CommandLine.Core.NameLookup.WithSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="ReflectionExtensions.cs"];
m3_49 [label="Entry System.Linq.Expressions.Expression.Default(System.Type)", span="0-0", cluster="System.Linq.Expressions.Expression.Default(System.Type)", file="ReflectionExtensions.cs"];
m3_15 [label="Entry Unk.True", span="", cluster="Unk.True", file="ReflectionExtensions.cs"];
m3_0 [label="Entry CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", span="16-16", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="ReflectionExtensions.cs"];
m3_1 [label="var expectedTokens = new[] { Token.Name(''i''), Token.Value(''10''), Token.Name(''string-seq''),\r\n                Token.Value(''aaa''), Token.Value(''bb''),  Token.Value(''cccc''), Token.Name(''switch''), }", span="19-20", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="ReflectionExtensions.cs"];
m3_2 [label="var specs = new[] { new OptionSpecification(string.Empty, ''string-seq'',\r\n                false, string.Empty, -1, -1, ',', null, typeof(IEnumerable<string>), string.Empty, string.Empty, new List<string>())}", span="21-22", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="ReflectionExtensions.cs"];
m3_4 [label="Assert.True(expectedTokens.SequenceEqual(result.Value))", span="34-34", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="ReflectionExtensions.cs"];
m3_3 [label="var result =\r\n                Tokenizer.ExplodeOptionList(\r\n                    StatePair.Create(\r\n                        Enumerable.Empty<Token>().Concat(new[] { Token.Name(''i''), Token.Value(''10''),\r\n                            Token.Name(''string-seq''), Token.Value(''aaa,bb,cccc''), Token.Name(''switch'') }),\r\n                        Enumerable.Empty<Error>()),\r\n                        optionName => NameLookup.WithSeparator(optionName, specs, StringComparer.InvariantCulture))", span="25-31", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="ReflectionExtensions.cs"];
m3_5 [label="Exit CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", span="16-16", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="ReflectionExtensions.cs"];
m3_45 [label="Entry CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", span="82-82", cluster="CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", file="ReflectionExtensions.cs"];
m3_46 [label="var e = Expression.Lambda<Func<object>>(\r\n                Expression.Convert(\r\n                    Expression.Default(type),\r\n                    typeof(object)))", span="84-87", cluster="CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", color=green, community=0, file="ReflectionExtensions.cs"];
m3_47 [label="return e.Compile()();", span="88-88", cluster="CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", color=green, community=0, file="ReflectionExtensions.cs"];
m3_48 [label="Exit CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", span="82-82", cluster="CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", file="ReflectionExtensions.cs"];
m3_50 [label="Entry System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression, System.Type)", span="0-0", cluster="System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression, System.Type)", file="ReflectionExtensions.cs"];
m3_26 [label="Entry lambda expression", span="55-55", cluster="lambda expression", file="ReflectionExtensions.cs"];
m3_17 [label="NameLookup.WithSeparator(optionName, specs, StringComparer.InvariantCulture)", span="31-31", cluster="lambda expression", file="ReflectionExtensions.cs"];
m3_16 [label="Entry lambda expression", span="31-31", cluster="lambda expression", file="ReflectionExtensions.cs"];
m3_18 [label="Exit lambda expression", span="31-31", cluster="lambda expression", file="ReflectionExtensions.cs"];
m3_27 [label="NameLookup.WithSeparator(optionName, specs, StringComparer.InvariantCulture)", span="55-55", cluster="lambda expression", file="ReflectionExtensions.cs"];
m3_28 [label="Exit lambda expression", span="55-55", cluster="lambda expression", file="ReflectionExtensions.cs"];
m3_53 [label="Entry System.Func<TResult>.Invoke()", span="0-0", cluster="System.Func<TResult>.Invoke()", file="ReflectionExtensions.cs"];
m3_6 [label="Entry CommandLine.Core.Token.Name(string)", span="19-19", cluster="CommandLine.Core.Token.Name(string)", file="ReflectionExtensions.cs"];
m3_8 [label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", span="17-17", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="ReflectionExtensions.cs"];
m3_13 [label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<char>>)", span="48-48", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<char>>)", file="ReflectionExtensions.cs"];
m3_11 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="ReflectionExtensions.cs"];
m3_7 [label="Entry CommandLine.Core.Token.Value(string)", span="26-26", cluster="CommandLine.Core.Token.Value(string)", file="ReflectionExtensions.cs"];
m3_52 [label="Entry System.Linq.Expressions.Expression<TDelegate>.Compile()", span="0-0", cluster="System.Linq.Expressions.Expression<TDelegate>.Compile()", file="ReflectionExtensions.cs"];
m3_14 [label="Entry Unk.SequenceEqual", span="", cluster="Unk.SequenceEqual", file="ReflectionExtensions.cs"];
m3_9 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="ReflectionExtensions.cs"];
m3_29 [label=specs, span="", file="ReflectionExtensions.cs"];
m3_30 [label=specs, span="", file="ReflectionExtensions.cs"];
m0_149 -> m0_150  [key=0, style=solid];
m0_149 -> m0_155  [key=1, style=dashed, color=darkseagreen4, label="System.Func<TValue, RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>>"];
m0_149 -> m0_152  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TValue, TMessage>"];
m0_149 -> m0_136  [key=0, style=solid, color=green];
m0_149 -> m0_151  [key=2, style=dotted, color=green];
m0_150 -> m0_151  [key=0, style=solid];
m0_150 -> m0_155  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.OkPair<TValue, TMessage>"];
m0_150 -> m0_152  [key=1, style=dashed, color=darkseagreen4, label=successFunc];
m0_152 -> m0_153  [key=0, style=solid, color=green];
m0_152 -> m0_118  [key=2, style=dotted];
m0_152 -> m0_154  [key=1, style=dashed, color=darkseagreen4, label="long[]"];
m0_151 -> m0_152  [key=0, style=solid];
m0_151 -> m0_158  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<TMessage>"];
m0_153 -> m0_149  [key=0, style=bold, color=blue];
m0_153 -> m0_154  [key=0, style=solid, color=green];
m0_153 -> m0_9  [key=2, style=dotted, color=green];
m0_153 -> m0_10  [key=2, style=dotted, color=green];
m0_153 -> m0_156  [key=1, style=dashed, color=green, label="lambda expression"];
m0_41 -> m0_42  [key=0, style=solid, color=green];
m0_41 -> m0_43  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
m0_41 -> m0_45  [key=0, style=solid];
m0_41 -> m0_46  [key=2, style=dotted];
m0_42 -> m0_43  [key=0, style=solid, color=green];
m0_42 -> m0_9  [key=2, style=dotted, color=green];
m0_42 -> m0_10  [key=2, style=dotted, color=green];
m0_42 -> m0_45  [key=1, style=dashed, color=green, label="lambda expression"];
m0_42 -> m0_44  [key=0, style=solid];
m0_43 -> m0_44  [key=0, style=solid];
m0_43 -> m0_36  [key=2, style=dotted];
m0_43 -> m0_12  [key=2, style=dotted];
m0_43 -> m0_45  [key=0, style=solid];
m0_43 -> m0_46  [key=2, style=dotted];
m0_44 -> m0_41  [key=0, style=bold, color=blue];
m0_44 -> m0_45  [key=0, style=solid];
m0_44 -> m0_18  [key=2, style=dotted];
m0_106 -> m0_107  [key=0, style=solid, color=green];
m0_107 -> m0_108  [key=0, style=solid, color=green];
m0_107 -> m0_75  [key=2, style=dotted];
m0_107 -> m0_18  [key=2, style=dotted];
m0_107 -> m0_90  [key=2, style=dotted];
m0_107 -> m0_109  [key=2, style=dotted, color=green];
m0_108 -> m0_106  [key=0, style=bold, color=blue];
m0_357 -> m0_358  [key=0, style=solid, color=green];
m0_358 -> m0_358  [key=3, color=green, style=bold, label="Local variable System.Action test"];
m0_358 -> m0_359  [key=0, style=solid, color=green];
m0_359 -> m0_360  [key=0, style=solid];
m0_359 -> m0_338  [key=2, style=dotted];
m0_360 -> m0_357  [key=0, style=bold, color=blue];
m0_71 -> m0_72  [key=0, style=solid, color=green];
m0_97 -> m0_98  [key=0, style=solid, color=green];
m0_98 -> m0_101  [key=0, style=solid, color=red];
m0_98 -> m0_75  [key=2, style=dotted, color=red];
m0_98 -> m0_18  [key=2, style=dotted, color=red];
m0_98 -> m0_102  [key=2, style=dotted, color=red];
m0_98 -> m0_90  [key=2, style=dotted, color=red];
m0_98 -> m0_99  [key=0, style=solid, color=green];
m0_98 -> m0_100  [key=2, style=dotted, color=green];
m0_99 -> m0_100  [key=0, style=solid];
m0_99 -> m0_97  [key=0, style=bold, color=blue];
m0_100 -> m0_101  [key=0, style=solid];
m0_100 -> m0_78  [key=2, style=dotted];
m0_101 -> m0_97  [key=0, style=bold, color=blue];
m0_101 -> m0_102  [key=0, style=solid, color=green];
m0_101 -> m0_103  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Colors"];
m0_63 -> m0_56  [key=0, style=bold, color=blue];
m0_154 -> m0_155  [key=0, style=solid];
m0_154 -> m0_105  [key=2, style=dotted];
m0_154 -> m0_265  [key=0, style=solid, color=green];
m0_155 -> m0_152  [key=0, style=bold, color=blue];
m0_155 -> m0_156  [key=0, style=solid];
m0_155 -> m0_125  [key=2, style=dotted];
m0_155 -> m0_137  [key=2, style=dotted];
m0_55 -> m0_53  [key=0, style=bold, color=blue];
m0_267 -> m0_268  [key=0, style=solid, color=green];
m0_267 -> m0_269  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_267 -> m0_71  [key=2, style=dotted];
m0_268 -> m0_269  [key=0, style=solid, color=green];
m0_268 -> m0_9  [key=2, style=dotted, color=green];
m0_268 -> m0_10  [key=2, style=dotted, color=green];
m0_268 -> m0_272  [key=1, style=dashed, color=green, label="lambda expression"];
m0_268 -> m0_266  [key=0, style=bold, color=blue];
m0_269 -> m0_270  [key=0, style=solid];
m0_269 -> m0_271  [key=2, style=dotted];
m0_269 -> m0_12  [key=2, style=dotted];
m0_269 -> m0_273  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>"];
m0_270 -> m0_267  [key=0, style=bold, color=blue];
m0_270 -> m0_271  [key=0, style=solid];
m0_270 -> m0_273  [key=0, style=solid];
m0_334 -> m0_335  [key=0, style=solid, color=green];
m0_335 -> m0_335  [key=3, color=green, style=bold, label="Local variable System.Action test"];
m0_335 -> m0_336  [key=0, style=solid, color=green];
m0_336 -> m0_337  [key=0, style=solid];
m0_336 -> m0_338  [key=2, style=dotted];
m0_337 -> m0_334  [key=0, style=bold, color=blue];
m0_307 -> m0_308  [key=0, style=solid, color=green];
m0_307 -> m0_309  [key=1, style=dashed, color=darkseagreen4, label="long?"];
m0_308 -> m0_309  [key=0, style=solid, color=green];
m0_308 -> m0_9  [key=2, style=dotted, color=green];
m0_308 -> m0_10  [key=2, style=dotted, color=green];
m0_308 -> m0_311  [key=1, style=dashed, color=green, label="lambda expression"];
m0_309 -> m0_310  [key=0, style=solid];
m0_309 -> m0_105  [key=2, style=dotted];
m0_310 -> m0_307  [key=0, style=bold, color=blue];
m0_18 -> m0_19  [key=0, style=solid];
m0_18 -> m0_20  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<TMessage>"];
m0_19 -> m0_20  [key=0, style=solid];
m0_19 -> m0_16  [key=0, style=bold, color=blue];
m0_20 -> m0_21  [key=0, style=solid];
m0_21 -> m0_18  [key=0, style=bold, color=blue];
m0_21 -> m0_22  [key=0, style=solid, color=green];
m0_79 -> m0_80  [key=0, style=solid];
m0_167 -> m0_168  [key=0, style=solid];
m0_167 -> m0_171  [key=0, style=solid];
m0_170 -> m0_171  [key=0, style=solid, color=green];
m0_170 -> m0_9  [key=2, style=dotted, color=green];
m0_170 -> m0_173  [key=2, style=dotted, color=green];
m0_170 -> m0_174  [key=1, style=dashed, color=green, label="lambda expression"];
m0_170 -> m0_248  [key=1, style=dashed, color=green, label="lambda expression"];
m0_170 -> m0_178  [key=0, style=solid];
m0_170 -> m0_75  [key=2, style=dotted];
m0_170 -> m0_18  [key=2, style=dotted];
m0_170 -> m0_125  [key=2, style=dotted];
m0_170 -> m0_145  [key=2, style=dotted];
m0_169 -> m0_170  [key=0, style=solid, color=green];
m0_171 -> m0_172  [key=0, style=solid];
m0_171 -> m0_105  [key=2, style=dotted];
m0_171 -> m0_173  [key=0, style=solid];
m0_168 -> m0_140  [key=2, style=dotted];
m0_168 -> m0_169  [key=0, style=solid];
m0_168 -> m0_171  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_168 -> m0_170  [key=1, style=dashed, color=darkseagreen4, label=ok1];
m0_172 -> m0_167  [key=0, style=bold, color=blue];
m0_172 -> m0_178  [key=0, style=solid];
m0_172 -> m0_78  [key=2, style=dotted];
m0_259 -> m0_260  [key=0, style=solid];
m0_259 -> m0_261  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>"];
m0_259 -> m0_263  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>"];
m0_261 -> m0_262  [key=0, style=solid, color=red];
m0_261 -> m0_9  [key=2, style=dotted, color=green];
m0_261 -> m0_10  [key=2, style=dotted, color=green];
m0_261 -> m0_154  [key=1, style=dashed, color=green, label="lambda expression"];
m0_260 -> m0_261  [key=0, style=solid, color=green];
m0_260 -> m0_247  [key=2, style=dotted];
m0_260 -> m0_262  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_260 -> m0_263  [key=0, style=solid];
m0_262 -> m0_263  [key=0, style=solid];
m0_262 -> m0_36  [key=2, style=dotted];
m0_262 -> m0_12  [key=2, style=dotted];
m0_262 -> m0_265  [key=0, style=solid, color=red];
m0_262 -> m0_133  [key=2, style=dotted, color=red];
m0_262 -> m0_64  [key=2, style=dotted, color=red];
m0_262 -> m0_65  [key=2, style=dotted, color=red];
m0_262 -> m0_66  [key=2, style=dotted, color=red];
m0_262 -> m0_266  [key=1, style=dashed, color=red, label="lambda expression"];
m0_263 -> m0_259  [key=0, style=bold, color=blue];
m0_263 -> m0_264  [key=0, style=solid];
m0_109 -> m0_110  [key=0, style=solid];
m0_9 -> m0_10  [key=0, style=solid];
m0_204 -> m0_205  [key=0, style=solid];
m0_204 -> m0_207  [key=0, style=solid];
m0_74 -> m0_75  [key=0, style=solid];
m0_74 -> m0_72  [key=0, style=bold, color=blue];
m0_74 -> m0_130  [key=0, style=bold, color=green];
m0_76 -> m0_77  [key=0, style=solid, color=green];
m0_76 -> m0_9  [key=2, style=dotted, color=green];
m0_76 -> m0_10  [key=2, style=dotted, color=green];
m0_76 -> m0_80  [key=1, style=dashed, color=green, label="lambda expression"];
m0_75 -> m0_76  [key=0, style=solid, color=green];
m0_75 -> m0_79  [key=2, style=dotted];
m0_75 -> m0_77  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_77 -> m0_78  [key=0, style=solid];
m0_77 -> m0_36  [key=2, style=dotted];
m0_77 -> m0_12  [key=2, style=dotted];
m0_77 -> m0_75  [key=0, style=bold, color=blue];
m0_78 -> m0_74  [key=0, style=bold, color=blue];
m0_78 -> m0_79  [key=0, style=solid];
m0_247 -> m0_242  [key=0, style=bold, color=blue];
m0_92 -> m0_93  [key=0, style=solid];
m0_92 -> m0_75  [key=2, style=dotted];
m0_92 -> m0_18  [key=2, style=dotted];
m0_94 -> m0_95  [key=0, style=solid, color=green];
m0_94 -> m0_9  [key=2, style=dotted, color=green];
m0_94 -> m0_10  [key=2, style=dotted, color=green];
m0_94 -> m0_97  [key=1, style=dashed, color=green, label="lambda expression"];
m0_93 -> m0_94  [key=0, style=solid, color=green];
m0_93 -> m0_79  [key=2, style=dotted];
m0_93 -> m0_95  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_93 -> m0_91  [key=0, style=bold, color=blue];
m0_95 -> m0_96  [key=0, style=solid];
m0_95 -> m0_36  [key=2, style=dotted];
m0_95 -> m0_12  [key=2, style=dotted];
m0_95 -> m0_75  [key=2, style=dotted];
m0_95 -> m0_18  [key=2, style=dotted];
m0_96 -> m0_92  [key=0, style=bold, color=blue];
m0_96 -> m0_94  [key=0, style=bold, color=blue];
m0_84 -> m0_85  [key=0, style=solid];
m0_85 -> m0_86  [key=0, style=solid, color=green];
m0_85 -> m0_78  [key=2, style=dotted];
m0_85 -> m0_79  [key=2, style=dotted];
m0_85 -> m0_70  [key=2, style=dotted];
m0_85 -> m0_87  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_86 -> m0_84  [key=0, style=bold, color=blue];
m0_86 -> m0_87  [key=0, style=solid, color=green];
m0_86 -> m0_9  [key=2, style=dotted, color=green];
m0_86 -> m0_10  [key=2, style=dotted, color=green];
m0_86 -> m0_89  [key=1, style=dashed, color=green, label="lambda expression"];
m0_314 -> m0_315  [key=0, style=solid, color=green];
m0_314 -> m0_317  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_314 -> m0_318  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_315 -> m0_316  [key=0, style=solid, color=green];
m0_315 -> m0_9  [key=2, style=dotted, color=green];
m0_315 -> m0_10  [key=2, style=dotted, color=green];
m0_315 -> m0_321  [key=1, style=dashed, color=green, label="lambda expression"];
m0_315 -> m0_317  [key=1, style=dashed, color=green, label=result];
m0_315 -> m0_318  [key=1, style=dashed, color=green, label=result];
m0_316 -> m0_317  [key=0, style=solid];
m0_316 -> m0_318  [key=0, style=solid];
m0_317 -> m0_318  [key=0, style=solid];
m0_317 -> m0_105  [key=2, style=dotted];
m0_318 -> m0_319  [key=0, style=solid];
m0_318 -> m0_320  [key=2, style=dotted];
m0_318 -> m0_105  [key=2, style=dotted];
m0_319 -> m0_314  [key=0, style=bold, color=blue];
m0_3 -> m0_4  [key=0, style=solid, color=green];
m0_3 -> m0_9  [key=2, style=dotted, color=green];
m0_3 -> m0_10  [key=2, style=dotted, color=green];
m0_3 -> m0_13  [key=1, style=dashed, color=green, label="lambda expression"];
m0_4 -> m0_5  [key=0, style=solid, color=red];
m0_4 -> m0_11  [key=2, style=dotted];
m0_4 -> m0_12  [key=2, style=dotted];
m0_5 -> m0_3  [key=0, style=bold, color=blue];
m0_5 -> m0_0  [key=0, style=bold, color=blue];
m0_22 -> m0_23  [key=0, style=solid, color=green];
m0_22 -> m0_26  [key=1, style=dashed, color=darkseagreen4, label=object];
m0_22 -> m0_6  [key=2, style=dotted, color=green];
m0_23 -> m0_24  [key=0, style=solid];
m0_23 -> m0_25  [key=1, style=dashed, color=darkseagreen4, label=other];
m0_23 -> m0_21  [key=0, style=bold, color=blue];
m0_26 -> m0_27  [key=0, style=solid];
m0_26 -> m0_29  [key=2, style=dotted];
m0_26 -> m0_20  [key=2, style=dotted];
m0_24 -> m0_25  [key=0, style=solid, color=green];
m0_24 -> m0_26  [key=0, style=solid];
m0_25 -> m0_27  [key=0, style=solid];
m0_25 -> m0_28  [key=2, style=dotted];
m0_25 -> m0_26  [key=0, style=solid, color=green];
m0_25 -> m0_9  [key=2, style=dotted, color=green];
m0_25 -> m0_10  [key=2, style=dotted, color=green];
m0_27 -> m0_22  [key=0, style=bold, color=blue];
m0_27 -> m0_24  [key=0, style=bold, color=blue];
m0_271 -> m0_272  [key=0, style=solid];
m0_273 -> m0_274  [key=0, style=solid, color=green];
m0_273 -> m0_6  [key=2, style=dotted, color=green];
m0_272 -> m0_275  [key=0, style=solid];
m0_272 -> m0_273  [key=0, style=solid, color=green];
m0_274 -> m0_275  [key=0, style=solid];
m0_274 -> m0_133  [key=2, style=dotted];
m0_274 -> m0_64  [key=2, style=dotted];
m0_274 -> m0_65  [key=2, style=dotted];
m0_274 -> m0_67  [key=2, style=dotted];
m0_274 -> m0_276  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_274 -> m0_272  [key=0, style=bold, color=blue];
m0_275 -> m0_269  [key=0, style=bold, color=blue];
m0_275 -> m0_276  [key=0, style=solid];
m0_179 -> m0_180  [key=0, style=solid, color=red];
m0_180 -> m0_181  [key=0, style=solid, color=red];
m0_180 -> m0_103  [key=2, style=dotted, color=red];
m0_180 -> m0_166  [key=2, style=dotted, color=red];
m0_181 -> m0_179  [key=0, style=bold, color=blue];
m0_182 -> m0_183  [key=0, style=solid];
m0_183 -> m0_184  [key=0, style=solid];
m0_183 -> m0_179  [key=2, style=dotted];
m0_183 -> m0_166  [key=2, style=dotted];
m0_184 -> m0_182  [key=0, style=bold, color=blue];
m0_126 -> m0_127  [key=0, style=solid];
m0_126 -> m0_128  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>"];
m0_126 -> m0_124  [key=0, style=bold, color=blue];
m0_127 -> m0_128  [key=0, style=solid];
m0_127 -> m0_131  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<TMessage>"];
m0_128 -> m0_129  [key=0, style=solid, color=green];
m0_128 -> m0_118  [key=2, style=dotted];
m0_128 -> m0_115  [key=2, style=dotted];
m0_128 -> m0_70  [key=2, style=dotted];
m0_128 -> m0_130  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_129 -> m0_126  [key=0, style=bold, color=blue];
m0_129 -> m0_130  [key=0, style=solid, color=green];
m0_129 -> m0_9  [key=2, style=dotted, color=green];
m0_129 -> m0_10  [key=2, style=dotted, color=green];
m0_6 -> m0_7  [key=0, style=solid];
m0_251 -> m0_252  [key=0, style=solid];
m0_251 -> m0_219  [key=2, style=dotted];
m0_253 -> m0_254  [key=0, style=solid, color=green];
m0_253 -> m0_9  [key=2, style=dotted, color=green];
m0_253 -> m0_10  [key=2, style=dotted, color=green];
m0_253 -> m0_256  [key=1, style=dashed, color=green, label="lambda expression"];
m0_252 -> m0_253  [key=0, style=solid, color=green];
m0_252 -> m0_247  [key=2, style=dotted];
m0_252 -> m0_254  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_252 -> m0_250  [key=0, style=bold, color=blue];
m0_254 -> m0_255  [key=0, style=solid];
m0_254 -> m0_36  [key=2, style=dotted];
m0_254 -> m0_12  [key=2, style=dotted];
m0_254 -> m0_182  [key=2, style=dotted];
m0_255 -> m0_251  [key=0, style=bold, color=blue];
m0_255 -> m0_253  [key=0, style=bold, color=blue];
m0_29 -> m0_30  [key=0, style=solid, color=green];
m0_29 -> m0_31  [key=2, style=dotted, color=green];
m0_110 -> m0_111  [key=0, style=solid];
m0_110 -> m0_75  [key=2, style=dotted];
m0_110 -> m0_18  [key=2, style=dotted];
m0_112 -> m0_113  [key=0, style=solid, color=green];
m0_112 -> m0_9  [key=2, style=dotted, color=green];
m0_112 -> m0_10  [key=2, style=dotted, color=green];
m0_112 -> m0_116  [key=1, style=dashed, color=green, label="lambda expression"];
m0_111 -> m0_112  [key=0, style=solid, color=green];
m0_111 -> m0_115  [key=2, style=dotted];
m0_111 -> m0_70  [key=2, style=dotted];
m0_111 -> m0_113  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_111 -> m0_109  [key=0, style=bold, color=blue];
m0_113 -> m0_114  [key=0, style=solid];
m0_113 -> m0_36  [key=2, style=dotted];
m0_113 -> m0_12  [key=2, style=dotted];
m0_113 -> m0_78  [key=2, style=dotted];
m0_114 -> m0_110  [key=0, style=bold, color=blue];
m0_114 -> m0_112  [key=0, style=bold, color=blue];
m0_368 -> m0_369  [key=0, style=solid, color=green];
m0_368 -> m0_370  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_368 -> m0_379  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_369 -> m0_370  [key=0, style=solid, color=green];
m0_369 -> m0_9  [key=2, style=dotted, color=green];
m0_369 -> m0_10  [key=2, style=dotted, color=green];
m0_369 -> m0_374  [key=1, style=dashed, color=green, label="lambda expression"];
m0_370 -> m0_371  [key=0, style=solid];
m0_370 -> m0_372  [key=2, style=dotted];
m0_370 -> m0_373  [key=2, style=dotted];
m0_370 -> m0_378  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_371 -> m0_368  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_3  [key=1, style=dashed, color=green, label=fakeOptions];
m0_1 -> m0_14  [key=1, style=dashed, color=green, label=fakeOptions];
m0_1 -> m0_6  [key=2, style=dotted];
m0_2 -> m0_0  [key=0, style=bold, color=blue];
m0_2 -> m0_3  [key=0, style=solid, color=green];
m0_2 -> m0_7  [key=2, style=dotted];
m0_2 -> m0_8  [key=2, style=dotted];
m0_2 -> m0_4  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_7 -> m0_8  [key=0, style=solid];
m0_46 -> m0_47  [key=0, style=solid, color=green];
m0_46 -> m0_6  [key=2, style=dotted, color=green];
m0_103 -> m0_104  [key=0, style=solid];
m0_103 -> m0_103  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Colors"];
m0_103 -> m0_105  [key=2, style=dotted];
m0_104 -> m0_105  [key=0, style=solid];
m0_104 -> m0_75  [key=2, style=dotted];
m0_104 -> m0_18  [key=2, style=dotted];
m0_104 -> m0_90  [key=2, style=dotted];
m0_104 -> m0_101  [key=0, style=bold, color=blue];
m0_105 -> m0_103  [key=0, style=bold, color=blue];
m0_223 -> m0_224  [key=0, style=solid, color=green];
m0_223 -> m0_204  [key=2, style=dotted, color=green];
m0_224 -> m0_225  [key=0, style=solid];
m0_224 -> m0_185  [key=2, style=dotted];
m0_224 -> m0_222  [key=0, style=bold, color=blue];
m0_225 -> m0_223  [key=0, style=bold, color=blue];
m0_225 -> m0_226  [key=0, style=solid];
m0_398 -> m0_399  [key=0, style=solid, color=green];
m0_398 -> m0_400  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent"];
m0_399 -> m0_400  [key=0, style=solid, color=green];
m0_399 -> m0_9  [key=2, style=dotted, color=green];
m0_399 -> m0_10  [key=2, style=dotted, color=green];
m0_399 -> m0_402  [key=1, style=dashed, color=green, label="lambda expression"];
m0_400 -> m0_401  [key=0, style=solid];
m0_400 -> m0_105  [key=2, style=dotted];
m0_401 -> m0_398  [key=0, style=bold, color=blue];
m0_83 -> m0_81  [key=0, style=bold, color=blue];
m0_144 -> m0_145  [key=0, style=solid, color=green];
m0_144 -> m0_146  [key=1, style=dashed, color=darkseagreen4, label="long[]"];
m0_144 -> m0_142  [key=0, style=bold, color=blue];
m0_144 -> m0_156  [key=0, style=bold, color=blue];
m0_145 -> m0_146  [key=0, style=solid, color=green];
m0_145 -> m0_9  [key=2, style=dotted, color=green];
m0_145 -> m0_10  [key=2, style=dotted, color=green];
m0_145 -> m0_148  [key=1, style=dashed, color=green, label="lambda expression"];
m0_146 -> m0_147  [key=0, style=solid];
m0_146 -> m0_105  [key=2, style=dotted];
m0_146 -> m0_249  [key=0, style=solid, color=green];
m0_147 -> m0_144  [key=0, style=bold, color=blue];
m0_147 -> m0_148  [key=0, style=solid];
m0_147 -> m0_78  [key=2, style=dotted];
m0_147 -> m0_145  [key=2, style=dotted];
m0_56 -> m0_57  [key=0, style=solid, color=green];
m0_56 -> m0_58  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m0_57 -> m0_58  [key=0, style=solid, color=green];
m0_57 -> m0_9  [key=2, style=dotted, color=green];
m0_57 -> m0_10  [key=2, style=dotted, color=green];
m0_57 -> m0_60  [key=1, style=dashed, color=green, label="lambda expression"];
m0_57 -> m0_61  [key=0, style=solid];
m0_58 -> m0_59  [key=0, style=solid];
m0_58 -> m0_36  [key=2, style=dotted];
m0_58 -> m0_12  [key=2, style=dotted];
m0_59 -> m0_56  [key=0, style=bold, color=blue];
m0_59 -> m0_60  [key=0, style=solid, color=red];
m0_80 -> m0_78  [key=0, style=bold, color=blue];
m0_80 -> m0_81  [key=0, style=solid, color=green];
m0_226 -> m0_227  [key=0, style=solid, color=green];
m0_226 -> m0_228  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_226 -> m0_236  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>>, TMessage>"];
m0_226 -> m0_221  [key=2, style=dotted];
m0_226 -> m0_70  [key=2, style=dotted];
m0_227 -> m0_228  [key=0, style=solid, color=green];
m0_227 -> m0_236  [key=0, style=solid];
m0_227 -> m0_9  [key=2, style=dotted, color=green];
m0_227 -> m0_10  [key=2, style=dotted, color=green];
m0_227 -> m0_230  [key=1, style=dashed, color=green, label="lambda expression"];
m0_228 -> m0_229  [key=0, style=solid];
m0_228 -> m0_36  [key=2, style=dotted];
m0_228 -> m0_12  [key=2, style=dotted];
m0_236 -> m0_237  [key=0, style=solid, color=green];
m0_236 -> m0_9  [key=2, style=dotted, color=green];
m0_236 -> m0_10  [key=2, style=dotted, color=green];
m0_236 -> m0_239  [key=1, style=dashed, color=green, label="lambda expression"];
m0_229 -> m0_230  [key=0, style=solid];
m0_229 -> m0_225  [key=0, style=bold, color=blue];
m0_230 -> m0_231  [key=0, style=solid, color=green];
m0_230 -> m0_223  [key=2, style=dotted];
m0_230 -> m0_232  [key=1, style=dashed, color=darkseagreen4, label=result1];
m0_230 -> m0_234  [key=1, style=dashed, color=darkseagreen4, label=result1];
m0_231 -> m0_232  [key=0, style=solid, color=green];
m0_231 -> m0_234  [key=0, style=solid, color=red];
m0_231 -> m0_233  [key=2, style=dotted, color=green];
m0_232 -> m0_233  [key=0, style=solid];
m0_232 -> m0_230  [key=0, style=bold, color=blue];
m0_234 -> m0_235  [key=0, style=solid];
m0_233 -> m0_238  [key=0, style=solid];
m0_233 -> m0_75  [key=2, style=dotted];
m0_233 -> m0_18  [key=2, style=dotted];
m0_235 -> m0_238  [key=0, style=solid];
m0_235 -> m0_78  [key=2, style=dotted];
m0_235 -> m0_236  [key=0, style=solid, color=green];
m0_235 -> m0_79  [key=2, style=dotted];
m0_235 -> m0_70  [key=2, style=dotted];
m0_235 -> m0_237  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_237 -> m0_238  [key=0, style=solid];
m0_237 -> m0_78  [key=2, style=dotted];
m0_237 -> m0_36  [key=2, style=dotted];
m0_237 -> m0_12  [key=2, style=dotted];
m0_238 -> m0_226  [key=0, style=bold, color=blue];
m0_238 -> m0_234  [key=0, style=bold, color=blue];
m0_32 -> m0_33  [key=0, style=solid, color=green];
m0_32 -> m0_34  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
m0_32 -> m0_30  [key=0, style=bold, color=blue];
m0_33 -> m0_34  [key=0, style=solid, color=green];
m0_33 -> m0_9  [key=2, style=dotted, color=green];
m0_33 -> m0_10  [key=2, style=dotted, color=green];
m0_33 -> m0_37  [key=1, style=dashed, color=green, label="lambda expression"];
m0_34 -> m0_35  [key=0, style=solid];
m0_34 -> m0_36  [key=2, style=dotted];
m0_34 -> m0_12  [key=2, style=dotted];
m0_35 -> m0_32  [key=0, style=bold, color=blue];
m0_35 -> m0_37  [key=0, style=solid];
m0_388 -> m0_389  [key=0, style=solid];
m0_68 -> m0_69  [key=0, style=solid];
m0_68 -> m0_64  [key=0, style=bold, color=blue];
m0_72 -> m0_73  [key=0, style=solid, color=green];
m0_72 -> m0_55  [key=2, style=dotted, color=green];
m0_69 -> m0_70  [key=0, style=solid];
m0_69 -> m0_71  [key=2, style=dotted];
m0_70 -> m0_68  [key=0, style=bold, color=blue];
m0_73 -> m0_74  [key=0, style=solid];
m0_73 -> m0_71  [key=2, style=dotted];
m0_131 -> m0_132  [key=0, style=solid];
m0_131 -> m0_133  [key=2, style=dotted];
m0_131 -> m0_64  [key=2, style=dotted];
m0_131 -> m0_65  [key=2, style=dotted];
m0_131 -> m0_134  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_131 -> m0_127  [key=0, style=bold, color=blue];
m0_130 -> m0_131  [key=0, style=solid];
m0_130 -> m0_133  [key=0, style=solid, color=green];
m0_130 -> m0_36  [key=2, style=dotted];
m0_130 -> m0_12  [key=2, style=dotted];
m0_132 -> m0_130  [key=0, style=bold, color=blue];
m0_134 -> m0_135  [key=0, style=solid];
m0_135 -> m0_136  [key=0, style=solid];
m0_135 -> m0_71  [key=2, style=dotted];
m0_136 -> m0_134  [key=0, style=bold, color=blue];
m0_136 -> m0_148  [key=0, style=bold, color=blue];
m0_136 -> m0_137  [key=0, style=solid, color=green];
m0_136 -> m0_140  [key=2, style=dotted];
m0_136 -> m0_138  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_143 -> m0_144  [key=0, style=solid];
m0_143 -> m0_75  [key=2, style=dotted];
m0_143 -> m0_18  [key=2, style=dotted];
m0_143 -> m0_145  [key=2, style=dotted];
m0_143 -> m0_141  [key=0, style=bold, color=blue];
m0_142 -> m0_143  [key=0, style=solid, color=green];
m0_142 -> m0_140  [key=2, style=dotted, color=green];
m0_148 -> m0_146  [key=0, style=bold, color=blue];
m0_148 -> m0_149  [key=0, style=solid, color=green];
m0_158 -> m0_159  [key=0, style=solid];
m0_158 -> m0_78  [key=2, style=dotted];
m0_156 -> m0_154  [key=0, style=bold, color=blue];
m0_156 -> m0_157  [key=0, style=solid, color=green];
m0_157 -> m0_158  [key=0, style=solid];
m0_157 -> m0_144  [key=0, style=solid, color=green];
m0_157 -> m0_159  [key=2, style=dotted, color=green];
m0_159 -> m0_157  [key=0, style=bold, color=blue];
m0_163 -> m0_164  [key=0, style=solid];
m0_163 -> m0_160  [key=0, style=bold, color=blue];
m0_164 -> m0_165  [key=0, style=solid, color=green];
m0_165 -> m0_163  [key=0, style=bold, color=blue];
m0_165 -> m0_146  [key=0, style=bold, color=green];
m0_165 -> m0_166  [key=0, style=solid, color=green];
m0_165 -> m0_159  [key=2, style=dotted, color=green];
m0_189 -> m0_190  [key=0, style=solid];
m0_189 -> m0_191  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>"];
m0_189 -> m0_192  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>"];
m0_189 -> m0_194  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>"];
m0_189 -> m0_195  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>"];
m0_189 -> m0_196  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>"];
m0_189 -> m0_198  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>"];
m0_189 -> m0_199  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>"];
m0_190 -> m0_191  [key=0, style=solid, color=green];
m0_190 -> m0_194  [key=0, style=solid];
m0_190 -> m0_70  [key=2, style=dotted];
m0_190 -> m0_192  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_191 -> m0_192  [key=0, style=solid, color=green];
m0_191 -> m0_193  [key=1, style=dashed, color=darkseagreen4, label=ok1];
m0_191 -> m0_9  [key=2, style=dotted, color=green];
m0_191 -> m0_10  [key=2, style=dotted, color=green];
m0_191 -> m0_195  [key=1, style=dashed, color=green, label="lambda expression"];
m0_192 -> m0_193  [key=0, style=solid];
m0_192 -> m0_36  [key=2, style=dotted];
m0_192 -> m0_12  [key=2, style=dotted];
m0_194 -> m0_195  [key=0, style=solid];
m0_194 -> m0_198  [key=0, style=solid];
m0_195 -> m0_196  [key=0, style=solid, color=green];
m0_195 -> m0_197  [key=1, style=dashed, color=darkseagreen4, label=m1];
m0_196 -> m0_197  [key=0, style=solid, color=green];
m0_196 -> m0_198  [key=2, style=dotted, color=green];
m0_198 -> m0_199  [key=0, style=solid];
m0_198 -> m0_200  [key=1, style=dashed, color=darkseagreen4, label=bad1];
m0_199 -> m0_200  [key=0, style=solid];
m0_193 -> m0_201  [key=0, style=solid];
m0_193 -> m0_75  [key=2, style=dotted];
m0_193 -> m0_18  [key=2, style=dotted];
m0_193 -> m0_145  [key=2, style=dotted];
m0_193 -> m0_189  [key=0, style=bold, color=blue];
m0_197 -> m0_201  [key=0, style=solid];
m0_197 -> m0_78  [key=2, style=dotted];
m0_197 -> m0_145  [key=2, style=dotted];
m0_197 -> m0_195  [key=0, style=bold, color=blue];
m0_200 -> m0_201  [key=0, style=solid, color=green];
m0_200 -> m0_78  [key=2, style=dotted];
m0_200 -> m0_145  [key=2, style=dotted];
m0_200 -> m0_204  [key=2, style=dotted];
m0_200 -> m0_202  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_201 -> m0_189  [key=0, style=bold, color=blue];
m0_201 -> m0_202  [key=0, style=solid, color=green];
m0_201 -> m0_9  [key=2, style=dotted, color=green];
m0_201 -> m0_10  [key=2, style=dotted, color=green];
m0_201 -> m0_205  [key=1, style=dashed, color=green, label="lambda expression"];
m0_248 -> m0_249  [key=0, style=solid, color=red];
m0_249 -> m0_248  [key=0, style=bold, color=blue];
m0_249 -> m0_165  [key=0, style=solid, color=green];
m0_249 -> m0_6  [key=2, style=dotted, color=green];
m0_250 -> m0_251  [key=0, style=solid];
m0_266 -> m0_267  [key=0, style=solid];
m0_266 -> m0_154  [key=0, style=bold, color=blue];
m0_276 -> m0_277  [key=0, style=solid, color=green];
m0_276 -> m0_221  [key=2, style=dotted];
m0_276 -> m0_278  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_277 -> m0_278  [key=0, style=solid, color=green];
m0_277 -> m0_71  [key=2, style=dotted];
m0_277 -> m0_9  [key=2, style=dotted, color=green];
m0_277 -> m0_10  [key=2, style=dotted, color=green];
m0_277 -> m0_280  [key=1, style=dashed, color=green, label="lambda expression"];
m0_278 -> m0_276  [key=0, style=bold, color=blue];
m0_278 -> m0_279  [key=0, style=solid];
m0_278 -> m0_36  [key=2, style=dotted];
m0_278 -> m0_12  [key=2, style=dotted];
m0_13 -> m0_14  [key=0, style=solid, color=green];
m0_14 -> m0_15  [key=0, style=solid, color=green];
m0_14 -> m0_12  [key=0, style=bold, color=blue];
m0_15 -> m0_13  [key=0, style=bold, color=blue];
m0_15 -> m0_16  [key=0, style=solid];
m0_28 -> m0_29  [key=0, style=solid, color=green];
m0_28 -> m0_34  [key=0, style=solid];
m0_28 -> m0_36  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>"];
m0_30 -> m0_28  [key=0, style=bold, color=blue];
m0_30 -> m0_31  [key=0, style=solid];
m0_37 -> m0_38  [key=0, style=solid, color=green];
m0_37 -> m0_28  [key=0, style=bold, color=blue];
m0_38 -> m0_39  [key=0, style=solid, color=green];
m0_38 -> m0_40  [key=2, style=dotted, color=green];
m0_39 -> m0_37  [key=0, style=bold, color=blue];
m0_39 -> m0_40  [key=0, style=solid];
m0_39 -> m0_42  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<TMessage>"];
m0_39 -> m0_44  [key=1, style=dashed, color=darkseagreen4, label=TSuccess];
m0_45 -> m0_46  [key=0, style=solid, color=green];
m0_45 -> m0_39  [key=0, style=bold, color=blue];
m0_47 -> m0_45  [key=0, style=bold, color=blue];
m0_47 -> m0_48  [key=0, style=solid];
m0_52 -> m0_53  [key=0, style=solid, color=green];
m0_52 -> m0_50  [key=0, style=bold, color=blue];
m0_53 -> m0_54  [key=0, style=solid, color=green];
m0_53 -> m0_55  [key=2, style=dotted, color=green];
m0_54 -> m0_52  [key=0, style=bold, color=blue];
m0_54 -> m0_55  [key=0, style=solid];
m0_60 -> m0_61  [key=0, style=solid, color=green];
m0_60 -> m0_63  [key=0, style=solid, color=red];
m0_60 -> m0_64  [key=2, style=dotted, color=red];
m0_60 -> m0_65  [key=2, style=dotted, color=red];
m0_60 -> m0_66  [key=2, style=dotted, color=red];
m0_60 -> m0_68  [key=1, style=dashed, color=red, label="lambda expression"];
m0_61 -> m0_62  [key=0, style=solid, color=green];
m0_61 -> m0_63  [key=2, style=dotted, color=green];
m0_62 -> m0_60  [key=0, style=bold, color=blue];
m0_62 -> m0_63  [key=0, style=solid];
m0_62 -> m0_64  [key=2, style=dotted];
m0_62 -> m0_65  [key=2, style=dotted];
m0_62 -> m0_67  [key=2, style=dotted];
m0_62 -> m0_72  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_81 -> m0_82  [key=0, style=solid, color=green];
m0_81 -> m0_83  [key=2, style=dotted, color=green];
m0_82 -> m0_80  [key=0, style=bold, color=blue];
m0_82 -> m0_83  [key=0, style=solid];
m0_82 -> m0_78  [key=2, style=dotted];
m0_89 -> m0_90  [key=0, style=solid, color=green];
m0_89 -> m0_87  [key=0, style=bold, color=blue];
m0_90 -> m0_91  [key=0, style=solid, color=green];
m0_90 -> m0_63  [key=2, style=dotted, color=green];
m0_91 -> m0_89  [key=0, style=bold, color=blue];
m0_91 -> m0_92  [key=0, style=solid];
m0_116 -> m0_117  [key=0, style=solid, color=green];
m0_117 -> m0_118  [key=0, style=solid, color=green];
m0_117 -> m0_109  [key=2, style=dotted, color=green];
m0_117 -> m0_115  [key=0, style=bold, color=blue];
m0_118 -> m0_116  [key=0, style=bold, color=blue];
m0_118 -> m0_119  [key=0, style=solid];
m0_118 -> m0_121  [key=1, style=dashed, color=darkseagreen4, label="System.Func<RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>, TResult>"];
m0_118 -> m0_122  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>"];
m0_118 -> m0_123  [key=1, style=dashed, color=darkseagreen4, label="System.Func<System.Collections.Generic.IEnumerable<TMessage>, TResult>"];
m0_124 -> m0_125  [key=0, style=solid, color=green];
m0_124 -> m0_118  [key=0, style=bold, color=blue];
m0_125 -> m0_126  [key=0, style=solid, color=green];
m0_125 -> m0_109  [key=2, style=dotted, color=green];
m0_133 -> m0_74  [key=0, style=solid, color=green];
m0_133 -> m0_109  [key=2, style=dotted, color=green];
m0_141 -> m0_142  [key=0, style=solid, color=green];
m0_141 -> m0_137  [key=0, style=bold, color=blue];
m0_166 -> m0_164  [key=0, style=bold, color=blue];
m0_166 -> m0_167  [key=0, style=solid];
m0_166 -> m0_168  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<System.Func<TValue, TSuccess>, TMessage>"];
m0_166 -> m0_169  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TValue, TMessage>"];
m0_166 -> m0_171  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<System.Func<TValue, TSuccess>, TMessage>"];
m0_166 -> m0_172  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TValue, TMessage>"];
m0_166 -> m0_173  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<System.Func<TValue, TSuccess>, TMessage>"];
m0_166 -> m0_174  [key=1, style=dashed, color=red, label="RailwaySharp.ErrorHandling.Result<TValue, TMessage>"];
m0_166 -> m0_175  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<System.Func<TValue, TSuccess>, TMessage>"];
m0_166 -> m0_176  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TValue, TMessage>"];
m0_174 -> m0_175  [key=0, style=solid, color=green];
m0_174 -> m0_178  [key=0, style=solid, color=red];
m0_174 -> m0_78  [key=2, style=dotted, color=red];
m0_175 -> m0_176  [key=0, style=solid, color=green];
m0_175 -> m0_140  [key=2, style=dotted, color=green];
m0_175 -> m0_177  [key=1, style=dashed, color=darkseagreen4, label=bad1];
m0_176 -> m0_174  [key=0, style=bold, color=blue];
m0_176 -> m0_177  [key=0, style=solid];
m0_205 -> m0_206  [key=0, style=solid, color=red];
m0_205 -> m0_210  [key=2, style=dotted];
m0_206 -> m0_207  [key=0, style=solid, color=green];
m0_206 -> m0_204  [key=2, style=dotted, color=green];
m0_206 -> m0_209  [key=0, style=solid, color=red];
m0_207 -> m0_205  [key=0, style=bold, color=blue];
m0_207 -> m0_208  [key=0, style=solid];
m0_213 -> m0_214  [key=0, style=solid, color=green];
m0_213 -> m0_215  [key=1, style=dashed, color=darkseagreen4, label=ok];
m0_214 -> m0_215  [key=0, style=solid, color=green];
m0_214 -> m0_204  [key=2, style=dotted, color=green];
m0_214 -> m0_216  [key=0, style=solid];
m0_215 -> m0_213  [key=0, style=bold, color=blue];
m0_215 -> m0_218  [key=0, style=solid];
m0_215 -> m0_219  [key=2, style=dotted];
m0_222 -> m0_223  [key=0, style=solid, color=green];
m0_222 -> m0_220  [key=0, style=bold, color=blue];
m0_239 -> m0_240  [key=0, style=solid, color=green];
m0_240 -> m0_241  [key=0, style=solid, color=green];
m0_240 -> m0_6  [key=2, style=dotted, color=green];
m0_240 -> m0_149  [key=2, style=dotted];
m0_241 -> m0_239  [key=0, style=bold, color=blue];
m0_256 -> m0_257  [key=0, style=solid, color=green];
m0_257 -> m0_258  [key=0, style=solid, color=green];
m0_257 -> m0_6  [key=2, style=dotted, color=green];
m0_257 -> m0_179  [key=2, style=dotted];
m0_258 -> m0_256  [key=0, style=bold, color=blue];
m0_265 -> m0_266  [key=0, style=solid, color=green];
m0_265 -> m0_6  [key=2, style=dotted, color=green];
m0_265 -> m0_259  [key=0, style=bold, color=blue];
m0_280 -> m0_281  [key=0, style=solid, color=red];
m0_280 -> m0_283  [key=0, style=solid, color=red];
m0_281 -> m0_282  [key=0, style=solid, color=green];
m0_281 -> m0_283  [key=2, style=dotted, color=green];
m0_282 -> m0_280  [key=0, style=bold, color=blue];
m0_282 -> m0_285  [key=0, style=solid];
m0_288 -> m0_289  [key=0, style=solid, color=green];
m0_288 -> m0_76  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Ok<TSuccess, TMessage>"];
m0_289 -> m0_290  [key=0, style=solid, color=green];
m0_289 -> m0_6  [key=2, style=dotted, color=green];
m0_289 -> m0_79  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Bad<TSuccess, TMessage>"];
m0_290 -> m0_288  [key=0, style=bold, color=blue];
m0_290 -> m0_143  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<TMessage>"];
m0_290 -> m0_147  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<TMessage>"];
m0_296 -> m0_297  [key=0, style=solid, color=green];
m0_297 -> m0_298  [key=0, style=solid, color=green];
m0_297 -> m0_6  [key=2, style=dotted, color=green];
m0_298 -> m0_296  [key=0, style=bold, color=blue];
m0_303 -> m0_304  [key=0, style=solid, color=green];
m0_304 -> m0_305  [key=0, style=solid, color=green];
m0_304 -> m0_306  [key=2, style=dotted, color=green];
m0_305 -> m0_303  [key=0, style=bold, color=blue];
m0_311 -> m0_312  [key=0, style=solid, color=green];
m0_312 -> m0_313  [key=0, style=solid, color=green];
m0_312 -> m0_306  [key=2, style=dotted, color=green];
m0_313 -> m0_311  [key=0, style=bold, color=blue];
m0_321 -> m0_322  [key=0, style=solid, color=green];
m0_322 -> m0_323  [key=0, style=solid, color=green];
m0_322 -> m0_324  [key=2, style=dotted, color=green];
m0_323 -> m0_321  [key=0, style=bold, color=blue];
m0_331 -> m0_332  [key=0, style=solid, color=green];
m0_332 -> m0_333  [key=0, style=solid, color=green];
m0_332 -> m0_324  [key=2, style=dotted, color=green];
m0_333 -> m0_331  [key=0, style=bold, color=blue];
m0_340 -> m0_341  [key=0, style=solid, color=green];
m0_340 -> m0_9  [key=2, style=dotted, color=green];
m0_340 -> m0_10  [key=2, style=dotted, color=green];
m0_340 -> m0_342  [key=1, style=dashed, color=green, label="lambda expression"];
m0_339 -> m0_340  [key=0, style=solid, color=green];
m0_341 -> m0_339  [key=0, style=bold, color=blue];
m0_342 -> m0_343  [key=0, style=solid, color=green];
m0_343 -> m0_344  [key=0, style=solid, color=green];
m0_343 -> m0_345  [key=2, style=dotted, color=green];
m0_344 -> m0_342  [key=0, style=bold, color=blue];
m0_351 -> m0_352  [key=0, style=solid, color=green];
m0_351 -> m0_9  [key=2, style=dotted, color=green];
m0_351 -> m0_10  [key=2, style=dotted, color=green];
m0_351 -> m0_353  [key=1, style=dashed, color=green, label="lambda expression"];
m0_350 -> m0_351  [key=0, style=solid, color=green];
m0_352 -> m0_350  [key=0, style=bold, color=blue];
m0_353 -> m0_354  [key=0, style=solid, color=green];
m0_354 -> m0_355  [key=0, style=solid, color=green];
m0_354 -> m0_356  [key=2, style=dotted, color=green];
m0_355 -> m0_353  [key=0, style=bold, color=blue];
m0_362 -> m0_363  [key=0, style=solid, color=green];
m0_362 -> m0_9  [key=2, style=dotted, color=green];
m0_362 -> m0_10  [key=2, style=dotted, color=green];
m0_362 -> m0_364  [key=1, style=dashed, color=green, label="lambda expression"];
m0_361 -> m0_362  [key=0, style=solid, color=green];
m0_363 -> m0_361  [key=0, style=bold, color=blue];
m0_364 -> m0_365  [key=0, style=solid, color=green];
m0_365 -> m0_366  [key=0, style=solid, color=green];
m0_365 -> m0_367  [key=2, style=dotted, color=green];
m0_366 -> m0_364  [key=0, style=bold, color=blue];
m0_374 -> m0_375  [key=0, style=solid, color=green];
m0_375 -> m0_376  [key=0, style=solid, color=green];
m0_375 -> m0_377  [key=2, style=dotted, color=green];
m0_376 -> m0_374  [key=0, style=bold, color=blue];
m0_385 -> m0_386  [key=0, style=solid, color=green];
m0_386 -> m0_387  [key=0, style=solid, color=green];
m0_386 -> m0_6  [key=2, style=dotted, color=green];
m0_387 -> m0_385  [key=0, style=bold, color=blue];
m0_395 -> m0_396  [key=0, style=solid, color=green];
m0_396 -> m0_397  [key=0, style=solid, color=green];
m0_396 -> m0_283  [key=2, style=dotted, color=green];
m0_397 -> m0_395  [key=0, style=bold, color=blue];
m0_402 -> m0_403  [key=0, style=solid, color=green];
m0_403 -> m0_404  [key=0, style=solid, color=green];
m0_403 -> m0_405  [key=2, style=dotted, color=green];
m0_404 -> m0_402  [key=0, style=bold, color=blue];
m0_379 -> m0_380  [key=0, style=solid];
m0_378 -> m0_379  [key=0, style=solid];
m0_389 -> m0_390  [key=0, style=solid];
m0_380 -> m0_378  [key=0, style=bold, color=blue];
m0_390 -> m0_388  [key=0, style=bold, color=blue];
m0_36 -> m0_37  [key=0, style=solid];
m0_36 -> m0_29  [key=2, style=dotted];
m0_36 -> m0_38  [key=2, style=dotted];
m0_202 -> m0_203  [key=0, style=solid];
m0_202 -> m0_205  [key=1, style=dashed, color=darkseagreen4, label="System.Action<TSuccess, System.Collections.Generic.IEnumerable<TMessage>>"];
m0_202 -> m0_207  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>"];
m0_202 -> m0_208  [key=1, style=dashed, color=darkseagreen4, label="System.Action<System.Collections.Generic.IEnumerable<TMessage>>"];
m0_202 -> m0_105  [key=2, style=dotted];
m0_203 -> m0_204  [key=0, style=solid];
m0_203 -> m0_205  [key=1, style=dashed, color=darkseagreen4, label=ok];
m0_203 -> m0_199  [key=0, style=bold, color=blue];
m0_208 -> m0_209  [key=0, style=solid];
m0_208 -> m0_211  [key=2, style=dotted];
m0_209 -> m0_202  [key=0, style=bold, color=blue];
m0_209 -> m0_210  [key=0, style=solid, color=green];
m0_209 -> m0_204  [key=2, style=dotted];
m0_209 -> m0_211  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_11 -> m0_9  [key=0, style=bold, color=blue];
m0_31 -> m0_32  [key=0, style=solid];
m0_31 -> m0_33  [key=2, style=dotted];
m0_220 -> m0_221  [key=0, style=solid];
m0_220 -> m0_216  [key=0, style=bold, color=blue];
m0_221 -> m0_222  [key=0, style=solid];
m0_221 -> m0_179  [key=2, style=dotted];
m0_185 -> m0_186  [key=0, style=solid, color=red];
m0_186 -> m0_187  [key=0, style=solid, color=red];
m0_186 -> m0_188  [key=2, style=dotted, color=red];
m0_186 -> m0_179  [key=2, style=dotted, color=red];
m0_186 -> m0_189  [key=1, style=dashed, color=red, label="lambda expression"];
m0_187 -> m0_185  [key=0, style=bold, color=blue];
m0_381 -> m0_382  [key=0, style=solid, color=green];
m0_381 -> m0_383  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_381 -> m0_389  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_382 -> m0_383  [key=0, style=solid, color=green];
m0_382 -> m0_9  [key=2, style=dotted, color=green];
m0_382 -> m0_10  [key=2, style=dotted, color=green];
m0_382 -> m0_385  [key=1, style=dashed, color=green, label="lambda expression"];
m0_383 -> m0_384  [key=0, style=solid];
m0_383 -> m0_372  [key=2, style=dotted];
m0_383 -> m0_373  [key=2, style=dotted];
m0_383 -> m0_388  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_384 -> m0_381  [key=0, style=bold, color=blue];
m0_160 -> m0_161  [key=0, style=solid, color=green];
m0_160 -> m0_162  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m0_161 -> m0_162  [key=0, style=solid, color=green];
m0_161 -> m0_149  [key=2, style=dotted];
m0_161 -> m0_163  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_161 -> m0_9  [key=2, style=dotted, color=green];
m0_161 -> m0_10  [key=2, style=dotted, color=green];
m0_161 -> m0_164  [key=1, style=dashed, color=green, label="lambda expression"];
m0_162 -> m0_160  [key=0, style=bold, color=blue];
m0_162 -> m0_163  [key=0, style=solid];
m0_162 -> m0_105  [key=2, style=dotted];
m0_173 -> m0_174  [key=0, style=solid, color=red];
m0_173 -> m0_175  [key=0, style=solid];
m0_177 -> m0_178  [key=0, style=solid];
m0_177 -> m0_78  [key=2, style=dotted];
m0_177 -> m0_145  [key=2, style=dotted];
m0_178 -> m0_166  [key=0, style=bold, color=blue];
m0_48 -> m0_49  [key=0, style=solid, color=green];
m0_48 -> m0_50  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m0_49 -> m0_50  [key=0, style=solid, color=green];
m0_49 -> m0_9  [key=2, style=dotted, color=green];
m0_49 -> m0_10  [key=2, style=dotted, color=green];
m0_49 -> m0_52  [key=1, style=dashed, color=green, label="lambda expression"];
m0_49 -> m0_47  [key=0, style=bold, color=blue];
m0_50 -> m0_51  [key=0, style=solid];
m0_50 -> m0_36  [key=2, style=dotted];
m0_50 -> m0_12  [key=2, style=dotted];
m0_51 -> m0_48  [key=0, style=bold, color=blue];
m0_51 -> m0_52  [key=0, style=solid];
m0_10 -> m0_11  [key=0, style=solid];
m0_212 -> m0_213  [key=0, style=solid];
m0_212 -> m0_215  [key=1, style=dashed, color=darkseagreen4, label="System.Func<TSuccess, System.Collections.Generic.IEnumerable<TMessage>, TResult>"];
m0_212 -> m0_216  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>"];
m0_212 -> m0_217  [key=1, style=dashed, color=red, label="System.Func<System.Collections.Generic.IEnumerable<TMessage>, TResult>"];
m0_212 -> m0_208  [key=0, style=bold, color=blue];
m0_216 -> m0_217  [key=0, style=solid, color=red];
m0_217 -> m0_218  [key=0, style=solid, color=green];
m0_217 -> m0_125  [key=2, style=dotted, color=red];
m0_217 -> m0_221  [key=2, style=dotted];
m0_217 -> m0_70  [key=2, style=dotted];
m0_217 -> m0_219  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_218 -> m0_212  [key=0, style=bold, color=blue];
m0_218 -> m0_219  [key=0, style=solid, color=green];
m0_218 -> m0_9  [key=2, style=dotted, color=green];
m0_218 -> m0_10  [key=2, style=dotted, color=green];
m0_218 -> m0_222  [key=1, style=dashed, color=green, label="lambda expression"];
m0_119 -> m0_120  [key=0, style=solid];
m0_119 -> m0_121  [key=1, style=dashed, color=darkseagreen4, label=ok];
m0_121 -> m0_122  [key=0, style=solid, color=green];
m0_121 -> m0_9  [key=2, style=dotted, color=green];
m0_121 -> m0_10  [key=2, style=dotted, color=green];
m0_121 -> m0_124  [key=1, style=dashed, color=green, label="lambda expression"];
m0_121 -> m0_125  [key=2, style=dotted];
m0_120 -> m0_121  [key=0, style=solid, color=green];
m0_120 -> m0_115  [key=2, style=dotted];
m0_120 -> m0_70  [key=2, style=dotted];
m0_120 -> m0_122  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_122 -> m0_123  [key=0, style=solid];
m0_122 -> m0_36  [key=2, style=dotted];
m0_122 -> m0_12  [key=2, style=dotted];
m0_123 -> m0_119  [key=0, style=bold, color=blue];
m0_123 -> m0_124  [key=0, style=solid];
m0_123 -> m0_125  [key=2, style=dotted];
m0_140 -> m0_141  [key=0, style=solid];
m0_140 -> m0_118  [key=2, style=dotted];
m0_283 -> m0_284  [key=0, style=solid];
m0_87 -> m0_88  [key=0, style=solid];
m0_87 -> m0_36  [key=2, style=dotted];
m0_87 -> m0_12  [key=2, style=dotted];
m0_88 -> m0_89  [key=0, style=solid];
m0_88 -> m0_75  [key=2, style=dotted];
m0_88 -> m0_18  [key=2, style=dotted];
m0_88 -> m0_90  [key=2, style=dotted];
m0_88 -> m0_84  [key=0, style=bold, color=blue];
m0_40 -> m0_41  [key=0, style=solid];
m0_40 -> m0_42  [key=0, style=solid];
m0_12 -> m0_13  [key=0, style=solid];
m0_279 -> m0_275  [key=0, style=bold, color=blue];
m0_279 -> m0_280  [key=0, style=solid, color=red];
m0_279 -> m0_281  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>"];
m0_279 -> m0_283  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>"];
m0_219 -> m0_220  [key=0, style=solid];
m0_219 -> m0_36  [key=2, style=dotted];
m0_219 -> m0_12  [key=2, style=dotted];
m0_391 -> m0_392  [key=0, style=solid, color=green];
m0_391 -> m0_393  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue"];
m0_392 -> m0_393  [key=0, style=solid, color=green];
m0_392 -> m0_9  [key=2, style=dotted, color=green];
m0_392 -> m0_10  [key=2, style=dotted, color=green];
m0_392 -> m0_395  [key=1, style=dashed, color=green, label="lambda expression"];
m0_393 -> m0_394  [key=0, style=solid];
m0_393 -> m0_105  [key=2, style=dotted];
m0_394 -> m0_391  [key=0, style=bold, color=blue];
m0_115 -> m0_116  [key=0, style=solid];
m0_64 -> m0_65  [key=0, style=solid];
m0_66 -> m0_67  [key=0, style=solid, color=green];
m0_66 -> m0_9  [key=2, style=dotted, color=green];
m0_66 -> m0_10  [key=2, style=dotted, color=green];
m0_66 -> m0_71  [key=1, style=dashed, color=green, label="lambda expression"];
m0_65 -> m0_66  [key=0, style=solid, color=green];
m0_65 -> m0_69  [key=2, style=dotted];
m0_65 -> m0_70  [key=2, style=dotted];
m0_65 -> m0_67  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_67 -> m0_68  [key=0, style=solid];
m0_67 -> m0_36  [key=2, style=dotted];
m0_67 -> m0_12  [key=2, style=dotted];
m0_137 -> m0_138  [key=0, style=solid, color=green];
m0_137 -> m0_9  [key=2, style=dotted, color=green];
m0_137 -> m0_10  [key=2, style=dotted, color=green];
m0_137 -> m0_141  [key=1, style=dashed, color=green, label="lambda expression"];
m0_137 -> m0_143  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<TMessage>"];
m0_137 -> m0_139  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<TMessage>"];
m0_137 -> m0_147  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<TMessage>"];
m0_137 -> m0_140  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>"];
m0_138 -> m0_139  [key=0, style=solid];
m0_138 -> m0_105  [key=2, style=dotted];
m0_138 -> m0_143  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>"];
m0_138 -> m0_140  [key=1, style=dashed, color=darkseagreen4, label=successFunc];
m0_139 -> m0_135  [key=0, style=bold, color=blue];
m0_139 -> m0_140  [key=0, style=solid];
m0_139 -> m0_147  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<TMessage>"];
m0_16 -> m0_17  [key=0, style=solid, color=green];
m0_16 -> m0_18  [key=1, style=dashed, color=darkseagreen4, label=long];
m0_17 -> m0_15  [key=0, style=bold, color=blue];
m0_17 -> m0_18  [key=0, style=solid, color=green];
m0_17 -> m0_9  [key=2, style=dotted, color=green];
m0_17 -> m0_10  [key=2, style=dotted, color=green];
m0_17 -> m0_21  [key=1, style=dashed, color=green, label="lambda expression"];
m0_325 -> m0_326  [key=0, style=solid, color=green];
m0_325 -> m0_328  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_325 -> m0_329  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_326 -> m0_327  [key=0, style=solid, color=green];
m0_326 -> m0_9  [key=2, style=dotted, color=green];
m0_326 -> m0_10  [key=2, style=dotted, color=green];
m0_326 -> m0_331  [key=1, style=dashed, color=green, label="lambda expression"];
m0_326 -> m0_328  [key=1, style=dashed, color=green, label=result];
m0_326 -> m0_329  [key=1, style=dashed, color=green, label=result];
m0_327 -> m0_328  [key=0, style=solid];
m0_327 -> m0_329  [key=0, style=solid];
m0_328 -> m0_329  [key=0, style=solid];
m0_328 -> m0_105  [key=2, style=dotted];
m0_329 -> m0_330  [key=0, style=solid];
m0_329 -> m0_320  [key=2, style=dotted];
m0_329 -> m0_105  [key=2, style=dotted];
m0_330 -> m0_325  [key=0, style=bold, color=blue];
m0_264 -> m0_265  [key=0, style=solid];
m0_211 -> m0_212  [key=0, style=solid];
m0_211 -> m0_105  [key=2, style=dotted];
m0_299 -> m0_300  [key=0, style=solid, color=green];
m0_299 -> m0_301  [key=1, style=dashed, color=darkseagreen4, label="int?"];
m0_300 -> m0_301  [key=0, style=solid, color=green];
m0_300 -> m0_9  [key=2, style=dotted, color=green];
m0_300 -> m0_10  [key=2, style=dotted, color=green];
m0_300 -> m0_303  [key=1, style=dashed, color=green, label="lambda expression"];
m0_301 -> m0_302  [key=0, style=solid];
m0_301 -> m0_105  [key=2, style=dotted];
m0_302 -> m0_299  [key=0, style=bold, color=blue];
m0_242 -> m0_243  [key=0, style=solid];
m0_242 -> m0_251  [key=1, style=dashed, color=darkseagreen4, label="System.Func<TSuccess, TValue, TResult>"];
m0_242 -> m0_245  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>"];
m0_242 -> m0_246  [key=1, style=dashed, color=red, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>"];
m0_244 -> m0_245  [key=0, style=solid, color=green];
m0_244 -> m0_9  [key=2, style=dotted, color=green];
m0_244 -> m0_10  [key=2, style=dotted, color=green];
m0_244 -> m0_146  [key=1, style=dashed, color=green, label="lambda expression"];
m0_244 -> m0_254  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>"];
m0_244 -> m0_246  [key=1, style=dashed, color=red, label=liftedMapper];
m0_243 -> m0_244  [key=0, style=solid, color=green];
m0_243 -> m0_247  [key=2, style=dotted];
m0_243 -> m0_245  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_243 -> m0_243  [key=1, style=dashed, color=darkseagreen4, label=TSuccess];
m0_243 -> m0_251  [key=1, style=dashed, color=darkseagreen4, label=TSuccess];
m0_243 -> m0_254  [key=1, style=dashed, color=darkseagreen4, label=curriedMapper];
m0_245 -> m0_246  [key=0, style=solid, color=red];
m0_245 -> m0_36  [key=2, style=dotted];
m0_245 -> m0_12  [key=2, style=dotted];
m0_245 -> m0_149  [key=2, style=dotted];
m0_246 -> m0_242  [key=0, style=bold, color=blue];
m0_246 -> m0_247  [key=0, style=solid, color=red];
m0_246 -> m0_219  [key=2, style=dotted, color=red];
m0_210 -> m0_211  [key=0, style=solid, color=green];
m0_210 -> m0_9  [key=2, style=dotted, color=green];
m0_210 -> m0_10  [key=2, style=dotted, color=green];
m0_210 -> m0_213  [key=1, style=dashed, color=green, label="lambda expression"];
m0_291 -> m0_292  [key=0, style=solid];
m0_291 -> m0_155  [key=1, style=dashed, color=darkseagreen4, label="System.Func<TValue, RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>>"];
m0_293 -> m0_294  [key=0, style=solid, color=green];
m0_293 -> m0_9  [key=2, style=dotted, color=green];
m0_293 -> m0_10  [key=2, style=dotted, color=green];
m0_293 -> m0_296  [key=1, style=dashed, color=green, label="lambda expression"];
m0_293 -> m0_251  [key=1, style=dashed, color=darkseagreen4, label=TSuccess];
m0_292 -> m0_293  [key=0, style=solid, color=green];
m0_292 -> m0_79  [key=2, style=dotted];
m0_292 -> m0_294  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_292 -> m0_251  [key=1, style=dashed, color=darkseagreen4, label="System.Func<TSuccess, TValue, TResult>"];
m0_294 -> m0_295  [key=0, style=solid];
m0_294 -> m0_36  [key=2, style=dotted];
m0_294 -> m0_12  [key=2, style=dotted];
m0_294 -> m0_254  [key=1, style=dashed, color=darkseagreen4, label=curriedMapper];
m0_295 -> m0_291  [key=0, style=bold, color=blue];
m0_8 -> m0_6  [key=0, style=bold, color=blue];
m0_102 -> m0_103  [key=0, style=solid, color=green];
m0_102 -> m0_9  [key=2, style=dotted, color=green];
m0_102 -> m0_10  [key=2, style=dotted, color=green];
m0_102 -> m0_106  [key=1, style=dashed, color=green, label="lambda expression"];
m0_284 -> m0_285  [key=0, style=solid, color=green];
m0_284 -> m0_286  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_285 -> m0_286  [key=0, style=solid, color=green];
m0_285 -> m0_9  [key=2, style=dotted, color=green];
m0_285 -> m0_10  [key=2, style=dotted, color=green];
m0_285 -> m0_288  [key=1, style=dashed, color=green, label="lambda expression"];
m0_285 -> m0_279  [key=0, style=bold, color=blue];
m0_286 -> m0_287  [key=0, style=solid];
m0_286 -> m0_105  [key=2, style=dotted];
m0_286 -> m0_19  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>"];
m0_286 -> m0_20  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>"];
m0_286 -> m0_25  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>"];
m0_286 -> m0_26  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>"];
m0_286 -> m0_31  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>"];
m0_286 -> m0_36  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.OkPair<TSuccess, TMessage>"];
m0_287 -> m0_284  [key=0, style=bold, color=blue];
m0_287 -> m0_54  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>"];
m0_287 -> m0_57  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>"];
m0_287 -> m0_59  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>"];
m0_287 -> m0_61  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>"];
m0_346 -> m0_347  [key=0, style=solid, color=green];
m0_347 -> m0_347  [key=3, color=green, style=bold, label="Local variable System.Action test"];
m0_347 -> m0_348  [key=0, style=solid, color=green];
m0_348 -> m0_349  [key=0, style=solid];
m0_348 -> m0_338  [key=2, style=dotted];
m0_349 -> m0_346  [key=0, style=bold, color=blue];
m0_406 -> m0_14  [key=1, style=dashed, color=green, label=fakeOptions];
m0_408 -> m0_379  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_409 -> m0_389  [key=1, style=dashed, color=darkseagreen4, label=int];
m1_18 -> m1_19  [key=0, style=solid];
m1_19 -> m1_20  [key=0, style=solid];
m1_19 -> m1_21  [key=2, style=dotted];
m1_20 -> m1_18  [key=0, style=bold, color=blue];
m1_16 -> m1_17  [key=0, style=solid];
m1_16 -> m1_3  [key=2, style=dotted];
m1_25 -> m1_56  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_25 -> m1_49  [key=0, style=solid];
m1_49 -> m1_55  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_49 -> m1_50  [key=0, style=solid];
m1_49 -> m1_51  [key=2, style=dotted];
m1_49 -> m1_52  [key=2, style=dotted];
m1_49 -> m1_53  [key=2, style=dotted];
m1_49 -> m1_54  [key=2, style=dotted];
m1_49 -> m1_58  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_50 -> m1_25  [key=0, style=bold, color=blue];
m1_12 -> m1_13  [key=0, style=solid];
m1_12 -> m1_15  [key=2, style=dotted];
m1_13 -> m1_14  [key=0, style=solid];
m1_13 -> m1_11  [key=2, style=dotted];
m1_13 -> m1_26  [key=2, style=dotted];
m1_13 -> m1_23  [key=2, style=dotted];
m1_13 -> m1_17  [key=2, style=dotted];
m1_13 -> m1_21  [key=2, style=dotted];
m1_13 -> m1_22  [key=2, style=dotted];
m1_13 -> m1_16  [key=2, style=dotted];
m1_13 -> m1_18  [key=2, style=dotted];
m1_13 -> m1_19  [key=2, style=dotted];
m1_13 -> m1_20  [key=2, style=dotted];
m1_13 -> m1_24  [key=2, style=dotted];
m1_13 -> m1_25  [key=2, style=dotted];
m1_14 -> m1_12  [key=0, style=bold, color=blue];
m1_14 -> m1_3  [key=0, style=bold, color=blue];
m1_3 -> m1_13  [key=1, style=dashed, color=darkseagreen4, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>"];
m1_3 -> m1_12  [key=0, style=solid];
m1_8 -> m1_9  [key=0, style=solid];
m1_9 -> m1_10  [key=0, style=solid];
m1_9 -> m1_11  [key=2, style=dotted];
m1_10 -> m1_8  [key=0, style=bold, color=blue];
m1_35 -> m1_36  [key=0, style=solid];
m1_38 -> m1_39  [key=0, style=solid, color=green];
m1_46 -> m1_47  [key=0, style=solid];
m1_39 -> m1_40  [key=0, style=solid, color=green];
m1_39 -> m1_41  [key=2, style=dotted, color=green];
m1_39 -> m1_42  [key=2, style=dotted, color=green];
m1_39 -> m1_43  [key=1, style=dashed, color=green, label="lambda expression"];
m1_40 -> m1_38  [key=0, style=bold, color=blue];
m1_43 -> m1_44  [key=0, style=solid, color=green];
m1_44 -> m1_45  [key=0, style=solid, color=green];
m1_44 -> m1_21  [key=2, style=dotted, color=green];
m1_44 -> m1_22  [key=2, style=dotted, color=green];
m1_45 -> m1_43  [key=0, style=bold, color=blue];
m1_36 -> m1_21  [key=2, style=dotted];
m1_36 -> m1_22  [key=2, style=dotted];
m1_36 -> m1_37  [key=0, style=solid];
m1_37 -> m1_35  [key=0, style=bold, color=blue];
m1_48 -> m1_46  [key=0, style=bold, color=blue];
m1_47 -> m1_48  [key=0, style=solid];
m1_56 -> m1_22  [key=2, style=dotted];
m1_56 -> m1_57  [key=0, style=solid];
m1_55 -> m1_56  [key=0, style=solid];
m1_57 -> m1_55  [key=0, style=bold, color=blue];
m1_5 -> m1_6  [key=0, style=solid];
m1_5 -> m1_7  [key=2, style=dotted];
m1_5 -> m1_8  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_4 -> m1_5  [key=0, style=solid];
m1_4 -> m1_9  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_58 -> m1_59  [key=0, style=solid];
m1_6 -> m1_4  [key=0, style=bold, color=blue];
m1_59 -> m1_60  [key=0, style=solid];
m1_59 -> m1_61  [key=2, style=dotted];
m1_60 -> m1_58  [key=0, style=bold, color=blue];
m1_0 -> m1_3  [key=3, color=darkorchid, style=bold, label="method methodReturn CommandLine.ParserResult<object> Choose"];
m1_0 -> m1_1  [key=0, style=solid];
m1_0 -> m1_5  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_0 -> m1_9  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_1 -> m1_3  [key=2, style=dotted];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_4  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_2 -> m1_0  [key=0, style=bold, color=blue];
m1_26 -> m1_27  [key=0, style=solid, color=green];
m1_26 -> m1_39  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>"];
m1_26 -> m1_44  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<string>"];
m1_26 -> m1_36  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m1_27 -> m1_28  [key=0, style=solid, color=green];
m1_27 -> m1_29  [key=2, style=dotted, color=green];
m1_27 -> m1_23  [key=2, style=dotted, color=green];
m1_27 -> m1_30  [key=2, style=dotted, color=green];
m1_27 -> m1_17  [key=2, style=dotted, color=green];
m1_27 -> m1_31  [key=2, style=dotted, color=green];
m1_27 -> m1_21  [key=2, style=dotted, color=green];
m1_27 -> m1_32  [key=2, style=dotted, color=green];
m1_27 -> m1_33  [key=2, style=dotted, color=green];
m1_27 -> m1_34  [key=2, style=dotted, color=green];
m1_27 -> m1_35  [key=1, style=dashed, color=green, label="lambda expression"];
m1_27 -> m1_38  [key=1, style=dashed, color=green, label="lambda expression"];
m1_27 -> m1_46  [key=1, style=dashed, color=green, label="lambda expression"];
m1_28 -> m1_26  [key=0, style=bold, color=blue];
m1_15 -> m1_16  [key=0, style=solid];
m1_17 -> m1_15  [key=0, style=bold, color=blue];
m1_64 -> m1_39  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<string>"];
m1_64 -> m1_44  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<string>"];
m1_64 -> m1_36  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m1_65 -> m1_39  [key=1, style=dashed, color=green, label="System.StringComparer"];
m1_65 -> m1_44  [key=1, style=dashed, color=green, label="System.StringComparer"];
m1_65 -> m1_36  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_66 -> m1_39  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>"];
m1_67 -> m1_56  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_68 -> m1_56  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_62 -> m1_5  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_62 -> m1_9  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_63 -> m1_9  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m2_8 -> m2_12  [key=1, style=dashed, color=darkseagreen4, label="System.Action<CommandLine.ParserSettings>"];
m2_8 -> m2_9  [key=0, style=solid];
m2_11 -> m2_12  [key=0, style=solid];
m2_11 -> m2_4  [key=2, style=dotted];
m2_12 -> m2_13  [key=0, style=solid];
m2_12 -> m2_16  [key=2, style=dotted];
m2_13 -> m2_14  [key=0, style=solid];
m2_13 -> m2_11  [key=0, style=bold, color=blue];
m2_9 -> m2_11  [key=0, style=solid];
m2_9 -> m2_10  [key=0, style=solid];
m2_10 -> m2_14  [key=0, style=solid];
m2_10 -> m2_15  [key=2, style=dotted];
m2_14 -> m2_8  [key=0, style=bold, color=blue];
m2_14 -> m2_5  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>"];
m2_20 -> m2_21  [key=0, style=solid];
m2_21 -> m2_22  [key=0, style=solid];
m2_21 -> m2_23  [key=2, style=dotted];
m2_22 -> m2_20  [key=0, style=bold, color=blue];
m2_0 -> m2_1  [key=0, style=solid];
m2_0 -> m2_5  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>"];
m2_1 -> m2_2  [key=0, style=solid];
m2_1 -> m2_3  [key=2, style=dotted];
m2_1 -> m2_4  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_1 -> m2_1  [key=1, style=dashed, color=darkseagreen4, label=tseq];
m2_2 -> m2_0  [key=0, style=bold, color=blue];
m2_49 -> m2_56  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m2_49 -> m2_61  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m2_49 -> m2_50  [key=0, style=solid];
m2_49 -> m2_52  [key=1, style=dashed, color=darkseagreen4, label="params System.Type[]"];
m2_49 -> m2_54  [key=1, style=dashed, color=darkseagreen4, label="params System.Type[]"];
m2_49 -> m2_59  [key=3, color=darkorchid, style=bold, label="method methodReturn CommandLine.ParserResult<object> ParseArguments"];
m2_56 -> m2_57  [key=0, style=solid];
m2_56 -> m2_59  [key=2, style=dotted];
m2_56 -> m2_60  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_54 -> m2_56  [key=0, style=solid];
m2_54 -> m2_55  [key=0, style=solid];
m2_50 -> m2_51  [key=0, style=solid];
m2_50 -> m2_52  [key=0, style=solid];
m2_52 -> m2_54  [key=0, style=solid];
m2_52 -> m2_53  [key=0, style=solid];
m2_55 -> m2_57  [key=0, style=solid];
m2_55 -> m2_58  [key=2, style=dotted];
m2_51 -> m2_57  [key=0, style=solid];
m2_51 -> m2_15  [key=2, style=dotted];
m2_53 -> m2_57  [key=0, style=solid];
m2_53 -> m2_15  [key=2, style=dotted];
m2_57 -> m2_49  [key=0, style=bold, color=blue];
m2_3 -> m2_17  [key=0, style=solid];
m2_17 -> m2_18  [key=0, style=solid];
m2_18 -> m2_19  [key=0, style=solid];
m2_19 -> m2_3  [key=0, style=bold, color=blue];
m2_7 -> m2_5  [key=0, style=bold, color=blue];
m2_29 -> m2_38  [key=1, style=dashed, color=green, label="System.Func<T>"];
m2_29 -> m2_42  [key=1, style=dashed, color=green, label="System.Func<T>"];
m2_29 -> m2_34  [key=0, style=solid];
m2_29 -> m2_36  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m2_29 -> m2_27  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Func<T> factory"];
m2_29 -> m2_24  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Collections.Generic.IEnumerable<string> args"];
m2_38 -> m2_39  [key=0, style=solid, color=green];
m2_38 -> m2_40  [key=2, style=dotted, color=green];
m2_38 -> m2_41  [key=1, style=dashed, color=green, label="lambda expression"];
m2_36 -> m2_38  [key=0, style=solid, color=green];
m2_36 -> m2_37  [key=0, style=solid];
m2_34 -> m2_36  [key=0, style=solid];
m2_34 -> m2_35  [key=0, style=solid];
m2_37 -> m2_39  [key=0, style=solid];
m2_37 -> m2_15  [key=2, style=dotted];
m2_35 -> m2_39  [key=0, style=solid];
m2_35 -> m2_15  [key=2, style=dotted];
m2_39 -> m2_29  [key=0, style=bold, color=blue];
m2_16 -> m2_12  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Token"];
m2_4 -> m2_5  [key=0, style=solid];
m2_4 -> m2_12  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Token"];
m2_5 -> m2_6  [key=0, style=solid];
m2_5 -> m2_7  [key=2, style=dotted];
m2_5 -> m2_8  [key=2, style=dotted];
m2_5 -> m2_9  [key=2, style=dotted];
m2_5 -> m2_10  [key=2, style=dotted];
m2_5 -> m2_11  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_6 -> m2_7  [key=0, style=solid];
m2_6 -> m2_4  [key=2, style=dotted];
m2_91 -> m2_91  [key=3, color=darkorchid, style=bold, label="method methodReturn CommandLine.ParserResult<T> DisplayHelp"];
m2_91 -> m2_102  [key=0, style=solid];
m2_91 -> m2_103  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResult<T>"];
m2_91 -> m2_110  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResult<T>"];
m2_91 -> m2_104  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResult<T>"];
m2_91 -> m2_90  [key=3, color=darkorchid, style=bold, label="Parameter variable CommandLine.ParserResult<T> parserResult"];
m2_102 -> m2_103  [key=0, style=solid];
m2_102 -> m2_104  [key=0, style=solid];
m2_102 -> m2_106  [key=2, style=dotted];
m2_103 -> m2_104  [key=0, style=solid];
m2_103 -> m2_107  [key=2, style=dotted];
m2_103 -> m2_108  [key=2, style=dotted];
m2_103 -> m2_109  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_104 -> m2_105  [key=0, style=solid];
m2_105 -> m2_91  [key=0, style=bold, color=blue];
m2_99 -> m2_100  [key=0, style=solid];
m2_41 -> m2_42  [key=0, style=solid, color=green];
m2_42 -> m2_43  [key=0, style=solid, color=green];
m2_42 -> m2_44  [key=2, style=dotted, color=green];
m2_42 -> m2_45  [key=1, style=dashed, color=green, label="lambda expression"];
m2_43 -> m2_41  [key=0, style=bold, color=blue];
m2_45 -> m2_46  [key=0, style=solid, color=green];
m2_46 -> m2_47  [key=0, style=solid, color=green];
m2_46 -> m2_48  [key=2, style=dotted, color=green];
m2_47 -> m2_45  [key=0, style=bold, color=blue];
m2_61 -> m2_62  [key=0, style=solid];
m2_61 -> m2_63  [key=2, style=dotted];
m2_61 -> m2_64  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_65 -> m2_66  [key=0, style=solid];
m2_65 -> m2_67  [key=2, style=dotted];
m2_30 -> m2_31  [key=0, style=solid];
m2_60 -> m2_61  [key=0, style=solid];
m2_62 -> m2_60  [key=0, style=bold, color=blue];
m2_64 -> m2_65  [key=0, style=solid];
m2_66 -> m2_64  [key=0, style=bold, color=blue];
m2_32 -> m2_30  [key=0, style=bold, color=blue];
m2_31 -> m2_32  [key=0, style=solid];
m2_31 -> m2_33  [key=2, style=dotted];
m2_78 -> m2_79  [key=0, style=solid];
m2_78 -> m2_76  [key=2, style=dotted];
m2_78 -> m2_80  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_81 -> m2_82  [key=0, style=solid];
m2_81 -> m2_83  [key=2, style=dotted];
m2_85 -> m2_86  [key=0, style=solid];
m2_85 -> m2_83  [key=2, style=dotted];
m2_110 -> m2_111  [key=0, style=solid];
m2_110 -> m2_112  [key=2, style=dotted];
m2_110 -> m2_113  [key=2, style=dotted];
m2_77 -> m2_78  [key=0, style=solid];
m2_84 -> m2_85  [key=0, style=solid];
m2_79 -> m2_77  [key=0, style=bold, color=blue];
m2_80 -> m2_81  [key=0, style=solid];
m2_82 -> m2_80  [key=0, style=bold, color=blue];
m2_86 -> m2_84  [key=0, style=bold, color=blue];
m2_109 -> m2_110  [key=0, style=solid];
m2_111 -> m2_109  [key=0, style=bold, color=blue];
m2_95 -> m2_96  [key=0, style=solid];
m2_97 -> m2_95  [key=0, style=bold, color=blue];
m2_96 -> m2_97  [key=0, style=solid];
m2_96 -> m2_98  [key=2, style=dotted];
m2_96 -> m2_99  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_100 -> m2_101  [key=0, style=solid];
m2_101 -> m2_99  [key=0, style=bold, color=blue];
m2_90 -> m2_92  [key=0, style=solid];
m2_92 -> m2_93  [key=0, style=solid];
m2_92 -> m2_94  [key=2, style=dotted];
m2_92 -> m2_95  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_93 -> m2_90  [key=0, style=bold, color=blue];
m2_59 -> m2_56  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Func<CommandLine.ParserResult<T>> parseFunc"];
m2_59 -> m2_87  [key=0, style=solid];
m2_59 -> m2_91  [key=3, color=darkorchid, style=bold, label="method methodReturn CommandLine.ParserResult<T> MakeParserResult"];
m2_87 -> m2_88  [key=0, style=solid];
m2_87 -> m2_89  [key=2, style=dotted];
m2_87 -> m2_90  [key=2, style=dotted];
m2_87 -> m2_91  [key=2, style=dotted];
m2_88 -> m2_59  [key=0, style=bold, color=blue];
m2_68 -> m2_69  [key=0, style=solid];
m2_69 -> m2_70  [key=0, style=solid];
m2_69 -> m2_23  [key=2, style=dotted];
m2_70 -> m2_71  [key=0, style=solid];
m2_70 -> m2_72  [key=2, style=dotted];
m2_71 -> m2_68  [key=0, style=bold, color=blue];
m2_24 -> m2_29  [key=3, color=darkorchid, style=bold, label="method methodReturn CommandLine.ParserResult<T> ParseArguments"];
m2_24 -> m2_27  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m2_24 -> m2_25  [key=0, style=solid];
m2_27 -> m2_29  [key=2, style=dotted];
m2_27 -> m2_28  [key=0, style=solid];
m2_27 -> m2_30  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_25 -> m2_27  [key=0, style=solid];
m2_25 -> m2_26  [key=0, style=solid];
m2_26 -> m2_28  [key=0, style=solid];
m2_26 -> m2_15  [key=2, style=dotted];
m2_28 -> m2_24  [key=0, style=bold, color=blue];
m2_67 -> m2_73  [key=0, style=solid];
m2_67 -> m2_78  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m2_67 -> m2_81  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m2_67 -> m2_85  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m2_73 -> m2_74  [key=0, style=solid];
m2_73 -> m2_75  [key=2, style=dotted];
m2_73 -> m2_76  [key=2, style=dotted];
m2_73 -> m2_77  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_73 -> m2_84  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_74 -> m2_67  [key=0, style=bold, color=blue];
m2_23 -> m2_21  [key=3, color=darkorchid, style=bold, label="Parameter variable bool disposing"];
m2_23 -> m2_69  [key=3, color=darkorchid, style=bold, label="Parameter variable bool disposing"];
m2_23 -> m2_114  [key=0, style=solid];
m2_23 -> m2_116  [key=1, style=dashed, color=darkseagreen4, label=bool];
m2_114 -> m2_115  [key=0, style=solid];
m2_114 -> m2_116  [key=0, style=solid];
m2_117 -> m2_118  [key=0, style=solid];
m2_117 -> m2_119  [key=0, style=solid];
m2_118 -> m2_119  [key=0, style=solid];
m2_118 -> m2_121  [key=2, style=dotted];
m2_119 -> m2_120  [key=0, style=solid];
m2_115 -> m2_120  [key=0, style=solid];
m2_116 -> m2_117  [key=0, style=solid];
m2_116 -> m2_120  [key=0, style=solid];
m2_120 -> m2_23  [key=0, style=bold, color=blue];
m2_15 -> m2_12  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Token"];
m2_122 -> m2_38  [key=1, style=dashed, color=green, label="CommandLine.Parser"];
m2_122 -> m2_42  [key=1, style=dashed, color=green, label="CommandLine.Parser"];
m2_122 -> m2_46  [key=1, style=dashed, color=green, label="CommandLine.Parser"];
m2_122 -> m2_6  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m2_122 -> m2_11  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m2_122 -> m2_12  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m2_122 -> m2_13  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m2_122 -> m2_17  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m2_122 -> m2_18  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m2_122 -> m2_21  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m2_122 -> m2_27  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m2_122 -> m2_56  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m2_122 -> m2_61  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m2_122 -> m2_65  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m2_122 -> m2_69  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m2_122 -> m2_70  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m2_122 -> m2_114  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m2_122 -> m2_117  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m2_122 -> m2_118  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m2_122 -> m2_119  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m2_123 -> m2_42  [key=1, style=dashed, color=green, label="System.Func<T>"];
m2_124 -> m2_42  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<string>"];
m2_125 -> m2_61  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m2_126 -> m2_61  [key=1, style=dashed, color=darkseagreen4, label="params System.Type[]"];
m2_127 -> m2_78  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m2_127 -> m2_81  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m2_127 -> m2_85  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m2_128 -> m2_78  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m2_128 -> m2_81  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m2_128 -> m2_85  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m2_129 -> m2_110  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResult<T>"];
m3_20 -> m3_21  [key=0, style=solid];
m3_21 -> m3_22  [key=0, style=solid];
m3_21 -> m3_6  [key=2, style=dotted];
m3_21 -> m3_7  [key=2, style=dotted];
m3_21 -> m3_24  [key=1, style=dashed, color=darkseagreen4, label=expectedTokens];
m3_22 -> m3_23  [key=0, style=solid];
m3_22 -> m3_8  [key=2, style=dotted];
m3_22 -> m3_9  [key=2, style=dotted];
m3_22 -> m3_27  [key=1, style=dashed, color=darkseagreen4, label=specs];
m3_24 -> m3_25  [key=0, style=solid];
m3_24 -> m3_14  [key=2, style=dotted];
m3_24 -> m3_15  [key=2, style=dotted];
m3_23 -> m3_24  [key=0, style=solid];
m3_23 -> m3_10  [key=2, style=dotted];
m3_23 -> m3_6  [key=2, style=dotted];
m3_23 -> m3_7  [key=2, style=dotted];
m3_23 -> m3_11  [key=2, style=dotted];
m3_23 -> m3_12  [key=2, style=dotted];
m3_23 -> m3_13  [key=2, style=dotted];
m3_23 -> m3_26  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_25 -> m3_20  [key=0, style=bold, color=blue];
m3_0 -> m3_1  [key=0, style=solid];
m3_1 -> m3_2  [key=0, style=solid];
m3_1 -> m3_6  [key=2, style=dotted];
m3_1 -> m3_7  [key=2, style=dotted];
m3_1 -> m3_4  [key=1, style=dashed, color=darkseagreen4, label=expectedTokens];
m3_2 -> m3_3  [key=0, style=solid];
m3_2 -> m3_8  [key=2, style=dotted];
m3_2 -> m3_9  [key=2, style=dotted];
m3_2 -> m3_17  [key=1, style=dashed, color=darkseagreen4, label=specs];
m3_4 -> m3_5  [key=0, style=solid];
m3_4 -> m3_14  [key=2, style=dotted];
m3_4 -> m3_15  [key=2, style=dotted];
m3_3 -> m3_4  [key=0, style=solid];
m3_3 -> m3_10  [key=2, style=dotted];
m3_3 -> m3_6  [key=2, style=dotted];
m3_3 -> m3_7  [key=2, style=dotted];
m3_3 -> m3_11  [key=2, style=dotted];
m3_3 -> m3_12  [key=2, style=dotted];
m3_3 -> m3_13  [key=2, style=dotted];
m3_3 -> m3_16  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_5 -> m3_0  [key=0, style=bold, color=blue];
m3_45 -> m3_46  [key=0, style=solid, color=green];
m3_46 -> m3_47  [key=0, style=solid, color=green];
m3_46 -> m3_49  [key=2, style=dotted, color=green];
m3_46 -> m3_50  [key=2, style=dotted, color=green];
m3_46 -> m3_51  [key=2, style=dotted, color=green];
m3_47 -> m3_48  [key=0, style=solid, color=green];
m3_47 -> m3_52  [key=2, style=dotted, color=green];
m3_47 -> m3_53  [key=2, style=dotted, color=green];
m3_48 -> m3_45  [key=0, style=bold, color=blue];
m3_26 -> m3_27  [key=0, style=solid];
m3_17 -> m3_18  [key=0, style=solid];
m3_17 -> m3_19  [key=2, style=dotted];
m3_16 -> m3_17  [key=0, style=solid];
m3_18 -> m3_16  [key=0, style=bold, color=blue];
m3_27 -> m3_28  [key=0, style=solid];
m3_27 -> m3_19  [key=2, style=dotted];
m3_28 -> m3_26  [key=0, style=bold, color=blue];
m3_29 -> m3_17  [key=1, style=dashed, color=darkseagreen4, label=specs];
m3_30 -> m3_27  [key=1, style=dashed, color=darkseagreen4, label=specs];
}
