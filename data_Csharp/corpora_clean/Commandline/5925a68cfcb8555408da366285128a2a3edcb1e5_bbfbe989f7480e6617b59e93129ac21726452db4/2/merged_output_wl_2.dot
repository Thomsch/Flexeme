digraph  {
n0 [cluster="CommandLine.Tests.Unit.Attributes.AttributesFixture.CustomOptionAttribute.CustomOptionAttribute(string)", label="Entry CommandLine.Tests.Unit.Attributes.AttributesFixture.CustomOptionAttribute.CustomOptionAttribute(string)", span="41-41"];
n1 [cluster="CommandLine.Tests.Unit.Attributes.AttributesFixture.CustomOptionAttribute.CustomOptionAttribute(string)", label="Exit CommandLine.Tests.Unit.Attributes.AttributesFixture.CustomOptionAttribute.CustomOptionAttribute(string)", span="41-41"];
n2 [cluster="CommandLine.Tests.Unit.Attributes.AttributesFixture.CustomOptionAttribute.CustomOptionAttribute(char, string)", label="Entry CommandLine.Tests.Unit.Attributes.AttributesFixture.CustomOptionAttribute.CustomOptionAttribute(char, string)", span="46-46"];
n3 [cluster="CommandLine.Tests.Unit.Attributes.AttributesFixture.CustomOptionAttribute.CustomOptionAttribute(char, string)", label="Exit CommandLine.Tests.Unit.Attributes.AttributesFixture.CustomOptionAttribute.CustomOptionAttribute(char, string)", span="46-46"];
n4 [cluster="CommandLine.Tests.Unit.Attributes.AttributesFixture.Short_name_with_line_terminator_throws_exception()", label="Entry CommandLine.Tests.Unit.Attributes.AttributesFixture.Short_name_with_line_terminator_throws_exception()", span="82-82"];
n5 [cluster="CommandLine.Tests.Unit.Attributes.AttributesFixture.Short_name_with_line_terminator_throws_exception()", label="Assert.Throws<ArgumentException>(() =>\r\n                new OptionAttribute('\n'))", span="84-85"];
n6 [cluster="CommandLine.Tests.Unit.Attributes.AttributesFixture.Short_name_with_line_terminator_throws_exception()", label="Exit CommandLine.Tests.Unit.Attributes.AttributesFixture.Short_name_with_line_terminator_throws_exception()", span="82-82"];
n7 [cluster="Unk.>", label="Entry Unk.>", span=""];
n8 [cluster="lambda expression", label="Entry lambda expression", span="84-85"];
n9 [cluster="lambda expression", label="new OptionAttribute('\n')", span="85-85"];
n10 [cluster="lambda expression", label="Exit lambda expression", span="84-85"];
n11 [cluster="CommandLine.OptionAttribute.OptionAttribute(char)", label="Entry CommandLine.OptionAttribute.OptionAttribute(char)", span="49-49"];
n12 [cluster="CommandLine.Tests.Unit.Attributes.AttributesFixture.Short_name_with_line_terminator_throws_exception_2()", label="Entry CommandLine.Tests.Unit.Attributes.AttributesFixture.Short_name_with_line_terminator_throws_exception_2()", span="89-89"];
n13 [cluster="CommandLine.Tests.Unit.Attributes.AttributesFixture.Short_name_with_line_terminator_throws_exception_2()", label="Assert.Throws<ArgumentException>(() =>\r\n                new OptionAttribute('\r'))", span="91-92"];
n14 [cluster="CommandLine.Tests.Unit.Attributes.AttributesFixture.Short_name_with_line_terminator_throws_exception_2()", label="Exit CommandLine.Tests.Unit.Attributes.AttributesFixture.Short_name_with_line_terminator_throws_exception_2()", span="89-89"];
n15 [cluster="lambda expression", label="Entry lambda expression", span="91-92"];
n16 [cluster="lambda expression", label="new OptionAttribute('\r')", span="92-92"];
n17 [cluster="lambda expression", label="Exit lambda expression", span="91-92"];
n18 [cluster="CommandLine.Tests.Unit.Attributes.AttributesFixture.Short_name_with_white_space_throws_exception()", label="Entry CommandLine.Tests.Unit.Attributes.AttributesFixture.Short_name_with_white_space_throws_exception()", span="96-96"];
n19 [cluster="CommandLine.Tests.Unit.Attributes.AttributesFixture.Short_name_with_white_space_throws_exception()", label="Assert.Throws<ArgumentException>(() =>\r\n                new OptionAttribute(' '))", span="98-99"];
n20 [cluster="CommandLine.Tests.Unit.Attributes.AttributesFixture.Short_name_with_white_space_throws_exception()", label="Exit CommandLine.Tests.Unit.Attributes.AttributesFixture.Short_name_with_white_space_throws_exception()", span="96-96"];
n21 [cluster="lambda expression", label="Entry lambda expression", span="98-99"];
n22 [cluster="lambda expression", label="new OptionAttribute(' ')", span="99-99"];
n23 [cluster="lambda expression", label="Exit lambda expression", span="98-99"];
n24 [cluster="CommandLine.Tests.Unit.Attributes.AttributesFixture.Short_name_with_white_space_throws_exception_2()", label="Entry CommandLine.Tests.Unit.Attributes.AttributesFixture.Short_name_with_white_space_throws_exception_2()", span="103-103"];
n25 [cluster="CommandLine.Tests.Unit.Attributes.AttributesFixture.Short_name_with_white_space_throws_exception_2()", label="Assert.Throws<ArgumentException>(() =>\r\n                new OptionAttribute('\t'))", span="105-106"];
n26 [cluster="CommandLine.Tests.Unit.Attributes.AttributesFixture.Short_name_with_white_space_throws_exception_2()", label="Exit CommandLine.Tests.Unit.Attributes.AttributesFixture.Short_name_with_white_space_throws_exception_2()", span="103-103"];
n27 [cluster="lambda expression", label="Entry lambda expression", span="105-106"];
n28 [cluster="lambda expression", label="new OptionAttribute('\t')", span="106-106"];
n29 [cluster="lambda expression", label="Exit lambda expression", span="105-106"];
n30 [cluster="CommandLine.Tests.Unit.Attributes.AttributesFixture.All_options_allow_one_character_in_short_name()", label="Entry CommandLine.Tests.Unit.Attributes.AttributesFixture.All_options_allow_one_character_in_short_name()", span="111-111"];
n31 [cluster="CommandLine.Tests.Unit.Attributes.AttributesFixture.All_options_allow_one_character_in_short_name()", label="new OptionAttribute('o', null)", span="113-113"];
n32 [cluster="CommandLine.Tests.Unit.Attributes.AttributesFixture.All_options_allow_one_character_in_short_name()", label="new OptionListAttribute('l', null)", span="114-114"];
n36 [cluster="CommandLine.OptionAttribute.OptionAttribute(char, string)", label="Entry CommandLine.OptionAttribute.OptionAttribute(char, string)", span="68-68"];
n33 [cluster="CommandLine.Tests.Unit.Attributes.AttributesFixture.All_options_allow_one_character_in_short_name()", label="new HelpOptionAttribute('?', null)", span="115-115"];
n37 [cluster="CommandLine.OptionListAttribute.OptionListAttribute(char, string)", label="Entry CommandLine.OptionListAttribute.OptionListAttribute(char, string)", span="61-61"];
n34 [cluster="CommandLine.Tests.Unit.Attributes.AttributesFixture.All_options_allow_one_character_in_short_name()", label="new CustomOptionAttribute('c', null)", span="116-116"];
n38 [cluster="CommandLine.HelpOptionAttribute.HelpOptionAttribute(char, string)", label="Entry CommandLine.HelpOptionAttribute.HelpOptionAttribute(char, string)", span="89-89"];
n35 [cluster="CommandLine.Tests.Unit.Attributes.AttributesFixture.All_options_allow_one_character_in_short_name()", label="Exit CommandLine.Tests.Unit.Attributes.AttributesFixture.All_options_allow_one_character_in_short_name()", span="111-111"];
n39 [cluster="CommandLine.Tests.Unit.Attributes.AttributesFixture.All_options_allow_null_value_in_short_name()", label="Entry CommandLine.Tests.Unit.Attributes.AttributesFixture.All_options_allow_null_value_in_short_name()", span="120-120"];
n40 [cluster="CommandLine.Tests.Unit.Attributes.AttributesFixture.All_options_allow_null_value_in_short_name()", label="new OptionAttribute(''option-attr'')", span="122-122"];
n41 [cluster="CommandLine.Tests.Unit.Attributes.AttributesFixture.All_options_allow_null_value_in_short_name()", label="new OptionListAttribute(''option-list-attr'')", span="123-123"];
n45 [cluster="CommandLine.OptionAttribute.OptionAttribute(string)", label="Entry CommandLine.OptionAttribute.OptionAttribute(string)", span="58-58"];
n42 [cluster="CommandLine.Tests.Unit.Attributes.AttributesFixture.All_options_allow_null_value_in_short_name()", label="new HelpOptionAttribute(''help-attr'')", span="124-124"];
n46 [cluster="CommandLine.OptionListAttribute.OptionListAttribute(string)", label="Entry CommandLine.OptionListAttribute.OptionListAttribute(string)", span="51-51"];
n43 [cluster="CommandLine.Tests.Unit.Attributes.AttributesFixture.All_options_allow_null_value_in_short_name()", label="new CustomOptionAttribute(''custom-attr'')", span="125-125"];
n47 [cluster="CommandLine.HelpOptionAttribute.HelpOptionAttribute(string)", label="Entry CommandLine.HelpOptionAttribute.HelpOptionAttribute(string)", span="74-74"];
n44 [cluster="CommandLine.Tests.Unit.Attributes.AttributesFixture.All_options_allow_null_value_in_short_name()", label="Exit CommandLine.Tests.Unit.Attributes.AttributesFixture.All_options_allow_null_value_in_short_name()", span="120-120"];
d57 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", color=green, community=0, label="0: var expectedOptions = new AddOptions\r\n                {\r\n                    Patch = true,\r\n                    FileName = ''--strange-fn''\r\n                }", span="106-110"];
d56 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", span="103-103"];
d58 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", label="var sut = new Parser(with => with.EnableDashDash = true)", span="111-111"];
d63 [cluster="CommandLine.Tests.Fakes.AddOptions.AddOptions()", label="Entry CommandLine.Tests.Fakes.AddOptions.AddOptions()", span="7-7"];
d61 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", label="result.Value.ShouldBeEquivalentTo(expectedOptions, o => o.RespectingRuntimeTypes())", span="120-120"];
d62 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", span="103-103"];
d59 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", label="var result = sut.ParseArguments(\r\n                new[] { ''add'', ''-p'', ''--'', ''--strange-fn'' },\r\n                typeof(AddOptions), typeof(CommitOptions), typeof(CloneOptions))", span="114-116"];
d8 [cluster="CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)", label="Entry CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)", span="36-36"];
d66 [cluster="lambda expression", label="with.EnableDashDash = true", span="111-111"];
d60 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", label="Assert.IsType<AddOptions>(result.Value)", span="119-119"];
d45 [cluster="Unk.ShouldBeEquivalentTo", label="Entry Unk.ShouldBeEquivalentTo", span=""];
d68 [cluster="lambda expression", label="Entry lambda expression", span="120-120"];
d22 [cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", label="Entry CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", span="141-141"];
d2 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated()", label="var sut = new Parser(with => with.HelpWriter = writer)", span="19-19"];
d17 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", label="var sut = new Parser(with => with.HelpWriter = writer)", span="35-35"];
d28 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", label="var sut = new Parser(with => with.HelpWriter = writer)", span="51-51"];
d48 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", label="var sut = new Parser(with => with.EnableDashDash = true)", span="91-91"];
d120 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", label="var sut = new Parser(config => config.HelpWriter = help)", span="204-204"];
d145 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", label="var sut = new Parser(config => config.HelpWriter = help)", span="236-236"];
d164 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", label="var sut = new Parser(config => config.HelpWriter = help)", span="255-255"];
d183 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", label="var sut = new Parser(config => config.HelpWriter = help)", span="280-280"];
d200 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", label="var sut = new Parser(config => config.HelpWriter = help)", span="305-305"];
d65 [cluster="lambda expression", label="Entry lambda expression", span="111-111"];
d67 [cluster="lambda expression", label="Exit lambda expression", span="111-111"];
d64 [cluster="Unk.>", label="Entry Unk.>", span=""];
d41 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options()", label="result.Value.ShouldBeEquivalentTo(expectedOptions)", span="76-76"];
d50 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", label="result.Value.ShouldBeEquivalentTo(expectedOptions)", span="98-98"];
d77 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", label="result.Value.ShouldBeEquivalentTo(expectedOptions, o => o.RespectingRuntimeTypes())", span="142-142"];
d88 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", label="result.Value.ShouldBeEquivalentTo(expectedOptions, o => o.RespectingRuntimeTypes())", span="163-163"];
d97 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", label="result.Value.ShouldBeEquivalentTo(expectedOptions)", span="179-179"];
d170 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", label="lines[1].ShouldBeEquivalentTo(''Copyright (c) 2005 - 2015 Giacomo Stelluti Scala'')", span="265-265"];
d171 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", label="lines[2].ShouldBeEquivalentTo(''ERROR(S):'')", span="266-266"];
d172 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", label="lines[3].ShouldBeEquivalentTo(''No verb selected.'')", span="267-267"];
d173 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", label="lines[4].ShouldBeEquivalentTo(''add       Add file contents to the index.'')", span="268-268"];
d174 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", label="lines[5].ShouldBeEquivalentTo(''commit    Record changes to the repository.'')", span="269-269"];
d175 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", label="lines[6].ShouldBeEquivalentTo(''clone     Clone a repository into a new directory.'')", span="270-270"];
d176 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", label="lines[7].ShouldBeEquivalentTo(''help      Display more information on a specific command.'')", span="271-271"];
d189 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", label="lines[1].ShouldBeEquivalentTo(''Copyright (c) 2005 - 2015 Giacomo Stelluti Scala'')", span="290-290"];
d190 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", label="lines[2].ShouldBeEquivalentTo(''add       Add file contents to the index.'')", span="291-291"];
d191 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", label="lines[3].ShouldBeEquivalentTo(''commit    Record changes to the repository.'')", span="292-292"];
d192 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", label="lines[4].ShouldBeEquivalentTo(''clone     Clone a repository into a new directory.'')", span="293-293"];
d193 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", label="lines[5].ShouldBeEquivalentTo(''help      Display more information on a specific command.'')", span="294-294"];
d70 [cluster="lambda expression", label="Exit lambda expression", span="120-120"];
d69 [cluster="lambda expression", label="o.RespectingRuntimeTypes()", span="120-120"];
d18 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", label="sut.ParseArguments(new string[] { }, typeof(AddOptions), typeof(CommitOptions), typeof(CloneOptions))", span="38-38"];
d75 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", label="var result = sut.ParseArguments(\r\n                new[] { ''clone'', ''-q'', ''http://gsscoder.github.com/'', ''http://yes-to-nooo.github.com/'' },\r\n                typeof(AddOptions), typeof(CommitOptions), typeof(CloneOptions))", span="136-138"];
d1 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated()", label="var writer = new StringWriter()", span="18-18"];
d3 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated()", label="sut.ParseArguments<FakeOptionWithRequired>(new string[] { })", span="22-22"];
d13 [cluster="lambda expression", label="with.HelpWriter = writer", span="19-19"];
d16 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", label="var writer = new StringWriter()", span="34-34"];
d24 [cluster="lambda expression", label="with.HelpWriter = writer", span="35-35"];
d27 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", label="var writer = new StringWriter()", span="50-50"];
d29 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", label="sut.ParseArguments<AddOptions, CommitOptions, CloneOptions>(new string[] { })", span="54-54"];
d35 [cluster="lambda expression", label="with.HelpWriter = writer", span="51-51"];
d47 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", label="var expectedOptions = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''astring'',\r\n                    LongValue = 20L,\r\n                    StringSequence = new[] { ''--aaa'', ''-b'', ''--ccc'' },\r\n                    IntValue = 30\r\n                }", span="84-90"];
d49 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", label="var result = sut.ParseArguments<FakeOptionsWithValues>(\r\n                new[] { ''--stringvalue'', ''astring'', ''--'', ''20'', ''--aaa'', ''-b'', ''--ccc'', ''30'' })", span="94-95"];
d54 [cluster="lambda expression", label="with.EnableDashDash = true", span="91-91"];
d119 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", label="var help = new StringWriter()", span="203-203"];
d121 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", label="sut.ParseArguments<FakeImmutableOptions>(new[] { ''--help'' })", span="207-207"];
d127 [cluster="lambda expression", label="config.HelpWriter = help", span="204-204"];
d144 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", label="var help = new StringWriter()", span="235-235"];
d146 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", label="sut.ParseArguments<FakeOptions>(new[] { ''--version'' })", span="239-239"];
d157 [cluster="lambda expression", label="config.HelpWriter = help", span="236-236"];
d163 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", label="var help = new StringWriter()", span="254-254"];
d165 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", label="sut.ParseArguments<AddOptions, CommitOptions, CloneOptions>(new string [] { })", span="258-258"];
d179 [cluster="lambda expression", label="config.HelpWriter = help", span="255-255"];
d182 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", label="var help = new StringWriter()", span="279-279"];
d184 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", label="sut.ParseArguments<AddOptions, CommitOptions, CloneOptions>(new [] { ''--help'' })", span="283-283"];
d196 [cluster="lambda expression", label="config.HelpWriter = help", span="280-280"];
d199 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", label="var help = new StringWriter()", span="304-304"];
d201 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", label="sut.ParseArguments<AddOptions, CommitOptions, CloneOptions>(new[] { command })", span="308-308"];
d209 [cluster="lambda expression", label="config.HelpWriter = help", span="305-305"];
d76 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", label="Assert.IsType<CloneOptions>(result.Value)", span="141-141"];
d87 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", label="Assert.IsType<CloneOptions>(result.Value)", span="162-162"];
d38 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options()", label="var expectedOptions = new FakeOptions\r\n                {\r\n                    StringValue = ''strvalue'', IntSequence = new[] { 1, 2, 3 }\r\n                }", span="66-69"];
d40 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options()", label="var result = sut.ParseArguments<FakeOptions>(new[] { ''--stringvalue=strvalue'', ''-i1'', ''2'', ''3'' })", span="73-73"];
d42 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options()", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_options()", span="63-63"];
d51 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", span="81-81"];
d73 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", label="var expectedOptions = new CloneOptions\r\n                {\r\n                    Quiet = true,\r\n                    Urls = new[] { ''http://gsscoder.github.com/'', ''http://yes-to-nooo.github.com/'' }\r\n                }", span="128-132"];
d78 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_verbs()", span="125-125"];
d80 [cluster="lambda expression", label="Entry lambda expression", span="142-142"];
d84 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", label="var expectedOptions = new CloneOptions\r\n            {\r\n                Quiet = true,\r\n                Urls = new[] { ''http://gsscoder.github.com/'', ''http://yes-to-nooo.github.com/'' }\r\n            }", span="150-154"];
d86 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", label="var result = sut.ParseArguments<AddOptions, CommitOptions, CloneOptions>(\r\n                new[] { ''clone'', ''-q'', ''http://gsscoder.github.com/'', ''http://yes-to-nooo.github.com/'' })", span="158-159"];
d89 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", span="147-147"];
d90 [cluster="lambda expression", label="Entry lambda expression", span="163-163"];
d94 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", label="var expectedOptions = new FakeImmutableOptions(\r\n                ''strvalue'', new[] { 1, 2, 3 }, default(bool), default(long))", span="171-172"];
d96 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", label="var result = sut.ParseArguments<FakeImmutableOptions>(new[] { ''--stringvalue=strvalue'', ''-i1'', ''2'', ''3'' })", span="176-176"];
d98 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", span="168-168"];
d168 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="263-263"];
d169 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="264-264"];
d177 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", label="Exit CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", span="251-251"];
d187 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="288-288"];
d188 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="289-289"];
d194 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", label="Exit CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", span="276-276"];
d71 [cluster="Unk.RespectingRuntimeTypes", label="Entry Unk.RespectingRuntimeTypes", span=""];
d19 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", label="var text = writer.ToString()", span="41-41"];
d74 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", label="var sut = new Parser()", span="133-133"];
d0 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated()", label="Entry CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated()", span="15-15"];
d7 [cluster="System.IO.StringWriter.StringWriter()", label="Entry System.IO.StringWriter.StringWriter()", span="0-0"];
d4 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated()", label="var text = writer.ToString()", span="25-25"];
d9 [cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", label="Entry CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", span="84-84"];
d214 [label=writer, span=""];
d12 [cluster="lambda expression", label="Entry lambda expression", span="19-19"];
d14 [cluster="lambda expression", label="Exit lambda expression", span="19-19"];
d15 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", label="Entry CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", span="31-31"];
d215 [label=writer, span=""];
d23 [cluster="lambda expression", label="Entry lambda expression", span="35-35"];
d25 [cluster="lambda expression", label="Exit lambda expression", span="35-35"];
d26 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", label="Entry CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", span="47-47"];
d30 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", label="var text = writer.ToString()", span="57-57"];
d33 [cluster="CommandLine.Parser.ParseArguments<T1, T2, T3>(System.Collections.Generic.IEnumerable<string>)", label="Entry CommandLine.Parser.ParseArguments<T1, T2, T3>(System.Collections.Generic.IEnumerable<string>)", span="46-46"];
d216 [label=writer, span=""];
d34 [cluster="lambda expression", label="Entry lambda expression", span="51-51"];
d36 [cluster="lambda expression", label="Exit lambda expression", span="51-51"];
d46 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", span="81-81"];
d52 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6"];
d53 [cluster="lambda expression", label="Entry lambda expression", span="91-91"];
d55 [cluster="lambda expression", label="Exit lambda expression", span="91-91"];
d118 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", span="200-200"];
d122 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", label="var result = help.ToString()", span="208-208"];
d218 [label=help, span=""];
d126 [cluster="lambda expression", label="Entry lambda expression", span="204-204"];
d128 [cluster="lambda expression", label="Exit lambda expression", span="204-204"];
d143 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", span="232-232"];
d147 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", label="var result = help.ToString()", span="240-240"];
d220 [label=help, span=""];
d156 [cluster="lambda expression", label="Entry lambda expression", span="236-236"];
d158 [cluster="lambda expression", label="Exit lambda expression", span="236-236"];
d162 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", label="Entry CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", span="251-251"];
d166 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", label="var result = help.ToString()", span="259-259"];
d221 [label=help, span=""];
d178 [cluster="lambda expression", label="Entry lambda expression", span="255-255"];
d180 [cluster="lambda expression", label="Exit lambda expression", span="255-255"];
d181 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", label="Entry CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", span="276-276"];
d185 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", label="var result = help.ToString()", span="284-284"];
d222 [label=help, span=""];
d195 [cluster="lambda expression", label="Entry lambda expression", span="280-280"];
d197 [cluster="lambda expression", label="Exit lambda expression", span="280-280"];
d198 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", span="301-301"];
d202 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", label="var result = help.ToString()", span="309-309"];
d223 [label=help, span=""];
d208 [cluster="lambda expression", label="Entry lambda expression", span="305-305"];
d210 [cluster="lambda expression", label="Exit lambda expression", span="305-305"];
d37 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options()", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_options()", span="63-63"];
d39 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options()", label="var sut = new Parser()", span="70-70"];
d43 [cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6"];
d72 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_verbs()", span="125-125"];
d79 [cluster="CommandLine.Tests.Fakes.CloneOptions.CloneOptions()", label="Entry CommandLine.Tests.Fakes.CloneOptions.CloneOptions()", span="33-33"];
d82 [cluster="lambda expression", label="Exit lambda expression", span="142-142"];
d81 [cluster="lambda expression", label="o.RespectingRuntimeTypes()", span="142-142"];
d83 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", span="147-147"];
d85 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", label="var sut = new Parser()", span="155-155"];
d92 [cluster="lambda expression", label="Exit lambda expression", span="163-163"];
d91 [cluster="lambda expression", label="o.RespectingRuntimeTypes()", span="163-163"];
d93 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", span="168-168"];
d95 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", label="var sut = new Parser()", span="173-173"];
d99 [cluster="CommandLine.Tests.Fakes.FakeImmutableOptions.FakeImmutableOptions(string, System.Collections.Generic.IEnumerable<int>, bool, long)", label="Entry CommandLine.Tests.Fakes.FakeImmutableOptions.FakeImmutableOptions(string, System.Collections.Generic.IEnumerable<int>, bool, long)", span="13-13"];
d167 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", label="result.Length.Should().BeGreaterThan(0)", span="262-262"];
d153 [cluster="string.ToNotEmptyLines()", label="Entry string.ToNotEmptyLines()", span="10-10"];
d154 [cluster="System.Collections.Generic.IEnumerable<string>.TrimStringArray()", label="Entry System.Collections.Generic.IEnumerable<string>.TrimStringArray()", span="15-15"];
d108 [cluster="Unk.Should", label="Entry Unk.Should", span=""];
d155 [cluster="Unk.StartWithEquivalent", label="Entry Unk.StartWithEquivalent", span=""];
d186 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", label="result.Length.Should().BeGreaterThan(0)", span="287-287"];
d20 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", label="Assert.True(text.Length > 0)", span="42-42"];
d10 [cluster="System.IO.StringWriter.ToString()", label="Entry System.IO.StringWriter.ToString()", span="0-0"];
d44 [cluster="CommandLine.Parser.Parser()", label="Entry CommandLine.Parser.Parser()", span="25-25"];
d6 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated()", label="Exit CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated()", span="15-15"];
d5 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated()", label="Assert.True(text.Length > 0)", span="26-26"];
d103 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", label="var result = sut.ParseArguments<FakeImmutableOptions>(new[] { ''--help'' })", span="191-191"];
d132 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", label="var result = sut.ParseArguments<FakeOptions>(new[] { ''--version'' })", span="223-223"];
d21 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", label="Exit CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", span="31-31"];
d32 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", label="Exit CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", span="47-47"];
d31 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", label="Assert.True(text.Length > 0)", span="58-58"];
d124 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", span="200-200"];
d123 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", label="result.Length.Should().BeGreaterThan(0)", span="211-211"];
d152 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", span="232-232"];
d148 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", label="result.Length.Should().BeGreaterThan(0)", span="243-243"];
d149 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="244-244"];
d207 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", span="301-301"];
d203 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", label="result.Length.Should().BeGreaterThan(0)", span="312-312"];
d204 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="313-313"];
d125 [cluster="Unk.BeGreaterThan", label="Entry Unk.BeGreaterThan", span=""];
d105 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", label="((NotParsed<FakeImmutableOptions>)result).Errors.Should().ContainSingle(e => e.Equals(expectedError))", span="195-195"];
d104 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", label="((NotParsed<FakeImmutableOptions>)result).Errors.Should().HaveCount(x => x == 1)", span="194-194"];
d134 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", label="((NotParsed<FakeOptions>)result).Errors.Should().ContainSingle(e => e.Equals(expectedError))", span="227-227"];
d133 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", label="((NotParsed<FakeOptions>)result).Errors.Should().HaveCount(x => x == 1)", span="226-226"];
d150 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", label="lines.Should().HaveCount(x => x == 1)", span="245-245"];
d151 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="246-246"];
d205 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", label="lines.Should().HaveCount(x => x == 1)", span="314-314"];
d206 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="315-315"];
d11 [cluster="Unk.True", label="Entry Unk.True", span=""];
d102 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", label="var sut = new Parser()", span="188-188"];
d131 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", label="var sut = new Parser()", span="220-220"];
d101 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", label="var expectedError = new HelpRequestedError()", span="187-187"];
d106 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", span="184-184"];
d110 [cluster="Unk.ContainSingle", label="Entry Unk.ContainSingle", span=""];
d114 [cluster="lambda expression", label="Entry lambda expression", span="195-195"];
d109 [cluster="Unk.HaveCount", label="Entry Unk.HaveCount", span=""];
d111 [cluster="lambda expression", label="Entry lambda expression", span="194-194"];
d130 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", label="var expectedError = new VersionRequestedError()", span="219-219"];
d135 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", span="216-216"];
d140 [cluster="lambda expression", label="Entry lambda expression", span="227-227"];
d137 [cluster="lambda expression", label="Entry lambda expression", span="226-226"];
d159 [cluster="lambda expression", label="Entry lambda expression", span="245-245"];
d211 [cluster="lambda expression", label="Entry lambda expression", span="314-314"];
d100 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", span="184-184"];
d107 [cluster="CommandLine.HelpRequestedError.HelpRequestedError()", label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="357-357"];
d115 [cluster="lambda expression", label="e.Equals(expectedError)", span="195-195"];
d116 [cluster="lambda expression", label="Exit lambda expression", span="195-195"];
d113 [cluster="lambda expression", label="Exit lambda expression", span="194-194"];
d112 [cluster="lambda expression", label="x == 1", span="194-194"];
d129 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", span="216-216"];
d136 [cluster="CommandLine.VersionRequestedError.VersionRequestedError()", label="Entry CommandLine.VersionRequestedError.VersionRequestedError()", span="421-421"];
d141 [cluster="lambda expression", label="e.Equals(expectedError)", span="227-227"];
d142 [cluster="lambda expression", label="Exit lambda expression", span="227-227"];
d139 [cluster="lambda expression", label="Exit lambda expression", span="226-226"];
d138 [cluster="lambda expression", label="x == 1", span="226-226"];
d161 [cluster="lambda expression", label="Exit lambda expression", span="245-245"];
d160 [cluster="lambda expression", label="x == 1", span="245-245"];
d213 [cluster="lambda expression", label="Exit lambda expression", span="314-314"];
d212 [cluster="lambda expression", label="x == 1", span="314-314"];
d217 [label=expectedError, span=""];
d117 [cluster="Unk.Equals", label="Entry Unk.Equals", span=""];
d219 [label=expectedError, span=""];
m0_17 [cluster="Unk.Be", file="ErrorExtensions.cs", label="Entry Unk.Be", span=""];
m0_12 [cluster="CommandLine.Tests.Fakes.SimpleOptionsWithValueList.SimpleOptionsWithValueList()", file="ErrorExtensions.cs", label="Entry CommandLine.Tests.Fakes.SimpleOptionsWithValueList.SimpleOptionsWithValueList()", span="35-35"];
m0_16 [cluster="Unk.BeTrue", file="ErrorExtensions.cs", label="Entry Unk.BeTrue", span=""];
m0_34 [cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_outside_bounds()", file="ErrorExtensions.cs", label="Entry CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_outside_bounds()", span="76-76"];
m0_35 [cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_outside_bounds()", file="ErrorExtensions.cs", label="var options = new OptionsWithValueListMaximumThree()", span="78-78"];
m0_36 [cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_outside_bounds()", file="ErrorExtensions.cs", label="var parser = new Parser()", span="79-79"];
m0_37 [cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_outside_bounds()", file="ErrorExtensions.cs", label="var result = parser.ParseArguments(\r\n                    new string[] { ''file.a'', ''file.b'', ''file.c'', ''file.d'' }, options)", span="80-81"];
m0_38 [cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_outside_bounds()", file="ErrorExtensions.cs", label="result.Should().BeFalse()", span="83-83"];
m0_39 [cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_outside_bounds()", file="ErrorExtensions.cs", label="Exit CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_outside_bounds()", span="76-76"];
m0_18 [cluster="System.Console.WriteLine(object)", file="ErrorExtensions.cs", label="Entry System.Console.WriteLine(object)", span="0-0"];
m0_14 [cluster="CommandLine.Parser.ParseArguments(string[], object)", file="ErrorExtensions.cs", label="Entry CommandLine.Parser.ParseArguments(string[], object)", span="141-141"];
m0_33 [cluster="Unk.BeFalse", file="ErrorExtensions.cs", label="Entry Unk.BeFalse", span=""];
m0_32 [cluster="Unk.BeNull", file="ErrorExtensions.cs", label="Entry Unk.BeNull", span=""];
m0_19 [cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_inside_bounds()", file="ErrorExtensions.cs", label="Entry CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_inside_bounds()", span="59-59"];
m0_20 [cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_inside_bounds()", file="ErrorExtensions.cs", label="var options = new OptionsWithValueListMaximumThree()", span="61-61"];
m0_21 [cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_inside_bounds()", file="ErrorExtensions.cs", label="var parser = new Parser()", span="62-62"];
m0_22 [cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_inside_bounds()", file="ErrorExtensions.cs", label="var result = parser.ParseArguments(new string[] { ''file.a'', ''file.b'', ''file.c'' }, options)", span="63-63"];
m0_24 [cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_inside_bounds()", file="ErrorExtensions.cs", label="options.InputFilenames[0].Should().Be(''file.a'')", span="67-67"];
m0_25 [cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_inside_bounds()", file="ErrorExtensions.cs", label="options.InputFilenames[1].Should().Be(''file.b'')", span="68-68"];
m0_26 [cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_inside_bounds()", file="ErrorExtensions.cs", label="options.InputFilenames[2].Should().Be(''file.c'')", span="69-69"];
m0_27 [cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_inside_bounds()", file="ErrorExtensions.cs", label="options.OutputFile.Should().BeNull()", span="70-70"];
m0_28 [cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_inside_bounds()", file="ErrorExtensions.cs", label="options.Overwrite.Should().BeFalse()", span="71-71"];
m0_29 [cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_inside_bounds()", file="ErrorExtensions.cs", label="Console.WriteLine(options)", span="72-72"];
m0_23 [cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_inside_bounds()", file="ErrorExtensions.cs", label="result.Should().BeTrue()", span="65-65"];
m0_30 [cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_inside_bounds()", file="ErrorExtensions.cs", label="Exit CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_inside_bounds()", span="59-59"];
m0_49 [cluster="Unk.HaveCount", file="ErrorExtensions.cs", label="Entry Unk.HaveCount", span=""];
m0_40 [cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_set_to_zero_succeeds()", file="ErrorExtensions.cs", label="Entry CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_set_to_zero_succeeds()", span="87-87"];
m0_41 [cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_set_to_zero_succeeds()", file="ErrorExtensions.cs", label="var options = new OptionsWithValueListMaximumZero()", span="89-89"];
m0_42 [cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_set_to_zero_succeeds()", file="ErrorExtensions.cs", label="var parser = new Parser()", span="90-90"];
m0_43 [cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_set_to_zero_succeeds()", file="ErrorExtensions.cs", label="var result = parser.ParseArguments(new string[] { }, options)", span="91-91"];
m0_45 [cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_set_to_zero_succeeds()", file="ErrorExtensions.cs", label="options.Junk.Should().HaveCount(n => n == 0)", span="95-95"];
m0_46 [cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_set_to_zero_succeeds()", file="ErrorExtensions.cs", label="Console.WriteLine(options)", span="96-96"];
m0_44 [cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_set_to_zero_succeeds()", file="ErrorExtensions.cs", label="result.Should().BeTrue()", span="93-93"];
m0_47 [cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_set_to_zero_succeeds()", file="ErrorExtensions.cs", label="Exit CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_set_to_zero_succeeds()", span="87-87"];
m0_50 [cluster="lambda expression", file="ErrorExtensions.cs", label="Entry lambda expression", span="95-95"];
m0_51 [cluster="lambda expression", file="ErrorExtensions.cs", label="n == 0", span="95-95"];
m0_52 [cluster="lambda expression", file="ErrorExtensions.cs", label="Exit lambda expression", span="95-95"];
m0_48 [cluster="CommandLine.Tests.Fakes.OptionsWithValueListMaximumZero.OptionsWithValueListMaximumZero()", file="ErrorExtensions.cs", label="Entry CommandLine.Tests.Fakes.OptionsWithValueListMaximumZero.OptionsWithValueListMaximumZero()", span="36-36"];
m0_31 [cluster="CommandLine.Tests.Fakes.OptionsWithValueListMaximumThree.OptionsWithValueListMaximumThree()", file="ErrorExtensions.cs", label="Entry CommandLine.Tests.Fakes.OptionsWithValueListMaximumThree.OptionsWithValueListMaximumThree()", span="35-35"];
m0_53 [cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_set_to_zero_failes()", file="ErrorExtensions.cs", label="Entry CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_set_to_zero_failes()", span="100-100"];
m0_54 [cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_set_to_zero_failes()", file="ErrorExtensions.cs", label="var options = new OptionsWithValueListMaximumZero()", span="102-102"];
m0_55 [cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_set_to_zero_failes()", file="ErrorExtensions.cs", label="var parser = new Parser()", span="103-103"];
m0_56 [cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_set_to_zero_failes()", file="ErrorExtensions.cs", label="var result = parser.ParseArguments(new string[] { ''some'', ''value'' }, options)", span="104-104"];
m0_57 [cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_set_to_zero_failes()", file="ErrorExtensions.cs", label="result.Should().BeFalse()", span="106-106"];
m0_58 [cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_set_to_zero_failes()", file="ErrorExtensions.cs", label="Exit CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_set_to_zero_failes()", span="100-100"];
m0_0 [cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_attribute_isolates_non_option_values()", file="ErrorExtensions.cs", label="Entry CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_attribute_isolates_non_option_values()", span="41-41"];
m0_1 [cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_attribute_isolates_non_option_values()", file="ErrorExtensions.cs", label="var options = new SimpleOptionsWithValueList()", span="43-43"];
m0_2 [cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_attribute_isolates_non_option_values()", file="ErrorExtensions.cs", label="var parser = new Parser()", span="44-44"];
m0_3 [cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_attribute_isolates_non_option_values()", file="ErrorExtensions.cs", label="var result = parser.ParseArguments(\r\n                new string[] { ''--switch'', ''file1.ext'', ''file2.ext'', ''file3.ext'', ''-s'', ''out.ext'' }, options)", span="45-46"];
m0_5 [cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_attribute_isolates_non_option_values()", file="ErrorExtensions.cs", label="options.Items[0].Should().Be(''file1.ext'')", span="50-50"];
m0_6 [cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_attribute_isolates_non_option_values()", file="ErrorExtensions.cs", label="options.Items[1].Should().Be(''file2.ext'')", span="51-51"];
m0_7 [cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_attribute_isolates_non_option_values()", file="ErrorExtensions.cs", label="options.Items[2].Should().Be(''file3.ext'')", span="52-52"];
m0_8 [cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_attribute_isolates_non_option_values()", file="ErrorExtensions.cs", label="options.StringValue.Should().Be(''out.ext'')", span="53-53"];
m0_9 [cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_attribute_isolates_non_option_values()", file="ErrorExtensions.cs", label="options.BooleanValue.Should().BeTrue()", span="54-54"];
m0_10 [cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_attribute_isolates_non_option_values()", file="ErrorExtensions.cs", label="Console.WriteLine(options)", span="55-55"];
m0_4 [cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_attribute_isolates_non_option_values()", file="ErrorExtensions.cs", label="result.Should().BeTrue()", span="48-48"];
m0_11 [cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_attribute_isolates_non_option_values()", file="ErrorExtensions.cs", label="Exit CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_attribute_isolates_non_option_values()", span="41-41"];
m0_15 [cluster="Unk.Should", file="ErrorExtensions.cs", label="Entry Unk.Should", span=""];
m1_0 [cluster="CommandLine.ValueAttribute.ValueAttribute(int)", file="HelpText.cs", label="Entry CommandLine.ValueAttribute.ValueAttribute(int)", span="17-17"];
m1_1 [cluster="CommandLine.ValueAttribute.ValueAttribute(int)", file="HelpText.cs", label="this.index = index", span="19-19"];
m1_2 [cluster="CommandLine.ValueAttribute.ValueAttribute(int)", file="HelpText.cs", label="Exit CommandLine.ValueAttribute.ValueAttribute(int)", span="17-17"];
m1_3 [file="HelpText.cs", label="CommandLine.ValueAttribute", span=""];
m3_6 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="ParserTests.cs", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63"];
m3_9 [cluster="System.Type.ToTargetType()", file="ParserTests.cs", label="Entry System.Type.ToTargetType()", span="47-47"];
m3_7 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="ParserTests.cs", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68"];
m3_8 [cluster="T.ToMaybe<T>()", file="ParserTests.cs", label="Entry T.ToMaybe<T>()", span="79-79"];
m3_0 [cluster="CommandLine.Core.ValueSpecification.ValueSpecification(int, bool, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType)", file="ParserTests.cs", label="Entry CommandLine.Core.ValueSpecification.ValueSpecification(int, bool, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType)", span="11-11"];
m3_1 [cluster="CommandLine.Core.ValueSpecification.ValueSpecification(int, bool, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType)", file="ParserTests.cs", label="this.index = index", span="15-15"];
m3_2 [cluster="CommandLine.Core.ValueSpecification.ValueSpecification(int, bool, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType)", file="ParserTests.cs", label="Exit CommandLine.Core.ValueSpecification.ValueSpecification(int, bool, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType)", span="11-11"];
m3_3 [cluster="CommandLine.Core.ValueSpecification.FromAttribute(CommandLine.ValueAttribute, System.Type)", file="ParserTests.cs", label="Entry CommandLine.Core.ValueSpecification.FromAttribute(CommandLine.ValueAttribute, System.Type)", span="18-18"];
m3_4 [cluster="CommandLine.Core.ValueSpecification.FromAttribute(CommandLine.ValueAttribute, System.Type)", file="ParserTests.cs", label="return new ValueSpecification(\r\n                attribute.Index,\r\n                attribute.Required,\r\n                attribute.Min == -1 ? Maybe.Nothing<int>() : Maybe.Just(attribute.Min),\r\n                attribute.Max == -1 ? Maybe.Nothing<int>() : Maybe.Just(attribute.Max),\r\n                attribute.Default.ToMaybe(),\r\n                conversionType,\r\n                conversionType.ToTargetType());", span="20-27"];
m3_5 [cluster="CommandLine.Core.ValueSpecification.FromAttribute(CommandLine.ValueAttribute, System.Type)", file="ParserTests.cs", label="Exit CommandLine.Core.ValueSpecification.FromAttribute(CommandLine.ValueAttribute, System.Type)", span="18-18"];
m3_10 [file="ParserTests.cs", label="CommandLine.Core.ValueSpecification", span=""];
m5_5 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="SpecificationPropertyExtensions.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m5_0 [cluster="CommandLine.Core.NameExtensions.MatchName(string, string, string, System.StringComparer)", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.Core.NameExtensions.MatchName(string, string, string, System.StringComparer)", span="8-8"];
m5_1 [cluster="CommandLine.Core.NameExtensions.MatchName(string, string, string, System.StringComparer)", file="SpecificationPropertyExtensions.cs", label="value == null", span="10-10"];
m5_3 [cluster="CommandLine.Core.NameExtensions.MatchName(string, string, string, System.StringComparer)", file="SpecificationPropertyExtensions.cs", label="return value.Length == 1\r\n               ? comparer.Equals(value, shortName)\r\n               : comparer.Equals(value, longName);", span="12-14"];
m5_2 [cluster="CommandLine.Core.NameExtensions.MatchName(string, string, string, System.StringComparer)", file="SpecificationPropertyExtensions.cs", label="throw new ArgumentNullException(''value'');", span="10-10"];
m5_4 [cluster="CommandLine.Core.NameExtensions.MatchName(string, string, string, System.StringComparer)", file="SpecificationPropertyExtensions.cs", label="Exit CommandLine.Core.NameExtensions.MatchName(string, string, string, System.StringComparer)", span="8-8"];
m5_6 [cluster="System.StringComparer.Equals(string, string)", file="SpecificationPropertyExtensions.cs", label="Entry System.StringComparer.Equals(string, string)", span="0-0"];
m6_74 [cluster="NameInfo.cstr", file="SpecificationPropertyRules.cs", label="Entry NameInfo.cstr", span=""];
m6_4 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="24-24"];
m6_8 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="SpecificationPropertyRules.cs", label="return specProps =>\r\n            {\r\n                var options =\r\n                    from sp in specProps\r\n                    where sp.Specification.IsOption()\r\n                    where sp.Value.IsJust()\r\n                    let o = (OptionSpecification)sp.Specification\r\n                    where o.SetName.Length > 0\r\n                    select o;\r\n                var groups = from o in options\r\n                             group o by o.SetName into g\r\n                             select g;\r\n                if (groups.Count() > 1)\r\n                {\r\n                    return\r\n                        from o in options\r\n                        select new MutuallyExclusiveSetError(o.FromOptionSpecification(), o.SetName);\r\n                }\r\n                return Enumerable.Empty<Error>();\r\n            };", span="26-45"];
m6_9 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="SpecificationPropertyRules.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="24-24"];
m6_6 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="96-96"];
m6_40 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", color=green, community=0, file="SpecificationPropertyRules.cs", label="0: return specProps =>\r\n                {\r\n                    var options = specProps\r\n                        .Where(sp => sp.Specification.TargetType == TargetType.Sequence)\r\n                        .Where(sp => sp.Value.IsJust())\r\n                        .Where(sp =>\r\n                            (sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJustStrict()).Length < sp.Specification.Min.FromJustStrict())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJustStrict()).Length > sp.Specification.Max.FromJustStrict())\r\n                        );\r\n                    if (options.Any())\r\n                    {\r\n                        return\r\n                            from s in options\r\n                            select new SequenceOutOfRangeError(s.Specification.FromSpecification());\r\n                    }\r\n                    return Enumerable.Empty<Error>();\r\n                };", span="98-114"];
m6_41 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="SpecificationPropertyRules.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="96-96"];
m6_38 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="316-316"];
m6_20 [cluster="MutuallyExclusiveSetError.cstr", file="SpecificationPropertyRules.cs", label="Entry MutuallyExclusiveSetError.cstr", span=""];
m6_49 [cluster="Unk.Any", file="SpecificationPropertyRules.cs", label="Entry Unk.Any", span=""];
m6_70 [cluster="CommandLine.Core.Token.IsName()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.Token.IsName()", span="128-128"];
m6_37 [cluster="CommandLine.Core.Specification.IsValue()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.Specification.IsValue()", span="15-15"];
m6_48 [cluster="Unk.Where", file="SpecificationPropertyRules.cs", label="Entry Unk.Where", span=""];
m6_22 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="SpecificationPropertyRules.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m6_60 [cluster="Unk.FromJustStrict", file="SpecificationPropertyRules.cs", label="Entry Unk.FromJustStrict", span=""];
m6_39 [cluster="Unk.FromSpecification", file="SpecificationPropertyRules.cs", label="Entry Unk.FromSpecification", span=""];
m6_33 [cluster="Unk.IsNothing", file="SpecificationPropertyRules.cs", label="Entry Unk.IsNothing", span=""];
m6_7 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="117-117"];
m6_61 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs", label="return specProps =>\r\n                {\r\n                    var specs = from sp in specProps\r\n                                where sp.Specification.IsOption()\r\n                                where sp.Value.IsJust()\r\n                                select (OptionSpecification)sp.Specification;\r\n                    var options = from t in tokens\r\n                                  where t.IsName()\r\n                                  join o in specs on t.Text equals o.UniqueName() into to\r\n                                  from o in to.DefaultIfEmpty()\r\n                                  where o != null\r\n                                  select new { o.ShortName, o.LongName };\r\n                    var groups = from x in options\r\n                                 group x by x into g\r\n                                 let count = g.Count()\r\n                                 select new { Value = g.Key, Count = count };\r\n                    var errors = from y in groups\r\n                                 where y.Count > 1\r\n                                 select new RepeatedOptionError(new NameInfo(y.Value.ShortName, y.Value.LongName));\r\n                    return errors;\r\n                };", span="119-139"];
m6_62 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="117-117"];
m6_50 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="360-360"];
m6_0 [cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12"];
m6_1 [cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs", label="return new List<Func<IEnumerable<SpecificationProperty>, IEnumerable<Error>>>\r\n                {\r\n                    EnforceMutuallyExclusiveSet(),\r\n                    EnforceRequired(),\r\n                    EnforceRange(),\r\n                    EnforceSingle(tokens)\r\n                };", span="15-21"];
m6_2 [cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12"];
m6_63 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="119-139"];
m6_43 [cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs", label="0: var options = specProps\r\n                        .Where(sp => sp.Specification.TargetType == TargetType.Sequence)\r\n                        .Where(sp => sp.Value.IsJust())\r\n                        .Where(sp =>\r\n                            (sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJustStrict()).Length < sp.Specification.Min.FromJustStrict())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJustStrict()).Length > sp.Specification.Max.FromJustStrict())\r\n                        )", span="100-106"];
m6_42 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="98-114"];
m6_44 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="options.Any()", span="107-107"];
m6_51 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="101-101"];
m6_54 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="102-102"];
m6_57 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="103-105"];
m6_45 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="return\r\n                            from s in options\r\n                            select new SequenceOutOfRangeError(s.Specification.FromSpecification());", span="109-111"];
m6_58 [cluster="lambda expression", color=green, community=1, file="SpecificationPropertyRules.cs", label="0: (sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJustStrict()).Length < sp.Specification.Min.FromJustStrict())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJustStrict()).Length > sp.Specification.Max.FromJustStrict())", span="104-105"];
m6_59 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="103-105"];
m6_47 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="98-114"];
m6_46 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="return Enumerable.Empty<Error>();", span="113-113"];
m6_53 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="101-101"];
m6_52 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="sp.Specification.TargetType == TargetType.Sequence", span="101-101"];
m6_56 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="102-102"];
m6_55 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="sp.Value.IsJust()", span="102-102"];
m6_11 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var options =\r\n                    from sp in specProps\r\n                    where sp.Specification.IsOption()\r\n                    where sp.Value.IsJust()\r\n                    let o = (OptionSpecification)sp.Specification\r\n                    where o.SetName.Length > 0\r\n                    select o", span="28-34"];
m6_26 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var requiredWithValue = from sp in specProps\r\n                    where sp.Specification.IsOption()\r\n                    where sp.Specification.Required\r\n                    where sp.Value.IsJust()\r\n                    let o = (OptionSpecification)sp.Specification\r\n                    where o.SetName.Length > 0\r\n                    select sp.Specification", span="52-58"];
m6_64 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var specs = from sp in specProps\r\n                                where sp.Specification.IsOption()\r\n                                where sp.Value.IsJust()\r\n                                select (OptionSpecification)sp.Specification", span="121-124"];
m6_30 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="return\r\n                    from sp in missing\r\n                    select new MissingRequiredOptionError(sp.FromSpecification());", span="90-92"];
m6_10 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="26-45"];
m6_12 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var groups = from o in options\r\n                             group o by o.SetName into g\r\n                             select g", span="35-37"];
m6_14 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="return\r\n                        from o in options\r\n                        select new MutuallyExclusiveSetError(o.FromOptionSpecification(), o.SetName);", span="40-42"];
m6_25 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="50-93"];
m6_27 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var setWithRequiredValue = (\r\n                    from s in requiredWithValue\r\n                    let o = (OptionSpecification)s\r\n                    where o.SetName.Length > 0\r\n                    select o.SetName)\r\n                        .Distinct()", span="59-64"];
m6_29 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var missing =\r\n                    requiredWithoutValue\r\n                        .Except(requiredWithValue)\r\n                        .Concat(\r\n                            from sp in specProps\r\n                            where sp.Specification.IsOption()\r\n                            where sp.Specification.Required\r\n                            where sp.Value.IsNothing()\r\n                            let o = (OptionSpecification)sp.Specification\r\n                            where o.SetName.Length == 0\r\n                            select sp.Specification)\r\n                        .Concat(\r\n                            from sp in specProps\r\n                            where sp.Specification.IsValue()\r\n                            where sp.Specification.Required\r\n                            where sp.Value.IsNothing()\r\n                            select sp.Specification)", span="73-89"];
m6_65 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var options = from t in tokens\r\n                                  where t.IsName()\r\n                                  join o in specs on t.Text equals o.UniqueName() into to\r\n                                  from o in to.DefaultIfEmpty()\r\n                                  where o != null\r\n                                  select new { o.ShortName, o.LongName }", span="125-130"];
m6_15 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="return Enumerable.Empty<Error>();", span="44-44"];
m6_31 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="50-93"];
m6_16 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="26-45"];
m6_13 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="groups.Count() > 1", span="38-38"];
m6_28 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var requiredWithoutValue = from sp in specProps\r\n                    where sp.Specification.IsOption()\r\n                    where sp.Specification.Required\r\n                    where sp.Value.IsNothing()\r\n                    let o = (OptionSpecification)sp.Specification\r\n                    where o.SetName.Length > 0\r\n                    where setWithRequiredValue.ContainsIfNotEmpty(o.SetName)\r\n                    select sp.Specification", span="65-72"];
m6_66 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var groups = from x in options\r\n                                 group x by x into g\r\n                                 let count = g.Count()\r\n                                 select new { Value = g.Key, Count = count }", span="131-134"];
m6_68 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="return errors;", span="138-138"];
m6_67 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var errors = from y in groups\r\n                                 where y.Count > 1\r\n                                 select new RepeatedOptionError(new NameInfo(y.Value.ShortName, y.Value.LongName))", span="135-137"];
m6_69 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="119-139"];
m6_73 [cluster="CommandLine.RepeatedOptionError.RepeatedOptionError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.RepeatedOptionError.RepeatedOptionError(CommandLine.NameInfo)", span="371-371"];
m6_36 [cluster="Unk.Concat", file="SpecificationPropertyRules.cs", label="Entry Unk.Concat", span=""];
m6_5 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="48-48"];
m6_23 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", file="SpecificationPropertyRules.cs", label="return specProps =>\r\n            {\r\n                var requiredWithValue = from sp in specProps\r\n                    where sp.Specification.IsOption()\r\n                    where sp.Specification.Required\r\n                    where sp.Value.IsJust()\r\n                    let o = (OptionSpecification)sp.Specification\r\n                    where o.SetName.Length > 0\r\n                    select sp.Specification;\r\n                var setWithRequiredValue = (\r\n                    from s in requiredWithValue\r\n                    let o = (OptionSpecification)s\r\n                    where o.SetName.Length > 0\r\n                    select o.SetName)\r\n                        .Distinct();\r\n                var requiredWithoutValue = from sp in specProps\r\n                    where sp.Specification.IsOption()\r\n                    where sp.Specification.Required\r\n                    where sp.Value.IsNothing()\r\n                    let o = (OptionSpecification)sp.Specification\r\n                    where o.SetName.Length > 0\r\n                    where setWithRequiredValue.ContainsIfNotEmpty(o.SetName)\r\n                    select sp.Specification;\r\n                var missing =\r\n                    requiredWithoutValue\r\n                        .Except(requiredWithValue)\r\n                        .Concat(\r\n                            from sp in specProps\r\n                            where sp.Specification.IsOption()\r\n                            where sp.Specification.Required\r\n                            where sp.Value.IsNothing()\r\n                            let o = (OptionSpecification)sp.Specification\r\n                            where o.SetName.Length == 0\r\n                            select sp.Specification)\r\n                        .Concat(\r\n                            from sp in specProps\r\n                            where sp.Specification.IsValue()\r\n                            where sp.Specification.Required\r\n                            where sp.Value.IsNothing()\r\n                            select sp.Specification);\r\n                return\r\n                    from sp in missing\r\n                    select new MissingRequiredOptionError(sp.FromSpecification());\r\n            };", span="50-93"];
m6_24 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", file="SpecificationPropertyRules.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="48-48"];
m6_18 [cluster="Unk.IsJust", file="SpecificationPropertyRules.cs", label="Entry Unk.IsJust", span=""];
m6_34 [cluster="Unk.ContainsIfNotEmpty", file="SpecificationPropertyRules.cs", label="Entry Unk.ContainsIfNotEmpty", span=""];
m6_71 [cluster="Unk.UniqueName", file="SpecificationPropertyRules.cs", label="Entry Unk.UniqueName", span=""];
m6_35 [cluster="Unk.Except", file="SpecificationPropertyRules.cs", label="Entry Unk.Except", span=""];
m6_72 [cluster="Unk.DefaultIfEmpty", file="SpecificationPropertyRules.cs", label="Entry Unk.DefaultIfEmpty", span=""];
m6_17 [cluster="CommandLine.Core.Specification.IsOption()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.Specification.IsOption()", span="10-10"];
m6_3 [cluster="System.Collections.Generic.List<T>.List()", file="SpecificationPropertyRules.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m6_32 [cluster="Unk.Distinct", file="SpecificationPropertyRules.cs", label="Entry Unk.Distinct", span=""];
m6_19 [cluster="Unk.Count", file="SpecificationPropertyRules.cs", label="Entry Unk.Count", span=""];
m6_21 [cluster="Unk.FromOptionSpecification", file="SpecificationPropertyRules.cs", label="Entry Unk.FromOptionSpecification", span=""];
m6_82 [file="SpecificationPropertyRules.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", span=""];
m7_3 [cluster="CommandLine.OptionListAttribute.OptionListAttribute(string)", file="StringExtensions.cs", label="Exit CommandLine.OptionListAttribute.OptionListAttribute(string)", span="58-58"];
m7_7 [cluster="CommandLine.OptionListAttribute.OptionListAttribute(char, string, char)", file="StringExtensions.cs", label="Entry CommandLine.OptionListAttribute.OptionListAttribute(char, string, char)", span="80-80"];
m7_8 [cluster="CommandLine.OptionListAttribute.OptionListAttribute(char, string, char)", file="StringExtensions.cs", label="Separator = separator", span="83-83"];
m7_9 [cluster="CommandLine.OptionListAttribute.OptionListAttribute(char, string, char)", file="StringExtensions.cs", label="Exit CommandLine.OptionListAttribute.OptionListAttribute(char, string, char)", span="80-80"];
m7_0 [cluster="CommandLine.OptionListAttribute.OptionListAttribute(char)", file="StringExtensions.cs", label="Entry CommandLine.OptionListAttribute.OptionListAttribute(char)", span="49-49"];
m7_1 [cluster="CommandLine.OptionListAttribute.OptionListAttribute(char)", file="StringExtensions.cs", label="Exit CommandLine.OptionListAttribute.OptionListAttribute(char)", span="49-49"];
m7_25 [cluster="CommandLine.Infrastructure.StringExtensions.SafeLength(string)", file="StringExtensions.cs", label="Entry CommandLine.Infrastructure.StringExtensions.SafeLength(string)", span="45-45"];
m7_26 [cluster="CommandLine.Infrastructure.StringExtensions.SafeLength(string)", color=green, community=0, file="StringExtensions.cs", label="1: return value == null ? 0 : value.Length;", span="47-47"];
m7_27 [cluster="CommandLine.Infrastructure.StringExtensions.SafeLength(string)", file="StringExtensions.cs", label="Exit CommandLine.Infrastructure.StringExtensions.SafeLength(string)", span="45-45"];
m7_4 [cluster="CommandLine.OptionListAttribute.OptionListAttribute(char, string)", file="StringExtensions.cs", label="Entry CommandLine.OptionListAttribute.OptionListAttribute(char, string)", span="68-68"];
m7_5 [cluster="CommandLine.OptionListAttribute.OptionListAttribute(char, string)", file="StringExtensions.cs", label="Separator = ':'", span="71-71"];
m7_6 [cluster="CommandLine.OptionListAttribute.OptionListAttribute(char, string)", file="StringExtensions.cs", label="Exit CommandLine.OptionListAttribute.OptionListAttribute(char, string)", span="68-68"];
m7_10 [file="StringExtensions.cs", label="CommandLine.OptionListAttribute", span=""];
m9_0 [cluster="CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TypeConverter.cs", label="Entry CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11"];
m9_1 [cluster="CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TypeConverter.cs", label="return from tseq in tokens.Pairwise(\r\n                (f, s) =>\r\n                        f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).Return(info =>\r\n                                    info.Tag == TypeDescriptorKind.Scalar ? new[] { f, s } : new Token[] { }, new Token[] { })\r\n                                    : new Token[] { })\r\n                   from t in tseq\r\n                   select t;", span="15-22"];
m9_2 [cluster="CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TypeConverter.cs", label="Exit CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11"];
m9_3 [cluster="System.Collections.Generic.IEnumerable<TSource>.Pairwise<TSource, TResult>(System.Func<TSource, TSource, TResult>)", file="TypeConverter.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Pairwise<TSource, TResult>(System.Func<TSource, TSource, TResult>)", span="10-10"];
m9_11 [cluster="lambda expression", file="TypeConverter.cs", label="Entry lambda expression", span="18-19"];
m9_5 [cluster="lambda expression", file="TypeConverter.cs", label="f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).Return(info =>\r\n                                    info.Tag == TypeDescriptorKind.Scalar ? new[] { f, s } : new Token[] { }, new Token[] { })\r\n                                    : new Token[] { }", span="17-20"];
m9_4 [cluster="lambda expression", file="TypeConverter.cs", label="Entry lambda expression", span="16-20"];
m9_12 [cluster="lambda expression", file="TypeConverter.cs", label="info.Tag == TypeDescriptorKind.Scalar ? new[] { f, s } : new Token[] { }", span="19-19"];
m9_6 [cluster="lambda expression", file="TypeConverter.cs", label="Exit lambda expression", span="16-20"];
m9_13 [cluster="lambda expression", file="TypeConverter.cs", label="Exit lambda expression", span="18-19"];
m9_10 [cluster="CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", file="TypeConverter.cs", label="Entry CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", span="100-100"];
m9_7 [cluster="CommandLine.Core.Token.IsName()", file="TypeConverter.cs", label="Entry CommandLine.Core.Token.IsName()", span="68-68"];
m9_8 [cluster="CommandLine.Core.Token.IsValue()", file="TypeConverter.cs", label="Entry CommandLine.Core.Token.IsValue()", span="73-73"];
m9_9 [cluster="System.Func<T, TResult>.Invoke(T)", file="TypeConverter.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m9_14 [file="TypeConverter.cs", label="System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>", span=""];
m9_15 [file="TypeConverter.cs", label="CommandLine.Core.Token", span=""];
m9_16 [file="TypeConverter.cs", label="CommandLine.Core.Token", span=""];
n0 -> n1  [key=0, style=solid];
n1 -> n0  [color=blue, key=0, style=bold];
n2 -> n3  [key=0, style=solid];
n3 -> n2  [color=blue, key=0, style=bold];
n4 -> n5  [key=0, style=solid];
n5 -> n6  [key=0, style=solid];
n5 -> n7  [key=2, style=dotted];
n5 -> n8  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n6 -> n4  [color=blue, key=0, style=bold];
n8 -> n9  [key=0, style=solid];
n9 -> n10  [key=0, style=solid];
n9 -> n11  [key=2, style=dotted];
n10 -> n8  [color=blue, key=0, style=bold];
n12 -> n13  [key=0, style=solid];
n13 -> n14  [key=0, style=solid];
n13 -> n7  [key=2, style=dotted];
n13 -> n15  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n14 -> n12  [color=blue, key=0, style=bold];
n15 -> n16  [key=0, style=solid];
n16 -> n17  [key=0, style=solid];
n16 -> n11  [key=2, style=dotted];
n17 -> n15  [color=blue, key=0, style=bold];
n18 -> n19  [key=0, style=solid];
n19 -> n20  [key=0, style=solid];
n19 -> n7  [key=2, style=dotted];
n19 -> n21  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n20 -> n18  [color=blue, key=0, style=bold];
n21 -> n22  [key=0, style=solid];
n22 -> n23  [key=0, style=solid];
n22 -> n11  [key=2, style=dotted];
n23 -> n21  [color=blue, key=0, style=bold];
n24 -> n25  [key=0, style=solid];
n25 -> n26  [key=0, style=solid];
n25 -> n7  [key=2, style=dotted];
n25 -> n27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n26 -> n24  [color=blue, key=0, style=bold];
n27 -> n28  [key=0, style=solid];
n28 -> n29  [key=0, style=solid];
n28 -> n11  [key=2, style=dotted];
n29 -> n27  [color=blue, key=0, style=bold];
n30 -> n31  [key=0, style=solid];
n31 -> n32  [key=0, style=solid];
n31 -> n36  [key=2, style=dotted];
n32 -> n33  [key=0, style=solid];
n32 -> n37  [key=2, style=dotted];
n33 -> n34  [key=0, style=solid];
n33 -> n38  [key=2, style=dotted];
n34 -> n35  [key=0, style=solid];
n34 -> n2  [key=2, style=dotted];
n35 -> n30  [color=blue, key=0, style=bold];
n39 -> n40  [key=0, style=solid];
n40 -> n41  [key=0, style=solid];
n40 -> n45  [key=2, style=dotted];
n41 -> n42  [key=0, style=solid];
n41 -> n46  [key=2, style=dotted];
n42 -> n43  [key=0, style=solid];
n42 -> n47  [key=2, style=dotted];
n43 -> n44  [key=0, style=solid];
n43 -> n0  [key=2, style=dotted];
n44 -> n39  [color=blue, key=0, style=bold];
d57 -> d58  [color=green, key=0, style=solid];
d57 -> d63  [color=green, key=2, style=dotted];
d57 -> d61  [color=green, key=1, label=expectedOptions, style=dashed];
d56 -> d57  [color=green, key=0, style=solid];
d58 -> d59  [key=0, style=solid];
d58 -> d8  [key=2, style=dotted];
d58 -> d66  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
d61 -> d62  [key=0, style=solid];
d61 -> d45  [key=2, style=dotted];
d61 -> d68  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d62 -> d56  [color=blue, key=0, style=bold];
d59 -> d61  [color=darkseagreen4, key=1, label=result, style=dashed];
d59 -> d60  [key=0, style=solid];
d59 -> d22  [key=2, style=dotted];
d66 -> d67  [key=0, style=solid];
d60 -> d61  [key=0, style=solid];
d60 -> d64  [key=2, style=dotted];
d68 -> d69  [key=0, style=solid];
d2 -> d8  [key=2, style=dotted];
d2 -> d3  [key=0, style=solid];
d2 -> d13  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
d17 -> d8  [key=2, style=dotted];
d17 -> d18  [key=0, style=solid];
d17 -> d24  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
d28 -> d8  [key=2, style=dotted];
d28 -> d29  [key=0, style=solid];
d28 -> d35  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
d48 -> d8  [key=2, style=dotted];
d48 -> d49  [key=0, style=solid];
d48 -> d54  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
d120 -> d8  [key=2, style=dotted];
d120 -> d121  [key=0, style=solid];
d120 -> d127  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
d145 -> d8  [key=2, style=dotted];
d145 -> d146  [key=0, style=solid];
d145 -> d157  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
d164 -> d8  [key=2, style=dotted];
d164 -> d165  [key=0, style=solid];
d164 -> d179  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
d183 -> d8  [key=2, style=dotted];
d183 -> d184  [key=0, style=solid];
d183 -> d196  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
d200 -> d8  [key=2, style=dotted];
d200 -> d201  [key=0, style=solid];
d200 -> d209  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
d65 -> d66  [key=0, style=solid];
d67 -> d65  [color=blue, key=0, style=bold];
d41 -> d45  [key=2, style=dotted];
d41 -> d42  [key=0, style=solid];
d50 -> d45  [key=2, style=dotted];
d50 -> d51  [key=0, style=solid];
d77 -> d45  [key=2, style=dotted];
d77 -> d78  [key=0, style=solid];
d77 -> d80  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d88 -> d45  [key=2, style=dotted];
d88 -> d89  [key=0, style=solid];
d88 -> d90  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d97 -> d45  [key=2, style=dotted];
d97 -> d98  [key=0, style=solid];
d170 -> d45  [key=2, style=dotted];
d170 -> d171  [key=0, style=solid];
d171 -> d45  [key=2, style=dotted];
d171 -> d172  [key=0, style=solid];
d172 -> d45  [key=2, style=dotted];
d172 -> d173  [key=0, style=solid];
d173 -> d45  [key=2, style=dotted];
d173 -> d174  [key=0, style=solid];
d174 -> d45  [key=2, style=dotted];
d174 -> d175  [key=0, style=solid];
d175 -> d45  [key=2, style=dotted];
d175 -> d176  [key=0, style=solid];
d176 -> d45  [key=2, style=dotted];
d176 -> d177  [key=0, style=solid];
d189 -> d45  [key=2, style=dotted];
d189 -> d190  [key=0, style=solid];
d190 -> d45  [key=2, style=dotted];
d190 -> d191  [key=0, style=solid];
d191 -> d45  [key=2, style=dotted];
d191 -> d192  [key=0, style=solid];
d192 -> d45  [key=2, style=dotted];
d192 -> d193  [key=0, style=solid];
d193 -> d45  [key=2, style=dotted];
d193 -> d194  [key=0, style=solid];
d70 -> d68  [color=blue, key=0, style=bold];
d69 -> d70  [key=0, style=solid];
d69 -> d71  [key=2, style=dotted];
d18 -> d22  [key=2, style=dotted];
d18 -> d19  [key=0, style=solid];
d75 -> d22  [key=2, style=dotted];
d75 -> d77  [color=darkseagreen4, key=1, label=result, style=dashed];
d75 -> d76  [key=0, style=solid];
d1 -> d2  [key=0, style=solid];
d1 -> d7  [key=2, style=dotted];
d1 -> d13  [color=darkseagreen4, key=1, label=writer, style=dashed];
d1 -> d4  [color=darkseagreen4, key=1, label=writer, style=dashed];
d3 -> d4  [key=0, style=solid];
d3 -> d9  [key=2, style=dotted];
d13 -> d14  [key=0, style=solid];
d16 -> d17  [key=0, style=solid];
d16 -> d7  [key=2, style=dotted];
d16 -> d24  [color=darkseagreen4, key=1, label=writer, style=dashed];
d16 -> d19  [color=darkseagreen4, key=1, label=writer, style=dashed];
d24 -> d25  [key=0, style=solid];
d27 -> d28  [key=0, style=solid];
d27 -> d7  [key=2, style=dotted];
d27 -> d35  [color=darkseagreen4, key=1, label=writer, style=dashed];
d27 -> d30  [color=darkseagreen4, key=1, label=writer, style=dashed];
d29 -> d30  [key=0, style=solid];
d29 -> d33  [key=2, style=dotted];
d35 -> d36  [key=0, style=solid];
d47 -> d48  [key=0, style=solid];
d47 -> d50  [color=darkseagreen4, key=1, label=expectedOptions, style=dashed];
d47 -> d52  [key=2, style=dotted];
d49 -> d50  [key=0, style=solid];
d49 -> d9  [key=2, style=dotted];
d54 -> d55  [key=0, style=solid];
d119 -> d120  [key=0, style=solid];
d119 -> d7  [key=2, style=dotted];
d119 -> d127  [color=darkseagreen4, key=1, label=help, style=dashed];
d119 -> d122  [color=darkseagreen4, key=1, label=help, style=dashed];
d121 -> d122  [key=0, style=solid];
d121 -> d9  [key=2, style=dotted];
d127 -> d128  [key=0, style=solid];
d144 -> d145  [key=0, style=solid];
d144 -> d7  [key=2, style=dotted];
d144 -> d157  [color=darkseagreen4, key=1, label=help, style=dashed];
d144 -> d147  [color=darkseagreen4, key=1, label=help, style=dashed];
d146 -> d147  [key=0, style=solid];
d146 -> d9  [key=2, style=dotted];
d157 -> d158  [key=0, style=solid];
d163 -> d164  [key=0, style=solid];
d163 -> d7  [key=2, style=dotted];
d163 -> d179  [color=darkseagreen4, key=1, label=help, style=dashed];
d163 -> d166  [color=darkseagreen4, key=1, label=help, style=dashed];
d165 -> d166  [key=0, style=solid];
d165 -> d33  [key=2, style=dotted];
d179 -> d180  [key=0, style=solid];
d182 -> d183  [key=0, style=solid];
d182 -> d7  [key=2, style=dotted];
d182 -> d196  [color=darkseagreen4, key=1, label=help, style=dashed];
d182 -> d185  [color=darkseagreen4, key=1, label=help, style=dashed];
d184 -> d185  [key=0, style=solid];
d184 -> d33  [key=2, style=dotted];
d196 -> d197  [key=0, style=solid];
d199 -> d200  [key=0, style=solid];
d199 -> d7  [key=2, style=dotted];
d199 -> d209  [color=darkseagreen4, key=1, label=help, style=dashed];
d199 -> d202  [color=darkseagreen4, key=1, label=help, style=dashed];
d201 -> d202  [key=0, style=solid];
d201 -> d33  [key=2, style=dotted];
d209 -> d210  [key=0, style=solid];
d76 -> d64  [key=2, style=dotted];
d76 -> d77  [key=0, style=solid];
d87 -> d64  [key=2, style=dotted];
d87 -> d88  [key=0, style=solid];
d38 -> d41  [color=darkseagreen4, key=1, label=expectedOptions, style=dashed];
d38 -> d39  [key=0, style=solid];
d38 -> d43  [key=2, style=dotted];
d40 -> d41  [key=0, style=solid];
d40 -> d9  [key=2, style=dotted];
d42 -> d37  [color=blue, key=0, style=bold];
d51 -> d46  [color=blue, key=0, style=bold];
d73 -> d77  [color=darkseagreen4, key=1, label=expectedOptions, style=dashed];
d73 -> d74  [key=0, style=solid];
d73 -> d79  [key=2, style=dotted];
d78 -> d72  [color=blue, key=0, style=bold];
d80 -> d81  [key=0, style=solid];
d84 -> d88  [color=darkseagreen4, key=1, label=expectedOptions, style=dashed];
d84 -> d85  [key=0, style=solid];
d84 -> d79  [key=2, style=dotted];
d86 -> d88  [color=darkseagreen4, key=1, label=result, style=dashed];
d86 -> d87  [key=0, style=solid];
d86 -> d33  [key=2, style=dotted];
d89 -> d83  [color=blue, key=0, style=bold];
d90 -> d91  [key=0, style=solid];
d94 -> d97  [color=darkseagreen4, key=1, label=expectedOptions, style=dashed];
d94 -> d95  [key=0, style=solid];
d94 -> d99  [key=2, style=dotted];
d96 -> d97  [key=0, style=solid];
d96 -> d9  [key=2, style=dotted];
d98 -> d93  [color=blue, key=0, style=bold];
d168 -> d170  [color=darkseagreen4, key=1, label=lines, style=dashed];
d168 -> d171  [color=darkseagreen4, key=1, label=lines, style=dashed];
d168 -> d172  [color=darkseagreen4, key=1, label=lines, style=dashed];
d168 -> d173  [color=darkseagreen4, key=1, label=lines, style=dashed];
d168 -> d174  [color=darkseagreen4, key=1, label=lines, style=dashed];
d168 -> d175  [color=darkseagreen4, key=1, label=lines, style=dashed];
d168 -> d176  [color=darkseagreen4, key=1, label=lines, style=dashed];
d168 -> d169  [key=0, style=solid];
d168 -> d153  [key=2, style=dotted];
d168 -> d154  [key=2, style=dotted];
d169 -> d170  [key=0, style=solid];
d169 -> d108  [key=2, style=dotted];
d169 -> d155  [key=2, style=dotted];
d177 -> d162  [color=blue, key=0, style=bold];
d187 -> d189  [color=darkseagreen4, key=1, label=lines, style=dashed];
d187 -> d190  [color=darkseagreen4, key=1, label=lines, style=dashed];
d187 -> d191  [color=darkseagreen4, key=1, label=lines, style=dashed];
d187 -> d192  [color=darkseagreen4, key=1, label=lines, style=dashed];
d187 -> d193  [color=darkseagreen4, key=1, label=lines, style=dashed];
d187 -> d188  [key=0, style=solid];
d187 -> d153  [key=2, style=dotted];
d187 -> d154  [key=2, style=dotted];
d188 -> d189  [key=0, style=solid];
d188 -> d108  [key=2, style=dotted];
d188 -> d155  [key=2, style=dotted];
d194 -> d181  [color=blue, key=0, style=bold];
d19 -> d20  [key=0, style=solid];
d19 -> d10  [key=2, style=dotted];
d74 -> d75  [key=0, style=solid];
d74 -> d44  [key=2, style=dotted];
d0 -> d1  [key=0, style=solid];
d4 -> d5  [key=0, style=solid];
d4 -> d10  [key=2, style=dotted];
d214 -> d13  [color=darkseagreen4, key=1, label=writer, style=dashed];
d12 -> d13  [key=0, style=solid];
d14 -> d12  [color=blue, key=0, style=bold];
d15 -> d16  [key=0, style=solid];
d215 -> d24  [color=darkseagreen4, key=1, label=writer, style=dashed];
d23 -> d24  [key=0, style=solid];
d25 -> d23  [color=blue, key=0, style=bold];
d26 -> d27  [key=0, style=solid];
d30 -> d31  [key=0, style=solid];
d30 -> d10  [key=2, style=dotted];
d216 -> d35  [color=darkseagreen4, key=1, label=writer, style=dashed];
d34 -> d35  [key=0, style=solid];
d36 -> d34  [color=blue, key=0, style=bold];
d46 -> d47  [key=0, style=solid];
d53 -> d54  [key=0, style=solid];
d55 -> d53  [color=blue, key=0, style=bold];
d118 -> d119  [key=0, style=solid];
d122 -> d123  [key=0, style=solid];
d122 -> d10  [key=2, style=dotted];
d218 -> d127  [color=darkseagreen4, key=1, label=help, style=dashed];
d126 -> d127  [key=0, style=solid];
d128 -> d126  [color=blue, key=0, style=bold];
d143 -> d144  [key=0, style=solid];
d147 -> d148  [key=0, style=solid];
d147 -> d10  [key=2, style=dotted];
d147 -> d149  [color=darkseagreen4, key=1, label=result, style=dashed];
d220 -> d157  [color=darkseagreen4, key=1, label=help, style=dashed];
d156 -> d157  [key=0, style=solid];
d158 -> d156  [color=blue, key=0, style=bold];
d162 -> d163  [key=0, style=solid];
d166 -> d168  [color=darkseagreen4, key=1, label=result, style=dashed];
d166 -> d167  [key=0, style=solid];
d166 -> d10  [key=2, style=dotted];
d221 -> d179  [color=darkseagreen4, key=1, label=help, style=dashed];
d178 -> d179  [key=0, style=solid];
d180 -> d178  [color=blue, key=0, style=bold];
d181 -> d182  [key=0, style=solid];
d185 -> d187  [color=darkseagreen4, key=1, label=result, style=dashed];
d185 -> d186  [key=0, style=solid];
d185 -> d10  [key=2, style=dotted];
d222 -> d196  [color=darkseagreen4, key=1, label=help, style=dashed];
d195 -> d196  [key=0, style=solid];
d197 -> d195  [color=blue, key=0, style=bold];
d198 -> d199  [key=0, style=solid];
d198 -> d201  [color=darkseagreen4, key=1, label=string, style=dashed];
d202 -> d203  [key=0, style=solid];
d202 -> d10  [key=2, style=dotted];
d202 -> d204  [color=darkseagreen4, key=1, label=result, style=dashed];
d223 -> d209  [color=darkseagreen4, key=1, label=help, style=dashed];
d208 -> d209  [key=0, style=solid];
d210 -> d208  [color=blue, key=0, style=bold];
d37 -> d38  [key=0, style=solid];
d39 -> d40  [key=0, style=solid];
d39 -> d44  [key=2, style=dotted];
d72 -> d73  [key=0, style=solid];
d82 -> d80  [color=blue, key=0, style=bold];
d81 -> d71  [key=2, style=dotted];
d81 -> d82  [key=0, style=solid];
d83 -> d84  [key=0, style=solid];
d85 -> d86  [key=0, style=solid];
d85 -> d44  [key=2, style=dotted];
d92 -> d90  [color=blue, key=0, style=bold];
d91 -> d71  [key=2, style=dotted];
d91 -> d92  [key=0, style=solid];
d93 -> d94  [key=0, style=solid];
d95 -> d96  [key=0, style=solid];
d95 -> d44  [key=2, style=dotted];
d167 -> d168  [key=0, style=solid];
d167 -> d108  [key=2, style=dotted];
d167 -> d125  [key=2, style=dotted];
d186 -> d187  [key=0, style=solid];
d186 -> d108  [key=2, style=dotted];
d186 -> d125  [key=2, style=dotted];
d20 -> d21  [key=0, style=solid];
d20 -> d11  [key=2, style=dotted];
d6 -> d0  [color=blue, key=0, style=bold];
d5 -> d6  [key=0, style=solid];
d5 -> d11  [key=2, style=dotted];
d103 -> d9  [key=2, style=dotted];
d103 -> d104  [key=0, style=solid];
d103 -> d105  [color=darkseagreen4, key=1, label=result, style=dashed];
d132 -> d9  [key=2, style=dotted];
d132 -> d133  [key=0, style=solid];
d132 -> d134  [color=darkseagreen4, key=1, label=result, style=dashed];
d21 -> d15  [color=blue, key=0, style=bold];
d32 -> d26  [color=blue, key=0, style=bold];
d31 -> d32  [key=0, style=solid];
d31 -> d11  [key=2, style=dotted];
d124 -> d118  [color=blue, key=0, style=bold];
d123 -> d108  [key=2, style=dotted];
d123 -> d124  [key=0, style=solid];
d123 -> d125  [key=2, style=dotted];
d152 -> d143  [color=blue, key=0, style=bold];
d148 -> d108  [key=2, style=dotted];
d148 -> d149  [key=0, style=solid];
d148 -> d125  [key=2, style=dotted];
d149 -> d153  [key=2, style=dotted];
d149 -> d154  [key=2, style=dotted];
d149 -> d150  [key=0, style=solid];
d149 -> d151  [color=darkseagreen4, key=1, label=lines, style=dashed];
d207 -> d198  [color=blue, key=0, style=bold];
d203 -> d108  [key=2, style=dotted];
d203 -> d204  [key=0, style=solid];
d203 -> d125  [key=2, style=dotted];
d204 -> d153  [key=2, style=dotted];
d204 -> d154  [key=2, style=dotted];
d204 -> d205  [key=0, style=solid];
d204 -> d206  [color=darkseagreen4, key=1, label=lines, style=dashed];
d105 -> d108  [key=2, style=dotted];
d105 -> d106  [key=0, style=solid];
d105 -> d110  [key=2, style=dotted];
d105 -> d114  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d104 -> d108  [key=2, style=dotted];
d104 -> d105  [key=0, style=solid];
d104 -> d109  [key=2, style=dotted];
d104 -> d111  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d134 -> d108  [key=2, style=dotted];
d134 -> d135  [key=0, style=solid];
d134 -> d110  [key=2, style=dotted];
d134 -> d140  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d133 -> d108  [key=2, style=dotted];
d133 -> d134  [key=0, style=solid];
d133 -> d109  [key=2, style=dotted];
d133 -> d137  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d150 -> d108  [key=2, style=dotted];
d150 -> d151  [key=0, style=solid];
d150 -> d109  [key=2, style=dotted];
d150 -> d159  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d151 -> d108  [key=2, style=dotted];
d151 -> d155  [key=2, style=dotted];
d151 -> d152  [key=0, style=solid];
d205 -> d108  [key=2, style=dotted];
d205 -> d206  [key=0, style=solid];
d205 -> d109  [key=2, style=dotted];
d205 -> d211  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d206 -> d108  [key=2, style=dotted];
d206 -> d155  [key=2, style=dotted];
d206 -> d207  [key=0, style=solid];
d102 -> d44  [key=2, style=dotted];
d102 -> d103  [key=0, style=solid];
d131 -> d44  [key=2, style=dotted];
d131 -> d132  [key=0, style=solid];
d101 -> d105  [color=darkseagreen4, key=1, label=expectedError, style=dashed];
d101 -> d102  [key=0, style=solid];
d101 -> d107  [key=2, style=dotted];
d101 -> d115  [color=darkseagreen4, key=1, label=expectedError, style=dashed];
d106 -> d100  [color=blue, key=0, style=bold];
d114 -> d115  [key=0, style=solid];
d111 -> d112  [key=0, style=solid];
d130 -> d134  [color=darkseagreen4, key=1, label=expectedError, style=dashed];
d130 -> d131  [key=0, style=solid];
d130 -> d136  [key=2, style=dotted];
d130 -> d141  [color=darkseagreen4, key=1, label=expectedError, style=dashed];
d135 -> d129  [color=blue, key=0, style=bold];
d140 -> d141  [key=0, style=solid];
d137 -> d138  [key=0, style=solid];
d159 -> d160  [key=0, style=solid];
d211 -> d212  [key=0, style=solid];
d100 -> d101  [key=0, style=solid];
d115 -> d116  [key=0, style=solid];
d115 -> d117  [key=2, style=dotted];
d116 -> d114  [color=blue, key=0, style=bold];
d113 -> d111  [color=blue, key=0, style=bold];
d112 -> d113  [key=0, style=solid];
d129 -> d130  [key=0, style=solid];
d141 -> d142  [key=0, style=solid];
d141 -> d117  [key=2, style=dotted];
d142 -> d140  [color=blue, key=0, style=bold];
d139 -> d137  [color=blue, key=0, style=bold];
d138 -> d139  [key=0, style=solid];
d161 -> d159  [color=blue, key=0, style=bold];
d160 -> d161  [key=0, style=solid];
d213 -> d211  [color=blue, key=0, style=bold];
d212 -> d213  [key=0, style=solid];
d217 -> d115  [color=darkseagreen4, key=1, label=expectedError, style=dashed];
d219 -> d141  [color=darkseagreen4, key=1, label=expectedError, style=dashed];
m0_34 -> m0_35  [key=0, style=solid];
m0_35 -> m0_36  [key=0, style=solid];
m0_35 -> m0_31  [key=2, style=dotted];
m0_35 -> m0_37  [color=darkseagreen4, key=1, label=options, style=dashed];
m0_36 -> m0_37  [key=0, style=solid];
m0_36 -> d44  [key=2, style=dotted];
m0_37 -> m0_38  [key=0, style=solid];
m0_37 -> m0_14  [key=2, style=dotted];
m0_38 -> m0_39  [key=0, style=solid];
m0_38 -> m0_15  [key=2, style=dotted];
m0_38 -> m0_33  [key=2, style=dotted];
m0_39 -> m0_34  [color=blue, key=0, style=bold];
m0_19 -> m0_20  [key=0, style=solid];
m0_20 -> m0_21  [key=0, style=solid];
m0_20 -> m0_31  [key=2, style=dotted];
m0_20 -> m0_22  [color=darkseagreen4, key=1, label=options, style=dashed];
m0_20 -> m0_24  [color=darkseagreen4, key=1, label=options, style=dashed];
m0_20 -> m0_25  [color=darkseagreen4, key=1, label=options, style=dashed];
m0_20 -> m0_26  [color=darkseagreen4, key=1, label=options, style=dashed];
m0_20 -> m0_27  [color=darkseagreen4, key=1, label=options, style=dashed];
m0_20 -> m0_28  [color=darkseagreen4, key=1, label=options, style=dashed];
m0_20 -> m0_29  [color=darkseagreen4, key=1, label=options, style=dashed];
m0_21 -> m0_22  [key=0, style=solid];
m0_21 -> d44  [key=2, style=dotted];
m0_22 -> m0_23  [key=0, style=solid];
m0_22 -> m0_14  [key=2, style=dotted];
m0_24 -> m0_25  [key=0, style=solid];
m0_24 -> m0_15  [key=2, style=dotted];
m0_24 -> m0_17  [key=2, style=dotted];
m0_25 -> m0_26  [key=0, style=solid];
m0_25 -> m0_15  [key=2, style=dotted];
m0_25 -> m0_17  [key=2, style=dotted];
m0_26 -> m0_27  [key=0, style=solid];
m0_26 -> m0_15  [key=2, style=dotted];
m0_26 -> m0_17  [key=2, style=dotted];
m0_27 -> m0_28  [key=0, style=solid];
m0_27 -> m0_15  [key=2, style=dotted];
m0_27 -> m0_32  [key=2, style=dotted];
m0_28 -> m0_29  [key=0, style=solid];
m0_28 -> m0_15  [key=2, style=dotted];
m0_28 -> m0_33  [key=2, style=dotted];
m0_29 -> m0_30  [key=0, style=solid];
m0_29 -> m0_18  [key=2, style=dotted];
m0_23 -> m0_24  [key=0, style=solid];
m0_23 -> m0_15  [key=2, style=dotted];
m0_23 -> m0_16  [key=2, style=dotted];
m0_30 -> m0_19  [color=blue, key=0, style=bold];
m0_40 -> m0_41  [key=0, style=solid];
m0_41 -> m0_42  [key=0, style=solid];
m0_41 -> m0_48  [key=2, style=dotted];
m0_41 -> m0_43  [color=darkseagreen4, key=1, label=options, style=dashed];
m0_41 -> m0_45  [color=darkseagreen4, key=1, label=options, style=dashed];
m0_41 -> m0_46  [color=darkseagreen4, key=1, label=options, style=dashed];
m0_42 -> m0_43  [key=0, style=solid];
m0_42 -> d44  [key=2, style=dotted];
m0_43 -> m0_44  [key=0, style=solid];
m0_43 -> m0_14  [key=2, style=dotted];
m0_45 -> m0_46  [key=0, style=solid];
m0_45 -> m0_15  [key=2, style=dotted];
m0_45 -> m0_49  [key=2, style=dotted];
m0_45 -> m0_50  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_46 -> m0_47  [key=0, style=solid];
m0_46 -> m0_18  [key=2, style=dotted];
m0_44 -> m0_45  [key=0, style=solid];
m0_44 -> m0_15  [key=2, style=dotted];
m0_44 -> m0_16  [key=2, style=dotted];
m0_47 -> m0_40  [color=blue, key=0, style=bold];
m0_50 -> m0_51  [key=0, style=solid];
m0_51 -> m0_52  [key=0, style=solid];
m0_52 -> m0_50  [color=blue, key=0, style=bold];
m0_53 -> m0_54  [key=0, style=solid];
m0_54 -> m0_55  [key=0, style=solid];
m0_54 -> m0_48  [key=2, style=dotted];
m0_54 -> m0_56  [color=darkseagreen4, key=1, label=options, style=dashed];
m0_55 -> m0_56  [key=0, style=solid];
m0_55 -> d44  [key=2, style=dotted];
m0_56 -> m0_57  [key=0, style=solid];
m0_56 -> m0_14  [key=2, style=dotted];
m0_57 -> m0_58  [key=0, style=solid];
m0_57 -> m0_15  [key=2, style=dotted];
m0_57 -> m0_33  [key=2, style=dotted];
m0_58 -> m0_53  [color=blue, key=0, style=bold];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_12  [key=2, style=dotted];
m0_1 -> m0_3  [color=darkseagreen4, key=1, label=options, style=dashed];
m0_1 -> m0_5  [color=darkseagreen4, key=1, label=options, style=dashed];
m0_1 -> m0_6  [color=darkseagreen4, key=1, label=options, style=dashed];
m0_1 -> m0_7  [color=darkseagreen4, key=1, label=options, style=dashed];
m0_1 -> m0_8  [color=darkseagreen4, key=1, label=options, style=dashed];
m0_1 -> m0_9  [color=darkseagreen4, key=1, label=options, style=dashed];
m0_1 -> m0_10  [color=darkseagreen4, key=1, label=options, style=dashed];
m0_2 -> m0_3  [key=0, style=solid];
m0_2 -> d44  [key=2, style=dotted];
m0_3 -> m0_4  [key=0, style=solid];
m0_3 -> m0_14  [key=2, style=dotted];
m0_5 -> m0_6  [key=0, style=solid];
m0_5 -> m0_15  [key=2, style=dotted];
m0_5 -> m0_17  [key=2, style=dotted];
m0_6 -> m0_7  [key=0, style=solid];
m0_6 -> m0_15  [key=2, style=dotted];
m0_6 -> m0_17  [key=2, style=dotted];
m0_7 -> m0_8  [key=0, style=solid];
m0_7 -> m0_15  [key=2, style=dotted];
m0_7 -> m0_17  [key=2, style=dotted];
m0_8 -> m0_9  [key=0, style=solid];
m0_8 -> m0_15  [key=2, style=dotted];
m0_8 -> m0_17  [key=2, style=dotted];
m0_9 -> m0_10  [key=0, style=solid];
m0_9 -> m0_15  [key=2, style=dotted];
m0_9 -> m0_16  [key=2, style=dotted];
m0_10 -> m0_11  [key=0, style=solid];
m0_10 -> m0_18  [key=2, style=dotted];
m0_4 -> m0_5  [key=0, style=solid];
m0_4 -> m0_15  [key=2, style=dotted];
m0_4 -> m0_16  [key=2, style=dotted];
m0_11 -> m0_0  [color=blue, key=0, style=bold];
m1_0 -> m1_1  [key=0, style=solid];
m1_1 -> m1_2  [key=0, style=solid];
m1_2 -> m1_0  [color=blue, key=0, style=bold];
m1_3 -> m1_1  [color=darkseagreen4, key=1, label="CommandLine.ValueAttribute", style=dashed];
m3_0 -> m3_1  [key=0, style=solid];
m3_1 -> m3_2  [key=0, style=solid];
m3_2 -> m3_0  [color=blue, key=0, style=bold];
m3_3 -> m3_4  [key=0, style=solid];
m3_4 -> m3_5  [key=0, style=solid];
m3_4 -> m3_0  [key=2, style=dotted];
m3_4 -> m3_6  [key=2, style=dotted];
m3_4 -> m3_7  [key=2, style=dotted];
m3_4 -> m3_8  [key=2, style=dotted];
m3_4 -> m3_9  [key=2, style=dotted];
m3_5 -> m3_3  [color=blue, key=0, style=bold];
m3_10 -> m3_1  [color=darkseagreen4, key=1, label="CommandLine.Core.ValueSpecification", style=dashed];
m5_0 -> m5_1  [key=0, style=solid];
m5_0 -> m5_3  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_1 -> m5_2  [key=0, style=solid];
m5_1 -> m5_3  [key=0, style=solid];
m5_3 -> m5_4  [key=0, style=solid];
m5_3 -> m5_6  [key=2, style=dotted];
m5_2 -> m5_4  [key=0, style=solid];
m5_2 -> m5_5  [key=2, style=dotted];
m5_4 -> m5_0  [color=blue, key=0, style=bold];
m6_4 -> m6_8  [key=0, style=solid];
m6_8 -> m6_11  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m6_8 -> m6_9  [key=0, style=solid];
m6_9 -> m6_4  [color=blue, key=0, style=bold];
m6_6 -> m6_40  [color=green, key=0, style=solid];
m6_40 -> m6_41  [color=green, key=0, style=solid];
m6_40 -> m6_43  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m6_41 -> m6_6  [color=blue, key=0, style=bold];
m6_7 -> m6_61  [key=0, style=solid];
m6_7 -> m6_65  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m6_61 -> m6_64  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m6_61 -> m6_61  [color=darkorchid, key=3, label="method methodReturn System.Collections.Generic.IEnumerable<CommandLine.Error> ", style=bold];
m6_61 -> m6_62  [key=0, style=solid];
m6_62 -> m6_7  [color=blue, key=0, style=bold];
m6_0 -> m6_1  [key=0, style=solid];
m6_1 -> m6_6  [key=2, style=dotted];
m6_1 -> m6_2  [key=0, style=solid];
m6_1 -> m6_3  [key=2, style=dotted];
m6_1 -> m6_4  [key=2, style=dotted];
m6_1 -> m6_5  [key=2, style=dotted];
m6_1 -> m6_7  [key=2, style=dotted];
m6_2 -> m6_0  [color=blue, key=0, style=bold];
m6_63 -> m6_64  [key=0, style=solid];
m6_43 -> m6_44  [color=green, key=0, style=solid];
m6_43 -> m6_48  [color=green, key=2, style=dotted];
m6_43 -> m6_51  [color=green, key=1, label="lambda expression", style=dashed];
m6_43 -> m6_54  [color=green, key=1, label="lambda expression", style=dashed];
m6_43 -> m6_57  [color=green, key=1, label="lambda expression", style=dashed];
m6_43 -> m6_45  [color=green, key=1, label=options, style=dashed];
m6_42 -> m6_43  [color=green, key=0, style=solid];
m6_44 -> m6_45  [key=0, style=solid];
m6_44 -> m6_46  [key=0, style=solid];
m6_44 -> m6_49  [key=2, style=dotted];
m6_51 -> m6_52  [key=0, style=solid];
m6_54 -> m6_55  [key=0, style=solid];
m6_57 -> m6_58  [color=green, key=0, style=solid];
m6_45 -> m6_45  [color=darkseagreen4, key=1, label=s, style=dashed];
m6_45 -> m6_47  [key=0, style=solid];
m6_45 -> m6_50  [key=2, style=dotted];
m6_45 -> m6_39  [key=2, style=dotted];
m6_58 -> m6_59  [color=green, key=0, style=solid];
m6_58 -> m6_18  [color=green, key=2, style=dotted];
m6_58 -> m6_60  [color=green, key=2, style=dotted];
m6_59 -> m6_57  [color=blue, key=0, style=bold];
m6_47 -> m6_42  [color=blue, key=0, style=bold];
m6_46 -> m6_47  [key=0, style=solid];
m6_46 -> m6_22  [key=2, style=dotted];
m6_53 -> m6_51  [color=blue, key=0, style=bold];
m6_52 -> m6_53  [key=0, style=solid];
m6_56 -> m6_54  [color=blue, key=0, style=bold];
m6_55 -> m6_18  [key=2, style=dotted];
m6_55 -> m6_56  [key=0, style=solid];
m6_11 -> m6_18  [key=2, style=dotted];
m6_11 -> m6_11  [color=darkseagreen4, key=1, label=sp, style=dashed];
m6_11 -> m6_12  [key=0, style=solid];
m6_11 -> m6_17  [key=2, style=dotted];
m6_11 -> m6_14  [color=darkseagreen4, key=1, label=options, style=dashed];
m6_26 -> m6_18  [key=2, style=dotted];
m6_26 -> m6_26  [color=darkseagreen4, key=1, label=sp, style=dashed];
m6_26 -> m6_27  [key=0, style=solid];
m6_26 -> m6_17  [key=2, style=dotted];
m6_26 -> m6_29  [color=darkseagreen4, key=1, label=requiredWithValue, style=dashed];
m6_64 -> m6_18  [key=2, style=dotted];
m6_64 -> m6_64  [color=darkseagreen4, key=1, label=sp, style=dashed];
m6_64 -> m6_65  [key=0, style=solid];
m6_64 -> m6_17  [key=2, style=dotted];
m6_30 -> m6_39  [key=2, style=dotted];
m6_30 -> m6_30  [color=darkseagreen4, key=1, label=sp, style=dashed];
m6_30 -> m6_31  [key=0, style=solid];
m6_30 -> m6_38  [key=2, style=dotted];
m6_10 -> m6_11  [key=0, style=solid];
m6_12 -> m6_12  [color=darkseagreen4, key=1, label=o, style=dashed];
m6_12 -> m6_13  [key=0, style=solid];
m6_14 -> m6_14  [color=darkseagreen4, key=1, label=o, style=dashed];
m6_14 -> m6_16  [key=0, style=solid];
m6_14 -> m6_20  [key=2, style=dotted];
m6_14 -> m6_21  [key=2, style=dotted];
m6_25 -> m6_26  [key=0, style=solid];
m6_25 -> m6_28  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m6_25 -> m6_29  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m6_27 -> m6_27  [color=darkseagreen4, key=1, label=s, style=dashed];
m6_27 -> m6_28  [key=0, style=solid];
m6_27 -> m6_32  [key=2, style=dotted];
m6_29 -> m6_30  [key=0, style=solid];
m6_29 -> m6_17  [key=2, style=dotted];
m6_29 -> m6_29  [color=darkseagreen4, key=1, label=sp, style=dashed];
m6_29 -> m6_35  [key=2, style=dotted];
m6_29 -> m6_33  [key=2, style=dotted];
m6_29 -> m6_36  [key=2, style=dotted];
m6_29 -> m6_37  [key=2, style=dotted];
m6_65 -> m6_65  [color=darkseagreen4, key=1, label=t, style=dashed];
m6_65 -> m6_66  [key=0, style=solid];
m6_65 -> m6_70  [key=2, style=dotted];
m6_65 -> m6_71  [key=2, style=dotted];
m6_65 -> m6_72  [key=2, style=dotted];
m6_15 -> m6_22  [key=2, style=dotted];
m6_15 -> m6_16  [key=0, style=solid];
m6_31 -> m6_25  [color=blue, key=0, style=bold];
m6_16 -> m6_10  [color=blue, key=0, style=bold];
m6_13 -> m6_14  [key=0, style=solid];
m6_13 -> m6_15  [key=0, style=solid];
m6_13 -> m6_19  [key=2, style=dotted];
m6_28 -> m6_17  [key=2, style=dotted];
m6_28 -> m6_29  [key=0, style=solid];
m6_28 -> m6_28  [color=darkseagreen4, key=1, label=sp, style=dashed];
m6_28 -> m6_33  [key=2, style=dotted];
m6_28 -> m6_34  [key=2, style=dotted];
m6_66 -> m6_66  [color=darkseagreen4, key=1, label=x, style=dashed];
m6_66 -> m6_67  [key=0, style=solid];
m6_66 -> m6_19  [key=2, style=dotted];
m6_68 -> m6_69  [key=0, style=solid];
m6_67 -> m6_68  [key=0, style=solid];
m6_67 -> m6_67  [color=darkseagreen4, key=1, label=y, style=dashed];
m6_67 -> m6_73  [key=2, style=dotted];
m6_67 -> m6_74  [key=2, style=dotted];
m6_69 -> m6_63  [color=blue, key=0, style=bold];
m6_5 -> m6_23  [key=0, style=solid];
m6_23 -> m6_26  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m6_23 -> m6_24  [key=0, style=solid];
m6_23 -> m6_28  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m6_23 -> m6_29  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m6_24 -> m6_5  [color=blue, key=0, style=bold];
m6_82 -> m6_65  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m7_3 -> n46  [color=blue, key=0, style=bold];
m7_7 -> m7_8  [key=0, style=solid];
m7_8 -> m7_9  [key=0, style=solid];
m7_9 -> m7_7  [color=blue, key=0, style=bold];
m7_0 -> m7_1  [key=0, style=solid];
m7_1 -> m7_0  [color=blue, key=0, style=bold];
m7_25 -> m7_26  [color=green, key=0, style=solid];
m7_26 -> m7_27  [color=green, key=0, style=solid];
m7_27 -> m7_25  [color=blue, key=0, style=bold];
m7_4 -> m7_5  [key=0, style=solid];
m7_5 -> m7_6  [key=0, style=solid];
m7_6 -> m7_4  [color=blue, key=0, style=bold];
m7_10 -> m7_5  [color=darkseagreen4, key=1, label="CommandLine.OptionListAttribute", style=dashed];
m7_10 -> m7_8  [color=darkseagreen4, key=1, label="CommandLine.OptionListAttribute", style=dashed];
m9_0 -> m9_1  [key=0, style=solid];
m9_0 -> m9_5  [color=darkseagreen4, key=1, label="System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>", style=dashed];
m9_1 -> m9_2  [key=0, style=solid];
m9_1 -> m9_3  [key=2, style=dotted];
m9_1 -> m9_4  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_1 -> m9_1  [color=darkseagreen4, key=1, label=tseq, style=dashed];
m9_2 -> m9_0  [color=blue, key=0, style=bold];
m9_11 -> m9_12  [key=0, style=solid];
m9_5 -> m9_6  [key=0, style=solid];
m9_5 -> m9_7  [key=2, style=dotted];
m9_5 -> m9_8  [key=2, style=dotted];
m9_5 -> m9_9  [key=2, style=dotted];
m9_5 -> m9_10  [key=2, style=dotted];
m9_5 -> m9_11  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_4 -> m9_5  [key=0, style=solid];
m9_4 -> m9_12  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m9_12 -> m9_13  [key=0, style=solid];
m9_6 -> m9_4  [color=blue, key=0, style=bold];
m9_13 -> m9_11  [color=blue, key=0, style=bold];
m9_14 -> m9_5  [color=darkseagreen4, key=1, label="System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>", style=dashed];
m9_15 -> m9_12  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m9_16 -> m9_12  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
}
