digraph  {
n0 [label="Entry CommandLine.Tests.Unit.Attributes.AttributesFixture.CustomOptionAttribute.CustomOptionAttribute(string)", span="41-41", cluster="CommandLine.Tests.Unit.Attributes.AttributesFixture.CustomOptionAttribute.CustomOptionAttribute(string)"];
n1 [label="Exit CommandLine.Tests.Unit.Attributes.AttributesFixture.CustomOptionAttribute.CustomOptionAttribute(string)", span="41-41", cluster="CommandLine.Tests.Unit.Attributes.AttributesFixture.CustomOptionAttribute.CustomOptionAttribute(string)"];
n2 [label="Entry CommandLine.Tests.Unit.Attributes.AttributesFixture.CustomOptionAttribute.CustomOptionAttribute(char, string)", span="46-46", cluster="CommandLine.Tests.Unit.Attributes.AttributesFixture.CustomOptionAttribute.CustomOptionAttribute(char, string)"];
n3 [label="Exit CommandLine.Tests.Unit.Attributes.AttributesFixture.CustomOptionAttribute.CustomOptionAttribute(char, string)", span="46-46", cluster="CommandLine.Tests.Unit.Attributes.AttributesFixture.CustomOptionAttribute.CustomOptionAttribute(char, string)"];
n4 [label="Entry CommandLine.Tests.Unit.Attributes.AttributesFixture.Short_name_with_line_terminator_throws_exception()", span="82-82", cluster="CommandLine.Tests.Unit.Attributes.AttributesFixture.Short_name_with_line_terminator_throws_exception()"];
n5 [label="Assert.Throws<ArgumentException>(() =>\r\n                new OptionAttribute('\n'))", span="84-85", cluster="CommandLine.Tests.Unit.Attributes.AttributesFixture.Short_name_with_line_terminator_throws_exception()"];
n6 [label="Exit CommandLine.Tests.Unit.Attributes.AttributesFixture.Short_name_with_line_terminator_throws_exception()", span="82-82", cluster="CommandLine.Tests.Unit.Attributes.AttributesFixture.Short_name_with_line_terminator_throws_exception()"];
n7 [label="Entry Unk.>", span="", cluster="Unk.>"];
n8 [label="Entry lambda expression", span="84-85", cluster="lambda expression"];
n9 [label="new OptionAttribute('\n')", span="85-85", cluster="lambda expression"];
n10 [label="Exit lambda expression", span="84-85", cluster="lambda expression"];
n11 [label="Entry CommandLine.OptionAttribute.OptionAttribute(char)", span="49-49", cluster="CommandLine.OptionAttribute.OptionAttribute(char)"];
n12 [label="Entry CommandLine.Tests.Unit.Attributes.AttributesFixture.Short_name_with_line_terminator_throws_exception_2()", span="89-89", cluster="CommandLine.Tests.Unit.Attributes.AttributesFixture.Short_name_with_line_terminator_throws_exception_2()"];
n13 [label="Assert.Throws<ArgumentException>(() =>\r\n                new OptionAttribute('\r'))", span="91-92", cluster="CommandLine.Tests.Unit.Attributes.AttributesFixture.Short_name_with_line_terminator_throws_exception_2()"];
n14 [label="Exit CommandLine.Tests.Unit.Attributes.AttributesFixture.Short_name_with_line_terminator_throws_exception_2()", span="89-89", cluster="CommandLine.Tests.Unit.Attributes.AttributesFixture.Short_name_with_line_terminator_throws_exception_2()"];
n15 [label="Entry lambda expression", span="91-92", cluster="lambda expression"];
n16 [label="new OptionAttribute('\r')", span="92-92", cluster="lambda expression"];
n17 [label="Exit lambda expression", span="91-92", cluster="lambda expression"];
n18 [label="Entry CommandLine.Tests.Unit.Attributes.AttributesFixture.Short_name_with_white_space_throws_exception()", span="96-96", cluster="CommandLine.Tests.Unit.Attributes.AttributesFixture.Short_name_with_white_space_throws_exception()"];
n19 [label="Assert.Throws<ArgumentException>(() =>\r\n                new OptionAttribute(' '))", span="98-99", cluster="CommandLine.Tests.Unit.Attributes.AttributesFixture.Short_name_with_white_space_throws_exception()"];
n20 [label="Exit CommandLine.Tests.Unit.Attributes.AttributesFixture.Short_name_with_white_space_throws_exception()", span="96-96", cluster="CommandLine.Tests.Unit.Attributes.AttributesFixture.Short_name_with_white_space_throws_exception()"];
n21 [label="Entry lambda expression", span="98-99", cluster="lambda expression"];
n22 [label="new OptionAttribute(' ')", span="99-99", cluster="lambda expression"];
n23 [label="Exit lambda expression", span="98-99", cluster="lambda expression"];
n24 [label="Entry CommandLine.Tests.Unit.Attributes.AttributesFixture.Short_name_with_white_space_throws_exception_2()", span="103-103", cluster="CommandLine.Tests.Unit.Attributes.AttributesFixture.Short_name_with_white_space_throws_exception_2()"];
n25 [label="Assert.Throws<ArgumentException>(() =>\r\n                new OptionAttribute('\t'))", span="105-106", cluster="CommandLine.Tests.Unit.Attributes.AttributesFixture.Short_name_with_white_space_throws_exception_2()"];
n26 [label="Exit CommandLine.Tests.Unit.Attributes.AttributesFixture.Short_name_with_white_space_throws_exception_2()", span="103-103", cluster="CommandLine.Tests.Unit.Attributes.AttributesFixture.Short_name_with_white_space_throws_exception_2()"];
n27 [label="Entry lambda expression", span="105-106", cluster="lambda expression"];
n28 [label="new OptionAttribute('\t')", span="106-106", cluster="lambda expression"];
n29 [label="Exit lambda expression", span="105-106", cluster="lambda expression"];
n30 [label="Entry CommandLine.Tests.Unit.Attributes.AttributesFixture.All_options_allow_one_character_in_short_name()", span="111-111", cluster="CommandLine.Tests.Unit.Attributes.AttributesFixture.All_options_allow_one_character_in_short_name()"];
n31 [label="new OptionAttribute('o', null)", span="113-113", cluster="CommandLine.Tests.Unit.Attributes.AttributesFixture.All_options_allow_one_character_in_short_name()"];
n32 [label="new OptionListAttribute('l', null)", span="114-114", cluster="CommandLine.Tests.Unit.Attributes.AttributesFixture.All_options_allow_one_character_in_short_name()"];
n36 [label="Entry CommandLine.OptionAttribute.OptionAttribute(char, string)", span="68-68", cluster="CommandLine.OptionAttribute.OptionAttribute(char, string)"];
n33 [label="new HelpOptionAttribute('?', null)", span="115-115", cluster="CommandLine.Tests.Unit.Attributes.AttributesFixture.All_options_allow_one_character_in_short_name()"];
n37 [label="Entry CommandLine.OptionListAttribute.OptionListAttribute(char, string)", span="61-61", cluster="CommandLine.OptionListAttribute.OptionListAttribute(char, string)"];
n34 [label="new CustomOptionAttribute('c', null)", span="116-116", cluster="CommandLine.Tests.Unit.Attributes.AttributesFixture.All_options_allow_one_character_in_short_name()"];
n38 [label="Entry CommandLine.HelpOptionAttribute.HelpOptionAttribute(char, string)", span="89-89", cluster="CommandLine.HelpOptionAttribute.HelpOptionAttribute(char, string)"];
n35 [label="Exit CommandLine.Tests.Unit.Attributes.AttributesFixture.All_options_allow_one_character_in_short_name()", span="111-111", cluster="CommandLine.Tests.Unit.Attributes.AttributesFixture.All_options_allow_one_character_in_short_name()"];
n39 [label="Entry CommandLine.Tests.Unit.Attributes.AttributesFixture.All_options_allow_null_value_in_short_name()", span="120-120", cluster="CommandLine.Tests.Unit.Attributes.AttributesFixture.All_options_allow_null_value_in_short_name()"];
n40 [label="new OptionAttribute(''option-attr'')", span="122-122", cluster="CommandLine.Tests.Unit.Attributes.AttributesFixture.All_options_allow_null_value_in_short_name()"];
n41 [label="new OptionListAttribute(''option-list-attr'')", span="123-123", cluster="CommandLine.Tests.Unit.Attributes.AttributesFixture.All_options_allow_null_value_in_short_name()"];
n45 [label="Entry CommandLine.OptionAttribute.OptionAttribute(string)", span="58-58", cluster="CommandLine.OptionAttribute.OptionAttribute(string)"];
n42 [label="new HelpOptionAttribute(''help-attr'')", span="124-124", cluster="CommandLine.Tests.Unit.Attributes.AttributesFixture.All_options_allow_null_value_in_short_name()"];
n46 [label="Entry CommandLine.OptionListAttribute.OptionListAttribute(string)", span="51-51", cluster="CommandLine.OptionListAttribute.OptionListAttribute(string)"];
n43 [label="new CustomOptionAttribute(''custom-attr'')", span="125-125", cluster="CommandLine.Tests.Unit.Attributes.AttributesFixture.All_options_allow_null_value_in_short_name()"];
n47 [label="Entry CommandLine.HelpOptionAttribute.HelpOptionAttribute(string)", span="74-74", cluster="CommandLine.HelpOptionAttribute.HelpOptionAttribute(string)"];
n44 [label="Exit CommandLine.Tests.Unit.Attributes.AttributesFixture.All_options_allow_null_value_in_short_name()", span="120-120", cluster="CommandLine.Tests.Unit.Attributes.AttributesFixture.All_options_allow_null_value_in_short_name()"];
d57 [label="var expectedOptions = new AddOptions\r\n                {\r\n                    Patch = true,\r\n                    FileName = ''--strange-fn''\r\n                }", span="106-110", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", color=green, community=0];
d56 [label="Entry CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", span="103-103", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()"];
d58 [label="var sut = new Parser(with => with.EnableDashDash = true)", span="111-111", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()"];
d63 [label="Entry CommandLine.Tests.Fakes.AddOptions.AddOptions()", span="7-7", cluster="CommandLine.Tests.Fakes.AddOptions.AddOptions()"];
d61 [label="result.Value.ShouldBeEquivalentTo(expectedOptions, o => o.RespectingRuntimeTypes())", span="120-120", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()"];
d62 [label="Exit CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", span="103-103", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()"];
d59 [label="var result = sut.ParseArguments(\r\n                new[] { ''add'', ''-p'', ''--'', ''--strange-fn'' },\r\n                typeof(AddOptions), typeof(CommitOptions), typeof(CloneOptions))", span="114-116", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()"];
d8 [label="Entry CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)", span="36-36", cluster="CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)"];
d66 [label="with.EnableDashDash = true", span="111-111", cluster="lambda expression"];
d60 [label="Assert.IsType<AddOptions>(result.Value)", span="119-119", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()"];
d45 [label="Entry Unk.ShouldBeEquivalentTo", span="", cluster="Unk.ShouldBeEquivalentTo"];
d68 [label="Entry lambda expression", span="120-120", cluster="lambda expression"];
d22 [label="Entry CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", span="141-141", cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])"];
d2 [label="var sut = new Parser(with => with.HelpWriter = writer)", span="19-19", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated()"];
d17 [label="var sut = new Parser(with => with.HelpWriter = writer)", span="35-35", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()"];
d28 [label="var sut = new Parser(with => with.HelpWriter = writer)", span="51-51", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()"];
d48 [label="var sut = new Parser(with => with.EnableDashDash = true)", span="91-91", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()"];
d120 [label="var sut = new Parser(config => config.HelpWriter = help)", span="204-204", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()"];
d145 [label="var sut = new Parser(config => config.HelpWriter = help)", span="236-236", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()"];
d164 [label="var sut = new Parser(config => config.HelpWriter = help)", span="255-255", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()"];
d183 [label="var sut = new Parser(config => config.HelpWriter = help)", span="280-280", cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()"];
d200 [label="var sut = new Parser(config => config.HelpWriter = help)", span="305-305", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)"];
d65 [label="Entry lambda expression", span="111-111", cluster="lambda expression"];
d67 [label="Exit lambda expression", span="111-111", cluster="lambda expression"];
d64 [label="Entry Unk.>", span="", cluster="Unk.>"];
d41 [label="result.Value.ShouldBeEquivalentTo(expectedOptions)", span="76-76", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options()"];
d50 [label="result.Value.ShouldBeEquivalentTo(expectedOptions)", span="98-98", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()"];
d77 [label="result.Value.ShouldBeEquivalentTo(expectedOptions, o => o.RespectingRuntimeTypes())", span="142-142", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()"];
d88 [label="result.Value.ShouldBeEquivalentTo(expectedOptions, o => o.RespectingRuntimeTypes())", span="163-163", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()"];
d97 [label="result.Value.ShouldBeEquivalentTo(expectedOptions)", span="179-179", cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()"];
d170 [label="lines[1].ShouldBeEquivalentTo(''Copyright (c) 2005 - 2015 Giacomo Stelluti Scala'')", span="265-265", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()"];
d171 [label="lines[2].ShouldBeEquivalentTo(''ERROR(S):'')", span="266-266", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()"];
d172 [label="lines[3].ShouldBeEquivalentTo(''No verb selected.'')", span="267-267", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()"];
d173 [label="lines[4].ShouldBeEquivalentTo(''add       Add file contents to the index.'')", span="268-268", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()"];
d174 [label="lines[5].ShouldBeEquivalentTo(''commit    Record changes to the repository.'')", span="269-269", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()"];
d175 [label="lines[6].ShouldBeEquivalentTo(''clone     Clone a repository into a new directory.'')", span="270-270", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()"];
d176 [label="lines[7].ShouldBeEquivalentTo(''help      Display more information on a specific command.'')", span="271-271", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()"];
d189 [label="lines[1].ShouldBeEquivalentTo(''Copyright (c) 2005 - 2015 Giacomo Stelluti Scala'')", span="290-290", cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()"];
d190 [label="lines[2].ShouldBeEquivalentTo(''add       Add file contents to the index.'')", span="291-291", cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()"];
d191 [label="lines[3].ShouldBeEquivalentTo(''commit    Record changes to the repository.'')", span="292-292", cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()"];
d192 [label="lines[4].ShouldBeEquivalentTo(''clone     Clone a repository into a new directory.'')", span="293-293", cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()"];
d193 [label="lines[5].ShouldBeEquivalentTo(''help      Display more information on a specific command.'')", span="294-294", cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()"];
d70 [label="Exit lambda expression", span="120-120", cluster="lambda expression"];
d69 [label="o.RespectingRuntimeTypes()", span="120-120", cluster="lambda expression"];
d18 [label="sut.ParseArguments(new string[] { }, typeof(AddOptions), typeof(CommitOptions), typeof(CloneOptions))", span="38-38", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()"];
d75 [label="var result = sut.ParseArguments(\r\n                new[] { ''clone'', ''-q'', ''http://gsscoder.github.com/'', ''http://yes-to-nooo.github.com/'' },\r\n                typeof(AddOptions), typeof(CommitOptions), typeof(CloneOptions))", span="136-138", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()"];
d1 [label="var writer = new StringWriter()", span="18-18", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated()"];
d3 [label="sut.ParseArguments<FakeOptionWithRequired>(new string[] { })", span="22-22", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated()"];
d13 [label="with.HelpWriter = writer", span="19-19", cluster="lambda expression"];
d16 [label="var writer = new StringWriter()", span="34-34", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()"];
d24 [label="with.HelpWriter = writer", span="35-35", cluster="lambda expression"];
d27 [label="var writer = new StringWriter()", span="50-50", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()"];
d29 [label="sut.ParseArguments<AddOptions, CommitOptions, CloneOptions>(new string[] { })", span="54-54", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()"];
d35 [label="with.HelpWriter = writer", span="51-51", cluster="lambda expression"];
d47 [label="var expectedOptions = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''astring'',\r\n                    LongValue = 20L,\r\n                    StringSequence = new[] { ''--aaa'', ''-b'', ''--ccc'' },\r\n                    IntValue = 30\r\n                }", span="84-90", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()"];
d49 [label="var result = sut.ParseArguments<FakeOptionsWithValues>(\r\n                new[] { ''--stringvalue'', ''astring'', ''--'', ''20'', ''--aaa'', ''-b'', ''--ccc'', ''30'' })", span="94-95", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()"];
d54 [label="with.EnableDashDash = true", span="91-91", cluster="lambda expression"];
d119 [label="var help = new StringWriter()", span="203-203", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()"];
d121 [label="sut.ParseArguments<FakeImmutableOptions>(new[] { ''--help'' })", span="207-207", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()"];
d127 [label="config.HelpWriter = help", span="204-204", cluster="lambda expression"];
d144 [label="var help = new StringWriter()", span="235-235", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()"];
d146 [label="sut.ParseArguments<FakeOptions>(new[] { ''--version'' })", span="239-239", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()"];
d157 [label="config.HelpWriter = help", span="236-236", cluster="lambda expression"];
d163 [label="var help = new StringWriter()", span="254-254", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()"];
d165 [label="sut.ParseArguments<AddOptions, CommitOptions, CloneOptions>(new string [] { })", span="258-258", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()"];
d179 [label="config.HelpWriter = help", span="255-255", cluster="lambda expression"];
d182 [label="var help = new StringWriter()", span="279-279", cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()"];
d184 [label="sut.ParseArguments<AddOptions, CommitOptions, CloneOptions>(new [] { ''--help'' })", span="283-283", cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()"];
d196 [label="config.HelpWriter = help", span="280-280", cluster="lambda expression"];
d199 [label="var help = new StringWriter()", span="304-304", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)"];
d201 [label="sut.ParseArguments<AddOptions, CommitOptions, CloneOptions>(new[] { command })", span="308-308", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)"];
d209 [label="config.HelpWriter = help", span="305-305", cluster="lambda expression"];
d76 [label="Assert.IsType<CloneOptions>(result.Value)", span="141-141", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()"];
d87 [label="Assert.IsType<CloneOptions>(result.Value)", span="162-162", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()"];
d38 [label="var expectedOptions = new FakeOptions\r\n                {\r\n                    StringValue = ''strvalue'', IntSequence = new[] { 1, 2, 3 }\r\n                }", span="66-69", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options()"];
d40 [label="var result = sut.ParseArguments<FakeOptions>(new[] { ''--stringvalue=strvalue'', ''-i1'', ''2'', ''3'' })", span="73-73", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options()"];
d42 [label="Exit CommandLine.Tests.Unit.ParserTests.Parse_options()", span="63-63", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options()"];
d51 [label="Exit CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", span="81-81", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()"];
d73 [label="var expectedOptions = new CloneOptions\r\n                {\r\n                    Quiet = true,\r\n                    Urls = new[] { ''http://gsscoder.github.com/'', ''http://yes-to-nooo.github.com/'' }\r\n                }", span="128-132", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()"];
d78 [label="Exit CommandLine.Tests.Unit.ParserTests.Parse_verbs()", span="125-125", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()"];
d80 [label="Entry lambda expression", span="142-142", cluster="lambda expression"];
d84 [label="var expectedOptions = new CloneOptions\r\n            {\r\n                Quiet = true,\r\n                Urls = new[] { ''http://gsscoder.github.com/'', ''http://yes-to-nooo.github.com/'' }\r\n            }", span="150-154", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()"];
d86 [label="var result = sut.ParseArguments<AddOptions, CommitOptions, CloneOptions>(\r\n                new[] { ''clone'', ''-q'', ''http://gsscoder.github.com/'', ''http://yes-to-nooo.github.com/'' })", span="158-159", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()"];
d89 [label="Exit CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", span="147-147", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()"];
d90 [label="Entry lambda expression", span="163-163", cluster="lambda expression"];
d94 [label="var expectedOptions = new FakeImmutableOptions(\r\n                ''strvalue'', new[] { 1, 2, 3 }, default(bool), default(long))", span="171-172", cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()"];
d96 [label="var result = sut.ParseArguments<FakeImmutableOptions>(new[] { ''--stringvalue=strvalue'', ''-i1'', ''2'', ''3'' })", span="176-176", cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()"];
d98 [label="Exit CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", span="168-168", cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()"];
d168 [label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="263-263", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()"];
d169 [label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="264-264", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()"];
d177 [label="Exit CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", span="251-251", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()"];
d187 [label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="288-288", cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()"];
d188 [label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="289-289", cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()"];
d194 [label="Exit CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", span="276-276", cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()"];
d71 [label="Entry Unk.RespectingRuntimeTypes", span="", cluster="Unk.RespectingRuntimeTypes"];
d19 [label="var text = writer.ToString()", span="41-41", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()"];
d74 [label="var sut = new Parser()", span="133-133", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()"];
d0 [label="Entry CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated()", span="15-15", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated()"];
d7 [label="Entry System.IO.StringWriter.StringWriter()", span="0-0", cluster="System.IO.StringWriter.StringWriter()"];
d4 [label="var text = writer.ToString()", span="25-25", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated()"];
d9 [label="Entry CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", span="84-84", cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)"];
d214 [label=writer, span=""];
d12 [label="Entry lambda expression", span="19-19", cluster="lambda expression"];
d14 [label="Exit lambda expression", span="19-19", cluster="lambda expression"];
d15 [label="Entry CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", span="31-31", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()"];
d215 [label=writer, span=""];
d23 [label="Entry lambda expression", span="35-35", cluster="lambda expression"];
d25 [label="Exit lambda expression", span="35-35", cluster="lambda expression"];
d26 [label="Entry CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", span="47-47", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()"];
d30 [label="var text = writer.ToString()", span="57-57", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()"];
d33 [label="Entry CommandLine.Parser.ParseArguments<T1, T2, T3>(System.Collections.Generic.IEnumerable<string>)", span="46-46", cluster="CommandLine.Parser.ParseArguments<T1, T2, T3>(System.Collections.Generic.IEnumerable<string>)"];
d216 [label=writer, span=""];
d34 [label="Entry lambda expression", span="51-51", cluster="lambda expression"];
d36 [label="Exit lambda expression", span="51-51", cluster="lambda expression"];
d46 [label="Entry CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", span="81-81", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()"];
d52 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()"];
d53 [label="Entry lambda expression", span="91-91", cluster="lambda expression"];
d55 [label="Exit lambda expression", span="91-91", cluster="lambda expression"];
d118 [label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", span="200-200", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()"];
d122 [label="var result = help.ToString()", span="208-208", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()"];
d218 [label=help, span=""];
d126 [label="Entry lambda expression", span="204-204", cluster="lambda expression"];
d128 [label="Exit lambda expression", span="204-204", cluster="lambda expression"];
d143 [label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", span="232-232", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()"];
d147 [label="var result = help.ToString()", span="240-240", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()"];
d220 [label=help, span=""];
d156 [label="Entry lambda expression", span="236-236", cluster="lambda expression"];
d158 [label="Exit lambda expression", span="236-236", cluster="lambda expression"];
d162 [label="Entry CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", span="251-251", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()"];
d166 [label="var result = help.ToString()", span="259-259", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()"];
d221 [label=help, span=""];
d178 [label="Entry lambda expression", span="255-255", cluster="lambda expression"];
d180 [label="Exit lambda expression", span="255-255", cluster="lambda expression"];
d181 [label="Entry CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", span="276-276", cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()"];
d185 [label="var result = help.ToString()", span="284-284", cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()"];
d222 [label=help, span=""];
d195 [label="Entry lambda expression", span="280-280", cluster="lambda expression"];
d197 [label="Exit lambda expression", span="280-280", cluster="lambda expression"];
d198 [label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", span="301-301", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)"];
d202 [label="var result = help.ToString()", span="309-309", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)"];
d223 [label=help, span=""];
d208 [label="Entry lambda expression", span="305-305", cluster="lambda expression"];
d210 [label="Exit lambda expression", span="305-305", cluster="lambda expression"];
d37 [label="Entry CommandLine.Tests.Unit.ParserTests.Parse_options()", span="63-63", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options()"];
d39 [label="var sut = new Parser()", span="70-70", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options()"];
d43 [label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()"];
d72 [label="Entry CommandLine.Tests.Unit.ParserTests.Parse_verbs()", span="125-125", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()"];
d79 [label="Entry CommandLine.Tests.Fakes.CloneOptions.CloneOptions()", span="33-33", cluster="CommandLine.Tests.Fakes.CloneOptions.CloneOptions()"];
d82 [label="Exit lambda expression", span="142-142", cluster="lambda expression"];
d81 [label="o.RespectingRuntimeTypes()", span="142-142", cluster="lambda expression"];
d83 [label="Entry CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", span="147-147", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()"];
d85 [label="var sut = new Parser()", span="155-155", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()"];
d92 [label="Exit lambda expression", span="163-163", cluster="lambda expression"];
d91 [label="o.RespectingRuntimeTypes()", span="163-163", cluster="lambda expression"];
d93 [label="Entry CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", span="168-168", cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()"];
d95 [label="var sut = new Parser()", span="173-173", cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()"];
d99 [label="Entry CommandLine.Tests.Fakes.FakeImmutableOptions.FakeImmutableOptions(string, System.Collections.Generic.IEnumerable<int>, bool, long)", span="13-13", cluster="CommandLine.Tests.Fakes.FakeImmutableOptions.FakeImmutableOptions(string, System.Collections.Generic.IEnumerable<int>, bool, long)"];
d167 [label="result.Length.Should().BeGreaterThan(0)", span="262-262", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()"];
d153 [label="Entry string.ToNotEmptyLines()", span="10-10", cluster="string.ToNotEmptyLines()"];
d154 [label="Entry System.Collections.Generic.IEnumerable<string>.TrimStringArray()", span="15-15", cluster="System.Collections.Generic.IEnumerable<string>.TrimStringArray()"];
d108 [label="Entry Unk.Should", span="", cluster="Unk.Should"];
d155 [label="Entry Unk.StartWithEquivalent", span="", cluster="Unk.StartWithEquivalent"];
d186 [label="result.Length.Should().BeGreaterThan(0)", span="287-287", cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()"];
d20 [label="Assert.True(text.Length > 0)", span="42-42", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()"];
d10 [label="Entry System.IO.StringWriter.ToString()", span="0-0", cluster="System.IO.StringWriter.ToString()"];
d44 [label="Entry CommandLine.Parser.Parser()", span="25-25", cluster="CommandLine.Parser.Parser()"];
d6 [label="Exit CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated()", span="15-15", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated()"];
d5 [label="Assert.True(text.Length > 0)", span="26-26", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated()"];
d103 [label="var result = sut.ParseArguments<FakeImmutableOptions>(new[] { ''--help'' })", span="191-191", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()"];
d132 [label="var result = sut.ParseArguments<FakeOptions>(new[] { ''--version'' })", span="223-223", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()"];
d21 [label="Exit CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", span="31-31", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()"];
d32 [label="Exit CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", span="47-47", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()"];
d31 [label="Assert.True(text.Length > 0)", span="58-58", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()"];
d124 [label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", span="200-200", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()"];
d123 [label="result.Length.Should().BeGreaterThan(0)", span="211-211", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()"];
d152 [label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", span="232-232", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()"];
d148 [label="result.Length.Should().BeGreaterThan(0)", span="243-243", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()"];
d149 [label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="244-244", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()"];
d207 [label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", span="301-301", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)"];
d203 [label="result.Length.Should().BeGreaterThan(0)", span="312-312", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)"];
d204 [label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="313-313", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)"];
d125 [label="Entry Unk.BeGreaterThan", span="", cluster="Unk.BeGreaterThan"];
d105 [label="((NotParsed<FakeImmutableOptions>)result).Errors.Should().ContainSingle(e => e.Equals(expectedError))", span="195-195", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()"];
d104 [label="((NotParsed<FakeImmutableOptions>)result).Errors.Should().HaveCount(x => x == 1)", span="194-194", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()"];
d134 [label="((NotParsed<FakeOptions>)result).Errors.Should().ContainSingle(e => e.Equals(expectedError))", span="227-227", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()"];
d133 [label="((NotParsed<FakeOptions>)result).Errors.Should().HaveCount(x => x == 1)", span="226-226", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()"];
d150 [label="lines.Should().HaveCount(x => x == 1)", span="245-245", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()"];
d151 [label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="246-246", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()"];
d205 [label="lines.Should().HaveCount(x => x == 1)", span="314-314", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)"];
d206 [label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="315-315", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)"];
d11 [label="Entry Unk.True", span="", cluster="Unk.True"];
d102 [label="var sut = new Parser()", span="188-188", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()"];
d131 [label="var sut = new Parser()", span="220-220", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()"];
d101 [label="var expectedError = new HelpRequestedError()", span="187-187", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()"];
d106 [label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", span="184-184", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()"];
d110 [label="Entry Unk.ContainSingle", span="", cluster="Unk.ContainSingle"];
d114 [label="Entry lambda expression", span="195-195", cluster="lambda expression"];
d109 [label="Entry Unk.HaveCount", span="", cluster="Unk.HaveCount"];
d111 [label="Entry lambda expression", span="194-194", cluster="lambda expression"];
d130 [label="var expectedError = new VersionRequestedError()", span="219-219", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()"];
d135 [label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", span="216-216", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()"];
d140 [label="Entry lambda expression", span="227-227", cluster="lambda expression"];
d137 [label="Entry lambda expression", span="226-226", cluster="lambda expression"];
d159 [label="Entry lambda expression", span="245-245", cluster="lambda expression"];
d211 [label="Entry lambda expression", span="314-314", cluster="lambda expression"];
d100 [label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", span="184-184", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()"];
d107 [label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="357-357", cluster="CommandLine.HelpRequestedError.HelpRequestedError()"];
d115 [label="e.Equals(expectedError)", span="195-195", cluster="lambda expression"];
d116 [label="Exit lambda expression", span="195-195", cluster="lambda expression"];
d113 [label="Exit lambda expression", span="194-194", cluster="lambda expression"];
d112 [label="x == 1", span="194-194", cluster="lambda expression"];
d129 [label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", span="216-216", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()"];
d136 [label="Entry CommandLine.VersionRequestedError.VersionRequestedError()", span="421-421", cluster="CommandLine.VersionRequestedError.VersionRequestedError()"];
d141 [label="e.Equals(expectedError)", span="227-227", cluster="lambda expression"];
d142 [label="Exit lambda expression", span="227-227", cluster="lambda expression"];
d139 [label="Exit lambda expression", span="226-226", cluster="lambda expression"];
d138 [label="x == 1", span="226-226", cluster="lambda expression"];
d161 [label="Exit lambda expression", span="245-245", cluster="lambda expression"];
d160 [label="x == 1", span="245-245", cluster="lambda expression"];
d213 [label="Exit lambda expression", span="314-314", cluster="lambda expression"];
d212 [label="x == 1", span="314-314", cluster="lambda expression"];
d217 [label=expectedError, span=""];
d117 [label="Entry Unk.Equals", span="", cluster="Unk.Equals"];
d219 [label=expectedError, span=""];
m0_17 [label="Entry Unk.Be", span="", cluster="Unk.Be", file="ErrorExtensions.cs"];
m0_12 [label="Entry CommandLine.Tests.Fakes.SimpleOptionsWithValueList.SimpleOptionsWithValueList()", span="35-35", cluster="CommandLine.Tests.Fakes.SimpleOptionsWithValueList.SimpleOptionsWithValueList()", file="ErrorExtensions.cs"];
m0_16 [label="Entry Unk.BeTrue", span="", cluster="Unk.BeTrue", file="ErrorExtensions.cs"];
m0_34 [label="Entry CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_outside_bounds()", span="76-76", cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_outside_bounds()", file="ErrorExtensions.cs"];
m0_35 [label="var options = new OptionsWithValueListMaximumThree()", span="78-78", cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_outside_bounds()", file="ErrorExtensions.cs"];
m0_36 [label="var parser = new Parser()", span="79-79", cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_outside_bounds()", file="ErrorExtensions.cs"];
m0_37 [label="var result = parser.ParseArguments(\r\n                    new string[] { ''file.a'', ''file.b'', ''file.c'', ''file.d'' }, options)", span="80-81", cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_outside_bounds()", file="ErrorExtensions.cs"];
m0_38 [label="result.Should().BeFalse()", span="83-83", cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_outside_bounds()", file="ErrorExtensions.cs"];
m0_39 [label="Exit CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_outside_bounds()", span="76-76", cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_outside_bounds()", file="ErrorExtensions.cs"];
m0_18 [label="Entry System.Console.WriteLine(object)", span="0-0", cluster="System.Console.WriteLine(object)", file="ErrorExtensions.cs"];
m0_14 [label="Entry CommandLine.Parser.ParseArguments(string[], object)", span="141-141", cluster="CommandLine.Parser.ParseArguments(string[], object)", file="ErrorExtensions.cs"];
m0_33 [label="Entry Unk.BeFalse", span="", cluster="Unk.BeFalse", file="ErrorExtensions.cs"];
m0_32 [label="Entry Unk.BeNull", span="", cluster="Unk.BeNull", file="ErrorExtensions.cs"];
m0_19 [label="Entry CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_inside_bounds()", span="59-59", cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_inside_bounds()", file="ErrorExtensions.cs"];
m0_20 [label="var options = new OptionsWithValueListMaximumThree()", span="61-61", cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_inside_bounds()", file="ErrorExtensions.cs"];
m0_21 [label="var parser = new Parser()", span="62-62", cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_inside_bounds()", file="ErrorExtensions.cs"];
m0_22 [label="var result = parser.ParseArguments(new string[] { ''file.a'', ''file.b'', ''file.c'' }, options)", span="63-63", cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_inside_bounds()", file="ErrorExtensions.cs"];
m0_24 [label="options.InputFilenames[0].Should().Be(''file.a'')", span="67-67", cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_inside_bounds()", file="ErrorExtensions.cs"];
m0_25 [label="options.InputFilenames[1].Should().Be(''file.b'')", span="68-68", cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_inside_bounds()", file="ErrorExtensions.cs"];
m0_26 [label="options.InputFilenames[2].Should().Be(''file.c'')", span="69-69", cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_inside_bounds()", file="ErrorExtensions.cs"];
m0_27 [label="options.OutputFile.Should().BeNull()", span="70-70", cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_inside_bounds()", file="ErrorExtensions.cs"];
m0_28 [label="options.Overwrite.Should().BeFalse()", span="71-71", cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_inside_bounds()", file="ErrorExtensions.cs"];
m0_29 [label="Console.WriteLine(options)", span="72-72", cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_inside_bounds()", file="ErrorExtensions.cs"];
m0_23 [label="result.Should().BeTrue()", span="65-65", cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_inside_bounds()", file="ErrorExtensions.cs"];
m0_30 [label="Exit CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_inside_bounds()", span="59-59", cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_inside_bounds()", file="ErrorExtensions.cs"];
m0_49 [label="Entry Unk.HaveCount", span="", cluster="Unk.HaveCount", file="ErrorExtensions.cs"];
m0_40 [label="Entry CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_set_to_zero_succeeds()", span="87-87", cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_set_to_zero_succeeds()", file="ErrorExtensions.cs"];
m0_41 [label="var options = new OptionsWithValueListMaximumZero()", span="89-89", cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_set_to_zero_succeeds()", file="ErrorExtensions.cs"];
m0_42 [label="var parser = new Parser()", span="90-90", cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_set_to_zero_succeeds()", file="ErrorExtensions.cs"];
m0_43 [label="var result = parser.ParseArguments(new string[] { }, options)", span="91-91", cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_set_to_zero_succeeds()", file="ErrorExtensions.cs"];
m0_45 [label="options.Junk.Should().HaveCount(n => n == 0)", span="95-95", cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_set_to_zero_succeeds()", file="ErrorExtensions.cs"];
m0_46 [label="Console.WriteLine(options)", span="96-96", cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_set_to_zero_succeeds()", file="ErrorExtensions.cs"];
m0_44 [label="result.Should().BeTrue()", span="93-93", cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_set_to_zero_succeeds()", file="ErrorExtensions.cs"];
m0_47 [label="Exit CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_set_to_zero_succeeds()", span="87-87", cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_set_to_zero_succeeds()", file="ErrorExtensions.cs"];
m0_50 [label="Entry lambda expression", span="95-95", cluster="lambda expression", file="ErrorExtensions.cs"];
m0_51 [label="n == 0", span="95-95", cluster="lambda expression", file="ErrorExtensions.cs"];
m0_52 [label="Exit lambda expression", span="95-95", cluster="lambda expression", file="ErrorExtensions.cs"];
m0_48 [label="Entry CommandLine.Tests.Fakes.OptionsWithValueListMaximumZero.OptionsWithValueListMaximumZero()", span="36-36", cluster="CommandLine.Tests.Fakes.OptionsWithValueListMaximumZero.OptionsWithValueListMaximumZero()", file="ErrorExtensions.cs"];
m0_31 [label="Entry CommandLine.Tests.Fakes.OptionsWithValueListMaximumThree.OptionsWithValueListMaximumThree()", span="35-35", cluster="CommandLine.Tests.Fakes.OptionsWithValueListMaximumThree.OptionsWithValueListMaximumThree()", file="ErrorExtensions.cs"];
m0_53 [label="Entry CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_set_to_zero_failes()", span="100-100", cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_set_to_zero_failes()", file="ErrorExtensions.cs"];
m0_54 [label="var options = new OptionsWithValueListMaximumZero()", span="102-102", cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_set_to_zero_failes()", file="ErrorExtensions.cs"];
m0_55 [label="var parser = new Parser()", span="103-103", cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_set_to_zero_failes()", file="ErrorExtensions.cs"];
m0_56 [label="var result = parser.ParseArguments(new string[] { ''some'', ''value'' }, options)", span="104-104", cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_set_to_zero_failes()", file="ErrorExtensions.cs"];
m0_57 [label="result.Should().BeFalse()", span="106-106", cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_set_to_zero_failes()", file="ErrorExtensions.cs"];
m0_58 [label="Exit CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_set_to_zero_failes()", span="100-100", cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_with_max_elem_set_to_zero_failes()", file="ErrorExtensions.cs"];
m0_0 [label="Entry CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_attribute_isolates_non_option_values()", span="41-41", cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_attribute_isolates_non_option_values()", file="ErrorExtensions.cs"];
m0_1 [label="var options = new SimpleOptionsWithValueList()", span="43-43", cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_attribute_isolates_non_option_values()", file="ErrorExtensions.cs"];
m0_2 [label="var parser = new Parser()", span="44-44", cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_attribute_isolates_non_option_values()", file="ErrorExtensions.cs"];
m0_3 [label="var result = parser.ParseArguments(\r\n                new string[] { ''--switch'', ''file1.ext'', ''file2.ext'', ''file3.ext'', ''-s'', ''out.ext'' }, options)", span="45-46", cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_attribute_isolates_non_option_values()", file="ErrorExtensions.cs"];
m0_5 [label="options.Items[0].Should().Be(''file1.ext'')", span="50-50", cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_attribute_isolates_non_option_values()", file="ErrorExtensions.cs"];
m0_6 [label="options.Items[1].Should().Be(''file2.ext'')", span="51-51", cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_attribute_isolates_non_option_values()", file="ErrorExtensions.cs"];
m0_7 [label="options.Items[2].Should().Be(''file3.ext'')", span="52-52", cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_attribute_isolates_non_option_values()", file="ErrorExtensions.cs"];
m0_8 [label="options.StringValue.Should().Be(''out.ext'')", span="53-53", cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_attribute_isolates_non_option_values()", file="ErrorExtensions.cs"];
m0_9 [label="options.BooleanValue.Should().BeTrue()", span="54-54", cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_attribute_isolates_non_option_values()", file="ErrorExtensions.cs"];
m0_10 [label="Console.WriteLine(options)", span="55-55", cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_attribute_isolates_non_option_values()", file="ErrorExtensions.cs"];
m0_4 [label="result.Should().BeTrue()", span="48-48", cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_attribute_isolates_non_option_values()", file="ErrorExtensions.cs"];
m0_11 [label="Exit CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_attribute_isolates_non_option_values()", span="41-41", cluster="CommandLine.Tests.Unit.ValueListAttributeParsingFixture.Value_list_attribute_isolates_non_option_values()", file="ErrorExtensions.cs"];
m0_15 [label="Entry Unk.Should", span="", cluster="Unk.Should", file="ErrorExtensions.cs"];
m1_0 [label="Entry CommandLine.ValueAttribute.ValueAttribute(int)", span="17-17", cluster="CommandLine.ValueAttribute.ValueAttribute(int)", file="HelpText.cs"];
m1_1 [label="this.index = index", span="19-19", cluster="CommandLine.ValueAttribute.ValueAttribute(int)", file="HelpText.cs"];
m1_2 [label="Exit CommandLine.ValueAttribute.ValueAttribute(int)", span="17-17", cluster="CommandLine.ValueAttribute.ValueAttribute(int)", file="HelpText.cs"];
m1_3 [label="CommandLine.ValueAttribute", span="", file="HelpText.cs"];
m3_6 [label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63", cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="ParserTests.cs"];
m3_9 [label="Entry System.Type.ToTargetType()", span="47-47", cluster="System.Type.ToTargetType()", file="ParserTests.cs"];
m3_7 [label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68", cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="ParserTests.cs"];
m3_8 [label="Entry T.ToMaybe<T>()", span="79-79", cluster="T.ToMaybe<T>()", file="ParserTests.cs"];
m3_0 [label="Entry CommandLine.Core.ValueSpecification.ValueSpecification(int, bool, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType)", span="11-11", cluster="CommandLine.Core.ValueSpecification.ValueSpecification(int, bool, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType)", file="ParserTests.cs"];
m3_1 [label="this.index = index", span="15-15", cluster="CommandLine.Core.ValueSpecification.ValueSpecification(int, bool, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType)", file="ParserTests.cs"];
m3_2 [label="Exit CommandLine.Core.ValueSpecification.ValueSpecification(int, bool, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType)", span="11-11", cluster="CommandLine.Core.ValueSpecification.ValueSpecification(int, bool, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType)", file="ParserTests.cs"];
m3_3 [label="Entry CommandLine.Core.ValueSpecification.FromAttribute(CommandLine.ValueAttribute, System.Type)", span="18-18", cluster="CommandLine.Core.ValueSpecification.FromAttribute(CommandLine.ValueAttribute, System.Type)", file="ParserTests.cs"];
m3_4 [label="return new ValueSpecification(\r\n                attribute.Index,\r\n                attribute.Required,\r\n                attribute.Min == -1 ? Maybe.Nothing<int>() : Maybe.Just(attribute.Min),\r\n                attribute.Max == -1 ? Maybe.Nothing<int>() : Maybe.Just(attribute.Max),\r\n                attribute.Default.ToMaybe(),\r\n                conversionType,\r\n                conversionType.ToTargetType());", span="20-27", cluster="CommandLine.Core.ValueSpecification.FromAttribute(CommandLine.ValueAttribute, System.Type)", file="ParserTests.cs"];
m3_5 [label="Exit CommandLine.Core.ValueSpecification.FromAttribute(CommandLine.ValueAttribute, System.Type)", span="18-18", cluster="CommandLine.Core.ValueSpecification.FromAttribute(CommandLine.ValueAttribute, System.Type)", file="ParserTests.cs"];
m3_10 [label="CommandLine.Core.ValueSpecification", span="", file="ParserTests.cs"];
m5_5 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="SpecificationPropertyExtensions.cs"];
m5_0 [label="Entry CommandLine.Core.NameExtensions.MatchName(string, string, string, System.StringComparer)", span="8-8", cluster="CommandLine.Core.NameExtensions.MatchName(string, string, string, System.StringComparer)", file="SpecificationPropertyExtensions.cs"];
m5_1 [label="value == null", span="10-10", cluster="CommandLine.Core.NameExtensions.MatchName(string, string, string, System.StringComparer)", file="SpecificationPropertyExtensions.cs"];
m5_3 [label="return value.Length == 1\r\n               ? comparer.Equals(value, shortName)\r\n               : comparer.Equals(value, longName);", span="12-14", cluster="CommandLine.Core.NameExtensions.MatchName(string, string, string, System.StringComparer)", file="SpecificationPropertyExtensions.cs"];
m5_2 [label="throw new ArgumentNullException(''value'');", span="10-10", cluster="CommandLine.Core.NameExtensions.MatchName(string, string, string, System.StringComparer)", file="SpecificationPropertyExtensions.cs"];
m5_4 [label="Exit CommandLine.Core.NameExtensions.MatchName(string, string, string, System.StringComparer)", span="8-8", cluster="CommandLine.Core.NameExtensions.MatchName(string, string, string, System.StringComparer)", file="SpecificationPropertyExtensions.cs"];
m5_6 [label="Entry System.StringComparer.Equals(string, string)", span="0-0", cluster="System.StringComparer.Equals(string, string)", file="SpecificationPropertyExtensions.cs"];
m6_74 [label="Entry NameInfo.cstr", span="", cluster="NameInfo.cstr", file="SpecificationPropertyRules.cs"];
m6_4 [label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="24-24", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="SpecificationPropertyRules.cs"];
m6_8 [label="return specProps =>\r\n            {\r\n                var options =\r\n                    from sp in specProps\r\n                    where sp.Specification.IsOption()\r\n                    where sp.Value.IsJust()\r\n                    let o = (OptionSpecification)sp.Specification\r\n                    where o.SetName.Length > 0\r\n                    select o;\r\n                var groups = from o in options\r\n                             group o by o.SetName into g\r\n                             select g;\r\n                if (groups.Count() > 1)\r\n                {\r\n                    return\r\n                        from o in options\r\n                        select new MutuallyExclusiveSetError(o.FromOptionSpecification(), o.SetName);\r\n                }\r\n                return Enumerable.Empty<Error>();\r\n            };", span="26-45", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="SpecificationPropertyRules.cs"];
m6_9 [label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="24-24", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="SpecificationPropertyRules.cs"];
m6_6 [label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="96-96", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="SpecificationPropertyRules.cs"];
m6_40 [label="return specProps =>\r\n                {\r\n                    var options = specProps\r\n                        .Where(sp => sp.Specification.TargetType == TargetType.Sequence)\r\n                        .Where(sp => sp.Value.IsJust())\r\n                        .Where(sp =>\r\n                            (sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJustStrict()).Length < sp.Specification.Min.FromJustStrict())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJustStrict()).Length > sp.Specification.Max.FromJustStrict())\r\n                        );\r\n                    if (options.Any())\r\n                    {\r\n                        return\r\n                            from s in options\r\n                            select new SequenceOutOfRangeError(s.Specification.FromSpecification());\r\n                    }\r\n                    return Enumerable.Empty<Error>();\r\n                };", span="98-114", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", color=green, community=0, file="SpecificationPropertyRules.cs"];
m6_41 [label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="96-96", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="SpecificationPropertyRules.cs"];
m6_38 [label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="316-316", cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs"];
m6_20 [label="Entry MutuallyExclusiveSetError.cstr", span="", cluster="MutuallyExclusiveSetError.cstr", file="SpecificationPropertyRules.cs"];
m6_49 [label="Entry Unk.Any", span="", cluster="Unk.Any", file="SpecificationPropertyRules.cs"];
m6_70 [label="Entry CommandLine.Core.Token.IsName()", span="128-128", cluster="CommandLine.Core.Token.IsName()", file="SpecificationPropertyRules.cs"];
m6_37 [label="Entry CommandLine.Core.Specification.IsValue()", span="15-15", cluster="CommandLine.Core.Specification.IsValue()", file="SpecificationPropertyRules.cs"];
m6_48 [label="Entry Unk.Where", span="", cluster="Unk.Where", file="SpecificationPropertyRules.cs"];
m6_22 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()", file="SpecificationPropertyRules.cs"];
m6_60 [label="Entry Unk.FromJustStrict", span="", cluster="Unk.FromJustStrict", file="SpecificationPropertyRules.cs"];
m6_39 [label="Entry Unk.FromSpecification", span="", cluster="Unk.FromSpecification", file="SpecificationPropertyRules.cs"];
m6_33 [label="Entry Unk.IsNothing", span="", cluster="Unk.IsNothing", file="SpecificationPropertyRules.cs"];
m6_7 [label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="117-117", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs"];
m6_61 [label="return specProps =>\r\n                {\r\n                    var specs = from sp in specProps\r\n                                where sp.Specification.IsOption()\r\n                                where sp.Value.IsJust()\r\n                                select (OptionSpecification)sp.Specification;\r\n                    var options = from t in tokens\r\n                                  where t.IsName()\r\n                                  join o in specs on t.Text equals o.UniqueName() into to\r\n                                  from o in to.DefaultIfEmpty()\r\n                                  where o != null\r\n                                  select new { o.ShortName, o.LongName };\r\n                    var groups = from x in options\r\n                                 group x by x into g\r\n                                 let count = g.Count()\r\n                                 select new { Value = g.Key, Count = count };\r\n                    var errors = from y in groups\r\n                                 where y.Count > 1\r\n                                 select new RepeatedOptionError(new NameInfo(y.Value.ShortName, y.Value.LongName));\r\n                    return errors;\r\n                };", span="119-139", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs"];
m6_62 [label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="117-117", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs"];
m6_50 [label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="360-360", cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs"];
m6_0 [label="Entry CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12", cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs"];
m6_1 [label="return new List<Func<IEnumerable<SpecificationProperty>, IEnumerable<Error>>>\r\n                {\r\n                    EnforceMutuallyExclusiveSet(),\r\n                    EnforceRequired(),\r\n                    EnforceRange(),\r\n                    EnforceSingle(tokens)\r\n                };", span="15-21", cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs"];
m6_2 [label="Exit CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12", cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs"];
m6_63 [label="Entry lambda expression", span="119-139", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_43 [label="var options = specProps\r\n                        .Where(sp => sp.Specification.TargetType == TargetType.Sequence)\r\n                        .Where(sp => sp.Value.IsJust())\r\n                        .Where(sp =>\r\n                            (sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJustStrict()).Length < sp.Specification.Min.FromJustStrict())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJustStrict()).Length > sp.Specification.Max.FromJustStrict())\r\n                        )", span="100-106", cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs"];
m6_42 [label="Entry lambda expression", span="98-114", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_44 [label="options.Any()", span="107-107", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_51 [label="Entry lambda expression", span="101-101", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_54 [label="Entry lambda expression", span="102-102", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_57 [label="Entry lambda expression", span="103-105", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_45 [label="return\r\n                            from s in options\r\n                            select new SequenceOutOfRangeError(s.Specification.FromSpecification());", span="109-111", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_58 [label="(sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJustStrict()).Length < sp.Specification.Min.FromJustStrict())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJustStrict()).Length > sp.Specification.Max.FromJustStrict())", span="104-105", cluster="lambda expression", color=green, community=1, file="SpecificationPropertyRules.cs"];
m6_59 [label="Exit lambda expression", span="103-105", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_47 [label="Exit lambda expression", span="98-114", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_46 [label="return Enumerable.Empty<Error>();", span="113-113", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_53 [label="Exit lambda expression", span="101-101", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_52 [label="sp.Specification.TargetType == TargetType.Sequence", span="101-101", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_56 [label="Exit lambda expression", span="102-102", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_55 [label="sp.Value.IsJust()", span="102-102", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_11 [label="var options =\r\n                    from sp in specProps\r\n                    where sp.Specification.IsOption()\r\n                    where sp.Value.IsJust()\r\n                    let o = (OptionSpecification)sp.Specification\r\n                    where o.SetName.Length > 0\r\n                    select o", span="28-34", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_26 [label="var requiredWithValue = from sp in specProps\r\n                    where sp.Specification.IsOption()\r\n                    where sp.Specification.Required\r\n                    where sp.Value.IsJust()\r\n                    let o = (OptionSpecification)sp.Specification\r\n                    where o.SetName.Length > 0\r\n                    select sp.Specification", span="52-58", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_64 [label="var specs = from sp in specProps\r\n                                where sp.Specification.IsOption()\r\n                                where sp.Value.IsJust()\r\n                                select (OptionSpecification)sp.Specification", span="121-124", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_30 [label="return\r\n                    from sp in missing\r\n                    select new MissingRequiredOptionError(sp.FromSpecification());", span="90-92", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_10 [label="Entry lambda expression", span="26-45", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_12 [label="var groups = from o in options\r\n                             group o by o.SetName into g\r\n                             select g", span="35-37", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_14 [label="return\r\n                        from o in options\r\n                        select new MutuallyExclusiveSetError(o.FromOptionSpecification(), o.SetName);", span="40-42", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_25 [label="Entry lambda expression", span="50-93", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_27 [label="var setWithRequiredValue = (\r\n                    from s in requiredWithValue\r\n                    let o = (OptionSpecification)s\r\n                    where o.SetName.Length > 0\r\n                    select o.SetName)\r\n                        .Distinct()", span="59-64", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_29 [label="var missing =\r\n                    requiredWithoutValue\r\n                        .Except(requiredWithValue)\r\n                        .Concat(\r\n                            from sp in specProps\r\n                            where sp.Specification.IsOption()\r\n                            where sp.Specification.Required\r\n                            where sp.Value.IsNothing()\r\n                            let o = (OptionSpecification)sp.Specification\r\n                            where o.SetName.Length == 0\r\n                            select sp.Specification)\r\n                        .Concat(\r\n                            from sp in specProps\r\n                            where sp.Specification.IsValue()\r\n                            where sp.Specification.Required\r\n                            where sp.Value.IsNothing()\r\n                            select sp.Specification)", span="73-89", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_65 [label="var options = from t in tokens\r\n                                  where t.IsName()\r\n                                  join o in specs on t.Text equals o.UniqueName() into to\r\n                                  from o in to.DefaultIfEmpty()\r\n                                  where o != null\r\n                                  select new { o.ShortName, o.LongName }", span="125-130", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_15 [label="return Enumerable.Empty<Error>();", span="44-44", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_31 [label="Exit lambda expression", span="50-93", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_16 [label="Exit lambda expression", span="26-45", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_13 [label="groups.Count() > 1", span="38-38", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_28 [label="var requiredWithoutValue = from sp in specProps\r\n                    where sp.Specification.IsOption()\r\n                    where sp.Specification.Required\r\n                    where sp.Value.IsNothing()\r\n                    let o = (OptionSpecification)sp.Specification\r\n                    where o.SetName.Length > 0\r\n                    where setWithRequiredValue.ContainsIfNotEmpty(o.SetName)\r\n                    select sp.Specification", span="65-72", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_66 [label="var groups = from x in options\r\n                                 group x by x into g\r\n                                 let count = g.Count()\r\n                                 select new { Value = g.Key, Count = count }", span="131-134", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_68 [label="return errors;", span="138-138", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_67 [label="var errors = from y in groups\r\n                                 where y.Count > 1\r\n                                 select new RepeatedOptionError(new NameInfo(y.Value.ShortName, y.Value.LongName))", span="135-137", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_69 [label="Exit lambda expression", span="119-139", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_73 [label="Entry CommandLine.RepeatedOptionError.RepeatedOptionError(CommandLine.NameInfo)", span="371-371", cluster="CommandLine.RepeatedOptionError.RepeatedOptionError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs"];
m6_36 [label="Entry Unk.Concat", span="", cluster="Unk.Concat", file="SpecificationPropertyRules.cs"];
m6_5 [label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="48-48", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", file="SpecificationPropertyRules.cs"];
m6_23 [label="return specProps =>\r\n            {\r\n                var requiredWithValue = from sp in specProps\r\n                    where sp.Specification.IsOption()\r\n                    where sp.Specification.Required\r\n                    where sp.Value.IsJust()\r\n                    let o = (OptionSpecification)sp.Specification\r\n                    where o.SetName.Length > 0\r\n                    select sp.Specification;\r\n                var setWithRequiredValue = (\r\n                    from s in requiredWithValue\r\n                    let o = (OptionSpecification)s\r\n                    where o.SetName.Length > 0\r\n                    select o.SetName)\r\n                        .Distinct();\r\n                var requiredWithoutValue = from sp in specProps\r\n                    where sp.Specification.IsOption()\r\n                    where sp.Specification.Required\r\n                    where sp.Value.IsNothing()\r\n                    let o = (OptionSpecification)sp.Specification\r\n                    where o.SetName.Length > 0\r\n                    where setWithRequiredValue.ContainsIfNotEmpty(o.SetName)\r\n                    select sp.Specification;\r\n                var missing =\r\n                    requiredWithoutValue\r\n                        .Except(requiredWithValue)\r\n                        .Concat(\r\n                            from sp in specProps\r\n                            where sp.Specification.IsOption()\r\n                            where sp.Specification.Required\r\n                            where sp.Value.IsNothing()\r\n                            let o = (OptionSpecification)sp.Specification\r\n                            where o.SetName.Length == 0\r\n                            select sp.Specification)\r\n                        .Concat(\r\n                            from sp in specProps\r\n                            where sp.Specification.IsValue()\r\n                            where sp.Specification.Required\r\n                            where sp.Value.IsNothing()\r\n                            select sp.Specification);\r\n                return\r\n                    from sp in missing\r\n                    select new MissingRequiredOptionError(sp.FromSpecification());\r\n            };", span="50-93", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", file="SpecificationPropertyRules.cs"];
m6_24 [label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="48-48", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", file="SpecificationPropertyRules.cs"];
m6_18 [label="Entry Unk.IsJust", span="", cluster="Unk.IsJust", file="SpecificationPropertyRules.cs"];
m6_34 [label="Entry Unk.ContainsIfNotEmpty", span="", cluster="Unk.ContainsIfNotEmpty", file="SpecificationPropertyRules.cs"];
m6_71 [label="Entry Unk.UniqueName", span="", cluster="Unk.UniqueName", file="SpecificationPropertyRules.cs"];
m6_35 [label="Entry Unk.Except", span="", cluster="Unk.Except", file="SpecificationPropertyRules.cs"];
m6_72 [label="Entry Unk.DefaultIfEmpty", span="", cluster="Unk.DefaultIfEmpty", file="SpecificationPropertyRules.cs"];
m6_17 [label="Entry CommandLine.Core.Specification.IsOption()", span="10-10", cluster="CommandLine.Core.Specification.IsOption()", file="SpecificationPropertyRules.cs"];
m6_3 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="SpecificationPropertyRules.cs"];
m6_32 [label="Entry Unk.Distinct", span="", cluster="Unk.Distinct", file="SpecificationPropertyRules.cs"];
m6_19 [label="Entry Unk.Count", span="", cluster="Unk.Count", file="SpecificationPropertyRules.cs"];
m6_21 [label="Entry Unk.FromOptionSpecification", span="", cluster="Unk.FromOptionSpecification", file="SpecificationPropertyRules.cs"];
m6_82 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", span="", file="SpecificationPropertyRules.cs"];
m7_3 [label="Exit CommandLine.OptionListAttribute.OptionListAttribute(string)", span="58-58", cluster="CommandLine.OptionListAttribute.OptionListAttribute(string)", file="StringExtensions.cs"];
m7_7 [label="Entry CommandLine.OptionListAttribute.OptionListAttribute(char, string, char)", span="80-80", cluster="CommandLine.OptionListAttribute.OptionListAttribute(char, string, char)", file="StringExtensions.cs"];
m7_8 [label="Separator = separator", span="83-83", cluster="CommandLine.OptionListAttribute.OptionListAttribute(char, string, char)", file="StringExtensions.cs"];
m7_9 [label="Exit CommandLine.OptionListAttribute.OptionListAttribute(char, string, char)", span="80-80", cluster="CommandLine.OptionListAttribute.OptionListAttribute(char, string, char)", file="StringExtensions.cs"];
m7_0 [label="Entry CommandLine.OptionListAttribute.OptionListAttribute(char)", span="49-49", cluster="CommandLine.OptionListAttribute.OptionListAttribute(char)", file="StringExtensions.cs"];
m7_1 [label="Exit CommandLine.OptionListAttribute.OptionListAttribute(char)", span="49-49", cluster="CommandLine.OptionListAttribute.OptionListAttribute(char)", file="StringExtensions.cs"];
m7_25 [label="Entry CommandLine.Infrastructure.StringExtensions.SafeLength(string)", span="45-45", cluster="CommandLine.Infrastructure.StringExtensions.SafeLength(string)", file="StringExtensions.cs"];
m7_26 [label="return value == null ? 0 : value.Length;", span="47-47", cluster="CommandLine.Infrastructure.StringExtensions.SafeLength(string)", color=green, community=0, file="StringExtensions.cs"];
m7_27 [label="Exit CommandLine.Infrastructure.StringExtensions.SafeLength(string)", span="45-45", cluster="CommandLine.Infrastructure.StringExtensions.SafeLength(string)", file="StringExtensions.cs"];
m7_4 [label="Entry CommandLine.OptionListAttribute.OptionListAttribute(char, string)", span="68-68", cluster="CommandLine.OptionListAttribute.OptionListAttribute(char, string)", file="StringExtensions.cs"];
m7_5 [label="Separator = ':'", span="71-71", cluster="CommandLine.OptionListAttribute.OptionListAttribute(char, string)", file="StringExtensions.cs"];
m7_6 [label="Exit CommandLine.OptionListAttribute.OptionListAttribute(char, string)", span="68-68", cluster="CommandLine.OptionListAttribute.OptionListAttribute(char, string)", file="StringExtensions.cs"];
m7_10 [label="CommandLine.OptionListAttribute", span="", file="StringExtensions.cs"];
m9_0 [label="Entry CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11", cluster="CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TypeConverter.cs"];
m9_1 [label="return from tseq in tokens.Pairwise(\r\n                (f, s) =>\r\n                        f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).Return(info =>\r\n                                    info.Tag == TypeDescriptorKind.Scalar ? new[] { f, s } : new Token[] { }, new Token[] { })\r\n                                    : new Token[] { })\r\n                   from t in tseq\r\n                   select t;", span="15-22", cluster="CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TypeConverter.cs"];
m9_2 [label="Exit CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11", cluster="CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TypeConverter.cs"];
m9_3 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Pairwise<TSource, TResult>(System.Func<TSource, TSource, TResult>)", span="10-10", cluster="System.Collections.Generic.IEnumerable<TSource>.Pairwise<TSource, TResult>(System.Func<TSource, TSource, TResult>)", file="TypeConverter.cs"];
m9_11 [label="Entry lambda expression", span="18-19", cluster="lambda expression", file="TypeConverter.cs"];
m9_5 [label="f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).Return(info =>\r\n                                    info.Tag == TypeDescriptorKind.Scalar ? new[] { f, s } : new Token[] { }, new Token[] { })\r\n                                    : new Token[] { }", span="17-20", cluster="lambda expression", file="TypeConverter.cs"];
m9_4 [label="Entry lambda expression", span="16-20", cluster="lambda expression", file="TypeConverter.cs"];
m9_12 [label="info.Tag == TypeDescriptorKind.Scalar ? new[] { f, s } : new Token[] { }", span="19-19", cluster="lambda expression", file="TypeConverter.cs"];
m9_6 [label="Exit lambda expression", span="16-20", cluster="lambda expression", file="TypeConverter.cs"];
m9_13 [label="Exit lambda expression", span="18-19", cluster="lambda expression", file="TypeConverter.cs"];
m9_10 [label="Entry CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", span="100-100", cluster="CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", file="TypeConverter.cs"];
m9_7 [label="Entry CommandLine.Core.Token.IsName()", span="68-68", cluster="CommandLine.Core.Token.IsName()", file="TypeConverter.cs"];
m9_8 [label="Entry CommandLine.Core.Token.IsValue()", span="73-73", cluster="CommandLine.Core.Token.IsValue()", file="TypeConverter.cs"];
m9_9 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)", file="TypeConverter.cs"];
m9_14 [label="System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>", span="", file="TypeConverter.cs"];
m9_15 [label="CommandLine.Core.Token", span="", file="TypeConverter.cs"];
m9_16 [label="CommandLine.Core.Token", span="", file="TypeConverter.cs"];
n0 -> n1  [key=0, style=solid];
n1 -> n0  [key=0, style=bold, color=blue];
n2 -> n3  [key=0, style=solid];
n3 -> n2  [key=0, style=bold, color=blue];
n4 -> n5  [key=0, style=solid];
n5 -> n6  [key=0, style=solid];
n5 -> n7  [key=2, style=dotted];
n5 -> n8  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n6 -> n4  [key=0, style=bold, color=blue];
n8 -> n9  [key=0, style=solid];
n9 -> n10  [key=0, style=solid];
n9 -> n11  [key=2, style=dotted];
n10 -> n8  [key=0, style=bold, color=blue];
n12 -> n13  [key=0, style=solid];
n13 -> n14  [key=0, style=solid];
n13 -> n7  [key=2, style=dotted];
n13 -> n15  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n14 -> n12  [key=0, style=bold, color=blue];
n15 -> n16  [key=0, style=solid];
n16 -> n17  [key=0, style=solid];
n16 -> n11  [key=2, style=dotted];
n17 -> n15  [key=0, style=bold, color=blue];
n18 -> n19  [key=0, style=solid];
n19 -> n20  [key=0, style=solid];
n19 -> n7  [key=2, style=dotted];
n19 -> n21  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n20 -> n18  [key=0, style=bold, color=blue];
n21 -> n22  [key=0, style=solid];
n22 -> n23  [key=0, style=solid];
n22 -> n11  [key=2, style=dotted];
n23 -> n21  [key=0, style=bold, color=blue];
n24 -> n25  [key=0, style=solid];
n25 -> n26  [key=0, style=solid];
n25 -> n7  [key=2, style=dotted];
n25 -> n27  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n26 -> n24  [key=0, style=bold, color=blue];
n27 -> n28  [key=0, style=solid];
n28 -> n29  [key=0, style=solid];
n28 -> n11  [key=2, style=dotted];
n29 -> n27  [key=0, style=bold, color=blue];
n30 -> n31  [key=0, style=solid];
n31 -> n32  [key=0, style=solid];
n31 -> n36  [key=2, style=dotted];
n32 -> n33  [key=0, style=solid];
n32 -> n37  [key=2, style=dotted];
n33 -> n34  [key=0, style=solid];
n33 -> n38  [key=2, style=dotted];
n34 -> n35  [key=0, style=solid];
n34 -> n2  [key=2, style=dotted];
n35 -> n30  [key=0, style=bold, color=blue];
n39 -> n40  [key=0, style=solid];
n40 -> n41  [key=0, style=solid];
n40 -> n45  [key=2, style=dotted];
n41 -> n42  [key=0, style=solid];
n41 -> n46  [key=2, style=dotted];
n42 -> n43  [key=0, style=solid];
n42 -> n47  [key=2, style=dotted];
n43 -> n44  [key=0, style=solid];
n43 -> n0  [key=2, style=dotted];
n44 -> n39  [key=0, style=bold, color=blue];
d57 -> d58  [key=0, style=solid, color=green];
d57 -> d63  [key=2, style=dotted, color=green];
d57 -> d61  [key=1, style=dashed, color=green, label=expectedOptions];
d56 -> d57  [key=0, style=solid, color=green];
d58 -> d59  [key=0, style=solid];
d58 -> d8  [key=2, style=dotted];
d58 -> d66  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
d61 -> d62  [key=0, style=solid];
d61 -> d45  [key=2, style=dotted];
d61 -> d68  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d62 -> d56  [key=0, style=bold, color=blue];
d59 -> d61  [key=1, style=dashed, color=darkseagreen4, label=result];
d59 -> d60  [key=0, style=solid];
d59 -> d22  [key=2, style=dotted];
d66 -> d67  [key=0, style=solid];
d60 -> d61  [key=0, style=solid];
d60 -> d64  [key=2, style=dotted];
d68 -> d69  [key=0, style=solid];
d2 -> d8  [key=2, style=dotted];
d2 -> d3  [key=0, style=solid];
d2 -> d13  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
d17 -> d8  [key=2, style=dotted];
d17 -> d18  [key=0, style=solid];
d17 -> d24  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
d28 -> d8  [key=2, style=dotted];
d28 -> d29  [key=0, style=solid];
d28 -> d35  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
d48 -> d8  [key=2, style=dotted];
d48 -> d49  [key=0, style=solid];
d48 -> d54  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
d120 -> d8  [key=2, style=dotted];
d120 -> d121  [key=0, style=solid];
d120 -> d127  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
d145 -> d8  [key=2, style=dotted];
d145 -> d146  [key=0, style=solid];
d145 -> d157  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
d164 -> d8  [key=2, style=dotted];
d164 -> d165  [key=0, style=solid];
d164 -> d179  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
d183 -> d8  [key=2, style=dotted];
d183 -> d184  [key=0, style=solid];
d183 -> d196  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
d200 -> d8  [key=2, style=dotted];
d200 -> d201  [key=0, style=solid];
d200 -> d209  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
d65 -> d66  [key=0, style=solid];
d67 -> d65  [key=0, style=bold, color=blue];
d41 -> d45  [key=2, style=dotted];
d41 -> d42  [key=0, style=solid];
d50 -> d45  [key=2, style=dotted];
d50 -> d51  [key=0, style=solid];
d77 -> d45  [key=2, style=dotted];
d77 -> d78  [key=0, style=solid];
d77 -> d80  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d88 -> d45  [key=2, style=dotted];
d88 -> d89  [key=0, style=solid];
d88 -> d90  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d97 -> d45  [key=2, style=dotted];
d97 -> d98  [key=0, style=solid];
d170 -> d45  [key=2, style=dotted];
d170 -> d171  [key=0, style=solid];
d171 -> d45  [key=2, style=dotted];
d171 -> d172  [key=0, style=solid];
d172 -> d45  [key=2, style=dotted];
d172 -> d173  [key=0, style=solid];
d173 -> d45  [key=2, style=dotted];
d173 -> d174  [key=0, style=solid];
d174 -> d45  [key=2, style=dotted];
d174 -> d175  [key=0, style=solid];
d175 -> d45  [key=2, style=dotted];
d175 -> d176  [key=0, style=solid];
d176 -> d45  [key=2, style=dotted];
d176 -> d177  [key=0, style=solid];
d189 -> d45  [key=2, style=dotted];
d189 -> d190  [key=0, style=solid];
d190 -> d45  [key=2, style=dotted];
d190 -> d191  [key=0, style=solid];
d191 -> d45  [key=2, style=dotted];
d191 -> d192  [key=0, style=solid];
d192 -> d45  [key=2, style=dotted];
d192 -> d193  [key=0, style=solid];
d193 -> d45  [key=2, style=dotted];
d193 -> d194  [key=0, style=solid];
d70 -> d68  [key=0, style=bold, color=blue];
d69 -> d70  [key=0, style=solid];
d69 -> d71  [key=2, style=dotted];
d18 -> d22  [key=2, style=dotted];
d18 -> d19  [key=0, style=solid];
d75 -> d22  [key=2, style=dotted];
d75 -> d77  [key=1, style=dashed, color=darkseagreen4, label=result];
d75 -> d76  [key=0, style=solid];
d1 -> d2  [key=0, style=solid];
d1 -> d7  [key=2, style=dotted];
d1 -> d13  [key=1, style=dashed, color=darkseagreen4, label=writer];
d1 -> d4  [key=1, style=dashed, color=darkseagreen4, label=writer];
d3 -> d4  [key=0, style=solid];
d3 -> d9  [key=2, style=dotted];
d13 -> d14  [key=0, style=solid];
d16 -> d17  [key=0, style=solid];
d16 -> d7  [key=2, style=dotted];
d16 -> d24  [key=1, style=dashed, color=darkseagreen4, label=writer];
d16 -> d19  [key=1, style=dashed, color=darkseagreen4, label=writer];
d24 -> d25  [key=0, style=solid];
d27 -> d28  [key=0, style=solid];
d27 -> d7  [key=2, style=dotted];
d27 -> d35  [key=1, style=dashed, color=darkseagreen4, label=writer];
d27 -> d30  [key=1, style=dashed, color=darkseagreen4, label=writer];
d29 -> d30  [key=0, style=solid];
d29 -> d33  [key=2, style=dotted];
d35 -> d36  [key=0, style=solid];
d47 -> d48  [key=0, style=solid];
d47 -> d50  [key=1, style=dashed, color=darkseagreen4, label=expectedOptions];
d47 -> d52  [key=2, style=dotted];
d49 -> d50  [key=0, style=solid];
d49 -> d9  [key=2, style=dotted];
d54 -> d55  [key=0, style=solid];
d119 -> d120  [key=0, style=solid];
d119 -> d7  [key=2, style=dotted];
d119 -> d127  [key=1, style=dashed, color=darkseagreen4, label=help];
d119 -> d122  [key=1, style=dashed, color=darkseagreen4, label=help];
d121 -> d122  [key=0, style=solid];
d121 -> d9  [key=2, style=dotted];
d127 -> d128  [key=0, style=solid];
d144 -> d145  [key=0, style=solid];
d144 -> d7  [key=2, style=dotted];
d144 -> d157  [key=1, style=dashed, color=darkseagreen4, label=help];
d144 -> d147  [key=1, style=dashed, color=darkseagreen4, label=help];
d146 -> d147  [key=0, style=solid];
d146 -> d9  [key=2, style=dotted];
d157 -> d158  [key=0, style=solid];
d163 -> d164  [key=0, style=solid];
d163 -> d7  [key=2, style=dotted];
d163 -> d179  [key=1, style=dashed, color=darkseagreen4, label=help];
d163 -> d166  [key=1, style=dashed, color=darkseagreen4, label=help];
d165 -> d166  [key=0, style=solid];
d165 -> d33  [key=2, style=dotted];
d179 -> d180  [key=0, style=solid];
d182 -> d183  [key=0, style=solid];
d182 -> d7  [key=2, style=dotted];
d182 -> d196  [key=1, style=dashed, color=darkseagreen4, label=help];
d182 -> d185  [key=1, style=dashed, color=darkseagreen4, label=help];
d184 -> d185  [key=0, style=solid];
d184 -> d33  [key=2, style=dotted];
d196 -> d197  [key=0, style=solid];
d199 -> d200  [key=0, style=solid];
d199 -> d7  [key=2, style=dotted];
d199 -> d209  [key=1, style=dashed, color=darkseagreen4, label=help];
d199 -> d202  [key=1, style=dashed, color=darkseagreen4, label=help];
d201 -> d202  [key=0, style=solid];
d201 -> d33  [key=2, style=dotted];
d209 -> d210  [key=0, style=solid];
d76 -> d64  [key=2, style=dotted];
d76 -> d77  [key=0, style=solid];
d87 -> d64  [key=2, style=dotted];
d87 -> d88  [key=0, style=solid];
d38 -> d41  [key=1, style=dashed, color=darkseagreen4, label=expectedOptions];
d38 -> d39  [key=0, style=solid];
d38 -> d43  [key=2, style=dotted];
d40 -> d41  [key=0, style=solid];
d40 -> d9  [key=2, style=dotted];
d42 -> d37  [key=0, style=bold, color=blue];
d51 -> d46  [key=0, style=bold, color=blue];
d73 -> d77  [key=1, style=dashed, color=darkseagreen4, label=expectedOptions];
d73 -> d74  [key=0, style=solid];
d73 -> d79  [key=2, style=dotted];
d78 -> d72  [key=0, style=bold, color=blue];
d80 -> d81  [key=0, style=solid];
d84 -> d88  [key=1, style=dashed, color=darkseagreen4, label=expectedOptions];
d84 -> d85  [key=0, style=solid];
d84 -> d79  [key=2, style=dotted];
d86 -> d88  [key=1, style=dashed, color=darkseagreen4, label=result];
d86 -> d87  [key=0, style=solid];
d86 -> d33  [key=2, style=dotted];
d89 -> d83  [key=0, style=bold, color=blue];
d90 -> d91  [key=0, style=solid];
d94 -> d97  [key=1, style=dashed, color=darkseagreen4, label=expectedOptions];
d94 -> d95  [key=0, style=solid];
d94 -> d99  [key=2, style=dotted];
d96 -> d97  [key=0, style=solid];
d96 -> d9  [key=2, style=dotted];
d98 -> d93  [key=0, style=bold, color=blue];
d168 -> d170  [key=1, style=dashed, color=darkseagreen4, label=lines];
d168 -> d171  [key=1, style=dashed, color=darkseagreen4, label=lines];
d168 -> d172  [key=1, style=dashed, color=darkseagreen4, label=lines];
d168 -> d173  [key=1, style=dashed, color=darkseagreen4, label=lines];
d168 -> d174  [key=1, style=dashed, color=darkseagreen4, label=lines];
d168 -> d175  [key=1, style=dashed, color=darkseagreen4, label=lines];
d168 -> d176  [key=1, style=dashed, color=darkseagreen4, label=lines];
d168 -> d169  [key=0, style=solid];
d168 -> d153  [key=2, style=dotted];
d168 -> d154  [key=2, style=dotted];
d169 -> d170  [key=0, style=solid];
d169 -> d108  [key=2, style=dotted];
d169 -> d155  [key=2, style=dotted];
d177 -> d162  [key=0, style=bold, color=blue];
d187 -> d189  [key=1, style=dashed, color=darkseagreen4, label=lines];
d187 -> d190  [key=1, style=dashed, color=darkseagreen4, label=lines];
d187 -> d191  [key=1, style=dashed, color=darkseagreen4, label=lines];
d187 -> d192  [key=1, style=dashed, color=darkseagreen4, label=lines];
d187 -> d193  [key=1, style=dashed, color=darkseagreen4, label=lines];
d187 -> d188  [key=0, style=solid];
d187 -> d153  [key=2, style=dotted];
d187 -> d154  [key=2, style=dotted];
d188 -> d189  [key=0, style=solid];
d188 -> d108  [key=2, style=dotted];
d188 -> d155  [key=2, style=dotted];
d194 -> d181  [key=0, style=bold, color=blue];
d19 -> d20  [key=0, style=solid];
d19 -> d10  [key=2, style=dotted];
d74 -> d75  [key=0, style=solid];
d74 -> d44  [key=2, style=dotted];
d0 -> d1  [key=0, style=solid];
d4 -> d5  [key=0, style=solid];
d4 -> d10  [key=2, style=dotted];
d214 -> d13  [key=1, style=dashed, color=darkseagreen4, label=writer];
d12 -> d13  [key=0, style=solid];
d14 -> d12  [key=0, style=bold, color=blue];
d15 -> d16  [key=0, style=solid];
d215 -> d24  [key=1, style=dashed, color=darkseagreen4, label=writer];
d23 -> d24  [key=0, style=solid];
d25 -> d23  [key=0, style=bold, color=blue];
d26 -> d27  [key=0, style=solid];
d30 -> d31  [key=0, style=solid];
d30 -> d10  [key=2, style=dotted];
d216 -> d35  [key=1, style=dashed, color=darkseagreen4, label=writer];
d34 -> d35  [key=0, style=solid];
d36 -> d34  [key=0, style=bold, color=blue];
d46 -> d47  [key=0, style=solid];
d53 -> d54  [key=0, style=solid];
d55 -> d53  [key=0, style=bold, color=blue];
d118 -> d119  [key=0, style=solid];
d122 -> d123  [key=0, style=solid];
d122 -> d10  [key=2, style=dotted];
d218 -> d127  [key=1, style=dashed, color=darkseagreen4, label=help];
d126 -> d127  [key=0, style=solid];
d128 -> d126  [key=0, style=bold, color=blue];
d143 -> d144  [key=0, style=solid];
d147 -> d148  [key=0, style=solid];
d147 -> d10  [key=2, style=dotted];
d147 -> d149  [key=1, style=dashed, color=darkseagreen4, label=result];
d220 -> d157  [key=1, style=dashed, color=darkseagreen4, label=help];
d156 -> d157  [key=0, style=solid];
d158 -> d156  [key=0, style=bold, color=blue];
d162 -> d163  [key=0, style=solid];
d166 -> d168  [key=1, style=dashed, color=darkseagreen4, label=result];
d166 -> d167  [key=0, style=solid];
d166 -> d10  [key=2, style=dotted];
d221 -> d179  [key=1, style=dashed, color=darkseagreen4, label=help];
d178 -> d179  [key=0, style=solid];
d180 -> d178  [key=0, style=bold, color=blue];
d181 -> d182  [key=0, style=solid];
d185 -> d187  [key=1, style=dashed, color=darkseagreen4, label=result];
d185 -> d186  [key=0, style=solid];
d185 -> d10  [key=2, style=dotted];
d222 -> d196  [key=1, style=dashed, color=darkseagreen4, label=help];
d195 -> d196  [key=0, style=solid];
d197 -> d195  [key=0, style=bold, color=blue];
d198 -> d199  [key=0, style=solid];
d198 -> d201  [key=1, style=dashed, color=darkseagreen4, label=string];
d202 -> d203  [key=0, style=solid];
d202 -> d10  [key=2, style=dotted];
d202 -> d204  [key=1, style=dashed, color=darkseagreen4, label=result];
d223 -> d209  [key=1, style=dashed, color=darkseagreen4, label=help];
d208 -> d209  [key=0, style=solid];
d210 -> d208  [key=0, style=bold, color=blue];
d37 -> d38  [key=0, style=solid];
d39 -> d40  [key=0, style=solid];
d39 -> d44  [key=2, style=dotted];
d72 -> d73  [key=0, style=solid];
d82 -> d80  [key=0, style=bold, color=blue];
d81 -> d71  [key=2, style=dotted];
d81 -> d82  [key=0, style=solid];
d83 -> d84  [key=0, style=solid];
d85 -> d86  [key=0, style=solid];
d85 -> d44  [key=2, style=dotted];
d92 -> d90  [key=0, style=bold, color=blue];
d91 -> d71  [key=2, style=dotted];
d91 -> d92  [key=0, style=solid];
d93 -> d94  [key=0, style=solid];
d95 -> d96  [key=0, style=solid];
d95 -> d44  [key=2, style=dotted];
d167 -> d168  [key=0, style=solid];
d167 -> d108  [key=2, style=dotted];
d167 -> d125  [key=2, style=dotted];
d186 -> d187  [key=0, style=solid];
d186 -> d108  [key=2, style=dotted];
d186 -> d125  [key=2, style=dotted];
d20 -> d21  [key=0, style=solid];
d20 -> d11  [key=2, style=dotted];
d6 -> d0  [key=0, style=bold, color=blue];
d5 -> d6  [key=0, style=solid];
d5 -> d11  [key=2, style=dotted];
d103 -> d9  [key=2, style=dotted];
d103 -> d104  [key=0, style=solid];
d103 -> d105  [key=1, style=dashed, color=darkseagreen4, label=result];
d132 -> d9  [key=2, style=dotted];
d132 -> d133  [key=0, style=solid];
d132 -> d134  [key=1, style=dashed, color=darkseagreen4, label=result];
d21 -> d15  [key=0, style=bold, color=blue];
d32 -> d26  [key=0, style=bold, color=blue];
d31 -> d32  [key=0, style=solid];
d31 -> d11  [key=2, style=dotted];
d124 -> d118  [key=0, style=bold, color=blue];
d123 -> d108  [key=2, style=dotted];
d123 -> d124  [key=0, style=solid];
d123 -> d125  [key=2, style=dotted];
d152 -> d143  [key=0, style=bold, color=blue];
d148 -> d108  [key=2, style=dotted];
d148 -> d149  [key=0, style=solid];
d148 -> d125  [key=2, style=dotted];
d149 -> d153  [key=2, style=dotted];
d149 -> d154  [key=2, style=dotted];
d149 -> d150  [key=0, style=solid];
d149 -> d151  [key=1, style=dashed, color=darkseagreen4, label=lines];
d207 -> d198  [key=0, style=bold, color=blue];
d203 -> d108  [key=2, style=dotted];
d203 -> d204  [key=0, style=solid];
d203 -> d125  [key=2, style=dotted];
d204 -> d153  [key=2, style=dotted];
d204 -> d154  [key=2, style=dotted];
d204 -> d205  [key=0, style=solid];
d204 -> d206  [key=1, style=dashed, color=darkseagreen4, label=lines];
d105 -> d108  [key=2, style=dotted];
d105 -> d106  [key=0, style=solid];
d105 -> d110  [key=2, style=dotted];
d105 -> d114  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d104 -> d108  [key=2, style=dotted];
d104 -> d105  [key=0, style=solid];
d104 -> d109  [key=2, style=dotted];
d104 -> d111  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d134 -> d108  [key=2, style=dotted];
d134 -> d135  [key=0, style=solid];
d134 -> d110  [key=2, style=dotted];
d134 -> d140  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d133 -> d108  [key=2, style=dotted];
d133 -> d134  [key=0, style=solid];
d133 -> d109  [key=2, style=dotted];
d133 -> d137  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d150 -> d108  [key=2, style=dotted];
d150 -> d151  [key=0, style=solid];
d150 -> d109  [key=2, style=dotted];
d150 -> d159  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d151 -> d108  [key=2, style=dotted];
d151 -> d155  [key=2, style=dotted];
d151 -> d152  [key=0, style=solid];
d205 -> d108  [key=2, style=dotted];
d205 -> d206  [key=0, style=solid];
d205 -> d109  [key=2, style=dotted];
d205 -> d211  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d206 -> d108  [key=2, style=dotted];
d206 -> d155  [key=2, style=dotted];
d206 -> d207  [key=0, style=solid];
d102 -> d44  [key=2, style=dotted];
d102 -> d103  [key=0, style=solid];
d131 -> d44  [key=2, style=dotted];
d131 -> d132  [key=0, style=solid];
d101 -> d105  [key=1, style=dashed, color=darkseagreen4, label=expectedError];
d101 -> d102  [key=0, style=solid];
d101 -> d107  [key=2, style=dotted];
d101 -> d115  [key=1, style=dashed, color=darkseagreen4, label=expectedError];
d106 -> d100  [key=0, style=bold, color=blue];
d114 -> d115  [key=0, style=solid];
d111 -> d112  [key=0, style=solid];
d130 -> d134  [key=1, style=dashed, color=darkseagreen4, label=expectedError];
d130 -> d131  [key=0, style=solid];
d130 -> d136  [key=2, style=dotted];
d130 -> d141  [key=1, style=dashed, color=darkseagreen4, label=expectedError];
d135 -> d129  [key=0, style=bold, color=blue];
d140 -> d141  [key=0, style=solid];
d137 -> d138  [key=0, style=solid];
d159 -> d160  [key=0, style=solid];
d211 -> d212  [key=0, style=solid];
d100 -> d101  [key=0, style=solid];
d115 -> d116  [key=0, style=solid];
d115 -> d117  [key=2, style=dotted];
d116 -> d114  [key=0, style=bold, color=blue];
d113 -> d111  [key=0, style=bold, color=blue];
d112 -> d113  [key=0, style=solid];
d129 -> d130  [key=0, style=solid];
d141 -> d142  [key=0, style=solid];
d141 -> d117  [key=2, style=dotted];
d142 -> d140  [key=0, style=bold, color=blue];
d139 -> d137  [key=0, style=bold, color=blue];
d138 -> d139  [key=0, style=solid];
d161 -> d159  [key=0, style=bold, color=blue];
d160 -> d161  [key=0, style=solid];
d213 -> d211  [key=0, style=bold, color=blue];
d212 -> d213  [key=0, style=solid];
d217 -> d115  [key=1, style=dashed, color=darkseagreen4, label=expectedError];
d219 -> d141  [key=1, style=dashed, color=darkseagreen4, label=expectedError];
m0_34 -> m0_35  [key=0, style=solid];
m0_35 -> m0_36  [key=0, style=solid];
m0_35 -> m0_31  [key=2, style=dotted];
m0_35 -> m0_37  [key=1, style=dashed, color=darkseagreen4, label=options];
m0_36 -> m0_37  [key=0, style=solid];
m0_36 -> d44  [key=2, style=dotted];
m0_37 -> m0_38  [key=0, style=solid];
m0_37 -> m0_14  [key=2, style=dotted];
m0_38 -> m0_39  [key=0, style=solid];
m0_38 -> m0_15  [key=2, style=dotted];
m0_38 -> m0_33  [key=2, style=dotted];
m0_39 -> m0_34  [key=0, style=bold, color=blue];
m0_19 -> m0_20  [key=0, style=solid];
m0_20 -> m0_21  [key=0, style=solid];
m0_20 -> m0_31  [key=2, style=dotted];
m0_20 -> m0_22  [key=1, style=dashed, color=darkseagreen4, label=options];
m0_20 -> m0_24  [key=1, style=dashed, color=darkseagreen4, label=options];
m0_20 -> m0_25  [key=1, style=dashed, color=darkseagreen4, label=options];
m0_20 -> m0_26  [key=1, style=dashed, color=darkseagreen4, label=options];
m0_20 -> m0_27  [key=1, style=dashed, color=darkseagreen4, label=options];
m0_20 -> m0_28  [key=1, style=dashed, color=darkseagreen4, label=options];
m0_20 -> m0_29  [key=1, style=dashed, color=darkseagreen4, label=options];
m0_21 -> m0_22  [key=0, style=solid];
m0_21 -> d44  [key=2, style=dotted];
m0_22 -> m0_23  [key=0, style=solid];
m0_22 -> m0_14  [key=2, style=dotted];
m0_24 -> m0_25  [key=0, style=solid];
m0_24 -> m0_15  [key=2, style=dotted];
m0_24 -> m0_17  [key=2, style=dotted];
m0_25 -> m0_26  [key=0, style=solid];
m0_25 -> m0_15  [key=2, style=dotted];
m0_25 -> m0_17  [key=2, style=dotted];
m0_26 -> m0_27  [key=0, style=solid];
m0_26 -> m0_15  [key=2, style=dotted];
m0_26 -> m0_17  [key=2, style=dotted];
m0_27 -> m0_28  [key=0, style=solid];
m0_27 -> m0_15  [key=2, style=dotted];
m0_27 -> m0_32  [key=2, style=dotted];
m0_28 -> m0_29  [key=0, style=solid];
m0_28 -> m0_15  [key=2, style=dotted];
m0_28 -> m0_33  [key=2, style=dotted];
m0_29 -> m0_30  [key=0, style=solid];
m0_29 -> m0_18  [key=2, style=dotted];
m0_23 -> m0_24  [key=0, style=solid];
m0_23 -> m0_15  [key=2, style=dotted];
m0_23 -> m0_16  [key=2, style=dotted];
m0_30 -> m0_19  [key=0, style=bold, color=blue];
m0_40 -> m0_41  [key=0, style=solid];
m0_41 -> m0_42  [key=0, style=solid];
m0_41 -> m0_48  [key=2, style=dotted];
m0_41 -> m0_43  [key=1, style=dashed, color=darkseagreen4, label=options];
m0_41 -> m0_45  [key=1, style=dashed, color=darkseagreen4, label=options];
m0_41 -> m0_46  [key=1, style=dashed, color=darkseagreen4, label=options];
m0_42 -> m0_43  [key=0, style=solid];
m0_42 -> d44  [key=2, style=dotted];
m0_43 -> m0_44  [key=0, style=solid];
m0_43 -> m0_14  [key=2, style=dotted];
m0_45 -> m0_46  [key=0, style=solid];
m0_45 -> m0_15  [key=2, style=dotted];
m0_45 -> m0_49  [key=2, style=dotted];
m0_45 -> m0_50  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_46 -> m0_47  [key=0, style=solid];
m0_46 -> m0_18  [key=2, style=dotted];
m0_44 -> m0_45  [key=0, style=solid];
m0_44 -> m0_15  [key=2, style=dotted];
m0_44 -> m0_16  [key=2, style=dotted];
m0_47 -> m0_40  [key=0, style=bold, color=blue];
m0_50 -> m0_51  [key=0, style=solid];
m0_51 -> m0_52  [key=0, style=solid];
m0_52 -> m0_50  [key=0, style=bold, color=blue];
m0_53 -> m0_54  [key=0, style=solid];
m0_54 -> m0_55  [key=0, style=solid];
m0_54 -> m0_48  [key=2, style=dotted];
m0_54 -> m0_56  [key=1, style=dashed, color=darkseagreen4, label=options];
m0_55 -> m0_56  [key=0, style=solid];
m0_55 -> d44  [key=2, style=dotted];
m0_56 -> m0_57  [key=0, style=solid];
m0_56 -> m0_14  [key=2, style=dotted];
m0_57 -> m0_58  [key=0, style=solid];
m0_57 -> m0_15  [key=2, style=dotted];
m0_57 -> m0_33  [key=2, style=dotted];
m0_58 -> m0_53  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_12  [key=2, style=dotted];
m0_1 -> m0_3  [key=1, style=dashed, color=darkseagreen4, label=options];
m0_1 -> m0_5  [key=1, style=dashed, color=darkseagreen4, label=options];
m0_1 -> m0_6  [key=1, style=dashed, color=darkseagreen4, label=options];
m0_1 -> m0_7  [key=1, style=dashed, color=darkseagreen4, label=options];
m0_1 -> m0_8  [key=1, style=dashed, color=darkseagreen4, label=options];
m0_1 -> m0_9  [key=1, style=dashed, color=darkseagreen4, label=options];
m0_1 -> m0_10  [key=1, style=dashed, color=darkseagreen4, label=options];
m0_2 -> m0_3  [key=0, style=solid];
m0_2 -> d44  [key=2, style=dotted];
m0_3 -> m0_4  [key=0, style=solid];
m0_3 -> m0_14  [key=2, style=dotted];
m0_5 -> m0_6  [key=0, style=solid];
m0_5 -> m0_15  [key=2, style=dotted];
m0_5 -> m0_17  [key=2, style=dotted];
m0_6 -> m0_7  [key=0, style=solid];
m0_6 -> m0_15  [key=2, style=dotted];
m0_6 -> m0_17  [key=2, style=dotted];
m0_7 -> m0_8  [key=0, style=solid];
m0_7 -> m0_15  [key=2, style=dotted];
m0_7 -> m0_17  [key=2, style=dotted];
m0_8 -> m0_9  [key=0, style=solid];
m0_8 -> m0_15  [key=2, style=dotted];
m0_8 -> m0_17  [key=2, style=dotted];
m0_9 -> m0_10  [key=0, style=solid];
m0_9 -> m0_15  [key=2, style=dotted];
m0_9 -> m0_16  [key=2, style=dotted];
m0_10 -> m0_11  [key=0, style=solid];
m0_10 -> m0_18  [key=2, style=dotted];
m0_4 -> m0_5  [key=0, style=solid];
m0_4 -> m0_15  [key=2, style=dotted];
m0_4 -> m0_16  [key=2, style=dotted];
m0_11 -> m0_0  [key=0, style=bold, color=blue];
m1_0 -> m1_1  [key=0, style=solid];
m1_1 -> m1_2  [key=0, style=solid];
m1_2 -> m1_0  [key=0, style=bold, color=blue];
m1_3 -> m1_1  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ValueAttribute"];
m3_0 -> m3_1  [key=0, style=solid];
m3_1 -> m3_2  [key=0, style=solid];
m3_2 -> m3_0  [key=0, style=bold, color=blue];
m3_3 -> m3_4  [key=0, style=solid];
m3_4 -> m3_5  [key=0, style=solid];
m3_4 -> m3_0  [key=2, style=dotted];
m3_4 -> m3_6  [key=2, style=dotted];
m3_4 -> m3_7  [key=2, style=dotted];
m3_4 -> m3_8  [key=2, style=dotted];
m3_4 -> m3_9  [key=2, style=dotted];
m3_5 -> m3_3  [key=0, style=bold, color=blue];
m3_10 -> m3_1  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.ValueSpecification"];
m5_0 -> m5_1  [key=0, style=solid];
m5_0 -> m5_3  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_1 -> m5_2  [key=0, style=solid];
m5_1 -> m5_3  [key=0, style=solid];
m5_3 -> m5_4  [key=0, style=solid];
m5_3 -> m5_6  [key=2, style=dotted];
m5_2 -> m5_4  [key=0, style=solid];
m5_2 -> m5_5  [key=2, style=dotted];
m5_4 -> m5_0  [key=0, style=bold, color=blue];
m6_4 -> m6_8  [key=0, style=solid];
m6_8 -> m6_11  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m6_8 -> m6_9  [key=0, style=solid];
m6_9 -> m6_4  [key=0, style=bold, color=blue];
m6_6 -> m6_40  [key=0, style=solid, color=green];
m6_40 -> m6_41  [key=0, style=solid, color=green];
m6_40 -> m6_43  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m6_41 -> m6_6  [key=0, style=bold, color=blue];
m6_7 -> m6_61  [key=0, style=solid];
m6_7 -> m6_65  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
m6_61 -> m6_64  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m6_61 -> m6_61  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Collections.Generic.IEnumerable<CommandLine.Error> "];
m6_61 -> m6_62  [key=0, style=solid];
m6_62 -> m6_7  [key=0, style=bold, color=blue];
m6_0 -> m6_1  [key=0, style=solid];
m6_1 -> m6_6  [key=2, style=dotted];
m6_1 -> m6_2  [key=0, style=solid];
m6_1 -> m6_3  [key=2, style=dotted];
m6_1 -> m6_4  [key=2, style=dotted];
m6_1 -> m6_5  [key=2, style=dotted];
m6_1 -> m6_7  [key=2, style=dotted];
m6_2 -> m6_0  [key=0, style=bold, color=blue];
m6_63 -> m6_64  [key=0, style=solid];
m6_43 -> m6_44  [key=0, style=solid, color=green];
m6_43 -> m6_48  [key=2, style=dotted, color=green];
m6_43 -> m6_51  [key=1, style=dashed, color=green, label="lambda expression"];
m6_43 -> m6_54  [key=1, style=dashed, color=green, label="lambda expression"];
m6_43 -> m6_57  [key=1, style=dashed, color=green, label="lambda expression"];
m6_43 -> m6_45  [key=1, style=dashed, color=green, label=options];
m6_42 -> m6_43  [key=0, style=solid, color=green];
m6_44 -> m6_45  [key=0, style=solid];
m6_44 -> m6_46  [key=0, style=solid];
m6_44 -> m6_49  [key=2, style=dotted];
m6_51 -> m6_52  [key=0, style=solid];
m6_54 -> m6_55  [key=0, style=solid];
m6_57 -> m6_58  [key=0, style=solid, color=green];
m6_45 -> m6_45  [key=1, style=dashed, color=darkseagreen4, label=s];
m6_45 -> m6_47  [key=0, style=solid];
m6_45 -> m6_50  [key=2, style=dotted];
m6_45 -> m6_39  [key=2, style=dotted];
m6_58 -> m6_59  [key=0, style=solid, color=green];
m6_58 -> m6_18  [key=2, style=dotted, color=green];
m6_58 -> m6_60  [key=2, style=dotted, color=green];
m6_59 -> m6_57  [key=0, style=bold, color=blue];
m6_47 -> m6_42  [key=0, style=bold, color=blue];
m6_46 -> m6_47  [key=0, style=solid];
m6_46 -> m6_22  [key=2, style=dotted];
m6_53 -> m6_51  [key=0, style=bold, color=blue];
m6_52 -> m6_53  [key=0, style=solid];
m6_56 -> m6_54  [key=0, style=bold, color=blue];
m6_55 -> m6_18  [key=2, style=dotted];
m6_55 -> m6_56  [key=0, style=solid];
m6_11 -> m6_18  [key=2, style=dotted];
m6_11 -> m6_11  [key=1, style=dashed, color=darkseagreen4, label=sp];
m6_11 -> m6_12  [key=0, style=solid];
m6_11 -> m6_17  [key=2, style=dotted];
m6_11 -> m6_14  [key=1, style=dashed, color=darkseagreen4, label=options];
m6_26 -> m6_18  [key=2, style=dotted];
m6_26 -> m6_26  [key=1, style=dashed, color=darkseagreen4, label=sp];
m6_26 -> m6_27  [key=0, style=solid];
m6_26 -> m6_17  [key=2, style=dotted];
m6_26 -> m6_29  [key=1, style=dashed, color=darkseagreen4, label=requiredWithValue];
m6_64 -> m6_18  [key=2, style=dotted];
m6_64 -> m6_64  [key=1, style=dashed, color=darkseagreen4, label=sp];
m6_64 -> m6_65  [key=0, style=solid];
m6_64 -> m6_17  [key=2, style=dotted];
m6_30 -> m6_39  [key=2, style=dotted];
m6_30 -> m6_30  [key=1, style=dashed, color=darkseagreen4, label=sp];
m6_30 -> m6_31  [key=0, style=solid];
m6_30 -> m6_38  [key=2, style=dotted];
m6_10 -> m6_11  [key=0, style=solid];
m6_12 -> m6_12  [key=1, style=dashed, color=darkseagreen4, label=o];
m6_12 -> m6_13  [key=0, style=solid];
m6_14 -> m6_14  [key=1, style=dashed, color=darkseagreen4, label=o];
m6_14 -> m6_16  [key=0, style=solid];
m6_14 -> m6_20  [key=2, style=dotted];
m6_14 -> m6_21  [key=2, style=dotted];
m6_25 -> m6_26  [key=0, style=solid];
m6_25 -> m6_28  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m6_25 -> m6_29  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m6_27 -> m6_27  [key=1, style=dashed, color=darkseagreen4, label=s];
m6_27 -> m6_28  [key=0, style=solid];
m6_27 -> m6_32  [key=2, style=dotted];
m6_29 -> m6_30  [key=0, style=solid];
m6_29 -> m6_17  [key=2, style=dotted];
m6_29 -> m6_29  [key=1, style=dashed, color=darkseagreen4, label=sp];
m6_29 -> m6_35  [key=2, style=dotted];
m6_29 -> m6_33  [key=2, style=dotted];
m6_29 -> m6_36  [key=2, style=dotted];
m6_29 -> m6_37  [key=2, style=dotted];
m6_65 -> m6_65  [key=1, style=dashed, color=darkseagreen4, label=t];
m6_65 -> m6_66  [key=0, style=solid];
m6_65 -> m6_70  [key=2, style=dotted];
m6_65 -> m6_71  [key=2, style=dotted];
m6_65 -> m6_72  [key=2, style=dotted];
m6_15 -> m6_22  [key=2, style=dotted];
m6_15 -> m6_16  [key=0, style=solid];
m6_31 -> m6_25  [key=0, style=bold, color=blue];
m6_16 -> m6_10  [key=0, style=bold, color=blue];
m6_13 -> m6_14  [key=0, style=solid];
m6_13 -> m6_15  [key=0, style=solid];
m6_13 -> m6_19  [key=2, style=dotted];
m6_28 -> m6_17  [key=2, style=dotted];
m6_28 -> m6_29  [key=0, style=solid];
m6_28 -> m6_28  [key=1, style=dashed, color=darkseagreen4, label=sp];
m6_28 -> m6_33  [key=2, style=dotted];
m6_28 -> m6_34  [key=2, style=dotted];
m6_66 -> m6_66  [key=1, style=dashed, color=darkseagreen4, label=x];
m6_66 -> m6_67  [key=0, style=solid];
m6_66 -> m6_19  [key=2, style=dotted];
m6_68 -> m6_69  [key=0, style=solid];
m6_67 -> m6_68  [key=0, style=solid];
m6_67 -> m6_67  [key=1, style=dashed, color=darkseagreen4, label=y];
m6_67 -> m6_73  [key=2, style=dotted];
m6_67 -> m6_74  [key=2, style=dotted];
m6_69 -> m6_63  [key=0, style=bold, color=blue];
m6_5 -> m6_23  [key=0, style=solid];
m6_23 -> m6_26  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m6_23 -> m6_24  [key=0, style=solid];
m6_23 -> m6_28  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m6_23 -> m6_29  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m6_24 -> m6_5  [key=0, style=bold, color=blue];
m6_82 -> m6_65  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
m7_3 -> n46  [key=0, style=bold, color=blue];
m7_7 -> m7_8  [key=0, style=solid];
m7_8 -> m7_9  [key=0, style=solid];
m7_9 -> m7_7  [key=0, style=bold, color=blue];
m7_0 -> m7_1  [key=0, style=solid];
m7_1 -> m7_0  [key=0, style=bold, color=blue];
m7_25 -> m7_26  [key=0, style=solid, color=green];
m7_26 -> m7_27  [key=0, style=solid, color=green];
m7_27 -> m7_25  [key=0, style=bold, color=blue];
m7_4 -> m7_5  [key=0, style=solid];
m7_5 -> m7_6  [key=0, style=solid];
m7_6 -> m7_4  [key=0, style=bold, color=blue];
m7_10 -> m7_5  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.OptionListAttribute"];
m7_10 -> m7_8  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.OptionListAttribute"];
m9_0 -> m9_1  [key=0, style=solid];
m9_0 -> m9_5  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>"];
m9_1 -> m9_2  [key=0, style=solid];
m9_1 -> m9_3  [key=2, style=dotted];
m9_1 -> m9_4  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_1 -> m9_1  [key=1, style=dashed, color=darkseagreen4, label=tseq];
m9_2 -> m9_0  [key=0, style=bold, color=blue];
m9_11 -> m9_12  [key=0, style=solid];
m9_5 -> m9_6  [key=0, style=solid];
m9_5 -> m9_7  [key=2, style=dotted];
m9_5 -> m9_8  [key=2, style=dotted];
m9_5 -> m9_9  [key=2, style=dotted];
m9_5 -> m9_10  [key=2, style=dotted];
m9_5 -> m9_11  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_4 -> m9_5  [key=0, style=solid];
m9_4 -> m9_12  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Token"];
m9_12 -> m9_13  [key=0, style=solid];
m9_6 -> m9_4  [key=0, style=bold, color=blue];
m9_13 -> m9_11  [key=0, style=bold, color=blue];
m9_14 -> m9_5  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>"];
m9_15 -> m9_12  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Token"];
m9_16 -> m9_12  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Token"];
}
