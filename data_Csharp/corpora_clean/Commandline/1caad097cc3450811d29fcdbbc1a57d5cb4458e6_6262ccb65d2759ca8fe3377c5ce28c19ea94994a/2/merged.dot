digraph  {
m0_65 [label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="InstanceBuilder.cs"];
m0_14 [label="Entry Unk.ThrowingValidate", span="", cluster="Unk.ThrowingValidate", file="InstanceBuilder.cs"];
m0_101 [label="Entry T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="82-82", cluster="T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", file="InstanceBuilder.cs"];
m0_95 [label="Entry string.MatchName(string, string, System.StringComparer)", span="8-8", cluster="string.MatchName(string, string, System.StringComparer)", file="InstanceBuilder.cs"];
m0_140 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", file="InstanceBuilder.cs"];
m0_88 [label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="14-14", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m0_0 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="14-14", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="InstanceBuilder.cs"];
m0_1 [label="var typeInfo = factory.MapValueOrDefault(f => f().GetType(), typeof(T))", span="22-22", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="InstanceBuilder.cs"];
m0_5 [label="Func<T> makeDefault = () =>\r\n                typeof(T).IsMutable()\r\n                    ? factory.MapValueOrDefault(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="33-37", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="InstanceBuilder.cs"];
m0_7 [label="Func<ParserResult<T>> buildUp = () =>\r\n            {\r\n                var tokenizerResult = tokenizer(arguments, optionSpecs);\r\n\r\n                var tokens = tokenizerResult.SucceededWith();\r\n\r\n                var partitions = TokenPartitioner.Partition(\r\n                    tokens,\r\n                    name => TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer));\r\n\r\n                var optionSpecPropsResult =\r\n                    OptionMapper.MapValues(\r\n                        (from pt in specProps where pt.Specification.IsOption() select pt),\r\n                        partitions.Options,\r\n                        (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture),\r\n                        nameComparer);\r\n\r\n                var valueSpecPropsResult =\r\n                    ValueMapper.MapValues(\r\n                        (from pt in specProps where pt.Specification.IsValue() select pt),\r\n                        partitions.Values,\r\n                        (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture));\r\n\r\n                var missingValueErrors = from token in partitions.Errors\r\n                    select\r\n                        new MissingValueOptionError(\r\n                            optionSpecs.Single(o => token.Text.MatchName(o.ShortName, o.LongName, nameComparer))\r\n                                .FromOptionSpecification());\r\n\r\n                var specPropsWithValue =\r\n                    optionSpecPropsResult.SucceededWith().Concat(valueSpecPropsResult.SucceededWith());\r\n\r\n                Func<T> buildMutable = () =>\r\n                {\r\n                    var mutable = factory.MapValueOrDefault(f => f(), Activator.CreateInstance<T>());\r\n                    mutable =\r\n                        mutable.SetProperties(specPropsWithValue, sp => sp.Value.IsJust(), sp => sp.Value.FromJustOrFail())\r\n                            .SetProperties(\r\n                                specPropsWithValue,\r\n                                sp => sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust(),\r\n                                sp => sp.Specification.DefaultValue.FromJustOrFail())\r\n                            .SetProperties(\r\n                                specPropsWithValue,\r\n                                sp =>\r\n                                    sp.Value.IsNothing() && sp.Specification.TargetType == TargetType.Sequence\r\n                                    && sp.Specification.DefaultValue.MatchNothing(),\r\n                                sp => sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray());\r\n                    return mutable;\r\n                };\r\n\r\n                Func<T> buildImmutable = () =>\r\n                {\r\n                    var ctor = typeInfo.GetConstructor((from sp in specProps select sp.Property.PropertyType).ToArray());\r\n                    var values = (from prms in ctor.GetParameters()\r\n                        join sp in specPropsWithValue on prms.Name.ToLower() equals sp.Property.Name.ToLower()\r\n                        select\r\n                            sp.Value.MapValueOrDefault(\r\n                                v => v,\r\n                                sp.Specification.DefaultValue.MapValueOrDefault(\r\n                                    d => d,\r\n                                    sp.Specification.ConversionType.CreateDefaultForImmutable()))).ToArray();\r\n                    var immutable = (T)ctor.Invoke(values);\r\n                    return immutable;\r\n                };\r\n\r\n                var instance = typeInfo.IsMutable() ? buildMutable() : buildImmutable();\r\n\r\n                var validationErrors = specPropsWithValue.Validate(SpecificationPropertyRules.Lookup(tokens));\r\n\r\n                var allErrors =\r\n                    tokenizerResult.SuccessfulMessages()\r\n                        .Concat(missingValueErrors)\r\n                        .Concat(optionSpecPropsResult.SuccessfulMessages())\r\n                        .Concat(valueSpecPropsResult.SuccessfulMessages())\r\n                        .Concat(validationErrors)\r\n                        .Memorize();\r\n\r\n                var warnings = from e in allErrors where nonFatalErrors.Contains(e.Tag) select e;\r\n\r\n                return allErrors.Except(warnings).ToParserResult(instance);\r\n            }", span="42-122", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", color=red, community=0, file="InstanceBuilder.cs"];
m0_8 [label="var preprocessorErrors = arguments.Any()\r\n                ? arguments.Preprocess(PreprocessorGuards.Lookup(nameComparer))\r\n                : Enumerable.Empty<Error>()", span="124-126", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="InstanceBuilder.cs"];
m0_9 [label="var result = arguments.Any()\r\n                ? preprocessorErrors.Any()\r\n                    ? notParsed(preprocessorErrors)\r\n                    : buildUp()\r\n                : buildUp()", span="128-132", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="InstanceBuilder.cs"];
m0_2 [label="var specProps = typeInfo.GetSpecifications(pi => SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>()))", span="24-25", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="InstanceBuilder.cs"];
m0_3 [label="var specs = from pt in specProps select pt.Specification", span="27-27", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="InstanceBuilder.cs"];
m0_4 [label="var optionSpecs = specs\r\n                .ThrowingValidate(SpecificationGuards.Lookup)\r\n                .OfType<OptionSpecification>()", span="29-31", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="InstanceBuilder.cs"];
m0_6 [label="Func<IEnumerable<Error>, ParserResult<T>> notParsed =\r\n                errs => new NotParsed<T>(makeDefault().GetType().ToTypeInfo(), errs)", span="39-40", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="InstanceBuilder.cs"];
m0_10 [label="return result;", span="134-134", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="InstanceBuilder.cs"];
m0_11 [label="Exit CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="14-14", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="InstanceBuilder.cs"];
m0_38 [label="Entry Unk.>", span="", cluster="Unk.>", file="InstanceBuilder.cs"];
m0_46 [label="Entry System.Type.ToTypeInfo()", span="174-174", cluster="System.Type.ToTypeInfo()", file="InstanceBuilder.cs"];
m0_20 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)", file="InstanceBuilder.cs"];
m0_68 [label="Entry CommandLine.Core.Specification.IsValue()", span="15-15", cluster="CommandLine.Core.Specification.IsValue()", file="InstanceBuilder.cs"];
m0_74 [label="Entry System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="40-40", cluster="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", file="InstanceBuilder.cs"];
m0_19 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()", file="InstanceBuilder.cs"];
m0_137 [label="Entry System.Reflection.MethodBase.GetParameters()", span="0-0", cluster="System.Reflection.MethodBase.GetParameters()", file="InstanceBuilder.cs"];
m0_45 [label="Entry CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="163-163", cluster="CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="InstanceBuilder.cs"];
m0_139 [label="Entry System.Type.CreateDefaultForImmutable()", span="149-149", cluster="System.Type.CreateDefaultForImmutable()", file="InstanceBuilder.cs"];
m0_136 [label="Entry Unk.GetConstructor", span="", cluster="Unk.GetConstructor", file="InstanceBuilder.cs"];
m0_70 [label="Entry Unk.Single", span="", cluster="Unk.Single", file="InstanceBuilder.cs"];
m0_13 [label="Entry System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", span="16-16", cluster="System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", file="InstanceBuilder.cs"];
m0_78 [label="Entry Unk.Contains", span="", cluster="Unk.Contains", file="InstanceBuilder.cs"];
m0_16 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="InstanceBuilder.cs"];
m0_21 [label="Entry System.Func<TResult>.Invoke()", span="0-0", cluster="System.Func<TResult>.Invoke()", file="InstanceBuilder.cs"];
m0_25 [label="Entry object.GetType()", span="0-0", cluster="object.GetType()", file="InstanceBuilder.cs"];
m0_145 [label="Entry lambda expression", span="101-101", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_33 [label="typeof(T).IsMutable()\r\n                    ? factory.MapValueOrDefault(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="34-37", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_48 [label="var tokenizerResult = tokenizer(arguments, optionSpecs)", span="44-44", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_50 [label="var partitions = TokenPartitioner.Partition(\r\n                    tokens,\r\n                    name => TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer))", span="48-50", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_82 [label="TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer)", span="50-50", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_51 [label="var optionSpecPropsResult =\r\n                    OptionMapper.MapValues(\r\n                        (from pt in specProps where pt.Specification.IsOption() select pt),\r\n                        partitions.Options,\r\n                        (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture),\r\n                        nameComparer)", span="52-57", cluster="lambda expression", color=red, community=0, file="InstanceBuilder.cs"];
m0_86 [label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="56-56", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_52 [label="var valueSpecPropsResult =\r\n                    ValueMapper.MapValues(\r\n                        (from pt in specProps where pt.Specification.IsValue() select pt),\r\n                        partitions.Values,\r\n                        (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture))", span="59-63", cluster="lambda expression", color=red, community=0, file="InstanceBuilder.cs"];
m0_90 [label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="63-63", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_53 [label="var missingValueErrors = from token in partitions.Errors\r\n                    select\r\n                        new MissingValueOptionError(\r\n                            optionSpecs.Single(o => token.Text.MatchName(o.ShortName, o.LongName, nameComparer))\r\n                                .FromOptionSpecification())", span="65-69", cluster="lambda expression", color=red, community=1, file="InstanceBuilder.cs"];
m0_93 [label="token.Text.MatchName(o.ShortName, o.LongName, nameComparer)", span="68-68", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_55 [label="Func<T> buildMutable = () =>\r\n                {\r\n                    var mutable = factory.MapValueOrDefault(f => f(), Activator.CreateInstance<T>());\r\n                    mutable =\r\n                        mutable.SetProperties(specPropsWithValue, sp => sp.Value.IsJust(), sp => sp.Value.FromJustOrFail())\r\n                            .SetProperties(\r\n                                specPropsWithValue,\r\n                                sp => sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust(),\r\n                                sp => sp.Specification.DefaultValue.FromJustOrFail())\r\n                            .SetProperties(\r\n                                specPropsWithValue,\r\n                                sp =>\r\n                                    sp.Value.IsNothing() && sp.Specification.TargetType == TargetType.Sequence\r\n                                    && sp.Specification.DefaultValue.MatchNothing(),\r\n                                sp => sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray());\r\n                    return mutable;\r\n                }", span="74-90", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_97 [label="var mutable = factory.MapValueOrDefault(f => f(), Activator.CreateInstance<T>())", span="76-76", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_60 [label="var warnings = from e in allErrors where nonFatalErrors.Contains(e.Tag) select e", span="119-119", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_22 [label="Entry lambda expression", span="22-22", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_56 [label="Func<T> buildImmutable = () =>\r\n                {\r\n                    var ctor = typeInfo.GetConstructor((from sp in specProps select sp.Property.PropertyType).ToArray());\r\n                    var values = (from prms in ctor.GetParameters()\r\n                        join sp in specPropsWithValue on prms.Name.ToLower() equals sp.Property.Name.ToLower()\r\n                        select\r\n                            sp.Value.MapValueOrDefault(\r\n                                v => v,\r\n                                sp.Specification.DefaultValue.MapValueOrDefault(\r\n                                    d => d,\r\n                                    sp.Specification.ConversionType.CreateDefaultForImmutable()))).ToArray();\r\n                    var immutable = (T)ctor.Invoke(values);\r\n                    return immutable;\r\n                }", span="92-105", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_131 [label="var ctor = typeInfo.GetConstructor((from sp in specProps select sp.Property.PropertyType).ToArray())", span="94-94", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_57 [label="var instance = typeInfo.IsMutable() ? buildMutable() : buildImmutable()", span="107-107", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_26 [label="Entry lambda expression", span="24-25", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_43 [label="new NotParsed<T>(makeDefault().GetType().ToTypeInfo(), errs)", span="40-40", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_23 [label="f().GetType()", span="22-22", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_24 [label="Exit lambda expression", span="22-22", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_27 [label="SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>())", span="24-25", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_28 [label="Exit lambda expression", span="24-25", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_32 [label="Entry lambda expression", span="33-37", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_34 [label="Exit lambda expression", span="33-37", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_39 [label="Entry lambda expression", span="35-35", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_40 [label="f()", span="35-35", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_41 [label="Exit lambda expression", span="35-35", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_42 [label="Entry lambda expression", span="40-40", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_44 [label="Exit lambda expression", span="40-40", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_47 [label="Entry lambda expression", span="42-122", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_49 [label="var tokens = tokenizerResult.SucceededWith()", span="46-46", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_59 [label="var allErrors =\r\n                    tokenizerResult.SuccessfulMessages()\r\n                        .Concat(missingValueErrors)\r\n                        .Concat(optionSpecPropsResult.SuccessfulMessages())\r\n                        .Concat(valueSpecPropsResult.SuccessfulMessages())\r\n                        .Concat(validationErrors)\r\n                        .Memorize()", span="111-117", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_58 [label="var validationErrors = specPropsWithValue.Validate(SpecificationPropertyRules.Lookup(tokens))", span="109-109", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_81 [label="Entry lambda expression", span="50-50", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_85 [label="Entry lambda expression", span="56-56", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_54 [label="var specPropsWithValue =\r\n                    optionSpecPropsResult.SucceededWith().Concat(valueSpecPropsResult.SucceededWith())", span="71-72", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_89 [label="Entry lambda expression", span="63-63", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_92 [label="Entry lambda expression", span="68-68", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_98 [label="mutable =\r\n                        mutable.SetProperties(specPropsWithValue, sp => sp.Value.IsJust(), sp => sp.Value.FromJustOrFail())\r\n                            .SetProperties(\r\n                                specPropsWithValue,\r\n                                sp => sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust(),\r\n                                sp => sp.Specification.DefaultValue.FromJustOrFail())\r\n                            .SetProperties(\r\n                                specPropsWithValue,\r\n                                sp =>\r\n                                    sp.Value.IsNothing() && sp.Specification.TargetType == TargetType.Sequence\r\n                                    && sp.Specification.DefaultValue.MatchNothing(),\r\n                                sp => sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray())", span="77-88", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_132 [label="var values = (from prms in ctor.GetParameters()\r\n                        join sp in specPropsWithValue on prms.Name.ToLower() equals sp.Property.Name.ToLower()\r\n                        select\r\n                            sp.Value.MapValueOrDefault(\r\n                                v => v,\r\n                                sp.Specification.DefaultValue.MapValueOrDefault(\r\n                                    d => d,\r\n                                    sp.Specification.ConversionType.CreateDefaultForImmutable()))).ToArray()", span="95-102", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_61 [label="return allErrors.Except(warnings).ToParserResult(instance);", span="121-121", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_62 [label="Exit lambda expression", span="42-122", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_83 [label="Exit lambda expression", span="50-50", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_87 [label="Exit lambda expression", span="56-56", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_91 [label="Exit lambda expression", span="63-63", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_94 [label="Exit lambda expression", span="68-68", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_96 [label="Entry lambda expression", span="74-90", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_102 [label="Entry lambda expression", span="76-76", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_99 [label="return mutable;", span="89-89", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_105 [label="Entry lambda expression", span="78-78", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_109 [label="Entry lambda expression", span="78-78", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_113 [label="Entry lambda expression", span="81-81", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_117 [label="Entry lambda expression", span="82-82", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_120 [label="Entry lambda expression", span="85-87", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_124 [label="Entry lambda expression", span="88-88", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_100 [label="Exit lambda expression", span="74-90", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_103 [label="f()", span="76-76", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_104 [label="Exit lambda expression", span="76-76", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_106 [label="sp.Value.IsJust()", span="78-78", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_107 [label="Exit lambda expression", span="78-78", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_110 [label="sp.Value.FromJustOrFail()", span="78-78", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_111 [label="Exit lambda expression", span="78-78", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_114 [label="sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust()", span="81-81", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_115 [label="Exit lambda expression", span="81-81", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_118 [label="sp.Specification.DefaultValue.FromJustOrFail()", span="82-82", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_119 [label="Exit lambda expression", span="82-82", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_121 [label="sp.Value.IsNothing() && sp.Specification.TargetType == TargetType.Sequence\r\n                                    && sp.Specification.DefaultValue.MatchNothing()", span="86-87", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_122 [label="Exit lambda expression", span="85-87", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_125 [label="sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray()", span="88-88", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_126 [label="Exit lambda expression", span="88-88", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_130 [label="Entry lambda expression", span="92-105", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_133 [label="var immutable = (T)ctor.Invoke(values)", span="103-103", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_142 [label="Entry lambda expression", span="99-99", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_134 [label="return immutable;", span="104-104", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_135 [label="Exit lambda expression", span="92-105", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_143 [label=v, span="99-99", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_144 [label="Exit lambda expression", span="99-99", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_146 [label=d, span="101-101", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_147 [label="Exit lambda expression", span="101-101", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_73 [label="Entry CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12", cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="InstanceBuilder.cs"];
m0_18 [label="Entry System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="11-11", cluster="System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", file="InstanceBuilder.cs"];
m0_69 [label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="294-294", cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="InstanceBuilder.cs"];
m0_75 [label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SuccessfulMessages<TSuccess, TMessage>()", span="15-15", cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SuccessfulMessages<TSuccess, TMessage>()", file="InstanceBuilder.cs"];
m0_76 [label="Entry Unk.Concat", span="", cluster="Unk.Concat", file="InstanceBuilder.cs"];
m0_128 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", file="InstanceBuilder.cs"];
m0_129 [label="Entry System.Type.CreateEmptyArray()", span="125-125", cluster="System.Type.CreateEmptyArray()", file="InstanceBuilder.cs"];
m0_127 [label="Entry System.Type.GetGenericArguments()", span="0-0", cluster="System.Type.GetGenericArguments()", file="InstanceBuilder.cs"];
m0_77 [label="Entry Unk.Memorize", span="", cluster="Unk.Memorize", file="InstanceBuilder.cs"];
m0_138 [label="Entry string.ToLower()", span="0-0", cluster="string.ToLower()", file="InstanceBuilder.cs"];
m0_79 [label="Entry Unk.Except", span="", cluster="Unk.Except", file="InstanceBuilder.cs"];
m0_80 [label="Entry Unk.ToParserResult", span="", cluster="Unk.ToParserResult", file="InstanceBuilder.cs"];
m0_84 [label="Entry CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11", cluster="CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="InstanceBuilder.cs"];
m0_30 [label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116", cluster="CSharpx.Maybe.Nothing<T>()", file="InstanceBuilder.cs"];
m0_36 [label="Entry System.Activator.CreateInstance<T>()", span="0-0", cluster="System.Activator.CreateInstance<T>()", file="InstanceBuilder.cs"];
m0_64 [label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()", span="653-653", cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()", file="InstanceBuilder.cs"];
m0_12 [label="Entry CSharpx.Maybe<T1>.MapValueOrDefault<T1, T2>(System.Func<T1, T2>, T2)", span="377-377", cluster="CSharpx.Maybe<T1>.MapValueOrDefault<T1, T2>(System.Func<T1, T2>, T2)", file="InstanceBuilder.cs"];
m0_66 [label="Entry CommandLine.Core.Specification.IsOption()", span="10-10", cluster="CommandLine.Core.Specification.IsOption()", file="InstanceBuilder.cs"];
m0_116 [label="Entry CSharpx.Maybe<T>.IsNothing<T>()", span="334-334", cluster="CSharpx.Maybe<T>.IsNothing<T>()", file="InstanceBuilder.cs"];
m0_123 [label="Entry CSharpx.Maybe<T>.MatchNothing()", span="57-57", cluster="CSharpx.Maybe<T>.MatchNothing()", file="InstanceBuilder.cs"];
m0_35 [label="Entry System.Type.IsMutable()", span="139-139", cluster="System.Type.IsMutable()", file="InstanceBuilder.cs"];
m0_31 [label="Entry CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)", span="21-21", cluster="CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)", file="InstanceBuilder.cs"];
m0_112 [label="Entry CSharpx.Maybe<T>.FromJustOrFail<T>(System.Exception)", span="355-355", cluster="CSharpx.Maybe<T>.FromJustOrFail<T>(System.Exception)", file="InstanceBuilder.cs"];
m0_71 [label="Entry Unk.FromOptionSpecification", span="", cluster="Unk.FromOptionSpecification", file="InstanceBuilder.cs"];
m0_15 [label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0", cluster="System.Collections.IEnumerable.OfType<TResult>()", file="InstanceBuilder.cs"];
m0_17 [label="Entry CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)", span="11-11", cluster="CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)", file="InstanceBuilder.cs"];
m0_141 [label="Entry System.Reflection.ConstructorInfo.Invoke(object[])", span="0-0", cluster="System.Reflection.ConstructorInfo.Invoke(object[])", file="InstanceBuilder.cs"];
m0_37 [label="Entry Unk.ToArray", span="", cluster="Unk.ToArray", file="InstanceBuilder.cs"];
m0_108 [label="Entry CSharpx.Maybe<T>.IsJust<T>()", span="326-326", cluster="CSharpx.Maybe<T>.IsJust<T>()", file="InstanceBuilder.cs"];
m0_29 [label="Entry CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="103-103", cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="InstanceBuilder.cs"];
m0_63 [label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0", cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", file="InstanceBuilder.cs"];
m0_72 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="InstanceBuilder.cs"];
m0_67 [label="Entry Unk.MapValues", span="", cluster="Unk.MapValues", file="InstanceBuilder.cs"];
m0_148 [label="CSharpx.Maybe<System.Func<T>>", span="", file="InstanceBuilder.cs"];
m0_149 [label=specProps, span="", file="InstanceBuilder.cs"];
m0_150 [label=makeDefault, span="", file="InstanceBuilder.cs"];
m0_151 [label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>", span="", file="InstanceBuilder.cs"];
m0_152 [label="System.Collections.Generic.IEnumerable<string>", span="", file="InstanceBuilder.cs"];
m0_153 [label=optionSpecs, span="", file="InstanceBuilder.cs"];
m0_154 [label="System.StringComparer", span="", file="InstanceBuilder.cs"];
m0_155 [label="System.Globalization.CultureInfo", span="", file="InstanceBuilder.cs"];
m0_156 [label=typeInfo, span="", file="InstanceBuilder.cs"];
m0_157 [label="System.Collections.Generic.IEnumerable<CommandLine.ErrorType>", span="", file="InstanceBuilder.cs"];
m0_158 [label=token, span="", file="InstanceBuilder.cs"];
m0_159 [label=specPropsWithValue, span="", file="InstanceBuilder.cs"];
m2_0 [label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs"];
m2_1 [label="var tokenList = tokens.Memorize()", span="16-16", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs", color=green, community=0];
m2_2 [label="var switches = Switch.Partition(tokenList, typeLookup).Memorize()", span="17-17", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs"];
m2_3 [label="var scalars = Scalar.Partition(tokenList, typeLookup).Memorize()", span="18-18", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs"];
m2_4 [label="var sequences = Sequence.Partition(tokenList, typeLookup).Memorize()", span="19-19", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs"];
m2_5 [label="var nonOptions = tokenList\r\n                .Where(t => !switches.Contains(t))\r\n                .Where(t => !scalars.Contains(t))\r\n                .Where(t => !sequences.Contains(t)).Memorize()", span="20-23", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs"];
m2_8 [label="return TokenPartitions.Create(\r\n                    KeyValuePairHelper.ForSwitch(switches)\r\n                        .Concat(KeyValuePairHelper.ForScalar(scalars))\r\n                        .Concat(KeyValuePairHelper.ForSequence(sequences)),\r\n                values.Select(t => t.Text),\r\n                errors);", span="27-32", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", color=green, community=0, file="TokenPartitioner.cs"];
m2_6 [label="var values = nonOptions.Where(v => v.IsValue()).Memorize()", span="24-24", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs"];
m2_7 [label="var errors = nonOptions.Except(values).Memorize()", span="25-25", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs"];
m2_9 [label="Exit CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs"];
m2_14 [label="Entry Unk.Where", span="", cluster="Unk.Where", file="TokenPartitioner.cs"];
m2_22 [label="Entry Unk.Create", span="", cluster="Unk.Create", file="TokenPartitioner.cs"];
m2_26 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", file="TokenPartitioner.cs"];
m2_13 [label="Entry CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12", cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs"];
m2_21 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="TokenPartitioner.cs"];
m2_15 [label="Entry Unk.Memorize", span="", cluster="Unk.Memorize", file="TokenPartitioner.cs"];
m2_30 [label="Entry Unk.Contains", span="", cluster="Unk.Contains", file="TokenPartitioner.cs"];
m2_11 [label="Entry CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11", cluster="CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs"];
m2_16 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Except<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Except<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="TokenPartitioner.cs"];
m2_38 [label="Entry lambda expression", span="31-31", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_24 [label="!switches.Contains(t)", span="21-21", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_28 [label="!scalars.Contains(t)", span="22-22", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_32 [label="!sequences.Contains(t)", span="23-23", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_23 [label="Entry lambda expression", span="21-21", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_27 [label="Entry lambda expression", span="22-22", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_31 [label="Entry lambda expression", span="23-23", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_34 [label="Entry lambda expression", span="24-24", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_25 [label="Exit lambda expression", span="21-21", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_29 [label="Exit lambda expression", span="22-22", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_33 [label="Exit lambda expression", span="23-23", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_35 [label="v.IsValue()", span="24-24", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_36 [label="Exit lambda expression", span="24-24", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_39 [label="t.Text", span="31-31", cluster="lambda expression", file="TokenPartitioner.cs", color=green, community=0];
m2_40 [label="Exit lambda expression", span="31-31", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_10 [label="Entry System.Collections.Generic.IEnumerable<T>.Memorize<T>()", span="374-374", cluster="System.Collections.Generic.IEnumerable<T>.Memorize<T>()", file="TokenPartitioner.cs"];
m2_17 [label="Entry CommandLine.Core.KeyValuePairHelper.ForSwitch(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="10-10", cluster="CommandLine.Core.KeyValuePairHelper.ForSwitch(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="TokenPartitioner.cs"];
m2_12 [label="Entry CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12", cluster="CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs"];
m2_18 [label="Entry CommandLine.Core.KeyValuePairHelper.ForScalar(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="16-16", cluster="CommandLine.Core.KeyValuePairHelper.ForScalar(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="TokenPartitioner.cs"];
m2_37 [label="Entry Unk.IsValue", span="", cluster="Unk.IsValue", file="TokenPartitioner.cs"];
m2_19 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="TokenPartitioner.cs"];
m2_20 [label="Entry CommandLine.Core.KeyValuePairHelper.ForSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="22-22", cluster="CommandLine.Core.KeyValuePairHelper.ForSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="TokenPartitioner.cs"];
m2_41 [label=switches, span="", file="TokenPartitioner.cs"];
m2_42 [label=scalars, span="", file="TokenPartitioner.cs"];
m2_43 [label=sequences, span="", file="TokenPartitioner.cs"];
m4_0 [label="Entry CommandLine.Core.TokenPartitions.TokenPartitions(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12", cluster="CommandLine.Core.TokenPartitions.TokenPartitions(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="TokenPartitions.cs"];
m4_1 [label="this.options = options", span="17-17", cluster="CommandLine.Core.TokenPartitions.TokenPartitions(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", color=red, community=0, file="TokenPartitions.cs"];
m4_2 [label="this.values = values", span="18-18", cluster="CommandLine.Core.TokenPartitions.TokenPartitions(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", color=red, community=0, file="TokenPartitions.cs"];
m4_3 [label="this.errors = errors", span="19-19", cluster="CommandLine.Core.TokenPartitions.TokenPartitions(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", color=red, community=0, file="TokenPartitions.cs"];
m4_4 [label="Exit CommandLine.Core.TokenPartitions.TokenPartitions(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12", cluster="CommandLine.Core.TokenPartitions.TokenPartitions(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="TokenPartitions.cs"];
m4_5 [label="Entry CommandLine.Core.TokenPartitions.Create(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="37-37", cluster="CommandLine.Core.TokenPartitions.Create(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="TokenPartitions.cs"];
m4_6 [label="return new TokenPartitions(options, values, errors);", span="42-42", cluster="CommandLine.Core.TokenPartitions.Create(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", color=red, community=0, file="TokenPartitions.cs"];
m4_7 [label="Exit CommandLine.Core.TokenPartitions.Create(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="37-37", cluster="CommandLine.Core.TokenPartitions.Create(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="TokenPartitions.cs"];
m4_8 [label="CommandLine.Core.TokenPartitions", span="", file="TokenPartitions.cs"];
m0_0 -> m0_1  [key=0, style=solid];
m0_0 -> m0_5  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Func<T>>"];
m0_0 -> m0_33  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Func<T>>"];
m0_0 -> m0_7  [key=1, style=dashed, color=red, label="CSharpx.Maybe<System.Func<T>>"];
m0_0 -> m0_48  [key=1, style=dashed, color=darkseagreen4, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>"];
m0_0 -> m0_50  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_0 -> m0_82  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_0 -> m0_51  [key=1, style=dashed, color=red, label="System.StringComparer"];
m0_0 -> m0_86  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m0_0 -> m0_52  [key=1, style=dashed, color=red, label="System.Globalization.CultureInfo"];
m0_0 -> m0_90  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m0_0 -> m0_53  [key=1, style=dashed, color=red, label="System.StringComparer"];
m0_0 -> m0_93  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_0 -> m0_55  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Func<T>>"];
m0_0 -> m0_97  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Func<T>>"];
m0_0 -> m0_60  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.ErrorType>"];
m0_0 -> m0_8  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m0_0 -> m0_9  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_12  [key=2, style=dotted];
m0_1 -> m0_22  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_1 -> m0_7  [key=1, style=dashed, color=red, label=typeInfo];
m0_1 -> m0_56  [key=1, style=dashed, color=darkseagreen4, label=typeInfo];
m0_1 -> m0_131  [key=1, style=dashed, color=darkseagreen4, label=typeInfo];
m0_1 -> m0_57  [key=1, style=dashed, color=darkseagreen4, label=typeInfo];
m0_5 -> m0_6  [key=0, style=solid];
m0_5 -> m0_43  [key=1, style=dashed, color=darkseagreen4, label=makeDefault];
m0_5 -> m0_5  [key=3, color=darkorchid, style=bold, label="Local variable System.Func<T> makeDefault"];
m0_7 -> m0_8  [key=0, style=solid, color=red];
m0_7 -> m0_9  [key=1, style=dashed, color=red, label=buildUp];
m0_7 -> m0_7  [key=3, color=red, style=bold, label="Local variable System.Func<CommandLine.ParserResult<T>> buildUp"];
m0_8 -> m0_9  [key=0, style=solid];
m0_8 -> m0_16  [key=2, style=dotted];
m0_8 -> m0_17  [key=2, style=dotted];
m0_8 -> m0_18  [key=2, style=dotted];
m0_8 -> m0_19  [key=2, style=dotted];
m0_9 -> m0_10  [key=0, style=solid];
m0_9 -> m0_16  [key=2, style=dotted];
m0_9 -> m0_20  [key=2, style=dotted];
m0_9 -> m0_21  [key=2, style=dotted];
m0_2 -> m0_3  [key=0, style=solid];
m0_2 -> m0_13  [key=2, style=dotted];
m0_2 -> m0_26  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_2 -> m0_5  [key=1, style=dashed, color=darkseagreen4, label=specProps];
m0_2 -> m0_33  [key=1, style=dashed, color=darkseagreen4, label=specProps];
m0_2 -> m0_7  [key=1, style=dashed, color=red, label=specProps];
m0_2 -> m0_51  [key=1, style=dashed, color=red, label=specProps];
m0_2 -> m0_52  [key=1, style=dashed, color=red, label=specProps];
m0_2 -> m0_56  [key=1, style=dashed, color=darkseagreen4, label=specProps];
m0_2 -> m0_131  [key=1, style=dashed, color=darkseagreen4, label=specProps];
m0_3 -> m0_4  [key=0, style=solid];
m0_3 -> m0_3  [key=1, style=dashed, color=darkseagreen4, label=pt];
m0_4 -> m0_5  [key=0, style=solid];
m0_4 -> m0_14  [key=2, style=dotted];
m0_4 -> m0_15  [key=2, style=dotted];
m0_4 -> m0_7  [key=1, style=dashed, color=red, label=optionSpecs];
m0_4 -> m0_48  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
m0_4 -> m0_50  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
m0_4 -> m0_82  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
m0_4 -> m0_53  [key=1, style=dashed, color=red, label=optionSpecs];
m0_6 -> m0_7  [key=0, style=solid, color=red];
m0_6 -> m0_43  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Error>"];
m0_6 -> m0_9  [key=1, style=dashed, color=darkseagreen4, label=notParsed];
m0_6 -> m0_6  [key=3, color=darkorchid, style=bold, label="Local variable System.Func<System.Collections.Generic.IEnumerable<CommandLine.Error>, CommandLine.ParserResult<T>> notParsed"];
m0_10 -> m0_11  [key=0, style=solid];
m0_11 -> m0_0  [key=0, style=bold, color=blue];
m0_145 -> m0_146  [key=0, style=solid];
m0_33 -> m0_34  [key=0, style=solid];
m0_33 -> m0_35  [key=2, style=dotted];
m0_33 -> m0_36  [key=2, style=dotted];
m0_33 -> m0_12  [key=2, style=dotted];
m0_33 -> m0_37  [key=2, style=dotted];
m0_33 -> m0_38  [key=2, style=dotted];
m0_33 -> m0_39  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_33 -> m0_33  [key=1, style=dashed, color=darkseagreen4, label=p];
m0_48 -> m0_49  [key=0, style=solid];
m0_48 -> m0_63  [key=2, style=dotted];
m0_48 -> m0_59  [key=1, style=dashed, color=darkseagreen4, label=tokenizerResult];
m0_50 -> m0_51  [key=0, style=solid, color=red];
m0_50 -> m0_65  [key=2, style=dotted];
m0_50 -> m0_81  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_50 -> m0_52  [key=1, style=dashed, color=red, label=partitions];
m0_50 -> m0_53  [key=1, style=dashed, color=red, label=partitions];
m0_82 -> m0_83  [key=0, style=solid];
m0_82 -> m0_84  [key=2, style=dotted];
m0_51 -> m0_52  [key=0, style=solid, color=red];
m0_51 -> m0_66  [key=2, style=dotted, color=red];
m0_51 -> m0_67  [key=2, style=dotted, color=red];
m0_51 -> m0_51  [key=1, style=dashed, color=red, label=pt];
m0_51 -> m0_85  [key=1, style=dashed, color=red, label="lambda expression"];
m0_51 -> m0_54  [key=1, style=dashed, color=red, label=optionSpecPropsResult];
m0_51 -> m0_59  [key=1, style=dashed, color=red, label=optionSpecPropsResult];
m0_86 -> m0_87  [key=0, style=solid];
m0_86 -> m0_88  [key=2, style=dotted];
m0_52 -> m0_53  [key=0, style=solid, color=red];
m0_52 -> m0_68  [key=2, style=dotted, color=red];
m0_52 -> m0_67  [key=2, style=dotted, color=red];
m0_52 -> m0_52  [key=1, style=dashed, color=red, label=pt];
m0_52 -> m0_89  [key=1, style=dashed, color=red, label="lambda expression"];
m0_52 -> m0_54  [key=1, style=dashed, color=red, label=valueSpecPropsResult];
m0_52 -> m0_59  [key=1, style=dashed, color=red, label=valueSpecPropsResult];
m0_90 -> m0_91  [key=0, style=solid];
m0_90 -> m0_88  [key=2, style=dotted];
m0_53 -> m0_54  [key=0, style=solid, color=red];
m0_53 -> m0_69  [key=2, style=dotted, color=red];
m0_53 -> m0_70  [key=2, style=dotted, color=red];
m0_53 -> m0_71  [key=2, style=dotted, color=red];
m0_53 -> m0_53  [key=1, style=dashed, color=red, label=token];
m0_53 -> m0_92  [key=1, style=dashed, color=red, label="lambda expression"];
m0_53 -> m0_93  [key=1, style=dashed, color=red, label=token];
m0_53 -> m0_59  [key=1, style=dashed, color=red, label=missingValueErrors];
m0_93 -> m0_94  [key=0, style=solid];
m0_93 -> m0_95  [key=2, style=dotted];
m0_55 -> m0_56  [key=0, style=solid];
m0_55 -> m0_57  [key=1, style=dashed, color=darkseagreen4, label=buildMutable];
m0_97 -> m0_98  [key=0, style=solid];
m0_97 -> m0_36  [key=2, style=dotted];
m0_97 -> m0_12  [key=2, style=dotted];
m0_97 -> m0_102  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_60 -> m0_61  [key=0, style=solid];
m0_60 -> m0_78  [key=2, style=dotted];
m0_60 -> m0_60  [key=1, style=dashed, color=darkseagreen4, label=e];
m0_22 -> m0_23  [key=0, style=solid];
m0_56 -> m0_57  [key=0, style=solid];
m0_131 -> m0_132  [key=0, style=solid];
m0_131 -> m0_37  [key=2, style=dotted];
m0_131 -> m0_136  [key=2, style=dotted];
m0_131 -> m0_131  [key=1, style=dashed, color=darkseagreen4, label=sp];
m0_131 -> m0_133  [key=1, style=dashed, color=darkseagreen4, label=ctor];
m0_57 -> m0_58  [key=0, style=solid];
m0_57 -> m0_35  [key=2, style=dotted];
m0_57 -> m0_21  [key=2, style=dotted];
m0_57 -> m0_61  [key=1, style=dashed, color=darkseagreen4, label=instance];
m0_26 -> m0_27  [key=0, style=solid];
m0_43 -> m0_44  [key=0, style=solid];
m0_43 -> m0_45  [key=2, style=dotted];
m0_43 -> m0_21  [key=2, style=dotted];
m0_43 -> m0_25  [key=2, style=dotted];
m0_43 -> m0_46  [key=2, style=dotted];
m0_23 -> m0_24  [key=0, style=solid];
m0_23 -> m0_21  [key=2, style=dotted];
m0_23 -> m0_25  [key=2, style=dotted];
m0_24 -> m0_22  [key=0, style=bold, color=blue];
m0_27 -> m0_28  [key=0, style=solid];
m0_27 -> m0_29  [key=2, style=dotted];
m0_27 -> m0_30  [key=2, style=dotted];
m0_27 -> m0_31  [key=2, style=dotted];
m0_28 -> m0_26  [key=0, style=bold, color=blue];
m0_32 -> m0_33  [key=0, style=solid];
m0_34 -> m0_32  [key=0, style=bold, color=blue];
m0_39 -> m0_40  [key=0, style=solid];
m0_40 -> m0_41  [key=0, style=solid];
m0_40 -> m0_21  [key=2, style=dotted];
m0_41 -> m0_39  [key=0, style=bold, color=blue];
m0_42 -> m0_43  [key=0, style=solid];
m0_44 -> m0_42  [key=0, style=bold, color=blue];
m0_47 -> m0_48  [key=0, style=solid];
m0_49 -> m0_50  [key=0, style=solid];
m0_49 -> m0_64  [key=2, style=dotted];
m0_49 -> m0_58  [key=1, style=dashed, color=darkseagreen4, label=tokens];
m0_59 -> m0_60  [key=0, style=solid];
m0_59 -> m0_75  [key=2, style=dotted];
m0_59 -> m0_76  [key=2, style=dotted];
m0_59 -> m0_77  [key=2, style=dotted];
m0_59 -> m0_61  [key=1, style=dashed, color=darkseagreen4, label=allErrors];
m0_58 -> m0_59  [key=0, style=solid];
m0_58 -> m0_73  [key=2, style=dotted];
m0_58 -> m0_74  [key=2, style=dotted];
m0_81 -> m0_82  [key=0, style=solid];
m0_85 -> m0_86  [key=0, style=solid];
m0_54 -> m0_55  [key=0, style=solid];
m0_54 -> m0_64  [key=2, style=dotted];
m0_54 -> m0_72  [key=2, style=dotted];
m0_54 -> m0_98  [key=1, style=dashed, color=darkseagreen4, label=specPropsWithValue];
m0_54 -> m0_56  [key=1, style=dashed, color=darkseagreen4, label=specPropsWithValue];
m0_54 -> m0_132  [key=1, style=dashed, color=darkseagreen4, label=specPropsWithValue];
m0_54 -> m0_58  [key=1, style=dashed, color=darkseagreen4, label=specPropsWithValue];
m0_89 -> m0_90  [key=0, style=solid];
m0_92 -> m0_93  [key=0, style=solid];
m0_98 -> m0_99  [key=0, style=solid];
m0_98 -> m0_101  [key=2, style=dotted];
m0_98 -> m0_98  [key=1, style=dashed, color=darkseagreen4, label=mutable];
m0_98 -> m0_105  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_98 -> m0_109  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_98 -> m0_113  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_98 -> m0_117  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_98 -> m0_120  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_98 -> m0_124  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_132 -> m0_133  [key=0, style=solid];
m0_132 -> m0_137  [key=2, style=dotted];
m0_132 -> m0_138  [key=2, style=dotted];
m0_132 -> m0_139  [key=2, style=dotted];
m0_132 -> m0_12  [key=2, style=dotted];
m0_132 -> m0_140  [key=2, style=dotted];
m0_132 -> m0_132  [key=1, style=dashed, color=darkseagreen4, label=prms];
m0_132 -> m0_142  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_132 -> m0_145  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_61 -> m0_62  [key=0, style=solid];
m0_61 -> m0_79  [key=2, style=dotted];
m0_61 -> m0_80  [key=2, style=dotted];
m0_62 -> m0_47  [key=0, style=bold, color=blue];
m0_83 -> m0_81  [key=0, style=bold, color=blue];
m0_87 -> m0_85  [key=0, style=bold, color=blue];
m0_91 -> m0_89  [key=0, style=bold, color=blue];
m0_94 -> m0_92  [key=0, style=bold, color=blue];
m0_96 -> m0_97  [key=0, style=solid];
m0_102 -> m0_103  [key=0, style=solid];
m0_99 -> m0_100  [key=0, style=solid];
m0_105 -> m0_106  [key=0, style=solid];
m0_109 -> m0_110  [key=0, style=solid];
m0_113 -> m0_114  [key=0, style=solid];
m0_117 -> m0_118  [key=0, style=solid];
m0_120 -> m0_121  [key=0, style=solid];
m0_124 -> m0_125  [key=0, style=solid];
m0_100 -> m0_96  [key=0, style=bold, color=blue];
m0_103 -> m0_104  [key=0, style=solid];
m0_103 -> m0_21  [key=2, style=dotted];
m0_104 -> m0_102  [key=0, style=bold, color=blue];
m0_106 -> m0_107  [key=0, style=solid];
m0_106 -> m0_108  [key=2, style=dotted];
m0_107 -> m0_105  [key=0, style=bold, color=blue];
m0_110 -> m0_111  [key=0, style=solid];
m0_110 -> m0_112  [key=2, style=dotted];
m0_111 -> m0_109  [key=0, style=bold, color=blue];
m0_114 -> m0_115  [key=0, style=solid];
m0_114 -> m0_116  [key=2, style=dotted];
m0_114 -> m0_108  [key=2, style=dotted];
m0_115 -> m0_113  [key=0, style=bold, color=blue];
m0_118 -> m0_119  [key=0, style=solid];
m0_118 -> m0_112  [key=2, style=dotted];
m0_119 -> m0_117  [key=0, style=bold, color=blue];
m0_121 -> m0_122  [key=0, style=solid];
m0_121 -> m0_116  [key=2, style=dotted];
m0_121 -> m0_123  [key=2, style=dotted];
m0_122 -> m0_120  [key=0, style=bold, color=blue];
m0_125 -> m0_126  [key=0, style=solid];
m0_125 -> m0_127  [key=2, style=dotted];
m0_125 -> m0_128  [key=2, style=dotted];
m0_125 -> m0_129  [key=2, style=dotted];
m0_126 -> m0_124  [key=0, style=bold, color=blue];
m0_130 -> m0_131  [key=0, style=solid];
m0_133 -> m0_134  [key=0, style=solid];
m0_133 -> m0_141  [key=2, style=dotted];
m0_142 -> m0_143  [key=0, style=solid];
m0_134 -> m0_135  [key=0, style=solid];
m0_135 -> m0_130  [key=0, style=bold, color=blue];
m0_143 -> m0_144  [key=0, style=solid];
m0_144 -> m0_142  [key=0, style=bold, color=blue];
m0_146 -> m0_147  [key=0, style=solid];
m0_147 -> m0_145  [key=0, style=bold, color=blue];
m0_148 -> m0_33  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Func<T>>"];
m0_148 -> m0_55  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Func<T>>"];
m0_148 -> m0_97  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Func<T>>"];
m0_149 -> m0_33  [key=1, style=dashed, color=darkseagreen4, label=specProps];
m0_149 -> m0_51  [key=1, style=dashed, color=red, label=specProps];
m0_149 -> m0_52  [key=1, style=dashed, color=red, label=specProps];
m0_149 -> m0_56  [key=1, style=dashed, color=darkseagreen4, label=specProps];
m0_149 -> m0_131  [key=1, style=dashed, color=darkseagreen4, label=specProps];
m0_150 -> m0_43  [key=1, style=dashed, color=darkseagreen4, label=makeDefault];
m0_151 -> m0_48  [key=1, style=dashed, color=darkseagreen4, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>"];
m0_152 -> m0_48  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m0_153 -> m0_48  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
m0_153 -> m0_50  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
m0_153 -> m0_82  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
m0_153 -> m0_53  [key=1, style=dashed, color=red, label=optionSpecs];
m0_154 -> m0_50  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_154 -> m0_82  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_154 -> m0_51  [key=1, style=dashed, color=red, label="System.StringComparer"];
m0_154 -> m0_53  [key=1, style=dashed, color=red, label="System.StringComparer"];
m0_154 -> m0_93  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_155 -> m0_51  [key=1, style=dashed, color=red, label="System.Globalization.CultureInfo"];
m0_155 -> m0_86  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m0_155 -> m0_52  [key=1, style=dashed, color=red, label="System.Globalization.CultureInfo"];
m0_155 -> m0_90  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m0_156 -> m0_56  [key=1, style=dashed, color=darkseagreen4, label=typeInfo];
m0_156 -> m0_131  [key=1, style=dashed, color=darkseagreen4, label=typeInfo];
m0_156 -> m0_57  [key=1, style=dashed, color=darkseagreen4, label=typeInfo];
m0_157 -> m0_60  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.ErrorType>"];
m0_158 -> m0_93  [key=1, style=dashed, color=darkseagreen4, label=token];
m0_159 -> m0_98  [key=1, style=dashed, color=darkseagreen4, label=specPropsWithValue];
m0_159 -> m0_132  [key=1, style=dashed, color=darkseagreen4, label=specPropsWithValue];
m2_0 -> m2_1  [key=0, style=solid, color=green];
m2_0 -> m2_2  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>"];
m2_0 -> m2_3  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>"];
m2_0 -> m2_4  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>"];
m2_1 -> m2_2  [key=0, style=solid, color=green];
m2_1 -> m2_10  [key=2, style=dotted, color=green];
m2_1 -> m2_3  [key=1, style=dashed, color=green, label=tokenList];
m2_1 -> m2_4  [key=1, style=dashed, color=green, label=tokenList];
m2_1 -> m2_5  [key=1, style=dashed, color=green, label=tokenList];
m2_2 -> m2_3  [key=0, style=solid];
m2_2 -> m2_11  [key=2, style=dotted];
m2_2 -> m2_10  [key=2, style=dotted];
m2_2 -> m2_5  [key=1, style=dashed, color=darkseagreen4, label=switches];
m2_2 -> m2_24  [key=1, style=dashed, color=darkseagreen4, label=switches];
m2_2 -> m2_8  [key=1, style=dashed, color=green, label=switches];
m2_3 -> m2_4  [key=0, style=solid];
m2_3 -> m2_12  [key=2, style=dotted];
m2_3 -> m2_10  [key=2, style=dotted];
m2_3 -> m2_5  [key=1, style=dashed, color=darkseagreen4, label=scalars];
m2_3 -> m2_28  [key=1, style=dashed, color=darkseagreen4, label=scalars];
m2_3 -> m2_8  [key=1, style=dashed, color=green, label=scalars];
m2_4 -> m2_5  [key=0, style=solid];
m2_4 -> m2_13  [key=2, style=dotted];
m2_4 -> m2_10  [key=2, style=dotted];
m2_4 -> m2_32  [key=1, style=dashed, color=darkseagreen4, label=sequences];
m2_4 -> m2_8  [key=1, style=dashed, color=green, label=sequences];
m2_5 -> m2_6  [key=0, style=solid];
m2_5 -> m2_14  [key=2, style=dotted];
m2_5 -> m2_15  [key=2, style=dotted];
m2_5 -> m2_23  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_5 -> m2_27  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_5 -> m2_31  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_5 -> m2_7  [key=1, style=dashed, color=darkseagreen4, label=nonOptions];
m2_8 -> m2_9  [key=0, style=solid, color=green];
m2_8 -> m2_17  [key=2, style=dotted, color=green];
m2_8 -> m2_18  [key=2, style=dotted, color=green];
m2_8 -> m2_19  [key=2, style=dotted, color=green];
m2_8 -> m2_20  [key=2, style=dotted, color=green];
m2_8 -> m2_21  [key=2, style=dotted, color=green];
m2_8 -> m2_22  [key=2, style=dotted, color=green];
m2_8 -> m2_38  [key=1, style=dashed, color=green, label="lambda expression"];
m2_6 -> m2_7  [key=0, style=solid];
m2_6 -> m2_14  [key=2, style=dotted];
m2_6 -> m2_15  [key=2, style=dotted];
m2_6 -> m2_34  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_6 -> m2_8  [key=1, style=dashed, color=green, label=values];
m2_7 -> m2_8  [key=0, style=solid, color=green];
m2_7 -> m2_16  [key=2, style=dotted];
m2_7 -> m2_10  [key=2, style=dotted];
m2_9 -> m2_0  [key=0, style=bold, color=blue];
m2_38 -> m2_39  [key=0, style=solid, color=green];
m2_24 -> m2_25  [key=0, style=solid];
m2_24 -> m2_26  [key=2, style=dotted];
m2_28 -> m2_29  [key=0, style=solid];
m2_28 -> m2_30  [key=2, style=dotted];
m2_32 -> m2_33  [key=0, style=solid];
m2_32 -> m2_30  [key=2, style=dotted];
m2_23 -> m2_24  [key=0, style=solid];
m2_27 -> m2_28  [key=0, style=solid];
m2_31 -> m2_32  [key=0, style=solid];
m2_34 -> m2_35  [key=0, style=solid];
m2_25 -> m2_23  [key=0, style=bold, color=blue];
m2_29 -> m2_27  [key=0, style=bold, color=blue];
m2_33 -> m2_31  [key=0, style=bold, color=blue];
m2_35 -> m2_36  [key=0, style=solid];
m2_35 -> m2_37  [key=2, style=dotted];
m2_36 -> m2_34  [key=0, style=bold, color=blue];
m2_39 -> m2_40  [key=0, style=solid, color=green];
m2_40 -> m2_38  [key=0, style=bold, color=blue];
m2_41 -> m2_24  [key=1, style=dashed, color=darkseagreen4, label=switches];
m2_42 -> m2_28  [key=1, style=dashed, color=darkseagreen4, label=scalars];
m2_43 -> m2_32  [key=1, style=dashed, color=darkseagreen4, label=sequences];
m4_0 -> m4_1  [key=0, style=solid, color=red];
m4_0 -> m4_2  [key=1, style=dashed, color=red, label="System.Collections.Generic.IEnumerable<string>"];
m4_0 -> m4_3  [key=1, style=dashed, color=red, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
m4_1 -> m4_2  [key=0, style=solid, color=red];
m4_2 -> m4_3  [key=0, style=solid, color=red];
m4_3 -> m4_4  [key=0, style=solid, color=red];
m4_4 -> m4_0  [key=0, style=bold, color=blue];
m4_5 -> m4_6  [key=0, style=solid, color=red];
m4_6 -> m4_7  [key=0, style=solid, color=red];
m4_6 -> m4_0  [key=2, style=dotted, color=red];
m4_7 -> m4_5  [key=0, style=bold, color=blue];
m4_8 -> m4_1  [key=1, style=dashed, color=red, label="CommandLine.Core.TokenPartitions"];
m4_8 -> m4_2  [key=1, style=dashed, color=red, label="CommandLine.Core.TokenPartitions"];
m4_8 -> m4_3  [key=1, style=dashed, color=red, label="CommandLine.Core.TokenPartitions"];
}
